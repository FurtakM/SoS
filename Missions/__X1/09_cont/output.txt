// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42410 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42410 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42410 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6810 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9548 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9548 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38678 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38786 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 38967 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 38887 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42410 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42410 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42410 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 62656 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 62776 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42410 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42382 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42382 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 57
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 69
2534: IFFALSE 2485
// DialogueOn ;
2536: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2540: LD_EXP 18
2544: PPUSH
2545: LD_STRING DL-Intro-18
2547: PPUSH
2548: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2552: LD_EXP 18
2556: PPUSH
2557: LD_STRING DL-Intro-19
2559: PPUSH
2560: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2564: LD_EXP 18
2568: PPUSH
2569: LD_STRING DL-Intro-20
2571: PPUSH
2572: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_STRING DLt-Intro-21
2583: PPUSH
2584: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2588: LD_EXP 20
2592: PPUSH
2593: LD_STRING DLt-Intro-22
2595: PPUSH
2596: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2600: LD_EXP 20
2604: PPUSH
2605: LD_STRING DLt-Intro-23
2607: PPUSH
2608: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2612: LD_EXP 18
2616: PPUSH
2617: LD_STRING DL-Intro-24
2619: PPUSH
2620: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2624: LD_EXP 20
2628: PPUSH
2629: LD_STRING DLt-Intro-25
2631: PPUSH
2632: CALL_OW 88
// DialogueOff ;
2636: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2640: LD_STRING M2
2642: PPUSH
2643: CALL_OW 337
// Query ( Prepare ) ;
2647: LD_STRING Prepare
2649: PPUSH
2650: CALL_OW 97
// SaveForQuickRestart ;
2654: CALL_OW 22
// end ;
2658: LD_VAR 0 1
2662: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2663: LD_INT 22
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 15
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: IFFALSE 2708
2693: GO 2695
2695: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2696: LD_EXP 18
2700: PPUSH
2701: LD_STRING DL-Cam-1
2703: PPUSH
2704: CALL_OW 88
2708: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2709: LD_OWVAR 1
2713: PUSH
2714: LD_EXP 4
2718: PUSH
2719: LD_INT 2
2721: DIV
2722: GREATEREQUAL
2723: IFFALSE 2748
2725: GO 2727
2727: DISABLE
// begin DialogueOn ;
2728: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2732: LD_EXP 18
2736: PPUSH
2737: LD_STRING DL-Faster-1
2739: PPUSH
2740: CALL_OW 88
// DialogueOff ;
2744: CALL_OW 7
// end ;
2748: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2749: LD_OWVAR 1
2753: PUSH
2754: LD_EXP 4
2758: PUSH
2759: LD_INT 2
2761: DIV
2762: PUSH
2763: LD_INT 10500
2765: PLUS
2766: GREATEREQUAL
2767: IFFALSE 2792
2769: GO 2771
2771: DISABLE
// begin DialogueOn ;
2772: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2776: LD_EXP 18
2780: PPUSH
2781: LD_STRING DL-Faster-2
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// end ;
2792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2793: LD_INT 22
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 57
2808: PUSH
2809: EMPTY
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 2
2818: PUSH
2819: LD_INT 30
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: PUSH
2865: LD_INT 22
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 3
2877: PUSH
2878: LD_INT 57
2880: PUSH
2881: EMPTY
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 30
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: PPUSH
2903: CALL_OW 69
2907: AND
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 3
2921: PUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 30
2934: PUSH
2935: LD_INT 32
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: PPUSH
2947: CALL_OW 69
2951: PUSH
2952: LD_INT 3
2954: GREATEREQUAL
2955: AND
2956: PUSH
2957: LD_INT 22
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 3
2969: PUSH
2970: LD_INT 57
2972: PUSH
2973: EMPTY
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 30
2982: PUSH
2983: LD_INT 5
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_INT 22
3003: PUSH
3004: LD_INT 2
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 3
3013: PUSH
3014: LD_INT 57
3016: PUSH
3017: EMPTY
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 30
3026: PUSH
3027: LD_INT 30
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: AND
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 2
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 3
3057: PUSH
3058: LD_INT 57
3060: PUSH
3061: EMPTY
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: LD_INT 30
3073: PUSH
3074: LD_INT 26
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_INT 30
3083: PUSH
3084: LD_INT 28
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PPUSH
3101: CALL_OW 69
3105: AND
3106: IFFALSE 3143
3108: GO 3110
3110: DISABLE
// begin if tick <= 10 10$00 then
3111: LD_OWVAR 1
3115: PUSH
3116: LD_INT 21000
3118: LESSEQUAL
3119: IFFALSE 3128
// SetAchievement ( ACH_BOB ) ;
3121: LD_STRING ACH_BOB
3123: PPUSH
3124: CALL_OW 543
// baseDone := true ;
3128: LD_ADDR_EXP 5
3132: PUSH
3133: LD_INT 1
3135: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3136: LD_STRING M1out
3138: PPUSH
3139: CALL_OW 337
// end ;
3143: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3144: LD_EXP 5
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 21
3161: PUSH
3162: LD_INT 2
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 34
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 34
3187: PUSH
3188: LD_INT 88
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 22
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 21
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 23
3236: PUSH
3237: LD_INT 2
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 69
3253: PPUSH
3254: CALL 6810 0 1
3258: GREATEREQUAL
3259: AND
3260: IFFALSE 3352
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3269: LD_EXP 18
3273: PPUSH
3274: LD_STRING DL-Ready-1
3276: PPUSH
3277: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3281: LD_INT 22
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 23
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: IFFALSE 3323
// Say ( Schulz , DL-Ready-2 ) ;
3311: LD_EXP 18
3315: PPUSH
3316: LD_STRING DL-Ready-2
3318: PPUSH
3319: CALL_OW 88
// DialogueOff ;
3323: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3327: LD_STRING M3
3329: PPUSH
3330: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3334: LD_INT 7
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: CALL_OW 424
// canGo := true ;
3344: LD_ADDR_EXP 6
3348: PUSH
3349: LD_INT 1
3351: ST_TO_ADDR
// end ;
3352: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3353: LD_EXP 6
3357: PUSH
3358: LD_INT 7
3360: PPUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 2
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 21
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 33
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: LD_INT 58
3396: PUSH
3397: EMPTY
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: PPUSH
3410: CALL_OW 70
3414: PPUSH
3415: CALL 6810 0 1
3419: PUSH
3420: LD_INT 22
3422: PUSH
3423: LD_INT 2
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 21
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 23
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PPUSH
3460: CALL 6810 0 1
3464: GREATEREQUAL
3465: AND
3466: PUSH
3467: LD_INT 22
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 21
3479: PUSH
3480: LD_INT 1
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 55
3492: PUSH
3493: EMPTY
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 23
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PPUSH
3516: CALL_OW 69
3520: PPUSH
3521: CALL 6810 0 1
3525: PUSH
3526: LD_INT 0
3528: EQUAL
3529: AND
3530: IFFALSE 4583
3532: GO 3534
3534: DISABLE
3535: LD_INT 0
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
// begin enable ;
3542: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_INT 7
3550: PPUSH
3551: LD_INT 22
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 21
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 2
3587: PUSH
3588: LD_INT 34
3590: PUSH
3591: LD_INT 88
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 34
3600: PUSH
3601: LD_INT 32
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 72
3617: IFFALSE 3628
// begin Query ( InvalidWeapon ) ;
3619: LD_STRING InvalidWeapon
3621: PPUSH
3622: CALL_OW 97
// exit ;
3626: GO 4583
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_INT 3
3635: PUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 72
3654: IFFALSE 3665
// begin Query ( HealthLevel ) ;
3656: LD_STRING HealthLevel
3658: PPUSH
3659: CALL_OW 97
// exit ;
3663: GO 4583
// end ; for i in tmp do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: LD_VAR 0 2
3674: PUSH
3675: FOR_IN
3676: IFFALSE 3721
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 262
3687: PUSH
3688: LD_INT 1
3690: EQUAL
3691: PUSH
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 261
3701: PUSH
3702: LD_INT 60
3704: LESS
3705: AND
3706: IFFALSE 3719
// begin Query ( FuelLevel ) ;
3708: LD_STRING FuelLevel
3710: PPUSH
3711: CALL_OW 97
// exit ;
3715: POP
3716: POP
3717: GO 4583
// end ;
3719: GO 3675
3721: POP
3722: POP
// disable ;
3723: DISABLE
// saveVehicles := [ ] ;
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: EMPTY
3730: ST_TO_ADDR
// for i in tmp do
3731: LD_ADDR_VAR 0 1
3735: PUSH
3736: LD_VAR 0 2
3740: PUSH
3741: FOR_IN
3742: IFFALSE 3851
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 265
3763: PUSH
3764: LD_VAR 0 1
3768: PPUSH
3769: CALL_OW 262
3773: PUSH
3774: LD_VAR 0 1
3778: PPUSH
3779: CALL_OW 263
3783: PUSH
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 264
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 248
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 261
3813: PUSH
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 271
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 311
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL 42410 0 2
3848: ST_TO_ADDR
3849: GO 3741
3851: POP
3852: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 21
3870: PUSH
3871: LD_INT 2
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 50
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: PUSH
3894: LD_VAR 0 2
3898: DIFF
3899: ST_TO_ADDR
// if otherVehicles then
3900: LD_VAR 0 4
3904: IFFALSE 4080
// begin tmp := [ ] ;
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: EMPTY
3912: ST_TO_ADDR
// for i in otherVehicles do
3913: LD_ADDR_VAR 0 1
3917: PUSH
3918: LD_VAR 0 4
3922: PUSH
3923: FOR_IN
3924: IFFALSE 4066
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: LD_VAR 0 2
3935: PPUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 265
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 262
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 263
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: CALL_OW 264
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 248
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 261
3995: PUSH
3996: LD_VAR 0 1
4000: PPUSH
4001: CALL_OW 271
4005: PUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: CALL_OW 250
4015: PUSH
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 251
4025: PUSH
4026: LD_VAR 0 1
4030: PPUSH
4031: CALL_OW 254
4035: PUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 256
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL 42410 0 2
4063: ST_TO_ADDR
4064: GO 3923
4066: POP
4067: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_STRING 09_otherVehicles
4075: PPUSH
4076: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) then
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 1
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 72
4099: NOT
4100: IFFALSE 4109
// SetAchievement ( ACH_GREEN ) ;
4102: LD_STRING ACH_GREEN
4104: PPUSH
4105: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4109: LD_EXP 18
4113: PPUSH
4114: LD_STRING 09_Schulz
4116: PPUSH
4117: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4121: LD_EXP 18
4125: PPUSH
4126: LD_STRING 09_Schulz_ID
4128: PPUSH
4129: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4133: LD_EXP 20
4137: PPUSH
4138: LD_STRING 09_Lemmy
4140: PPUSH
4141: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4145: LD_EXP 20
4149: PPUSH
4150: LD_STRING 09_Lemmy_ID
4152: PPUSH
4153: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4157: LD_EXP 22
4161: PPUSH
4162: LD_STRING 09_Nia
4164: PPUSH
4165: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4169: LD_EXP 22
4173: PPUSH
4174: LD_STRING 09_Nia_ID
4176: PPUSH
4177: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4181: LD_EXP 21
4185: PPUSH
4186: LD_STRING 09_Mia
4188: PPUSH
4189: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4193: LD_EXP 21
4197: PPUSH
4198: LD_STRING 09_Mia_ID
4200: PPUSH
4201: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4205: LD_EXP 23
4209: PPUSH
4210: LD_STRING 09_Jenna
4212: PPUSH
4213: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4217: LD_EXP 23
4221: PPUSH
4222: LD_STRING 09_Jenna_ID
4224: PPUSH
4225: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4229: LD_EXP 26
4233: PPUSH
4234: LD_STRING 09_schulzSecondSquad
4236: PPUSH
4237: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4241: LD_ADDR_VAR 0 1
4245: PUSH
4246: DOUBLE
4247: LD_INT 1
4249: DEC
4250: ST_TO_ADDR
4251: LD_EXP 26
4255: PUSH
4256: FOR_TO
4257: IFFALSE 4285
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4259: LD_EXP 26
4263: PUSH
4264: LD_VAR 0 1
4268: ARRAY
4269: PPUSH
4270: LD_STRING 09_random_ID_
4272: PUSH
4273: LD_VAR 0 1
4277: STR
4278: PPUSH
4279: CALL_OW 39
4283: GO 4256
4285: POP
4286: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4287: LD_VAR 0 3
4291: PPUSH
4292: LD_STRING 09_vehicles
4294: PPUSH
4295: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4299: LD_OWVAR 1
4303: PPUSH
4304: LD_STRING 09_tick
4306: PPUSH
4307: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4311: LD_INT 6
4313: PPUSH
4314: LD_STRING 09_env
4316: PPUSH
4317: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_STRING 09_tech
4326: PPUSH
4327: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4331: LD_INT 2
4333: PPUSH
4334: LD_STRING 09_materials
4336: PPUSH
4337: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4341: LD_INT 2
4343: PPUSH
4344: LD_STRING 09_buildings
4346: PPUSH
4347: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4351: LD_INT 22
4353: PUSH
4354: LD_INT 2
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 23
4363: PUSH
4364: LD_INT 0
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 69
4379: PPUSH
4380: LD_STRING 09_apes
4382: PPUSH
4383: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4387: LD_EXP 4
4391: PPUSH
4392: LD_STRING 09_timeToHeikeDead
4394: PPUSH
4395: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4399: LD_EXP 3
4403: PPUSH
4404: LD_STRING 09_cameras
4406: PPUSH
4407: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_INT 22
4418: PUSH
4419: LD_INT 0
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 23
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: LD_INT 50
4438: PUSH
4439: EMPTY
4440: LIST
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: PPUSH
4447: CALL_OW 69
4451: ST_TO_ADDR
// if tmp then
4452: LD_VAR 0 2
4456: IFFALSE 4566
// begin animals := [ ] ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: EMPTY
4464: ST_TO_ADDR
// for i in tmp do
4465: LD_ADDR_VAR 0 1
4469: PUSH
4470: LD_VAR 0 2
4474: PUSH
4475: FOR_IN
4476: IFFALSE 4552
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4478: LD_ADDR_VAR 0 5
4482: PUSH
4483: LD_VAR 0 5
4487: PPUSH
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 257
4497: PUSH
4498: LD_VAR 0 1
4502: PPUSH
4503: CALL_OW 250
4507: PUSH
4508: LD_VAR 0 1
4512: PPUSH
4513: CALL_OW 251
4517: PUSH
4518: LD_VAR 0 1
4522: PPUSH
4523: CALL_OW 254
4527: PUSH
4528: LD_VAR 0 1
4532: PPUSH
4533: CALL_OW 256
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PPUSH
4545: CALL 42410 0 2
4549: ST_TO_ADDR
4550: GO 4475
4552: POP
4553: POP
// SaveVariable ( animals , 09_animals ) ;
4554: LD_VAR 0 5
4558: PPUSH
4559: LD_STRING 09_animals
4561: PPUSH
4562: CALL_OW 39
// end ; wait ( 3 ) ;
4566: LD_INT 3
4568: PPUSH
4569: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4573: LD_INT 1
4575: PPUSH
4576: LD_STRING %2
4578: PPUSH
4579: CALL_OW 340
// end ; end_of_file
4583: PPOPN 5
4585: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4586: LD_OWVAR 1
4590: PUSH
4591: LD_INT 14700
4593: LESS
4594: IFFALSE 4627
4596: GO 4598
4598: DISABLE
// begin enable ;
4599: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4600: LD_INT 1
4602: PPUSH
4603: LD_INT 5
4605: PPUSH
4606: CALL_OW 12
4610: PPUSH
4611: LD_INT 85
4613: PPUSH
4614: LD_INT 44
4616: PPUSH
4617: LD_INT 30
4619: PPUSH
4620: LD_INT 1
4622: PPUSH
4623: CALL_OW 56
// end ;
4627: END
// every 0 0$29 trigger tick < 20 20$00 do
4628: LD_OWVAR 1
4632: PUSH
4633: LD_INT 42000
4635: LESS
4636: IFFALSE 4707
4638: GO 4640
4640: DISABLE
// begin enable ;
4641: ENABLE
// if Prob ( 50 ) then
4642: LD_INT 50
4644: PPUSH
4645: CALL_OW 13
4649: IFFALSE 4680
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4651: LD_INT 1
4653: PPUSH
4654: LD_INT 5
4656: PPUSH
4657: CALL_OW 12
4661: PPUSH
4662: LD_INT 72
4664: PPUSH
4665: LD_INT 109
4667: PPUSH
4668: LD_INT 22
4670: PPUSH
4671: LD_INT 1
4673: PPUSH
4674: CALL_OW 56
4678: GO 4707
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4680: LD_INT 1
4682: PPUSH
4683: LD_INT 5
4685: PPUSH
4686: CALL_OW 12
4690: PPUSH
4691: LD_INT 140
4693: PPUSH
4694: LD_INT 73
4696: PPUSH
4697: LD_INT 22
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: CALL_OW 56
4707: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4708: LD_INT 0
4710: PPUSH
4711: PPUSH
// if exist_mode then
4712: LD_VAR 0 2
4716: IFFALSE 4741
// unit := CreateCharacter ( prefix & ident ) else
4718: LD_ADDR_VAR 0 5
4722: PUSH
4723: LD_VAR 0 3
4727: PUSH
4728: LD_VAR 0 1
4732: STR
4733: PPUSH
4734: CALL_OW 34
4738: ST_TO_ADDR
4739: GO 4756
// unit := NewCharacter ( ident ) ;
4741: LD_ADDR_VAR 0 5
4745: PUSH
4746: LD_VAR 0 1
4750: PPUSH
4751: CALL_OW 25
4755: ST_TO_ADDR
// result := unit ;
4756: LD_ADDR_VAR 0 4
4760: PUSH
4761: LD_VAR 0 5
4765: ST_TO_ADDR
// end ;
4766: LD_VAR 0 4
4770: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
// if not side or not nation then
4775: LD_VAR 0 1
4779: NOT
4780: PUSH
4781: LD_VAR 0 2
4785: NOT
4786: OR
4787: IFFALSE 4791
// exit ;
4789: GO 5559
// case nation of nation_american :
4791: LD_VAR 0 2
4795: PUSH
4796: LD_INT 1
4798: DOUBLE
4799: EQUAL
4800: IFTRUE 4804
4802: GO 5018
4804: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4805: LD_ADDR_VAR 0 4
4809: PUSH
4810: LD_INT 35
4812: PUSH
4813: LD_INT 45
4815: PUSH
4816: LD_INT 46
4818: PUSH
4819: LD_INT 47
4821: PUSH
4822: LD_INT 82
4824: PUSH
4825: LD_INT 83
4827: PUSH
4828: LD_INT 84
4830: PUSH
4831: LD_INT 85
4833: PUSH
4834: LD_INT 86
4836: PUSH
4837: LD_INT 1
4839: PUSH
4840: LD_INT 2
4842: PUSH
4843: LD_INT 6
4845: PUSH
4846: LD_INT 15
4848: PUSH
4849: LD_INT 16
4851: PUSH
4852: LD_INT 7
4854: PUSH
4855: LD_INT 12
4857: PUSH
4858: LD_INT 13
4860: PUSH
4861: LD_INT 10
4863: PUSH
4864: LD_INT 14
4866: PUSH
4867: LD_INT 20
4869: PUSH
4870: LD_INT 21
4872: PUSH
4873: LD_INT 22
4875: PUSH
4876: LD_INT 25
4878: PUSH
4879: LD_INT 32
4881: PUSH
4882: LD_INT 27
4884: PUSH
4885: LD_INT 36
4887: PUSH
4888: LD_INT 69
4890: PUSH
4891: LD_INT 39
4893: PUSH
4894: LD_INT 34
4896: PUSH
4897: LD_INT 40
4899: PUSH
4900: LD_INT 48
4902: PUSH
4903: LD_INT 49
4905: PUSH
4906: LD_INT 50
4908: PUSH
4909: LD_INT 51
4911: PUSH
4912: LD_INT 52
4914: PUSH
4915: LD_INT 53
4917: PUSH
4918: LD_INT 54
4920: PUSH
4921: LD_INT 55
4923: PUSH
4924: LD_INT 56
4926: PUSH
4927: LD_INT 57
4929: PUSH
4930: LD_INT 58
4932: PUSH
4933: LD_INT 59
4935: PUSH
4936: LD_INT 60
4938: PUSH
4939: LD_INT 61
4941: PUSH
4942: LD_INT 62
4944: PUSH
4945: LD_INT 80
4947: PUSH
4948: LD_INT 82
4950: PUSH
4951: LD_INT 83
4953: PUSH
4954: LD_INT 84
4956: PUSH
4957: LD_INT 85
4959: PUSH
4960: LD_INT 86
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: ST_TO_ADDR
5016: GO 5483
5018: LD_INT 2
5020: DOUBLE
5021: EQUAL
5022: IFTRUE 5026
5024: GO 5252
5026: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5027: LD_ADDR_VAR 0 4
5031: PUSH
5032: LD_INT 35
5034: PUSH
5035: LD_INT 45
5037: PUSH
5038: LD_INT 46
5040: PUSH
5041: LD_INT 47
5043: PUSH
5044: LD_INT 82
5046: PUSH
5047: LD_INT 83
5049: PUSH
5050: LD_INT 84
5052: PUSH
5053: LD_INT 85
5055: PUSH
5056: LD_INT 87
5058: PUSH
5059: LD_INT 70
5061: PUSH
5062: LD_INT 1
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: LD_INT 3
5070: PUSH
5071: LD_INT 4
5073: PUSH
5074: LD_INT 5
5076: PUSH
5077: LD_INT 6
5079: PUSH
5080: LD_INT 15
5082: PUSH
5083: LD_INT 18
5085: PUSH
5086: LD_INT 7
5088: PUSH
5089: LD_INT 17
5091: PUSH
5092: LD_INT 8
5094: PUSH
5095: LD_INT 20
5097: PUSH
5098: LD_INT 21
5100: PUSH
5101: LD_INT 22
5103: PUSH
5104: LD_INT 72
5106: PUSH
5107: LD_INT 26
5109: PUSH
5110: LD_INT 69
5112: PUSH
5113: LD_INT 39
5115: PUSH
5116: LD_INT 40
5118: PUSH
5119: LD_INT 41
5121: PUSH
5122: LD_INT 42
5124: PUSH
5125: LD_INT 43
5127: PUSH
5128: LD_INT 48
5130: PUSH
5131: LD_INT 49
5133: PUSH
5134: LD_INT 50
5136: PUSH
5137: LD_INT 51
5139: PUSH
5140: LD_INT 52
5142: PUSH
5143: LD_INT 53
5145: PUSH
5146: LD_INT 54
5148: PUSH
5149: LD_INT 55
5151: PUSH
5152: LD_INT 56
5154: PUSH
5155: LD_INT 60
5157: PUSH
5158: LD_INT 61
5160: PUSH
5161: LD_INT 62
5163: PUSH
5164: LD_INT 66
5166: PUSH
5167: LD_INT 67
5169: PUSH
5170: LD_INT 68
5172: PUSH
5173: LD_INT 81
5175: PUSH
5176: LD_INT 82
5178: PUSH
5179: LD_INT 83
5181: PUSH
5182: LD_INT 84
5184: PUSH
5185: LD_INT 85
5187: PUSH
5188: LD_INT 87
5190: PUSH
5191: LD_INT 88
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: ST_TO_ADDR
5250: GO 5483
5252: LD_INT 3
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5482
5260: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5261: LD_ADDR_VAR 0 4
5265: PUSH
5266: LD_INT 46
5268: PUSH
5269: LD_INT 47
5271: PUSH
5272: LD_INT 1
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: LD_INT 82
5280: PUSH
5281: LD_INT 83
5283: PUSH
5284: LD_INT 84
5286: PUSH
5287: LD_INT 85
5289: PUSH
5290: LD_INT 86
5292: PUSH
5293: LD_INT 11
5295: PUSH
5296: LD_INT 9
5298: PUSH
5299: LD_INT 20
5301: PUSH
5302: LD_INT 19
5304: PUSH
5305: LD_INT 21
5307: PUSH
5308: LD_INT 24
5310: PUSH
5311: LD_INT 22
5313: PUSH
5314: LD_INT 25
5316: PUSH
5317: LD_INT 28
5319: PUSH
5320: LD_INT 29
5322: PUSH
5323: LD_INT 30
5325: PUSH
5326: LD_INT 31
5328: PUSH
5329: LD_INT 37
5331: PUSH
5332: LD_INT 38
5334: PUSH
5335: LD_INT 32
5337: PUSH
5338: LD_INT 27
5340: PUSH
5341: LD_INT 33
5343: PUSH
5344: LD_INT 69
5346: PUSH
5347: LD_INT 39
5349: PUSH
5350: LD_INT 34
5352: PUSH
5353: LD_INT 40
5355: PUSH
5356: LD_INT 71
5358: PUSH
5359: LD_INT 23
5361: PUSH
5362: LD_INT 44
5364: PUSH
5365: LD_INT 48
5367: PUSH
5368: LD_INT 49
5370: PUSH
5371: LD_INT 50
5373: PUSH
5374: LD_INT 51
5376: PUSH
5377: LD_INT 52
5379: PUSH
5380: LD_INT 53
5382: PUSH
5383: LD_INT 54
5385: PUSH
5386: LD_INT 55
5388: PUSH
5389: LD_INT 56
5391: PUSH
5392: LD_INT 57
5394: PUSH
5395: LD_INT 58
5397: PUSH
5398: LD_INT 59
5400: PUSH
5401: LD_INT 63
5403: PUSH
5404: LD_INT 64
5406: PUSH
5407: LD_INT 65
5409: PUSH
5410: LD_INT 82
5412: PUSH
5413: LD_INT 83
5415: PUSH
5416: LD_INT 84
5418: PUSH
5419: LD_INT 85
5421: PUSH
5422: LD_INT 86
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: ST_TO_ADDR
5480: GO 5483
5482: POP
// if state > - 1 and state < 3 then
5483: LD_VAR 0 3
5487: PUSH
5488: LD_INT 1
5490: NEG
5491: GREATER
5492: PUSH
5493: LD_VAR 0 3
5497: PUSH
5498: LD_INT 3
5500: LESS
5501: AND
5502: IFFALSE 5559
// for i in result do
5504: LD_ADDR_VAR 0 5
5508: PUSH
5509: LD_VAR 0 4
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5557
// if GetTech ( i , side ) <> state then
5517: LD_VAR 0 5
5521: PPUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 321
5531: PUSH
5532: LD_VAR 0 3
5536: NONEQUAL
5537: IFFALSE 5555
// result := result diff i ;
5539: LD_ADDR_VAR 0 4
5543: PUSH
5544: LD_VAR 0 4
5548: PUSH
5549: LD_VAR 0 5
5553: DIFF
5554: ST_TO_ADDR
5555: GO 5514
5557: POP
5558: POP
// end ;
5559: LD_VAR 0 4
5563: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5564: LD_INT 0
5566: PPUSH
5567: PPUSH
5568: PPUSH
// result := true ;
5569: LD_ADDR_VAR 0 3
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5577: LD_ADDR_VAR 0 5
5581: PUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 480
5591: ST_TO_ADDR
// if not tmp then
5592: LD_VAR 0 5
5596: NOT
5597: IFFALSE 5601
// exit ;
5599: GO 5650
// for i in tmp do
5601: LD_ADDR_VAR 0 4
5605: PUSH
5606: LD_VAR 0 5
5610: PUSH
5611: FOR_IN
5612: IFFALSE 5648
// if GetTech ( i , side ) <> state_researched then
5614: LD_VAR 0 4
5618: PPUSH
5619: LD_VAR 0 1
5623: PPUSH
5624: CALL_OW 321
5628: PUSH
5629: LD_INT 2
5631: NONEQUAL
5632: IFFALSE 5646
// begin result := false ;
5634: LD_ADDR_VAR 0 3
5638: PUSH
5639: LD_INT 0
5641: ST_TO_ADDR
// exit ;
5642: POP
5643: POP
5644: GO 5650
// end ;
5646: GO 5611
5648: POP
5649: POP
// end ;
5650: LD_VAR 0 3
5654: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5655: LD_INT 0
5657: PPUSH
5658: PPUSH
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
5663: PPUSH
5664: PPUSH
5665: PPUSH
5666: PPUSH
5667: PPUSH
5668: PPUSH
5669: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5670: LD_VAR 0 1
5674: NOT
5675: PUSH
5676: LD_VAR 0 1
5680: PPUSH
5681: CALL_OW 257
5685: PUSH
5686: LD_INT 9
5688: NONEQUAL
5689: OR
5690: IFFALSE 5694
// exit ;
5692: GO 6267
// side := GetSide ( unit ) ;
5694: LD_ADDR_VAR 0 9
5698: PUSH
5699: LD_VAR 0 1
5703: PPUSH
5704: CALL_OW 255
5708: ST_TO_ADDR
// tech_space := tech_spacanom ;
5709: LD_ADDR_VAR 0 12
5713: PUSH
5714: LD_INT 29
5716: ST_TO_ADDR
// tech_time := tech_taurad ;
5717: LD_ADDR_VAR 0 13
5721: PUSH
5722: LD_INT 28
5724: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5725: LD_ADDR_VAR 0 11
5729: PUSH
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 310
5739: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5740: LD_VAR 0 11
5744: PPUSH
5745: CALL_OW 247
5749: PUSH
5750: LD_INT 2
5752: EQUAL
5753: IFFALSE 5757
// exit ;
5755: GO 6267
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5757: LD_ADDR_VAR 0 8
5761: PUSH
5762: LD_INT 81
5764: PUSH
5765: LD_VAR 0 9
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 3
5776: PUSH
5777: LD_INT 21
5779: PUSH
5780: LD_INT 3
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: ST_TO_ADDR
// if not tmp then
5800: LD_VAR 0 8
5804: NOT
5805: IFFALSE 5809
// exit ;
5807: GO 6267
// if in_unit then
5809: LD_VAR 0 11
5813: IFFALSE 5837
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5815: LD_ADDR_VAR 0 10
5819: PUSH
5820: LD_VAR 0 8
5824: PPUSH
5825: LD_VAR 0 11
5829: PPUSH
5830: CALL_OW 74
5834: ST_TO_ADDR
5835: GO 5857
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5837: LD_ADDR_VAR 0 10
5841: PUSH
5842: LD_VAR 0 8
5846: PPUSH
5847: LD_VAR 0 1
5851: PPUSH
5852: CALL_OW 74
5856: ST_TO_ADDR
// if not enemy then
5857: LD_VAR 0 10
5861: NOT
5862: IFFALSE 5866
// exit ;
5864: GO 6267
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5866: LD_VAR 0 11
5870: PUSH
5871: LD_VAR 0 11
5875: PPUSH
5876: LD_VAR 0 10
5880: PPUSH
5881: CALL_OW 296
5885: PUSH
5886: LD_INT 13
5888: GREATER
5889: AND
5890: PUSH
5891: LD_VAR 0 1
5895: PPUSH
5896: LD_VAR 0 10
5900: PPUSH
5901: CALL_OW 296
5905: PUSH
5906: LD_INT 12
5908: GREATER
5909: OR
5910: IFFALSE 5914
// exit ;
5912: GO 6267
// missile := [ 1 ] ;
5914: LD_ADDR_VAR 0 14
5918: PUSH
5919: LD_INT 1
5921: PUSH
5922: EMPTY
5923: LIST
5924: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5925: LD_VAR 0 9
5929: PPUSH
5930: LD_VAR 0 12
5934: PPUSH
5935: CALL_OW 325
5939: IFFALSE 5968
// missile := Replace ( missile , missile + 1 , 2 ) ;
5941: LD_ADDR_VAR 0 14
5945: PUSH
5946: LD_VAR 0 14
5950: PPUSH
5951: LD_VAR 0 14
5955: PUSH
5956: LD_INT 1
5958: PLUS
5959: PPUSH
5960: LD_INT 2
5962: PPUSH
5963: CALL_OW 1
5967: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5968: LD_VAR 0 9
5972: PPUSH
5973: LD_VAR 0 13
5977: PPUSH
5978: CALL_OW 325
5982: PUSH
5983: LD_VAR 0 10
5987: PPUSH
5988: CALL_OW 255
5992: PPUSH
5993: LD_VAR 0 13
5997: PPUSH
5998: CALL_OW 325
6002: NOT
6003: AND
6004: IFFALSE 6033
// missile := Replace ( missile , missile + 1 , 3 ) ;
6006: LD_ADDR_VAR 0 14
6010: PUSH
6011: LD_VAR 0 14
6015: PPUSH
6016: LD_VAR 0 14
6020: PUSH
6021: LD_INT 1
6023: PLUS
6024: PPUSH
6025: LD_INT 3
6027: PPUSH
6028: CALL_OW 1
6032: ST_TO_ADDR
// if missile < 2 then
6033: LD_VAR 0 14
6037: PUSH
6038: LD_INT 2
6040: LESS
6041: IFFALSE 6045
// exit ;
6043: GO 6267
// x := GetX ( enemy ) ;
6045: LD_ADDR_VAR 0 4
6049: PUSH
6050: LD_VAR 0 10
6054: PPUSH
6055: CALL_OW 250
6059: ST_TO_ADDR
// y := GetY ( enemy ) ;
6060: LD_ADDR_VAR 0 5
6064: PUSH
6065: LD_VAR 0 10
6069: PPUSH
6070: CALL_OW 251
6074: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6075: LD_ADDR_VAR 0 6
6079: PUSH
6080: LD_VAR 0 4
6084: PUSH
6085: LD_INT 1
6087: NEG
6088: PPUSH
6089: LD_INT 1
6091: PPUSH
6092: CALL_OW 12
6096: PLUS
6097: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6098: LD_ADDR_VAR 0 7
6102: PUSH
6103: LD_VAR 0 5
6107: PUSH
6108: LD_INT 1
6110: NEG
6111: PPUSH
6112: LD_INT 1
6114: PPUSH
6115: CALL_OW 12
6119: PLUS
6120: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6121: LD_VAR 0 6
6125: PPUSH
6126: LD_VAR 0 7
6130: PPUSH
6131: CALL_OW 488
6135: NOT
6136: IFFALSE 6158
// begin _x := x ;
6138: LD_ADDR_VAR 0 6
6142: PUSH
6143: LD_VAR 0 4
6147: ST_TO_ADDR
// _y := y ;
6148: LD_ADDR_VAR 0 7
6152: PUSH
6153: LD_VAR 0 5
6157: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6158: LD_ADDR_VAR 0 3
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_VAR 0 14
6170: PPUSH
6171: CALL_OW 12
6175: ST_TO_ADDR
// case i of 1 :
6176: LD_VAR 0 3
6180: PUSH
6181: LD_INT 1
6183: DOUBLE
6184: EQUAL
6185: IFTRUE 6189
6187: GO 6206
6189: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6190: LD_VAR 0 1
6194: PPUSH
6195: LD_VAR 0 10
6199: PPUSH
6200: CALL_OW 115
6204: GO 6267
6206: LD_INT 2
6208: DOUBLE
6209: EQUAL
6210: IFTRUE 6214
6212: GO 6236
6214: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6215: LD_VAR 0 1
6219: PPUSH
6220: LD_VAR 0 6
6224: PPUSH
6225: LD_VAR 0 7
6229: PPUSH
6230: CALL_OW 153
6234: GO 6267
6236: LD_INT 3
6238: DOUBLE
6239: EQUAL
6240: IFTRUE 6244
6242: GO 6266
6244: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6245: LD_VAR 0 1
6249: PPUSH
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_VAR 0 7
6259: PPUSH
6260: CALL_OW 154
6264: GO 6267
6266: POP
// end ;
6267: LD_VAR 0 2
6271: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6272: LD_INT 0
6274: PPUSH
6275: PPUSH
6276: PPUSH
6277: PPUSH
6278: PPUSH
6279: PPUSH
// if not unit or not building then
6280: LD_VAR 0 1
6284: NOT
6285: PUSH
6286: LD_VAR 0 2
6290: NOT
6291: OR
6292: IFFALSE 6296
// exit ;
6294: GO 6454
// x := GetX ( building ) ;
6296: LD_ADDR_VAR 0 5
6300: PUSH
6301: LD_VAR 0 2
6305: PPUSH
6306: CALL_OW 250
6310: ST_TO_ADDR
// y := GetY ( building ) ;
6311: LD_ADDR_VAR 0 6
6315: PUSH
6316: LD_VAR 0 2
6320: PPUSH
6321: CALL_OW 251
6325: ST_TO_ADDR
// for i = 0 to 5 do
6326: LD_ADDR_VAR 0 4
6330: PUSH
6331: DOUBLE
6332: LD_INT 0
6334: DEC
6335: ST_TO_ADDR
6336: LD_INT 5
6338: PUSH
6339: FOR_TO
6340: IFFALSE 6452
// begin _x := ShiftX ( x , i , 3 ) ;
6342: LD_ADDR_VAR 0 7
6346: PUSH
6347: LD_VAR 0 5
6351: PPUSH
6352: LD_VAR 0 4
6356: PPUSH
6357: LD_INT 3
6359: PPUSH
6360: CALL_OW 272
6364: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6365: LD_ADDR_VAR 0 8
6369: PUSH
6370: LD_VAR 0 6
6374: PPUSH
6375: LD_VAR 0 4
6379: PPUSH
6380: LD_INT 3
6382: PPUSH
6383: CALL_OW 273
6387: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6388: LD_VAR 0 7
6392: PPUSH
6393: LD_VAR 0 8
6397: PPUSH
6398: CALL_OW 488
6402: NOT
6403: IFFALSE 6407
// continue ;
6405: GO 6339
// if HexInfo ( _x , _y ) = 0 then
6407: LD_VAR 0 7
6411: PPUSH
6412: LD_VAR 0 8
6416: PPUSH
6417: CALL_OW 428
6421: PUSH
6422: LD_INT 0
6424: EQUAL
6425: IFFALSE 6450
// begin ComMoveXY ( unit , _x , _y ) ;
6427: LD_VAR 0 1
6431: PPUSH
6432: LD_VAR 0 7
6436: PPUSH
6437: LD_VAR 0 8
6441: PPUSH
6442: CALL_OW 111
// exit ;
6446: POP
6447: POP
6448: GO 6454
// end ; end ;
6450: GO 6339
6452: POP
6453: POP
// end ;
6454: LD_VAR 0 3
6458: RET
// export function ScanBase ( side , base_area ) ; begin
6459: LD_INT 0
6461: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6462: LD_ADDR_VAR 0 3
6466: PUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_INT 81
6474: PUSH
6475: LD_VAR 0 1
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 70
6488: ST_TO_ADDR
// end ;
6489: LD_VAR 0 3
6493: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6494: LD_INT 0
6496: PPUSH
6497: PPUSH
6498: PPUSH
6499: PPUSH
// result := false ;
6500: LD_ADDR_VAR 0 2
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// side := GetSide ( unit ) ;
6508: LD_ADDR_VAR 0 3
6512: PUSH
6513: LD_VAR 0 1
6517: PPUSH
6518: CALL_OW 255
6522: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: LD_VAR 0 1
6532: PPUSH
6533: CALL_OW 248
6537: ST_TO_ADDR
// case nat of 1 :
6538: LD_VAR 0 4
6542: PUSH
6543: LD_INT 1
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6562
6551: POP
// tech := tech_lassight ; 2 :
6552: LD_ADDR_VAR 0 5
6556: PUSH
6557: LD_INT 12
6559: ST_TO_ADDR
6560: GO 6601
6562: LD_INT 2
6564: DOUBLE
6565: EQUAL
6566: IFTRUE 6570
6568: GO 6581
6570: POP
// tech := tech_mortar ; 3 :
6571: LD_ADDR_VAR 0 5
6575: PUSH
6576: LD_INT 41
6578: ST_TO_ADDR
6579: GO 6601
6581: LD_INT 3
6583: DOUBLE
6584: EQUAL
6585: IFTRUE 6589
6587: GO 6600
6589: POP
// tech := tech_bazooka ; end ;
6590: LD_ADDR_VAR 0 5
6594: PUSH
6595: LD_INT 44
6597: ST_TO_ADDR
6598: GO 6601
6600: POP
// if Researched ( side , tech ) then
6601: LD_VAR 0 3
6605: PPUSH
6606: LD_VAR 0 5
6610: PPUSH
6611: CALL_OW 325
6615: IFFALSE 6642
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6617: LD_ADDR_VAR 0 2
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 8
6627: PUSH
6628: LD_INT 9
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: PUSH
6636: LD_VAR 0 4
6640: ARRAY
6641: ST_TO_ADDR
// end ;
6642: LD_VAR 0 2
6646: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6647: LD_INT 0
6649: PPUSH
6650: PPUSH
6651: PPUSH
// if not mines then
6652: LD_VAR 0 2
6656: NOT
6657: IFFALSE 6661
// exit ;
6659: GO 6805
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6661: LD_ADDR_VAR 0 5
6665: PUSH
6666: LD_INT 81
6668: PUSH
6669: LD_VAR 0 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 21
6683: PUSH
6684: LD_INT 3
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 69
6703: ST_TO_ADDR
// for i in mines do
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 2
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6803
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6717: LD_VAR 0 4
6721: PUSH
6722: LD_INT 1
6724: ARRAY
6725: PPUSH
6726: LD_VAR 0 4
6730: PUSH
6731: LD_INT 2
6733: ARRAY
6734: PPUSH
6735: CALL_OW 458
6739: NOT
6740: IFFALSE 6744
// continue ;
6742: GO 6714
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6744: LD_VAR 0 4
6748: PUSH
6749: LD_INT 1
6751: ARRAY
6752: PPUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_INT 2
6760: ARRAY
6761: PPUSH
6762: CALL_OW 428
6766: PUSH
6767: LD_VAR 0 5
6771: IN
6772: IFFALSE 6801
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: LD_VAR 0 4
6787: PUSH
6788: LD_INT 2
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 456
// end ;
6801: GO 6714
6803: POP
6804: POP
// end ;
6805: LD_VAR 0 3
6809: RET
// export function Count ( array ) ; begin
6810: LD_INT 0
6812: PPUSH
// result := array + 0 ;
6813: LD_ADDR_VAR 0 2
6817: PUSH
6818: LD_VAR 0 1
6822: PUSH
6823: LD_INT 0
6825: PLUS
6826: ST_TO_ADDR
// end ;
6827: LD_VAR 0 2
6831: RET
// export function IsEmpty ( building ) ; begin
6832: LD_INT 0
6834: PPUSH
// if not building then
6835: LD_VAR 0 1
6839: NOT
6840: IFFALSE 6844
// exit ;
6842: GO 6887
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: LD_VAR 0 1
6853: PUSH
6854: LD_INT 22
6856: PUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: CALL_OW 255
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 58
6873: PUSH
6874: EMPTY
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: IN
6886: ST_TO_ADDR
// end ;
6887: LD_VAR 0 2
6891: RET
// export function IsNotFull ( building ) ; var places ; begin
6892: LD_INT 0
6894: PPUSH
6895: PPUSH
// if not building then
6896: LD_VAR 0 1
6900: NOT
6901: IFFALSE 6905
// exit ;
6903: GO 6933
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
6905: LD_ADDR_VAR 0 2
6909: PUSH
6910: LD_VAR 0 1
6914: PPUSH
6915: LD_INT 3
6917: PUSH
6918: LD_INT 62
6920: PUSH
6921: EMPTY
6922: LIST
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 72
6932: ST_TO_ADDR
// end ;
6933: LD_VAR 0 2
6937: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
// tmp := [ ] ;
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: EMPTY
6950: ST_TO_ADDR
// list := [ ] ;
6951: LD_ADDR_VAR 0 5
6955: PUSH
6956: EMPTY
6957: ST_TO_ADDR
// for i = 16 to 25 do
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: DOUBLE
6964: LD_INT 16
6966: DEC
6967: ST_TO_ADDR
6968: LD_INT 25
6970: PUSH
6971: FOR_TO
6972: IFFALSE 7045
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: LD_VAR 0 3
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_VAR 0 1
6991: PPUSH
6992: CALL_OW 255
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 91
7003: PUSH
7004: LD_VAR 0 1
7008: PUSH
7009: LD_INT 6
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 30
7019: PUSH
7020: LD_VAR 0 4
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: ADD
7042: ST_TO_ADDR
7043: GO 6971
7045: POP
7046: POP
// for i = 1 to tmp do
7047: LD_ADDR_VAR 0 4
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_VAR 0 3
7061: PUSH
7062: FOR_TO
7063: IFFALSE 7151
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7065: LD_ADDR_VAR 0 5
7069: PUSH
7070: LD_VAR 0 5
7074: PUSH
7075: LD_VAR 0 3
7079: PUSH
7080: LD_VAR 0 4
7084: ARRAY
7085: PPUSH
7086: CALL_OW 266
7090: PUSH
7091: LD_VAR 0 3
7095: PUSH
7096: LD_VAR 0 4
7100: ARRAY
7101: PPUSH
7102: CALL_OW 250
7106: PUSH
7107: LD_VAR 0 3
7111: PUSH
7112: LD_VAR 0 4
7116: ARRAY
7117: PPUSH
7118: CALL_OW 251
7122: PUSH
7123: LD_VAR 0 3
7127: PUSH
7128: LD_VAR 0 4
7132: ARRAY
7133: PPUSH
7134: CALL_OW 254
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: ADD
7148: ST_TO_ADDR
7149: GO 7062
7151: POP
7152: POP
// result := list ;
7153: LD_ADDR_VAR 0 2
7157: PUSH
7158: LD_VAR 0 5
7162: ST_TO_ADDR
// end ;
7163: LD_VAR 0 2
7167: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7168: LD_INT 0
7170: PPUSH
7171: PPUSH
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
// if not factory then
7177: LD_VAR 0 1
7181: NOT
7182: IFFALSE 7186
// exit ;
7184: GO 7779
// if control = control_apeman then
7186: LD_VAR 0 4
7190: PUSH
7191: LD_INT 5
7193: EQUAL
7194: IFFALSE 7303
// begin tmp := UnitsInside ( factory ) ;
7196: LD_ADDR_VAR 0 8
7200: PUSH
7201: LD_VAR 0 1
7205: PPUSH
7206: CALL_OW 313
7210: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7211: LD_VAR 0 8
7215: PPUSH
7216: LD_INT 25
7218: PUSH
7219: LD_INT 12
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PPUSH
7226: CALL_OW 72
7230: NOT
7231: IFFALSE 7241
// control := control_manual ;
7233: LD_ADDR_VAR 0 4
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7241: LD_ADDR_VAR 0 8
7245: PUSH
7246: LD_VAR 0 1
7250: PPUSH
7251: CALL 6938 0 1
7255: ST_TO_ADDR
// if tmp then
7256: LD_VAR 0 8
7260: IFFALSE 7303
// begin for i in tmp do
7262: LD_ADDR_VAR 0 7
7266: PUSH
7267: LD_VAR 0 8
7271: PUSH
7272: FOR_IN
7273: IFFALSE 7301
// if i [ 1 ] = b_ext_radio then
7275: LD_VAR 0 7
7279: PUSH
7280: LD_INT 1
7282: ARRAY
7283: PUSH
7284: LD_INT 22
7286: EQUAL
7287: IFFALSE 7299
// begin control := control_remote ;
7289: LD_ADDR_VAR 0 4
7293: PUSH
7294: LD_INT 2
7296: ST_TO_ADDR
// break ;
7297: GO 7301
// end ;
7299: GO 7272
7301: POP
7302: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7303: LD_VAR 0 1
7307: PPUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: LD_VAR 0 3
7317: PPUSH
7318: LD_VAR 0 4
7322: PPUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: CALL_OW 448
7332: IFFALSE 7367
// begin result := [ chassis , engine , control , weapon ] ;
7334: LD_ADDR_VAR 0 6
7338: PUSH
7339: LD_VAR 0 2
7343: PUSH
7344: LD_VAR 0 3
7348: PUSH
7349: LD_VAR 0 4
7353: PUSH
7354: LD_VAR 0 5
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// exit ;
7365: GO 7779
// end ; _chassis := AvailableChassisList ( factory ) ;
7367: LD_ADDR_VAR 0 9
7371: PUSH
7372: LD_VAR 0 1
7376: PPUSH
7377: CALL_OW 475
7381: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7382: LD_ADDR_VAR 0 11
7386: PUSH
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 476
7396: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7397: LD_ADDR_VAR 0 12
7401: PUSH
7402: LD_VAR 0 1
7406: PPUSH
7407: CALL_OW 477
7411: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7412: LD_ADDR_VAR 0 10
7416: PUSH
7417: LD_VAR 0 1
7421: PPUSH
7422: CALL_OW 478
7426: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7427: LD_VAR 0 9
7431: NOT
7432: PUSH
7433: LD_VAR 0 11
7437: NOT
7438: OR
7439: PUSH
7440: LD_VAR 0 12
7444: NOT
7445: OR
7446: PUSH
7447: LD_VAR 0 10
7451: NOT
7452: OR
7453: IFFALSE 7488
// begin result := [ chassis , engine , control , weapon ] ;
7455: LD_ADDR_VAR 0 6
7459: PUSH
7460: LD_VAR 0 2
7464: PUSH
7465: LD_VAR 0 3
7469: PUSH
7470: LD_VAR 0 4
7474: PUSH
7475: LD_VAR 0 5
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: ST_TO_ADDR
// exit ;
7486: GO 7779
// end ; if not chassis in _chassis then
7488: LD_VAR 0 2
7492: PUSH
7493: LD_VAR 0 9
7497: IN
7498: NOT
7499: IFFALSE 7525
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7501: LD_ADDR_VAR 0 2
7505: PUSH
7506: LD_VAR 0 9
7510: PUSH
7511: LD_INT 1
7513: PPUSH
7514: LD_VAR 0 9
7518: PPUSH
7519: CALL_OW 12
7523: ARRAY
7524: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7525: LD_VAR 0 2
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL 7784 0 2
7539: NOT
7540: IFFALSE 7599
// repeat engine := _engine [ 1 ] ;
7542: LD_ADDR_VAR 0 3
7546: PUSH
7547: LD_VAR 0 11
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7556: LD_ADDR_VAR 0 11
7560: PUSH
7561: LD_VAR 0 11
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 3
7573: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7574: LD_VAR 0 2
7578: PPUSH
7579: LD_VAR 0 3
7583: PPUSH
7584: CALL 7784 0 2
7588: PUSH
7589: LD_VAR 0 11
7593: PUSH
7594: EMPTY
7595: EQUAL
7596: OR
7597: IFFALSE 7542
// if not control in _control then
7599: LD_VAR 0 4
7603: PUSH
7604: LD_VAR 0 12
7608: IN
7609: NOT
7610: IFFALSE 7636
// control := _control [ rand ( 1 , _control ) ] ;
7612: LD_ADDR_VAR 0 4
7616: PUSH
7617: LD_VAR 0 12
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_VAR 0 12
7629: PPUSH
7630: CALL_OW 12
7634: ARRAY
7635: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7636: LD_VAR 0 2
7640: PPUSH
7641: LD_VAR 0 5
7645: PPUSH
7646: CALL 8004 0 2
7650: NOT
7651: IFFALSE 7710
// repeat weapon := _weapon [ 1 ] ;
7653: LD_ADDR_VAR 0 5
7657: PUSH
7658: LD_VAR 0 10
7662: PUSH
7663: LD_INT 1
7665: ARRAY
7666: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7667: LD_ADDR_VAR 0 10
7671: PUSH
7672: LD_VAR 0 10
7676: PPUSH
7677: LD_INT 1
7679: PPUSH
7680: CALL_OW 3
7684: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7685: LD_VAR 0 2
7689: PPUSH
7690: LD_VAR 0 5
7694: PPUSH
7695: CALL 8004 0 2
7699: PUSH
7700: LD_VAR 0 10
7704: PUSH
7705: EMPTY
7706: EQUAL
7707: OR
7708: IFFALSE 7653
// result := [ ] ;
7710: LD_ADDR_VAR 0 6
7714: PUSH
7715: EMPTY
7716: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7717: LD_VAR 0 1
7721: PPUSH
7722: LD_VAR 0 2
7726: PPUSH
7727: LD_VAR 0 3
7731: PPUSH
7732: LD_VAR 0 4
7736: PPUSH
7737: LD_VAR 0 5
7741: PPUSH
7742: CALL_OW 448
7746: IFFALSE 7779
// result := [ chassis , engine , control , weapon ] ;
7748: LD_ADDR_VAR 0 6
7752: PUSH
7753: LD_VAR 0 2
7757: PUSH
7758: LD_VAR 0 3
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 5
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: ST_TO_ADDR
// end ;
7779: LD_VAR 0 6
7783: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7784: LD_INT 0
7786: PPUSH
// if not chassis or not engine then
7787: LD_VAR 0 1
7791: NOT
7792: PUSH
7793: LD_VAR 0 2
7797: NOT
7798: OR
7799: IFFALSE 7803
// exit ;
7801: GO 7999
// case engine of engine_solar :
7803: LD_VAR 0 2
7807: PUSH
7808: LD_INT 2
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7854
7816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7817: LD_ADDR_VAR 0 3
7821: PUSH
7822: LD_INT 11
7824: PUSH
7825: LD_INT 12
7827: PUSH
7828: LD_INT 13
7830: PUSH
7831: LD_INT 14
7833: PUSH
7834: LD_INT 1
7836: PUSH
7837: LD_INT 2
7839: PUSH
7840: LD_INT 3
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: ST_TO_ADDR
7852: GO 7983
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7924
7862: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7863: LD_ADDR_VAR 0 3
7867: PUSH
7868: LD_INT 11
7870: PUSH
7871: LD_INT 12
7873: PUSH
7874: LD_INT 13
7876: PUSH
7877: LD_INT 14
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: LD_INT 2
7885: PUSH
7886: LD_INT 3
7888: PUSH
7889: LD_INT 4
7891: PUSH
7892: LD_INT 5
7894: PUSH
7895: LD_INT 21
7897: PUSH
7898: LD_INT 23
7900: PUSH
7901: LD_INT 22
7903: PUSH
7904: LD_INT 24
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: ST_TO_ADDR
7922: GO 7983
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7982
7932: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: LD_INT 13
7940: PUSH
7941: LD_INT 14
7943: PUSH
7944: LD_INT 2
7946: PUSH
7947: LD_INT 3
7949: PUSH
7950: LD_INT 4
7952: PUSH
7953: LD_INT 5
7955: PUSH
7956: LD_INT 21
7958: PUSH
7959: LD_INT 22
7961: PUSH
7962: LD_INT 23
7964: PUSH
7965: LD_INT 24
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: ST_TO_ADDR
7980: GO 7983
7982: POP
// result := ( chassis in result ) ;
7983: LD_ADDR_VAR 0 3
7987: PUSH
7988: LD_VAR 0 1
7992: PUSH
7993: LD_VAR 0 3
7997: IN
7998: ST_TO_ADDR
// end ;
7999: LD_VAR 0 3
8003: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8004: LD_INT 0
8006: PPUSH
// if not chassis or not weapon then
8007: LD_VAR 0 1
8011: NOT
8012: PUSH
8013: LD_VAR 0 2
8017: NOT
8018: OR
8019: IFFALSE 8023
// exit ;
8021: GO 9083
// case weapon of us_machine_gun :
8023: LD_VAR 0 2
8027: PUSH
8028: LD_INT 2
8030: DOUBLE
8031: EQUAL
8032: IFTRUE 8036
8034: GO 8066
8036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8037: LD_ADDR_VAR 0 3
8041: PUSH
8042: LD_INT 1
8044: PUSH
8045: LD_INT 2
8047: PUSH
8048: LD_INT 3
8050: PUSH
8051: LD_INT 4
8053: PUSH
8054: LD_INT 5
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
8064: GO 9067
8066: LD_INT 3
8068: DOUBLE
8069: EQUAL
8070: IFTRUE 8074
8072: GO 8104
8074: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8075: LD_ADDR_VAR 0 3
8079: PUSH
8080: LD_INT 1
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: LD_INT 4
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: ST_TO_ADDR
8102: GO 9067
8104: LD_INT 11
8106: DOUBLE
8107: EQUAL
8108: IFTRUE 8112
8110: GO 8142
8112: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8113: LD_ADDR_VAR 0 3
8117: PUSH
8118: LD_INT 1
8120: PUSH
8121: LD_INT 2
8123: PUSH
8124: LD_INT 3
8126: PUSH
8127: LD_INT 4
8129: PUSH
8130: LD_INT 5
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: ST_TO_ADDR
8140: GO 9067
8142: LD_INT 4
8144: DOUBLE
8145: EQUAL
8146: IFTRUE 8150
8148: GO 8176
8150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8151: LD_ADDR_VAR 0 3
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: LD_INT 3
8161: PUSH
8162: LD_INT 4
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: ST_TO_ADDR
8174: GO 9067
8176: LD_INT 5
8178: DOUBLE
8179: EQUAL
8180: IFTRUE 8184
8182: GO 8210
8184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8185: LD_ADDR_VAR 0 3
8189: PUSH
8190: LD_INT 2
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: LD_INT 4
8198: PUSH
8199: LD_INT 5
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: ST_TO_ADDR
8208: GO 9067
8210: LD_INT 9
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 8244
8218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8219: LD_ADDR_VAR 0 3
8223: PUSH
8224: LD_INT 2
8226: PUSH
8227: LD_INT 3
8229: PUSH
8230: LD_INT 4
8232: PUSH
8233: LD_INT 5
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: ST_TO_ADDR
8242: GO 9067
8244: LD_INT 7
8246: DOUBLE
8247: EQUAL
8248: IFTRUE 8252
8250: GO 8278
8252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8253: LD_ADDR_VAR 0 3
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 3
8263: PUSH
8264: LD_INT 4
8266: PUSH
8267: LD_INT 5
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: ST_TO_ADDR
8276: GO 9067
8278: LD_INT 12
8280: DOUBLE
8281: EQUAL
8282: IFTRUE 8286
8284: GO 8312
8286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 3
8297: PUSH
8298: LD_INT 4
8300: PUSH
8301: LD_INT 5
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: ST_TO_ADDR
8310: GO 9067
8312: LD_INT 13
8314: DOUBLE
8315: EQUAL
8316: IFTRUE 8320
8318: GO 8346
8320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8321: LD_ADDR_VAR 0 3
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: LD_INT 4
8334: PUSH
8335: LD_INT 5
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: ST_TO_ADDR
8344: GO 9067
8346: LD_INT 14
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8372
8354: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_INT 4
8362: PUSH
8363: LD_INT 5
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
8370: GO 9067
8372: LD_INT 6
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8398
8380: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8381: LD_ADDR_VAR 0 3
8385: PUSH
8386: LD_INT 4
8388: PUSH
8389: LD_INT 5
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: ST_TO_ADDR
8396: GO 9067
8398: LD_INT 10
8400: DOUBLE
8401: EQUAL
8402: IFTRUE 8406
8404: GO 8424
8406: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8407: LD_ADDR_VAR 0 3
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: LD_INT 5
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: ST_TO_ADDR
8422: GO 9067
8424: LD_INT 22
8426: DOUBLE
8427: EQUAL
8428: IFTRUE 8432
8430: GO 8458
8432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8433: LD_ADDR_VAR 0 3
8437: PUSH
8438: LD_INT 11
8440: PUSH
8441: LD_INT 12
8443: PUSH
8444: LD_INT 13
8446: PUSH
8447: LD_INT 14
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: ST_TO_ADDR
8456: GO 9067
8458: LD_INT 23
8460: DOUBLE
8461: EQUAL
8462: IFTRUE 8466
8464: GO 8492
8466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_INT 11
8474: PUSH
8475: LD_INT 12
8477: PUSH
8478: LD_INT 13
8480: PUSH
8481: LD_INT 14
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
8490: GO 9067
8492: LD_INT 24
8494: DOUBLE
8495: EQUAL
8496: IFTRUE 8500
8498: GO 8526
8500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8501: LD_ADDR_VAR 0 3
8505: PUSH
8506: LD_INT 11
8508: PUSH
8509: LD_INT 12
8511: PUSH
8512: LD_INT 13
8514: PUSH
8515: LD_INT 14
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: ST_TO_ADDR
8524: GO 9067
8526: LD_INT 30
8528: DOUBLE
8529: EQUAL
8530: IFTRUE 8534
8532: GO 8560
8534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8535: LD_ADDR_VAR 0 3
8539: PUSH
8540: LD_INT 11
8542: PUSH
8543: LD_INT 12
8545: PUSH
8546: LD_INT 13
8548: PUSH
8549: LD_INT 14
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: ST_TO_ADDR
8558: GO 9067
8560: LD_INT 25
8562: DOUBLE
8563: EQUAL
8564: IFTRUE 8568
8566: GO 8586
8568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8569: LD_ADDR_VAR 0 3
8573: PUSH
8574: LD_INT 13
8576: PUSH
8577: LD_INT 14
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: ST_TO_ADDR
8584: GO 9067
8586: LD_INT 27
8588: DOUBLE
8589: EQUAL
8590: IFTRUE 8594
8592: GO 8612
8594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8595: LD_ADDR_VAR 0 3
8599: PUSH
8600: LD_INT 13
8602: PUSH
8603: LD_INT 14
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: ST_TO_ADDR
8610: GO 9067
8612: LD_INT 92
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8646
8620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8621: LD_ADDR_VAR 0 3
8625: PUSH
8626: LD_INT 11
8628: PUSH
8629: LD_INT 12
8631: PUSH
8632: LD_INT 13
8634: PUSH
8635: LD_INT 14
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
8644: GO 9067
8646: LD_INT 28
8648: DOUBLE
8649: EQUAL
8650: IFTRUE 8654
8652: GO 8672
8654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8655: LD_ADDR_VAR 0 3
8659: PUSH
8660: LD_INT 13
8662: PUSH
8663: LD_INT 14
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: ST_TO_ADDR
8670: GO 9067
8672: LD_INT 29
8674: DOUBLE
8675: EQUAL
8676: IFTRUE 8680
8678: GO 8698
8680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: LD_INT 13
8688: PUSH
8689: LD_INT 14
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: ST_TO_ADDR
8696: GO 9067
8698: LD_INT 31
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8724
8706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8707: LD_ADDR_VAR 0 3
8711: PUSH
8712: LD_INT 13
8714: PUSH
8715: LD_INT 14
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: ST_TO_ADDR
8722: GO 9067
8724: LD_INT 26
8726: DOUBLE
8727: EQUAL
8728: IFTRUE 8732
8730: GO 8750
8732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8733: LD_ADDR_VAR 0 3
8737: PUSH
8738: LD_INT 13
8740: PUSH
8741: LD_INT 14
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: ST_TO_ADDR
8748: GO 9067
8750: LD_INT 42
8752: DOUBLE
8753: EQUAL
8754: IFTRUE 8758
8756: GO 8784
8758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8759: LD_ADDR_VAR 0 3
8763: PUSH
8764: LD_INT 21
8766: PUSH
8767: LD_INT 22
8769: PUSH
8770: LD_INT 23
8772: PUSH
8773: LD_INT 24
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: ST_TO_ADDR
8782: GO 9067
8784: LD_INT 43
8786: DOUBLE
8787: EQUAL
8788: IFTRUE 8792
8790: GO 8818
8792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8793: LD_ADDR_VAR 0 3
8797: PUSH
8798: LD_INT 21
8800: PUSH
8801: LD_INT 22
8803: PUSH
8804: LD_INT 23
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: ST_TO_ADDR
8816: GO 9067
8818: LD_INT 44
8820: DOUBLE
8821: EQUAL
8822: IFTRUE 8826
8824: GO 8852
8826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_INT 21
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_INT 23
8840: PUSH
8841: LD_INT 24
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: ST_TO_ADDR
8850: GO 9067
8852: LD_INT 45
8854: DOUBLE
8855: EQUAL
8856: IFTRUE 8860
8858: GO 8886
8860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8861: LD_ADDR_VAR 0 3
8865: PUSH
8866: LD_INT 21
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 24
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: ST_TO_ADDR
8884: GO 9067
8886: LD_INT 49
8888: DOUBLE
8889: EQUAL
8890: IFTRUE 8894
8892: GO 8920
8894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8895: LD_ADDR_VAR 0 3
8899: PUSH
8900: LD_INT 21
8902: PUSH
8903: LD_INT 22
8905: PUSH
8906: LD_INT 23
8908: PUSH
8909: LD_INT 24
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: ST_TO_ADDR
8918: GO 9067
8920: LD_INT 51
8922: DOUBLE
8923: EQUAL
8924: IFTRUE 8928
8926: GO 8954
8928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8929: LD_ADDR_VAR 0 3
8933: PUSH
8934: LD_INT 21
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 23
8942: PUSH
8943: LD_INT 24
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: ST_TO_ADDR
8952: GO 9067
8954: LD_INT 52
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8988
8962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8963: LD_ADDR_VAR 0 3
8967: PUSH
8968: LD_INT 21
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 23
8976: PUSH
8977: LD_INT 24
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: ST_TO_ADDR
8986: GO 9067
8988: LD_INT 53
8990: DOUBLE
8991: EQUAL
8992: IFTRUE 8996
8994: GO 9014
8996: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8997: LD_ADDR_VAR 0 3
9001: PUSH
9002: LD_INT 23
9004: PUSH
9005: LD_INT 24
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: ST_TO_ADDR
9012: GO 9067
9014: LD_INT 46
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9040
9022: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9023: LD_ADDR_VAR 0 3
9027: PUSH
9028: LD_INT 23
9030: PUSH
9031: LD_INT 24
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: ST_TO_ADDR
9038: GO 9067
9040: LD_INT 47
9042: DOUBLE
9043: EQUAL
9044: IFTRUE 9048
9046: GO 9066
9048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9049: LD_ADDR_VAR 0 3
9053: PUSH
9054: LD_INT 23
9056: PUSH
9057: LD_INT 24
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: ST_TO_ADDR
9064: GO 9067
9066: POP
// result := ( chassis in result ) ;
9067: LD_ADDR_VAR 0 3
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: LD_VAR 0 3
9081: IN
9082: ST_TO_ADDR
// end ;
9083: LD_VAR 0 3
9087: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9088: LD_INT 0
9090: PPUSH
9091: PPUSH
9092: PPUSH
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
// result := array ;
9097: LD_ADDR_VAR 0 5
9101: PUSH
9102: LD_VAR 0 1
9106: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9107: LD_VAR 0 1
9111: NOT
9112: PUSH
9113: LD_VAR 0 2
9117: NOT
9118: OR
9119: PUSH
9120: LD_VAR 0 3
9124: NOT
9125: OR
9126: PUSH
9127: LD_VAR 0 2
9131: PUSH
9132: LD_VAR 0 1
9136: GREATER
9137: OR
9138: PUSH
9139: LD_VAR 0 3
9143: PUSH
9144: LD_VAR 0 1
9148: GREATER
9149: OR
9150: IFFALSE 9154
// exit ;
9152: GO 9450
// if direction then
9154: LD_VAR 0 4
9158: IFFALSE 9222
// begin d := 1 ;
9160: LD_ADDR_VAR 0 9
9164: PUSH
9165: LD_INT 1
9167: ST_TO_ADDR
// if i_from > i_to then
9168: LD_VAR 0 2
9172: PUSH
9173: LD_VAR 0 3
9177: GREATER
9178: IFFALSE 9204
// length := ( array - i_from ) + i_to else
9180: LD_ADDR_VAR 0 11
9184: PUSH
9185: LD_VAR 0 1
9189: PUSH
9190: LD_VAR 0 2
9194: MINUS
9195: PUSH
9196: LD_VAR 0 3
9200: PLUS
9201: ST_TO_ADDR
9202: GO 9220
// length := i_to - i_from ;
9204: LD_ADDR_VAR 0 11
9208: PUSH
9209: LD_VAR 0 3
9213: PUSH
9214: LD_VAR 0 2
9218: MINUS
9219: ST_TO_ADDR
// end else
9220: GO 9283
// begin d := - 1 ;
9222: LD_ADDR_VAR 0 9
9226: PUSH
9227: LD_INT 1
9229: NEG
9230: ST_TO_ADDR
// if i_from > i_to then
9231: LD_VAR 0 2
9235: PUSH
9236: LD_VAR 0 3
9240: GREATER
9241: IFFALSE 9261
// length := i_from - i_to else
9243: LD_ADDR_VAR 0 11
9247: PUSH
9248: LD_VAR 0 2
9252: PUSH
9253: LD_VAR 0 3
9257: MINUS
9258: ST_TO_ADDR
9259: GO 9283
// length := ( array - i_to ) + i_from ;
9261: LD_ADDR_VAR 0 11
9265: PUSH
9266: LD_VAR 0 1
9270: PUSH
9271: LD_VAR 0 3
9275: MINUS
9276: PUSH
9277: LD_VAR 0 2
9281: PLUS
9282: ST_TO_ADDR
// end ; if not length then
9283: LD_VAR 0 11
9287: NOT
9288: IFFALSE 9292
// exit ;
9290: GO 9450
// tmp := array ;
9292: LD_ADDR_VAR 0 10
9296: PUSH
9297: LD_VAR 0 1
9301: ST_TO_ADDR
// for i = 1 to length do
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: DOUBLE
9308: LD_INT 1
9310: DEC
9311: ST_TO_ADDR
9312: LD_VAR 0 11
9316: PUSH
9317: FOR_TO
9318: IFFALSE 9438
// begin for j = 1 to array do
9320: LD_ADDR_VAR 0 7
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_VAR 0 1
9334: PUSH
9335: FOR_TO
9336: IFFALSE 9424
// begin k := j + d ;
9338: LD_ADDR_VAR 0 8
9342: PUSH
9343: LD_VAR 0 7
9347: PUSH
9348: LD_VAR 0 9
9352: PLUS
9353: ST_TO_ADDR
// if k > array then
9354: LD_VAR 0 8
9358: PUSH
9359: LD_VAR 0 1
9363: GREATER
9364: IFFALSE 9374
// k := 1 ;
9366: LD_ADDR_VAR 0 8
9370: PUSH
9371: LD_INT 1
9373: ST_TO_ADDR
// if not k then
9374: LD_VAR 0 8
9378: NOT
9379: IFFALSE 9391
// k := array ;
9381: LD_ADDR_VAR 0 8
9385: PUSH
9386: LD_VAR 0 1
9390: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9391: LD_ADDR_VAR 0 10
9395: PUSH
9396: LD_VAR 0 10
9400: PPUSH
9401: LD_VAR 0 8
9405: PPUSH
9406: LD_VAR 0 1
9410: PUSH
9411: LD_VAR 0 7
9415: ARRAY
9416: PPUSH
9417: CALL_OW 1
9421: ST_TO_ADDR
// end ;
9422: GO 9335
9424: POP
9425: POP
// array := tmp ;
9426: LD_ADDR_VAR 0 1
9430: PUSH
9431: LD_VAR 0 10
9435: ST_TO_ADDR
// end ;
9436: GO 9317
9438: POP
9439: POP
// result := array ;
9440: LD_ADDR_VAR 0 5
9444: PUSH
9445: LD_VAR 0 1
9449: ST_TO_ADDR
// end ;
9450: LD_VAR 0 5
9454: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9455: LD_INT 0
9457: PPUSH
9458: PPUSH
// result := 0 ;
9459: LD_ADDR_VAR 0 3
9463: PUSH
9464: LD_INT 0
9466: ST_TO_ADDR
// if not array or not value in array then
9467: LD_VAR 0 1
9471: NOT
9472: PUSH
9473: LD_VAR 0 2
9477: PUSH
9478: LD_VAR 0 1
9482: IN
9483: NOT
9484: OR
9485: IFFALSE 9489
// exit ;
9487: GO 9543
// for i = 1 to array do
9489: LD_ADDR_VAR 0 4
9493: PUSH
9494: DOUBLE
9495: LD_INT 1
9497: DEC
9498: ST_TO_ADDR
9499: LD_VAR 0 1
9503: PUSH
9504: FOR_TO
9505: IFFALSE 9541
// if value = array [ i ] then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_VAR 0 1
9516: PUSH
9517: LD_VAR 0 4
9521: ARRAY
9522: EQUAL
9523: IFFALSE 9539
// begin result := i ;
9525: LD_ADDR_VAR 0 3
9529: PUSH
9530: LD_VAR 0 4
9534: ST_TO_ADDR
// exit ;
9535: POP
9536: POP
9537: GO 9543
// end ;
9539: GO 9504
9541: POP
9542: POP
// end ;
9543: LD_VAR 0 3
9547: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9548: LD_INT 0
9550: PPUSH
// vc_chassis := chassis ;
9551: LD_ADDR_OWVAR 37
9555: PUSH
9556: LD_VAR 0 1
9560: ST_TO_ADDR
// vc_engine := engine ;
9561: LD_ADDR_OWVAR 39
9565: PUSH
9566: LD_VAR 0 2
9570: ST_TO_ADDR
// vc_control := control ;
9571: LD_ADDR_OWVAR 38
9575: PUSH
9576: LD_VAR 0 3
9580: ST_TO_ADDR
// vc_weapon := weapon ;
9581: LD_ADDR_OWVAR 40
9585: PUSH
9586: LD_VAR 0 4
9590: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9591: LD_ADDR_OWVAR 41
9595: PUSH
9596: LD_VAR 0 5
9600: ST_TO_ADDR
// end ;
9601: LD_VAR 0 6
9605: RET
// export function WantPlant ( unit ) ; var task ; begin
9606: LD_INT 0
9608: PPUSH
9609: PPUSH
// result := false ;
9610: LD_ADDR_VAR 0 2
9614: PUSH
9615: LD_INT 0
9617: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9618: LD_ADDR_VAR 0 3
9622: PUSH
9623: LD_VAR 0 1
9627: PPUSH
9628: CALL_OW 437
9632: ST_TO_ADDR
// if task then
9633: LD_VAR 0 3
9637: IFFALSE 9665
// if task [ 1 ] [ 1 ] = p then
9639: LD_VAR 0 3
9643: PUSH
9644: LD_INT 1
9646: ARRAY
9647: PUSH
9648: LD_INT 1
9650: ARRAY
9651: PUSH
9652: LD_STRING p
9654: EQUAL
9655: IFFALSE 9665
// result := true ;
9657: LD_ADDR_VAR 0 2
9661: PUSH
9662: LD_INT 1
9664: ST_TO_ADDR
// end ;
9665: LD_VAR 0 2
9669: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9670: LD_INT 0
9672: PPUSH
9673: PPUSH
9674: PPUSH
9675: PPUSH
// if pos < 1 then
9676: LD_VAR 0 2
9680: PUSH
9681: LD_INT 1
9683: LESS
9684: IFFALSE 9688
// exit ;
9686: GO 9991
// if pos = 1 then
9688: LD_VAR 0 2
9692: PUSH
9693: LD_INT 1
9695: EQUAL
9696: IFFALSE 9729
// result := Replace ( arr , pos [ 1 ] , value ) else
9698: LD_ADDR_VAR 0 4
9702: PUSH
9703: LD_VAR 0 1
9707: PPUSH
9708: LD_VAR 0 2
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: PPUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: CALL_OW 1
9726: ST_TO_ADDR
9727: GO 9991
// begin tmp := arr ;
9729: LD_ADDR_VAR 0 6
9733: PUSH
9734: LD_VAR 0 1
9738: ST_TO_ADDR
// s_arr := [ tmp ] ;
9739: LD_ADDR_VAR 0 7
9743: PUSH
9744: LD_VAR 0 6
9748: PUSH
9749: EMPTY
9750: LIST
9751: ST_TO_ADDR
// for i = 1 to pos - 1 do
9752: LD_ADDR_VAR 0 5
9756: PUSH
9757: DOUBLE
9758: LD_INT 1
9760: DEC
9761: ST_TO_ADDR
9762: LD_VAR 0 2
9766: PUSH
9767: LD_INT 1
9769: MINUS
9770: PUSH
9771: FOR_TO
9772: IFFALSE 9817
// begin tmp := tmp [ pos [ i ] ] ;
9774: LD_ADDR_VAR 0 6
9778: PUSH
9779: LD_VAR 0 6
9783: PUSH
9784: LD_VAR 0 2
9788: PUSH
9789: LD_VAR 0 5
9793: ARRAY
9794: ARRAY
9795: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9796: LD_ADDR_VAR 0 7
9800: PUSH
9801: LD_VAR 0 7
9805: PUSH
9806: LD_VAR 0 6
9810: PUSH
9811: EMPTY
9812: LIST
9813: ADD
9814: ST_TO_ADDR
// end ;
9815: GO 9771
9817: POP
9818: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9819: LD_ADDR_VAR 0 6
9823: PUSH
9824: LD_VAR 0 6
9828: PPUSH
9829: LD_VAR 0 2
9833: PUSH
9834: LD_VAR 0 2
9838: ARRAY
9839: PPUSH
9840: LD_VAR 0 3
9844: PPUSH
9845: CALL_OW 1
9849: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9850: LD_ADDR_VAR 0 7
9854: PUSH
9855: LD_VAR 0 7
9859: PPUSH
9860: LD_VAR 0 7
9864: PPUSH
9865: LD_VAR 0 6
9869: PPUSH
9870: CALL_OW 1
9874: ST_TO_ADDR
// for i = s_arr downto 2 do
9875: LD_ADDR_VAR 0 5
9879: PUSH
9880: DOUBLE
9881: LD_VAR 0 7
9885: INC
9886: ST_TO_ADDR
9887: LD_INT 2
9889: PUSH
9890: FOR_DOWNTO
9891: IFFALSE 9975
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 7
9902: PUSH
9903: LD_VAR 0 5
9907: PUSH
9908: LD_INT 1
9910: MINUS
9911: ARRAY
9912: PPUSH
9913: LD_VAR 0 2
9917: PUSH
9918: LD_VAR 0 5
9922: PUSH
9923: LD_INT 1
9925: MINUS
9926: ARRAY
9927: PPUSH
9928: LD_VAR 0 7
9932: PUSH
9933: LD_VAR 0 5
9937: ARRAY
9938: PPUSH
9939: CALL_OW 1
9943: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9944: LD_ADDR_VAR 0 7
9948: PUSH
9949: LD_VAR 0 7
9953: PPUSH
9954: LD_VAR 0 5
9958: PUSH
9959: LD_INT 1
9961: MINUS
9962: PPUSH
9963: LD_VAR 0 6
9967: PPUSH
9968: CALL_OW 1
9972: ST_TO_ADDR
// end ;
9973: GO 9890
9975: POP
9976: POP
// result := s_arr [ 1 ] ;
9977: LD_ADDR_VAR 0 4
9981: PUSH
9982: LD_VAR 0 7
9986: PUSH
9987: LD_INT 1
9989: ARRAY
9990: ST_TO_ADDR
// end ; end ;
9991: LD_VAR 0 4
9995: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9996: LD_INT 0
9998: PPUSH
9999: PPUSH
// if not list then
10000: LD_VAR 0 1
10004: NOT
10005: IFFALSE 10009
// exit ;
10007: GO 10100
// i := list [ pos1 ] ;
10009: LD_ADDR_VAR 0 5
10013: PUSH
10014: LD_VAR 0 1
10018: PUSH
10019: LD_VAR 0 2
10023: ARRAY
10024: ST_TO_ADDR
// if not i then
10025: LD_VAR 0 5
10029: NOT
10030: IFFALSE 10034
// exit ;
10032: GO 10100
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10034: LD_ADDR_VAR 0 1
10038: PUSH
10039: LD_VAR 0 1
10043: PPUSH
10044: LD_VAR 0 2
10048: PPUSH
10049: LD_VAR 0 1
10053: PUSH
10054: LD_VAR 0 3
10058: ARRAY
10059: PPUSH
10060: CALL_OW 1
10064: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10065: LD_ADDR_VAR 0 1
10069: PUSH
10070: LD_VAR 0 1
10074: PPUSH
10075: LD_VAR 0 3
10079: PPUSH
10080: LD_VAR 0 5
10084: PPUSH
10085: CALL_OW 1
10089: ST_TO_ADDR
// result := list ;
10090: LD_ADDR_VAR 0 4
10094: PUSH
10095: LD_VAR 0 1
10099: ST_TO_ADDR
// end ;
10100: LD_VAR 0 4
10104: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10105: LD_INT 0
10107: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10108: LD_ADDR_VAR 0 5
10112: PUSH
10113: LD_VAR 0 1
10117: PPUSH
10118: CALL_OW 250
10122: PPUSH
10123: LD_VAR 0 1
10127: PPUSH
10128: CALL_OW 251
10132: PPUSH
10133: LD_VAR 0 2
10137: PPUSH
10138: LD_VAR 0 3
10142: PPUSH
10143: LD_VAR 0 4
10147: PPUSH
10148: CALL 10526 0 5
10152: ST_TO_ADDR
// end ;
10153: LD_VAR 0 5
10157: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10158: LD_INT 0
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
// if not list or not unit then
10164: LD_VAR 0 2
10168: NOT
10169: PUSH
10170: LD_VAR 0 1
10174: NOT
10175: OR
10176: IFFALSE 10180
// exit ;
10178: GO 10521
// result := [ ] ;
10180: LD_ADDR_VAR 0 5
10184: PUSH
10185: EMPTY
10186: ST_TO_ADDR
// for i in list do
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 2
10196: PUSH
10197: FOR_IN
10198: IFFALSE 10416
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10200: LD_ADDR_VAR 0 8
10204: PUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: LD_VAR 0 6
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 6
10223: PUSH
10224: LD_INT 2
10226: ARRAY
10227: PPUSH
10228: CALL_OW 297
10232: ST_TO_ADDR
// if not Count ( result ) then
10233: LD_VAR 0 5
10237: PPUSH
10238: CALL 6810 0 1
10242: NOT
10243: IFFALSE 10276
// begin result := Join ( result , [ i , tmp ] ) ;
10245: LD_ADDR_VAR 0 5
10249: PUSH
10250: LD_VAR 0 5
10254: PPUSH
10255: LD_VAR 0 6
10259: PUSH
10260: LD_VAR 0 8
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PPUSH
10269: CALL 42410 0 2
10273: ST_TO_ADDR
// continue ;
10274: GO 10197
// end ; if result [ result ] [ 2 ] <= tmp then
10276: LD_VAR 0 5
10280: PUSH
10281: LD_VAR 0 5
10285: ARRAY
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PUSH
10291: LD_VAR 0 8
10295: LESSEQUAL
10296: IFFALSE 10329
// result := Join ( result , [ i , tmp ] ) else
10298: LD_ADDR_VAR 0 5
10302: PUSH
10303: LD_VAR 0 5
10307: PPUSH
10308: LD_VAR 0 6
10312: PUSH
10313: LD_VAR 0 8
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PPUSH
10322: CALL 42410 0 2
10326: ST_TO_ADDR
10327: GO 10414
// begin for j := 1 to Count ( result ) do
10329: LD_ADDR_VAR 0 7
10333: PUSH
10334: DOUBLE
10335: LD_INT 1
10337: DEC
10338: ST_TO_ADDR
10339: LD_VAR 0 5
10343: PPUSH
10344: CALL 6810 0 1
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10412
// begin if tmp < result [ j ] [ 2 ] then
10352: LD_VAR 0 8
10356: PUSH
10357: LD_VAR 0 5
10361: PUSH
10362: LD_VAR 0 7
10366: ARRAY
10367: PUSH
10368: LD_INT 2
10370: ARRAY
10371: LESS
10372: IFFALSE 10410
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10374: LD_ADDR_VAR 0 5
10378: PUSH
10379: LD_VAR 0 5
10383: PPUSH
10384: LD_VAR 0 7
10388: PPUSH
10389: LD_VAR 0 6
10393: PUSH
10394: LD_VAR 0 8
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 2
10407: ST_TO_ADDR
// break ;
10408: GO 10412
// end ; end ;
10410: GO 10349
10412: POP
10413: POP
// end ; end ;
10414: GO 10197
10416: POP
10417: POP
// if result and not asc then
10418: LD_VAR 0 5
10422: PUSH
10423: LD_VAR 0 3
10427: NOT
10428: AND
10429: IFFALSE 10446
// result := ReverseArray ( result ) ;
10431: LD_ADDR_VAR 0 5
10435: PUSH
10436: LD_VAR 0 5
10440: PPUSH
10441: CALL 37686 0 1
10445: ST_TO_ADDR
// tmp := [ ] ;
10446: LD_ADDR_VAR 0 8
10450: PUSH
10451: EMPTY
10452: ST_TO_ADDR
// if mode then
10453: LD_VAR 0 4
10457: IFFALSE 10521
// begin for i := 1 to result do
10459: LD_ADDR_VAR 0 6
10463: PUSH
10464: DOUBLE
10465: LD_INT 1
10467: DEC
10468: ST_TO_ADDR
10469: LD_VAR 0 5
10473: PUSH
10474: FOR_TO
10475: IFFALSE 10509
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10477: LD_ADDR_VAR 0 8
10481: PUSH
10482: LD_VAR 0 8
10486: PPUSH
10487: LD_VAR 0 5
10491: PUSH
10492: LD_VAR 0 6
10496: ARRAY
10497: PUSH
10498: LD_INT 1
10500: ARRAY
10501: PPUSH
10502: CALL 42410 0 2
10506: ST_TO_ADDR
10507: GO 10474
10509: POP
10510: POP
// result := tmp ;
10511: LD_ADDR_VAR 0 5
10515: PUSH
10516: LD_VAR 0 8
10520: ST_TO_ADDR
// end ; end ;
10521: LD_VAR 0 5
10525: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10526: LD_INT 0
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
// if not list then
10532: LD_VAR 0 3
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10929
// result := [ ] ;
10541: LD_ADDR_VAR 0 6
10545: PUSH
10546: EMPTY
10547: ST_TO_ADDR
// for i in list do
10548: LD_ADDR_VAR 0 7
10552: PUSH
10553: LD_VAR 0 3
10557: PUSH
10558: FOR_IN
10559: IFFALSE 10761
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10561: LD_ADDR_VAR 0 9
10565: PUSH
10566: LD_VAR 0 7
10570: PPUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: LD_VAR 0 2
10580: PPUSH
10581: CALL_OW 297
10585: ST_TO_ADDR
// if not result then
10586: LD_VAR 0 6
10590: NOT
10591: IFFALSE 10617
// result := [ [ i , tmp ] ] else
10593: LD_ADDR_VAR 0 6
10597: PUSH
10598: LD_VAR 0 7
10602: PUSH
10603: LD_VAR 0 9
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: ST_TO_ADDR
10615: GO 10759
// begin if result [ result ] [ 2 ] < tmp then
10617: LD_VAR 0 6
10621: PUSH
10622: LD_VAR 0 6
10626: ARRAY
10627: PUSH
10628: LD_INT 2
10630: ARRAY
10631: PUSH
10632: LD_VAR 0 9
10636: LESS
10637: IFFALSE 10679
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10639: LD_ADDR_VAR 0 6
10643: PUSH
10644: LD_VAR 0 6
10648: PPUSH
10649: LD_VAR 0 6
10653: PUSH
10654: LD_INT 1
10656: PLUS
10657: PPUSH
10658: LD_VAR 0 7
10662: PUSH
10663: LD_VAR 0 9
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 2
10676: ST_TO_ADDR
10677: GO 10759
// for j = 1 to result do
10679: LD_ADDR_VAR 0 8
10683: PUSH
10684: DOUBLE
10685: LD_INT 1
10687: DEC
10688: ST_TO_ADDR
10689: LD_VAR 0 6
10693: PUSH
10694: FOR_TO
10695: IFFALSE 10757
// begin if tmp < result [ j ] [ 2 ] then
10697: LD_VAR 0 9
10701: PUSH
10702: LD_VAR 0 6
10706: PUSH
10707: LD_VAR 0 8
10711: ARRAY
10712: PUSH
10713: LD_INT 2
10715: ARRAY
10716: LESS
10717: IFFALSE 10755
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10719: LD_ADDR_VAR 0 6
10723: PUSH
10724: LD_VAR 0 6
10728: PPUSH
10729: LD_VAR 0 8
10733: PPUSH
10734: LD_VAR 0 7
10738: PUSH
10739: LD_VAR 0 9
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PPUSH
10748: CALL_OW 2
10752: ST_TO_ADDR
// break ;
10753: GO 10757
// end ; end ;
10755: GO 10694
10757: POP
10758: POP
// end ; end ;
10759: GO 10558
10761: POP
10762: POP
// if result and not asc then
10763: LD_VAR 0 6
10767: PUSH
10768: LD_VAR 0 4
10772: NOT
10773: AND
10774: IFFALSE 10849
// begin tmp := result ;
10776: LD_ADDR_VAR 0 9
10780: PUSH
10781: LD_VAR 0 6
10785: ST_TO_ADDR
// for i = tmp downto 1 do
10786: LD_ADDR_VAR 0 7
10790: PUSH
10791: DOUBLE
10792: LD_VAR 0 9
10796: INC
10797: ST_TO_ADDR
10798: LD_INT 1
10800: PUSH
10801: FOR_DOWNTO
10802: IFFALSE 10847
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10804: LD_ADDR_VAR 0 6
10808: PUSH
10809: LD_VAR 0 6
10813: PPUSH
10814: LD_VAR 0 9
10818: PUSH
10819: LD_VAR 0 7
10823: MINUS
10824: PUSH
10825: LD_INT 1
10827: PLUS
10828: PPUSH
10829: LD_VAR 0 9
10833: PUSH
10834: LD_VAR 0 7
10838: ARRAY
10839: PPUSH
10840: CALL_OW 1
10844: ST_TO_ADDR
10845: GO 10801
10847: POP
10848: POP
// end ; tmp := [ ] ;
10849: LD_ADDR_VAR 0 9
10853: PUSH
10854: EMPTY
10855: ST_TO_ADDR
// if mode then
10856: LD_VAR 0 5
10860: IFFALSE 10929
// begin for i = 1 to result do
10862: LD_ADDR_VAR 0 7
10866: PUSH
10867: DOUBLE
10868: LD_INT 1
10870: DEC
10871: ST_TO_ADDR
10872: LD_VAR 0 6
10876: PUSH
10877: FOR_TO
10878: IFFALSE 10917
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10880: LD_ADDR_VAR 0 9
10884: PUSH
10885: LD_VAR 0 9
10889: PPUSH
10890: LD_VAR 0 7
10894: PPUSH
10895: LD_VAR 0 6
10899: PUSH
10900: LD_VAR 0 7
10904: ARRAY
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: CALL_OW 1
10914: ST_TO_ADDR
10915: GO 10877
10917: POP
10918: POP
// result := tmp ;
10919: LD_ADDR_VAR 0 6
10923: PUSH
10924: LD_VAR 0 9
10928: ST_TO_ADDR
// end ; end ;
10929: LD_VAR 0 6
10933: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10934: LD_INT 0
10936: PPUSH
10937: PPUSH
10938: PPUSH
10939: PPUSH
10940: PPUSH
10941: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10942: LD_ADDR_VAR 0 5
10946: PUSH
10947: LD_INT 0
10949: PUSH
10950: LD_INT 0
10952: PUSH
10953: LD_INT 0
10955: PUSH
10956: EMPTY
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: ST_TO_ADDR
// if not x or not y then
10964: LD_VAR 0 2
10968: NOT
10969: PUSH
10970: LD_VAR 0 3
10974: NOT
10975: OR
10976: IFFALSE 10980
// exit ;
10978: GO 12630
// if not range then
10980: LD_VAR 0 4
10984: NOT
10985: IFFALSE 10995
// range := 10 ;
10987: LD_ADDR_VAR 0 4
10991: PUSH
10992: LD_INT 10
10994: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10995: LD_ADDR_VAR 0 8
10999: PUSH
11000: LD_INT 81
11002: PUSH
11003: LD_VAR 0 1
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 92
11014: PUSH
11015: LD_VAR 0 2
11019: PUSH
11020: LD_VAR 0 3
11024: PUSH
11025: LD_VAR 0 4
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 3
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PPUSH
11058: CALL_OW 69
11062: ST_TO_ADDR
// if not tmp then
11063: LD_VAR 0 8
11067: NOT
11068: IFFALSE 11072
// exit ;
11070: GO 12630
// for i in tmp do
11072: LD_ADDR_VAR 0 6
11076: PUSH
11077: LD_VAR 0 8
11081: PUSH
11082: FOR_IN
11083: IFFALSE 12605
// begin points := [ 0 , 0 , 0 ] ;
11085: LD_ADDR_VAR 0 9
11089: PUSH
11090: LD_INT 0
11092: PUSH
11093: LD_INT 0
11095: PUSH
11096: LD_INT 0
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: ST_TO_ADDR
// bpoints := 1 ;
11104: LD_ADDR_VAR 0 10
11108: PUSH
11109: LD_INT 1
11111: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11112: LD_VAR 0 6
11116: PPUSH
11117: CALL_OW 247
11121: PUSH
11122: LD_INT 1
11124: DOUBLE
11125: EQUAL
11126: IFTRUE 11130
11128: GO 11708
11130: POP
// begin if GetClass ( i ) = 1 then
11131: LD_VAR 0 6
11135: PPUSH
11136: CALL_OW 257
11140: PUSH
11141: LD_INT 1
11143: EQUAL
11144: IFFALSE 11165
// points := [ 10 , 5 , 3 ] ;
11146: LD_ADDR_VAR 0 9
11150: PUSH
11151: LD_INT 10
11153: PUSH
11154: LD_INT 5
11156: PUSH
11157: LD_INT 3
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11165: LD_VAR 0 6
11169: PPUSH
11170: CALL_OW 257
11174: PUSH
11175: LD_INT 2
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: LD_INT 4
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: IN
11189: IFFALSE 11210
// points := [ 3 , 2 , 1 ] ;
11191: LD_ADDR_VAR 0 9
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: LD_INT 2
11201: PUSH
11202: LD_INT 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11210: LD_VAR 0 6
11214: PPUSH
11215: CALL_OW 257
11219: PUSH
11220: LD_INT 5
11222: EQUAL
11223: IFFALSE 11244
// points := [ 130 , 5 , 2 ] ;
11225: LD_ADDR_VAR 0 9
11229: PUSH
11230: LD_INT 130
11232: PUSH
11233: LD_INT 5
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11244: LD_VAR 0 6
11248: PPUSH
11249: CALL_OW 257
11253: PUSH
11254: LD_INT 8
11256: EQUAL
11257: IFFALSE 11278
// points := [ 35 , 35 , 30 ] ;
11259: LD_ADDR_VAR 0 9
11263: PUSH
11264: LD_INT 35
11266: PUSH
11267: LD_INT 35
11269: PUSH
11270: LD_INT 30
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: LIST
11277: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11278: LD_VAR 0 6
11282: PPUSH
11283: CALL_OW 257
11287: PUSH
11288: LD_INT 9
11290: EQUAL
11291: IFFALSE 11312
// points := [ 20 , 55 , 40 ] ;
11293: LD_ADDR_VAR 0 9
11297: PUSH
11298: LD_INT 20
11300: PUSH
11301: LD_INT 55
11303: PUSH
11304: LD_INT 40
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11312: LD_VAR 0 6
11316: PPUSH
11317: CALL_OW 257
11321: PUSH
11322: LD_INT 12
11324: PUSH
11325: LD_INT 16
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: IN
11332: IFFALSE 11353
// points := [ 5 , 3 , 2 ] ;
11334: LD_ADDR_VAR 0 9
11338: PUSH
11339: LD_INT 5
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: LD_INT 2
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 257
11362: PUSH
11363: LD_INT 17
11365: EQUAL
11366: IFFALSE 11387
// points := [ 100 , 50 , 75 ] ;
11368: LD_ADDR_VAR 0 9
11372: PUSH
11373: LD_INT 100
11375: PUSH
11376: LD_INT 50
11378: PUSH
11379: LD_INT 75
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11387: LD_VAR 0 6
11391: PPUSH
11392: CALL_OW 257
11396: PUSH
11397: LD_INT 15
11399: EQUAL
11400: IFFALSE 11421
// points := [ 10 , 5 , 3 ] ;
11402: LD_ADDR_VAR 0 9
11406: PUSH
11407: LD_INT 10
11409: PUSH
11410: LD_INT 5
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11421: LD_VAR 0 6
11425: PPUSH
11426: CALL_OW 257
11430: PUSH
11431: LD_INT 14
11433: EQUAL
11434: IFFALSE 11455
// points := [ 10 , 0 , 0 ] ;
11436: LD_ADDR_VAR 0 9
11440: PUSH
11441: LD_INT 10
11443: PUSH
11444: LD_INT 0
11446: PUSH
11447: LD_INT 0
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11455: LD_VAR 0 6
11459: PPUSH
11460: CALL_OW 257
11464: PUSH
11465: LD_INT 11
11467: EQUAL
11468: IFFALSE 11489
// points := [ 30 , 10 , 5 ] ;
11470: LD_ADDR_VAR 0 9
11474: PUSH
11475: LD_INT 30
11477: PUSH
11478: LD_INT 10
11480: PUSH
11481: LD_INT 5
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11489: LD_VAR 0 1
11493: PPUSH
11494: LD_INT 5
11496: PPUSH
11497: CALL_OW 321
11501: PUSH
11502: LD_INT 2
11504: EQUAL
11505: IFFALSE 11522
// bpoints := bpoints * 1.8 ;
11507: LD_ADDR_VAR 0 10
11511: PUSH
11512: LD_VAR 0 10
11516: PUSH
11517: LD_REAL  1.80000000000000E+0000
11520: MUL
11521: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11522: LD_VAR 0 6
11526: PPUSH
11527: CALL_OW 257
11531: PUSH
11532: LD_INT 1
11534: PUSH
11535: LD_INT 2
11537: PUSH
11538: LD_INT 3
11540: PUSH
11541: LD_INT 4
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: IN
11550: PUSH
11551: LD_VAR 0 1
11555: PPUSH
11556: LD_INT 51
11558: PPUSH
11559: CALL_OW 321
11563: PUSH
11564: LD_INT 2
11566: EQUAL
11567: AND
11568: IFFALSE 11585
// bpoints := bpoints * 1.2 ;
11570: LD_ADDR_VAR 0 10
11574: PUSH
11575: LD_VAR 0 10
11579: PUSH
11580: LD_REAL  1.20000000000000E+0000
11583: MUL
11584: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11585: LD_VAR 0 6
11589: PPUSH
11590: CALL_OW 257
11594: PUSH
11595: LD_INT 5
11597: PUSH
11598: LD_INT 7
11600: PUSH
11601: LD_INT 9
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: IN
11609: PUSH
11610: LD_VAR 0 1
11614: PPUSH
11615: LD_INT 52
11617: PPUSH
11618: CALL_OW 321
11622: PUSH
11623: LD_INT 2
11625: EQUAL
11626: AND
11627: IFFALSE 11644
// bpoints := bpoints * 1.5 ;
11629: LD_ADDR_VAR 0 10
11633: PUSH
11634: LD_VAR 0 10
11638: PUSH
11639: LD_REAL  1.50000000000000E+0000
11642: MUL
11643: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11644: LD_VAR 0 1
11648: PPUSH
11649: LD_INT 66
11651: PPUSH
11652: CALL_OW 321
11656: PUSH
11657: LD_INT 2
11659: EQUAL
11660: IFFALSE 11677
// bpoints := bpoints * 1.1 ;
11662: LD_ADDR_VAR 0 10
11666: PUSH
11667: LD_VAR 0 10
11671: PUSH
11672: LD_REAL  1.10000000000000E+0000
11675: MUL
11676: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11677: LD_ADDR_VAR 0 10
11681: PUSH
11682: LD_VAR 0 10
11686: PUSH
11687: LD_VAR 0 6
11691: PPUSH
11692: LD_INT 1
11694: PPUSH
11695: CALL_OW 259
11699: PUSH
11700: LD_REAL  1.15000000000000E+0000
11703: MUL
11704: MUL
11705: ST_TO_ADDR
// end ; unit_vehicle :
11706: GO 12534
11708: LD_INT 2
11710: DOUBLE
11711: EQUAL
11712: IFTRUE 11716
11714: GO 12522
11716: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11717: LD_VAR 0 6
11721: PPUSH
11722: CALL_OW 264
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 42
11732: PUSH
11733: LD_INT 24
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: IN
11741: IFFALSE 11762
// points := [ 25 , 5 , 3 ] ;
11743: LD_ADDR_VAR 0 9
11747: PUSH
11748: LD_INT 25
11750: PUSH
11751: LD_INT 5
11753: PUSH
11754: LD_INT 3
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11762: LD_VAR 0 6
11766: PPUSH
11767: CALL_OW 264
11771: PUSH
11772: LD_INT 4
11774: PUSH
11775: LD_INT 43
11777: PUSH
11778: LD_INT 25
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: IN
11786: IFFALSE 11807
// points := [ 40 , 15 , 5 ] ;
11788: LD_ADDR_VAR 0 9
11792: PUSH
11793: LD_INT 40
11795: PUSH
11796: LD_INT 15
11798: PUSH
11799: LD_INT 5
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11807: LD_VAR 0 6
11811: PPUSH
11812: CALL_OW 264
11816: PUSH
11817: LD_INT 3
11819: PUSH
11820: LD_INT 23
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: IN
11827: IFFALSE 11848
// points := [ 7 , 25 , 8 ] ;
11829: LD_ADDR_VAR 0 9
11833: PUSH
11834: LD_INT 7
11836: PUSH
11837: LD_INT 25
11839: PUSH
11840: LD_INT 8
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11848: LD_VAR 0 6
11852: PPUSH
11853: CALL_OW 264
11857: PUSH
11858: LD_INT 5
11860: PUSH
11861: LD_INT 27
11863: PUSH
11864: LD_INT 44
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: IN
11872: IFFALSE 11893
// points := [ 14 , 50 , 16 ] ;
11874: LD_ADDR_VAR 0 9
11878: PUSH
11879: LD_INT 14
11881: PUSH
11882: LD_INT 50
11884: PUSH
11885: LD_INT 16
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11893: LD_VAR 0 6
11897: PPUSH
11898: CALL_OW 264
11902: PUSH
11903: LD_INT 6
11905: PUSH
11906: LD_INT 46
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: IN
11913: IFFALSE 11934
// points := [ 32 , 120 , 70 ] ;
11915: LD_ADDR_VAR 0 9
11919: PUSH
11920: LD_INT 32
11922: PUSH
11923: LD_INT 120
11925: PUSH
11926: LD_INT 70
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11934: LD_VAR 0 6
11938: PPUSH
11939: CALL_OW 264
11943: PUSH
11944: LD_INT 7
11946: PUSH
11947: LD_INT 28
11949: PUSH
11950: LD_INT 45
11952: PUSH
11953: LD_INT 92
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: IN
11962: IFFALSE 11983
// points := [ 35 , 20 , 45 ] ;
11964: LD_ADDR_VAR 0 9
11968: PUSH
11969: LD_INT 35
11971: PUSH
11972: LD_INT 20
11974: PUSH
11975: LD_INT 45
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11983: LD_VAR 0 6
11987: PPUSH
11988: CALL_OW 264
11992: PUSH
11993: LD_INT 47
11995: PUSH
11996: EMPTY
11997: LIST
11998: IN
11999: IFFALSE 12020
// points := [ 67 , 45 , 75 ] ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 67
12008: PUSH
12009: LD_INT 45
12011: PUSH
12012: LD_INT 75
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12020: LD_VAR 0 6
12024: PPUSH
12025: CALL_OW 264
12029: PUSH
12030: LD_INT 26
12032: PUSH
12033: EMPTY
12034: LIST
12035: IN
12036: IFFALSE 12057
// points := [ 120 , 30 , 80 ] ;
12038: LD_ADDR_VAR 0 9
12042: PUSH
12043: LD_INT 120
12045: PUSH
12046: LD_INT 30
12048: PUSH
12049: LD_INT 80
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12057: LD_VAR 0 6
12061: PPUSH
12062: CALL_OW 264
12066: PUSH
12067: LD_INT 22
12069: PUSH
12070: EMPTY
12071: LIST
12072: IN
12073: IFFALSE 12094
// points := [ 40 , 1 , 1 ] ;
12075: LD_ADDR_VAR 0 9
12079: PUSH
12080: LD_INT 40
12082: PUSH
12083: LD_INT 1
12085: PUSH
12086: LD_INT 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12094: LD_VAR 0 6
12098: PPUSH
12099: CALL_OW 264
12103: PUSH
12104: LD_INT 29
12106: PUSH
12107: EMPTY
12108: LIST
12109: IN
12110: IFFALSE 12131
// points := [ 70 , 200 , 400 ] ;
12112: LD_ADDR_VAR 0 9
12116: PUSH
12117: LD_INT 70
12119: PUSH
12120: LD_INT 200
12122: PUSH
12123: LD_INT 400
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12131: LD_VAR 0 6
12135: PPUSH
12136: CALL_OW 264
12140: PUSH
12141: LD_INT 14
12143: PUSH
12144: LD_INT 53
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: IN
12151: IFFALSE 12172
// points := [ 40 , 10 , 20 ] ;
12153: LD_ADDR_VAR 0 9
12157: PUSH
12158: LD_INT 40
12160: PUSH
12161: LD_INT 10
12163: PUSH
12164: LD_INT 20
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12172: LD_VAR 0 6
12176: PPUSH
12177: CALL_OW 264
12181: PUSH
12182: LD_INT 9
12184: PUSH
12185: EMPTY
12186: LIST
12187: IN
12188: IFFALSE 12209
// points := [ 5 , 70 , 20 ] ;
12190: LD_ADDR_VAR 0 9
12194: PUSH
12195: LD_INT 5
12197: PUSH
12198: LD_INT 70
12200: PUSH
12201: LD_INT 20
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12209: LD_VAR 0 6
12213: PPUSH
12214: CALL_OW 264
12218: PUSH
12219: LD_INT 10
12221: PUSH
12222: EMPTY
12223: LIST
12224: IN
12225: IFFALSE 12246
// points := [ 35 , 110 , 70 ] ;
12227: LD_ADDR_VAR 0 9
12231: PUSH
12232: LD_INT 35
12234: PUSH
12235: LD_INT 110
12237: PUSH
12238: LD_INT 70
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12246: LD_VAR 0 6
12250: PPUSH
12251: CALL_OW 265
12255: PUSH
12256: LD_INT 25
12258: EQUAL
12259: IFFALSE 12280
// points := [ 80 , 65 , 100 ] ;
12261: LD_ADDR_VAR 0 9
12265: PUSH
12266: LD_INT 80
12268: PUSH
12269: LD_INT 65
12271: PUSH
12272: LD_INT 100
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12280: LD_VAR 0 6
12284: PPUSH
12285: CALL_OW 263
12289: PUSH
12290: LD_INT 1
12292: EQUAL
12293: IFFALSE 12328
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12295: LD_ADDR_VAR 0 10
12299: PUSH
12300: LD_VAR 0 10
12304: PUSH
12305: LD_VAR 0 6
12309: PPUSH
12310: CALL_OW 311
12314: PPUSH
12315: LD_INT 3
12317: PPUSH
12318: CALL_OW 259
12322: PUSH
12323: LD_INT 4
12325: MUL
12326: MUL
12327: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12328: LD_VAR 0 6
12332: PPUSH
12333: CALL_OW 263
12337: PUSH
12338: LD_INT 2
12340: EQUAL
12341: IFFALSE 12392
// begin j := IsControledBy ( i ) ;
12343: LD_ADDR_VAR 0 7
12347: PUSH
12348: LD_VAR 0 6
12352: PPUSH
12353: CALL_OW 312
12357: ST_TO_ADDR
// if j then
12358: LD_VAR 0 7
12362: IFFALSE 12392
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12364: LD_ADDR_VAR 0 10
12368: PUSH
12369: LD_VAR 0 10
12373: PUSH
12374: LD_VAR 0 7
12378: PPUSH
12379: LD_INT 3
12381: PPUSH
12382: CALL_OW 259
12386: PUSH
12387: LD_INT 3
12389: MUL
12390: MUL
12391: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12392: LD_VAR 0 6
12396: PPUSH
12397: CALL_OW 264
12401: PUSH
12402: LD_INT 5
12404: PUSH
12405: LD_INT 6
12407: PUSH
12408: LD_INT 46
12410: PUSH
12411: LD_INT 44
12413: PUSH
12414: LD_INT 47
12416: PUSH
12417: LD_INT 45
12419: PUSH
12420: LD_INT 28
12422: PUSH
12423: LD_INT 7
12425: PUSH
12426: LD_INT 27
12428: PUSH
12429: LD_INT 29
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: IN
12444: PUSH
12445: LD_VAR 0 1
12449: PPUSH
12450: LD_INT 52
12452: PPUSH
12453: CALL_OW 321
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: AND
12462: IFFALSE 12479
// bpoints := bpoints * 1.2 ;
12464: LD_ADDR_VAR 0 10
12468: PUSH
12469: LD_VAR 0 10
12473: PUSH
12474: LD_REAL  1.20000000000000E+0000
12477: MUL
12478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12479: LD_VAR 0 6
12483: PPUSH
12484: CALL_OW 264
12488: PUSH
12489: LD_INT 6
12491: PUSH
12492: LD_INT 46
12494: PUSH
12495: LD_INT 47
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: IN
12503: IFFALSE 12520
// bpoints := bpoints * 1.2 ;
12505: LD_ADDR_VAR 0 10
12509: PUSH
12510: LD_VAR 0 10
12514: PUSH
12515: LD_REAL  1.20000000000000E+0000
12518: MUL
12519: ST_TO_ADDR
// end ; unit_building :
12520: GO 12534
12522: LD_INT 3
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12533
12530: POP
// ; end ;
12531: GO 12534
12533: POP
// for j = 1 to 3 do
12534: LD_ADDR_VAR 0 7
12538: PUSH
12539: DOUBLE
12540: LD_INT 1
12542: DEC
12543: ST_TO_ADDR
12544: LD_INT 3
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12601
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12550: LD_ADDR_VAR 0 5
12554: PUSH
12555: LD_VAR 0 5
12559: PPUSH
12560: LD_VAR 0 7
12564: PPUSH
12565: LD_VAR 0 5
12569: PUSH
12570: LD_VAR 0 7
12574: ARRAY
12575: PUSH
12576: LD_VAR 0 9
12580: PUSH
12581: LD_VAR 0 7
12585: ARRAY
12586: PUSH
12587: LD_VAR 0 10
12591: MUL
12592: PLUS
12593: PPUSH
12594: CALL_OW 1
12598: ST_TO_ADDR
12599: GO 12547
12601: POP
12602: POP
// end ;
12603: GO 11082
12605: POP
12606: POP
// result := Replace ( result , 4 , tmp ) ;
12607: LD_ADDR_VAR 0 5
12611: PUSH
12612: LD_VAR 0 5
12616: PPUSH
12617: LD_INT 4
12619: PPUSH
12620: LD_VAR 0 8
12624: PPUSH
12625: CALL_OW 1
12629: ST_TO_ADDR
// end ;
12630: LD_VAR 0 5
12634: RET
// export function DangerAtRange ( unit , range ) ; begin
12635: LD_INT 0
12637: PPUSH
// if not unit then
12638: LD_VAR 0 1
12642: NOT
12643: IFFALSE 12647
// exit ;
12645: GO 12692
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12647: LD_ADDR_VAR 0 3
12651: PUSH
12652: LD_VAR 0 1
12656: PPUSH
12657: CALL_OW 255
12661: PPUSH
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 250
12671: PPUSH
12672: LD_VAR 0 1
12676: PPUSH
12677: CALL_OW 251
12681: PPUSH
12682: LD_VAR 0 2
12686: PPUSH
12687: CALL 10934 0 4
12691: ST_TO_ADDR
// end ;
12692: LD_VAR 0 3
12696: RET
// export function DangerInArea ( side , area ) ; begin
12697: LD_INT 0
12699: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_VAR 0 2
12709: PPUSH
12710: LD_INT 81
12712: PUSH
12713: LD_VAR 0 1
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 70
12726: ST_TO_ADDR
// end ;
12727: LD_VAR 0 3
12731: RET
// export function IsExtension ( b ) ; begin
12732: LD_INT 0
12734: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_VAR 0 1
12744: PUSH
12745: LD_INT 23
12747: PUSH
12748: LD_INT 20
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 17
12756: PUSH
12757: LD_INT 24
12759: PUSH
12760: LD_INT 21
12762: PUSH
12763: LD_INT 19
12765: PUSH
12766: LD_INT 16
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 18
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: IN
12787: ST_TO_ADDR
// end ;
12788: LD_VAR 0 2
12792: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12793: LD_INT 0
12795: PPUSH
12796: PPUSH
12797: PPUSH
// result := [ ] ;
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: EMPTY
12804: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12805: LD_ADDR_VAR 0 5
12809: PUSH
12810: LD_VAR 0 2
12814: PPUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 3
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 70
12829: ST_TO_ADDR
// if not tmp then
12830: LD_VAR 0 5
12834: NOT
12835: IFFALSE 12839
// exit ;
12837: GO 12903
// if checkLink then
12839: LD_VAR 0 3
12843: IFFALSE 12893
// begin for i in tmp do
12845: LD_ADDR_VAR 0 6
12849: PUSH
12850: LD_VAR 0 5
12854: PUSH
12855: FOR_IN
12856: IFFALSE 12891
// if GetBase ( i ) <> base then
12858: LD_VAR 0 6
12862: PPUSH
12863: CALL_OW 274
12867: PUSH
12868: LD_VAR 0 1
12872: NONEQUAL
12873: IFFALSE 12889
// ComLinkToBase ( base , i ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_VAR 0 6
12884: PPUSH
12885: CALL_OW 169
12889: GO 12855
12891: POP
12892: POP
// end ; result := tmp ;
12893: LD_ADDR_VAR 0 4
12897: PUSH
12898: LD_VAR 0 5
12902: ST_TO_ADDR
// end ;
12903: LD_VAR 0 4
12907: RET
// export function ComComplete ( units , b ) ; var i ; begin
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
// if not units then
12912: LD_VAR 0 1
12916: NOT
12917: IFFALSE 12921
// exit ;
12919: GO 13011
// for i in units do
12921: LD_ADDR_VAR 0 4
12925: PUSH
12926: LD_VAR 0 1
12930: PUSH
12931: FOR_IN
12932: IFFALSE 13009
// if BuildingStatus ( b ) = bs_build then
12934: LD_VAR 0 2
12938: PPUSH
12939: CALL_OW 461
12943: PUSH
12944: LD_INT 1
12946: EQUAL
12947: IFFALSE 13007
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12949: LD_VAR 0 4
12953: PPUSH
12954: LD_STRING h
12956: PUSH
12957: LD_VAR 0 2
12961: PPUSH
12962: CALL_OW 250
12966: PUSH
12967: LD_VAR 0 2
12971: PPUSH
12972: CALL_OW 251
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: LD_INT 0
12984: PUSH
12985: LD_INT 0
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: PPUSH
13003: CALL_OW 446
13007: GO 12931
13009: POP
13010: POP
// end ;
13011: LD_VAR 0 3
13015: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13016: LD_INT 0
13018: PPUSH
13019: PPUSH
13020: PPUSH
13021: PPUSH
13022: PPUSH
13023: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13024: LD_VAR 0 1
13028: NOT
13029: PUSH
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 263
13039: PUSH
13040: LD_INT 2
13042: NONEQUAL
13043: OR
13044: IFFALSE 13048
// exit ;
13046: GO 13364
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13048: LD_ADDR_VAR 0 6
13052: PUSH
13053: LD_INT 22
13055: PUSH
13056: LD_VAR 0 1
13060: PPUSH
13061: CALL_OW 255
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 2
13072: PUSH
13073: LD_INT 30
13075: PUSH
13076: LD_INT 36
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 34
13085: PUSH
13086: LD_INT 31
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 69
13106: ST_TO_ADDR
// if not tmp then
13107: LD_VAR 0 6
13111: NOT
13112: IFFALSE 13116
// exit ;
13114: GO 13364
// result := [ ] ;
13116: LD_ADDR_VAR 0 2
13120: PUSH
13121: EMPTY
13122: ST_TO_ADDR
// for i in tmp do
13123: LD_ADDR_VAR 0 3
13127: PUSH
13128: LD_VAR 0 6
13132: PUSH
13133: FOR_IN
13134: IFFALSE 13205
// begin t := UnitsInside ( i ) ;
13136: LD_ADDR_VAR 0 4
13140: PUSH
13141: LD_VAR 0 3
13145: PPUSH
13146: CALL_OW 313
13150: ST_TO_ADDR
// if t then
13151: LD_VAR 0 4
13155: IFFALSE 13203
// for j in t do
13157: LD_ADDR_VAR 0 7
13161: PUSH
13162: LD_VAR 0 4
13166: PUSH
13167: FOR_IN
13168: IFFALSE 13201
// result := Replace ( result , result + 1 , j ) ;
13170: LD_ADDR_VAR 0 2
13174: PUSH
13175: LD_VAR 0 2
13179: PPUSH
13180: LD_VAR 0 2
13184: PUSH
13185: LD_INT 1
13187: PLUS
13188: PPUSH
13189: LD_VAR 0 7
13193: PPUSH
13194: CALL_OW 1
13198: ST_TO_ADDR
13199: GO 13167
13201: POP
13202: POP
// end ;
13203: GO 13133
13205: POP
13206: POP
// if not result then
13207: LD_VAR 0 2
13211: NOT
13212: IFFALSE 13216
// exit ;
13214: GO 13364
// mech := result [ 1 ] ;
13216: LD_ADDR_VAR 0 5
13220: PUSH
13221: LD_VAR 0 2
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: ST_TO_ADDR
// if result > 1 then
13230: LD_VAR 0 2
13234: PUSH
13235: LD_INT 1
13237: GREATER
13238: IFFALSE 13350
// begin for i = 2 to result do
13240: LD_ADDR_VAR 0 3
13244: PUSH
13245: DOUBLE
13246: LD_INT 2
13248: DEC
13249: ST_TO_ADDR
13250: LD_VAR 0 2
13254: PUSH
13255: FOR_TO
13256: IFFALSE 13348
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13258: LD_ADDR_VAR 0 4
13262: PUSH
13263: LD_VAR 0 2
13267: PUSH
13268: LD_VAR 0 3
13272: ARRAY
13273: PPUSH
13274: LD_INT 3
13276: PPUSH
13277: CALL_OW 259
13281: PUSH
13282: LD_VAR 0 2
13286: PUSH
13287: LD_VAR 0 3
13291: ARRAY
13292: PPUSH
13293: CALL_OW 432
13297: MINUS
13298: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13299: LD_VAR 0 4
13303: PUSH
13304: LD_VAR 0 5
13308: PPUSH
13309: LD_INT 3
13311: PPUSH
13312: CALL_OW 259
13316: PUSH
13317: LD_VAR 0 5
13321: PPUSH
13322: CALL_OW 432
13326: MINUS
13327: GREATEREQUAL
13328: IFFALSE 13346
// mech := result [ i ] ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: LD_VAR 0 2
13339: PUSH
13340: LD_VAR 0 3
13344: ARRAY
13345: ST_TO_ADDR
// end ;
13346: GO 13255
13348: POP
13349: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13350: LD_VAR 0 1
13354: PPUSH
13355: LD_VAR 0 5
13359: PPUSH
13360: CALL_OW 135
// end ;
13364: LD_VAR 0 2
13368: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13369: LD_INT 0
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
13377: PPUSH
13378: PPUSH
13379: PPUSH
13380: PPUSH
13381: PPUSH
13382: PPUSH
13383: PPUSH
// result := [ ] ;
13384: LD_ADDR_VAR 0 7
13388: PUSH
13389: EMPTY
13390: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 266
13400: PUSH
13401: LD_INT 0
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: IN
13411: NOT
13412: IFFALSE 13416
// exit ;
13414: GO 15050
// if name then
13416: LD_VAR 0 3
13420: IFFALSE 13436
// SetBName ( base_dep , name ) ;
13422: LD_VAR 0 1
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: CALL_OW 500
// base := GetBase ( base_dep ) ;
13436: LD_ADDR_VAR 0 15
13440: PUSH
13441: LD_VAR 0 1
13445: PPUSH
13446: CALL_OW 274
13450: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13451: LD_ADDR_VAR 0 16
13455: PUSH
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 255
13465: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13466: LD_ADDR_VAR 0 17
13470: PUSH
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL_OW 248
13480: ST_TO_ADDR
// if sources then
13481: LD_VAR 0 5
13485: IFFALSE 13532
// for i = 1 to 3 do
13487: LD_ADDR_VAR 0 8
13491: PUSH
13492: DOUBLE
13493: LD_INT 1
13495: DEC
13496: ST_TO_ADDR
13497: LD_INT 3
13499: PUSH
13500: FOR_TO
13501: IFFALSE 13530
// AddResourceType ( base , i , sources [ i ] ) ;
13503: LD_VAR 0 15
13507: PPUSH
13508: LD_VAR 0 8
13512: PPUSH
13513: LD_VAR 0 5
13517: PUSH
13518: LD_VAR 0 8
13522: ARRAY
13523: PPUSH
13524: CALL_OW 276
13528: GO 13500
13530: POP
13531: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13532: LD_ADDR_VAR 0 18
13536: PUSH
13537: LD_VAR 0 15
13541: PPUSH
13542: LD_VAR 0 2
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: CALL 12793 0 3
13554: ST_TO_ADDR
// InitHc ;
13555: CALL_OW 19
// InitUc ;
13559: CALL_OW 18
// uc_side := side ;
13563: LD_ADDR_OWVAR 20
13567: PUSH
13568: LD_VAR 0 16
13572: ST_TO_ADDR
// uc_nation := nation ;
13573: LD_ADDR_OWVAR 21
13577: PUSH
13578: LD_VAR 0 17
13582: ST_TO_ADDR
// if buildings then
13583: LD_VAR 0 18
13587: IFFALSE 14909
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13589: LD_ADDR_VAR 0 19
13593: PUSH
13594: LD_VAR 0 18
13598: PPUSH
13599: LD_INT 2
13601: PUSH
13602: LD_INT 30
13604: PUSH
13605: LD_INT 29
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 30
13614: PUSH
13615: LD_INT 30
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: PPUSH
13627: CALL_OW 72
13631: ST_TO_ADDR
// if tmp then
13632: LD_VAR 0 19
13636: IFFALSE 13684
// for i in tmp do
13638: LD_ADDR_VAR 0 8
13642: PUSH
13643: LD_VAR 0 19
13647: PUSH
13648: FOR_IN
13649: IFFALSE 13682
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13651: LD_VAR 0 8
13655: PPUSH
13656: CALL_OW 250
13660: PPUSH
13661: LD_VAR 0 8
13665: PPUSH
13666: CALL_OW 251
13670: PPUSH
13671: LD_VAR 0 16
13675: PPUSH
13676: CALL_OW 441
13680: GO 13648
13682: POP
13683: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13684: LD_VAR 0 18
13688: PPUSH
13689: LD_INT 2
13691: PUSH
13692: LD_INT 30
13694: PUSH
13695: LD_INT 32
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 30
13704: PUSH
13705: LD_INT 33
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 72
13721: IFFALSE 13809
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13723: LD_ADDR_VAR 0 8
13727: PUSH
13728: LD_VAR 0 18
13732: PPUSH
13733: LD_INT 2
13735: PUSH
13736: LD_INT 30
13738: PUSH
13739: LD_INT 32
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 30
13748: PUSH
13749: LD_INT 33
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: PPUSH
13761: CALL_OW 72
13765: PUSH
13766: FOR_IN
13767: IFFALSE 13807
// begin if not GetBWeapon ( i ) then
13769: LD_VAR 0 8
13773: PPUSH
13774: CALL_OW 269
13778: NOT
13779: IFFALSE 13805
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13781: LD_VAR 0 8
13785: PPUSH
13786: LD_VAR 0 8
13790: PPUSH
13791: LD_VAR 0 2
13795: PPUSH
13796: CALL 15055 0 2
13800: PPUSH
13801: CALL_OW 431
// end ;
13805: GO 13766
13807: POP
13808: POP
// end ; for i = 1 to personel do
13809: LD_ADDR_VAR 0 8
13813: PUSH
13814: DOUBLE
13815: LD_INT 1
13817: DEC
13818: ST_TO_ADDR
13819: LD_VAR 0 6
13823: PUSH
13824: FOR_TO
13825: IFFALSE 14889
// begin if i > 4 then
13827: LD_VAR 0 8
13831: PUSH
13832: LD_INT 4
13834: GREATER
13835: IFFALSE 13839
// break ;
13837: GO 14889
// case i of 1 :
13839: LD_VAR 0 8
13843: PUSH
13844: LD_INT 1
13846: DOUBLE
13847: EQUAL
13848: IFTRUE 13852
13850: GO 13932
13852: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13853: LD_ADDR_VAR 0 12
13857: PUSH
13858: LD_VAR 0 18
13862: PPUSH
13863: LD_INT 22
13865: PUSH
13866: LD_VAR 0 16
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 58
13877: PUSH
13878: EMPTY
13879: LIST
13880: PUSH
13881: LD_INT 2
13883: PUSH
13884: LD_INT 30
13886: PUSH
13887: LD_INT 32
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 30
13896: PUSH
13897: LD_INT 4
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 30
13906: PUSH
13907: LD_INT 5
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 72
13929: ST_TO_ADDR
13930: GO 14154
13932: LD_INT 2
13934: DOUBLE
13935: EQUAL
13936: IFTRUE 13940
13938: GO 14002
13940: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13941: LD_ADDR_VAR 0 12
13945: PUSH
13946: LD_VAR 0 18
13950: PPUSH
13951: LD_INT 22
13953: PUSH
13954: LD_VAR 0 16
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 2
13965: PUSH
13966: LD_INT 30
13968: PUSH
13969: LD_INT 0
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 30
13978: PUSH
13979: LD_INT 1
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 72
13999: ST_TO_ADDR
14000: GO 14154
14002: LD_INT 3
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14072
14010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14011: LD_ADDR_VAR 0 12
14015: PUSH
14016: LD_VAR 0 18
14020: PPUSH
14021: LD_INT 22
14023: PUSH
14024: LD_VAR 0 16
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: LD_INT 30
14038: PUSH
14039: LD_INT 2
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 30
14048: PUSH
14049: LD_INT 3
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PPUSH
14065: CALL_OW 72
14069: ST_TO_ADDR
14070: GO 14154
14072: LD_INT 4
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14153
14080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14081: LD_ADDR_VAR 0 12
14085: PUSH
14086: LD_VAR 0 18
14090: PPUSH
14091: LD_INT 22
14093: PUSH
14094: LD_VAR 0 16
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 2
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 6
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 30
14118: PUSH
14119: LD_INT 7
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 30
14128: PUSH
14129: LD_INT 8
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PPUSH
14146: CALL_OW 72
14150: ST_TO_ADDR
14151: GO 14154
14153: POP
// if i = 1 then
14154: LD_VAR 0 8
14158: PUSH
14159: LD_INT 1
14161: EQUAL
14162: IFFALSE 14273
// begin tmp := [ ] ;
14164: LD_ADDR_VAR 0 19
14168: PUSH
14169: EMPTY
14170: ST_TO_ADDR
// for j in f do
14171: LD_ADDR_VAR 0 9
14175: PUSH
14176: LD_VAR 0 12
14180: PUSH
14181: FOR_IN
14182: IFFALSE 14255
// if GetBType ( j ) = b_bunker then
14184: LD_VAR 0 9
14188: PPUSH
14189: CALL_OW 266
14193: PUSH
14194: LD_INT 32
14196: EQUAL
14197: IFFALSE 14224
// tmp := Insert ( tmp , 1 , j ) else
14199: LD_ADDR_VAR 0 19
14203: PUSH
14204: LD_VAR 0 19
14208: PPUSH
14209: LD_INT 1
14211: PPUSH
14212: LD_VAR 0 9
14216: PPUSH
14217: CALL_OW 2
14221: ST_TO_ADDR
14222: GO 14253
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14224: LD_ADDR_VAR 0 19
14228: PUSH
14229: LD_VAR 0 19
14233: PPUSH
14234: LD_VAR 0 19
14238: PUSH
14239: LD_INT 1
14241: PLUS
14242: PPUSH
14243: LD_VAR 0 9
14247: PPUSH
14248: CALL_OW 2
14252: ST_TO_ADDR
14253: GO 14181
14255: POP
14256: POP
// if tmp then
14257: LD_VAR 0 19
14261: IFFALSE 14273
// f := tmp ;
14263: LD_ADDR_VAR 0 12
14267: PUSH
14268: LD_VAR 0 19
14272: ST_TO_ADDR
// end ; x := personel [ i ] ;
14273: LD_ADDR_VAR 0 13
14277: PUSH
14278: LD_VAR 0 6
14282: PUSH
14283: LD_VAR 0 8
14287: ARRAY
14288: ST_TO_ADDR
// if x = - 1 then
14289: LD_VAR 0 13
14293: PUSH
14294: LD_INT 1
14296: NEG
14297: EQUAL
14298: IFFALSE 14507
// begin for j in f do
14300: LD_ADDR_VAR 0 9
14304: PUSH
14305: LD_VAR 0 12
14309: PUSH
14310: FOR_IN
14311: IFFALSE 14503
// repeat InitHc ;
14313: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14317: LD_VAR 0 9
14321: PPUSH
14322: CALL_OW 266
14326: PUSH
14327: LD_INT 5
14329: EQUAL
14330: IFFALSE 14400
// begin if UnitsInside ( j ) < 3 then
14332: LD_VAR 0 9
14336: PPUSH
14337: CALL_OW 313
14341: PUSH
14342: LD_INT 3
14344: LESS
14345: IFFALSE 14381
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14347: LD_INT 0
14349: PPUSH
14350: LD_INT 5
14352: PUSH
14353: LD_INT 8
14355: PUSH
14356: LD_INT 9
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: PUSH
14364: LD_VAR 0 17
14368: ARRAY
14369: PPUSH
14370: LD_VAR 0 4
14374: PPUSH
14375: CALL_OW 380
14379: GO 14398
// PrepareHuman ( false , i , skill ) ;
14381: LD_INT 0
14383: PPUSH
14384: LD_VAR 0 8
14388: PPUSH
14389: LD_VAR 0 4
14393: PPUSH
14394: CALL_OW 380
// end else
14398: GO 14417
// PrepareHuman ( false , i , skill ) ;
14400: LD_INT 0
14402: PPUSH
14403: LD_VAR 0 8
14407: PPUSH
14408: LD_VAR 0 4
14412: PPUSH
14413: CALL_OW 380
// un := CreateHuman ;
14417: LD_ADDR_VAR 0 14
14421: PUSH
14422: CALL_OW 44
14426: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14427: LD_ADDR_VAR 0 7
14431: PUSH
14432: LD_VAR 0 7
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: LD_VAR 0 14
14444: PPUSH
14445: CALL_OW 2
14449: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14450: LD_VAR 0 14
14454: PPUSH
14455: LD_VAR 0 9
14459: PPUSH
14460: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14464: LD_VAR 0 9
14468: PPUSH
14469: CALL_OW 313
14473: PUSH
14474: LD_INT 6
14476: EQUAL
14477: PUSH
14478: LD_VAR 0 9
14482: PPUSH
14483: CALL_OW 266
14487: PUSH
14488: LD_INT 32
14490: PUSH
14491: LD_INT 31
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: IN
14498: OR
14499: IFFALSE 14313
14501: GO 14310
14503: POP
14504: POP
// end else
14505: GO 14887
// for j = 1 to x do
14507: LD_ADDR_VAR 0 9
14511: PUSH
14512: DOUBLE
14513: LD_INT 1
14515: DEC
14516: ST_TO_ADDR
14517: LD_VAR 0 13
14521: PUSH
14522: FOR_TO
14523: IFFALSE 14885
// begin InitHc ;
14525: CALL_OW 19
// if not f then
14529: LD_VAR 0 12
14533: NOT
14534: IFFALSE 14623
// begin PrepareHuman ( false , i , skill ) ;
14536: LD_INT 0
14538: PPUSH
14539: LD_VAR 0 8
14543: PPUSH
14544: LD_VAR 0 4
14548: PPUSH
14549: CALL_OW 380
// un := CreateHuman ;
14553: LD_ADDR_VAR 0 14
14557: PUSH
14558: CALL_OW 44
14562: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14563: LD_ADDR_VAR 0 7
14567: PUSH
14568: LD_VAR 0 7
14572: PPUSH
14573: LD_INT 1
14575: PPUSH
14576: LD_VAR 0 14
14580: PPUSH
14581: CALL_OW 2
14585: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14586: LD_VAR 0 14
14590: PPUSH
14591: LD_VAR 0 1
14595: PPUSH
14596: CALL_OW 250
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 251
14610: PPUSH
14611: LD_INT 10
14613: PPUSH
14614: LD_INT 0
14616: PPUSH
14617: CALL_OW 50
// continue ;
14621: GO 14522
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14623: LD_VAR 0 12
14627: PUSH
14628: LD_INT 1
14630: ARRAY
14631: PPUSH
14632: CALL_OW 313
14636: PUSH
14637: LD_VAR 0 12
14641: PUSH
14642: LD_INT 1
14644: ARRAY
14645: PPUSH
14646: CALL_OW 266
14650: PUSH
14651: LD_INT 32
14653: PUSH
14654: LD_INT 31
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: IN
14661: AND
14662: PUSH
14663: LD_VAR 0 12
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PPUSH
14672: CALL_OW 313
14676: PUSH
14677: LD_INT 6
14679: EQUAL
14680: OR
14681: IFFALSE 14701
// f := Delete ( f , 1 ) ;
14683: LD_ADDR_VAR 0 12
14687: PUSH
14688: LD_VAR 0 12
14692: PPUSH
14693: LD_INT 1
14695: PPUSH
14696: CALL_OW 3
14700: ST_TO_ADDR
// if not f then
14701: LD_VAR 0 12
14705: NOT
14706: IFFALSE 14724
// begin x := x + 2 ;
14708: LD_ADDR_VAR 0 13
14712: PUSH
14713: LD_VAR 0 13
14717: PUSH
14718: LD_INT 2
14720: PLUS
14721: ST_TO_ADDR
// continue ;
14722: GO 14522
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14724: LD_VAR 0 12
14728: PUSH
14729: LD_INT 1
14731: ARRAY
14732: PPUSH
14733: CALL_OW 266
14737: PUSH
14738: LD_INT 5
14740: EQUAL
14741: IFFALSE 14815
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14743: LD_VAR 0 12
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: PPUSH
14752: CALL_OW 313
14756: PUSH
14757: LD_INT 3
14759: LESS
14760: IFFALSE 14796
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14762: LD_INT 0
14764: PPUSH
14765: LD_INT 5
14767: PUSH
14768: LD_INT 8
14770: PUSH
14771: LD_INT 9
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: PUSH
14779: LD_VAR 0 17
14783: ARRAY
14784: PPUSH
14785: LD_VAR 0 4
14789: PPUSH
14790: CALL_OW 380
14794: GO 14813
// PrepareHuman ( false , i , skill ) ;
14796: LD_INT 0
14798: PPUSH
14799: LD_VAR 0 8
14803: PPUSH
14804: LD_VAR 0 4
14808: PPUSH
14809: CALL_OW 380
// end else
14813: GO 14832
// PrepareHuman ( false , i , skill ) ;
14815: LD_INT 0
14817: PPUSH
14818: LD_VAR 0 8
14822: PPUSH
14823: LD_VAR 0 4
14827: PPUSH
14828: CALL_OW 380
// un := CreateHuman ;
14832: LD_ADDR_VAR 0 14
14836: PUSH
14837: CALL_OW 44
14841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14842: LD_ADDR_VAR 0 7
14846: PUSH
14847: LD_VAR 0 7
14851: PPUSH
14852: LD_INT 1
14854: PPUSH
14855: LD_VAR 0 14
14859: PPUSH
14860: CALL_OW 2
14864: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14865: LD_VAR 0 14
14869: PPUSH
14870: LD_VAR 0 12
14874: PUSH
14875: LD_INT 1
14877: ARRAY
14878: PPUSH
14879: CALL_OW 52
// end ;
14883: GO 14522
14885: POP
14886: POP
// end ;
14887: GO 13824
14889: POP
14890: POP
// result := result ^ buildings ;
14891: LD_ADDR_VAR 0 7
14895: PUSH
14896: LD_VAR 0 7
14900: PUSH
14901: LD_VAR 0 18
14905: ADD
14906: ST_TO_ADDR
// end else
14907: GO 15050
// begin for i = 1 to personel do
14909: LD_ADDR_VAR 0 8
14913: PUSH
14914: DOUBLE
14915: LD_INT 1
14917: DEC
14918: ST_TO_ADDR
14919: LD_VAR 0 6
14923: PUSH
14924: FOR_TO
14925: IFFALSE 15048
// begin if i > 4 then
14927: LD_VAR 0 8
14931: PUSH
14932: LD_INT 4
14934: GREATER
14935: IFFALSE 14939
// break ;
14937: GO 15048
// x := personel [ i ] ;
14939: LD_ADDR_VAR 0 13
14943: PUSH
14944: LD_VAR 0 6
14948: PUSH
14949: LD_VAR 0 8
14953: ARRAY
14954: ST_TO_ADDR
// if x = - 1 then
14955: LD_VAR 0 13
14959: PUSH
14960: LD_INT 1
14962: NEG
14963: EQUAL
14964: IFFALSE 14968
// continue ;
14966: GO 14924
// PrepareHuman ( false , i , skill ) ;
14968: LD_INT 0
14970: PPUSH
14971: LD_VAR 0 8
14975: PPUSH
14976: LD_VAR 0 4
14980: PPUSH
14981: CALL_OW 380
// un := CreateHuman ;
14985: LD_ADDR_VAR 0 14
14989: PUSH
14990: CALL_OW 44
14994: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14995: LD_VAR 0 14
14999: PPUSH
15000: LD_VAR 0 1
15004: PPUSH
15005: CALL_OW 250
15009: PPUSH
15010: LD_VAR 0 1
15014: PPUSH
15015: CALL_OW 251
15019: PPUSH
15020: LD_INT 10
15022: PPUSH
15023: LD_INT 0
15025: PPUSH
15026: CALL_OW 50
// result := result ^ un ;
15030: LD_ADDR_VAR 0 7
15034: PUSH
15035: LD_VAR 0 7
15039: PUSH
15040: LD_VAR 0 14
15044: ADD
15045: ST_TO_ADDR
// end ;
15046: GO 14924
15048: POP
15049: POP
// end ; end ;
15050: LD_VAR 0 7
15054: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
15059: PPUSH
15060: PPUSH
15061: PPUSH
15062: PPUSH
15063: PPUSH
15064: PPUSH
15065: PPUSH
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
15071: PPUSH
15072: PPUSH
// result := false ;
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15081: LD_VAR 0 1
15085: NOT
15086: PUSH
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 266
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 33
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: IN
15107: NOT
15108: OR
15109: IFFALSE 15113
// exit ;
15111: GO 16222
// nat := GetNation ( tower ) ;
15113: LD_ADDR_VAR 0 12
15117: PUSH
15118: LD_VAR 0 1
15122: PPUSH
15123: CALL_OW 248
15127: ST_TO_ADDR
// side := GetSide ( tower ) ;
15128: LD_ADDR_VAR 0 16
15132: PUSH
15133: LD_VAR 0 1
15137: PPUSH
15138: CALL_OW 255
15142: ST_TO_ADDR
// x := GetX ( tower ) ;
15143: LD_ADDR_VAR 0 10
15147: PUSH
15148: LD_VAR 0 1
15152: PPUSH
15153: CALL_OW 250
15157: ST_TO_ADDR
// y := GetY ( tower ) ;
15158: LD_ADDR_VAR 0 11
15162: PUSH
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL_OW 251
15172: ST_TO_ADDR
// if not x or not y then
15173: LD_VAR 0 10
15177: NOT
15178: PUSH
15179: LD_VAR 0 11
15183: NOT
15184: OR
15185: IFFALSE 15189
// exit ;
15187: GO 16222
// weapon := 0 ;
15189: LD_ADDR_VAR 0 18
15193: PUSH
15194: LD_INT 0
15196: ST_TO_ADDR
// fac_list := [ ] ;
15197: LD_ADDR_VAR 0 17
15201: PUSH
15202: EMPTY
15203: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15204: LD_ADDR_VAR 0 6
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 274
15218: PPUSH
15219: LD_VAR 0 2
15223: PPUSH
15224: LD_INT 0
15226: PPUSH
15227: CALL 12793 0 3
15231: PPUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 72
15246: ST_TO_ADDR
// if not factories then
15247: LD_VAR 0 6
15251: NOT
15252: IFFALSE 15256
// exit ;
15254: GO 16222
// for i in factories do
15256: LD_ADDR_VAR 0 8
15260: PUSH
15261: LD_VAR 0 6
15265: PUSH
15266: FOR_IN
15267: IFFALSE 15292
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15269: LD_ADDR_VAR 0 17
15273: PUSH
15274: LD_VAR 0 17
15278: PUSH
15279: LD_VAR 0 8
15283: PPUSH
15284: CALL_OW 478
15288: UNION
15289: ST_TO_ADDR
15290: GO 15266
15292: POP
15293: POP
// if not fac_list then
15294: LD_VAR 0 17
15298: NOT
15299: IFFALSE 15303
// exit ;
15301: GO 16222
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15303: LD_ADDR_VAR 0 5
15307: PUSH
15308: LD_INT 4
15310: PUSH
15311: LD_INT 5
15313: PUSH
15314: LD_INT 9
15316: PUSH
15317: LD_INT 10
15319: PUSH
15320: LD_INT 6
15322: PUSH
15323: LD_INT 7
15325: PUSH
15326: LD_INT 11
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 27
15340: PUSH
15341: LD_INT 28
15343: PUSH
15344: LD_INT 26
15346: PUSH
15347: LD_INT 30
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 43
15358: PUSH
15359: LD_INT 44
15361: PUSH
15362: LD_INT 46
15364: PUSH
15365: LD_INT 45
15367: PUSH
15368: LD_INT 47
15370: PUSH
15371: LD_INT 49
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: PUSH
15387: LD_VAR 0 12
15391: ARRAY
15392: ST_TO_ADDR
// list := list isect fac_list ;
15393: LD_ADDR_VAR 0 5
15397: PUSH
15398: LD_VAR 0 5
15402: PUSH
15403: LD_VAR 0 17
15407: ISECT
15408: ST_TO_ADDR
// if not list then
15409: LD_VAR 0 5
15413: NOT
15414: IFFALSE 15418
// exit ;
15416: GO 16222
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15418: LD_VAR 0 12
15422: PUSH
15423: LD_INT 3
15425: EQUAL
15426: PUSH
15427: LD_INT 49
15429: PUSH
15430: LD_VAR 0 5
15434: IN
15435: AND
15436: PUSH
15437: LD_INT 31
15439: PPUSH
15440: LD_VAR 0 16
15444: PPUSH
15445: CALL_OW 321
15449: PUSH
15450: LD_INT 2
15452: EQUAL
15453: AND
15454: IFFALSE 15514
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15456: LD_INT 22
15458: PUSH
15459: LD_VAR 0 16
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 35
15470: PUSH
15471: LD_INT 49
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 91
15480: PUSH
15481: LD_VAR 0 1
15485: PUSH
15486: LD_INT 10
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: NOT
15504: IFFALSE 15514
// weapon := ru_time_lapser ;
15506: LD_ADDR_VAR 0 18
15510: PUSH
15511: LD_INT 49
15513: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15514: LD_VAR 0 12
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: IN
15529: PUSH
15530: LD_INT 11
15532: PUSH
15533: LD_VAR 0 5
15537: IN
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_VAR 0 5
15546: IN
15547: OR
15548: AND
15549: PUSH
15550: LD_INT 6
15552: PPUSH
15553: LD_VAR 0 16
15557: PPUSH
15558: CALL_OW 321
15562: PUSH
15563: LD_INT 2
15565: EQUAL
15566: AND
15567: IFFALSE 15732
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15569: LD_INT 22
15571: PUSH
15572: LD_VAR 0 16
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 2
15583: PUSH
15584: LD_INT 35
15586: PUSH
15587: LD_INT 11
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 35
15596: PUSH
15597: LD_INT 30
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 91
15611: PUSH
15612: LD_VAR 0 1
15616: PUSH
15617: LD_INT 18
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: PPUSH
15630: CALL_OW 69
15634: NOT
15635: PUSH
15636: LD_INT 22
15638: PUSH
15639: LD_VAR 0 16
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 2
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 32
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 30
15663: PUSH
15664: LD_INT 33
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 91
15678: PUSH
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 12
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: PUSH
15705: LD_INT 2
15707: GREATER
15708: AND
15709: IFFALSE 15732
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15711: LD_ADDR_VAR 0 18
15715: PUSH
15716: LD_INT 11
15718: PUSH
15719: LD_INT 30
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_VAR 0 12
15730: ARRAY
15731: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15732: LD_VAR 0 18
15736: NOT
15737: PUSH
15738: LD_INT 40
15740: PPUSH
15741: LD_VAR 0 16
15745: PPUSH
15746: CALL_OW 321
15750: PUSH
15751: LD_INT 2
15753: EQUAL
15754: AND
15755: PUSH
15756: LD_INT 7
15758: PUSH
15759: LD_VAR 0 5
15763: IN
15764: PUSH
15765: LD_INT 28
15767: PUSH
15768: LD_VAR 0 5
15772: IN
15773: OR
15774: PUSH
15775: LD_INT 45
15777: PUSH
15778: LD_VAR 0 5
15782: IN
15783: OR
15784: AND
15785: IFFALSE 16039
// begin hex := GetHexInfo ( x , y ) ;
15787: LD_ADDR_VAR 0 4
15791: PUSH
15792: LD_VAR 0 10
15796: PPUSH
15797: LD_VAR 0 11
15801: PPUSH
15802: CALL_OW 546
15806: ST_TO_ADDR
// if hex [ 1 ] then
15807: LD_VAR 0 4
15811: PUSH
15812: LD_INT 1
15814: ARRAY
15815: IFFALSE 15819
// exit ;
15817: GO 16222
// height := hex [ 2 ] ;
15819: LD_ADDR_VAR 0 15
15823: PUSH
15824: LD_VAR 0 4
15828: PUSH
15829: LD_INT 2
15831: ARRAY
15832: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15833: LD_ADDR_VAR 0 14
15837: PUSH
15838: LD_INT 0
15840: PUSH
15841: LD_INT 2
15843: PUSH
15844: LD_INT 3
15846: PUSH
15847: LD_INT 5
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
// for i in tmp do
15856: LD_ADDR_VAR 0 8
15860: PUSH
15861: LD_VAR 0 14
15865: PUSH
15866: FOR_IN
15867: IFFALSE 16037
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15869: LD_ADDR_VAR 0 9
15873: PUSH
15874: LD_VAR 0 10
15878: PPUSH
15879: LD_VAR 0 8
15883: PPUSH
15884: LD_INT 5
15886: PPUSH
15887: CALL_OW 272
15891: PUSH
15892: LD_VAR 0 11
15896: PPUSH
15897: LD_VAR 0 8
15901: PPUSH
15902: LD_INT 5
15904: PPUSH
15905: CALL_OW 273
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15914: LD_VAR 0 9
15918: PUSH
15919: LD_INT 1
15921: ARRAY
15922: PPUSH
15923: LD_VAR 0 9
15927: PUSH
15928: LD_INT 2
15930: ARRAY
15931: PPUSH
15932: CALL_OW 488
15936: IFFALSE 16035
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15938: LD_ADDR_VAR 0 4
15942: PUSH
15943: LD_VAR 0 9
15947: PUSH
15948: LD_INT 1
15950: ARRAY
15951: PPUSH
15952: LD_VAR 0 9
15956: PUSH
15957: LD_INT 2
15959: ARRAY
15960: PPUSH
15961: CALL_OW 546
15965: ST_TO_ADDR
// if hex [ 1 ] then
15966: LD_VAR 0 4
15970: PUSH
15971: LD_INT 1
15973: ARRAY
15974: IFFALSE 15978
// continue ;
15976: GO 15866
// h := hex [ 2 ] ;
15978: LD_ADDR_VAR 0 13
15982: PUSH
15983: LD_VAR 0 4
15987: PUSH
15988: LD_INT 2
15990: ARRAY
15991: ST_TO_ADDR
// if h + 7 < height then
15992: LD_VAR 0 13
15996: PUSH
15997: LD_INT 7
15999: PLUS
16000: PUSH
16001: LD_VAR 0 15
16005: LESS
16006: IFFALSE 16035
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16008: LD_ADDR_VAR 0 18
16012: PUSH
16013: LD_INT 7
16015: PUSH
16016: LD_INT 28
16018: PUSH
16019: LD_INT 45
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: PUSH
16027: LD_VAR 0 12
16031: ARRAY
16032: ST_TO_ADDR
// break ;
16033: GO 16037
// end ; end ; end ;
16035: GO 15866
16037: POP
16038: POP
// end ; if not weapon then
16039: LD_VAR 0 18
16043: NOT
16044: IFFALSE 16104
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16046: LD_ADDR_VAR 0 5
16050: PUSH
16051: LD_VAR 0 5
16055: PUSH
16056: LD_INT 11
16058: PUSH
16059: LD_INT 30
16061: PUSH
16062: LD_INT 49
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: DIFF
16070: ST_TO_ADDR
// if not list then
16071: LD_VAR 0 5
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16222
// weapon := list [ rand ( 1 , list ) ] ;
16080: LD_ADDR_VAR 0 18
16084: PUSH
16085: LD_VAR 0 5
16089: PUSH
16090: LD_INT 1
16092: PPUSH
16093: LD_VAR 0 5
16097: PPUSH
16098: CALL_OW 12
16102: ARRAY
16103: ST_TO_ADDR
// end ; if weapon then
16104: LD_VAR 0 18
16108: IFFALSE 16222
// begin tmp := CostOfWeapon ( weapon ) ;
16110: LD_ADDR_VAR 0 14
16114: PUSH
16115: LD_VAR 0 18
16119: PPUSH
16120: CALL_OW 451
16124: ST_TO_ADDR
// j := GetBase ( tower ) ;
16125: LD_ADDR_VAR 0 9
16129: PUSH
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 274
16139: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16140: LD_VAR 0 9
16144: PPUSH
16145: LD_INT 1
16147: PPUSH
16148: CALL_OW 275
16152: PUSH
16153: LD_VAR 0 14
16157: PUSH
16158: LD_INT 1
16160: ARRAY
16161: GREATEREQUAL
16162: PUSH
16163: LD_VAR 0 9
16167: PPUSH
16168: LD_INT 2
16170: PPUSH
16171: CALL_OW 275
16175: PUSH
16176: LD_VAR 0 14
16180: PUSH
16181: LD_INT 2
16183: ARRAY
16184: GREATEREQUAL
16185: AND
16186: PUSH
16187: LD_VAR 0 9
16191: PPUSH
16192: LD_INT 3
16194: PPUSH
16195: CALL_OW 275
16199: PUSH
16200: LD_VAR 0 14
16204: PUSH
16205: LD_INT 3
16207: ARRAY
16208: GREATEREQUAL
16209: AND
16210: IFFALSE 16222
// result := weapon ;
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_VAR 0 18
16221: ST_TO_ADDR
// end ; end ;
16222: LD_VAR 0 3
16226: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16227: LD_INT 0
16229: PPUSH
16230: PPUSH
// result := true ;
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_INT 1
16238: ST_TO_ADDR
// if array1 = array2 then
16239: LD_VAR 0 1
16243: PUSH
16244: LD_VAR 0 2
16248: EQUAL
16249: IFFALSE 16309
// begin for i = 1 to array1 do
16251: LD_ADDR_VAR 0 4
16255: PUSH
16256: DOUBLE
16257: LD_INT 1
16259: DEC
16260: ST_TO_ADDR
16261: LD_VAR 0 1
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16305
// if array1 [ i ] <> array2 [ i ] then
16269: LD_VAR 0 1
16273: PUSH
16274: LD_VAR 0 4
16278: ARRAY
16279: PUSH
16280: LD_VAR 0 2
16284: PUSH
16285: LD_VAR 0 4
16289: ARRAY
16290: NONEQUAL
16291: IFFALSE 16303
// begin result := false ;
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: LD_INT 0
16300: ST_TO_ADDR
// break ;
16301: GO 16305
// end ;
16303: GO 16266
16305: POP
16306: POP
// end else
16307: GO 16317
// result := false ;
16309: LD_ADDR_VAR 0 3
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// end ;
16317: LD_VAR 0 3
16321: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16322: LD_INT 0
16324: PPUSH
16325: PPUSH
// if not array1 or not array2 then
16326: LD_VAR 0 1
16330: NOT
16331: PUSH
16332: LD_VAR 0 2
16336: NOT
16337: OR
16338: IFFALSE 16342
// exit ;
16340: GO 16406
// result := true ;
16342: LD_ADDR_VAR 0 3
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// for i = 1 to array1 do
16350: LD_ADDR_VAR 0 4
16354: PUSH
16355: DOUBLE
16356: LD_INT 1
16358: DEC
16359: ST_TO_ADDR
16360: LD_VAR 0 1
16364: PUSH
16365: FOR_TO
16366: IFFALSE 16404
// if array1 [ i ] <> array2 [ i ] then
16368: LD_VAR 0 1
16372: PUSH
16373: LD_VAR 0 4
16377: ARRAY
16378: PUSH
16379: LD_VAR 0 2
16383: PUSH
16384: LD_VAR 0 4
16388: ARRAY
16389: NONEQUAL
16390: IFFALSE 16402
// begin result := false ;
16392: LD_ADDR_VAR 0 3
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// break ;
16400: GO 16404
// end ;
16402: GO 16365
16404: POP
16405: POP
// end ;
16406: LD_VAR 0 3
16410: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16411: LD_INT 0
16413: PPUSH
16414: PPUSH
16415: PPUSH
// pom := GetBase ( fac ) ;
16416: LD_ADDR_VAR 0 5
16420: PUSH
16421: LD_VAR 0 1
16425: PPUSH
16426: CALL_OW 274
16430: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16431: LD_ADDR_VAR 0 4
16435: PUSH
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 2
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: PPUSH
16454: LD_VAR 0 2
16458: PUSH
16459: LD_INT 3
16461: ARRAY
16462: PPUSH
16463: LD_VAR 0 2
16467: PUSH
16468: LD_INT 4
16470: ARRAY
16471: PPUSH
16472: CALL_OW 449
16476: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16477: LD_ADDR_VAR 0 3
16481: PUSH
16482: LD_VAR 0 5
16486: PPUSH
16487: LD_INT 1
16489: PPUSH
16490: CALL_OW 275
16494: PUSH
16495: LD_VAR 0 4
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: GREATEREQUAL
16504: PUSH
16505: LD_VAR 0 5
16509: PPUSH
16510: LD_INT 2
16512: PPUSH
16513: CALL_OW 275
16517: PUSH
16518: LD_VAR 0 4
16522: PUSH
16523: LD_INT 2
16525: ARRAY
16526: GREATEREQUAL
16527: AND
16528: PUSH
16529: LD_VAR 0 5
16533: PPUSH
16534: LD_INT 3
16536: PPUSH
16537: CALL_OW 275
16541: PUSH
16542: LD_VAR 0 4
16546: PUSH
16547: LD_INT 3
16549: ARRAY
16550: GREATEREQUAL
16551: AND
16552: ST_TO_ADDR
// end ;
16553: LD_VAR 0 3
16557: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16558: LD_INT 0
16560: PPUSH
16561: PPUSH
16562: PPUSH
16563: PPUSH
// pom := GetBase ( building ) ;
16564: LD_ADDR_VAR 0 3
16568: PUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 274
16578: ST_TO_ADDR
// if not pom then
16579: LD_VAR 0 3
16583: NOT
16584: IFFALSE 16588
// exit ;
16586: GO 16758
// btype := GetBType ( building ) ;
16588: LD_ADDR_VAR 0 5
16592: PUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 266
16602: ST_TO_ADDR
// if btype = b_armoury then
16603: LD_VAR 0 5
16607: PUSH
16608: LD_INT 4
16610: EQUAL
16611: IFFALSE 16621
// btype := b_barracks ;
16613: LD_ADDR_VAR 0 5
16617: PUSH
16618: LD_INT 5
16620: ST_TO_ADDR
// if btype = b_depot then
16621: LD_VAR 0 5
16625: PUSH
16626: LD_INT 0
16628: EQUAL
16629: IFFALSE 16639
// btype := b_warehouse ;
16631: LD_ADDR_VAR 0 5
16635: PUSH
16636: LD_INT 1
16638: ST_TO_ADDR
// if btype = b_workshop then
16639: LD_VAR 0 5
16643: PUSH
16644: LD_INT 2
16646: EQUAL
16647: IFFALSE 16657
// btype := b_factory ;
16649: LD_ADDR_VAR 0 5
16653: PUSH
16654: LD_INT 3
16656: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16657: LD_ADDR_VAR 0 4
16661: PUSH
16662: LD_VAR 0 5
16666: PPUSH
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 248
16676: PPUSH
16677: CALL_OW 450
16681: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16682: LD_ADDR_VAR 0 2
16686: PUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 275
16699: PUSH
16700: LD_VAR 0 4
16704: PUSH
16705: LD_INT 1
16707: ARRAY
16708: GREATEREQUAL
16709: PUSH
16710: LD_VAR 0 3
16714: PPUSH
16715: LD_INT 2
16717: PPUSH
16718: CALL_OW 275
16722: PUSH
16723: LD_VAR 0 4
16727: PUSH
16728: LD_INT 2
16730: ARRAY
16731: GREATEREQUAL
16732: AND
16733: PUSH
16734: LD_VAR 0 3
16738: PPUSH
16739: LD_INT 3
16741: PPUSH
16742: CALL_OW 275
16746: PUSH
16747: LD_VAR 0 4
16751: PUSH
16752: LD_INT 3
16754: ARRAY
16755: GREATEREQUAL
16756: AND
16757: ST_TO_ADDR
// end ;
16758: LD_VAR 0 2
16762: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16763: LD_INT 0
16765: PPUSH
16766: PPUSH
16767: PPUSH
// pom := GetBase ( building ) ;
16768: LD_ADDR_VAR 0 4
16772: PUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 274
16782: ST_TO_ADDR
// if not pom then
16783: LD_VAR 0 4
16787: NOT
16788: IFFALSE 16792
// exit ;
16790: GO 16893
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16792: LD_ADDR_VAR 0 5
16796: PUSH
16797: LD_VAR 0 2
16801: PPUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 248
16811: PPUSH
16812: CALL_OW 450
16816: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16817: LD_ADDR_VAR 0 3
16821: PUSH
16822: LD_VAR 0 4
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: CALL_OW 275
16834: PUSH
16835: LD_VAR 0 5
16839: PUSH
16840: LD_INT 1
16842: ARRAY
16843: GREATEREQUAL
16844: PUSH
16845: LD_VAR 0 4
16849: PPUSH
16850: LD_INT 2
16852: PPUSH
16853: CALL_OW 275
16857: PUSH
16858: LD_VAR 0 5
16862: PUSH
16863: LD_INT 2
16865: ARRAY
16866: GREATEREQUAL
16867: AND
16868: PUSH
16869: LD_VAR 0 4
16873: PPUSH
16874: LD_INT 3
16876: PPUSH
16877: CALL_OW 275
16881: PUSH
16882: LD_VAR 0 5
16886: PUSH
16887: LD_INT 3
16889: ARRAY
16890: GREATEREQUAL
16891: AND
16892: ST_TO_ADDR
// end ;
16893: LD_VAR 0 3
16897: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16898: LD_INT 0
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
16909: PPUSH
16910: PPUSH
// result := false ;
16911: LD_ADDR_VAR 0 8
16915: PUSH
16916: LD_INT 0
16918: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16919: LD_VAR 0 5
16923: NOT
16924: PUSH
16925: LD_VAR 0 1
16929: NOT
16930: OR
16931: PUSH
16932: LD_VAR 0 2
16936: NOT
16937: OR
16938: PUSH
16939: LD_VAR 0 3
16943: NOT
16944: OR
16945: IFFALSE 16949
// exit ;
16947: GO 17763
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16949: LD_ADDR_VAR 0 14
16953: PUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: LD_VAR 0 2
16963: PPUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: LD_VAR 0 4
16973: PPUSH
16974: LD_VAR 0 5
16978: PUSH
16979: LD_INT 1
16981: ARRAY
16982: PPUSH
16983: CALL_OW 248
16987: PPUSH
16988: LD_INT 0
16990: PPUSH
16991: CALL 19016 0 6
16995: ST_TO_ADDR
// if not hexes then
16996: LD_VAR 0 14
17000: NOT
17001: IFFALSE 17005
// exit ;
17003: GO 17763
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17005: LD_ADDR_VAR 0 17
17009: PUSH
17010: LD_VAR 0 5
17014: PPUSH
17015: LD_INT 22
17017: PUSH
17018: LD_VAR 0 13
17022: PPUSH
17023: CALL_OW 255
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 2
17034: PUSH
17035: LD_INT 30
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 30
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PPUSH
17064: CALL_OW 72
17068: ST_TO_ADDR
// for i = 1 to hexes do
17069: LD_ADDR_VAR 0 9
17073: PUSH
17074: DOUBLE
17075: LD_INT 1
17077: DEC
17078: ST_TO_ADDR
17079: LD_VAR 0 14
17083: PUSH
17084: FOR_TO
17085: IFFALSE 17761
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17087: LD_ADDR_VAR 0 13
17091: PUSH
17092: LD_VAR 0 14
17096: PUSH
17097: LD_VAR 0 9
17101: ARRAY
17102: PUSH
17103: LD_INT 1
17105: ARRAY
17106: PPUSH
17107: LD_VAR 0 14
17111: PUSH
17112: LD_VAR 0 9
17116: ARRAY
17117: PUSH
17118: LD_INT 2
17120: ARRAY
17121: PPUSH
17122: CALL_OW 428
17126: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17127: LD_VAR 0 14
17131: PUSH
17132: LD_VAR 0 9
17136: ARRAY
17137: PUSH
17138: LD_INT 1
17140: ARRAY
17141: PPUSH
17142: LD_VAR 0 14
17146: PUSH
17147: LD_VAR 0 9
17151: ARRAY
17152: PUSH
17153: LD_INT 2
17155: ARRAY
17156: PPUSH
17157: CALL_OW 351
17161: PUSH
17162: LD_VAR 0 14
17166: PUSH
17167: LD_VAR 0 9
17171: ARRAY
17172: PUSH
17173: LD_INT 1
17175: ARRAY
17176: PPUSH
17177: LD_VAR 0 14
17181: PUSH
17182: LD_VAR 0 9
17186: ARRAY
17187: PUSH
17188: LD_INT 2
17190: ARRAY
17191: PPUSH
17192: CALL_OW 488
17196: NOT
17197: OR
17198: PUSH
17199: LD_VAR 0 13
17203: PPUSH
17204: CALL_OW 247
17208: PUSH
17209: LD_INT 3
17211: EQUAL
17212: OR
17213: IFFALSE 17219
// exit ;
17215: POP
17216: POP
17217: GO 17763
// if not tmp then
17219: LD_VAR 0 13
17223: NOT
17224: IFFALSE 17228
// continue ;
17226: GO 17084
// result := true ;
17228: LD_ADDR_VAR 0 8
17232: PUSH
17233: LD_INT 1
17235: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17236: LD_VAR 0 6
17240: PUSH
17241: LD_VAR 0 13
17245: PPUSH
17246: CALL_OW 247
17250: PUSH
17251: LD_INT 2
17253: EQUAL
17254: AND
17255: PUSH
17256: LD_VAR 0 13
17260: PPUSH
17261: CALL_OW 263
17265: PUSH
17266: LD_INT 1
17268: EQUAL
17269: AND
17270: IFFALSE 17434
// begin if IsDrivenBy ( tmp ) then
17272: LD_VAR 0 13
17276: PPUSH
17277: CALL_OW 311
17281: IFFALSE 17285
// continue ;
17283: GO 17084
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17285: LD_VAR 0 6
17289: PPUSH
17290: LD_INT 3
17292: PUSH
17293: LD_INT 60
17295: PUSH
17296: EMPTY
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 3
17305: PUSH
17306: LD_INT 55
17308: PUSH
17309: EMPTY
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PPUSH
17320: CALL_OW 72
17324: IFFALSE 17432
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17326: LD_ADDR_VAR 0 18
17330: PUSH
17331: LD_VAR 0 6
17335: PPUSH
17336: LD_INT 3
17338: PUSH
17339: LD_INT 60
17341: PUSH
17342: EMPTY
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 3
17351: PUSH
17352: LD_INT 55
17354: PUSH
17355: EMPTY
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PPUSH
17366: CALL_OW 72
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: ST_TO_ADDR
// if IsInUnit ( driver ) then
17375: LD_VAR 0 18
17379: PPUSH
17380: CALL_OW 310
17384: IFFALSE 17395
// ComExit ( driver ) ;
17386: LD_VAR 0 18
17390: PPUSH
17391: CALL 42808 0 1
// AddComEnterUnit ( driver , tmp ) ;
17395: LD_VAR 0 18
17399: PPUSH
17400: LD_VAR 0 13
17404: PPUSH
17405: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17409: LD_VAR 0 18
17413: PPUSH
17414: LD_VAR 0 7
17418: PPUSH
17419: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17423: LD_VAR 0 18
17427: PPUSH
17428: CALL_OW 181
// end ; continue ;
17432: GO 17084
// end ; if not cleaners or not tmp in cleaners then
17434: LD_VAR 0 6
17438: NOT
17439: PUSH
17440: LD_VAR 0 13
17444: PUSH
17445: LD_VAR 0 6
17449: IN
17450: NOT
17451: OR
17452: IFFALSE 17759
// begin if dep then
17454: LD_VAR 0 17
17458: IFFALSE 17594
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17460: LD_ADDR_VAR 0 16
17464: PUSH
17465: LD_VAR 0 17
17469: PUSH
17470: LD_INT 1
17472: ARRAY
17473: PPUSH
17474: CALL_OW 250
17478: PPUSH
17479: LD_VAR 0 17
17483: PUSH
17484: LD_INT 1
17486: ARRAY
17487: PPUSH
17488: CALL_OW 254
17492: PPUSH
17493: LD_INT 5
17495: PPUSH
17496: CALL_OW 272
17500: PUSH
17501: LD_VAR 0 17
17505: PUSH
17506: LD_INT 1
17508: ARRAY
17509: PPUSH
17510: CALL_OW 251
17514: PPUSH
17515: LD_VAR 0 17
17519: PUSH
17520: LD_INT 1
17522: ARRAY
17523: PPUSH
17524: CALL_OW 254
17528: PPUSH
17529: LD_INT 5
17531: PPUSH
17532: CALL_OW 273
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17541: LD_VAR 0 16
17545: PUSH
17546: LD_INT 1
17548: ARRAY
17549: PPUSH
17550: LD_VAR 0 16
17554: PUSH
17555: LD_INT 2
17557: ARRAY
17558: PPUSH
17559: CALL_OW 488
17563: IFFALSE 17594
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17565: LD_VAR 0 13
17569: PPUSH
17570: LD_VAR 0 16
17574: PUSH
17575: LD_INT 1
17577: ARRAY
17578: PPUSH
17579: LD_VAR 0 16
17583: PUSH
17584: LD_INT 2
17586: ARRAY
17587: PPUSH
17588: CALL_OW 111
// continue ;
17592: GO 17084
// end ; end ; r := GetDir ( tmp ) ;
17594: LD_ADDR_VAR 0 15
17598: PUSH
17599: LD_VAR 0 13
17603: PPUSH
17604: CALL_OW 254
17608: ST_TO_ADDR
// if r = 5 then
17609: LD_VAR 0 15
17613: PUSH
17614: LD_INT 5
17616: EQUAL
17617: IFFALSE 17627
// r := 0 ;
17619: LD_ADDR_VAR 0 15
17623: PUSH
17624: LD_INT 0
17626: ST_TO_ADDR
// for j = r to 5 do
17627: LD_ADDR_VAR 0 10
17631: PUSH
17632: DOUBLE
17633: LD_VAR 0 15
17637: DEC
17638: ST_TO_ADDR
17639: LD_INT 5
17641: PUSH
17642: FOR_TO
17643: IFFALSE 17757
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17645: LD_ADDR_VAR 0 11
17649: PUSH
17650: LD_VAR 0 13
17654: PPUSH
17655: CALL_OW 250
17659: PPUSH
17660: LD_VAR 0 10
17664: PPUSH
17665: LD_INT 2
17667: PPUSH
17668: CALL_OW 272
17672: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17673: LD_ADDR_VAR 0 12
17677: PUSH
17678: LD_VAR 0 13
17682: PPUSH
17683: CALL_OW 251
17687: PPUSH
17688: LD_VAR 0 10
17692: PPUSH
17693: LD_INT 2
17695: PPUSH
17696: CALL_OW 273
17700: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17701: LD_VAR 0 11
17705: PPUSH
17706: LD_VAR 0 12
17710: PPUSH
17711: CALL_OW 488
17715: PUSH
17716: LD_VAR 0 11
17720: PPUSH
17721: LD_VAR 0 12
17725: PPUSH
17726: CALL_OW 428
17730: NOT
17731: AND
17732: IFFALSE 17755
// begin ComMoveXY ( tmp , _x , _y ) ;
17734: LD_VAR 0 13
17738: PPUSH
17739: LD_VAR 0 11
17743: PPUSH
17744: LD_VAR 0 12
17748: PPUSH
17749: CALL_OW 111
// break ;
17753: GO 17757
// end ; end ;
17755: GO 17642
17757: POP
17758: POP
// end ; end ;
17759: GO 17084
17761: POP
17762: POP
// end ;
17763: LD_VAR 0 8
17767: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17768: LD_INT 0
17770: PPUSH
// result := true ;
17771: LD_ADDR_VAR 0 3
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17779: LD_VAR 0 2
17783: PUSH
17784: LD_INT 24
17786: DOUBLE
17787: EQUAL
17788: IFTRUE 17798
17790: LD_INT 33
17792: DOUBLE
17793: EQUAL
17794: IFTRUE 17798
17796: GO 17823
17798: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17799: LD_ADDR_VAR 0 3
17803: PUSH
17804: LD_INT 32
17806: PPUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 321
17816: PUSH
17817: LD_INT 2
17819: EQUAL
17820: ST_TO_ADDR
17821: GO 18139
17823: LD_INT 20
17825: DOUBLE
17826: EQUAL
17827: IFTRUE 17831
17829: GO 17856
17831: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17832: LD_ADDR_VAR 0 3
17836: PUSH
17837: LD_INT 6
17839: PPUSH
17840: LD_VAR 0 1
17844: PPUSH
17845: CALL_OW 321
17849: PUSH
17850: LD_INT 2
17852: EQUAL
17853: ST_TO_ADDR
17854: GO 18139
17856: LD_INT 22
17858: DOUBLE
17859: EQUAL
17860: IFTRUE 17870
17862: LD_INT 36
17864: DOUBLE
17865: EQUAL
17866: IFTRUE 17870
17868: GO 17895
17870: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17871: LD_ADDR_VAR 0 3
17875: PUSH
17876: LD_INT 15
17878: PPUSH
17879: LD_VAR 0 1
17883: PPUSH
17884: CALL_OW 321
17888: PUSH
17889: LD_INT 2
17891: EQUAL
17892: ST_TO_ADDR
17893: GO 18139
17895: LD_INT 30
17897: DOUBLE
17898: EQUAL
17899: IFTRUE 17903
17901: GO 17928
17903: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: LD_INT 20
17911: PPUSH
17912: LD_VAR 0 1
17916: PPUSH
17917: CALL_OW 321
17921: PUSH
17922: LD_INT 2
17924: EQUAL
17925: ST_TO_ADDR
17926: GO 18139
17928: LD_INT 28
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17942
17934: LD_INT 21
17936: DOUBLE
17937: EQUAL
17938: IFTRUE 17942
17940: GO 17967
17942: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_INT 21
17950: PPUSH
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 321
17960: PUSH
17961: LD_INT 2
17963: EQUAL
17964: ST_TO_ADDR
17965: GO 18139
17967: LD_INT 16
17969: DOUBLE
17970: EQUAL
17971: IFTRUE 17975
17973: GO 18000
17975: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17976: LD_ADDR_VAR 0 3
17980: PUSH
17981: LD_INT 84
17983: PPUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 321
17993: PUSH
17994: LD_INT 2
17996: EQUAL
17997: ST_TO_ADDR
17998: GO 18139
18000: LD_INT 19
18002: DOUBLE
18003: EQUAL
18004: IFTRUE 18014
18006: LD_INT 23
18008: DOUBLE
18009: EQUAL
18010: IFTRUE 18014
18012: GO 18039
18014: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18015: LD_ADDR_VAR 0 3
18019: PUSH
18020: LD_INT 83
18022: PPUSH
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 321
18032: PUSH
18033: LD_INT 2
18035: EQUAL
18036: ST_TO_ADDR
18037: GO 18139
18039: LD_INT 17
18041: DOUBLE
18042: EQUAL
18043: IFTRUE 18047
18045: GO 18072
18047: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18048: LD_ADDR_VAR 0 3
18052: PUSH
18053: LD_INT 39
18055: PPUSH
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 321
18065: PUSH
18066: LD_INT 2
18068: EQUAL
18069: ST_TO_ADDR
18070: GO 18139
18072: LD_INT 18
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18105
18080: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18081: LD_ADDR_VAR 0 3
18085: PUSH
18086: LD_INT 40
18088: PPUSH
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 321
18098: PUSH
18099: LD_INT 2
18101: EQUAL
18102: ST_TO_ADDR
18103: GO 18139
18105: LD_INT 27
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18113
18111: GO 18138
18113: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18114: LD_ADDR_VAR 0 3
18118: PUSH
18119: LD_INT 35
18121: PPUSH
18122: LD_VAR 0 1
18126: PPUSH
18127: CALL_OW 321
18131: PUSH
18132: LD_INT 2
18134: EQUAL
18135: ST_TO_ADDR
18136: GO 18139
18138: POP
// end ;
18139: LD_VAR 0 3
18143: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
18148: PPUSH
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
18153: PPUSH
18154: PPUSH
18155: PPUSH
18156: PPUSH
// result := false ;
18157: LD_ADDR_VAR 0 6
18161: PUSH
18162: LD_INT 0
18164: ST_TO_ADDR
// if btype = b_depot then
18165: LD_VAR 0 2
18169: PUSH
18170: LD_INT 0
18172: EQUAL
18173: IFFALSE 18185
// begin result := true ;
18175: LD_ADDR_VAR 0 6
18179: PUSH
18180: LD_INT 1
18182: ST_TO_ADDR
// exit ;
18183: GO 19011
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18185: LD_VAR 0 1
18189: NOT
18190: PUSH
18191: LD_VAR 0 1
18195: PPUSH
18196: CALL_OW 266
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: IN
18211: NOT
18212: OR
18213: PUSH
18214: LD_VAR 0 2
18218: NOT
18219: OR
18220: PUSH
18221: LD_VAR 0 5
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: LD_INT 3
18237: PUSH
18238: LD_INT 4
18240: PUSH
18241: LD_INT 5
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: IN
18252: NOT
18253: OR
18254: PUSH
18255: LD_VAR 0 3
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: CALL_OW 488
18269: NOT
18270: OR
18271: IFFALSE 18275
// exit ;
18273: GO 19011
// side := GetSide ( depot ) ;
18275: LD_ADDR_VAR 0 9
18279: PUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 255
18289: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18290: LD_VAR 0 9
18294: PPUSH
18295: LD_VAR 0 2
18299: PPUSH
18300: CALL 17768 0 2
18304: NOT
18305: IFFALSE 18309
// exit ;
18307: GO 19011
// pom := GetBase ( depot ) ;
18309: LD_ADDR_VAR 0 10
18313: PUSH
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 274
18323: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18324: LD_ADDR_VAR 0 11
18328: PUSH
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_VAR 0 1
18338: PPUSH
18339: CALL_OW 248
18343: PPUSH
18344: CALL_OW 450
18348: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18349: LD_VAR 0 10
18353: PPUSH
18354: LD_INT 1
18356: PPUSH
18357: CALL_OW 275
18361: PUSH
18362: LD_VAR 0 11
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: GREATEREQUAL
18371: PUSH
18372: LD_VAR 0 10
18376: PPUSH
18377: LD_INT 2
18379: PPUSH
18380: CALL_OW 275
18384: PUSH
18385: LD_VAR 0 11
18389: PUSH
18390: LD_INT 2
18392: ARRAY
18393: GREATEREQUAL
18394: AND
18395: PUSH
18396: LD_VAR 0 10
18400: PPUSH
18401: LD_INT 3
18403: PPUSH
18404: CALL_OW 275
18408: PUSH
18409: LD_VAR 0 11
18413: PUSH
18414: LD_INT 3
18416: ARRAY
18417: GREATEREQUAL
18418: AND
18419: NOT
18420: IFFALSE 18424
// exit ;
18422: GO 19011
// if GetBType ( depot ) = b_depot then
18424: LD_VAR 0 1
18428: PPUSH
18429: CALL_OW 266
18433: PUSH
18434: LD_INT 0
18436: EQUAL
18437: IFFALSE 18449
// dist := 28 else
18439: LD_ADDR_VAR 0 14
18443: PUSH
18444: LD_INT 28
18446: ST_TO_ADDR
18447: GO 18457
// dist := 36 ;
18449: LD_ADDR_VAR 0 14
18453: PUSH
18454: LD_INT 36
18456: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18457: LD_VAR 0 1
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_VAR 0 4
18471: PPUSH
18472: CALL_OW 297
18476: PUSH
18477: LD_VAR 0 14
18481: GREATER
18482: IFFALSE 18486
// exit ;
18484: GO 19011
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18486: LD_ADDR_VAR 0 12
18490: PUSH
18491: LD_VAR 0 2
18495: PPUSH
18496: LD_VAR 0 3
18500: PPUSH
18501: LD_VAR 0 4
18505: PPUSH
18506: LD_VAR 0 5
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 248
18520: PPUSH
18521: LD_INT 0
18523: PPUSH
18524: CALL 19016 0 6
18528: ST_TO_ADDR
// if not hexes then
18529: LD_VAR 0 12
18533: NOT
18534: IFFALSE 18538
// exit ;
18536: GO 19011
// hex := GetHexInfo ( x , y ) ;
18538: LD_ADDR_VAR 0 15
18542: PUSH
18543: LD_VAR 0 3
18547: PPUSH
18548: LD_VAR 0 4
18552: PPUSH
18553: CALL_OW 546
18557: ST_TO_ADDR
// if hex [ 1 ] then
18558: LD_VAR 0 15
18562: PUSH
18563: LD_INT 1
18565: ARRAY
18566: IFFALSE 18570
// exit ;
18568: GO 19011
// height := hex [ 2 ] ;
18570: LD_ADDR_VAR 0 13
18574: PUSH
18575: LD_VAR 0 15
18579: PUSH
18580: LD_INT 2
18582: ARRAY
18583: ST_TO_ADDR
// for i = 1 to hexes do
18584: LD_ADDR_VAR 0 7
18588: PUSH
18589: DOUBLE
18590: LD_INT 1
18592: DEC
18593: ST_TO_ADDR
18594: LD_VAR 0 12
18598: PUSH
18599: FOR_TO
18600: IFFALSE 18930
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18602: LD_VAR 0 12
18606: PUSH
18607: LD_VAR 0 7
18611: ARRAY
18612: PUSH
18613: LD_INT 1
18615: ARRAY
18616: PPUSH
18617: LD_VAR 0 12
18621: PUSH
18622: LD_VAR 0 7
18626: ARRAY
18627: PUSH
18628: LD_INT 2
18630: ARRAY
18631: PPUSH
18632: CALL_OW 488
18636: NOT
18637: PUSH
18638: LD_VAR 0 12
18642: PUSH
18643: LD_VAR 0 7
18647: ARRAY
18648: PUSH
18649: LD_INT 1
18651: ARRAY
18652: PPUSH
18653: LD_VAR 0 12
18657: PUSH
18658: LD_VAR 0 7
18662: ARRAY
18663: PUSH
18664: LD_INT 2
18666: ARRAY
18667: PPUSH
18668: CALL_OW 428
18672: PUSH
18673: LD_INT 0
18675: GREATER
18676: OR
18677: PUSH
18678: LD_VAR 0 12
18682: PUSH
18683: LD_VAR 0 7
18687: ARRAY
18688: PUSH
18689: LD_INT 1
18691: ARRAY
18692: PPUSH
18693: LD_VAR 0 12
18697: PUSH
18698: LD_VAR 0 7
18702: ARRAY
18703: PUSH
18704: LD_INT 2
18706: ARRAY
18707: PPUSH
18708: CALL_OW 351
18712: OR
18713: IFFALSE 18719
// exit ;
18715: POP
18716: POP
18717: GO 19011
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18719: LD_ADDR_VAR 0 8
18723: PUSH
18724: LD_VAR 0 12
18728: PUSH
18729: LD_VAR 0 7
18733: ARRAY
18734: PUSH
18735: LD_INT 1
18737: ARRAY
18738: PPUSH
18739: LD_VAR 0 12
18743: PUSH
18744: LD_VAR 0 7
18748: ARRAY
18749: PUSH
18750: LD_INT 2
18752: ARRAY
18753: PPUSH
18754: CALL_OW 546
18758: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18759: LD_VAR 0 8
18763: PUSH
18764: LD_INT 1
18766: ARRAY
18767: PUSH
18768: LD_VAR 0 8
18772: PUSH
18773: LD_INT 2
18775: ARRAY
18776: PUSH
18777: LD_VAR 0 13
18781: PUSH
18782: LD_INT 2
18784: PLUS
18785: GREATER
18786: OR
18787: PUSH
18788: LD_VAR 0 8
18792: PUSH
18793: LD_INT 2
18795: ARRAY
18796: PUSH
18797: LD_VAR 0 13
18801: PUSH
18802: LD_INT 2
18804: MINUS
18805: LESS
18806: OR
18807: PUSH
18808: LD_VAR 0 8
18812: PUSH
18813: LD_INT 3
18815: ARRAY
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: LD_INT 8
18822: PUSH
18823: LD_INT 9
18825: PUSH
18826: LD_INT 10
18828: PUSH
18829: LD_INT 11
18831: PUSH
18832: LD_INT 12
18834: PUSH
18835: LD_INT 13
18837: PUSH
18838: LD_INT 16
18840: PUSH
18841: LD_INT 17
18843: PUSH
18844: LD_INT 18
18846: PUSH
18847: LD_INT 19
18849: PUSH
18850: LD_INT 20
18852: PUSH
18853: LD_INT 21
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: IN
18871: NOT
18872: OR
18873: PUSH
18874: LD_VAR 0 8
18878: PUSH
18879: LD_INT 5
18881: ARRAY
18882: NOT
18883: OR
18884: PUSH
18885: LD_VAR 0 8
18889: PUSH
18890: LD_INT 6
18892: ARRAY
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 7
18902: PUSH
18903: LD_INT 9
18905: PUSH
18906: LD_INT 10
18908: PUSH
18909: LD_INT 11
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: IN
18920: NOT
18921: OR
18922: IFFALSE 18928
// exit ;
18924: POP
18925: POP
18926: GO 19011
// end ;
18928: GO 18599
18930: POP
18931: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18932: LD_VAR 0 9
18936: PPUSH
18937: LD_VAR 0 3
18941: PPUSH
18942: LD_VAR 0 4
18946: PPUSH
18947: LD_INT 20
18949: PPUSH
18950: CALL 10934 0 4
18954: PUSH
18955: LD_INT 4
18957: ARRAY
18958: IFFALSE 18962
// exit ;
18960: GO 19011
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18962: LD_VAR 0 2
18966: PUSH
18967: LD_INT 29
18969: PUSH
18970: LD_INT 30
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: IN
18977: PUSH
18978: LD_VAR 0 3
18982: PPUSH
18983: LD_VAR 0 4
18987: PPUSH
18988: LD_VAR 0 9
18992: PPUSH
18993: CALL_OW 440
18997: NOT
18998: AND
18999: IFFALSE 19003
// exit ;
19001: GO 19011
// result := true ;
19003: LD_ADDR_VAR 0 6
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// end ;
19011: LD_VAR 0 6
19015: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19016: LD_INT 0
19018: PPUSH
19019: PPUSH
19020: PPUSH
19021: PPUSH
19022: PPUSH
19023: PPUSH
19024: PPUSH
19025: PPUSH
19026: PPUSH
19027: PPUSH
19028: PPUSH
19029: PPUSH
19030: PPUSH
19031: PPUSH
19032: PPUSH
19033: PPUSH
19034: PPUSH
19035: PPUSH
19036: PPUSH
19037: PPUSH
19038: PPUSH
19039: PPUSH
19040: PPUSH
19041: PPUSH
19042: PPUSH
19043: PPUSH
19044: PPUSH
19045: PPUSH
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
19057: PPUSH
19058: PPUSH
19059: PPUSH
19060: PPUSH
19061: PPUSH
19062: PPUSH
19063: PPUSH
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
19074: PPUSH
19075: PPUSH
// result = [ ] ;
19076: LD_ADDR_VAR 0 7
19080: PUSH
19081: EMPTY
19082: ST_TO_ADDR
// temp_list = [ ] ;
19083: LD_ADDR_VAR 0 9
19087: PUSH
19088: EMPTY
19089: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19090: LD_VAR 0 4
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: LD_INT 3
19106: PUSH
19107: LD_INT 4
19109: PUSH
19110: LD_INT 5
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: IN
19121: NOT
19122: PUSH
19123: LD_VAR 0 1
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: IN
19138: PUSH
19139: LD_VAR 0 5
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: IN
19158: NOT
19159: AND
19160: OR
19161: IFFALSE 19165
// exit ;
19163: GO 37556
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 6
19172: PUSH
19173: LD_INT 7
19175: PUSH
19176: LD_INT 8
19178: PUSH
19179: LD_INT 13
19181: PUSH
19182: LD_INT 12
19184: PUSH
19185: LD_INT 15
19187: PUSH
19188: LD_INT 11
19190: PUSH
19191: LD_INT 14
19193: PUSH
19194: LD_INT 10
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: IN
19208: IFFALSE 19218
// btype = b_lab ;
19210: LD_ADDR_VAR 0 1
19214: PUSH
19215: LD_INT 6
19217: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19218: LD_VAR 0 6
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: LD_INT 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: IN
19237: NOT
19238: PUSH
19239: LD_VAR 0 1
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: LD_INT 3
19255: PUSH
19256: LD_INT 6
19258: PUSH
19259: LD_INT 36
19261: PUSH
19262: LD_INT 4
19264: PUSH
19265: LD_INT 5
19267: PUSH
19268: LD_INT 31
19270: PUSH
19271: LD_INT 32
19273: PUSH
19274: LD_INT 33
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: IN
19290: NOT
19291: PUSH
19292: LD_VAR 0 6
19296: PUSH
19297: LD_INT 1
19299: EQUAL
19300: AND
19301: OR
19302: PUSH
19303: LD_VAR 0 1
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: LD_INT 3
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: IN
19318: NOT
19319: PUSH
19320: LD_VAR 0 6
19324: PUSH
19325: LD_INT 2
19327: EQUAL
19328: AND
19329: OR
19330: IFFALSE 19340
// mode = 0 ;
19332: LD_ADDR_VAR 0 6
19336: PUSH
19337: LD_INT 0
19339: ST_TO_ADDR
// case mode of 0 :
19340: LD_VAR 0 6
19344: PUSH
19345: LD_INT 0
19347: DOUBLE
19348: EQUAL
19349: IFTRUE 19353
19351: GO 30806
19353: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19354: LD_ADDR_VAR 0 11
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 1
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: NEG
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 3
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19547: LD_ADDR_VAR 0 12
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: NEG
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 3
19704: NEG
19705: PUSH
19706: LD_INT 0
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 3
19715: NEG
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19743: LD_ADDR_VAR 0 13
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: LD_INT 1
19763: NEG
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: PUSH
19772: LD_INT 0
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: NEG
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: LD_INT 2
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: LD_INT 1
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: LD_INT 2
19882: NEG
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 2
19890: NEG
19891: PUSH
19892: LD_INT 3
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 3
19902: NEG
19903: PUSH
19904: LD_INT 2
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 3
19914: NEG
19915: PUSH
19916: LD_INT 3
19918: NEG
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19942: LD_ADDR_VAR 0 14
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 0
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 1
20000: NEG
20001: PUSH
20002: LD_INT 0
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 1
20011: NEG
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: LD_INT 2
20027: NEG
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 2
20038: NEG
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 0
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 3
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 3
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20138: LD_ADDR_VAR 0 15
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 0
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: NEG
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: PUSH
20220: LD_INT 1
20222: NEG
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 2
20272: NEG
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 3
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 3
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20331: LD_ADDR_VAR 0 16
20335: PUSH
20336: LD_INT 0
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 1
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: LD_INT 2
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 3
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 3
20488: PUSH
20489: LD_INT 3
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 3
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20524: LD_ADDR_VAR 0 17
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: LD_INT 2
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 2
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: LD_INT 2
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: LD_INT 2
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: NEG
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: NEG
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 2
20723: NEG
20724: PUSH
20725: LD_INT 2
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20754: LD_ADDR_VAR 0 18
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 1
20812: NEG
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: NEG
20824: PUSH
20825: LD_INT 1
20827: NEG
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: LD_INT 2
20839: NEG
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 2
20850: NEG
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 2
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: NEG
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: NEG
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: NEG
20954: PUSH
20955: LD_INT 2
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20984: LD_ADDR_VAR 0 19
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: LD_INT 2
21080: NEG
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 2
21160: NEG
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: NEG
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: LD_INT 2
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21214: LD_ADDR_VAR 0 20
21218: PUSH
21219: LD_INT 0
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: LD_INT 1
21287: NEG
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: LD_INT 2
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: LD_INT 2
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 1
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: LD_INT 2
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: NEG
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 2
21390: NEG
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: NEG
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 2
21413: NEG
21414: PUSH
21415: LD_INT 2
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21444: LD_ADDR_VAR 0 21
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 1
21464: NEG
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: NEG
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: NEG
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: NEG
21526: PUSH
21527: LD_INT 2
21529: NEG
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 0
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: LD_INT 1
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 2
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 0
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 2
21620: NEG
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: NEG
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 2
21643: NEG
21644: PUSH
21645: LD_INT 2
21647: NEG
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21674: LD_ADDR_VAR 0 22
21678: PUSH
21679: LD_INT 0
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 0
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 1
21743: NEG
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 0
21767: PUSH
21768: LD_INT 2
21770: NEG
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: NEG
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 2
21861: NEG
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: LD_INT 2
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21904: LD_ADDR_VAR 0 23
21908: PUSH
21909: LD_INT 0
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 0
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 1
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 1
21962: NEG
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: LD_INT 2
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 2
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 0
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 2
22091: NEG
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: LD_INT 2
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 2
22115: NEG
22116: PUSH
22117: LD_INT 3
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 3
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22184: LD_ADDR_VAR 0 24
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: NEG
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 2
22360: NEG
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 2
22371: NEG
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 2
22383: NEG
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 3
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22460: LD_ADDR_VAR 0 25
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 0
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 1
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: PUSH
22692: LD_INT 3
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22734: LD_ADDR_VAR 0 26
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 1
22792: NEG
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: LD_INT 1
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PUSH
22817: LD_INT 2
22819: NEG
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 2
22830: NEG
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: NEG
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: LD_INT 3
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 3
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 2
22976: NEG
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23010: LD_ADDR_VAR 0 27
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: LD_INT 2
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 2
23186: NEG
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 2
23197: NEG
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 2
23209: NEG
23210: PUSH
23211: LD_INT 2
23213: NEG
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 1
23221: NEG
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 3
23243: NEG
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 3
23255: NEG
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23290: LD_ADDR_VAR 0 28
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 0
23307: PUSH
23308: LD_INT 1
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 0
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: LD_INT 1
23363: NEG
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 1
23371: NEG
23372: PUSH
23373: LD_INT 2
23375: NEG
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: LD_INT 2
23386: NEG
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: NEG
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: NEG
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: NEG
23490: PUSH
23491: LD_INT 2
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: LD_INT 3
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 3
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: NEG
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 3
23537: NEG
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23572: LD_ADDR_VAR 0 29
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 1
23592: NEG
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: LD_INT 1
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: LD_INT 2
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 2
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: NEG
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: NEG
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 2
23750: NEG
23751: PUSH
23752: LD_INT 2
23754: NEG
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 2
23762: NEG
23763: PUSH
23764: LD_INT 3
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 1
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: NEG
23806: PUSH
23807: LD_INT 2
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 3
23816: NEG
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23851: LD_ADDR_VAR 0 30
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 0
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 2
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 2
24017: NEG
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 2
24028: NEG
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 3
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 2
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: LD_INT 3
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: NEG
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 3
24094: NEG
24095: PUSH
24096: LD_INT 1
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24129: LD_ADDR_VAR 0 31
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: NEG
24211: PUSH
24212: LD_INT 2
24214: NEG
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: LD_INT 1
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: LD_INT 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 2
24294: NEG
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 2
24306: NEG
24307: PUSH
24308: LD_INT 2
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: LD_INT 3
24322: NEG
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 2
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 1
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: LD_INT 3
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 3
24372: NEG
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24407: LD_ADDR_VAR 0 32
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: LD_INT 2
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 2
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: NEG
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: NEG
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: LD_INT 3
24600: NEG
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 2
24611: NEG
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 3
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 3
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 3
24650: NEG
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24685: LD_ADDR_VAR 0 33
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: LD_INT 2
24770: NEG
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: NEG
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: LD_INT 2
24867: NEG
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 2
24875: NEG
24876: PUSH
24877: LD_INT 3
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 3
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: LD_INT 3
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: LD_INT 2
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 3
24929: NEG
24930: PUSH
24931: LD_INT 2
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24964: LD_ADDR_VAR 0 34
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 2
25120: NEG
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: NEG
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: NEG
25144: PUSH
25145: LD_INT 2
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 3
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 3
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 3
25209: NEG
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25244: LD_ADDR_VAR 0 35
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 2
25335: NEG
25336: PUSH
25337: LD_INT 1
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25356: LD_ADDR_VAR 0 36
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: LD_INT 2
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: LD_INT 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25468: LD_ADDR_VAR 0 37
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25580: LD_ADDR_VAR 0 38
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 1
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25692: LD_ADDR_VAR 0 39
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: LD_INT 2
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25804: LD_ADDR_VAR 0 40
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25916: LD_ADDR_VAR 0 41
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: LD_INT 1
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: NEG
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: LD_INT 3
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 3
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 3
26149: PUSH
26150: LD_INT 2
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 3
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 2
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 3
26190: NEG
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 3
26201: NEG
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 3
26213: NEG
26214: PUSH
26215: LD_INT 2
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 3
26225: NEG
26226: PUSH
26227: LD_INT 3
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26266: LD_ADDR_VAR 0 42
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 1
26347: NEG
26348: PUSH
26349: LD_INT 2
26351: NEG
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 2
26444: NEG
26445: PUSH
26446: LD_INT 2
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: LD_INT 3
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 3
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: LD_INT 3
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 2
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 3
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 3
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 3
26563: NEG
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 3
26575: NEG
26576: PUSH
26577: LD_INT 3
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26616: LD_ADDR_VAR 0 43
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 1
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 2
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 2
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 0
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: NEG
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: LD_INT 3
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 3
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: LD_INT 0
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 3
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 3
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 2
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 3
26912: NEG
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 3
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26964: LD_ADDR_VAR 0 44
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: LD_INT 2
27049: NEG
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: NEG
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 2
27154: NEG
27155: PUSH
27156: LD_INT 3
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 3
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 3
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: LD_INT 3
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: NEG
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 3
27238: NEG
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 3
27249: NEG
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 3
27261: NEG
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 3
27273: NEG
27274: PUSH
27275: LD_INT 3
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27314: LD_ADDR_VAR 0 45
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: LD_INT 2
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: LD_INT 3
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 3
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 3
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 2
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 3
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 3
27560: PUSH
27561: LD_INT 3
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: LD_INT 3
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 3
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 3
27611: NEG
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 3
27623: NEG
27624: PUSH
27625: LD_INT 3
27627: NEG
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27664: LD_ADDR_VAR 0 46
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 1
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 2
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: LD_INT 2
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: NEG
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 2
27841: NEG
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: LD_INT 3
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 3
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 3
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 3
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 3
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 3
27960: NEG
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28012: LD_ADDR_VAR 0 47
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 2
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28163: LD_ADDR_VAR 0 48
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 2
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28310: LD_ADDR_VAR 0 49
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28454: LD_ADDR_VAR 0 50
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28598: LD_ADDR_VAR 0 51
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: LD_INT 1
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28745: LD_ADDR_VAR 0 52
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: NEG
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: LD_INT 2
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28896: LD_ADDR_VAR 0 53
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: LD_INT 2
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 2
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29126: LD_ADDR_VAR 0 54
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: LD_INT 2
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 2
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 2
29302: NEG
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: NEG
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29356: LD_ADDR_VAR 0 55
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: LD_INT 2
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29586: LD_ADDR_VAR 0 56
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29816: LD_ADDR_VAR 0 57
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: LD_INT 2
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 1
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 2
29992: NEG
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: NEG
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30046: LD_ADDR_VAR 0 58
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: NEG
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: NEG
30128: PUSH
30129: LD_INT 2
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: NEG
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 2
30245: NEG
30246: PUSH
30247: LD_INT 2
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30276: LD_ADDR_VAR 0 59
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30364: LD_ADDR_VAR 0 60
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30452: LD_ADDR_VAR 0 61
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30540: LD_ADDR_VAR 0 62
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30628: LD_ADDR_VAR 0 63
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 1
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30716: LD_ADDR_VAR 0 64
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: LD_INT 1
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// end ; 1 :
30804: GO 36701
30806: LD_INT 1
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 33437
30814: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30815: LD_ADDR_VAR 0 11
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 3
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30859: LD_ADDR_VAR 0 12
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30900: LD_ADDR_VAR 0 13
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 3
30917: PUSH
30918: LD_INT 3
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: PUSH
30928: LD_INT 3
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30940: LD_ADDR_VAR 0 14
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30981: LD_ADDR_VAR 0 15
30985: PUSH
30986: LD_INT 2
30988: NEG
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31025: LD_ADDR_VAR 0 16
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: LD_INT 3
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: LD_INT 2
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 3
31056: NEG
31057: PUSH
31058: LD_INT 3
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31071: LD_ADDR_VAR 0 17
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: LD_INT 3
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 3
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 2
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31115: LD_ADDR_VAR 0 18
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 3
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 3
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31156: LD_ADDR_VAR 0 19
31160: PUSH
31161: LD_INT 3
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 3
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31196: LD_ADDR_VAR 0 20
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 3
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31237: LD_ADDR_VAR 0 21
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 3
31255: NEG
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31281: LD_ADDR_VAR 0 22
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: LD_INT 3
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: NEG
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 3
31312: NEG
31313: PUSH
31314: LD_INT 3
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31327: LD_ADDR_VAR 0 23
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: LD_INT 3
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 4
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 3
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31371: LD_ADDR_VAR 0 24
31375: PUSH
31376: LD_INT 3
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 4
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31412: LD_ADDR_VAR 0 25
31416: PUSH
31417: LD_INT 3
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: LD_INT 4
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31452: LD_ADDR_VAR 0 26
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 4
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31493: LD_ADDR_VAR 0 27
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 4
31522: NEG
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31537: LD_ADDR_VAR 0 28
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 3
31556: NEG
31557: PUSH
31558: LD_INT 4
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 4
31568: NEG
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31583: LD_ADDR_VAR 0 29
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: LD_INT 3
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 3
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 2
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: LD_INT 4
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 4
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 3
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: LD_INT 5
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: LD_INT 5
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: LD_INT 4
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 6
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: LD_INT 6
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: LD_INT 5
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31738: LD_ADDR_VAR 0 30
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 4
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 4
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 4
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 5
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 5
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 5
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 6
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 6
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31881: LD_ADDR_VAR 0 31
31885: PUSH
31886: LD_INT 3
31888: PUSH
31889: LD_INT 2
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: LD_INT 3
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 4
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 4
31928: PUSH
31929: LD_INT 4
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 5
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 5
31958: PUSH
31959: LD_INT 5
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 6
31978: PUSH
31979: LD_INT 5
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 6
31988: PUSH
31989: LD_INT 6
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: LD_INT 6
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32020: LD_ADDR_VAR 0 32
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: LD_INT 4
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 4
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: LD_INT 5
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: LD_INT 5
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: LD_INT 4
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 6
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: LD_INT 6
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: LD_INT 5
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32163: LD_ADDR_VAR 0 33
32167: PUSH
32168: LD_INT 2
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 3
32181: NEG
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 3
32204: NEG
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 4
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 4
32238: NEG
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 5
32249: NEG
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 5
32260: NEG
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 5
32272: NEG
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 6
32283: NEG
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 6
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32318: LD_ADDR_VAR 0 34
32322: PUSH
32323: LD_INT 2
32325: NEG
32326: PUSH
32327: LD_INT 3
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 3
32337: NEG
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: LD_INT 3
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: LD_INT 4
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 4
32373: NEG
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 4
32385: NEG
32386: PUSH
32387: LD_INT 4
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 4
32397: NEG
32398: PUSH
32399: LD_INT 5
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 5
32409: NEG
32410: PUSH
32411: LD_INT 4
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 5
32421: NEG
32422: PUSH
32423: LD_INT 5
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 5
32433: NEG
32434: PUSH
32435: LD_INT 6
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 6
32445: NEG
32446: PUSH
32447: LD_INT 5
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 6
32457: NEG
32458: PUSH
32459: LD_INT 6
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32481: LD_ADDR_VAR 0 41
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: LD_INT 3
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32525: LD_ADDR_VAR 0 42
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32566: LD_ADDR_VAR 0 43
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 3
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32606: LD_ADDR_VAR 0 44
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: LD_INT 3
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32647: LD_ADDR_VAR 0 45
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 3
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32691: LD_ADDR_VAR 0 46
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 3
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 3
32722: NEG
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32737: LD_ADDR_VAR 0 47
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: LD_INT 3
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: LD_INT 3
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32770: LD_ADDR_VAR 0 48
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32801: LD_ADDR_VAR 0 49
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 3
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32830: LD_ADDR_VAR 0 50
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32859: LD_ADDR_VAR 0 51
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32890: LD_ADDR_VAR 0 52
32894: PUSH
32895: LD_INT 3
32897: NEG
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: LD_INT 2
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32923: LD_ADDR_VAR 0 53
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 3
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 3
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32967: LD_ADDR_VAR 0 54
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 3
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 3
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33008: LD_ADDR_VAR 0 55
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 3
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33048: LD_ADDR_VAR 0 56
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 3
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33089: LD_ADDR_VAR 0 57
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 3
33107: NEG
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 3
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33133: LD_ADDR_VAR 0 58
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: LD_INT 3
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 3
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: NEG
33165: PUSH
33166: LD_INT 3
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33179: LD_ADDR_VAR 0 59
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33223: LD_ADDR_VAR 0 60
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33264: LD_ADDR_VAR 0 61
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33304: LD_ADDR_VAR 0 62
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33345: LD_ADDR_VAR 0 63
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33389: LD_ADDR_VAR 0 64
33393: PUSH
33394: LD_INT 1
33396: NEG
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: ST_TO_ADDR
// end ; 2 :
33435: GO 36701
33437: LD_INT 2
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 36700
33445: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33446: LD_ADDR_VAR 0 29
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 5
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 5
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 5
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 3
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 4
33566: PUSH
33567: LD_INT 3
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 4
33576: PUSH
33577: LD_INT 4
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: LD_INT 4
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: LD_INT 3
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 4
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 3
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: LD_INT 4
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: LD_INT 5
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: LD_INT 5
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: LD_INT 5
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: LD_INT 3
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 3
33729: NEG
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 3
33740: NEG
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 4
33785: NEG
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 4
33796: NEG
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 4
33808: NEG
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 4
33831: NEG
33832: PUSH
33833: LD_INT 4
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 4
33843: NEG
33844: PUSH
33845: LD_INT 5
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: LD_INT 4
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 3
33867: NEG
33868: PUSH
33869: LD_INT 3
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 4
33879: NEG
33880: PUSH
33881: LD_INT 3
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 5
33891: NEG
33892: PUSH
33893: LD_INT 4
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 5
33903: NEG
33904: PUSH
33905: LD_INT 5
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: LD_INT 5
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 5
33927: NEG
33928: PUSH
33929: LD_INT 3
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33984: LD_ADDR_VAR 0 30
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 4
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 5
34011: PUSH
34012: LD_INT 4
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 5
34021: PUSH
34022: LD_INT 5
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 4
34031: PUSH
34032: LD_INT 5
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: LD_INT 4
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: LD_INT 3
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 5
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 3
34071: PUSH
34072: LD_INT 5
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 3
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: LD_INT 3
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 4
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: LD_INT 4
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: LD_INT 4
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 4
34174: NEG
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 4
34185: NEG
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 3
34197: NEG
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: NEG
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 4
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 5
34230: NEG
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 5
34241: NEG
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 5
34253: NEG
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 3
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 3
34276: NEG
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 3
34288: NEG
34289: PUSH
34290: LD_INT 4
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: LD_INT 3
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 3
34324: NEG
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 4
34336: NEG
34337: PUSH
34338: LD_INT 3
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 4
34348: NEG
34349: PUSH
34350: LD_INT 4
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 2
34360: NEG
34361: PUSH
34362: LD_INT 4
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: LD_INT 2
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: LD_INT 4
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 5
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: LD_INT 4
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 3
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 4
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 5
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: LD_INT 3
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: LD_INT 5
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34531: LD_ADDR_VAR 0 31
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 4
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 5
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 5
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 5
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 3
34631: NEG
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 3
34642: NEG
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: NEG
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: NEG
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: NEG
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 4
34687: NEG
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 4
34698: NEG
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 4
34710: NEG
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 2
34722: NEG
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 4
34733: NEG
34734: PUSH
34735: LD_INT 4
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 4
34745: NEG
34746: PUSH
34747: LD_INT 5
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 3
34757: NEG
34758: PUSH
34759: LD_INT 4
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: LD_INT 3
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 4
34781: NEG
34782: PUSH
34783: LD_INT 3
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 5
34793: NEG
34794: PUSH
34795: LD_INT 4
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 5
34805: NEG
34806: PUSH
34807: LD_INT 5
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: NEG
34818: PUSH
34819: LD_INT 5
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 5
34829: NEG
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 3
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 4
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: LD_INT 3
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 4
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 2
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 2
34931: NEG
34932: PUSH
34933: LD_INT 4
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 5
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 5
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 3
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 5
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35081: LD_ADDR_VAR 0 32
35085: PUSH
35086: LD_INT 4
35088: NEG
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 4
35099: NEG
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 3
35111: NEG
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 3
35122: NEG
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 4
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 5
35144: NEG
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 5
35155: NEG
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 5
35167: NEG
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 3
35179: NEG
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 3
35190: NEG
35191: PUSH
35192: LD_INT 3
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 3
35202: NEG
35203: PUSH
35204: LD_INT 4
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 2
35226: NEG
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 3
35238: NEG
35239: PUSH
35240: LD_INT 2
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 4
35250: NEG
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 4
35262: NEG
35263: PUSH
35264: LD_INT 4
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 4
35286: NEG
35287: PUSH
35288: LD_INT 2
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 4
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 5
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 4
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: LD_INT 3
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: LD_INT 3
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: LD_INT 4
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 5
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: LD_INT 3
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: LD_INT 5
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 4
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 4
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 4
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 4
35493: PUSH
35494: LD_INT 4
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 4
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 5
35513: PUSH
35514: LD_INT 4
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 5
35523: PUSH
35524: LD_INT 5
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 4
35533: PUSH
35534: LD_INT 5
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 3
35543: PUSH
35544: LD_INT 4
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: LD_INT 3
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 5
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 5
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35628: LD_ADDR_VAR 0 33
35632: PUSH
35633: LD_INT 4
35635: NEG
35636: PUSH
35637: LD_INT 4
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 4
35647: NEG
35648: PUSH
35649: LD_INT 5
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 3
35659: NEG
35660: PUSH
35661: LD_INT 4
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 3
35671: NEG
35672: PUSH
35673: LD_INT 3
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 4
35683: NEG
35684: PUSH
35685: LD_INT 3
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 5
35695: NEG
35696: PUSH
35697: LD_INT 4
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 5
35707: NEG
35708: PUSH
35709: LD_INT 5
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 3
35719: NEG
35720: PUSH
35721: LD_INT 5
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 5
35731: NEG
35732: PUSH
35733: LD_INT 3
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 3
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: LD_INT 4
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 3
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: LD_INT 3
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: LD_INT 4
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: LD_INT 4
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 4
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 5
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 5
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 4
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 3
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 5
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: LD_INT 3
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 3
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 4
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 4
35968: PUSH
35969: LD_INT 4
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: LD_INT 4
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 3
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 4
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 4
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 4
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: LD_INT 3
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 4
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 5
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 5
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: LD_INT 4
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: LD_INT 3
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 5
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: NEG
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36166: LD_ADDR_VAR 0 34
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 4
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 5
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 4
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 3
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: LD_INT 3
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 4
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: LD_INT 5
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: LD_INT 3
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: LD_INT 5
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 3
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 4
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 4
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 3
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 4
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 4
36368: PUSH
36369: LD_INT 4
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: LD_INT 3
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: LD_INT 4
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 5
36398: PUSH
36399: LD_INT 5
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 4
36408: PUSH
36409: LD_INT 5
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 3
36418: PUSH
36419: LD_INT 4
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: LD_INT 3
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 5
36438: PUSH
36439: LD_INT 3
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: LD_INT 5
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 4
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 4
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: LD_INT 4
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 4
36551: NEG
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 4
36562: NEG
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 3
36574: NEG
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 3
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 4
36596: NEG
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 5
36607: NEG
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 5
36618: NEG
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 5
36630: NEG
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: LD_INT 2
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
// end ; end ;
36698: GO 36701
36700: POP
// case btype of b_depot , b_warehouse :
36701: LD_VAR 0 1
36705: PUSH
36706: LD_INT 0
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36720
36712: LD_INT 1
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36921
36720: POP
// case nation of nation_american :
36721: LD_VAR 0 5
36725: PUSH
36726: LD_INT 1
36728: DOUBLE
36729: EQUAL
36730: IFTRUE 36734
36732: GO 36790
36734: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36735: LD_ADDR_VAR 0 9
36739: PUSH
36740: LD_VAR 0 11
36744: PUSH
36745: LD_VAR 0 12
36749: PUSH
36750: LD_VAR 0 13
36754: PUSH
36755: LD_VAR 0 14
36759: PUSH
36760: LD_VAR 0 15
36764: PUSH
36765: LD_VAR 0 16
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 4
36782: PUSH
36783: LD_INT 1
36785: PLUS
36786: ARRAY
36787: ST_TO_ADDR
36788: GO 36919
36790: LD_INT 2
36792: DOUBLE
36793: EQUAL
36794: IFTRUE 36798
36796: GO 36854
36798: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36799: LD_ADDR_VAR 0 9
36803: PUSH
36804: LD_VAR 0 17
36808: PUSH
36809: LD_VAR 0 18
36813: PUSH
36814: LD_VAR 0 19
36818: PUSH
36819: LD_VAR 0 20
36823: PUSH
36824: LD_VAR 0 21
36828: PUSH
36829: LD_VAR 0 22
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: PUSH
36842: LD_VAR 0 4
36846: PUSH
36847: LD_INT 1
36849: PLUS
36850: ARRAY
36851: ST_TO_ADDR
36852: GO 36919
36854: LD_INT 3
36856: DOUBLE
36857: EQUAL
36858: IFTRUE 36862
36860: GO 36918
36862: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36863: LD_ADDR_VAR 0 9
36867: PUSH
36868: LD_VAR 0 23
36872: PUSH
36873: LD_VAR 0 24
36877: PUSH
36878: LD_VAR 0 25
36882: PUSH
36883: LD_VAR 0 26
36887: PUSH
36888: LD_VAR 0 27
36892: PUSH
36893: LD_VAR 0 28
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: PUSH
36906: LD_VAR 0 4
36910: PUSH
36911: LD_INT 1
36913: PLUS
36914: ARRAY
36915: ST_TO_ADDR
36916: GO 36919
36918: POP
36919: GO 37474
36921: LD_INT 2
36923: DOUBLE
36924: EQUAL
36925: IFTRUE 36935
36927: LD_INT 3
36929: DOUBLE
36930: EQUAL
36931: IFTRUE 36935
36933: GO 36991
36935: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36936: LD_ADDR_VAR 0 9
36940: PUSH
36941: LD_VAR 0 29
36945: PUSH
36946: LD_VAR 0 30
36950: PUSH
36951: LD_VAR 0 31
36955: PUSH
36956: LD_VAR 0 32
36960: PUSH
36961: LD_VAR 0 33
36965: PUSH
36966: LD_VAR 0 34
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: PUSH
36979: LD_VAR 0 4
36983: PUSH
36984: LD_INT 1
36986: PLUS
36987: ARRAY
36988: ST_TO_ADDR
36989: GO 37474
36991: LD_INT 16
36993: DOUBLE
36994: EQUAL
36995: IFTRUE 37053
36997: LD_INT 17
36999: DOUBLE
37000: EQUAL
37001: IFTRUE 37053
37003: LD_INT 18
37005: DOUBLE
37006: EQUAL
37007: IFTRUE 37053
37009: LD_INT 19
37011: DOUBLE
37012: EQUAL
37013: IFTRUE 37053
37015: LD_INT 22
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37053
37021: LD_INT 20
37023: DOUBLE
37024: EQUAL
37025: IFTRUE 37053
37027: LD_INT 21
37029: DOUBLE
37030: EQUAL
37031: IFTRUE 37053
37033: LD_INT 23
37035: DOUBLE
37036: EQUAL
37037: IFTRUE 37053
37039: LD_INT 24
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37053
37045: LD_INT 25
37047: DOUBLE
37048: EQUAL
37049: IFTRUE 37053
37051: GO 37109
37053: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37054: LD_ADDR_VAR 0 9
37058: PUSH
37059: LD_VAR 0 35
37063: PUSH
37064: LD_VAR 0 36
37068: PUSH
37069: LD_VAR 0 37
37073: PUSH
37074: LD_VAR 0 38
37078: PUSH
37079: LD_VAR 0 39
37083: PUSH
37084: LD_VAR 0 40
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: PUSH
37097: LD_VAR 0 4
37101: PUSH
37102: LD_INT 1
37104: PLUS
37105: ARRAY
37106: ST_TO_ADDR
37107: GO 37474
37109: LD_INT 6
37111: DOUBLE
37112: EQUAL
37113: IFTRUE 37165
37115: LD_INT 7
37117: DOUBLE
37118: EQUAL
37119: IFTRUE 37165
37121: LD_INT 8
37123: DOUBLE
37124: EQUAL
37125: IFTRUE 37165
37127: LD_INT 13
37129: DOUBLE
37130: EQUAL
37131: IFTRUE 37165
37133: LD_INT 12
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37165
37139: LD_INT 15
37141: DOUBLE
37142: EQUAL
37143: IFTRUE 37165
37145: LD_INT 11
37147: DOUBLE
37148: EQUAL
37149: IFTRUE 37165
37151: LD_INT 14
37153: DOUBLE
37154: EQUAL
37155: IFTRUE 37165
37157: LD_INT 10
37159: DOUBLE
37160: EQUAL
37161: IFTRUE 37165
37163: GO 37221
37165: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37166: LD_ADDR_VAR 0 9
37170: PUSH
37171: LD_VAR 0 41
37175: PUSH
37176: LD_VAR 0 42
37180: PUSH
37181: LD_VAR 0 43
37185: PUSH
37186: LD_VAR 0 44
37190: PUSH
37191: LD_VAR 0 45
37195: PUSH
37196: LD_VAR 0 46
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: PUSH
37209: LD_VAR 0 4
37213: PUSH
37214: LD_INT 1
37216: PLUS
37217: ARRAY
37218: ST_TO_ADDR
37219: GO 37474
37221: LD_INT 36
37223: DOUBLE
37224: EQUAL
37225: IFTRUE 37229
37227: GO 37285
37229: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37230: LD_ADDR_VAR 0 9
37234: PUSH
37235: LD_VAR 0 47
37239: PUSH
37240: LD_VAR 0 48
37244: PUSH
37245: LD_VAR 0 49
37249: PUSH
37250: LD_VAR 0 50
37254: PUSH
37255: LD_VAR 0 51
37259: PUSH
37260: LD_VAR 0 52
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: LD_VAR 0 4
37277: PUSH
37278: LD_INT 1
37280: PLUS
37281: ARRAY
37282: ST_TO_ADDR
37283: GO 37474
37285: LD_INT 4
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37311
37291: LD_INT 5
37293: DOUBLE
37294: EQUAL
37295: IFTRUE 37311
37297: LD_INT 34
37299: DOUBLE
37300: EQUAL
37301: IFTRUE 37311
37303: LD_INT 37
37305: DOUBLE
37306: EQUAL
37307: IFTRUE 37311
37309: GO 37367
37311: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37312: LD_ADDR_VAR 0 9
37316: PUSH
37317: LD_VAR 0 53
37321: PUSH
37322: LD_VAR 0 54
37326: PUSH
37327: LD_VAR 0 55
37331: PUSH
37332: LD_VAR 0 56
37336: PUSH
37337: LD_VAR 0 57
37341: PUSH
37342: LD_VAR 0 58
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: PUSH
37355: LD_VAR 0 4
37359: PUSH
37360: LD_INT 1
37362: PLUS
37363: ARRAY
37364: ST_TO_ADDR
37365: GO 37474
37367: LD_INT 31
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37417
37373: LD_INT 32
37375: DOUBLE
37376: EQUAL
37377: IFTRUE 37417
37379: LD_INT 33
37381: DOUBLE
37382: EQUAL
37383: IFTRUE 37417
37385: LD_INT 27
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37417
37391: LD_INT 26
37393: DOUBLE
37394: EQUAL
37395: IFTRUE 37417
37397: LD_INT 28
37399: DOUBLE
37400: EQUAL
37401: IFTRUE 37417
37403: LD_INT 29
37405: DOUBLE
37406: EQUAL
37407: IFTRUE 37417
37409: LD_INT 30
37411: DOUBLE
37412: EQUAL
37413: IFTRUE 37417
37415: GO 37473
37417: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37418: LD_ADDR_VAR 0 9
37422: PUSH
37423: LD_VAR 0 59
37427: PUSH
37428: LD_VAR 0 60
37432: PUSH
37433: LD_VAR 0 61
37437: PUSH
37438: LD_VAR 0 62
37442: PUSH
37443: LD_VAR 0 63
37447: PUSH
37448: LD_VAR 0 64
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: PUSH
37461: LD_VAR 0 4
37465: PUSH
37466: LD_INT 1
37468: PLUS
37469: ARRAY
37470: ST_TO_ADDR
37471: GO 37474
37473: POP
// temp_list2 = [ ] ;
37474: LD_ADDR_VAR 0 10
37478: PUSH
37479: EMPTY
37480: ST_TO_ADDR
// for i in temp_list do
37481: LD_ADDR_VAR 0 8
37485: PUSH
37486: LD_VAR 0 9
37490: PUSH
37491: FOR_IN
37492: IFFALSE 37544
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37494: LD_ADDR_VAR 0 10
37498: PUSH
37499: LD_VAR 0 10
37503: PUSH
37504: LD_VAR 0 8
37508: PUSH
37509: LD_INT 1
37511: ARRAY
37512: PUSH
37513: LD_VAR 0 2
37517: PLUS
37518: PUSH
37519: LD_VAR 0 8
37523: PUSH
37524: LD_INT 2
37526: ARRAY
37527: PUSH
37528: LD_VAR 0 3
37532: PLUS
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: ADD
37541: ST_TO_ADDR
37542: GO 37491
37544: POP
37545: POP
// result = temp_list2 ;
37546: LD_ADDR_VAR 0 7
37550: PUSH
37551: LD_VAR 0 10
37555: ST_TO_ADDR
// end ;
37556: LD_VAR 0 7
37560: RET
// export function EnemyInRange ( unit , dist ) ; begin
37561: LD_INT 0
37563: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37564: LD_ADDR_VAR 0 3
37568: PUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL_OW 255
37578: PPUSH
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 250
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 251
37598: PPUSH
37599: LD_VAR 0 2
37603: PPUSH
37604: CALL 10934 0 4
37608: PUSH
37609: LD_INT 4
37611: ARRAY
37612: ST_TO_ADDR
// end ;
37613: LD_VAR 0 3
37617: RET
// export function PlayerSeeMe ( unit ) ; begin
37618: LD_INT 0
37620: PPUSH
// result := See ( your_side , unit ) ;
37621: LD_ADDR_VAR 0 2
37625: PUSH
37626: LD_OWVAR 2
37630: PPUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 292
37640: ST_TO_ADDR
// end ;
37641: LD_VAR 0 2
37645: RET
// export function ReverseDir ( unit ) ; begin
37646: LD_INT 0
37648: PPUSH
// if not unit then
37649: LD_VAR 0 1
37653: NOT
37654: IFFALSE 37658
// exit ;
37656: GO 37681
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37658: LD_ADDR_VAR 0 2
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 254
37672: PUSH
37673: LD_INT 3
37675: PLUS
37676: PUSH
37677: LD_INT 6
37679: MOD
37680: ST_TO_ADDR
// end ;
37681: LD_VAR 0 2
37685: RET
// export function ReverseArray ( array ) ; var i ; begin
37686: LD_INT 0
37688: PPUSH
37689: PPUSH
// if not array then
37690: LD_VAR 0 1
37694: NOT
37695: IFFALSE 37699
// exit ;
37697: GO 37754
// result := [ ] ;
37699: LD_ADDR_VAR 0 2
37703: PUSH
37704: EMPTY
37705: ST_TO_ADDR
// for i := array downto 1 do
37706: LD_ADDR_VAR 0 3
37710: PUSH
37711: DOUBLE
37712: LD_VAR 0 1
37716: INC
37717: ST_TO_ADDR
37718: LD_INT 1
37720: PUSH
37721: FOR_DOWNTO
37722: IFFALSE 37752
// result := Join ( result , array [ i ] ) ;
37724: LD_ADDR_VAR 0 2
37728: PUSH
37729: LD_VAR 0 2
37733: PPUSH
37734: LD_VAR 0 1
37738: PUSH
37739: LD_VAR 0 3
37743: ARRAY
37744: PPUSH
37745: CALL 42410 0 2
37749: ST_TO_ADDR
37750: GO 37721
37752: POP
37753: POP
// end ;
37754: LD_VAR 0 2
37758: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37759: LD_INT 0
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
// if not unit or not hexes then
37767: LD_VAR 0 1
37771: NOT
37772: PUSH
37773: LD_VAR 0 2
37777: NOT
37778: OR
37779: IFFALSE 37783
// exit ;
37781: GO 37906
// dist := 9999 ;
37783: LD_ADDR_VAR 0 5
37787: PUSH
37788: LD_INT 9999
37790: ST_TO_ADDR
// for i = 1 to hexes do
37791: LD_ADDR_VAR 0 4
37795: PUSH
37796: DOUBLE
37797: LD_INT 1
37799: DEC
37800: ST_TO_ADDR
37801: LD_VAR 0 2
37805: PUSH
37806: FOR_TO
37807: IFFALSE 37894
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37809: LD_ADDR_VAR 0 6
37813: PUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: LD_VAR 0 2
37823: PUSH
37824: LD_VAR 0 4
37828: ARRAY
37829: PUSH
37830: LD_INT 1
37832: ARRAY
37833: PPUSH
37834: LD_VAR 0 2
37838: PUSH
37839: LD_VAR 0 4
37843: ARRAY
37844: PUSH
37845: LD_INT 2
37847: ARRAY
37848: PPUSH
37849: CALL_OW 297
37853: ST_TO_ADDR
// if tdist < dist then
37854: LD_VAR 0 6
37858: PUSH
37859: LD_VAR 0 5
37863: LESS
37864: IFFALSE 37892
// begin hex := hexes [ i ] ;
37866: LD_ADDR_VAR 0 8
37870: PUSH
37871: LD_VAR 0 2
37875: PUSH
37876: LD_VAR 0 4
37880: ARRAY
37881: ST_TO_ADDR
// dist := tdist ;
37882: LD_ADDR_VAR 0 5
37886: PUSH
37887: LD_VAR 0 6
37891: ST_TO_ADDR
// end ; end ;
37892: GO 37806
37894: POP
37895: POP
// result := hex ;
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: LD_VAR 0 8
37905: ST_TO_ADDR
// end ;
37906: LD_VAR 0 3
37910: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37911: LD_INT 0
37913: PPUSH
37914: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37915: LD_VAR 0 1
37919: NOT
37920: PUSH
37921: LD_VAR 0 1
37925: PUSH
37926: LD_INT 21
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 23
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 69
37954: IN
37955: NOT
37956: OR
37957: IFFALSE 37961
// exit ;
37959: GO 38008
// for i = 1 to 3 do
37961: LD_ADDR_VAR 0 3
37965: PUSH
37966: DOUBLE
37967: LD_INT 1
37969: DEC
37970: ST_TO_ADDR
37971: LD_INT 3
37973: PUSH
37974: FOR_TO
37975: IFFALSE 38006
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37977: LD_VAR 0 1
37981: PPUSH
37982: CALL_OW 250
37986: PPUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: CALL_OW 251
37996: PPUSH
37997: LD_INT 1
37999: PPUSH
38000: CALL_OW 453
38004: GO 37974
38006: POP
38007: POP
// end ;
38008: LD_VAR 0 2
38012: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38013: LD_INT 0
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
38021: LD_VAR 0 1
38025: NOT
38026: PUSH
38027: LD_VAR 0 2
38031: NOT
38032: OR
38033: PUSH
38034: LD_VAR 0 1
38038: PPUSH
38039: CALL_OW 314
38043: OR
38044: IFFALSE 38048
// exit ;
38046: GO 38515
// if GetLives ( i ) < 250 then
38048: LD_VAR 0 4
38052: PPUSH
38053: CALL_OW 256
38057: PUSH
38058: LD_INT 250
38060: LESS
38061: IFFALSE 38074
// begin ComAutodestruct ( i ) ;
38063: LD_VAR 0 4
38067: PPUSH
38068: CALL 37911 0 1
// exit ;
38072: GO 38515
// end ; x := GetX ( enemy_unit ) ;
38074: LD_ADDR_VAR 0 7
38078: PUSH
38079: LD_VAR 0 2
38083: PPUSH
38084: CALL_OW 250
38088: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38089: LD_ADDR_VAR 0 8
38093: PUSH
38094: LD_VAR 0 2
38098: PPUSH
38099: CALL_OW 251
38103: ST_TO_ADDR
// if not x or not y then
38104: LD_VAR 0 7
38108: NOT
38109: PUSH
38110: LD_VAR 0 8
38114: NOT
38115: OR
38116: IFFALSE 38120
// exit ;
38118: GO 38515
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38120: LD_ADDR_VAR 0 6
38124: PUSH
38125: LD_VAR 0 7
38129: PPUSH
38130: LD_INT 0
38132: PPUSH
38133: LD_INT 4
38135: PPUSH
38136: CALL_OW 272
38140: PUSH
38141: LD_VAR 0 8
38145: PPUSH
38146: LD_INT 0
38148: PPUSH
38149: LD_INT 4
38151: PPUSH
38152: CALL_OW 273
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_VAR 0 7
38165: PPUSH
38166: LD_INT 1
38168: PPUSH
38169: LD_INT 4
38171: PPUSH
38172: CALL_OW 272
38176: PUSH
38177: LD_VAR 0 8
38181: PPUSH
38182: LD_INT 1
38184: PPUSH
38185: LD_INT 4
38187: PPUSH
38188: CALL_OW 273
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_VAR 0 7
38201: PPUSH
38202: LD_INT 2
38204: PPUSH
38205: LD_INT 4
38207: PPUSH
38208: CALL_OW 272
38212: PUSH
38213: LD_VAR 0 8
38217: PPUSH
38218: LD_INT 2
38220: PPUSH
38221: LD_INT 4
38223: PPUSH
38224: CALL_OW 273
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_VAR 0 7
38237: PPUSH
38238: LD_INT 3
38240: PPUSH
38241: LD_INT 4
38243: PPUSH
38244: CALL_OW 272
38248: PUSH
38249: LD_VAR 0 8
38253: PPUSH
38254: LD_INT 3
38256: PPUSH
38257: LD_INT 4
38259: PPUSH
38260: CALL_OW 273
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_VAR 0 7
38273: PPUSH
38274: LD_INT 4
38276: PPUSH
38277: LD_INT 4
38279: PPUSH
38280: CALL_OW 272
38284: PUSH
38285: LD_VAR 0 8
38289: PPUSH
38290: LD_INT 4
38292: PPUSH
38293: LD_INT 4
38295: PPUSH
38296: CALL_OW 273
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_VAR 0 7
38309: PPUSH
38310: LD_INT 5
38312: PPUSH
38313: LD_INT 4
38315: PPUSH
38316: CALL_OW 272
38320: PUSH
38321: LD_VAR 0 8
38325: PPUSH
38326: LD_INT 5
38328: PPUSH
38329: LD_INT 4
38331: PPUSH
38332: CALL_OW 273
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: ST_TO_ADDR
// for i = tmp downto 1 do
38349: LD_ADDR_VAR 0 4
38353: PUSH
38354: DOUBLE
38355: LD_VAR 0 6
38359: INC
38360: ST_TO_ADDR
38361: LD_INT 1
38363: PUSH
38364: FOR_DOWNTO
38365: IFFALSE 38466
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38367: LD_VAR 0 6
38371: PUSH
38372: LD_VAR 0 4
38376: ARRAY
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: PPUSH
38382: LD_VAR 0 6
38386: PUSH
38387: LD_VAR 0 4
38391: ARRAY
38392: PUSH
38393: LD_INT 2
38395: ARRAY
38396: PPUSH
38397: CALL_OW 488
38401: NOT
38402: PUSH
38403: LD_VAR 0 6
38407: PUSH
38408: LD_VAR 0 4
38412: ARRAY
38413: PUSH
38414: LD_INT 1
38416: ARRAY
38417: PPUSH
38418: LD_VAR 0 6
38422: PUSH
38423: LD_VAR 0 4
38427: ARRAY
38428: PUSH
38429: LD_INT 2
38431: ARRAY
38432: PPUSH
38433: CALL_OW 428
38437: PUSH
38438: LD_INT 0
38440: NONEQUAL
38441: OR
38442: IFFALSE 38464
// tmp := Delete ( tmp , i ) ;
38444: LD_ADDR_VAR 0 6
38448: PUSH
38449: LD_VAR 0 6
38453: PPUSH
38454: LD_VAR 0 4
38458: PPUSH
38459: CALL_OW 3
38463: ST_TO_ADDR
38464: GO 38364
38466: POP
38467: POP
// j := GetClosestHex ( unit , tmp ) ;
38468: LD_ADDR_VAR 0 5
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: LD_VAR 0 6
38482: PPUSH
38483: CALL 37759 0 2
38487: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38488: LD_VAR 0 1
38492: PPUSH
38493: LD_VAR 0 5
38497: PUSH
38498: LD_INT 1
38500: ARRAY
38501: PPUSH
38502: LD_VAR 0 5
38506: PUSH
38507: LD_INT 2
38509: ARRAY
38510: PPUSH
38511: CALL_OW 111
// end ;
38515: LD_VAR 0 3
38519: RET
// export function PrepareApemanSoldier ( ) ; begin
38520: LD_INT 0
38522: PPUSH
// uc_nation := 0 ;
38523: LD_ADDR_OWVAR 21
38527: PUSH
38528: LD_INT 0
38530: ST_TO_ADDR
// hc_sex := sex_male ;
38531: LD_ADDR_OWVAR 27
38535: PUSH
38536: LD_INT 1
38538: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38539: LD_ADDR_OWVAR 28
38543: PUSH
38544: LD_INT 15
38546: ST_TO_ADDR
// hc_gallery :=  ;
38547: LD_ADDR_OWVAR 33
38551: PUSH
38552: LD_STRING 
38554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38555: LD_ADDR_OWVAR 31
38559: PUSH
38560: LD_INT 0
38562: PPUSH
38563: LD_INT 3
38565: PPUSH
38566: CALL_OW 12
38570: PUSH
38571: LD_INT 0
38573: PPUSH
38574: LD_INT 3
38576: PPUSH
38577: CALL_OW 12
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// end ;
38594: LD_VAR 0 1
38598: RET
// export function PrepareApemanEngineer ( ) ; begin
38599: LD_INT 0
38601: PPUSH
// uc_nation := 0 ;
38602: LD_ADDR_OWVAR 21
38606: PUSH
38607: LD_INT 0
38609: ST_TO_ADDR
// hc_sex := sex_male ;
38610: LD_ADDR_OWVAR 27
38614: PUSH
38615: LD_INT 1
38617: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38618: LD_ADDR_OWVAR 28
38622: PUSH
38623: LD_INT 16
38625: ST_TO_ADDR
// hc_gallery :=  ;
38626: LD_ADDR_OWVAR 33
38630: PUSH
38631: LD_STRING 
38633: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38634: LD_ADDR_OWVAR 31
38638: PUSH
38639: LD_INT 0
38641: PPUSH
38642: LD_INT 3
38644: PPUSH
38645: CALL_OW 12
38649: PUSH
38650: LD_INT 0
38652: PPUSH
38653: LD_INT 3
38655: PPUSH
38656: CALL_OW 12
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: ST_TO_ADDR
// end ;
38673: LD_VAR 0 1
38677: RET
// export function PrepareApeman ( agressivity ) ; begin
38678: LD_INT 0
38680: PPUSH
// uc_side := 0 ;
38681: LD_ADDR_OWVAR 20
38685: PUSH
38686: LD_INT 0
38688: ST_TO_ADDR
// uc_nation := 0 ;
38689: LD_ADDR_OWVAR 21
38693: PUSH
38694: LD_INT 0
38696: ST_TO_ADDR
// hc_sex := sex_male ;
38697: LD_ADDR_OWVAR 27
38701: PUSH
38702: LD_INT 1
38704: ST_TO_ADDR
// hc_class := class_apeman ;
38705: LD_ADDR_OWVAR 28
38709: PUSH
38710: LD_INT 12
38712: ST_TO_ADDR
// hc_gallery :=  ;
38713: LD_ADDR_OWVAR 33
38717: PUSH
38718: LD_STRING 
38720: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38721: LD_ADDR_OWVAR 35
38725: PUSH
38726: LD_VAR 0 1
38730: NEG
38731: PPUSH
38732: LD_VAR 0 1
38736: PPUSH
38737: CALL_OW 12
38741: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38742: LD_ADDR_OWVAR 31
38746: PUSH
38747: LD_INT 0
38749: PPUSH
38750: LD_INT 3
38752: PPUSH
38753: CALL_OW 12
38757: PUSH
38758: LD_INT 0
38760: PPUSH
38761: LD_INT 3
38763: PPUSH
38764: CALL_OW 12
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// end ;
38781: LD_VAR 0 2
38785: RET
// export function PrepareTiger ( agressivity ) ; begin
38786: LD_INT 0
38788: PPUSH
// uc_side := 0 ;
38789: LD_ADDR_OWVAR 20
38793: PUSH
38794: LD_INT 0
38796: ST_TO_ADDR
// uc_nation := 0 ;
38797: LD_ADDR_OWVAR 21
38801: PUSH
38802: LD_INT 0
38804: ST_TO_ADDR
// hc_class := class_tiger ;
38805: LD_ADDR_OWVAR 28
38809: PUSH
38810: LD_INT 14
38812: ST_TO_ADDR
// hc_gallery :=  ;
38813: LD_ADDR_OWVAR 33
38817: PUSH
38818: LD_STRING 
38820: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38821: LD_ADDR_OWVAR 35
38825: PUSH
38826: LD_VAR 0 1
38830: NEG
38831: PPUSH
38832: LD_VAR 0 1
38836: PPUSH
38837: CALL_OW 12
38841: ST_TO_ADDR
// end ;
38842: LD_VAR 0 2
38846: RET
// export function PrepareEnchidna ( ) ; begin
38847: LD_INT 0
38849: PPUSH
// uc_side := 0 ;
38850: LD_ADDR_OWVAR 20
38854: PUSH
38855: LD_INT 0
38857: ST_TO_ADDR
// uc_nation := 0 ;
38858: LD_ADDR_OWVAR 21
38862: PUSH
38863: LD_INT 0
38865: ST_TO_ADDR
// hc_class := class_baggie ;
38866: LD_ADDR_OWVAR 28
38870: PUSH
38871: LD_INT 13
38873: ST_TO_ADDR
// hc_gallery :=  ;
38874: LD_ADDR_OWVAR 33
38878: PUSH
38879: LD_STRING 
38881: ST_TO_ADDR
// end ;
38882: LD_VAR 0 1
38886: RET
// export function PrepareFrog ( ) ; begin
38887: LD_INT 0
38889: PPUSH
// uc_side := 0 ;
38890: LD_ADDR_OWVAR 20
38894: PUSH
38895: LD_INT 0
38897: ST_TO_ADDR
// uc_nation := 0 ;
38898: LD_ADDR_OWVAR 21
38902: PUSH
38903: LD_INT 0
38905: ST_TO_ADDR
// hc_class := class_frog ;
38906: LD_ADDR_OWVAR 28
38910: PUSH
38911: LD_INT 19
38913: ST_TO_ADDR
// hc_gallery :=  ;
38914: LD_ADDR_OWVAR 33
38918: PUSH
38919: LD_STRING 
38921: ST_TO_ADDR
// end ;
38922: LD_VAR 0 1
38926: RET
// export function PrepareFish ( ) ; begin
38927: LD_INT 0
38929: PPUSH
// uc_side := 0 ;
38930: LD_ADDR_OWVAR 20
38934: PUSH
38935: LD_INT 0
38937: ST_TO_ADDR
// uc_nation := 0 ;
38938: LD_ADDR_OWVAR 21
38942: PUSH
38943: LD_INT 0
38945: ST_TO_ADDR
// hc_class := class_fish ;
38946: LD_ADDR_OWVAR 28
38950: PUSH
38951: LD_INT 20
38953: ST_TO_ADDR
// hc_gallery :=  ;
38954: LD_ADDR_OWVAR 33
38958: PUSH
38959: LD_STRING 
38961: ST_TO_ADDR
// end ;
38962: LD_VAR 0 1
38966: RET
// export function PrepareBird ( ) ; begin
38967: LD_INT 0
38969: PPUSH
// uc_side := 0 ;
38970: LD_ADDR_OWVAR 20
38974: PUSH
38975: LD_INT 0
38977: ST_TO_ADDR
// uc_nation := 0 ;
38978: LD_ADDR_OWVAR 21
38982: PUSH
38983: LD_INT 0
38985: ST_TO_ADDR
// hc_class := class_phororhacos ;
38986: LD_ADDR_OWVAR 28
38990: PUSH
38991: LD_INT 18
38993: ST_TO_ADDR
// hc_gallery :=  ;
38994: LD_ADDR_OWVAR 33
38998: PUSH
38999: LD_STRING 
39001: ST_TO_ADDR
// end ;
39002: LD_VAR 0 1
39006: RET
// export function PrepareHorse ( ) ; begin
39007: LD_INT 0
39009: PPUSH
// uc_side := 0 ;
39010: LD_ADDR_OWVAR 20
39014: PUSH
39015: LD_INT 0
39017: ST_TO_ADDR
// uc_nation := 0 ;
39018: LD_ADDR_OWVAR 21
39022: PUSH
39023: LD_INT 0
39025: ST_TO_ADDR
// hc_class := class_horse ;
39026: LD_ADDR_OWVAR 28
39030: PUSH
39031: LD_INT 21
39033: ST_TO_ADDR
// hc_gallery :=  ;
39034: LD_ADDR_OWVAR 33
39038: PUSH
39039: LD_STRING 
39041: ST_TO_ADDR
// end ;
39042: LD_VAR 0 1
39046: RET
// export function PrepareMastodont ( ) ; begin
39047: LD_INT 0
39049: PPUSH
// uc_side := 0 ;
39050: LD_ADDR_OWVAR 20
39054: PUSH
39055: LD_INT 0
39057: ST_TO_ADDR
// uc_nation := 0 ;
39058: LD_ADDR_OWVAR 21
39062: PUSH
39063: LD_INT 0
39065: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39066: LD_ADDR_OWVAR 37
39070: PUSH
39071: LD_INT 31
39073: ST_TO_ADDR
// vc_control := control_rider ;
39074: LD_ADDR_OWVAR 38
39078: PUSH
39079: LD_INT 4
39081: ST_TO_ADDR
// end ;
39082: LD_VAR 0 1
39086: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39087: LD_INT 0
39089: PPUSH
39090: PPUSH
39091: PPUSH
// uc_side = 0 ;
39092: LD_ADDR_OWVAR 20
39096: PUSH
39097: LD_INT 0
39099: ST_TO_ADDR
// uc_nation = 0 ;
39100: LD_ADDR_OWVAR 21
39104: PUSH
39105: LD_INT 0
39107: ST_TO_ADDR
// InitHc_All ( ) ;
39108: CALL_OW 584
// InitVc ;
39112: CALL_OW 20
// if mastodonts then
39116: LD_VAR 0 6
39120: IFFALSE 39187
// for i = 1 to mastodonts do
39122: LD_ADDR_VAR 0 11
39126: PUSH
39127: DOUBLE
39128: LD_INT 1
39130: DEC
39131: ST_TO_ADDR
39132: LD_VAR 0 6
39136: PUSH
39137: FOR_TO
39138: IFFALSE 39185
// begin vc_chassis := 31 ;
39140: LD_ADDR_OWVAR 37
39144: PUSH
39145: LD_INT 31
39147: ST_TO_ADDR
// vc_control := control_rider ;
39148: LD_ADDR_OWVAR 38
39152: PUSH
39153: LD_INT 4
39155: ST_TO_ADDR
// animal := CreateVehicle ;
39156: LD_ADDR_VAR 0 12
39160: PUSH
39161: CALL_OW 45
39165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39166: LD_VAR 0 12
39170: PPUSH
39171: LD_VAR 0 8
39175: PPUSH
39176: LD_INT 0
39178: PPUSH
39179: CALL 41315 0 3
// end ;
39183: GO 39137
39185: POP
39186: POP
// if horses then
39187: LD_VAR 0 5
39191: IFFALSE 39258
// for i = 1 to horses do
39193: LD_ADDR_VAR 0 11
39197: PUSH
39198: DOUBLE
39199: LD_INT 1
39201: DEC
39202: ST_TO_ADDR
39203: LD_VAR 0 5
39207: PUSH
39208: FOR_TO
39209: IFFALSE 39256
// begin hc_class := 21 ;
39211: LD_ADDR_OWVAR 28
39215: PUSH
39216: LD_INT 21
39218: ST_TO_ADDR
// hc_gallery :=  ;
39219: LD_ADDR_OWVAR 33
39223: PUSH
39224: LD_STRING 
39226: ST_TO_ADDR
// animal := CreateHuman ;
39227: LD_ADDR_VAR 0 12
39231: PUSH
39232: CALL_OW 44
39236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39237: LD_VAR 0 12
39241: PPUSH
39242: LD_VAR 0 8
39246: PPUSH
39247: LD_INT 0
39249: PPUSH
39250: CALL 41315 0 3
// end ;
39254: GO 39208
39256: POP
39257: POP
// if birds then
39258: LD_VAR 0 1
39262: IFFALSE 39329
// for i = 1 to birds do
39264: LD_ADDR_VAR 0 11
39268: PUSH
39269: DOUBLE
39270: LD_INT 1
39272: DEC
39273: ST_TO_ADDR
39274: LD_VAR 0 1
39278: PUSH
39279: FOR_TO
39280: IFFALSE 39327
// begin hc_class := 18 ;
39282: LD_ADDR_OWVAR 28
39286: PUSH
39287: LD_INT 18
39289: ST_TO_ADDR
// hc_gallery =  ;
39290: LD_ADDR_OWVAR 33
39294: PUSH
39295: LD_STRING 
39297: ST_TO_ADDR
// animal := CreateHuman ;
39298: LD_ADDR_VAR 0 12
39302: PUSH
39303: CALL_OW 44
39307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39308: LD_VAR 0 12
39312: PPUSH
39313: LD_VAR 0 8
39317: PPUSH
39318: LD_INT 0
39320: PPUSH
39321: CALL 41315 0 3
// end ;
39325: GO 39279
39327: POP
39328: POP
// if tigers then
39329: LD_VAR 0 2
39333: IFFALSE 39417
// for i = 1 to tigers do
39335: LD_ADDR_VAR 0 11
39339: PUSH
39340: DOUBLE
39341: LD_INT 1
39343: DEC
39344: ST_TO_ADDR
39345: LD_VAR 0 2
39349: PUSH
39350: FOR_TO
39351: IFFALSE 39415
// begin hc_class = class_tiger ;
39353: LD_ADDR_OWVAR 28
39357: PUSH
39358: LD_INT 14
39360: ST_TO_ADDR
// hc_gallery =  ;
39361: LD_ADDR_OWVAR 33
39365: PUSH
39366: LD_STRING 
39368: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39369: LD_ADDR_OWVAR 35
39373: PUSH
39374: LD_INT 7
39376: NEG
39377: PPUSH
39378: LD_INT 7
39380: PPUSH
39381: CALL_OW 12
39385: ST_TO_ADDR
// animal := CreateHuman ;
39386: LD_ADDR_VAR 0 12
39390: PUSH
39391: CALL_OW 44
39395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39396: LD_VAR 0 12
39400: PPUSH
39401: LD_VAR 0 8
39405: PPUSH
39406: LD_INT 0
39408: PPUSH
39409: CALL 41315 0 3
// end ;
39413: GO 39350
39415: POP
39416: POP
// if apemans then
39417: LD_VAR 0 3
39421: IFFALSE 39544
// for i = 1 to apemans do
39423: LD_ADDR_VAR 0 11
39427: PUSH
39428: DOUBLE
39429: LD_INT 1
39431: DEC
39432: ST_TO_ADDR
39433: LD_VAR 0 3
39437: PUSH
39438: FOR_TO
39439: IFFALSE 39542
// begin hc_class = class_apeman ;
39441: LD_ADDR_OWVAR 28
39445: PUSH
39446: LD_INT 12
39448: ST_TO_ADDR
// hc_gallery =  ;
39449: LD_ADDR_OWVAR 33
39453: PUSH
39454: LD_STRING 
39456: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39457: LD_ADDR_OWVAR 35
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PPUSH
39466: LD_INT 2
39468: PPUSH
39469: CALL_OW 12
39473: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39474: LD_ADDR_OWVAR 31
39478: PUSH
39479: LD_INT 1
39481: PPUSH
39482: LD_INT 3
39484: PPUSH
39485: CALL_OW 12
39489: PUSH
39490: LD_INT 1
39492: PPUSH
39493: LD_INT 3
39495: PPUSH
39496: CALL_OW 12
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: ST_TO_ADDR
// animal := CreateHuman ;
39513: LD_ADDR_VAR 0 12
39517: PUSH
39518: CALL_OW 44
39522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39523: LD_VAR 0 12
39527: PPUSH
39528: LD_VAR 0 8
39532: PPUSH
39533: LD_INT 0
39535: PPUSH
39536: CALL 41315 0 3
// end ;
39540: GO 39438
39542: POP
39543: POP
// if enchidnas then
39544: LD_VAR 0 4
39548: IFFALSE 39615
// for i = 1 to enchidnas do
39550: LD_ADDR_VAR 0 11
39554: PUSH
39555: DOUBLE
39556: LD_INT 1
39558: DEC
39559: ST_TO_ADDR
39560: LD_VAR 0 4
39564: PUSH
39565: FOR_TO
39566: IFFALSE 39613
// begin hc_class = 13 ;
39568: LD_ADDR_OWVAR 28
39572: PUSH
39573: LD_INT 13
39575: ST_TO_ADDR
// hc_gallery =  ;
39576: LD_ADDR_OWVAR 33
39580: PUSH
39581: LD_STRING 
39583: ST_TO_ADDR
// animal := CreateHuman ;
39584: LD_ADDR_VAR 0 12
39588: PUSH
39589: CALL_OW 44
39593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39594: LD_VAR 0 12
39598: PPUSH
39599: LD_VAR 0 8
39603: PPUSH
39604: LD_INT 0
39606: PPUSH
39607: CALL 41315 0 3
// end ;
39611: GO 39565
39613: POP
39614: POP
// if fishes then
39615: LD_VAR 0 7
39619: IFFALSE 39686
// for i = 1 to fishes do
39621: LD_ADDR_VAR 0 11
39625: PUSH
39626: DOUBLE
39627: LD_INT 1
39629: DEC
39630: ST_TO_ADDR
39631: LD_VAR 0 7
39635: PUSH
39636: FOR_TO
39637: IFFALSE 39684
// begin hc_class = 20 ;
39639: LD_ADDR_OWVAR 28
39643: PUSH
39644: LD_INT 20
39646: ST_TO_ADDR
// hc_gallery =  ;
39647: LD_ADDR_OWVAR 33
39651: PUSH
39652: LD_STRING 
39654: ST_TO_ADDR
// animal := CreateHuman ;
39655: LD_ADDR_VAR 0 12
39659: PUSH
39660: CALL_OW 44
39664: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39665: LD_VAR 0 12
39669: PPUSH
39670: LD_VAR 0 9
39674: PPUSH
39675: LD_INT 0
39677: PPUSH
39678: CALL 41315 0 3
// end ;
39682: GO 39636
39684: POP
39685: POP
// end ;
39686: LD_VAR 0 10
39690: RET
// export function WantHeal ( sci , unit ) ; begin
39691: LD_INT 0
39693: PPUSH
// if GetTaskList ( sci ) > 0 then
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 437
39703: PUSH
39704: LD_INT 0
39706: GREATER
39707: IFFALSE 39777
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 437
39718: PUSH
39719: LD_INT 1
39721: ARRAY
39722: PUSH
39723: LD_INT 1
39725: ARRAY
39726: PUSH
39727: LD_STRING l
39729: EQUAL
39730: PUSH
39731: LD_VAR 0 1
39735: PPUSH
39736: CALL_OW 437
39740: PUSH
39741: LD_INT 1
39743: ARRAY
39744: PUSH
39745: LD_INT 4
39747: ARRAY
39748: PUSH
39749: LD_VAR 0 2
39753: EQUAL
39754: AND
39755: IFFALSE 39767
// result := true else
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 1
39764: ST_TO_ADDR
39765: GO 39775
// result := false ;
39767: LD_ADDR_VAR 0 3
39771: PUSH
39772: LD_INT 0
39774: ST_TO_ADDR
// end else
39775: GO 39785
// result := false ;
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_INT 0
39784: ST_TO_ADDR
// end ;
39785: LD_VAR 0 3
39789: RET
// export function HealTarget ( sci ) ; begin
39790: LD_INT 0
39792: PPUSH
// if not sci then
39793: LD_VAR 0 1
39797: NOT
39798: IFFALSE 39802
// exit ;
39800: GO 39867
// result := 0 ;
39802: LD_ADDR_VAR 0 2
39806: PUSH
39807: LD_INT 0
39809: ST_TO_ADDR
// if GetTaskList ( sci ) then
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 437
39819: IFFALSE 39867
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39821: LD_VAR 0 1
39825: PPUSH
39826: CALL_OW 437
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: PUSH
39835: LD_INT 1
39837: ARRAY
39838: PUSH
39839: LD_STRING l
39841: EQUAL
39842: IFFALSE 39867
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39844: LD_ADDR_VAR 0 2
39848: PUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 437
39858: PUSH
39859: LD_INT 1
39861: ARRAY
39862: PUSH
39863: LD_INT 4
39865: ARRAY
39866: ST_TO_ADDR
// end ;
39867: LD_VAR 0 2
39871: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39872: LD_INT 0
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
// if not base_units then
39878: LD_VAR 0 1
39882: NOT
39883: IFFALSE 39887
// exit ;
39885: GO 39974
// result := false ;
39887: LD_ADDR_VAR 0 2
39891: PUSH
39892: LD_INT 0
39894: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39895: LD_ADDR_VAR 0 5
39899: PUSH
39900: LD_VAR 0 1
39904: PPUSH
39905: LD_INT 21
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PPUSH
39915: CALL_OW 72
39919: ST_TO_ADDR
// if not tmp then
39920: LD_VAR 0 5
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 39974
// for i in tmp do
39929: LD_ADDR_VAR 0 3
39933: PUSH
39934: LD_VAR 0 5
39938: PUSH
39939: FOR_IN
39940: IFFALSE 39972
// begin result := EnemyInRange ( i , 22 ) ;
39942: LD_ADDR_VAR 0 2
39946: PUSH
39947: LD_VAR 0 3
39951: PPUSH
39952: LD_INT 22
39954: PPUSH
39955: CALL 37561 0 2
39959: ST_TO_ADDR
// if result then
39960: LD_VAR 0 2
39964: IFFALSE 39970
// exit ;
39966: POP
39967: POP
39968: GO 39974
// end ;
39970: GO 39939
39972: POP
39973: POP
// end ;
39974: LD_VAR 0 2
39978: RET
// export function FilterByTag ( units , tag ) ; begin
39979: LD_INT 0
39981: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_VAR 0 1
39991: PPUSH
39992: LD_INT 120
39994: PUSH
39995: LD_VAR 0 2
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PPUSH
40004: CALL_OW 72
40008: ST_TO_ADDR
// end ;
40009: LD_VAR 0 3
40013: RET
// export function IsDriver ( un ) ; begin
40014: LD_INT 0
40016: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40017: LD_ADDR_VAR 0 2
40021: PUSH
40022: LD_VAR 0 1
40026: PUSH
40027: LD_INT 55
40029: PUSH
40030: EMPTY
40031: LIST
40032: PPUSH
40033: CALL_OW 69
40037: IN
40038: ST_TO_ADDR
// end ;
40039: LD_VAR 0 2
40043: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40044: LD_INT 0
40046: PPUSH
40047: PPUSH
// list := [ ] ;
40048: LD_ADDR_VAR 0 5
40052: PUSH
40053: EMPTY
40054: ST_TO_ADDR
// case d of 0 :
40055: LD_VAR 0 3
40059: PUSH
40060: LD_INT 0
40062: DOUBLE
40063: EQUAL
40064: IFTRUE 40068
40066: GO 40201
40068: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40069: LD_ADDR_VAR 0 5
40073: PUSH
40074: LD_VAR 0 1
40078: PUSH
40079: LD_INT 4
40081: MINUS
40082: PUSH
40083: LD_VAR 0 2
40087: PUSH
40088: LD_INT 4
40090: MINUS
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: PUSH
40100: LD_VAR 0 1
40104: PUSH
40105: LD_INT 3
40107: MINUS
40108: PUSH
40109: LD_VAR 0 2
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: LD_VAR 0 1
40126: PUSH
40127: LD_INT 4
40129: PLUS
40130: PUSH
40131: LD_VAR 0 2
40135: PUSH
40136: LD_INT 4
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: PUSH
40144: LD_VAR 0 1
40148: PUSH
40149: LD_INT 3
40151: PLUS
40152: PUSH
40153: LD_VAR 0 2
40157: PUSH
40158: LD_INT 3
40160: PLUS
40161: PUSH
40162: LD_INT 5
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: PUSH
40170: LD_VAR 0 1
40174: PUSH
40175: LD_VAR 0 2
40179: PUSH
40180: LD_INT 4
40182: PLUS
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
// end ; 1 :
40199: GO 40899
40201: LD_INT 1
40203: DOUBLE
40204: EQUAL
40205: IFTRUE 40209
40207: GO 40342
40209: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40210: LD_ADDR_VAR 0 5
40214: PUSH
40215: LD_VAR 0 1
40219: PUSH
40220: LD_VAR 0 2
40224: PUSH
40225: LD_INT 4
40227: MINUS
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: PUSH
40237: LD_VAR 0 1
40241: PUSH
40242: LD_INT 3
40244: MINUS
40245: PUSH
40246: LD_VAR 0 2
40250: PUSH
40251: LD_INT 3
40253: MINUS
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: LD_VAR 0 1
40267: PUSH
40268: LD_INT 4
40270: MINUS
40271: PUSH
40272: LD_VAR 0 2
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: PUSH
40285: LD_VAR 0 1
40289: PUSH
40290: LD_VAR 0 2
40294: PUSH
40295: LD_INT 3
40297: PLUS
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: PUSH
40307: LD_VAR 0 1
40311: PUSH
40312: LD_INT 4
40314: PLUS
40315: PUSH
40316: LD_VAR 0 2
40320: PUSH
40321: LD_INT 4
40323: PLUS
40324: PUSH
40325: LD_INT 5
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// end ; 2 :
40340: GO 40899
40342: LD_INT 2
40344: DOUBLE
40345: EQUAL
40346: IFTRUE 40350
40348: GO 40479
40350: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40351: LD_ADDR_VAR 0 5
40355: PUSH
40356: LD_VAR 0 1
40360: PUSH
40361: LD_VAR 0 2
40365: PUSH
40366: LD_INT 3
40368: MINUS
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: PUSH
40378: LD_VAR 0 1
40382: PUSH
40383: LD_INT 4
40385: PLUS
40386: PUSH
40387: LD_VAR 0 2
40391: PUSH
40392: LD_INT 4
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: PUSH
40400: LD_VAR 0 1
40404: PUSH
40405: LD_VAR 0 2
40409: PUSH
40410: LD_INT 4
40412: PLUS
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: PUSH
40422: LD_VAR 0 1
40426: PUSH
40427: LD_INT 3
40429: MINUS
40430: PUSH
40431: LD_VAR 0 2
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: PUSH
40444: LD_VAR 0 1
40448: PUSH
40449: LD_INT 4
40451: MINUS
40452: PUSH
40453: LD_VAR 0 2
40457: PUSH
40458: LD_INT 4
40460: MINUS
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// end ; 3 :
40477: GO 40899
40479: LD_INT 3
40481: DOUBLE
40482: EQUAL
40483: IFTRUE 40487
40485: GO 40620
40487: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40488: LD_ADDR_VAR 0 5
40492: PUSH
40493: LD_VAR 0 1
40497: PUSH
40498: LD_INT 3
40500: PLUS
40501: PUSH
40502: LD_VAR 0 2
40506: PUSH
40507: LD_INT 4
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: LIST
40514: PUSH
40515: LD_VAR 0 1
40519: PUSH
40520: LD_INT 4
40522: PLUS
40523: PUSH
40524: LD_VAR 0 2
40528: PUSH
40529: LD_INT 4
40531: PLUS
40532: PUSH
40533: LD_INT 5
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: PUSH
40541: LD_VAR 0 1
40545: PUSH
40546: LD_INT 4
40548: MINUS
40549: PUSH
40550: LD_VAR 0 2
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: PUSH
40563: LD_VAR 0 1
40567: PUSH
40568: LD_VAR 0 2
40572: PUSH
40573: LD_INT 4
40575: MINUS
40576: PUSH
40577: LD_INT 3
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: PUSH
40585: LD_VAR 0 1
40589: PUSH
40590: LD_INT 3
40592: MINUS
40593: PUSH
40594: LD_VAR 0 2
40598: PUSH
40599: LD_INT 3
40601: MINUS
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
// end ; 4 :
40618: GO 40899
40620: LD_INT 4
40622: DOUBLE
40623: EQUAL
40624: IFTRUE 40628
40626: GO 40761
40628: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40629: LD_ADDR_VAR 0 5
40633: PUSH
40634: LD_VAR 0 1
40638: PUSH
40639: LD_VAR 0 2
40643: PUSH
40644: LD_INT 4
40646: PLUS
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: LIST
40655: PUSH
40656: LD_VAR 0 1
40660: PUSH
40661: LD_INT 3
40663: PLUS
40664: PUSH
40665: LD_VAR 0 2
40669: PUSH
40670: LD_INT 3
40672: PLUS
40673: PUSH
40674: LD_INT 5
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: PUSH
40682: LD_VAR 0 1
40686: PUSH
40687: LD_INT 4
40689: PLUS
40690: PUSH
40691: LD_VAR 0 2
40695: PUSH
40696: LD_INT 4
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: PUSH
40704: LD_VAR 0 1
40708: PUSH
40709: LD_VAR 0 2
40713: PUSH
40714: LD_INT 3
40716: MINUS
40717: PUSH
40718: LD_INT 3
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: LIST
40725: PUSH
40726: LD_VAR 0 1
40730: PUSH
40731: LD_INT 4
40733: MINUS
40734: PUSH
40735: LD_VAR 0 2
40739: PUSH
40740: LD_INT 4
40742: MINUS
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: ST_TO_ADDR
// end ; 5 :
40759: GO 40899
40761: LD_INT 5
40763: DOUBLE
40764: EQUAL
40765: IFTRUE 40769
40767: GO 40898
40769: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40770: LD_ADDR_VAR 0 5
40774: PUSH
40775: LD_VAR 0 1
40779: PUSH
40780: LD_INT 4
40782: MINUS
40783: PUSH
40784: LD_VAR 0 2
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: PUSH
40797: LD_VAR 0 1
40801: PUSH
40802: LD_VAR 0 2
40806: PUSH
40807: LD_INT 4
40809: MINUS
40810: PUSH
40811: LD_INT 3
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: PUSH
40819: LD_VAR 0 1
40823: PUSH
40824: LD_INT 4
40826: PLUS
40827: PUSH
40828: LD_VAR 0 2
40832: PUSH
40833: LD_INT 4
40835: PLUS
40836: PUSH
40837: LD_INT 5
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: PUSH
40845: LD_VAR 0 1
40849: PUSH
40850: LD_INT 3
40852: PLUS
40853: PUSH
40854: LD_VAR 0 2
40858: PUSH
40859: LD_INT 4
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: PUSH
40867: LD_VAR 0 1
40871: PUSH
40872: LD_VAR 0 2
40876: PUSH
40877: LD_INT 3
40879: PLUS
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: ST_TO_ADDR
// end ; end ;
40896: GO 40899
40898: POP
// result := list ;
40899: LD_ADDR_VAR 0 4
40903: PUSH
40904: LD_VAR 0 5
40908: ST_TO_ADDR
// end ;
40909: LD_VAR 0 4
40913: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40914: LD_INT 0
40916: PPUSH
40917: PPUSH
40918: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40919: LD_VAR 0 1
40923: NOT
40924: PUSH
40925: LD_VAR 0 2
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 4
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: IN
40948: NOT
40949: OR
40950: IFFALSE 40954
// exit ;
40952: GO 41037
// tmp := [ ] ;
40954: LD_ADDR_VAR 0 5
40958: PUSH
40959: EMPTY
40960: ST_TO_ADDR
// for i in units do
40961: LD_ADDR_VAR 0 4
40965: PUSH
40966: LD_VAR 0 1
40970: PUSH
40971: FOR_IN
40972: IFFALSE 41006
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40974: LD_ADDR_VAR 0 5
40978: PUSH
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_VAR 0 4
40988: PPUSH
40989: LD_VAR 0 2
40993: PPUSH
40994: CALL_OW 259
40998: PPUSH
40999: CALL 42410 0 2
41003: ST_TO_ADDR
41004: GO 40971
41006: POP
41007: POP
// if not tmp then
41008: LD_VAR 0 5
41012: NOT
41013: IFFALSE 41017
// exit ;
41015: GO 41037
// result := SortListByListDesc ( units , tmp ) ;
41017: LD_ADDR_VAR 0 3
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: LD_VAR 0 5
41031: PPUSH
41032: CALL_OW 77
41036: ST_TO_ADDR
// end ;
41037: LD_VAR 0 3
41041: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41042: LD_INT 0
41044: PPUSH
41045: PPUSH
41046: PPUSH
// result := false ;
41047: LD_ADDR_VAR 0 3
41051: PUSH
41052: LD_INT 0
41054: ST_TO_ADDR
// if not building then
41055: LD_VAR 0 2
41059: NOT
41060: IFFALSE 41064
// exit ;
41062: GO 41202
// x := GetX ( building ) ;
41064: LD_ADDR_VAR 0 4
41068: PUSH
41069: LD_VAR 0 2
41073: PPUSH
41074: CALL_OW 250
41078: ST_TO_ADDR
// y := GetY ( building ) ;
41079: LD_ADDR_VAR 0 5
41083: PUSH
41084: LD_VAR 0 2
41088: PPUSH
41089: CALL_OW 251
41093: ST_TO_ADDR
// if not x or not y then
41094: LD_VAR 0 4
41098: NOT
41099: PUSH
41100: LD_VAR 0 5
41104: NOT
41105: OR
41106: IFFALSE 41110
// exit ;
41108: GO 41202
// if GetTaskList ( unit ) then
41110: LD_VAR 0 1
41114: PPUSH
41115: CALL_OW 437
41119: IFFALSE 41202
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41121: LD_STRING e
41123: PUSH
41124: LD_VAR 0 1
41128: PPUSH
41129: CALL_OW 437
41133: PUSH
41134: LD_INT 1
41136: ARRAY
41137: PUSH
41138: LD_INT 1
41140: ARRAY
41141: EQUAL
41142: PUSH
41143: LD_VAR 0 4
41147: PUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: CALL_OW 437
41157: PUSH
41158: LD_INT 1
41160: ARRAY
41161: PUSH
41162: LD_INT 2
41164: ARRAY
41165: EQUAL
41166: AND
41167: PUSH
41168: LD_VAR 0 5
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 437
41182: PUSH
41183: LD_INT 1
41185: ARRAY
41186: PUSH
41187: LD_INT 3
41189: ARRAY
41190: EQUAL
41191: AND
41192: IFFALSE 41202
// result := true end ;
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: LD_INT 1
41201: ST_TO_ADDR
// end ;
41202: LD_VAR 0 3
41206: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41207: LD_INT 0
41209: PPUSH
// result := false ;
41210: LD_ADDR_VAR 0 4
41214: PUSH
41215: LD_INT 0
41217: ST_TO_ADDR
// if GetTaskList ( unit ) then
41218: LD_VAR 0 1
41222: PPUSH
41223: CALL_OW 437
41227: IFFALSE 41310
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41229: LD_STRING M
41231: PUSH
41232: LD_VAR 0 1
41236: PPUSH
41237: CALL_OW 437
41241: PUSH
41242: LD_INT 1
41244: ARRAY
41245: PUSH
41246: LD_INT 1
41248: ARRAY
41249: EQUAL
41250: PUSH
41251: LD_VAR 0 2
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: CALL_OW 437
41265: PUSH
41266: LD_INT 1
41268: ARRAY
41269: PUSH
41270: LD_INT 2
41272: ARRAY
41273: EQUAL
41274: AND
41275: PUSH
41276: LD_VAR 0 3
41280: PUSH
41281: LD_VAR 0 1
41285: PPUSH
41286: CALL_OW 437
41290: PUSH
41291: LD_INT 1
41293: ARRAY
41294: PUSH
41295: LD_INT 3
41297: ARRAY
41298: EQUAL
41299: AND
41300: IFFALSE 41310
// result := true ;
41302: LD_ADDR_VAR 0 4
41306: PUSH
41307: LD_INT 1
41309: ST_TO_ADDR
// end ; end ;
41310: LD_VAR 0 4
41314: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41315: LD_INT 0
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
// if not unit or not area then
41321: LD_VAR 0 1
41325: NOT
41326: PUSH
41327: LD_VAR 0 2
41331: NOT
41332: OR
41333: IFFALSE 41337
// exit ;
41335: GO 41513
// tmp := AreaToList ( area , i ) ;
41337: LD_ADDR_VAR 0 6
41341: PUSH
41342: LD_VAR 0 2
41346: PPUSH
41347: LD_VAR 0 5
41351: PPUSH
41352: CALL_OW 517
41356: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41357: LD_ADDR_VAR 0 5
41361: PUSH
41362: DOUBLE
41363: LD_INT 1
41365: DEC
41366: ST_TO_ADDR
41367: LD_VAR 0 6
41371: PUSH
41372: LD_INT 1
41374: ARRAY
41375: PUSH
41376: FOR_TO
41377: IFFALSE 41511
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41379: LD_ADDR_VAR 0 7
41383: PUSH
41384: LD_VAR 0 6
41388: PUSH
41389: LD_INT 1
41391: ARRAY
41392: PUSH
41393: LD_VAR 0 5
41397: ARRAY
41398: PUSH
41399: LD_VAR 0 6
41403: PUSH
41404: LD_INT 2
41406: ARRAY
41407: PUSH
41408: LD_VAR 0 5
41412: ARRAY
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
41418: LD_INT 92
41420: PUSH
41421: LD_VAR 0 7
41425: PUSH
41426: LD_INT 1
41428: ARRAY
41429: PUSH
41430: LD_VAR 0 7
41434: PUSH
41435: LD_INT 2
41437: ARRAY
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: PPUSH
41448: CALL_OW 69
41452: PUSH
41453: LD_INT 0
41455: EQUAL
41456: IFFALSE 41509
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41458: LD_VAR 0 1
41462: PPUSH
41463: LD_VAR 0 7
41467: PUSH
41468: LD_INT 1
41470: ARRAY
41471: PPUSH
41472: LD_VAR 0 7
41476: PUSH
41477: LD_INT 2
41479: ARRAY
41480: PPUSH
41481: LD_VAR 0 3
41485: PPUSH
41486: CALL_OW 48
// result := IsPlaced ( unit ) ;
41490: LD_ADDR_VAR 0 4
41494: PUSH
41495: LD_VAR 0 1
41499: PPUSH
41500: CALL_OW 305
41504: ST_TO_ADDR
// exit ;
41505: POP
41506: POP
41507: GO 41513
// end ; end ;
41509: GO 41376
41511: POP
41512: POP
// end ;
41513: LD_VAR 0 4
41517: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41518: LD_INT 0
41520: PPUSH
41521: PPUSH
41522: PPUSH
// if not side or side > 8 then
41523: LD_VAR 0 1
41527: NOT
41528: PUSH
41529: LD_VAR 0 1
41533: PUSH
41534: LD_INT 8
41536: GREATER
41537: OR
41538: IFFALSE 41542
// exit ;
41540: GO 41729
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41542: LD_ADDR_VAR 0 4
41546: PUSH
41547: LD_INT 22
41549: PUSH
41550: LD_VAR 0 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 21
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PPUSH
41573: CALL_OW 69
41577: ST_TO_ADDR
// if not tmp then
41578: LD_VAR 0 4
41582: NOT
41583: IFFALSE 41587
// exit ;
41585: GO 41729
// enable_addtolog := true ;
41587: LD_ADDR_OWVAR 81
41591: PUSH
41592: LD_INT 1
41594: ST_TO_ADDR
// AddToLog ( [ ) ;
41595: LD_STRING [
41597: PPUSH
41598: CALL_OW 561
// for i in tmp do
41602: LD_ADDR_VAR 0 3
41606: PUSH
41607: LD_VAR 0 4
41611: PUSH
41612: FOR_IN
41613: IFFALSE 41720
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41615: LD_STRING [
41617: PUSH
41618: LD_VAR 0 3
41622: PPUSH
41623: CALL_OW 266
41627: STR
41628: PUSH
41629: LD_STRING , 
41631: STR
41632: PUSH
41633: LD_VAR 0 3
41637: PPUSH
41638: CALL_OW 250
41642: STR
41643: PUSH
41644: LD_STRING , 
41646: STR
41647: PUSH
41648: LD_VAR 0 3
41652: PPUSH
41653: CALL_OW 251
41657: STR
41658: PUSH
41659: LD_STRING , 
41661: STR
41662: PUSH
41663: LD_VAR 0 3
41667: PPUSH
41668: CALL_OW 254
41672: STR
41673: PUSH
41674: LD_STRING , 
41676: STR
41677: PUSH
41678: LD_VAR 0 3
41682: PPUSH
41683: LD_INT 1
41685: PPUSH
41686: CALL_OW 268
41690: STR
41691: PUSH
41692: LD_STRING , 
41694: STR
41695: PUSH
41696: LD_VAR 0 3
41700: PPUSH
41701: LD_INT 2
41703: PPUSH
41704: CALL_OW 268
41708: STR
41709: PUSH
41710: LD_STRING ],
41712: STR
41713: PPUSH
41714: CALL_OW 561
// end ;
41718: GO 41612
41720: POP
41721: POP
// AddToLog ( ]; ) ;
41722: LD_STRING ];
41724: PPUSH
41725: CALL_OW 561
// end ;
41729: LD_VAR 0 2
41733: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
// if not area or not rate or not max then
41741: LD_VAR 0 1
41745: NOT
41746: PUSH
41747: LD_VAR 0 2
41751: NOT
41752: OR
41753: PUSH
41754: LD_VAR 0 4
41758: NOT
41759: OR
41760: IFFALSE 41764
// exit ;
41762: GO 41953
// while 1 do
41764: LD_INT 1
41766: IFFALSE 41953
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41768: LD_ADDR_VAR 0 9
41772: PUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: LD_INT 1
41780: PPUSH
41781: CALL_OW 287
41785: PUSH
41786: LD_INT 10
41788: MUL
41789: ST_TO_ADDR
// r := rate / 10 ;
41790: LD_ADDR_VAR 0 7
41794: PUSH
41795: LD_VAR 0 2
41799: PUSH
41800: LD_INT 10
41802: DIVREAL
41803: ST_TO_ADDR
// time := 1 1$00 ;
41804: LD_ADDR_VAR 0 8
41808: PUSH
41809: LD_INT 2100
41811: ST_TO_ADDR
// if amount < min then
41812: LD_VAR 0 9
41816: PUSH
41817: LD_VAR 0 3
41821: LESS
41822: IFFALSE 41840
// r := r * 2 else
41824: LD_ADDR_VAR 0 7
41828: PUSH
41829: LD_VAR 0 7
41833: PUSH
41834: LD_INT 2
41836: MUL
41837: ST_TO_ADDR
41838: GO 41866
// if amount > max then
41840: LD_VAR 0 9
41844: PUSH
41845: LD_VAR 0 4
41849: GREATER
41850: IFFALSE 41866
// r := r / 2 ;
41852: LD_ADDR_VAR 0 7
41856: PUSH
41857: LD_VAR 0 7
41861: PUSH
41862: LD_INT 2
41864: DIVREAL
41865: ST_TO_ADDR
// time := time / r ;
41866: LD_ADDR_VAR 0 8
41870: PUSH
41871: LD_VAR 0 8
41875: PUSH
41876: LD_VAR 0 7
41880: DIVREAL
41881: ST_TO_ADDR
// if time < 0 then
41882: LD_VAR 0 8
41886: PUSH
41887: LD_INT 0
41889: LESS
41890: IFFALSE 41907
// time := time * - 1 ;
41892: LD_ADDR_VAR 0 8
41896: PUSH
41897: LD_VAR 0 8
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: MUL
41906: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41907: LD_VAR 0 8
41911: PUSH
41912: LD_INT 35
41914: PPUSH
41915: LD_INT 875
41917: PPUSH
41918: CALL_OW 12
41922: PLUS
41923: PPUSH
41924: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41928: LD_INT 1
41930: PPUSH
41931: LD_INT 5
41933: PPUSH
41934: CALL_OW 12
41938: PPUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: LD_INT 1
41946: PPUSH
41947: CALL_OW 55
// end ;
41951: GO 41764
// end ;
41953: LD_VAR 0 5
41957: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41958: LD_INT 0
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
// if not turrets or not factories then
41968: LD_VAR 0 1
41972: NOT
41973: PUSH
41974: LD_VAR 0 2
41978: NOT
41979: OR
41980: IFFALSE 41984
// exit ;
41982: GO 42291
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41984: LD_ADDR_VAR 0 10
41988: PUSH
41989: LD_INT 5
41991: PUSH
41992: LD_INT 6
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 4
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: LD_INT 5
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 24
42026: PUSH
42027: LD_INT 25
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 23
42036: PUSH
42037: LD_INT 27
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 42
42050: PUSH
42051: LD_INT 43
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 44
42060: PUSH
42061: LD_INT 46
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 45
42070: PUSH
42071: LD_INT 47
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: ST_TO_ADDR
// result := [ ] ;
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: EMPTY
42094: ST_TO_ADDR
// for i in turrets do
42095: LD_ADDR_VAR 0 4
42099: PUSH
42100: LD_VAR 0 1
42104: PUSH
42105: FOR_IN
42106: IFFALSE 42289
// begin nat := GetNation ( i ) ;
42108: LD_ADDR_VAR 0 7
42112: PUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL_OW 248
42122: ST_TO_ADDR
// weapon := 0 ;
42123: LD_ADDR_VAR 0 8
42127: PUSH
42128: LD_INT 0
42130: ST_TO_ADDR
// if not nat then
42131: LD_VAR 0 7
42135: NOT
42136: IFFALSE 42140
// continue ;
42138: GO 42105
// for j in list [ nat ] do
42140: LD_ADDR_VAR 0 5
42144: PUSH
42145: LD_VAR 0 10
42149: PUSH
42150: LD_VAR 0 7
42154: ARRAY
42155: PUSH
42156: FOR_IN
42157: IFFALSE 42198
// if GetBWeapon ( i ) = j [ 1 ] then
42159: LD_VAR 0 4
42163: PPUSH
42164: CALL_OW 269
42168: PUSH
42169: LD_VAR 0 5
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: EQUAL
42178: IFFALSE 42196
// begin weapon := j [ 2 ] ;
42180: LD_ADDR_VAR 0 8
42184: PUSH
42185: LD_VAR 0 5
42189: PUSH
42190: LD_INT 2
42192: ARRAY
42193: ST_TO_ADDR
// break ;
42194: GO 42198
// end ;
42196: GO 42156
42198: POP
42199: POP
// if not weapon then
42200: LD_VAR 0 8
42204: NOT
42205: IFFALSE 42209
// continue ;
42207: GO 42105
// for k in factories do
42209: LD_ADDR_VAR 0 6
42213: PUSH
42214: LD_VAR 0 2
42218: PUSH
42219: FOR_IN
42220: IFFALSE 42285
// begin weapons := AvailableWeaponList ( k ) ;
42222: LD_ADDR_VAR 0 9
42226: PUSH
42227: LD_VAR 0 6
42231: PPUSH
42232: CALL_OW 478
42236: ST_TO_ADDR
// if not weapons then
42237: LD_VAR 0 9
42241: NOT
42242: IFFALSE 42246
// continue ;
42244: GO 42219
// if weapon in weapons then
42246: LD_VAR 0 8
42250: PUSH
42251: LD_VAR 0 9
42255: IN
42256: IFFALSE 42283
// begin result := [ i , weapon ] ;
42258: LD_ADDR_VAR 0 3
42262: PUSH
42263: LD_VAR 0 4
42267: PUSH
42268: LD_VAR 0 8
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// exit ;
42277: POP
42278: POP
42279: POP
42280: POP
42281: GO 42291
// end ; end ;
42283: GO 42219
42285: POP
42286: POP
// end ;
42287: GO 42105
42289: POP
42290: POP
// end ;
42291: LD_VAR 0 3
42295: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42296: LD_INT 0
42298: PPUSH
// if not side or side > 8 then
42299: LD_VAR 0 3
42303: NOT
42304: PUSH
42305: LD_VAR 0 3
42309: PUSH
42310: LD_INT 8
42312: GREATER
42313: OR
42314: IFFALSE 42318
// exit ;
42316: GO 42377
// if not range then
42318: LD_VAR 0 4
42322: NOT
42323: IFFALSE 42334
// range := - 12 ;
42325: LD_ADDR_VAR 0 4
42329: PUSH
42330: LD_INT 12
42332: NEG
42333: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42334: LD_VAR 0 1
42338: PPUSH
42339: LD_VAR 0 2
42343: PPUSH
42344: LD_VAR 0 3
42348: PPUSH
42349: LD_VAR 0 4
42353: PPUSH
42354: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42358: LD_VAR 0 1
42362: PPUSH
42363: LD_VAR 0 2
42367: PPUSH
42368: LD_VAR 0 3
42372: PPUSH
42373: CALL_OW 331
// end ;
42377: LD_VAR 0 5
42381: RET
// export function Video ( mode ) ; begin
42382: LD_INT 0
42384: PPUSH
// ingame_video = mode ;
42385: LD_ADDR_OWVAR 52
42389: PUSH
42390: LD_VAR 0 1
42394: ST_TO_ADDR
// interface_hidden = mode ;
42395: LD_ADDR_OWVAR 54
42399: PUSH
42400: LD_VAR 0 1
42404: ST_TO_ADDR
// end ;
42405: LD_VAR 0 2
42409: RET
// export function Join ( array , element ) ; begin
42410: LD_INT 0
42412: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42413: LD_ADDR_VAR 0 3
42417: PUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: LD_VAR 0 1
42427: PUSH
42428: LD_INT 1
42430: PLUS
42431: PPUSH
42432: LD_VAR 0 2
42436: PPUSH
42437: CALL_OW 1
42441: ST_TO_ADDR
// end ;
42442: LD_VAR 0 3
42446: RET
// export function JoinUnion ( array , element ) ; begin
42447: LD_INT 0
42449: PPUSH
// result := array union element ;
42450: LD_ADDR_VAR 0 3
42454: PUSH
42455: LD_VAR 0 1
42459: PUSH
42460: LD_VAR 0 2
42464: UNION
42465: ST_TO_ADDR
// end ;
42466: LD_VAR 0 3
42470: RET
// export function GetBehemoths ( side ) ; begin
42471: LD_INT 0
42473: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42474: LD_ADDR_VAR 0 2
42478: PUSH
42479: LD_INT 22
42481: PUSH
42482: LD_VAR 0 1
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 31
42493: PUSH
42494: LD_INT 25
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PPUSH
42505: CALL_OW 69
42509: ST_TO_ADDR
// end ;
42510: LD_VAR 0 2
42514: RET
// export function Shuffle ( array ) ; var i , index ; begin
42515: LD_INT 0
42517: PPUSH
42518: PPUSH
42519: PPUSH
// result := [ ] ;
42520: LD_ADDR_VAR 0 2
42524: PUSH
42525: EMPTY
42526: ST_TO_ADDR
// if not array then
42527: LD_VAR 0 1
42531: NOT
42532: IFFALSE 42536
// exit ;
42534: GO 42635
// Randomize ;
42536: CALL_OW 10
// for i = array downto 1 do
42540: LD_ADDR_VAR 0 3
42544: PUSH
42545: DOUBLE
42546: LD_VAR 0 1
42550: INC
42551: ST_TO_ADDR
42552: LD_INT 1
42554: PUSH
42555: FOR_DOWNTO
42556: IFFALSE 42633
// begin index := rand ( 1 , array ) ;
42558: LD_ADDR_VAR 0 4
42562: PUSH
42563: LD_INT 1
42565: PPUSH
42566: LD_VAR 0 1
42570: PPUSH
42571: CALL_OW 12
42575: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42576: LD_ADDR_VAR 0 2
42580: PUSH
42581: LD_VAR 0 2
42585: PPUSH
42586: LD_VAR 0 2
42590: PUSH
42591: LD_INT 1
42593: PLUS
42594: PPUSH
42595: LD_VAR 0 1
42599: PUSH
42600: LD_VAR 0 4
42604: ARRAY
42605: PPUSH
42606: CALL_OW 2
42610: ST_TO_ADDR
// array := Delete ( array , index ) ;
42611: LD_ADDR_VAR 0 1
42615: PUSH
42616: LD_VAR 0 1
42620: PPUSH
42621: LD_VAR 0 4
42625: PPUSH
42626: CALL_OW 3
42630: ST_TO_ADDR
// end ;
42631: GO 42555
42633: POP
42634: POP
// end ;
42635: LD_VAR 0 2
42639: RET
// export function GetBaseMaterials ( base ) ; begin
42640: LD_INT 0
42642: PPUSH
// result := [ 0 , 0 , 0 ] ;
42643: LD_ADDR_VAR 0 2
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
// if not base then
42662: LD_VAR 0 1
42666: NOT
42667: IFFALSE 42671
// exit ;
42669: GO 42720
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42671: LD_ADDR_VAR 0 2
42675: PUSH
42676: LD_VAR 0 1
42680: PPUSH
42681: LD_INT 1
42683: PPUSH
42684: CALL_OW 275
42688: PUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: LD_INT 2
42696: PPUSH
42697: CALL_OW 275
42701: PUSH
42702: LD_VAR 0 1
42706: PPUSH
42707: LD_INT 3
42709: PPUSH
42710: CALL_OW 275
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// end ;
42720: LD_VAR 0 2
42724: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42725: LD_INT 0
42727: PPUSH
42728: PPUSH
// result := array ;
42729: LD_ADDR_VAR 0 3
42733: PUSH
42734: LD_VAR 0 1
42738: ST_TO_ADDR
// if size >= result then
42739: LD_VAR 0 2
42743: PUSH
42744: LD_VAR 0 3
42748: GREATEREQUAL
42749: IFFALSE 42753
// exit ;
42751: GO 42803
// if size then
42753: LD_VAR 0 2
42757: IFFALSE 42803
// for i := array downto size do
42759: LD_ADDR_VAR 0 4
42763: PUSH
42764: DOUBLE
42765: LD_VAR 0 1
42769: INC
42770: ST_TO_ADDR
42771: LD_VAR 0 2
42775: PUSH
42776: FOR_DOWNTO
42777: IFFALSE 42801
// result := Delete ( result , result ) ;
42779: LD_ADDR_VAR 0 3
42783: PUSH
42784: LD_VAR 0 3
42788: PPUSH
42789: LD_VAR 0 3
42793: PPUSH
42794: CALL_OW 3
42798: ST_TO_ADDR
42799: GO 42776
42801: POP
42802: POP
// end ;
42803: LD_VAR 0 3
42807: RET
// export function ComExit ( unit ) ; var tmp ; begin
42808: LD_INT 0
42810: PPUSH
42811: PPUSH
// if not IsInUnit ( unit ) then
42812: LD_VAR 0 1
42816: PPUSH
42817: CALL_OW 310
42821: NOT
42822: IFFALSE 42826
// exit ;
42824: GO 42886
// tmp := IsInUnit ( unit ) ;
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 310
42840: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42841: LD_VAR 0 3
42845: PPUSH
42846: CALL_OW 247
42850: PUSH
42851: LD_INT 2
42853: EQUAL
42854: IFFALSE 42867
// ComExitVehicle ( unit ) else
42856: LD_VAR 0 1
42860: PPUSH
42861: CALL_OW 121
42865: GO 42876
// ComExitBuilding ( unit ) ;
42867: LD_VAR 0 1
42871: PPUSH
42872: CALL_OW 122
// result := tmp ;
42876: LD_ADDR_VAR 0 2
42880: PUSH
42881: LD_VAR 0 3
42885: ST_TO_ADDR
// end ;
42886: LD_VAR 0 2
42890: RET
// export function ComExitAll ( units ) ; var i ; begin
42891: LD_INT 0
42893: PPUSH
42894: PPUSH
// if not units then
42895: LD_VAR 0 1
42899: NOT
42900: IFFALSE 42904
// exit ;
42902: GO 42930
// for i in units do
42904: LD_ADDR_VAR 0 3
42908: PUSH
42909: LD_VAR 0 1
42913: PUSH
42914: FOR_IN
42915: IFFALSE 42928
// ComExit ( i ) ;
42917: LD_VAR 0 3
42921: PPUSH
42922: CALL 42808 0 1
42926: GO 42914
42928: POP
42929: POP
// end ;
42930: LD_VAR 0 2
42934: RET
// export function ResetHc ; begin
42935: LD_INT 0
42937: PPUSH
// InitHc ;
42938: CALL_OW 19
// hc_importance := 0 ;
42942: LD_ADDR_OWVAR 32
42946: PUSH
42947: LD_INT 0
42949: ST_TO_ADDR
// end ;
42950: LD_VAR 0 1
42954: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42955: LD_INT 0
42957: PPUSH
42958: PPUSH
42959: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42960: LD_ADDR_VAR 0 6
42964: PUSH
42965: LD_VAR 0 1
42969: PUSH
42970: LD_VAR 0 3
42974: PLUS
42975: PUSH
42976: LD_INT 2
42978: DIV
42979: ST_TO_ADDR
// if _x < 0 then
42980: LD_VAR 0 6
42984: PUSH
42985: LD_INT 0
42987: LESS
42988: IFFALSE 43005
// _x := _x * - 1 ;
42990: LD_ADDR_VAR 0 6
42994: PUSH
42995: LD_VAR 0 6
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: MUL
43004: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43005: LD_ADDR_VAR 0 7
43009: PUSH
43010: LD_VAR 0 2
43014: PUSH
43015: LD_VAR 0 4
43019: PLUS
43020: PUSH
43021: LD_INT 2
43023: DIV
43024: ST_TO_ADDR
// if _y < 0 then
43025: LD_VAR 0 7
43029: PUSH
43030: LD_INT 0
43032: LESS
43033: IFFALSE 43050
// _y := _y * - 1 ;
43035: LD_ADDR_VAR 0 7
43039: PUSH
43040: LD_VAR 0 7
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: MUL
43049: ST_TO_ADDR
// result := [ _x , _y ] ;
43050: LD_ADDR_VAR 0 5
43054: PUSH
43055: LD_VAR 0 6
43059: PUSH
43060: LD_VAR 0 7
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// end ;
43069: LD_VAR 0 5
43073: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43074: LD_INT 0
43076: PPUSH
43077: PPUSH
43078: PPUSH
43079: PPUSH
// task := GetTaskList ( unit ) ;
43080: LD_ADDR_VAR 0 7
43084: PUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: CALL_OW 437
43094: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43095: LD_VAR 0 7
43099: NOT
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: LD_VAR 0 2
43110: PPUSH
43111: CALL_OW 308
43115: NOT
43116: AND
43117: IFFALSE 43121
// exit ;
43119: GO 43239
// if IsInArea ( unit , area ) then
43121: LD_VAR 0 1
43125: PPUSH
43126: LD_VAR 0 2
43130: PPUSH
43131: CALL_OW 308
43135: IFFALSE 43153
// begin ComMoveToArea ( unit , goAway ) ;
43137: LD_VAR 0 1
43141: PPUSH
43142: LD_VAR 0 3
43146: PPUSH
43147: CALL_OW 113
// exit ;
43151: GO 43239
// end ; if task [ 1 ] [ 1 ] <> M then
43153: LD_VAR 0 7
43157: PUSH
43158: LD_INT 1
43160: ARRAY
43161: PUSH
43162: LD_INT 1
43164: ARRAY
43165: PUSH
43166: LD_STRING M
43168: NONEQUAL
43169: IFFALSE 43173
// exit ;
43171: GO 43239
// x := task [ 1 ] [ 2 ] ;
43173: LD_ADDR_VAR 0 5
43177: PUSH
43178: LD_VAR 0 7
43182: PUSH
43183: LD_INT 1
43185: ARRAY
43186: PUSH
43187: LD_INT 2
43189: ARRAY
43190: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43191: LD_ADDR_VAR 0 6
43195: PUSH
43196: LD_VAR 0 7
43200: PUSH
43201: LD_INT 1
43203: ARRAY
43204: PUSH
43205: LD_INT 3
43207: ARRAY
43208: ST_TO_ADDR
// if InArea ( x , y , area ) then
43209: LD_VAR 0 5
43213: PPUSH
43214: LD_VAR 0 6
43218: PPUSH
43219: LD_VAR 0 2
43223: PPUSH
43224: CALL_OW 309
43228: IFFALSE 43239
// ComStop ( unit ) ;
43230: LD_VAR 0 1
43234: PPUSH
43235: CALL_OW 141
// end ;
43239: LD_VAR 0 4
43243: RET
// export function Abs ( value ) ; begin
43244: LD_INT 0
43246: PPUSH
// result := value ;
43247: LD_ADDR_VAR 0 2
43251: PUSH
43252: LD_VAR 0 1
43256: ST_TO_ADDR
// if value < 0 then
43257: LD_VAR 0 1
43261: PUSH
43262: LD_INT 0
43264: LESS
43265: IFFALSE 43282
// result := value * - 1 ;
43267: LD_ADDR_VAR 0 2
43271: PUSH
43272: LD_VAR 0 1
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: MUL
43281: ST_TO_ADDR
// end ;
43282: LD_VAR 0 2
43286: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43287: LD_INT 0
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
// if not unit or not building then
43297: LD_VAR 0 1
43301: NOT
43302: PUSH
43303: LD_VAR 0 2
43307: NOT
43308: OR
43309: IFFALSE 43313
// exit ;
43311: GO 43539
// x := GetX ( building ) ;
43313: LD_ADDR_VAR 0 4
43317: PUSH
43318: LD_VAR 0 2
43322: PPUSH
43323: CALL_OW 250
43327: ST_TO_ADDR
// y := GetY ( building ) ;
43328: LD_ADDR_VAR 0 6
43332: PUSH
43333: LD_VAR 0 2
43337: PPUSH
43338: CALL_OW 251
43342: ST_TO_ADDR
// d := GetDir ( building ) ;
43343: LD_ADDR_VAR 0 8
43347: PUSH
43348: LD_VAR 0 2
43352: PPUSH
43353: CALL_OW 254
43357: ST_TO_ADDR
// r := 4 ;
43358: LD_ADDR_VAR 0 9
43362: PUSH
43363: LD_INT 4
43365: ST_TO_ADDR
// for i := 1 to 5 do
43366: LD_ADDR_VAR 0 10
43370: PUSH
43371: DOUBLE
43372: LD_INT 1
43374: DEC
43375: ST_TO_ADDR
43376: LD_INT 5
43378: PUSH
43379: FOR_TO
43380: IFFALSE 43537
// begin _x := ShiftX ( x , d , r + i ) ;
43382: LD_ADDR_VAR 0 5
43386: PUSH
43387: LD_VAR 0 4
43391: PPUSH
43392: LD_VAR 0 8
43396: PPUSH
43397: LD_VAR 0 9
43401: PUSH
43402: LD_VAR 0 10
43406: PLUS
43407: PPUSH
43408: CALL_OW 272
43412: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43413: LD_ADDR_VAR 0 7
43417: PUSH
43418: LD_VAR 0 6
43422: PPUSH
43423: LD_VAR 0 8
43427: PPUSH
43428: LD_VAR 0 9
43432: PUSH
43433: LD_VAR 0 10
43437: PLUS
43438: PPUSH
43439: CALL_OW 273
43443: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43444: LD_VAR 0 5
43448: PPUSH
43449: LD_VAR 0 7
43453: PPUSH
43454: CALL_OW 488
43458: PUSH
43459: LD_VAR 0 5
43463: PPUSH
43464: LD_VAR 0 7
43468: PPUSH
43469: CALL_OW 428
43473: PPUSH
43474: CALL_OW 247
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: IN
43489: NOT
43490: AND
43491: IFFALSE 43535
// begin ComMoveXY ( unit , _x , _y ) ;
43493: LD_VAR 0 1
43497: PPUSH
43498: LD_VAR 0 5
43502: PPUSH
43503: LD_VAR 0 7
43507: PPUSH
43508: CALL_OW 111
// result := [ _x , _y ] ;
43512: LD_ADDR_VAR 0 3
43516: PUSH
43517: LD_VAR 0 5
43521: PUSH
43522: LD_VAR 0 7
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// exit ;
43531: POP
43532: POP
43533: GO 43539
// end ; end ;
43535: GO 43379
43537: POP
43538: POP
// end ;
43539: LD_VAR 0 3
43543: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43544: LD_INT 0
43546: PPUSH
43547: PPUSH
43548: PPUSH
// result := 0 ;
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: LD_INT 0
43556: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43557: LD_VAR 0 1
43561: PUSH
43562: LD_INT 0
43564: LESS
43565: PUSH
43566: LD_VAR 0 1
43570: PUSH
43571: LD_INT 8
43573: GREATER
43574: OR
43575: PUSH
43576: LD_VAR 0 2
43580: PUSH
43581: LD_INT 0
43583: LESS
43584: OR
43585: PUSH
43586: LD_VAR 0 2
43590: PUSH
43591: LD_INT 8
43593: GREATER
43594: OR
43595: IFFALSE 43599
// exit ;
43597: GO 43674
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43599: LD_ADDR_VAR 0 4
43603: PUSH
43604: LD_INT 22
43606: PUSH
43607: LD_VAR 0 2
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PPUSH
43616: CALL_OW 69
43620: PUSH
43621: FOR_IN
43622: IFFALSE 43672
// begin un := UnitShoot ( i ) ;
43624: LD_ADDR_VAR 0 5
43628: PUSH
43629: LD_VAR 0 4
43633: PPUSH
43634: CALL_OW 504
43638: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43639: LD_VAR 0 5
43643: PPUSH
43644: CALL_OW 255
43648: PUSH
43649: LD_VAR 0 1
43653: EQUAL
43654: IFFALSE 43670
// begin result := un ;
43656: LD_ADDR_VAR 0 3
43660: PUSH
43661: LD_VAR 0 5
43665: ST_TO_ADDR
// exit ;
43666: POP
43667: POP
43668: GO 43674
// end ; end ;
43670: GO 43621
43672: POP
43673: POP
// end ;
43674: LD_VAR 0 3
43678: RET
// export function GetCargoBay ( units ) ; begin
43679: LD_INT 0
43681: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43682: LD_ADDR_VAR 0 2
43686: PUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 34
43697: PUSH
43698: LD_INT 12
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 34
43707: PUSH
43708: LD_INT 51
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 34
43717: PUSH
43718: LD_INT 32
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 34
43727: PUSH
43728: LD_INT 89
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: PPUSH
43742: CALL_OW 72
43746: ST_TO_ADDR
// end ;
43747: LD_VAR 0 2
43751: RET
// export function Negate ( value ) ; begin
43752: LD_INT 0
43754: PPUSH
// result := not value ;
43755: LD_ADDR_VAR 0 2
43759: PUSH
43760: LD_VAR 0 1
43764: NOT
43765: ST_TO_ADDR
// end ;
43766: LD_VAR 0 2
43770: RET
// export function Inc ( value ) ; begin
43771: LD_INT 0
43773: PPUSH
// result := value + 1 ;
43774: LD_ADDR_VAR 0 2
43778: PUSH
43779: LD_VAR 0 1
43783: PUSH
43784: LD_INT 1
43786: PLUS
43787: ST_TO_ADDR
// end ;
43788: LD_VAR 0 2
43792: RET
// export function Dec ( value ) ; begin
43793: LD_INT 0
43795: PPUSH
// result := value - 1 ;
43796: LD_ADDR_VAR 0 2
43800: PUSH
43801: LD_VAR 0 1
43805: PUSH
43806: LD_INT 1
43808: MINUS
43809: ST_TO_ADDR
// end ;
43810: LD_VAR 0 2
43814: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43815: LD_INT 0
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43825: LD_VAR 0 1
43829: PPUSH
43830: LD_VAR 0 2
43834: PPUSH
43835: CALL_OW 488
43839: NOT
43840: PUSH
43841: LD_VAR 0 3
43845: PPUSH
43846: LD_VAR 0 4
43850: PPUSH
43851: CALL_OW 488
43855: NOT
43856: OR
43857: IFFALSE 43870
// begin result := - 1 ;
43859: LD_ADDR_VAR 0 5
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: ST_TO_ADDR
// exit ;
43868: GO 44105
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43870: LD_ADDR_VAR 0 12
43874: PUSH
43875: LD_VAR 0 1
43879: PPUSH
43880: LD_VAR 0 2
43884: PPUSH
43885: LD_VAR 0 3
43889: PPUSH
43890: LD_VAR 0 4
43894: PPUSH
43895: CALL 42955 0 4
43899: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43900: LD_ADDR_VAR 0 11
43904: PUSH
43905: LD_VAR 0 1
43909: PPUSH
43910: LD_VAR 0 2
43914: PPUSH
43915: LD_VAR 0 12
43919: PUSH
43920: LD_INT 1
43922: ARRAY
43923: PPUSH
43924: LD_VAR 0 12
43928: PUSH
43929: LD_INT 2
43931: ARRAY
43932: PPUSH
43933: CALL_OW 298
43937: ST_TO_ADDR
// distance := 9999 ;
43938: LD_ADDR_VAR 0 10
43942: PUSH
43943: LD_INT 9999
43945: ST_TO_ADDR
// for i := 0 to 5 do
43946: LD_ADDR_VAR 0 6
43950: PUSH
43951: DOUBLE
43952: LD_INT 0
43954: DEC
43955: ST_TO_ADDR
43956: LD_INT 5
43958: PUSH
43959: FOR_TO
43960: IFFALSE 44103
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43962: LD_ADDR_VAR 0 7
43966: PUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: LD_VAR 0 6
43976: PPUSH
43977: LD_VAR 0 11
43981: PPUSH
43982: CALL_OW 272
43986: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43987: LD_ADDR_VAR 0 8
43991: PUSH
43992: LD_VAR 0 2
43996: PPUSH
43997: LD_VAR 0 6
44001: PPUSH
44002: LD_VAR 0 11
44006: PPUSH
44007: CALL_OW 273
44011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44012: LD_VAR 0 7
44016: PPUSH
44017: LD_VAR 0 8
44021: PPUSH
44022: CALL_OW 488
44026: NOT
44027: IFFALSE 44031
// continue ;
44029: GO 43959
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44031: LD_ADDR_VAR 0 9
44035: PUSH
44036: LD_VAR 0 12
44040: PUSH
44041: LD_INT 1
44043: ARRAY
44044: PPUSH
44045: LD_VAR 0 12
44049: PUSH
44050: LD_INT 2
44052: ARRAY
44053: PPUSH
44054: LD_VAR 0 7
44058: PPUSH
44059: LD_VAR 0 8
44063: PPUSH
44064: CALL_OW 298
44068: ST_TO_ADDR
// if tmp < distance then
44069: LD_VAR 0 9
44073: PUSH
44074: LD_VAR 0 10
44078: LESS
44079: IFFALSE 44101
// begin result := i ;
44081: LD_ADDR_VAR 0 5
44085: PUSH
44086: LD_VAR 0 6
44090: ST_TO_ADDR
// distance := tmp ;
44091: LD_ADDR_VAR 0 10
44095: PUSH
44096: LD_VAR 0 9
44100: ST_TO_ADDR
// end ; end ;
44101: GO 43959
44103: POP
44104: POP
// end ;
44105: LD_VAR 0 5
44109: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44110: LD_INT 0
44112: PPUSH
44113: PPUSH
// if not driver or not IsInUnit ( driver ) then
44114: LD_VAR 0 1
44118: NOT
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 310
44129: NOT
44130: OR
44131: IFFALSE 44135
// exit ;
44133: GO 44225
// vehicle := IsInUnit ( driver ) ;
44135: LD_ADDR_VAR 0 3
44139: PUSH
44140: LD_VAR 0 1
44144: PPUSH
44145: CALL_OW 310
44149: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44150: LD_VAR 0 1
44154: PPUSH
44155: LD_STRING \
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: PUSH
44185: LD_STRING E
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_VAR 0 3
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PPUSH
44221: CALL_OW 446
// end ;
44225: LD_VAR 0 2
44229: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44230: LD_INT 0
44232: PPUSH
44233: PPUSH
// if not driver or not IsInUnit ( driver ) then
44234: LD_VAR 0 1
44238: NOT
44239: PUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 310
44249: NOT
44250: OR
44251: IFFALSE 44255
// exit ;
44253: GO 44345
// vehicle := IsInUnit ( driver ) ;
44255: LD_ADDR_VAR 0 3
44259: PUSH
44260: LD_VAR 0 1
44264: PPUSH
44265: CALL_OW 310
44269: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44270: LD_VAR 0 1
44274: PPUSH
44275: LD_STRING \
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: PUSH
44305: LD_STRING E
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_VAR 0 3
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PPUSH
44341: CALL_OW 447
// end ;
44345: LD_VAR 0 2
44349: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44350: LD_INT 0
44352: PPUSH
44353: PPUSH
44354: PPUSH
// tmp := [ ] ;
44355: LD_ADDR_VAR 0 5
44359: PUSH
44360: EMPTY
44361: ST_TO_ADDR
// for i in units do
44362: LD_ADDR_VAR 0 4
44366: PUSH
44367: LD_VAR 0 1
44371: PUSH
44372: FOR_IN
44373: IFFALSE 44411
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44375: LD_ADDR_VAR 0 5
44379: PUSH
44380: LD_VAR 0 5
44384: PPUSH
44385: LD_VAR 0 5
44389: PUSH
44390: LD_INT 1
44392: PLUS
44393: PPUSH
44394: LD_VAR 0 4
44398: PPUSH
44399: CALL_OW 256
44403: PPUSH
44404: CALL_OW 2
44408: ST_TO_ADDR
44409: GO 44372
44411: POP
44412: POP
// if not tmp then
44413: LD_VAR 0 5
44417: NOT
44418: IFFALSE 44422
// exit ;
44420: GO 44470
// if asc then
44422: LD_VAR 0 2
44426: IFFALSE 44450
// result := SortListByListAsc ( units , tmp ) else
44428: LD_ADDR_VAR 0 3
44432: PUSH
44433: LD_VAR 0 1
44437: PPUSH
44438: LD_VAR 0 5
44442: PPUSH
44443: CALL_OW 76
44447: ST_TO_ADDR
44448: GO 44470
// result := SortListByListDesc ( units , tmp ) ;
44450: LD_ADDR_VAR 0 3
44454: PUSH
44455: LD_VAR 0 1
44459: PPUSH
44460: LD_VAR 0 5
44464: PPUSH
44465: CALL_OW 77
44469: ST_TO_ADDR
// end ;
44470: LD_VAR 0 3
44474: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44475: LD_INT 0
44477: PPUSH
44478: PPUSH
// task := GetTaskList ( mech ) ;
44479: LD_ADDR_VAR 0 4
44483: PUSH
44484: LD_VAR 0 1
44488: PPUSH
44489: CALL_OW 437
44493: ST_TO_ADDR
// if not task then
44494: LD_VAR 0 4
44498: NOT
44499: IFFALSE 44503
// exit ;
44501: GO 44545
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44503: LD_ADDR_VAR 0 3
44507: PUSH
44508: LD_VAR 0 4
44512: PUSH
44513: LD_INT 1
44515: ARRAY
44516: PUSH
44517: LD_INT 1
44519: ARRAY
44520: PUSH
44521: LD_STRING r
44523: EQUAL
44524: PUSH
44525: LD_VAR 0 4
44529: PUSH
44530: LD_INT 1
44532: ARRAY
44533: PUSH
44534: LD_INT 4
44536: ARRAY
44537: PUSH
44538: LD_VAR 0 2
44542: EQUAL
44543: AND
44544: ST_TO_ADDR
// end ;
44545: LD_VAR 0 3
44549: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44550: LD_INT 0
44552: PPUSH
// SetDir ( unit , d ) ;
44553: LD_VAR 0 1
44557: PPUSH
44558: LD_VAR 0 4
44562: PPUSH
44563: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44567: LD_VAR 0 1
44571: PPUSH
44572: LD_VAR 0 2
44576: PPUSH
44577: LD_VAR 0 3
44581: PPUSH
44582: LD_VAR 0 5
44586: PPUSH
44587: CALL_OW 48
// end ;
44591: LD_VAR 0 6
44595: RET
// export function ToNaturalNumber ( number ) ; begin
44596: LD_INT 0
44598: PPUSH
// result := number div 1 ;
44599: LD_ADDR_VAR 0 2
44603: PUSH
44604: LD_VAR 0 1
44608: PUSH
44609: LD_INT 1
44611: DIV
44612: ST_TO_ADDR
// if number < 0 then
44613: LD_VAR 0 1
44617: PUSH
44618: LD_INT 0
44620: LESS
44621: IFFALSE 44631
// result := 0 ;
44623: LD_ADDR_VAR 0 2
44627: PUSH
44628: LD_INT 0
44630: ST_TO_ADDR
// end ;
44631: LD_VAR 0 2
44635: RET
// export function SortByClass ( units , class ) ; var un ; begin
44636: LD_INT 0
44638: PPUSH
44639: PPUSH
// if not units or not class then
44640: LD_VAR 0 1
44644: NOT
44645: PUSH
44646: LD_VAR 0 2
44650: NOT
44651: OR
44652: IFFALSE 44656
// exit ;
44654: GO 44751
// result := [ ] ;
44656: LD_ADDR_VAR 0 3
44660: PUSH
44661: EMPTY
44662: ST_TO_ADDR
// for un in units do
44663: LD_ADDR_VAR 0 4
44667: PUSH
44668: LD_VAR 0 1
44672: PUSH
44673: FOR_IN
44674: IFFALSE 44749
// if GetClass ( un ) = class then
44676: LD_VAR 0 4
44680: PPUSH
44681: CALL_OW 257
44685: PUSH
44686: LD_VAR 0 2
44690: EQUAL
44691: IFFALSE 44718
// result := Insert ( result , 1 , un ) else
44693: LD_ADDR_VAR 0 3
44697: PUSH
44698: LD_VAR 0 3
44702: PPUSH
44703: LD_INT 1
44705: PPUSH
44706: LD_VAR 0 4
44710: PPUSH
44711: CALL_OW 2
44715: ST_TO_ADDR
44716: GO 44747
// result := Replace ( result , result + 1 , un ) ;
44718: LD_ADDR_VAR 0 3
44722: PUSH
44723: LD_VAR 0 3
44727: PPUSH
44728: LD_VAR 0 3
44732: PUSH
44733: LD_INT 1
44735: PLUS
44736: PPUSH
44737: LD_VAR 0 4
44741: PPUSH
44742: CALL_OW 1
44746: ST_TO_ADDR
44747: GO 44673
44749: POP
44750: POP
// end ;
44751: LD_VAR 0 3
44755: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44756: LD_INT 0
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
// result := [ ] ;
44765: LD_ADDR_VAR 0 4
44769: PUSH
44770: EMPTY
44771: ST_TO_ADDR
// if x - r < 0 then
44772: LD_VAR 0 1
44776: PUSH
44777: LD_VAR 0 3
44781: MINUS
44782: PUSH
44783: LD_INT 0
44785: LESS
44786: IFFALSE 44798
// min_x := 0 else
44788: LD_ADDR_VAR 0 8
44792: PUSH
44793: LD_INT 0
44795: ST_TO_ADDR
44796: GO 44814
// min_x := x - r ;
44798: LD_ADDR_VAR 0 8
44802: PUSH
44803: LD_VAR 0 1
44807: PUSH
44808: LD_VAR 0 3
44812: MINUS
44813: ST_TO_ADDR
// if y - r < 0 then
44814: LD_VAR 0 2
44818: PUSH
44819: LD_VAR 0 3
44823: MINUS
44824: PUSH
44825: LD_INT 0
44827: LESS
44828: IFFALSE 44840
// min_y := 0 else
44830: LD_ADDR_VAR 0 7
44834: PUSH
44835: LD_INT 0
44837: ST_TO_ADDR
44838: GO 44856
// min_y := y - r ;
44840: LD_ADDR_VAR 0 7
44844: PUSH
44845: LD_VAR 0 2
44849: PUSH
44850: LD_VAR 0 3
44854: MINUS
44855: ST_TO_ADDR
// max_x := x + r ;
44856: LD_ADDR_VAR 0 9
44860: PUSH
44861: LD_VAR 0 1
44865: PUSH
44866: LD_VAR 0 3
44870: PLUS
44871: ST_TO_ADDR
// max_y := y + r ;
44872: LD_ADDR_VAR 0 10
44876: PUSH
44877: LD_VAR 0 2
44881: PUSH
44882: LD_VAR 0 3
44886: PLUS
44887: ST_TO_ADDR
// for _x = min_x to max_x do
44888: LD_ADDR_VAR 0 5
44892: PUSH
44893: DOUBLE
44894: LD_VAR 0 8
44898: DEC
44899: ST_TO_ADDR
44900: LD_VAR 0 9
44904: PUSH
44905: FOR_TO
44906: IFFALSE 45007
// for _y = min_y to max_y do
44908: LD_ADDR_VAR 0 6
44912: PUSH
44913: DOUBLE
44914: LD_VAR 0 7
44918: DEC
44919: ST_TO_ADDR
44920: LD_VAR 0 10
44924: PUSH
44925: FOR_TO
44926: IFFALSE 45003
// begin if not ValidHex ( _x , _y ) then
44928: LD_VAR 0 5
44932: PPUSH
44933: LD_VAR 0 6
44937: PPUSH
44938: CALL_OW 488
44942: NOT
44943: IFFALSE 44947
// continue ;
44945: GO 44925
// if GetResourceTypeXY ( _x , _y ) then
44947: LD_VAR 0 5
44951: PPUSH
44952: LD_VAR 0 6
44956: PPUSH
44957: CALL_OW 283
44961: IFFALSE 45001
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44963: LD_ADDR_VAR 0 4
44967: PUSH
44968: LD_VAR 0 4
44972: PPUSH
44973: LD_VAR 0 4
44977: PUSH
44978: LD_INT 1
44980: PLUS
44981: PPUSH
44982: LD_VAR 0 5
44986: PUSH
44987: LD_VAR 0 6
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PPUSH
44996: CALL_OW 1
45000: ST_TO_ADDR
// end ;
45001: GO 44925
45003: POP
45004: POP
45005: GO 44905
45007: POP
45008: POP
// end ;
45009: LD_VAR 0 4
45013: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45014: LD_INT 0
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
45022: PPUSH
45023: PPUSH
// if not units then
45024: LD_VAR 0 1
45028: NOT
45029: IFFALSE 45033
// exit ;
45031: GO 45557
// result := UnitFilter ( units , [ f_ok ] ) ;
45033: LD_ADDR_VAR 0 3
45037: PUSH
45038: LD_VAR 0 1
45042: PPUSH
45043: LD_INT 50
45045: PUSH
45046: EMPTY
45047: LIST
45048: PPUSH
45049: CALL_OW 72
45053: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45054: LD_ADDR_VAR 0 8
45058: PUSH
45059: LD_VAR 0 1
45063: PUSH
45064: LD_INT 1
45066: ARRAY
45067: PPUSH
45068: CALL_OW 255
45072: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45073: LD_ADDR_VAR 0 10
45077: PUSH
45078: LD_INT 29
45080: PUSH
45081: LD_INT 91
45083: PUSH
45084: LD_INT 49
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// if not result then
45092: LD_VAR 0 3
45096: NOT
45097: IFFALSE 45101
// exit ;
45099: GO 45557
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45101: LD_ADDR_VAR 0 5
45105: PUSH
45106: LD_INT 81
45108: PUSH
45109: LD_VAR 0 8
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PPUSH
45118: CALL_OW 69
45122: ST_TO_ADDR
// for i in result do
45123: LD_ADDR_VAR 0 4
45127: PUSH
45128: LD_VAR 0 3
45132: PUSH
45133: FOR_IN
45134: IFFALSE 45555
// begin tag := GetTag ( i ) + 1 ;
45136: LD_ADDR_VAR 0 9
45140: PUSH
45141: LD_VAR 0 4
45145: PPUSH
45146: CALL_OW 110
45150: PUSH
45151: LD_INT 1
45153: PLUS
45154: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
45155: LD_ADDR_VAR 0 7
45159: PUSH
45160: LD_VAR 0 4
45164: PPUSH
45165: CALL_OW 250
45169: PPUSH
45170: LD_VAR 0 4
45174: PPUSH
45175: CALL_OW 251
45179: PPUSH
45180: LD_INT 6
45182: PPUSH
45183: CALL 44756 0 3
45187: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
45188: LD_VAR 0 4
45192: PPUSH
45193: CALL_OW 247
45197: PUSH
45198: LD_INT 2
45200: EQUAL
45201: PUSH
45202: LD_VAR 0 7
45206: AND
45207: PUSH
45208: LD_VAR 0 4
45212: PPUSH
45213: CALL_OW 264
45217: PUSH
45218: LD_VAR 0 10
45222: IN
45223: NOT
45224: AND
45225: IFFALSE 45264
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45227: LD_VAR 0 4
45231: PPUSH
45232: LD_VAR 0 7
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PUSH
45241: LD_INT 1
45243: ARRAY
45244: PPUSH
45245: LD_VAR 0 7
45249: PUSH
45250: LD_INT 1
45252: ARRAY
45253: PUSH
45254: LD_INT 2
45256: ARRAY
45257: PPUSH
45258: CALL_OW 116
45262: GO 45553
// if path > tag then
45264: LD_VAR 0 2
45268: PUSH
45269: LD_VAR 0 9
45273: GREATER
45274: IFFALSE 45482
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45276: LD_ADDR_VAR 0 6
45280: PUSH
45281: LD_VAR 0 5
45285: PPUSH
45286: LD_INT 91
45288: PUSH
45289: LD_VAR 0 4
45293: PUSH
45294: LD_INT 8
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: PPUSH
45302: CALL_OW 72
45306: ST_TO_ADDR
// if nearEnemy then
45307: LD_VAR 0 6
45311: IFFALSE 45380
// begin if GetWeapon ( i ) = ru_time_lapser then
45313: LD_VAR 0 4
45317: PPUSH
45318: CALL_OW 264
45322: PUSH
45323: LD_INT 49
45325: EQUAL
45326: IFFALSE 45354
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45328: LD_VAR 0 4
45332: PPUSH
45333: LD_VAR 0 6
45337: PPUSH
45338: LD_VAR 0 4
45342: PPUSH
45343: CALL_OW 74
45347: PPUSH
45348: CALL_OW 112
45352: GO 45378
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45354: LD_VAR 0 4
45358: PPUSH
45359: LD_VAR 0 6
45363: PPUSH
45364: LD_VAR 0 4
45368: PPUSH
45369: CALL_OW 74
45373: PPUSH
45374: CALL 46482 0 2
// end else
45378: GO 45480
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45380: LD_VAR 0 4
45384: PPUSH
45385: LD_VAR 0 2
45389: PUSH
45390: LD_VAR 0 9
45394: ARRAY
45395: PUSH
45396: LD_INT 1
45398: ARRAY
45399: PPUSH
45400: LD_VAR 0 2
45404: PUSH
45405: LD_VAR 0 9
45409: ARRAY
45410: PUSH
45411: LD_INT 2
45413: ARRAY
45414: PPUSH
45415: CALL_OW 297
45419: PUSH
45420: LD_INT 6
45422: GREATER
45423: IFFALSE 45466
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45425: LD_VAR 0 4
45429: PPUSH
45430: LD_VAR 0 2
45434: PUSH
45435: LD_VAR 0 9
45439: ARRAY
45440: PUSH
45441: LD_INT 1
45443: ARRAY
45444: PPUSH
45445: LD_VAR 0 2
45449: PUSH
45450: LD_VAR 0 9
45454: ARRAY
45455: PUSH
45456: LD_INT 2
45458: ARRAY
45459: PPUSH
45460: CALL_OW 114
45464: GO 45480
// SetTag ( i , tag ) ;
45466: LD_VAR 0 4
45470: PPUSH
45471: LD_VAR 0 9
45475: PPUSH
45476: CALL_OW 109
// end else
45480: GO 45553
// if enemy then
45482: LD_VAR 0 5
45486: IFFALSE 45553
// begin if GetWeapon ( i ) = ru_time_lapser then
45488: LD_VAR 0 4
45492: PPUSH
45493: CALL_OW 264
45497: PUSH
45498: LD_INT 49
45500: EQUAL
45501: IFFALSE 45529
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45503: LD_VAR 0 4
45507: PPUSH
45508: LD_VAR 0 5
45512: PPUSH
45513: LD_VAR 0 4
45517: PPUSH
45518: CALL_OW 74
45522: PPUSH
45523: CALL_OW 112
45527: GO 45553
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45529: LD_VAR 0 4
45533: PPUSH
45534: LD_VAR 0 5
45538: PPUSH
45539: LD_VAR 0 4
45543: PPUSH
45544: CALL_OW 74
45548: PPUSH
45549: CALL 46482 0 2
// end ; end ;
45553: GO 45133
45555: POP
45556: POP
// end ;
45557: LD_VAR 0 3
45561: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45562: LD_INT 0
45564: PPUSH
45565: PPUSH
45566: PPUSH
// if not unit or IsInUnit ( unit ) then
45567: LD_VAR 0 1
45571: NOT
45572: PUSH
45573: LD_VAR 0 1
45577: PPUSH
45578: CALL_OW 310
45582: OR
45583: IFFALSE 45587
// exit ;
45585: GO 45678
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45587: LD_ADDR_VAR 0 4
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 250
45601: PPUSH
45602: LD_VAR 0 2
45606: PPUSH
45607: LD_INT 1
45609: PPUSH
45610: CALL_OW 272
45614: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45615: LD_ADDR_VAR 0 5
45619: PUSH
45620: LD_VAR 0 1
45624: PPUSH
45625: CALL_OW 251
45629: PPUSH
45630: LD_VAR 0 2
45634: PPUSH
45635: LD_INT 1
45637: PPUSH
45638: CALL_OW 273
45642: ST_TO_ADDR
// if ValidHex ( x , y ) then
45643: LD_VAR 0 4
45647: PPUSH
45648: LD_VAR 0 5
45652: PPUSH
45653: CALL_OW 488
45657: IFFALSE 45678
// ComTurnXY ( unit , x , y ) ;
45659: LD_VAR 0 1
45663: PPUSH
45664: LD_VAR 0 4
45668: PPUSH
45669: LD_VAR 0 5
45673: PPUSH
45674: CALL_OW 118
// end ;
45678: LD_VAR 0 3
45682: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45683: LD_INT 0
45685: PPUSH
45686: PPUSH
// result := false ;
45687: LD_ADDR_VAR 0 3
45691: PUSH
45692: LD_INT 0
45694: ST_TO_ADDR
// if not units then
45695: LD_VAR 0 2
45699: NOT
45700: IFFALSE 45704
// exit ;
45702: GO 45749
// for i in units do
45704: LD_ADDR_VAR 0 4
45708: PUSH
45709: LD_VAR 0 2
45713: PUSH
45714: FOR_IN
45715: IFFALSE 45747
// if See ( side , i ) then
45717: LD_VAR 0 1
45721: PPUSH
45722: LD_VAR 0 4
45726: PPUSH
45727: CALL_OW 292
45731: IFFALSE 45745
// begin result := true ;
45733: LD_ADDR_VAR 0 3
45737: PUSH
45738: LD_INT 1
45740: ST_TO_ADDR
// exit ;
45741: POP
45742: POP
45743: GO 45749
// end ;
45745: GO 45714
45747: POP
45748: POP
// end ;
45749: LD_VAR 0 3
45753: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45754: LD_INT 0
45756: PPUSH
45757: PPUSH
45758: PPUSH
45759: PPUSH
// if not unit or not points then
45760: LD_VAR 0 1
45764: NOT
45765: PUSH
45766: LD_VAR 0 2
45770: NOT
45771: OR
45772: IFFALSE 45776
// exit ;
45774: GO 45866
// dist := 99999 ;
45776: LD_ADDR_VAR 0 5
45780: PUSH
45781: LD_INT 99999
45783: ST_TO_ADDR
// for i in points do
45784: LD_ADDR_VAR 0 4
45788: PUSH
45789: LD_VAR 0 2
45793: PUSH
45794: FOR_IN
45795: IFFALSE 45864
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45797: LD_ADDR_VAR 0 6
45801: PUSH
45802: LD_VAR 0 1
45806: PPUSH
45807: LD_VAR 0 4
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: PPUSH
45816: LD_VAR 0 4
45820: PUSH
45821: LD_INT 2
45823: ARRAY
45824: PPUSH
45825: CALL_OW 297
45829: ST_TO_ADDR
// if tmpDist < dist then
45830: LD_VAR 0 6
45834: PUSH
45835: LD_VAR 0 5
45839: LESS
45840: IFFALSE 45862
// begin result := i ;
45842: LD_ADDR_VAR 0 3
45846: PUSH
45847: LD_VAR 0 4
45851: ST_TO_ADDR
// dist := tmpDist ;
45852: LD_ADDR_VAR 0 5
45856: PUSH
45857: LD_VAR 0 6
45861: ST_TO_ADDR
// end ; end ;
45862: GO 45794
45864: POP
45865: POP
// end ;
45866: LD_VAR 0 3
45870: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45871: LD_INT 0
45873: PPUSH
// uc_side := side ;
45874: LD_ADDR_OWVAR 20
45878: PUSH
45879: LD_VAR 0 1
45883: ST_TO_ADDR
// uc_nation := 3 ;
45884: LD_ADDR_OWVAR 21
45888: PUSH
45889: LD_INT 3
45891: ST_TO_ADDR
// vc_chassis := 25 ;
45892: LD_ADDR_OWVAR 37
45896: PUSH
45897: LD_INT 25
45899: ST_TO_ADDR
// vc_engine := engine_siberite ;
45900: LD_ADDR_OWVAR 39
45904: PUSH
45905: LD_INT 3
45907: ST_TO_ADDR
// vc_control := control_computer ;
45908: LD_ADDR_OWVAR 38
45912: PUSH
45913: LD_INT 3
45915: ST_TO_ADDR
// vc_weapon := 59 ;
45916: LD_ADDR_OWVAR 40
45920: PUSH
45921: LD_INT 59
45923: ST_TO_ADDR
// result := CreateVehicle ;
45924: LD_ADDR_VAR 0 5
45928: PUSH
45929: CALL_OW 45
45933: ST_TO_ADDR
// SetDir ( result , d ) ;
45934: LD_VAR 0 5
45938: PPUSH
45939: LD_VAR 0 4
45943: PPUSH
45944: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45948: LD_VAR 0 5
45952: PPUSH
45953: LD_VAR 0 2
45957: PPUSH
45958: LD_VAR 0 3
45962: PPUSH
45963: LD_INT 0
45965: PPUSH
45966: CALL_OW 48
// end ;
45970: LD_VAR 0 5
45974: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45975: LD_INT 0
45977: PPUSH
45978: PPUSH
45979: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45980: LD_ADDR_VAR 0 2
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46003: LD_VAR 0 1
46007: NOT
46008: PUSH
46009: LD_VAR 0 1
46013: PPUSH
46014: CALL_OW 264
46018: PUSH
46019: LD_INT 12
46021: PUSH
46022: LD_INT 51
46024: PUSH
46025: LD_INT 32
46027: PUSH
46028: LD_INT 89
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: IN
46037: NOT
46038: OR
46039: IFFALSE 46043
// exit ;
46041: GO 46141
// for i := 1 to 3 do
46043: LD_ADDR_VAR 0 3
46047: PUSH
46048: DOUBLE
46049: LD_INT 1
46051: DEC
46052: ST_TO_ADDR
46053: LD_INT 3
46055: PUSH
46056: FOR_TO
46057: IFFALSE 46139
// begin tmp := GetCargo ( cargo , i ) ;
46059: LD_ADDR_VAR 0 4
46063: PUSH
46064: LD_VAR 0 1
46068: PPUSH
46069: LD_VAR 0 3
46073: PPUSH
46074: CALL_OW 289
46078: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46079: LD_ADDR_VAR 0 2
46083: PUSH
46084: LD_VAR 0 2
46088: PPUSH
46089: LD_VAR 0 3
46093: PPUSH
46094: LD_VAR 0 4
46098: PPUSH
46099: CALL_OW 1
46103: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46104: LD_ADDR_VAR 0 2
46108: PUSH
46109: LD_VAR 0 2
46113: PPUSH
46114: LD_INT 4
46116: PPUSH
46117: LD_VAR 0 2
46121: PUSH
46122: LD_INT 4
46124: ARRAY
46125: PUSH
46126: LD_VAR 0 4
46130: PLUS
46131: PPUSH
46132: CALL_OW 1
46136: ST_TO_ADDR
// end ;
46137: GO 46056
46139: POP
46140: POP
// end ;
46141: LD_VAR 0 2
46145: RET
// export function Length ( array ) ; begin
46146: LD_INT 0
46148: PPUSH
// result := array + 0 ;
46149: LD_ADDR_VAR 0 2
46153: PUSH
46154: LD_VAR 0 1
46158: PUSH
46159: LD_INT 0
46161: PLUS
46162: ST_TO_ADDR
// end ;
46163: LD_VAR 0 2
46167: RET
// export function PrepareArray ( array ) ; begin
46168: LD_INT 0
46170: PPUSH
// result := array diff 0 ;
46171: LD_ADDR_VAR 0 2
46175: PUSH
46176: LD_VAR 0 1
46180: PUSH
46181: LD_INT 0
46183: DIFF
46184: ST_TO_ADDR
// if not result [ 1 ] then
46185: LD_VAR 0 2
46189: PUSH
46190: LD_INT 1
46192: ARRAY
46193: NOT
46194: IFFALSE 46214
// result := Delete ( result , 1 ) ;
46196: LD_ADDR_VAR 0 2
46200: PUSH
46201: LD_VAR 0 2
46205: PPUSH
46206: LD_INT 1
46208: PPUSH
46209: CALL_OW 3
46213: ST_TO_ADDR
// end ;
46214: LD_VAR 0 2
46218: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46219: LD_INT 0
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
// sibRocketRange := 25 ;
46225: LD_ADDR_VAR 0 6
46229: PUSH
46230: LD_INT 25
46232: ST_TO_ADDR
// result := false ;
46233: LD_ADDR_VAR 0 4
46237: PUSH
46238: LD_INT 0
46240: ST_TO_ADDR
// for i := 0 to 5 do
46241: LD_ADDR_VAR 0 5
46245: PUSH
46246: DOUBLE
46247: LD_INT 0
46249: DEC
46250: ST_TO_ADDR
46251: LD_INT 5
46253: PUSH
46254: FOR_TO
46255: IFFALSE 46322
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46257: LD_VAR 0 1
46261: PPUSH
46262: LD_VAR 0 5
46266: PPUSH
46267: LD_VAR 0 6
46271: PPUSH
46272: CALL_OW 272
46276: PPUSH
46277: LD_VAR 0 2
46281: PPUSH
46282: LD_VAR 0 5
46286: PPUSH
46287: LD_VAR 0 6
46291: PPUSH
46292: CALL_OW 273
46296: PPUSH
46297: LD_VAR 0 3
46301: PPUSH
46302: CALL_OW 309
46306: IFFALSE 46320
// begin result := true ;
46308: LD_ADDR_VAR 0 4
46312: PUSH
46313: LD_INT 1
46315: ST_TO_ADDR
// exit ;
46316: POP
46317: POP
46318: GO 46324
// end ;
46320: GO 46254
46322: POP
46323: POP
// end ;
46324: LD_VAR 0 4
46328: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46329: LD_INT 0
46331: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46332: LD_VAR 0 1
46336: PPUSH
46337: LD_VAR 0 2
46341: PPUSH
46342: LD_INT 0
46344: PPUSH
46345: LD_INT 0
46347: PPUSH
46348: LD_INT 1
46350: PPUSH
46351: LD_INT 0
46353: PPUSH
46354: CALL_OW 587
// end ;
46358: LD_VAR 0 3
46362: RET
// export function CenterOnNow ( unit ) ; begin
46363: LD_INT 0
46365: PPUSH
// result := IsInUnit ( unit ) ;
46366: LD_ADDR_VAR 0 2
46370: PUSH
46371: LD_VAR 0 1
46375: PPUSH
46376: CALL_OW 310
46380: ST_TO_ADDR
// if not result then
46381: LD_VAR 0 2
46385: NOT
46386: IFFALSE 46398
// result := unit ;
46388: LD_ADDR_VAR 0 2
46392: PUSH
46393: LD_VAR 0 1
46397: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46398: LD_VAR 0 1
46402: PPUSH
46403: CALL_OW 87
// end ;
46407: LD_VAR 0 2
46411: RET
// export function ComMoveHex ( unit , hex ) ; begin
46412: LD_INT 0
46414: PPUSH
// if not hex then
46415: LD_VAR 0 2
46419: NOT
46420: IFFALSE 46424
// exit ;
46422: GO 46477
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46424: LD_VAR 0 2
46428: PUSH
46429: LD_INT 1
46431: ARRAY
46432: PPUSH
46433: LD_VAR 0 2
46437: PUSH
46438: LD_INT 2
46440: ARRAY
46441: PPUSH
46442: CALL_OW 428
46446: IFFALSE 46450
// exit ;
46448: GO 46477
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46450: LD_VAR 0 1
46454: PPUSH
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 1
46462: ARRAY
46463: PPUSH
46464: LD_VAR 0 2
46468: PUSH
46469: LD_INT 2
46471: ARRAY
46472: PPUSH
46473: CALL_OW 111
// end ;
46477: LD_VAR 0 3
46481: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46482: LD_INT 0
46484: PPUSH
46485: PPUSH
46486: PPUSH
// if not unit or not enemy then
46487: LD_VAR 0 1
46491: NOT
46492: PUSH
46493: LD_VAR 0 2
46497: NOT
46498: OR
46499: IFFALSE 46503
// exit ;
46501: GO 46627
// x := GetX ( enemy ) ;
46503: LD_ADDR_VAR 0 4
46507: PUSH
46508: LD_VAR 0 2
46512: PPUSH
46513: CALL_OW 250
46517: ST_TO_ADDR
// y := GetY ( enemy ) ;
46518: LD_ADDR_VAR 0 5
46522: PUSH
46523: LD_VAR 0 2
46527: PPUSH
46528: CALL_OW 251
46532: ST_TO_ADDR
// if ValidHex ( x , y ) then
46533: LD_VAR 0 4
46537: PPUSH
46538: LD_VAR 0 5
46542: PPUSH
46543: CALL_OW 488
46547: IFFALSE 46627
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
46549: LD_VAR 0 2
46553: PPUSH
46554: CALL_OW 247
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: IN
46569: PUSH
46570: LD_VAR 0 1
46574: PPUSH
46575: CALL_OW 255
46579: PPUSH
46580: LD_VAR 0 2
46584: PPUSH
46585: CALL_OW 292
46589: AND
46590: IFFALSE 46608
// ComAttackUnit ( unit , enemy ) else
46592: LD_VAR 0 1
46596: PPUSH
46597: LD_VAR 0 2
46601: PPUSH
46602: CALL_OW 115
46606: GO 46627
// ComAgressiveMove ( unit , x , y ) ;
46608: LD_VAR 0 1
46612: PPUSH
46613: LD_VAR 0 4
46617: PPUSH
46618: LD_VAR 0 5
46622: PPUSH
46623: CALL_OW 114
// end ; end_of_file end_of_file
46627: LD_VAR 0 3
46631: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
46632: LD_VAR 0 1
46636: PPUSH
46637: LD_VAR 0 2
46641: PPUSH
46642: LD_VAR 0 3
46646: PPUSH
46647: LD_VAR 0 4
46651: PPUSH
46652: LD_VAR 0 5
46656: PPUSH
46657: LD_VAR 0 6
46661: PPUSH
46662: CALL 46846 0 6
// end ;
46666: PPOPN 6
46668: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
46669: LD_INT 0
46671: PPUSH
// begin if not units then
46672: LD_VAR 0 1
46676: NOT
46677: IFFALSE 46681
// exit ;
46679: GO 46681
// end ;
46681: PPOPN 7
46683: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
46684: CALL 46750 0 0
// end ; end_of_file
46688: PPOPN 1
46690: END
// export globalGameSaveCounter ; every 0 0$1 do
46691: GO 46693
46693: DISABLE
// begin enable ;
46694: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46695: LD_STRING updateTimer(
46697: PUSH
46698: LD_OWVAR 1
46702: STR
46703: PUSH
46704: LD_STRING );
46706: STR
46707: PPUSH
46708: CALL_OW 559
// end ;
46712: END
// every 0 0$1 do
46713: GO 46715
46715: DISABLE
// begin globalGameSaveCounter := 0 ;
46716: LD_ADDR_EXP 27
46720: PUSH
46721: LD_INT 0
46723: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
46724: LD_STRING setGameSaveCounter(0)
46726: PPUSH
46727: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
46731: LD_STRING initStreamRollete();
46733: PPUSH
46734: CALL_OW 559
// InitStreamMode ;
46738: CALL 48064 0 0
// DefineStreamItems ( false ) ;
46742: LD_INT 0
46744: PPUSH
46745: CALL 48528 0 1
// end ;
46749: END
// export function SOS_MapStart ( ) ; begin
46750: LD_INT 0
46752: PPUSH
// if streamModeActive then
46753: LD_EXP 28
46757: IFFALSE 46766
// DefineStreamItems ( true ) ;
46759: LD_INT 1
46761: PPUSH
46762: CALL 48528 0 1
// UpdateLuaVariables ( ) ;
46766: CALL 46783 0 0
// UpdateFactoryWaypoints ( ) ;
46770: CALL 61397 0 0
// UpdateWarehouseGatheringPoints ( ) ;
46774: CALL 61654 0 0
// end ;
46778: LD_VAR 0 1
46782: RET
// function UpdateLuaVariables ( ) ; begin
46783: LD_INT 0
46785: PPUSH
// if globalGameSaveCounter then
46786: LD_EXP 27
46790: IFFALSE 46824
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
46792: LD_ADDR_EXP 27
46796: PUSH
46797: LD_EXP 27
46801: PPUSH
46802: CALL 43771 0 1
46806: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46807: LD_STRING setGameSaveCounter(
46809: PUSH
46810: LD_EXP 27
46814: STR
46815: PUSH
46816: LD_STRING )
46818: STR
46819: PPUSH
46820: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46824: LD_STRING setGameDifficulty(
46826: PUSH
46827: LD_OWVAR 67
46831: STR
46832: PUSH
46833: LD_STRING )
46835: STR
46836: PPUSH
46837: CALL_OW 559
// end ;
46841: LD_VAR 0 1
46845: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46846: LD_INT 0
46848: PPUSH
// if p2 = stream_mode then
46849: LD_VAR 0 2
46853: PUSH
46854: LD_INT 100
46856: EQUAL
46857: IFFALSE 47860
// begin if not StreamModeActive then
46859: LD_EXP 28
46863: NOT
46864: IFFALSE 46874
// StreamModeActive := true ;
46866: LD_ADDR_EXP 28
46870: PUSH
46871: LD_INT 1
46873: ST_TO_ADDR
// if p3 = 0 then
46874: LD_VAR 0 3
46878: PUSH
46879: LD_INT 0
46881: EQUAL
46882: IFFALSE 46888
// InitStreamMode ;
46884: CALL 48064 0 0
// if p3 = 1 then
46888: LD_VAR 0 3
46892: PUSH
46893: LD_INT 1
46895: EQUAL
46896: IFFALSE 46906
// sRocket := true ;
46898: LD_ADDR_EXP 33
46902: PUSH
46903: LD_INT 1
46905: ST_TO_ADDR
// if p3 = 2 then
46906: LD_VAR 0 3
46910: PUSH
46911: LD_INT 2
46913: EQUAL
46914: IFFALSE 46924
// sSpeed := true ;
46916: LD_ADDR_EXP 32
46920: PUSH
46921: LD_INT 1
46923: ST_TO_ADDR
// if p3 = 3 then
46924: LD_VAR 0 3
46928: PUSH
46929: LD_INT 3
46931: EQUAL
46932: IFFALSE 46942
// sEngine := true ;
46934: LD_ADDR_EXP 34
46938: PUSH
46939: LD_INT 1
46941: ST_TO_ADDR
// if p3 = 4 then
46942: LD_VAR 0 3
46946: PUSH
46947: LD_INT 4
46949: EQUAL
46950: IFFALSE 46960
// sSpec := true ;
46952: LD_ADDR_EXP 31
46956: PUSH
46957: LD_INT 1
46959: ST_TO_ADDR
// if p3 = 5 then
46960: LD_VAR 0 3
46964: PUSH
46965: LD_INT 5
46967: EQUAL
46968: IFFALSE 46978
// sLevel := true ;
46970: LD_ADDR_EXP 35
46974: PUSH
46975: LD_INT 1
46977: ST_TO_ADDR
// if p3 = 6 then
46978: LD_VAR 0 3
46982: PUSH
46983: LD_INT 6
46985: EQUAL
46986: IFFALSE 46996
// sArmoury := true ;
46988: LD_ADDR_EXP 36
46992: PUSH
46993: LD_INT 1
46995: ST_TO_ADDR
// if p3 = 7 then
46996: LD_VAR 0 3
47000: PUSH
47001: LD_INT 7
47003: EQUAL
47004: IFFALSE 47014
// sRadar := true ;
47006: LD_ADDR_EXP 37
47010: PUSH
47011: LD_INT 1
47013: ST_TO_ADDR
// if p3 = 8 then
47014: LD_VAR 0 3
47018: PUSH
47019: LD_INT 8
47021: EQUAL
47022: IFFALSE 47032
// sBunker := true ;
47024: LD_ADDR_EXP 38
47028: PUSH
47029: LD_INT 1
47031: ST_TO_ADDR
// if p3 = 9 then
47032: LD_VAR 0 3
47036: PUSH
47037: LD_INT 9
47039: EQUAL
47040: IFFALSE 47050
// sHack := true ;
47042: LD_ADDR_EXP 39
47046: PUSH
47047: LD_INT 1
47049: ST_TO_ADDR
// if p3 = 10 then
47050: LD_VAR 0 3
47054: PUSH
47055: LD_INT 10
47057: EQUAL
47058: IFFALSE 47068
// sFire := true ;
47060: LD_ADDR_EXP 40
47064: PUSH
47065: LD_INT 1
47067: ST_TO_ADDR
// if p3 = 11 then
47068: LD_VAR 0 3
47072: PUSH
47073: LD_INT 11
47075: EQUAL
47076: IFFALSE 47086
// sRefresh := true ;
47078: LD_ADDR_EXP 41
47082: PUSH
47083: LD_INT 1
47085: ST_TO_ADDR
// if p3 = 12 then
47086: LD_VAR 0 3
47090: PUSH
47091: LD_INT 12
47093: EQUAL
47094: IFFALSE 47104
// sExp := true ;
47096: LD_ADDR_EXP 42
47100: PUSH
47101: LD_INT 1
47103: ST_TO_ADDR
// if p3 = 13 then
47104: LD_VAR 0 3
47108: PUSH
47109: LD_INT 13
47111: EQUAL
47112: IFFALSE 47122
// sDepot := true ;
47114: LD_ADDR_EXP 43
47118: PUSH
47119: LD_INT 1
47121: ST_TO_ADDR
// if p3 = 14 then
47122: LD_VAR 0 3
47126: PUSH
47127: LD_INT 14
47129: EQUAL
47130: IFFALSE 47140
// sFlag := true ;
47132: LD_ADDR_EXP 44
47136: PUSH
47137: LD_INT 1
47139: ST_TO_ADDR
// if p3 = 15 then
47140: LD_VAR 0 3
47144: PUSH
47145: LD_INT 15
47147: EQUAL
47148: IFFALSE 47158
// sKamikadze := true ;
47150: LD_ADDR_EXP 52
47154: PUSH
47155: LD_INT 1
47157: ST_TO_ADDR
// if p3 = 16 then
47158: LD_VAR 0 3
47162: PUSH
47163: LD_INT 16
47165: EQUAL
47166: IFFALSE 47176
// sTroll := true ;
47168: LD_ADDR_EXP 53
47172: PUSH
47173: LD_INT 1
47175: ST_TO_ADDR
// if p3 = 17 then
47176: LD_VAR 0 3
47180: PUSH
47181: LD_INT 17
47183: EQUAL
47184: IFFALSE 47194
// sSlow := true ;
47186: LD_ADDR_EXP 54
47190: PUSH
47191: LD_INT 1
47193: ST_TO_ADDR
// if p3 = 18 then
47194: LD_VAR 0 3
47198: PUSH
47199: LD_INT 18
47201: EQUAL
47202: IFFALSE 47212
// sLack := true ;
47204: LD_ADDR_EXP 55
47208: PUSH
47209: LD_INT 1
47211: ST_TO_ADDR
// if p3 = 19 then
47212: LD_VAR 0 3
47216: PUSH
47217: LD_INT 19
47219: EQUAL
47220: IFFALSE 47230
// sTank := true ;
47222: LD_ADDR_EXP 57
47226: PUSH
47227: LD_INT 1
47229: ST_TO_ADDR
// if p3 = 20 then
47230: LD_VAR 0 3
47234: PUSH
47235: LD_INT 20
47237: EQUAL
47238: IFFALSE 47248
// sRemote := true ;
47240: LD_ADDR_EXP 58
47244: PUSH
47245: LD_INT 1
47247: ST_TO_ADDR
// if p3 = 21 then
47248: LD_VAR 0 3
47252: PUSH
47253: LD_INT 21
47255: EQUAL
47256: IFFALSE 47266
// sPowell := true ;
47258: LD_ADDR_EXP 59
47262: PUSH
47263: LD_INT 1
47265: ST_TO_ADDR
// if p3 = 22 then
47266: LD_VAR 0 3
47270: PUSH
47271: LD_INT 22
47273: EQUAL
47274: IFFALSE 47284
// sTeleport := true ;
47276: LD_ADDR_EXP 62
47280: PUSH
47281: LD_INT 1
47283: ST_TO_ADDR
// if p3 = 23 then
47284: LD_VAR 0 3
47288: PUSH
47289: LD_INT 23
47291: EQUAL
47292: IFFALSE 47302
// sOilTower := true ;
47294: LD_ADDR_EXP 64
47298: PUSH
47299: LD_INT 1
47301: ST_TO_ADDR
// if p3 = 24 then
47302: LD_VAR 0 3
47306: PUSH
47307: LD_INT 24
47309: EQUAL
47310: IFFALSE 47320
// sShovel := true ;
47312: LD_ADDR_EXP 65
47316: PUSH
47317: LD_INT 1
47319: ST_TO_ADDR
// if p3 = 25 then
47320: LD_VAR 0 3
47324: PUSH
47325: LD_INT 25
47327: EQUAL
47328: IFFALSE 47338
// sSheik := true ;
47330: LD_ADDR_EXP 66
47334: PUSH
47335: LD_INT 1
47337: ST_TO_ADDR
// if p3 = 26 then
47338: LD_VAR 0 3
47342: PUSH
47343: LD_INT 26
47345: EQUAL
47346: IFFALSE 47356
// sEarthquake := true ;
47348: LD_ADDR_EXP 68
47352: PUSH
47353: LD_INT 1
47355: ST_TO_ADDR
// if p3 = 27 then
47356: LD_VAR 0 3
47360: PUSH
47361: LD_INT 27
47363: EQUAL
47364: IFFALSE 47374
// sAI := true ;
47366: LD_ADDR_EXP 69
47370: PUSH
47371: LD_INT 1
47373: ST_TO_ADDR
// if p3 = 28 then
47374: LD_VAR 0 3
47378: PUSH
47379: LD_INT 28
47381: EQUAL
47382: IFFALSE 47392
// sCargo := true ;
47384: LD_ADDR_EXP 72
47388: PUSH
47389: LD_INT 1
47391: ST_TO_ADDR
// if p3 = 29 then
47392: LD_VAR 0 3
47396: PUSH
47397: LD_INT 29
47399: EQUAL
47400: IFFALSE 47410
// sDLaser := true ;
47402: LD_ADDR_EXP 73
47406: PUSH
47407: LD_INT 1
47409: ST_TO_ADDR
// if p3 = 30 then
47410: LD_VAR 0 3
47414: PUSH
47415: LD_INT 30
47417: EQUAL
47418: IFFALSE 47428
// sExchange := true ;
47420: LD_ADDR_EXP 74
47424: PUSH
47425: LD_INT 1
47427: ST_TO_ADDR
// if p3 = 31 then
47428: LD_VAR 0 3
47432: PUSH
47433: LD_INT 31
47435: EQUAL
47436: IFFALSE 47446
// sFac := true ;
47438: LD_ADDR_EXP 75
47442: PUSH
47443: LD_INT 1
47445: ST_TO_ADDR
// if p3 = 32 then
47446: LD_VAR 0 3
47450: PUSH
47451: LD_INT 32
47453: EQUAL
47454: IFFALSE 47464
// sPower := true ;
47456: LD_ADDR_EXP 76
47460: PUSH
47461: LD_INT 1
47463: ST_TO_ADDR
// if p3 = 33 then
47464: LD_VAR 0 3
47468: PUSH
47469: LD_INT 33
47471: EQUAL
47472: IFFALSE 47482
// sRandom := true ;
47474: LD_ADDR_EXP 77
47478: PUSH
47479: LD_INT 1
47481: ST_TO_ADDR
// if p3 = 34 then
47482: LD_VAR 0 3
47486: PUSH
47487: LD_INT 34
47489: EQUAL
47490: IFFALSE 47500
// sShield := true ;
47492: LD_ADDR_EXP 78
47496: PUSH
47497: LD_INT 1
47499: ST_TO_ADDR
// if p3 = 35 then
47500: LD_VAR 0 3
47504: PUSH
47505: LD_INT 35
47507: EQUAL
47508: IFFALSE 47518
// sTime := true ;
47510: LD_ADDR_EXP 79
47514: PUSH
47515: LD_INT 1
47517: ST_TO_ADDR
// if p3 = 36 then
47518: LD_VAR 0 3
47522: PUSH
47523: LD_INT 36
47525: EQUAL
47526: IFFALSE 47536
// sTools := true ;
47528: LD_ADDR_EXP 80
47532: PUSH
47533: LD_INT 1
47535: ST_TO_ADDR
// if p3 = 101 then
47536: LD_VAR 0 3
47540: PUSH
47541: LD_INT 101
47543: EQUAL
47544: IFFALSE 47554
// sSold := true ;
47546: LD_ADDR_EXP 45
47550: PUSH
47551: LD_INT 1
47553: ST_TO_ADDR
// if p3 = 102 then
47554: LD_VAR 0 3
47558: PUSH
47559: LD_INT 102
47561: EQUAL
47562: IFFALSE 47572
// sDiff := true ;
47564: LD_ADDR_EXP 46
47568: PUSH
47569: LD_INT 1
47571: ST_TO_ADDR
// if p3 = 103 then
47572: LD_VAR 0 3
47576: PUSH
47577: LD_INT 103
47579: EQUAL
47580: IFFALSE 47590
// sFog := true ;
47582: LD_ADDR_EXP 49
47586: PUSH
47587: LD_INT 1
47589: ST_TO_ADDR
// if p3 = 104 then
47590: LD_VAR 0 3
47594: PUSH
47595: LD_INT 104
47597: EQUAL
47598: IFFALSE 47608
// sReset := true ;
47600: LD_ADDR_EXP 50
47604: PUSH
47605: LD_INT 1
47607: ST_TO_ADDR
// if p3 = 105 then
47608: LD_VAR 0 3
47612: PUSH
47613: LD_INT 105
47615: EQUAL
47616: IFFALSE 47626
// sSun := true ;
47618: LD_ADDR_EXP 51
47622: PUSH
47623: LD_INT 1
47625: ST_TO_ADDR
// if p3 = 106 then
47626: LD_VAR 0 3
47630: PUSH
47631: LD_INT 106
47633: EQUAL
47634: IFFALSE 47644
// sTiger := true ;
47636: LD_ADDR_EXP 47
47640: PUSH
47641: LD_INT 1
47643: ST_TO_ADDR
// if p3 = 107 then
47644: LD_VAR 0 3
47648: PUSH
47649: LD_INT 107
47651: EQUAL
47652: IFFALSE 47662
// sBomb := true ;
47654: LD_ADDR_EXP 48
47658: PUSH
47659: LD_INT 1
47661: ST_TO_ADDR
// if p3 = 108 then
47662: LD_VAR 0 3
47666: PUSH
47667: LD_INT 108
47669: EQUAL
47670: IFFALSE 47680
// sWound := true ;
47672: LD_ADDR_EXP 56
47676: PUSH
47677: LD_INT 1
47679: ST_TO_ADDR
// if p3 = 109 then
47680: LD_VAR 0 3
47684: PUSH
47685: LD_INT 109
47687: EQUAL
47688: IFFALSE 47698
// sBetray := true ;
47690: LD_ADDR_EXP 60
47694: PUSH
47695: LD_INT 1
47697: ST_TO_ADDR
// if p3 = 110 then
47698: LD_VAR 0 3
47702: PUSH
47703: LD_INT 110
47705: EQUAL
47706: IFFALSE 47716
// sContamin := true ;
47708: LD_ADDR_EXP 61
47712: PUSH
47713: LD_INT 1
47715: ST_TO_ADDR
// if p3 = 111 then
47716: LD_VAR 0 3
47720: PUSH
47721: LD_INT 111
47723: EQUAL
47724: IFFALSE 47734
// sOil := true ;
47726: LD_ADDR_EXP 63
47730: PUSH
47731: LD_INT 1
47733: ST_TO_ADDR
// if p3 = 112 then
47734: LD_VAR 0 3
47738: PUSH
47739: LD_INT 112
47741: EQUAL
47742: IFFALSE 47752
// sStu := true ;
47744: LD_ADDR_EXP 67
47748: PUSH
47749: LD_INT 1
47751: ST_TO_ADDR
// if p3 = 113 then
47752: LD_VAR 0 3
47756: PUSH
47757: LD_INT 113
47759: EQUAL
47760: IFFALSE 47770
// sBazooka := true ;
47762: LD_ADDR_EXP 70
47766: PUSH
47767: LD_INT 1
47769: ST_TO_ADDR
// if p3 = 114 then
47770: LD_VAR 0 3
47774: PUSH
47775: LD_INT 114
47777: EQUAL
47778: IFFALSE 47788
// sMortar := true ;
47780: LD_ADDR_EXP 71
47784: PUSH
47785: LD_INT 1
47787: ST_TO_ADDR
// if p3 = 115 then
47788: LD_VAR 0 3
47792: PUSH
47793: LD_INT 115
47795: EQUAL
47796: IFFALSE 47806
// sRanger := true ;
47798: LD_ADDR_EXP 81
47802: PUSH
47803: LD_INT 1
47805: ST_TO_ADDR
// if p3 = 116 then
47806: LD_VAR 0 3
47810: PUSH
47811: LD_INT 116
47813: EQUAL
47814: IFFALSE 47824
// sComputer := true ;
47816: LD_ADDR_EXP 82
47820: PUSH
47821: LD_INT 1
47823: ST_TO_ADDR
// if p3 = 117 then
47824: LD_VAR 0 3
47828: PUSH
47829: LD_INT 117
47831: EQUAL
47832: IFFALSE 47842
// s30 := true ;
47834: LD_ADDR_EXP 83
47838: PUSH
47839: LD_INT 1
47841: ST_TO_ADDR
// if p3 = 118 then
47842: LD_VAR 0 3
47846: PUSH
47847: LD_INT 118
47849: EQUAL
47850: IFFALSE 47860
// s60 := true ;
47852: LD_ADDR_EXP 84
47856: PUSH
47857: LD_INT 1
47859: ST_TO_ADDR
// end ; if p2 = hack_mode then
47860: LD_VAR 0 2
47864: PUSH
47865: LD_INT 101
47867: EQUAL
47868: IFFALSE 47996
// begin case p3 of 1 :
47870: LD_VAR 0 3
47874: PUSH
47875: LD_INT 1
47877: DOUBLE
47878: EQUAL
47879: IFTRUE 47883
47881: GO 47890
47883: POP
// hHackUnlimitedResources ; 2 :
47884: CALL 60143 0 0
47888: GO 47996
47890: LD_INT 2
47892: DOUBLE
47893: EQUAL
47894: IFTRUE 47898
47896: GO 47905
47898: POP
// hHackSetLevel10 ; 3 :
47899: CALL 60276 0 0
47903: GO 47996
47905: LD_INT 3
47907: DOUBLE
47908: EQUAL
47909: IFTRUE 47913
47911: GO 47920
47913: POP
// hHackSetLevel10YourUnits ; 4 :
47914: CALL 60361 0 0
47918: GO 47996
47920: LD_INT 4
47922: DOUBLE
47923: EQUAL
47924: IFTRUE 47928
47926: GO 47935
47928: POP
// hHackInvincible ; 5 :
47929: CALL 60809 0 0
47933: GO 47996
47935: LD_INT 5
47937: DOUBLE
47938: EQUAL
47939: IFTRUE 47943
47941: GO 47950
47943: POP
// hHackInvisible ; 6 :
47944: CALL 60920 0 0
47948: GO 47996
47950: LD_INT 6
47952: DOUBLE
47953: EQUAL
47954: IFTRUE 47958
47956: GO 47965
47958: POP
// hHackChangeYourSide ; 7 :
47959: CALL 60977 0 0
47963: GO 47996
47965: LD_INT 7
47967: DOUBLE
47968: EQUAL
47969: IFTRUE 47973
47971: GO 47980
47973: POP
// hHackChangeUnitSide ; 8 :
47974: CALL 61019 0 0
47978: GO 47996
47980: LD_INT 8
47982: DOUBLE
47983: EQUAL
47984: IFTRUE 47988
47986: GO 47995
47988: POP
// hHackFog ; end ;
47989: CALL 61120 0 0
47993: GO 47996
47995: POP
// end ; if p2 = game_save_mode then
47996: LD_VAR 0 2
48000: PUSH
48001: LD_INT 102
48003: EQUAL
48004: IFFALSE 48059
// begin if p3 = 1 then
48006: LD_VAR 0 3
48010: PUSH
48011: LD_INT 1
48013: EQUAL
48014: IFFALSE 48026
// globalGameSaveCounter := p4 ;
48016: LD_ADDR_EXP 27
48020: PUSH
48021: LD_VAR 0 4
48025: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48026: LD_VAR 0 3
48030: PUSH
48031: LD_INT 2
48033: EQUAL
48034: PUSH
48035: LD_EXP 27
48039: AND
48040: IFFALSE 48059
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48042: LD_STRING setGameSaveCounter(
48044: PUSH
48045: LD_EXP 27
48049: STR
48050: PUSH
48051: LD_STRING )
48053: STR
48054: PPUSH
48055: CALL_OW 559
// end ; end ;
48059: LD_VAR 0 7
48063: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48064: LD_INT 0
48066: PPUSH
// streamModeActive := false ;
48067: LD_ADDR_EXP 28
48071: PUSH
48072: LD_INT 0
48074: ST_TO_ADDR
// normalCounter := 36 ;
48075: LD_ADDR_EXP 29
48079: PUSH
48080: LD_INT 36
48082: ST_TO_ADDR
// hardcoreCounter := 18 ;
48083: LD_ADDR_EXP 30
48087: PUSH
48088: LD_INT 18
48090: ST_TO_ADDR
// sRocket := false ;
48091: LD_ADDR_EXP 33
48095: PUSH
48096: LD_INT 0
48098: ST_TO_ADDR
// sSpeed := false ;
48099: LD_ADDR_EXP 32
48103: PUSH
48104: LD_INT 0
48106: ST_TO_ADDR
// sEngine := false ;
48107: LD_ADDR_EXP 34
48111: PUSH
48112: LD_INT 0
48114: ST_TO_ADDR
// sSpec := false ;
48115: LD_ADDR_EXP 31
48119: PUSH
48120: LD_INT 0
48122: ST_TO_ADDR
// sLevel := false ;
48123: LD_ADDR_EXP 35
48127: PUSH
48128: LD_INT 0
48130: ST_TO_ADDR
// sArmoury := false ;
48131: LD_ADDR_EXP 36
48135: PUSH
48136: LD_INT 0
48138: ST_TO_ADDR
// sRadar := false ;
48139: LD_ADDR_EXP 37
48143: PUSH
48144: LD_INT 0
48146: ST_TO_ADDR
// sBunker := false ;
48147: LD_ADDR_EXP 38
48151: PUSH
48152: LD_INT 0
48154: ST_TO_ADDR
// sHack := false ;
48155: LD_ADDR_EXP 39
48159: PUSH
48160: LD_INT 0
48162: ST_TO_ADDR
// sFire := false ;
48163: LD_ADDR_EXP 40
48167: PUSH
48168: LD_INT 0
48170: ST_TO_ADDR
// sRefresh := false ;
48171: LD_ADDR_EXP 41
48175: PUSH
48176: LD_INT 0
48178: ST_TO_ADDR
// sExp := false ;
48179: LD_ADDR_EXP 42
48183: PUSH
48184: LD_INT 0
48186: ST_TO_ADDR
// sDepot := false ;
48187: LD_ADDR_EXP 43
48191: PUSH
48192: LD_INT 0
48194: ST_TO_ADDR
// sFlag := false ;
48195: LD_ADDR_EXP 44
48199: PUSH
48200: LD_INT 0
48202: ST_TO_ADDR
// sKamikadze := false ;
48203: LD_ADDR_EXP 52
48207: PUSH
48208: LD_INT 0
48210: ST_TO_ADDR
// sTroll := false ;
48211: LD_ADDR_EXP 53
48215: PUSH
48216: LD_INT 0
48218: ST_TO_ADDR
// sSlow := false ;
48219: LD_ADDR_EXP 54
48223: PUSH
48224: LD_INT 0
48226: ST_TO_ADDR
// sLack := false ;
48227: LD_ADDR_EXP 55
48231: PUSH
48232: LD_INT 0
48234: ST_TO_ADDR
// sTank := false ;
48235: LD_ADDR_EXP 57
48239: PUSH
48240: LD_INT 0
48242: ST_TO_ADDR
// sRemote := false ;
48243: LD_ADDR_EXP 58
48247: PUSH
48248: LD_INT 0
48250: ST_TO_ADDR
// sPowell := false ;
48251: LD_ADDR_EXP 59
48255: PUSH
48256: LD_INT 0
48258: ST_TO_ADDR
// sTeleport := false ;
48259: LD_ADDR_EXP 62
48263: PUSH
48264: LD_INT 0
48266: ST_TO_ADDR
// sOilTower := false ;
48267: LD_ADDR_EXP 64
48271: PUSH
48272: LD_INT 0
48274: ST_TO_ADDR
// sShovel := false ;
48275: LD_ADDR_EXP 65
48279: PUSH
48280: LD_INT 0
48282: ST_TO_ADDR
// sSheik := false ;
48283: LD_ADDR_EXP 66
48287: PUSH
48288: LD_INT 0
48290: ST_TO_ADDR
// sEarthquake := false ;
48291: LD_ADDR_EXP 68
48295: PUSH
48296: LD_INT 0
48298: ST_TO_ADDR
// sAI := false ;
48299: LD_ADDR_EXP 69
48303: PUSH
48304: LD_INT 0
48306: ST_TO_ADDR
// sCargo := false ;
48307: LD_ADDR_EXP 72
48311: PUSH
48312: LD_INT 0
48314: ST_TO_ADDR
// sDLaser := false ;
48315: LD_ADDR_EXP 73
48319: PUSH
48320: LD_INT 0
48322: ST_TO_ADDR
// sExchange := false ;
48323: LD_ADDR_EXP 74
48327: PUSH
48328: LD_INT 0
48330: ST_TO_ADDR
// sFac := false ;
48331: LD_ADDR_EXP 75
48335: PUSH
48336: LD_INT 0
48338: ST_TO_ADDR
// sPower := false ;
48339: LD_ADDR_EXP 76
48343: PUSH
48344: LD_INT 0
48346: ST_TO_ADDR
// sRandom := false ;
48347: LD_ADDR_EXP 77
48351: PUSH
48352: LD_INT 0
48354: ST_TO_ADDR
// sShield := false ;
48355: LD_ADDR_EXP 78
48359: PUSH
48360: LD_INT 0
48362: ST_TO_ADDR
// sTime := false ;
48363: LD_ADDR_EXP 79
48367: PUSH
48368: LD_INT 0
48370: ST_TO_ADDR
// sTools := false ;
48371: LD_ADDR_EXP 80
48375: PUSH
48376: LD_INT 0
48378: ST_TO_ADDR
// sSold := false ;
48379: LD_ADDR_EXP 45
48383: PUSH
48384: LD_INT 0
48386: ST_TO_ADDR
// sDiff := false ;
48387: LD_ADDR_EXP 46
48391: PUSH
48392: LD_INT 0
48394: ST_TO_ADDR
// sFog := false ;
48395: LD_ADDR_EXP 49
48399: PUSH
48400: LD_INT 0
48402: ST_TO_ADDR
// sReset := false ;
48403: LD_ADDR_EXP 50
48407: PUSH
48408: LD_INT 0
48410: ST_TO_ADDR
// sSun := false ;
48411: LD_ADDR_EXP 51
48415: PUSH
48416: LD_INT 0
48418: ST_TO_ADDR
// sTiger := false ;
48419: LD_ADDR_EXP 47
48423: PUSH
48424: LD_INT 0
48426: ST_TO_ADDR
// sBomb := false ;
48427: LD_ADDR_EXP 48
48431: PUSH
48432: LD_INT 0
48434: ST_TO_ADDR
// sWound := false ;
48435: LD_ADDR_EXP 56
48439: PUSH
48440: LD_INT 0
48442: ST_TO_ADDR
// sBetray := false ;
48443: LD_ADDR_EXP 60
48447: PUSH
48448: LD_INT 0
48450: ST_TO_ADDR
// sContamin := false ;
48451: LD_ADDR_EXP 61
48455: PUSH
48456: LD_INT 0
48458: ST_TO_ADDR
// sOil := false ;
48459: LD_ADDR_EXP 63
48463: PUSH
48464: LD_INT 0
48466: ST_TO_ADDR
// sStu := false ;
48467: LD_ADDR_EXP 67
48471: PUSH
48472: LD_INT 0
48474: ST_TO_ADDR
// sBazooka := false ;
48475: LD_ADDR_EXP 70
48479: PUSH
48480: LD_INT 0
48482: ST_TO_ADDR
// sMortar := false ;
48483: LD_ADDR_EXP 71
48487: PUSH
48488: LD_INT 0
48490: ST_TO_ADDR
// sRanger := false ;
48491: LD_ADDR_EXP 81
48495: PUSH
48496: LD_INT 0
48498: ST_TO_ADDR
// sComputer := false ;
48499: LD_ADDR_EXP 82
48503: PUSH
48504: LD_INT 0
48506: ST_TO_ADDR
// s30 := false ;
48507: LD_ADDR_EXP 83
48511: PUSH
48512: LD_INT 0
48514: ST_TO_ADDR
// s60 := false ;
48515: LD_ADDR_EXP 84
48519: PUSH
48520: LD_INT 0
48522: ST_TO_ADDR
// end ;
48523: LD_VAR 0 1
48527: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48528: LD_INT 0
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
48534: PPUSH
48535: PPUSH
48536: PPUSH
// result := [ ] ;
48537: LD_ADDR_VAR 0 2
48541: PUSH
48542: EMPTY
48543: ST_TO_ADDR
// if campaign_id = 1 then
48544: LD_OWVAR 69
48548: PUSH
48549: LD_INT 1
48551: EQUAL
48552: IFFALSE 51718
// begin case mission_number of 1 :
48554: LD_OWVAR 70
48558: PUSH
48559: LD_INT 1
48561: DOUBLE
48562: EQUAL
48563: IFTRUE 48567
48565: GO 48643
48567: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48568: LD_ADDR_VAR 0 2
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 4
48578: PUSH
48579: LD_INT 11
48581: PUSH
48582: LD_INT 12
48584: PUSH
48585: LD_INT 15
48587: PUSH
48588: LD_INT 16
48590: PUSH
48591: LD_INT 22
48593: PUSH
48594: LD_INT 23
48596: PUSH
48597: LD_INT 26
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 101
48613: PUSH
48614: LD_INT 102
48616: PUSH
48617: LD_INT 106
48619: PUSH
48620: LD_INT 116
48622: PUSH
48623: LD_INT 117
48625: PUSH
48626: LD_INT 118
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: ST_TO_ADDR
48641: GO 51716
48643: LD_INT 2
48645: DOUBLE
48646: EQUAL
48647: IFTRUE 48651
48649: GO 48735
48651: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48652: LD_ADDR_VAR 0 2
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 4
48662: PUSH
48663: LD_INT 11
48665: PUSH
48666: LD_INT 12
48668: PUSH
48669: LD_INT 15
48671: PUSH
48672: LD_INT 16
48674: PUSH
48675: LD_INT 22
48677: PUSH
48678: LD_INT 23
48680: PUSH
48681: LD_INT 26
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 101
48697: PUSH
48698: LD_INT 102
48700: PUSH
48701: LD_INT 105
48703: PUSH
48704: LD_INT 106
48706: PUSH
48707: LD_INT 108
48709: PUSH
48710: LD_INT 116
48712: PUSH
48713: LD_INT 117
48715: PUSH
48716: LD_INT 118
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: ST_TO_ADDR
48733: GO 51716
48735: LD_INT 3
48737: DOUBLE
48738: EQUAL
48739: IFTRUE 48743
48741: GO 48831
48743: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48744: LD_ADDR_VAR 0 2
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 4
48754: PUSH
48755: LD_INT 5
48757: PUSH
48758: LD_INT 11
48760: PUSH
48761: LD_INT 12
48763: PUSH
48764: LD_INT 15
48766: PUSH
48767: LD_INT 16
48769: PUSH
48770: LD_INT 22
48772: PUSH
48773: LD_INT 26
48775: PUSH
48776: LD_INT 36
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 101
48793: PUSH
48794: LD_INT 102
48796: PUSH
48797: LD_INT 105
48799: PUSH
48800: LD_INT 106
48802: PUSH
48803: LD_INT 108
48805: PUSH
48806: LD_INT 116
48808: PUSH
48809: LD_INT 117
48811: PUSH
48812: LD_INT 118
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: ST_TO_ADDR
48829: GO 51716
48831: LD_INT 4
48833: DOUBLE
48834: EQUAL
48835: IFTRUE 48839
48837: GO 48935
48839: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48840: LD_ADDR_VAR 0 2
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 4
48850: PUSH
48851: LD_INT 5
48853: PUSH
48854: LD_INT 8
48856: PUSH
48857: LD_INT 11
48859: PUSH
48860: LD_INT 12
48862: PUSH
48863: LD_INT 15
48865: PUSH
48866: LD_INT 16
48868: PUSH
48869: LD_INT 22
48871: PUSH
48872: LD_INT 23
48874: PUSH
48875: LD_INT 26
48877: PUSH
48878: LD_INT 36
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 101
48897: PUSH
48898: LD_INT 102
48900: PUSH
48901: LD_INT 105
48903: PUSH
48904: LD_INT 106
48906: PUSH
48907: LD_INT 108
48909: PUSH
48910: LD_INT 116
48912: PUSH
48913: LD_INT 117
48915: PUSH
48916: LD_INT 118
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: ST_TO_ADDR
48933: GO 51716
48935: LD_INT 5
48937: DOUBLE
48938: EQUAL
48939: IFTRUE 48943
48941: GO 49055
48943: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48944: LD_ADDR_VAR 0 2
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 4
48954: PUSH
48955: LD_INT 5
48957: PUSH
48958: LD_INT 6
48960: PUSH
48961: LD_INT 8
48963: PUSH
48964: LD_INT 11
48966: PUSH
48967: LD_INT 12
48969: PUSH
48970: LD_INT 15
48972: PUSH
48973: LD_INT 16
48975: PUSH
48976: LD_INT 22
48978: PUSH
48979: LD_INT 23
48981: PUSH
48982: LD_INT 25
48984: PUSH
48985: LD_INT 26
48987: PUSH
48988: LD_INT 36
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 101
49009: PUSH
49010: LD_INT 102
49012: PUSH
49013: LD_INT 105
49015: PUSH
49016: LD_INT 106
49018: PUSH
49019: LD_INT 108
49021: PUSH
49022: LD_INT 109
49024: PUSH
49025: LD_INT 112
49027: PUSH
49028: LD_INT 116
49030: PUSH
49031: LD_INT 117
49033: PUSH
49034: LD_INT 118
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: ST_TO_ADDR
49053: GO 51716
49055: LD_INT 6
49057: DOUBLE
49058: EQUAL
49059: IFTRUE 49063
49061: GO 49195
49063: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49064: LD_ADDR_VAR 0 2
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 4
49074: PUSH
49075: LD_INT 5
49077: PUSH
49078: LD_INT 6
49080: PUSH
49081: LD_INT 8
49083: PUSH
49084: LD_INT 11
49086: PUSH
49087: LD_INT 12
49089: PUSH
49090: LD_INT 15
49092: PUSH
49093: LD_INT 16
49095: PUSH
49096: LD_INT 20
49098: PUSH
49099: LD_INT 21
49101: PUSH
49102: LD_INT 22
49104: PUSH
49105: LD_INT 23
49107: PUSH
49108: LD_INT 25
49110: PUSH
49111: LD_INT 26
49113: PUSH
49114: LD_INT 30
49116: PUSH
49117: LD_INT 31
49119: PUSH
49120: LD_INT 32
49122: PUSH
49123: LD_INT 36
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 101
49149: PUSH
49150: LD_INT 102
49152: PUSH
49153: LD_INT 105
49155: PUSH
49156: LD_INT 106
49158: PUSH
49159: LD_INT 108
49161: PUSH
49162: LD_INT 109
49164: PUSH
49165: LD_INT 112
49167: PUSH
49168: LD_INT 116
49170: PUSH
49171: LD_INT 117
49173: PUSH
49174: LD_INT 118
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: ST_TO_ADDR
49193: GO 51716
49195: LD_INT 7
49197: DOUBLE
49198: EQUAL
49199: IFTRUE 49203
49201: GO 49315
49203: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
49204: LD_ADDR_VAR 0 2
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 4
49214: PUSH
49215: LD_INT 5
49217: PUSH
49218: LD_INT 7
49220: PUSH
49221: LD_INT 11
49223: PUSH
49224: LD_INT 12
49226: PUSH
49227: LD_INT 15
49229: PUSH
49230: LD_INT 16
49232: PUSH
49233: LD_INT 20
49235: PUSH
49236: LD_INT 21
49238: PUSH
49239: LD_INT 22
49241: PUSH
49242: LD_INT 23
49244: PUSH
49245: LD_INT 25
49247: PUSH
49248: LD_INT 26
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 101
49269: PUSH
49270: LD_INT 102
49272: PUSH
49273: LD_INT 103
49275: PUSH
49276: LD_INT 105
49278: PUSH
49279: LD_INT 106
49281: PUSH
49282: LD_INT 108
49284: PUSH
49285: LD_INT 112
49287: PUSH
49288: LD_INT 116
49290: PUSH
49291: LD_INT 117
49293: PUSH
49294: LD_INT 118
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: ST_TO_ADDR
49313: GO 51716
49315: LD_INT 8
49317: DOUBLE
49318: EQUAL
49319: IFTRUE 49323
49321: GO 49463
49323: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
49324: LD_ADDR_VAR 0 2
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 4
49334: PUSH
49335: LD_INT 5
49337: PUSH
49338: LD_INT 6
49340: PUSH
49341: LD_INT 7
49343: PUSH
49344: LD_INT 8
49346: PUSH
49347: LD_INT 11
49349: PUSH
49350: LD_INT 12
49352: PUSH
49353: LD_INT 15
49355: PUSH
49356: LD_INT 16
49358: PUSH
49359: LD_INT 20
49361: PUSH
49362: LD_INT 21
49364: PUSH
49365: LD_INT 22
49367: PUSH
49368: LD_INT 23
49370: PUSH
49371: LD_INT 25
49373: PUSH
49374: LD_INT 26
49376: PUSH
49377: LD_INT 30
49379: PUSH
49380: LD_INT 31
49382: PUSH
49383: LD_INT 32
49385: PUSH
49386: LD_INT 36
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 101
49413: PUSH
49414: LD_INT 102
49416: PUSH
49417: LD_INT 103
49419: PUSH
49420: LD_INT 105
49422: PUSH
49423: LD_INT 106
49425: PUSH
49426: LD_INT 108
49428: PUSH
49429: LD_INT 109
49431: PUSH
49432: LD_INT 112
49434: PUSH
49435: LD_INT 116
49437: PUSH
49438: LD_INT 117
49440: PUSH
49441: LD_INT 118
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: ST_TO_ADDR
49461: GO 51716
49463: LD_INT 9
49465: DOUBLE
49466: EQUAL
49467: IFTRUE 49471
49469: GO 49619
49471: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49472: LD_ADDR_VAR 0 2
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: LD_INT 4
49482: PUSH
49483: LD_INT 5
49485: PUSH
49486: LD_INT 6
49488: PUSH
49489: LD_INT 7
49491: PUSH
49492: LD_INT 8
49494: PUSH
49495: LD_INT 11
49497: PUSH
49498: LD_INT 12
49500: PUSH
49501: LD_INT 15
49503: PUSH
49504: LD_INT 16
49506: PUSH
49507: LD_INT 20
49509: PUSH
49510: LD_INT 21
49512: PUSH
49513: LD_INT 22
49515: PUSH
49516: LD_INT 23
49518: PUSH
49519: LD_INT 25
49521: PUSH
49522: LD_INT 26
49524: PUSH
49525: LD_INT 28
49527: PUSH
49528: LD_INT 30
49530: PUSH
49531: LD_INT 31
49533: PUSH
49534: LD_INT 32
49536: PUSH
49537: LD_INT 36
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 101
49565: PUSH
49566: LD_INT 102
49568: PUSH
49569: LD_INT 103
49571: PUSH
49572: LD_INT 105
49574: PUSH
49575: LD_INT 106
49577: PUSH
49578: LD_INT 108
49580: PUSH
49581: LD_INT 109
49583: PUSH
49584: LD_INT 112
49586: PUSH
49587: LD_INT 114
49589: PUSH
49590: LD_INT 116
49592: PUSH
49593: LD_INT 117
49595: PUSH
49596: LD_INT 118
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: ST_TO_ADDR
49617: GO 51716
49619: LD_INT 10
49621: DOUBLE
49622: EQUAL
49623: IFTRUE 49627
49625: GO 49823
49627: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49628: LD_ADDR_VAR 0 2
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 4
49638: PUSH
49639: LD_INT 5
49641: PUSH
49642: LD_INT 6
49644: PUSH
49645: LD_INT 7
49647: PUSH
49648: LD_INT 8
49650: PUSH
49651: LD_INT 9
49653: PUSH
49654: LD_INT 10
49656: PUSH
49657: LD_INT 11
49659: PUSH
49660: LD_INT 12
49662: PUSH
49663: LD_INT 13
49665: PUSH
49666: LD_INT 14
49668: PUSH
49669: LD_INT 15
49671: PUSH
49672: LD_INT 16
49674: PUSH
49675: LD_INT 17
49677: PUSH
49678: LD_INT 18
49680: PUSH
49681: LD_INT 19
49683: PUSH
49684: LD_INT 20
49686: PUSH
49687: LD_INT 21
49689: PUSH
49690: LD_INT 22
49692: PUSH
49693: LD_INT 23
49695: PUSH
49696: LD_INT 24
49698: PUSH
49699: LD_INT 25
49701: PUSH
49702: LD_INT 26
49704: PUSH
49705: LD_INT 28
49707: PUSH
49708: LD_INT 30
49710: PUSH
49711: LD_INT 31
49713: PUSH
49714: LD_INT 32
49716: PUSH
49717: LD_INT 36
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 101
49753: PUSH
49754: LD_INT 102
49756: PUSH
49757: LD_INT 103
49759: PUSH
49760: LD_INT 104
49762: PUSH
49763: LD_INT 105
49765: PUSH
49766: LD_INT 106
49768: PUSH
49769: LD_INT 107
49771: PUSH
49772: LD_INT 108
49774: PUSH
49775: LD_INT 109
49777: PUSH
49778: LD_INT 110
49780: PUSH
49781: LD_INT 111
49783: PUSH
49784: LD_INT 112
49786: PUSH
49787: LD_INT 114
49789: PUSH
49790: LD_INT 116
49792: PUSH
49793: LD_INT 117
49795: PUSH
49796: LD_INT 118
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: ST_TO_ADDR
49821: GO 51716
49823: LD_INT 11
49825: DOUBLE
49826: EQUAL
49827: IFTRUE 49831
49829: GO 50035
49831: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49832: LD_ADDR_VAR 0 2
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: LD_INT 5
49848: PUSH
49849: LD_INT 6
49851: PUSH
49852: LD_INT 7
49854: PUSH
49855: LD_INT 8
49857: PUSH
49858: LD_INT 9
49860: PUSH
49861: LD_INT 10
49863: PUSH
49864: LD_INT 11
49866: PUSH
49867: LD_INT 12
49869: PUSH
49870: LD_INT 13
49872: PUSH
49873: LD_INT 14
49875: PUSH
49876: LD_INT 15
49878: PUSH
49879: LD_INT 16
49881: PUSH
49882: LD_INT 17
49884: PUSH
49885: LD_INT 18
49887: PUSH
49888: LD_INT 19
49890: PUSH
49891: LD_INT 20
49893: PUSH
49894: LD_INT 21
49896: PUSH
49897: LD_INT 22
49899: PUSH
49900: LD_INT 23
49902: PUSH
49903: LD_INT 24
49905: PUSH
49906: LD_INT 25
49908: PUSH
49909: LD_INT 26
49911: PUSH
49912: LD_INT 28
49914: PUSH
49915: LD_INT 30
49917: PUSH
49918: LD_INT 31
49920: PUSH
49921: LD_INT 32
49923: PUSH
49924: LD_INT 34
49926: PUSH
49927: LD_INT 36
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 101
49965: PUSH
49966: LD_INT 102
49968: PUSH
49969: LD_INT 103
49971: PUSH
49972: LD_INT 104
49974: PUSH
49975: LD_INT 105
49977: PUSH
49978: LD_INT 106
49980: PUSH
49981: LD_INT 107
49983: PUSH
49984: LD_INT 108
49986: PUSH
49987: LD_INT 109
49989: PUSH
49990: LD_INT 110
49992: PUSH
49993: LD_INT 111
49995: PUSH
49996: LD_INT 112
49998: PUSH
49999: LD_INT 114
50001: PUSH
50002: LD_INT 116
50004: PUSH
50005: LD_INT 117
50007: PUSH
50008: LD_INT 118
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: ST_TO_ADDR
50033: GO 51716
50035: LD_INT 12
50037: DOUBLE
50038: EQUAL
50039: IFTRUE 50043
50041: GO 50263
50043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50044: LD_ADDR_VAR 0 2
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: LD_INT 4
50060: PUSH
50061: LD_INT 5
50063: PUSH
50064: LD_INT 6
50066: PUSH
50067: LD_INT 7
50069: PUSH
50070: LD_INT 8
50072: PUSH
50073: LD_INT 9
50075: PUSH
50076: LD_INT 10
50078: PUSH
50079: LD_INT 11
50081: PUSH
50082: LD_INT 12
50084: PUSH
50085: LD_INT 13
50087: PUSH
50088: LD_INT 14
50090: PUSH
50091: LD_INT 15
50093: PUSH
50094: LD_INT 16
50096: PUSH
50097: LD_INT 17
50099: PUSH
50100: LD_INT 18
50102: PUSH
50103: LD_INT 19
50105: PUSH
50106: LD_INT 20
50108: PUSH
50109: LD_INT 21
50111: PUSH
50112: LD_INT 22
50114: PUSH
50115: LD_INT 23
50117: PUSH
50118: LD_INT 24
50120: PUSH
50121: LD_INT 25
50123: PUSH
50124: LD_INT 26
50126: PUSH
50127: LD_INT 27
50129: PUSH
50130: LD_INT 28
50132: PUSH
50133: LD_INT 30
50135: PUSH
50136: LD_INT 31
50138: PUSH
50139: LD_INT 32
50141: PUSH
50142: LD_INT 33
50144: PUSH
50145: LD_INT 34
50147: PUSH
50148: LD_INT 36
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 101
50189: PUSH
50190: LD_INT 102
50192: PUSH
50193: LD_INT 103
50195: PUSH
50196: LD_INT 104
50198: PUSH
50199: LD_INT 105
50201: PUSH
50202: LD_INT 106
50204: PUSH
50205: LD_INT 107
50207: PUSH
50208: LD_INT 108
50210: PUSH
50211: LD_INT 109
50213: PUSH
50214: LD_INT 110
50216: PUSH
50217: LD_INT 111
50219: PUSH
50220: LD_INT 112
50222: PUSH
50223: LD_INT 113
50225: PUSH
50226: LD_INT 114
50228: PUSH
50229: LD_INT 116
50231: PUSH
50232: LD_INT 117
50234: PUSH
50235: LD_INT 118
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: ST_TO_ADDR
50261: GO 51716
50263: LD_INT 13
50265: DOUBLE
50266: EQUAL
50267: IFTRUE 50271
50269: GO 50479
50271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
50272: LD_ADDR_VAR 0 2
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: LD_INT 4
50288: PUSH
50289: LD_INT 5
50291: PUSH
50292: LD_INT 8
50294: PUSH
50295: LD_INT 9
50297: PUSH
50298: LD_INT 10
50300: PUSH
50301: LD_INT 11
50303: PUSH
50304: LD_INT 12
50306: PUSH
50307: LD_INT 14
50309: PUSH
50310: LD_INT 15
50312: PUSH
50313: LD_INT 16
50315: PUSH
50316: LD_INT 17
50318: PUSH
50319: LD_INT 18
50321: PUSH
50322: LD_INT 19
50324: PUSH
50325: LD_INT 20
50327: PUSH
50328: LD_INT 21
50330: PUSH
50331: LD_INT 22
50333: PUSH
50334: LD_INT 23
50336: PUSH
50337: LD_INT 24
50339: PUSH
50340: LD_INT 25
50342: PUSH
50343: LD_INT 26
50345: PUSH
50346: LD_INT 27
50348: PUSH
50349: LD_INT 28
50351: PUSH
50352: LD_INT 30
50354: PUSH
50355: LD_INT 31
50357: PUSH
50358: LD_INT 32
50360: PUSH
50361: LD_INT 33
50363: PUSH
50364: LD_INT 34
50366: PUSH
50367: LD_INT 36
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 101
50405: PUSH
50406: LD_INT 102
50408: PUSH
50409: LD_INT 103
50411: PUSH
50412: LD_INT 104
50414: PUSH
50415: LD_INT 105
50417: PUSH
50418: LD_INT 106
50420: PUSH
50421: LD_INT 107
50423: PUSH
50424: LD_INT 108
50426: PUSH
50427: LD_INT 109
50429: PUSH
50430: LD_INT 110
50432: PUSH
50433: LD_INT 111
50435: PUSH
50436: LD_INT 112
50438: PUSH
50439: LD_INT 113
50441: PUSH
50442: LD_INT 114
50444: PUSH
50445: LD_INT 116
50447: PUSH
50448: LD_INT 117
50450: PUSH
50451: LD_INT 118
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: ST_TO_ADDR
50477: GO 51716
50479: LD_INT 14
50481: DOUBLE
50482: EQUAL
50483: IFTRUE 50487
50485: GO 50711
50487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50488: LD_ADDR_VAR 0 2
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: LD_INT 3
50501: PUSH
50502: LD_INT 4
50504: PUSH
50505: LD_INT 5
50507: PUSH
50508: LD_INT 6
50510: PUSH
50511: LD_INT 7
50513: PUSH
50514: LD_INT 8
50516: PUSH
50517: LD_INT 9
50519: PUSH
50520: LD_INT 10
50522: PUSH
50523: LD_INT 11
50525: PUSH
50526: LD_INT 12
50528: PUSH
50529: LD_INT 13
50531: PUSH
50532: LD_INT 14
50534: PUSH
50535: LD_INT 15
50537: PUSH
50538: LD_INT 16
50540: PUSH
50541: LD_INT 17
50543: PUSH
50544: LD_INT 18
50546: PUSH
50547: LD_INT 19
50549: PUSH
50550: LD_INT 20
50552: PUSH
50553: LD_INT 21
50555: PUSH
50556: LD_INT 22
50558: PUSH
50559: LD_INT 23
50561: PUSH
50562: LD_INT 24
50564: PUSH
50565: LD_INT 25
50567: PUSH
50568: LD_INT 26
50570: PUSH
50571: LD_INT 27
50573: PUSH
50574: LD_INT 28
50576: PUSH
50577: LD_INT 29
50579: PUSH
50580: LD_INT 30
50582: PUSH
50583: LD_INT 31
50585: PUSH
50586: LD_INT 32
50588: PUSH
50589: LD_INT 33
50591: PUSH
50592: LD_INT 34
50594: PUSH
50595: LD_INT 36
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 101
50637: PUSH
50638: LD_INT 102
50640: PUSH
50641: LD_INT 103
50643: PUSH
50644: LD_INT 104
50646: PUSH
50647: LD_INT 105
50649: PUSH
50650: LD_INT 106
50652: PUSH
50653: LD_INT 107
50655: PUSH
50656: LD_INT 108
50658: PUSH
50659: LD_INT 109
50661: PUSH
50662: LD_INT 110
50664: PUSH
50665: LD_INT 111
50667: PUSH
50668: LD_INT 112
50670: PUSH
50671: LD_INT 113
50673: PUSH
50674: LD_INT 114
50676: PUSH
50677: LD_INT 116
50679: PUSH
50680: LD_INT 117
50682: PUSH
50683: LD_INT 118
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: ST_TO_ADDR
50709: GO 51716
50711: LD_INT 15
50713: DOUBLE
50714: EQUAL
50715: IFTRUE 50719
50717: GO 50943
50719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50720: LD_ADDR_VAR 0 2
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: LD_INT 4
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: LD_INT 6
50742: PUSH
50743: LD_INT 7
50745: PUSH
50746: LD_INT 8
50748: PUSH
50749: LD_INT 9
50751: PUSH
50752: LD_INT 10
50754: PUSH
50755: LD_INT 11
50757: PUSH
50758: LD_INT 12
50760: PUSH
50761: LD_INT 13
50763: PUSH
50764: LD_INT 14
50766: PUSH
50767: LD_INT 15
50769: PUSH
50770: LD_INT 16
50772: PUSH
50773: LD_INT 17
50775: PUSH
50776: LD_INT 18
50778: PUSH
50779: LD_INT 19
50781: PUSH
50782: LD_INT 20
50784: PUSH
50785: LD_INT 21
50787: PUSH
50788: LD_INT 22
50790: PUSH
50791: LD_INT 23
50793: PUSH
50794: LD_INT 24
50796: PUSH
50797: LD_INT 25
50799: PUSH
50800: LD_INT 26
50802: PUSH
50803: LD_INT 27
50805: PUSH
50806: LD_INT 28
50808: PUSH
50809: LD_INT 29
50811: PUSH
50812: LD_INT 30
50814: PUSH
50815: LD_INT 31
50817: PUSH
50818: LD_INT 32
50820: PUSH
50821: LD_INT 33
50823: PUSH
50824: LD_INT 34
50826: PUSH
50827: LD_INT 36
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 101
50869: PUSH
50870: LD_INT 102
50872: PUSH
50873: LD_INT 103
50875: PUSH
50876: LD_INT 104
50878: PUSH
50879: LD_INT 105
50881: PUSH
50882: LD_INT 106
50884: PUSH
50885: LD_INT 107
50887: PUSH
50888: LD_INT 108
50890: PUSH
50891: LD_INT 109
50893: PUSH
50894: LD_INT 110
50896: PUSH
50897: LD_INT 111
50899: PUSH
50900: LD_INT 112
50902: PUSH
50903: LD_INT 113
50905: PUSH
50906: LD_INT 114
50908: PUSH
50909: LD_INT 116
50911: PUSH
50912: LD_INT 117
50914: PUSH
50915: LD_INT 118
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: ST_TO_ADDR
50941: GO 51716
50943: LD_INT 16
50945: DOUBLE
50946: EQUAL
50947: IFTRUE 50951
50949: GO 51087
50951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50952: LD_ADDR_VAR 0 2
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: LD_INT 4
50962: PUSH
50963: LD_INT 5
50965: PUSH
50966: LD_INT 7
50968: PUSH
50969: LD_INT 11
50971: PUSH
50972: LD_INT 12
50974: PUSH
50975: LD_INT 15
50977: PUSH
50978: LD_INT 16
50980: PUSH
50981: LD_INT 20
50983: PUSH
50984: LD_INT 21
50986: PUSH
50987: LD_INT 22
50989: PUSH
50990: LD_INT 23
50992: PUSH
50993: LD_INT 25
50995: PUSH
50996: LD_INT 26
50998: PUSH
50999: LD_INT 30
51001: PUSH
51002: LD_INT 31
51004: PUSH
51005: LD_INT 32
51007: PUSH
51008: LD_INT 33
51010: PUSH
51011: LD_INT 34
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 101
51037: PUSH
51038: LD_INT 102
51040: PUSH
51041: LD_INT 103
51043: PUSH
51044: LD_INT 106
51046: PUSH
51047: LD_INT 108
51049: PUSH
51050: LD_INT 112
51052: PUSH
51053: LD_INT 113
51055: PUSH
51056: LD_INT 114
51058: PUSH
51059: LD_INT 116
51061: PUSH
51062: LD_INT 117
51064: PUSH
51065: LD_INT 118
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: ST_TO_ADDR
51085: GO 51716
51087: LD_INT 17
51089: DOUBLE
51090: EQUAL
51091: IFTRUE 51095
51093: GO 51319
51095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51096: LD_ADDR_VAR 0 2
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: LD_INT 5
51115: PUSH
51116: LD_INT 6
51118: PUSH
51119: LD_INT 7
51121: PUSH
51122: LD_INT 8
51124: PUSH
51125: LD_INT 9
51127: PUSH
51128: LD_INT 10
51130: PUSH
51131: LD_INT 11
51133: PUSH
51134: LD_INT 12
51136: PUSH
51137: LD_INT 13
51139: PUSH
51140: LD_INT 14
51142: PUSH
51143: LD_INT 15
51145: PUSH
51146: LD_INT 16
51148: PUSH
51149: LD_INT 17
51151: PUSH
51152: LD_INT 18
51154: PUSH
51155: LD_INT 19
51157: PUSH
51158: LD_INT 20
51160: PUSH
51161: LD_INT 21
51163: PUSH
51164: LD_INT 22
51166: PUSH
51167: LD_INT 23
51169: PUSH
51170: LD_INT 24
51172: PUSH
51173: LD_INT 25
51175: PUSH
51176: LD_INT 26
51178: PUSH
51179: LD_INT 27
51181: PUSH
51182: LD_INT 28
51184: PUSH
51185: LD_INT 29
51187: PUSH
51188: LD_INT 30
51190: PUSH
51191: LD_INT 31
51193: PUSH
51194: LD_INT 32
51196: PUSH
51197: LD_INT 33
51199: PUSH
51200: LD_INT 34
51202: PUSH
51203: LD_INT 36
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 101
51245: PUSH
51246: LD_INT 102
51248: PUSH
51249: LD_INT 103
51251: PUSH
51252: LD_INT 104
51254: PUSH
51255: LD_INT 105
51257: PUSH
51258: LD_INT 106
51260: PUSH
51261: LD_INT 107
51263: PUSH
51264: LD_INT 108
51266: PUSH
51267: LD_INT 109
51269: PUSH
51270: LD_INT 110
51272: PUSH
51273: LD_INT 111
51275: PUSH
51276: LD_INT 112
51278: PUSH
51279: LD_INT 113
51281: PUSH
51282: LD_INT 114
51284: PUSH
51285: LD_INT 116
51287: PUSH
51288: LD_INT 117
51290: PUSH
51291: LD_INT 118
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: ST_TO_ADDR
51317: GO 51716
51319: LD_INT 18
51321: DOUBLE
51322: EQUAL
51323: IFTRUE 51327
51325: GO 51475
51327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
51328: LD_ADDR_VAR 0 2
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 4
51338: PUSH
51339: LD_INT 5
51341: PUSH
51342: LD_INT 7
51344: PUSH
51345: LD_INT 11
51347: PUSH
51348: LD_INT 12
51350: PUSH
51351: LD_INT 15
51353: PUSH
51354: LD_INT 16
51356: PUSH
51357: LD_INT 20
51359: PUSH
51360: LD_INT 21
51362: PUSH
51363: LD_INT 22
51365: PUSH
51366: LD_INT 23
51368: PUSH
51369: LD_INT 25
51371: PUSH
51372: LD_INT 26
51374: PUSH
51375: LD_INT 30
51377: PUSH
51378: LD_INT 31
51380: PUSH
51381: LD_INT 32
51383: PUSH
51384: LD_INT 33
51386: PUSH
51387: LD_INT 34
51389: PUSH
51390: LD_INT 35
51392: PUSH
51393: LD_INT 36
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 101
51421: PUSH
51422: LD_INT 102
51424: PUSH
51425: LD_INT 103
51427: PUSH
51428: LD_INT 106
51430: PUSH
51431: LD_INT 108
51433: PUSH
51434: LD_INT 112
51436: PUSH
51437: LD_INT 113
51439: PUSH
51440: LD_INT 114
51442: PUSH
51443: LD_INT 115
51445: PUSH
51446: LD_INT 116
51448: PUSH
51449: LD_INT 117
51451: PUSH
51452: LD_INT 118
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: ST_TO_ADDR
51473: GO 51716
51475: LD_INT 19
51477: DOUBLE
51478: EQUAL
51479: IFTRUE 51483
51481: GO 51715
51483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51484: LD_ADDR_VAR 0 2
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 3
51497: PUSH
51498: LD_INT 4
51500: PUSH
51501: LD_INT 5
51503: PUSH
51504: LD_INT 6
51506: PUSH
51507: LD_INT 7
51509: PUSH
51510: LD_INT 8
51512: PUSH
51513: LD_INT 9
51515: PUSH
51516: LD_INT 10
51518: PUSH
51519: LD_INT 11
51521: PUSH
51522: LD_INT 12
51524: PUSH
51525: LD_INT 13
51527: PUSH
51528: LD_INT 14
51530: PUSH
51531: LD_INT 15
51533: PUSH
51534: LD_INT 16
51536: PUSH
51537: LD_INT 17
51539: PUSH
51540: LD_INT 18
51542: PUSH
51543: LD_INT 19
51545: PUSH
51546: LD_INT 20
51548: PUSH
51549: LD_INT 21
51551: PUSH
51552: LD_INT 22
51554: PUSH
51555: LD_INT 23
51557: PUSH
51558: LD_INT 24
51560: PUSH
51561: LD_INT 25
51563: PUSH
51564: LD_INT 26
51566: PUSH
51567: LD_INT 27
51569: PUSH
51570: LD_INT 28
51572: PUSH
51573: LD_INT 29
51575: PUSH
51576: LD_INT 30
51578: PUSH
51579: LD_INT 31
51581: PUSH
51582: LD_INT 32
51584: PUSH
51585: LD_INT 33
51587: PUSH
51588: LD_INT 34
51590: PUSH
51591: LD_INT 35
51593: PUSH
51594: LD_INT 36
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 101
51637: PUSH
51638: LD_INT 102
51640: PUSH
51641: LD_INT 103
51643: PUSH
51644: LD_INT 104
51646: PUSH
51647: LD_INT 105
51649: PUSH
51650: LD_INT 106
51652: PUSH
51653: LD_INT 107
51655: PUSH
51656: LD_INT 108
51658: PUSH
51659: LD_INT 109
51661: PUSH
51662: LD_INT 110
51664: PUSH
51665: LD_INT 111
51667: PUSH
51668: LD_INT 112
51670: PUSH
51671: LD_INT 113
51673: PUSH
51674: LD_INT 114
51676: PUSH
51677: LD_INT 115
51679: PUSH
51680: LD_INT 116
51682: PUSH
51683: LD_INT 117
51685: PUSH
51686: LD_INT 118
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: ST_TO_ADDR
51713: GO 51716
51715: POP
// end else
51716: GO 51947
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51718: LD_ADDR_VAR 0 2
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 4
51734: PUSH
51735: LD_INT 5
51737: PUSH
51738: LD_INT 6
51740: PUSH
51741: LD_INT 7
51743: PUSH
51744: LD_INT 8
51746: PUSH
51747: LD_INT 9
51749: PUSH
51750: LD_INT 10
51752: PUSH
51753: LD_INT 11
51755: PUSH
51756: LD_INT 12
51758: PUSH
51759: LD_INT 13
51761: PUSH
51762: LD_INT 14
51764: PUSH
51765: LD_INT 15
51767: PUSH
51768: LD_INT 16
51770: PUSH
51771: LD_INT 17
51773: PUSH
51774: LD_INT 18
51776: PUSH
51777: LD_INT 19
51779: PUSH
51780: LD_INT 20
51782: PUSH
51783: LD_INT 21
51785: PUSH
51786: LD_INT 22
51788: PUSH
51789: LD_INT 23
51791: PUSH
51792: LD_INT 24
51794: PUSH
51795: LD_INT 25
51797: PUSH
51798: LD_INT 26
51800: PUSH
51801: LD_INT 27
51803: PUSH
51804: LD_INT 28
51806: PUSH
51807: LD_INT 29
51809: PUSH
51810: LD_INT 30
51812: PUSH
51813: LD_INT 31
51815: PUSH
51816: LD_INT 32
51818: PUSH
51819: LD_INT 33
51821: PUSH
51822: LD_INT 34
51824: PUSH
51825: LD_INT 35
51827: PUSH
51828: LD_INT 36
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 101
51871: PUSH
51872: LD_INT 102
51874: PUSH
51875: LD_INT 103
51877: PUSH
51878: LD_INT 104
51880: PUSH
51881: LD_INT 105
51883: PUSH
51884: LD_INT 106
51886: PUSH
51887: LD_INT 107
51889: PUSH
51890: LD_INT 108
51892: PUSH
51893: LD_INT 109
51895: PUSH
51896: LD_INT 110
51898: PUSH
51899: LD_INT 111
51901: PUSH
51902: LD_INT 112
51904: PUSH
51905: LD_INT 113
51907: PUSH
51908: LD_INT 114
51910: PUSH
51911: LD_INT 115
51913: PUSH
51914: LD_INT 116
51916: PUSH
51917: LD_INT 117
51919: PUSH
51920: LD_INT 118
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// if result then
51947: LD_VAR 0 2
51951: IFFALSE 52737
// begin normal :=  ;
51953: LD_ADDR_VAR 0 5
51957: PUSH
51958: LD_STRING 
51960: ST_TO_ADDR
// hardcore :=  ;
51961: LD_ADDR_VAR 0 6
51965: PUSH
51966: LD_STRING 
51968: ST_TO_ADDR
// active :=  ;
51969: LD_ADDR_VAR 0 7
51973: PUSH
51974: LD_STRING 
51976: ST_TO_ADDR
// for i = 1 to normalCounter do
51977: LD_ADDR_VAR 0 8
51981: PUSH
51982: DOUBLE
51983: LD_INT 1
51985: DEC
51986: ST_TO_ADDR
51987: LD_EXP 29
51991: PUSH
51992: FOR_TO
51993: IFFALSE 52094
// begin tmp := 0 ;
51995: LD_ADDR_VAR 0 3
51999: PUSH
52000: LD_STRING 0
52002: ST_TO_ADDR
// if result [ 1 ] then
52003: LD_VAR 0 2
52007: PUSH
52008: LD_INT 1
52010: ARRAY
52011: IFFALSE 52076
// if result [ 1 ] [ 1 ] = i then
52013: LD_VAR 0 2
52017: PUSH
52018: LD_INT 1
52020: ARRAY
52021: PUSH
52022: LD_INT 1
52024: ARRAY
52025: PUSH
52026: LD_VAR 0 8
52030: EQUAL
52031: IFFALSE 52076
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52033: LD_ADDR_VAR 0 2
52037: PUSH
52038: LD_VAR 0 2
52042: PPUSH
52043: LD_INT 1
52045: PPUSH
52046: LD_VAR 0 2
52050: PUSH
52051: LD_INT 1
52053: ARRAY
52054: PPUSH
52055: LD_INT 1
52057: PPUSH
52058: CALL_OW 3
52062: PPUSH
52063: CALL_OW 1
52067: ST_TO_ADDR
// tmp := 1 ;
52068: LD_ADDR_VAR 0 3
52072: PUSH
52073: LD_STRING 1
52075: ST_TO_ADDR
// end ; normal := normal & tmp ;
52076: LD_ADDR_VAR 0 5
52080: PUSH
52081: LD_VAR 0 5
52085: PUSH
52086: LD_VAR 0 3
52090: STR
52091: ST_TO_ADDR
// end ;
52092: GO 51992
52094: POP
52095: POP
// for i = 1 to hardcoreCounter do
52096: LD_ADDR_VAR 0 8
52100: PUSH
52101: DOUBLE
52102: LD_INT 1
52104: DEC
52105: ST_TO_ADDR
52106: LD_EXP 30
52110: PUSH
52111: FOR_TO
52112: IFFALSE 52217
// begin tmp := 0 ;
52114: LD_ADDR_VAR 0 3
52118: PUSH
52119: LD_STRING 0
52121: ST_TO_ADDR
// if result [ 2 ] then
52122: LD_VAR 0 2
52126: PUSH
52127: LD_INT 2
52129: ARRAY
52130: IFFALSE 52199
// if result [ 2 ] [ 1 ] = 100 + i then
52132: LD_VAR 0 2
52136: PUSH
52137: LD_INT 2
52139: ARRAY
52140: PUSH
52141: LD_INT 1
52143: ARRAY
52144: PUSH
52145: LD_INT 100
52147: PUSH
52148: LD_VAR 0 8
52152: PLUS
52153: EQUAL
52154: IFFALSE 52199
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52156: LD_ADDR_VAR 0 2
52160: PUSH
52161: LD_VAR 0 2
52165: PPUSH
52166: LD_INT 2
52168: PPUSH
52169: LD_VAR 0 2
52173: PUSH
52174: LD_INT 2
52176: ARRAY
52177: PPUSH
52178: LD_INT 1
52180: PPUSH
52181: CALL_OW 3
52185: PPUSH
52186: CALL_OW 1
52190: ST_TO_ADDR
// tmp := 1 ;
52191: LD_ADDR_VAR 0 3
52195: PUSH
52196: LD_STRING 1
52198: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
52199: LD_ADDR_VAR 0 6
52203: PUSH
52204: LD_VAR 0 6
52208: PUSH
52209: LD_VAR 0 3
52213: STR
52214: ST_TO_ADDR
// end ;
52215: GO 52111
52217: POP
52218: POP
// if isGameLoad then
52219: LD_VAR 0 1
52223: IFFALSE 52698
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
52225: LD_ADDR_VAR 0 4
52229: PUSH
52230: LD_EXP 33
52234: PUSH
52235: LD_EXP 32
52239: PUSH
52240: LD_EXP 34
52244: PUSH
52245: LD_EXP 31
52249: PUSH
52250: LD_EXP 35
52254: PUSH
52255: LD_EXP 36
52259: PUSH
52260: LD_EXP 37
52264: PUSH
52265: LD_EXP 38
52269: PUSH
52270: LD_EXP 39
52274: PUSH
52275: LD_EXP 40
52279: PUSH
52280: LD_EXP 41
52284: PUSH
52285: LD_EXP 42
52289: PUSH
52290: LD_EXP 43
52294: PUSH
52295: LD_EXP 44
52299: PUSH
52300: LD_EXP 52
52304: PUSH
52305: LD_EXP 53
52309: PUSH
52310: LD_EXP 54
52314: PUSH
52315: LD_EXP 55
52319: PUSH
52320: LD_EXP 57
52324: PUSH
52325: LD_EXP 58
52329: PUSH
52330: LD_EXP 59
52334: PUSH
52335: LD_EXP 62
52339: PUSH
52340: LD_EXP 64
52344: PUSH
52345: LD_EXP 65
52349: PUSH
52350: LD_EXP 66
52354: PUSH
52355: LD_EXP 68
52359: PUSH
52360: LD_EXP 69
52364: PUSH
52365: LD_EXP 72
52369: PUSH
52370: LD_EXP 73
52374: PUSH
52375: LD_EXP 74
52379: PUSH
52380: LD_EXP 75
52384: PUSH
52385: LD_EXP 76
52389: PUSH
52390: LD_EXP 77
52394: PUSH
52395: LD_EXP 78
52399: PUSH
52400: LD_EXP 79
52404: PUSH
52405: LD_EXP 80
52409: PUSH
52410: LD_EXP 45
52414: PUSH
52415: LD_EXP 46
52419: PUSH
52420: LD_EXP 49
52424: PUSH
52425: LD_EXP 50
52429: PUSH
52430: LD_EXP 51
52434: PUSH
52435: LD_EXP 47
52439: PUSH
52440: LD_EXP 48
52444: PUSH
52445: LD_EXP 56
52449: PUSH
52450: LD_EXP 60
52454: PUSH
52455: LD_EXP 61
52459: PUSH
52460: LD_EXP 63
52464: PUSH
52465: LD_EXP 67
52469: PUSH
52470: LD_EXP 70
52474: PUSH
52475: LD_EXP 71
52479: PUSH
52480: LD_EXP 81
52484: PUSH
52485: LD_EXP 82
52489: PUSH
52490: LD_EXP 83
52494: PUSH
52495: LD_EXP 84
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: ST_TO_ADDR
// tmp :=  ;
52556: LD_ADDR_VAR 0 3
52560: PUSH
52561: LD_STRING 
52563: ST_TO_ADDR
// for i = 1 to normalCounter do
52564: LD_ADDR_VAR 0 8
52568: PUSH
52569: DOUBLE
52570: LD_INT 1
52572: DEC
52573: ST_TO_ADDR
52574: LD_EXP 29
52578: PUSH
52579: FOR_TO
52580: IFFALSE 52616
// begin if flags [ i ] then
52582: LD_VAR 0 4
52586: PUSH
52587: LD_VAR 0 8
52591: ARRAY
52592: IFFALSE 52614
// tmp := tmp & i & ; ;
52594: LD_ADDR_VAR 0 3
52598: PUSH
52599: LD_VAR 0 3
52603: PUSH
52604: LD_VAR 0 8
52608: STR
52609: PUSH
52610: LD_STRING ;
52612: STR
52613: ST_TO_ADDR
// end ;
52614: GO 52579
52616: POP
52617: POP
// for i = 1 to hardcoreCounter do
52618: LD_ADDR_VAR 0 8
52622: PUSH
52623: DOUBLE
52624: LD_INT 1
52626: DEC
52627: ST_TO_ADDR
52628: LD_EXP 30
52632: PUSH
52633: FOR_TO
52634: IFFALSE 52680
// begin if flags [ normalCounter + i ] then
52636: LD_VAR 0 4
52640: PUSH
52641: LD_EXP 29
52645: PUSH
52646: LD_VAR 0 8
52650: PLUS
52651: ARRAY
52652: IFFALSE 52678
// tmp := tmp & ( 100 + i ) & ; ;
52654: LD_ADDR_VAR 0 3
52658: PUSH
52659: LD_VAR 0 3
52663: PUSH
52664: LD_INT 100
52666: PUSH
52667: LD_VAR 0 8
52671: PLUS
52672: STR
52673: PUSH
52674: LD_STRING ;
52676: STR
52677: ST_TO_ADDR
// end ;
52678: GO 52633
52680: POP
52681: POP
// if tmp then
52682: LD_VAR 0 3
52686: IFFALSE 52698
// active := tmp ;
52688: LD_ADDR_VAR 0 7
52692: PUSH
52693: LD_VAR 0 3
52697: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52698: LD_STRING getStreamItemsFromMission("
52700: PUSH
52701: LD_VAR 0 5
52705: STR
52706: PUSH
52707: LD_STRING ","
52709: STR
52710: PUSH
52711: LD_VAR 0 6
52715: STR
52716: PUSH
52717: LD_STRING ","
52719: STR
52720: PUSH
52721: LD_VAR 0 7
52725: STR
52726: PUSH
52727: LD_STRING ")
52729: STR
52730: PPUSH
52731: CALL_OW 559
// end else
52735: GO 52744
// ToLua ( getStreamItemsFromMission("","","") ) ;
52737: LD_STRING getStreamItemsFromMission("","","")
52739: PPUSH
52740: CALL_OW 559
// end ;
52744: LD_VAR 0 2
52748: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52749: LD_EXP 28
52753: PUSH
52754: LD_EXP 33
52758: AND
52759: IFFALSE 52883
52761: GO 52763
52763: DISABLE
52764: LD_INT 0
52766: PPUSH
52767: PPUSH
// begin enable ;
52768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52769: LD_ADDR_VAR 0 2
52773: PUSH
52774: LD_INT 22
52776: PUSH
52777: LD_OWVAR 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 34
52791: PUSH
52792: LD_INT 7
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 34
52801: PUSH
52802: LD_INT 45
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 34
52811: PUSH
52812: LD_INT 28
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 34
52821: PUSH
52822: LD_INT 47
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PPUSH
52840: CALL_OW 69
52844: ST_TO_ADDR
// if not tmp then
52845: LD_VAR 0 2
52849: NOT
52850: IFFALSE 52854
// exit ;
52852: GO 52883
// for i in tmp do
52854: LD_ADDR_VAR 0 1
52858: PUSH
52859: LD_VAR 0 2
52863: PUSH
52864: FOR_IN
52865: IFFALSE 52881
// begin SetLives ( i , 0 ) ;
52867: LD_VAR 0 1
52871: PPUSH
52872: LD_INT 0
52874: PPUSH
52875: CALL_OW 234
// end ;
52879: GO 52864
52881: POP
52882: POP
// end ;
52883: PPOPN 2
52885: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52886: LD_EXP 28
52890: PUSH
52891: LD_EXP 34
52895: AND
52896: IFFALSE 52980
52898: GO 52900
52900: DISABLE
52901: LD_INT 0
52903: PPUSH
52904: PPUSH
// begin enable ;
52905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52906: LD_ADDR_VAR 0 2
52910: PUSH
52911: LD_INT 22
52913: PUSH
52914: LD_OWVAR 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 32
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PPUSH
52937: CALL_OW 69
52941: ST_TO_ADDR
// if not tmp then
52942: LD_VAR 0 2
52946: NOT
52947: IFFALSE 52951
// exit ;
52949: GO 52980
// for i in tmp do
52951: LD_ADDR_VAR 0 1
52955: PUSH
52956: LD_VAR 0 2
52960: PUSH
52961: FOR_IN
52962: IFFALSE 52978
// begin SetLives ( i , 0 ) ;
52964: LD_VAR 0 1
52968: PPUSH
52969: LD_INT 0
52971: PPUSH
52972: CALL_OW 234
// end ;
52976: GO 52961
52978: POP
52979: POP
// end ;
52980: PPOPN 2
52982: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52983: LD_EXP 28
52987: PUSH
52988: LD_EXP 31
52992: AND
52993: IFFALSE 53086
52995: GO 52997
52997: DISABLE
52998: LD_INT 0
53000: PPUSH
// begin enable ;
53001: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53002: LD_ADDR_VAR 0 1
53006: PUSH
53007: LD_INT 22
53009: PUSH
53010: LD_OWVAR 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 25
53024: PUSH
53025: LD_INT 5
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 25
53034: PUSH
53035: LD_INT 9
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 25
53044: PUSH
53045: LD_INT 8
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PPUSH
53062: CALL_OW 69
53066: PUSH
53067: FOR_IN
53068: IFFALSE 53084
// begin SetClass ( i , 1 ) ;
53070: LD_VAR 0 1
53074: PPUSH
53075: LD_INT 1
53077: PPUSH
53078: CALL_OW 336
// end ;
53082: GO 53067
53084: POP
53085: POP
// end ;
53086: PPOPN 1
53088: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53089: LD_EXP 28
53093: PUSH
53094: LD_EXP 32
53098: AND
53099: PUSH
53100: LD_OWVAR 65
53104: PUSH
53105: LD_INT 7
53107: LESS
53108: AND
53109: IFFALSE 53123
53111: GO 53113
53113: DISABLE
// begin enable ;
53114: ENABLE
// game_speed := 7 ;
53115: LD_ADDR_OWVAR 65
53119: PUSH
53120: LD_INT 7
53122: ST_TO_ADDR
// end ;
53123: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53124: LD_EXP 28
53128: PUSH
53129: LD_EXP 35
53133: AND
53134: IFFALSE 53336
53136: GO 53138
53138: DISABLE
53139: LD_INT 0
53141: PPUSH
53142: PPUSH
53143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53144: LD_ADDR_VAR 0 3
53148: PUSH
53149: LD_INT 81
53151: PUSH
53152: LD_OWVAR 2
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 21
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PPUSH
53175: CALL_OW 69
53179: ST_TO_ADDR
// if not tmp then
53180: LD_VAR 0 3
53184: NOT
53185: IFFALSE 53189
// exit ;
53187: GO 53336
// if tmp > 5 then
53189: LD_VAR 0 3
53193: PUSH
53194: LD_INT 5
53196: GREATER
53197: IFFALSE 53209
// k := 5 else
53199: LD_ADDR_VAR 0 2
53203: PUSH
53204: LD_INT 5
53206: ST_TO_ADDR
53207: GO 53219
// k := tmp ;
53209: LD_ADDR_VAR 0 2
53213: PUSH
53214: LD_VAR 0 3
53218: ST_TO_ADDR
// for i := 1 to k do
53219: LD_ADDR_VAR 0 1
53223: PUSH
53224: DOUBLE
53225: LD_INT 1
53227: DEC
53228: ST_TO_ADDR
53229: LD_VAR 0 2
53233: PUSH
53234: FOR_TO
53235: IFFALSE 53334
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
53237: LD_VAR 0 3
53241: PUSH
53242: LD_VAR 0 1
53246: ARRAY
53247: PPUSH
53248: LD_VAR 0 1
53252: PUSH
53253: LD_INT 4
53255: MOD
53256: PUSH
53257: LD_INT 1
53259: PLUS
53260: PPUSH
53261: CALL_OW 259
53265: PUSH
53266: LD_INT 10
53268: LESS
53269: IFFALSE 53332
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
53271: LD_VAR 0 3
53275: PUSH
53276: LD_VAR 0 1
53280: ARRAY
53281: PPUSH
53282: LD_VAR 0 1
53286: PUSH
53287: LD_INT 4
53289: MOD
53290: PUSH
53291: LD_INT 1
53293: PLUS
53294: PPUSH
53295: LD_VAR 0 3
53299: PUSH
53300: LD_VAR 0 1
53304: ARRAY
53305: PPUSH
53306: LD_VAR 0 1
53310: PUSH
53311: LD_INT 4
53313: MOD
53314: PUSH
53315: LD_INT 1
53317: PLUS
53318: PPUSH
53319: CALL_OW 259
53323: PUSH
53324: LD_INT 1
53326: PLUS
53327: PPUSH
53328: CALL_OW 237
53332: GO 53234
53334: POP
53335: POP
// end ;
53336: PPOPN 3
53338: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
53339: LD_EXP 28
53343: PUSH
53344: LD_EXP 36
53348: AND
53349: IFFALSE 53369
53351: GO 53353
53353: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
53354: LD_INT 4
53356: PPUSH
53357: LD_OWVAR 2
53361: PPUSH
53362: LD_INT 0
53364: PPUSH
53365: CALL_OW 324
53369: END
// every 0 0$1 trigger StreamModeActive and sShovel do
53370: LD_EXP 28
53374: PUSH
53375: LD_EXP 65
53379: AND
53380: IFFALSE 53400
53382: GO 53384
53384: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
53385: LD_INT 19
53387: PPUSH
53388: LD_OWVAR 2
53392: PPUSH
53393: LD_INT 0
53395: PPUSH
53396: CALL_OW 324
53400: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53401: LD_EXP 28
53405: PUSH
53406: LD_EXP 37
53410: AND
53411: IFFALSE 53513
53413: GO 53415
53415: DISABLE
53416: LD_INT 0
53418: PPUSH
53419: PPUSH
// begin enable ;
53420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53421: LD_ADDR_VAR 0 2
53425: PUSH
53426: LD_INT 22
53428: PUSH
53429: LD_OWVAR 2
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 34
53443: PUSH
53444: LD_INT 11
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 34
53453: PUSH
53454: LD_INT 30
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PPUSH
53470: CALL_OW 69
53474: ST_TO_ADDR
// if not tmp then
53475: LD_VAR 0 2
53479: NOT
53480: IFFALSE 53484
// exit ;
53482: GO 53513
// for i in tmp do
53484: LD_ADDR_VAR 0 1
53488: PUSH
53489: LD_VAR 0 2
53493: PUSH
53494: FOR_IN
53495: IFFALSE 53511
// begin SetLives ( i , 0 ) ;
53497: LD_VAR 0 1
53501: PPUSH
53502: LD_INT 0
53504: PPUSH
53505: CALL_OW 234
// end ;
53509: GO 53494
53511: POP
53512: POP
// end ;
53513: PPOPN 2
53515: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53516: LD_EXP 28
53520: PUSH
53521: LD_EXP 38
53525: AND
53526: IFFALSE 53546
53528: GO 53530
53530: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53531: LD_INT 32
53533: PPUSH
53534: LD_OWVAR 2
53538: PPUSH
53539: LD_INT 0
53541: PPUSH
53542: CALL_OW 324
53546: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53547: LD_EXP 28
53551: PUSH
53552: LD_EXP 39
53556: AND
53557: IFFALSE 53738
53559: GO 53561
53561: DISABLE
53562: LD_INT 0
53564: PPUSH
53565: PPUSH
53566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53567: LD_ADDR_VAR 0 2
53571: PUSH
53572: LD_INT 22
53574: PUSH
53575: LD_OWVAR 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 33
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PPUSH
53598: CALL_OW 69
53602: ST_TO_ADDR
// if not tmp then
53603: LD_VAR 0 2
53607: NOT
53608: IFFALSE 53612
// exit ;
53610: GO 53738
// side := 0 ;
53612: LD_ADDR_VAR 0 3
53616: PUSH
53617: LD_INT 0
53619: ST_TO_ADDR
// for i := 1 to 8 do
53620: LD_ADDR_VAR 0 1
53624: PUSH
53625: DOUBLE
53626: LD_INT 1
53628: DEC
53629: ST_TO_ADDR
53630: LD_INT 8
53632: PUSH
53633: FOR_TO
53634: IFFALSE 53682
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53636: LD_OWVAR 2
53640: PUSH
53641: LD_VAR 0 1
53645: NONEQUAL
53646: PUSH
53647: LD_OWVAR 2
53651: PPUSH
53652: LD_VAR 0 1
53656: PPUSH
53657: CALL_OW 81
53661: PUSH
53662: LD_INT 2
53664: EQUAL
53665: AND
53666: IFFALSE 53680
// begin side := i ;
53668: LD_ADDR_VAR 0 3
53672: PUSH
53673: LD_VAR 0 1
53677: ST_TO_ADDR
// break ;
53678: GO 53682
// end ;
53680: GO 53633
53682: POP
53683: POP
// if not side then
53684: LD_VAR 0 3
53688: NOT
53689: IFFALSE 53693
// exit ;
53691: GO 53738
// for i := 1 to tmp do
53693: LD_ADDR_VAR 0 1
53697: PUSH
53698: DOUBLE
53699: LD_INT 1
53701: DEC
53702: ST_TO_ADDR
53703: LD_VAR 0 2
53707: PUSH
53708: FOR_TO
53709: IFFALSE 53736
// if Prob ( 60 ) then
53711: LD_INT 60
53713: PPUSH
53714: CALL_OW 13
53718: IFFALSE 53734
// SetSide ( i , side ) ;
53720: LD_VAR 0 1
53724: PPUSH
53725: LD_VAR 0 3
53729: PPUSH
53730: CALL_OW 235
53734: GO 53708
53736: POP
53737: POP
// end ;
53738: PPOPN 3
53740: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53741: LD_EXP 28
53745: PUSH
53746: LD_EXP 41
53750: AND
53751: IFFALSE 53870
53753: GO 53755
53755: DISABLE
53756: LD_INT 0
53758: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53759: LD_ADDR_VAR 0 1
53763: PUSH
53764: LD_INT 22
53766: PUSH
53767: LD_OWVAR 2
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 21
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: LD_INT 23
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: PPUSH
53808: CALL_OW 69
53812: PUSH
53813: FOR_IN
53814: IFFALSE 53868
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53816: LD_VAR 0 1
53820: PPUSH
53821: CALL_OW 257
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 4
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: IN
53844: IFFALSE 53866
// SetClass ( un , rand ( 1 , 4 ) ) ;
53846: LD_VAR 0 1
53850: PPUSH
53851: LD_INT 1
53853: PPUSH
53854: LD_INT 4
53856: PPUSH
53857: CALL_OW 12
53861: PPUSH
53862: CALL_OW 336
53866: GO 53813
53868: POP
53869: POP
// end ;
53870: PPOPN 1
53872: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53873: LD_EXP 28
53877: PUSH
53878: LD_EXP 40
53882: AND
53883: IFFALSE 53962
53885: GO 53887
53887: DISABLE
53888: LD_INT 0
53890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53891: LD_ADDR_VAR 0 1
53895: PUSH
53896: LD_INT 22
53898: PUSH
53899: LD_OWVAR 2
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 21
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PPUSH
53922: CALL_OW 69
53926: ST_TO_ADDR
// if not tmp then
53927: LD_VAR 0 1
53931: NOT
53932: IFFALSE 53936
// exit ;
53934: GO 53962
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53936: LD_VAR 0 1
53940: PUSH
53941: LD_INT 1
53943: PPUSH
53944: LD_VAR 0 1
53948: PPUSH
53949: CALL_OW 12
53953: ARRAY
53954: PPUSH
53955: LD_INT 100
53957: PPUSH
53958: CALL_OW 234
// end ;
53962: PPOPN 1
53964: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53965: LD_EXP 28
53969: PUSH
53970: LD_EXP 42
53974: AND
53975: IFFALSE 54073
53977: GO 53979
53979: DISABLE
53980: LD_INT 0
53982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53983: LD_ADDR_VAR 0 1
53987: PUSH
53988: LD_INT 22
53990: PUSH
53991: LD_OWVAR 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 21
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PPUSH
54014: CALL_OW 69
54018: ST_TO_ADDR
// if not tmp then
54019: LD_VAR 0 1
54023: NOT
54024: IFFALSE 54028
// exit ;
54026: GO 54073
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54028: LD_VAR 0 1
54032: PUSH
54033: LD_INT 1
54035: PPUSH
54036: LD_VAR 0 1
54040: PPUSH
54041: CALL_OW 12
54045: ARRAY
54046: PPUSH
54047: LD_INT 1
54049: PPUSH
54050: LD_INT 4
54052: PPUSH
54053: CALL_OW 12
54057: PPUSH
54058: LD_INT 3000
54060: PPUSH
54061: LD_INT 9000
54063: PPUSH
54064: CALL_OW 12
54068: PPUSH
54069: CALL_OW 492
// end ;
54073: PPOPN 1
54075: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54076: LD_EXP 28
54080: PUSH
54081: LD_EXP 43
54085: AND
54086: IFFALSE 54106
54088: GO 54090
54090: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54091: LD_INT 1
54093: PPUSH
54094: LD_OWVAR 2
54098: PPUSH
54099: LD_INT 0
54101: PPUSH
54102: CALL_OW 324
54106: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54107: LD_EXP 28
54111: PUSH
54112: LD_EXP 44
54116: AND
54117: IFFALSE 54200
54119: GO 54121
54121: DISABLE
54122: LD_INT 0
54124: PPUSH
54125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54126: LD_ADDR_VAR 0 2
54130: PUSH
54131: LD_INT 22
54133: PUSH
54134: LD_OWVAR 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 21
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PPUSH
54157: CALL_OW 69
54161: ST_TO_ADDR
// if not tmp then
54162: LD_VAR 0 2
54166: NOT
54167: IFFALSE 54171
// exit ;
54169: GO 54200
// for i in tmp do
54171: LD_ADDR_VAR 0 1
54175: PUSH
54176: LD_VAR 0 2
54180: PUSH
54181: FOR_IN
54182: IFFALSE 54198
// SetBLevel ( i , 10 ) ;
54184: LD_VAR 0 1
54188: PPUSH
54189: LD_INT 10
54191: PPUSH
54192: CALL_OW 241
54196: GO 54181
54198: POP
54199: POP
// end ;
54200: PPOPN 2
54202: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
54203: LD_EXP 28
54207: PUSH
54208: LD_EXP 45
54212: AND
54213: IFFALSE 54324
54215: GO 54217
54217: DISABLE
54218: LD_INT 0
54220: PPUSH
54221: PPUSH
54222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54223: LD_ADDR_VAR 0 3
54227: PUSH
54228: LD_INT 22
54230: PUSH
54231: LD_OWVAR 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 25
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PPUSH
54254: CALL_OW 69
54258: ST_TO_ADDR
// if not tmp then
54259: LD_VAR 0 3
54263: NOT
54264: IFFALSE 54268
// exit ;
54266: GO 54324
// un := tmp [ rand ( 1 , tmp ) ] ;
54268: LD_ADDR_VAR 0 2
54272: PUSH
54273: LD_VAR 0 3
54277: PUSH
54278: LD_INT 1
54280: PPUSH
54281: LD_VAR 0 3
54285: PPUSH
54286: CALL_OW 12
54290: ARRAY
54291: ST_TO_ADDR
// if Crawls ( un ) then
54292: LD_VAR 0 2
54296: PPUSH
54297: CALL_OW 318
54301: IFFALSE 54312
// ComWalk ( un ) ;
54303: LD_VAR 0 2
54307: PPUSH
54308: CALL_OW 138
// SetClass ( un , class_sniper ) ;
54312: LD_VAR 0 2
54316: PPUSH
54317: LD_INT 5
54319: PPUSH
54320: CALL_OW 336
// end ;
54324: PPOPN 3
54326: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
54327: LD_EXP 28
54331: PUSH
54332: LD_EXP 46
54336: AND
54337: PUSH
54338: LD_OWVAR 67
54342: PUSH
54343: LD_INT 4
54345: LESS
54346: AND
54347: IFFALSE 54366
54349: GO 54351
54351: DISABLE
// begin Difficulty := Difficulty + 1 ;
54352: LD_ADDR_OWVAR 67
54356: PUSH
54357: LD_OWVAR 67
54361: PUSH
54362: LD_INT 1
54364: PLUS
54365: ST_TO_ADDR
// end ;
54366: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
54367: LD_EXP 28
54371: PUSH
54372: LD_EXP 47
54376: AND
54377: IFFALSE 54480
54379: GO 54381
54381: DISABLE
54382: LD_INT 0
54384: PPUSH
// begin for i := 1 to 5 do
54385: LD_ADDR_VAR 0 1
54389: PUSH
54390: DOUBLE
54391: LD_INT 1
54393: DEC
54394: ST_TO_ADDR
54395: LD_INT 5
54397: PUSH
54398: FOR_TO
54399: IFFALSE 54478
// begin uc_nation := nation_nature ;
54401: LD_ADDR_OWVAR 21
54405: PUSH
54406: LD_INT 0
54408: ST_TO_ADDR
// uc_side := 0 ;
54409: LD_ADDR_OWVAR 20
54413: PUSH
54414: LD_INT 0
54416: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54417: LD_ADDR_OWVAR 29
54421: PUSH
54422: LD_INT 12
54424: PUSH
54425: LD_INT 12
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// hc_agressivity := 20 ;
54432: LD_ADDR_OWVAR 35
54436: PUSH
54437: LD_INT 20
54439: ST_TO_ADDR
// hc_class := class_tiger ;
54440: LD_ADDR_OWVAR 28
54444: PUSH
54445: LD_INT 14
54447: ST_TO_ADDR
// hc_gallery :=  ;
54448: LD_ADDR_OWVAR 33
54452: PUSH
54453: LD_STRING 
54455: ST_TO_ADDR
// hc_name :=  ;
54456: LD_ADDR_OWVAR 26
54460: PUSH
54461: LD_STRING 
54463: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54464: CALL_OW 44
54468: PPUSH
54469: LD_INT 0
54471: PPUSH
54472: CALL_OW 51
// end ;
54476: GO 54398
54478: POP
54479: POP
// end ;
54480: PPOPN 1
54482: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54483: LD_EXP 28
54487: PUSH
54488: LD_EXP 48
54492: AND
54493: IFFALSE 54502
54495: GO 54497
54497: DISABLE
// StreamSibBomb ;
54498: CALL 54503 0 0
54502: END
// export function StreamSibBomb ; var i , x , y ; begin
54503: LD_INT 0
54505: PPUSH
54506: PPUSH
54507: PPUSH
54508: PPUSH
// result := false ;
54509: LD_ADDR_VAR 0 1
54513: PUSH
54514: LD_INT 0
54516: ST_TO_ADDR
// for i := 1 to 16 do
54517: LD_ADDR_VAR 0 2
54521: PUSH
54522: DOUBLE
54523: LD_INT 1
54525: DEC
54526: ST_TO_ADDR
54527: LD_INT 16
54529: PUSH
54530: FOR_TO
54531: IFFALSE 54730
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54533: LD_ADDR_VAR 0 3
54537: PUSH
54538: LD_INT 10
54540: PUSH
54541: LD_INT 20
54543: PUSH
54544: LD_INT 30
54546: PUSH
54547: LD_INT 40
54549: PUSH
54550: LD_INT 50
54552: PUSH
54553: LD_INT 60
54555: PUSH
54556: LD_INT 70
54558: PUSH
54559: LD_INT 80
54561: PUSH
54562: LD_INT 90
54564: PUSH
54565: LD_INT 100
54567: PUSH
54568: LD_INT 110
54570: PUSH
54571: LD_INT 120
54573: PUSH
54574: LD_INT 130
54576: PUSH
54577: LD_INT 140
54579: PUSH
54580: LD_INT 150
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PPUSH
54603: LD_INT 15
54605: PPUSH
54606: CALL_OW 12
54610: ARRAY
54611: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54612: LD_ADDR_VAR 0 4
54616: PUSH
54617: LD_INT 10
54619: PUSH
54620: LD_INT 20
54622: PUSH
54623: LD_INT 30
54625: PUSH
54626: LD_INT 40
54628: PUSH
54629: LD_INT 50
54631: PUSH
54632: LD_INT 60
54634: PUSH
54635: LD_INT 70
54637: PUSH
54638: LD_INT 80
54640: PUSH
54641: LD_INT 90
54643: PUSH
54644: LD_INT 100
54646: PUSH
54647: LD_INT 110
54649: PUSH
54650: LD_INT 120
54652: PUSH
54653: LD_INT 130
54655: PUSH
54656: LD_INT 140
54658: PUSH
54659: LD_INT 150
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PPUSH
54682: LD_INT 15
54684: PPUSH
54685: CALL_OW 12
54689: ARRAY
54690: ST_TO_ADDR
// if ValidHex ( x , y ) then
54691: LD_VAR 0 3
54695: PPUSH
54696: LD_VAR 0 4
54700: PPUSH
54701: CALL_OW 488
54705: IFFALSE 54728
// begin result := [ x , y ] ;
54707: LD_ADDR_VAR 0 1
54711: PUSH
54712: LD_VAR 0 3
54716: PUSH
54717: LD_VAR 0 4
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: ST_TO_ADDR
// break ;
54726: GO 54730
// end ; end ;
54728: GO 54530
54730: POP
54731: POP
// if result then
54732: LD_VAR 0 1
54736: IFFALSE 54796
// begin ToLua ( playSibBomb() ) ;
54738: LD_STRING playSibBomb()
54740: PPUSH
54741: CALL_OW 559
// wait ( 0 0$14 ) ;
54745: LD_INT 490
54747: PPUSH
54748: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54752: LD_VAR 0 1
54756: PUSH
54757: LD_INT 1
54759: ARRAY
54760: PPUSH
54761: LD_VAR 0 1
54765: PUSH
54766: LD_INT 2
54768: ARRAY
54769: PPUSH
54770: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54774: LD_VAR 0 1
54778: PUSH
54779: LD_INT 1
54781: ARRAY
54782: PPUSH
54783: LD_VAR 0 1
54787: PUSH
54788: LD_INT 2
54790: ARRAY
54791: PPUSH
54792: CALL_OW 429
// end ; end ;
54796: LD_VAR 0 1
54800: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54801: LD_EXP 28
54805: PUSH
54806: LD_EXP 50
54810: AND
54811: IFFALSE 54823
54813: GO 54815
54815: DISABLE
// YouLost (  ) ;
54816: LD_STRING 
54818: PPUSH
54819: CALL_OW 104
54823: END
// every 0 0$1 trigger StreamModeActive and sFog do
54824: LD_EXP 28
54828: PUSH
54829: LD_EXP 49
54833: AND
54834: IFFALSE 54848
54836: GO 54838
54838: DISABLE
// FogOff ( your_side ) ;
54839: LD_OWVAR 2
54843: PPUSH
54844: CALL_OW 344
54848: END
// every 0 0$1 trigger StreamModeActive and sSun do
54849: LD_EXP 28
54853: PUSH
54854: LD_EXP 51
54858: AND
54859: IFFALSE 54887
54861: GO 54863
54863: DISABLE
// begin solar_recharge_percent := 0 ;
54864: LD_ADDR_OWVAR 79
54868: PUSH
54869: LD_INT 0
54871: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54872: LD_INT 10500
54874: PPUSH
54875: CALL_OW 67
// solar_recharge_percent := 100 ;
54879: LD_ADDR_OWVAR 79
54883: PUSH
54884: LD_INT 100
54886: ST_TO_ADDR
// end ;
54887: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54888: LD_EXP 28
54892: PUSH
54893: LD_EXP 52
54897: AND
54898: IFFALSE 55137
54900: GO 54902
54902: DISABLE
54903: LD_INT 0
54905: PPUSH
54906: PPUSH
54907: PPUSH
// begin tmp := [ ] ;
54908: LD_ADDR_VAR 0 3
54912: PUSH
54913: EMPTY
54914: ST_TO_ADDR
// for i := 1 to 6 do
54915: LD_ADDR_VAR 0 1
54919: PUSH
54920: DOUBLE
54921: LD_INT 1
54923: DEC
54924: ST_TO_ADDR
54925: LD_INT 6
54927: PUSH
54928: FOR_TO
54929: IFFALSE 55034
// begin uc_nation := nation_nature ;
54931: LD_ADDR_OWVAR 21
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// uc_side := 0 ;
54939: LD_ADDR_OWVAR 20
54943: PUSH
54944: LD_INT 0
54946: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54947: LD_ADDR_OWVAR 29
54951: PUSH
54952: LD_INT 12
54954: PUSH
54955: LD_INT 12
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// hc_agressivity := 20 ;
54962: LD_ADDR_OWVAR 35
54966: PUSH
54967: LD_INT 20
54969: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54970: LD_ADDR_OWVAR 28
54974: PUSH
54975: LD_INT 17
54977: ST_TO_ADDR
// hc_gallery :=  ;
54978: LD_ADDR_OWVAR 33
54982: PUSH
54983: LD_STRING 
54985: ST_TO_ADDR
// hc_name :=  ;
54986: LD_ADDR_OWVAR 26
54990: PUSH
54991: LD_STRING 
54993: ST_TO_ADDR
// un := CreateHuman ;
54994: LD_ADDR_VAR 0 2
54998: PUSH
54999: CALL_OW 44
55003: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55004: LD_VAR 0 2
55008: PPUSH
55009: LD_INT 1
55011: PPUSH
55012: CALL_OW 51
// tmp := tmp ^ un ;
55016: LD_ADDR_VAR 0 3
55020: PUSH
55021: LD_VAR 0 3
55025: PUSH
55026: LD_VAR 0 2
55030: ADD
55031: ST_TO_ADDR
// end ;
55032: GO 54928
55034: POP
55035: POP
// repeat wait ( 0 0$1 ) ;
55036: LD_INT 35
55038: PPUSH
55039: CALL_OW 67
// for un in tmp do
55043: LD_ADDR_VAR 0 2
55047: PUSH
55048: LD_VAR 0 3
55052: PUSH
55053: FOR_IN
55054: IFFALSE 55128
// begin if IsDead ( un ) then
55056: LD_VAR 0 2
55060: PPUSH
55061: CALL_OW 301
55065: IFFALSE 55085
// begin tmp := tmp diff un ;
55067: LD_ADDR_VAR 0 3
55071: PUSH
55072: LD_VAR 0 3
55076: PUSH
55077: LD_VAR 0 2
55081: DIFF
55082: ST_TO_ADDR
// continue ;
55083: GO 55053
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55085: LD_VAR 0 2
55089: PPUSH
55090: LD_INT 3
55092: PUSH
55093: LD_INT 22
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PPUSH
55107: CALL_OW 69
55111: PPUSH
55112: LD_VAR 0 2
55116: PPUSH
55117: CALL_OW 74
55121: PPUSH
55122: CALL_OW 115
// end ;
55126: GO 55053
55128: POP
55129: POP
// until not tmp ;
55130: LD_VAR 0 3
55134: NOT
55135: IFFALSE 55036
// end ;
55137: PPOPN 3
55139: END
// every 0 0$1 trigger StreamModeActive and sTroll do
55140: LD_EXP 28
55144: PUSH
55145: LD_EXP 53
55149: AND
55150: IFFALSE 55204
55152: GO 55154
55154: DISABLE
// begin ToLua ( displayTroll(); ) ;
55155: LD_STRING displayTroll();
55157: PPUSH
55158: CALL_OW 559
// wait ( 3 3$00 ) ;
55162: LD_INT 6300
55164: PPUSH
55165: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55169: LD_STRING hideTroll();
55171: PPUSH
55172: CALL_OW 559
// wait ( 1 1$00 ) ;
55176: LD_INT 2100
55178: PPUSH
55179: CALL_OW 67
// ToLua ( displayTroll(); ) ;
55183: LD_STRING displayTroll();
55185: PPUSH
55186: CALL_OW 559
// wait ( 1 1$00 ) ;
55190: LD_INT 2100
55192: PPUSH
55193: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55197: LD_STRING hideTroll();
55199: PPUSH
55200: CALL_OW 559
// end ;
55204: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
55205: LD_EXP 28
55209: PUSH
55210: LD_EXP 54
55214: AND
55215: IFFALSE 55278
55217: GO 55219
55219: DISABLE
55220: LD_INT 0
55222: PPUSH
// begin p := 0 ;
55223: LD_ADDR_VAR 0 1
55227: PUSH
55228: LD_INT 0
55230: ST_TO_ADDR
// repeat game_speed := 1 ;
55231: LD_ADDR_OWVAR 65
55235: PUSH
55236: LD_INT 1
55238: ST_TO_ADDR
// wait ( 0 0$1 ) ;
55239: LD_INT 35
55241: PPUSH
55242: CALL_OW 67
// p := p + 1 ;
55246: LD_ADDR_VAR 0 1
55250: PUSH
55251: LD_VAR 0 1
55255: PUSH
55256: LD_INT 1
55258: PLUS
55259: ST_TO_ADDR
// until p >= 60 ;
55260: LD_VAR 0 1
55264: PUSH
55265: LD_INT 60
55267: GREATEREQUAL
55268: IFFALSE 55231
// game_speed := 4 ;
55270: LD_ADDR_OWVAR 65
55274: PUSH
55275: LD_INT 4
55277: ST_TO_ADDR
// end ;
55278: PPOPN 1
55280: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
55281: LD_EXP 28
55285: PUSH
55286: LD_EXP 55
55290: AND
55291: IFFALSE 55437
55293: GO 55295
55295: DISABLE
55296: LD_INT 0
55298: PPUSH
55299: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55300: LD_ADDR_VAR 0 1
55304: PUSH
55305: LD_INT 22
55307: PUSH
55308: LD_OWVAR 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 30
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 30
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PPUSH
55349: CALL_OW 69
55353: ST_TO_ADDR
// if not depot then
55354: LD_VAR 0 1
55358: NOT
55359: IFFALSE 55363
// exit ;
55361: GO 55437
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
55363: LD_ADDR_VAR 0 2
55367: PUSH
55368: LD_VAR 0 1
55372: PUSH
55373: LD_INT 1
55375: PPUSH
55376: LD_VAR 0 1
55380: PPUSH
55381: CALL_OW 12
55385: ARRAY
55386: PPUSH
55387: CALL_OW 274
55391: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55392: LD_VAR 0 2
55396: PPUSH
55397: LD_INT 1
55399: PPUSH
55400: LD_INT 0
55402: PPUSH
55403: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55407: LD_VAR 0 2
55411: PPUSH
55412: LD_INT 2
55414: PPUSH
55415: LD_INT 0
55417: PPUSH
55418: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55422: LD_VAR 0 2
55426: PPUSH
55427: LD_INT 3
55429: PPUSH
55430: LD_INT 0
55432: PPUSH
55433: CALL_OW 277
// end ;
55437: PPOPN 2
55439: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55440: LD_EXP 28
55444: PUSH
55445: LD_EXP 56
55449: AND
55450: IFFALSE 55547
55452: GO 55454
55454: DISABLE
55455: LD_INT 0
55457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55458: LD_ADDR_VAR 0 1
55462: PUSH
55463: LD_INT 22
55465: PUSH
55466: LD_OWVAR 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 21
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 23
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: PPUSH
55507: CALL_OW 69
55511: ST_TO_ADDR
// if not tmp then
55512: LD_VAR 0 1
55516: NOT
55517: IFFALSE 55521
// exit ;
55519: GO 55547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55521: LD_VAR 0 1
55525: PUSH
55526: LD_INT 1
55528: PPUSH
55529: LD_VAR 0 1
55533: PPUSH
55534: CALL_OW 12
55538: ARRAY
55539: PPUSH
55540: LD_INT 200
55542: PPUSH
55543: CALL_OW 234
// end ;
55547: PPOPN 1
55549: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55550: LD_EXP 28
55554: PUSH
55555: LD_EXP 57
55559: AND
55560: IFFALSE 55639
55562: GO 55564
55564: DISABLE
55565: LD_INT 0
55567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55568: LD_ADDR_VAR 0 1
55572: PUSH
55573: LD_INT 22
55575: PUSH
55576: LD_OWVAR 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 21
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PPUSH
55599: CALL_OW 69
55603: ST_TO_ADDR
// if not tmp then
55604: LD_VAR 0 1
55608: NOT
55609: IFFALSE 55613
// exit ;
55611: GO 55639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55613: LD_VAR 0 1
55617: PUSH
55618: LD_INT 1
55620: PPUSH
55621: LD_VAR 0 1
55625: PPUSH
55626: CALL_OW 12
55630: ARRAY
55631: PPUSH
55632: LD_INT 60
55634: PPUSH
55635: CALL_OW 234
// end ;
55639: PPOPN 1
55641: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55642: LD_EXP 28
55646: PUSH
55647: LD_EXP 58
55651: AND
55652: IFFALSE 55751
55654: GO 55656
55656: DISABLE
55657: LD_INT 0
55659: PPUSH
55660: PPUSH
// begin enable ;
55661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55662: LD_ADDR_VAR 0 1
55666: PUSH
55667: LD_INT 22
55669: PUSH
55670: LD_OWVAR 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 61
55681: PUSH
55682: EMPTY
55683: LIST
55684: PUSH
55685: LD_INT 33
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: PPUSH
55700: CALL_OW 69
55704: ST_TO_ADDR
// if not tmp then
55705: LD_VAR 0 1
55709: NOT
55710: IFFALSE 55714
// exit ;
55712: GO 55751
// for i in tmp do
55714: LD_ADDR_VAR 0 2
55718: PUSH
55719: LD_VAR 0 1
55723: PUSH
55724: FOR_IN
55725: IFFALSE 55749
// if IsControledBy ( i ) then
55727: LD_VAR 0 2
55731: PPUSH
55732: CALL_OW 312
55736: IFFALSE 55747
// ComUnlink ( i ) ;
55738: LD_VAR 0 2
55742: PPUSH
55743: CALL_OW 136
55747: GO 55724
55749: POP
55750: POP
// end ;
55751: PPOPN 2
55753: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55754: LD_EXP 28
55758: PUSH
55759: LD_EXP 59
55763: AND
55764: IFFALSE 55904
55766: GO 55768
55768: DISABLE
55769: LD_INT 0
55771: PPUSH
55772: PPUSH
// begin ToLua ( displayPowell(); ) ;
55773: LD_STRING displayPowell();
55775: PPUSH
55776: CALL_OW 559
// uc_side := 0 ;
55780: LD_ADDR_OWVAR 20
55784: PUSH
55785: LD_INT 0
55787: ST_TO_ADDR
// uc_nation := 2 ;
55788: LD_ADDR_OWVAR 21
55792: PUSH
55793: LD_INT 2
55795: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55796: LD_ADDR_OWVAR 37
55800: PUSH
55801: LD_INT 14
55803: ST_TO_ADDR
// vc_engine := engine_siberite ;
55804: LD_ADDR_OWVAR 39
55808: PUSH
55809: LD_INT 3
55811: ST_TO_ADDR
// vc_control := control_apeman ;
55812: LD_ADDR_OWVAR 38
55816: PUSH
55817: LD_INT 5
55819: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55820: LD_ADDR_OWVAR 40
55824: PUSH
55825: LD_INT 29
55827: ST_TO_ADDR
// un := CreateVehicle ;
55828: LD_ADDR_VAR 0 2
55832: PUSH
55833: CALL_OW 45
55837: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55838: LD_VAR 0 2
55842: PPUSH
55843: LD_INT 1
55845: PPUSH
55846: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55850: LD_INT 35
55852: PPUSH
55853: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55857: LD_VAR 0 2
55861: PPUSH
55862: LD_INT 22
55864: PUSH
55865: LD_OWVAR 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PPUSH
55874: CALL_OW 69
55878: PPUSH
55879: LD_VAR 0 2
55883: PPUSH
55884: CALL_OW 74
55888: PPUSH
55889: CALL_OW 115
// until IsDead ( un ) ;
55893: LD_VAR 0 2
55897: PPUSH
55898: CALL_OW 301
55902: IFFALSE 55850
// end ;
55904: PPOPN 2
55906: END
// every 0 0$1 trigger StreamModeActive and sStu do
55907: LD_EXP 28
55911: PUSH
55912: LD_EXP 67
55916: AND
55917: IFFALSE 55933
55919: GO 55921
55921: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55922: LD_STRING displayStucuk();
55924: PPUSH
55925: CALL_OW 559
// ResetFog ;
55929: CALL_OW 335
// end ;
55933: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55934: LD_EXP 28
55938: PUSH
55939: LD_EXP 60
55943: AND
55944: IFFALSE 56085
55946: GO 55948
55948: DISABLE
55949: LD_INT 0
55951: PPUSH
55952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55953: LD_ADDR_VAR 0 2
55957: PUSH
55958: LD_INT 22
55960: PUSH
55961: LD_OWVAR 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 21
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PPUSH
55984: CALL_OW 69
55988: ST_TO_ADDR
// if not tmp then
55989: LD_VAR 0 2
55993: NOT
55994: IFFALSE 55998
// exit ;
55996: GO 56085
// un := tmp [ rand ( 1 , tmp ) ] ;
55998: LD_ADDR_VAR 0 1
56002: PUSH
56003: LD_VAR 0 2
56007: PUSH
56008: LD_INT 1
56010: PPUSH
56011: LD_VAR 0 2
56015: PPUSH
56016: CALL_OW 12
56020: ARRAY
56021: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56022: LD_VAR 0 1
56026: PPUSH
56027: LD_INT 0
56029: PPUSH
56030: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56034: LD_VAR 0 1
56038: PPUSH
56039: LD_OWVAR 3
56043: PUSH
56044: LD_VAR 0 1
56048: DIFF
56049: PPUSH
56050: LD_VAR 0 1
56054: PPUSH
56055: CALL_OW 74
56059: PPUSH
56060: CALL_OW 115
// wait ( 0 0$20 ) ;
56064: LD_INT 700
56066: PPUSH
56067: CALL_OW 67
// SetSide ( un , your_side ) ;
56071: LD_VAR 0 1
56075: PPUSH
56076: LD_OWVAR 2
56080: PPUSH
56081: CALL_OW 235
// end ;
56085: PPOPN 2
56087: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56088: LD_EXP 28
56092: PUSH
56093: LD_EXP 61
56097: AND
56098: IFFALSE 56204
56100: GO 56102
56102: DISABLE
56103: LD_INT 0
56105: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56106: LD_ADDR_VAR 0 1
56110: PUSH
56111: LD_INT 22
56113: PUSH
56114: LD_OWVAR 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: LD_INT 30
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 30
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PPUSH
56155: CALL_OW 69
56159: ST_TO_ADDR
// if not depot then
56160: LD_VAR 0 1
56164: NOT
56165: IFFALSE 56169
// exit ;
56167: GO 56204
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
56169: LD_VAR 0 1
56173: PUSH
56174: LD_INT 1
56176: ARRAY
56177: PPUSH
56178: CALL_OW 250
56182: PPUSH
56183: LD_VAR 0 1
56187: PUSH
56188: LD_INT 1
56190: ARRAY
56191: PPUSH
56192: CALL_OW 251
56196: PPUSH
56197: LD_INT 70
56199: PPUSH
56200: CALL_OW 495
// end ;
56204: PPOPN 1
56206: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
56207: LD_EXP 28
56211: PUSH
56212: LD_EXP 62
56216: AND
56217: IFFALSE 56428
56219: GO 56221
56221: DISABLE
56222: LD_INT 0
56224: PPUSH
56225: PPUSH
56226: PPUSH
56227: PPUSH
56228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56229: LD_ADDR_VAR 0 5
56233: PUSH
56234: LD_INT 22
56236: PUSH
56237: LD_OWVAR 2
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 21
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PPUSH
56260: CALL_OW 69
56264: ST_TO_ADDR
// if not tmp then
56265: LD_VAR 0 5
56269: NOT
56270: IFFALSE 56274
// exit ;
56272: GO 56428
// for i in tmp do
56274: LD_ADDR_VAR 0 1
56278: PUSH
56279: LD_VAR 0 5
56283: PUSH
56284: FOR_IN
56285: IFFALSE 56426
// begin d := rand ( 0 , 5 ) ;
56287: LD_ADDR_VAR 0 4
56291: PUSH
56292: LD_INT 0
56294: PPUSH
56295: LD_INT 5
56297: PPUSH
56298: CALL_OW 12
56302: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
56303: LD_ADDR_VAR 0 2
56307: PUSH
56308: LD_VAR 0 1
56312: PPUSH
56313: CALL_OW 250
56317: PPUSH
56318: LD_VAR 0 4
56322: PPUSH
56323: LD_INT 3
56325: PPUSH
56326: LD_INT 12
56328: PPUSH
56329: CALL_OW 12
56333: PPUSH
56334: CALL_OW 272
56338: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
56339: LD_ADDR_VAR 0 3
56343: PUSH
56344: LD_VAR 0 1
56348: PPUSH
56349: CALL_OW 251
56353: PPUSH
56354: LD_VAR 0 4
56358: PPUSH
56359: LD_INT 3
56361: PPUSH
56362: LD_INT 12
56364: PPUSH
56365: CALL_OW 12
56369: PPUSH
56370: CALL_OW 273
56374: ST_TO_ADDR
// if ValidHex ( x , y ) then
56375: LD_VAR 0 2
56379: PPUSH
56380: LD_VAR 0 3
56384: PPUSH
56385: CALL_OW 488
56389: IFFALSE 56424
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56391: LD_VAR 0 1
56395: PPUSH
56396: LD_VAR 0 2
56400: PPUSH
56401: LD_VAR 0 3
56405: PPUSH
56406: LD_INT 3
56408: PPUSH
56409: LD_INT 6
56411: PPUSH
56412: CALL_OW 12
56416: PPUSH
56417: LD_INT 1
56419: PPUSH
56420: CALL_OW 483
// end ;
56424: GO 56284
56426: POP
56427: POP
// end ;
56428: PPOPN 5
56430: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56431: LD_EXP 28
56435: PUSH
56436: LD_EXP 63
56440: AND
56441: IFFALSE 56535
56443: GO 56445
56445: DISABLE
56446: LD_INT 0
56448: PPUSH
56449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56450: LD_ADDR_VAR 0 2
56454: PUSH
56455: LD_INT 22
56457: PUSH
56458: LD_OWVAR 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 32
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 21
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: PPUSH
56492: CALL_OW 69
56496: ST_TO_ADDR
// if not tmp then
56497: LD_VAR 0 2
56501: NOT
56502: IFFALSE 56506
// exit ;
56504: GO 56535
// for i in tmp do
56506: LD_ADDR_VAR 0 1
56510: PUSH
56511: LD_VAR 0 2
56515: PUSH
56516: FOR_IN
56517: IFFALSE 56533
// SetFuel ( i , 0 ) ;
56519: LD_VAR 0 1
56523: PPUSH
56524: LD_INT 0
56526: PPUSH
56527: CALL_OW 240
56531: GO 56516
56533: POP
56534: POP
// end ;
56535: PPOPN 2
56537: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56538: LD_EXP 28
56542: PUSH
56543: LD_EXP 64
56547: AND
56548: IFFALSE 56614
56550: GO 56552
56552: DISABLE
56553: LD_INT 0
56555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56556: LD_ADDR_VAR 0 1
56560: PUSH
56561: LD_INT 22
56563: PUSH
56564: LD_OWVAR 2
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 30
56575: PUSH
56576: LD_INT 29
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PPUSH
56587: CALL_OW 69
56591: ST_TO_ADDR
// if not tmp then
56592: LD_VAR 0 1
56596: NOT
56597: IFFALSE 56601
// exit ;
56599: GO 56614
// DestroyUnit ( tmp [ 1 ] ) ;
56601: LD_VAR 0 1
56605: PUSH
56606: LD_INT 1
56608: ARRAY
56609: PPUSH
56610: CALL_OW 65
// end ;
56614: PPOPN 1
56616: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56617: LD_EXP 28
56621: PUSH
56622: LD_EXP 66
56626: AND
56627: IFFALSE 56756
56629: GO 56631
56631: DISABLE
56632: LD_INT 0
56634: PPUSH
// begin uc_side := 0 ;
56635: LD_ADDR_OWVAR 20
56639: PUSH
56640: LD_INT 0
56642: ST_TO_ADDR
// uc_nation := nation_arabian ;
56643: LD_ADDR_OWVAR 21
56647: PUSH
56648: LD_INT 2
56650: ST_TO_ADDR
// hc_gallery :=  ;
56651: LD_ADDR_OWVAR 33
56655: PUSH
56656: LD_STRING 
56658: ST_TO_ADDR
// hc_name :=  ;
56659: LD_ADDR_OWVAR 26
56663: PUSH
56664: LD_STRING 
56666: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56667: LD_INT 1
56669: PPUSH
56670: LD_INT 11
56672: PPUSH
56673: LD_INT 10
56675: PPUSH
56676: CALL_OW 380
// un := CreateHuman ;
56680: LD_ADDR_VAR 0 1
56684: PUSH
56685: CALL_OW 44
56689: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56690: LD_VAR 0 1
56694: PPUSH
56695: LD_INT 1
56697: PPUSH
56698: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56702: LD_INT 35
56704: PPUSH
56705: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56709: LD_VAR 0 1
56713: PPUSH
56714: LD_INT 22
56716: PUSH
56717: LD_OWVAR 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PPUSH
56726: CALL_OW 69
56730: PPUSH
56731: LD_VAR 0 1
56735: PPUSH
56736: CALL_OW 74
56740: PPUSH
56741: CALL_OW 115
// until IsDead ( un ) ;
56745: LD_VAR 0 1
56749: PPUSH
56750: CALL_OW 301
56754: IFFALSE 56702
// end ;
56756: PPOPN 1
56758: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56759: LD_EXP 28
56763: PUSH
56764: LD_EXP 68
56768: AND
56769: IFFALSE 56781
56771: GO 56773
56773: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56774: LD_STRING earthquake(getX(game), 0, 32)
56776: PPUSH
56777: CALL_OW 559
56781: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56782: LD_EXP 28
56786: PUSH
56787: LD_EXP 69
56791: AND
56792: IFFALSE 56883
56794: GO 56796
56796: DISABLE
56797: LD_INT 0
56799: PPUSH
// begin enable ;
56800: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56801: LD_ADDR_VAR 0 1
56805: PUSH
56806: LD_INT 22
56808: PUSH
56809: LD_OWVAR 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 21
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 33
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: PPUSH
56843: CALL_OW 69
56847: ST_TO_ADDR
// if not tmp then
56848: LD_VAR 0 1
56852: NOT
56853: IFFALSE 56857
// exit ;
56855: GO 56883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56857: LD_VAR 0 1
56861: PUSH
56862: LD_INT 1
56864: PPUSH
56865: LD_VAR 0 1
56869: PPUSH
56870: CALL_OW 12
56874: ARRAY
56875: PPUSH
56876: LD_INT 1
56878: PPUSH
56879: CALL_OW 234
// end ;
56883: PPOPN 1
56885: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56886: LD_EXP 28
56890: PUSH
56891: LD_EXP 70
56895: AND
56896: IFFALSE 57037
56898: GO 56900
56900: DISABLE
56901: LD_INT 0
56903: PPUSH
56904: PPUSH
56905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56906: LD_ADDR_VAR 0 3
56910: PUSH
56911: LD_INT 22
56913: PUSH
56914: LD_OWVAR 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 25
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PPUSH
56937: CALL_OW 69
56941: ST_TO_ADDR
// if not tmp then
56942: LD_VAR 0 3
56946: NOT
56947: IFFALSE 56951
// exit ;
56949: GO 57037
// un := tmp [ rand ( 1 , tmp ) ] ;
56951: LD_ADDR_VAR 0 2
56955: PUSH
56956: LD_VAR 0 3
56960: PUSH
56961: LD_INT 1
56963: PPUSH
56964: LD_VAR 0 3
56968: PPUSH
56969: CALL_OW 12
56973: ARRAY
56974: ST_TO_ADDR
// if Crawls ( un ) then
56975: LD_VAR 0 2
56979: PPUSH
56980: CALL_OW 318
56984: IFFALSE 56995
// ComWalk ( un ) ;
56986: LD_VAR 0 2
56990: PPUSH
56991: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56995: LD_VAR 0 2
56999: PPUSH
57000: LD_INT 9
57002: PPUSH
57003: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57007: LD_INT 28
57009: PPUSH
57010: LD_OWVAR 2
57014: PPUSH
57015: LD_INT 2
57017: PPUSH
57018: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57022: LD_INT 29
57024: PPUSH
57025: LD_OWVAR 2
57029: PPUSH
57030: LD_INT 2
57032: PPUSH
57033: CALL_OW 322
// end ;
57037: PPOPN 3
57039: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57040: LD_EXP 28
57044: PUSH
57045: LD_EXP 71
57049: AND
57050: IFFALSE 57161
57052: GO 57054
57054: DISABLE
57055: LD_INT 0
57057: PPUSH
57058: PPUSH
57059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57060: LD_ADDR_VAR 0 3
57064: PUSH
57065: LD_INT 22
57067: PUSH
57068: LD_OWVAR 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 25
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PPUSH
57091: CALL_OW 69
57095: ST_TO_ADDR
// if not tmp then
57096: LD_VAR 0 3
57100: NOT
57101: IFFALSE 57105
// exit ;
57103: GO 57161
// un := tmp [ rand ( 1 , tmp ) ] ;
57105: LD_ADDR_VAR 0 2
57109: PUSH
57110: LD_VAR 0 3
57114: PUSH
57115: LD_INT 1
57117: PPUSH
57118: LD_VAR 0 3
57122: PPUSH
57123: CALL_OW 12
57127: ARRAY
57128: ST_TO_ADDR
// if Crawls ( un ) then
57129: LD_VAR 0 2
57133: PPUSH
57134: CALL_OW 318
57138: IFFALSE 57149
// ComWalk ( un ) ;
57140: LD_VAR 0 2
57144: PPUSH
57145: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57149: LD_VAR 0 2
57153: PPUSH
57154: LD_INT 8
57156: PPUSH
57157: CALL_OW 336
// end ;
57161: PPOPN 3
57163: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
57164: LD_EXP 28
57168: PUSH
57169: LD_EXP 72
57173: AND
57174: IFFALSE 57318
57176: GO 57178
57178: DISABLE
57179: LD_INT 0
57181: PPUSH
57182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
57183: LD_ADDR_VAR 0 2
57187: PUSH
57188: LD_INT 22
57190: PUSH
57191: LD_OWVAR 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 21
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 34
57215: PUSH
57216: LD_INT 12
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 34
57225: PUSH
57226: LD_INT 51
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 34
57235: PUSH
57236: LD_INT 32
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: PPUSH
57254: CALL_OW 69
57258: ST_TO_ADDR
// if not tmp then
57259: LD_VAR 0 2
57263: NOT
57264: IFFALSE 57268
// exit ;
57266: GO 57318
// for i in tmp do
57268: LD_ADDR_VAR 0 1
57272: PUSH
57273: LD_VAR 0 2
57277: PUSH
57278: FOR_IN
57279: IFFALSE 57316
// if GetCargo ( i , mat_artifact ) = 0 then
57281: LD_VAR 0 1
57285: PPUSH
57286: LD_INT 4
57288: PPUSH
57289: CALL_OW 289
57293: PUSH
57294: LD_INT 0
57296: EQUAL
57297: IFFALSE 57314
// SetCargo ( i , mat_siberit , 100 ) ;
57299: LD_VAR 0 1
57303: PPUSH
57304: LD_INT 3
57306: PPUSH
57307: LD_INT 100
57309: PPUSH
57310: CALL_OW 290
57314: GO 57278
57316: POP
57317: POP
// end ;
57318: PPOPN 2
57320: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
57321: LD_EXP 28
57325: PUSH
57326: LD_EXP 73
57330: AND
57331: IFFALSE 57514
57333: GO 57335
57335: DISABLE
57336: LD_INT 0
57338: PPUSH
57339: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57340: LD_ADDR_VAR 0 2
57344: PUSH
57345: LD_INT 22
57347: PUSH
57348: LD_OWVAR 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PPUSH
57357: CALL_OW 69
57361: ST_TO_ADDR
// if not tmp then
57362: LD_VAR 0 2
57366: NOT
57367: IFFALSE 57371
// exit ;
57369: GO 57514
// for i := 1 to 2 do
57371: LD_ADDR_VAR 0 1
57375: PUSH
57376: DOUBLE
57377: LD_INT 1
57379: DEC
57380: ST_TO_ADDR
57381: LD_INT 2
57383: PUSH
57384: FOR_TO
57385: IFFALSE 57512
// begin uc_side := your_side ;
57387: LD_ADDR_OWVAR 20
57391: PUSH
57392: LD_OWVAR 2
57396: ST_TO_ADDR
// uc_nation := nation_american ;
57397: LD_ADDR_OWVAR 21
57401: PUSH
57402: LD_INT 1
57404: ST_TO_ADDR
// vc_chassis := us_morphling ;
57405: LD_ADDR_OWVAR 37
57409: PUSH
57410: LD_INT 5
57412: ST_TO_ADDR
// vc_engine := engine_siberite ;
57413: LD_ADDR_OWVAR 39
57417: PUSH
57418: LD_INT 3
57420: ST_TO_ADDR
// vc_control := control_computer ;
57421: LD_ADDR_OWVAR 38
57425: PUSH
57426: LD_INT 3
57428: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57429: LD_ADDR_OWVAR 40
57433: PUSH
57434: LD_INT 10
57436: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57437: LD_VAR 0 2
57441: PUSH
57442: LD_INT 1
57444: ARRAY
57445: PPUSH
57446: CALL_OW 310
57450: NOT
57451: IFFALSE 57498
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57453: CALL_OW 45
57457: PPUSH
57458: LD_VAR 0 2
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PPUSH
57467: CALL_OW 250
57471: PPUSH
57472: LD_VAR 0 2
57476: PUSH
57477: LD_INT 1
57479: ARRAY
57480: PPUSH
57481: CALL_OW 251
57485: PPUSH
57486: LD_INT 12
57488: PPUSH
57489: LD_INT 1
57491: PPUSH
57492: CALL_OW 50
57496: GO 57510
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57498: CALL_OW 45
57502: PPUSH
57503: LD_INT 1
57505: PPUSH
57506: CALL_OW 51
// end ;
57510: GO 57384
57512: POP
57513: POP
// end ;
57514: PPOPN 2
57516: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57517: LD_EXP 28
57521: PUSH
57522: LD_EXP 74
57526: AND
57527: IFFALSE 57749
57529: GO 57531
57531: DISABLE
57532: LD_INT 0
57534: PPUSH
57535: PPUSH
57536: PPUSH
57537: PPUSH
57538: PPUSH
57539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57540: LD_ADDR_VAR 0 6
57544: PUSH
57545: LD_INT 22
57547: PUSH
57548: LD_OWVAR 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 21
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: LD_INT 23
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: PPUSH
57589: CALL_OW 69
57593: ST_TO_ADDR
// if not tmp then
57594: LD_VAR 0 6
57598: NOT
57599: IFFALSE 57603
// exit ;
57601: GO 57749
// s1 := rand ( 1 , 4 ) ;
57603: LD_ADDR_VAR 0 2
57607: PUSH
57608: LD_INT 1
57610: PPUSH
57611: LD_INT 4
57613: PPUSH
57614: CALL_OW 12
57618: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57619: LD_ADDR_VAR 0 4
57623: PUSH
57624: LD_VAR 0 6
57628: PUSH
57629: LD_INT 1
57631: ARRAY
57632: PPUSH
57633: LD_VAR 0 2
57637: PPUSH
57638: CALL_OW 259
57642: ST_TO_ADDR
// if s1 = 1 then
57643: LD_VAR 0 2
57647: PUSH
57648: LD_INT 1
57650: EQUAL
57651: IFFALSE 57671
// s2 := rand ( 2 , 4 ) else
57653: LD_ADDR_VAR 0 3
57657: PUSH
57658: LD_INT 2
57660: PPUSH
57661: LD_INT 4
57663: PPUSH
57664: CALL_OW 12
57668: ST_TO_ADDR
57669: GO 57679
// s2 := 1 ;
57671: LD_ADDR_VAR 0 3
57675: PUSH
57676: LD_INT 1
57678: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57679: LD_ADDR_VAR 0 5
57683: PUSH
57684: LD_VAR 0 6
57688: PUSH
57689: LD_INT 1
57691: ARRAY
57692: PPUSH
57693: LD_VAR 0 3
57697: PPUSH
57698: CALL_OW 259
57702: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57703: LD_VAR 0 6
57707: PUSH
57708: LD_INT 1
57710: ARRAY
57711: PPUSH
57712: LD_VAR 0 2
57716: PPUSH
57717: LD_VAR 0 5
57721: PPUSH
57722: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57726: LD_VAR 0 6
57730: PUSH
57731: LD_INT 1
57733: ARRAY
57734: PPUSH
57735: LD_VAR 0 3
57739: PPUSH
57740: LD_VAR 0 4
57744: PPUSH
57745: CALL_OW 237
// end ;
57749: PPOPN 6
57751: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57752: LD_EXP 28
57756: PUSH
57757: LD_EXP 75
57761: AND
57762: IFFALSE 57841
57764: GO 57766
57766: DISABLE
57767: LD_INT 0
57769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57770: LD_ADDR_VAR 0 1
57774: PUSH
57775: LD_INT 22
57777: PUSH
57778: LD_OWVAR 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 30
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PPUSH
57801: CALL_OW 69
57805: ST_TO_ADDR
// if not tmp then
57806: LD_VAR 0 1
57810: NOT
57811: IFFALSE 57815
// exit ;
57813: GO 57841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57815: LD_VAR 0 1
57819: PUSH
57820: LD_INT 1
57822: PPUSH
57823: LD_VAR 0 1
57827: PPUSH
57828: CALL_OW 12
57832: ARRAY
57833: PPUSH
57834: LD_INT 1
57836: PPUSH
57837: CALL_OW 234
// end ;
57841: PPOPN 1
57843: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57844: LD_EXP 28
57848: PUSH
57849: LD_EXP 76
57853: AND
57854: IFFALSE 57966
57856: GO 57858
57858: DISABLE
57859: LD_INT 0
57861: PPUSH
57862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57863: LD_ADDR_VAR 0 2
57867: PUSH
57868: LD_INT 22
57870: PUSH
57871: LD_OWVAR 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 30
57885: PUSH
57886: LD_INT 27
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 30
57895: PUSH
57896: LD_INT 26
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 30
57905: PUSH
57906: LD_INT 28
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PPUSH
57923: CALL_OW 69
57927: ST_TO_ADDR
// if not tmp then
57928: LD_VAR 0 2
57932: NOT
57933: IFFALSE 57937
// exit ;
57935: GO 57966
// for i in tmp do
57937: LD_ADDR_VAR 0 1
57941: PUSH
57942: LD_VAR 0 2
57946: PUSH
57947: FOR_IN
57948: IFFALSE 57964
// SetLives ( i , 1 ) ;
57950: LD_VAR 0 1
57954: PPUSH
57955: LD_INT 1
57957: PPUSH
57958: CALL_OW 234
57962: GO 57947
57964: POP
57965: POP
// end ;
57966: PPOPN 2
57968: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57969: LD_EXP 28
57973: PUSH
57974: LD_EXP 77
57978: AND
57979: IFFALSE 58266
57981: GO 57983
57983: DISABLE
57984: LD_INT 0
57986: PPUSH
57987: PPUSH
57988: PPUSH
// begin i := rand ( 1 , 7 ) ;
57989: LD_ADDR_VAR 0 1
57993: PUSH
57994: LD_INT 1
57996: PPUSH
57997: LD_INT 7
57999: PPUSH
58000: CALL_OW 12
58004: ST_TO_ADDR
// case i of 1 :
58005: LD_VAR 0 1
58009: PUSH
58010: LD_INT 1
58012: DOUBLE
58013: EQUAL
58014: IFTRUE 58018
58016: GO 58028
58018: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58019: LD_STRING earthquake(getX(game), 0, 32)
58021: PPUSH
58022: CALL_OW 559
58026: GO 58266
58028: LD_INT 2
58030: DOUBLE
58031: EQUAL
58032: IFTRUE 58036
58034: GO 58050
58036: POP
// begin ToLua ( displayStucuk(); ) ;
58037: LD_STRING displayStucuk();
58039: PPUSH
58040: CALL_OW 559
// ResetFog ;
58044: CALL_OW 335
// end ; 3 :
58048: GO 58266
58050: LD_INT 3
58052: DOUBLE
58053: EQUAL
58054: IFTRUE 58058
58056: GO 58162
58058: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58059: LD_ADDR_VAR 0 2
58063: PUSH
58064: LD_INT 22
58066: PUSH
58067: LD_OWVAR 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 25
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PPUSH
58090: CALL_OW 69
58094: ST_TO_ADDR
// if not tmp then
58095: LD_VAR 0 2
58099: NOT
58100: IFFALSE 58104
// exit ;
58102: GO 58266
// un := tmp [ rand ( 1 , tmp ) ] ;
58104: LD_ADDR_VAR 0 3
58108: PUSH
58109: LD_VAR 0 2
58113: PUSH
58114: LD_INT 1
58116: PPUSH
58117: LD_VAR 0 2
58121: PPUSH
58122: CALL_OW 12
58126: ARRAY
58127: ST_TO_ADDR
// if Crawls ( un ) then
58128: LD_VAR 0 3
58132: PPUSH
58133: CALL_OW 318
58137: IFFALSE 58148
// ComWalk ( un ) ;
58139: LD_VAR 0 3
58143: PPUSH
58144: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58148: LD_VAR 0 3
58152: PPUSH
58153: LD_INT 8
58155: PPUSH
58156: CALL_OW 336
// end ; 4 :
58160: GO 58266
58162: LD_INT 4
58164: DOUBLE
58165: EQUAL
58166: IFTRUE 58170
58168: GO 58244
58170: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58171: LD_ADDR_VAR 0 2
58175: PUSH
58176: LD_INT 22
58178: PUSH
58179: LD_OWVAR 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 30
58190: PUSH
58191: LD_INT 29
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PPUSH
58202: CALL_OW 69
58206: ST_TO_ADDR
// if not tmp then
58207: LD_VAR 0 2
58211: NOT
58212: IFFALSE 58216
// exit ;
58214: GO 58266
// CenterNowOnUnits ( tmp [ 1 ] ) ;
58216: LD_VAR 0 2
58220: PUSH
58221: LD_INT 1
58223: ARRAY
58224: PPUSH
58225: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
58229: LD_VAR 0 2
58233: PUSH
58234: LD_INT 1
58236: ARRAY
58237: PPUSH
58238: CALL_OW 65
// end ; 5 .. 7 :
58242: GO 58266
58244: LD_INT 5
58246: DOUBLE
58247: GREATEREQUAL
58248: IFFALSE 58256
58250: LD_INT 7
58252: DOUBLE
58253: LESSEQUAL
58254: IFTRUE 58258
58256: GO 58265
58258: POP
// StreamSibBomb ; end ;
58259: CALL 54503 0 0
58263: GO 58266
58265: POP
// end ;
58266: PPOPN 3
58268: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
58269: LD_EXP 28
58273: PUSH
58274: LD_EXP 78
58278: AND
58279: IFFALSE 58435
58281: GO 58283
58283: DISABLE
58284: LD_INT 0
58286: PPUSH
58287: PPUSH
58288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
58289: LD_ADDR_VAR 0 2
58293: PUSH
58294: LD_INT 81
58296: PUSH
58297: LD_OWVAR 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 21
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 21
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PPUSH
58338: CALL_OW 69
58342: ST_TO_ADDR
// if not tmp then
58343: LD_VAR 0 2
58347: NOT
58348: IFFALSE 58352
// exit ;
58350: GO 58435
// p := 0 ;
58352: LD_ADDR_VAR 0 3
58356: PUSH
58357: LD_INT 0
58359: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58360: LD_INT 35
58362: PPUSH
58363: CALL_OW 67
// p := p + 1 ;
58367: LD_ADDR_VAR 0 3
58371: PUSH
58372: LD_VAR 0 3
58376: PUSH
58377: LD_INT 1
58379: PLUS
58380: ST_TO_ADDR
// for i in tmp do
58381: LD_ADDR_VAR 0 1
58385: PUSH
58386: LD_VAR 0 2
58390: PUSH
58391: FOR_IN
58392: IFFALSE 58423
// if GetLives ( i ) < 1000 then
58394: LD_VAR 0 1
58398: PPUSH
58399: CALL_OW 256
58403: PUSH
58404: LD_INT 1000
58406: LESS
58407: IFFALSE 58421
// SetLives ( i , 1000 ) ;
58409: LD_VAR 0 1
58413: PPUSH
58414: LD_INT 1000
58416: PPUSH
58417: CALL_OW 234
58421: GO 58391
58423: POP
58424: POP
// until p > 20 ;
58425: LD_VAR 0 3
58429: PUSH
58430: LD_INT 20
58432: GREATER
58433: IFFALSE 58360
// end ;
58435: PPOPN 3
58437: END
// every 0 0$1 trigger StreamModeActive and sTime do
58438: LD_EXP 28
58442: PUSH
58443: LD_EXP 79
58447: AND
58448: IFFALSE 58483
58450: GO 58452
58452: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58453: LD_INT 28
58455: PPUSH
58456: LD_OWVAR 2
58460: PPUSH
58461: LD_INT 2
58463: PPUSH
58464: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58468: LD_INT 30
58470: PPUSH
58471: LD_OWVAR 2
58475: PPUSH
58476: LD_INT 2
58478: PPUSH
58479: CALL_OW 322
// end ;
58483: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58484: LD_EXP 28
58488: PUSH
58489: LD_EXP 80
58493: AND
58494: IFFALSE 58615
58496: GO 58498
58498: DISABLE
58499: LD_INT 0
58501: PPUSH
58502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58503: LD_ADDR_VAR 0 2
58507: PUSH
58508: LD_INT 22
58510: PUSH
58511: LD_OWVAR 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 21
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: LD_INT 23
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: PPUSH
58552: CALL_OW 69
58556: ST_TO_ADDR
// if not tmp then
58557: LD_VAR 0 2
58561: NOT
58562: IFFALSE 58566
// exit ;
58564: GO 58615
// for i in tmp do
58566: LD_ADDR_VAR 0 1
58570: PUSH
58571: LD_VAR 0 2
58575: PUSH
58576: FOR_IN
58577: IFFALSE 58613
// begin if Crawls ( i ) then
58579: LD_VAR 0 1
58583: PPUSH
58584: CALL_OW 318
58588: IFFALSE 58599
// ComWalk ( i ) ;
58590: LD_VAR 0 1
58594: PPUSH
58595: CALL_OW 138
// SetClass ( i , 2 ) ;
58599: LD_VAR 0 1
58603: PPUSH
58604: LD_INT 2
58606: PPUSH
58607: CALL_OW 336
// end ;
58611: GO 58576
58613: POP
58614: POP
// end ;
58615: PPOPN 2
58617: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58618: LD_EXP 28
58622: PUSH
58623: LD_EXP 81
58627: AND
58628: IFFALSE 58916
58630: GO 58632
58632: DISABLE
58633: LD_INT 0
58635: PPUSH
58636: PPUSH
58637: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58638: LD_OWVAR 2
58642: PPUSH
58643: LD_INT 9
58645: PPUSH
58646: LD_INT 1
58648: PPUSH
58649: LD_INT 1
58651: PPUSH
58652: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58656: LD_INT 9
58658: PPUSH
58659: LD_OWVAR 2
58663: PPUSH
58664: CALL_OW 343
// uc_side := 9 ;
58668: LD_ADDR_OWVAR 20
58672: PUSH
58673: LD_INT 9
58675: ST_TO_ADDR
// uc_nation := 2 ;
58676: LD_ADDR_OWVAR 21
58680: PUSH
58681: LD_INT 2
58683: ST_TO_ADDR
// hc_name := Dark Warrior ;
58684: LD_ADDR_OWVAR 26
58688: PUSH
58689: LD_STRING Dark Warrior
58691: ST_TO_ADDR
// hc_gallery :=  ;
58692: LD_ADDR_OWVAR 33
58696: PUSH
58697: LD_STRING 
58699: ST_TO_ADDR
// hc_noskilllimit := true ;
58700: LD_ADDR_OWVAR 76
58704: PUSH
58705: LD_INT 1
58707: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58708: LD_ADDR_OWVAR 31
58712: PUSH
58713: LD_INT 30
58715: PUSH
58716: LD_INT 30
58718: PUSH
58719: LD_INT 30
58721: PUSH
58722: LD_INT 30
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: ST_TO_ADDR
// un := CreateHuman ;
58731: LD_ADDR_VAR 0 3
58735: PUSH
58736: CALL_OW 44
58740: ST_TO_ADDR
// hc_noskilllimit := false ;
58741: LD_ADDR_OWVAR 76
58745: PUSH
58746: LD_INT 0
58748: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58749: LD_VAR 0 3
58753: PPUSH
58754: LD_INT 1
58756: PPUSH
58757: CALL_OW 51
// ToLua ( playRanger() ) ;
58761: LD_STRING playRanger()
58763: PPUSH
58764: CALL_OW 559
// p := 0 ;
58768: LD_ADDR_VAR 0 2
58772: PUSH
58773: LD_INT 0
58775: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58776: LD_INT 35
58778: PPUSH
58779: CALL_OW 67
// p := p + 1 ;
58783: LD_ADDR_VAR 0 2
58787: PUSH
58788: LD_VAR 0 2
58792: PUSH
58793: LD_INT 1
58795: PLUS
58796: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58797: LD_VAR 0 3
58801: PPUSH
58802: CALL_OW 256
58806: PUSH
58807: LD_INT 1000
58809: LESS
58810: IFFALSE 58824
// SetLives ( un , 1000 ) ;
58812: LD_VAR 0 3
58816: PPUSH
58817: LD_INT 1000
58819: PPUSH
58820: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58824: LD_VAR 0 3
58828: PPUSH
58829: LD_INT 81
58831: PUSH
58832: LD_OWVAR 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 91
58843: PUSH
58844: LD_VAR 0 3
58848: PUSH
58849: LD_INT 30
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PPUSH
58861: CALL_OW 69
58865: PPUSH
58866: LD_VAR 0 3
58870: PPUSH
58871: CALL_OW 74
58875: PPUSH
58876: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58880: LD_VAR 0 2
58884: PUSH
58885: LD_INT 80
58887: GREATER
58888: PUSH
58889: LD_VAR 0 3
58893: PPUSH
58894: CALL_OW 301
58898: OR
58899: IFFALSE 58776
// if un then
58901: LD_VAR 0 3
58905: IFFALSE 58916
// RemoveUnit ( un ) ;
58907: LD_VAR 0 3
58911: PPUSH
58912: CALL_OW 64
// end ;
58916: PPOPN 3
58918: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58919: LD_EXP 82
58923: IFFALSE 59039
58925: GO 58927
58927: DISABLE
58928: LD_INT 0
58930: PPUSH
58931: PPUSH
58932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58933: LD_ADDR_VAR 0 2
58937: PUSH
58938: LD_INT 81
58940: PUSH
58941: LD_OWVAR 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 21
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PPUSH
58964: CALL_OW 69
58968: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58969: LD_STRING playComputer()
58971: PPUSH
58972: CALL_OW 559
// if not tmp then
58976: LD_VAR 0 2
58980: NOT
58981: IFFALSE 58985
// exit ;
58983: GO 59039
// for i in tmp do
58985: LD_ADDR_VAR 0 1
58989: PUSH
58990: LD_VAR 0 2
58994: PUSH
58995: FOR_IN
58996: IFFALSE 59037
// for j := 1 to 4 do
58998: LD_ADDR_VAR 0 3
59002: PUSH
59003: DOUBLE
59004: LD_INT 1
59006: DEC
59007: ST_TO_ADDR
59008: LD_INT 4
59010: PUSH
59011: FOR_TO
59012: IFFALSE 59033
// SetSkill ( i , j , 10 ) ;
59014: LD_VAR 0 1
59018: PPUSH
59019: LD_VAR 0 3
59023: PPUSH
59024: LD_INT 10
59026: PPUSH
59027: CALL_OW 237
59031: GO 59011
59033: POP
59034: POP
59035: GO 58995
59037: POP
59038: POP
// end ;
59039: PPOPN 3
59041: END
// every 0 0$1 trigger s30 do var i , tmp ;
59042: LD_EXP 83
59046: IFFALSE 59115
59048: GO 59050
59050: DISABLE
59051: LD_INT 0
59053: PPUSH
59054: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59055: LD_ADDR_VAR 0 2
59059: PUSH
59060: LD_INT 22
59062: PUSH
59063: LD_OWVAR 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PPUSH
59072: CALL_OW 69
59076: ST_TO_ADDR
// if not tmp then
59077: LD_VAR 0 2
59081: NOT
59082: IFFALSE 59086
// exit ;
59084: GO 59115
// for i in tmp do
59086: LD_ADDR_VAR 0 1
59090: PUSH
59091: LD_VAR 0 2
59095: PUSH
59096: FOR_IN
59097: IFFALSE 59113
// SetLives ( i , 300 ) ;
59099: LD_VAR 0 1
59103: PPUSH
59104: LD_INT 300
59106: PPUSH
59107: CALL_OW 234
59111: GO 59096
59113: POP
59114: POP
// end ;
59115: PPOPN 2
59117: END
// every 0 0$1 trigger s60 do var i , tmp ;
59118: LD_EXP 84
59122: IFFALSE 59191
59124: GO 59126
59126: DISABLE
59127: LD_INT 0
59129: PPUSH
59130: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59131: LD_ADDR_VAR 0 2
59135: PUSH
59136: LD_INT 22
59138: PUSH
59139: LD_OWVAR 2
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PPUSH
59148: CALL_OW 69
59152: ST_TO_ADDR
// if not tmp then
59153: LD_VAR 0 2
59157: NOT
59158: IFFALSE 59162
// exit ;
59160: GO 59191
// for i in tmp do
59162: LD_ADDR_VAR 0 1
59166: PUSH
59167: LD_VAR 0 2
59171: PUSH
59172: FOR_IN
59173: IFFALSE 59189
// SetLives ( i , 600 ) ;
59175: LD_VAR 0 1
59179: PPUSH
59180: LD_INT 600
59182: PPUSH
59183: CALL_OW 234
59187: GO 59172
59189: POP
59190: POP
// end ;
59191: PPOPN 2
59193: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59194: LD_INT 0
59196: PPUSH
// case cmd of 301 :
59197: LD_VAR 0 1
59201: PUSH
59202: LD_INT 301
59204: DOUBLE
59205: EQUAL
59206: IFTRUE 59210
59208: GO 59242
59210: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
59211: LD_VAR 0 6
59215: PPUSH
59216: LD_VAR 0 7
59220: PPUSH
59221: LD_VAR 0 8
59225: PPUSH
59226: LD_VAR 0 4
59230: PPUSH
59231: LD_VAR 0 5
59235: PPUSH
59236: CALL 60451 0 5
59240: GO 59363
59242: LD_INT 302
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59250
59248: GO 59287
59250: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
59251: LD_VAR 0 6
59255: PPUSH
59256: LD_VAR 0 7
59260: PPUSH
59261: LD_VAR 0 8
59265: PPUSH
59266: LD_VAR 0 9
59270: PPUSH
59271: LD_VAR 0 4
59275: PPUSH
59276: LD_VAR 0 5
59280: PPUSH
59281: CALL 60542 0 6
59285: GO 59363
59287: LD_INT 303
59289: DOUBLE
59290: EQUAL
59291: IFTRUE 59295
59293: GO 59332
59295: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
59296: LD_VAR 0 6
59300: PPUSH
59301: LD_VAR 0 7
59305: PPUSH
59306: LD_VAR 0 8
59310: PPUSH
59311: LD_VAR 0 9
59315: PPUSH
59316: LD_VAR 0 4
59320: PPUSH
59321: LD_VAR 0 5
59325: PPUSH
59326: CALL 59368 0 6
59330: GO 59363
59332: LD_INT 304
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59340
59338: GO 59362
59340: POP
// hHackTeleport ( unit , x , y ) ; end ;
59341: LD_VAR 0 2
59345: PPUSH
59346: LD_VAR 0 4
59350: PPUSH
59351: LD_VAR 0 5
59355: PPUSH
59356: CALL 61135 0 3
59360: GO 59363
59362: POP
// end ;
59363: LD_VAR 0 12
59367: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
59368: LD_INT 0
59370: PPUSH
59371: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
59372: LD_VAR 0 1
59376: PUSH
59377: LD_INT 1
59379: LESS
59380: PUSH
59381: LD_VAR 0 1
59385: PUSH
59386: LD_INT 3
59388: GREATER
59389: OR
59390: PUSH
59391: LD_VAR 0 5
59395: PPUSH
59396: LD_VAR 0 6
59400: PPUSH
59401: CALL_OW 428
59405: OR
59406: IFFALSE 59410
// exit ;
59408: GO 60138
// uc_side := your_side ;
59410: LD_ADDR_OWVAR 20
59414: PUSH
59415: LD_OWVAR 2
59419: ST_TO_ADDR
// uc_nation := nation ;
59420: LD_ADDR_OWVAR 21
59424: PUSH
59425: LD_VAR 0 1
59429: ST_TO_ADDR
// bc_level = 1 ;
59430: LD_ADDR_OWVAR 43
59434: PUSH
59435: LD_INT 1
59437: ST_TO_ADDR
// case btype of 1 :
59438: LD_VAR 0 2
59442: PUSH
59443: LD_INT 1
59445: DOUBLE
59446: EQUAL
59447: IFTRUE 59451
59449: GO 59462
59451: POP
// bc_type := b_depot ; 2 :
59452: LD_ADDR_OWVAR 42
59456: PUSH
59457: LD_INT 0
59459: ST_TO_ADDR
59460: GO 60082
59462: LD_INT 2
59464: DOUBLE
59465: EQUAL
59466: IFTRUE 59470
59468: GO 59481
59470: POP
// bc_type := b_warehouse ; 3 :
59471: LD_ADDR_OWVAR 42
59475: PUSH
59476: LD_INT 1
59478: ST_TO_ADDR
59479: GO 60082
59481: LD_INT 3
59483: DOUBLE
59484: EQUAL
59485: IFTRUE 59489
59487: GO 59500
59489: POP
// bc_type := b_lab ; 4 .. 9 :
59490: LD_ADDR_OWVAR 42
59494: PUSH
59495: LD_INT 6
59497: ST_TO_ADDR
59498: GO 60082
59500: LD_INT 4
59502: DOUBLE
59503: GREATEREQUAL
59504: IFFALSE 59512
59506: LD_INT 9
59508: DOUBLE
59509: LESSEQUAL
59510: IFTRUE 59514
59512: GO 59574
59514: POP
// begin bc_type := b_lab_half ;
59515: LD_ADDR_OWVAR 42
59519: PUSH
59520: LD_INT 7
59522: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59523: LD_ADDR_OWVAR 44
59527: PUSH
59528: LD_INT 10
59530: PUSH
59531: LD_INT 11
59533: PUSH
59534: LD_INT 12
59536: PUSH
59537: LD_INT 15
59539: PUSH
59540: LD_INT 14
59542: PUSH
59543: LD_INT 13
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: PUSH
59554: LD_VAR 0 2
59558: PUSH
59559: LD_INT 3
59561: MINUS
59562: ARRAY
59563: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
59564: LD_ADDR_OWVAR 45
59568: PUSH
59569: LD_INT 9
59571: ST_TO_ADDR
// end ; 10 .. 13 :
59572: GO 60082
59574: LD_INT 10
59576: DOUBLE
59577: GREATEREQUAL
59578: IFFALSE 59586
59580: LD_INT 13
59582: DOUBLE
59583: LESSEQUAL
59584: IFTRUE 59588
59586: GO 59665
59588: POP
// begin bc_type := b_lab_full ;
59589: LD_ADDR_OWVAR 42
59593: PUSH
59594: LD_INT 8
59596: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59597: LD_ADDR_OWVAR 44
59601: PUSH
59602: LD_INT 10
59604: PUSH
59605: LD_INT 12
59607: PUSH
59608: LD_INT 14
59610: PUSH
59611: LD_INT 13
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: PUSH
59620: LD_VAR 0 2
59624: PUSH
59625: LD_INT 9
59627: MINUS
59628: ARRAY
59629: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59630: LD_ADDR_OWVAR 45
59634: PUSH
59635: LD_INT 11
59637: PUSH
59638: LD_INT 15
59640: PUSH
59641: LD_INT 12
59643: PUSH
59644: LD_INT 15
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: PUSH
59653: LD_VAR 0 2
59657: PUSH
59658: LD_INT 9
59660: MINUS
59661: ARRAY
59662: ST_TO_ADDR
// end ; 14 :
59663: GO 60082
59665: LD_INT 14
59667: DOUBLE
59668: EQUAL
59669: IFTRUE 59673
59671: GO 59684
59673: POP
// bc_type := b_workshop ; 15 :
59674: LD_ADDR_OWVAR 42
59678: PUSH
59679: LD_INT 2
59681: ST_TO_ADDR
59682: GO 60082
59684: LD_INT 15
59686: DOUBLE
59687: EQUAL
59688: IFTRUE 59692
59690: GO 59703
59692: POP
// bc_type := b_factory ; 16 :
59693: LD_ADDR_OWVAR 42
59697: PUSH
59698: LD_INT 3
59700: ST_TO_ADDR
59701: GO 60082
59703: LD_INT 16
59705: DOUBLE
59706: EQUAL
59707: IFTRUE 59711
59709: GO 59722
59711: POP
// bc_type := b_ext_gun ; 17 :
59712: LD_ADDR_OWVAR 42
59716: PUSH
59717: LD_INT 17
59719: ST_TO_ADDR
59720: GO 60082
59722: LD_INT 17
59724: DOUBLE
59725: EQUAL
59726: IFTRUE 59730
59728: GO 59758
59730: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59731: LD_ADDR_OWVAR 42
59735: PUSH
59736: LD_INT 19
59738: PUSH
59739: LD_INT 23
59741: PUSH
59742: LD_INT 19
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: PUSH
59750: LD_VAR 0 1
59754: ARRAY
59755: ST_TO_ADDR
59756: GO 60082
59758: LD_INT 18
59760: DOUBLE
59761: EQUAL
59762: IFTRUE 59766
59764: GO 59777
59766: POP
// bc_type := b_ext_radar ; 19 :
59767: LD_ADDR_OWVAR 42
59771: PUSH
59772: LD_INT 20
59774: ST_TO_ADDR
59775: GO 60082
59777: LD_INT 19
59779: DOUBLE
59780: EQUAL
59781: IFTRUE 59785
59783: GO 59796
59785: POP
// bc_type := b_ext_radio ; 20 :
59786: LD_ADDR_OWVAR 42
59790: PUSH
59791: LD_INT 22
59793: ST_TO_ADDR
59794: GO 60082
59796: LD_INT 20
59798: DOUBLE
59799: EQUAL
59800: IFTRUE 59804
59802: GO 59815
59804: POP
// bc_type := b_ext_siberium ; 21 :
59805: LD_ADDR_OWVAR 42
59809: PUSH
59810: LD_INT 21
59812: ST_TO_ADDR
59813: GO 60082
59815: LD_INT 21
59817: DOUBLE
59818: EQUAL
59819: IFTRUE 59823
59821: GO 59834
59823: POP
// bc_type := b_ext_computer ; 22 :
59824: LD_ADDR_OWVAR 42
59828: PUSH
59829: LD_INT 24
59831: ST_TO_ADDR
59832: GO 60082
59834: LD_INT 22
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59842
59840: GO 59853
59842: POP
// bc_type := b_ext_track ; 23 :
59843: LD_ADDR_OWVAR 42
59847: PUSH
59848: LD_INT 16
59850: ST_TO_ADDR
59851: GO 60082
59853: LD_INT 23
59855: DOUBLE
59856: EQUAL
59857: IFTRUE 59861
59859: GO 59872
59861: POP
// bc_type := b_ext_laser ; 24 :
59862: LD_ADDR_OWVAR 42
59866: PUSH
59867: LD_INT 25
59869: ST_TO_ADDR
59870: GO 60082
59872: LD_INT 24
59874: DOUBLE
59875: EQUAL
59876: IFTRUE 59880
59878: GO 59891
59880: POP
// bc_type := b_control_tower ; 25 :
59881: LD_ADDR_OWVAR 42
59885: PUSH
59886: LD_INT 36
59888: ST_TO_ADDR
59889: GO 60082
59891: LD_INT 25
59893: DOUBLE
59894: EQUAL
59895: IFTRUE 59899
59897: GO 59910
59899: POP
// bc_type := b_breastwork ; 26 :
59900: LD_ADDR_OWVAR 42
59904: PUSH
59905: LD_INT 31
59907: ST_TO_ADDR
59908: GO 60082
59910: LD_INT 26
59912: DOUBLE
59913: EQUAL
59914: IFTRUE 59918
59916: GO 59929
59918: POP
// bc_type := b_bunker ; 27 :
59919: LD_ADDR_OWVAR 42
59923: PUSH
59924: LD_INT 32
59926: ST_TO_ADDR
59927: GO 60082
59929: LD_INT 27
59931: DOUBLE
59932: EQUAL
59933: IFTRUE 59937
59935: GO 59948
59937: POP
// bc_type := b_turret ; 28 :
59938: LD_ADDR_OWVAR 42
59942: PUSH
59943: LD_INT 33
59945: ST_TO_ADDR
59946: GO 60082
59948: LD_INT 28
59950: DOUBLE
59951: EQUAL
59952: IFTRUE 59956
59954: GO 59967
59956: POP
// bc_type := b_armoury ; 29 :
59957: LD_ADDR_OWVAR 42
59961: PUSH
59962: LD_INT 4
59964: ST_TO_ADDR
59965: GO 60082
59967: LD_INT 29
59969: DOUBLE
59970: EQUAL
59971: IFTRUE 59975
59973: GO 59986
59975: POP
// bc_type := b_barracks ; 30 :
59976: LD_ADDR_OWVAR 42
59980: PUSH
59981: LD_INT 5
59983: ST_TO_ADDR
59984: GO 60082
59986: LD_INT 30
59988: DOUBLE
59989: EQUAL
59990: IFTRUE 59994
59992: GO 60005
59994: POP
// bc_type := b_solar_power ; 31 :
59995: LD_ADDR_OWVAR 42
59999: PUSH
60000: LD_INT 27
60002: ST_TO_ADDR
60003: GO 60082
60005: LD_INT 31
60007: DOUBLE
60008: EQUAL
60009: IFTRUE 60013
60011: GO 60024
60013: POP
// bc_type := b_oil_power ; 32 :
60014: LD_ADDR_OWVAR 42
60018: PUSH
60019: LD_INT 26
60021: ST_TO_ADDR
60022: GO 60082
60024: LD_INT 32
60026: DOUBLE
60027: EQUAL
60028: IFTRUE 60032
60030: GO 60043
60032: POP
// bc_type := b_siberite_power ; 33 :
60033: LD_ADDR_OWVAR 42
60037: PUSH
60038: LD_INT 28
60040: ST_TO_ADDR
60041: GO 60082
60043: LD_INT 33
60045: DOUBLE
60046: EQUAL
60047: IFTRUE 60051
60049: GO 60062
60051: POP
// bc_type := b_oil_mine ; 34 :
60052: LD_ADDR_OWVAR 42
60056: PUSH
60057: LD_INT 29
60059: ST_TO_ADDR
60060: GO 60082
60062: LD_INT 34
60064: DOUBLE
60065: EQUAL
60066: IFTRUE 60070
60068: GO 60081
60070: POP
// bc_type := b_siberite_mine ; end ;
60071: LD_ADDR_OWVAR 42
60075: PUSH
60076: LD_INT 30
60078: ST_TO_ADDR
60079: GO 60082
60081: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60082: LD_ADDR_VAR 0 8
60086: PUSH
60087: LD_VAR 0 5
60091: PPUSH
60092: LD_VAR 0 6
60096: PPUSH
60097: LD_VAR 0 3
60101: PPUSH
60102: CALL_OW 47
60106: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60107: LD_OWVAR 42
60111: PUSH
60112: LD_INT 32
60114: PUSH
60115: LD_INT 33
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: IN
60122: IFFALSE 60138
// PlaceWeaponTurret ( b , weapon ) ;
60124: LD_VAR 0 8
60128: PPUSH
60129: LD_VAR 0 4
60133: PPUSH
60134: CALL_OW 431
// end ;
60138: LD_VAR 0 7
60142: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
60143: LD_INT 0
60145: PPUSH
60146: PPUSH
60147: PPUSH
60148: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60149: LD_ADDR_VAR 0 4
60153: PUSH
60154: LD_INT 22
60156: PUSH
60157: LD_OWVAR 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: LD_INT 30
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 30
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PPUSH
60198: CALL_OW 69
60202: ST_TO_ADDR
// if not tmp then
60203: LD_VAR 0 4
60207: NOT
60208: IFFALSE 60212
// exit ;
60210: GO 60271
// for i in tmp do
60212: LD_ADDR_VAR 0 2
60216: PUSH
60217: LD_VAR 0 4
60221: PUSH
60222: FOR_IN
60223: IFFALSE 60269
// for j = 1 to 3 do
60225: LD_ADDR_VAR 0 3
60229: PUSH
60230: DOUBLE
60231: LD_INT 1
60233: DEC
60234: ST_TO_ADDR
60235: LD_INT 3
60237: PUSH
60238: FOR_TO
60239: IFFALSE 60265
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
60241: LD_VAR 0 2
60245: PPUSH
60246: CALL_OW 274
60250: PPUSH
60251: LD_VAR 0 3
60255: PPUSH
60256: LD_INT 99999
60258: PPUSH
60259: CALL_OW 277
60263: GO 60238
60265: POP
60266: POP
60267: GO 60222
60269: POP
60270: POP
// end ;
60271: LD_VAR 0 1
60275: RET
// export function hHackSetLevel10 ; var i , j ; begin
60276: LD_INT 0
60278: PPUSH
60279: PPUSH
60280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60281: LD_ADDR_VAR 0 2
60285: PUSH
60286: LD_INT 21
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PPUSH
60296: CALL_OW 69
60300: PUSH
60301: FOR_IN
60302: IFFALSE 60354
// if IsSelected ( i ) then
60304: LD_VAR 0 2
60308: PPUSH
60309: CALL_OW 306
60313: IFFALSE 60352
// begin for j := 1 to 4 do
60315: LD_ADDR_VAR 0 3
60319: PUSH
60320: DOUBLE
60321: LD_INT 1
60323: DEC
60324: ST_TO_ADDR
60325: LD_INT 4
60327: PUSH
60328: FOR_TO
60329: IFFALSE 60350
// SetSkill ( i , j , 10 ) ;
60331: LD_VAR 0 2
60335: PPUSH
60336: LD_VAR 0 3
60340: PPUSH
60341: LD_INT 10
60343: PPUSH
60344: CALL_OW 237
60348: GO 60328
60350: POP
60351: POP
// end ;
60352: GO 60301
60354: POP
60355: POP
// end ;
60356: LD_VAR 0 1
60360: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
60361: LD_INT 0
60363: PPUSH
60364: PPUSH
60365: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
60366: LD_ADDR_VAR 0 2
60370: PUSH
60371: LD_INT 22
60373: PUSH
60374: LD_OWVAR 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 21
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PPUSH
60397: CALL_OW 69
60401: PUSH
60402: FOR_IN
60403: IFFALSE 60444
// begin for j := 1 to 4 do
60405: LD_ADDR_VAR 0 3
60409: PUSH
60410: DOUBLE
60411: LD_INT 1
60413: DEC
60414: ST_TO_ADDR
60415: LD_INT 4
60417: PUSH
60418: FOR_TO
60419: IFFALSE 60440
// SetSkill ( i , j , 10 ) ;
60421: LD_VAR 0 2
60425: PPUSH
60426: LD_VAR 0 3
60430: PPUSH
60431: LD_INT 10
60433: PPUSH
60434: CALL_OW 237
60438: GO 60418
60440: POP
60441: POP
// end ;
60442: GO 60402
60444: POP
60445: POP
// end ;
60446: LD_VAR 0 1
60450: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60451: LD_INT 0
60453: PPUSH
// uc_side := your_side ;
60454: LD_ADDR_OWVAR 20
60458: PUSH
60459: LD_OWVAR 2
60463: ST_TO_ADDR
// uc_nation := nation ;
60464: LD_ADDR_OWVAR 21
60468: PUSH
60469: LD_VAR 0 1
60473: ST_TO_ADDR
// InitHc ;
60474: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60478: LD_INT 0
60480: PPUSH
60481: LD_VAR 0 2
60485: PPUSH
60486: LD_VAR 0 3
60490: PPUSH
60491: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60495: LD_VAR 0 4
60499: PPUSH
60500: LD_VAR 0 5
60504: PPUSH
60505: CALL_OW 428
60509: PUSH
60510: LD_INT 0
60512: EQUAL
60513: IFFALSE 60537
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60515: CALL_OW 44
60519: PPUSH
60520: LD_VAR 0 4
60524: PPUSH
60525: LD_VAR 0 5
60529: PPUSH
60530: LD_INT 1
60532: PPUSH
60533: CALL_OW 48
// end ;
60537: LD_VAR 0 6
60541: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60542: LD_INT 0
60544: PPUSH
60545: PPUSH
// uc_side := your_side ;
60546: LD_ADDR_OWVAR 20
60550: PUSH
60551: LD_OWVAR 2
60555: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60556: LD_VAR 0 1
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: LD_INT 4
60572: PUSH
60573: LD_INT 5
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: IN
60583: IFFALSE 60595
// uc_nation := nation_american else
60585: LD_ADDR_OWVAR 21
60589: PUSH
60590: LD_INT 1
60592: ST_TO_ADDR
60593: GO 60638
// if chassis in [ 11 , 12 , 13 , 14 ] then
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 11
60602: PUSH
60603: LD_INT 12
60605: PUSH
60606: LD_INT 13
60608: PUSH
60609: LD_INT 14
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: IN
60618: IFFALSE 60630
// uc_nation := nation_arabian else
60620: LD_ADDR_OWVAR 21
60624: PUSH
60625: LD_INT 2
60627: ST_TO_ADDR
60628: GO 60638
// uc_nation := nation_russian ;
60630: LD_ADDR_OWVAR 21
60634: PUSH
60635: LD_INT 3
60637: ST_TO_ADDR
// vc_chassis := chassis ;
60638: LD_ADDR_OWVAR 37
60642: PUSH
60643: LD_VAR 0 1
60647: ST_TO_ADDR
// vc_engine := engine ;
60648: LD_ADDR_OWVAR 39
60652: PUSH
60653: LD_VAR 0 2
60657: ST_TO_ADDR
// vc_control := control ;
60658: LD_ADDR_OWVAR 38
60662: PUSH
60663: LD_VAR 0 3
60667: ST_TO_ADDR
// vc_weapon := weapon ;
60668: LD_ADDR_OWVAR 40
60672: PUSH
60673: LD_VAR 0 4
60677: ST_TO_ADDR
// un := CreateVehicle ;
60678: LD_ADDR_VAR 0 8
60682: PUSH
60683: CALL_OW 45
60687: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60688: LD_VAR 0 8
60692: PPUSH
60693: LD_INT 0
60695: PPUSH
60696: LD_INT 5
60698: PPUSH
60699: CALL_OW 12
60703: PPUSH
60704: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60708: LD_VAR 0 8
60712: PPUSH
60713: LD_VAR 0 5
60717: PPUSH
60718: LD_VAR 0 6
60722: PPUSH
60723: LD_INT 1
60725: PPUSH
60726: CALL_OW 48
// end ;
60730: LD_VAR 0 7
60734: RET
// export hInvincible ; every 1 do
60735: GO 60737
60737: DISABLE
// hInvincible := [ ] ;
60738: LD_ADDR_EXP 85
60742: PUSH
60743: EMPTY
60744: ST_TO_ADDR
60745: END
// every 10 do var i ;
60746: GO 60748
60748: DISABLE
60749: LD_INT 0
60751: PPUSH
// begin enable ;
60752: ENABLE
// if not hInvincible then
60753: LD_EXP 85
60757: NOT
60758: IFFALSE 60762
// exit ;
60760: GO 60806
// for i in hInvincible do
60762: LD_ADDR_VAR 0 1
60766: PUSH
60767: LD_EXP 85
60771: PUSH
60772: FOR_IN
60773: IFFALSE 60804
// if GetLives ( i ) < 1000 then
60775: LD_VAR 0 1
60779: PPUSH
60780: CALL_OW 256
60784: PUSH
60785: LD_INT 1000
60787: LESS
60788: IFFALSE 60802
// SetLives ( i , 1000 ) ;
60790: LD_VAR 0 1
60794: PPUSH
60795: LD_INT 1000
60797: PPUSH
60798: CALL_OW 234
60802: GO 60772
60804: POP
60805: POP
// end ;
60806: PPOPN 1
60808: END
// export function hHackInvincible ; var i ; begin
60809: LD_INT 0
60811: PPUSH
60812: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60813: LD_ADDR_VAR 0 2
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: LD_INT 21
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 21
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: LIST
60845: PPUSH
60846: CALL_OW 69
60850: PUSH
60851: FOR_IN
60852: IFFALSE 60913
// if IsSelected ( i ) then
60854: LD_VAR 0 2
60858: PPUSH
60859: CALL_OW 306
60863: IFFALSE 60911
// begin if i in hInvincible then
60865: LD_VAR 0 2
60869: PUSH
60870: LD_EXP 85
60874: IN
60875: IFFALSE 60895
// hInvincible := hInvincible diff i else
60877: LD_ADDR_EXP 85
60881: PUSH
60882: LD_EXP 85
60886: PUSH
60887: LD_VAR 0 2
60891: DIFF
60892: ST_TO_ADDR
60893: GO 60911
// hInvincible := hInvincible union i ;
60895: LD_ADDR_EXP 85
60899: PUSH
60900: LD_EXP 85
60904: PUSH
60905: LD_VAR 0 2
60909: UNION
60910: ST_TO_ADDR
// end ;
60911: GO 60851
60913: POP
60914: POP
// end ;
60915: LD_VAR 0 1
60919: RET
// export function hHackInvisible ; var i , j ; begin
60920: LD_INT 0
60922: PPUSH
60923: PPUSH
60924: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60925: LD_ADDR_VAR 0 2
60929: PUSH
60930: LD_INT 21
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PPUSH
60940: CALL_OW 69
60944: PUSH
60945: FOR_IN
60946: IFFALSE 60970
// if IsSelected ( i ) then
60948: LD_VAR 0 2
60952: PPUSH
60953: CALL_OW 306
60957: IFFALSE 60968
// ComForceInvisible ( i ) ;
60959: LD_VAR 0 2
60963: PPUSH
60964: CALL_OW 496
60968: GO 60945
60970: POP
60971: POP
// end ;
60972: LD_VAR 0 1
60976: RET
// export function hHackChangeYourSide ; begin
60977: LD_INT 0
60979: PPUSH
// if your_side = 8 then
60980: LD_OWVAR 2
60984: PUSH
60985: LD_INT 8
60987: EQUAL
60988: IFFALSE 61000
// your_side := 0 else
60990: LD_ADDR_OWVAR 2
60994: PUSH
60995: LD_INT 0
60997: ST_TO_ADDR
60998: GO 61014
// your_side := your_side + 1 ;
61000: LD_ADDR_OWVAR 2
61004: PUSH
61005: LD_OWVAR 2
61009: PUSH
61010: LD_INT 1
61012: PLUS
61013: ST_TO_ADDR
// end ;
61014: LD_VAR 0 1
61018: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61019: LD_INT 0
61021: PPUSH
61022: PPUSH
61023: PPUSH
// for i in all_units do
61024: LD_ADDR_VAR 0 2
61028: PUSH
61029: LD_OWVAR 3
61033: PUSH
61034: FOR_IN
61035: IFFALSE 61113
// if IsSelected ( i ) then
61037: LD_VAR 0 2
61041: PPUSH
61042: CALL_OW 306
61046: IFFALSE 61111
// begin j := GetSide ( i ) ;
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: LD_VAR 0 2
61057: PPUSH
61058: CALL_OW 255
61062: ST_TO_ADDR
// if j = 8 then
61063: LD_VAR 0 3
61067: PUSH
61068: LD_INT 8
61070: EQUAL
61071: IFFALSE 61083
// j := 0 else
61073: LD_ADDR_VAR 0 3
61077: PUSH
61078: LD_INT 0
61080: ST_TO_ADDR
61081: GO 61097
// j := j + 1 ;
61083: LD_ADDR_VAR 0 3
61087: PUSH
61088: LD_VAR 0 3
61092: PUSH
61093: LD_INT 1
61095: PLUS
61096: ST_TO_ADDR
// SetSide ( i , j ) ;
61097: LD_VAR 0 2
61101: PPUSH
61102: LD_VAR 0 3
61106: PPUSH
61107: CALL_OW 235
// end ;
61111: GO 61034
61113: POP
61114: POP
// end ;
61115: LD_VAR 0 1
61119: RET
// export function hHackFog ; begin
61120: LD_INT 0
61122: PPUSH
// FogOff ( true ) ;
61123: LD_INT 1
61125: PPUSH
61126: CALL_OW 344
// end ;
61130: LD_VAR 0 1
61134: RET
// export function hHackTeleport ( unit , x , y ) ; begin
61135: LD_INT 0
61137: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
61138: LD_VAR 0 1
61142: PPUSH
61143: LD_VAR 0 2
61147: PPUSH
61148: LD_VAR 0 3
61152: PPUSH
61153: LD_INT 1
61155: PPUSH
61156: LD_INT 1
61158: PPUSH
61159: CALL_OW 483
// CenterOnXY ( x , y ) ;
61163: LD_VAR 0 2
61167: PPUSH
61168: LD_VAR 0 3
61172: PPUSH
61173: CALL_OW 84
// end ;
61177: LD_VAR 0 4
61181: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61182: LD_INT 0
61184: PPUSH
61185: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61186: LD_VAR 0 1
61190: NOT
61191: PUSH
61192: LD_VAR 0 2
61196: PPUSH
61197: LD_VAR 0 3
61201: PPUSH
61202: CALL_OW 488
61206: NOT
61207: OR
61208: PUSH
61209: LD_VAR 0 1
61213: PPUSH
61214: CALL_OW 266
61218: PUSH
61219: LD_INT 3
61221: NONEQUAL
61222: PUSH
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 247
61232: PUSH
61233: LD_INT 1
61235: EQUAL
61236: NOT
61237: AND
61238: OR
61239: IFFALSE 61243
// exit ;
61241: GO 61392
// if GetType ( factory ) = unit_human then
61243: LD_VAR 0 1
61247: PPUSH
61248: CALL_OW 247
61252: PUSH
61253: LD_INT 1
61255: EQUAL
61256: IFFALSE 61273
// factory := IsInUnit ( factory ) ;
61258: LD_ADDR_VAR 0 1
61262: PUSH
61263: LD_VAR 0 1
61267: PPUSH
61268: CALL_OW 310
61272: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61273: LD_VAR 0 1
61277: PPUSH
61278: CALL_OW 266
61282: PUSH
61283: LD_INT 3
61285: NONEQUAL
61286: IFFALSE 61290
// exit ;
61288: GO 61392
// if HexInfo ( x , y ) = factory then
61290: LD_VAR 0 2
61294: PPUSH
61295: LD_VAR 0 3
61299: PPUSH
61300: CALL_OW 428
61304: PUSH
61305: LD_VAR 0 1
61309: EQUAL
61310: IFFALSE 61337
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
61312: LD_ADDR_EXP 86
61316: PUSH
61317: LD_EXP 86
61321: PPUSH
61322: LD_VAR 0 1
61326: PPUSH
61327: LD_INT 0
61329: PPUSH
61330: CALL_OW 1
61334: ST_TO_ADDR
61335: GO 61388
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
61337: LD_ADDR_EXP 86
61341: PUSH
61342: LD_EXP 86
61346: PPUSH
61347: LD_VAR 0 1
61351: PPUSH
61352: LD_VAR 0 1
61356: PPUSH
61357: CALL_OW 255
61361: PUSH
61362: LD_VAR 0 1
61366: PUSH
61367: LD_VAR 0 2
61371: PUSH
61372: LD_VAR 0 3
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: PPUSH
61383: CALL_OW 1
61387: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61388: CALL 61397 0 0
// end ;
61392: LD_VAR 0 4
61396: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61397: LD_INT 0
61399: PPUSH
61400: PPUSH
61401: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61402: LD_STRING resetFactoryWaypoint();
61404: PPUSH
61405: CALL_OW 559
// if factoryWaypoints then
61409: LD_EXP 86
61413: IFFALSE 61539
// begin list := PrepareArray ( factoryWaypoints ) ;
61415: LD_ADDR_VAR 0 3
61419: PUSH
61420: LD_EXP 86
61424: PPUSH
61425: CALL 46168 0 1
61429: ST_TO_ADDR
// for i := 1 to list do
61430: LD_ADDR_VAR 0 2
61434: PUSH
61435: DOUBLE
61436: LD_INT 1
61438: DEC
61439: ST_TO_ADDR
61440: LD_VAR 0 3
61444: PUSH
61445: FOR_TO
61446: IFFALSE 61537
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61448: LD_STRING setFactoryWaypointXY(
61450: PUSH
61451: LD_VAR 0 3
61455: PUSH
61456: LD_VAR 0 2
61460: ARRAY
61461: PUSH
61462: LD_INT 1
61464: ARRAY
61465: STR
61466: PUSH
61467: LD_STRING ,
61469: STR
61470: PUSH
61471: LD_VAR 0 3
61475: PUSH
61476: LD_VAR 0 2
61480: ARRAY
61481: PUSH
61482: LD_INT 2
61484: ARRAY
61485: STR
61486: PUSH
61487: LD_STRING ,
61489: STR
61490: PUSH
61491: LD_VAR 0 3
61495: PUSH
61496: LD_VAR 0 2
61500: ARRAY
61501: PUSH
61502: LD_INT 3
61504: ARRAY
61505: STR
61506: PUSH
61507: LD_STRING ,
61509: STR
61510: PUSH
61511: LD_VAR 0 3
61515: PUSH
61516: LD_VAR 0 2
61520: ARRAY
61521: PUSH
61522: LD_INT 4
61524: ARRAY
61525: STR
61526: PUSH
61527: LD_STRING )
61529: STR
61530: PPUSH
61531: CALL_OW 559
61535: GO 61445
61537: POP
61538: POP
// end ; end ;
61539: LD_VAR 0 1
61543: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61544: LD_INT 0
61546: PPUSH
// if HexInfo ( x , y ) = warehouse then
61547: LD_VAR 0 2
61551: PPUSH
61552: LD_VAR 0 3
61556: PPUSH
61557: CALL_OW 428
61561: PUSH
61562: LD_VAR 0 1
61566: EQUAL
61567: IFFALSE 61594
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61569: LD_ADDR_EXP 87
61573: PUSH
61574: LD_EXP 87
61578: PPUSH
61579: LD_VAR 0 1
61583: PPUSH
61584: LD_INT 0
61586: PPUSH
61587: CALL_OW 1
61591: ST_TO_ADDR
61592: GO 61645
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61594: LD_ADDR_EXP 87
61598: PUSH
61599: LD_EXP 87
61603: PPUSH
61604: LD_VAR 0 1
61608: PPUSH
61609: LD_VAR 0 1
61613: PPUSH
61614: CALL_OW 255
61618: PUSH
61619: LD_VAR 0 1
61623: PUSH
61624: LD_VAR 0 2
61628: PUSH
61629: LD_VAR 0 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: PPUSH
61640: CALL_OW 1
61644: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61645: CALL 61654 0 0
// end ;
61649: LD_VAR 0 4
61653: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61654: LD_INT 0
61656: PPUSH
61657: PPUSH
61658: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61659: LD_STRING resetWarehouseGatheringPoints();
61661: PPUSH
61662: CALL_OW 559
// if warehouseGatheringPoints then
61666: LD_EXP 87
61670: IFFALSE 61796
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61672: LD_ADDR_VAR 0 3
61676: PUSH
61677: LD_EXP 87
61681: PPUSH
61682: CALL 46168 0 1
61686: ST_TO_ADDR
// for i := 1 to list do
61687: LD_ADDR_VAR 0 2
61691: PUSH
61692: DOUBLE
61693: LD_INT 1
61695: DEC
61696: ST_TO_ADDR
61697: LD_VAR 0 3
61701: PUSH
61702: FOR_TO
61703: IFFALSE 61794
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61705: LD_STRING setWarehouseGatheringPointXY(
61707: PUSH
61708: LD_VAR 0 3
61712: PUSH
61713: LD_VAR 0 2
61717: ARRAY
61718: PUSH
61719: LD_INT 1
61721: ARRAY
61722: STR
61723: PUSH
61724: LD_STRING ,
61726: STR
61727: PUSH
61728: LD_VAR 0 3
61732: PUSH
61733: LD_VAR 0 2
61737: ARRAY
61738: PUSH
61739: LD_INT 2
61741: ARRAY
61742: STR
61743: PUSH
61744: LD_STRING ,
61746: STR
61747: PUSH
61748: LD_VAR 0 3
61752: PUSH
61753: LD_VAR 0 2
61757: ARRAY
61758: PUSH
61759: LD_INT 3
61761: ARRAY
61762: STR
61763: PUSH
61764: LD_STRING ,
61766: STR
61767: PUSH
61768: LD_VAR 0 3
61772: PUSH
61773: LD_VAR 0 2
61777: ARRAY
61778: PUSH
61779: LD_INT 4
61781: ARRAY
61782: STR
61783: PUSH
61784: LD_STRING )
61786: STR
61787: PPUSH
61788: CALL_OW 559
61792: GO 61702
61794: POP
61795: POP
// end ; end ;
61796: LD_VAR 0 1
61800: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61801: LD_EXP 87
61805: IFFALSE 62490
61807: GO 61809
61809: DISABLE
61810: LD_INT 0
61812: PPUSH
61813: PPUSH
61814: PPUSH
61815: PPUSH
61816: PPUSH
61817: PPUSH
61818: PPUSH
61819: PPUSH
61820: PPUSH
// begin enable ;
61821: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61822: LD_ADDR_VAR 0 3
61826: PUSH
61827: LD_EXP 87
61831: PPUSH
61832: CALL 46168 0 1
61836: ST_TO_ADDR
// if not list then
61837: LD_VAR 0 3
61841: NOT
61842: IFFALSE 61846
// exit ;
61844: GO 62490
// for i := 1 to list do
61846: LD_ADDR_VAR 0 1
61850: PUSH
61851: DOUBLE
61852: LD_INT 1
61854: DEC
61855: ST_TO_ADDR
61856: LD_VAR 0 3
61860: PUSH
61861: FOR_TO
61862: IFFALSE 62488
// begin depot := list [ i ] [ 2 ] ;
61864: LD_ADDR_VAR 0 8
61868: PUSH
61869: LD_VAR 0 3
61873: PUSH
61874: LD_VAR 0 1
61878: ARRAY
61879: PUSH
61880: LD_INT 2
61882: ARRAY
61883: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61884: LD_ADDR_VAR 0 5
61888: PUSH
61889: LD_VAR 0 3
61893: PUSH
61894: LD_VAR 0 1
61898: ARRAY
61899: PUSH
61900: LD_INT 1
61902: ARRAY
61903: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61904: LD_VAR 0 8
61908: PPUSH
61909: CALL_OW 301
61913: PUSH
61914: LD_VAR 0 5
61918: PUSH
61919: LD_VAR 0 8
61923: PPUSH
61924: CALL_OW 255
61928: NONEQUAL
61929: OR
61930: IFFALSE 61959
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61932: LD_ADDR_EXP 87
61936: PUSH
61937: LD_EXP 87
61941: PPUSH
61942: LD_VAR 0 8
61946: PPUSH
61947: LD_INT 0
61949: PPUSH
61950: CALL_OW 1
61954: ST_TO_ADDR
// exit ;
61955: POP
61956: POP
61957: GO 62490
// end ; x := list [ i ] [ 3 ] ;
61959: LD_ADDR_VAR 0 6
61963: PUSH
61964: LD_VAR 0 3
61968: PUSH
61969: LD_VAR 0 1
61973: ARRAY
61974: PUSH
61975: LD_INT 3
61977: ARRAY
61978: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61979: LD_ADDR_VAR 0 7
61983: PUSH
61984: LD_VAR 0 3
61988: PUSH
61989: LD_VAR 0 1
61993: ARRAY
61994: PUSH
61995: LD_INT 4
61997: ARRAY
61998: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61999: LD_ADDR_VAR 0 9
62003: PUSH
62004: LD_VAR 0 6
62008: PPUSH
62009: LD_VAR 0 7
62013: PPUSH
62014: LD_INT 16
62016: PPUSH
62017: CALL 44756 0 3
62021: ST_TO_ADDR
// if not cratesNearbyPoint then
62022: LD_VAR 0 9
62026: NOT
62027: IFFALSE 62033
// exit ;
62029: POP
62030: POP
62031: GO 62490
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62033: LD_ADDR_VAR 0 4
62037: PUSH
62038: LD_INT 22
62040: PUSH
62041: LD_VAR 0 5
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: LD_INT 60
62055: PUSH
62056: EMPTY
62057: LIST
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 91
62065: PUSH
62066: LD_VAR 0 8
62070: PUSH
62071: LD_INT 6
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: LD_INT 25
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 25
62094: PUSH
62095: LD_INT 16
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: LIST
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: PPUSH
62113: CALL_OW 69
62117: PUSH
62118: LD_VAR 0 8
62122: PPUSH
62123: CALL_OW 313
62127: PPUSH
62128: LD_INT 3
62130: PUSH
62131: LD_INT 60
62133: PUSH
62134: EMPTY
62135: LIST
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: LD_INT 25
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 25
62156: PUSH
62157: LD_INT 16
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PPUSH
62173: CALL_OW 72
62177: UNION
62178: ST_TO_ADDR
// if tmp then
62179: LD_VAR 0 4
62183: IFFALSE 62263
// begin tmp := ShrinkArray ( tmp , 3 ) ;
62185: LD_ADDR_VAR 0 4
62189: PUSH
62190: LD_VAR 0 4
62194: PPUSH
62195: LD_INT 3
62197: PPUSH
62198: CALL 42725 0 2
62202: ST_TO_ADDR
// for j in tmp do
62203: LD_ADDR_VAR 0 2
62207: PUSH
62208: LD_VAR 0 4
62212: PUSH
62213: FOR_IN
62214: IFFALSE 62257
// begin if IsInUnit ( j ) then
62216: LD_VAR 0 2
62220: PPUSH
62221: CALL_OW 310
62225: IFFALSE 62236
// ComExit ( j ) ;
62227: LD_VAR 0 2
62231: PPUSH
62232: CALL 42808 0 1
// AddComCollect ( j , x , y ) ;
62236: LD_VAR 0 2
62240: PPUSH
62241: LD_VAR 0 6
62245: PPUSH
62246: LD_VAR 0 7
62250: PPUSH
62251: CALL_OW 177
// end ;
62255: GO 62213
62257: POP
62258: POP
// exit ;
62259: POP
62260: POP
62261: GO 62490
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
62263: LD_ADDR_VAR 0 4
62267: PUSH
62268: LD_INT 22
62270: PUSH
62271: LD_VAR 0 5
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 91
62282: PUSH
62283: LD_VAR 0 8
62287: PUSH
62288: LD_INT 8
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 34
62301: PUSH
62302: LD_INT 12
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 34
62311: PUSH
62312: LD_INT 51
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 34
62321: PUSH
62322: LD_INT 32
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 34
62331: PUSH
62332: LD_INT 89
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: PPUSH
62351: CALL_OW 69
62355: ST_TO_ADDR
// if tmp then
62356: LD_VAR 0 4
62360: IFFALSE 62486
// begin for j in tmp do
62362: LD_ADDR_VAR 0 2
62366: PUSH
62367: LD_VAR 0 4
62371: PUSH
62372: FOR_IN
62373: IFFALSE 62484
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
62375: LD_VAR 0 2
62379: PPUSH
62380: CALL_OW 262
62384: PUSH
62385: LD_INT 3
62387: EQUAL
62388: PUSH
62389: LD_VAR 0 2
62393: PPUSH
62394: CALL_OW 261
62398: PUSH
62399: LD_INT 20
62401: GREATER
62402: OR
62403: PUSH
62404: LD_VAR 0 2
62408: PPUSH
62409: CALL_OW 314
62413: NOT
62414: AND
62415: PUSH
62416: LD_VAR 0 2
62420: PPUSH
62421: CALL_OW 263
62425: PUSH
62426: LD_INT 1
62428: NONEQUAL
62429: PUSH
62430: LD_VAR 0 2
62434: PPUSH
62435: CALL_OW 311
62439: OR
62440: AND
62441: IFFALSE 62482
// begin ComCollect ( j , x , y ) ;
62443: LD_VAR 0 2
62447: PPUSH
62448: LD_VAR 0 6
62452: PPUSH
62453: LD_VAR 0 7
62457: PPUSH
62458: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
62462: LD_VAR 0 2
62466: PPUSH
62467: LD_VAR 0 8
62471: PPUSH
62472: CALL_OW 172
// exit ;
62476: POP
62477: POP
62478: POP
62479: POP
62480: GO 62490
// end ;
62482: GO 62372
62484: POP
62485: POP
// end ; end ;
62486: GO 61861
62488: POP
62489: POP
// end ; end_of_file
62490: PPOPN 9
62492: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62493: LD_VAR 0 1
62497: PUSH
62498: LD_INT 200
62500: DOUBLE
62501: GREATEREQUAL
62502: IFFALSE 62510
62504: LD_INT 299
62506: DOUBLE
62507: LESSEQUAL
62508: IFTRUE 62512
62510: GO 62544
62512: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62513: LD_VAR 0 1
62517: PPUSH
62518: LD_VAR 0 2
62522: PPUSH
62523: LD_VAR 0 3
62527: PPUSH
62528: LD_VAR 0 4
62532: PPUSH
62533: LD_VAR 0 5
62537: PPUSH
62538: CALL 63032 0 5
62542: GO 62621
62544: LD_INT 300
62546: DOUBLE
62547: GREATEREQUAL
62548: IFFALSE 62556
62550: LD_INT 399
62552: DOUBLE
62553: LESSEQUAL
62554: IFTRUE 62558
62556: GO 62620
62558: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62559: LD_VAR 0 1
62563: PPUSH
62564: LD_VAR 0 2
62568: PPUSH
62569: LD_VAR 0 3
62573: PPUSH
62574: LD_VAR 0 4
62578: PPUSH
62579: LD_VAR 0 5
62583: PPUSH
62584: LD_VAR 0 6
62588: PPUSH
62589: LD_VAR 0 7
62593: PPUSH
62594: LD_VAR 0 8
62598: PPUSH
62599: LD_VAR 0 9
62603: PPUSH
62604: LD_VAR 0 10
62608: PPUSH
62609: LD_VAR 0 11
62613: PPUSH
62614: CALL 59194 0 11
62618: GO 62621
62620: POP
// end ;
62621: PPOPN 11
62623: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62624: LD_VAR 0 1
62628: PPUSH
62629: LD_VAR 0 2
62633: PPUSH
62634: LD_VAR 0 3
62638: PPUSH
62639: LD_VAR 0 4
62643: PPUSH
62644: LD_VAR 0 5
62648: PPUSH
62649: CALL 62768 0 5
// end ; end_of_file
62653: PPOPN 5
62655: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62656: LD_INT 0
62658: PPUSH
62659: PPUSH
62660: PPUSH
62661: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 264
62671: PUSH
62672: LD_INT 91
62674: EQUAL
62675: IFFALSE 62747
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62677: LD_INT 68
62679: PPUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 255
62689: PPUSH
62690: CALL_OW 321
62694: PUSH
62695: LD_INT 2
62697: EQUAL
62698: IFFALSE 62710
// eff := 70 else
62700: LD_ADDR_VAR 0 4
62704: PUSH
62705: LD_INT 70
62707: ST_TO_ADDR
62708: GO 62718
// eff := 30 ;
62710: LD_ADDR_VAR 0 4
62714: PUSH
62715: LD_INT 30
62717: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62718: LD_VAR 0 1
62722: PPUSH
62723: CALL_OW 250
62727: PPUSH
62728: LD_VAR 0 1
62732: PPUSH
62733: CALL_OW 251
62737: PPUSH
62738: LD_VAR 0 4
62742: PPUSH
62743: CALL_OW 495
// end ; end ;
62747: LD_VAR 0 2
62751: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62752: LD_INT 0
62754: PPUSH
// end ;
62755: LD_VAR 0 4
62759: RET
// export function SOS_Command ( cmd ) ; begin
62760: LD_INT 0
62762: PPUSH
// end ;
62763: LD_VAR 0 2
62767: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62768: LD_INT 0
62770: PPUSH
// end ;
62771: LD_VAR 0 6
62775: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62776: LD_INT 0
62778: PPUSH
62779: PPUSH
// if not vehicle or not factory then
62780: LD_VAR 0 1
62784: NOT
62785: PUSH
62786: LD_VAR 0 2
62790: NOT
62791: OR
62792: IFFALSE 62796
// exit ;
62794: GO 63027
// if factoryWaypoints >= factory then
62796: LD_EXP 86
62800: PUSH
62801: LD_VAR 0 2
62805: GREATEREQUAL
62806: IFFALSE 63027
// if factoryWaypoints [ factory ] then
62808: LD_EXP 86
62812: PUSH
62813: LD_VAR 0 2
62817: ARRAY
62818: IFFALSE 63027
// begin if GetControl ( vehicle ) = control_manual then
62820: LD_VAR 0 1
62824: PPUSH
62825: CALL_OW 263
62829: PUSH
62830: LD_INT 1
62832: EQUAL
62833: IFFALSE 62914
// begin driver := IsDrivenBy ( vehicle ) ;
62835: LD_ADDR_VAR 0 4
62839: PUSH
62840: LD_VAR 0 1
62844: PPUSH
62845: CALL_OW 311
62849: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62850: LD_VAR 0 4
62854: PPUSH
62855: LD_EXP 86
62859: PUSH
62860: LD_VAR 0 2
62864: ARRAY
62865: PUSH
62866: LD_INT 3
62868: ARRAY
62869: PPUSH
62870: LD_EXP 86
62874: PUSH
62875: LD_VAR 0 2
62879: ARRAY
62880: PUSH
62881: LD_INT 4
62883: ARRAY
62884: PPUSH
62885: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62889: LD_VAR 0 4
62893: PPUSH
62894: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62898: LD_VAR 0 4
62902: PPUSH
62903: LD_VAR 0 2
62907: PPUSH
62908: CALL_OW 180
// end else
62912: GO 63027
// if GetControl ( vehicle ) = control_remote then
62914: LD_VAR 0 1
62918: PPUSH
62919: CALL_OW 263
62923: PUSH
62924: LD_INT 2
62926: EQUAL
62927: IFFALSE 62988
// begin wait ( 0 0$2 ) ;
62929: LD_INT 70
62931: PPUSH
62932: CALL_OW 67
// if Connect ( vehicle ) then
62936: LD_VAR 0 1
62940: PPUSH
62941: CALL 13016 0 1
62945: IFFALSE 62986
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62947: LD_VAR 0 1
62951: PPUSH
62952: LD_EXP 86
62956: PUSH
62957: LD_VAR 0 2
62961: ARRAY
62962: PUSH
62963: LD_INT 3
62965: ARRAY
62966: PPUSH
62967: LD_EXP 86
62971: PUSH
62972: LD_VAR 0 2
62976: ARRAY
62977: PUSH
62978: LD_INT 4
62980: ARRAY
62981: PPUSH
62982: CALL_OW 171
// end else
62986: GO 63027
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62988: LD_VAR 0 1
62992: PPUSH
62993: LD_EXP 86
62997: PUSH
62998: LD_VAR 0 2
63002: ARRAY
63003: PUSH
63004: LD_INT 3
63006: ARRAY
63007: PPUSH
63008: LD_EXP 86
63012: PUSH
63013: LD_VAR 0 2
63017: ARRAY
63018: PUSH
63019: LD_INT 4
63021: ARRAY
63022: PPUSH
63023: CALL_OW 171
// end ; end ;
63027: LD_VAR 0 3
63031: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63032: LD_INT 0
63034: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63035: LD_VAR 0 1
63039: PUSH
63040: LD_INT 250
63042: EQUAL
63043: PUSH
63044: LD_VAR 0 2
63048: PPUSH
63049: CALL_OW 264
63053: PUSH
63054: LD_INT 81
63056: EQUAL
63057: AND
63058: IFFALSE 63079
// MinerPlaceMine ( unit , x , y ) ;
63060: LD_VAR 0 2
63064: PPUSH
63065: LD_VAR 0 4
63069: PPUSH
63070: LD_VAR 0 5
63074: PPUSH
63075: CALL 65903 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
63079: LD_VAR 0 1
63083: PUSH
63084: LD_INT 251
63086: EQUAL
63087: PUSH
63088: LD_VAR 0 2
63092: PPUSH
63093: CALL_OW 264
63097: PUSH
63098: LD_INT 81
63100: EQUAL
63101: AND
63102: IFFALSE 63123
// MinerDetonateMine ( unit , x , y ) ;
63104: LD_VAR 0 2
63108: PPUSH
63109: LD_VAR 0 4
63113: PPUSH
63114: LD_VAR 0 5
63118: PPUSH
63119: CALL 66178 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
63123: LD_VAR 0 1
63127: PUSH
63128: LD_INT 252
63130: EQUAL
63131: PUSH
63132: LD_VAR 0 2
63136: PPUSH
63137: CALL_OW 264
63141: PUSH
63142: LD_INT 81
63144: EQUAL
63145: AND
63146: IFFALSE 63167
// MinerCreateMinefield ( unit , x , y ) ;
63148: LD_VAR 0 2
63152: PPUSH
63153: LD_VAR 0 4
63157: PPUSH
63158: LD_VAR 0 5
63162: PPUSH
63163: CALL 66595 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
63167: LD_VAR 0 1
63171: PUSH
63172: LD_INT 253
63174: EQUAL
63175: PUSH
63176: LD_VAR 0 2
63180: PPUSH
63181: CALL_OW 257
63185: PUSH
63186: LD_INT 5
63188: EQUAL
63189: AND
63190: IFFALSE 63211
// ComBinocular ( unit , x , y ) ;
63192: LD_VAR 0 2
63196: PPUSH
63197: LD_VAR 0 4
63201: PPUSH
63202: LD_VAR 0 5
63206: PPUSH
63207: CALL 66964 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
63211: LD_VAR 0 1
63215: PUSH
63216: LD_INT 254
63218: EQUAL
63219: PUSH
63220: LD_VAR 0 2
63224: PPUSH
63225: CALL_OW 264
63229: PUSH
63230: LD_INT 99
63232: EQUAL
63233: AND
63234: PUSH
63235: LD_VAR 0 3
63239: PPUSH
63240: CALL_OW 263
63244: PUSH
63245: LD_INT 3
63247: EQUAL
63248: AND
63249: IFFALSE 63265
// HackDestroyVehicle ( unit , selectedUnit ) ;
63251: LD_VAR 0 2
63255: PPUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: CALL 65267 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
63265: LD_VAR 0 1
63269: PUSH
63270: LD_INT 255
63272: EQUAL
63273: PUSH
63274: LD_VAR 0 2
63278: PPUSH
63279: CALL_OW 264
63283: PUSH
63284: LD_INT 14
63286: PUSH
63287: LD_INT 53
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: IN
63294: AND
63295: PUSH
63296: LD_VAR 0 4
63300: PPUSH
63301: LD_VAR 0 5
63305: PPUSH
63306: CALL_OW 488
63310: AND
63311: IFFALSE 63335
// CutTreeXYR ( unit , x , y , 12 ) ;
63313: LD_VAR 0 2
63317: PPUSH
63318: LD_VAR 0 4
63322: PPUSH
63323: LD_VAR 0 5
63327: PPUSH
63328: LD_INT 12
63330: PPUSH
63331: CALL 63430 0 4
// if cmd = 256 then
63335: LD_VAR 0 1
63339: PUSH
63340: LD_INT 256
63342: EQUAL
63343: IFFALSE 63364
// SetFactoryWaypoint ( unit , x , y ) ;
63345: LD_VAR 0 2
63349: PPUSH
63350: LD_VAR 0 4
63354: PPUSH
63355: LD_VAR 0 5
63359: PPUSH
63360: CALL 61182 0 3
// if cmd = 257 then
63364: LD_VAR 0 1
63368: PUSH
63369: LD_INT 257
63371: EQUAL
63372: IFFALSE 63393
// SetWarehouseGatheringPoint ( unit , x , y ) ;
63374: LD_VAR 0 2
63378: PPUSH
63379: LD_VAR 0 4
63383: PPUSH
63384: LD_VAR 0 5
63388: PPUSH
63389: CALL 61544 0 3
// if cmd = 258 then
63393: LD_VAR 0 1
63397: PUSH
63398: LD_INT 258
63400: EQUAL
63401: IFFALSE 63425
// BurnTreeXYR ( unit , x , y , 8 ) ;
63403: LD_VAR 0 2
63407: PPUSH
63408: LD_VAR 0 4
63412: PPUSH
63413: LD_VAR 0 5
63417: PPUSH
63418: LD_INT 8
63420: PPUSH
63421: CALL 63824 0 4
// end ;
63425: LD_VAR 0 6
63429: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63430: LD_INT 0
63432: PPUSH
63433: PPUSH
63434: PPUSH
63435: PPUSH
63436: PPUSH
63437: PPUSH
63438: PPUSH
63439: PPUSH
63440: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
63441: LD_VAR 0 1
63445: PPUSH
63446: CALL_OW 302
63450: NOT
63451: PUSH
63452: LD_VAR 0 2
63456: PPUSH
63457: LD_VAR 0 3
63461: PPUSH
63462: CALL_OW 488
63466: NOT
63467: OR
63468: PUSH
63469: LD_VAR 0 4
63473: NOT
63474: OR
63475: IFFALSE 63479
// exit ;
63477: GO 63819
// list := [ ] ;
63479: LD_ADDR_VAR 0 13
63483: PUSH
63484: EMPTY
63485: ST_TO_ADDR
// if x - r < 0 then
63486: LD_VAR 0 2
63490: PUSH
63491: LD_VAR 0 4
63495: MINUS
63496: PUSH
63497: LD_INT 0
63499: LESS
63500: IFFALSE 63512
// min_x := 0 else
63502: LD_ADDR_VAR 0 7
63506: PUSH
63507: LD_INT 0
63509: ST_TO_ADDR
63510: GO 63528
// min_x := x - r ;
63512: LD_ADDR_VAR 0 7
63516: PUSH
63517: LD_VAR 0 2
63521: PUSH
63522: LD_VAR 0 4
63526: MINUS
63527: ST_TO_ADDR
// if y - r < 0 then
63528: LD_VAR 0 3
63532: PUSH
63533: LD_VAR 0 4
63537: MINUS
63538: PUSH
63539: LD_INT 0
63541: LESS
63542: IFFALSE 63554
// min_y := 0 else
63544: LD_ADDR_VAR 0 8
63548: PUSH
63549: LD_INT 0
63551: ST_TO_ADDR
63552: GO 63570
// min_y := y - r ;
63554: LD_ADDR_VAR 0 8
63558: PUSH
63559: LD_VAR 0 3
63563: PUSH
63564: LD_VAR 0 4
63568: MINUS
63569: ST_TO_ADDR
// max_x := x + r ;
63570: LD_ADDR_VAR 0 9
63574: PUSH
63575: LD_VAR 0 2
63579: PUSH
63580: LD_VAR 0 4
63584: PLUS
63585: ST_TO_ADDR
// max_y := y + r ;
63586: LD_ADDR_VAR 0 10
63590: PUSH
63591: LD_VAR 0 3
63595: PUSH
63596: LD_VAR 0 4
63600: PLUS
63601: ST_TO_ADDR
// for _x = min_x to max_x do
63602: LD_ADDR_VAR 0 11
63606: PUSH
63607: DOUBLE
63608: LD_VAR 0 7
63612: DEC
63613: ST_TO_ADDR
63614: LD_VAR 0 9
63618: PUSH
63619: FOR_TO
63620: IFFALSE 63737
// for _y = min_y to max_y do
63622: LD_ADDR_VAR 0 12
63626: PUSH
63627: DOUBLE
63628: LD_VAR 0 8
63632: DEC
63633: ST_TO_ADDR
63634: LD_VAR 0 10
63638: PUSH
63639: FOR_TO
63640: IFFALSE 63733
// begin if not ValidHex ( _x , _y ) then
63642: LD_VAR 0 11
63646: PPUSH
63647: LD_VAR 0 12
63651: PPUSH
63652: CALL_OW 488
63656: NOT
63657: IFFALSE 63661
// continue ;
63659: GO 63639
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63661: LD_VAR 0 11
63665: PPUSH
63666: LD_VAR 0 12
63670: PPUSH
63671: CALL_OW 351
63675: PUSH
63676: LD_VAR 0 11
63680: PPUSH
63681: LD_VAR 0 12
63685: PPUSH
63686: CALL_OW 554
63690: AND
63691: IFFALSE 63731
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63693: LD_ADDR_VAR 0 13
63697: PUSH
63698: LD_VAR 0 13
63702: PPUSH
63703: LD_VAR 0 13
63707: PUSH
63708: LD_INT 1
63710: PLUS
63711: PPUSH
63712: LD_VAR 0 11
63716: PUSH
63717: LD_VAR 0 12
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PPUSH
63726: CALL_OW 2
63730: ST_TO_ADDR
// end ;
63731: GO 63639
63733: POP
63734: POP
63735: GO 63619
63737: POP
63738: POP
// if not list then
63739: LD_VAR 0 13
63743: NOT
63744: IFFALSE 63748
// exit ;
63746: GO 63819
// for i in list do
63748: LD_ADDR_VAR 0 6
63752: PUSH
63753: LD_VAR 0 13
63757: PUSH
63758: FOR_IN
63759: IFFALSE 63817
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63761: LD_VAR 0 1
63765: PPUSH
63766: LD_STRING M
63768: PUSH
63769: LD_VAR 0 6
63773: PUSH
63774: LD_INT 1
63776: ARRAY
63777: PUSH
63778: LD_VAR 0 6
63782: PUSH
63783: LD_INT 2
63785: ARRAY
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: PPUSH
63811: CALL_OW 447
63815: GO 63758
63817: POP
63818: POP
// end ;
63819: LD_VAR 0 5
63823: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63824: LD_INT 0
63826: PPUSH
63827: PPUSH
63828: PPUSH
63829: PPUSH
63830: PPUSH
63831: PPUSH
63832: PPUSH
63833: PPUSH
63834: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
63835: LD_VAR 0 1
63839: PPUSH
63840: CALL_OW 302
63844: NOT
63845: PUSH
63846: LD_VAR 0 2
63850: PPUSH
63851: LD_VAR 0 3
63855: PPUSH
63856: CALL_OW 488
63860: NOT
63861: OR
63862: PUSH
63863: LD_VAR 0 4
63867: NOT
63868: OR
63869: IFFALSE 63873
// exit ;
63871: GO 64221
// list := [ ] ;
63873: LD_ADDR_VAR 0 13
63877: PUSH
63878: EMPTY
63879: ST_TO_ADDR
// if x - r < 0 then
63880: LD_VAR 0 2
63884: PUSH
63885: LD_VAR 0 4
63889: MINUS
63890: PUSH
63891: LD_INT 0
63893: LESS
63894: IFFALSE 63906
// min_x := 0 else
63896: LD_ADDR_VAR 0 7
63900: PUSH
63901: LD_INT 0
63903: ST_TO_ADDR
63904: GO 63922
// min_x := x - r ;
63906: LD_ADDR_VAR 0 7
63910: PUSH
63911: LD_VAR 0 2
63915: PUSH
63916: LD_VAR 0 4
63920: MINUS
63921: ST_TO_ADDR
// if y - r < 0 then
63922: LD_VAR 0 3
63926: PUSH
63927: LD_VAR 0 4
63931: MINUS
63932: PUSH
63933: LD_INT 0
63935: LESS
63936: IFFALSE 63948
// min_y := 0 else
63938: LD_ADDR_VAR 0 8
63942: PUSH
63943: LD_INT 0
63945: ST_TO_ADDR
63946: GO 63964
// min_y := y - r ;
63948: LD_ADDR_VAR 0 8
63952: PUSH
63953: LD_VAR 0 3
63957: PUSH
63958: LD_VAR 0 4
63962: MINUS
63963: ST_TO_ADDR
// max_x := x + r ;
63964: LD_ADDR_VAR 0 9
63968: PUSH
63969: LD_VAR 0 2
63973: PUSH
63974: LD_VAR 0 4
63978: PLUS
63979: ST_TO_ADDR
// max_y := y + r ;
63980: LD_ADDR_VAR 0 10
63984: PUSH
63985: LD_VAR 0 3
63989: PUSH
63990: LD_VAR 0 4
63994: PLUS
63995: ST_TO_ADDR
// for _x = min_x to max_x do
63996: LD_ADDR_VAR 0 11
64000: PUSH
64001: DOUBLE
64002: LD_VAR 0 7
64006: DEC
64007: ST_TO_ADDR
64008: LD_VAR 0 9
64012: PUSH
64013: FOR_TO
64014: IFFALSE 64131
// for _y = min_y to max_y do
64016: LD_ADDR_VAR 0 12
64020: PUSH
64021: DOUBLE
64022: LD_VAR 0 8
64026: DEC
64027: ST_TO_ADDR
64028: LD_VAR 0 10
64032: PUSH
64033: FOR_TO
64034: IFFALSE 64127
// begin if not ValidHex ( _x , _y ) then
64036: LD_VAR 0 11
64040: PPUSH
64041: LD_VAR 0 12
64045: PPUSH
64046: CALL_OW 488
64050: NOT
64051: IFFALSE 64055
// continue ;
64053: GO 64033
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64055: LD_VAR 0 11
64059: PPUSH
64060: LD_VAR 0 12
64064: PPUSH
64065: CALL_OW 351
64069: PUSH
64070: LD_VAR 0 11
64074: PPUSH
64075: LD_VAR 0 12
64079: PPUSH
64080: CALL_OW 554
64084: AND
64085: IFFALSE 64125
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64087: LD_ADDR_VAR 0 13
64091: PUSH
64092: LD_VAR 0 13
64096: PPUSH
64097: LD_VAR 0 13
64101: PUSH
64102: LD_INT 1
64104: PLUS
64105: PPUSH
64106: LD_VAR 0 11
64110: PUSH
64111: LD_VAR 0 12
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PPUSH
64120: CALL_OW 2
64124: ST_TO_ADDR
// end ;
64125: GO 64033
64127: POP
64128: POP
64129: GO 64013
64131: POP
64132: POP
// if not list then
64133: LD_VAR 0 13
64137: NOT
64138: IFFALSE 64142
// exit ;
64140: GO 64221
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
64142: LD_ADDR_VAR 0 13
64146: PUSH
64147: LD_VAR 0 1
64151: PPUSH
64152: LD_VAR 0 13
64156: PPUSH
64157: LD_INT 1
64159: PPUSH
64160: LD_INT 1
64162: PPUSH
64163: CALL 10158 0 4
64167: ST_TO_ADDR
// ComStop ( flame ) ;
64168: LD_VAR 0 1
64172: PPUSH
64173: CALL_OW 141
// for i in list do
64177: LD_ADDR_VAR 0 6
64181: PUSH
64182: LD_VAR 0 13
64186: PUSH
64187: FOR_IN
64188: IFFALSE 64219
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
64190: LD_VAR 0 1
64194: PPUSH
64195: LD_VAR 0 6
64199: PUSH
64200: LD_INT 1
64202: ARRAY
64203: PPUSH
64204: LD_VAR 0 6
64208: PUSH
64209: LD_INT 2
64211: ARRAY
64212: PPUSH
64213: CALL_OW 176
64217: GO 64187
64219: POP
64220: POP
// end ;
64221: LD_VAR 0 5
64225: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64226: LD_EXP 89
64230: NOT
64231: IFFALSE 64281
64233: GO 64235
64235: DISABLE
// begin initHack := true ;
64236: LD_ADDR_EXP 89
64240: PUSH
64241: LD_INT 1
64243: ST_TO_ADDR
// hackTanks := [ ] ;
64244: LD_ADDR_EXP 90
64248: PUSH
64249: EMPTY
64250: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64251: LD_ADDR_EXP 91
64255: PUSH
64256: EMPTY
64257: ST_TO_ADDR
// hackLimit := 3 ;
64258: LD_ADDR_EXP 92
64262: PUSH
64263: LD_INT 3
64265: ST_TO_ADDR
// hackDist := 12 ;
64266: LD_ADDR_EXP 93
64270: PUSH
64271: LD_INT 12
64273: ST_TO_ADDR
// hackCounter := [ ] ;
64274: LD_ADDR_EXP 94
64278: PUSH
64279: EMPTY
64280: ST_TO_ADDR
// end ;
64281: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64282: LD_EXP 89
64286: PUSH
64287: LD_INT 34
64289: PUSH
64290: LD_INT 99
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PPUSH
64297: CALL_OW 69
64301: AND
64302: IFFALSE 64555
64304: GO 64306
64306: DISABLE
64307: LD_INT 0
64309: PPUSH
64310: PPUSH
// begin enable ;
64311: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64312: LD_ADDR_VAR 0 1
64316: PUSH
64317: LD_INT 34
64319: PUSH
64320: LD_INT 99
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PPUSH
64327: CALL_OW 69
64331: PUSH
64332: FOR_IN
64333: IFFALSE 64553
// begin if not i in hackTanks then
64335: LD_VAR 0 1
64339: PUSH
64340: LD_EXP 90
64344: IN
64345: NOT
64346: IFFALSE 64429
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64348: LD_ADDR_EXP 90
64352: PUSH
64353: LD_EXP 90
64357: PPUSH
64358: LD_EXP 90
64362: PUSH
64363: LD_INT 1
64365: PLUS
64366: PPUSH
64367: LD_VAR 0 1
64371: PPUSH
64372: CALL_OW 1
64376: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64377: LD_ADDR_EXP 91
64381: PUSH
64382: LD_EXP 91
64386: PPUSH
64387: LD_EXP 91
64391: PUSH
64392: LD_INT 1
64394: PLUS
64395: PPUSH
64396: EMPTY
64397: PPUSH
64398: CALL_OW 1
64402: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64403: LD_ADDR_EXP 94
64407: PUSH
64408: LD_EXP 94
64412: PPUSH
64413: LD_EXP 94
64417: PUSH
64418: LD_INT 1
64420: PLUS
64421: PPUSH
64422: EMPTY
64423: PPUSH
64424: CALL_OW 1
64428: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64429: LD_VAR 0 1
64433: PPUSH
64434: CALL_OW 302
64438: NOT
64439: IFFALSE 64452
// begin HackUnlinkAll ( i ) ;
64441: LD_VAR 0 1
64445: PPUSH
64446: CALL 64558 0 1
// continue ;
64450: GO 64332
// end ; HackCheckCapturedStatus ( i ) ;
64452: LD_VAR 0 1
64456: PPUSH
64457: CALL 65001 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64461: LD_ADDR_VAR 0 2
64465: PUSH
64466: LD_INT 81
64468: PUSH
64469: LD_VAR 0 1
64473: PPUSH
64474: CALL_OW 255
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 33
64485: PUSH
64486: LD_INT 3
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 91
64495: PUSH
64496: LD_VAR 0 1
64500: PUSH
64501: LD_EXP 93
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 50
64513: PUSH
64514: EMPTY
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: PPUSH
64523: CALL_OW 69
64527: ST_TO_ADDR
// if not tmp then
64528: LD_VAR 0 2
64532: NOT
64533: IFFALSE 64537
// continue ;
64535: GO 64332
// HackLink ( i , tmp ) ;
64537: LD_VAR 0 1
64541: PPUSH
64542: LD_VAR 0 2
64546: PPUSH
64547: CALL 64694 0 2
// end ;
64551: GO 64332
64553: POP
64554: POP
// end ;
64555: PPOPN 2
64557: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
64558: LD_INT 0
64560: PPUSH
64561: PPUSH
64562: PPUSH
// if not hack in hackTanks then
64563: LD_VAR 0 1
64567: PUSH
64568: LD_EXP 90
64572: IN
64573: NOT
64574: IFFALSE 64578
// exit ;
64576: GO 64689
// index := GetElementIndex ( hackTanks , hack ) ;
64578: LD_ADDR_VAR 0 4
64582: PUSH
64583: LD_EXP 90
64587: PPUSH
64588: LD_VAR 0 1
64592: PPUSH
64593: CALL 9455 0 2
64597: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
64598: LD_EXP 91
64602: PUSH
64603: LD_VAR 0 4
64607: ARRAY
64608: IFFALSE 64689
// begin for i in hackTanksCaptured [ index ] do
64610: LD_ADDR_VAR 0 3
64614: PUSH
64615: LD_EXP 91
64619: PUSH
64620: LD_VAR 0 4
64624: ARRAY
64625: PUSH
64626: FOR_IN
64627: IFFALSE 64653
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
64629: LD_VAR 0 3
64633: PUSH
64634: LD_INT 1
64636: ARRAY
64637: PPUSH
64638: LD_VAR 0 3
64642: PUSH
64643: LD_INT 2
64645: ARRAY
64646: PPUSH
64647: CALL_OW 235
64651: GO 64626
64653: POP
64654: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
64655: LD_ADDR_EXP 91
64659: PUSH
64660: LD_EXP 91
64664: PPUSH
64665: LD_VAR 0 4
64669: PPUSH
64670: EMPTY
64671: PPUSH
64672: CALL_OW 1
64676: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
64677: LD_VAR 0 1
64681: PPUSH
64682: LD_INT 0
64684: PPUSH
64685: CALL_OW 505
// end ; end ;
64689: LD_VAR 0 2
64693: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
64694: LD_INT 0
64696: PPUSH
64697: PPUSH
64698: PPUSH
// if not hack in hackTanks or not vehicles then
64699: LD_VAR 0 1
64703: PUSH
64704: LD_EXP 90
64708: IN
64709: NOT
64710: PUSH
64711: LD_VAR 0 2
64715: NOT
64716: OR
64717: IFFALSE 64721
// exit ;
64719: GO 64996
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
64721: LD_ADDR_VAR 0 2
64725: PUSH
64726: LD_VAR 0 1
64730: PPUSH
64731: LD_VAR 0 2
64735: PPUSH
64736: LD_INT 1
64738: PPUSH
64739: LD_INT 1
64741: PPUSH
64742: CALL 10105 0 4
64746: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
64747: LD_ADDR_VAR 0 5
64751: PUSH
64752: LD_EXP 90
64756: PPUSH
64757: LD_VAR 0 1
64761: PPUSH
64762: CALL 9455 0 2
64766: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
64767: LD_EXP 91
64771: PUSH
64772: LD_VAR 0 5
64776: ARRAY
64777: PUSH
64778: LD_EXP 92
64782: LESS
64783: IFFALSE 64972
// begin for i := 1 to vehicles do
64785: LD_ADDR_VAR 0 4
64789: PUSH
64790: DOUBLE
64791: LD_INT 1
64793: DEC
64794: ST_TO_ADDR
64795: LD_VAR 0 2
64799: PUSH
64800: FOR_TO
64801: IFFALSE 64970
// begin if hackTanksCaptured [ index ] = hackLimit then
64803: LD_EXP 91
64807: PUSH
64808: LD_VAR 0 5
64812: ARRAY
64813: PUSH
64814: LD_EXP 92
64818: EQUAL
64819: IFFALSE 64823
// break ;
64821: GO 64970
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
64823: LD_ADDR_EXP 94
64827: PUSH
64828: LD_EXP 94
64832: PPUSH
64833: LD_VAR 0 5
64837: PPUSH
64838: LD_EXP 94
64842: PUSH
64843: LD_VAR 0 5
64847: ARRAY
64848: PUSH
64849: LD_INT 1
64851: PLUS
64852: PPUSH
64853: CALL_OW 1
64857: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
64858: LD_ADDR_EXP 91
64862: PUSH
64863: LD_EXP 91
64867: PPUSH
64868: LD_VAR 0 5
64872: PUSH
64873: LD_EXP 91
64877: PUSH
64878: LD_VAR 0 5
64882: ARRAY
64883: PUSH
64884: LD_INT 1
64886: PLUS
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PPUSH
64892: LD_VAR 0 2
64896: PUSH
64897: LD_VAR 0 4
64901: ARRAY
64902: PUSH
64903: LD_VAR 0 2
64907: PUSH
64908: LD_VAR 0 4
64912: ARRAY
64913: PPUSH
64914: CALL_OW 255
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PPUSH
64923: CALL 9670 0 3
64927: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64928: LD_VAR 0 2
64932: PUSH
64933: LD_VAR 0 4
64937: ARRAY
64938: PPUSH
64939: LD_VAR 0 1
64943: PPUSH
64944: CALL_OW 255
64948: PPUSH
64949: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64953: LD_VAR 0 2
64957: PUSH
64958: LD_VAR 0 4
64962: ARRAY
64963: PPUSH
64964: CALL_OW 141
// end ;
64968: GO 64800
64970: POP
64971: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64972: LD_VAR 0 1
64976: PPUSH
64977: LD_EXP 91
64981: PUSH
64982: LD_VAR 0 5
64986: ARRAY
64987: PUSH
64988: LD_INT 0
64990: PLUS
64991: PPUSH
64992: CALL_OW 505
// end ;
64996: LD_VAR 0 3
65000: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65001: LD_INT 0
65003: PPUSH
65004: PPUSH
65005: PPUSH
65006: PPUSH
// if not hack in hackTanks then
65007: LD_VAR 0 1
65011: PUSH
65012: LD_EXP 90
65016: IN
65017: NOT
65018: IFFALSE 65022
// exit ;
65020: GO 65262
// index := GetElementIndex ( hackTanks , hack ) ;
65022: LD_ADDR_VAR 0 4
65026: PUSH
65027: LD_EXP 90
65031: PPUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL 9455 0 2
65041: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65042: LD_ADDR_VAR 0 3
65046: PUSH
65047: DOUBLE
65048: LD_EXP 91
65052: PUSH
65053: LD_VAR 0 4
65057: ARRAY
65058: INC
65059: ST_TO_ADDR
65060: LD_INT 1
65062: PUSH
65063: FOR_DOWNTO
65064: IFFALSE 65236
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65066: LD_ADDR_VAR 0 5
65070: PUSH
65071: LD_EXP 91
65075: PUSH
65076: LD_VAR 0 4
65080: ARRAY
65081: PUSH
65082: LD_VAR 0 3
65086: ARRAY
65087: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65088: LD_VAR 0 5
65092: PUSH
65093: LD_INT 1
65095: ARRAY
65096: PPUSH
65097: CALL_OW 302
65101: NOT
65102: PUSH
65103: LD_VAR 0 5
65107: PUSH
65108: LD_INT 1
65110: ARRAY
65111: PPUSH
65112: CALL_OW 255
65116: PUSH
65117: LD_VAR 0 1
65121: PPUSH
65122: CALL_OW 255
65126: NONEQUAL
65127: OR
65128: IFFALSE 65234
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65130: LD_VAR 0 5
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: PPUSH
65139: CALL_OW 305
65143: PUSH
65144: LD_VAR 0 5
65148: PUSH
65149: LD_INT 1
65151: ARRAY
65152: PPUSH
65153: CALL_OW 255
65157: PUSH
65158: LD_VAR 0 1
65162: PPUSH
65163: CALL_OW 255
65167: EQUAL
65168: AND
65169: IFFALSE 65193
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65171: LD_VAR 0 5
65175: PUSH
65176: LD_INT 1
65178: ARRAY
65179: PPUSH
65180: LD_VAR 0 5
65184: PUSH
65185: LD_INT 2
65187: ARRAY
65188: PPUSH
65189: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65193: LD_ADDR_EXP 91
65197: PUSH
65198: LD_EXP 91
65202: PPUSH
65203: LD_VAR 0 4
65207: PPUSH
65208: LD_EXP 91
65212: PUSH
65213: LD_VAR 0 4
65217: ARRAY
65218: PPUSH
65219: LD_VAR 0 3
65223: PPUSH
65224: CALL_OW 3
65228: PPUSH
65229: CALL_OW 1
65233: ST_TO_ADDR
// end ; end ;
65234: GO 65063
65236: POP
65237: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_EXP 91
65247: PUSH
65248: LD_VAR 0 4
65252: ARRAY
65253: PUSH
65254: LD_INT 0
65256: PLUS
65257: PPUSH
65258: CALL_OW 505
// end ;
65262: LD_VAR 0 2
65266: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65267: LD_INT 0
65269: PPUSH
65270: PPUSH
65271: PPUSH
65272: PPUSH
// if not hack in hackTanks then
65273: LD_VAR 0 1
65277: PUSH
65278: LD_EXP 90
65282: IN
65283: NOT
65284: IFFALSE 65288
// exit ;
65286: GO 65373
// index := GetElementIndex ( hackTanks , hack ) ;
65288: LD_ADDR_VAR 0 5
65292: PUSH
65293: LD_EXP 90
65297: PPUSH
65298: LD_VAR 0 1
65302: PPUSH
65303: CALL 9455 0 2
65307: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65308: LD_ADDR_VAR 0 4
65312: PUSH
65313: DOUBLE
65314: LD_INT 1
65316: DEC
65317: ST_TO_ADDR
65318: LD_EXP 91
65322: PUSH
65323: LD_VAR 0 5
65327: ARRAY
65328: PUSH
65329: FOR_TO
65330: IFFALSE 65371
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65332: LD_EXP 91
65336: PUSH
65337: LD_VAR 0 5
65341: ARRAY
65342: PUSH
65343: LD_VAR 0 4
65347: ARRAY
65348: PUSH
65349: LD_INT 1
65351: ARRAY
65352: PUSH
65353: LD_VAR 0 2
65357: EQUAL
65358: IFFALSE 65369
// KillUnit ( vehicle ) ;
65360: LD_VAR 0 2
65364: PPUSH
65365: CALL_OW 66
65369: GO 65329
65371: POP
65372: POP
// end ;
65373: LD_VAR 0 3
65377: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65378: LD_EXP 95
65382: NOT
65383: IFFALSE 65418
65385: GO 65387
65387: DISABLE
// begin initMiner := true ;
65388: LD_ADDR_EXP 95
65392: PUSH
65393: LD_INT 1
65395: ST_TO_ADDR
// minersList := [ ] ;
65396: LD_ADDR_EXP 96
65400: PUSH
65401: EMPTY
65402: ST_TO_ADDR
// minerMinesList := [ ] ;
65403: LD_ADDR_EXP 97
65407: PUSH
65408: EMPTY
65409: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65410: LD_ADDR_EXP 98
65414: PUSH
65415: LD_INT 5
65417: ST_TO_ADDR
// end ;
65418: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65419: LD_EXP 95
65423: PUSH
65424: LD_INT 34
65426: PUSH
65427: LD_INT 81
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PPUSH
65434: CALL_OW 69
65438: AND
65439: IFFALSE 65900
65441: GO 65443
65443: DISABLE
65444: LD_INT 0
65446: PPUSH
65447: PPUSH
65448: PPUSH
65449: PPUSH
// begin enable ;
65450: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65451: LD_ADDR_VAR 0 1
65455: PUSH
65456: LD_INT 34
65458: PUSH
65459: LD_INT 81
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PPUSH
65466: CALL_OW 69
65470: PUSH
65471: FOR_IN
65472: IFFALSE 65544
// begin if not i in minersList then
65474: LD_VAR 0 1
65478: PUSH
65479: LD_EXP 96
65483: IN
65484: NOT
65485: IFFALSE 65542
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
65487: LD_ADDR_EXP 96
65491: PUSH
65492: LD_EXP 96
65496: PPUSH
65497: LD_EXP 96
65501: PUSH
65502: LD_INT 1
65504: PLUS
65505: PPUSH
65506: LD_VAR 0 1
65510: PPUSH
65511: CALL_OW 1
65515: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
65516: LD_ADDR_EXP 97
65520: PUSH
65521: LD_EXP 97
65525: PPUSH
65526: LD_EXP 97
65530: PUSH
65531: LD_INT 1
65533: PLUS
65534: PPUSH
65535: EMPTY
65536: PPUSH
65537: CALL_OW 1
65541: ST_TO_ADDR
// end end ;
65542: GO 65471
65544: POP
65545: POP
// for i := minerMinesList downto 1 do
65546: LD_ADDR_VAR 0 1
65550: PUSH
65551: DOUBLE
65552: LD_EXP 97
65556: INC
65557: ST_TO_ADDR
65558: LD_INT 1
65560: PUSH
65561: FOR_DOWNTO
65562: IFFALSE 65898
// begin if IsLive ( minersList [ i ] ) then
65564: LD_EXP 96
65568: PUSH
65569: LD_VAR 0 1
65573: ARRAY
65574: PPUSH
65575: CALL_OW 300
65579: IFFALSE 65607
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
65581: LD_EXP 96
65585: PUSH
65586: LD_VAR 0 1
65590: ARRAY
65591: PPUSH
65592: LD_EXP 97
65596: PUSH
65597: LD_VAR 0 1
65601: ARRAY
65602: PPUSH
65603: CALL_OW 505
// if not minerMinesList [ i ] then
65607: LD_EXP 97
65611: PUSH
65612: LD_VAR 0 1
65616: ARRAY
65617: NOT
65618: IFFALSE 65622
// continue ;
65620: GO 65561
// for j := minerMinesList [ i ] downto 1 do
65622: LD_ADDR_VAR 0 2
65626: PUSH
65627: DOUBLE
65628: LD_EXP 97
65632: PUSH
65633: LD_VAR 0 1
65637: ARRAY
65638: INC
65639: ST_TO_ADDR
65640: LD_INT 1
65642: PUSH
65643: FOR_DOWNTO
65644: IFFALSE 65894
// begin side := GetSide ( minersList [ i ] ) ;
65646: LD_ADDR_VAR 0 3
65650: PUSH
65651: LD_EXP 96
65655: PUSH
65656: LD_VAR 0 1
65660: ARRAY
65661: PPUSH
65662: CALL_OW 255
65666: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
65667: LD_ADDR_VAR 0 4
65671: PUSH
65672: LD_EXP 97
65676: PUSH
65677: LD_VAR 0 1
65681: ARRAY
65682: PUSH
65683: LD_VAR 0 2
65687: ARRAY
65688: PUSH
65689: LD_INT 1
65691: ARRAY
65692: PPUSH
65693: LD_EXP 97
65697: PUSH
65698: LD_VAR 0 1
65702: ARRAY
65703: PUSH
65704: LD_VAR 0 2
65708: ARRAY
65709: PUSH
65710: LD_INT 2
65712: ARRAY
65713: PPUSH
65714: CALL_OW 428
65718: ST_TO_ADDR
// if not tmp then
65719: LD_VAR 0 4
65723: NOT
65724: IFFALSE 65728
// continue ;
65726: GO 65643
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
65728: LD_VAR 0 4
65732: PUSH
65733: LD_INT 81
65735: PUSH
65736: LD_VAR 0 3
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PPUSH
65745: CALL_OW 69
65749: IN
65750: PUSH
65751: LD_EXP 97
65755: PUSH
65756: LD_VAR 0 1
65760: ARRAY
65761: PUSH
65762: LD_VAR 0 2
65766: ARRAY
65767: PUSH
65768: LD_INT 1
65770: ARRAY
65771: PPUSH
65772: LD_EXP 97
65776: PUSH
65777: LD_VAR 0 1
65781: ARRAY
65782: PUSH
65783: LD_VAR 0 2
65787: ARRAY
65788: PUSH
65789: LD_INT 2
65791: ARRAY
65792: PPUSH
65793: CALL_OW 458
65797: AND
65798: IFFALSE 65892
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
65800: LD_EXP 97
65804: PUSH
65805: LD_VAR 0 1
65809: ARRAY
65810: PUSH
65811: LD_VAR 0 2
65815: ARRAY
65816: PUSH
65817: LD_INT 1
65819: ARRAY
65820: PPUSH
65821: LD_EXP 97
65825: PUSH
65826: LD_VAR 0 1
65830: ARRAY
65831: PUSH
65832: LD_VAR 0 2
65836: ARRAY
65837: PUSH
65838: LD_INT 2
65840: ARRAY
65841: PPUSH
65842: LD_VAR 0 3
65846: PPUSH
65847: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
65851: LD_ADDR_EXP 97
65855: PUSH
65856: LD_EXP 97
65860: PPUSH
65861: LD_VAR 0 1
65865: PPUSH
65866: LD_EXP 97
65870: PUSH
65871: LD_VAR 0 1
65875: ARRAY
65876: PPUSH
65877: LD_VAR 0 2
65881: PPUSH
65882: CALL_OW 3
65886: PPUSH
65887: CALL_OW 1
65891: ST_TO_ADDR
// end ; end ;
65892: GO 65643
65894: POP
65895: POP
// end ;
65896: GO 65561
65898: POP
65899: POP
// end ;
65900: PPOPN 4
65902: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
65903: LD_INT 0
65905: PPUSH
65906: PPUSH
// result := false ;
65907: LD_ADDR_VAR 0 4
65911: PUSH
65912: LD_INT 0
65914: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65915: LD_VAR 0 1
65919: PPUSH
65920: CALL_OW 264
65924: PUSH
65925: LD_INT 81
65927: EQUAL
65928: NOT
65929: IFFALSE 65933
// exit ;
65931: GO 66173
// index := GetElementIndex ( minersList , unit ) ;
65933: LD_ADDR_VAR 0 5
65937: PUSH
65938: LD_EXP 96
65942: PPUSH
65943: LD_VAR 0 1
65947: PPUSH
65948: CALL 9455 0 2
65952: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65953: LD_EXP 97
65957: PUSH
65958: LD_VAR 0 5
65962: ARRAY
65963: PUSH
65964: LD_EXP 98
65968: GREATEREQUAL
65969: IFFALSE 65973
// exit ;
65971: GO 66173
// ComMoveXY ( unit , x , y ) ;
65973: LD_VAR 0 1
65977: PPUSH
65978: LD_VAR 0 2
65982: PPUSH
65983: LD_VAR 0 3
65987: PPUSH
65988: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65992: LD_INT 35
65994: PPUSH
65995: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65999: LD_VAR 0 1
66003: PPUSH
66004: LD_VAR 0 2
66008: PPUSH
66009: LD_VAR 0 3
66013: PPUSH
66014: CALL 41207 0 3
66018: NOT
66019: PUSH
66020: LD_VAR 0 1
66024: PPUSH
66025: CALL_OW 314
66029: AND
66030: IFFALSE 66034
// exit ;
66032: GO 66173
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66034: LD_VAR 0 2
66038: PPUSH
66039: LD_VAR 0 3
66043: PPUSH
66044: CALL_OW 428
66048: PUSH
66049: LD_VAR 0 1
66053: EQUAL
66054: PUSH
66055: LD_VAR 0 1
66059: PPUSH
66060: CALL_OW 314
66064: NOT
66065: AND
66066: IFFALSE 65992
// PlaySoundXY ( x , y , PlantMine ) ;
66068: LD_VAR 0 2
66072: PPUSH
66073: LD_VAR 0 3
66077: PPUSH
66078: LD_STRING PlantMine
66080: PPUSH
66081: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66085: LD_VAR 0 2
66089: PPUSH
66090: LD_VAR 0 3
66094: PPUSH
66095: LD_VAR 0 1
66099: PPUSH
66100: CALL_OW 255
66104: PPUSH
66105: LD_INT 0
66107: PPUSH
66108: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66112: LD_ADDR_EXP 97
66116: PUSH
66117: LD_EXP 97
66121: PPUSH
66122: LD_VAR 0 5
66126: PUSH
66127: LD_EXP 97
66131: PUSH
66132: LD_VAR 0 5
66136: ARRAY
66137: PUSH
66138: LD_INT 1
66140: PLUS
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PPUSH
66146: LD_VAR 0 2
66150: PUSH
66151: LD_VAR 0 3
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PPUSH
66160: CALL 9670 0 3
66164: ST_TO_ADDR
// result := true ;
66165: LD_ADDR_VAR 0 4
66169: PUSH
66170: LD_INT 1
66172: ST_TO_ADDR
// end ;
66173: LD_VAR 0 4
66177: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66178: LD_INT 0
66180: PPUSH
66181: PPUSH
66182: PPUSH
// if not unit in minersList then
66183: LD_VAR 0 1
66187: PUSH
66188: LD_EXP 96
66192: IN
66193: NOT
66194: IFFALSE 66198
// exit ;
66196: GO 66590
// index := GetElementIndex ( minersList , unit ) ;
66198: LD_ADDR_VAR 0 6
66202: PUSH
66203: LD_EXP 96
66207: PPUSH
66208: LD_VAR 0 1
66212: PPUSH
66213: CALL 9455 0 2
66217: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66218: LD_ADDR_VAR 0 5
66222: PUSH
66223: DOUBLE
66224: LD_EXP 97
66228: PUSH
66229: LD_VAR 0 6
66233: ARRAY
66234: INC
66235: ST_TO_ADDR
66236: LD_INT 1
66238: PUSH
66239: FOR_DOWNTO
66240: IFFALSE 66401
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66242: LD_EXP 97
66246: PUSH
66247: LD_VAR 0 6
66251: ARRAY
66252: PUSH
66253: LD_VAR 0 5
66257: ARRAY
66258: PUSH
66259: LD_INT 1
66261: ARRAY
66262: PUSH
66263: LD_VAR 0 2
66267: EQUAL
66268: PUSH
66269: LD_EXP 97
66273: PUSH
66274: LD_VAR 0 6
66278: ARRAY
66279: PUSH
66280: LD_VAR 0 5
66284: ARRAY
66285: PUSH
66286: LD_INT 2
66288: ARRAY
66289: PUSH
66290: LD_VAR 0 3
66294: EQUAL
66295: AND
66296: IFFALSE 66399
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66298: LD_EXP 97
66302: PUSH
66303: LD_VAR 0 6
66307: ARRAY
66308: PUSH
66309: LD_VAR 0 5
66313: ARRAY
66314: PUSH
66315: LD_INT 1
66317: ARRAY
66318: PPUSH
66319: LD_EXP 97
66323: PUSH
66324: LD_VAR 0 6
66328: ARRAY
66329: PUSH
66330: LD_VAR 0 5
66334: ARRAY
66335: PUSH
66336: LD_INT 2
66338: ARRAY
66339: PPUSH
66340: LD_VAR 0 1
66344: PPUSH
66345: CALL_OW 255
66349: PPUSH
66350: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66354: LD_ADDR_EXP 97
66358: PUSH
66359: LD_EXP 97
66363: PPUSH
66364: LD_VAR 0 6
66368: PPUSH
66369: LD_EXP 97
66373: PUSH
66374: LD_VAR 0 6
66378: ARRAY
66379: PPUSH
66380: LD_VAR 0 5
66384: PPUSH
66385: CALL_OW 3
66389: PPUSH
66390: CALL_OW 1
66394: ST_TO_ADDR
// exit ;
66395: POP
66396: POP
66397: GO 66590
// end ; end ;
66399: GO 66239
66401: POP
66402: POP
// for i := minerMinesList [ index ] downto 1 do
66403: LD_ADDR_VAR 0 5
66407: PUSH
66408: DOUBLE
66409: LD_EXP 97
66413: PUSH
66414: LD_VAR 0 6
66418: ARRAY
66419: INC
66420: ST_TO_ADDR
66421: LD_INT 1
66423: PUSH
66424: FOR_DOWNTO
66425: IFFALSE 66588
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66427: LD_EXP 97
66431: PUSH
66432: LD_VAR 0 6
66436: ARRAY
66437: PUSH
66438: LD_VAR 0 5
66442: ARRAY
66443: PUSH
66444: LD_INT 1
66446: ARRAY
66447: PPUSH
66448: LD_EXP 97
66452: PUSH
66453: LD_VAR 0 6
66457: ARRAY
66458: PUSH
66459: LD_VAR 0 5
66463: ARRAY
66464: PUSH
66465: LD_INT 2
66467: ARRAY
66468: PPUSH
66469: LD_VAR 0 2
66473: PPUSH
66474: LD_VAR 0 3
66478: PPUSH
66479: CALL_OW 298
66483: PUSH
66484: LD_INT 6
66486: LESS
66487: IFFALSE 66586
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66489: LD_EXP 97
66493: PUSH
66494: LD_VAR 0 6
66498: ARRAY
66499: PUSH
66500: LD_VAR 0 5
66504: ARRAY
66505: PUSH
66506: LD_INT 1
66508: ARRAY
66509: PPUSH
66510: LD_EXP 97
66514: PUSH
66515: LD_VAR 0 6
66519: ARRAY
66520: PUSH
66521: LD_VAR 0 5
66525: ARRAY
66526: PUSH
66527: LD_INT 2
66529: ARRAY
66530: PPUSH
66531: LD_VAR 0 1
66535: PPUSH
66536: CALL_OW 255
66540: PPUSH
66541: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66545: LD_ADDR_EXP 97
66549: PUSH
66550: LD_EXP 97
66554: PPUSH
66555: LD_VAR 0 6
66559: PPUSH
66560: LD_EXP 97
66564: PUSH
66565: LD_VAR 0 6
66569: ARRAY
66570: PPUSH
66571: LD_VAR 0 5
66575: PPUSH
66576: CALL_OW 3
66580: PPUSH
66581: CALL_OW 1
66585: ST_TO_ADDR
// end ; end ;
66586: GO 66424
66588: POP
66589: POP
// end ;
66590: LD_VAR 0 4
66594: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
66595: LD_INT 0
66597: PPUSH
66598: PPUSH
66599: PPUSH
66600: PPUSH
66601: PPUSH
66602: PPUSH
66603: PPUSH
66604: PPUSH
66605: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
66606: LD_VAR 0 1
66610: PPUSH
66611: CALL_OW 264
66615: PUSH
66616: LD_INT 81
66618: EQUAL
66619: NOT
66620: PUSH
66621: LD_VAR 0 1
66625: PUSH
66626: LD_EXP 96
66630: IN
66631: NOT
66632: OR
66633: IFFALSE 66637
// exit ;
66635: GO 66959
// index := GetElementIndex ( minersList , unit ) ;
66637: LD_ADDR_VAR 0 6
66641: PUSH
66642: LD_EXP 96
66646: PPUSH
66647: LD_VAR 0 1
66651: PPUSH
66652: CALL 9455 0 2
66656: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
66657: LD_ADDR_VAR 0 8
66661: PUSH
66662: LD_EXP 98
66666: PUSH
66667: LD_EXP 97
66671: PUSH
66672: LD_VAR 0 6
66676: ARRAY
66677: MINUS
66678: ST_TO_ADDR
// if not minesFreeAmount then
66679: LD_VAR 0 8
66683: NOT
66684: IFFALSE 66688
// exit ;
66686: GO 66959
// tmp := [ ] ;
66688: LD_ADDR_VAR 0 7
66692: PUSH
66693: EMPTY
66694: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
66695: LD_ADDR_VAR 0 5
66699: PUSH
66700: DOUBLE
66701: LD_INT 1
66703: DEC
66704: ST_TO_ADDR
66705: LD_VAR 0 8
66709: PUSH
66710: FOR_TO
66711: IFFALSE 66906
// begin _d := rand ( 0 , 5 ) ;
66713: LD_ADDR_VAR 0 11
66717: PUSH
66718: LD_INT 0
66720: PPUSH
66721: LD_INT 5
66723: PPUSH
66724: CALL_OW 12
66728: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
66729: LD_ADDR_VAR 0 12
66733: PUSH
66734: LD_INT 2
66736: PPUSH
66737: LD_INT 6
66739: PPUSH
66740: CALL_OW 12
66744: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
66745: LD_ADDR_VAR 0 9
66749: PUSH
66750: LD_VAR 0 2
66754: PPUSH
66755: LD_VAR 0 11
66759: PPUSH
66760: LD_VAR 0 12
66764: PPUSH
66765: CALL_OW 272
66769: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
66770: LD_ADDR_VAR 0 10
66774: PUSH
66775: LD_VAR 0 3
66779: PPUSH
66780: LD_VAR 0 11
66784: PPUSH
66785: LD_VAR 0 12
66789: PPUSH
66790: CALL_OW 273
66794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
66795: LD_VAR 0 9
66799: PPUSH
66800: LD_VAR 0 10
66804: PPUSH
66805: CALL_OW 488
66809: PUSH
66810: LD_VAR 0 9
66814: PUSH
66815: LD_VAR 0 10
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_VAR 0 7
66828: IN
66829: NOT
66830: AND
66831: PUSH
66832: LD_VAR 0 9
66836: PPUSH
66837: LD_VAR 0 10
66841: PPUSH
66842: CALL_OW 458
66846: NOT
66847: AND
66848: IFFALSE 66890
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
66850: LD_ADDR_VAR 0 7
66854: PUSH
66855: LD_VAR 0 7
66859: PPUSH
66860: LD_VAR 0 7
66864: PUSH
66865: LD_INT 1
66867: PLUS
66868: PPUSH
66869: LD_VAR 0 9
66873: PUSH
66874: LD_VAR 0 10
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PPUSH
66883: CALL_OW 1
66887: ST_TO_ADDR
66888: GO 66904
// i := i - 1 ;
66890: LD_ADDR_VAR 0 5
66894: PUSH
66895: LD_VAR 0 5
66899: PUSH
66900: LD_INT 1
66902: MINUS
66903: ST_TO_ADDR
// end ;
66904: GO 66710
66906: POP
66907: POP
// for i in tmp do
66908: LD_ADDR_VAR 0 5
66912: PUSH
66913: LD_VAR 0 7
66917: PUSH
66918: FOR_IN
66919: IFFALSE 66957
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66921: LD_VAR 0 1
66925: PPUSH
66926: LD_VAR 0 5
66930: PUSH
66931: LD_INT 1
66933: ARRAY
66934: PPUSH
66935: LD_VAR 0 5
66939: PUSH
66940: LD_INT 2
66942: ARRAY
66943: PPUSH
66944: CALL 65903 0 3
66948: NOT
66949: IFFALSE 66955
// exit ;
66951: POP
66952: POP
66953: GO 66959
66955: GO 66918
66957: POP
66958: POP
// end ;
66959: LD_VAR 0 4
66963: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66964: LD_INT 0
66966: PPUSH
66967: PPUSH
66968: PPUSH
66969: PPUSH
66970: PPUSH
66971: PPUSH
66972: PPUSH
// if not GetClass ( unit ) = class_sniper then
66973: LD_VAR 0 1
66977: PPUSH
66978: CALL_OW 257
66982: PUSH
66983: LD_INT 5
66985: EQUAL
66986: NOT
66987: IFFALSE 66991
// exit ;
66989: GO 67379
// dist := 8 ;
66991: LD_ADDR_VAR 0 5
66995: PUSH
66996: LD_INT 8
66998: ST_TO_ADDR
// viewRange := 12 ;
66999: LD_ADDR_VAR 0 7
67003: PUSH
67004: LD_INT 12
67006: ST_TO_ADDR
// side := GetSide ( unit ) ;
67007: LD_ADDR_VAR 0 6
67011: PUSH
67012: LD_VAR 0 1
67016: PPUSH
67017: CALL_OW 255
67021: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67022: LD_INT 61
67024: PPUSH
67025: LD_VAR 0 6
67029: PPUSH
67030: CALL_OW 321
67034: PUSH
67035: LD_INT 2
67037: EQUAL
67038: IFFALSE 67048
// viewRange := 16 ;
67040: LD_ADDR_VAR 0 7
67044: PUSH
67045: LD_INT 16
67047: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67048: LD_VAR 0 1
67052: PPUSH
67053: LD_VAR 0 2
67057: PPUSH
67058: LD_VAR 0 3
67062: PPUSH
67063: CALL_OW 297
67067: PUSH
67068: LD_VAR 0 5
67072: GREATER
67073: IFFALSE 67152
// begin ComMoveXY ( unit , x , y ) ;
67075: LD_VAR 0 1
67079: PPUSH
67080: LD_VAR 0 2
67084: PPUSH
67085: LD_VAR 0 3
67089: PPUSH
67090: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67094: LD_INT 35
67096: PPUSH
67097: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67101: LD_VAR 0 1
67105: PPUSH
67106: LD_VAR 0 2
67110: PPUSH
67111: LD_VAR 0 3
67115: PPUSH
67116: CALL 41207 0 3
67120: NOT
67121: IFFALSE 67125
// exit ;
67123: GO 67379
// until GetDistUnitXY ( unit , x , y ) < dist ;
67125: LD_VAR 0 1
67129: PPUSH
67130: LD_VAR 0 2
67134: PPUSH
67135: LD_VAR 0 3
67139: PPUSH
67140: CALL_OW 297
67144: PUSH
67145: LD_VAR 0 5
67149: LESS
67150: IFFALSE 67094
// end ; ComTurnXY ( unit , x , y ) ;
67152: LD_VAR 0 1
67156: PPUSH
67157: LD_VAR 0 2
67161: PPUSH
67162: LD_VAR 0 3
67166: PPUSH
67167: CALL_OW 118
// wait ( 5 ) ;
67171: LD_INT 5
67173: PPUSH
67174: CALL_OW 67
// _d := GetDir ( unit ) ;
67178: LD_ADDR_VAR 0 10
67182: PUSH
67183: LD_VAR 0 1
67187: PPUSH
67188: CALL_OW 254
67192: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67193: LD_ADDR_VAR 0 8
67197: PUSH
67198: LD_VAR 0 1
67202: PPUSH
67203: CALL_OW 250
67207: PPUSH
67208: LD_VAR 0 10
67212: PPUSH
67213: LD_VAR 0 5
67217: PPUSH
67218: CALL_OW 272
67222: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67223: LD_ADDR_VAR 0 9
67227: PUSH
67228: LD_VAR 0 1
67232: PPUSH
67233: CALL_OW 251
67237: PPUSH
67238: LD_VAR 0 10
67242: PPUSH
67243: LD_VAR 0 5
67247: PPUSH
67248: CALL_OW 273
67252: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67253: LD_VAR 0 8
67257: PPUSH
67258: LD_VAR 0 9
67262: PPUSH
67263: CALL_OW 488
67267: NOT
67268: IFFALSE 67272
// exit ;
67270: GO 67379
// ComAnimCustom ( unit , 1 ) ;
67272: LD_VAR 0 1
67276: PPUSH
67277: LD_INT 1
67279: PPUSH
67280: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67284: LD_VAR 0 8
67288: PPUSH
67289: LD_VAR 0 9
67293: PPUSH
67294: LD_VAR 0 6
67298: PPUSH
67299: LD_VAR 0 7
67303: PPUSH
67304: CALL_OW 330
// repeat wait ( 1 ) ;
67308: LD_INT 1
67310: PPUSH
67311: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67315: LD_VAR 0 1
67319: PPUSH
67320: CALL_OW 316
67324: PUSH
67325: LD_VAR 0 1
67329: PPUSH
67330: CALL_OW 314
67334: OR
67335: PUSH
67336: LD_VAR 0 1
67340: PPUSH
67341: CALL_OW 302
67345: NOT
67346: OR
67347: PUSH
67348: LD_VAR 0 1
67352: PPUSH
67353: CALL_OW 301
67357: OR
67358: IFFALSE 67308
// RemoveSeeing ( _x , _y , side ) ;
67360: LD_VAR 0 8
67364: PPUSH
67365: LD_VAR 0 9
67369: PPUSH
67370: LD_VAR 0 6
67374: PPUSH
67375: CALL_OW 331
// end ;
67379: LD_VAR 0 4
67383: RET
