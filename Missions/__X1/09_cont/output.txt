// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42431 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42431 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42431 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6831 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9569 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9569 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38699 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38807 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 38988 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 38908 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42431 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42431 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42431 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 62921 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 63041 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42431 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42403 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42403 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 57
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 69
2534: IFFALSE 2485
// DialogueOn ;
2536: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2540: LD_EXP 18
2544: PPUSH
2545: LD_STRING DL-Intro-18
2547: PPUSH
2548: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2552: LD_EXP 18
2556: PPUSH
2557: LD_STRING DL-Intro-19
2559: PPUSH
2560: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2564: LD_EXP 18
2568: PPUSH
2569: LD_STRING DL-Intro-20
2571: PPUSH
2572: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_STRING DLt-Intro-21
2583: PPUSH
2584: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2588: LD_EXP 20
2592: PPUSH
2593: LD_STRING DLt-Intro-22
2595: PPUSH
2596: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2600: LD_EXP 20
2604: PPUSH
2605: LD_STRING DLt-Intro-23
2607: PPUSH
2608: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2612: LD_EXP 18
2616: PPUSH
2617: LD_STRING DL-Intro-24
2619: PPUSH
2620: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2624: LD_EXP 20
2628: PPUSH
2629: LD_STRING DLt-Intro-25
2631: PPUSH
2632: CALL_OW 88
// DialogueOff ;
2636: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2640: LD_STRING M2
2642: PPUSH
2643: CALL_OW 337
// Query ( Prepare ) ;
2647: LD_STRING Prepare
2649: PPUSH
2650: CALL_OW 97
// SaveForQuickRestart ;
2654: CALL_OW 22
// end ;
2658: LD_VAR 0 1
2662: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2663: LD_INT 22
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 15
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: IFFALSE 2708
2693: GO 2695
2695: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2696: LD_EXP 18
2700: PPUSH
2701: LD_STRING DL-Cam-1
2703: PPUSH
2704: CALL_OW 88
2708: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2709: LD_OWVAR 1
2713: PUSH
2714: LD_EXP 4
2718: PUSH
2719: LD_INT 2
2721: DIV
2722: GREATEREQUAL
2723: IFFALSE 2748
2725: GO 2727
2727: DISABLE
// begin DialogueOn ;
2728: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2732: LD_EXP 18
2736: PPUSH
2737: LD_STRING DL-Faster-1
2739: PPUSH
2740: CALL_OW 88
// DialogueOff ;
2744: CALL_OW 7
// end ;
2748: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2749: LD_OWVAR 1
2753: PUSH
2754: LD_EXP 4
2758: PUSH
2759: LD_INT 2
2761: DIV
2762: PUSH
2763: LD_INT 10500
2765: PLUS
2766: GREATEREQUAL
2767: IFFALSE 2792
2769: GO 2771
2771: DISABLE
// begin DialogueOn ;
2772: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2776: LD_EXP 18
2780: PPUSH
2781: LD_STRING DL-Faster-2
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// end ;
2792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2793: LD_INT 22
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 57
2808: PUSH
2809: EMPTY
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 2
2818: PUSH
2819: LD_INT 30
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: PUSH
2865: LD_INT 22
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 3
2877: PUSH
2878: LD_INT 57
2880: PUSH
2881: EMPTY
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 30
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: PPUSH
2903: CALL_OW 69
2907: AND
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 3
2921: PUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 30
2934: PUSH
2935: LD_INT 32
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: PPUSH
2947: CALL_OW 69
2951: PUSH
2952: LD_INT 3
2954: GREATEREQUAL
2955: AND
2956: PUSH
2957: LD_INT 22
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 3
2969: PUSH
2970: LD_INT 57
2972: PUSH
2973: EMPTY
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 30
2982: PUSH
2983: LD_INT 5
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_INT 22
3003: PUSH
3004: LD_INT 2
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 3
3013: PUSH
3014: LD_INT 57
3016: PUSH
3017: EMPTY
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 30
3026: PUSH
3027: LD_INT 30
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: AND
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 2
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 3
3057: PUSH
3058: LD_INT 57
3060: PUSH
3061: EMPTY
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: LD_INT 30
3073: PUSH
3074: LD_INT 26
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_INT 30
3083: PUSH
3084: LD_INT 28
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PPUSH
3101: CALL_OW 69
3105: AND
3106: IFFALSE 3143
3108: GO 3110
3110: DISABLE
// begin if tick <= 10 10$00 then
3111: LD_OWVAR 1
3115: PUSH
3116: LD_INT 21000
3118: LESSEQUAL
3119: IFFALSE 3128
// SetAchievement ( ACH_BOB ) ;
3121: LD_STRING ACH_BOB
3123: PPUSH
3124: CALL_OW 543
// baseDone := true ;
3128: LD_ADDR_EXP 5
3132: PUSH
3133: LD_INT 1
3135: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3136: LD_STRING M1out
3138: PPUSH
3139: CALL_OW 337
// end ;
3143: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3144: LD_EXP 5
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 21
3161: PUSH
3162: LD_INT 2
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 34
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 34
3187: PUSH
3188: LD_INT 88
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 22
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 21
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 23
3236: PUSH
3237: LD_INT 2
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 69
3253: PPUSH
3254: CALL 6831 0 1
3258: GREATEREQUAL
3259: AND
3260: IFFALSE 3352
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3269: LD_EXP 18
3273: PPUSH
3274: LD_STRING DL-Ready-1
3276: PPUSH
3277: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3281: LD_INT 22
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 23
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: IFFALSE 3323
// Say ( Schulz , DL-Ready-2 ) ;
3311: LD_EXP 18
3315: PPUSH
3316: LD_STRING DL-Ready-2
3318: PPUSH
3319: CALL_OW 88
// DialogueOff ;
3323: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3327: LD_STRING M3
3329: PPUSH
3330: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3334: LD_INT 7
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: CALL_OW 424
// canGo := true ;
3344: LD_ADDR_EXP 6
3348: PUSH
3349: LD_INT 1
3351: ST_TO_ADDR
// end ;
3352: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3353: LD_EXP 6
3357: PUSH
3358: LD_INT 7
3360: PPUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 2
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 21
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 33
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: LD_INT 58
3396: PUSH
3397: EMPTY
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: PPUSH
3410: CALL_OW 70
3414: PPUSH
3415: CALL 6831 0 1
3419: PUSH
3420: LD_INT 22
3422: PUSH
3423: LD_INT 2
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 21
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 23
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PPUSH
3460: CALL 6831 0 1
3464: GREATEREQUAL
3465: AND
3466: PUSH
3467: LD_INT 22
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 21
3479: PUSH
3480: LD_INT 1
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 55
3492: PUSH
3493: EMPTY
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 23
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PPUSH
3516: CALL_OW 69
3520: PPUSH
3521: CALL 6831 0 1
3525: PUSH
3526: LD_INT 0
3528: EQUAL
3529: AND
3530: IFFALSE 4604
3532: GO 3534
3534: DISABLE
3535: LD_INT 0
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
// begin enable ;
3542: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_INT 7
3550: PPUSH
3551: LD_INT 22
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 21
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 2
3587: PUSH
3588: LD_INT 34
3590: PUSH
3591: LD_INT 88
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 34
3600: PUSH
3601: LD_INT 32
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 72
3617: IFFALSE 3628
// begin Query ( InvalidWeapon ) ;
3619: LD_STRING InvalidWeapon
3621: PPUSH
3622: CALL_OW 97
// exit ;
3626: GO 4604
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_INT 3
3635: PUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 72
3654: IFFALSE 3665
// begin Query ( HealthLevel ) ;
3656: LD_STRING HealthLevel
3658: PPUSH
3659: CALL_OW 97
// exit ;
3663: GO 4604
// end ; for i in tmp do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: LD_VAR 0 2
3674: PUSH
3675: FOR_IN
3676: IFFALSE 3721
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 262
3687: PUSH
3688: LD_INT 1
3690: EQUAL
3691: PUSH
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 261
3701: PUSH
3702: LD_INT 60
3704: LESS
3705: AND
3706: IFFALSE 3719
// begin Query ( FuelLevel ) ;
3708: LD_STRING FuelLevel
3710: PPUSH
3711: CALL_OW 97
// exit ;
3715: POP
3716: POP
3717: GO 4604
// end ;
3719: GO 3675
3721: POP
3722: POP
// disable ;
3723: DISABLE
// saveVehicles := [ ] ;
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: EMPTY
3730: ST_TO_ADDR
// for i in tmp do
3731: LD_ADDR_VAR 0 1
3735: PUSH
3736: LD_VAR 0 2
3740: PUSH
3741: FOR_IN
3742: IFFALSE 3851
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 265
3763: PUSH
3764: LD_VAR 0 1
3768: PPUSH
3769: CALL_OW 262
3773: PUSH
3774: LD_VAR 0 1
3778: PPUSH
3779: CALL_OW 263
3783: PUSH
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 264
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 248
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 261
3813: PUSH
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 271
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 311
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL 42431 0 2
3848: ST_TO_ADDR
3849: GO 3741
3851: POP
3852: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 21
3870: PUSH
3871: LD_INT 2
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 50
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: PUSH
3894: LD_VAR 0 2
3898: DIFF
3899: ST_TO_ADDR
// if otherVehicles then
3900: LD_VAR 0 4
3904: IFFALSE 4080
// begin tmp := [ ] ;
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: EMPTY
3912: ST_TO_ADDR
// for i in otherVehicles do
3913: LD_ADDR_VAR 0 1
3917: PUSH
3918: LD_VAR 0 4
3922: PUSH
3923: FOR_IN
3924: IFFALSE 4066
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: LD_VAR 0 2
3935: PPUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 265
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 262
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 263
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: CALL_OW 264
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 248
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 261
3995: PUSH
3996: LD_VAR 0 1
4000: PPUSH
4001: CALL_OW 271
4005: PUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: CALL_OW 250
4015: PUSH
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 251
4025: PUSH
4026: LD_VAR 0 1
4030: PPUSH
4031: CALL_OW 254
4035: PUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 256
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL 42431 0 2
4063: ST_TO_ADDR
4064: GO 3923
4066: POP
4067: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_STRING 09_otherVehicles
4075: PPUSH
4076: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) and UnitFilter ( saveVehicles , [ f_engine , engine_siberite ] ) then
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 1
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 72
4099: NOT
4100: PUSH
4101: LD_VAR 0 3
4105: PPUSH
4106: LD_INT 32
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 72
4120: AND
4121: IFFALSE 4130
// SetAchievement ( ACH_GREEN ) ;
4123: LD_STRING ACH_GREEN
4125: PPUSH
4126: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4130: LD_EXP 18
4134: PPUSH
4135: LD_STRING 09_Schulz
4137: PPUSH
4138: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4142: LD_EXP 18
4146: PPUSH
4147: LD_STRING 09_Schulz_ID
4149: PPUSH
4150: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4154: LD_EXP 20
4158: PPUSH
4159: LD_STRING 09_Lemmy
4161: PPUSH
4162: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4166: LD_EXP 20
4170: PPUSH
4171: LD_STRING 09_Lemmy_ID
4173: PPUSH
4174: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4178: LD_EXP 22
4182: PPUSH
4183: LD_STRING 09_Nia
4185: PPUSH
4186: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4190: LD_EXP 22
4194: PPUSH
4195: LD_STRING 09_Nia_ID
4197: PPUSH
4198: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4202: LD_EXP 21
4206: PPUSH
4207: LD_STRING 09_Mia
4209: PPUSH
4210: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4214: LD_EXP 21
4218: PPUSH
4219: LD_STRING 09_Mia_ID
4221: PPUSH
4222: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4226: LD_EXP 23
4230: PPUSH
4231: LD_STRING 09_Jenna
4233: PPUSH
4234: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4238: LD_EXP 23
4242: PPUSH
4243: LD_STRING 09_Jenna_ID
4245: PPUSH
4246: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4250: LD_EXP 26
4254: PPUSH
4255: LD_STRING 09_schulzSecondSquad
4257: PPUSH
4258: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4262: LD_ADDR_VAR 0 1
4266: PUSH
4267: DOUBLE
4268: LD_INT 1
4270: DEC
4271: ST_TO_ADDR
4272: LD_EXP 26
4276: PUSH
4277: FOR_TO
4278: IFFALSE 4306
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4280: LD_EXP 26
4284: PUSH
4285: LD_VAR 0 1
4289: ARRAY
4290: PPUSH
4291: LD_STRING 09_random_ID_
4293: PUSH
4294: LD_VAR 0 1
4298: STR
4299: PPUSH
4300: CALL_OW 39
4304: GO 4277
4306: POP
4307: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_STRING 09_vehicles
4315: PPUSH
4316: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4320: LD_OWVAR 1
4324: PPUSH
4325: LD_STRING 09_tick
4327: PPUSH
4328: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4332: LD_INT 6
4334: PPUSH
4335: LD_STRING 09_env
4337: PPUSH
4338: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4342: LD_INT 2
4344: PPUSH
4345: LD_STRING 09_tech
4347: PPUSH
4348: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4352: LD_INT 2
4354: PPUSH
4355: LD_STRING 09_materials
4357: PPUSH
4358: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4362: LD_INT 2
4364: PPUSH
4365: LD_STRING 09_buildings
4367: PPUSH
4368: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4372: LD_INT 22
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 23
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PPUSH
4401: LD_STRING 09_apes
4403: PPUSH
4404: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4408: LD_EXP 4
4412: PPUSH
4413: LD_STRING 09_timeToHeikeDead
4415: PPUSH
4416: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4420: LD_EXP 3
4424: PPUSH
4425: LD_STRING 09_cameras
4427: PPUSH
4428: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 23
4449: PUSH
4450: LD_INT 0
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 50
4459: PUSH
4460: EMPTY
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: ST_TO_ADDR
// if tmp then
4473: LD_VAR 0 2
4477: IFFALSE 4587
// begin animals := [ ] ;
4479: LD_ADDR_VAR 0 5
4483: PUSH
4484: EMPTY
4485: ST_TO_ADDR
// for i in tmp do
4486: LD_ADDR_VAR 0 1
4490: PUSH
4491: LD_VAR 0 2
4495: PUSH
4496: FOR_IN
4497: IFFALSE 4573
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4499: LD_ADDR_VAR 0 5
4503: PUSH
4504: LD_VAR 0 5
4508: PPUSH
4509: LD_VAR 0 1
4513: PPUSH
4514: CALL_OW 257
4518: PUSH
4519: LD_VAR 0 1
4523: PPUSH
4524: CALL_OW 250
4528: PUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: CALL_OW 251
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 254
4548: PUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: CALL_OW 256
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PPUSH
4566: CALL 42431 0 2
4570: ST_TO_ADDR
4571: GO 4496
4573: POP
4574: POP
// SaveVariable ( animals , 09_animals ) ;
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_STRING 09_animals
4582: PPUSH
4583: CALL_OW 39
// end ; wait ( 3 ) ;
4587: LD_INT 3
4589: PPUSH
4590: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4594: LD_INT 1
4596: PPUSH
4597: LD_STRING %2
4599: PPUSH
4600: CALL_OW 340
// end ; end_of_file
4604: PPOPN 5
4606: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4607: LD_OWVAR 1
4611: PUSH
4612: LD_INT 14700
4614: LESS
4615: IFFALSE 4648
4617: GO 4619
4619: DISABLE
// begin enable ;
4620: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4621: LD_INT 1
4623: PPUSH
4624: LD_INT 5
4626: PPUSH
4627: CALL_OW 12
4631: PPUSH
4632: LD_INT 85
4634: PPUSH
4635: LD_INT 44
4637: PPUSH
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL_OW 56
// end ;
4648: END
// every 0 0$29 trigger tick < 20 20$00 do
4649: LD_OWVAR 1
4653: PUSH
4654: LD_INT 42000
4656: LESS
4657: IFFALSE 4728
4659: GO 4661
4661: DISABLE
// begin enable ;
4662: ENABLE
// if Prob ( 50 ) then
4663: LD_INT 50
4665: PPUSH
4666: CALL_OW 13
4670: IFFALSE 4701
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 5
4677: PPUSH
4678: CALL_OW 12
4682: PPUSH
4683: LD_INT 72
4685: PPUSH
4686: LD_INT 109
4688: PPUSH
4689: LD_INT 22
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 56
4699: GO 4728
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4701: LD_INT 1
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 12
4711: PPUSH
4712: LD_INT 140
4714: PPUSH
4715: LD_INT 73
4717: PPUSH
4718: LD_INT 22
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 56
4728: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4729: LD_INT 0
4731: PPUSH
4732: PPUSH
// if exist_mode then
4733: LD_VAR 0 2
4737: IFFALSE 4762
// unit := CreateCharacter ( prefix & ident ) else
4739: LD_ADDR_VAR 0 5
4743: PUSH
4744: LD_VAR 0 3
4748: PUSH
4749: LD_VAR 0 1
4753: STR
4754: PPUSH
4755: CALL_OW 34
4759: ST_TO_ADDR
4760: GO 4777
// unit := NewCharacter ( ident ) ;
4762: LD_ADDR_VAR 0 5
4766: PUSH
4767: LD_VAR 0 1
4771: PPUSH
4772: CALL_OW 25
4776: ST_TO_ADDR
// result := unit ;
4777: LD_ADDR_VAR 0 4
4781: PUSH
4782: LD_VAR 0 5
4786: ST_TO_ADDR
// end ;
4787: LD_VAR 0 4
4791: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4792: LD_INT 0
4794: PPUSH
4795: PPUSH
// if not side or not nation then
4796: LD_VAR 0 1
4800: NOT
4801: PUSH
4802: LD_VAR 0 2
4806: NOT
4807: OR
4808: IFFALSE 4812
// exit ;
4810: GO 5580
// case nation of nation_american :
4812: LD_VAR 0 2
4816: PUSH
4817: LD_INT 1
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 5039
4825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4826: LD_ADDR_VAR 0 4
4830: PUSH
4831: LD_INT 35
4833: PUSH
4834: LD_INT 45
4836: PUSH
4837: LD_INT 46
4839: PUSH
4840: LD_INT 47
4842: PUSH
4843: LD_INT 82
4845: PUSH
4846: LD_INT 83
4848: PUSH
4849: LD_INT 84
4851: PUSH
4852: LD_INT 85
4854: PUSH
4855: LD_INT 86
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 6
4866: PUSH
4867: LD_INT 15
4869: PUSH
4870: LD_INT 16
4872: PUSH
4873: LD_INT 7
4875: PUSH
4876: LD_INT 12
4878: PUSH
4879: LD_INT 13
4881: PUSH
4882: LD_INT 10
4884: PUSH
4885: LD_INT 14
4887: PUSH
4888: LD_INT 20
4890: PUSH
4891: LD_INT 21
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 25
4899: PUSH
4900: LD_INT 32
4902: PUSH
4903: LD_INT 27
4905: PUSH
4906: LD_INT 36
4908: PUSH
4909: LD_INT 69
4911: PUSH
4912: LD_INT 39
4914: PUSH
4915: LD_INT 34
4917: PUSH
4918: LD_INT 40
4920: PUSH
4921: LD_INT 48
4923: PUSH
4924: LD_INT 49
4926: PUSH
4927: LD_INT 50
4929: PUSH
4930: LD_INT 51
4932: PUSH
4933: LD_INT 52
4935: PUSH
4936: LD_INT 53
4938: PUSH
4939: LD_INT 54
4941: PUSH
4942: LD_INT 55
4944: PUSH
4945: LD_INT 56
4947: PUSH
4948: LD_INT 57
4950: PUSH
4951: LD_INT 58
4953: PUSH
4954: LD_INT 59
4956: PUSH
4957: LD_INT 60
4959: PUSH
4960: LD_INT 61
4962: PUSH
4963: LD_INT 62
4965: PUSH
4966: LD_INT 80
4968: PUSH
4969: LD_INT 82
4971: PUSH
4972: LD_INT 83
4974: PUSH
4975: LD_INT 84
4977: PUSH
4978: LD_INT 85
4980: PUSH
4981: LD_INT 86
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: ST_TO_ADDR
5037: GO 5504
5039: LD_INT 2
5041: DOUBLE
5042: EQUAL
5043: IFTRUE 5047
5045: GO 5273
5047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5048: LD_ADDR_VAR 0 4
5052: PUSH
5053: LD_INT 35
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: LD_INT 46
5061: PUSH
5062: LD_INT 47
5064: PUSH
5065: LD_INT 82
5067: PUSH
5068: LD_INT 83
5070: PUSH
5071: LD_INT 84
5073: PUSH
5074: LD_INT 85
5076: PUSH
5077: LD_INT 87
5079: PUSH
5080: LD_INT 70
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: LD_INT 11
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: LD_INT 5
5097: PUSH
5098: LD_INT 6
5100: PUSH
5101: LD_INT 15
5103: PUSH
5104: LD_INT 18
5106: PUSH
5107: LD_INT 7
5109: PUSH
5110: LD_INT 17
5112: PUSH
5113: LD_INT 8
5115: PUSH
5116: LD_INT 20
5118: PUSH
5119: LD_INT 21
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 72
5127: PUSH
5128: LD_INT 26
5130: PUSH
5131: LD_INT 69
5133: PUSH
5134: LD_INT 39
5136: PUSH
5137: LD_INT 40
5139: PUSH
5140: LD_INT 41
5142: PUSH
5143: LD_INT 42
5145: PUSH
5146: LD_INT 43
5148: PUSH
5149: LD_INT 48
5151: PUSH
5152: LD_INT 49
5154: PUSH
5155: LD_INT 50
5157: PUSH
5158: LD_INT 51
5160: PUSH
5161: LD_INT 52
5163: PUSH
5164: LD_INT 53
5166: PUSH
5167: LD_INT 54
5169: PUSH
5170: LD_INT 55
5172: PUSH
5173: LD_INT 56
5175: PUSH
5176: LD_INT 60
5178: PUSH
5179: LD_INT 61
5181: PUSH
5182: LD_INT 62
5184: PUSH
5185: LD_INT 66
5187: PUSH
5188: LD_INT 67
5190: PUSH
5191: LD_INT 68
5193: PUSH
5194: LD_INT 81
5196: PUSH
5197: LD_INT 82
5199: PUSH
5200: LD_INT 83
5202: PUSH
5203: LD_INT 84
5205: PUSH
5206: LD_INT 85
5208: PUSH
5209: LD_INT 87
5211: PUSH
5212: LD_INT 88
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: ST_TO_ADDR
5271: GO 5504
5273: LD_INT 3
5275: DOUBLE
5276: EQUAL
5277: IFTRUE 5281
5279: GO 5503
5281: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5282: LD_ADDR_VAR 0 4
5286: PUSH
5287: LD_INT 46
5289: PUSH
5290: LD_INT 47
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: LD_INT 2
5298: PUSH
5299: LD_INT 82
5301: PUSH
5302: LD_INT 83
5304: PUSH
5305: LD_INT 84
5307: PUSH
5308: LD_INT 85
5310: PUSH
5311: LD_INT 86
5313: PUSH
5314: LD_INT 11
5316: PUSH
5317: LD_INT 9
5319: PUSH
5320: LD_INT 20
5322: PUSH
5323: LD_INT 19
5325: PUSH
5326: LD_INT 21
5328: PUSH
5329: LD_INT 24
5331: PUSH
5332: LD_INT 22
5334: PUSH
5335: LD_INT 25
5337: PUSH
5338: LD_INT 28
5340: PUSH
5341: LD_INT 29
5343: PUSH
5344: LD_INT 30
5346: PUSH
5347: LD_INT 31
5349: PUSH
5350: LD_INT 37
5352: PUSH
5353: LD_INT 38
5355: PUSH
5356: LD_INT 32
5358: PUSH
5359: LD_INT 27
5361: PUSH
5362: LD_INT 33
5364: PUSH
5365: LD_INT 69
5367: PUSH
5368: LD_INT 39
5370: PUSH
5371: LD_INT 34
5373: PUSH
5374: LD_INT 40
5376: PUSH
5377: LD_INT 71
5379: PUSH
5380: LD_INT 23
5382: PUSH
5383: LD_INT 44
5385: PUSH
5386: LD_INT 48
5388: PUSH
5389: LD_INT 49
5391: PUSH
5392: LD_INT 50
5394: PUSH
5395: LD_INT 51
5397: PUSH
5398: LD_INT 52
5400: PUSH
5401: LD_INT 53
5403: PUSH
5404: LD_INT 54
5406: PUSH
5407: LD_INT 55
5409: PUSH
5410: LD_INT 56
5412: PUSH
5413: LD_INT 57
5415: PUSH
5416: LD_INT 58
5418: PUSH
5419: LD_INT 59
5421: PUSH
5422: LD_INT 63
5424: PUSH
5425: LD_INT 64
5427: PUSH
5428: LD_INT 65
5430: PUSH
5431: LD_INT 82
5433: PUSH
5434: LD_INT 83
5436: PUSH
5437: LD_INT 84
5439: PUSH
5440: LD_INT 85
5442: PUSH
5443: LD_INT 86
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: ST_TO_ADDR
5501: GO 5504
5503: POP
// if state > - 1 and state < 3 then
5504: LD_VAR 0 3
5508: PUSH
5509: LD_INT 1
5511: NEG
5512: GREATER
5513: PUSH
5514: LD_VAR 0 3
5518: PUSH
5519: LD_INT 3
5521: LESS
5522: AND
5523: IFFALSE 5580
// for i in result do
5525: LD_ADDR_VAR 0 5
5529: PUSH
5530: LD_VAR 0 4
5534: PUSH
5535: FOR_IN
5536: IFFALSE 5578
// if GetTech ( i , side ) <> state then
5538: LD_VAR 0 5
5542: PPUSH
5543: LD_VAR 0 1
5547: PPUSH
5548: CALL_OW 321
5552: PUSH
5553: LD_VAR 0 3
5557: NONEQUAL
5558: IFFALSE 5576
// result := result diff i ;
5560: LD_ADDR_VAR 0 4
5564: PUSH
5565: LD_VAR 0 4
5569: PUSH
5570: LD_VAR 0 5
5574: DIFF
5575: ST_TO_ADDR
5576: GO 5535
5578: POP
5579: POP
// end ;
5580: LD_VAR 0 4
5584: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5585: LD_INT 0
5587: PPUSH
5588: PPUSH
5589: PPUSH
// result := true ;
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5598: LD_ADDR_VAR 0 5
5602: PUSH
5603: LD_VAR 0 2
5607: PPUSH
5608: CALL_OW 480
5612: ST_TO_ADDR
// if not tmp then
5613: LD_VAR 0 5
5617: NOT
5618: IFFALSE 5622
// exit ;
5620: GO 5671
// for i in tmp do
5622: LD_ADDR_VAR 0 4
5626: PUSH
5627: LD_VAR 0 5
5631: PUSH
5632: FOR_IN
5633: IFFALSE 5669
// if GetTech ( i , side ) <> state_researched then
5635: LD_VAR 0 4
5639: PPUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 321
5649: PUSH
5650: LD_INT 2
5652: NONEQUAL
5653: IFFALSE 5667
// begin result := false ;
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// exit ;
5663: POP
5664: POP
5665: GO 5671
// end ;
5667: GO 5632
5669: POP
5670: POP
// end ;
5671: LD_VAR 0 3
5675: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5676: LD_INT 0
5678: PPUSH
5679: PPUSH
5680: PPUSH
5681: PPUSH
5682: PPUSH
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
5689: PPUSH
5690: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5691: LD_VAR 0 1
5695: NOT
5696: PUSH
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL_OW 257
5706: PUSH
5707: LD_INT 9
5709: NONEQUAL
5710: OR
5711: IFFALSE 5715
// exit ;
5713: GO 6288
// side := GetSide ( unit ) ;
5715: LD_ADDR_VAR 0 9
5719: PUSH
5720: LD_VAR 0 1
5724: PPUSH
5725: CALL_OW 255
5729: ST_TO_ADDR
// tech_space := tech_spacanom ;
5730: LD_ADDR_VAR 0 12
5734: PUSH
5735: LD_INT 29
5737: ST_TO_ADDR
// tech_time := tech_taurad ;
5738: LD_ADDR_VAR 0 13
5742: PUSH
5743: LD_INT 28
5745: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5746: LD_ADDR_VAR 0 11
5750: PUSH
5751: LD_VAR 0 1
5755: PPUSH
5756: CALL_OW 310
5760: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5761: LD_VAR 0 11
5765: PPUSH
5766: CALL_OW 247
5770: PUSH
5771: LD_INT 2
5773: EQUAL
5774: IFFALSE 5778
// exit ;
5776: GO 6288
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5778: LD_ADDR_VAR 0 8
5782: PUSH
5783: LD_INT 81
5785: PUSH
5786: LD_VAR 0 9
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: LD_INT 21
5800: PUSH
5801: LD_INT 3
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: ST_TO_ADDR
// if not tmp then
5821: LD_VAR 0 8
5825: NOT
5826: IFFALSE 5830
// exit ;
5828: GO 6288
// if in_unit then
5830: LD_VAR 0 11
5834: IFFALSE 5858
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5836: LD_ADDR_VAR 0 10
5840: PUSH
5841: LD_VAR 0 8
5845: PPUSH
5846: LD_VAR 0 11
5850: PPUSH
5851: CALL_OW 74
5855: ST_TO_ADDR
5856: GO 5878
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5858: LD_ADDR_VAR 0 10
5862: PUSH
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_VAR 0 1
5872: PPUSH
5873: CALL_OW 74
5877: ST_TO_ADDR
// if not enemy then
5878: LD_VAR 0 10
5882: NOT
5883: IFFALSE 5887
// exit ;
5885: GO 6288
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5887: LD_VAR 0 11
5891: PUSH
5892: LD_VAR 0 11
5896: PPUSH
5897: LD_VAR 0 10
5901: PPUSH
5902: CALL_OW 296
5906: PUSH
5907: LD_INT 13
5909: GREATER
5910: AND
5911: PUSH
5912: LD_VAR 0 1
5916: PPUSH
5917: LD_VAR 0 10
5921: PPUSH
5922: CALL_OW 296
5926: PUSH
5927: LD_INT 12
5929: GREATER
5930: OR
5931: IFFALSE 5935
// exit ;
5933: GO 6288
// missile := [ 1 ] ;
5935: LD_ADDR_VAR 0 14
5939: PUSH
5940: LD_INT 1
5942: PUSH
5943: EMPTY
5944: LIST
5945: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5946: LD_VAR 0 9
5950: PPUSH
5951: LD_VAR 0 12
5955: PPUSH
5956: CALL_OW 325
5960: IFFALSE 5989
// missile := Replace ( missile , missile + 1 , 2 ) ;
5962: LD_ADDR_VAR 0 14
5966: PUSH
5967: LD_VAR 0 14
5971: PPUSH
5972: LD_VAR 0 14
5976: PUSH
5977: LD_INT 1
5979: PLUS
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: CALL_OW 1
5988: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5989: LD_VAR 0 9
5993: PPUSH
5994: LD_VAR 0 13
5998: PPUSH
5999: CALL_OW 325
6003: PUSH
6004: LD_VAR 0 10
6008: PPUSH
6009: CALL_OW 255
6013: PPUSH
6014: LD_VAR 0 13
6018: PPUSH
6019: CALL_OW 325
6023: NOT
6024: AND
6025: IFFALSE 6054
// missile := Replace ( missile , missile + 1 , 3 ) ;
6027: LD_ADDR_VAR 0 14
6031: PUSH
6032: LD_VAR 0 14
6036: PPUSH
6037: LD_VAR 0 14
6041: PUSH
6042: LD_INT 1
6044: PLUS
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: CALL_OW 1
6053: ST_TO_ADDR
// if missile < 2 then
6054: LD_VAR 0 14
6058: PUSH
6059: LD_INT 2
6061: LESS
6062: IFFALSE 6066
// exit ;
6064: GO 6288
// x := GetX ( enemy ) ;
6066: LD_ADDR_VAR 0 4
6070: PUSH
6071: LD_VAR 0 10
6075: PPUSH
6076: CALL_OW 250
6080: ST_TO_ADDR
// y := GetY ( enemy ) ;
6081: LD_ADDR_VAR 0 5
6085: PUSH
6086: LD_VAR 0 10
6090: PPUSH
6091: CALL_OW 251
6095: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6096: LD_ADDR_VAR 0 6
6100: PUSH
6101: LD_VAR 0 4
6105: PUSH
6106: LD_INT 1
6108: NEG
6109: PPUSH
6110: LD_INT 1
6112: PPUSH
6113: CALL_OW 12
6117: PLUS
6118: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6119: LD_ADDR_VAR 0 7
6123: PUSH
6124: LD_VAR 0 5
6128: PUSH
6129: LD_INT 1
6131: NEG
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: CALL_OW 12
6140: PLUS
6141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6142: LD_VAR 0 6
6146: PPUSH
6147: LD_VAR 0 7
6151: PPUSH
6152: CALL_OW 488
6156: NOT
6157: IFFALSE 6179
// begin _x := x ;
6159: LD_ADDR_VAR 0 6
6163: PUSH
6164: LD_VAR 0 4
6168: ST_TO_ADDR
// _y := y ;
6169: LD_ADDR_VAR 0 7
6173: PUSH
6174: LD_VAR 0 5
6178: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6179: LD_ADDR_VAR 0 3
6183: PUSH
6184: LD_INT 1
6186: PPUSH
6187: LD_VAR 0 14
6191: PPUSH
6192: CALL_OW 12
6196: ST_TO_ADDR
// case i of 1 :
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 1
6204: DOUBLE
6205: EQUAL
6206: IFTRUE 6210
6208: GO 6227
6210: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6211: LD_VAR 0 1
6215: PPUSH
6216: LD_VAR 0 10
6220: PPUSH
6221: CALL_OW 115
6225: GO 6288
6227: LD_INT 2
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6257
6235: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6236: LD_VAR 0 1
6240: PPUSH
6241: LD_VAR 0 6
6245: PPUSH
6246: LD_VAR 0 7
6250: PPUSH
6251: CALL_OW 153
6255: GO 6288
6257: LD_INT 3
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6287
6265: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6266: LD_VAR 0 1
6270: PPUSH
6271: LD_VAR 0 6
6275: PPUSH
6276: LD_VAR 0 7
6280: PPUSH
6281: CALL_OW 154
6285: GO 6288
6287: POP
// end ;
6288: LD_VAR 0 2
6292: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6293: LD_INT 0
6295: PPUSH
6296: PPUSH
6297: PPUSH
6298: PPUSH
6299: PPUSH
6300: PPUSH
// if not unit or not building then
6301: LD_VAR 0 1
6305: NOT
6306: PUSH
6307: LD_VAR 0 2
6311: NOT
6312: OR
6313: IFFALSE 6317
// exit ;
6315: GO 6475
// x := GetX ( building ) ;
6317: LD_ADDR_VAR 0 5
6321: PUSH
6322: LD_VAR 0 2
6326: PPUSH
6327: CALL_OW 250
6331: ST_TO_ADDR
// y := GetY ( building ) ;
6332: LD_ADDR_VAR 0 6
6336: PUSH
6337: LD_VAR 0 2
6341: PPUSH
6342: CALL_OW 251
6346: ST_TO_ADDR
// for i = 0 to 5 do
6347: LD_ADDR_VAR 0 4
6351: PUSH
6352: DOUBLE
6353: LD_INT 0
6355: DEC
6356: ST_TO_ADDR
6357: LD_INT 5
6359: PUSH
6360: FOR_TO
6361: IFFALSE 6473
// begin _x := ShiftX ( x , i , 3 ) ;
6363: LD_ADDR_VAR 0 7
6367: PUSH
6368: LD_VAR 0 5
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 3
6380: PPUSH
6381: CALL_OW 272
6385: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6386: LD_ADDR_VAR 0 8
6390: PUSH
6391: LD_VAR 0 6
6395: PPUSH
6396: LD_VAR 0 4
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: CALL_OW 273
6408: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6409: LD_VAR 0 7
6413: PPUSH
6414: LD_VAR 0 8
6418: PPUSH
6419: CALL_OW 488
6423: NOT
6424: IFFALSE 6428
// continue ;
6426: GO 6360
// if HexInfo ( _x , _y ) = 0 then
6428: LD_VAR 0 7
6432: PPUSH
6433: LD_VAR 0 8
6437: PPUSH
6438: CALL_OW 428
6442: PUSH
6443: LD_INT 0
6445: EQUAL
6446: IFFALSE 6471
// begin ComMoveXY ( unit , _x , _y ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_VAR 0 7
6457: PPUSH
6458: LD_VAR 0 8
6462: PPUSH
6463: CALL_OW 111
// exit ;
6467: POP
6468: POP
6469: GO 6475
// end ; end ;
6471: GO 6360
6473: POP
6474: POP
// end ;
6475: LD_VAR 0 3
6479: RET
// export function ScanBase ( side , base_area ) ; begin
6480: LD_INT 0
6482: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6483: LD_ADDR_VAR 0 3
6487: PUSH
6488: LD_VAR 0 2
6492: PPUSH
6493: LD_INT 81
6495: PUSH
6496: LD_VAR 0 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 70
6509: ST_TO_ADDR
// end ;
6510: LD_VAR 0 3
6514: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6515: LD_INT 0
6517: PPUSH
6518: PPUSH
6519: PPUSH
6520: PPUSH
// result := false ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// side := GetSide ( unit ) ;
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 255
6543: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6544: LD_ADDR_VAR 0 4
6548: PUSH
6549: LD_VAR 0 1
6553: PPUSH
6554: CALL_OW 248
6558: ST_TO_ADDR
// case nat of 1 :
6559: LD_VAR 0 4
6563: PUSH
6564: LD_INT 1
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6583
6572: POP
// tech := tech_lassight ; 2 :
6573: LD_ADDR_VAR 0 5
6577: PUSH
6578: LD_INT 12
6580: ST_TO_ADDR
6581: GO 6622
6583: LD_INT 2
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6602
6591: POP
// tech := tech_mortar ; 3 :
6592: LD_ADDR_VAR 0 5
6596: PUSH
6597: LD_INT 41
6599: ST_TO_ADDR
6600: GO 6622
6602: LD_INT 3
6604: DOUBLE
6605: EQUAL
6606: IFTRUE 6610
6608: GO 6621
6610: POP
// tech := tech_bazooka ; end ;
6611: LD_ADDR_VAR 0 5
6615: PUSH
6616: LD_INT 44
6618: ST_TO_ADDR
6619: GO 6622
6621: POP
// if Researched ( side , tech ) then
6622: LD_VAR 0 3
6626: PPUSH
6627: LD_VAR 0 5
6631: PPUSH
6632: CALL_OW 325
6636: IFFALSE 6663
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6638: LD_ADDR_VAR 0 2
6642: PUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 8
6648: PUSH
6649: LD_INT 9
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_VAR 0 4
6661: ARRAY
6662: ST_TO_ADDR
// end ;
6663: LD_VAR 0 2
6667: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
// if not mines then
6673: LD_VAR 0 2
6677: NOT
6678: IFFALSE 6682
// exit ;
6680: GO 6826
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6682: LD_ADDR_VAR 0 5
6686: PUSH
6687: LD_INT 81
6689: PUSH
6690: LD_VAR 0 1
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// for i in mines do
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: FOR_IN
6736: IFFALSE 6824
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6738: LD_VAR 0 4
6742: PUSH
6743: LD_INT 1
6745: ARRAY
6746: PPUSH
6747: LD_VAR 0 4
6751: PUSH
6752: LD_INT 2
6754: ARRAY
6755: PPUSH
6756: CALL_OW 458
6760: NOT
6761: IFFALSE 6765
// continue ;
6763: GO 6735
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6765: LD_VAR 0 4
6769: PUSH
6770: LD_INT 1
6772: ARRAY
6773: PPUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 2
6781: ARRAY
6782: PPUSH
6783: CALL_OW 428
6787: PUSH
6788: LD_VAR 0 5
6792: IN
6793: IFFALSE 6822
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6795: LD_VAR 0 4
6799: PUSH
6800: LD_INT 1
6802: ARRAY
6803: PPUSH
6804: LD_VAR 0 4
6808: PUSH
6809: LD_INT 2
6811: ARRAY
6812: PPUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 456
// end ;
6822: GO 6735
6824: POP
6825: POP
// end ;
6826: LD_VAR 0 3
6830: RET
// export function Count ( array ) ; begin
6831: LD_INT 0
6833: PPUSH
// result := array + 0 ;
6834: LD_ADDR_VAR 0 2
6838: PUSH
6839: LD_VAR 0 1
6843: PUSH
6844: LD_INT 0
6846: PLUS
6847: ST_TO_ADDR
// end ;
6848: LD_VAR 0 2
6852: RET
// export function IsEmpty ( building ) ; begin
6853: LD_INT 0
6855: PPUSH
// if not building then
6856: LD_VAR 0 1
6860: NOT
6861: IFFALSE 6865
// exit ;
6863: GO 6908
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 1
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_VAR 0 1
6882: PPUSH
6883: CALL_OW 255
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 58
6894: PUSH
6895: EMPTY
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 69
6906: IN
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 2
6912: RET
// export function IsNotFull ( building ) ; var places ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// if not building then
6917: LD_VAR 0 1
6921: NOT
6922: IFFALSE 6926
// exit ;
6924: GO 6954
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
6926: LD_ADDR_VAR 0 2
6930: PUSH
6931: LD_VAR 0 1
6935: PPUSH
6936: LD_INT 3
6938: PUSH
6939: LD_INT 62
6941: PUSH
6942: EMPTY
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 72
6953: ST_TO_ADDR
// end ;
6954: LD_VAR 0 2
6958: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
// tmp := [ ] ;
6965: LD_ADDR_VAR 0 3
6969: PUSH
6970: EMPTY
6971: ST_TO_ADDR
// list := [ ] ;
6972: LD_ADDR_VAR 0 5
6976: PUSH
6977: EMPTY
6978: ST_TO_ADDR
// for i = 16 to 25 do
6979: LD_ADDR_VAR 0 4
6983: PUSH
6984: DOUBLE
6985: LD_INT 16
6987: DEC
6988: ST_TO_ADDR
6989: LD_INT 25
6991: PUSH
6992: FOR_TO
6993: IFFALSE 7066
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6995: LD_ADDR_VAR 0 3
6999: PUSH
7000: LD_VAR 0 3
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_VAR 0 1
7012: PPUSH
7013: CALL_OW 255
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 91
7024: PUSH
7025: LD_VAR 0 1
7029: PUSH
7030: LD_INT 6
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 30
7040: PUSH
7041: LD_VAR 0 4
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: ADD
7063: ST_TO_ADDR
7064: GO 6992
7066: POP
7067: POP
// for i = 1 to tmp do
7068: LD_ADDR_VAR 0 4
7072: PUSH
7073: DOUBLE
7074: LD_INT 1
7076: DEC
7077: ST_TO_ADDR
7078: LD_VAR 0 3
7082: PUSH
7083: FOR_TO
7084: IFFALSE 7172
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7086: LD_ADDR_VAR 0 5
7090: PUSH
7091: LD_VAR 0 5
7095: PUSH
7096: LD_VAR 0 3
7100: PUSH
7101: LD_VAR 0 4
7105: ARRAY
7106: PPUSH
7107: CALL_OW 266
7111: PUSH
7112: LD_VAR 0 3
7116: PUSH
7117: LD_VAR 0 4
7121: ARRAY
7122: PPUSH
7123: CALL_OW 250
7127: PUSH
7128: LD_VAR 0 3
7132: PUSH
7133: LD_VAR 0 4
7137: ARRAY
7138: PPUSH
7139: CALL_OW 251
7143: PUSH
7144: LD_VAR 0 3
7148: PUSH
7149: LD_VAR 0 4
7153: ARRAY
7154: PPUSH
7155: CALL_OW 254
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: ADD
7169: ST_TO_ADDR
7170: GO 7083
7172: POP
7173: POP
// result := list ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_VAR 0 5
7183: ST_TO_ADDR
// end ;
7184: LD_VAR 0 2
7188: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
// if not factory then
7198: LD_VAR 0 1
7202: NOT
7203: IFFALSE 7207
// exit ;
7205: GO 7800
// if control = control_apeman then
7207: LD_VAR 0 4
7211: PUSH
7212: LD_INT 5
7214: EQUAL
7215: IFFALSE 7324
// begin tmp := UnitsInside ( factory ) ;
7217: LD_ADDR_VAR 0 8
7221: PUSH
7222: LD_VAR 0 1
7226: PPUSH
7227: CALL_OW 313
7231: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7232: LD_VAR 0 8
7236: PPUSH
7237: LD_INT 25
7239: PUSH
7240: LD_INT 12
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 72
7251: NOT
7252: IFFALSE 7262
// control := control_manual ;
7254: LD_ADDR_VAR 0 4
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7262: LD_ADDR_VAR 0 8
7266: PUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL 6959 0 1
7276: ST_TO_ADDR
// if tmp then
7277: LD_VAR 0 8
7281: IFFALSE 7324
// begin for i in tmp do
7283: LD_ADDR_VAR 0 7
7287: PUSH
7288: LD_VAR 0 8
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7322
// if i [ 1 ] = b_ext_radio then
7296: LD_VAR 0 7
7300: PUSH
7301: LD_INT 1
7303: ARRAY
7304: PUSH
7305: LD_INT 22
7307: EQUAL
7308: IFFALSE 7320
// begin control := control_remote ;
7310: LD_ADDR_VAR 0 4
7314: PUSH
7315: LD_INT 2
7317: ST_TO_ADDR
// break ;
7318: GO 7322
// end ;
7320: GO 7293
7322: POP
7323: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7324: LD_VAR 0 1
7328: PPUSH
7329: LD_VAR 0 2
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_VAR 0 4
7343: PPUSH
7344: LD_VAR 0 5
7348: PPUSH
7349: CALL_OW 448
7353: IFFALSE 7388
// begin result := [ chassis , engine , control , weapon ] ;
7355: LD_ADDR_VAR 0 6
7359: PUSH
7360: LD_VAR 0 2
7364: PUSH
7365: LD_VAR 0 3
7369: PUSH
7370: LD_VAR 0 4
7374: PUSH
7375: LD_VAR 0 5
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: ST_TO_ADDR
// exit ;
7386: GO 7800
// end ; _chassis := AvailableChassisList ( factory ) ;
7388: LD_ADDR_VAR 0 9
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 475
7402: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7403: LD_ADDR_VAR 0 11
7407: PUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 476
7417: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7418: LD_ADDR_VAR 0 12
7422: PUSH
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 477
7432: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7433: LD_ADDR_VAR 0 10
7437: PUSH
7438: LD_VAR 0 1
7442: PPUSH
7443: CALL_OW 478
7447: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7448: LD_VAR 0 9
7452: NOT
7453: PUSH
7454: LD_VAR 0 11
7458: NOT
7459: OR
7460: PUSH
7461: LD_VAR 0 12
7465: NOT
7466: OR
7467: PUSH
7468: LD_VAR 0 10
7472: NOT
7473: OR
7474: IFFALSE 7509
// begin result := [ chassis , engine , control , weapon ] ;
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_VAR 0 2
7485: PUSH
7486: LD_VAR 0 3
7490: PUSH
7491: LD_VAR 0 4
7495: PUSH
7496: LD_VAR 0 5
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
// exit ;
7507: GO 7800
// end ; if not chassis in _chassis then
7509: LD_VAR 0 2
7513: PUSH
7514: LD_VAR 0 9
7518: IN
7519: NOT
7520: IFFALSE 7546
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_VAR 0 9
7531: PUSH
7532: LD_INT 1
7534: PPUSH
7535: LD_VAR 0 9
7539: PPUSH
7540: CALL_OW 12
7544: ARRAY
7545: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7546: LD_VAR 0 2
7550: PPUSH
7551: LD_VAR 0 3
7555: PPUSH
7556: CALL 7805 0 2
7560: NOT
7561: IFFALSE 7620
// repeat engine := _engine [ 1 ] ;
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_VAR 0 11
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7577: LD_ADDR_VAR 0 11
7581: PUSH
7582: LD_VAR 0 11
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 3
7594: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7595: LD_VAR 0 2
7599: PPUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL 7805 0 2
7609: PUSH
7610: LD_VAR 0 11
7614: PUSH
7615: EMPTY
7616: EQUAL
7617: OR
7618: IFFALSE 7563
// if not control in _control then
7620: LD_VAR 0 4
7624: PUSH
7625: LD_VAR 0 12
7629: IN
7630: NOT
7631: IFFALSE 7657
// control := _control [ rand ( 1 , _control ) ] ;
7633: LD_ADDR_VAR 0 4
7637: PUSH
7638: LD_VAR 0 12
7642: PUSH
7643: LD_INT 1
7645: PPUSH
7646: LD_VAR 0 12
7650: PPUSH
7651: CALL_OW 12
7655: ARRAY
7656: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7657: LD_VAR 0 2
7661: PPUSH
7662: LD_VAR 0 5
7666: PPUSH
7667: CALL 8025 0 2
7671: NOT
7672: IFFALSE 7731
// repeat weapon := _weapon [ 1 ] ;
7674: LD_ADDR_VAR 0 5
7678: PUSH
7679: LD_VAR 0 10
7683: PUSH
7684: LD_INT 1
7686: ARRAY
7687: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7688: LD_ADDR_VAR 0 10
7692: PUSH
7693: LD_VAR 0 10
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 3
7705: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7706: LD_VAR 0 2
7710: PPUSH
7711: LD_VAR 0 5
7715: PPUSH
7716: CALL 8025 0 2
7720: PUSH
7721: LD_VAR 0 10
7725: PUSH
7726: EMPTY
7727: EQUAL
7728: OR
7729: IFFALSE 7674
// result := [ ] ;
7731: LD_ADDR_VAR 0 6
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_VAR 0 4
7757: PPUSH
7758: LD_VAR 0 5
7762: PPUSH
7763: CALL_OW 448
7767: IFFALSE 7800
// result := [ chassis , engine , control , weapon ] ;
7769: LD_ADDR_VAR 0 6
7773: PUSH
7774: LD_VAR 0 2
7778: PUSH
7779: LD_VAR 0 3
7783: PUSH
7784: LD_VAR 0 4
7788: PUSH
7789: LD_VAR 0 5
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: ST_TO_ADDR
// end ;
7800: LD_VAR 0 6
7804: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7805: LD_INT 0
7807: PPUSH
// if not chassis or not engine then
7808: LD_VAR 0 1
7812: NOT
7813: PUSH
7814: LD_VAR 0 2
7818: NOT
7819: OR
7820: IFFALSE 7824
// exit ;
7822: GO 8020
// case engine of engine_solar :
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 2
7831: DOUBLE
7832: EQUAL
7833: IFTRUE 7837
7835: GO 7875
7837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7838: LD_ADDR_VAR 0 3
7842: PUSH
7843: LD_INT 11
7845: PUSH
7846: LD_INT 12
7848: PUSH
7849: LD_INT 13
7851: PUSH
7852: LD_INT 14
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: ST_TO_ADDR
7873: GO 8004
7875: LD_INT 1
7877: DOUBLE
7878: EQUAL
7879: IFTRUE 7883
7881: GO 7945
7883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7884: LD_ADDR_VAR 0 3
7888: PUSH
7889: LD_INT 11
7891: PUSH
7892: LD_INT 12
7894: PUSH
7895: LD_INT 13
7897: PUSH
7898: LD_INT 14
7900: PUSH
7901: LD_INT 1
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: LD_INT 4
7912: PUSH
7913: LD_INT 5
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 23
7921: PUSH
7922: LD_INT 22
7924: PUSH
7925: LD_INT 24
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: ST_TO_ADDR
7943: GO 8004
7945: LD_INT 3
7947: DOUBLE
7948: EQUAL
7949: IFTRUE 7953
7951: GO 8003
7953: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7954: LD_ADDR_VAR 0 3
7958: PUSH
7959: LD_INT 13
7961: PUSH
7962: LD_INT 14
7964: PUSH
7965: LD_INT 2
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: LD_INT 4
7973: PUSH
7974: LD_INT 5
7976: PUSH
7977: LD_INT 21
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_INT 23
7985: PUSH
7986: LD_INT 24
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
8001: GO 8004
8003: POP
// result := ( chassis in result ) ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_VAR 0 1
8013: PUSH
8014: LD_VAR 0 3
8018: IN
8019: ST_TO_ADDR
// end ;
8020: LD_VAR 0 3
8024: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8025: LD_INT 0
8027: PPUSH
// if not chassis or not weapon then
8028: LD_VAR 0 1
8032: NOT
8033: PUSH
8034: LD_VAR 0 2
8038: NOT
8039: OR
8040: IFFALSE 8044
// exit ;
8042: GO 9104
// case weapon of us_machine_gun :
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: DOUBLE
8052: EQUAL
8053: IFTRUE 8057
8055: GO 8087
8057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8058: LD_ADDR_VAR 0 3
8062: PUSH
8063: LD_INT 1
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 3
8071: PUSH
8072: LD_INT 4
8074: PUSH
8075: LD_INT 5
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: ST_TO_ADDR
8085: GO 9088
8087: LD_INT 3
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8125
8095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8096: LD_ADDR_VAR 0 3
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: LD_INT 4
8112: PUSH
8113: LD_INT 5
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: ST_TO_ADDR
8123: GO 9088
8125: LD_INT 11
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8133
8131: GO 8163
8133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8134: LD_ADDR_VAR 0 3
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: LD_INT 2
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: LD_INT 4
8150: PUSH
8151: LD_INT 5
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: ST_TO_ADDR
8161: GO 9088
8163: LD_INT 4
8165: DOUBLE
8166: EQUAL
8167: IFTRUE 8171
8169: GO 8197
8171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8172: LD_ADDR_VAR 0 3
8176: PUSH
8177: LD_INT 2
8179: PUSH
8180: LD_INT 3
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: LD_INT 5
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: ST_TO_ADDR
8195: GO 9088
8197: LD_INT 5
8199: DOUBLE
8200: EQUAL
8201: IFTRUE 8205
8203: GO 8231
8205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8206: LD_ADDR_VAR 0 3
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: LD_INT 3
8216: PUSH
8217: LD_INT 4
8219: PUSH
8220: LD_INT 5
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: ST_TO_ADDR
8229: GO 9088
8231: LD_INT 9
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8239
8237: GO 8265
8239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8240: LD_ADDR_VAR 0 3
8244: PUSH
8245: LD_INT 2
8247: PUSH
8248: LD_INT 3
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: LD_INT 5
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: ST_TO_ADDR
8263: GO 9088
8265: LD_INT 7
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8299
8273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8274: LD_ADDR_VAR 0 3
8278: PUSH
8279: LD_INT 2
8281: PUSH
8282: LD_INT 3
8284: PUSH
8285: LD_INT 4
8287: PUSH
8288: LD_INT 5
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
8297: GO 9088
8299: LD_INT 12
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8333
8307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_INT 2
8315: PUSH
8316: LD_INT 3
8318: PUSH
8319: LD_INT 4
8321: PUSH
8322: LD_INT 5
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: ST_TO_ADDR
8331: GO 9088
8333: LD_INT 13
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8367
8341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8342: LD_ADDR_VAR 0 3
8346: PUSH
8347: LD_INT 2
8349: PUSH
8350: LD_INT 3
8352: PUSH
8353: LD_INT 4
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: ST_TO_ADDR
8365: GO 9088
8367: LD_INT 14
8369: DOUBLE
8370: EQUAL
8371: IFTRUE 8375
8373: GO 8393
8375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8376: LD_ADDR_VAR 0 3
8380: PUSH
8381: LD_INT 4
8383: PUSH
8384: LD_INT 5
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: ST_TO_ADDR
8391: GO 9088
8393: LD_INT 6
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8419
8401: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8402: LD_ADDR_VAR 0 3
8406: PUSH
8407: LD_INT 4
8409: PUSH
8410: LD_INT 5
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: ST_TO_ADDR
8417: GO 9088
8419: LD_INT 10
8421: DOUBLE
8422: EQUAL
8423: IFTRUE 8427
8425: GO 8445
8427: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8428: LD_ADDR_VAR 0 3
8432: PUSH
8433: LD_INT 4
8435: PUSH
8436: LD_INT 5
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: ST_TO_ADDR
8443: GO 9088
8445: LD_INT 22
8447: DOUBLE
8448: EQUAL
8449: IFTRUE 8453
8451: GO 8479
8453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8454: LD_ADDR_VAR 0 3
8458: PUSH
8459: LD_INT 11
8461: PUSH
8462: LD_INT 12
8464: PUSH
8465: LD_INT 13
8467: PUSH
8468: LD_INT 14
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: ST_TO_ADDR
8477: GO 9088
8479: LD_INT 23
8481: DOUBLE
8482: EQUAL
8483: IFTRUE 8487
8485: GO 8513
8487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8488: LD_ADDR_VAR 0 3
8492: PUSH
8493: LD_INT 11
8495: PUSH
8496: LD_INT 12
8498: PUSH
8499: LD_INT 13
8501: PUSH
8502: LD_INT 14
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
8511: GO 9088
8513: LD_INT 24
8515: DOUBLE
8516: EQUAL
8517: IFTRUE 8521
8519: GO 8547
8521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8522: LD_ADDR_VAR 0 3
8526: PUSH
8527: LD_INT 11
8529: PUSH
8530: LD_INT 12
8532: PUSH
8533: LD_INT 13
8535: PUSH
8536: LD_INT 14
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: ST_TO_ADDR
8545: GO 9088
8547: LD_INT 30
8549: DOUBLE
8550: EQUAL
8551: IFTRUE 8555
8553: GO 8581
8555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8556: LD_ADDR_VAR 0 3
8560: PUSH
8561: LD_INT 11
8563: PUSH
8564: LD_INT 12
8566: PUSH
8567: LD_INT 13
8569: PUSH
8570: LD_INT 14
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: ST_TO_ADDR
8579: GO 9088
8581: LD_INT 25
8583: DOUBLE
8584: EQUAL
8585: IFTRUE 8589
8587: GO 8607
8589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_INT 13
8597: PUSH
8598: LD_INT 14
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: ST_TO_ADDR
8605: GO 9088
8607: LD_INT 27
8609: DOUBLE
8610: EQUAL
8611: IFTRUE 8615
8613: GO 8633
8615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_INT 13
8623: PUSH
8624: LD_INT 14
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: ST_TO_ADDR
8631: GO 9088
8633: LD_INT 92
8635: DOUBLE
8636: EQUAL
8637: IFTRUE 8641
8639: GO 8667
8641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8642: LD_ADDR_VAR 0 3
8646: PUSH
8647: LD_INT 11
8649: PUSH
8650: LD_INT 12
8652: PUSH
8653: LD_INT 13
8655: PUSH
8656: LD_INT 14
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: ST_TO_ADDR
8665: GO 9088
8667: LD_INT 28
8669: DOUBLE
8670: EQUAL
8671: IFTRUE 8675
8673: GO 8693
8675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8676: LD_ADDR_VAR 0 3
8680: PUSH
8681: LD_INT 13
8683: PUSH
8684: LD_INT 14
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: ST_TO_ADDR
8691: GO 9088
8693: LD_INT 29
8695: DOUBLE
8696: EQUAL
8697: IFTRUE 8701
8699: GO 8719
8701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8702: LD_ADDR_VAR 0 3
8706: PUSH
8707: LD_INT 13
8709: PUSH
8710: LD_INT 14
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: ST_TO_ADDR
8717: GO 9088
8719: LD_INT 31
8721: DOUBLE
8722: EQUAL
8723: IFTRUE 8727
8725: GO 8745
8727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8728: LD_ADDR_VAR 0 3
8732: PUSH
8733: LD_INT 13
8735: PUSH
8736: LD_INT 14
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: ST_TO_ADDR
8743: GO 9088
8745: LD_INT 26
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8771
8753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8754: LD_ADDR_VAR 0 3
8758: PUSH
8759: LD_INT 13
8761: PUSH
8762: LD_INT 14
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: ST_TO_ADDR
8769: GO 9088
8771: LD_INT 42
8773: DOUBLE
8774: EQUAL
8775: IFTRUE 8779
8777: GO 8805
8779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8780: LD_ADDR_VAR 0 3
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 24
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: ST_TO_ADDR
8803: GO 9088
8805: LD_INT 43
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 8839
8813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8814: LD_ADDR_VAR 0 3
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 22
8824: PUSH
8825: LD_INT 23
8827: PUSH
8828: LD_INT 24
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: ST_TO_ADDR
8837: GO 9088
8839: LD_INT 44
8841: DOUBLE
8842: EQUAL
8843: IFTRUE 8847
8845: GO 8873
8847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8848: LD_ADDR_VAR 0 3
8852: PUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 23
8861: PUSH
8862: LD_INT 24
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: ST_TO_ADDR
8871: GO 9088
8873: LD_INT 45
8875: DOUBLE
8876: EQUAL
8877: IFTRUE 8881
8879: GO 8907
8881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8882: LD_ADDR_VAR 0 3
8886: PUSH
8887: LD_INT 21
8889: PUSH
8890: LD_INT 22
8892: PUSH
8893: LD_INT 23
8895: PUSH
8896: LD_INT 24
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: ST_TO_ADDR
8905: GO 9088
8907: LD_INT 49
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 8941
8915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8916: LD_ADDR_VAR 0 3
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 24
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: ST_TO_ADDR
8939: GO 9088
8941: LD_INT 51
8943: DOUBLE
8944: EQUAL
8945: IFTRUE 8949
8947: GO 8975
8949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8950: LD_ADDR_VAR 0 3
8954: PUSH
8955: LD_INT 21
8957: PUSH
8958: LD_INT 22
8960: PUSH
8961: LD_INT 23
8963: PUSH
8964: LD_INT 24
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
8973: GO 9088
8975: LD_INT 52
8977: DOUBLE
8978: EQUAL
8979: IFTRUE 8983
8981: GO 9009
8983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8984: LD_ADDR_VAR 0 3
8988: PUSH
8989: LD_INT 21
8991: PUSH
8992: LD_INT 22
8994: PUSH
8995: LD_INT 23
8997: PUSH
8998: LD_INT 24
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
9007: GO 9088
9009: LD_INT 53
9011: DOUBLE
9012: EQUAL
9013: IFTRUE 9017
9015: GO 9035
9017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9018: LD_ADDR_VAR 0 3
9022: PUSH
9023: LD_INT 23
9025: PUSH
9026: LD_INT 24
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: ST_TO_ADDR
9033: GO 9088
9035: LD_INT 46
9037: DOUBLE
9038: EQUAL
9039: IFTRUE 9043
9041: GO 9061
9043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 23
9051: PUSH
9052: LD_INT 24
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: ST_TO_ADDR
9059: GO 9088
9061: LD_INT 47
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9087
9069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9070: LD_ADDR_VAR 0 3
9074: PUSH
9075: LD_INT 23
9077: PUSH
9078: LD_INT 24
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: ST_TO_ADDR
9085: GO 9088
9087: POP
// result := ( chassis in result ) ;
9088: LD_ADDR_VAR 0 3
9092: PUSH
9093: LD_VAR 0 1
9097: PUSH
9098: LD_VAR 0 3
9102: IN
9103: ST_TO_ADDR
// end ;
9104: LD_VAR 0 3
9108: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9109: LD_INT 0
9111: PPUSH
9112: PPUSH
9113: PPUSH
9114: PPUSH
9115: PPUSH
9116: PPUSH
9117: PPUSH
// result := array ;
9118: LD_ADDR_VAR 0 5
9122: PUSH
9123: LD_VAR 0 1
9127: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9128: LD_VAR 0 1
9132: NOT
9133: PUSH
9134: LD_VAR 0 2
9138: NOT
9139: OR
9140: PUSH
9141: LD_VAR 0 3
9145: NOT
9146: OR
9147: PUSH
9148: LD_VAR 0 2
9152: PUSH
9153: LD_VAR 0 1
9157: GREATER
9158: OR
9159: PUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_VAR 0 1
9169: GREATER
9170: OR
9171: IFFALSE 9175
// exit ;
9173: GO 9471
// if direction then
9175: LD_VAR 0 4
9179: IFFALSE 9243
// begin d := 1 ;
9181: LD_ADDR_VAR 0 9
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// if i_from > i_to then
9189: LD_VAR 0 2
9193: PUSH
9194: LD_VAR 0 3
9198: GREATER
9199: IFFALSE 9225
// length := ( array - i_from ) + i_to else
9201: LD_ADDR_VAR 0 11
9205: PUSH
9206: LD_VAR 0 1
9210: PUSH
9211: LD_VAR 0 2
9215: MINUS
9216: PUSH
9217: LD_VAR 0 3
9221: PLUS
9222: ST_TO_ADDR
9223: GO 9241
// length := i_to - i_from ;
9225: LD_ADDR_VAR 0 11
9229: PUSH
9230: LD_VAR 0 3
9234: PUSH
9235: LD_VAR 0 2
9239: MINUS
9240: ST_TO_ADDR
// end else
9241: GO 9304
// begin d := - 1 ;
9243: LD_ADDR_VAR 0 9
9247: PUSH
9248: LD_INT 1
9250: NEG
9251: ST_TO_ADDR
// if i_from > i_to then
9252: LD_VAR 0 2
9256: PUSH
9257: LD_VAR 0 3
9261: GREATER
9262: IFFALSE 9282
// length := i_from - i_to else
9264: LD_ADDR_VAR 0 11
9268: PUSH
9269: LD_VAR 0 2
9273: PUSH
9274: LD_VAR 0 3
9278: MINUS
9279: ST_TO_ADDR
9280: GO 9304
// length := ( array - i_to ) + i_from ;
9282: LD_ADDR_VAR 0 11
9286: PUSH
9287: LD_VAR 0 1
9291: PUSH
9292: LD_VAR 0 3
9296: MINUS
9297: PUSH
9298: LD_VAR 0 2
9302: PLUS
9303: ST_TO_ADDR
// end ; if not length then
9304: LD_VAR 0 11
9308: NOT
9309: IFFALSE 9313
// exit ;
9311: GO 9471
// tmp := array ;
9313: LD_ADDR_VAR 0 10
9317: PUSH
9318: LD_VAR 0 1
9322: ST_TO_ADDR
// for i = 1 to length do
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_VAR 0 11
9337: PUSH
9338: FOR_TO
9339: IFFALSE 9459
// begin for j = 1 to array do
9341: LD_ADDR_VAR 0 7
9345: PUSH
9346: DOUBLE
9347: LD_INT 1
9349: DEC
9350: ST_TO_ADDR
9351: LD_VAR 0 1
9355: PUSH
9356: FOR_TO
9357: IFFALSE 9445
// begin k := j + d ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 7
9368: PUSH
9369: LD_VAR 0 9
9373: PLUS
9374: ST_TO_ADDR
// if k > array then
9375: LD_VAR 0 8
9379: PUSH
9380: LD_VAR 0 1
9384: GREATER
9385: IFFALSE 9395
// k := 1 ;
9387: LD_ADDR_VAR 0 8
9391: PUSH
9392: LD_INT 1
9394: ST_TO_ADDR
// if not k then
9395: LD_VAR 0 8
9399: NOT
9400: IFFALSE 9412
// k := array ;
9402: LD_ADDR_VAR 0 8
9406: PUSH
9407: LD_VAR 0 1
9411: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9412: LD_ADDR_VAR 0 10
9416: PUSH
9417: LD_VAR 0 10
9421: PPUSH
9422: LD_VAR 0 8
9426: PPUSH
9427: LD_VAR 0 1
9431: PUSH
9432: LD_VAR 0 7
9436: ARRAY
9437: PPUSH
9438: CALL_OW 1
9442: ST_TO_ADDR
// end ;
9443: GO 9356
9445: POP
9446: POP
// array := tmp ;
9447: LD_ADDR_VAR 0 1
9451: PUSH
9452: LD_VAR 0 10
9456: ST_TO_ADDR
// end ;
9457: GO 9338
9459: POP
9460: POP
// result := array ;
9461: LD_ADDR_VAR 0 5
9465: PUSH
9466: LD_VAR 0 1
9470: ST_TO_ADDR
// end ;
9471: LD_VAR 0 5
9475: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9476: LD_INT 0
9478: PPUSH
9479: PPUSH
// result := 0 ;
9480: LD_ADDR_VAR 0 3
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// if not array or not value in array then
9488: LD_VAR 0 1
9492: NOT
9493: PUSH
9494: LD_VAR 0 2
9498: PUSH
9499: LD_VAR 0 1
9503: IN
9504: NOT
9505: OR
9506: IFFALSE 9510
// exit ;
9508: GO 9564
// for i = 1 to array do
9510: LD_ADDR_VAR 0 4
9514: PUSH
9515: DOUBLE
9516: LD_INT 1
9518: DEC
9519: ST_TO_ADDR
9520: LD_VAR 0 1
9524: PUSH
9525: FOR_TO
9526: IFFALSE 9562
// if value = array [ i ] then
9528: LD_VAR 0 2
9532: PUSH
9533: LD_VAR 0 1
9537: PUSH
9538: LD_VAR 0 4
9542: ARRAY
9543: EQUAL
9544: IFFALSE 9560
// begin result := i ;
9546: LD_ADDR_VAR 0 3
9550: PUSH
9551: LD_VAR 0 4
9555: ST_TO_ADDR
// exit ;
9556: POP
9557: POP
9558: GO 9564
// end ;
9560: GO 9525
9562: POP
9563: POP
// end ;
9564: LD_VAR 0 3
9568: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9569: LD_INT 0
9571: PPUSH
// vc_chassis := chassis ;
9572: LD_ADDR_OWVAR 37
9576: PUSH
9577: LD_VAR 0 1
9581: ST_TO_ADDR
// vc_engine := engine ;
9582: LD_ADDR_OWVAR 39
9586: PUSH
9587: LD_VAR 0 2
9591: ST_TO_ADDR
// vc_control := control ;
9592: LD_ADDR_OWVAR 38
9596: PUSH
9597: LD_VAR 0 3
9601: ST_TO_ADDR
// vc_weapon := weapon ;
9602: LD_ADDR_OWVAR 40
9606: PUSH
9607: LD_VAR 0 4
9611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9612: LD_ADDR_OWVAR 41
9616: PUSH
9617: LD_VAR 0 5
9621: ST_TO_ADDR
// end ;
9622: LD_VAR 0 6
9626: RET
// export function WantPlant ( unit ) ; var task ; begin
9627: LD_INT 0
9629: PPUSH
9630: PPUSH
// result := false ;
9631: LD_ADDR_VAR 0 2
9635: PUSH
9636: LD_INT 0
9638: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9639: LD_ADDR_VAR 0 3
9643: PUSH
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 437
9653: ST_TO_ADDR
// if task then
9654: LD_VAR 0 3
9658: IFFALSE 9686
// if task [ 1 ] [ 1 ] = p then
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PUSH
9673: LD_STRING p
9675: EQUAL
9676: IFFALSE 9686
// result := true ;
9678: LD_ADDR_VAR 0 2
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// end ;
9686: LD_VAR 0 2
9690: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
9695: PPUSH
9696: PPUSH
// if pos < 1 then
9697: LD_VAR 0 2
9701: PUSH
9702: LD_INT 1
9704: LESS
9705: IFFALSE 9709
// exit ;
9707: GO 10012
// if pos = 1 then
9709: LD_VAR 0 2
9713: PUSH
9714: LD_INT 1
9716: EQUAL
9717: IFFALSE 9750
// result := Replace ( arr , pos [ 1 ] , value ) else
9719: LD_ADDR_VAR 0 4
9723: PUSH
9724: LD_VAR 0 1
9728: PPUSH
9729: LD_VAR 0 2
9733: PUSH
9734: LD_INT 1
9736: ARRAY
9737: PPUSH
9738: LD_VAR 0 3
9742: PPUSH
9743: CALL_OW 1
9747: ST_TO_ADDR
9748: GO 10012
// begin tmp := arr ;
9750: LD_ADDR_VAR 0 6
9754: PUSH
9755: LD_VAR 0 1
9759: ST_TO_ADDR
// s_arr := [ tmp ] ;
9760: LD_ADDR_VAR 0 7
9764: PUSH
9765: LD_VAR 0 6
9769: PUSH
9770: EMPTY
9771: LIST
9772: ST_TO_ADDR
// for i = 1 to pos - 1 do
9773: LD_ADDR_VAR 0 5
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_VAR 0 2
9787: PUSH
9788: LD_INT 1
9790: MINUS
9791: PUSH
9792: FOR_TO
9793: IFFALSE 9838
// begin tmp := tmp [ pos [ i ] ] ;
9795: LD_ADDR_VAR 0 6
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: LD_VAR 0 2
9809: PUSH
9810: LD_VAR 0 5
9814: ARRAY
9815: ARRAY
9816: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9817: LD_ADDR_VAR 0 7
9821: PUSH
9822: LD_VAR 0 7
9826: PUSH
9827: LD_VAR 0 6
9831: PUSH
9832: EMPTY
9833: LIST
9834: ADD
9835: ST_TO_ADDR
// end ;
9836: GO 9792
9838: POP
9839: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9840: LD_ADDR_VAR 0 6
9844: PUSH
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_VAR 0 2
9854: PUSH
9855: LD_VAR 0 2
9859: ARRAY
9860: PPUSH
9861: LD_VAR 0 3
9865: PPUSH
9866: CALL_OW 1
9870: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9871: LD_ADDR_VAR 0 7
9875: PUSH
9876: LD_VAR 0 7
9880: PPUSH
9881: LD_VAR 0 7
9885: PPUSH
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 1
9895: ST_TO_ADDR
// for i = s_arr downto 2 do
9896: LD_ADDR_VAR 0 5
9900: PUSH
9901: DOUBLE
9902: LD_VAR 0 7
9906: INC
9907: ST_TO_ADDR
9908: LD_INT 2
9910: PUSH
9911: FOR_DOWNTO
9912: IFFALSE 9996
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9914: LD_ADDR_VAR 0 6
9918: PUSH
9919: LD_VAR 0 7
9923: PUSH
9924: LD_VAR 0 5
9928: PUSH
9929: LD_INT 1
9931: MINUS
9932: ARRAY
9933: PPUSH
9934: LD_VAR 0 2
9938: PUSH
9939: LD_VAR 0 5
9943: PUSH
9944: LD_INT 1
9946: MINUS
9947: ARRAY
9948: PPUSH
9949: LD_VAR 0 7
9953: PUSH
9954: LD_VAR 0 5
9958: ARRAY
9959: PPUSH
9960: CALL_OW 1
9964: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9965: LD_ADDR_VAR 0 7
9969: PUSH
9970: LD_VAR 0 7
9974: PPUSH
9975: LD_VAR 0 5
9979: PUSH
9980: LD_INT 1
9982: MINUS
9983: PPUSH
9984: LD_VAR 0 6
9988: PPUSH
9989: CALL_OW 1
9993: ST_TO_ADDR
// end ;
9994: GO 9911
9996: POP
9997: POP
// result := s_arr [ 1 ] ;
9998: LD_ADDR_VAR 0 4
10002: PUSH
10003: LD_VAR 0 7
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: ST_TO_ADDR
// end ; end ;
10012: LD_VAR 0 4
10016: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
// if not list then
10021: LD_VAR 0 1
10025: NOT
10026: IFFALSE 10030
// exit ;
10028: GO 10121
// i := list [ pos1 ] ;
10030: LD_ADDR_VAR 0 5
10034: PUSH
10035: LD_VAR 0 1
10039: PUSH
10040: LD_VAR 0 2
10044: ARRAY
10045: ST_TO_ADDR
// if not i then
10046: LD_VAR 0 5
10050: NOT
10051: IFFALSE 10055
// exit ;
10053: GO 10121
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10055: LD_ADDR_VAR 0 1
10059: PUSH
10060: LD_VAR 0 1
10064: PPUSH
10065: LD_VAR 0 2
10069: PPUSH
10070: LD_VAR 0 1
10074: PUSH
10075: LD_VAR 0 3
10079: ARRAY
10080: PPUSH
10081: CALL_OW 1
10085: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10086: LD_ADDR_VAR 0 1
10090: PUSH
10091: LD_VAR 0 1
10095: PPUSH
10096: LD_VAR 0 3
10100: PPUSH
10101: LD_VAR 0 5
10105: PPUSH
10106: CALL_OW 1
10110: ST_TO_ADDR
// result := list ;
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: LD_VAR 0 1
10120: ST_TO_ADDR
// end ;
10121: LD_VAR 0 4
10125: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10126: LD_INT 0
10128: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10129: LD_ADDR_VAR 0 5
10133: PUSH
10134: LD_VAR 0 1
10138: PPUSH
10139: CALL_OW 250
10143: PPUSH
10144: LD_VAR 0 1
10148: PPUSH
10149: CALL_OW 251
10153: PPUSH
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_VAR 0 3
10163: PPUSH
10164: LD_VAR 0 4
10168: PPUSH
10169: CALL 10547 0 5
10173: ST_TO_ADDR
// end ;
10174: LD_VAR 0 5
10178: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10179: LD_INT 0
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// if not list or not unit then
10185: LD_VAR 0 2
10189: NOT
10190: PUSH
10191: LD_VAR 0 1
10195: NOT
10196: OR
10197: IFFALSE 10201
// exit ;
10199: GO 10542
// result := [ ] ;
10201: LD_ADDR_VAR 0 5
10205: PUSH
10206: EMPTY
10207: ST_TO_ADDR
// for i in list do
10208: LD_ADDR_VAR 0 6
10212: PUSH
10213: LD_VAR 0 2
10217: PUSH
10218: FOR_IN
10219: IFFALSE 10437
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10221: LD_ADDR_VAR 0 8
10225: PUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: LD_VAR 0 6
10235: PUSH
10236: LD_INT 1
10238: ARRAY
10239: PPUSH
10240: LD_VAR 0 6
10244: PUSH
10245: LD_INT 2
10247: ARRAY
10248: PPUSH
10249: CALL_OW 297
10253: ST_TO_ADDR
// if not Count ( result ) then
10254: LD_VAR 0 5
10258: PPUSH
10259: CALL 6831 0 1
10263: NOT
10264: IFFALSE 10297
// begin result := Join ( result , [ i , tmp ] ) ;
10266: LD_ADDR_VAR 0 5
10270: PUSH
10271: LD_VAR 0 5
10275: PPUSH
10276: LD_VAR 0 6
10280: PUSH
10281: LD_VAR 0 8
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL 42431 0 2
10294: ST_TO_ADDR
// continue ;
10295: GO 10218
// end ; if result [ result ] [ 2 ] <= tmp then
10297: LD_VAR 0 5
10301: PUSH
10302: LD_VAR 0 5
10306: ARRAY
10307: PUSH
10308: LD_INT 2
10310: ARRAY
10311: PUSH
10312: LD_VAR 0 8
10316: LESSEQUAL
10317: IFFALSE 10350
// result := Join ( result , [ i , tmp ] ) else
10319: LD_ADDR_VAR 0 5
10323: PUSH
10324: LD_VAR 0 5
10328: PPUSH
10329: LD_VAR 0 6
10333: PUSH
10334: LD_VAR 0 8
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL 42431 0 2
10347: ST_TO_ADDR
10348: GO 10435
// begin for j := 1 to Count ( result ) do
10350: LD_ADDR_VAR 0 7
10354: PUSH
10355: DOUBLE
10356: LD_INT 1
10358: DEC
10359: ST_TO_ADDR
10360: LD_VAR 0 5
10364: PPUSH
10365: CALL 6831 0 1
10369: PUSH
10370: FOR_TO
10371: IFFALSE 10433
// begin if tmp < result [ j ] [ 2 ] then
10373: LD_VAR 0 8
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: LD_VAR 0 7
10387: ARRAY
10388: PUSH
10389: LD_INT 2
10391: ARRAY
10392: LESS
10393: IFFALSE 10431
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10395: LD_ADDR_VAR 0 5
10399: PUSH
10400: LD_VAR 0 5
10404: PPUSH
10405: LD_VAR 0 7
10409: PPUSH
10410: LD_VAR 0 6
10414: PUSH
10415: LD_VAR 0 8
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PPUSH
10424: CALL_OW 2
10428: ST_TO_ADDR
// break ;
10429: GO 10433
// end ; end ;
10431: GO 10370
10433: POP
10434: POP
// end ; end ;
10435: GO 10218
10437: POP
10438: POP
// if result and not asc then
10439: LD_VAR 0 5
10443: PUSH
10444: LD_VAR 0 3
10448: NOT
10449: AND
10450: IFFALSE 10467
// result := ReverseArray ( result ) ;
10452: LD_ADDR_VAR 0 5
10456: PUSH
10457: LD_VAR 0 5
10461: PPUSH
10462: CALL 37707 0 1
10466: ST_TO_ADDR
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 8
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// if mode then
10474: LD_VAR 0 4
10478: IFFALSE 10542
// begin for i := 1 to result do
10480: LD_ADDR_VAR 0 6
10484: PUSH
10485: DOUBLE
10486: LD_INT 1
10488: DEC
10489: ST_TO_ADDR
10490: LD_VAR 0 5
10494: PUSH
10495: FOR_TO
10496: IFFALSE 10530
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10498: LD_ADDR_VAR 0 8
10502: PUSH
10503: LD_VAR 0 8
10507: PPUSH
10508: LD_VAR 0 5
10512: PUSH
10513: LD_VAR 0 6
10517: ARRAY
10518: PUSH
10519: LD_INT 1
10521: ARRAY
10522: PPUSH
10523: CALL 42431 0 2
10527: ST_TO_ADDR
10528: GO 10495
10530: POP
10531: POP
// result := tmp ;
10532: LD_ADDR_VAR 0 5
10536: PUSH
10537: LD_VAR 0 8
10541: ST_TO_ADDR
// end ; end ;
10542: LD_VAR 0 5
10546: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10547: LD_INT 0
10549: PPUSH
10550: PPUSH
10551: PPUSH
10552: PPUSH
// if not list then
10553: LD_VAR 0 3
10557: NOT
10558: IFFALSE 10562
// exit ;
10560: GO 10950
// result := [ ] ;
10562: LD_ADDR_VAR 0 6
10566: PUSH
10567: EMPTY
10568: ST_TO_ADDR
// for i in list do
10569: LD_ADDR_VAR 0 7
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: FOR_IN
10580: IFFALSE 10782
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10582: LD_ADDR_VAR 0 9
10586: PUSH
10587: LD_VAR 0 7
10591: PPUSH
10592: LD_VAR 0 1
10596: PPUSH
10597: LD_VAR 0 2
10601: PPUSH
10602: CALL_OW 297
10606: ST_TO_ADDR
// if not result then
10607: LD_VAR 0 6
10611: NOT
10612: IFFALSE 10638
// result := [ [ i , tmp ] ] else
10614: LD_ADDR_VAR 0 6
10618: PUSH
10619: LD_VAR 0 7
10623: PUSH
10624: LD_VAR 0 9
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: EMPTY
10634: LIST
10635: ST_TO_ADDR
10636: GO 10780
// begin if result [ result ] [ 2 ] < tmp then
10638: LD_VAR 0 6
10642: PUSH
10643: LD_VAR 0 6
10647: ARRAY
10648: PUSH
10649: LD_INT 2
10651: ARRAY
10652: PUSH
10653: LD_VAR 0 9
10657: LESS
10658: IFFALSE 10700
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10660: LD_ADDR_VAR 0 6
10664: PUSH
10665: LD_VAR 0 6
10669: PPUSH
10670: LD_VAR 0 6
10674: PUSH
10675: LD_INT 1
10677: PLUS
10678: PPUSH
10679: LD_VAR 0 7
10683: PUSH
10684: LD_VAR 0 9
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 2
10697: ST_TO_ADDR
10698: GO 10780
// for j = 1 to result do
10700: LD_ADDR_VAR 0 8
10704: PUSH
10705: DOUBLE
10706: LD_INT 1
10708: DEC
10709: ST_TO_ADDR
10710: LD_VAR 0 6
10714: PUSH
10715: FOR_TO
10716: IFFALSE 10778
// begin if tmp < result [ j ] [ 2 ] then
10718: LD_VAR 0 9
10722: PUSH
10723: LD_VAR 0 6
10727: PUSH
10728: LD_VAR 0 8
10732: ARRAY
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: LESS
10738: IFFALSE 10776
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10740: LD_ADDR_VAR 0 6
10744: PUSH
10745: LD_VAR 0 6
10749: PPUSH
10750: LD_VAR 0 8
10754: PPUSH
10755: LD_VAR 0 7
10759: PUSH
10760: LD_VAR 0 9
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 2
10773: ST_TO_ADDR
// break ;
10774: GO 10778
// end ; end ;
10776: GO 10715
10778: POP
10779: POP
// end ; end ;
10780: GO 10579
10782: POP
10783: POP
// if result and not asc then
10784: LD_VAR 0 6
10788: PUSH
10789: LD_VAR 0 4
10793: NOT
10794: AND
10795: IFFALSE 10870
// begin tmp := result ;
10797: LD_ADDR_VAR 0 9
10801: PUSH
10802: LD_VAR 0 6
10806: ST_TO_ADDR
// for i = tmp downto 1 do
10807: LD_ADDR_VAR 0 7
10811: PUSH
10812: DOUBLE
10813: LD_VAR 0 9
10817: INC
10818: ST_TO_ADDR
10819: LD_INT 1
10821: PUSH
10822: FOR_DOWNTO
10823: IFFALSE 10868
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10825: LD_ADDR_VAR 0 6
10829: PUSH
10830: LD_VAR 0 6
10834: PPUSH
10835: LD_VAR 0 9
10839: PUSH
10840: LD_VAR 0 7
10844: MINUS
10845: PUSH
10846: LD_INT 1
10848: PLUS
10849: PPUSH
10850: LD_VAR 0 9
10854: PUSH
10855: LD_VAR 0 7
10859: ARRAY
10860: PPUSH
10861: CALL_OW 1
10865: ST_TO_ADDR
10866: GO 10822
10868: POP
10869: POP
// end ; tmp := [ ] ;
10870: LD_ADDR_VAR 0 9
10874: PUSH
10875: EMPTY
10876: ST_TO_ADDR
// if mode then
10877: LD_VAR 0 5
10881: IFFALSE 10950
// begin for i = 1 to result do
10883: LD_ADDR_VAR 0 7
10887: PUSH
10888: DOUBLE
10889: LD_INT 1
10891: DEC
10892: ST_TO_ADDR
10893: LD_VAR 0 6
10897: PUSH
10898: FOR_TO
10899: IFFALSE 10938
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10901: LD_ADDR_VAR 0 9
10905: PUSH
10906: LD_VAR 0 9
10910: PPUSH
10911: LD_VAR 0 7
10915: PPUSH
10916: LD_VAR 0 6
10920: PUSH
10921: LD_VAR 0 7
10925: ARRAY
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: CALL_OW 1
10935: ST_TO_ADDR
10936: GO 10898
10938: POP
10939: POP
// result := tmp ;
10940: LD_ADDR_VAR 0 6
10944: PUSH
10945: LD_VAR 0 9
10949: ST_TO_ADDR
// end ; end ;
10950: LD_VAR 0 6
10954: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10955: LD_INT 0
10957: PPUSH
10958: PPUSH
10959: PPUSH
10960: PPUSH
10961: PPUSH
10962: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10963: LD_ADDR_VAR 0 5
10967: PUSH
10968: LD_INT 0
10970: PUSH
10971: LD_INT 0
10973: PUSH
10974: LD_INT 0
10976: PUSH
10977: EMPTY
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: ST_TO_ADDR
// if not x or not y then
10985: LD_VAR 0 2
10989: NOT
10990: PUSH
10991: LD_VAR 0 3
10995: NOT
10996: OR
10997: IFFALSE 11001
// exit ;
10999: GO 12651
// if not range then
11001: LD_VAR 0 4
11005: NOT
11006: IFFALSE 11016
// range := 10 ;
11008: LD_ADDR_VAR 0 4
11012: PUSH
11013: LD_INT 10
11015: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11016: LD_ADDR_VAR 0 8
11020: PUSH
11021: LD_INT 81
11023: PUSH
11024: LD_VAR 0 1
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 92
11035: PUSH
11036: LD_VAR 0 2
11040: PUSH
11041: LD_VAR 0 3
11045: PUSH
11046: LD_VAR 0 4
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: LD_INT 21
11062: PUSH
11063: LD_INT 3
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: ST_TO_ADDR
// if not tmp then
11084: LD_VAR 0 8
11088: NOT
11089: IFFALSE 11093
// exit ;
11091: GO 12651
// for i in tmp do
11093: LD_ADDR_VAR 0 6
11097: PUSH
11098: LD_VAR 0 8
11102: PUSH
11103: FOR_IN
11104: IFFALSE 12626
// begin points := [ 0 , 0 , 0 ] ;
11106: LD_ADDR_VAR 0 9
11110: PUSH
11111: LD_INT 0
11113: PUSH
11114: LD_INT 0
11116: PUSH
11117: LD_INT 0
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: LIST
11124: ST_TO_ADDR
// bpoints := 1 ;
11125: LD_ADDR_VAR 0 10
11129: PUSH
11130: LD_INT 1
11132: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11133: LD_VAR 0 6
11137: PPUSH
11138: CALL_OW 247
11142: PUSH
11143: LD_INT 1
11145: DOUBLE
11146: EQUAL
11147: IFTRUE 11151
11149: GO 11729
11151: POP
// begin if GetClass ( i ) = 1 then
11152: LD_VAR 0 6
11156: PPUSH
11157: CALL_OW 257
11161: PUSH
11162: LD_INT 1
11164: EQUAL
11165: IFFALSE 11186
// points := [ 10 , 5 , 3 ] ;
11167: LD_ADDR_VAR 0 9
11171: PUSH
11172: LD_INT 10
11174: PUSH
11175: LD_INT 5
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11186: LD_VAR 0 6
11190: PPUSH
11191: CALL_OW 257
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: LD_INT 3
11201: PUSH
11202: LD_INT 4
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: IN
11210: IFFALSE 11231
// points := [ 3 , 2 , 1 ] ;
11212: LD_ADDR_VAR 0 9
11216: PUSH
11217: LD_INT 3
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11231: LD_VAR 0 6
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: IFFALSE 11265
// points := [ 130 , 5 , 2 ] ;
11246: LD_ADDR_VAR 0 9
11250: PUSH
11251: LD_INT 130
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11265: LD_VAR 0 6
11269: PPUSH
11270: CALL_OW 257
11274: PUSH
11275: LD_INT 8
11277: EQUAL
11278: IFFALSE 11299
// points := [ 35 , 35 , 30 ] ;
11280: LD_ADDR_VAR 0 9
11284: PUSH
11285: LD_INT 35
11287: PUSH
11288: LD_INT 35
11290: PUSH
11291: LD_INT 30
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11299: LD_VAR 0 6
11303: PPUSH
11304: CALL_OW 257
11308: PUSH
11309: LD_INT 9
11311: EQUAL
11312: IFFALSE 11333
// points := [ 20 , 55 , 40 ] ;
11314: LD_ADDR_VAR 0 9
11318: PUSH
11319: LD_INT 20
11321: PUSH
11322: LD_INT 55
11324: PUSH
11325: LD_INT 40
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11333: LD_VAR 0 6
11337: PPUSH
11338: CALL_OW 257
11342: PUSH
11343: LD_INT 12
11345: PUSH
11346: LD_INT 16
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: IN
11353: IFFALSE 11374
// points := [ 5 , 3 , 2 ] ;
11355: LD_ADDR_VAR 0 9
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 3
11365: PUSH
11366: LD_INT 2
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11374: LD_VAR 0 6
11378: PPUSH
11379: CALL_OW 257
11383: PUSH
11384: LD_INT 17
11386: EQUAL
11387: IFFALSE 11408
// points := [ 100 , 50 , 75 ] ;
11389: LD_ADDR_VAR 0 9
11393: PUSH
11394: LD_INT 100
11396: PUSH
11397: LD_INT 50
11399: PUSH
11400: LD_INT 75
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11408: LD_VAR 0 6
11412: PPUSH
11413: CALL_OW 257
11417: PUSH
11418: LD_INT 15
11420: EQUAL
11421: IFFALSE 11442
// points := [ 10 , 5 , 3 ] ;
11423: LD_ADDR_VAR 0 9
11427: PUSH
11428: LD_INT 10
11430: PUSH
11431: LD_INT 5
11433: PUSH
11434: LD_INT 3
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11442: LD_VAR 0 6
11446: PPUSH
11447: CALL_OW 257
11451: PUSH
11452: LD_INT 14
11454: EQUAL
11455: IFFALSE 11476
// points := [ 10 , 0 , 0 ] ;
11457: LD_ADDR_VAR 0 9
11461: PUSH
11462: LD_INT 10
11464: PUSH
11465: LD_INT 0
11467: PUSH
11468: LD_INT 0
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11476: LD_VAR 0 6
11480: PPUSH
11481: CALL_OW 257
11485: PUSH
11486: LD_INT 11
11488: EQUAL
11489: IFFALSE 11510
// points := [ 30 , 10 , 5 ] ;
11491: LD_ADDR_VAR 0 9
11495: PUSH
11496: LD_INT 30
11498: PUSH
11499: LD_INT 10
11501: PUSH
11502: LD_INT 5
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11510: LD_VAR 0 1
11514: PPUSH
11515: LD_INT 5
11517: PPUSH
11518: CALL_OW 321
11522: PUSH
11523: LD_INT 2
11525: EQUAL
11526: IFFALSE 11543
// bpoints := bpoints * 1.8 ;
11528: LD_ADDR_VAR 0 10
11532: PUSH
11533: LD_VAR 0 10
11537: PUSH
11538: LD_REAL  1.80000000000000E+0000
11541: MUL
11542: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11543: LD_VAR 0 6
11547: PPUSH
11548: CALL_OW 257
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 3
11561: PUSH
11562: LD_INT 4
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: IN
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: LD_INT 51
11579: PPUSH
11580: CALL_OW 321
11584: PUSH
11585: LD_INT 2
11587: EQUAL
11588: AND
11589: IFFALSE 11606
// bpoints := bpoints * 1.2 ;
11591: LD_ADDR_VAR 0 10
11595: PUSH
11596: LD_VAR 0 10
11600: PUSH
11601: LD_REAL  1.20000000000000E+0000
11604: MUL
11605: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11606: LD_VAR 0 6
11610: PPUSH
11611: CALL_OW 257
11615: PUSH
11616: LD_INT 5
11618: PUSH
11619: LD_INT 7
11621: PUSH
11622: LD_INT 9
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: LIST
11629: IN
11630: PUSH
11631: LD_VAR 0 1
11635: PPUSH
11636: LD_INT 52
11638: PPUSH
11639: CALL_OW 321
11643: PUSH
11644: LD_INT 2
11646: EQUAL
11647: AND
11648: IFFALSE 11665
// bpoints := bpoints * 1.5 ;
11650: LD_ADDR_VAR 0 10
11654: PUSH
11655: LD_VAR 0 10
11659: PUSH
11660: LD_REAL  1.50000000000000E+0000
11663: MUL
11664: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_INT 66
11672: PPUSH
11673: CALL_OW 321
11677: PUSH
11678: LD_INT 2
11680: EQUAL
11681: IFFALSE 11698
// bpoints := bpoints * 1.1 ;
11683: LD_ADDR_VAR 0 10
11687: PUSH
11688: LD_VAR 0 10
11692: PUSH
11693: LD_REAL  1.10000000000000E+0000
11696: MUL
11697: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11698: LD_ADDR_VAR 0 10
11702: PUSH
11703: LD_VAR 0 10
11707: PUSH
11708: LD_VAR 0 6
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 259
11720: PUSH
11721: LD_REAL  1.15000000000000E+0000
11724: MUL
11725: MUL
11726: ST_TO_ADDR
// end ; unit_vehicle :
11727: GO 12555
11729: LD_INT 2
11731: DOUBLE
11732: EQUAL
11733: IFTRUE 11737
11735: GO 12543
11737: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11738: LD_VAR 0 6
11742: PPUSH
11743: CALL_OW 264
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 42
11753: PUSH
11754: LD_INT 24
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: IN
11762: IFFALSE 11783
// points := [ 25 , 5 , 3 ] ;
11764: LD_ADDR_VAR 0 9
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 5
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11783: LD_VAR 0 6
11787: PPUSH
11788: CALL_OW 264
11792: PUSH
11793: LD_INT 4
11795: PUSH
11796: LD_INT 43
11798: PUSH
11799: LD_INT 25
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: IN
11807: IFFALSE 11828
// points := [ 40 , 15 , 5 ] ;
11809: LD_ADDR_VAR 0 9
11813: PUSH
11814: LD_INT 40
11816: PUSH
11817: LD_INT 15
11819: PUSH
11820: LD_INT 5
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11828: LD_VAR 0 6
11832: PPUSH
11833: CALL_OW 264
11837: PUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 23
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: IN
11848: IFFALSE 11869
// points := [ 7 , 25 , 8 ] ;
11850: LD_ADDR_VAR 0 9
11854: PUSH
11855: LD_INT 7
11857: PUSH
11858: LD_INT 25
11860: PUSH
11861: LD_INT 8
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11869: LD_VAR 0 6
11873: PPUSH
11874: CALL_OW 264
11878: PUSH
11879: LD_INT 5
11881: PUSH
11882: LD_INT 27
11884: PUSH
11885: LD_INT 44
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: IN
11893: IFFALSE 11914
// points := [ 14 , 50 , 16 ] ;
11895: LD_ADDR_VAR 0 9
11899: PUSH
11900: LD_INT 14
11902: PUSH
11903: LD_INT 50
11905: PUSH
11906: LD_INT 16
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11914: LD_VAR 0 6
11918: PPUSH
11919: CALL_OW 264
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 46
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: IN
11934: IFFALSE 11955
// points := [ 32 , 120 , 70 ] ;
11936: LD_ADDR_VAR 0 9
11940: PUSH
11941: LD_INT 32
11943: PUSH
11944: LD_INT 120
11946: PUSH
11947: LD_INT 70
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11955: LD_VAR 0 6
11959: PPUSH
11960: CALL_OW 264
11964: PUSH
11965: LD_INT 7
11967: PUSH
11968: LD_INT 28
11970: PUSH
11971: LD_INT 45
11973: PUSH
11974: LD_INT 92
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: IN
11983: IFFALSE 12004
// points := [ 35 , 20 , 45 ] ;
11985: LD_ADDR_VAR 0 9
11989: PUSH
11990: LD_INT 35
11992: PUSH
11993: LD_INT 20
11995: PUSH
11996: LD_INT 45
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12004: LD_VAR 0 6
12008: PPUSH
12009: CALL_OW 264
12013: PUSH
12014: LD_INT 47
12016: PUSH
12017: EMPTY
12018: LIST
12019: IN
12020: IFFALSE 12041
// points := [ 67 , 45 , 75 ] ;
12022: LD_ADDR_VAR 0 9
12026: PUSH
12027: LD_INT 67
12029: PUSH
12030: LD_INT 45
12032: PUSH
12033: LD_INT 75
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12041: LD_VAR 0 6
12045: PPUSH
12046: CALL_OW 264
12050: PUSH
12051: LD_INT 26
12053: PUSH
12054: EMPTY
12055: LIST
12056: IN
12057: IFFALSE 12078
// points := [ 120 , 30 , 80 ] ;
12059: LD_ADDR_VAR 0 9
12063: PUSH
12064: LD_INT 120
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 80
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12078: LD_VAR 0 6
12082: PPUSH
12083: CALL_OW 264
12087: PUSH
12088: LD_INT 22
12090: PUSH
12091: EMPTY
12092: LIST
12093: IN
12094: IFFALSE 12115
// points := [ 40 , 1 , 1 ] ;
12096: LD_ADDR_VAR 0 9
12100: PUSH
12101: LD_INT 40
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12115: LD_VAR 0 6
12119: PPUSH
12120: CALL_OW 264
12124: PUSH
12125: LD_INT 29
12127: PUSH
12128: EMPTY
12129: LIST
12130: IN
12131: IFFALSE 12152
// points := [ 70 , 200 , 400 ] ;
12133: LD_ADDR_VAR 0 9
12137: PUSH
12138: LD_INT 70
12140: PUSH
12141: LD_INT 200
12143: PUSH
12144: LD_INT 400
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12152: LD_VAR 0 6
12156: PPUSH
12157: CALL_OW 264
12161: PUSH
12162: LD_INT 14
12164: PUSH
12165: LD_INT 53
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: IN
12172: IFFALSE 12193
// points := [ 40 , 10 , 20 ] ;
12174: LD_ADDR_VAR 0 9
12178: PUSH
12179: LD_INT 40
12181: PUSH
12182: LD_INT 10
12184: PUSH
12185: LD_INT 20
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12193: LD_VAR 0 6
12197: PPUSH
12198: CALL_OW 264
12202: PUSH
12203: LD_INT 9
12205: PUSH
12206: EMPTY
12207: LIST
12208: IN
12209: IFFALSE 12230
// points := [ 5 , 70 , 20 ] ;
12211: LD_ADDR_VAR 0 9
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: LD_INT 70
12221: PUSH
12222: LD_INT 20
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 264
12239: PUSH
12240: LD_INT 10
12242: PUSH
12243: EMPTY
12244: LIST
12245: IN
12246: IFFALSE 12267
// points := [ 35 , 110 , 70 ] ;
12248: LD_ADDR_VAR 0 9
12252: PUSH
12253: LD_INT 35
12255: PUSH
12256: LD_INT 110
12258: PUSH
12259: LD_INT 70
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12267: LD_VAR 0 6
12271: PPUSH
12272: CALL_OW 265
12276: PUSH
12277: LD_INT 25
12279: EQUAL
12280: IFFALSE 12301
// points := [ 80 , 65 , 100 ] ;
12282: LD_ADDR_VAR 0 9
12286: PUSH
12287: LD_INT 80
12289: PUSH
12290: LD_INT 65
12292: PUSH
12293: LD_INT 100
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12301: LD_VAR 0 6
12305: PPUSH
12306: CALL_OW 263
12310: PUSH
12311: LD_INT 1
12313: EQUAL
12314: IFFALSE 12349
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12316: LD_ADDR_VAR 0 10
12320: PUSH
12321: LD_VAR 0 10
12325: PUSH
12326: LD_VAR 0 6
12330: PPUSH
12331: CALL_OW 311
12335: PPUSH
12336: LD_INT 3
12338: PPUSH
12339: CALL_OW 259
12343: PUSH
12344: LD_INT 4
12346: MUL
12347: MUL
12348: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12349: LD_VAR 0 6
12353: PPUSH
12354: CALL_OW 263
12358: PUSH
12359: LD_INT 2
12361: EQUAL
12362: IFFALSE 12413
// begin j := IsControledBy ( i ) ;
12364: LD_ADDR_VAR 0 7
12368: PUSH
12369: LD_VAR 0 6
12373: PPUSH
12374: CALL_OW 312
12378: ST_TO_ADDR
// if j then
12379: LD_VAR 0 7
12383: IFFALSE 12413
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12385: LD_ADDR_VAR 0 10
12389: PUSH
12390: LD_VAR 0 10
12394: PUSH
12395: LD_VAR 0 7
12399: PPUSH
12400: LD_INT 3
12402: PPUSH
12403: CALL_OW 259
12407: PUSH
12408: LD_INT 3
12410: MUL
12411: MUL
12412: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12413: LD_VAR 0 6
12417: PPUSH
12418: CALL_OW 264
12422: PUSH
12423: LD_INT 5
12425: PUSH
12426: LD_INT 6
12428: PUSH
12429: LD_INT 46
12431: PUSH
12432: LD_INT 44
12434: PUSH
12435: LD_INT 47
12437: PUSH
12438: LD_INT 45
12440: PUSH
12441: LD_INT 28
12443: PUSH
12444: LD_INT 7
12446: PUSH
12447: LD_INT 27
12449: PUSH
12450: LD_INT 29
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: IN
12465: PUSH
12466: LD_VAR 0 1
12470: PPUSH
12471: LD_INT 52
12473: PPUSH
12474: CALL_OW 321
12478: PUSH
12479: LD_INT 2
12481: EQUAL
12482: AND
12483: IFFALSE 12500
// bpoints := bpoints * 1.2 ;
12485: LD_ADDR_VAR 0 10
12489: PUSH
12490: LD_VAR 0 10
12494: PUSH
12495: LD_REAL  1.20000000000000E+0000
12498: MUL
12499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12500: LD_VAR 0 6
12504: PPUSH
12505: CALL_OW 264
12509: PUSH
12510: LD_INT 6
12512: PUSH
12513: LD_INT 46
12515: PUSH
12516: LD_INT 47
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: IN
12524: IFFALSE 12541
// bpoints := bpoints * 1.2 ;
12526: LD_ADDR_VAR 0 10
12530: PUSH
12531: LD_VAR 0 10
12535: PUSH
12536: LD_REAL  1.20000000000000E+0000
12539: MUL
12540: ST_TO_ADDR
// end ; unit_building :
12541: GO 12555
12543: LD_INT 3
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12554
12551: POP
// ; end ;
12552: GO 12555
12554: POP
// for j = 1 to 3 do
12555: LD_ADDR_VAR 0 7
12559: PUSH
12560: DOUBLE
12561: LD_INT 1
12563: DEC
12564: ST_TO_ADDR
12565: LD_INT 3
12567: PUSH
12568: FOR_TO
12569: IFFALSE 12622
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12571: LD_ADDR_VAR 0 5
12575: PUSH
12576: LD_VAR 0 5
12580: PPUSH
12581: LD_VAR 0 7
12585: PPUSH
12586: LD_VAR 0 5
12590: PUSH
12591: LD_VAR 0 7
12595: ARRAY
12596: PUSH
12597: LD_VAR 0 9
12601: PUSH
12602: LD_VAR 0 7
12606: ARRAY
12607: PUSH
12608: LD_VAR 0 10
12612: MUL
12613: PLUS
12614: PPUSH
12615: CALL_OW 1
12619: ST_TO_ADDR
12620: GO 12568
12622: POP
12623: POP
// end ;
12624: GO 11103
12626: POP
12627: POP
// result := Replace ( result , 4 , tmp ) ;
12628: LD_ADDR_VAR 0 5
12632: PUSH
12633: LD_VAR 0 5
12637: PPUSH
12638: LD_INT 4
12640: PPUSH
12641: LD_VAR 0 8
12645: PPUSH
12646: CALL_OW 1
12650: ST_TO_ADDR
// end ;
12651: LD_VAR 0 5
12655: RET
// export function DangerAtRange ( unit , range ) ; begin
12656: LD_INT 0
12658: PPUSH
// if not unit then
12659: LD_VAR 0 1
12663: NOT
12664: IFFALSE 12668
// exit ;
12666: GO 12713
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12668: LD_ADDR_VAR 0 3
12672: PUSH
12673: LD_VAR 0 1
12677: PPUSH
12678: CALL_OW 255
12682: PPUSH
12683: LD_VAR 0 1
12687: PPUSH
12688: CALL_OW 250
12692: PPUSH
12693: LD_VAR 0 1
12697: PPUSH
12698: CALL_OW 251
12702: PPUSH
12703: LD_VAR 0 2
12707: PPUSH
12708: CALL 10955 0 4
12712: ST_TO_ADDR
// end ;
12713: LD_VAR 0 3
12717: RET
// export function DangerInArea ( side , area ) ; begin
12718: LD_INT 0
12720: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12721: LD_ADDR_VAR 0 3
12725: PUSH
12726: LD_VAR 0 2
12730: PPUSH
12731: LD_INT 81
12733: PUSH
12734: LD_VAR 0 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 70
12747: ST_TO_ADDR
// end ;
12748: LD_VAR 0 3
12752: RET
// export function IsExtension ( b ) ; begin
12753: LD_INT 0
12755: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: LD_VAR 0 1
12765: PUSH
12766: LD_INT 23
12768: PUSH
12769: LD_INT 20
12771: PUSH
12772: LD_INT 22
12774: PUSH
12775: LD_INT 17
12777: PUSH
12778: LD_INT 24
12780: PUSH
12781: LD_INT 21
12783: PUSH
12784: LD_INT 19
12786: PUSH
12787: LD_INT 16
12789: PUSH
12790: LD_INT 25
12792: PUSH
12793: LD_INT 18
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: IN
12808: ST_TO_ADDR
// end ;
12809: LD_VAR 0 2
12813: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12814: LD_INT 0
12816: PPUSH
12817: PPUSH
12818: PPUSH
// result := [ ] ;
12819: LD_ADDR_VAR 0 4
12823: PUSH
12824: EMPTY
12825: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12826: LD_ADDR_VAR 0 5
12830: PUSH
12831: LD_VAR 0 2
12835: PPUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 70
12850: ST_TO_ADDR
// if not tmp then
12851: LD_VAR 0 5
12855: NOT
12856: IFFALSE 12860
// exit ;
12858: GO 12924
// if checkLink then
12860: LD_VAR 0 3
12864: IFFALSE 12914
// begin for i in tmp do
12866: LD_ADDR_VAR 0 6
12870: PUSH
12871: LD_VAR 0 5
12875: PUSH
12876: FOR_IN
12877: IFFALSE 12912
// if GetBase ( i ) <> base then
12879: LD_VAR 0 6
12883: PPUSH
12884: CALL_OW 274
12888: PUSH
12889: LD_VAR 0 1
12893: NONEQUAL
12894: IFFALSE 12910
// ComLinkToBase ( base , i ) ;
12896: LD_VAR 0 1
12900: PPUSH
12901: LD_VAR 0 6
12905: PPUSH
12906: CALL_OW 169
12910: GO 12876
12912: POP
12913: POP
// end ; result := tmp ;
12914: LD_ADDR_VAR 0 4
12918: PUSH
12919: LD_VAR 0 5
12923: ST_TO_ADDR
// end ;
12924: LD_VAR 0 4
12928: RET
// export function ComComplete ( units , b ) ; var i ; begin
12929: LD_INT 0
12931: PPUSH
12932: PPUSH
// if not units then
12933: LD_VAR 0 1
12937: NOT
12938: IFFALSE 12942
// exit ;
12940: GO 13032
// for i in units do
12942: LD_ADDR_VAR 0 4
12946: PUSH
12947: LD_VAR 0 1
12951: PUSH
12952: FOR_IN
12953: IFFALSE 13030
// if BuildingStatus ( b ) = bs_build then
12955: LD_VAR 0 2
12959: PPUSH
12960: CALL_OW 461
12964: PUSH
12965: LD_INT 1
12967: EQUAL
12968: IFFALSE 13028
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12970: LD_VAR 0 4
12974: PPUSH
12975: LD_STRING h
12977: PUSH
12978: LD_VAR 0 2
12982: PPUSH
12983: CALL_OW 250
12987: PUSH
12988: LD_VAR 0 2
12992: PPUSH
12993: CALL_OW 251
12997: PUSH
12998: LD_VAR 0 2
13002: PUSH
13003: LD_INT 0
13005: PUSH
13006: LD_INT 0
13008: PUSH
13009: LD_INT 0
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: PPUSH
13024: CALL_OW 446
13028: GO 12952
13030: POP
13031: POP
// end ;
13032: LD_VAR 0 3
13036: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13045: LD_VAR 0 1
13049: NOT
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 263
13060: PUSH
13061: LD_INT 2
13063: NONEQUAL
13064: OR
13065: IFFALSE 13069
// exit ;
13067: GO 13385
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13069: LD_ADDR_VAR 0 6
13073: PUSH
13074: LD_INT 22
13076: PUSH
13077: LD_VAR 0 1
13081: PPUSH
13082: CALL_OW 255
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 36
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 34
13106: PUSH
13107: LD_INT 31
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ST_TO_ADDR
// if not tmp then
13128: LD_VAR 0 6
13132: NOT
13133: IFFALSE 13137
// exit ;
13135: GO 13385
// result := [ ] ;
13137: LD_ADDR_VAR 0 2
13141: PUSH
13142: EMPTY
13143: ST_TO_ADDR
// for i in tmp do
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: LD_VAR 0 6
13153: PUSH
13154: FOR_IN
13155: IFFALSE 13226
// begin t := UnitsInside ( i ) ;
13157: LD_ADDR_VAR 0 4
13161: PUSH
13162: LD_VAR 0 3
13166: PPUSH
13167: CALL_OW 313
13171: ST_TO_ADDR
// if t then
13172: LD_VAR 0 4
13176: IFFALSE 13224
// for j in t do
13178: LD_ADDR_VAR 0 7
13182: PUSH
13183: LD_VAR 0 4
13187: PUSH
13188: FOR_IN
13189: IFFALSE 13222
// result := Replace ( result , result + 1 , j ) ;
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_VAR 0 2
13200: PPUSH
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 1
13208: PLUS
13209: PPUSH
13210: LD_VAR 0 7
13214: PPUSH
13215: CALL_OW 1
13219: ST_TO_ADDR
13220: GO 13188
13222: POP
13223: POP
// end ;
13224: GO 13154
13226: POP
13227: POP
// if not result then
13228: LD_VAR 0 2
13232: NOT
13233: IFFALSE 13237
// exit ;
13235: GO 13385
// mech := result [ 1 ] ;
13237: LD_ADDR_VAR 0 5
13241: PUSH
13242: LD_VAR 0 2
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: ST_TO_ADDR
// if result > 1 then
13251: LD_VAR 0 2
13255: PUSH
13256: LD_INT 1
13258: GREATER
13259: IFFALSE 13371
// begin for i = 2 to result do
13261: LD_ADDR_VAR 0 3
13265: PUSH
13266: DOUBLE
13267: LD_INT 2
13269: DEC
13270: ST_TO_ADDR
13271: LD_VAR 0 2
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13369
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13279: LD_ADDR_VAR 0 4
13283: PUSH
13284: LD_VAR 0 2
13288: PUSH
13289: LD_VAR 0 3
13293: ARRAY
13294: PPUSH
13295: LD_INT 3
13297: PPUSH
13298: CALL_OW 259
13302: PUSH
13303: LD_VAR 0 2
13307: PUSH
13308: LD_VAR 0 3
13312: ARRAY
13313: PPUSH
13314: CALL_OW 432
13318: MINUS
13319: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13320: LD_VAR 0 4
13324: PUSH
13325: LD_VAR 0 5
13329: PPUSH
13330: LD_INT 3
13332: PPUSH
13333: CALL_OW 259
13337: PUSH
13338: LD_VAR 0 5
13342: PPUSH
13343: CALL_OW 432
13347: MINUS
13348: GREATEREQUAL
13349: IFFALSE 13367
// mech := result [ i ] ;
13351: LD_ADDR_VAR 0 5
13355: PUSH
13356: LD_VAR 0 2
13360: PUSH
13361: LD_VAR 0 3
13365: ARRAY
13366: ST_TO_ADDR
// end ;
13367: GO 13276
13369: POP
13370: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13371: LD_VAR 0 1
13375: PPUSH
13376: LD_VAR 0 5
13380: PPUSH
13381: CALL_OW 135
// end ;
13385: LD_VAR 0 2
13389: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13390: LD_INT 0
13392: PPUSH
13393: PPUSH
13394: PPUSH
13395: PPUSH
13396: PPUSH
13397: PPUSH
13398: PPUSH
13399: PPUSH
13400: PPUSH
13401: PPUSH
13402: PPUSH
13403: PPUSH
13404: PPUSH
// result := [ ] ;
13405: LD_ADDR_VAR 0 7
13409: PUSH
13410: EMPTY
13411: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13412: LD_VAR 0 1
13416: PPUSH
13417: CALL_OW 266
13421: PUSH
13422: LD_INT 0
13424: PUSH
13425: LD_INT 1
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: IN
13432: NOT
13433: IFFALSE 13437
// exit ;
13435: GO 15071
// if name then
13437: LD_VAR 0 3
13441: IFFALSE 13457
// SetBName ( base_dep , name ) ;
13443: LD_VAR 0 1
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: CALL_OW 500
// base := GetBase ( base_dep ) ;
13457: LD_ADDR_VAR 0 15
13461: PUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 274
13471: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13472: LD_ADDR_VAR 0 16
13476: PUSH
13477: LD_VAR 0 1
13481: PPUSH
13482: CALL_OW 255
13486: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13487: LD_ADDR_VAR 0 17
13491: PUSH
13492: LD_VAR 0 1
13496: PPUSH
13497: CALL_OW 248
13501: ST_TO_ADDR
// if sources then
13502: LD_VAR 0 5
13506: IFFALSE 13553
// for i = 1 to 3 do
13508: LD_ADDR_VAR 0 8
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_INT 3
13520: PUSH
13521: FOR_TO
13522: IFFALSE 13551
// AddResourceType ( base , i , sources [ i ] ) ;
13524: LD_VAR 0 15
13528: PPUSH
13529: LD_VAR 0 8
13533: PPUSH
13534: LD_VAR 0 5
13538: PUSH
13539: LD_VAR 0 8
13543: ARRAY
13544: PPUSH
13545: CALL_OW 276
13549: GO 13521
13551: POP
13552: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13553: LD_ADDR_VAR 0 18
13557: PUSH
13558: LD_VAR 0 15
13562: PPUSH
13563: LD_VAR 0 2
13567: PPUSH
13568: LD_INT 1
13570: PPUSH
13571: CALL 12814 0 3
13575: ST_TO_ADDR
// InitHc ;
13576: CALL_OW 19
// InitUc ;
13580: CALL_OW 18
// uc_side := side ;
13584: LD_ADDR_OWVAR 20
13588: PUSH
13589: LD_VAR 0 16
13593: ST_TO_ADDR
// uc_nation := nation ;
13594: LD_ADDR_OWVAR 21
13598: PUSH
13599: LD_VAR 0 17
13603: ST_TO_ADDR
// if buildings then
13604: LD_VAR 0 18
13608: IFFALSE 14930
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13610: LD_ADDR_VAR 0 19
13614: PUSH
13615: LD_VAR 0 18
13619: PPUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 29
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 30
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 72
13652: ST_TO_ADDR
// if tmp then
13653: LD_VAR 0 19
13657: IFFALSE 13705
// for i in tmp do
13659: LD_ADDR_VAR 0 8
13663: PUSH
13664: LD_VAR 0 19
13668: PUSH
13669: FOR_IN
13670: IFFALSE 13703
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13672: LD_VAR 0 8
13676: PPUSH
13677: CALL_OW 250
13681: PPUSH
13682: LD_VAR 0 8
13686: PPUSH
13687: CALL_OW 251
13691: PPUSH
13692: LD_VAR 0 16
13696: PPUSH
13697: CALL_OW 441
13701: GO 13669
13703: POP
13704: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13705: LD_VAR 0 18
13709: PPUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 32
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 30
13725: PUSH
13726: LD_INT 33
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 72
13742: IFFALSE 13830
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13744: LD_ADDR_VAR 0 8
13748: PUSH
13749: LD_VAR 0 18
13753: PPUSH
13754: LD_INT 2
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_INT 32
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 30
13769: PUSH
13770: LD_INT 33
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 72
13786: PUSH
13787: FOR_IN
13788: IFFALSE 13828
// begin if not GetBWeapon ( i ) then
13790: LD_VAR 0 8
13794: PPUSH
13795: CALL_OW 269
13799: NOT
13800: IFFALSE 13826
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13802: LD_VAR 0 8
13806: PPUSH
13807: LD_VAR 0 8
13811: PPUSH
13812: LD_VAR 0 2
13816: PPUSH
13817: CALL 15076 0 2
13821: PPUSH
13822: CALL_OW 431
// end ;
13826: GO 13787
13828: POP
13829: POP
// end ; for i = 1 to personel do
13830: LD_ADDR_VAR 0 8
13834: PUSH
13835: DOUBLE
13836: LD_INT 1
13838: DEC
13839: ST_TO_ADDR
13840: LD_VAR 0 6
13844: PUSH
13845: FOR_TO
13846: IFFALSE 14910
// begin if i > 4 then
13848: LD_VAR 0 8
13852: PUSH
13853: LD_INT 4
13855: GREATER
13856: IFFALSE 13860
// break ;
13858: GO 14910
// case i of 1 :
13860: LD_VAR 0 8
13864: PUSH
13865: LD_INT 1
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 13953
13873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13874: LD_ADDR_VAR 0 12
13878: PUSH
13879: LD_VAR 0 18
13883: PPUSH
13884: LD_INT 22
13886: PUSH
13887: LD_VAR 0 16
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 58
13898: PUSH
13899: EMPTY
13900: LIST
13901: PUSH
13902: LD_INT 2
13904: PUSH
13905: LD_INT 30
13907: PUSH
13908: LD_INT 32
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 30
13917: PUSH
13918: LD_INT 4
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 30
13927: PUSH
13928: LD_INT 5
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 72
13950: ST_TO_ADDR
13951: GO 14175
13953: LD_INT 2
13955: DOUBLE
13956: EQUAL
13957: IFTRUE 13961
13959: GO 14023
13961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13962: LD_ADDR_VAR 0 12
13966: PUSH
13967: LD_VAR 0 18
13971: PPUSH
13972: LD_INT 22
13974: PUSH
13975: LD_VAR 0 16
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: LD_INT 30
13989: PUSH
13990: LD_INT 0
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 30
13999: PUSH
14000: LD_INT 1
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PPUSH
14016: CALL_OW 72
14020: ST_TO_ADDR
14021: GO 14175
14023: LD_INT 3
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14093
14031: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14032: LD_ADDR_VAR 0 12
14036: PUSH
14037: LD_VAR 0 18
14041: PPUSH
14042: LD_INT 22
14044: PUSH
14045: LD_VAR 0 16
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: LD_INT 30
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 72
14090: ST_TO_ADDR
14091: GO 14175
14093: LD_INT 4
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14174
14101: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14102: LD_ADDR_VAR 0 12
14106: PUSH
14107: LD_VAR 0 18
14111: PPUSH
14112: LD_INT 22
14114: PUSH
14115: LD_VAR 0 16
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: LD_INT 30
14129: PUSH
14130: LD_INT 6
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 30
14139: PUSH
14140: LD_INT 7
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 30
14149: PUSH
14150: LD_INT 8
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PPUSH
14167: CALL_OW 72
14171: ST_TO_ADDR
14172: GO 14175
14174: POP
// if i = 1 then
14175: LD_VAR 0 8
14179: PUSH
14180: LD_INT 1
14182: EQUAL
14183: IFFALSE 14294
// begin tmp := [ ] ;
14185: LD_ADDR_VAR 0 19
14189: PUSH
14190: EMPTY
14191: ST_TO_ADDR
// for j in f do
14192: LD_ADDR_VAR 0 9
14196: PUSH
14197: LD_VAR 0 12
14201: PUSH
14202: FOR_IN
14203: IFFALSE 14276
// if GetBType ( j ) = b_bunker then
14205: LD_VAR 0 9
14209: PPUSH
14210: CALL_OW 266
14214: PUSH
14215: LD_INT 32
14217: EQUAL
14218: IFFALSE 14245
// tmp := Insert ( tmp , 1 , j ) else
14220: LD_ADDR_VAR 0 19
14224: PUSH
14225: LD_VAR 0 19
14229: PPUSH
14230: LD_INT 1
14232: PPUSH
14233: LD_VAR 0 9
14237: PPUSH
14238: CALL_OW 2
14242: ST_TO_ADDR
14243: GO 14274
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14245: LD_ADDR_VAR 0 19
14249: PUSH
14250: LD_VAR 0 19
14254: PPUSH
14255: LD_VAR 0 19
14259: PUSH
14260: LD_INT 1
14262: PLUS
14263: PPUSH
14264: LD_VAR 0 9
14268: PPUSH
14269: CALL_OW 2
14273: ST_TO_ADDR
14274: GO 14202
14276: POP
14277: POP
// if tmp then
14278: LD_VAR 0 19
14282: IFFALSE 14294
// f := tmp ;
14284: LD_ADDR_VAR 0 12
14288: PUSH
14289: LD_VAR 0 19
14293: ST_TO_ADDR
// end ; x := personel [ i ] ;
14294: LD_ADDR_VAR 0 13
14298: PUSH
14299: LD_VAR 0 6
14303: PUSH
14304: LD_VAR 0 8
14308: ARRAY
14309: ST_TO_ADDR
// if x = - 1 then
14310: LD_VAR 0 13
14314: PUSH
14315: LD_INT 1
14317: NEG
14318: EQUAL
14319: IFFALSE 14528
// begin for j in f do
14321: LD_ADDR_VAR 0 9
14325: PUSH
14326: LD_VAR 0 12
14330: PUSH
14331: FOR_IN
14332: IFFALSE 14524
// repeat InitHc ;
14334: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14338: LD_VAR 0 9
14342: PPUSH
14343: CALL_OW 266
14347: PUSH
14348: LD_INT 5
14350: EQUAL
14351: IFFALSE 14421
// begin if UnitsInside ( j ) < 3 then
14353: LD_VAR 0 9
14357: PPUSH
14358: CALL_OW 313
14362: PUSH
14363: LD_INT 3
14365: LESS
14366: IFFALSE 14402
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14368: LD_INT 0
14370: PPUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: LD_INT 9
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: PUSH
14385: LD_VAR 0 17
14389: ARRAY
14390: PPUSH
14391: LD_VAR 0 4
14395: PPUSH
14396: CALL_OW 380
14400: GO 14419
// PrepareHuman ( false , i , skill ) ;
14402: LD_INT 0
14404: PPUSH
14405: LD_VAR 0 8
14409: PPUSH
14410: LD_VAR 0 4
14414: PPUSH
14415: CALL_OW 380
// end else
14419: GO 14438
// PrepareHuman ( false , i , skill ) ;
14421: LD_INT 0
14423: PPUSH
14424: LD_VAR 0 8
14428: PPUSH
14429: LD_VAR 0 4
14433: PPUSH
14434: CALL_OW 380
// un := CreateHuman ;
14438: LD_ADDR_VAR 0 14
14442: PUSH
14443: CALL_OW 44
14447: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14448: LD_ADDR_VAR 0 7
14452: PUSH
14453: LD_VAR 0 7
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: LD_VAR 0 14
14465: PPUSH
14466: CALL_OW 2
14470: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14471: LD_VAR 0 14
14475: PPUSH
14476: LD_VAR 0 9
14480: PPUSH
14481: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14485: LD_VAR 0 9
14489: PPUSH
14490: CALL_OW 313
14494: PUSH
14495: LD_INT 6
14497: EQUAL
14498: PUSH
14499: LD_VAR 0 9
14503: PPUSH
14504: CALL_OW 266
14508: PUSH
14509: LD_INT 32
14511: PUSH
14512: LD_INT 31
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: IN
14519: OR
14520: IFFALSE 14334
14522: GO 14331
14524: POP
14525: POP
// end else
14526: GO 14908
// for j = 1 to x do
14528: LD_ADDR_VAR 0 9
14532: PUSH
14533: DOUBLE
14534: LD_INT 1
14536: DEC
14537: ST_TO_ADDR
14538: LD_VAR 0 13
14542: PUSH
14543: FOR_TO
14544: IFFALSE 14906
// begin InitHc ;
14546: CALL_OW 19
// if not f then
14550: LD_VAR 0 12
14554: NOT
14555: IFFALSE 14644
// begin PrepareHuman ( false , i , skill ) ;
14557: LD_INT 0
14559: PPUSH
14560: LD_VAR 0 8
14564: PPUSH
14565: LD_VAR 0 4
14569: PPUSH
14570: CALL_OW 380
// un := CreateHuman ;
14574: LD_ADDR_VAR 0 14
14578: PUSH
14579: CALL_OW 44
14583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14584: LD_ADDR_VAR 0 7
14588: PUSH
14589: LD_VAR 0 7
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: LD_VAR 0 14
14601: PPUSH
14602: CALL_OW 2
14606: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14607: LD_VAR 0 14
14611: PPUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 250
14621: PPUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 251
14631: PPUSH
14632: LD_INT 10
14634: PPUSH
14635: LD_INT 0
14637: PPUSH
14638: CALL_OW 50
// continue ;
14642: GO 14543
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14644: LD_VAR 0 12
14648: PUSH
14649: LD_INT 1
14651: ARRAY
14652: PPUSH
14653: CALL_OW 313
14657: PUSH
14658: LD_VAR 0 12
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: PPUSH
14667: CALL_OW 266
14671: PUSH
14672: LD_INT 32
14674: PUSH
14675: LD_INT 31
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: IN
14682: AND
14683: PUSH
14684: LD_VAR 0 12
14688: PUSH
14689: LD_INT 1
14691: ARRAY
14692: PPUSH
14693: CALL_OW 313
14697: PUSH
14698: LD_INT 6
14700: EQUAL
14701: OR
14702: IFFALSE 14722
// f := Delete ( f , 1 ) ;
14704: LD_ADDR_VAR 0 12
14708: PUSH
14709: LD_VAR 0 12
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 3
14721: ST_TO_ADDR
// if not f then
14722: LD_VAR 0 12
14726: NOT
14727: IFFALSE 14745
// begin x := x + 2 ;
14729: LD_ADDR_VAR 0 13
14733: PUSH
14734: LD_VAR 0 13
14738: PUSH
14739: LD_INT 2
14741: PLUS
14742: ST_TO_ADDR
// continue ;
14743: GO 14543
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14745: LD_VAR 0 12
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: PPUSH
14754: CALL_OW 266
14758: PUSH
14759: LD_INT 5
14761: EQUAL
14762: IFFALSE 14836
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14764: LD_VAR 0 12
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: CALL_OW 313
14777: PUSH
14778: LD_INT 3
14780: LESS
14781: IFFALSE 14817
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14783: LD_INT 0
14785: PPUSH
14786: LD_INT 5
14788: PUSH
14789: LD_INT 8
14791: PUSH
14792: LD_INT 9
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: PUSH
14800: LD_VAR 0 17
14804: ARRAY
14805: PPUSH
14806: LD_VAR 0 4
14810: PPUSH
14811: CALL_OW 380
14815: GO 14834
// PrepareHuman ( false , i , skill ) ;
14817: LD_INT 0
14819: PPUSH
14820: LD_VAR 0 8
14824: PPUSH
14825: LD_VAR 0 4
14829: PPUSH
14830: CALL_OW 380
// end else
14834: GO 14853
// PrepareHuman ( false , i , skill ) ;
14836: LD_INT 0
14838: PPUSH
14839: LD_VAR 0 8
14843: PPUSH
14844: LD_VAR 0 4
14848: PPUSH
14849: CALL_OW 380
// un := CreateHuman ;
14853: LD_ADDR_VAR 0 14
14857: PUSH
14858: CALL_OW 44
14862: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14863: LD_ADDR_VAR 0 7
14867: PUSH
14868: LD_VAR 0 7
14872: PPUSH
14873: LD_INT 1
14875: PPUSH
14876: LD_VAR 0 14
14880: PPUSH
14881: CALL_OW 2
14885: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14886: LD_VAR 0 14
14890: PPUSH
14891: LD_VAR 0 12
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 52
// end ;
14904: GO 14543
14906: POP
14907: POP
// end ;
14908: GO 13845
14910: POP
14911: POP
// result := result ^ buildings ;
14912: LD_ADDR_VAR 0 7
14916: PUSH
14917: LD_VAR 0 7
14921: PUSH
14922: LD_VAR 0 18
14926: ADD
14927: ST_TO_ADDR
// end else
14928: GO 15071
// begin for i = 1 to personel do
14930: LD_ADDR_VAR 0 8
14934: PUSH
14935: DOUBLE
14936: LD_INT 1
14938: DEC
14939: ST_TO_ADDR
14940: LD_VAR 0 6
14944: PUSH
14945: FOR_TO
14946: IFFALSE 15069
// begin if i > 4 then
14948: LD_VAR 0 8
14952: PUSH
14953: LD_INT 4
14955: GREATER
14956: IFFALSE 14960
// break ;
14958: GO 15069
// x := personel [ i ] ;
14960: LD_ADDR_VAR 0 13
14964: PUSH
14965: LD_VAR 0 6
14969: PUSH
14970: LD_VAR 0 8
14974: ARRAY
14975: ST_TO_ADDR
// if x = - 1 then
14976: LD_VAR 0 13
14980: PUSH
14981: LD_INT 1
14983: NEG
14984: EQUAL
14985: IFFALSE 14989
// continue ;
14987: GO 14945
// PrepareHuman ( false , i , skill ) ;
14989: LD_INT 0
14991: PPUSH
14992: LD_VAR 0 8
14996: PPUSH
14997: LD_VAR 0 4
15001: PPUSH
15002: CALL_OW 380
// un := CreateHuman ;
15006: LD_ADDR_VAR 0 14
15010: PUSH
15011: CALL_OW 44
15015: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15016: LD_VAR 0 14
15020: PPUSH
15021: LD_VAR 0 1
15025: PPUSH
15026: CALL_OW 250
15030: PPUSH
15031: LD_VAR 0 1
15035: PPUSH
15036: CALL_OW 251
15040: PPUSH
15041: LD_INT 10
15043: PPUSH
15044: LD_INT 0
15046: PPUSH
15047: CALL_OW 50
// result := result ^ un ;
15051: LD_ADDR_VAR 0 7
15055: PUSH
15056: LD_VAR 0 7
15060: PUSH
15061: LD_VAR 0 14
15065: ADD
15066: ST_TO_ADDR
// end ;
15067: GO 14945
15069: POP
15070: POP
// end ; end ;
15071: LD_VAR 0 7
15075: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
// result := false ;
15094: LD_ADDR_VAR 0 3
15098: PUSH
15099: LD_INT 0
15101: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15102: LD_VAR 0 1
15106: NOT
15107: PUSH
15108: LD_VAR 0 1
15112: PPUSH
15113: CALL_OW 266
15117: PUSH
15118: LD_INT 32
15120: PUSH
15121: LD_INT 33
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: IN
15128: NOT
15129: OR
15130: IFFALSE 15134
// exit ;
15132: GO 16243
// nat := GetNation ( tower ) ;
15134: LD_ADDR_VAR 0 12
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 248
15148: ST_TO_ADDR
// side := GetSide ( tower ) ;
15149: LD_ADDR_VAR 0 16
15153: PUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 255
15163: ST_TO_ADDR
// x := GetX ( tower ) ;
15164: LD_ADDR_VAR 0 10
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 250
15178: ST_TO_ADDR
// y := GetY ( tower ) ;
15179: LD_ADDR_VAR 0 11
15183: PUSH
15184: LD_VAR 0 1
15188: PPUSH
15189: CALL_OW 251
15193: ST_TO_ADDR
// if not x or not y then
15194: LD_VAR 0 10
15198: NOT
15199: PUSH
15200: LD_VAR 0 11
15204: NOT
15205: OR
15206: IFFALSE 15210
// exit ;
15208: GO 16243
// weapon := 0 ;
15210: LD_ADDR_VAR 0 18
15214: PUSH
15215: LD_INT 0
15217: ST_TO_ADDR
// fac_list := [ ] ;
15218: LD_ADDR_VAR 0 17
15222: PUSH
15223: EMPTY
15224: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15225: LD_ADDR_VAR 0 6
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 274
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: LD_INT 0
15247: PPUSH
15248: CALL 12814 0 3
15252: PPUSH
15253: LD_INT 30
15255: PUSH
15256: LD_INT 3
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PPUSH
15263: CALL_OW 72
15267: ST_TO_ADDR
// if not factories then
15268: LD_VAR 0 6
15272: NOT
15273: IFFALSE 15277
// exit ;
15275: GO 16243
// for i in factories do
15277: LD_ADDR_VAR 0 8
15281: PUSH
15282: LD_VAR 0 6
15286: PUSH
15287: FOR_IN
15288: IFFALSE 15313
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15290: LD_ADDR_VAR 0 17
15294: PUSH
15295: LD_VAR 0 17
15299: PUSH
15300: LD_VAR 0 8
15304: PPUSH
15305: CALL_OW 478
15309: UNION
15310: ST_TO_ADDR
15311: GO 15287
15313: POP
15314: POP
// if not fac_list then
15315: LD_VAR 0 17
15319: NOT
15320: IFFALSE 15324
// exit ;
15322: GO 16243
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 4
15331: PUSH
15332: LD_INT 5
15334: PUSH
15335: LD_INT 9
15337: PUSH
15338: LD_INT 10
15340: PUSH
15341: LD_INT 6
15343: PUSH
15344: LD_INT 7
15346: PUSH
15347: LD_INT 11
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 27
15361: PUSH
15362: LD_INT 28
15364: PUSH
15365: LD_INT 26
15367: PUSH
15368: LD_INT 30
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 43
15379: PUSH
15380: LD_INT 44
15382: PUSH
15383: LD_INT 46
15385: PUSH
15386: LD_INT 45
15388: PUSH
15389: LD_INT 47
15391: PUSH
15392: LD_INT 49
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 12
15412: ARRAY
15413: ST_TO_ADDR
// list := list isect fac_list ;
15414: LD_ADDR_VAR 0 5
15418: PUSH
15419: LD_VAR 0 5
15423: PUSH
15424: LD_VAR 0 17
15428: ISECT
15429: ST_TO_ADDR
// if not list then
15430: LD_VAR 0 5
15434: NOT
15435: IFFALSE 15439
// exit ;
15437: GO 16243
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15439: LD_VAR 0 12
15443: PUSH
15444: LD_INT 3
15446: EQUAL
15447: PUSH
15448: LD_INT 49
15450: PUSH
15451: LD_VAR 0 5
15455: IN
15456: AND
15457: PUSH
15458: LD_INT 31
15460: PPUSH
15461: LD_VAR 0 16
15465: PPUSH
15466: CALL_OW 321
15470: PUSH
15471: LD_INT 2
15473: EQUAL
15474: AND
15475: IFFALSE 15535
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15477: LD_INT 22
15479: PUSH
15480: LD_VAR 0 16
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 35
15491: PUSH
15492: LD_INT 49
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 91
15501: PUSH
15502: LD_VAR 0 1
15506: PUSH
15507: LD_INT 10
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: NOT
15525: IFFALSE 15535
// weapon := ru_time_lapser ;
15527: LD_ADDR_VAR 0 18
15531: PUSH
15532: LD_INT 49
15534: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15535: LD_VAR 0 12
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: IN
15550: PUSH
15551: LD_INT 11
15553: PUSH
15554: LD_VAR 0 5
15558: IN
15559: PUSH
15560: LD_INT 30
15562: PUSH
15563: LD_VAR 0 5
15567: IN
15568: OR
15569: AND
15570: PUSH
15571: LD_INT 6
15573: PPUSH
15574: LD_VAR 0 16
15578: PPUSH
15579: CALL_OW 321
15583: PUSH
15584: LD_INT 2
15586: EQUAL
15587: AND
15588: IFFALSE 15753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15590: LD_INT 22
15592: PUSH
15593: LD_VAR 0 16
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 2
15604: PUSH
15605: LD_INT 35
15607: PUSH
15608: LD_INT 11
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 35
15617: PUSH
15618: LD_INT 30
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 91
15632: PUSH
15633: LD_VAR 0 1
15637: PUSH
15638: LD_INT 18
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: PPUSH
15651: CALL_OW 69
15655: NOT
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_VAR 0 16
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: LD_INT 30
15674: PUSH
15675: LD_INT 32
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 30
15684: PUSH
15685: LD_INT 33
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 91
15699: PUSH
15700: LD_VAR 0 1
15704: PUSH
15705: LD_INT 12
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: LIST
15717: PUSH
15718: EMPTY
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: LD_INT 2
15728: GREATER
15729: AND
15730: IFFALSE 15753
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15732: LD_ADDR_VAR 0 18
15736: PUSH
15737: LD_INT 11
15739: PUSH
15740: LD_INT 30
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_VAR 0 12
15751: ARRAY
15752: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15753: LD_VAR 0 18
15757: NOT
15758: PUSH
15759: LD_INT 40
15761: PPUSH
15762: LD_VAR 0 16
15766: PPUSH
15767: CALL_OW 321
15771: PUSH
15772: LD_INT 2
15774: EQUAL
15775: AND
15776: PUSH
15777: LD_INT 7
15779: PUSH
15780: LD_VAR 0 5
15784: IN
15785: PUSH
15786: LD_INT 28
15788: PUSH
15789: LD_VAR 0 5
15793: IN
15794: OR
15795: PUSH
15796: LD_INT 45
15798: PUSH
15799: LD_VAR 0 5
15803: IN
15804: OR
15805: AND
15806: IFFALSE 16060
// begin hex := GetHexInfo ( x , y ) ;
15808: LD_ADDR_VAR 0 4
15812: PUSH
15813: LD_VAR 0 10
15817: PPUSH
15818: LD_VAR 0 11
15822: PPUSH
15823: CALL_OW 546
15827: ST_TO_ADDR
// if hex [ 1 ] then
15828: LD_VAR 0 4
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: IFFALSE 15840
// exit ;
15838: GO 16243
// height := hex [ 2 ] ;
15840: LD_ADDR_VAR 0 15
15844: PUSH
15845: LD_VAR 0 4
15849: PUSH
15850: LD_INT 2
15852: ARRAY
15853: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15854: LD_ADDR_VAR 0 14
15858: PUSH
15859: LD_INT 0
15861: PUSH
15862: LD_INT 2
15864: PUSH
15865: LD_INT 3
15867: PUSH
15868: LD_INT 5
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: ST_TO_ADDR
// for i in tmp do
15877: LD_ADDR_VAR 0 8
15881: PUSH
15882: LD_VAR 0 14
15886: PUSH
15887: FOR_IN
15888: IFFALSE 16058
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15890: LD_ADDR_VAR 0 9
15894: PUSH
15895: LD_VAR 0 10
15899: PPUSH
15900: LD_VAR 0 8
15904: PPUSH
15905: LD_INT 5
15907: PPUSH
15908: CALL_OW 272
15912: PUSH
15913: LD_VAR 0 11
15917: PPUSH
15918: LD_VAR 0 8
15922: PPUSH
15923: LD_INT 5
15925: PPUSH
15926: CALL_OW 273
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15935: LD_VAR 0 9
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PPUSH
15944: LD_VAR 0 9
15948: PUSH
15949: LD_INT 2
15951: ARRAY
15952: PPUSH
15953: CALL_OW 488
15957: IFFALSE 16056
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 9
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: PPUSH
15973: LD_VAR 0 9
15977: PUSH
15978: LD_INT 2
15980: ARRAY
15981: PPUSH
15982: CALL_OW 546
15986: ST_TO_ADDR
// if hex [ 1 ] then
15987: LD_VAR 0 4
15991: PUSH
15992: LD_INT 1
15994: ARRAY
15995: IFFALSE 15999
// continue ;
15997: GO 15887
// h := hex [ 2 ] ;
15999: LD_ADDR_VAR 0 13
16003: PUSH
16004: LD_VAR 0 4
16008: PUSH
16009: LD_INT 2
16011: ARRAY
16012: ST_TO_ADDR
// if h + 7 < height then
16013: LD_VAR 0 13
16017: PUSH
16018: LD_INT 7
16020: PLUS
16021: PUSH
16022: LD_VAR 0 15
16026: LESS
16027: IFFALSE 16056
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16029: LD_ADDR_VAR 0 18
16033: PUSH
16034: LD_INT 7
16036: PUSH
16037: LD_INT 28
16039: PUSH
16040: LD_INT 45
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: PUSH
16048: LD_VAR 0 12
16052: ARRAY
16053: ST_TO_ADDR
// break ;
16054: GO 16058
// end ; end ; end ;
16056: GO 15887
16058: POP
16059: POP
// end ; if not weapon then
16060: LD_VAR 0 18
16064: NOT
16065: IFFALSE 16125
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16067: LD_ADDR_VAR 0 5
16071: PUSH
16072: LD_VAR 0 5
16076: PUSH
16077: LD_INT 11
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 49
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: DIFF
16091: ST_TO_ADDR
// if not list then
16092: LD_VAR 0 5
16096: NOT
16097: IFFALSE 16101
// exit ;
16099: GO 16243
// weapon := list [ rand ( 1 , list ) ] ;
16101: LD_ADDR_VAR 0 18
16105: PUSH
16106: LD_VAR 0 5
16110: PUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_VAR 0 5
16118: PPUSH
16119: CALL_OW 12
16123: ARRAY
16124: ST_TO_ADDR
// end ; if weapon then
16125: LD_VAR 0 18
16129: IFFALSE 16243
// begin tmp := CostOfWeapon ( weapon ) ;
16131: LD_ADDR_VAR 0 14
16135: PUSH
16136: LD_VAR 0 18
16140: PPUSH
16141: CALL_OW 451
16145: ST_TO_ADDR
// j := GetBase ( tower ) ;
16146: LD_ADDR_VAR 0 9
16150: PUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 274
16160: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16161: LD_VAR 0 9
16165: PPUSH
16166: LD_INT 1
16168: PPUSH
16169: CALL_OW 275
16173: PUSH
16174: LD_VAR 0 14
16178: PUSH
16179: LD_INT 1
16181: ARRAY
16182: GREATEREQUAL
16183: PUSH
16184: LD_VAR 0 9
16188: PPUSH
16189: LD_INT 2
16191: PPUSH
16192: CALL_OW 275
16196: PUSH
16197: LD_VAR 0 14
16201: PUSH
16202: LD_INT 2
16204: ARRAY
16205: GREATEREQUAL
16206: AND
16207: PUSH
16208: LD_VAR 0 9
16212: PPUSH
16213: LD_INT 3
16215: PPUSH
16216: CALL_OW 275
16220: PUSH
16221: LD_VAR 0 14
16225: PUSH
16226: LD_INT 3
16228: ARRAY
16229: GREATEREQUAL
16230: AND
16231: IFFALSE 16243
// result := weapon ;
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_VAR 0 18
16242: ST_TO_ADDR
// end ; end ;
16243: LD_VAR 0 3
16247: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16248: LD_INT 0
16250: PPUSH
16251: PPUSH
// result := true ;
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// if array1 = array2 then
16260: LD_VAR 0 1
16264: PUSH
16265: LD_VAR 0 2
16269: EQUAL
16270: IFFALSE 16330
// begin for i = 1 to array1 do
16272: LD_ADDR_VAR 0 4
16276: PUSH
16277: DOUBLE
16278: LD_INT 1
16280: DEC
16281: ST_TO_ADDR
16282: LD_VAR 0 1
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16326
// if array1 [ i ] <> array2 [ i ] then
16290: LD_VAR 0 1
16294: PUSH
16295: LD_VAR 0 4
16299: ARRAY
16300: PUSH
16301: LD_VAR 0 2
16305: PUSH
16306: LD_VAR 0 4
16310: ARRAY
16311: NONEQUAL
16312: IFFALSE 16324
// begin result := false ;
16314: LD_ADDR_VAR 0 3
16318: PUSH
16319: LD_INT 0
16321: ST_TO_ADDR
// break ;
16322: GO 16326
// end ;
16324: GO 16287
16326: POP
16327: POP
// end else
16328: GO 16338
// result := false ;
16330: LD_ADDR_VAR 0 3
16334: PUSH
16335: LD_INT 0
16337: ST_TO_ADDR
// end ;
16338: LD_VAR 0 3
16342: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
// if not array1 or not array2 then
16347: LD_VAR 0 1
16351: NOT
16352: PUSH
16353: LD_VAR 0 2
16357: NOT
16358: OR
16359: IFFALSE 16363
// exit ;
16361: GO 16427
// result := true ;
16363: LD_ADDR_VAR 0 3
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
// for i = 1 to array1 do
16371: LD_ADDR_VAR 0 4
16375: PUSH
16376: DOUBLE
16377: LD_INT 1
16379: DEC
16380: ST_TO_ADDR
16381: LD_VAR 0 1
16385: PUSH
16386: FOR_TO
16387: IFFALSE 16425
// if array1 [ i ] <> array2 [ i ] then
16389: LD_VAR 0 1
16393: PUSH
16394: LD_VAR 0 4
16398: ARRAY
16399: PUSH
16400: LD_VAR 0 2
16404: PUSH
16405: LD_VAR 0 4
16409: ARRAY
16410: NONEQUAL
16411: IFFALSE 16423
// begin result := false ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// break ;
16421: GO 16425
// end ;
16423: GO 16386
16425: POP
16426: POP
// end ;
16427: LD_VAR 0 3
16431: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16432: LD_INT 0
16434: PPUSH
16435: PPUSH
16436: PPUSH
// pom := GetBase ( fac ) ;
16437: LD_ADDR_VAR 0 5
16441: PUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 274
16451: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16452: LD_ADDR_VAR 0 4
16456: PUSH
16457: LD_VAR 0 2
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PPUSH
16466: LD_VAR 0 2
16470: PUSH
16471: LD_INT 2
16473: ARRAY
16474: PPUSH
16475: LD_VAR 0 2
16479: PUSH
16480: LD_INT 3
16482: ARRAY
16483: PPUSH
16484: LD_VAR 0 2
16488: PUSH
16489: LD_INT 4
16491: ARRAY
16492: PPUSH
16493: CALL_OW 449
16497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_VAR 0 5
16507: PPUSH
16508: LD_INT 1
16510: PPUSH
16511: CALL_OW 275
16515: PUSH
16516: LD_VAR 0 4
16520: PUSH
16521: LD_INT 1
16523: ARRAY
16524: GREATEREQUAL
16525: PUSH
16526: LD_VAR 0 5
16530: PPUSH
16531: LD_INT 2
16533: PPUSH
16534: CALL_OW 275
16538: PUSH
16539: LD_VAR 0 4
16543: PUSH
16544: LD_INT 2
16546: ARRAY
16547: GREATEREQUAL
16548: AND
16549: PUSH
16550: LD_VAR 0 5
16554: PPUSH
16555: LD_INT 3
16557: PPUSH
16558: CALL_OW 275
16562: PUSH
16563: LD_VAR 0 4
16567: PUSH
16568: LD_INT 3
16570: ARRAY
16571: GREATEREQUAL
16572: AND
16573: ST_TO_ADDR
// end ;
16574: LD_VAR 0 3
16578: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16579: LD_INT 0
16581: PPUSH
16582: PPUSH
16583: PPUSH
16584: PPUSH
// pom := GetBase ( building ) ;
16585: LD_ADDR_VAR 0 3
16589: PUSH
16590: LD_VAR 0 1
16594: PPUSH
16595: CALL_OW 274
16599: ST_TO_ADDR
// if not pom then
16600: LD_VAR 0 3
16604: NOT
16605: IFFALSE 16609
// exit ;
16607: GO 16779
// btype := GetBType ( building ) ;
16609: LD_ADDR_VAR 0 5
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: ST_TO_ADDR
// if btype = b_armoury then
16624: LD_VAR 0 5
16628: PUSH
16629: LD_INT 4
16631: EQUAL
16632: IFFALSE 16642
// btype := b_barracks ;
16634: LD_ADDR_VAR 0 5
16638: PUSH
16639: LD_INT 5
16641: ST_TO_ADDR
// if btype = b_depot then
16642: LD_VAR 0 5
16646: PUSH
16647: LD_INT 0
16649: EQUAL
16650: IFFALSE 16660
// btype := b_warehouse ;
16652: LD_ADDR_VAR 0 5
16656: PUSH
16657: LD_INT 1
16659: ST_TO_ADDR
// if btype = b_workshop then
16660: LD_VAR 0 5
16664: PUSH
16665: LD_INT 2
16667: EQUAL
16668: IFFALSE 16678
// btype := b_factory ;
16670: LD_ADDR_VAR 0 5
16674: PUSH
16675: LD_INT 3
16677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16678: LD_ADDR_VAR 0 4
16682: PUSH
16683: LD_VAR 0 5
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 248
16697: PPUSH
16698: CALL_OW 450
16702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16703: LD_ADDR_VAR 0 2
16707: PUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: LD_INT 1
16715: PPUSH
16716: CALL_OW 275
16720: PUSH
16721: LD_VAR 0 4
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: GREATEREQUAL
16730: PUSH
16731: LD_VAR 0 3
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 275
16743: PUSH
16744: LD_VAR 0 4
16748: PUSH
16749: LD_INT 2
16751: ARRAY
16752: GREATEREQUAL
16753: AND
16754: PUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 3
16762: PPUSH
16763: CALL_OW 275
16767: PUSH
16768: LD_VAR 0 4
16772: PUSH
16773: LD_INT 3
16775: ARRAY
16776: GREATEREQUAL
16777: AND
16778: ST_TO_ADDR
// end ;
16779: LD_VAR 0 2
16783: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
// pom := GetBase ( building ) ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 274
16803: ST_TO_ADDR
// if not pom then
16804: LD_VAR 0 4
16808: NOT
16809: IFFALSE 16813
// exit ;
16811: GO 16914
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16813: LD_ADDR_VAR 0 5
16817: PUSH
16818: LD_VAR 0 2
16822: PPUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 248
16832: PPUSH
16833: CALL_OW 450
16837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16838: LD_ADDR_VAR 0 3
16842: PUSH
16843: LD_VAR 0 4
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 275
16855: PUSH
16856: LD_VAR 0 5
16860: PUSH
16861: LD_INT 1
16863: ARRAY
16864: GREATEREQUAL
16865: PUSH
16866: LD_VAR 0 4
16870: PPUSH
16871: LD_INT 2
16873: PPUSH
16874: CALL_OW 275
16878: PUSH
16879: LD_VAR 0 5
16883: PUSH
16884: LD_INT 2
16886: ARRAY
16887: GREATEREQUAL
16888: AND
16889: PUSH
16890: LD_VAR 0 4
16894: PPUSH
16895: LD_INT 3
16897: PPUSH
16898: CALL_OW 275
16902: PUSH
16903: LD_VAR 0 5
16907: PUSH
16908: LD_INT 3
16910: ARRAY
16911: GREATEREQUAL
16912: AND
16913: ST_TO_ADDR
// end ;
16914: LD_VAR 0 3
16918: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16919: LD_INT 0
16921: PPUSH
16922: PPUSH
16923: PPUSH
16924: PPUSH
16925: PPUSH
16926: PPUSH
16927: PPUSH
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
// result := false ;
16932: LD_ADDR_VAR 0 8
16936: PUSH
16937: LD_INT 0
16939: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16940: LD_VAR 0 5
16944: NOT
16945: PUSH
16946: LD_VAR 0 1
16950: NOT
16951: OR
16952: PUSH
16953: LD_VAR 0 2
16957: NOT
16958: OR
16959: PUSH
16960: LD_VAR 0 3
16964: NOT
16965: OR
16966: IFFALSE 16970
// exit ;
16968: GO 17784
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16970: LD_ADDR_VAR 0 14
16974: PUSH
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_VAR 0 2
16984: PPUSH
16985: LD_VAR 0 3
16989: PPUSH
16990: LD_VAR 0 4
16994: PPUSH
16995: LD_VAR 0 5
16999: PUSH
17000: LD_INT 1
17002: ARRAY
17003: PPUSH
17004: CALL_OW 248
17008: PPUSH
17009: LD_INT 0
17011: PPUSH
17012: CALL 19037 0 6
17016: ST_TO_ADDR
// if not hexes then
17017: LD_VAR 0 14
17021: NOT
17022: IFFALSE 17026
// exit ;
17024: GO 17784
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17026: LD_ADDR_VAR 0 17
17030: PUSH
17031: LD_VAR 0 5
17035: PPUSH
17036: LD_INT 22
17038: PUSH
17039: LD_VAR 0 13
17043: PPUSH
17044: CALL_OW 255
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: LD_INT 30
17058: PUSH
17059: LD_INT 0
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 72
17089: ST_TO_ADDR
// for i = 1 to hexes do
17090: LD_ADDR_VAR 0 9
17094: PUSH
17095: DOUBLE
17096: LD_INT 1
17098: DEC
17099: ST_TO_ADDR
17100: LD_VAR 0 14
17104: PUSH
17105: FOR_TO
17106: IFFALSE 17782
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17108: LD_ADDR_VAR 0 13
17112: PUSH
17113: LD_VAR 0 14
17117: PUSH
17118: LD_VAR 0 9
17122: ARRAY
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: LD_VAR 0 14
17132: PUSH
17133: LD_VAR 0 9
17137: ARRAY
17138: PUSH
17139: LD_INT 2
17141: ARRAY
17142: PPUSH
17143: CALL_OW 428
17147: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17148: LD_VAR 0 14
17152: PUSH
17153: LD_VAR 0 9
17157: ARRAY
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PPUSH
17163: LD_VAR 0 14
17167: PUSH
17168: LD_VAR 0 9
17172: ARRAY
17173: PUSH
17174: LD_INT 2
17176: ARRAY
17177: PPUSH
17178: CALL_OW 351
17182: PUSH
17183: LD_VAR 0 14
17187: PUSH
17188: LD_VAR 0 9
17192: ARRAY
17193: PUSH
17194: LD_INT 1
17196: ARRAY
17197: PPUSH
17198: LD_VAR 0 14
17202: PUSH
17203: LD_VAR 0 9
17207: ARRAY
17208: PUSH
17209: LD_INT 2
17211: ARRAY
17212: PPUSH
17213: CALL_OW 488
17217: NOT
17218: OR
17219: PUSH
17220: LD_VAR 0 13
17224: PPUSH
17225: CALL_OW 247
17229: PUSH
17230: LD_INT 3
17232: EQUAL
17233: OR
17234: IFFALSE 17240
// exit ;
17236: POP
17237: POP
17238: GO 17784
// if not tmp then
17240: LD_VAR 0 13
17244: NOT
17245: IFFALSE 17249
// continue ;
17247: GO 17105
// result := true ;
17249: LD_ADDR_VAR 0 8
17253: PUSH
17254: LD_INT 1
17256: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17257: LD_VAR 0 6
17261: PUSH
17262: LD_VAR 0 13
17266: PPUSH
17267: CALL_OW 247
17271: PUSH
17272: LD_INT 2
17274: EQUAL
17275: AND
17276: PUSH
17277: LD_VAR 0 13
17281: PPUSH
17282: CALL_OW 263
17286: PUSH
17287: LD_INT 1
17289: EQUAL
17290: AND
17291: IFFALSE 17455
// begin if IsDrivenBy ( tmp ) then
17293: LD_VAR 0 13
17297: PPUSH
17298: CALL_OW 311
17302: IFFALSE 17306
// continue ;
17304: GO 17105
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17306: LD_VAR 0 6
17310: PPUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 60
17316: PUSH
17317: EMPTY
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: LD_INT 55
17329: PUSH
17330: EMPTY
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 72
17345: IFFALSE 17453
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17347: LD_ADDR_VAR 0 18
17351: PUSH
17352: LD_VAR 0 6
17356: PPUSH
17357: LD_INT 3
17359: PUSH
17360: LD_INT 60
17362: PUSH
17363: EMPTY
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 55
17375: PUSH
17376: EMPTY
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 72
17391: PUSH
17392: LD_INT 1
17394: ARRAY
17395: ST_TO_ADDR
// if IsInUnit ( driver ) then
17396: LD_VAR 0 18
17400: PPUSH
17401: CALL_OW 310
17405: IFFALSE 17416
// ComExit ( driver ) ;
17407: LD_VAR 0 18
17411: PPUSH
17412: CALL 42829 0 1
// AddComEnterUnit ( driver , tmp ) ;
17416: LD_VAR 0 18
17420: PPUSH
17421: LD_VAR 0 13
17425: PPUSH
17426: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17430: LD_VAR 0 18
17434: PPUSH
17435: LD_VAR 0 7
17439: PPUSH
17440: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17444: LD_VAR 0 18
17448: PPUSH
17449: CALL_OW 181
// end ; continue ;
17453: GO 17105
// end ; if not cleaners or not tmp in cleaners then
17455: LD_VAR 0 6
17459: NOT
17460: PUSH
17461: LD_VAR 0 13
17465: PUSH
17466: LD_VAR 0 6
17470: IN
17471: NOT
17472: OR
17473: IFFALSE 17780
// begin if dep then
17475: LD_VAR 0 17
17479: IFFALSE 17615
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17481: LD_ADDR_VAR 0 16
17485: PUSH
17486: LD_VAR 0 17
17490: PUSH
17491: LD_INT 1
17493: ARRAY
17494: PPUSH
17495: CALL_OW 250
17499: PPUSH
17500: LD_VAR 0 17
17504: PUSH
17505: LD_INT 1
17507: ARRAY
17508: PPUSH
17509: CALL_OW 254
17513: PPUSH
17514: LD_INT 5
17516: PPUSH
17517: CALL_OW 272
17521: PUSH
17522: LD_VAR 0 17
17526: PUSH
17527: LD_INT 1
17529: ARRAY
17530: PPUSH
17531: CALL_OW 251
17535: PPUSH
17536: LD_VAR 0 17
17540: PUSH
17541: LD_INT 1
17543: ARRAY
17544: PPUSH
17545: CALL_OW 254
17549: PPUSH
17550: LD_INT 5
17552: PPUSH
17553: CALL_OW 273
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17562: LD_VAR 0 16
17566: PUSH
17567: LD_INT 1
17569: ARRAY
17570: PPUSH
17571: LD_VAR 0 16
17575: PUSH
17576: LD_INT 2
17578: ARRAY
17579: PPUSH
17580: CALL_OW 488
17584: IFFALSE 17615
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17586: LD_VAR 0 13
17590: PPUSH
17591: LD_VAR 0 16
17595: PUSH
17596: LD_INT 1
17598: ARRAY
17599: PPUSH
17600: LD_VAR 0 16
17604: PUSH
17605: LD_INT 2
17607: ARRAY
17608: PPUSH
17609: CALL_OW 111
// continue ;
17613: GO 17105
// end ; end ; r := GetDir ( tmp ) ;
17615: LD_ADDR_VAR 0 15
17619: PUSH
17620: LD_VAR 0 13
17624: PPUSH
17625: CALL_OW 254
17629: ST_TO_ADDR
// if r = 5 then
17630: LD_VAR 0 15
17634: PUSH
17635: LD_INT 5
17637: EQUAL
17638: IFFALSE 17648
// r := 0 ;
17640: LD_ADDR_VAR 0 15
17644: PUSH
17645: LD_INT 0
17647: ST_TO_ADDR
// for j = r to 5 do
17648: LD_ADDR_VAR 0 10
17652: PUSH
17653: DOUBLE
17654: LD_VAR 0 15
17658: DEC
17659: ST_TO_ADDR
17660: LD_INT 5
17662: PUSH
17663: FOR_TO
17664: IFFALSE 17778
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17666: LD_ADDR_VAR 0 11
17670: PUSH
17671: LD_VAR 0 13
17675: PPUSH
17676: CALL_OW 250
17680: PPUSH
17681: LD_VAR 0 10
17685: PPUSH
17686: LD_INT 2
17688: PPUSH
17689: CALL_OW 272
17693: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17694: LD_ADDR_VAR 0 12
17698: PUSH
17699: LD_VAR 0 13
17703: PPUSH
17704: CALL_OW 251
17708: PPUSH
17709: LD_VAR 0 10
17713: PPUSH
17714: LD_INT 2
17716: PPUSH
17717: CALL_OW 273
17721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17722: LD_VAR 0 11
17726: PPUSH
17727: LD_VAR 0 12
17731: PPUSH
17732: CALL_OW 488
17736: PUSH
17737: LD_VAR 0 11
17741: PPUSH
17742: LD_VAR 0 12
17746: PPUSH
17747: CALL_OW 428
17751: NOT
17752: AND
17753: IFFALSE 17776
// begin ComMoveXY ( tmp , _x , _y ) ;
17755: LD_VAR 0 13
17759: PPUSH
17760: LD_VAR 0 11
17764: PPUSH
17765: LD_VAR 0 12
17769: PPUSH
17770: CALL_OW 111
// break ;
17774: GO 17778
// end ; end ;
17776: GO 17663
17778: POP
17779: POP
// end ; end ;
17780: GO 17105
17782: POP
17783: POP
// end ;
17784: LD_VAR 0 8
17788: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17789: LD_INT 0
17791: PPUSH
// result := true ;
17792: LD_ADDR_VAR 0 3
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17800: LD_VAR 0 2
17804: PUSH
17805: LD_INT 24
17807: DOUBLE
17808: EQUAL
17809: IFTRUE 17819
17811: LD_INT 33
17813: DOUBLE
17814: EQUAL
17815: IFTRUE 17819
17817: GO 17844
17819: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17820: LD_ADDR_VAR 0 3
17824: PUSH
17825: LD_INT 32
17827: PPUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: CALL_OW 321
17837: PUSH
17838: LD_INT 2
17840: EQUAL
17841: ST_TO_ADDR
17842: GO 18160
17844: LD_INT 20
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 17877
17852: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_INT 6
17860: PPUSH
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 321
17870: PUSH
17871: LD_INT 2
17873: EQUAL
17874: ST_TO_ADDR
17875: GO 18160
17877: LD_INT 22
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17891
17883: LD_INT 36
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 17916
17891: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17892: LD_ADDR_VAR 0 3
17896: PUSH
17897: LD_INT 15
17899: PPUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 321
17909: PUSH
17910: LD_INT 2
17912: EQUAL
17913: ST_TO_ADDR
17914: GO 18160
17916: LD_INT 30
17918: DOUBLE
17919: EQUAL
17920: IFTRUE 17924
17922: GO 17949
17924: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: LD_INT 20
17932: PPUSH
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 321
17942: PUSH
17943: LD_INT 2
17945: EQUAL
17946: ST_TO_ADDR
17947: GO 18160
17949: LD_INT 28
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17963
17955: LD_INT 21
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17988
17963: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_INT 21
17971: PPUSH
17972: LD_VAR 0 1
17976: PPUSH
17977: CALL_OW 321
17981: PUSH
17982: LD_INT 2
17984: EQUAL
17985: ST_TO_ADDR
17986: GO 18160
17988: LD_INT 16
17990: DOUBLE
17991: EQUAL
17992: IFTRUE 17996
17994: GO 18021
17996: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_INT 84
18004: PPUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 321
18014: PUSH
18015: LD_INT 2
18017: EQUAL
18018: ST_TO_ADDR
18019: GO 18160
18021: LD_INT 19
18023: DOUBLE
18024: EQUAL
18025: IFTRUE 18035
18027: LD_INT 23
18029: DOUBLE
18030: EQUAL
18031: IFTRUE 18035
18033: GO 18060
18035: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_INT 83
18043: PPUSH
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 321
18053: PUSH
18054: LD_INT 2
18056: EQUAL
18057: ST_TO_ADDR
18058: GO 18160
18060: LD_INT 17
18062: DOUBLE
18063: EQUAL
18064: IFTRUE 18068
18066: GO 18093
18068: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18069: LD_ADDR_VAR 0 3
18073: PUSH
18074: LD_INT 39
18076: PPUSH
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 321
18086: PUSH
18087: LD_INT 2
18089: EQUAL
18090: ST_TO_ADDR
18091: GO 18160
18093: LD_INT 18
18095: DOUBLE
18096: EQUAL
18097: IFTRUE 18101
18099: GO 18126
18101: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18102: LD_ADDR_VAR 0 3
18106: PUSH
18107: LD_INT 40
18109: PPUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 321
18119: PUSH
18120: LD_INT 2
18122: EQUAL
18123: ST_TO_ADDR
18124: GO 18160
18126: LD_INT 27
18128: DOUBLE
18129: EQUAL
18130: IFTRUE 18134
18132: GO 18159
18134: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_INT 35
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 321
18152: PUSH
18153: LD_INT 2
18155: EQUAL
18156: ST_TO_ADDR
18157: GO 18160
18159: POP
// end ;
18160: LD_VAR 0 3
18164: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18165: LD_INT 0
18167: PPUSH
18168: PPUSH
18169: PPUSH
18170: PPUSH
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
18176: PPUSH
18177: PPUSH
// result := false ;
18178: LD_ADDR_VAR 0 6
18182: PUSH
18183: LD_INT 0
18185: ST_TO_ADDR
// if btype = b_depot then
18186: LD_VAR 0 2
18190: PUSH
18191: LD_INT 0
18193: EQUAL
18194: IFFALSE 18206
// begin result := true ;
18196: LD_ADDR_VAR 0 6
18200: PUSH
18201: LD_INT 1
18203: ST_TO_ADDR
// exit ;
18204: GO 19032
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18206: LD_VAR 0 1
18210: NOT
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 266
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: IN
18232: NOT
18233: OR
18234: PUSH
18235: LD_VAR 0 2
18239: NOT
18240: OR
18241: PUSH
18242: LD_VAR 0 5
18246: PUSH
18247: LD_INT 0
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 2
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: LD_INT 4
18261: PUSH
18262: LD_INT 5
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: IN
18273: NOT
18274: OR
18275: PUSH
18276: LD_VAR 0 3
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: CALL_OW 488
18290: NOT
18291: OR
18292: IFFALSE 18296
// exit ;
18294: GO 19032
// side := GetSide ( depot ) ;
18296: LD_ADDR_VAR 0 9
18300: PUSH
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 255
18310: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18311: LD_VAR 0 9
18315: PPUSH
18316: LD_VAR 0 2
18320: PPUSH
18321: CALL 17789 0 2
18325: NOT
18326: IFFALSE 18330
// exit ;
18328: GO 19032
// pom := GetBase ( depot ) ;
18330: LD_ADDR_VAR 0 10
18334: PUSH
18335: LD_VAR 0 1
18339: PPUSH
18340: CALL_OW 274
18344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18345: LD_ADDR_VAR 0 11
18349: PUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 248
18364: PPUSH
18365: CALL_OW 450
18369: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18370: LD_VAR 0 10
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 275
18382: PUSH
18383: LD_VAR 0 11
18387: PUSH
18388: LD_INT 1
18390: ARRAY
18391: GREATEREQUAL
18392: PUSH
18393: LD_VAR 0 10
18397: PPUSH
18398: LD_INT 2
18400: PPUSH
18401: CALL_OW 275
18405: PUSH
18406: LD_VAR 0 11
18410: PUSH
18411: LD_INT 2
18413: ARRAY
18414: GREATEREQUAL
18415: AND
18416: PUSH
18417: LD_VAR 0 10
18421: PPUSH
18422: LD_INT 3
18424: PPUSH
18425: CALL_OW 275
18429: PUSH
18430: LD_VAR 0 11
18434: PUSH
18435: LD_INT 3
18437: ARRAY
18438: GREATEREQUAL
18439: AND
18440: NOT
18441: IFFALSE 18445
// exit ;
18443: GO 19032
// if GetBType ( depot ) = b_depot then
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 266
18454: PUSH
18455: LD_INT 0
18457: EQUAL
18458: IFFALSE 18470
// dist := 28 else
18460: LD_ADDR_VAR 0 14
18464: PUSH
18465: LD_INT 28
18467: ST_TO_ADDR
18468: GO 18478
// dist := 36 ;
18470: LD_ADDR_VAR 0 14
18474: PUSH
18475: LD_INT 36
18477: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18478: LD_VAR 0 1
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_VAR 0 4
18492: PPUSH
18493: CALL_OW 297
18497: PUSH
18498: LD_VAR 0 14
18502: GREATER
18503: IFFALSE 18507
// exit ;
18505: GO 19032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18507: LD_ADDR_VAR 0 12
18511: PUSH
18512: LD_VAR 0 2
18516: PPUSH
18517: LD_VAR 0 3
18521: PPUSH
18522: LD_VAR 0 4
18526: PPUSH
18527: LD_VAR 0 5
18531: PPUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 248
18541: PPUSH
18542: LD_INT 0
18544: PPUSH
18545: CALL 19037 0 6
18549: ST_TO_ADDR
// if not hexes then
18550: LD_VAR 0 12
18554: NOT
18555: IFFALSE 18559
// exit ;
18557: GO 19032
// hex := GetHexInfo ( x , y ) ;
18559: LD_ADDR_VAR 0 15
18563: PUSH
18564: LD_VAR 0 3
18568: PPUSH
18569: LD_VAR 0 4
18573: PPUSH
18574: CALL_OW 546
18578: ST_TO_ADDR
// if hex [ 1 ] then
18579: LD_VAR 0 15
18583: PUSH
18584: LD_INT 1
18586: ARRAY
18587: IFFALSE 18591
// exit ;
18589: GO 19032
// height := hex [ 2 ] ;
18591: LD_ADDR_VAR 0 13
18595: PUSH
18596: LD_VAR 0 15
18600: PUSH
18601: LD_INT 2
18603: ARRAY
18604: ST_TO_ADDR
// for i = 1 to hexes do
18605: LD_ADDR_VAR 0 7
18609: PUSH
18610: DOUBLE
18611: LD_INT 1
18613: DEC
18614: ST_TO_ADDR
18615: LD_VAR 0 12
18619: PUSH
18620: FOR_TO
18621: IFFALSE 18951
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18623: LD_VAR 0 12
18627: PUSH
18628: LD_VAR 0 7
18632: ARRAY
18633: PUSH
18634: LD_INT 1
18636: ARRAY
18637: PPUSH
18638: LD_VAR 0 12
18642: PUSH
18643: LD_VAR 0 7
18647: ARRAY
18648: PUSH
18649: LD_INT 2
18651: ARRAY
18652: PPUSH
18653: CALL_OW 488
18657: NOT
18658: PUSH
18659: LD_VAR 0 12
18663: PUSH
18664: LD_VAR 0 7
18668: ARRAY
18669: PUSH
18670: LD_INT 1
18672: ARRAY
18673: PPUSH
18674: LD_VAR 0 12
18678: PUSH
18679: LD_VAR 0 7
18683: ARRAY
18684: PUSH
18685: LD_INT 2
18687: ARRAY
18688: PPUSH
18689: CALL_OW 428
18693: PUSH
18694: LD_INT 0
18696: GREATER
18697: OR
18698: PUSH
18699: LD_VAR 0 12
18703: PUSH
18704: LD_VAR 0 7
18708: ARRAY
18709: PUSH
18710: LD_INT 1
18712: ARRAY
18713: PPUSH
18714: LD_VAR 0 12
18718: PUSH
18719: LD_VAR 0 7
18723: ARRAY
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: CALL_OW 351
18733: OR
18734: IFFALSE 18740
// exit ;
18736: POP
18737: POP
18738: GO 19032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18740: LD_ADDR_VAR 0 8
18744: PUSH
18745: LD_VAR 0 12
18749: PUSH
18750: LD_VAR 0 7
18754: ARRAY
18755: PUSH
18756: LD_INT 1
18758: ARRAY
18759: PPUSH
18760: LD_VAR 0 12
18764: PUSH
18765: LD_VAR 0 7
18769: ARRAY
18770: PUSH
18771: LD_INT 2
18773: ARRAY
18774: PPUSH
18775: CALL_OW 546
18779: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18780: LD_VAR 0 8
18784: PUSH
18785: LD_INT 1
18787: ARRAY
18788: PUSH
18789: LD_VAR 0 8
18793: PUSH
18794: LD_INT 2
18796: ARRAY
18797: PUSH
18798: LD_VAR 0 13
18802: PUSH
18803: LD_INT 2
18805: PLUS
18806: GREATER
18807: OR
18808: PUSH
18809: LD_VAR 0 8
18813: PUSH
18814: LD_INT 2
18816: ARRAY
18817: PUSH
18818: LD_VAR 0 13
18822: PUSH
18823: LD_INT 2
18825: MINUS
18826: LESS
18827: OR
18828: PUSH
18829: LD_VAR 0 8
18833: PUSH
18834: LD_INT 3
18836: ARRAY
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 9
18846: PUSH
18847: LD_INT 10
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 13
18858: PUSH
18859: LD_INT 16
18861: PUSH
18862: LD_INT 17
18864: PUSH
18865: LD_INT 18
18867: PUSH
18868: LD_INT 19
18870: PUSH
18871: LD_INT 20
18873: PUSH
18874: LD_INT 21
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: IN
18892: NOT
18893: OR
18894: PUSH
18895: LD_VAR 0 8
18899: PUSH
18900: LD_INT 5
18902: ARRAY
18903: NOT
18904: OR
18905: PUSH
18906: LD_VAR 0 8
18910: PUSH
18911: LD_INT 6
18913: ARRAY
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 7
18923: PUSH
18924: LD_INT 9
18926: PUSH
18927: LD_INT 10
18929: PUSH
18930: LD_INT 11
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: IN
18941: NOT
18942: OR
18943: IFFALSE 18949
// exit ;
18945: POP
18946: POP
18947: GO 19032
// end ;
18949: GO 18620
18951: POP
18952: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18953: LD_VAR 0 9
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: LD_VAR 0 4
18967: PPUSH
18968: LD_INT 20
18970: PPUSH
18971: CALL 10955 0 4
18975: PUSH
18976: LD_INT 4
18978: ARRAY
18979: IFFALSE 18983
// exit ;
18981: GO 19032
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18983: LD_VAR 0 2
18987: PUSH
18988: LD_INT 29
18990: PUSH
18991: LD_INT 30
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: IN
18998: PUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: LD_VAR 0 4
19008: PPUSH
19009: LD_VAR 0 9
19013: PPUSH
19014: CALL_OW 440
19018: NOT
19019: AND
19020: IFFALSE 19024
// exit ;
19022: GO 19032
// result := true ;
19024: LD_ADDR_VAR 0 6
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// end ;
19032: LD_VAR 0 6
19036: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
19042: PPUSH
19043: PPUSH
19044: PPUSH
19045: PPUSH
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
19057: PPUSH
19058: PPUSH
19059: PPUSH
19060: PPUSH
19061: PPUSH
19062: PPUSH
19063: PPUSH
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
19074: PPUSH
19075: PPUSH
19076: PPUSH
19077: PPUSH
19078: PPUSH
19079: PPUSH
19080: PPUSH
19081: PPUSH
19082: PPUSH
19083: PPUSH
19084: PPUSH
19085: PPUSH
19086: PPUSH
19087: PPUSH
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
19094: PPUSH
19095: PPUSH
19096: PPUSH
// result = [ ] ;
19097: LD_ADDR_VAR 0 7
19101: PUSH
19102: EMPTY
19103: ST_TO_ADDR
// temp_list = [ ] ;
19104: LD_ADDR_VAR 0 9
19108: PUSH
19109: EMPTY
19110: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19111: LD_VAR 0 4
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: LD_INT 3
19127: PUSH
19128: LD_INT 4
19130: PUSH
19131: LD_INT 5
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: IN
19142: NOT
19143: PUSH
19144: LD_VAR 0 1
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: IN
19159: PUSH
19160: LD_VAR 0 5
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: LD_INT 3
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: IN
19179: NOT
19180: AND
19181: OR
19182: IFFALSE 19186
// exit ;
19184: GO 37577
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19186: LD_VAR 0 1
19190: PUSH
19191: LD_INT 6
19193: PUSH
19194: LD_INT 7
19196: PUSH
19197: LD_INT 8
19199: PUSH
19200: LD_INT 13
19202: PUSH
19203: LD_INT 12
19205: PUSH
19206: LD_INT 15
19208: PUSH
19209: LD_INT 11
19211: PUSH
19212: LD_INT 14
19214: PUSH
19215: LD_INT 10
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: IN
19229: IFFALSE 19239
// btype = b_lab ;
19231: LD_ADDR_VAR 0 1
19235: PUSH
19236: LD_INT 6
19238: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19239: LD_VAR 0 6
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: IN
19258: NOT
19259: PUSH
19260: LD_VAR 0 1
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: LD_INT 3
19276: PUSH
19277: LD_INT 6
19279: PUSH
19280: LD_INT 36
19282: PUSH
19283: LD_INT 4
19285: PUSH
19286: LD_INT 5
19288: PUSH
19289: LD_INT 31
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 33
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: IN
19311: NOT
19312: PUSH
19313: LD_VAR 0 6
19317: PUSH
19318: LD_INT 1
19320: EQUAL
19321: AND
19322: OR
19323: PUSH
19324: LD_VAR 0 1
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: LD_INT 3
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: IN
19339: NOT
19340: PUSH
19341: LD_VAR 0 6
19345: PUSH
19346: LD_INT 2
19348: EQUAL
19349: AND
19350: OR
19351: IFFALSE 19361
// mode = 0 ;
19353: LD_ADDR_VAR 0 6
19357: PUSH
19358: LD_INT 0
19360: ST_TO_ADDR
// case mode of 0 :
19361: LD_VAR 0 6
19365: PUSH
19366: LD_INT 0
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 30827
19374: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19375: LD_ADDR_VAR 0 11
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 0
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: LD_INT 0
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: NEG
19445: PUSH
19446: LD_INT 1
19448: NEG
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: NEG
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 3
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19568: LD_ADDR_VAR 0 12
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: LD_INT 0
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 2
19691: NEG
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: NEG
19703: PUSH
19704: LD_INT 1
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: NEG
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 3
19725: NEG
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 3
19736: NEG
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19764: LD_ADDR_VAR 0 13
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 0
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: NEG
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: PUSH
19847: LD_INT 2
19849: NEG
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 2
19887: NEG
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: LD_INT 2
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: LD_INT 3
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 3
19923: NEG
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 3
19935: NEG
19936: PUSH
19937: LD_INT 3
19939: NEG
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19963: LD_ADDR_VAR 0 14
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: NEG
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: LD_INT 2
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 3
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 3
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 2
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20159: LD_ADDR_VAR 0 15
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 1
20217: NEG
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: NEG
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: NEG
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: NEG
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 3
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 3
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20352: LD_ADDR_VAR 0 16
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 3
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 3
20509: PUSH
20510: LD_INT 3
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 3
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20545: LD_ADDR_VAR 0 17
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: NEG
20627: PUSH
20628: LD_INT 2
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: LD_INT 2
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 0
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: NEG
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20775: LD_ADDR_VAR 0 18
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 1
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: LD_INT 2
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: PUSH
20880: LD_INT 1
20882: NEG
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: NEG
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: LD_INT 2
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21005: LD_ADDR_VAR 0 19
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: NEG
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 2
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: LD_INT 2
21101: NEG
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: NEG
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: NEG
21205: PUSH
21206: LD_INT 2
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21235: LD_ADDR_VAR 0 20
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 2
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: LD_INT 2
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: NEG
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21465: LD_ADDR_VAR 0 21
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: NEG
21535: PUSH
21536: LD_INT 1
21538: NEG
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 0
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: LD_INT 1
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 2
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: NEG
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: NEG
21665: PUSH
21666: LD_INT 2
21668: NEG
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21695: LD_ADDR_VAR 0 22
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: LD_INT 2
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 2
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 2
21882: NEG
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: NEG
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21925: LD_ADDR_VAR 0 23
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: LD_INT 2
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 2
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: LD_INT 2
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: NEG
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: NEG
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: NEG
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 2
22136: NEG
22137: PUSH
22138: LD_INT 3
22140: NEG
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: LD_INT 3
22152: NEG
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22205: LD_ADDR_VAR 0 24
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: LD_INT 1
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 2
22381: NEG
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 2
22392: NEG
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 2
22404: NEG
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 1
22430: NEG
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22481: LD_ADDR_VAR 0 25
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 2
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: LD_INT 1
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 2
22657: NEG
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: NEG
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 3
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 3
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22755: LD_ADDR_VAR 0 26
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 1
22836: NEG
22837: PUSH
22838: LD_INT 2
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 2
22942: NEG
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: LD_INT 2
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: LD_INT 3
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23031: LD_ADDR_VAR 0 27
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: NEG
23113: PUSH
23114: LD_INT 2
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: LD_INT 2
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: LD_INT 2
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 3
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23311: LD_ADDR_VAR 0 28
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 2
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: LD_INT 3
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 3
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 3
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 3
23558: NEG
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23593: LD_ADDR_VAR 0 29
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 2
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: NEG
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: LD_INT 3
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 3
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 3
23837: NEG
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23872: LD_ADDR_VAR 0 30
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 2
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 2
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 2
24038: NEG
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: NEG
24050: PUSH
24051: LD_INT 1
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: LD_INT 3
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: LD_INT 2
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: LD_INT 3
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 3
24115: NEG
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24150: LD_ADDR_VAR 0 31
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 2
24327: NEG
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: LD_INT 3
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 3
24393: NEG
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24428: LD_ADDR_VAR 0 32
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: LD_INT 1
24501: NEG
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 2
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 2
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 3
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24706: LD_ADDR_VAR 0 33
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 2
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 2
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: LD_INT 2
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 2
24861: NEG
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 2
24872: NEG
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: LD_INT 3
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24985: LD_ADDR_VAR 0 34
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 2
25164: NEG
25165: PUSH
25166: LD_INT 2
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 3
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 3
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 3
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25265: LD_ADDR_VAR 0 35
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25377: LD_ADDR_VAR 0 36
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25489: LD_ADDR_VAR 0 37
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25601: LD_ADDR_VAR 0 38
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 2
25692: NEG
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25713: LD_ADDR_VAR 0 39
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25825: LD_ADDR_VAR 0 40
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25937: LD_ADDR_VAR 0 41
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 2
26092: NEG
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 2
26103: NEG
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 2
26115: NEG
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: NEG
26128: PUSH
26129: LD_INT 3
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 3
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 3
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 3
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 3
26246: NEG
26247: PUSH
26248: LD_INT 3
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26287: LD_ADDR_VAR 0 42
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: NEG
26466: PUSH
26467: LD_INT 2
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: LD_INT 3
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: LD_INT 3
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 3
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 3
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 3
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 3
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: LD_INT 3
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 3
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 3
26584: NEG
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 3
26596: NEG
26597: PUSH
26598: LD_INT 3
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26637: LD_ADDR_VAR 0 43
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 0
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 3
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 3
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 3
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 3
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 3
26933: NEG
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 3
26944: NEG
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26985: LD_ADDR_VAR 0 44
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 2
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 2
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: LD_INT 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: NEG
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: LD_INT 2
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: NEG
27176: PUSH
27177: LD_INT 3
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 3
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 3
27228: PUSH
27229: LD_INT 3
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 2
27248: NEG
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 3
27259: NEG
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 3
27270: NEG
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 3
27282: NEG
27283: PUSH
27284: LD_INT 2
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 3
27294: NEG
27295: PUSH
27296: LD_INT 3
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27335: LD_ADDR_VAR 0 45
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 2
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 2
27460: PUSH
27461: LD_INT 2
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: LD_INT 3
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 3
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 3
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 3
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 3
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 3
27632: NEG
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: NEG
27645: PUSH
27646: LD_INT 3
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27685: LD_ADDR_VAR 0 46
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 2
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: LD_INT 2
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 2
27851: NEG
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: LD_INT 3
27878: NEG
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 3
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 3
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 3
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 3
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 3
27981: NEG
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 3
27992: NEG
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28033: LD_ADDR_VAR 0 47
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 2
28148: NEG
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28184: LD_ADDR_VAR 0 48
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: LD_INT 1
28291: NEG
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28331: LD_ADDR_VAR 0 49
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28475: LD_ADDR_VAR 0 50
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28619: LD_ADDR_VAR 0 51
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28766: LD_ADDR_VAR 0 52
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 2
28881: NEG
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 2
28893: NEG
28894: PUSH
28895: LD_INT 2
28897: NEG
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28917: LD_ADDR_VAR 0 53
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: NEG
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29147: LD_ADDR_VAR 0 54
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29377: LD_ADDR_VAR 0 55
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29607: LD_ADDR_VAR 0 56
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 2
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: LD_INT 2
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29837: LD_ADDR_VAR 0 57
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: NEG
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: LD_INT 1
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 2
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 2
30013: NEG
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: NEG
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 2
30036: NEG
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30067: LD_ADDR_VAR 0 58
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 2
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 2
30266: NEG
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30297: LD_ADDR_VAR 0 59
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30385: LD_ADDR_VAR 0 60
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30473: LD_ADDR_VAR 0 61
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30561: LD_ADDR_VAR 0 62
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30649: LD_ADDR_VAR 0 63
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30737: LD_ADDR_VAR 0 64
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// end ; 1 :
30825: GO 36722
30827: LD_INT 1
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 33458
30835: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30836: LD_ADDR_VAR 0 11
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 3
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30880: LD_ADDR_VAR 0 12
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30921: LD_ADDR_VAR 0 13
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 3
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30961: LD_ADDR_VAR 0 14
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 3
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31002: LD_ADDR_VAR 0 15
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31046: LD_ADDR_VAR 0 16
31050: PUSH
31051: LD_INT 2
31053: NEG
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: LD_INT 2
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: LD_INT 3
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31092: LD_ADDR_VAR 0 17
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 3
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 3
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31136: LD_ADDR_VAR 0 18
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31177: LD_ADDR_VAR 0 19
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: LD_INT 3
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31217: LD_ADDR_VAR 0 20
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 3
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 3
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: LIST
31257: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31258: LD_ADDR_VAR 0 21
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31302: LD_ADDR_VAR 0 22
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: LD_INT 3
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 3
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31348: LD_ADDR_VAR 0 23
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 4
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: LD_INT 3
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31392: LD_ADDR_VAR 0 24
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 4
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31433: LD_ADDR_VAR 0 25
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 4
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31473: LD_ADDR_VAR 0 26
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31514: LD_ADDR_VAR 0 27
31518: PUSH
31519: LD_INT 3
31521: NEG
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 4
31543: NEG
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31558: LD_ADDR_VAR 0 28
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: LD_INT 4
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 4
31589: NEG
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31604: LD_ADDR_VAR 0 29
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: LD_INT 3
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 3
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: LD_INT 4
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 4
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 3
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 5
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 5
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 4
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 6
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: LD_INT 6
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: LD_INT 5
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31759: LD_ADDR_VAR 0 30
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 4
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 4
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 4
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 5
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 5
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 5
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 6
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 6
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31902: LD_ADDR_VAR 0 31
31906: PUSH
31907: LD_INT 3
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 4
31939: PUSH
31940: LD_INT 3
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 4
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: LD_INT 4
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 5
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 5
31979: PUSH
31980: LD_INT 5
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: LD_INT 5
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 6
31999: PUSH
32000: LD_INT 5
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 6
32009: PUSH
32010: LD_INT 6
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 5
32019: PUSH
32020: LD_INT 6
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32041: LD_ADDR_VAR 0 32
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 4
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 4
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: LD_INT 5
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 4
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: LD_INT 6
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 6
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: LD_INT 5
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32184: LD_ADDR_VAR 0 33
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 3
32202: NEG
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: NEG
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 4
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 4
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 4
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 5
32270: NEG
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 5
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 5
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 6
32304: NEG
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 6
32315: NEG
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32339: LD_ADDR_VAR 0 34
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: LD_INT 3
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 3
32358: NEG
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: LD_INT 3
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 4
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 4
32394: NEG
32395: PUSH
32396: LD_INT 3
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 4
32406: NEG
32407: PUSH
32408: LD_INT 4
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 4
32418: NEG
32419: PUSH
32420: LD_INT 5
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 5
32430: NEG
32431: PUSH
32432: LD_INT 4
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 5
32442: NEG
32443: PUSH
32444: LD_INT 5
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 5
32454: NEG
32455: PUSH
32456: LD_INT 6
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 6
32466: NEG
32467: PUSH
32468: LD_INT 5
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 6
32478: NEG
32479: PUSH
32480: LD_INT 6
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32502: LD_ADDR_VAR 0 41
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32546: LD_ADDR_VAR 0 42
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32587: LD_ADDR_VAR 0 43
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32627: LD_ADDR_VAR 0 44
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32668: LD_ADDR_VAR 0 45
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32712: LD_ADDR_VAR 0 46
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: LD_INT 3
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: LD_INT 2
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32758: LD_ADDR_VAR 0 47
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 3
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: LD_INT 3
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32791: LD_ADDR_VAR 0 48
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32822: LD_ADDR_VAR 0 49
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32851: LD_ADDR_VAR 0 50
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32880: LD_ADDR_VAR 0 51
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32911: LD_ADDR_VAR 0 52
32915: PUSH
32916: LD_INT 3
32918: NEG
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: NEG
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32944: LD_ADDR_VAR 0 53
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 3
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 2
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32988: LD_ADDR_VAR 0 54
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33029: LD_ADDR_VAR 0 55
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 3
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33069: LD_ADDR_VAR 0 56
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33110: LD_ADDR_VAR 0 57
33114: PUSH
33115: LD_INT 2
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: NEG
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33154: LD_ADDR_VAR 0 58
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: LD_INT 3
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 3
33173: NEG
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33200: LD_ADDR_VAR 0 59
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33244: LD_ADDR_VAR 0 60
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33285: LD_ADDR_VAR 0 61
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 2
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33325: LD_ADDR_VAR 0 62
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33366: LD_ADDR_VAR 0 63
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33410: LD_ADDR_VAR 0 64
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: ST_TO_ADDR
// end ; 2 :
33456: GO 36722
33458: LD_INT 2
33460: DOUBLE
33461: EQUAL
33462: IFTRUE 33466
33464: GO 36721
33466: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33467: LD_ADDR_VAR 0 29
33471: PUSH
33472: LD_INT 4
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 5
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 4
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 5
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: PUSH
33568: LD_INT 3
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: LD_INT 3
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 4
33597: PUSH
33598: LD_INT 4
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 4
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 4
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 4
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 4
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 5
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: LD_INT 4
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 3
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: LD_INT 5
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 3
33761: NEG
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 3
33795: NEG
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 4
33806: NEG
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 4
33817: NEG
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 4
33829: NEG
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: LD_INT 4
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 4
33864: NEG
33865: PUSH
33866: LD_INT 5
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: LD_INT 4
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 3
33888: NEG
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 4
33900: NEG
33901: PUSH
33902: LD_INT 3
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 5
33912: NEG
33913: PUSH
33914: LD_INT 4
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 5
33924: NEG
33925: PUSH
33926: LD_INT 5
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 3
33936: NEG
33937: PUSH
33938: LD_INT 5
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 5
33948: NEG
33949: PUSH
33950: LD_INT 3
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34005: LD_ADDR_VAR 0 30
34009: PUSH
34010: LD_INT 4
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 4
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 5
34032: PUSH
34033: LD_INT 4
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 5
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 4
34052: PUSH
34053: LD_INT 5
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: LD_INT 4
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 5
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 3
34092: PUSH
34093: LD_INT 5
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: LD_INT 4
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 4
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 4
34195: NEG
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 4
34206: NEG
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: NEG
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 4
34240: NEG
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 5
34251: NEG
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 5
34262: NEG
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 5
34274: NEG
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 3
34297: NEG
34298: PUSH
34299: LD_INT 3
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 3
34309: NEG
34310: PUSH
34311: LD_INT 4
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: LD_INT 3
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 3
34345: NEG
34346: PUSH
34347: LD_INT 2
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 4
34357: NEG
34358: PUSH
34359: LD_INT 3
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 4
34369: NEG
34370: PUSH
34371: LD_INT 4
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: LD_INT 4
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 4
34393: NEG
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 4
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 5
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 4
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: LD_INT 3
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: LD_INT 4
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 5
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: NEG
34496: PUSH
34497: LD_INT 5
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34552: LD_ADDR_VAR 0 31
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 4
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 3
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 5
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 5
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 4
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 5
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 3
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: NEG
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: NEG
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 4
34708: NEG
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 4
34719: NEG
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 4
34731: NEG
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 4
34754: NEG
34755: PUSH
34756: LD_INT 4
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 4
34766: NEG
34767: PUSH
34768: LD_INT 5
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: LD_INT 4
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 3
34790: NEG
34791: PUSH
34792: LD_INT 3
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 4
34802: NEG
34803: PUSH
34804: LD_INT 3
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 5
34814: NEG
34815: PUSH
34816: LD_INT 4
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 5
34826: NEG
34827: PUSH
34828: LD_INT 5
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: NEG
34839: PUSH
34840: LD_INT 5
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 5
34850: NEG
34851: PUSH
34852: LD_INT 3
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 3
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 4
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 4
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: LD_INT 4
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 4
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 5
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 5
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35102: LD_ADDR_VAR 0 32
35106: PUSH
35107: LD_INT 4
35109: NEG
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 4
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 3
35132: NEG
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 3
35143: NEG
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 4
35154: NEG
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 5
35165: NEG
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 5
35176: NEG
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 5
35188: NEG
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: LD_INT 3
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 3
35223: NEG
35224: PUSH
35225: LD_INT 4
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 2
35235: NEG
35236: PUSH
35237: LD_INT 3
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 3
35259: NEG
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 4
35271: NEG
35272: PUSH
35273: LD_INT 3
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 4
35283: NEG
35284: PUSH
35285: LD_INT 4
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 4
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 4
35307: NEG
35308: PUSH
35309: LD_INT 2
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: LD_INT 4
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 5
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 4
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 3
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 3
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: LD_INT 4
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 5
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 3
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: LD_INT 5
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 3
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 4
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 4
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 2
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 4
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 4
35514: PUSH
35515: LD_INT 4
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 4
35524: PUSH
35525: LD_INT 3
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 5
35534: PUSH
35535: LD_INT 4
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 5
35544: PUSH
35545: LD_INT 5
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 4
35554: PUSH
35555: LD_INT 5
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: LD_INT 4
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: LD_INT 3
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 5
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 3
35594: PUSH
35595: LD_INT 5
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35649: LD_ADDR_VAR 0 33
35653: PUSH
35654: LD_INT 4
35656: NEG
35657: PUSH
35658: LD_INT 4
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 4
35668: NEG
35669: PUSH
35670: LD_INT 5
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: LD_INT 4
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 3
35692: NEG
35693: PUSH
35694: LD_INT 3
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 4
35704: NEG
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 5
35716: NEG
35717: PUSH
35718: LD_INT 4
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 5
35728: NEG
35729: PUSH
35730: LD_INT 5
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 3
35740: NEG
35741: PUSH
35742: LD_INT 5
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 5
35752: NEG
35753: PUSH
35754: LD_INT 3
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 3
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 4
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 3
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 4
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: LD_INT 4
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 4
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 4
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 5
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 5
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 4
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 5
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 3
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 4
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 4
35989: PUSH
35990: LD_INT 4
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 3
35999: PUSH
36000: LD_INT 4
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 3
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 4
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: LD_INT 4
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 4
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 4
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 5
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 5
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: LD_INT 4
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 5
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36187: LD_ADDR_VAR 0 34
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: LD_INT 4
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 5
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 4
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 3
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 3
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 4
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: LD_INT 5
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 3
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: LD_INT 5
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 4
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 4
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 3
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 4
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 4
36389: PUSH
36390: LD_INT 4
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 4
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: LD_INT 4
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 5
36419: PUSH
36420: LD_INT 5
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 4
36429: PUSH
36430: LD_INT 5
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 3
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 5
36459: PUSH
36460: LD_INT 3
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 3
36469: PUSH
36470: LD_INT 5
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 3
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 3
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 4
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 4
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 3
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 4
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 4
36572: NEG
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 4
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 3
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 3
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 4
36617: NEG
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 5
36628: NEG
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 5
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 5
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 3
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// end ; end ;
36719: GO 36722
36721: POP
// case btype of b_depot , b_warehouse :
36722: LD_VAR 0 1
36726: PUSH
36727: LD_INT 0
36729: DOUBLE
36730: EQUAL
36731: IFTRUE 36741
36733: LD_INT 1
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36741
36739: GO 36942
36741: POP
// case nation of nation_american :
36742: LD_VAR 0 5
36746: PUSH
36747: LD_INT 1
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36811
36755: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36756: LD_ADDR_VAR 0 9
36760: PUSH
36761: LD_VAR 0 11
36765: PUSH
36766: LD_VAR 0 12
36770: PUSH
36771: LD_VAR 0 13
36775: PUSH
36776: LD_VAR 0 14
36780: PUSH
36781: LD_VAR 0 15
36785: PUSH
36786: LD_VAR 0 16
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: PUSH
36799: LD_VAR 0 4
36803: PUSH
36804: LD_INT 1
36806: PLUS
36807: ARRAY
36808: ST_TO_ADDR
36809: GO 36940
36811: LD_INT 2
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 36875
36819: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36820: LD_ADDR_VAR 0 9
36824: PUSH
36825: LD_VAR 0 17
36829: PUSH
36830: LD_VAR 0 18
36834: PUSH
36835: LD_VAR 0 19
36839: PUSH
36840: LD_VAR 0 20
36844: PUSH
36845: LD_VAR 0 21
36849: PUSH
36850: LD_VAR 0 22
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: PUSH
36863: LD_VAR 0 4
36867: PUSH
36868: LD_INT 1
36870: PLUS
36871: ARRAY
36872: ST_TO_ADDR
36873: GO 36940
36875: LD_INT 3
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 36939
36883: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: LD_VAR 0 23
36893: PUSH
36894: LD_VAR 0 24
36898: PUSH
36899: LD_VAR 0 25
36903: PUSH
36904: LD_VAR 0 26
36908: PUSH
36909: LD_VAR 0 27
36913: PUSH
36914: LD_VAR 0 28
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: PUSH
36927: LD_VAR 0 4
36931: PUSH
36932: LD_INT 1
36934: PLUS
36935: ARRAY
36936: ST_TO_ADDR
36937: GO 36940
36939: POP
36940: GO 37495
36942: LD_INT 2
36944: DOUBLE
36945: EQUAL
36946: IFTRUE 36956
36948: LD_INT 3
36950: DOUBLE
36951: EQUAL
36952: IFTRUE 36956
36954: GO 37012
36956: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36957: LD_ADDR_VAR 0 9
36961: PUSH
36962: LD_VAR 0 29
36966: PUSH
36967: LD_VAR 0 30
36971: PUSH
36972: LD_VAR 0 31
36976: PUSH
36977: LD_VAR 0 32
36981: PUSH
36982: LD_VAR 0 33
36986: PUSH
36987: LD_VAR 0 34
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: LD_VAR 0 4
37004: PUSH
37005: LD_INT 1
37007: PLUS
37008: ARRAY
37009: ST_TO_ADDR
37010: GO 37495
37012: LD_INT 16
37014: DOUBLE
37015: EQUAL
37016: IFTRUE 37074
37018: LD_INT 17
37020: DOUBLE
37021: EQUAL
37022: IFTRUE 37074
37024: LD_INT 18
37026: DOUBLE
37027: EQUAL
37028: IFTRUE 37074
37030: LD_INT 19
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37074
37036: LD_INT 22
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37074
37042: LD_INT 20
37044: DOUBLE
37045: EQUAL
37046: IFTRUE 37074
37048: LD_INT 21
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37074
37054: LD_INT 23
37056: DOUBLE
37057: EQUAL
37058: IFTRUE 37074
37060: LD_INT 24
37062: DOUBLE
37063: EQUAL
37064: IFTRUE 37074
37066: LD_INT 25
37068: DOUBLE
37069: EQUAL
37070: IFTRUE 37074
37072: GO 37130
37074: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37075: LD_ADDR_VAR 0 9
37079: PUSH
37080: LD_VAR 0 35
37084: PUSH
37085: LD_VAR 0 36
37089: PUSH
37090: LD_VAR 0 37
37094: PUSH
37095: LD_VAR 0 38
37099: PUSH
37100: LD_VAR 0 39
37104: PUSH
37105: LD_VAR 0 40
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: PUSH
37118: LD_VAR 0 4
37122: PUSH
37123: LD_INT 1
37125: PLUS
37126: ARRAY
37127: ST_TO_ADDR
37128: GO 37495
37130: LD_INT 6
37132: DOUBLE
37133: EQUAL
37134: IFTRUE 37186
37136: LD_INT 7
37138: DOUBLE
37139: EQUAL
37140: IFTRUE 37186
37142: LD_INT 8
37144: DOUBLE
37145: EQUAL
37146: IFTRUE 37186
37148: LD_INT 13
37150: DOUBLE
37151: EQUAL
37152: IFTRUE 37186
37154: LD_INT 12
37156: DOUBLE
37157: EQUAL
37158: IFTRUE 37186
37160: LD_INT 15
37162: DOUBLE
37163: EQUAL
37164: IFTRUE 37186
37166: LD_INT 11
37168: DOUBLE
37169: EQUAL
37170: IFTRUE 37186
37172: LD_INT 14
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37186
37178: LD_INT 10
37180: DOUBLE
37181: EQUAL
37182: IFTRUE 37186
37184: GO 37242
37186: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37187: LD_ADDR_VAR 0 9
37191: PUSH
37192: LD_VAR 0 41
37196: PUSH
37197: LD_VAR 0 42
37201: PUSH
37202: LD_VAR 0 43
37206: PUSH
37207: LD_VAR 0 44
37211: PUSH
37212: LD_VAR 0 45
37216: PUSH
37217: LD_VAR 0 46
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: PUSH
37230: LD_VAR 0 4
37234: PUSH
37235: LD_INT 1
37237: PLUS
37238: ARRAY
37239: ST_TO_ADDR
37240: GO 37495
37242: LD_INT 36
37244: DOUBLE
37245: EQUAL
37246: IFTRUE 37250
37248: GO 37306
37250: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37251: LD_ADDR_VAR 0 9
37255: PUSH
37256: LD_VAR 0 47
37260: PUSH
37261: LD_VAR 0 48
37265: PUSH
37266: LD_VAR 0 49
37270: PUSH
37271: LD_VAR 0 50
37275: PUSH
37276: LD_VAR 0 51
37280: PUSH
37281: LD_VAR 0 52
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: PUSH
37294: LD_VAR 0 4
37298: PUSH
37299: LD_INT 1
37301: PLUS
37302: ARRAY
37303: ST_TO_ADDR
37304: GO 37495
37306: LD_INT 4
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37332
37312: LD_INT 5
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37332
37318: LD_INT 34
37320: DOUBLE
37321: EQUAL
37322: IFTRUE 37332
37324: LD_INT 37
37326: DOUBLE
37327: EQUAL
37328: IFTRUE 37332
37330: GO 37388
37332: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37333: LD_ADDR_VAR 0 9
37337: PUSH
37338: LD_VAR 0 53
37342: PUSH
37343: LD_VAR 0 54
37347: PUSH
37348: LD_VAR 0 55
37352: PUSH
37353: LD_VAR 0 56
37357: PUSH
37358: LD_VAR 0 57
37362: PUSH
37363: LD_VAR 0 58
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: PUSH
37376: LD_VAR 0 4
37380: PUSH
37381: LD_INT 1
37383: PLUS
37384: ARRAY
37385: ST_TO_ADDR
37386: GO 37495
37388: LD_INT 31
37390: DOUBLE
37391: EQUAL
37392: IFTRUE 37438
37394: LD_INT 32
37396: DOUBLE
37397: EQUAL
37398: IFTRUE 37438
37400: LD_INT 33
37402: DOUBLE
37403: EQUAL
37404: IFTRUE 37438
37406: LD_INT 27
37408: DOUBLE
37409: EQUAL
37410: IFTRUE 37438
37412: LD_INT 26
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37438
37418: LD_INT 28
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37438
37424: LD_INT 29
37426: DOUBLE
37427: EQUAL
37428: IFTRUE 37438
37430: LD_INT 30
37432: DOUBLE
37433: EQUAL
37434: IFTRUE 37438
37436: GO 37494
37438: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37439: LD_ADDR_VAR 0 9
37443: PUSH
37444: LD_VAR 0 59
37448: PUSH
37449: LD_VAR 0 60
37453: PUSH
37454: LD_VAR 0 61
37458: PUSH
37459: LD_VAR 0 62
37463: PUSH
37464: LD_VAR 0 63
37468: PUSH
37469: LD_VAR 0 64
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: PUSH
37482: LD_VAR 0 4
37486: PUSH
37487: LD_INT 1
37489: PLUS
37490: ARRAY
37491: ST_TO_ADDR
37492: GO 37495
37494: POP
// temp_list2 = [ ] ;
37495: LD_ADDR_VAR 0 10
37499: PUSH
37500: EMPTY
37501: ST_TO_ADDR
// for i in temp_list do
37502: LD_ADDR_VAR 0 8
37506: PUSH
37507: LD_VAR 0 9
37511: PUSH
37512: FOR_IN
37513: IFFALSE 37565
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37515: LD_ADDR_VAR 0 10
37519: PUSH
37520: LD_VAR 0 10
37524: PUSH
37525: LD_VAR 0 8
37529: PUSH
37530: LD_INT 1
37532: ARRAY
37533: PUSH
37534: LD_VAR 0 2
37538: PLUS
37539: PUSH
37540: LD_VAR 0 8
37544: PUSH
37545: LD_INT 2
37547: ARRAY
37548: PUSH
37549: LD_VAR 0 3
37553: PLUS
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: ADD
37562: ST_TO_ADDR
37563: GO 37512
37565: POP
37566: POP
// result = temp_list2 ;
37567: LD_ADDR_VAR 0 7
37571: PUSH
37572: LD_VAR 0 10
37576: ST_TO_ADDR
// end ;
37577: LD_VAR 0 7
37581: RET
// export function EnemyInRange ( unit , dist ) ; begin
37582: LD_INT 0
37584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37585: LD_ADDR_VAR 0 3
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 255
37599: PPUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 250
37609: PPUSH
37610: LD_VAR 0 1
37614: PPUSH
37615: CALL_OW 251
37619: PPUSH
37620: LD_VAR 0 2
37624: PPUSH
37625: CALL 10955 0 4
37629: PUSH
37630: LD_INT 4
37632: ARRAY
37633: ST_TO_ADDR
// end ;
37634: LD_VAR 0 3
37638: RET
// export function PlayerSeeMe ( unit ) ; begin
37639: LD_INT 0
37641: PPUSH
// result := See ( your_side , unit ) ;
37642: LD_ADDR_VAR 0 2
37646: PUSH
37647: LD_OWVAR 2
37651: PPUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 292
37661: ST_TO_ADDR
// end ;
37662: LD_VAR 0 2
37666: RET
// export function ReverseDir ( unit ) ; begin
37667: LD_INT 0
37669: PPUSH
// if not unit then
37670: LD_VAR 0 1
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 37702
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 254
37693: PUSH
37694: LD_INT 3
37696: PLUS
37697: PUSH
37698: LD_INT 6
37700: MOD
37701: ST_TO_ADDR
// end ;
37702: LD_VAR 0 2
37706: RET
// export function ReverseArray ( array ) ; var i ; begin
37707: LD_INT 0
37709: PPUSH
37710: PPUSH
// if not array then
37711: LD_VAR 0 1
37715: NOT
37716: IFFALSE 37720
// exit ;
37718: GO 37775
// result := [ ] ;
37720: LD_ADDR_VAR 0 2
37724: PUSH
37725: EMPTY
37726: ST_TO_ADDR
// for i := array downto 1 do
37727: LD_ADDR_VAR 0 3
37731: PUSH
37732: DOUBLE
37733: LD_VAR 0 1
37737: INC
37738: ST_TO_ADDR
37739: LD_INT 1
37741: PUSH
37742: FOR_DOWNTO
37743: IFFALSE 37773
// result := Join ( result , array [ i ] ) ;
37745: LD_ADDR_VAR 0 2
37749: PUSH
37750: LD_VAR 0 2
37754: PPUSH
37755: LD_VAR 0 1
37759: PUSH
37760: LD_VAR 0 3
37764: ARRAY
37765: PPUSH
37766: CALL 42431 0 2
37770: ST_TO_ADDR
37771: GO 37742
37773: POP
37774: POP
// end ;
37775: LD_VAR 0 2
37779: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37780: LD_INT 0
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
// if not unit or not hexes then
37788: LD_VAR 0 1
37792: NOT
37793: PUSH
37794: LD_VAR 0 2
37798: NOT
37799: OR
37800: IFFALSE 37804
// exit ;
37802: GO 37927
// dist := 9999 ;
37804: LD_ADDR_VAR 0 5
37808: PUSH
37809: LD_INT 9999
37811: ST_TO_ADDR
// for i = 1 to hexes do
37812: LD_ADDR_VAR 0 4
37816: PUSH
37817: DOUBLE
37818: LD_INT 1
37820: DEC
37821: ST_TO_ADDR
37822: LD_VAR 0 2
37826: PUSH
37827: FOR_TO
37828: IFFALSE 37915
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37830: LD_ADDR_VAR 0 6
37834: PUSH
37835: LD_VAR 0 1
37839: PPUSH
37840: LD_VAR 0 2
37844: PUSH
37845: LD_VAR 0 4
37849: ARRAY
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: PPUSH
37855: LD_VAR 0 2
37859: PUSH
37860: LD_VAR 0 4
37864: ARRAY
37865: PUSH
37866: LD_INT 2
37868: ARRAY
37869: PPUSH
37870: CALL_OW 297
37874: ST_TO_ADDR
// if tdist < dist then
37875: LD_VAR 0 6
37879: PUSH
37880: LD_VAR 0 5
37884: LESS
37885: IFFALSE 37913
// begin hex := hexes [ i ] ;
37887: LD_ADDR_VAR 0 8
37891: PUSH
37892: LD_VAR 0 2
37896: PUSH
37897: LD_VAR 0 4
37901: ARRAY
37902: ST_TO_ADDR
// dist := tdist ;
37903: LD_ADDR_VAR 0 5
37907: PUSH
37908: LD_VAR 0 6
37912: ST_TO_ADDR
// end ; end ;
37913: GO 37827
37915: POP
37916: POP
// result := hex ;
37917: LD_ADDR_VAR 0 3
37921: PUSH
37922: LD_VAR 0 8
37926: ST_TO_ADDR
// end ;
37927: LD_VAR 0 3
37931: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37936: LD_VAR 0 1
37940: NOT
37941: PUSH
37942: LD_VAR 0 1
37946: PUSH
37947: LD_INT 21
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 23
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PPUSH
37971: CALL_OW 69
37975: IN
37976: NOT
37977: OR
37978: IFFALSE 37982
// exit ;
37980: GO 38029
// for i = 1 to 3 do
37982: LD_ADDR_VAR 0 3
37986: PUSH
37987: DOUBLE
37988: LD_INT 1
37990: DEC
37991: ST_TO_ADDR
37992: LD_INT 3
37994: PUSH
37995: FOR_TO
37996: IFFALSE 38027
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 250
38007: PPUSH
38008: LD_VAR 0 1
38012: PPUSH
38013: CALL_OW 251
38017: PPUSH
38018: LD_INT 1
38020: PPUSH
38021: CALL_OW 453
38025: GO 37995
38027: POP
38028: POP
// end ;
38029: LD_VAR 0 2
38033: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38034: LD_INT 0
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
38042: LD_VAR 0 1
38046: NOT
38047: PUSH
38048: LD_VAR 0 2
38052: NOT
38053: OR
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 314
38064: OR
38065: IFFALSE 38069
// exit ;
38067: GO 38536
// if GetLives ( i ) < 250 then
38069: LD_VAR 0 4
38073: PPUSH
38074: CALL_OW 256
38078: PUSH
38079: LD_INT 250
38081: LESS
38082: IFFALSE 38095
// begin ComAutodestruct ( i ) ;
38084: LD_VAR 0 4
38088: PPUSH
38089: CALL 37932 0 1
// exit ;
38093: GO 38536
// end ; x := GetX ( enemy_unit ) ;
38095: LD_ADDR_VAR 0 7
38099: PUSH
38100: LD_VAR 0 2
38104: PPUSH
38105: CALL_OW 250
38109: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38110: LD_ADDR_VAR 0 8
38114: PUSH
38115: LD_VAR 0 2
38119: PPUSH
38120: CALL_OW 251
38124: ST_TO_ADDR
// if not x or not y then
38125: LD_VAR 0 7
38129: NOT
38130: PUSH
38131: LD_VAR 0 8
38135: NOT
38136: OR
38137: IFFALSE 38141
// exit ;
38139: GO 38536
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38141: LD_ADDR_VAR 0 6
38145: PUSH
38146: LD_VAR 0 7
38150: PPUSH
38151: LD_INT 0
38153: PPUSH
38154: LD_INT 4
38156: PPUSH
38157: CALL_OW 272
38161: PUSH
38162: LD_VAR 0 8
38166: PPUSH
38167: LD_INT 0
38169: PPUSH
38170: LD_INT 4
38172: PPUSH
38173: CALL_OW 273
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_VAR 0 7
38186: PPUSH
38187: LD_INT 1
38189: PPUSH
38190: LD_INT 4
38192: PPUSH
38193: CALL_OW 272
38197: PUSH
38198: LD_VAR 0 8
38202: PPUSH
38203: LD_INT 1
38205: PPUSH
38206: LD_INT 4
38208: PPUSH
38209: CALL_OW 273
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_VAR 0 7
38222: PPUSH
38223: LD_INT 2
38225: PPUSH
38226: LD_INT 4
38228: PPUSH
38229: CALL_OW 272
38233: PUSH
38234: LD_VAR 0 8
38238: PPUSH
38239: LD_INT 2
38241: PPUSH
38242: LD_INT 4
38244: PPUSH
38245: CALL_OW 273
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_VAR 0 7
38258: PPUSH
38259: LD_INT 3
38261: PPUSH
38262: LD_INT 4
38264: PPUSH
38265: CALL_OW 272
38269: PUSH
38270: LD_VAR 0 8
38274: PPUSH
38275: LD_INT 3
38277: PPUSH
38278: LD_INT 4
38280: PPUSH
38281: CALL_OW 273
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_VAR 0 7
38294: PPUSH
38295: LD_INT 4
38297: PPUSH
38298: LD_INT 4
38300: PPUSH
38301: CALL_OW 272
38305: PUSH
38306: LD_VAR 0 8
38310: PPUSH
38311: LD_INT 4
38313: PPUSH
38314: LD_INT 4
38316: PPUSH
38317: CALL_OW 273
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_VAR 0 7
38330: PPUSH
38331: LD_INT 5
38333: PPUSH
38334: LD_INT 4
38336: PPUSH
38337: CALL_OW 272
38341: PUSH
38342: LD_VAR 0 8
38346: PPUSH
38347: LD_INT 5
38349: PPUSH
38350: LD_INT 4
38352: PPUSH
38353: CALL_OW 273
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
// for i = tmp downto 1 do
38370: LD_ADDR_VAR 0 4
38374: PUSH
38375: DOUBLE
38376: LD_VAR 0 6
38380: INC
38381: ST_TO_ADDR
38382: LD_INT 1
38384: PUSH
38385: FOR_DOWNTO
38386: IFFALSE 38487
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38388: LD_VAR 0 6
38392: PUSH
38393: LD_VAR 0 4
38397: ARRAY
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: PPUSH
38403: LD_VAR 0 6
38407: PUSH
38408: LD_VAR 0 4
38412: ARRAY
38413: PUSH
38414: LD_INT 2
38416: ARRAY
38417: PPUSH
38418: CALL_OW 488
38422: NOT
38423: PUSH
38424: LD_VAR 0 6
38428: PUSH
38429: LD_VAR 0 4
38433: ARRAY
38434: PUSH
38435: LD_INT 1
38437: ARRAY
38438: PPUSH
38439: LD_VAR 0 6
38443: PUSH
38444: LD_VAR 0 4
38448: ARRAY
38449: PUSH
38450: LD_INT 2
38452: ARRAY
38453: PPUSH
38454: CALL_OW 428
38458: PUSH
38459: LD_INT 0
38461: NONEQUAL
38462: OR
38463: IFFALSE 38485
// tmp := Delete ( tmp , i ) ;
38465: LD_ADDR_VAR 0 6
38469: PUSH
38470: LD_VAR 0 6
38474: PPUSH
38475: LD_VAR 0 4
38479: PPUSH
38480: CALL_OW 3
38484: ST_TO_ADDR
38485: GO 38385
38487: POP
38488: POP
// j := GetClosestHex ( unit , tmp ) ;
38489: LD_ADDR_VAR 0 5
38493: PUSH
38494: LD_VAR 0 1
38498: PPUSH
38499: LD_VAR 0 6
38503: PPUSH
38504: CALL 37780 0 2
38508: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38509: LD_VAR 0 1
38513: PPUSH
38514: LD_VAR 0 5
38518: PUSH
38519: LD_INT 1
38521: ARRAY
38522: PPUSH
38523: LD_VAR 0 5
38527: PUSH
38528: LD_INT 2
38530: ARRAY
38531: PPUSH
38532: CALL_OW 111
// end ;
38536: LD_VAR 0 3
38540: RET
// export function PrepareApemanSoldier ( ) ; begin
38541: LD_INT 0
38543: PPUSH
// uc_nation := 0 ;
38544: LD_ADDR_OWVAR 21
38548: PUSH
38549: LD_INT 0
38551: ST_TO_ADDR
// hc_sex := sex_male ;
38552: LD_ADDR_OWVAR 27
38556: PUSH
38557: LD_INT 1
38559: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38560: LD_ADDR_OWVAR 28
38564: PUSH
38565: LD_INT 15
38567: ST_TO_ADDR
// hc_gallery :=  ;
38568: LD_ADDR_OWVAR 33
38572: PUSH
38573: LD_STRING 
38575: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38576: LD_ADDR_OWVAR 31
38580: PUSH
38581: LD_INT 0
38583: PPUSH
38584: LD_INT 3
38586: PPUSH
38587: CALL_OW 12
38591: PUSH
38592: LD_INT 0
38594: PPUSH
38595: LD_INT 3
38597: PPUSH
38598: CALL_OW 12
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: ST_TO_ADDR
// end ;
38615: LD_VAR 0 1
38619: RET
// export function PrepareApemanEngineer ( ) ; begin
38620: LD_INT 0
38622: PPUSH
// uc_nation := 0 ;
38623: LD_ADDR_OWVAR 21
38627: PUSH
38628: LD_INT 0
38630: ST_TO_ADDR
// hc_sex := sex_male ;
38631: LD_ADDR_OWVAR 27
38635: PUSH
38636: LD_INT 1
38638: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38639: LD_ADDR_OWVAR 28
38643: PUSH
38644: LD_INT 16
38646: ST_TO_ADDR
// hc_gallery :=  ;
38647: LD_ADDR_OWVAR 33
38651: PUSH
38652: LD_STRING 
38654: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38655: LD_ADDR_OWVAR 31
38659: PUSH
38660: LD_INT 0
38662: PPUSH
38663: LD_INT 3
38665: PPUSH
38666: CALL_OW 12
38670: PUSH
38671: LD_INT 0
38673: PPUSH
38674: LD_INT 3
38676: PPUSH
38677: CALL_OW 12
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// end ;
38694: LD_VAR 0 1
38698: RET
// export function PrepareApeman ( agressivity ) ; begin
38699: LD_INT 0
38701: PPUSH
// uc_side := 0 ;
38702: LD_ADDR_OWVAR 20
38706: PUSH
38707: LD_INT 0
38709: ST_TO_ADDR
// uc_nation := 0 ;
38710: LD_ADDR_OWVAR 21
38714: PUSH
38715: LD_INT 0
38717: ST_TO_ADDR
// hc_sex := sex_male ;
38718: LD_ADDR_OWVAR 27
38722: PUSH
38723: LD_INT 1
38725: ST_TO_ADDR
// hc_class := class_apeman ;
38726: LD_ADDR_OWVAR 28
38730: PUSH
38731: LD_INT 12
38733: ST_TO_ADDR
// hc_gallery :=  ;
38734: LD_ADDR_OWVAR 33
38738: PUSH
38739: LD_STRING 
38741: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38742: LD_ADDR_OWVAR 35
38746: PUSH
38747: LD_VAR 0 1
38751: NEG
38752: PPUSH
38753: LD_VAR 0 1
38757: PPUSH
38758: CALL_OW 12
38762: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38763: LD_ADDR_OWVAR 31
38767: PUSH
38768: LD_INT 0
38770: PPUSH
38771: LD_INT 3
38773: PPUSH
38774: CALL_OW 12
38778: PUSH
38779: LD_INT 0
38781: PPUSH
38782: LD_INT 3
38784: PPUSH
38785: CALL_OW 12
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: ST_TO_ADDR
// end ;
38802: LD_VAR 0 2
38806: RET
// export function PrepareTiger ( agressivity ) ; begin
38807: LD_INT 0
38809: PPUSH
// uc_side := 0 ;
38810: LD_ADDR_OWVAR 20
38814: PUSH
38815: LD_INT 0
38817: ST_TO_ADDR
// uc_nation := 0 ;
38818: LD_ADDR_OWVAR 21
38822: PUSH
38823: LD_INT 0
38825: ST_TO_ADDR
// hc_class := class_tiger ;
38826: LD_ADDR_OWVAR 28
38830: PUSH
38831: LD_INT 14
38833: ST_TO_ADDR
// hc_gallery :=  ;
38834: LD_ADDR_OWVAR 33
38838: PUSH
38839: LD_STRING 
38841: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38842: LD_ADDR_OWVAR 35
38846: PUSH
38847: LD_VAR 0 1
38851: NEG
38852: PPUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL_OW 12
38862: ST_TO_ADDR
// end ;
38863: LD_VAR 0 2
38867: RET
// export function PrepareEnchidna ( ) ; begin
38868: LD_INT 0
38870: PPUSH
// uc_side := 0 ;
38871: LD_ADDR_OWVAR 20
38875: PUSH
38876: LD_INT 0
38878: ST_TO_ADDR
// uc_nation := 0 ;
38879: LD_ADDR_OWVAR 21
38883: PUSH
38884: LD_INT 0
38886: ST_TO_ADDR
// hc_class := class_baggie ;
38887: LD_ADDR_OWVAR 28
38891: PUSH
38892: LD_INT 13
38894: ST_TO_ADDR
// hc_gallery :=  ;
38895: LD_ADDR_OWVAR 33
38899: PUSH
38900: LD_STRING 
38902: ST_TO_ADDR
// end ;
38903: LD_VAR 0 1
38907: RET
// export function PrepareFrog ( ) ; begin
38908: LD_INT 0
38910: PPUSH
// uc_side := 0 ;
38911: LD_ADDR_OWVAR 20
38915: PUSH
38916: LD_INT 0
38918: ST_TO_ADDR
// uc_nation := 0 ;
38919: LD_ADDR_OWVAR 21
38923: PUSH
38924: LD_INT 0
38926: ST_TO_ADDR
// hc_class := class_frog ;
38927: LD_ADDR_OWVAR 28
38931: PUSH
38932: LD_INT 19
38934: ST_TO_ADDR
// hc_gallery :=  ;
38935: LD_ADDR_OWVAR 33
38939: PUSH
38940: LD_STRING 
38942: ST_TO_ADDR
// end ;
38943: LD_VAR 0 1
38947: RET
// export function PrepareFish ( ) ; begin
38948: LD_INT 0
38950: PPUSH
// uc_side := 0 ;
38951: LD_ADDR_OWVAR 20
38955: PUSH
38956: LD_INT 0
38958: ST_TO_ADDR
// uc_nation := 0 ;
38959: LD_ADDR_OWVAR 21
38963: PUSH
38964: LD_INT 0
38966: ST_TO_ADDR
// hc_class := class_fish ;
38967: LD_ADDR_OWVAR 28
38971: PUSH
38972: LD_INT 20
38974: ST_TO_ADDR
// hc_gallery :=  ;
38975: LD_ADDR_OWVAR 33
38979: PUSH
38980: LD_STRING 
38982: ST_TO_ADDR
// end ;
38983: LD_VAR 0 1
38987: RET
// export function PrepareBird ( ) ; begin
38988: LD_INT 0
38990: PPUSH
// uc_side := 0 ;
38991: LD_ADDR_OWVAR 20
38995: PUSH
38996: LD_INT 0
38998: ST_TO_ADDR
// uc_nation := 0 ;
38999: LD_ADDR_OWVAR 21
39003: PUSH
39004: LD_INT 0
39006: ST_TO_ADDR
// hc_class := class_phororhacos ;
39007: LD_ADDR_OWVAR 28
39011: PUSH
39012: LD_INT 18
39014: ST_TO_ADDR
// hc_gallery :=  ;
39015: LD_ADDR_OWVAR 33
39019: PUSH
39020: LD_STRING 
39022: ST_TO_ADDR
// end ;
39023: LD_VAR 0 1
39027: RET
// export function PrepareHorse ( ) ; begin
39028: LD_INT 0
39030: PPUSH
// uc_side := 0 ;
39031: LD_ADDR_OWVAR 20
39035: PUSH
39036: LD_INT 0
39038: ST_TO_ADDR
// uc_nation := 0 ;
39039: LD_ADDR_OWVAR 21
39043: PUSH
39044: LD_INT 0
39046: ST_TO_ADDR
// hc_class := class_horse ;
39047: LD_ADDR_OWVAR 28
39051: PUSH
39052: LD_INT 21
39054: ST_TO_ADDR
// hc_gallery :=  ;
39055: LD_ADDR_OWVAR 33
39059: PUSH
39060: LD_STRING 
39062: ST_TO_ADDR
// end ;
39063: LD_VAR 0 1
39067: RET
// export function PrepareMastodont ( ) ; begin
39068: LD_INT 0
39070: PPUSH
// uc_side := 0 ;
39071: LD_ADDR_OWVAR 20
39075: PUSH
39076: LD_INT 0
39078: ST_TO_ADDR
// uc_nation := 0 ;
39079: LD_ADDR_OWVAR 21
39083: PUSH
39084: LD_INT 0
39086: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39087: LD_ADDR_OWVAR 37
39091: PUSH
39092: LD_INT 31
39094: ST_TO_ADDR
// vc_control := control_rider ;
39095: LD_ADDR_OWVAR 38
39099: PUSH
39100: LD_INT 4
39102: ST_TO_ADDR
// end ;
39103: LD_VAR 0 1
39107: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39108: LD_INT 0
39110: PPUSH
39111: PPUSH
39112: PPUSH
// uc_side = 0 ;
39113: LD_ADDR_OWVAR 20
39117: PUSH
39118: LD_INT 0
39120: ST_TO_ADDR
// uc_nation = 0 ;
39121: LD_ADDR_OWVAR 21
39125: PUSH
39126: LD_INT 0
39128: ST_TO_ADDR
// InitHc_All ( ) ;
39129: CALL_OW 584
// InitVc ;
39133: CALL_OW 20
// if mastodonts then
39137: LD_VAR 0 6
39141: IFFALSE 39208
// for i = 1 to mastodonts do
39143: LD_ADDR_VAR 0 11
39147: PUSH
39148: DOUBLE
39149: LD_INT 1
39151: DEC
39152: ST_TO_ADDR
39153: LD_VAR 0 6
39157: PUSH
39158: FOR_TO
39159: IFFALSE 39206
// begin vc_chassis := 31 ;
39161: LD_ADDR_OWVAR 37
39165: PUSH
39166: LD_INT 31
39168: ST_TO_ADDR
// vc_control := control_rider ;
39169: LD_ADDR_OWVAR 38
39173: PUSH
39174: LD_INT 4
39176: ST_TO_ADDR
// animal := CreateVehicle ;
39177: LD_ADDR_VAR 0 12
39181: PUSH
39182: CALL_OW 45
39186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39187: LD_VAR 0 12
39191: PPUSH
39192: LD_VAR 0 8
39196: PPUSH
39197: LD_INT 0
39199: PPUSH
39200: CALL 41336 0 3
// end ;
39204: GO 39158
39206: POP
39207: POP
// if horses then
39208: LD_VAR 0 5
39212: IFFALSE 39279
// for i = 1 to horses do
39214: LD_ADDR_VAR 0 11
39218: PUSH
39219: DOUBLE
39220: LD_INT 1
39222: DEC
39223: ST_TO_ADDR
39224: LD_VAR 0 5
39228: PUSH
39229: FOR_TO
39230: IFFALSE 39277
// begin hc_class := 21 ;
39232: LD_ADDR_OWVAR 28
39236: PUSH
39237: LD_INT 21
39239: ST_TO_ADDR
// hc_gallery :=  ;
39240: LD_ADDR_OWVAR 33
39244: PUSH
39245: LD_STRING 
39247: ST_TO_ADDR
// animal := CreateHuman ;
39248: LD_ADDR_VAR 0 12
39252: PUSH
39253: CALL_OW 44
39257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39258: LD_VAR 0 12
39262: PPUSH
39263: LD_VAR 0 8
39267: PPUSH
39268: LD_INT 0
39270: PPUSH
39271: CALL 41336 0 3
// end ;
39275: GO 39229
39277: POP
39278: POP
// if birds then
39279: LD_VAR 0 1
39283: IFFALSE 39350
// for i = 1 to birds do
39285: LD_ADDR_VAR 0 11
39289: PUSH
39290: DOUBLE
39291: LD_INT 1
39293: DEC
39294: ST_TO_ADDR
39295: LD_VAR 0 1
39299: PUSH
39300: FOR_TO
39301: IFFALSE 39348
// begin hc_class := 18 ;
39303: LD_ADDR_OWVAR 28
39307: PUSH
39308: LD_INT 18
39310: ST_TO_ADDR
// hc_gallery =  ;
39311: LD_ADDR_OWVAR 33
39315: PUSH
39316: LD_STRING 
39318: ST_TO_ADDR
// animal := CreateHuman ;
39319: LD_ADDR_VAR 0 12
39323: PUSH
39324: CALL_OW 44
39328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39329: LD_VAR 0 12
39333: PPUSH
39334: LD_VAR 0 8
39338: PPUSH
39339: LD_INT 0
39341: PPUSH
39342: CALL 41336 0 3
// end ;
39346: GO 39300
39348: POP
39349: POP
// if tigers then
39350: LD_VAR 0 2
39354: IFFALSE 39438
// for i = 1 to tigers do
39356: LD_ADDR_VAR 0 11
39360: PUSH
39361: DOUBLE
39362: LD_INT 1
39364: DEC
39365: ST_TO_ADDR
39366: LD_VAR 0 2
39370: PUSH
39371: FOR_TO
39372: IFFALSE 39436
// begin hc_class = class_tiger ;
39374: LD_ADDR_OWVAR 28
39378: PUSH
39379: LD_INT 14
39381: ST_TO_ADDR
// hc_gallery =  ;
39382: LD_ADDR_OWVAR 33
39386: PUSH
39387: LD_STRING 
39389: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39390: LD_ADDR_OWVAR 35
39394: PUSH
39395: LD_INT 7
39397: NEG
39398: PPUSH
39399: LD_INT 7
39401: PPUSH
39402: CALL_OW 12
39406: ST_TO_ADDR
// animal := CreateHuman ;
39407: LD_ADDR_VAR 0 12
39411: PUSH
39412: CALL_OW 44
39416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39417: LD_VAR 0 12
39421: PPUSH
39422: LD_VAR 0 8
39426: PPUSH
39427: LD_INT 0
39429: PPUSH
39430: CALL 41336 0 3
// end ;
39434: GO 39371
39436: POP
39437: POP
// if apemans then
39438: LD_VAR 0 3
39442: IFFALSE 39565
// for i = 1 to apemans do
39444: LD_ADDR_VAR 0 11
39448: PUSH
39449: DOUBLE
39450: LD_INT 1
39452: DEC
39453: ST_TO_ADDR
39454: LD_VAR 0 3
39458: PUSH
39459: FOR_TO
39460: IFFALSE 39563
// begin hc_class = class_apeman ;
39462: LD_ADDR_OWVAR 28
39466: PUSH
39467: LD_INT 12
39469: ST_TO_ADDR
// hc_gallery =  ;
39470: LD_ADDR_OWVAR 33
39474: PUSH
39475: LD_STRING 
39477: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39478: LD_ADDR_OWVAR 35
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PPUSH
39487: LD_INT 2
39489: PPUSH
39490: CALL_OW 12
39494: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39495: LD_ADDR_OWVAR 31
39499: PUSH
39500: LD_INT 1
39502: PPUSH
39503: LD_INT 3
39505: PPUSH
39506: CALL_OW 12
39510: PUSH
39511: LD_INT 1
39513: PPUSH
39514: LD_INT 3
39516: PPUSH
39517: CALL_OW 12
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// animal := CreateHuman ;
39534: LD_ADDR_VAR 0 12
39538: PUSH
39539: CALL_OW 44
39543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39544: LD_VAR 0 12
39548: PPUSH
39549: LD_VAR 0 8
39553: PPUSH
39554: LD_INT 0
39556: PPUSH
39557: CALL 41336 0 3
// end ;
39561: GO 39459
39563: POP
39564: POP
// if enchidnas then
39565: LD_VAR 0 4
39569: IFFALSE 39636
// for i = 1 to enchidnas do
39571: LD_ADDR_VAR 0 11
39575: PUSH
39576: DOUBLE
39577: LD_INT 1
39579: DEC
39580: ST_TO_ADDR
39581: LD_VAR 0 4
39585: PUSH
39586: FOR_TO
39587: IFFALSE 39634
// begin hc_class = 13 ;
39589: LD_ADDR_OWVAR 28
39593: PUSH
39594: LD_INT 13
39596: ST_TO_ADDR
// hc_gallery =  ;
39597: LD_ADDR_OWVAR 33
39601: PUSH
39602: LD_STRING 
39604: ST_TO_ADDR
// animal := CreateHuman ;
39605: LD_ADDR_VAR 0 12
39609: PUSH
39610: CALL_OW 44
39614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39615: LD_VAR 0 12
39619: PPUSH
39620: LD_VAR 0 8
39624: PPUSH
39625: LD_INT 0
39627: PPUSH
39628: CALL 41336 0 3
// end ;
39632: GO 39586
39634: POP
39635: POP
// if fishes then
39636: LD_VAR 0 7
39640: IFFALSE 39707
// for i = 1 to fishes do
39642: LD_ADDR_VAR 0 11
39646: PUSH
39647: DOUBLE
39648: LD_INT 1
39650: DEC
39651: ST_TO_ADDR
39652: LD_VAR 0 7
39656: PUSH
39657: FOR_TO
39658: IFFALSE 39705
// begin hc_class = 20 ;
39660: LD_ADDR_OWVAR 28
39664: PUSH
39665: LD_INT 20
39667: ST_TO_ADDR
// hc_gallery =  ;
39668: LD_ADDR_OWVAR 33
39672: PUSH
39673: LD_STRING 
39675: ST_TO_ADDR
// animal := CreateHuman ;
39676: LD_ADDR_VAR 0 12
39680: PUSH
39681: CALL_OW 44
39685: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39686: LD_VAR 0 12
39690: PPUSH
39691: LD_VAR 0 9
39695: PPUSH
39696: LD_INT 0
39698: PPUSH
39699: CALL 41336 0 3
// end ;
39703: GO 39657
39705: POP
39706: POP
// end ;
39707: LD_VAR 0 10
39711: RET
// export function WantHeal ( sci , unit ) ; begin
39712: LD_INT 0
39714: PPUSH
// if GetTaskList ( sci ) > 0 then
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 437
39724: PUSH
39725: LD_INT 0
39727: GREATER
39728: IFFALSE 39798
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39730: LD_VAR 0 1
39734: PPUSH
39735: CALL_OW 437
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PUSH
39744: LD_INT 1
39746: ARRAY
39747: PUSH
39748: LD_STRING l
39750: EQUAL
39751: PUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 437
39761: PUSH
39762: LD_INT 1
39764: ARRAY
39765: PUSH
39766: LD_INT 4
39768: ARRAY
39769: PUSH
39770: LD_VAR 0 2
39774: EQUAL
39775: AND
39776: IFFALSE 39788
// result := true else
39778: LD_ADDR_VAR 0 3
39782: PUSH
39783: LD_INT 1
39785: ST_TO_ADDR
39786: GO 39796
// result := false ;
39788: LD_ADDR_VAR 0 3
39792: PUSH
39793: LD_INT 0
39795: ST_TO_ADDR
// end else
39796: GO 39806
// result := false ;
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 0
39805: ST_TO_ADDR
// end ;
39806: LD_VAR 0 3
39810: RET
// export function HealTarget ( sci ) ; begin
39811: LD_INT 0
39813: PPUSH
// if not sci then
39814: LD_VAR 0 1
39818: NOT
39819: IFFALSE 39823
// exit ;
39821: GO 39888
// result := 0 ;
39823: LD_ADDR_VAR 0 2
39827: PUSH
39828: LD_INT 0
39830: ST_TO_ADDR
// if GetTaskList ( sci ) then
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 437
39840: IFFALSE 39888
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 437
39851: PUSH
39852: LD_INT 1
39854: ARRAY
39855: PUSH
39856: LD_INT 1
39858: ARRAY
39859: PUSH
39860: LD_STRING l
39862: EQUAL
39863: IFFALSE 39888
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39865: LD_ADDR_VAR 0 2
39869: PUSH
39870: LD_VAR 0 1
39874: PPUSH
39875: CALL_OW 437
39879: PUSH
39880: LD_INT 1
39882: ARRAY
39883: PUSH
39884: LD_INT 4
39886: ARRAY
39887: ST_TO_ADDR
// end ;
39888: LD_VAR 0 2
39892: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39893: LD_INT 0
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
// if not base_units then
39899: LD_VAR 0 1
39903: NOT
39904: IFFALSE 39908
// exit ;
39906: GO 39995
// result := false ;
39908: LD_ADDR_VAR 0 2
39912: PUSH
39913: LD_INT 0
39915: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39916: LD_ADDR_VAR 0 5
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: LD_INT 21
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PPUSH
39936: CALL_OW 72
39940: ST_TO_ADDR
// if not tmp then
39941: LD_VAR 0 5
39945: NOT
39946: IFFALSE 39950
// exit ;
39948: GO 39995
// for i in tmp do
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_VAR 0 5
39959: PUSH
39960: FOR_IN
39961: IFFALSE 39993
// begin result := EnemyInRange ( i , 22 ) ;
39963: LD_ADDR_VAR 0 2
39967: PUSH
39968: LD_VAR 0 3
39972: PPUSH
39973: LD_INT 22
39975: PPUSH
39976: CALL 37582 0 2
39980: ST_TO_ADDR
// if result then
39981: LD_VAR 0 2
39985: IFFALSE 39991
// exit ;
39987: POP
39988: POP
39989: GO 39995
// end ;
39991: GO 39960
39993: POP
39994: POP
// end ;
39995: LD_VAR 0 2
39999: RET
// export function FilterByTag ( units , tag ) ; begin
40000: LD_INT 0
40002: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
40003: LD_ADDR_VAR 0 3
40007: PUSH
40008: LD_VAR 0 1
40012: PPUSH
40013: LD_INT 120
40015: PUSH
40016: LD_VAR 0 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PPUSH
40025: CALL_OW 72
40029: ST_TO_ADDR
// end ;
40030: LD_VAR 0 3
40034: RET
// export function IsDriver ( un ) ; begin
40035: LD_INT 0
40037: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40038: LD_ADDR_VAR 0 2
40042: PUSH
40043: LD_VAR 0 1
40047: PUSH
40048: LD_INT 55
40050: PUSH
40051: EMPTY
40052: LIST
40053: PPUSH
40054: CALL_OW 69
40058: IN
40059: ST_TO_ADDR
// end ;
40060: LD_VAR 0 2
40064: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40065: LD_INT 0
40067: PPUSH
40068: PPUSH
// list := [ ] ;
40069: LD_ADDR_VAR 0 5
40073: PUSH
40074: EMPTY
40075: ST_TO_ADDR
// case d of 0 :
40076: LD_VAR 0 3
40080: PUSH
40081: LD_INT 0
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40089
40087: GO 40222
40089: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40090: LD_ADDR_VAR 0 5
40094: PUSH
40095: LD_VAR 0 1
40099: PUSH
40100: LD_INT 4
40102: MINUS
40103: PUSH
40104: LD_VAR 0 2
40108: PUSH
40109: LD_INT 4
40111: MINUS
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: PUSH
40121: LD_VAR 0 1
40125: PUSH
40126: LD_INT 3
40128: MINUS
40129: PUSH
40130: LD_VAR 0 2
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: PUSH
40143: LD_VAR 0 1
40147: PUSH
40148: LD_INT 4
40150: PLUS
40151: PUSH
40152: LD_VAR 0 2
40156: PUSH
40157: LD_INT 4
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: PUSH
40165: LD_VAR 0 1
40169: PUSH
40170: LD_INT 3
40172: PLUS
40173: PUSH
40174: LD_VAR 0 2
40178: PUSH
40179: LD_INT 3
40181: PLUS
40182: PUSH
40183: LD_INT 5
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: PUSH
40191: LD_VAR 0 1
40195: PUSH
40196: LD_VAR 0 2
40200: PUSH
40201: LD_INT 4
40203: PLUS
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: ST_TO_ADDR
// end ; 1 :
40220: GO 40920
40222: LD_INT 1
40224: DOUBLE
40225: EQUAL
40226: IFTRUE 40230
40228: GO 40363
40230: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40231: LD_ADDR_VAR 0 5
40235: PUSH
40236: LD_VAR 0 1
40240: PUSH
40241: LD_VAR 0 2
40245: PUSH
40246: LD_INT 4
40248: MINUS
40249: PUSH
40250: LD_INT 3
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: PUSH
40258: LD_VAR 0 1
40262: PUSH
40263: LD_INT 3
40265: MINUS
40266: PUSH
40267: LD_VAR 0 2
40271: PUSH
40272: LD_INT 3
40274: MINUS
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: PUSH
40284: LD_VAR 0 1
40288: PUSH
40289: LD_INT 4
40291: MINUS
40292: PUSH
40293: LD_VAR 0 2
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: PUSH
40306: LD_VAR 0 1
40310: PUSH
40311: LD_VAR 0 2
40315: PUSH
40316: LD_INT 3
40318: PLUS
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: PUSH
40328: LD_VAR 0 1
40332: PUSH
40333: LD_INT 4
40335: PLUS
40336: PUSH
40337: LD_VAR 0 2
40341: PUSH
40342: LD_INT 4
40344: PLUS
40345: PUSH
40346: LD_INT 5
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: ST_TO_ADDR
// end ; 2 :
40361: GO 40920
40363: LD_INT 2
40365: DOUBLE
40366: EQUAL
40367: IFTRUE 40371
40369: GO 40500
40371: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40372: LD_ADDR_VAR 0 5
40376: PUSH
40377: LD_VAR 0 1
40381: PUSH
40382: LD_VAR 0 2
40386: PUSH
40387: LD_INT 3
40389: MINUS
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: PUSH
40399: LD_VAR 0 1
40403: PUSH
40404: LD_INT 4
40406: PLUS
40407: PUSH
40408: LD_VAR 0 2
40412: PUSH
40413: LD_INT 4
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: PUSH
40421: LD_VAR 0 1
40425: PUSH
40426: LD_VAR 0 2
40430: PUSH
40431: LD_INT 4
40433: PLUS
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: PUSH
40443: LD_VAR 0 1
40447: PUSH
40448: LD_INT 3
40450: MINUS
40451: PUSH
40452: LD_VAR 0 2
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: LIST
40464: PUSH
40465: LD_VAR 0 1
40469: PUSH
40470: LD_INT 4
40472: MINUS
40473: PUSH
40474: LD_VAR 0 2
40478: PUSH
40479: LD_INT 4
40481: MINUS
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: ST_TO_ADDR
// end ; 3 :
40498: GO 40920
40500: LD_INT 3
40502: DOUBLE
40503: EQUAL
40504: IFTRUE 40508
40506: GO 40641
40508: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40509: LD_ADDR_VAR 0 5
40513: PUSH
40514: LD_VAR 0 1
40518: PUSH
40519: LD_INT 3
40521: PLUS
40522: PUSH
40523: LD_VAR 0 2
40527: PUSH
40528: LD_INT 4
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: PUSH
40536: LD_VAR 0 1
40540: PUSH
40541: LD_INT 4
40543: PLUS
40544: PUSH
40545: LD_VAR 0 2
40549: PUSH
40550: LD_INT 4
40552: PLUS
40553: PUSH
40554: LD_INT 5
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: PUSH
40562: LD_VAR 0 1
40566: PUSH
40567: LD_INT 4
40569: MINUS
40570: PUSH
40571: LD_VAR 0 2
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: PUSH
40584: LD_VAR 0 1
40588: PUSH
40589: LD_VAR 0 2
40593: PUSH
40594: LD_INT 4
40596: MINUS
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: PUSH
40606: LD_VAR 0 1
40610: PUSH
40611: LD_INT 3
40613: MINUS
40614: PUSH
40615: LD_VAR 0 2
40619: PUSH
40620: LD_INT 3
40622: MINUS
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: ST_TO_ADDR
// end ; 4 :
40639: GO 40920
40641: LD_INT 4
40643: DOUBLE
40644: EQUAL
40645: IFTRUE 40649
40647: GO 40782
40649: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40650: LD_ADDR_VAR 0 5
40654: PUSH
40655: LD_VAR 0 1
40659: PUSH
40660: LD_VAR 0 2
40664: PUSH
40665: LD_INT 4
40667: PLUS
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: PUSH
40677: LD_VAR 0 1
40681: PUSH
40682: LD_INT 3
40684: PLUS
40685: PUSH
40686: LD_VAR 0 2
40690: PUSH
40691: LD_INT 3
40693: PLUS
40694: PUSH
40695: LD_INT 5
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: PUSH
40703: LD_VAR 0 1
40707: PUSH
40708: LD_INT 4
40710: PLUS
40711: PUSH
40712: LD_VAR 0 2
40716: PUSH
40717: LD_INT 4
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: LIST
40724: PUSH
40725: LD_VAR 0 1
40729: PUSH
40730: LD_VAR 0 2
40734: PUSH
40735: LD_INT 3
40737: MINUS
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: PUSH
40747: LD_VAR 0 1
40751: PUSH
40752: LD_INT 4
40754: MINUS
40755: PUSH
40756: LD_VAR 0 2
40760: PUSH
40761: LD_INT 4
40763: MINUS
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: LIST
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: ST_TO_ADDR
// end ; 5 :
40780: GO 40920
40782: LD_INT 5
40784: DOUBLE
40785: EQUAL
40786: IFTRUE 40790
40788: GO 40919
40790: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40791: LD_ADDR_VAR 0 5
40795: PUSH
40796: LD_VAR 0 1
40800: PUSH
40801: LD_INT 4
40803: MINUS
40804: PUSH
40805: LD_VAR 0 2
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: PUSH
40818: LD_VAR 0 1
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_INT 4
40830: MINUS
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: PUSH
40840: LD_VAR 0 1
40844: PUSH
40845: LD_INT 4
40847: PLUS
40848: PUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_INT 4
40856: PLUS
40857: PUSH
40858: LD_INT 5
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: PUSH
40866: LD_VAR 0 1
40870: PUSH
40871: LD_INT 3
40873: PLUS
40874: PUSH
40875: LD_VAR 0 2
40879: PUSH
40880: LD_INT 4
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: PUSH
40888: LD_VAR 0 1
40892: PUSH
40893: LD_VAR 0 2
40897: PUSH
40898: LD_INT 3
40900: PLUS
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: LIST
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
// end ; end ;
40917: GO 40920
40919: POP
// result := list ;
40920: LD_ADDR_VAR 0 4
40924: PUSH
40925: LD_VAR 0 5
40929: ST_TO_ADDR
// end ;
40930: LD_VAR 0 4
40934: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40935: LD_INT 0
40937: PPUSH
40938: PPUSH
40939: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40940: LD_VAR 0 1
40944: NOT
40945: PUSH
40946: LD_VAR 0 2
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 4
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: IN
40969: NOT
40970: OR
40971: IFFALSE 40975
// exit ;
40973: GO 41058
// tmp := [ ] ;
40975: LD_ADDR_VAR 0 5
40979: PUSH
40980: EMPTY
40981: ST_TO_ADDR
// for i in units do
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: LD_VAR 0 1
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41027
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40995: LD_ADDR_VAR 0 5
40999: PUSH
41000: LD_VAR 0 5
41004: PPUSH
41005: LD_VAR 0 4
41009: PPUSH
41010: LD_VAR 0 2
41014: PPUSH
41015: CALL_OW 259
41019: PPUSH
41020: CALL 42431 0 2
41024: ST_TO_ADDR
41025: GO 40992
41027: POP
41028: POP
// if not tmp then
41029: LD_VAR 0 5
41033: NOT
41034: IFFALSE 41038
// exit ;
41036: GO 41058
// result := SortListByListDesc ( units , tmp ) ;
41038: LD_ADDR_VAR 0 3
41042: PUSH
41043: LD_VAR 0 1
41047: PPUSH
41048: LD_VAR 0 5
41052: PPUSH
41053: CALL_OW 77
41057: ST_TO_ADDR
// end ;
41058: LD_VAR 0 3
41062: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41063: LD_INT 0
41065: PPUSH
41066: PPUSH
41067: PPUSH
// result := false ;
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: LD_INT 0
41075: ST_TO_ADDR
// if not building then
41076: LD_VAR 0 2
41080: NOT
41081: IFFALSE 41085
// exit ;
41083: GO 41223
// x := GetX ( building ) ;
41085: LD_ADDR_VAR 0 4
41089: PUSH
41090: LD_VAR 0 2
41094: PPUSH
41095: CALL_OW 250
41099: ST_TO_ADDR
// y := GetY ( building ) ;
41100: LD_ADDR_VAR 0 5
41104: PUSH
41105: LD_VAR 0 2
41109: PPUSH
41110: CALL_OW 251
41114: ST_TO_ADDR
// if not x or not y then
41115: LD_VAR 0 4
41119: NOT
41120: PUSH
41121: LD_VAR 0 5
41125: NOT
41126: OR
41127: IFFALSE 41131
// exit ;
41129: GO 41223
// if GetTaskList ( unit ) then
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 437
41140: IFFALSE 41223
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41142: LD_STRING e
41144: PUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 437
41154: PUSH
41155: LD_INT 1
41157: ARRAY
41158: PUSH
41159: LD_INT 1
41161: ARRAY
41162: EQUAL
41163: PUSH
41164: LD_VAR 0 4
41168: PUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 437
41178: PUSH
41179: LD_INT 1
41181: ARRAY
41182: PUSH
41183: LD_INT 2
41185: ARRAY
41186: EQUAL
41187: AND
41188: PUSH
41189: LD_VAR 0 5
41193: PUSH
41194: LD_VAR 0 1
41198: PPUSH
41199: CALL_OW 437
41203: PUSH
41204: LD_INT 1
41206: ARRAY
41207: PUSH
41208: LD_INT 3
41210: ARRAY
41211: EQUAL
41212: AND
41213: IFFALSE 41223
// result := true end ;
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: LD_INT 1
41222: ST_TO_ADDR
// end ;
41223: LD_VAR 0 3
41227: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41228: LD_INT 0
41230: PPUSH
// result := false ;
41231: LD_ADDR_VAR 0 4
41235: PUSH
41236: LD_INT 0
41238: ST_TO_ADDR
// if GetTaskList ( unit ) then
41239: LD_VAR 0 1
41243: PPUSH
41244: CALL_OW 437
41248: IFFALSE 41331
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41250: LD_STRING M
41252: PUSH
41253: LD_VAR 0 1
41257: PPUSH
41258: CALL_OW 437
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: PUSH
41267: LD_INT 1
41269: ARRAY
41270: EQUAL
41271: PUSH
41272: LD_VAR 0 2
41276: PUSH
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL_OW 437
41286: PUSH
41287: LD_INT 1
41289: ARRAY
41290: PUSH
41291: LD_INT 2
41293: ARRAY
41294: EQUAL
41295: AND
41296: PUSH
41297: LD_VAR 0 3
41301: PUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 437
41311: PUSH
41312: LD_INT 1
41314: ARRAY
41315: PUSH
41316: LD_INT 3
41318: ARRAY
41319: EQUAL
41320: AND
41321: IFFALSE 41331
// result := true ;
41323: LD_ADDR_VAR 0 4
41327: PUSH
41328: LD_INT 1
41330: ST_TO_ADDR
// end ; end ;
41331: LD_VAR 0 4
41335: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41336: LD_INT 0
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
// if not unit or not area then
41342: LD_VAR 0 1
41346: NOT
41347: PUSH
41348: LD_VAR 0 2
41352: NOT
41353: OR
41354: IFFALSE 41358
// exit ;
41356: GO 41534
// tmp := AreaToList ( area , i ) ;
41358: LD_ADDR_VAR 0 6
41362: PUSH
41363: LD_VAR 0 2
41367: PPUSH
41368: LD_VAR 0 5
41372: PPUSH
41373: CALL_OW 517
41377: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41378: LD_ADDR_VAR 0 5
41382: PUSH
41383: DOUBLE
41384: LD_INT 1
41386: DEC
41387: ST_TO_ADDR
41388: LD_VAR 0 6
41392: PUSH
41393: LD_INT 1
41395: ARRAY
41396: PUSH
41397: FOR_TO
41398: IFFALSE 41532
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41400: LD_ADDR_VAR 0 7
41404: PUSH
41405: LD_VAR 0 6
41409: PUSH
41410: LD_INT 1
41412: ARRAY
41413: PUSH
41414: LD_VAR 0 5
41418: ARRAY
41419: PUSH
41420: LD_VAR 0 6
41424: PUSH
41425: LD_INT 2
41427: ARRAY
41428: PUSH
41429: LD_VAR 0 5
41433: ARRAY
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
41439: LD_INT 92
41441: PUSH
41442: LD_VAR 0 7
41446: PUSH
41447: LD_INT 1
41449: ARRAY
41450: PUSH
41451: LD_VAR 0 7
41455: PUSH
41456: LD_INT 2
41458: ARRAY
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: PPUSH
41469: CALL_OW 69
41473: PUSH
41474: LD_INT 0
41476: EQUAL
41477: IFFALSE 41530
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41479: LD_VAR 0 1
41483: PPUSH
41484: LD_VAR 0 7
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 7
41497: PUSH
41498: LD_INT 2
41500: ARRAY
41501: PPUSH
41502: LD_VAR 0 3
41506: PPUSH
41507: CALL_OW 48
// result := IsPlaced ( unit ) ;
41511: LD_ADDR_VAR 0 4
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 305
41525: ST_TO_ADDR
// exit ;
41526: POP
41527: POP
41528: GO 41534
// end ; end ;
41530: GO 41397
41532: POP
41533: POP
// end ;
41534: LD_VAR 0 4
41538: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41539: LD_INT 0
41541: PPUSH
41542: PPUSH
41543: PPUSH
// if not side or side > 8 then
41544: LD_VAR 0 1
41548: NOT
41549: PUSH
41550: LD_VAR 0 1
41554: PUSH
41555: LD_INT 8
41557: GREATER
41558: OR
41559: IFFALSE 41563
// exit ;
41561: GO 41750
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41563: LD_ADDR_VAR 0 4
41567: PUSH
41568: LD_INT 22
41570: PUSH
41571: LD_VAR 0 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 21
41582: PUSH
41583: LD_INT 3
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PPUSH
41594: CALL_OW 69
41598: ST_TO_ADDR
// if not tmp then
41599: LD_VAR 0 4
41603: NOT
41604: IFFALSE 41608
// exit ;
41606: GO 41750
// enable_addtolog := true ;
41608: LD_ADDR_OWVAR 81
41612: PUSH
41613: LD_INT 1
41615: ST_TO_ADDR
// AddToLog ( [ ) ;
41616: LD_STRING [
41618: PPUSH
41619: CALL_OW 561
// for i in tmp do
41623: LD_ADDR_VAR 0 3
41627: PUSH
41628: LD_VAR 0 4
41632: PUSH
41633: FOR_IN
41634: IFFALSE 41741
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41636: LD_STRING [
41638: PUSH
41639: LD_VAR 0 3
41643: PPUSH
41644: CALL_OW 266
41648: STR
41649: PUSH
41650: LD_STRING , 
41652: STR
41653: PUSH
41654: LD_VAR 0 3
41658: PPUSH
41659: CALL_OW 250
41663: STR
41664: PUSH
41665: LD_STRING , 
41667: STR
41668: PUSH
41669: LD_VAR 0 3
41673: PPUSH
41674: CALL_OW 251
41678: STR
41679: PUSH
41680: LD_STRING , 
41682: STR
41683: PUSH
41684: LD_VAR 0 3
41688: PPUSH
41689: CALL_OW 254
41693: STR
41694: PUSH
41695: LD_STRING , 
41697: STR
41698: PUSH
41699: LD_VAR 0 3
41703: PPUSH
41704: LD_INT 1
41706: PPUSH
41707: CALL_OW 268
41711: STR
41712: PUSH
41713: LD_STRING , 
41715: STR
41716: PUSH
41717: LD_VAR 0 3
41721: PPUSH
41722: LD_INT 2
41724: PPUSH
41725: CALL_OW 268
41729: STR
41730: PUSH
41731: LD_STRING ],
41733: STR
41734: PPUSH
41735: CALL_OW 561
// end ;
41739: GO 41633
41741: POP
41742: POP
// AddToLog ( ]; ) ;
41743: LD_STRING ];
41745: PPUSH
41746: CALL_OW 561
// end ;
41750: LD_VAR 0 2
41754: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41755: LD_INT 0
41757: PPUSH
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
// if not area or not rate or not max then
41762: LD_VAR 0 1
41766: NOT
41767: PUSH
41768: LD_VAR 0 2
41772: NOT
41773: OR
41774: PUSH
41775: LD_VAR 0 4
41779: NOT
41780: OR
41781: IFFALSE 41785
// exit ;
41783: GO 41974
// while 1 do
41785: LD_INT 1
41787: IFFALSE 41974
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41789: LD_ADDR_VAR 0 9
41793: PUSH
41794: LD_VAR 0 1
41798: PPUSH
41799: LD_INT 1
41801: PPUSH
41802: CALL_OW 287
41806: PUSH
41807: LD_INT 10
41809: MUL
41810: ST_TO_ADDR
// r := rate / 10 ;
41811: LD_ADDR_VAR 0 7
41815: PUSH
41816: LD_VAR 0 2
41820: PUSH
41821: LD_INT 10
41823: DIVREAL
41824: ST_TO_ADDR
// time := 1 1$00 ;
41825: LD_ADDR_VAR 0 8
41829: PUSH
41830: LD_INT 2100
41832: ST_TO_ADDR
// if amount < min then
41833: LD_VAR 0 9
41837: PUSH
41838: LD_VAR 0 3
41842: LESS
41843: IFFALSE 41861
// r := r * 2 else
41845: LD_ADDR_VAR 0 7
41849: PUSH
41850: LD_VAR 0 7
41854: PUSH
41855: LD_INT 2
41857: MUL
41858: ST_TO_ADDR
41859: GO 41887
// if amount > max then
41861: LD_VAR 0 9
41865: PUSH
41866: LD_VAR 0 4
41870: GREATER
41871: IFFALSE 41887
// r := r / 2 ;
41873: LD_ADDR_VAR 0 7
41877: PUSH
41878: LD_VAR 0 7
41882: PUSH
41883: LD_INT 2
41885: DIVREAL
41886: ST_TO_ADDR
// time := time / r ;
41887: LD_ADDR_VAR 0 8
41891: PUSH
41892: LD_VAR 0 8
41896: PUSH
41897: LD_VAR 0 7
41901: DIVREAL
41902: ST_TO_ADDR
// if time < 0 then
41903: LD_VAR 0 8
41907: PUSH
41908: LD_INT 0
41910: LESS
41911: IFFALSE 41928
// time := time * - 1 ;
41913: LD_ADDR_VAR 0 8
41917: PUSH
41918: LD_VAR 0 8
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: MUL
41927: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41928: LD_VAR 0 8
41932: PUSH
41933: LD_INT 35
41935: PPUSH
41936: LD_INT 875
41938: PPUSH
41939: CALL_OW 12
41943: PLUS
41944: PPUSH
41945: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41949: LD_INT 1
41951: PPUSH
41952: LD_INT 5
41954: PPUSH
41955: CALL_OW 12
41959: PPUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: LD_INT 1
41967: PPUSH
41968: CALL_OW 55
// end ;
41972: GO 41785
// end ;
41974: LD_VAR 0 5
41978: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41979: LD_INT 0
41981: PPUSH
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
41988: PPUSH
// if not turrets or not factories then
41989: LD_VAR 0 1
41993: NOT
41994: PUSH
41995: LD_VAR 0 2
41999: NOT
42000: OR
42001: IFFALSE 42005
// exit ;
42003: GO 42312
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
42005: LD_ADDR_VAR 0 10
42009: PUSH
42010: LD_INT 5
42012: PUSH
42013: LD_INT 6
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: LD_INT 4
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 5
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 24
42047: PUSH
42048: LD_INT 25
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 23
42057: PUSH
42058: LD_INT 27
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 42
42071: PUSH
42072: LD_INT 43
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 44
42081: PUSH
42082: LD_INT 46
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 45
42091: PUSH
42092: LD_INT 47
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
// result := [ ] ;
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: EMPTY
42115: ST_TO_ADDR
// for i in turrets do
42116: LD_ADDR_VAR 0 4
42120: PUSH
42121: LD_VAR 0 1
42125: PUSH
42126: FOR_IN
42127: IFFALSE 42310
// begin nat := GetNation ( i ) ;
42129: LD_ADDR_VAR 0 7
42133: PUSH
42134: LD_VAR 0 4
42138: PPUSH
42139: CALL_OW 248
42143: ST_TO_ADDR
// weapon := 0 ;
42144: LD_ADDR_VAR 0 8
42148: PUSH
42149: LD_INT 0
42151: ST_TO_ADDR
// if not nat then
42152: LD_VAR 0 7
42156: NOT
42157: IFFALSE 42161
// continue ;
42159: GO 42126
// for j in list [ nat ] do
42161: LD_ADDR_VAR 0 5
42165: PUSH
42166: LD_VAR 0 10
42170: PUSH
42171: LD_VAR 0 7
42175: ARRAY
42176: PUSH
42177: FOR_IN
42178: IFFALSE 42219
// if GetBWeapon ( i ) = j [ 1 ] then
42180: LD_VAR 0 4
42184: PPUSH
42185: CALL_OW 269
42189: PUSH
42190: LD_VAR 0 5
42194: PUSH
42195: LD_INT 1
42197: ARRAY
42198: EQUAL
42199: IFFALSE 42217
// begin weapon := j [ 2 ] ;
42201: LD_ADDR_VAR 0 8
42205: PUSH
42206: LD_VAR 0 5
42210: PUSH
42211: LD_INT 2
42213: ARRAY
42214: ST_TO_ADDR
// break ;
42215: GO 42219
// end ;
42217: GO 42177
42219: POP
42220: POP
// if not weapon then
42221: LD_VAR 0 8
42225: NOT
42226: IFFALSE 42230
// continue ;
42228: GO 42126
// for k in factories do
42230: LD_ADDR_VAR 0 6
42234: PUSH
42235: LD_VAR 0 2
42239: PUSH
42240: FOR_IN
42241: IFFALSE 42306
// begin weapons := AvailableWeaponList ( k ) ;
42243: LD_ADDR_VAR 0 9
42247: PUSH
42248: LD_VAR 0 6
42252: PPUSH
42253: CALL_OW 478
42257: ST_TO_ADDR
// if not weapons then
42258: LD_VAR 0 9
42262: NOT
42263: IFFALSE 42267
// continue ;
42265: GO 42240
// if weapon in weapons then
42267: LD_VAR 0 8
42271: PUSH
42272: LD_VAR 0 9
42276: IN
42277: IFFALSE 42304
// begin result := [ i , weapon ] ;
42279: LD_ADDR_VAR 0 3
42283: PUSH
42284: LD_VAR 0 4
42288: PUSH
42289: LD_VAR 0 8
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: ST_TO_ADDR
// exit ;
42298: POP
42299: POP
42300: POP
42301: POP
42302: GO 42312
// end ; end ;
42304: GO 42240
42306: POP
42307: POP
// end ;
42308: GO 42126
42310: POP
42311: POP
// end ;
42312: LD_VAR 0 3
42316: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42317: LD_INT 0
42319: PPUSH
// if not side or side > 8 then
42320: LD_VAR 0 3
42324: NOT
42325: PUSH
42326: LD_VAR 0 3
42330: PUSH
42331: LD_INT 8
42333: GREATER
42334: OR
42335: IFFALSE 42339
// exit ;
42337: GO 42398
// if not range then
42339: LD_VAR 0 4
42343: NOT
42344: IFFALSE 42355
// range := - 12 ;
42346: LD_ADDR_VAR 0 4
42350: PUSH
42351: LD_INT 12
42353: NEG
42354: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42355: LD_VAR 0 1
42359: PPUSH
42360: LD_VAR 0 2
42364: PPUSH
42365: LD_VAR 0 3
42369: PPUSH
42370: LD_VAR 0 4
42374: PPUSH
42375: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42379: LD_VAR 0 1
42383: PPUSH
42384: LD_VAR 0 2
42388: PPUSH
42389: LD_VAR 0 3
42393: PPUSH
42394: CALL_OW 331
// end ;
42398: LD_VAR 0 5
42402: RET
// export function Video ( mode ) ; begin
42403: LD_INT 0
42405: PPUSH
// ingame_video = mode ;
42406: LD_ADDR_OWVAR 52
42410: PUSH
42411: LD_VAR 0 1
42415: ST_TO_ADDR
// interface_hidden = mode ;
42416: LD_ADDR_OWVAR 54
42420: PUSH
42421: LD_VAR 0 1
42425: ST_TO_ADDR
// end ;
42426: LD_VAR 0 2
42430: RET
// export function Join ( array , element ) ; begin
42431: LD_INT 0
42433: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: LD_VAR 0 1
42448: PUSH
42449: LD_INT 1
42451: PLUS
42452: PPUSH
42453: LD_VAR 0 2
42457: PPUSH
42458: CALL_OW 1
42462: ST_TO_ADDR
// end ;
42463: LD_VAR 0 3
42467: RET
// export function JoinUnion ( array , element ) ; begin
42468: LD_INT 0
42470: PPUSH
// result := array union element ;
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_VAR 0 1
42480: PUSH
42481: LD_VAR 0 2
42485: UNION
42486: ST_TO_ADDR
// end ;
42487: LD_VAR 0 3
42491: RET
// export function GetBehemoths ( side ) ; begin
42492: LD_INT 0
42494: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42495: LD_ADDR_VAR 0 2
42499: PUSH
42500: LD_INT 22
42502: PUSH
42503: LD_VAR 0 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 31
42514: PUSH
42515: LD_INT 25
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PPUSH
42526: CALL_OW 69
42530: ST_TO_ADDR
// end ;
42531: LD_VAR 0 2
42535: RET
// export function Shuffle ( array ) ; var i , index ; begin
42536: LD_INT 0
42538: PPUSH
42539: PPUSH
42540: PPUSH
// result := [ ] ;
42541: LD_ADDR_VAR 0 2
42545: PUSH
42546: EMPTY
42547: ST_TO_ADDR
// if not array then
42548: LD_VAR 0 1
42552: NOT
42553: IFFALSE 42557
// exit ;
42555: GO 42656
// Randomize ;
42557: CALL_OW 10
// for i = array downto 1 do
42561: LD_ADDR_VAR 0 3
42565: PUSH
42566: DOUBLE
42567: LD_VAR 0 1
42571: INC
42572: ST_TO_ADDR
42573: LD_INT 1
42575: PUSH
42576: FOR_DOWNTO
42577: IFFALSE 42654
// begin index := rand ( 1 , array ) ;
42579: LD_ADDR_VAR 0 4
42583: PUSH
42584: LD_INT 1
42586: PPUSH
42587: LD_VAR 0 1
42591: PPUSH
42592: CALL_OW 12
42596: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42597: LD_ADDR_VAR 0 2
42601: PUSH
42602: LD_VAR 0 2
42606: PPUSH
42607: LD_VAR 0 2
42611: PUSH
42612: LD_INT 1
42614: PLUS
42615: PPUSH
42616: LD_VAR 0 1
42620: PUSH
42621: LD_VAR 0 4
42625: ARRAY
42626: PPUSH
42627: CALL_OW 2
42631: ST_TO_ADDR
// array := Delete ( array , index ) ;
42632: LD_ADDR_VAR 0 1
42636: PUSH
42637: LD_VAR 0 1
42641: PPUSH
42642: LD_VAR 0 4
42646: PPUSH
42647: CALL_OW 3
42651: ST_TO_ADDR
// end ;
42652: GO 42576
42654: POP
42655: POP
// end ;
42656: LD_VAR 0 2
42660: RET
// export function GetBaseMaterials ( base ) ; begin
42661: LD_INT 0
42663: PPUSH
// result := [ 0 , 0 , 0 ] ;
42664: LD_ADDR_VAR 0 2
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: ST_TO_ADDR
// if not base then
42683: LD_VAR 0 1
42687: NOT
42688: IFFALSE 42692
// exit ;
42690: GO 42741
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42692: LD_ADDR_VAR 0 2
42696: PUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: LD_INT 1
42704: PPUSH
42705: CALL_OW 275
42709: PUSH
42710: LD_VAR 0 1
42714: PPUSH
42715: LD_INT 2
42717: PPUSH
42718: CALL_OW 275
42722: PUSH
42723: LD_VAR 0 1
42727: PPUSH
42728: LD_INT 3
42730: PPUSH
42731: CALL_OW 275
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// end ;
42741: LD_VAR 0 2
42745: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42746: LD_INT 0
42748: PPUSH
42749: PPUSH
// result := array ;
42750: LD_ADDR_VAR 0 3
42754: PUSH
42755: LD_VAR 0 1
42759: ST_TO_ADDR
// if size >= result then
42760: LD_VAR 0 2
42764: PUSH
42765: LD_VAR 0 3
42769: GREATEREQUAL
42770: IFFALSE 42774
// exit ;
42772: GO 42824
// if size then
42774: LD_VAR 0 2
42778: IFFALSE 42824
// for i := array downto size do
42780: LD_ADDR_VAR 0 4
42784: PUSH
42785: DOUBLE
42786: LD_VAR 0 1
42790: INC
42791: ST_TO_ADDR
42792: LD_VAR 0 2
42796: PUSH
42797: FOR_DOWNTO
42798: IFFALSE 42822
// result := Delete ( result , result ) ;
42800: LD_ADDR_VAR 0 3
42804: PUSH
42805: LD_VAR 0 3
42809: PPUSH
42810: LD_VAR 0 3
42814: PPUSH
42815: CALL_OW 3
42819: ST_TO_ADDR
42820: GO 42797
42822: POP
42823: POP
// end ;
42824: LD_VAR 0 3
42828: RET
// export function ComExit ( unit ) ; var tmp ; begin
42829: LD_INT 0
42831: PPUSH
42832: PPUSH
// if not IsInUnit ( unit ) then
42833: LD_VAR 0 1
42837: PPUSH
42838: CALL_OW 310
42842: NOT
42843: IFFALSE 42847
// exit ;
42845: GO 42907
// tmp := IsInUnit ( unit ) ;
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_VAR 0 1
42856: PPUSH
42857: CALL_OW 310
42861: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42862: LD_VAR 0 3
42866: PPUSH
42867: CALL_OW 247
42871: PUSH
42872: LD_INT 2
42874: EQUAL
42875: IFFALSE 42888
// ComExitVehicle ( unit ) else
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 121
42886: GO 42897
// ComExitBuilding ( unit ) ;
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 122
// result := tmp ;
42897: LD_ADDR_VAR 0 2
42901: PUSH
42902: LD_VAR 0 3
42906: ST_TO_ADDR
// end ;
42907: LD_VAR 0 2
42911: RET
// export function ComExitAll ( units ) ; var i ; begin
42912: LD_INT 0
42914: PPUSH
42915: PPUSH
// if not units then
42916: LD_VAR 0 1
42920: NOT
42921: IFFALSE 42925
// exit ;
42923: GO 42951
// for i in units do
42925: LD_ADDR_VAR 0 3
42929: PUSH
42930: LD_VAR 0 1
42934: PUSH
42935: FOR_IN
42936: IFFALSE 42949
// ComExit ( i ) ;
42938: LD_VAR 0 3
42942: PPUSH
42943: CALL 42829 0 1
42947: GO 42935
42949: POP
42950: POP
// end ;
42951: LD_VAR 0 2
42955: RET
// export function ResetHc ; begin
42956: LD_INT 0
42958: PPUSH
// InitHc ;
42959: CALL_OW 19
// hc_importance := 0 ;
42963: LD_ADDR_OWVAR 32
42967: PUSH
42968: LD_INT 0
42970: ST_TO_ADDR
// end ;
42971: LD_VAR 0 1
42975: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42976: LD_INT 0
42978: PPUSH
42979: PPUSH
42980: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42981: LD_ADDR_VAR 0 6
42985: PUSH
42986: LD_VAR 0 1
42990: PUSH
42991: LD_VAR 0 3
42995: PLUS
42996: PUSH
42997: LD_INT 2
42999: DIV
43000: ST_TO_ADDR
// if _x < 0 then
43001: LD_VAR 0 6
43005: PUSH
43006: LD_INT 0
43008: LESS
43009: IFFALSE 43026
// _x := _x * - 1 ;
43011: LD_ADDR_VAR 0 6
43015: PUSH
43016: LD_VAR 0 6
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: MUL
43025: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43026: LD_ADDR_VAR 0 7
43030: PUSH
43031: LD_VAR 0 2
43035: PUSH
43036: LD_VAR 0 4
43040: PLUS
43041: PUSH
43042: LD_INT 2
43044: DIV
43045: ST_TO_ADDR
// if _y < 0 then
43046: LD_VAR 0 7
43050: PUSH
43051: LD_INT 0
43053: LESS
43054: IFFALSE 43071
// _y := _y * - 1 ;
43056: LD_ADDR_VAR 0 7
43060: PUSH
43061: LD_VAR 0 7
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: MUL
43070: ST_TO_ADDR
// result := [ _x , _y ] ;
43071: LD_ADDR_VAR 0 5
43075: PUSH
43076: LD_VAR 0 6
43080: PUSH
43081: LD_VAR 0 7
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: ST_TO_ADDR
// end ;
43090: LD_VAR 0 5
43094: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43095: LD_INT 0
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
// task := GetTaskList ( unit ) ;
43101: LD_ADDR_VAR 0 7
43105: PUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL_OW 437
43115: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43116: LD_VAR 0 7
43120: NOT
43121: PUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: LD_VAR 0 2
43131: PPUSH
43132: CALL_OW 308
43136: NOT
43137: AND
43138: IFFALSE 43142
// exit ;
43140: GO 43260
// if IsInArea ( unit , area ) then
43142: LD_VAR 0 1
43146: PPUSH
43147: LD_VAR 0 2
43151: PPUSH
43152: CALL_OW 308
43156: IFFALSE 43174
// begin ComMoveToArea ( unit , goAway ) ;
43158: LD_VAR 0 1
43162: PPUSH
43163: LD_VAR 0 3
43167: PPUSH
43168: CALL_OW 113
// exit ;
43172: GO 43260
// end ; if task [ 1 ] [ 1 ] <> M then
43174: LD_VAR 0 7
43178: PUSH
43179: LD_INT 1
43181: ARRAY
43182: PUSH
43183: LD_INT 1
43185: ARRAY
43186: PUSH
43187: LD_STRING M
43189: NONEQUAL
43190: IFFALSE 43194
// exit ;
43192: GO 43260
// x := task [ 1 ] [ 2 ] ;
43194: LD_ADDR_VAR 0 5
43198: PUSH
43199: LD_VAR 0 7
43203: PUSH
43204: LD_INT 1
43206: ARRAY
43207: PUSH
43208: LD_INT 2
43210: ARRAY
43211: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43212: LD_ADDR_VAR 0 6
43216: PUSH
43217: LD_VAR 0 7
43221: PUSH
43222: LD_INT 1
43224: ARRAY
43225: PUSH
43226: LD_INT 3
43228: ARRAY
43229: ST_TO_ADDR
// if InArea ( x , y , area ) then
43230: LD_VAR 0 5
43234: PPUSH
43235: LD_VAR 0 6
43239: PPUSH
43240: LD_VAR 0 2
43244: PPUSH
43245: CALL_OW 309
43249: IFFALSE 43260
// ComStop ( unit ) ;
43251: LD_VAR 0 1
43255: PPUSH
43256: CALL_OW 141
// end ;
43260: LD_VAR 0 4
43264: RET
// export function Abs ( value ) ; begin
43265: LD_INT 0
43267: PPUSH
// result := value ;
43268: LD_ADDR_VAR 0 2
43272: PUSH
43273: LD_VAR 0 1
43277: ST_TO_ADDR
// if value < 0 then
43278: LD_VAR 0 1
43282: PUSH
43283: LD_INT 0
43285: LESS
43286: IFFALSE 43303
// result := value * - 1 ;
43288: LD_ADDR_VAR 0 2
43292: PUSH
43293: LD_VAR 0 1
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: MUL
43302: ST_TO_ADDR
// end ;
43303: LD_VAR 0 2
43307: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43308: LD_INT 0
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
// if not unit or not building then
43318: LD_VAR 0 1
43322: NOT
43323: PUSH
43324: LD_VAR 0 2
43328: NOT
43329: OR
43330: IFFALSE 43334
// exit ;
43332: GO 43560
// x := GetX ( building ) ;
43334: LD_ADDR_VAR 0 4
43338: PUSH
43339: LD_VAR 0 2
43343: PPUSH
43344: CALL_OW 250
43348: ST_TO_ADDR
// y := GetY ( building ) ;
43349: LD_ADDR_VAR 0 6
43353: PUSH
43354: LD_VAR 0 2
43358: PPUSH
43359: CALL_OW 251
43363: ST_TO_ADDR
// d := GetDir ( building ) ;
43364: LD_ADDR_VAR 0 8
43368: PUSH
43369: LD_VAR 0 2
43373: PPUSH
43374: CALL_OW 254
43378: ST_TO_ADDR
// r := 4 ;
43379: LD_ADDR_VAR 0 9
43383: PUSH
43384: LD_INT 4
43386: ST_TO_ADDR
// for i := 1 to 5 do
43387: LD_ADDR_VAR 0 10
43391: PUSH
43392: DOUBLE
43393: LD_INT 1
43395: DEC
43396: ST_TO_ADDR
43397: LD_INT 5
43399: PUSH
43400: FOR_TO
43401: IFFALSE 43558
// begin _x := ShiftX ( x , d , r + i ) ;
43403: LD_ADDR_VAR 0 5
43407: PUSH
43408: LD_VAR 0 4
43412: PPUSH
43413: LD_VAR 0 8
43417: PPUSH
43418: LD_VAR 0 9
43422: PUSH
43423: LD_VAR 0 10
43427: PLUS
43428: PPUSH
43429: CALL_OW 272
43433: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43434: LD_ADDR_VAR 0 7
43438: PUSH
43439: LD_VAR 0 6
43443: PPUSH
43444: LD_VAR 0 8
43448: PPUSH
43449: LD_VAR 0 9
43453: PUSH
43454: LD_VAR 0 10
43458: PLUS
43459: PPUSH
43460: CALL_OW 273
43464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43465: LD_VAR 0 5
43469: PPUSH
43470: LD_VAR 0 7
43474: PPUSH
43475: CALL_OW 488
43479: PUSH
43480: LD_VAR 0 5
43484: PPUSH
43485: LD_VAR 0 7
43489: PPUSH
43490: CALL_OW 428
43494: PPUSH
43495: CALL_OW 247
43499: PUSH
43500: LD_INT 3
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: IN
43510: NOT
43511: AND
43512: IFFALSE 43556
// begin ComMoveXY ( unit , _x , _y ) ;
43514: LD_VAR 0 1
43518: PPUSH
43519: LD_VAR 0 5
43523: PPUSH
43524: LD_VAR 0 7
43528: PPUSH
43529: CALL_OW 111
// result := [ _x , _y ] ;
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_VAR 0 5
43542: PUSH
43543: LD_VAR 0 7
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// exit ;
43552: POP
43553: POP
43554: GO 43560
// end ; end ;
43556: GO 43400
43558: POP
43559: POP
// end ;
43560: LD_VAR 0 3
43564: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43565: LD_INT 0
43567: PPUSH
43568: PPUSH
43569: PPUSH
// result := 0 ;
43570: LD_ADDR_VAR 0 3
43574: PUSH
43575: LD_INT 0
43577: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43578: LD_VAR 0 1
43582: PUSH
43583: LD_INT 0
43585: LESS
43586: PUSH
43587: LD_VAR 0 1
43591: PUSH
43592: LD_INT 8
43594: GREATER
43595: OR
43596: PUSH
43597: LD_VAR 0 2
43601: PUSH
43602: LD_INT 0
43604: LESS
43605: OR
43606: PUSH
43607: LD_VAR 0 2
43611: PUSH
43612: LD_INT 8
43614: GREATER
43615: OR
43616: IFFALSE 43620
// exit ;
43618: GO 43695
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43620: LD_ADDR_VAR 0 4
43624: PUSH
43625: LD_INT 22
43627: PUSH
43628: LD_VAR 0 2
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PPUSH
43637: CALL_OW 69
43641: PUSH
43642: FOR_IN
43643: IFFALSE 43693
// begin un := UnitShoot ( i ) ;
43645: LD_ADDR_VAR 0 5
43649: PUSH
43650: LD_VAR 0 4
43654: PPUSH
43655: CALL_OW 504
43659: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43660: LD_VAR 0 5
43664: PPUSH
43665: CALL_OW 255
43669: PUSH
43670: LD_VAR 0 1
43674: EQUAL
43675: IFFALSE 43691
// begin result := un ;
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_VAR 0 5
43686: ST_TO_ADDR
// exit ;
43687: POP
43688: POP
43689: GO 43695
// end ; end ;
43691: GO 43642
43693: POP
43694: POP
// end ;
43695: LD_VAR 0 3
43699: RET
// export function GetCargoBay ( units ) ; begin
43700: LD_INT 0
43702: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43703: LD_ADDR_VAR 0 2
43707: PUSH
43708: LD_VAR 0 1
43712: PPUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 34
43718: PUSH
43719: LD_INT 12
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 34
43728: PUSH
43729: LD_INT 51
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 34
43738: PUSH
43739: LD_INT 32
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 34
43748: PUSH
43749: LD_INT 89
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: PPUSH
43763: CALL_OW 72
43767: ST_TO_ADDR
// end ;
43768: LD_VAR 0 2
43772: RET
// export function Negate ( value ) ; begin
43773: LD_INT 0
43775: PPUSH
// result := not value ;
43776: LD_ADDR_VAR 0 2
43780: PUSH
43781: LD_VAR 0 1
43785: NOT
43786: ST_TO_ADDR
// end ;
43787: LD_VAR 0 2
43791: RET
// export function Inc ( value ) ; begin
43792: LD_INT 0
43794: PPUSH
// result := value + 1 ;
43795: LD_ADDR_VAR 0 2
43799: PUSH
43800: LD_VAR 0 1
43804: PUSH
43805: LD_INT 1
43807: PLUS
43808: ST_TO_ADDR
// end ;
43809: LD_VAR 0 2
43813: RET
// export function Dec ( value ) ; begin
43814: LD_INT 0
43816: PPUSH
// result := value - 1 ;
43817: LD_ADDR_VAR 0 2
43821: PUSH
43822: LD_VAR 0 1
43826: PUSH
43827: LD_INT 1
43829: MINUS
43830: ST_TO_ADDR
// end ;
43831: LD_VAR 0 2
43835: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43836: LD_INT 0
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43846: LD_VAR 0 1
43850: PPUSH
43851: LD_VAR 0 2
43855: PPUSH
43856: CALL_OW 488
43860: NOT
43861: PUSH
43862: LD_VAR 0 3
43866: PPUSH
43867: LD_VAR 0 4
43871: PPUSH
43872: CALL_OW 488
43876: NOT
43877: OR
43878: IFFALSE 43891
// begin result := - 1 ;
43880: LD_ADDR_VAR 0 5
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: ST_TO_ADDR
// exit ;
43889: GO 44126
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43891: LD_ADDR_VAR 0 12
43895: PUSH
43896: LD_VAR 0 1
43900: PPUSH
43901: LD_VAR 0 2
43905: PPUSH
43906: LD_VAR 0 3
43910: PPUSH
43911: LD_VAR 0 4
43915: PPUSH
43916: CALL 42976 0 4
43920: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43921: LD_ADDR_VAR 0 11
43925: PUSH
43926: LD_VAR 0 1
43930: PPUSH
43931: LD_VAR 0 2
43935: PPUSH
43936: LD_VAR 0 12
43940: PUSH
43941: LD_INT 1
43943: ARRAY
43944: PPUSH
43945: LD_VAR 0 12
43949: PUSH
43950: LD_INT 2
43952: ARRAY
43953: PPUSH
43954: CALL_OW 298
43958: ST_TO_ADDR
// distance := 9999 ;
43959: LD_ADDR_VAR 0 10
43963: PUSH
43964: LD_INT 9999
43966: ST_TO_ADDR
// for i := 0 to 5 do
43967: LD_ADDR_VAR 0 6
43971: PUSH
43972: DOUBLE
43973: LD_INT 0
43975: DEC
43976: ST_TO_ADDR
43977: LD_INT 5
43979: PUSH
43980: FOR_TO
43981: IFFALSE 44124
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43983: LD_ADDR_VAR 0 7
43987: PUSH
43988: LD_VAR 0 1
43992: PPUSH
43993: LD_VAR 0 6
43997: PPUSH
43998: LD_VAR 0 11
44002: PPUSH
44003: CALL_OW 272
44007: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
44008: LD_ADDR_VAR 0 8
44012: PUSH
44013: LD_VAR 0 2
44017: PPUSH
44018: LD_VAR 0 6
44022: PPUSH
44023: LD_VAR 0 11
44027: PPUSH
44028: CALL_OW 273
44032: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44033: LD_VAR 0 7
44037: PPUSH
44038: LD_VAR 0 8
44042: PPUSH
44043: CALL_OW 488
44047: NOT
44048: IFFALSE 44052
// continue ;
44050: GO 43980
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44052: LD_ADDR_VAR 0 9
44056: PUSH
44057: LD_VAR 0 12
44061: PUSH
44062: LD_INT 1
44064: ARRAY
44065: PPUSH
44066: LD_VAR 0 12
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: PPUSH
44075: LD_VAR 0 7
44079: PPUSH
44080: LD_VAR 0 8
44084: PPUSH
44085: CALL_OW 298
44089: ST_TO_ADDR
// if tmp < distance then
44090: LD_VAR 0 9
44094: PUSH
44095: LD_VAR 0 10
44099: LESS
44100: IFFALSE 44122
// begin result := i ;
44102: LD_ADDR_VAR 0 5
44106: PUSH
44107: LD_VAR 0 6
44111: ST_TO_ADDR
// distance := tmp ;
44112: LD_ADDR_VAR 0 10
44116: PUSH
44117: LD_VAR 0 9
44121: ST_TO_ADDR
// end ; end ;
44122: GO 43980
44124: POP
44125: POP
// end ;
44126: LD_VAR 0 5
44130: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44131: LD_INT 0
44133: PPUSH
44134: PPUSH
// if not driver or not IsInUnit ( driver ) then
44135: LD_VAR 0 1
44139: NOT
44140: PUSH
44141: LD_VAR 0 1
44145: PPUSH
44146: CALL_OW 310
44150: NOT
44151: OR
44152: IFFALSE 44156
// exit ;
44154: GO 44246
// vehicle := IsInUnit ( driver ) ;
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: LD_VAR 0 1
44165: PPUSH
44166: CALL_OW 310
44170: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44171: LD_VAR 0 1
44175: PPUSH
44176: LD_STRING \
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: PUSH
44206: LD_STRING E
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_VAR 0 3
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PPUSH
44242: CALL_OW 446
// end ;
44246: LD_VAR 0 2
44250: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44251: LD_INT 0
44253: PPUSH
44254: PPUSH
// if not driver or not IsInUnit ( driver ) then
44255: LD_VAR 0 1
44259: NOT
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 310
44270: NOT
44271: OR
44272: IFFALSE 44276
// exit ;
44274: GO 44366
// vehicle := IsInUnit ( driver ) ;
44276: LD_ADDR_VAR 0 3
44280: PUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: CALL_OW 310
44290: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44291: LD_VAR 0 1
44295: PPUSH
44296: LD_STRING \
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: PUSH
44326: LD_STRING E
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_VAR 0 3
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PPUSH
44362: CALL_OW 447
// end ;
44366: LD_VAR 0 2
44370: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44371: LD_INT 0
44373: PPUSH
44374: PPUSH
44375: PPUSH
// tmp := [ ] ;
44376: LD_ADDR_VAR 0 5
44380: PUSH
44381: EMPTY
44382: ST_TO_ADDR
// for i in units do
44383: LD_ADDR_VAR 0 4
44387: PUSH
44388: LD_VAR 0 1
44392: PUSH
44393: FOR_IN
44394: IFFALSE 44432
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44396: LD_ADDR_VAR 0 5
44400: PUSH
44401: LD_VAR 0 5
44405: PPUSH
44406: LD_VAR 0 5
44410: PUSH
44411: LD_INT 1
44413: PLUS
44414: PPUSH
44415: LD_VAR 0 4
44419: PPUSH
44420: CALL_OW 256
44424: PPUSH
44425: CALL_OW 2
44429: ST_TO_ADDR
44430: GO 44393
44432: POP
44433: POP
// if not tmp then
44434: LD_VAR 0 5
44438: NOT
44439: IFFALSE 44443
// exit ;
44441: GO 44491
// if asc then
44443: LD_VAR 0 2
44447: IFFALSE 44471
// result := SortListByListAsc ( units , tmp ) else
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_VAR 0 1
44458: PPUSH
44459: LD_VAR 0 5
44463: PPUSH
44464: CALL_OW 76
44468: ST_TO_ADDR
44469: GO 44491
// result := SortListByListDesc ( units , tmp ) ;
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_VAR 0 1
44480: PPUSH
44481: LD_VAR 0 5
44485: PPUSH
44486: CALL_OW 77
44490: ST_TO_ADDR
// end ;
44491: LD_VAR 0 3
44495: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44496: LD_INT 0
44498: PPUSH
44499: PPUSH
// task := GetTaskList ( mech ) ;
44500: LD_ADDR_VAR 0 4
44504: PUSH
44505: LD_VAR 0 1
44509: PPUSH
44510: CALL_OW 437
44514: ST_TO_ADDR
// if not task then
44515: LD_VAR 0 4
44519: NOT
44520: IFFALSE 44524
// exit ;
44522: GO 44566
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44524: LD_ADDR_VAR 0 3
44528: PUSH
44529: LD_VAR 0 4
44533: PUSH
44534: LD_INT 1
44536: ARRAY
44537: PUSH
44538: LD_INT 1
44540: ARRAY
44541: PUSH
44542: LD_STRING r
44544: EQUAL
44545: PUSH
44546: LD_VAR 0 4
44550: PUSH
44551: LD_INT 1
44553: ARRAY
44554: PUSH
44555: LD_INT 4
44557: ARRAY
44558: PUSH
44559: LD_VAR 0 2
44563: EQUAL
44564: AND
44565: ST_TO_ADDR
// end ;
44566: LD_VAR 0 3
44570: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44571: LD_INT 0
44573: PPUSH
// SetDir ( unit , d ) ;
44574: LD_VAR 0 1
44578: PPUSH
44579: LD_VAR 0 4
44583: PPUSH
44584: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44588: LD_VAR 0 1
44592: PPUSH
44593: LD_VAR 0 2
44597: PPUSH
44598: LD_VAR 0 3
44602: PPUSH
44603: LD_VAR 0 5
44607: PPUSH
44608: CALL_OW 48
// end ;
44612: LD_VAR 0 6
44616: RET
// export function ToNaturalNumber ( number ) ; begin
44617: LD_INT 0
44619: PPUSH
// result := number div 1 ;
44620: LD_ADDR_VAR 0 2
44624: PUSH
44625: LD_VAR 0 1
44629: PUSH
44630: LD_INT 1
44632: DIV
44633: ST_TO_ADDR
// if number < 0 then
44634: LD_VAR 0 1
44638: PUSH
44639: LD_INT 0
44641: LESS
44642: IFFALSE 44652
// result := 0 ;
44644: LD_ADDR_VAR 0 2
44648: PUSH
44649: LD_INT 0
44651: ST_TO_ADDR
// end ;
44652: LD_VAR 0 2
44656: RET
// export function SortByClass ( units , class ) ; var un ; begin
44657: LD_INT 0
44659: PPUSH
44660: PPUSH
// if not units or not class then
44661: LD_VAR 0 1
44665: NOT
44666: PUSH
44667: LD_VAR 0 2
44671: NOT
44672: OR
44673: IFFALSE 44677
// exit ;
44675: GO 44772
// result := [ ] ;
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: EMPTY
44683: ST_TO_ADDR
// for un in units do
44684: LD_ADDR_VAR 0 4
44688: PUSH
44689: LD_VAR 0 1
44693: PUSH
44694: FOR_IN
44695: IFFALSE 44770
// if GetClass ( un ) = class then
44697: LD_VAR 0 4
44701: PPUSH
44702: CALL_OW 257
44706: PUSH
44707: LD_VAR 0 2
44711: EQUAL
44712: IFFALSE 44739
// result := Insert ( result , 1 , un ) else
44714: LD_ADDR_VAR 0 3
44718: PUSH
44719: LD_VAR 0 3
44723: PPUSH
44724: LD_INT 1
44726: PPUSH
44727: LD_VAR 0 4
44731: PPUSH
44732: CALL_OW 2
44736: ST_TO_ADDR
44737: GO 44768
// result := Replace ( result , result + 1 , un ) ;
44739: LD_ADDR_VAR 0 3
44743: PUSH
44744: LD_VAR 0 3
44748: PPUSH
44749: LD_VAR 0 3
44753: PUSH
44754: LD_INT 1
44756: PLUS
44757: PPUSH
44758: LD_VAR 0 4
44762: PPUSH
44763: CALL_OW 1
44767: ST_TO_ADDR
44768: GO 44694
44770: POP
44771: POP
// end ;
44772: LD_VAR 0 3
44776: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44777: LD_INT 0
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
// result := [ ] ;
44786: LD_ADDR_VAR 0 4
44790: PUSH
44791: EMPTY
44792: ST_TO_ADDR
// if x - r < 0 then
44793: LD_VAR 0 1
44797: PUSH
44798: LD_VAR 0 3
44802: MINUS
44803: PUSH
44804: LD_INT 0
44806: LESS
44807: IFFALSE 44819
// min_x := 0 else
44809: LD_ADDR_VAR 0 8
44813: PUSH
44814: LD_INT 0
44816: ST_TO_ADDR
44817: GO 44835
// min_x := x - r ;
44819: LD_ADDR_VAR 0 8
44823: PUSH
44824: LD_VAR 0 1
44828: PUSH
44829: LD_VAR 0 3
44833: MINUS
44834: ST_TO_ADDR
// if y - r < 0 then
44835: LD_VAR 0 2
44839: PUSH
44840: LD_VAR 0 3
44844: MINUS
44845: PUSH
44846: LD_INT 0
44848: LESS
44849: IFFALSE 44861
// min_y := 0 else
44851: LD_ADDR_VAR 0 7
44855: PUSH
44856: LD_INT 0
44858: ST_TO_ADDR
44859: GO 44877
// min_y := y - r ;
44861: LD_ADDR_VAR 0 7
44865: PUSH
44866: LD_VAR 0 2
44870: PUSH
44871: LD_VAR 0 3
44875: MINUS
44876: ST_TO_ADDR
// max_x := x + r ;
44877: LD_ADDR_VAR 0 9
44881: PUSH
44882: LD_VAR 0 1
44886: PUSH
44887: LD_VAR 0 3
44891: PLUS
44892: ST_TO_ADDR
// max_y := y + r ;
44893: LD_ADDR_VAR 0 10
44897: PUSH
44898: LD_VAR 0 2
44902: PUSH
44903: LD_VAR 0 3
44907: PLUS
44908: ST_TO_ADDR
// for _x = min_x to max_x do
44909: LD_ADDR_VAR 0 5
44913: PUSH
44914: DOUBLE
44915: LD_VAR 0 8
44919: DEC
44920: ST_TO_ADDR
44921: LD_VAR 0 9
44925: PUSH
44926: FOR_TO
44927: IFFALSE 45028
// for _y = min_y to max_y do
44929: LD_ADDR_VAR 0 6
44933: PUSH
44934: DOUBLE
44935: LD_VAR 0 7
44939: DEC
44940: ST_TO_ADDR
44941: LD_VAR 0 10
44945: PUSH
44946: FOR_TO
44947: IFFALSE 45024
// begin if not ValidHex ( _x , _y ) then
44949: LD_VAR 0 5
44953: PPUSH
44954: LD_VAR 0 6
44958: PPUSH
44959: CALL_OW 488
44963: NOT
44964: IFFALSE 44968
// continue ;
44966: GO 44946
// if GetResourceTypeXY ( _x , _y ) then
44968: LD_VAR 0 5
44972: PPUSH
44973: LD_VAR 0 6
44977: PPUSH
44978: CALL_OW 283
44982: IFFALSE 45022
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44984: LD_ADDR_VAR 0 4
44988: PUSH
44989: LD_VAR 0 4
44993: PPUSH
44994: LD_VAR 0 4
44998: PUSH
44999: LD_INT 1
45001: PLUS
45002: PPUSH
45003: LD_VAR 0 5
45007: PUSH
45008: LD_VAR 0 6
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PPUSH
45017: CALL_OW 1
45021: ST_TO_ADDR
// end ;
45022: GO 44946
45024: POP
45025: POP
45026: GO 44926
45028: POP
45029: POP
// end ;
45030: LD_VAR 0 4
45034: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45035: LD_INT 0
45037: PPUSH
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
// if not units then
45045: LD_VAR 0 1
45049: NOT
45050: IFFALSE 45054
// exit ;
45052: GO 45578
// result := UnitFilter ( units , [ f_ok ] ) ;
45054: LD_ADDR_VAR 0 3
45058: PUSH
45059: LD_VAR 0 1
45063: PPUSH
45064: LD_INT 50
45066: PUSH
45067: EMPTY
45068: LIST
45069: PPUSH
45070: CALL_OW 72
45074: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45075: LD_ADDR_VAR 0 8
45079: PUSH
45080: LD_VAR 0 1
45084: PUSH
45085: LD_INT 1
45087: ARRAY
45088: PPUSH
45089: CALL_OW 255
45093: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45094: LD_ADDR_VAR 0 10
45098: PUSH
45099: LD_INT 29
45101: PUSH
45102: LD_INT 91
45104: PUSH
45105: LD_INT 49
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
// if not result then
45113: LD_VAR 0 3
45117: NOT
45118: IFFALSE 45122
// exit ;
45120: GO 45578
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45122: LD_ADDR_VAR 0 5
45126: PUSH
45127: LD_INT 81
45129: PUSH
45130: LD_VAR 0 8
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PPUSH
45139: CALL_OW 69
45143: ST_TO_ADDR
// for i in result do
45144: LD_ADDR_VAR 0 4
45148: PUSH
45149: LD_VAR 0 3
45153: PUSH
45154: FOR_IN
45155: IFFALSE 45576
// begin tag := GetTag ( i ) + 1 ;
45157: LD_ADDR_VAR 0 9
45161: PUSH
45162: LD_VAR 0 4
45166: PPUSH
45167: CALL_OW 110
45171: PUSH
45172: LD_INT 1
45174: PLUS
45175: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
45176: LD_ADDR_VAR 0 7
45180: PUSH
45181: LD_VAR 0 4
45185: PPUSH
45186: CALL_OW 250
45190: PPUSH
45191: LD_VAR 0 4
45195: PPUSH
45196: CALL_OW 251
45200: PPUSH
45201: LD_INT 6
45203: PPUSH
45204: CALL 44777 0 3
45208: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
45209: LD_VAR 0 4
45213: PPUSH
45214: CALL_OW 247
45218: PUSH
45219: LD_INT 2
45221: EQUAL
45222: PUSH
45223: LD_VAR 0 7
45227: AND
45228: PUSH
45229: LD_VAR 0 4
45233: PPUSH
45234: CALL_OW 264
45238: PUSH
45239: LD_VAR 0 10
45243: IN
45244: NOT
45245: AND
45246: IFFALSE 45285
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45248: LD_VAR 0 4
45252: PPUSH
45253: LD_VAR 0 7
45257: PUSH
45258: LD_INT 1
45260: ARRAY
45261: PUSH
45262: LD_INT 1
45264: ARRAY
45265: PPUSH
45266: LD_VAR 0 7
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: PUSH
45275: LD_INT 2
45277: ARRAY
45278: PPUSH
45279: CALL_OW 116
45283: GO 45574
// if path > tag then
45285: LD_VAR 0 2
45289: PUSH
45290: LD_VAR 0 9
45294: GREATER
45295: IFFALSE 45503
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45297: LD_ADDR_VAR 0 6
45301: PUSH
45302: LD_VAR 0 5
45306: PPUSH
45307: LD_INT 91
45309: PUSH
45310: LD_VAR 0 4
45314: PUSH
45315: LD_INT 8
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: PPUSH
45323: CALL_OW 72
45327: ST_TO_ADDR
// if nearEnemy then
45328: LD_VAR 0 6
45332: IFFALSE 45401
// begin if GetWeapon ( i ) = ru_time_lapser then
45334: LD_VAR 0 4
45338: PPUSH
45339: CALL_OW 264
45343: PUSH
45344: LD_INT 49
45346: EQUAL
45347: IFFALSE 45375
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45349: LD_VAR 0 4
45353: PPUSH
45354: LD_VAR 0 6
45358: PPUSH
45359: LD_VAR 0 4
45363: PPUSH
45364: CALL_OW 74
45368: PPUSH
45369: CALL_OW 112
45373: GO 45399
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45375: LD_VAR 0 4
45379: PPUSH
45380: LD_VAR 0 6
45384: PPUSH
45385: LD_VAR 0 4
45389: PPUSH
45390: CALL_OW 74
45394: PPUSH
45395: CALL 46503 0 2
// end else
45399: GO 45501
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45401: LD_VAR 0 4
45405: PPUSH
45406: LD_VAR 0 2
45410: PUSH
45411: LD_VAR 0 9
45415: ARRAY
45416: PUSH
45417: LD_INT 1
45419: ARRAY
45420: PPUSH
45421: LD_VAR 0 2
45425: PUSH
45426: LD_VAR 0 9
45430: ARRAY
45431: PUSH
45432: LD_INT 2
45434: ARRAY
45435: PPUSH
45436: CALL_OW 297
45440: PUSH
45441: LD_INT 6
45443: GREATER
45444: IFFALSE 45487
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45446: LD_VAR 0 4
45450: PPUSH
45451: LD_VAR 0 2
45455: PUSH
45456: LD_VAR 0 9
45460: ARRAY
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PPUSH
45466: LD_VAR 0 2
45470: PUSH
45471: LD_VAR 0 9
45475: ARRAY
45476: PUSH
45477: LD_INT 2
45479: ARRAY
45480: PPUSH
45481: CALL_OW 114
45485: GO 45501
// SetTag ( i , tag ) ;
45487: LD_VAR 0 4
45491: PPUSH
45492: LD_VAR 0 9
45496: PPUSH
45497: CALL_OW 109
// end else
45501: GO 45574
// if enemy then
45503: LD_VAR 0 5
45507: IFFALSE 45574
// begin if GetWeapon ( i ) = ru_time_lapser then
45509: LD_VAR 0 4
45513: PPUSH
45514: CALL_OW 264
45518: PUSH
45519: LD_INT 49
45521: EQUAL
45522: IFFALSE 45550
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45524: LD_VAR 0 4
45528: PPUSH
45529: LD_VAR 0 5
45533: PPUSH
45534: LD_VAR 0 4
45538: PPUSH
45539: CALL_OW 74
45543: PPUSH
45544: CALL_OW 112
45548: GO 45574
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45550: LD_VAR 0 4
45554: PPUSH
45555: LD_VAR 0 5
45559: PPUSH
45560: LD_VAR 0 4
45564: PPUSH
45565: CALL_OW 74
45569: PPUSH
45570: CALL 46503 0 2
// end ; end ;
45574: GO 45154
45576: POP
45577: POP
// end ;
45578: LD_VAR 0 3
45582: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45583: LD_INT 0
45585: PPUSH
45586: PPUSH
45587: PPUSH
// if not unit or IsInUnit ( unit ) then
45588: LD_VAR 0 1
45592: NOT
45593: PUSH
45594: LD_VAR 0 1
45598: PPUSH
45599: CALL_OW 310
45603: OR
45604: IFFALSE 45608
// exit ;
45606: GO 45699
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45608: LD_ADDR_VAR 0 4
45612: PUSH
45613: LD_VAR 0 1
45617: PPUSH
45618: CALL_OW 250
45622: PPUSH
45623: LD_VAR 0 2
45627: PPUSH
45628: LD_INT 1
45630: PPUSH
45631: CALL_OW 272
45635: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45636: LD_ADDR_VAR 0 5
45640: PUSH
45641: LD_VAR 0 1
45645: PPUSH
45646: CALL_OW 251
45650: PPUSH
45651: LD_VAR 0 2
45655: PPUSH
45656: LD_INT 1
45658: PPUSH
45659: CALL_OW 273
45663: ST_TO_ADDR
// if ValidHex ( x , y ) then
45664: LD_VAR 0 4
45668: PPUSH
45669: LD_VAR 0 5
45673: PPUSH
45674: CALL_OW 488
45678: IFFALSE 45699
// ComTurnXY ( unit , x , y ) ;
45680: LD_VAR 0 1
45684: PPUSH
45685: LD_VAR 0 4
45689: PPUSH
45690: LD_VAR 0 5
45694: PPUSH
45695: CALL_OW 118
// end ;
45699: LD_VAR 0 3
45703: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45704: LD_INT 0
45706: PPUSH
45707: PPUSH
// result := false ;
45708: LD_ADDR_VAR 0 3
45712: PUSH
45713: LD_INT 0
45715: ST_TO_ADDR
// if not units then
45716: LD_VAR 0 2
45720: NOT
45721: IFFALSE 45725
// exit ;
45723: GO 45770
// for i in units do
45725: LD_ADDR_VAR 0 4
45729: PUSH
45730: LD_VAR 0 2
45734: PUSH
45735: FOR_IN
45736: IFFALSE 45768
// if See ( side , i ) then
45738: LD_VAR 0 1
45742: PPUSH
45743: LD_VAR 0 4
45747: PPUSH
45748: CALL_OW 292
45752: IFFALSE 45766
// begin result := true ;
45754: LD_ADDR_VAR 0 3
45758: PUSH
45759: LD_INT 1
45761: ST_TO_ADDR
// exit ;
45762: POP
45763: POP
45764: GO 45770
// end ;
45766: GO 45735
45768: POP
45769: POP
// end ;
45770: LD_VAR 0 3
45774: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45775: LD_INT 0
45777: PPUSH
45778: PPUSH
45779: PPUSH
45780: PPUSH
// if not unit or not points then
45781: LD_VAR 0 1
45785: NOT
45786: PUSH
45787: LD_VAR 0 2
45791: NOT
45792: OR
45793: IFFALSE 45797
// exit ;
45795: GO 45887
// dist := 99999 ;
45797: LD_ADDR_VAR 0 5
45801: PUSH
45802: LD_INT 99999
45804: ST_TO_ADDR
// for i in points do
45805: LD_ADDR_VAR 0 4
45809: PUSH
45810: LD_VAR 0 2
45814: PUSH
45815: FOR_IN
45816: IFFALSE 45885
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45818: LD_ADDR_VAR 0 6
45822: PUSH
45823: LD_VAR 0 1
45827: PPUSH
45828: LD_VAR 0 4
45832: PUSH
45833: LD_INT 1
45835: ARRAY
45836: PPUSH
45837: LD_VAR 0 4
45841: PUSH
45842: LD_INT 2
45844: ARRAY
45845: PPUSH
45846: CALL_OW 297
45850: ST_TO_ADDR
// if tmpDist < dist then
45851: LD_VAR 0 6
45855: PUSH
45856: LD_VAR 0 5
45860: LESS
45861: IFFALSE 45883
// begin result := i ;
45863: LD_ADDR_VAR 0 3
45867: PUSH
45868: LD_VAR 0 4
45872: ST_TO_ADDR
// dist := tmpDist ;
45873: LD_ADDR_VAR 0 5
45877: PUSH
45878: LD_VAR 0 6
45882: ST_TO_ADDR
// end ; end ;
45883: GO 45815
45885: POP
45886: POP
// end ;
45887: LD_VAR 0 3
45891: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45892: LD_INT 0
45894: PPUSH
// uc_side := side ;
45895: LD_ADDR_OWVAR 20
45899: PUSH
45900: LD_VAR 0 1
45904: ST_TO_ADDR
// uc_nation := 3 ;
45905: LD_ADDR_OWVAR 21
45909: PUSH
45910: LD_INT 3
45912: ST_TO_ADDR
// vc_chassis := 25 ;
45913: LD_ADDR_OWVAR 37
45917: PUSH
45918: LD_INT 25
45920: ST_TO_ADDR
// vc_engine := engine_siberite ;
45921: LD_ADDR_OWVAR 39
45925: PUSH
45926: LD_INT 3
45928: ST_TO_ADDR
// vc_control := control_computer ;
45929: LD_ADDR_OWVAR 38
45933: PUSH
45934: LD_INT 3
45936: ST_TO_ADDR
// vc_weapon := 59 ;
45937: LD_ADDR_OWVAR 40
45941: PUSH
45942: LD_INT 59
45944: ST_TO_ADDR
// result := CreateVehicle ;
45945: LD_ADDR_VAR 0 5
45949: PUSH
45950: CALL_OW 45
45954: ST_TO_ADDR
// SetDir ( result , d ) ;
45955: LD_VAR 0 5
45959: PPUSH
45960: LD_VAR 0 4
45964: PPUSH
45965: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45969: LD_VAR 0 5
45973: PPUSH
45974: LD_VAR 0 2
45978: PPUSH
45979: LD_VAR 0 3
45983: PPUSH
45984: LD_INT 0
45986: PPUSH
45987: CALL_OW 48
// end ;
45991: LD_VAR 0 5
45995: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45996: LD_INT 0
45998: PPUSH
45999: PPUSH
46000: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
46001: LD_ADDR_VAR 0 2
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46024: LD_VAR 0 1
46028: NOT
46029: PUSH
46030: LD_VAR 0 1
46034: PPUSH
46035: CALL_OW 264
46039: PUSH
46040: LD_INT 12
46042: PUSH
46043: LD_INT 51
46045: PUSH
46046: LD_INT 32
46048: PUSH
46049: LD_INT 89
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: IN
46058: NOT
46059: OR
46060: IFFALSE 46064
// exit ;
46062: GO 46162
// for i := 1 to 3 do
46064: LD_ADDR_VAR 0 3
46068: PUSH
46069: DOUBLE
46070: LD_INT 1
46072: DEC
46073: ST_TO_ADDR
46074: LD_INT 3
46076: PUSH
46077: FOR_TO
46078: IFFALSE 46160
// begin tmp := GetCargo ( cargo , i ) ;
46080: LD_ADDR_VAR 0 4
46084: PUSH
46085: LD_VAR 0 1
46089: PPUSH
46090: LD_VAR 0 3
46094: PPUSH
46095: CALL_OW 289
46099: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46100: LD_ADDR_VAR 0 2
46104: PUSH
46105: LD_VAR 0 2
46109: PPUSH
46110: LD_VAR 0 3
46114: PPUSH
46115: LD_VAR 0 4
46119: PPUSH
46120: CALL_OW 1
46124: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46125: LD_ADDR_VAR 0 2
46129: PUSH
46130: LD_VAR 0 2
46134: PPUSH
46135: LD_INT 4
46137: PPUSH
46138: LD_VAR 0 2
46142: PUSH
46143: LD_INT 4
46145: ARRAY
46146: PUSH
46147: LD_VAR 0 4
46151: PLUS
46152: PPUSH
46153: CALL_OW 1
46157: ST_TO_ADDR
// end ;
46158: GO 46077
46160: POP
46161: POP
// end ;
46162: LD_VAR 0 2
46166: RET
// export function Length ( array ) ; begin
46167: LD_INT 0
46169: PPUSH
// result := array + 0 ;
46170: LD_ADDR_VAR 0 2
46174: PUSH
46175: LD_VAR 0 1
46179: PUSH
46180: LD_INT 0
46182: PLUS
46183: ST_TO_ADDR
// end ;
46184: LD_VAR 0 2
46188: RET
// export function PrepareArray ( array ) ; begin
46189: LD_INT 0
46191: PPUSH
// result := array diff 0 ;
46192: LD_ADDR_VAR 0 2
46196: PUSH
46197: LD_VAR 0 1
46201: PUSH
46202: LD_INT 0
46204: DIFF
46205: ST_TO_ADDR
// if not result [ 1 ] then
46206: LD_VAR 0 2
46210: PUSH
46211: LD_INT 1
46213: ARRAY
46214: NOT
46215: IFFALSE 46235
// result := Delete ( result , 1 ) ;
46217: LD_ADDR_VAR 0 2
46221: PUSH
46222: LD_VAR 0 2
46226: PPUSH
46227: LD_INT 1
46229: PPUSH
46230: CALL_OW 3
46234: ST_TO_ADDR
// end ;
46235: LD_VAR 0 2
46239: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46240: LD_INT 0
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
// sibRocketRange := 25 ;
46246: LD_ADDR_VAR 0 6
46250: PUSH
46251: LD_INT 25
46253: ST_TO_ADDR
// result := false ;
46254: LD_ADDR_VAR 0 4
46258: PUSH
46259: LD_INT 0
46261: ST_TO_ADDR
// for i := 0 to 5 do
46262: LD_ADDR_VAR 0 5
46266: PUSH
46267: DOUBLE
46268: LD_INT 0
46270: DEC
46271: ST_TO_ADDR
46272: LD_INT 5
46274: PUSH
46275: FOR_TO
46276: IFFALSE 46343
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46278: LD_VAR 0 1
46282: PPUSH
46283: LD_VAR 0 5
46287: PPUSH
46288: LD_VAR 0 6
46292: PPUSH
46293: CALL_OW 272
46297: PPUSH
46298: LD_VAR 0 2
46302: PPUSH
46303: LD_VAR 0 5
46307: PPUSH
46308: LD_VAR 0 6
46312: PPUSH
46313: CALL_OW 273
46317: PPUSH
46318: LD_VAR 0 3
46322: PPUSH
46323: CALL_OW 309
46327: IFFALSE 46341
// begin result := true ;
46329: LD_ADDR_VAR 0 4
46333: PUSH
46334: LD_INT 1
46336: ST_TO_ADDR
// exit ;
46337: POP
46338: POP
46339: GO 46345
// end ;
46341: GO 46275
46343: POP
46344: POP
// end ;
46345: LD_VAR 0 4
46349: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46350: LD_INT 0
46352: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46353: LD_VAR 0 1
46357: PPUSH
46358: LD_VAR 0 2
46362: PPUSH
46363: LD_INT 0
46365: PPUSH
46366: LD_INT 0
46368: PPUSH
46369: LD_INT 1
46371: PPUSH
46372: LD_INT 0
46374: PPUSH
46375: CALL_OW 587
// end ;
46379: LD_VAR 0 3
46383: RET
// export function CenterOnNow ( unit ) ; begin
46384: LD_INT 0
46386: PPUSH
// result := IsInUnit ( unit ) ;
46387: LD_ADDR_VAR 0 2
46391: PUSH
46392: LD_VAR 0 1
46396: PPUSH
46397: CALL_OW 310
46401: ST_TO_ADDR
// if not result then
46402: LD_VAR 0 2
46406: NOT
46407: IFFALSE 46419
// result := unit ;
46409: LD_ADDR_VAR 0 2
46413: PUSH
46414: LD_VAR 0 1
46418: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46419: LD_VAR 0 1
46423: PPUSH
46424: CALL_OW 87
// end ;
46428: LD_VAR 0 2
46432: RET
// export function ComMoveHex ( unit , hex ) ; begin
46433: LD_INT 0
46435: PPUSH
// if not hex then
46436: LD_VAR 0 2
46440: NOT
46441: IFFALSE 46445
// exit ;
46443: GO 46498
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46445: LD_VAR 0 2
46449: PUSH
46450: LD_INT 1
46452: ARRAY
46453: PPUSH
46454: LD_VAR 0 2
46458: PUSH
46459: LD_INT 2
46461: ARRAY
46462: PPUSH
46463: CALL_OW 428
46467: IFFALSE 46471
// exit ;
46469: GO 46498
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46471: LD_VAR 0 1
46475: PPUSH
46476: LD_VAR 0 2
46480: PUSH
46481: LD_INT 1
46483: ARRAY
46484: PPUSH
46485: LD_VAR 0 2
46489: PUSH
46490: LD_INT 2
46492: ARRAY
46493: PPUSH
46494: CALL_OW 111
// end ;
46498: LD_VAR 0 3
46502: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46503: LD_INT 0
46505: PPUSH
46506: PPUSH
46507: PPUSH
// if not unit or not enemy then
46508: LD_VAR 0 1
46512: NOT
46513: PUSH
46514: LD_VAR 0 2
46518: NOT
46519: OR
46520: IFFALSE 46524
// exit ;
46522: GO 46648
// x := GetX ( enemy ) ;
46524: LD_ADDR_VAR 0 4
46528: PUSH
46529: LD_VAR 0 2
46533: PPUSH
46534: CALL_OW 250
46538: ST_TO_ADDR
// y := GetY ( enemy ) ;
46539: LD_ADDR_VAR 0 5
46543: PUSH
46544: LD_VAR 0 2
46548: PPUSH
46549: CALL_OW 251
46553: ST_TO_ADDR
// if ValidHex ( x , y ) then
46554: LD_VAR 0 4
46558: PPUSH
46559: LD_VAR 0 5
46563: PPUSH
46564: CALL_OW 488
46568: IFFALSE 46648
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
46570: LD_VAR 0 2
46574: PPUSH
46575: CALL_OW 247
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: IN
46590: PUSH
46591: LD_VAR 0 1
46595: PPUSH
46596: CALL_OW 255
46600: PPUSH
46601: LD_VAR 0 2
46605: PPUSH
46606: CALL_OW 292
46610: AND
46611: IFFALSE 46629
// ComAttackUnit ( unit , enemy ) else
46613: LD_VAR 0 1
46617: PPUSH
46618: LD_VAR 0 2
46622: PPUSH
46623: CALL_OW 115
46627: GO 46648
// ComAgressiveMove ( unit , x , y ) ;
46629: LD_VAR 0 1
46633: PPUSH
46634: LD_VAR 0 4
46638: PPUSH
46639: LD_VAR 0 5
46643: PPUSH
46644: CALL_OW 114
// end ;
46648: LD_VAR 0 3
46652: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46653: LD_INT 0
46655: PPUSH
46656: PPUSH
46657: PPUSH
// list := AreaToList ( area , 0 ) ;
46658: LD_ADDR_VAR 0 5
46662: PUSH
46663: LD_VAR 0 1
46667: PPUSH
46668: LD_INT 0
46670: PPUSH
46671: CALL_OW 517
46675: ST_TO_ADDR
// if not list then
46676: LD_VAR 0 5
46680: NOT
46681: IFFALSE 46685
// exit ;
46683: GO 46815
// if all then
46685: LD_VAR 0 2
46689: IFFALSE 46777
// begin for i := 1 to list [ 1 ] do
46691: LD_ADDR_VAR 0 4
46695: PUSH
46696: DOUBLE
46697: LD_INT 1
46699: DEC
46700: ST_TO_ADDR
46701: LD_VAR 0 5
46705: PUSH
46706: LD_INT 1
46708: ARRAY
46709: PUSH
46710: FOR_TO
46711: IFFALSE 46773
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46713: LD_ADDR_VAR 0 3
46717: PUSH
46718: LD_VAR 0 3
46722: PPUSH
46723: LD_VAR 0 3
46727: PUSH
46728: LD_INT 1
46730: PLUS
46731: PPUSH
46732: LD_VAR 0 5
46736: PUSH
46737: LD_INT 1
46739: ARRAY
46740: PUSH
46741: LD_VAR 0 4
46745: ARRAY
46746: PUSH
46747: LD_VAR 0 5
46751: PUSH
46752: LD_INT 2
46754: ARRAY
46755: PUSH
46756: LD_VAR 0 4
46760: ARRAY
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PPUSH
46766: CALL_OW 1
46770: ST_TO_ADDR
46771: GO 46710
46773: POP
46774: POP
// exit ;
46775: GO 46815
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46777: LD_ADDR_VAR 0 3
46781: PUSH
46782: LD_VAR 0 5
46786: PUSH
46787: LD_INT 1
46789: ARRAY
46790: PUSH
46791: LD_INT 1
46793: ARRAY
46794: PUSH
46795: LD_VAR 0 5
46799: PUSH
46800: LD_INT 2
46802: ARRAY
46803: PUSH
46804: LD_INT 1
46806: ARRAY
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: EMPTY
46813: LIST
46814: ST_TO_ADDR
// end ;
46815: LD_VAR 0 3
46819: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46820: LD_INT 0
46822: PPUSH
46823: PPUSH
// list := AreaToList ( area , 0 ) ;
46824: LD_ADDR_VAR 0 4
46828: PUSH
46829: LD_VAR 0 1
46833: PPUSH
46834: LD_INT 0
46836: PPUSH
46837: CALL_OW 517
46841: ST_TO_ADDR
// if not list then
46842: LD_VAR 0 4
46846: NOT
46847: IFFALSE 46851
// exit ;
46849: GO 46892
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46851: LD_ADDR_VAR 0 3
46855: PUSH
46856: LD_VAR 0 4
46860: PUSH
46861: LD_INT 1
46863: ARRAY
46864: PUSH
46865: LD_INT 1
46867: ARRAY
46868: PUSH
46869: LD_VAR 0 4
46873: PUSH
46874: LD_INT 2
46876: ARRAY
46877: PUSH
46878: LD_INT 1
46880: ARRAY
46881: PUSH
46882: LD_VAR 0 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// end ; end_of_file end_of_file
46892: LD_VAR 0 3
46896: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
46897: LD_VAR 0 1
46901: PPUSH
46902: LD_VAR 0 2
46906: PPUSH
46907: LD_VAR 0 3
46911: PPUSH
46912: LD_VAR 0 4
46916: PPUSH
46917: LD_VAR 0 5
46921: PPUSH
46922: LD_VAR 0 6
46926: PPUSH
46927: CALL 47111 0 6
// end ;
46931: PPOPN 6
46933: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
46934: LD_INT 0
46936: PPUSH
// begin if not units then
46937: LD_VAR 0 1
46941: NOT
46942: IFFALSE 46946
// exit ;
46944: GO 46946
// end ;
46946: PPOPN 7
46948: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
46949: CALL 47015 0 0
// end ; end_of_file
46953: PPOPN 1
46955: END
// export globalGameSaveCounter ; every 0 0$1 do
46956: GO 46958
46958: DISABLE
// begin enable ;
46959: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46960: LD_STRING updateTimer(
46962: PUSH
46963: LD_OWVAR 1
46967: STR
46968: PUSH
46969: LD_STRING );
46971: STR
46972: PPUSH
46973: CALL_OW 559
// end ;
46977: END
// every 0 0$1 do
46978: GO 46980
46980: DISABLE
// begin globalGameSaveCounter := 0 ;
46981: LD_ADDR_EXP 27
46985: PUSH
46986: LD_INT 0
46988: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
46989: LD_STRING setGameSaveCounter(0)
46991: PPUSH
46992: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
46996: LD_STRING initStreamRollete();
46998: PPUSH
46999: CALL_OW 559
// InitStreamMode ;
47003: CALL 48329 0 0
// DefineStreamItems ( false ) ;
47007: LD_INT 0
47009: PPUSH
47010: CALL 48793 0 1
// end ;
47014: END
// export function SOS_MapStart ( ) ; begin
47015: LD_INT 0
47017: PPUSH
// if streamModeActive then
47018: LD_EXP 28
47022: IFFALSE 47031
// DefineStreamItems ( true ) ;
47024: LD_INT 1
47026: PPUSH
47027: CALL 48793 0 1
// UpdateLuaVariables ( ) ;
47031: CALL 47048 0 0
// UpdateFactoryWaypoints ( ) ;
47035: CALL 61662 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47039: CALL 61919 0 0
// end ;
47043: LD_VAR 0 1
47047: RET
// function UpdateLuaVariables ( ) ; begin
47048: LD_INT 0
47050: PPUSH
// if globalGameSaveCounter then
47051: LD_EXP 27
47055: IFFALSE 47089
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47057: LD_ADDR_EXP 27
47061: PUSH
47062: LD_EXP 27
47066: PPUSH
47067: CALL 43792 0 1
47071: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47072: LD_STRING setGameSaveCounter(
47074: PUSH
47075: LD_EXP 27
47079: STR
47080: PUSH
47081: LD_STRING )
47083: STR
47084: PPUSH
47085: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47089: LD_STRING setGameDifficulty(
47091: PUSH
47092: LD_OWVAR 67
47096: STR
47097: PUSH
47098: LD_STRING )
47100: STR
47101: PPUSH
47102: CALL_OW 559
// end ;
47106: LD_VAR 0 1
47110: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47111: LD_INT 0
47113: PPUSH
// if p2 = stream_mode then
47114: LD_VAR 0 2
47118: PUSH
47119: LD_INT 100
47121: EQUAL
47122: IFFALSE 48125
// begin if not StreamModeActive then
47124: LD_EXP 28
47128: NOT
47129: IFFALSE 47139
// StreamModeActive := true ;
47131: LD_ADDR_EXP 28
47135: PUSH
47136: LD_INT 1
47138: ST_TO_ADDR
// if p3 = 0 then
47139: LD_VAR 0 3
47143: PUSH
47144: LD_INT 0
47146: EQUAL
47147: IFFALSE 47153
// InitStreamMode ;
47149: CALL 48329 0 0
// if p3 = 1 then
47153: LD_VAR 0 3
47157: PUSH
47158: LD_INT 1
47160: EQUAL
47161: IFFALSE 47171
// sRocket := true ;
47163: LD_ADDR_EXP 33
47167: PUSH
47168: LD_INT 1
47170: ST_TO_ADDR
// if p3 = 2 then
47171: LD_VAR 0 3
47175: PUSH
47176: LD_INT 2
47178: EQUAL
47179: IFFALSE 47189
// sSpeed := true ;
47181: LD_ADDR_EXP 32
47185: PUSH
47186: LD_INT 1
47188: ST_TO_ADDR
// if p3 = 3 then
47189: LD_VAR 0 3
47193: PUSH
47194: LD_INT 3
47196: EQUAL
47197: IFFALSE 47207
// sEngine := true ;
47199: LD_ADDR_EXP 34
47203: PUSH
47204: LD_INT 1
47206: ST_TO_ADDR
// if p3 = 4 then
47207: LD_VAR 0 3
47211: PUSH
47212: LD_INT 4
47214: EQUAL
47215: IFFALSE 47225
// sSpec := true ;
47217: LD_ADDR_EXP 31
47221: PUSH
47222: LD_INT 1
47224: ST_TO_ADDR
// if p3 = 5 then
47225: LD_VAR 0 3
47229: PUSH
47230: LD_INT 5
47232: EQUAL
47233: IFFALSE 47243
// sLevel := true ;
47235: LD_ADDR_EXP 35
47239: PUSH
47240: LD_INT 1
47242: ST_TO_ADDR
// if p3 = 6 then
47243: LD_VAR 0 3
47247: PUSH
47248: LD_INT 6
47250: EQUAL
47251: IFFALSE 47261
// sArmoury := true ;
47253: LD_ADDR_EXP 36
47257: PUSH
47258: LD_INT 1
47260: ST_TO_ADDR
// if p3 = 7 then
47261: LD_VAR 0 3
47265: PUSH
47266: LD_INT 7
47268: EQUAL
47269: IFFALSE 47279
// sRadar := true ;
47271: LD_ADDR_EXP 37
47275: PUSH
47276: LD_INT 1
47278: ST_TO_ADDR
// if p3 = 8 then
47279: LD_VAR 0 3
47283: PUSH
47284: LD_INT 8
47286: EQUAL
47287: IFFALSE 47297
// sBunker := true ;
47289: LD_ADDR_EXP 38
47293: PUSH
47294: LD_INT 1
47296: ST_TO_ADDR
// if p3 = 9 then
47297: LD_VAR 0 3
47301: PUSH
47302: LD_INT 9
47304: EQUAL
47305: IFFALSE 47315
// sHack := true ;
47307: LD_ADDR_EXP 39
47311: PUSH
47312: LD_INT 1
47314: ST_TO_ADDR
// if p3 = 10 then
47315: LD_VAR 0 3
47319: PUSH
47320: LD_INT 10
47322: EQUAL
47323: IFFALSE 47333
// sFire := true ;
47325: LD_ADDR_EXP 40
47329: PUSH
47330: LD_INT 1
47332: ST_TO_ADDR
// if p3 = 11 then
47333: LD_VAR 0 3
47337: PUSH
47338: LD_INT 11
47340: EQUAL
47341: IFFALSE 47351
// sRefresh := true ;
47343: LD_ADDR_EXP 41
47347: PUSH
47348: LD_INT 1
47350: ST_TO_ADDR
// if p3 = 12 then
47351: LD_VAR 0 3
47355: PUSH
47356: LD_INT 12
47358: EQUAL
47359: IFFALSE 47369
// sExp := true ;
47361: LD_ADDR_EXP 42
47365: PUSH
47366: LD_INT 1
47368: ST_TO_ADDR
// if p3 = 13 then
47369: LD_VAR 0 3
47373: PUSH
47374: LD_INT 13
47376: EQUAL
47377: IFFALSE 47387
// sDepot := true ;
47379: LD_ADDR_EXP 43
47383: PUSH
47384: LD_INT 1
47386: ST_TO_ADDR
// if p3 = 14 then
47387: LD_VAR 0 3
47391: PUSH
47392: LD_INT 14
47394: EQUAL
47395: IFFALSE 47405
// sFlag := true ;
47397: LD_ADDR_EXP 44
47401: PUSH
47402: LD_INT 1
47404: ST_TO_ADDR
// if p3 = 15 then
47405: LD_VAR 0 3
47409: PUSH
47410: LD_INT 15
47412: EQUAL
47413: IFFALSE 47423
// sKamikadze := true ;
47415: LD_ADDR_EXP 52
47419: PUSH
47420: LD_INT 1
47422: ST_TO_ADDR
// if p3 = 16 then
47423: LD_VAR 0 3
47427: PUSH
47428: LD_INT 16
47430: EQUAL
47431: IFFALSE 47441
// sTroll := true ;
47433: LD_ADDR_EXP 53
47437: PUSH
47438: LD_INT 1
47440: ST_TO_ADDR
// if p3 = 17 then
47441: LD_VAR 0 3
47445: PUSH
47446: LD_INT 17
47448: EQUAL
47449: IFFALSE 47459
// sSlow := true ;
47451: LD_ADDR_EXP 54
47455: PUSH
47456: LD_INT 1
47458: ST_TO_ADDR
// if p3 = 18 then
47459: LD_VAR 0 3
47463: PUSH
47464: LD_INT 18
47466: EQUAL
47467: IFFALSE 47477
// sLack := true ;
47469: LD_ADDR_EXP 55
47473: PUSH
47474: LD_INT 1
47476: ST_TO_ADDR
// if p3 = 19 then
47477: LD_VAR 0 3
47481: PUSH
47482: LD_INT 19
47484: EQUAL
47485: IFFALSE 47495
// sTank := true ;
47487: LD_ADDR_EXP 57
47491: PUSH
47492: LD_INT 1
47494: ST_TO_ADDR
// if p3 = 20 then
47495: LD_VAR 0 3
47499: PUSH
47500: LD_INT 20
47502: EQUAL
47503: IFFALSE 47513
// sRemote := true ;
47505: LD_ADDR_EXP 58
47509: PUSH
47510: LD_INT 1
47512: ST_TO_ADDR
// if p3 = 21 then
47513: LD_VAR 0 3
47517: PUSH
47518: LD_INT 21
47520: EQUAL
47521: IFFALSE 47531
// sPowell := true ;
47523: LD_ADDR_EXP 59
47527: PUSH
47528: LD_INT 1
47530: ST_TO_ADDR
// if p3 = 22 then
47531: LD_VAR 0 3
47535: PUSH
47536: LD_INT 22
47538: EQUAL
47539: IFFALSE 47549
// sTeleport := true ;
47541: LD_ADDR_EXP 62
47545: PUSH
47546: LD_INT 1
47548: ST_TO_ADDR
// if p3 = 23 then
47549: LD_VAR 0 3
47553: PUSH
47554: LD_INT 23
47556: EQUAL
47557: IFFALSE 47567
// sOilTower := true ;
47559: LD_ADDR_EXP 64
47563: PUSH
47564: LD_INT 1
47566: ST_TO_ADDR
// if p3 = 24 then
47567: LD_VAR 0 3
47571: PUSH
47572: LD_INT 24
47574: EQUAL
47575: IFFALSE 47585
// sShovel := true ;
47577: LD_ADDR_EXP 65
47581: PUSH
47582: LD_INT 1
47584: ST_TO_ADDR
// if p3 = 25 then
47585: LD_VAR 0 3
47589: PUSH
47590: LD_INT 25
47592: EQUAL
47593: IFFALSE 47603
// sSheik := true ;
47595: LD_ADDR_EXP 66
47599: PUSH
47600: LD_INT 1
47602: ST_TO_ADDR
// if p3 = 26 then
47603: LD_VAR 0 3
47607: PUSH
47608: LD_INT 26
47610: EQUAL
47611: IFFALSE 47621
// sEarthquake := true ;
47613: LD_ADDR_EXP 68
47617: PUSH
47618: LD_INT 1
47620: ST_TO_ADDR
// if p3 = 27 then
47621: LD_VAR 0 3
47625: PUSH
47626: LD_INT 27
47628: EQUAL
47629: IFFALSE 47639
// sAI := true ;
47631: LD_ADDR_EXP 69
47635: PUSH
47636: LD_INT 1
47638: ST_TO_ADDR
// if p3 = 28 then
47639: LD_VAR 0 3
47643: PUSH
47644: LD_INT 28
47646: EQUAL
47647: IFFALSE 47657
// sCargo := true ;
47649: LD_ADDR_EXP 72
47653: PUSH
47654: LD_INT 1
47656: ST_TO_ADDR
// if p3 = 29 then
47657: LD_VAR 0 3
47661: PUSH
47662: LD_INT 29
47664: EQUAL
47665: IFFALSE 47675
// sDLaser := true ;
47667: LD_ADDR_EXP 73
47671: PUSH
47672: LD_INT 1
47674: ST_TO_ADDR
// if p3 = 30 then
47675: LD_VAR 0 3
47679: PUSH
47680: LD_INT 30
47682: EQUAL
47683: IFFALSE 47693
// sExchange := true ;
47685: LD_ADDR_EXP 74
47689: PUSH
47690: LD_INT 1
47692: ST_TO_ADDR
// if p3 = 31 then
47693: LD_VAR 0 3
47697: PUSH
47698: LD_INT 31
47700: EQUAL
47701: IFFALSE 47711
// sFac := true ;
47703: LD_ADDR_EXP 75
47707: PUSH
47708: LD_INT 1
47710: ST_TO_ADDR
// if p3 = 32 then
47711: LD_VAR 0 3
47715: PUSH
47716: LD_INT 32
47718: EQUAL
47719: IFFALSE 47729
// sPower := true ;
47721: LD_ADDR_EXP 76
47725: PUSH
47726: LD_INT 1
47728: ST_TO_ADDR
// if p3 = 33 then
47729: LD_VAR 0 3
47733: PUSH
47734: LD_INT 33
47736: EQUAL
47737: IFFALSE 47747
// sRandom := true ;
47739: LD_ADDR_EXP 77
47743: PUSH
47744: LD_INT 1
47746: ST_TO_ADDR
// if p3 = 34 then
47747: LD_VAR 0 3
47751: PUSH
47752: LD_INT 34
47754: EQUAL
47755: IFFALSE 47765
// sShield := true ;
47757: LD_ADDR_EXP 78
47761: PUSH
47762: LD_INT 1
47764: ST_TO_ADDR
// if p3 = 35 then
47765: LD_VAR 0 3
47769: PUSH
47770: LD_INT 35
47772: EQUAL
47773: IFFALSE 47783
// sTime := true ;
47775: LD_ADDR_EXP 79
47779: PUSH
47780: LD_INT 1
47782: ST_TO_ADDR
// if p3 = 36 then
47783: LD_VAR 0 3
47787: PUSH
47788: LD_INT 36
47790: EQUAL
47791: IFFALSE 47801
// sTools := true ;
47793: LD_ADDR_EXP 80
47797: PUSH
47798: LD_INT 1
47800: ST_TO_ADDR
// if p3 = 101 then
47801: LD_VAR 0 3
47805: PUSH
47806: LD_INT 101
47808: EQUAL
47809: IFFALSE 47819
// sSold := true ;
47811: LD_ADDR_EXP 45
47815: PUSH
47816: LD_INT 1
47818: ST_TO_ADDR
// if p3 = 102 then
47819: LD_VAR 0 3
47823: PUSH
47824: LD_INT 102
47826: EQUAL
47827: IFFALSE 47837
// sDiff := true ;
47829: LD_ADDR_EXP 46
47833: PUSH
47834: LD_INT 1
47836: ST_TO_ADDR
// if p3 = 103 then
47837: LD_VAR 0 3
47841: PUSH
47842: LD_INT 103
47844: EQUAL
47845: IFFALSE 47855
// sFog := true ;
47847: LD_ADDR_EXP 49
47851: PUSH
47852: LD_INT 1
47854: ST_TO_ADDR
// if p3 = 104 then
47855: LD_VAR 0 3
47859: PUSH
47860: LD_INT 104
47862: EQUAL
47863: IFFALSE 47873
// sReset := true ;
47865: LD_ADDR_EXP 50
47869: PUSH
47870: LD_INT 1
47872: ST_TO_ADDR
// if p3 = 105 then
47873: LD_VAR 0 3
47877: PUSH
47878: LD_INT 105
47880: EQUAL
47881: IFFALSE 47891
// sSun := true ;
47883: LD_ADDR_EXP 51
47887: PUSH
47888: LD_INT 1
47890: ST_TO_ADDR
// if p3 = 106 then
47891: LD_VAR 0 3
47895: PUSH
47896: LD_INT 106
47898: EQUAL
47899: IFFALSE 47909
// sTiger := true ;
47901: LD_ADDR_EXP 47
47905: PUSH
47906: LD_INT 1
47908: ST_TO_ADDR
// if p3 = 107 then
47909: LD_VAR 0 3
47913: PUSH
47914: LD_INT 107
47916: EQUAL
47917: IFFALSE 47927
// sBomb := true ;
47919: LD_ADDR_EXP 48
47923: PUSH
47924: LD_INT 1
47926: ST_TO_ADDR
// if p3 = 108 then
47927: LD_VAR 0 3
47931: PUSH
47932: LD_INT 108
47934: EQUAL
47935: IFFALSE 47945
// sWound := true ;
47937: LD_ADDR_EXP 56
47941: PUSH
47942: LD_INT 1
47944: ST_TO_ADDR
// if p3 = 109 then
47945: LD_VAR 0 3
47949: PUSH
47950: LD_INT 109
47952: EQUAL
47953: IFFALSE 47963
// sBetray := true ;
47955: LD_ADDR_EXP 60
47959: PUSH
47960: LD_INT 1
47962: ST_TO_ADDR
// if p3 = 110 then
47963: LD_VAR 0 3
47967: PUSH
47968: LD_INT 110
47970: EQUAL
47971: IFFALSE 47981
// sContamin := true ;
47973: LD_ADDR_EXP 61
47977: PUSH
47978: LD_INT 1
47980: ST_TO_ADDR
// if p3 = 111 then
47981: LD_VAR 0 3
47985: PUSH
47986: LD_INT 111
47988: EQUAL
47989: IFFALSE 47999
// sOil := true ;
47991: LD_ADDR_EXP 63
47995: PUSH
47996: LD_INT 1
47998: ST_TO_ADDR
// if p3 = 112 then
47999: LD_VAR 0 3
48003: PUSH
48004: LD_INT 112
48006: EQUAL
48007: IFFALSE 48017
// sStu := true ;
48009: LD_ADDR_EXP 67
48013: PUSH
48014: LD_INT 1
48016: ST_TO_ADDR
// if p3 = 113 then
48017: LD_VAR 0 3
48021: PUSH
48022: LD_INT 113
48024: EQUAL
48025: IFFALSE 48035
// sBazooka := true ;
48027: LD_ADDR_EXP 70
48031: PUSH
48032: LD_INT 1
48034: ST_TO_ADDR
// if p3 = 114 then
48035: LD_VAR 0 3
48039: PUSH
48040: LD_INT 114
48042: EQUAL
48043: IFFALSE 48053
// sMortar := true ;
48045: LD_ADDR_EXP 71
48049: PUSH
48050: LD_INT 1
48052: ST_TO_ADDR
// if p3 = 115 then
48053: LD_VAR 0 3
48057: PUSH
48058: LD_INT 115
48060: EQUAL
48061: IFFALSE 48071
// sRanger := true ;
48063: LD_ADDR_EXP 81
48067: PUSH
48068: LD_INT 1
48070: ST_TO_ADDR
// if p3 = 116 then
48071: LD_VAR 0 3
48075: PUSH
48076: LD_INT 116
48078: EQUAL
48079: IFFALSE 48089
// sComputer := true ;
48081: LD_ADDR_EXP 82
48085: PUSH
48086: LD_INT 1
48088: ST_TO_ADDR
// if p3 = 117 then
48089: LD_VAR 0 3
48093: PUSH
48094: LD_INT 117
48096: EQUAL
48097: IFFALSE 48107
// s30 := true ;
48099: LD_ADDR_EXP 83
48103: PUSH
48104: LD_INT 1
48106: ST_TO_ADDR
// if p3 = 118 then
48107: LD_VAR 0 3
48111: PUSH
48112: LD_INT 118
48114: EQUAL
48115: IFFALSE 48125
// s60 := true ;
48117: LD_ADDR_EXP 84
48121: PUSH
48122: LD_INT 1
48124: ST_TO_ADDR
// end ; if p2 = hack_mode then
48125: LD_VAR 0 2
48129: PUSH
48130: LD_INT 101
48132: EQUAL
48133: IFFALSE 48261
// begin case p3 of 1 :
48135: LD_VAR 0 3
48139: PUSH
48140: LD_INT 1
48142: DOUBLE
48143: EQUAL
48144: IFTRUE 48148
48146: GO 48155
48148: POP
// hHackUnlimitedResources ; 2 :
48149: CALL 60408 0 0
48153: GO 48261
48155: LD_INT 2
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48163
48161: GO 48170
48163: POP
// hHackSetLevel10 ; 3 :
48164: CALL 60541 0 0
48168: GO 48261
48170: LD_INT 3
48172: DOUBLE
48173: EQUAL
48174: IFTRUE 48178
48176: GO 48185
48178: POP
// hHackSetLevel10YourUnits ; 4 :
48179: CALL 60626 0 0
48183: GO 48261
48185: LD_INT 4
48187: DOUBLE
48188: EQUAL
48189: IFTRUE 48193
48191: GO 48200
48193: POP
// hHackInvincible ; 5 :
48194: CALL 61074 0 0
48198: GO 48261
48200: LD_INT 5
48202: DOUBLE
48203: EQUAL
48204: IFTRUE 48208
48206: GO 48215
48208: POP
// hHackInvisible ; 6 :
48209: CALL 61185 0 0
48213: GO 48261
48215: LD_INT 6
48217: DOUBLE
48218: EQUAL
48219: IFTRUE 48223
48221: GO 48230
48223: POP
// hHackChangeYourSide ; 7 :
48224: CALL 61242 0 0
48228: GO 48261
48230: LD_INT 7
48232: DOUBLE
48233: EQUAL
48234: IFTRUE 48238
48236: GO 48245
48238: POP
// hHackChangeUnitSide ; 8 :
48239: CALL 61284 0 0
48243: GO 48261
48245: LD_INT 8
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48253
48251: GO 48260
48253: POP
// hHackFog ; end ;
48254: CALL 61385 0 0
48258: GO 48261
48260: POP
// end ; if p2 = game_save_mode then
48261: LD_VAR 0 2
48265: PUSH
48266: LD_INT 102
48268: EQUAL
48269: IFFALSE 48324
// begin if p3 = 1 then
48271: LD_VAR 0 3
48275: PUSH
48276: LD_INT 1
48278: EQUAL
48279: IFFALSE 48291
// globalGameSaveCounter := p4 ;
48281: LD_ADDR_EXP 27
48285: PUSH
48286: LD_VAR 0 4
48290: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48291: LD_VAR 0 3
48295: PUSH
48296: LD_INT 2
48298: EQUAL
48299: PUSH
48300: LD_EXP 27
48304: AND
48305: IFFALSE 48324
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48307: LD_STRING setGameSaveCounter(
48309: PUSH
48310: LD_EXP 27
48314: STR
48315: PUSH
48316: LD_STRING )
48318: STR
48319: PPUSH
48320: CALL_OW 559
// end ; end ;
48324: LD_VAR 0 7
48328: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48329: LD_INT 0
48331: PPUSH
// streamModeActive := false ;
48332: LD_ADDR_EXP 28
48336: PUSH
48337: LD_INT 0
48339: ST_TO_ADDR
// normalCounter := 36 ;
48340: LD_ADDR_EXP 29
48344: PUSH
48345: LD_INT 36
48347: ST_TO_ADDR
// hardcoreCounter := 18 ;
48348: LD_ADDR_EXP 30
48352: PUSH
48353: LD_INT 18
48355: ST_TO_ADDR
// sRocket := false ;
48356: LD_ADDR_EXP 33
48360: PUSH
48361: LD_INT 0
48363: ST_TO_ADDR
// sSpeed := false ;
48364: LD_ADDR_EXP 32
48368: PUSH
48369: LD_INT 0
48371: ST_TO_ADDR
// sEngine := false ;
48372: LD_ADDR_EXP 34
48376: PUSH
48377: LD_INT 0
48379: ST_TO_ADDR
// sSpec := false ;
48380: LD_ADDR_EXP 31
48384: PUSH
48385: LD_INT 0
48387: ST_TO_ADDR
// sLevel := false ;
48388: LD_ADDR_EXP 35
48392: PUSH
48393: LD_INT 0
48395: ST_TO_ADDR
// sArmoury := false ;
48396: LD_ADDR_EXP 36
48400: PUSH
48401: LD_INT 0
48403: ST_TO_ADDR
// sRadar := false ;
48404: LD_ADDR_EXP 37
48408: PUSH
48409: LD_INT 0
48411: ST_TO_ADDR
// sBunker := false ;
48412: LD_ADDR_EXP 38
48416: PUSH
48417: LD_INT 0
48419: ST_TO_ADDR
// sHack := false ;
48420: LD_ADDR_EXP 39
48424: PUSH
48425: LD_INT 0
48427: ST_TO_ADDR
// sFire := false ;
48428: LD_ADDR_EXP 40
48432: PUSH
48433: LD_INT 0
48435: ST_TO_ADDR
// sRefresh := false ;
48436: LD_ADDR_EXP 41
48440: PUSH
48441: LD_INT 0
48443: ST_TO_ADDR
// sExp := false ;
48444: LD_ADDR_EXP 42
48448: PUSH
48449: LD_INT 0
48451: ST_TO_ADDR
// sDepot := false ;
48452: LD_ADDR_EXP 43
48456: PUSH
48457: LD_INT 0
48459: ST_TO_ADDR
// sFlag := false ;
48460: LD_ADDR_EXP 44
48464: PUSH
48465: LD_INT 0
48467: ST_TO_ADDR
// sKamikadze := false ;
48468: LD_ADDR_EXP 52
48472: PUSH
48473: LD_INT 0
48475: ST_TO_ADDR
// sTroll := false ;
48476: LD_ADDR_EXP 53
48480: PUSH
48481: LD_INT 0
48483: ST_TO_ADDR
// sSlow := false ;
48484: LD_ADDR_EXP 54
48488: PUSH
48489: LD_INT 0
48491: ST_TO_ADDR
// sLack := false ;
48492: LD_ADDR_EXP 55
48496: PUSH
48497: LD_INT 0
48499: ST_TO_ADDR
// sTank := false ;
48500: LD_ADDR_EXP 57
48504: PUSH
48505: LD_INT 0
48507: ST_TO_ADDR
// sRemote := false ;
48508: LD_ADDR_EXP 58
48512: PUSH
48513: LD_INT 0
48515: ST_TO_ADDR
// sPowell := false ;
48516: LD_ADDR_EXP 59
48520: PUSH
48521: LD_INT 0
48523: ST_TO_ADDR
// sTeleport := false ;
48524: LD_ADDR_EXP 62
48528: PUSH
48529: LD_INT 0
48531: ST_TO_ADDR
// sOilTower := false ;
48532: LD_ADDR_EXP 64
48536: PUSH
48537: LD_INT 0
48539: ST_TO_ADDR
// sShovel := false ;
48540: LD_ADDR_EXP 65
48544: PUSH
48545: LD_INT 0
48547: ST_TO_ADDR
// sSheik := false ;
48548: LD_ADDR_EXP 66
48552: PUSH
48553: LD_INT 0
48555: ST_TO_ADDR
// sEarthquake := false ;
48556: LD_ADDR_EXP 68
48560: PUSH
48561: LD_INT 0
48563: ST_TO_ADDR
// sAI := false ;
48564: LD_ADDR_EXP 69
48568: PUSH
48569: LD_INT 0
48571: ST_TO_ADDR
// sCargo := false ;
48572: LD_ADDR_EXP 72
48576: PUSH
48577: LD_INT 0
48579: ST_TO_ADDR
// sDLaser := false ;
48580: LD_ADDR_EXP 73
48584: PUSH
48585: LD_INT 0
48587: ST_TO_ADDR
// sExchange := false ;
48588: LD_ADDR_EXP 74
48592: PUSH
48593: LD_INT 0
48595: ST_TO_ADDR
// sFac := false ;
48596: LD_ADDR_EXP 75
48600: PUSH
48601: LD_INT 0
48603: ST_TO_ADDR
// sPower := false ;
48604: LD_ADDR_EXP 76
48608: PUSH
48609: LD_INT 0
48611: ST_TO_ADDR
// sRandom := false ;
48612: LD_ADDR_EXP 77
48616: PUSH
48617: LD_INT 0
48619: ST_TO_ADDR
// sShield := false ;
48620: LD_ADDR_EXP 78
48624: PUSH
48625: LD_INT 0
48627: ST_TO_ADDR
// sTime := false ;
48628: LD_ADDR_EXP 79
48632: PUSH
48633: LD_INT 0
48635: ST_TO_ADDR
// sTools := false ;
48636: LD_ADDR_EXP 80
48640: PUSH
48641: LD_INT 0
48643: ST_TO_ADDR
// sSold := false ;
48644: LD_ADDR_EXP 45
48648: PUSH
48649: LD_INT 0
48651: ST_TO_ADDR
// sDiff := false ;
48652: LD_ADDR_EXP 46
48656: PUSH
48657: LD_INT 0
48659: ST_TO_ADDR
// sFog := false ;
48660: LD_ADDR_EXP 49
48664: PUSH
48665: LD_INT 0
48667: ST_TO_ADDR
// sReset := false ;
48668: LD_ADDR_EXP 50
48672: PUSH
48673: LD_INT 0
48675: ST_TO_ADDR
// sSun := false ;
48676: LD_ADDR_EXP 51
48680: PUSH
48681: LD_INT 0
48683: ST_TO_ADDR
// sTiger := false ;
48684: LD_ADDR_EXP 47
48688: PUSH
48689: LD_INT 0
48691: ST_TO_ADDR
// sBomb := false ;
48692: LD_ADDR_EXP 48
48696: PUSH
48697: LD_INT 0
48699: ST_TO_ADDR
// sWound := false ;
48700: LD_ADDR_EXP 56
48704: PUSH
48705: LD_INT 0
48707: ST_TO_ADDR
// sBetray := false ;
48708: LD_ADDR_EXP 60
48712: PUSH
48713: LD_INT 0
48715: ST_TO_ADDR
// sContamin := false ;
48716: LD_ADDR_EXP 61
48720: PUSH
48721: LD_INT 0
48723: ST_TO_ADDR
// sOil := false ;
48724: LD_ADDR_EXP 63
48728: PUSH
48729: LD_INT 0
48731: ST_TO_ADDR
// sStu := false ;
48732: LD_ADDR_EXP 67
48736: PUSH
48737: LD_INT 0
48739: ST_TO_ADDR
// sBazooka := false ;
48740: LD_ADDR_EXP 70
48744: PUSH
48745: LD_INT 0
48747: ST_TO_ADDR
// sMortar := false ;
48748: LD_ADDR_EXP 71
48752: PUSH
48753: LD_INT 0
48755: ST_TO_ADDR
// sRanger := false ;
48756: LD_ADDR_EXP 81
48760: PUSH
48761: LD_INT 0
48763: ST_TO_ADDR
// sComputer := false ;
48764: LD_ADDR_EXP 82
48768: PUSH
48769: LD_INT 0
48771: ST_TO_ADDR
// s30 := false ;
48772: LD_ADDR_EXP 83
48776: PUSH
48777: LD_INT 0
48779: ST_TO_ADDR
// s60 := false ;
48780: LD_ADDR_EXP 84
48784: PUSH
48785: LD_INT 0
48787: ST_TO_ADDR
// end ;
48788: LD_VAR 0 1
48792: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48793: LD_INT 0
48795: PPUSH
48796: PPUSH
48797: PPUSH
48798: PPUSH
48799: PPUSH
48800: PPUSH
48801: PPUSH
// result := [ ] ;
48802: LD_ADDR_VAR 0 2
48806: PUSH
48807: EMPTY
48808: ST_TO_ADDR
// if campaign_id = 1 then
48809: LD_OWVAR 69
48813: PUSH
48814: LD_INT 1
48816: EQUAL
48817: IFFALSE 51983
// begin case mission_number of 1 :
48819: LD_OWVAR 70
48823: PUSH
48824: LD_INT 1
48826: DOUBLE
48827: EQUAL
48828: IFTRUE 48832
48830: GO 48908
48832: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48833: LD_ADDR_VAR 0 2
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: LD_INT 4
48843: PUSH
48844: LD_INT 11
48846: PUSH
48847: LD_INT 12
48849: PUSH
48850: LD_INT 15
48852: PUSH
48853: LD_INT 16
48855: PUSH
48856: LD_INT 22
48858: PUSH
48859: LD_INT 23
48861: PUSH
48862: LD_INT 26
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 101
48878: PUSH
48879: LD_INT 102
48881: PUSH
48882: LD_INT 106
48884: PUSH
48885: LD_INT 116
48887: PUSH
48888: LD_INT 117
48890: PUSH
48891: LD_INT 118
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: ST_TO_ADDR
48906: GO 51981
48908: LD_INT 2
48910: DOUBLE
48911: EQUAL
48912: IFTRUE 48916
48914: GO 49000
48916: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48917: LD_ADDR_VAR 0 2
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 4
48927: PUSH
48928: LD_INT 11
48930: PUSH
48931: LD_INT 12
48933: PUSH
48934: LD_INT 15
48936: PUSH
48937: LD_INT 16
48939: PUSH
48940: LD_INT 22
48942: PUSH
48943: LD_INT 23
48945: PUSH
48946: LD_INT 26
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 101
48962: PUSH
48963: LD_INT 102
48965: PUSH
48966: LD_INT 105
48968: PUSH
48969: LD_INT 106
48971: PUSH
48972: LD_INT 108
48974: PUSH
48975: LD_INT 116
48977: PUSH
48978: LD_INT 117
48980: PUSH
48981: LD_INT 118
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: ST_TO_ADDR
48998: GO 51981
49000: LD_INT 3
49002: DOUBLE
49003: EQUAL
49004: IFTRUE 49008
49006: GO 49096
49008: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49009: LD_ADDR_VAR 0 2
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 4
49019: PUSH
49020: LD_INT 5
49022: PUSH
49023: LD_INT 11
49025: PUSH
49026: LD_INT 12
49028: PUSH
49029: LD_INT 15
49031: PUSH
49032: LD_INT 16
49034: PUSH
49035: LD_INT 22
49037: PUSH
49038: LD_INT 26
49040: PUSH
49041: LD_INT 36
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 101
49058: PUSH
49059: LD_INT 102
49061: PUSH
49062: LD_INT 105
49064: PUSH
49065: LD_INT 106
49067: PUSH
49068: LD_INT 108
49070: PUSH
49071: LD_INT 116
49073: PUSH
49074: LD_INT 117
49076: PUSH
49077: LD_INT 118
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: ST_TO_ADDR
49094: GO 51981
49096: LD_INT 4
49098: DOUBLE
49099: EQUAL
49100: IFTRUE 49104
49102: GO 49200
49104: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49105: LD_ADDR_VAR 0 2
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 4
49115: PUSH
49116: LD_INT 5
49118: PUSH
49119: LD_INT 8
49121: PUSH
49122: LD_INT 11
49124: PUSH
49125: LD_INT 12
49127: PUSH
49128: LD_INT 15
49130: PUSH
49131: LD_INT 16
49133: PUSH
49134: LD_INT 22
49136: PUSH
49137: LD_INT 23
49139: PUSH
49140: LD_INT 26
49142: PUSH
49143: LD_INT 36
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 101
49162: PUSH
49163: LD_INT 102
49165: PUSH
49166: LD_INT 105
49168: PUSH
49169: LD_INT 106
49171: PUSH
49172: LD_INT 108
49174: PUSH
49175: LD_INT 116
49177: PUSH
49178: LD_INT 117
49180: PUSH
49181: LD_INT 118
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: ST_TO_ADDR
49198: GO 51981
49200: LD_INT 5
49202: DOUBLE
49203: EQUAL
49204: IFTRUE 49208
49206: GO 49320
49208: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49209: LD_ADDR_VAR 0 2
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 4
49219: PUSH
49220: LD_INT 5
49222: PUSH
49223: LD_INT 6
49225: PUSH
49226: LD_INT 8
49228: PUSH
49229: LD_INT 11
49231: PUSH
49232: LD_INT 12
49234: PUSH
49235: LD_INT 15
49237: PUSH
49238: LD_INT 16
49240: PUSH
49241: LD_INT 22
49243: PUSH
49244: LD_INT 23
49246: PUSH
49247: LD_INT 25
49249: PUSH
49250: LD_INT 26
49252: PUSH
49253: LD_INT 36
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 101
49274: PUSH
49275: LD_INT 102
49277: PUSH
49278: LD_INT 105
49280: PUSH
49281: LD_INT 106
49283: PUSH
49284: LD_INT 108
49286: PUSH
49287: LD_INT 109
49289: PUSH
49290: LD_INT 112
49292: PUSH
49293: LD_INT 116
49295: PUSH
49296: LD_INT 117
49298: PUSH
49299: LD_INT 118
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: ST_TO_ADDR
49318: GO 51981
49320: LD_INT 6
49322: DOUBLE
49323: EQUAL
49324: IFTRUE 49328
49326: GO 49460
49328: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49329: LD_ADDR_VAR 0 2
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 4
49339: PUSH
49340: LD_INT 5
49342: PUSH
49343: LD_INT 6
49345: PUSH
49346: LD_INT 8
49348: PUSH
49349: LD_INT 11
49351: PUSH
49352: LD_INT 12
49354: PUSH
49355: LD_INT 15
49357: PUSH
49358: LD_INT 16
49360: PUSH
49361: LD_INT 20
49363: PUSH
49364: LD_INT 21
49366: PUSH
49367: LD_INT 22
49369: PUSH
49370: LD_INT 23
49372: PUSH
49373: LD_INT 25
49375: PUSH
49376: LD_INT 26
49378: PUSH
49379: LD_INT 30
49381: PUSH
49382: LD_INT 31
49384: PUSH
49385: LD_INT 32
49387: PUSH
49388: LD_INT 36
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 101
49414: PUSH
49415: LD_INT 102
49417: PUSH
49418: LD_INT 105
49420: PUSH
49421: LD_INT 106
49423: PUSH
49424: LD_INT 108
49426: PUSH
49427: LD_INT 109
49429: PUSH
49430: LD_INT 112
49432: PUSH
49433: LD_INT 116
49435: PUSH
49436: LD_INT 117
49438: PUSH
49439: LD_INT 118
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: ST_TO_ADDR
49458: GO 51981
49460: LD_INT 7
49462: DOUBLE
49463: EQUAL
49464: IFTRUE 49468
49466: GO 49580
49468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
49469: LD_ADDR_VAR 0 2
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 4
49479: PUSH
49480: LD_INT 5
49482: PUSH
49483: LD_INT 7
49485: PUSH
49486: LD_INT 11
49488: PUSH
49489: LD_INT 12
49491: PUSH
49492: LD_INT 15
49494: PUSH
49495: LD_INT 16
49497: PUSH
49498: LD_INT 20
49500: PUSH
49501: LD_INT 21
49503: PUSH
49504: LD_INT 22
49506: PUSH
49507: LD_INT 23
49509: PUSH
49510: LD_INT 25
49512: PUSH
49513: LD_INT 26
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 101
49534: PUSH
49535: LD_INT 102
49537: PUSH
49538: LD_INT 103
49540: PUSH
49541: LD_INT 105
49543: PUSH
49544: LD_INT 106
49546: PUSH
49547: LD_INT 108
49549: PUSH
49550: LD_INT 112
49552: PUSH
49553: LD_INT 116
49555: PUSH
49556: LD_INT 117
49558: PUSH
49559: LD_INT 118
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: ST_TO_ADDR
49578: GO 51981
49580: LD_INT 8
49582: DOUBLE
49583: EQUAL
49584: IFTRUE 49588
49586: GO 49728
49588: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
49589: LD_ADDR_VAR 0 2
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 4
49599: PUSH
49600: LD_INT 5
49602: PUSH
49603: LD_INT 6
49605: PUSH
49606: LD_INT 7
49608: PUSH
49609: LD_INT 8
49611: PUSH
49612: LD_INT 11
49614: PUSH
49615: LD_INT 12
49617: PUSH
49618: LD_INT 15
49620: PUSH
49621: LD_INT 16
49623: PUSH
49624: LD_INT 20
49626: PUSH
49627: LD_INT 21
49629: PUSH
49630: LD_INT 22
49632: PUSH
49633: LD_INT 23
49635: PUSH
49636: LD_INT 25
49638: PUSH
49639: LD_INT 26
49641: PUSH
49642: LD_INT 30
49644: PUSH
49645: LD_INT 31
49647: PUSH
49648: LD_INT 32
49650: PUSH
49651: LD_INT 36
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 101
49678: PUSH
49679: LD_INT 102
49681: PUSH
49682: LD_INT 103
49684: PUSH
49685: LD_INT 105
49687: PUSH
49688: LD_INT 106
49690: PUSH
49691: LD_INT 108
49693: PUSH
49694: LD_INT 109
49696: PUSH
49697: LD_INT 112
49699: PUSH
49700: LD_INT 116
49702: PUSH
49703: LD_INT 117
49705: PUSH
49706: LD_INT 118
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: ST_TO_ADDR
49726: GO 51981
49728: LD_INT 9
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49736
49734: GO 49884
49736: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49737: LD_ADDR_VAR 0 2
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 4
49747: PUSH
49748: LD_INT 5
49750: PUSH
49751: LD_INT 6
49753: PUSH
49754: LD_INT 7
49756: PUSH
49757: LD_INT 8
49759: PUSH
49760: LD_INT 11
49762: PUSH
49763: LD_INT 12
49765: PUSH
49766: LD_INT 15
49768: PUSH
49769: LD_INT 16
49771: PUSH
49772: LD_INT 20
49774: PUSH
49775: LD_INT 21
49777: PUSH
49778: LD_INT 22
49780: PUSH
49781: LD_INT 23
49783: PUSH
49784: LD_INT 25
49786: PUSH
49787: LD_INT 26
49789: PUSH
49790: LD_INT 28
49792: PUSH
49793: LD_INT 30
49795: PUSH
49796: LD_INT 31
49798: PUSH
49799: LD_INT 32
49801: PUSH
49802: LD_INT 36
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 101
49830: PUSH
49831: LD_INT 102
49833: PUSH
49834: LD_INT 103
49836: PUSH
49837: LD_INT 105
49839: PUSH
49840: LD_INT 106
49842: PUSH
49843: LD_INT 108
49845: PUSH
49846: LD_INT 109
49848: PUSH
49849: LD_INT 112
49851: PUSH
49852: LD_INT 114
49854: PUSH
49855: LD_INT 116
49857: PUSH
49858: LD_INT 117
49860: PUSH
49861: LD_INT 118
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: ST_TO_ADDR
49882: GO 51981
49884: LD_INT 10
49886: DOUBLE
49887: EQUAL
49888: IFTRUE 49892
49890: GO 50088
49892: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49893: LD_ADDR_VAR 0 2
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: LD_INT 5
49906: PUSH
49907: LD_INT 6
49909: PUSH
49910: LD_INT 7
49912: PUSH
49913: LD_INT 8
49915: PUSH
49916: LD_INT 9
49918: PUSH
49919: LD_INT 10
49921: PUSH
49922: LD_INT 11
49924: PUSH
49925: LD_INT 12
49927: PUSH
49928: LD_INT 13
49930: PUSH
49931: LD_INT 14
49933: PUSH
49934: LD_INT 15
49936: PUSH
49937: LD_INT 16
49939: PUSH
49940: LD_INT 17
49942: PUSH
49943: LD_INT 18
49945: PUSH
49946: LD_INT 19
49948: PUSH
49949: LD_INT 20
49951: PUSH
49952: LD_INT 21
49954: PUSH
49955: LD_INT 22
49957: PUSH
49958: LD_INT 23
49960: PUSH
49961: LD_INT 24
49963: PUSH
49964: LD_INT 25
49966: PUSH
49967: LD_INT 26
49969: PUSH
49970: LD_INT 28
49972: PUSH
49973: LD_INT 30
49975: PUSH
49976: LD_INT 31
49978: PUSH
49979: LD_INT 32
49981: PUSH
49982: LD_INT 36
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 101
50018: PUSH
50019: LD_INT 102
50021: PUSH
50022: LD_INT 103
50024: PUSH
50025: LD_INT 104
50027: PUSH
50028: LD_INT 105
50030: PUSH
50031: LD_INT 106
50033: PUSH
50034: LD_INT 107
50036: PUSH
50037: LD_INT 108
50039: PUSH
50040: LD_INT 109
50042: PUSH
50043: LD_INT 110
50045: PUSH
50046: LD_INT 111
50048: PUSH
50049: LD_INT 112
50051: PUSH
50052: LD_INT 114
50054: PUSH
50055: LD_INT 116
50057: PUSH
50058: LD_INT 117
50060: PUSH
50061: LD_INT 118
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: ST_TO_ADDR
50086: GO 51981
50088: LD_INT 11
50090: DOUBLE
50091: EQUAL
50092: IFTRUE 50096
50094: GO 50300
50096: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50097: LD_ADDR_VAR 0 2
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: LD_INT 4
50110: PUSH
50111: LD_INT 5
50113: PUSH
50114: LD_INT 6
50116: PUSH
50117: LD_INT 7
50119: PUSH
50120: LD_INT 8
50122: PUSH
50123: LD_INT 9
50125: PUSH
50126: LD_INT 10
50128: PUSH
50129: LD_INT 11
50131: PUSH
50132: LD_INT 12
50134: PUSH
50135: LD_INT 13
50137: PUSH
50138: LD_INT 14
50140: PUSH
50141: LD_INT 15
50143: PUSH
50144: LD_INT 16
50146: PUSH
50147: LD_INT 17
50149: PUSH
50150: LD_INT 18
50152: PUSH
50153: LD_INT 19
50155: PUSH
50156: LD_INT 20
50158: PUSH
50159: LD_INT 21
50161: PUSH
50162: LD_INT 22
50164: PUSH
50165: LD_INT 23
50167: PUSH
50168: LD_INT 24
50170: PUSH
50171: LD_INT 25
50173: PUSH
50174: LD_INT 26
50176: PUSH
50177: LD_INT 28
50179: PUSH
50180: LD_INT 30
50182: PUSH
50183: LD_INT 31
50185: PUSH
50186: LD_INT 32
50188: PUSH
50189: LD_INT 34
50191: PUSH
50192: LD_INT 36
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 101
50230: PUSH
50231: LD_INT 102
50233: PUSH
50234: LD_INT 103
50236: PUSH
50237: LD_INT 104
50239: PUSH
50240: LD_INT 105
50242: PUSH
50243: LD_INT 106
50245: PUSH
50246: LD_INT 107
50248: PUSH
50249: LD_INT 108
50251: PUSH
50252: LD_INT 109
50254: PUSH
50255: LD_INT 110
50257: PUSH
50258: LD_INT 111
50260: PUSH
50261: LD_INT 112
50263: PUSH
50264: LD_INT 114
50266: PUSH
50267: LD_INT 116
50269: PUSH
50270: LD_INT 117
50272: PUSH
50273: LD_INT 118
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: ST_TO_ADDR
50298: GO 51981
50300: LD_INT 12
50302: DOUBLE
50303: EQUAL
50304: IFTRUE 50308
50306: GO 50528
50308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50309: LD_ADDR_VAR 0 2
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 3
50322: PUSH
50323: LD_INT 4
50325: PUSH
50326: LD_INT 5
50328: PUSH
50329: LD_INT 6
50331: PUSH
50332: LD_INT 7
50334: PUSH
50335: LD_INT 8
50337: PUSH
50338: LD_INT 9
50340: PUSH
50341: LD_INT 10
50343: PUSH
50344: LD_INT 11
50346: PUSH
50347: LD_INT 12
50349: PUSH
50350: LD_INT 13
50352: PUSH
50353: LD_INT 14
50355: PUSH
50356: LD_INT 15
50358: PUSH
50359: LD_INT 16
50361: PUSH
50362: LD_INT 17
50364: PUSH
50365: LD_INT 18
50367: PUSH
50368: LD_INT 19
50370: PUSH
50371: LD_INT 20
50373: PUSH
50374: LD_INT 21
50376: PUSH
50377: LD_INT 22
50379: PUSH
50380: LD_INT 23
50382: PUSH
50383: LD_INT 24
50385: PUSH
50386: LD_INT 25
50388: PUSH
50389: LD_INT 26
50391: PUSH
50392: LD_INT 27
50394: PUSH
50395: LD_INT 28
50397: PUSH
50398: LD_INT 30
50400: PUSH
50401: LD_INT 31
50403: PUSH
50404: LD_INT 32
50406: PUSH
50407: LD_INT 33
50409: PUSH
50410: LD_INT 34
50412: PUSH
50413: LD_INT 36
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 101
50454: PUSH
50455: LD_INT 102
50457: PUSH
50458: LD_INT 103
50460: PUSH
50461: LD_INT 104
50463: PUSH
50464: LD_INT 105
50466: PUSH
50467: LD_INT 106
50469: PUSH
50470: LD_INT 107
50472: PUSH
50473: LD_INT 108
50475: PUSH
50476: LD_INT 109
50478: PUSH
50479: LD_INT 110
50481: PUSH
50482: LD_INT 111
50484: PUSH
50485: LD_INT 112
50487: PUSH
50488: LD_INT 113
50490: PUSH
50491: LD_INT 114
50493: PUSH
50494: LD_INT 116
50496: PUSH
50497: LD_INT 117
50499: PUSH
50500: LD_INT 118
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: ST_TO_ADDR
50526: GO 51981
50528: LD_INT 13
50530: DOUBLE
50531: EQUAL
50532: IFTRUE 50536
50534: GO 50744
50536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
50537: LD_ADDR_VAR 0 2
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: LD_INT 4
50553: PUSH
50554: LD_INT 5
50556: PUSH
50557: LD_INT 8
50559: PUSH
50560: LD_INT 9
50562: PUSH
50563: LD_INT 10
50565: PUSH
50566: LD_INT 11
50568: PUSH
50569: LD_INT 12
50571: PUSH
50572: LD_INT 14
50574: PUSH
50575: LD_INT 15
50577: PUSH
50578: LD_INT 16
50580: PUSH
50581: LD_INT 17
50583: PUSH
50584: LD_INT 18
50586: PUSH
50587: LD_INT 19
50589: PUSH
50590: LD_INT 20
50592: PUSH
50593: LD_INT 21
50595: PUSH
50596: LD_INT 22
50598: PUSH
50599: LD_INT 23
50601: PUSH
50602: LD_INT 24
50604: PUSH
50605: LD_INT 25
50607: PUSH
50608: LD_INT 26
50610: PUSH
50611: LD_INT 27
50613: PUSH
50614: LD_INT 28
50616: PUSH
50617: LD_INT 30
50619: PUSH
50620: LD_INT 31
50622: PUSH
50623: LD_INT 32
50625: PUSH
50626: LD_INT 33
50628: PUSH
50629: LD_INT 34
50631: PUSH
50632: LD_INT 36
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 101
50670: PUSH
50671: LD_INT 102
50673: PUSH
50674: LD_INT 103
50676: PUSH
50677: LD_INT 104
50679: PUSH
50680: LD_INT 105
50682: PUSH
50683: LD_INT 106
50685: PUSH
50686: LD_INT 107
50688: PUSH
50689: LD_INT 108
50691: PUSH
50692: LD_INT 109
50694: PUSH
50695: LD_INT 110
50697: PUSH
50698: LD_INT 111
50700: PUSH
50701: LD_INT 112
50703: PUSH
50704: LD_INT 113
50706: PUSH
50707: LD_INT 114
50709: PUSH
50710: LD_INT 116
50712: PUSH
50713: LD_INT 117
50715: PUSH
50716: LD_INT 118
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: ST_TO_ADDR
50742: GO 51981
50744: LD_INT 14
50746: DOUBLE
50747: EQUAL
50748: IFTRUE 50752
50750: GO 50976
50752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50753: LD_ADDR_VAR 0 2
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: LD_INT 4
50769: PUSH
50770: LD_INT 5
50772: PUSH
50773: LD_INT 6
50775: PUSH
50776: LD_INT 7
50778: PUSH
50779: LD_INT 8
50781: PUSH
50782: LD_INT 9
50784: PUSH
50785: LD_INT 10
50787: PUSH
50788: LD_INT 11
50790: PUSH
50791: LD_INT 12
50793: PUSH
50794: LD_INT 13
50796: PUSH
50797: LD_INT 14
50799: PUSH
50800: LD_INT 15
50802: PUSH
50803: LD_INT 16
50805: PUSH
50806: LD_INT 17
50808: PUSH
50809: LD_INT 18
50811: PUSH
50812: LD_INT 19
50814: PUSH
50815: LD_INT 20
50817: PUSH
50818: LD_INT 21
50820: PUSH
50821: LD_INT 22
50823: PUSH
50824: LD_INT 23
50826: PUSH
50827: LD_INT 24
50829: PUSH
50830: LD_INT 25
50832: PUSH
50833: LD_INT 26
50835: PUSH
50836: LD_INT 27
50838: PUSH
50839: LD_INT 28
50841: PUSH
50842: LD_INT 29
50844: PUSH
50845: LD_INT 30
50847: PUSH
50848: LD_INT 31
50850: PUSH
50851: LD_INT 32
50853: PUSH
50854: LD_INT 33
50856: PUSH
50857: LD_INT 34
50859: PUSH
50860: LD_INT 36
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 101
50902: PUSH
50903: LD_INT 102
50905: PUSH
50906: LD_INT 103
50908: PUSH
50909: LD_INT 104
50911: PUSH
50912: LD_INT 105
50914: PUSH
50915: LD_INT 106
50917: PUSH
50918: LD_INT 107
50920: PUSH
50921: LD_INT 108
50923: PUSH
50924: LD_INT 109
50926: PUSH
50927: LD_INT 110
50929: PUSH
50930: LD_INT 111
50932: PUSH
50933: LD_INT 112
50935: PUSH
50936: LD_INT 113
50938: PUSH
50939: LD_INT 114
50941: PUSH
50942: LD_INT 116
50944: PUSH
50945: LD_INT 117
50947: PUSH
50948: LD_INT 118
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: ST_TO_ADDR
50974: GO 51981
50976: LD_INT 15
50978: DOUBLE
50979: EQUAL
50980: IFTRUE 50984
50982: GO 51208
50984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50985: LD_ADDR_VAR 0 2
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: LD_INT 4
51001: PUSH
51002: LD_INT 5
51004: PUSH
51005: LD_INT 6
51007: PUSH
51008: LD_INT 7
51010: PUSH
51011: LD_INT 8
51013: PUSH
51014: LD_INT 9
51016: PUSH
51017: LD_INT 10
51019: PUSH
51020: LD_INT 11
51022: PUSH
51023: LD_INT 12
51025: PUSH
51026: LD_INT 13
51028: PUSH
51029: LD_INT 14
51031: PUSH
51032: LD_INT 15
51034: PUSH
51035: LD_INT 16
51037: PUSH
51038: LD_INT 17
51040: PUSH
51041: LD_INT 18
51043: PUSH
51044: LD_INT 19
51046: PUSH
51047: LD_INT 20
51049: PUSH
51050: LD_INT 21
51052: PUSH
51053: LD_INT 22
51055: PUSH
51056: LD_INT 23
51058: PUSH
51059: LD_INT 24
51061: PUSH
51062: LD_INT 25
51064: PUSH
51065: LD_INT 26
51067: PUSH
51068: LD_INT 27
51070: PUSH
51071: LD_INT 28
51073: PUSH
51074: LD_INT 29
51076: PUSH
51077: LD_INT 30
51079: PUSH
51080: LD_INT 31
51082: PUSH
51083: LD_INT 32
51085: PUSH
51086: LD_INT 33
51088: PUSH
51089: LD_INT 34
51091: PUSH
51092: LD_INT 36
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 101
51134: PUSH
51135: LD_INT 102
51137: PUSH
51138: LD_INT 103
51140: PUSH
51141: LD_INT 104
51143: PUSH
51144: LD_INT 105
51146: PUSH
51147: LD_INT 106
51149: PUSH
51150: LD_INT 107
51152: PUSH
51153: LD_INT 108
51155: PUSH
51156: LD_INT 109
51158: PUSH
51159: LD_INT 110
51161: PUSH
51162: LD_INT 111
51164: PUSH
51165: LD_INT 112
51167: PUSH
51168: LD_INT 113
51170: PUSH
51171: LD_INT 114
51173: PUSH
51174: LD_INT 116
51176: PUSH
51177: LD_INT 117
51179: PUSH
51180: LD_INT 118
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: ST_TO_ADDR
51206: GO 51981
51208: LD_INT 16
51210: DOUBLE
51211: EQUAL
51212: IFTRUE 51216
51214: GO 51352
51216: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51217: LD_ADDR_VAR 0 2
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 4
51227: PUSH
51228: LD_INT 5
51230: PUSH
51231: LD_INT 7
51233: PUSH
51234: LD_INT 11
51236: PUSH
51237: LD_INT 12
51239: PUSH
51240: LD_INT 15
51242: PUSH
51243: LD_INT 16
51245: PUSH
51246: LD_INT 20
51248: PUSH
51249: LD_INT 21
51251: PUSH
51252: LD_INT 22
51254: PUSH
51255: LD_INT 23
51257: PUSH
51258: LD_INT 25
51260: PUSH
51261: LD_INT 26
51263: PUSH
51264: LD_INT 30
51266: PUSH
51267: LD_INT 31
51269: PUSH
51270: LD_INT 32
51272: PUSH
51273: LD_INT 33
51275: PUSH
51276: LD_INT 34
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 101
51302: PUSH
51303: LD_INT 102
51305: PUSH
51306: LD_INT 103
51308: PUSH
51309: LD_INT 106
51311: PUSH
51312: LD_INT 108
51314: PUSH
51315: LD_INT 112
51317: PUSH
51318: LD_INT 113
51320: PUSH
51321: LD_INT 114
51323: PUSH
51324: LD_INT 116
51326: PUSH
51327: LD_INT 117
51329: PUSH
51330: LD_INT 118
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: ST_TO_ADDR
51350: GO 51981
51352: LD_INT 17
51354: DOUBLE
51355: EQUAL
51356: IFTRUE 51360
51358: GO 51584
51360: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51361: LD_ADDR_VAR 0 2
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 4
51377: PUSH
51378: LD_INT 5
51380: PUSH
51381: LD_INT 6
51383: PUSH
51384: LD_INT 7
51386: PUSH
51387: LD_INT 8
51389: PUSH
51390: LD_INT 9
51392: PUSH
51393: LD_INT 10
51395: PUSH
51396: LD_INT 11
51398: PUSH
51399: LD_INT 12
51401: PUSH
51402: LD_INT 13
51404: PUSH
51405: LD_INT 14
51407: PUSH
51408: LD_INT 15
51410: PUSH
51411: LD_INT 16
51413: PUSH
51414: LD_INT 17
51416: PUSH
51417: LD_INT 18
51419: PUSH
51420: LD_INT 19
51422: PUSH
51423: LD_INT 20
51425: PUSH
51426: LD_INT 21
51428: PUSH
51429: LD_INT 22
51431: PUSH
51432: LD_INT 23
51434: PUSH
51435: LD_INT 24
51437: PUSH
51438: LD_INT 25
51440: PUSH
51441: LD_INT 26
51443: PUSH
51444: LD_INT 27
51446: PUSH
51447: LD_INT 28
51449: PUSH
51450: LD_INT 29
51452: PUSH
51453: LD_INT 30
51455: PUSH
51456: LD_INT 31
51458: PUSH
51459: LD_INT 32
51461: PUSH
51462: LD_INT 33
51464: PUSH
51465: LD_INT 34
51467: PUSH
51468: LD_INT 36
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 101
51510: PUSH
51511: LD_INT 102
51513: PUSH
51514: LD_INT 103
51516: PUSH
51517: LD_INT 104
51519: PUSH
51520: LD_INT 105
51522: PUSH
51523: LD_INT 106
51525: PUSH
51526: LD_INT 107
51528: PUSH
51529: LD_INT 108
51531: PUSH
51532: LD_INT 109
51534: PUSH
51535: LD_INT 110
51537: PUSH
51538: LD_INT 111
51540: PUSH
51541: LD_INT 112
51543: PUSH
51544: LD_INT 113
51546: PUSH
51547: LD_INT 114
51549: PUSH
51550: LD_INT 116
51552: PUSH
51553: LD_INT 117
51555: PUSH
51556: LD_INT 118
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: ST_TO_ADDR
51582: GO 51981
51584: LD_INT 18
51586: DOUBLE
51587: EQUAL
51588: IFTRUE 51592
51590: GO 51740
51592: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
51593: LD_ADDR_VAR 0 2
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 4
51603: PUSH
51604: LD_INT 5
51606: PUSH
51607: LD_INT 7
51609: PUSH
51610: LD_INT 11
51612: PUSH
51613: LD_INT 12
51615: PUSH
51616: LD_INT 15
51618: PUSH
51619: LD_INT 16
51621: PUSH
51622: LD_INT 20
51624: PUSH
51625: LD_INT 21
51627: PUSH
51628: LD_INT 22
51630: PUSH
51631: LD_INT 23
51633: PUSH
51634: LD_INT 25
51636: PUSH
51637: LD_INT 26
51639: PUSH
51640: LD_INT 30
51642: PUSH
51643: LD_INT 31
51645: PUSH
51646: LD_INT 32
51648: PUSH
51649: LD_INT 33
51651: PUSH
51652: LD_INT 34
51654: PUSH
51655: LD_INT 35
51657: PUSH
51658: LD_INT 36
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 101
51686: PUSH
51687: LD_INT 102
51689: PUSH
51690: LD_INT 103
51692: PUSH
51693: LD_INT 106
51695: PUSH
51696: LD_INT 108
51698: PUSH
51699: LD_INT 112
51701: PUSH
51702: LD_INT 113
51704: PUSH
51705: LD_INT 114
51707: PUSH
51708: LD_INT 115
51710: PUSH
51711: LD_INT 116
51713: PUSH
51714: LD_INT 117
51716: PUSH
51717: LD_INT 118
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: ST_TO_ADDR
51738: GO 51981
51740: LD_INT 19
51742: DOUBLE
51743: EQUAL
51744: IFTRUE 51748
51746: GO 51980
51748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51749: LD_ADDR_VAR 0 2
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 4
51765: PUSH
51766: LD_INT 5
51768: PUSH
51769: LD_INT 6
51771: PUSH
51772: LD_INT 7
51774: PUSH
51775: LD_INT 8
51777: PUSH
51778: LD_INT 9
51780: PUSH
51781: LD_INT 10
51783: PUSH
51784: LD_INT 11
51786: PUSH
51787: LD_INT 12
51789: PUSH
51790: LD_INT 13
51792: PUSH
51793: LD_INT 14
51795: PUSH
51796: LD_INT 15
51798: PUSH
51799: LD_INT 16
51801: PUSH
51802: LD_INT 17
51804: PUSH
51805: LD_INT 18
51807: PUSH
51808: LD_INT 19
51810: PUSH
51811: LD_INT 20
51813: PUSH
51814: LD_INT 21
51816: PUSH
51817: LD_INT 22
51819: PUSH
51820: LD_INT 23
51822: PUSH
51823: LD_INT 24
51825: PUSH
51826: LD_INT 25
51828: PUSH
51829: LD_INT 26
51831: PUSH
51832: LD_INT 27
51834: PUSH
51835: LD_INT 28
51837: PUSH
51838: LD_INT 29
51840: PUSH
51841: LD_INT 30
51843: PUSH
51844: LD_INT 31
51846: PUSH
51847: LD_INT 32
51849: PUSH
51850: LD_INT 33
51852: PUSH
51853: LD_INT 34
51855: PUSH
51856: LD_INT 35
51858: PUSH
51859: LD_INT 36
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 101
51902: PUSH
51903: LD_INT 102
51905: PUSH
51906: LD_INT 103
51908: PUSH
51909: LD_INT 104
51911: PUSH
51912: LD_INT 105
51914: PUSH
51915: LD_INT 106
51917: PUSH
51918: LD_INT 107
51920: PUSH
51921: LD_INT 108
51923: PUSH
51924: LD_INT 109
51926: PUSH
51927: LD_INT 110
51929: PUSH
51930: LD_INT 111
51932: PUSH
51933: LD_INT 112
51935: PUSH
51936: LD_INT 113
51938: PUSH
51939: LD_INT 114
51941: PUSH
51942: LD_INT 115
51944: PUSH
51945: LD_INT 116
51947: PUSH
51948: LD_INT 117
51950: PUSH
51951: LD_INT 118
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: ST_TO_ADDR
51978: GO 51981
51980: POP
// end else
51981: GO 52212
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51983: LD_ADDR_VAR 0 2
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: LD_INT 4
51999: PUSH
52000: LD_INT 5
52002: PUSH
52003: LD_INT 6
52005: PUSH
52006: LD_INT 7
52008: PUSH
52009: LD_INT 8
52011: PUSH
52012: LD_INT 9
52014: PUSH
52015: LD_INT 10
52017: PUSH
52018: LD_INT 11
52020: PUSH
52021: LD_INT 12
52023: PUSH
52024: LD_INT 13
52026: PUSH
52027: LD_INT 14
52029: PUSH
52030: LD_INT 15
52032: PUSH
52033: LD_INT 16
52035: PUSH
52036: LD_INT 17
52038: PUSH
52039: LD_INT 18
52041: PUSH
52042: LD_INT 19
52044: PUSH
52045: LD_INT 20
52047: PUSH
52048: LD_INT 21
52050: PUSH
52051: LD_INT 22
52053: PUSH
52054: LD_INT 23
52056: PUSH
52057: LD_INT 24
52059: PUSH
52060: LD_INT 25
52062: PUSH
52063: LD_INT 26
52065: PUSH
52066: LD_INT 27
52068: PUSH
52069: LD_INT 28
52071: PUSH
52072: LD_INT 29
52074: PUSH
52075: LD_INT 30
52077: PUSH
52078: LD_INT 31
52080: PUSH
52081: LD_INT 32
52083: PUSH
52084: LD_INT 33
52086: PUSH
52087: LD_INT 34
52089: PUSH
52090: LD_INT 35
52092: PUSH
52093: LD_INT 36
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 101
52136: PUSH
52137: LD_INT 102
52139: PUSH
52140: LD_INT 103
52142: PUSH
52143: LD_INT 104
52145: PUSH
52146: LD_INT 105
52148: PUSH
52149: LD_INT 106
52151: PUSH
52152: LD_INT 107
52154: PUSH
52155: LD_INT 108
52157: PUSH
52158: LD_INT 109
52160: PUSH
52161: LD_INT 110
52163: PUSH
52164: LD_INT 111
52166: PUSH
52167: LD_INT 112
52169: PUSH
52170: LD_INT 113
52172: PUSH
52173: LD_INT 114
52175: PUSH
52176: LD_INT 115
52178: PUSH
52179: LD_INT 116
52181: PUSH
52182: LD_INT 117
52184: PUSH
52185: LD_INT 118
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// if result then
52212: LD_VAR 0 2
52216: IFFALSE 53002
// begin normal :=  ;
52218: LD_ADDR_VAR 0 5
52222: PUSH
52223: LD_STRING 
52225: ST_TO_ADDR
// hardcore :=  ;
52226: LD_ADDR_VAR 0 6
52230: PUSH
52231: LD_STRING 
52233: ST_TO_ADDR
// active :=  ;
52234: LD_ADDR_VAR 0 7
52238: PUSH
52239: LD_STRING 
52241: ST_TO_ADDR
// for i = 1 to normalCounter do
52242: LD_ADDR_VAR 0 8
52246: PUSH
52247: DOUBLE
52248: LD_INT 1
52250: DEC
52251: ST_TO_ADDR
52252: LD_EXP 29
52256: PUSH
52257: FOR_TO
52258: IFFALSE 52359
// begin tmp := 0 ;
52260: LD_ADDR_VAR 0 3
52264: PUSH
52265: LD_STRING 0
52267: ST_TO_ADDR
// if result [ 1 ] then
52268: LD_VAR 0 2
52272: PUSH
52273: LD_INT 1
52275: ARRAY
52276: IFFALSE 52341
// if result [ 1 ] [ 1 ] = i then
52278: LD_VAR 0 2
52282: PUSH
52283: LD_INT 1
52285: ARRAY
52286: PUSH
52287: LD_INT 1
52289: ARRAY
52290: PUSH
52291: LD_VAR 0 8
52295: EQUAL
52296: IFFALSE 52341
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52298: LD_ADDR_VAR 0 2
52302: PUSH
52303: LD_VAR 0 2
52307: PPUSH
52308: LD_INT 1
52310: PPUSH
52311: LD_VAR 0 2
52315: PUSH
52316: LD_INT 1
52318: ARRAY
52319: PPUSH
52320: LD_INT 1
52322: PPUSH
52323: CALL_OW 3
52327: PPUSH
52328: CALL_OW 1
52332: ST_TO_ADDR
// tmp := 1 ;
52333: LD_ADDR_VAR 0 3
52337: PUSH
52338: LD_STRING 1
52340: ST_TO_ADDR
// end ; normal := normal & tmp ;
52341: LD_ADDR_VAR 0 5
52345: PUSH
52346: LD_VAR 0 5
52350: PUSH
52351: LD_VAR 0 3
52355: STR
52356: ST_TO_ADDR
// end ;
52357: GO 52257
52359: POP
52360: POP
// for i = 1 to hardcoreCounter do
52361: LD_ADDR_VAR 0 8
52365: PUSH
52366: DOUBLE
52367: LD_INT 1
52369: DEC
52370: ST_TO_ADDR
52371: LD_EXP 30
52375: PUSH
52376: FOR_TO
52377: IFFALSE 52482
// begin tmp := 0 ;
52379: LD_ADDR_VAR 0 3
52383: PUSH
52384: LD_STRING 0
52386: ST_TO_ADDR
// if result [ 2 ] then
52387: LD_VAR 0 2
52391: PUSH
52392: LD_INT 2
52394: ARRAY
52395: IFFALSE 52464
// if result [ 2 ] [ 1 ] = 100 + i then
52397: LD_VAR 0 2
52401: PUSH
52402: LD_INT 2
52404: ARRAY
52405: PUSH
52406: LD_INT 1
52408: ARRAY
52409: PUSH
52410: LD_INT 100
52412: PUSH
52413: LD_VAR 0 8
52417: PLUS
52418: EQUAL
52419: IFFALSE 52464
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52421: LD_ADDR_VAR 0 2
52425: PUSH
52426: LD_VAR 0 2
52430: PPUSH
52431: LD_INT 2
52433: PPUSH
52434: LD_VAR 0 2
52438: PUSH
52439: LD_INT 2
52441: ARRAY
52442: PPUSH
52443: LD_INT 1
52445: PPUSH
52446: CALL_OW 3
52450: PPUSH
52451: CALL_OW 1
52455: ST_TO_ADDR
// tmp := 1 ;
52456: LD_ADDR_VAR 0 3
52460: PUSH
52461: LD_STRING 1
52463: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
52464: LD_ADDR_VAR 0 6
52468: PUSH
52469: LD_VAR 0 6
52473: PUSH
52474: LD_VAR 0 3
52478: STR
52479: ST_TO_ADDR
// end ;
52480: GO 52376
52482: POP
52483: POP
// if isGameLoad then
52484: LD_VAR 0 1
52488: IFFALSE 52963
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
52490: LD_ADDR_VAR 0 4
52494: PUSH
52495: LD_EXP 33
52499: PUSH
52500: LD_EXP 32
52504: PUSH
52505: LD_EXP 34
52509: PUSH
52510: LD_EXP 31
52514: PUSH
52515: LD_EXP 35
52519: PUSH
52520: LD_EXP 36
52524: PUSH
52525: LD_EXP 37
52529: PUSH
52530: LD_EXP 38
52534: PUSH
52535: LD_EXP 39
52539: PUSH
52540: LD_EXP 40
52544: PUSH
52545: LD_EXP 41
52549: PUSH
52550: LD_EXP 42
52554: PUSH
52555: LD_EXP 43
52559: PUSH
52560: LD_EXP 44
52564: PUSH
52565: LD_EXP 52
52569: PUSH
52570: LD_EXP 53
52574: PUSH
52575: LD_EXP 54
52579: PUSH
52580: LD_EXP 55
52584: PUSH
52585: LD_EXP 57
52589: PUSH
52590: LD_EXP 58
52594: PUSH
52595: LD_EXP 59
52599: PUSH
52600: LD_EXP 62
52604: PUSH
52605: LD_EXP 64
52609: PUSH
52610: LD_EXP 65
52614: PUSH
52615: LD_EXP 66
52619: PUSH
52620: LD_EXP 68
52624: PUSH
52625: LD_EXP 69
52629: PUSH
52630: LD_EXP 72
52634: PUSH
52635: LD_EXP 73
52639: PUSH
52640: LD_EXP 74
52644: PUSH
52645: LD_EXP 75
52649: PUSH
52650: LD_EXP 76
52654: PUSH
52655: LD_EXP 77
52659: PUSH
52660: LD_EXP 78
52664: PUSH
52665: LD_EXP 79
52669: PUSH
52670: LD_EXP 80
52674: PUSH
52675: LD_EXP 45
52679: PUSH
52680: LD_EXP 46
52684: PUSH
52685: LD_EXP 49
52689: PUSH
52690: LD_EXP 50
52694: PUSH
52695: LD_EXP 51
52699: PUSH
52700: LD_EXP 47
52704: PUSH
52705: LD_EXP 48
52709: PUSH
52710: LD_EXP 56
52714: PUSH
52715: LD_EXP 60
52719: PUSH
52720: LD_EXP 61
52724: PUSH
52725: LD_EXP 63
52729: PUSH
52730: LD_EXP 67
52734: PUSH
52735: LD_EXP 70
52739: PUSH
52740: LD_EXP 71
52744: PUSH
52745: LD_EXP 81
52749: PUSH
52750: LD_EXP 82
52754: PUSH
52755: LD_EXP 83
52759: PUSH
52760: LD_EXP 84
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// tmp :=  ;
52821: LD_ADDR_VAR 0 3
52825: PUSH
52826: LD_STRING 
52828: ST_TO_ADDR
// for i = 1 to normalCounter do
52829: LD_ADDR_VAR 0 8
52833: PUSH
52834: DOUBLE
52835: LD_INT 1
52837: DEC
52838: ST_TO_ADDR
52839: LD_EXP 29
52843: PUSH
52844: FOR_TO
52845: IFFALSE 52881
// begin if flags [ i ] then
52847: LD_VAR 0 4
52851: PUSH
52852: LD_VAR 0 8
52856: ARRAY
52857: IFFALSE 52879
// tmp := tmp & i & ; ;
52859: LD_ADDR_VAR 0 3
52863: PUSH
52864: LD_VAR 0 3
52868: PUSH
52869: LD_VAR 0 8
52873: STR
52874: PUSH
52875: LD_STRING ;
52877: STR
52878: ST_TO_ADDR
// end ;
52879: GO 52844
52881: POP
52882: POP
// for i = 1 to hardcoreCounter do
52883: LD_ADDR_VAR 0 8
52887: PUSH
52888: DOUBLE
52889: LD_INT 1
52891: DEC
52892: ST_TO_ADDR
52893: LD_EXP 30
52897: PUSH
52898: FOR_TO
52899: IFFALSE 52945
// begin if flags [ normalCounter + i ] then
52901: LD_VAR 0 4
52905: PUSH
52906: LD_EXP 29
52910: PUSH
52911: LD_VAR 0 8
52915: PLUS
52916: ARRAY
52917: IFFALSE 52943
// tmp := tmp & ( 100 + i ) & ; ;
52919: LD_ADDR_VAR 0 3
52923: PUSH
52924: LD_VAR 0 3
52928: PUSH
52929: LD_INT 100
52931: PUSH
52932: LD_VAR 0 8
52936: PLUS
52937: STR
52938: PUSH
52939: LD_STRING ;
52941: STR
52942: ST_TO_ADDR
// end ;
52943: GO 52898
52945: POP
52946: POP
// if tmp then
52947: LD_VAR 0 3
52951: IFFALSE 52963
// active := tmp ;
52953: LD_ADDR_VAR 0 7
52957: PUSH
52958: LD_VAR 0 3
52962: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52963: LD_STRING getStreamItemsFromMission("
52965: PUSH
52966: LD_VAR 0 5
52970: STR
52971: PUSH
52972: LD_STRING ","
52974: STR
52975: PUSH
52976: LD_VAR 0 6
52980: STR
52981: PUSH
52982: LD_STRING ","
52984: STR
52985: PUSH
52986: LD_VAR 0 7
52990: STR
52991: PUSH
52992: LD_STRING ")
52994: STR
52995: PPUSH
52996: CALL_OW 559
// end else
53000: GO 53009
// ToLua ( getStreamItemsFromMission("","","") ) ;
53002: LD_STRING getStreamItemsFromMission("","","")
53004: PPUSH
53005: CALL_OW 559
// end ;
53009: LD_VAR 0 2
53013: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53014: LD_EXP 28
53018: PUSH
53019: LD_EXP 33
53023: AND
53024: IFFALSE 53148
53026: GO 53028
53028: DISABLE
53029: LD_INT 0
53031: PPUSH
53032: PPUSH
// begin enable ;
53033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53034: LD_ADDR_VAR 0 2
53038: PUSH
53039: LD_INT 22
53041: PUSH
53042: LD_OWVAR 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 34
53056: PUSH
53057: LD_INT 7
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 34
53066: PUSH
53067: LD_INT 45
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 34
53076: PUSH
53077: LD_INT 28
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 34
53086: PUSH
53087: LD_INT 47
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PPUSH
53105: CALL_OW 69
53109: ST_TO_ADDR
// if not tmp then
53110: LD_VAR 0 2
53114: NOT
53115: IFFALSE 53119
// exit ;
53117: GO 53148
// for i in tmp do
53119: LD_ADDR_VAR 0 1
53123: PUSH
53124: LD_VAR 0 2
53128: PUSH
53129: FOR_IN
53130: IFFALSE 53146
// begin SetLives ( i , 0 ) ;
53132: LD_VAR 0 1
53136: PPUSH
53137: LD_INT 0
53139: PPUSH
53140: CALL_OW 234
// end ;
53144: GO 53129
53146: POP
53147: POP
// end ;
53148: PPOPN 2
53150: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53151: LD_EXP 28
53155: PUSH
53156: LD_EXP 34
53160: AND
53161: IFFALSE 53245
53163: GO 53165
53165: DISABLE
53166: LD_INT 0
53168: PPUSH
53169: PPUSH
// begin enable ;
53170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53171: LD_ADDR_VAR 0 2
53175: PUSH
53176: LD_INT 22
53178: PUSH
53179: LD_OWVAR 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 32
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PPUSH
53202: CALL_OW 69
53206: ST_TO_ADDR
// if not tmp then
53207: LD_VAR 0 2
53211: NOT
53212: IFFALSE 53216
// exit ;
53214: GO 53245
// for i in tmp do
53216: LD_ADDR_VAR 0 1
53220: PUSH
53221: LD_VAR 0 2
53225: PUSH
53226: FOR_IN
53227: IFFALSE 53243
// begin SetLives ( i , 0 ) ;
53229: LD_VAR 0 1
53233: PPUSH
53234: LD_INT 0
53236: PPUSH
53237: CALL_OW 234
// end ;
53241: GO 53226
53243: POP
53244: POP
// end ;
53245: PPOPN 2
53247: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53248: LD_EXP 28
53252: PUSH
53253: LD_EXP 31
53257: AND
53258: IFFALSE 53351
53260: GO 53262
53262: DISABLE
53263: LD_INT 0
53265: PPUSH
// begin enable ;
53266: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53267: LD_ADDR_VAR 0 1
53271: PUSH
53272: LD_INT 22
53274: PUSH
53275: LD_OWVAR 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 25
53289: PUSH
53290: LD_INT 5
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 25
53299: PUSH
53300: LD_INT 9
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 25
53309: PUSH
53310: LD_INT 8
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PPUSH
53327: CALL_OW 69
53331: PUSH
53332: FOR_IN
53333: IFFALSE 53349
// begin SetClass ( i , 1 ) ;
53335: LD_VAR 0 1
53339: PPUSH
53340: LD_INT 1
53342: PPUSH
53343: CALL_OW 336
// end ;
53347: GO 53332
53349: POP
53350: POP
// end ;
53351: PPOPN 1
53353: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53354: LD_EXP 28
53358: PUSH
53359: LD_EXP 32
53363: AND
53364: PUSH
53365: LD_OWVAR 65
53369: PUSH
53370: LD_INT 7
53372: LESS
53373: AND
53374: IFFALSE 53388
53376: GO 53378
53378: DISABLE
// begin enable ;
53379: ENABLE
// game_speed := 7 ;
53380: LD_ADDR_OWVAR 65
53384: PUSH
53385: LD_INT 7
53387: ST_TO_ADDR
// end ;
53388: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53389: LD_EXP 28
53393: PUSH
53394: LD_EXP 35
53398: AND
53399: IFFALSE 53601
53401: GO 53403
53403: DISABLE
53404: LD_INT 0
53406: PPUSH
53407: PPUSH
53408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53409: LD_ADDR_VAR 0 3
53413: PUSH
53414: LD_INT 81
53416: PUSH
53417: LD_OWVAR 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 21
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PPUSH
53440: CALL_OW 69
53444: ST_TO_ADDR
// if not tmp then
53445: LD_VAR 0 3
53449: NOT
53450: IFFALSE 53454
// exit ;
53452: GO 53601
// if tmp > 5 then
53454: LD_VAR 0 3
53458: PUSH
53459: LD_INT 5
53461: GREATER
53462: IFFALSE 53474
// k := 5 else
53464: LD_ADDR_VAR 0 2
53468: PUSH
53469: LD_INT 5
53471: ST_TO_ADDR
53472: GO 53484
// k := tmp ;
53474: LD_ADDR_VAR 0 2
53478: PUSH
53479: LD_VAR 0 3
53483: ST_TO_ADDR
// for i := 1 to k do
53484: LD_ADDR_VAR 0 1
53488: PUSH
53489: DOUBLE
53490: LD_INT 1
53492: DEC
53493: ST_TO_ADDR
53494: LD_VAR 0 2
53498: PUSH
53499: FOR_TO
53500: IFFALSE 53599
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
53502: LD_VAR 0 3
53506: PUSH
53507: LD_VAR 0 1
53511: ARRAY
53512: PPUSH
53513: LD_VAR 0 1
53517: PUSH
53518: LD_INT 4
53520: MOD
53521: PUSH
53522: LD_INT 1
53524: PLUS
53525: PPUSH
53526: CALL_OW 259
53530: PUSH
53531: LD_INT 10
53533: LESS
53534: IFFALSE 53597
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
53536: LD_VAR 0 3
53540: PUSH
53541: LD_VAR 0 1
53545: ARRAY
53546: PPUSH
53547: LD_VAR 0 1
53551: PUSH
53552: LD_INT 4
53554: MOD
53555: PUSH
53556: LD_INT 1
53558: PLUS
53559: PPUSH
53560: LD_VAR 0 3
53564: PUSH
53565: LD_VAR 0 1
53569: ARRAY
53570: PPUSH
53571: LD_VAR 0 1
53575: PUSH
53576: LD_INT 4
53578: MOD
53579: PUSH
53580: LD_INT 1
53582: PLUS
53583: PPUSH
53584: CALL_OW 259
53588: PUSH
53589: LD_INT 1
53591: PLUS
53592: PPUSH
53593: CALL_OW 237
53597: GO 53499
53599: POP
53600: POP
// end ;
53601: PPOPN 3
53603: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
53604: LD_EXP 28
53608: PUSH
53609: LD_EXP 36
53613: AND
53614: IFFALSE 53634
53616: GO 53618
53618: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
53619: LD_INT 4
53621: PPUSH
53622: LD_OWVAR 2
53626: PPUSH
53627: LD_INT 0
53629: PPUSH
53630: CALL_OW 324
53634: END
// every 0 0$1 trigger StreamModeActive and sShovel do
53635: LD_EXP 28
53639: PUSH
53640: LD_EXP 65
53644: AND
53645: IFFALSE 53665
53647: GO 53649
53649: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
53650: LD_INT 19
53652: PPUSH
53653: LD_OWVAR 2
53657: PPUSH
53658: LD_INT 0
53660: PPUSH
53661: CALL_OW 324
53665: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53666: LD_EXP 28
53670: PUSH
53671: LD_EXP 37
53675: AND
53676: IFFALSE 53778
53678: GO 53680
53680: DISABLE
53681: LD_INT 0
53683: PPUSH
53684: PPUSH
// begin enable ;
53685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53686: LD_ADDR_VAR 0 2
53690: PUSH
53691: LD_INT 22
53693: PUSH
53694: LD_OWVAR 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 34
53708: PUSH
53709: LD_INT 11
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 34
53718: PUSH
53719: LD_INT 30
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PPUSH
53735: CALL_OW 69
53739: ST_TO_ADDR
// if not tmp then
53740: LD_VAR 0 2
53744: NOT
53745: IFFALSE 53749
// exit ;
53747: GO 53778
// for i in tmp do
53749: LD_ADDR_VAR 0 1
53753: PUSH
53754: LD_VAR 0 2
53758: PUSH
53759: FOR_IN
53760: IFFALSE 53776
// begin SetLives ( i , 0 ) ;
53762: LD_VAR 0 1
53766: PPUSH
53767: LD_INT 0
53769: PPUSH
53770: CALL_OW 234
// end ;
53774: GO 53759
53776: POP
53777: POP
// end ;
53778: PPOPN 2
53780: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53781: LD_EXP 28
53785: PUSH
53786: LD_EXP 38
53790: AND
53791: IFFALSE 53811
53793: GO 53795
53795: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53796: LD_INT 32
53798: PPUSH
53799: LD_OWVAR 2
53803: PPUSH
53804: LD_INT 0
53806: PPUSH
53807: CALL_OW 324
53811: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53812: LD_EXP 28
53816: PUSH
53817: LD_EXP 39
53821: AND
53822: IFFALSE 54003
53824: GO 53826
53826: DISABLE
53827: LD_INT 0
53829: PPUSH
53830: PPUSH
53831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53832: LD_ADDR_VAR 0 2
53836: PUSH
53837: LD_INT 22
53839: PUSH
53840: LD_OWVAR 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 33
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PPUSH
53863: CALL_OW 69
53867: ST_TO_ADDR
// if not tmp then
53868: LD_VAR 0 2
53872: NOT
53873: IFFALSE 53877
// exit ;
53875: GO 54003
// side := 0 ;
53877: LD_ADDR_VAR 0 3
53881: PUSH
53882: LD_INT 0
53884: ST_TO_ADDR
// for i := 1 to 8 do
53885: LD_ADDR_VAR 0 1
53889: PUSH
53890: DOUBLE
53891: LD_INT 1
53893: DEC
53894: ST_TO_ADDR
53895: LD_INT 8
53897: PUSH
53898: FOR_TO
53899: IFFALSE 53947
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53901: LD_OWVAR 2
53905: PUSH
53906: LD_VAR 0 1
53910: NONEQUAL
53911: PUSH
53912: LD_OWVAR 2
53916: PPUSH
53917: LD_VAR 0 1
53921: PPUSH
53922: CALL_OW 81
53926: PUSH
53927: LD_INT 2
53929: EQUAL
53930: AND
53931: IFFALSE 53945
// begin side := i ;
53933: LD_ADDR_VAR 0 3
53937: PUSH
53938: LD_VAR 0 1
53942: ST_TO_ADDR
// break ;
53943: GO 53947
// end ;
53945: GO 53898
53947: POP
53948: POP
// if not side then
53949: LD_VAR 0 3
53953: NOT
53954: IFFALSE 53958
// exit ;
53956: GO 54003
// for i := 1 to tmp do
53958: LD_ADDR_VAR 0 1
53962: PUSH
53963: DOUBLE
53964: LD_INT 1
53966: DEC
53967: ST_TO_ADDR
53968: LD_VAR 0 2
53972: PUSH
53973: FOR_TO
53974: IFFALSE 54001
// if Prob ( 60 ) then
53976: LD_INT 60
53978: PPUSH
53979: CALL_OW 13
53983: IFFALSE 53999
// SetSide ( i , side ) ;
53985: LD_VAR 0 1
53989: PPUSH
53990: LD_VAR 0 3
53994: PPUSH
53995: CALL_OW 235
53999: GO 53973
54001: POP
54002: POP
// end ;
54003: PPOPN 3
54005: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54006: LD_EXP 28
54010: PUSH
54011: LD_EXP 41
54015: AND
54016: IFFALSE 54135
54018: GO 54020
54020: DISABLE
54021: LD_INT 0
54023: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54024: LD_ADDR_VAR 0 1
54028: PUSH
54029: LD_INT 22
54031: PUSH
54032: LD_OWVAR 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 21
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 23
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: PPUSH
54073: CALL_OW 69
54077: PUSH
54078: FOR_IN
54079: IFFALSE 54133
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54081: LD_VAR 0 1
54085: PPUSH
54086: CALL_OW 257
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: LD_INT 4
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: IN
54109: IFFALSE 54131
// SetClass ( un , rand ( 1 , 4 ) ) ;
54111: LD_VAR 0 1
54115: PPUSH
54116: LD_INT 1
54118: PPUSH
54119: LD_INT 4
54121: PPUSH
54122: CALL_OW 12
54126: PPUSH
54127: CALL_OW 336
54131: GO 54078
54133: POP
54134: POP
// end ;
54135: PPOPN 1
54137: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54138: LD_EXP 28
54142: PUSH
54143: LD_EXP 40
54147: AND
54148: IFFALSE 54227
54150: GO 54152
54152: DISABLE
54153: LD_INT 0
54155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54156: LD_ADDR_VAR 0 1
54160: PUSH
54161: LD_INT 22
54163: PUSH
54164: LD_OWVAR 2
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 21
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PPUSH
54187: CALL_OW 69
54191: ST_TO_ADDR
// if not tmp then
54192: LD_VAR 0 1
54196: NOT
54197: IFFALSE 54201
// exit ;
54199: GO 54227
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54201: LD_VAR 0 1
54205: PUSH
54206: LD_INT 1
54208: PPUSH
54209: LD_VAR 0 1
54213: PPUSH
54214: CALL_OW 12
54218: ARRAY
54219: PPUSH
54220: LD_INT 100
54222: PPUSH
54223: CALL_OW 234
// end ;
54227: PPOPN 1
54229: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54230: LD_EXP 28
54234: PUSH
54235: LD_EXP 42
54239: AND
54240: IFFALSE 54338
54242: GO 54244
54244: DISABLE
54245: LD_INT 0
54247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54248: LD_ADDR_VAR 0 1
54252: PUSH
54253: LD_INT 22
54255: PUSH
54256: LD_OWVAR 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 21
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PPUSH
54279: CALL_OW 69
54283: ST_TO_ADDR
// if not tmp then
54284: LD_VAR 0 1
54288: NOT
54289: IFFALSE 54293
// exit ;
54291: GO 54338
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54293: LD_VAR 0 1
54297: PUSH
54298: LD_INT 1
54300: PPUSH
54301: LD_VAR 0 1
54305: PPUSH
54306: CALL_OW 12
54310: ARRAY
54311: PPUSH
54312: LD_INT 1
54314: PPUSH
54315: LD_INT 4
54317: PPUSH
54318: CALL_OW 12
54322: PPUSH
54323: LD_INT 3000
54325: PPUSH
54326: LD_INT 9000
54328: PPUSH
54329: CALL_OW 12
54333: PPUSH
54334: CALL_OW 492
// end ;
54338: PPOPN 1
54340: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54341: LD_EXP 28
54345: PUSH
54346: LD_EXP 43
54350: AND
54351: IFFALSE 54371
54353: GO 54355
54355: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54356: LD_INT 1
54358: PPUSH
54359: LD_OWVAR 2
54363: PPUSH
54364: LD_INT 0
54366: PPUSH
54367: CALL_OW 324
54371: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54372: LD_EXP 28
54376: PUSH
54377: LD_EXP 44
54381: AND
54382: IFFALSE 54465
54384: GO 54386
54386: DISABLE
54387: LD_INT 0
54389: PPUSH
54390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54391: LD_ADDR_VAR 0 2
54395: PUSH
54396: LD_INT 22
54398: PUSH
54399: LD_OWVAR 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 21
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PPUSH
54422: CALL_OW 69
54426: ST_TO_ADDR
// if not tmp then
54427: LD_VAR 0 2
54431: NOT
54432: IFFALSE 54436
// exit ;
54434: GO 54465
// for i in tmp do
54436: LD_ADDR_VAR 0 1
54440: PUSH
54441: LD_VAR 0 2
54445: PUSH
54446: FOR_IN
54447: IFFALSE 54463
// SetBLevel ( i , 10 ) ;
54449: LD_VAR 0 1
54453: PPUSH
54454: LD_INT 10
54456: PPUSH
54457: CALL_OW 241
54461: GO 54446
54463: POP
54464: POP
// end ;
54465: PPOPN 2
54467: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
54468: LD_EXP 28
54472: PUSH
54473: LD_EXP 45
54477: AND
54478: IFFALSE 54589
54480: GO 54482
54482: DISABLE
54483: LD_INT 0
54485: PPUSH
54486: PPUSH
54487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54488: LD_ADDR_VAR 0 3
54492: PUSH
54493: LD_INT 22
54495: PUSH
54496: LD_OWVAR 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 25
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PPUSH
54519: CALL_OW 69
54523: ST_TO_ADDR
// if not tmp then
54524: LD_VAR 0 3
54528: NOT
54529: IFFALSE 54533
// exit ;
54531: GO 54589
// un := tmp [ rand ( 1 , tmp ) ] ;
54533: LD_ADDR_VAR 0 2
54537: PUSH
54538: LD_VAR 0 3
54542: PUSH
54543: LD_INT 1
54545: PPUSH
54546: LD_VAR 0 3
54550: PPUSH
54551: CALL_OW 12
54555: ARRAY
54556: ST_TO_ADDR
// if Crawls ( un ) then
54557: LD_VAR 0 2
54561: PPUSH
54562: CALL_OW 318
54566: IFFALSE 54577
// ComWalk ( un ) ;
54568: LD_VAR 0 2
54572: PPUSH
54573: CALL_OW 138
// SetClass ( un , class_sniper ) ;
54577: LD_VAR 0 2
54581: PPUSH
54582: LD_INT 5
54584: PPUSH
54585: CALL_OW 336
// end ;
54589: PPOPN 3
54591: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
54592: LD_EXP 28
54596: PUSH
54597: LD_EXP 46
54601: AND
54602: PUSH
54603: LD_OWVAR 67
54607: PUSH
54608: LD_INT 4
54610: LESS
54611: AND
54612: IFFALSE 54631
54614: GO 54616
54616: DISABLE
// begin Difficulty := Difficulty + 1 ;
54617: LD_ADDR_OWVAR 67
54621: PUSH
54622: LD_OWVAR 67
54626: PUSH
54627: LD_INT 1
54629: PLUS
54630: ST_TO_ADDR
// end ;
54631: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
54632: LD_EXP 28
54636: PUSH
54637: LD_EXP 47
54641: AND
54642: IFFALSE 54745
54644: GO 54646
54646: DISABLE
54647: LD_INT 0
54649: PPUSH
// begin for i := 1 to 5 do
54650: LD_ADDR_VAR 0 1
54654: PUSH
54655: DOUBLE
54656: LD_INT 1
54658: DEC
54659: ST_TO_ADDR
54660: LD_INT 5
54662: PUSH
54663: FOR_TO
54664: IFFALSE 54743
// begin uc_nation := nation_nature ;
54666: LD_ADDR_OWVAR 21
54670: PUSH
54671: LD_INT 0
54673: ST_TO_ADDR
// uc_side := 0 ;
54674: LD_ADDR_OWVAR 20
54678: PUSH
54679: LD_INT 0
54681: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54682: LD_ADDR_OWVAR 29
54686: PUSH
54687: LD_INT 12
54689: PUSH
54690: LD_INT 12
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// hc_agressivity := 20 ;
54697: LD_ADDR_OWVAR 35
54701: PUSH
54702: LD_INT 20
54704: ST_TO_ADDR
// hc_class := class_tiger ;
54705: LD_ADDR_OWVAR 28
54709: PUSH
54710: LD_INT 14
54712: ST_TO_ADDR
// hc_gallery :=  ;
54713: LD_ADDR_OWVAR 33
54717: PUSH
54718: LD_STRING 
54720: ST_TO_ADDR
// hc_name :=  ;
54721: LD_ADDR_OWVAR 26
54725: PUSH
54726: LD_STRING 
54728: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54729: CALL_OW 44
54733: PPUSH
54734: LD_INT 0
54736: PPUSH
54737: CALL_OW 51
// end ;
54741: GO 54663
54743: POP
54744: POP
// end ;
54745: PPOPN 1
54747: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54748: LD_EXP 28
54752: PUSH
54753: LD_EXP 48
54757: AND
54758: IFFALSE 54767
54760: GO 54762
54762: DISABLE
// StreamSibBomb ;
54763: CALL 54768 0 0
54767: END
// export function StreamSibBomb ; var i , x , y ; begin
54768: LD_INT 0
54770: PPUSH
54771: PPUSH
54772: PPUSH
54773: PPUSH
// result := false ;
54774: LD_ADDR_VAR 0 1
54778: PUSH
54779: LD_INT 0
54781: ST_TO_ADDR
// for i := 1 to 16 do
54782: LD_ADDR_VAR 0 2
54786: PUSH
54787: DOUBLE
54788: LD_INT 1
54790: DEC
54791: ST_TO_ADDR
54792: LD_INT 16
54794: PUSH
54795: FOR_TO
54796: IFFALSE 54995
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54798: LD_ADDR_VAR 0 3
54802: PUSH
54803: LD_INT 10
54805: PUSH
54806: LD_INT 20
54808: PUSH
54809: LD_INT 30
54811: PUSH
54812: LD_INT 40
54814: PUSH
54815: LD_INT 50
54817: PUSH
54818: LD_INT 60
54820: PUSH
54821: LD_INT 70
54823: PUSH
54824: LD_INT 80
54826: PUSH
54827: LD_INT 90
54829: PUSH
54830: LD_INT 100
54832: PUSH
54833: LD_INT 110
54835: PUSH
54836: LD_INT 120
54838: PUSH
54839: LD_INT 130
54841: PUSH
54842: LD_INT 140
54844: PUSH
54845: LD_INT 150
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PPUSH
54868: LD_INT 15
54870: PPUSH
54871: CALL_OW 12
54875: ARRAY
54876: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54877: LD_ADDR_VAR 0 4
54881: PUSH
54882: LD_INT 10
54884: PUSH
54885: LD_INT 20
54887: PUSH
54888: LD_INT 30
54890: PUSH
54891: LD_INT 40
54893: PUSH
54894: LD_INT 50
54896: PUSH
54897: LD_INT 60
54899: PUSH
54900: LD_INT 70
54902: PUSH
54903: LD_INT 80
54905: PUSH
54906: LD_INT 90
54908: PUSH
54909: LD_INT 100
54911: PUSH
54912: LD_INT 110
54914: PUSH
54915: LD_INT 120
54917: PUSH
54918: LD_INT 130
54920: PUSH
54921: LD_INT 140
54923: PUSH
54924: LD_INT 150
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PPUSH
54947: LD_INT 15
54949: PPUSH
54950: CALL_OW 12
54954: ARRAY
54955: ST_TO_ADDR
// if ValidHex ( x , y ) then
54956: LD_VAR 0 3
54960: PPUSH
54961: LD_VAR 0 4
54965: PPUSH
54966: CALL_OW 488
54970: IFFALSE 54993
// begin result := [ x , y ] ;
54972: LD_ADDR_VAR 0 1
54976: PUSH
54977: LD_VAR 0 3
54981: PUSH
54982: LD_VAR 0 4
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// break ;
54991: GO 54995
// end ; end ;
54993: GO 54795
54995: POP
54996: POP
// if result then
54997: LD_VAR 0 1
55001: IFFALSE 55061
// begin ToLua ( playSibBomb() ) ;
55003: LD_STRING playSibBomb()
55005: PPUSH
55006: CALL_OW 559
// wait ( 0 0$14 ) ;
55010: LD_INT 490
55012: PPUSH
55013: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55017: LD_VAR 0 1
55021: PUSH
55022: LD_INT 1
55024: ARRAY
55025: PPUSH
55026: LD_VAR 0 1
55030: PUSH
55031: LD_INT 2
55033: ARRAY
55034: PPUSH
55035: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55039: LD_VAR 0 1
55043: PUSH
55044: LD_INT 1
55046: ARRAY
55047: PPUSH
55048: LD_VAR 0 1
55052: PUSH
55053: LD_INT 2
55055: ARRAY
55056: PPUSH
55057: CALL_OW 429
// end ; end ;
55061: LD_VAR 0 1
55065: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55066: LD_EXP 28
55070: PUSH
55071: LD_EXP 50
55075: AND
55076: IFFALSE 55088
55078: GO 55080
55080: DISABLE
// YouLost (  ) ;
55081: LD_STRING 
55083: PPUSH
55084: CALL_OW 104
55088: END
// every 0 0$1 trigger StreamModeActive and sFog do
55089: LD_EXP 28
55093: PUSH
55094: LD_EXP 49
55098: AND
55099: IFFALSE 55113
55101: GO 55103
55103: DISABLE
// FogOff ( your_side ) ;
55104: LD_OWVAR 2
55108: PPUSH
55109: CALL_OW 344
55113: END
// every 0 0$1 trigger StreamModeActive and sSun do
55114: LD_EXP 28
55118: PUSH
55119: LD_EXP 51
55123: AND
55124: IFFALSE 55152
55126: GO 55128
55128: DISABLE
// begin solar_recharge_percent := 0 ;
55129: LD_ADDR_OWVAR 79
55133: PUSH
55134: LD_INT 0
55136: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55137: LD_INT 10500
55139: PPUSH
55140: CALL_OW 67
// solar_recharge_percent := 100 ;
55144: LD_ADDR_OWVAR 79
55148: PUSH
55149: LD_INT 100
55151: ST_TO_ADDR
// end ;
55152: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55153: LD_EXP 28
55157: PUSH
55158: LD_EXP 52
55162: AND
55163: IFFALSE 55402
55165: GO 55167
55167: DISABLE
55168: LD_INT 0
55170: PPUSH
55171: PPUSH
55172: PPUSH
// begin tmp := [ ] ;
55173: LD_ADDR_VAR 0 3
55177: PUSH
55178: EMPTY
55179: ST_TO_ADDR
// for i := 1 to 6 do
55180: LD_ADDR_VAR 0 1
55184: PUSH
55185: DOUBLE
55186: LD_INT 1
55188: DEC
55189: ST_TO_ADDR
55190: LD_INT 6
55192: PUSH
55193: FOR_TO
55194: IFFALSE 55299
// begin uc_nation := nation_nature ;
55196: LD_ADDR_OWVAR 21
55200: PUSH
55201: LD_INT 0
55203: ST_TO_ADDR
// uc_side := 0 ;
55204: LD_ADDR_OWVAR 20
55208: PUSH
55209: LD_INT 0
55211: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55212: LD_ADDR_OWVAR 29
55216: PUSH
55217: LD_INT 12
55219: PUSH
55220: LD_INT 12
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: ST_TO_ADDR
// hc_agressivity := 20 ;
55227: LD_ADDR_OWVAR 35
55231: PUSH
55232: LD_INT 20
55234: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55235: LD_ADDR_OWVAR 28
55239: PUSH
55240: LD_INT 17
55242: ST_TO_ADDR
// hc_gallery :=  ;
55243: LD_ADDR_OWVAR 33
55247: PUSH
55248: LD_STRING 
55250: ST_TO_ADDR
// hc_name :=  ;
55251: LD_ADDR_OWVAR 26
55255: PUSH
55256: LD_STRING 
55258: ST_TO_ADDR
// un := CreateHuman ;
55259: LD_ADDR_VAR 0 2
55263: PUSH
55264: CALL_OW 44
55268: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55269: LD_VAR 0 2
55273: PPUSH
55274: LD_INT 1
55276: PPUSH
55277: CALL_OW 51
// tmp := tmp ^ un ;
55281: LD_ADDR_VAR 0 3
55285: PUSH
55286: LD_VAR 0 3
55290: PUSH
55291: LD_VAR 0 2
55295: ADD
55296: ST_TO_ADDR
// end ;
55297: GO 55193
55299: POP
55300: POP
// repeat wait ( 0 0$1 ) ;
55301: LD_INT 35
55303: PPUSH
55304: CALL_OW 67
// for un in tmp do
55308: LD_ADDR_VAR 0 2
55312: PUSH
55313: LD_VAR 0 3
55317: PUSH
55318: FOR_IN
55319: IFFALSE 55393
// begin if IsDead ( un ) then
55321: LD_VAR 0 2
55325: PPUSH
55326: CALL_OW 301
55330: IFFALSE 55350
// begin tmp := tmp diff un ;
55332: LD_ADDR_VAR 0 3
55336: PUSH
55337: LD_VAR 0 3
55341: PUSH
55342: LD_VAR 0 2
55346: DIFF
55347: ST_TO_ADDR
// continue ;
55348: GO 55318
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55350: LD_VAR 0 2
55354: PPUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 22
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PPUSH
55372: CALL_OW 69
55376: PPUSH
55377: LD_VAR 0 2
55381: PPUSH
55382: CALL_OW 74
55386: PPUSH
55387: CALL_OW 115
// end ;
55391: GO 55318
55393: POP
55394: POP
// until not tmp ;
55395: LD_VAR 0 3
55399: NOT
55400: IFFALSE 55301
// end ;
55402: PPOPN 3
55404: END
// every 0 0$1 trigger StreamModeActive and sTroll do
55405: LD_EXP 28
55409: PUSH
55410: LD_EXP 53
55414: AND
55415: IFFALSE 55469
55417: GO 55419
55419: DISABLE
// begin ToLua ( displayTroll(); ) ;
55420: LD_STRING displayTroll();
55422: PPUSH
55423: CALL_OW 559
// wait ( 3 3$00 ) ;
55427: LD_INT 6300
55429: PPUSH
55430: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55434: LD_STRING hideTroll();
55436: PPUSH
55437: CALL_OW 559
// wait ( 1 1$00 ) ;
55441: LD_INT 2100
55443: PPUSH
55444: CALL_OW 67
// ToLua ( displayTroll(); ) ;
55448: LD_STRING displayTroll();
55450: PPUSH
55451: CALL_OW 559
// wait ( 1 1$00 ) ;
55455: LD_INT 2100
55457: PPUSH
55458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55462: LD_STRING hideTroll();
55464: PPUSH
55465: CALL_OW 559
// end ;
55469: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
55470: LD_EXP 28
55474: PUSH
55475: LD_EXP 54
55479: AND
55480: IFFALSE 55543
55482: GO 55484
55484: DISABLE
55485: LD_INT 0
55487: PPUSH
// begin p := 0 ;
55488: LD_ADDR_VAR 0 1
55492: PUSH
55493: LD_INT 0
55495: ST_TO_ADDR
// repeat game_speed := 1 ;
55496: LD_ADDR_OWVAR 65
55500: PUSH
55501: LD_INT 1
55503: ST_TO_ADDR
// wait ( 0 0$1 ) ;
55504: LD_INT 35
55506: PPUSH
55507: CALL_OW 67
// p := p + 1 ;
55511: LD_ADDR_VAR 0 1
55515: PUSH
55516: LD_VAR 0 1
55520: PUSH
55521: LD_INT 1
55523: PLUS
55524: ST_TO_ADDR
// until p >= 60 ;
55525: LD_VAR 0 1
55529: PUSH
55530: LD_INT 60
55532: GREATEREQUAL
55533: IFFALSE 55496
// game_speed := 4 ;
55535: LD_ADDR_OWVAR 65
55539: PUSH
55540: LD_INT 4
55542: ST_TO_ADDR
// end ;
55543: PPOPN 1
55545: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
55546: LD_EXP 28
55550: PUSH
55551: LD_EXP 55
55555: AND
55556: IFFALSE 55702
55558: GO 55560
55560: DISABLE
55561: LD_INT 0
55563: PPUSH
55564: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55565: LD_ADDR_VAR 0 1
55569: PUSH
55570: LD_INT 22
55572: PUSH
55573: LD_OWVAR 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 30
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 30
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PPUSH
55614: CALL_OW 69
55618: ST_TO_ADDR
// if not depot then
55619: LD_VAR 0 1
55623: NOT
55624: IFFALSE 55628
// exit ;
55626: GO 55702
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
55628: LD_ADDR_VAR 0 2
55632: PUSH
55633: LD_VAR 0 1
55637: PUSH
55638: LD_INT 1
55640: PPUSH
55641: LD_VAR 0 1
55645: PPUSH
55646: CALL_OW 12
55650: ARRAY
55651: PPUSH
55652: CALL_OW 274
55656: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55657: LD_VAR 0 2
55661: PPUSH
55662: LD_INT 1
55664: PPUSH
55665: LD_INT 0
55667: PPUSH
55668: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55672: LD_VAR 0 2
55676: PPUSH
55677: LD_INT 2
55679: PPUSH
55680: LD_INT 0
55682: PPUSH
55683: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55687: LD_VAR 0 2
55691: PPUSH
55692: LD_INT 3
55694: PPUSH
55695: LD_INT 0
55697: PPUSH
55698: CALL_OW 277
// end ;
55702: PPOPN 2
55704: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55705: LD_EXP 28
55709: PUSH
55710: LD_EXP 56
55714: AND
55715: IFFALSE 55812
55717: GO 55719
55719: DISABLE
55720: LD_INT 0
55722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55723: LD_ADDR_VAR 0 1
55727: PUSH
55728: LD_INT 22
55730: PUSH
55731: LD_OWVAR 2
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 21
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: LD_INT 23
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: PPUSH
55772: CALL_OW 69
55776: ST_TO_ADDR
// if not tmp then
55777: LD_VAR 0 1
55781: NOT
55782: IFFALSE 55786
// exit ;
55784: GO 55812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55786: LD_VAR 0 1
55790: PUSH
55791: LD_INT 1
55793: PPUSH
55794: LD_VAR 0 1
55798: PPUSH
55799: CALL_OW 12
55803: ARRAY
55804: PPUSH
55805: LD_INT 200
55807: PPUSH
55808: CALL_OW 234
// end ;
55812: PPOPN 1
55814: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55815: LD_EXP 28
55819: PUSH
55820: LD_EXP 57
55824: AND
55825: IFFALSE 55904
55827: GO 55829
55829: DISABLE
55830: LD_INT 0
55832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55833: LD_ADDR_VAR 0 1
55837: PUSH
55838: LD_INT 22
55840: PUSH
55841: LD_OWVAR 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 21
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PPUSH
55864: CALL_OW 69
55868: ST_TO_ADDR
// if not tmp then
55869: LD_VAR 0 1
55873: NOT
55874: IFFALSE 55878
// exit ;
55876: GO 55904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55878: LD_VAR 0 1
55882: PUSH
55883: LD_INT 1
55885: PPUSH
55886: LD_VAR 0 1
55890: PPUSH
55891: CALL_OW 12
55895: ARRAY
55896: PPUSH
55897: LD_INT 60
55899: PPUSH
55900: CALL_OW 234
// end ;
55904: PPOPN 1
55906: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55907: LD_EXP 28
55911: PUSH
55912: LD_EXP 58
55916: AND
55917: IFFALSE 56016
55919: GO 55921
55921: DISABLE
55922: LD_INT 0
55924: PPUSH
55925: PPUSH
// begin enable ;
55926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55927: LD_ADDR_VAR 0 1
55931: PUSH
55932: LD_INT 22
55934: PUSH
55935: LD_OWVAR 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 61
55946: PUSH
55947: EMPTY
55948: LIST
55949: PUSH
55950: LD_INT 33
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: PPUSH
55965: CALL_OW 69
55969: ST_TO_ADDR
// if not tmp then
55970: LD_VAR 0 1
55974: NOT
55975: IFFALSE 55979
// exit ;
55977: GO 56016
// for i in tmp do
55979: LD_ADDR_VAR 0 2
55983: PUSH
55984: LD_VAR 0 1
55988: PUSH
55989: FOR_IN
55990: IFFALSE 56014
// if IsControledBy ( i ) then
55992: LD_VAR 0 2
55996: PPUSH
55997: CALL_OW 312
56001: IFFALSE 56012
// ComUnlink ( i ) ;
56003: LD_VAR 0 2
56007: PPUSH
56008: CALL_OW 136
56012: GO 55989
56014: POP
56015: POP
// end ;
56016: PPOPN 2
56018: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56019: LD_EXP 28
56023: PUSH
56024: LD_EXP 59
56028: AND
56029: IFFALSE 56169
56031: GO 56033
56033: DISABLE
56034: LD_INT 0
56036: PPUSH
56037: PPUSH
// begin ToLua ( displayPowell(); ) ;
56038: LD_STRING displayPowell();
56040: PPUSH
56041: CALL_OW 559
// uc_side := 0 ;
56045: LD_ADDR_OWVAR 20
56049: PUSH
56050: LD_INT 0
56052: ST_TO_ADDR
// uc_nation := 2 ;
56053: LD_ADDR_OWVAR 21
56057: PUSH
56058: LD_INT 2
56060: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56061: LD_ADDR_OWVAR 37
56065: PUSH
56066: LD_INT 14
56068: ST_TO_ADDR
// vc_engine := engine_siberite ;
56069: LD_ADDR_OWVAR 39
56073: PUSH
56074: LD_INT 3
56076: ST_TO_ADDR
// vc_control := control_apeman ;
56077: LD_ADDR_OWVAR 38
56081: PUSH
56082: LD_INT 5
56084: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56085: LD_ADDR_OWVAR 40
56089: PUSH
56090: LD_INT 29
56092: ST_TO_ADDR
// un := CreateVehicle ;
56093: LD_ADDR_VAR 0 2
56097: PUSH
56098: CALL_OW 45
56102: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56103: LD_VAR 0 2
56107: PPUSH
56108: LD_INT 1
56110: PPUSH
56111: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56115: LD_INT 35
56117: PPUSH
56118: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56122: LD_VAR 0 2
56126: PPUSH
56127: LD_INT 22
56129: PUSH
56130: LD_OWVAR 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PPUSH
56139: CALL_OW 69
56143: PPUSH
56144: LD_VAR 0 2
56148: PPUSH
56149: CALL_OW 74
56153: PPUSH
56154: CALL_OW 115
// until IsDead ( un ) ;
56158: LD_VAR 0 2
56162: PPUSH
56163: CALL_OW 301
56167: IFFALSE 56115
// end ;
56169: PPOPN 2
56171: END
// every 0 0$1 trigger StreamModeActive and sStu do
56172: LD_EXP 28
56176: PUSH
56177: LD_EXP 67
56181: AND
56182: IFFALSE 56198
56184: GO 56186
56186: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56187: LD_STRING displayStucuk();
56189: PPUSH
56190: CALL_OW 559
// ResetFog ;
56194: CALL_OW 335
// end ;
56198: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56199: LD_EXP 28
56203: PUSH
56204: LD_EXP 60
56208: AND
56209: IFFALSE 56350
56211: GO 56213
56213: DISABLE
56214: LD_INT 0
56216: PPUSH
56217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56218: LD_ADDR_VAR 0 2
56222: PUSH
56223: LD_INT 22
56225: PUSH
56226: LD_OWVAR 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 21
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PPUSH
56249: CALL_OW 69
56253: ST_TO_ADDR
// if not tmp then
56254: LD_VAR 0 2
56258: NOT
56259: IFFALSE 56263
// exit ;
56261: GO 56350
// un := tmp [ rand ( 1 , tmp ) ] ;
56263: LD_ADDR_VAR 0 1
56267: PUSH
56268: LD_VAR 0 2
56272: PUSH
56273: LD_INT 1
56275: PPUSH
56276: LD_VAR 0 2
56280: PPUSH
56281: CALL_OW 12
56285: ARRAY
56286: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56287: LD_VAR 0 1
56291: PPUSH
56292: LD_INT 0
56294: PPUSH
56295: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56299: LD_VAR 0 1
56303: PPUSH
56304: LD_OWVAR 3
56308: PUSH
56309: LD_VAR 0 1
56313: DIFF
56314: PPUSH
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 74
56324: PPUSH
56325: CALL_OW 115
// wait ( 0 0$20 ) ;
56329: LD_INT 700
56331: PPUSH
56332: CALL_OW 67
// SetSide ( un , your_side ) ;
56336: LD_VAR 0 1
56340: PPUSH
56341: LD_OWVAR 2
56345: PPUSH
56346: CALL_OW 235
// end ;
56350: PPOPN 2
56352: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56353: LD_EXP 28
56357: PUSH
56358: LD_EXP 61
56362: AND
56363: IFFALSE 56469
56365: GO 56367
56367: DISABLE
56368: LD_INT 0
56370: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56371: LD_ADDR_VAR 0 1
56375: PUSH
56376: LD_INT 22
56378: PUSH
56379: LD_OWVAR 2
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 30
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 30
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PPUSH
56420: CALL_OW 69
56424: ST_TO_ADDR
// if not depot then
56425: LD_VAR 0 1
56429: NOT
56430: IFFALSE 56434
// exit ;
56432: GO 56469
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
56434: LD_VAR 0 1
56438: PUSH
56439: LD_INT 1
56441: ARRAY
56442: PPUSH
56443: CALL_OW 250
56447: PPUSH
56448: LD_VAR 0 1
56452: PUSH
56453: LD_INT 1
56455: ARRAY
56456: PPUSH
56457: CALL_OW 251
56461: PPUSH
56462: LD_INT 70
56464: PPUSH
56465: CALL_OW 495
// end ;
56469: PPOPN 1
56471: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
56472: LD_EXP 28
56476: PUSH
56477: LD_EXP 62
56481: AND
56482: IFFALSE 56693
56484: GO 56486
56486: DISABLE
56487: LD_INT 0
56489: PPUSH
56490: PPUSH
56491: PPUSH
56492: PPUSH
56493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56494: LD_ADDR_VAR 0 5
56498: PUSH
56499: LD_INT 22
56501: PUSH
56502: LD_OWVAR 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 21
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PPUSH
56525: CALL_OW 69
56529: ST_TO_ADDR
// if not tmp then
56530: LD_VAR 0 5
56534: NOT
56535: IFFALSE 56539
// exit ;
56537: GO 56693
// for i in tmp do
56539: LD_ADDR_VAR 0 1
56543: PUSH
56544: LD_VAR 0 5
56548: PUSH
56549: FOR_IN
56550: IFFALSE 56691
// begin d := rand ( 0 , 5 ) ;
56552: LD_ADDR_VAR 0 4
56556: PUSH
56557: LD_INT 0
56559: PPUSH
56560: LD_INT 5
56562: PPUSH
56563: CALL_OW 12
56567: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
56568: LD_ADDR_VAR 0 2
56572: PUSH
56573: LD_VAR 0 1
56577: PPUSH
56578: CALL_OW 250
56582: PPUSH
56583: LD_VAR 0 4
56587: PPUSH
56588: LD_INT 3
56590: PPUSH
56591: LD_INT 12
56593: PPUSH
56594: CALL_OW 12
56598: PPUSH
56599: CALL_OW 272
56603: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
56604: LD_ADDR_VAR 0 3
56608: PUSH
56609: LD_VAR 0 1
56613: PPUSH
56614: CALL_OW 251
56618: PPUSH
56619: LD_VAR 0 4
56623: PPUSH
56624: LD_INT 3
56626: PPUSH
56627: LD_INT 12
56629: PPUSH
56630: CALL_OW 12
56634: PPUSH
56635: CALL_OW 273
56639: ST_TO_ADDR
// if ValidHex ( x , y ) then
56640: LD_VAR 0 2
56644: PPUSH
56645: LD_VAR 0 3
56649: PPUSH
56650: CALL_OW 488
56654: IFFALSE 56689
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56656: LD_VAR 0 1
56660: PPUSH
56661: LD_VAR 0 2
56665: PPUSH
56666: LD_VAR 0 3
56670: PPUSH
56671: LD_INT 3
56673: PPUSH
56674: LD_INT 6
56676: PPUSH
56677: CALL_OW 12
56681: PPUSH
56682: LD_INT 1
56684: PPUSH
56685: CALL_OW 483
// end ;
56689: GO 56549
56691: POP
56692: POP
// end ;
56693: PPOPN 5
56695: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56696: LD_EXP 28
56700: PUSH
56701: LD_EXP 63
56705: AND
56706: IFFALSE 56800
56708: GO 56710
56710: DISABLE
56711: LD_INT 0
56713: PPUSH
56714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56715: LD_ADDR_VAR 0 2
56719: PUSH
56720: LD_INT 22
56722: PUSH
56723: LD_OWVAR 2
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 32
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 21
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: PPUSH
56757: CALL_OW 69
56761: ST_TO_ADDR
// if not tmp then
56762: LD_VAR 0 2
56766: NOT
56767: IFFALSE 56771
// exit ;
56769: GO 56800
// for i in tmp do
56771: LD_ADDR_VAR 0 1
56775: PUSH
56776: LD_VAR 0 2
56780: PUSH
56781: FOR_IN
56782: IFFALSE 56798
// SetFuel ( i , 0 ) ;
56784: LD_VAR 0 1
56788: PPUSH
56789: LD_INT 0
56791: PPUSH
56792: CALL_OW 240
56796: GO 56781
56798: POP
56799: POP
// end ;
56800: PPOPN 2
56802: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56803: LD_EXP 28
56807: PUSH
56808: LD_EXP 64
56812: AND
56813: IFFALSE 56879
56815: GO 56817
56817: DISABLE
56818: LD_INT 0
56820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56821: LD_ADDR_VAR 0 1
56825: PUSH
56826: LD_INT 22
56828: PUSH
56829: LD_OWVAR 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 30
56840: PUSH
56841: LD_INT 29
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PPUSH
56852: CALL_OW 69
56856: ST_TO_ADDR
// if not tmp then
56857: LD_VAR 0 1
56861: NOT
56862: IFFALSE 56866
// exit ;
56864: GO 56879
// DestroyUnit ( tmp [ 1 ] ) ;
56866: LD_VAR 0 1
56870: PUSH
56871: LD_INT 1
56873: ARRAY
56874: PPUSH
56875: CALL_OW 65
// end ;
56879: PPOPN 1
56881: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56882: LD_EXP 28
56886: PUSH
56887: LD_EXP 66
56891: AND
56892: IFFALSE 57021
56894: GO 56896
56896: DISABLE
56897: LD_INT 0
56899: PPUSH
// begin uc_side := 0 ;
56900: LD_ADDR_OWVAR 20
56904: PUSH
56905: LD_INT 0
56907: ST_TO_ADDR
// uc_nation := nation_arabian ;
56908: LD_ADDR_OWVAR 21
56912: PUSH
56913: LD_INT 2
56915: ST_TO_ADDR
// hc_gallery :=  ;
56916: LD_ADDR_OWVAR 33
56920: PUSH
56921: LD_STRING 
56923: ST_TO_ADDR
// hc_name :=  ;
56924: LD_ADDR_OWVAR 26
56928: PUSH
56929: LD_STRING 
56931: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56932: LD_INT 1
56934: PPUSH
56935: LD_INT 11
56937: PPUSH
56938: LD_INT 10
56940: PPUSH
56941: CALL_OW 380
// un := CreateHuman ;
56945: LD_ADDR_VAR 0 1
56949: PUSH
56950: CALL_OW 44
56954: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56955: LD_VAR 0 1
56959: PPUSH
56960: LD_INT 1
56962: PPUSH
56963: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56967: LD_INT 35
56969: PPUSH
56970: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56974: LD_VAR 0 1
56978: PPUSH
56979: LD_INT 22
56981: PUSH
56982: LD_OWVAR 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PPUSH
56991: CALL_OW 69
56995: PPUSH
56996: LD_VAR 0 1
57000: PPUSH
57001: CALL_OW 74
57005: PPUSH
57006: CALL_OW 115
// until IsDead ( un ) ;
57010: LD_VAR 0 1
57014: PPUSH
57015: CALL_OW 301
57019: IFFALSE 56967
// end ;
57021: PPOPN 1
57023: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57024: LD_EXP 28
57028: PUSH
57029: LD_EXP 68
57033: AND
57034: IFFALSE 57046
57036: GO 57038
57038: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57039: LD_STRING earthquake(getX(game), 0, 32)
57041: PPUSH
57042: CALL_OW 559
57046: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57047: LD_EXP 28
57051: PUSH
57052: LD_EXP 69
57056: AND
57057: IFFALSE 57148
57059: GO 57061
57061: DISABLE
57062: LD_INT 0
57064: PPUSH
// begin enable ;
57065: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57066: LD_ADDR_VAR 0 1
57070: PUSH
57071: LD_INT 22
57073: PUSH
57074: LD_OWVAR 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 21
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 33
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: PPUSH
57108: CALL_OW 69
57112: ST_TO_ADDR
// if not tmp then
57113: LD_VAR 0 1
57117: NOT
57118: IFFALSE 57122
// exit ;
57120: GO 57148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57122: LD_VAR 0 1
57126: PUSH
57127: LD_INT 1
57129: PPUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 12
57139: ARRAY
57140: PPUSH
57141: LD_INT 1
57143: PPUSH
57144: CALL_OW 234
// end ;
57148: PPOPN 1
57150: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57151: LD_EXP 28
57155: PUSH
57156: LD_EXP 70
57160: AND
57161: IFFALSE 57302
57163: GO 57165
57165: DISABLE
57166: LD_INT 0
57168: PPUSH
57169: PPUSH
57170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57171: LD_ADDR_VAR 0 3
57175: PUSH
57176: LD_INT 22
57178: PUSH
57179: LD_OWVAR 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 25
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PPUSH
57202: CALL_OW 69
57206: ST_TO_ADDR
// if not tmp then
57207: LD_VAR 0 3
57211: NOT
57212: IFFALSE 57216
// exit ;
57214: GO 57302
// un := tmp [ rand ( 1 , tmp ) ] ;
57216: LD_ADDR_VAR 0 2
57220: PUSH
57221: LD_VAR 0 3
57225: PUSH
57226: LD_INT 1
57228: PPUSH
57229: LD_VAR 0 3
57233: PPUSH
57234: CALL_OW 12
57238: ARRAY
57239: ST_TO_ADDR
// if Crawls ( un ) then
57240: LD_VAR 0 2
57244: PPUSH
57245: CALL_OW 318
57249: IFFALSE 57260
// ComWalk ( un ) ;
57251: LD_VAR 0 2
57255: PPUSH
57256: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57260: LD_VAR 0 2
57264: PPUSH
57265: LD_INT 9
57267: PPUSH
57268: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57272: LD_INT 28
57274: PPUSH
57275: LD_OWVAR 2
57279: PPUSH
57280: LD_INT 2
57282: PPUSH
57283: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57287: LD_INT 29
57289: PPUSH
57290: LD_OWVAR 2
57294: PPUSH
57295: LD_INT 2
57297: PPUSH
57298: CALL_OW 322
// end ;
57302: PPOPN 3
57304: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57305: LD_EXP 28
57309: PUSH
57310: LD_EXP 71
57314: AND
57315: IFFALSE 57426
57317: GO 57319
57319: DISABLE
57320: LD_INT 0
57322: PPUSH
57323: PPUSH
57324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57325: LD_ADDR_VAR 0 3
57329: PUSH
57330: LD_INT 22
57332: PUSH
57333: LD_OWVAR 2
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 25
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PPUSH
57356: CALL_OW 69
57360: ST_TO_ADDR
// if not tmp then
57361: LD_VAR 0 3
57365: NOT
57366: IFFALSE 57370
// exit ;
57368: GO 57426
// un := tmp [ rand ( 1 , tmp ) ] ;
57370: LD_ADDR_VAR 0 2
57374: PUSH
57375: LD_VAR 0 3
57379: PUSH
57380: LD_INT 1
57382: PPUSH
57383: LD_VAR 0 3
57387: PPUSH
57388: CALL_OW 12
57392: ARRAY
57393: ST_TO_ADDR
// if Crawls ( un ) then
57394: LD_VAR 0 2
57398: PPUSH
57399: CALL_OW 318
57403: IFFALSE 57414
// ComWalk ( un ) ;
57405: LD_VAR 0 2
57409: PPUSH
57410: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57414: LD_VAR 0 2
57418: PPUSH
57419: LD_INT 8
57421: PPUSH
57422: CALL_OW 336
// end ;
57426: PPOPN 3
57428: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
57429: LD_EXP 28
57433: PUSH
57434: LD_EXP 72
57438: AND
57439: IFFALSE 57583
57441: GO 57443
57443: DISABLE
57444: LD_INT 0
57446: PPUSH
57447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
57448: LD_ADDR_VAR 0 2
57452: PUSH
57453: LD_INT 22
57455: PUSH
57456: LD_OWVAR 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 21
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: LD_INT 34
57480: PUSH
57481: LD_INT 12
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 34
57490: PUSH
57491: LD_INT 51
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 34
57500: PUSH
57501: LD_INT 32
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: PPUSH
57519: CALL_OW 69
57523: ST_TO_ADDR
// if not tmp then
57524: LD_VAR 0 2
57528: NOT
57529: IFFALSE 57533
// exit ;
57531: GO 57583
// for i in tmp do
57533: LD_ADDR_VAR 0 1
57537: PUSH
57538: LD_VAR 0 2
57542: PUSH
57543: FOR_IN
57544: IFFALSE 57581
// if GetCargo ( i , mat_artifact ) = 0 then
57546: LD_VAR 0 1
57550: PPUSH
57551: LD_INT 4
57553: PPUSH
57554: CALL_OW 289
57558: PUSH
57559: LD_INT 0
57561: EQUAL
57562: IFFALSE 57579
// SetCargo ( i , mat_siberit , 100 ) ;
57564: LD_VAR 0 1
57568: PPUSH
57569: LD_INT 3
57571: PPUSH
57572: LD_INT 100
57574: PPUSH
57575: CALL_OW 290
57579: GO 57543
57581: POP
57582: POP
// end ;
57583: PPOPN 2
57585: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
57586: LD_EXP 28
57590: PUSH
57591: LD_EXP 73
57595: AND
57596: IFFALSE 57779
57598: GO 57600
57600: DISABLE
57601: LD_INT 0
57603: PPUSH
57604: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57605: LD_ADDR_VAR 0 2
57609: PUSH
57610: LD_INT 22
57612: PUSH
57613: LD_OWVAR 2
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PPUSH
57622: CALL_OW 69
57626: ST_TO_ADDR
// if not tmp then
57627: LD_VAR 0 2
57631: NOT
57632: IFFALSE 57636
// exit ;
57634: GO 57779
// for i := 1 to 2 do
57636: LD_ADDR_VAR 0 1
57640: PUSH
57641: DOUBLE
57642: LD_INT 1
57644: DEC
57645: ST_TO_ADDR
57646: LD_INT 2
57648: PUSH
57649: FOR_TO
57650: IFFALSE 57777
// begin uc_side := your_side ;
57652: LD_ADDR_OWVAR 20
57656: PUSH
57657: LD_OWVAR 2
57661: ST_TO_ADDR
// uc_nation := nation_american ;
57662: LD_ADDR_OWVAR 21
57666: PUSH
57667: LD_INT 1
57669: ST_TO_ADDR
// vc_chassis := us_morphling ;
57670: LD_ADDR_OWVAR 37
57674: PUSH
57675: LD_INT 5
57677: ST_TO_ADDR
// vc_engine := engine_siberite ;
57678: LD_ADDR_OWVAR 39
57682: PUSH
57683: LD_INT 3
57685: ST_TO_ADDR
// vc_control := control_computer ;
57686: LD_ADDR_OWVAR 38
57690: PUSH
57691: LD_INT 3
57693: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57694: LD_ADDR_OWVAR 40
57698: PUSH
57699: LD_INT 10
57701: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57702: LD_VAR 0 2
57706: PUSH
57707: LD_INT 1
57709: ARRAY
57710: PPUSH
57711: CALL_OW 310
57715: NOT
57716: IFFALSE 57763
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57718: CALL_OW 45
57722: PPUSH
57723: LD_VAR 0 2
57727: PUSH
57728: LD_INT 1
57730: ARRAY
57731: PPUSH
57732: CALL_OW 250
57736: PPUSH
57737: LD_VAR 0 2
57741: PUSH
57742: LD_INT 1
57744: ARRAY
57745: PPUSH
57746: CALL_OW 251
57750: PPUSH
57751: LD_INT 12
57753: PPUSH
57754: LD_INT 1
57756: PPUSH
57757: CALL_OW 50
57761: GO 57775
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57763: CALL_OW 45
57767: PPUSH
57768: LD_INT 1
57770: PPUSH
57771: CALL_OW 51
// end ;
57775: GO 57649
57777: POP
57778: POP
// end ;
57779: PPOPN 2
57781: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57782: LD_EXP 28
57786: PUSH
57787: LD_EXP 74
57791: AND
57792: IFFALSE 58014
57794: GO 57796
57796: DISABLE
57797: LD_INT 0
57799: PPUSH
57800: PPUSH
57801: PPUSH
57802: PPUSH
57803: PPUSH
57804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57805: LD_ADDR_VAR 0 6
57809: PUSH
57810: LD_INT 22
57812: PUSH
57813: LD_OWVAR 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 21
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: LD_INT 23
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: PPUSH
57854: CALL_OW 69
57858: ST_TO_ADDR
// if not tmp then
57859: LD_VAR 0 6
57863: NOT
57864: IFFALSE 57868
// exit ;
57866: GO 58014
// s1 := rand ( 1 , 4 ) ;
57868: LD_ADDR_VAR 0 2
57872: PUSH
57873: LD_INT 1
57875: PPUSH
57876: LD_INT 4
57878: PPUSH
57879: CALL_OW 12
57883: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57884: LD_ADDR_VAR 0 4
57888: PUSH
57889: LD_VAR 0 6
57893: PUSH
57894: LD_INT 1
57896: ARRAY
57897: PPUSH
57898: LD_VAR 0 2
57902: PPUSH
57903: CALL_OW 259
57907: ST_TO_ADDR
// if s1 = 1 then
57908: LD_VAR 0 2
57912: PUSH
57913: LD_INT 1
57915: EQUAL
57916: IFFALSE 57936
// s2 := rand ( 2 , 4 ) else
57918: LD_ADDR_VAR 0 3
57922: PUSH
57923: LD_INT 2
57925: PPUSH
57926: LD_INT 4
57928: PPUSH
57929: CALL_OW 12
57933: ST_TO_ADDR
57934: GO 57944
// s2 := 1 ;
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: LD_INT 1
57943: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57944: LD_ADDR_VAR 0 5
57948: PUSH
57949: LD_VAR 0 6
57953: PUSH
57954: LD_INT 1
57956: ARRAY
57957: PPUSH
57958: LD_VAR 0 3
57962: PPUSH
57963: CALL_OW 259
57967: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57968: LD_VAR 0 6
57972: PUSH
57973: LD_INT 1
57975: ARRAY
57976: PPUSH
57977: LD_VAR 0 2
57981: PPUSH
57982: LD_VAR 0 5
57986: PPUSH
57987: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57991: LD_VAR 0 6
57995: PUSH
57996: LD_INT 1
57998: ARRAY
57999: PPUSH
58000: LD_VAR 0 3
58004: PPUSH
58005: LD_VAR 0 4
58009: PPUSH
58010: CALL_OW 237
// end ;
58014: PPOPN 6
58016: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58017: LD_EXP 28
58021: PUSH
58022: LD_EXP 75
58026: AND
58027: IFFALSE 58106
58029: GO 58031
58031: DISABLE
58032: LD_INT 0
58034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58035: LD_ADDR_VAR 0 1
58039: PUSH
58040: LD_INT 22
58042: PUSH
58043: LD_OWVAR 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 30
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PPUSH
58066: CALL_OW 69
58070: ST_TO_ADDR
// if not tmp then
58071: LD_VAR 0 1
58075: NOT
58076: IFFALSE 58080
// exit ;
58078: GO 58106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58080: LD_VAR 0 1
58084: PUSH
58085: LD_INT 1
58087: PPUSH
58088: LD_VAR 0 1
58092: PPUSH
58093: CALL_OW 12
58097: ARRAY
58098: PPUSH
58099: LD_INT 1
58101: PPUSH
58102: CALL_OW 234
// end ;
58106: PPOPN 1
58108: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58109: LD_EXP 28
58113: PUSH
58114: LD_EXP 76
58118: AND
58119: IFFALSE 58231
58121: GO 58123
58123: DISABLE
58124: LD_INT 0
58126: PPUSH
58127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58128: LD_ADDR_VAR 0 2
58132: PUSH
58133: LD_INT 22
58135: PUSH
58136: LD_OWVAR 2
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: LD_INT 30
58150: PUSH
58151: LD_INT 27
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 30
58160: PUSH
58161: LD_INT 26
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 30
58170: PUSH
58171: LD_INT 28
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PPUSH
58188: CALL_OW 69
58192: ST_TO_ADDR
// if not tmp then
58193: LD_VAR 0 2
58197: NOT
58198: IFFALSE 58202
// exit ;
58200: GO 58231
// for i in tmp do
58202: LD_ADDR_VAR 0 1
58206: PUSH
58207: LD_VAR 0 2
58211: PUSH
58212: FOR_IN
58213: IFFALSE 58229
// SetLives ( i , 1 ) ;
58215: LD_VAR 0 1
58219: PPUSH
58220: LD_INT 1
58222: PPUSH
58223: CALL_OW 234
58227: GO 58212
58229: POP
58230: POP
// end ;
58231: PPOPN 2
58233: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58234: LD_EXP 28
58238: PUSH
58239: LD_EXP 77
58243: AND
58244: IFFALSE 58531
58246: GO 58248
58248: DISABLE
58249: LD_INT 0
58251: PPUSH
58252: PPUSH
58253: PPUSH
// begin i := rand ( 1 , 7 ) ;
58254: LD_ADDR_VAR 0 1
58258: PUSH
58259: LD_INT 1
58261: PPUSH
58262: LD_INT 7
58264: PPUSH
58265: CALL_OW 12
58269: ST_TO_ADDR
// case i of 1 :
58270: LD_VAR 0 1
58274: PUSH
58275: LD_INT 1
58277: DOUBLE
58278: EQUAL
58279: IFTRUE 58283
58281: GO 58293
58283: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58284: LD_STRING earthquake(getX(game), 0, 32)
58286: PPUSH
58287: CALL_OW 559
58291: GO 58531
58293: LD_INT 2
58295: DOUBLE
58296: EQUAL
58297: IFTRUE 58301
58299: GO 58315
58301: POP
// begin ToLua ( displayStucuk(); ) ;
58302: LD_STRING displayStucuk();
58304: PPUSH
58305: CALL_OW 559
// ResetFog ;
58309: CALL_OW 335
// end ; 3 :
58313: GO 58531
58315: LD_INT 3
58317: DOUBLE
58318: EQUAL
58319: IFTRUE 58323
58321: GO 58427
58323: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58324: LD_ADDR_VAR 0 2
58328: PUSH
58329: LD_INT 22
58331: PUSH
58332: LD_OWVAR 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 25
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PPUSH
58355: CALL_OW 69
58359: ST_TO_ADDR
// if not tmp then
58360: LD_VAR 0 2
58364: NOT
58365: IFFALSE 58369
// exit ;
58367: GO 58531
// un := tmp [ rand ( 1 , tmp ) ] ;
58369: LD_ADDR_VAR 0 3
58373: PUSH
58374: LD_VAR 0 2
58378: PUSH
58379: LD_INT 1
58381: PPUSH
58382: LD_VAR 0 2
58386: PPUSH
58387: CALL_OW 12
58391: ARRAY
58392: ST_TO_ADDR
// if Crawls ( un ) then
58393: LD_VAR 0 3
58397: PPUSH
58398: CALL_OW 318
58402: IFFALSE 58413
// ComWalk ( un ) ;
58404: LD_VAR 0 3
58408: PPUSH
58409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58413: LD_VAR 0 3
58417: PPUSH
58418: LD_INT 8
58420: PPUSH
58421: CALL_OW 336
// end ; 4 :
58425: GO 58531
58427: LD_INT 4
58429: DOUBLE
58430: EQUAL
58431: IFTRUE 58435
58433: GO 58509
58435: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58436: LD_ADDR_VAR 0 2
58440: PUSH
58441: LD_INT 22
58443: PUSH
58444: LD_OWVAR 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 30
58455: PUSH
58456: LD_INT 29
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PPUSH
58467: CALL_OW 69
58471: ST_TO_ADDR
// if not tmp then
58472: LD_VAR 0 2
58476: NOT
58477: IFFALSE 58481
// exit ;
58479: GO 58531
// CenterNowOnUnits ( tmp [ 1 ] ) ;
58481: LD_VAR 0 2
58485: PUSH
58486: LD_INT 1
58488: ARRAY
58489: PPUSH
58490: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
58494: LD_VAR 0 2
58498: PUSH
58499: LD_INT 1
58501: ARRAY
58502: PPUSH
58503: CALL_OW 65
// end ; 5 .. 7 :
58507: GO 58531
58509: LD_INT 5
58511: DOUBLE
58512: GREATEREQUAL
58513: IFFALSE 58521
58515: LD_INT 7
58517: DOUBLE
58518: LESSEQUAL
58519: IFTRUE 58523
58521: GO 58530
58523: POP
// StreamSibBomb ; end ;
58524: CALL 54768 0 0
58528: GO 58531
58530: POP
// end ;
58531: PPOPN 3
58533: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
58534: LD_EXP 28
58538: PUSH
58539: LD_EXP 78
58543: AND
58544: IFFALSE 58700
58546: GO 58548
58548: DISABLE
58549: LD_INT 0
58551: PPUSH
58552: PPUSH
58553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
58554: LD_ADDR_VAR 0 2
58558: PUSH
58559: LD_INT 81
58561: PUSH
58562: LD_OWVAR 2
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: LD_INT 21
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 21
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: LIST
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PPUSH
58603: CALL_OW 69
58607: ST_TO_ADDR
// if not tmp then
58608: LD_VAR 0 2
58612: NOT
58613: IFFALSE 58617
// exit ;
58615: GO 58700
// p := 0 ;
58617: LD_ADDR_VAR 0 3
58621: PUSH
58622: LD_INT 0
58624: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58625: LD_INT 35
58627: PPUSH
58628: CALL_OW 67
// p := p + 1 ;
58632: LD_ADDR_VAR 0 3
58636: PUSH
58637: LD_VAR 0 3
58641: PUSH
58642: LD_INT 1
58644: PLUS
58645: ST_TO_ADDR
// for i in tmp do
58646: LD_ADDR_VAR 0 1
58650: PUSH
58651: LD_VAR 0 2
58655: PUSH
58656: FOR_IN
58657: IFFALSE 58688
// if GetLives ( i ) < 1000 then
58659: LD_VAR 0 1
58663: PPUSH
58664: CALL_OW 256
58668: PUSH
58669: LD_INT 1000
58671: LESS
58672: IFFALSE 58686
// SetLives ( i , 1000 ) ;
58674: LD_VAR 0 1
58678: PPUSH
58679: LD_INT 1000
58681: PPUSH
58682: CALL_OW 234
58686: GO 58656
58688: POP
58689: POP
// until p > 20 ;
58690: LD_VAR 0 3
58694: PUSH
58695: LD_INT 20
58697: GREATER
58698: IFFALSE 58625
// end ;
58700: PPOPN 3
58702: END
// every 0 0$1 trigger StreamModeActive and sTime do
58703: LD_EXP 28
58707: PUSH
58708: LD_EXP 79
58712: AND
58713: IFFALSE 58748
58715: GO 58717
58717: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58718: LD_INT 28
58720: PPUSH
58721: LD_OWVAR 2
58725: PPUSH
58726: LD_INT 2
58728: PPUSH
58729: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58733: LD_INT 30
58735: PPUSH
58736: LD_OWVAR 2
58740: PPUSH
58741: LD_INT 2
58743: PPUSH
58744: CALL_OW 322
// end ;
58748: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58749: LD_EXP 28
58753: PUSH
58754: LD_EXP 80
58758: AND
58759: IFFALSE 58880
58761: GO 58763
58763: DISABLE
58764: LD_INT 0
58766: PPUSH
58767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58768: LD_ADDR_VAR 0 2
58772: PUSH
58773: LD_INT 22
58775: PUSH
58776: LD_OWVAR 2
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 21
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: LD_INT 23
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: LIST
58816: PPUSH
58817: CALL_OW 69
58821: ST_TO_ADDR
// if not tmp then
58822: LD_VAR 0 2
58826: NOT
58827: IFFALSE 58831
// exit ;
58829: GO 58880
// for i in tmp do
58831: LD_ADDR_VAR 0 1
58835: PUSH
58836: LD_VAR 0 2
58840: PUSH
58841: FOR_IN
58842: IFFALSE 58878
// begin if Crawls ( i ) then
58844: LD_VAR 0 1
58848: PPUSH
58849: CALL_OW 318
58853: IFFALSE 58864
// ComWalk ( i ) ;
58855: LD_VAR 0 1
58859: PPUSH
58860: CALL_OW 138
// SetClass ( i , 2 ) ;
58864: LD_VAR 0 1
58868: PPUSH
58869: LD_INT 2
58871: PPUSH
58872: CALL_OW 336
// end ;
58876: GO 58841
58878: POP
58879: POP
// end ;
58880: PPOPN 2
58882: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58883: LD_EXP 28
58887: PUSH
58888: LD_EXP 81
58892: AND
58893: IFFALSE 59181
58895: GO 58897
58897: DISABLE
58898: LD_INT 0
58900: PPUSH
58901: PPUSH
58902: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58903: LD_OWVAR 2
58907: PPUSH
58908: LD_INT 9
58910: PPUSH
58911: LD_INT 1
58913: PPUSH
58914: LD_INT 1
58916: PPUSH
58917: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58921: LD_INT 9
58923: PPUSH
58924: LD_OWVAR 2
58928: PPUSH
58929: CALL_OW 343
// uc_side := 9 ;
58933: LD_ADDR_OWVAR 20
58937: PUSH
58938: LD_INT 9
58940: ST_TO_ADDR
// uc_nation := 2 ;
58941: LD_ADDR_OWVAR 21
58945: PUSH
58946: LD_INT 2
58948: ST_TO_ADDR
// hc_name := Dark Warrior ;
58949: LD_ADDR_OWVAR 26
58953: PUSH
58954: LD_STRING Dark Warrior
58956: ST_TO_ADDR
// hc_gallery :=  ;
58957: LD_ADDR_OWVAR 33
58961: PUSH
58962: LD_STRING 
58964: ST_TO_ADDR
// hc_noskilllimit := true ;
58965: LD_ADDR_OWVAR 76
58969: PUSH
58970: LD_INT 1
58972: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58973: LD_ADDR_OWVAR 31
58977: PUSH
58978: LD_INT 30
58980: PUSH
58981: LD_INT 30
58983: PUSH
58984: LD_INT 30
58986: PUSH
58987: LD_INT 30
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: ST_TO_ADDR
// un := CreateHuman ;
58996: LD_ADDR_VAR 0 3
59000: PUSH
59001: CALL_OW 44
59005: ST_TO_ADDR
// hc_noskilllimit := false ;
59006: LD_ADDR_OWVAR 76
59010: PUSH
59011: LD_INT 0
59013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59014: LD_VAR 0 3
59018: PPUSH
59019: LD_INT 1
59021: PPUSH
59022: CALL_OW 51
// ToLua ( playRanger() ) ;
59026: LD_STRING playRanger()
59028: PPUSH
59029: CALL_OW 559
// p := 0 ;
59033: LD_ADDR_VAR 0 2
59037: PUSH
59038: LD_INT 0
59040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59041: LD_INT 35
59043: PPUSH
59044: CALL_OW 67
// p := p + 1 ;
59048: LD_ADDR_VAR 0 2
59052: PUSH
59053: LD_VAR 0 2
59057: PUSH
59058: LD_INT 1
59060: PLUS
59061: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59062: LD_VAR 0 3
59066: PPUSH
59067: CALL_OW 256
59071: PUSH
59072: LD_INT 1000
59074: LESS
59075: IFFALSE 59089
// SetLives ( un , 1000 ) ;
59077: LD_VAR 0 3
59081: PPUSH
59082: LD_INT 1000
59084: PPUSH
59085: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59089: LD_VAR 0 3
59093: PPUSH
59094: LD_INT 81
59096: PUSH
59097: LD_OWVAR 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 91
59108: PUSH
59109: LD_VAR 0 3
59113: PUSH
59114: LD_INT 30
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PPUSH
59126: CALL_OW 69
59130: PPUSH
59131: LD_VAR 0 3
59135: PPUSH
59136: CALL_OW 74
59140: PPUSH
59141: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59145: LD_VAR 0 2
59149: PUSH
59150: LD_INT 80
59152: GREATER
59153: PUSH
59154: LD_VAR 0 3
59158: PPUSH
59159: CALL_OW 301
59163: OR
59164: IFFALSE 59041
// if un then
59166: LD_VAR 0 3
59170: IFFALSE 59181
// RemoveUnit ( un ) ;
59172: LD_VAR 0 3
59176: PPUSH
59177: CALL_OW 64
// end ;
59181: PPOPN 3
59183: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59184: LD_EXP 82
59188: IFFALSE 59304
59190: GO 59192
59192: DISABLE
59193: LD_INT 0
59195: PPUSH
59196: PPUSH
59197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59198: LD_ADDR_VAR 0 2
59202: PUSH
59203: LD_INT 81
59205: PUSH
59206: LD_OWVAR 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 21
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PPUSH
59229: CALL_OW 69
59233: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59234: LD_STRING playComputer()
59236: PPUSH
59237: CALL_OW 559
// if not tmp then
59241: LD_VAR 0 2
59245: NOT
59246: IFFALSE 59250
// exit ;
59248: GO 59304
// for i in tmp do
59250: LD_ADDR_VAR 0 1
59254: PUSH
59255: LD_VAR 0 2
59259: PUSH
59260: FOR_IN
59261: IFFALSE 59302
// for j := 1 to 4 do
59263: LD_ADDR_VAR 0 3
59267: PUSH
59268: DOUBLE
59269: LD_INT 1
59271: DEC
59272: ST_TO_ADDR
59273: LD_INT 4
59275: PUSH
59276: FOR_TO
59277: IFFALSE 59298
// SetSkill ( i , j , 10 ) ;
59279: LD_VAR 0 1
59283: PPUSH
59284: LD_VAR 0 3
59288: PPUSH
59289: LD_INT 10
59291: PPUSH
59292: CALL_OW 237
59296: GO 59276
59298: POP
59299: POP
59300: GO 59260
59302: POP
59303: POP
// end ;
59304: PPOPN 3
59306: END
// every 0 0$1 trigger s30 do var i , tmp ;
59307: LD_EXP 83
59311: IFFALSE 59380
59313: GO 59315
59315: DISABLE
59316: LD_INT 0
59318: PPUSH
59319: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59320: LD_ADDR_VAR 0 2
59324: PUSH
59325: LD_INT 22
59327: PUSH
59328: LD_OWVAR 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PPUSH
59337: CALL_OW 69
59341: ST_TO_ADDR
// if not tmp then
59342: LD_VAR 0 2
59346: NOT
59347: IFFALSE 59351
// exit ;
59349: GO 59380
// for i in tmp do
59351: LD_ADDR_VAR 0 1
59355: PUSH
59356: LD_VAR 0 2
59360: PUSH
59361: FOR_IN
59362: IFFALSE 59378
// SetLives ( i , 300 ) ;
59364: LD_VAR 0 1
59368: PPUSH
59369: LD_INT 300
59371: PPUSH
59372: CALL_OW 234
59376: GO 59361
59378: POP
59379: POP
// end ;
59380: PPOPN 2
59382: END
// every 0 0$1 trigger s60 do var i , tmp ;
59383: LD_EXP 84
59387: IFFALSE 59456
59389: GO 59391
59391: DISABLE
59392: LD_INT 0
59394: PPUSH
59395: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59396: LD_ADDR_VAR 0 2
59400: PUSH
59401: LD_INT 22
59403: PUSH
59404: LD_OWVAR 2
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PPUSH
59413: CALL_OW 69
59417: ST_TO_ADDR
// if not tmp then
59418: LD_VAR 0 2
59422: NOT
59423: IFFALSE 59427
// exit ;
59425: GO 59456
// for i in tmp do
59427: LD_ADDR_VAR 0 1
59431: PUSH
59432: LD_VAR 0 2
59436: PUSH
59437: FOR_IN
59438: IFFALSE 59454
// SetLives ( i , 600 ) ;
59440: LD_VAR 0 1
59444: PPUSH
59445: LD_INT 600
59447: PPUSH
59448: CALL_OW 234
59452: GO 59437
59454: POP
59455: POP
// end ;
59456: PPOPN 2
59458: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59459: LD_INT 0
59461: PPUSH
// case cmd of 301 :
59462: LD_VAR 0 1
59466: PUSH
59467: LD_INT 301
59469: DOUBLE
59470: EQUAL
59471: IFTRUE 59475
59473: GO 59507
59475: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
59476: LD_VAR 0 6
59480: PPUSH
59481: LD_VAR 0 7
59485: PPUSH
59486: LD_VAR 0 8
59490: PPUSH
59491: LD_VAR 0 4
59495: PPUSH
59496: LD_VAR 0 5
59500: PPUSH
59501: CALL 60716 0 5
59505: GO 59628
59507: LD_INT 302
59509: DOUBLE
59510: EQUAL
59511: IFTRUE 59515
59513: GO 59552
59515: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
59516: LD_VAR 0 6
59520: PPUSH
59521: LD_VAR 0 7
59525: PPUSH
59526: LD_VAR 0 8
59530: PPUSH
59531: LD_VAR 0 9
59535: PPUSH
59536: LD_VAR 0 4
59540: PPUSH
59541: LD_VAR 0 5
59545: PPUSH
59546: CALL 60807 0 6
59550: GO 59628
59552: LD_INT 303
59554: DOUBLE
59555: EQUAL
59556: IFTRUE 59560
59558: GO 59597
59560: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
59561: LD_VAR 0 6
59565: PPUSH
59566: LD_VAR 0 7
59570: PPUSH
59571: LD_VAR 0 8
59575: PPUSH
59576: LD_VAR 0 9
59580: PPUSH
59581: LD_VAR 0 4
59585: PPUSH
59586: LD_VAR 0 5
59590: PPUSH
59591: CALL 59633 0 6
59595: GO 59628
59597: LD_INT 304
59599: DOUBLE
59600: EQUAL
59601: IFTRUE 59605
59603: GO 59627
59605: POP
// hHackTeleport ( unit , x , y ) ; end ;
59606: LD_VAR 0 2
59610: PPUSH
59611: LD_VAR 0 4
59615: PPUSH
59616: LD_VAR 0 5
59620: PPUSH
59621: CALL 61400 0 3
59625: GO 59628
59627: POP
// end ;
59628: LD_VAR 0 12
59632: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
59633: LD_INT 0
59635: PPUSH
59636: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
59637: LD_VAR 0 1
59641: PUSH
59642: LD_INT 1
59644: LESS
59645: PUSH
59646: LD_VAR 0 1
59650: PUSH
59651: LD_INT 3
59653: GREATER
59654: OR
59655: PUSH
59656: LD_VAR 0 5
59660: PPUSH
59661: LD_VAR 0 6
59665: PPUSH
59666: CALL_OW 428
59670: OR
59671: IFFALSE 59675
// exit ;
59673: GO 60403
// uc_side := your_side ;
59675: LD_ADDR_OWVAR 20
59679: PUSH
59680: LD_OWVAR 2
59684: ST_TO_ADDR
// uc_nation := nation ;
59685: LD_ADDR_OWVAR 21
59689: PUSH
59690: LD_VAR 0 1
59694: ST_TO_ADDR
// bc_level = 1 ;
59695: LD_ADDR_OWVAR 43
59699: PUSH
59700: LD_INT 1
59702: ST_TO_ADDR
// case btype of 1 :
59703: LD_VAR 0 2
59707: PUSH
59708: LD_INT 1
59710: DOUBLE
59711: EQUAL
59712: IFTRUE 59716
59714: GO 59727
59716: POP
// bc_type := b_depot ; 2 :
59717: LD_ADDR_OWVAR 42
59721: PUSH
59722: LD_INT 0
59724: ST_TO_ADDR
59725: GO 60347
59727: LD_INT 2
59729: DOUBLE
59730: EQUAL
59731: IFTRUE 59735
59733: GO 59746
59735: POP
// bc_type := b_warehouse ; 3 :
59736: LD_ADDR_OWVAR 42
59740: PUSH
59741: LD_INT 1
59743: ST_TO_ADDR
59744: GO 60347
59746: LD_INT 3
59748: DOUBLE
59749: EQUAL
59750: IFTRUE 59754
59752: GO 59765
59754: POP
// bc_type := b_lab ; 4 .. 9 :
59755: LD_ADDR_OWVAR 42
59759: PUSH
59760: LD_INT 6
59762: ST_TO_ADDR
59763: GO 60347
59765: LD_INT 4
59767: DOUBLE
59768: GREATEREQUAL
59769: IFFALSE 59777
59771: LD_INT 9
59773: DOUBLE
59774: LESSEQUAL
59775: IFTRUE 59779
59777: GO 59839
59779: POP
// begin bc_type := b_lab_half ;
59780: LD_ADDR_OWVAR 42
59784: PUSH
59785: LD_INT 7
59787: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59788: LD_ADDR_OWVAR 44
59792: PUSH
59793: LD_INT 10
59795: PUSH
59796: LD_INT 11
59798: PUSH
59799: LD_INT 12
59801: PUSH
59802: LD_INT 15
59804: PUSH
59805: LD_INT 14
59807: PUSH
59808: LD_INT 13
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: LD_VAR 0 2
59823: PUSH
59824: LD_INT 3
59826: MINUS
59827: ARRAY
59828: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
59829: LD_ADDR_OWVAR 45
59833: PUSH
59834: LD_INT 9
59836: ST_TO_ADDR
// end ; 10 .. 13 :
59837: GO 60347
59839: LD_INT 10
59841: DOUBLE
59842: GREATEREQUAL
59843: IFFALSE 59851
59845: LD_INT 13
59847: DOUBLE
59848: LESSEQUAL
59849: IFTRUE 59853
59851: GO 59930
59853: POP
// begin bc_type := b_lab_full ;
59854: LD_ADDR_OWVAR 42
59858: PUSH
59859: LD_INT 8
59861: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59862: LD_ADDR_OWVAR 44
59866: PUSH
59867: LD_INT 10
59869: PUSH
59870: LD_INT 12
59872: PUSH
59873: LD_INT 14
59875: PUSH
59876: LD_INT 13
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: PUSH
59885: LD_VAR 0 2
59889: PUSH
59890: LD_INT 9
59892: MINUS
59893: ARRAY
59894: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59895: LD_ADDR_OWVAR 45
59899: PUSH
59900: LD_INT 11
59902: PUSH
59903: LD_INT 15
59905: PUSH
59906: LD_INT 12
59908: PUSH
59909: LD_INT 15
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: LD_VAR 0 2
59922: PUSH
59923: LD_INT 9
59925: MINUS
59926: ARRAY
59927: ST_TO_ADDR
// end ; 14 :
59928: GO 60347
59930: LD_INT 14
59932: DOUBLE
59933: EQUAL
59934: IFTRUE 59938
59936: GO 59949
59938: POP
// bc_type := b_workshop ; 15 :
59939: LD_ADDR_OWVAR 42
59943: PUSH
59944: LD_INT 2
59946: ST_TO_ADDR
59947: GO 60347
59949: LD_INT 15
59951: DOUBLE
59952: EQUAL
59953: IFTRUE 59957
59955: GO 59968
59957: POP
// bc_type := b_factory ; 16 :
59958: LD_ADDR_OWVAR 42
59962: PUSH
59963: LD_INT 3
59965: ST_TO_ADDR
59966: GO 60347
59968: LD_INT 16
59970: DOUBLE
59971: EQUAL
59972: IFTRUE 59976
59974: GO 59987
59976: POP
// bc_type := b_ext_gun ; 17 :
59977: LD_ADDR_OWVAR 42
59981: PUSH
59982: LD_INT 17
59984: ST_TO_ADDR
59985: GO 60347
59987: LD_INT 17
59989: DOUBLE
59990: EQUAL
59991: IFTRUE 59995
59993: GO 60023
59995: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59996: LD_ADDR_OWVAR 42
60000: PUSH
60001: LD_INT 19
60003: PUSH
60004: LD_INT 23
60006: PUSH
60007: LD_INT 19
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: LD_VAR 0 1
60019: ARRAY
60020: ST_TO_ADDR
60021: GO 60347
60023: LD_INT 18
60025: DOUBLE
60026: EQUAL
60027: IFTRUE 60031
60029: GO 60042
60031: POP
// bc_type := b_ext_radar ; 19 :
60032: LD_ADDR_OWVAR 42
60036: PUSH
60037: LD_INT 20
60039: ST_TO_ADDR
60040: GO 60347
60042: LD_INT 19
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60050
60048: GO 60061
60050: POP
// bc_type := b_ext_radio ; 20 :
60051: LD_ADDR_OWVAR 42
60055: PUSH
60056: LD_INT 22
60058: ST_TO_ADDR
60059: GO 60347
60061: LD_INT 20
60063: DOUBLE
60064: EQUAL
60065: IFTRUE 60069
60067: GO 60080
60069: POP
// bc_type := b_ext_siberium ; 21 :
60070: LD_ADDR_OWVAR 42
60074: PUSH
60075: LD_INT 21
60077: ST_TO_ADDR
60078: GO 60347
60080: LD_INT 21
60082: DOUBLE
60083: EQUAL
60084: IFTRUE 60088
60086: GO 60099
60088: POP
// bc_type := b_ext_computer ; 22 :
60089: LD_ADDR_OWVAR 42
60093: PUSH
60094: LD_INT 24
60096: ST_TO_ADDR
60097: GO 60347
60099: LD_INT 22
60101: DOUBLE
60102: EQUAL
60103: IFTRUE 60107
60105: GO 60118
60107: POP
// bc_type := b_ext_track ; 23 :
60108: LD_ADDR_OWVAR 42
60112: PUSH
60113: LD_INT 16
60115: ST_TO_ADDR
60116: GO 60347
60118: LD_INT 23
60120: DOUBLE
60121: EQUAL
60122: IFTRUE 60126
60124: GO 60137
60126: POP
// bc_type := b_ext_laser ; 24 :
60127: LD_ADDR_OWVAR 42
60131: PUSH
60132: LD_INT 25
60134: ST_TO_ADDR
60135: GO 60347
60137: LD_INT 24
60139: DOUBLE
60140: EQUAL
60141: IFTRUE 60145
60143: GO 60156
60145: POP
// bc_type := b_control_tower ; 25 :
60146: LD_ADDR_OWVAR 42
60150: PUSH
60151: LD_INT 36
60153: ST_TO_ADDR
60154: GO 60347
60156: LD_INT 25
60158: DOUBLE
60159: EQUAL
60160: IFTRUE 60164
60162: GO 60175
60164: POP
// bc_type := b_breastwork ; 26 :
60165: LD_ADDR_OWVAR 42
60169: PUSH
60170: LD_INT 31
60172: ST_TO_ADDR
60173: GO 60347
60175: LD_INT 26
60177: DOUBLE
60178: EQUAL
60179: IFTRUE 60183
60181: GO 60194
60183: POP
// bc_type := b_bunker ; 27 :
60184: LD_ADDR_OWVAR 42
60188: PUSH
60189: LD_INT 32
60191: ST_TO_ADDR
60192: GO 60347
60194: LD_INT 27
60196: DOUBLE
60197: EQUAL
60198: IFTRUE 60202
60200: GO 60213
60202: POP
// bc_type := b_turret ; 28 :
60203: LD_ADDR_OWVAR 42
60207: PUSH
60208: LD_INT 33
60210: ST_TO_ADDR
60211: GO 60347
60213: LD_INT 28
60215: DOUBLE
60216: EQUAL
60217: IFTRUE 60221
60219: GO 60232
60221: POP
// bc_type := b_armoury ; 29 :
60222: LD_ADDR_OWVAR 42
60226: PUSH
60227: LD_INT 4
60229: ST_TO_ADDR
60230: GO 60347
60232: LD_INT 29
60234: DOUBLE
60235: EQUAL
60236: IFTRUE 60240
60238: GO 60251
60240: POP
// bc_type := b_barracks ; 30 :
60241: LD_ADDR_OWVAR 42
60245: PUSH
60246: LD_INT 5
60248: ST_TO_ADDR
60249: GO 60347
60251: LD_INT 30
60253: DOUBLE
60254: EQUAL
60255: IFTRUE 60259
60257: GO 60270
60259: POP
// bc_type := b_solar_power ; 31 :
60260: LD_ADDR_OWVAR 42
60264: PUSH
60265: LD_INT 27
60267: ST_TO_ADDR
60268: GO 60347
60270: LD_INT 31
60272: DOUBLE
60273: EQUAL
60274: IFTRUE 60278
60276: GO 60289
60278: POP
// bc_type := b_oil_power ; 32 :
60279: LD_ADDR_OWVAR 42
60283: PUSH
60284: LD_INT 26
60286: ST_TO_ADDR
60287: GO 60347
60289: LD_INT 32
60291: DOUBLE
60292: EQUAL
60293: IFTRUE 60297
60295: GO 60308
60297: POP
// bc_type := b_siberite_power ; 33 :
60298: LD_ADDR_OWVAR 42
60302: PUSH
60303: LD_INT 28
60305: ST_TO_ADDR
60306: GO 60347
60308: LD_INT 33
60310: DOUBLE
60311: EQUAL
60312: IFTRUE 60316
60314: GO 60327
60316: POP
// bc_type := b_oil_mine ; 34 :
60317: LD_ADDR_OWVAR 42
60321: PUSH
60322: LD_INT 29
60324: ST_TO_ADDR
60325: GO 60347
60327: LD_INT 34
60329: DOUBLE
60330: EQUAL
60331: IFTRUE 60335
60333: GO 60346
60335: POP
// bc_type := b_siberite_mine ; end ;
60336: LD_ADDR_OWVAR 42
60340: PUSH
60341: LD_INT 30
60343: ST_TO_ADDR
60344: GO 60347
60346: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60347: LD_ADDR_VAR 0 8
60351: PUSH
60352: LD_VAR 0 5
60356: PPUSH
60357: LD_VAR 0 6
60361: PPUSH
60362: LD_VAR 0 3
60366: PPUSH
60367: CALL_OW 47
60371: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60372: LD_OWVAR 42
60376: PUSH
60377: LD_INT 32
60379: PUSH
60380: LD_INT 33
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: IN
60387: IFFALSE 60403
// PlaceWeaponTurret ( b , weapon ) ;
60389: LD_VAR 0 8
60393: PPUSH
60394: LD_VAR 0 4
60398: PPUSH
60399: CALL_OW 431
// end ;
60403: LD_VAR 0 7
60407: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
60408: LD_INT 0
60410: PPUSH
60411: PPUSH
60412: PPUSH
60413: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60414: LD_ADDR_VAR 0 4
60418: PUSH
60419: LD_INT 22
60421: PUSH
60422: LD_OWVAR 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: LD_INT 30
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 30
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PPUSH
60463: CALL_OW 69
60467: ST_TO_ADDR
// if not tmp then
60468: LD_VAR 0 4
60472: NOT
60473: IFFALSE 60477
// exit ;
60475: GO 60536
// for i in tmp do
60477: LD_ADDR_VAR 0 2
60481: PUSH
60482: LD_VAR 0 4
60486: PUSH
60487: FOR_IN
60488: IFFALSE 60534
// for j = 1 to 3 do
60490: LD_ADDR_VAR 0 3
60494: PUSH
60495: DOUBLE
60496: LD_INT 1
60498: DEC
60499: ST_TO_ADDR
60500: LD_INT 3
60502: PUSH
60503: FOR_TO
60504: IFFALSE 60530
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
60506: LD_VAR 0 2
60510: PPUSH
60511: CALL_OW 274
60515: PPUSH
60516: LD_VAR 0 3
60520: PPUSH
60521: LD_INT 99999
60523: PPUSH
60524: CALL_OW 277
60528: GO 60503
60530: POP
60531: POP
60532: GO 60487
60534: POP
60535: POP
// end ;
60536: LD_VAR 0 1
60540: RET
// export function hHackSetLevel10 ; var i , j ; begin
60541: LD_INT 0
60543: PPUSH
60544: PPUSH
60545: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60546: LD_ADDR_VAR 0 2
60550: PUSH
60551: LD_INT 21
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PPUSH
60561: CALL_OW 69
60565: PUSH
60566: FOR_IN
60567: IFFALSE 60619
// if IsSelected ( i ) then
60569: LD_VAR 0 2
60573: PPUSH
60574: CALL_OW 306
60578: IFFALSE 60617
// begin for j := 1 to 4 do
60580: LD_ADDR_VAR 0 3
60584: PUSH
60585: DOUBLE
60586: LD_INT 1
60588: DEC
60589: ST_TO_ADDR
60590: LD_INT 4
60592: PUSH
60593: FOR_TO
60594: IFFALSE 60615
// SetSkill ( i , j , 10 ) ;
60596: LD_VAR 0 2
60600: PPUSH
60601: LD_VAR 0 3
60605: PPUSH
60606: LD_INT 10
60608: PPUSH
60609: CALL_OW 237
60613: GO 60593
60615: POP
60616: POP
// end ;
60617: GO 60566
60619: POP
60620: POP
// end ;
60621: LD_VAR 0 1
60625: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
60626: LD_INT 0
60628: PPUSH
60629: PPUSH
60630: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
60631: LD_ADDR_VAR 0 2
60635: PUSH
60636: LD_INT 22
60638: PUSH
60639: LD_OWVAR 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 21
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PPUSH
60662: CALL_OW 69
60666: PUSH
60667: FOR_IN
60668: IFFALSE 60709
// begin for j := 1 to 4 do
60670: LD_ADDR_VAR 0 3
60674: PUSH
60675: DOUBLE
60676: LD_INT 1
60678: DEC
60679: ST_TO_ADDR
60680: LD_INT 4
60682: PUSH
60683: FOR_TO
60684: IFFALSE 60705
// SetSkill ( i , j , 10 ) ;
60686: LD_VAR 0 2
60690: PPUSH
60691: LD_VAR 0 3
60695: PPUSH
60696: LD_INT 10
60698: PPUSH
60699: CALL_OW 237
60703: GO 60683
60705: POP
60706: POP
// end ;
60707: GO 60667
60709: POP
60710: POP
// end ;
60711: LD_VAR 0 1
60715: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60716: LD_INT 0
60718: PPUSH
// uc_side := your_side ;
60719: LD_ADDR_OWVAR 20
60723: PUSH
60724: LD_OWVAR 2
60728: ST_TO_ADDR
// uc_nation := nation ;
60729: LD_ADDR_OWVAR 21
60733: PUSH
60734: LD_VAR 0 1
60738: ST_TO_ADDR
// InitHc ;
60739: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60743: LD_INT 0
60745: PPUSH
60746: LD_VAR 0 2
60750: PPUSH
60751: LD_VAR 0 3
60755: PPUSH
60756: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60760: LD_VAR 0 4
60764: PPUSH
60765: LD_VAR 0 5
60769: PPUSH
60770: CALL_OW 428
60774: PUSH
60775: LD_INT 0
60777: EQUAL
60778: IFFALSE 60802
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60780: CALL_OW 44
60784: PPUSH
60785: LD_VAR 0 4
60789: PPUSH
60790: LD_VAR 0 5
60794: PPUSH
60795: LD_INT 1
60797: PPUSH
60798: CALL_OW 48
// end ;
60802: LD_VAR 0 6
60806: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60807: LD_INT 0
60809: PPUSH
60810: PPUSH
// uc_side := your_side ;
60811: LD_ADDR_OWVAR 20
60815: PUSH
60816: LD_OWVAR 2
60820: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60821: LD_VAR 0 1
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 3
60834: PUSH
60835: LD_INT 4
60837: PUSH
60838: LD_INT 5
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: IN
60848: IFFALSE 60860
// uc_nation := nation_american else
60850: LD_ADDR_OWVAR 21
60854: PUSH
60855: LD_INT 1
60857: ST_TO_ADDR
60858: GO 60903
// if chassis in [ 11 , 12 , 13 , 14 ] then
60860: LD_VAR 0 1
60864: PUSH
60865: LD_INT 11
60867: PUSH
60868: LD_INT 12
60870: PUSH
60871: LD_INT 13
60873: PUSH
60874: LD_INT 14
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: IN
60883: IFFALSE 60895
// uc_nation := nation_arabian else
60885: LD_ADDR_OWVAR 21
60889: PUSH
60890: LD_INT 2
60892: ST_TO_ADDR
60893: GO 60903
// uc_nation := nation_russian ;
60895: LD_ADDR_OWVAR 21
60899: PUSH
60900: LD_INT 3
60902: ST_TO_ADDR
// vc_chassis := chassis ;
60903: LD_ADDR_OWVAR 37
60907: PUSH
60908: LD_VAR 0 1
60912: ST_TO_ADDR
// vc_engine := engine ;
60913: LD_ADDR_OWVAR 39
60917: PUSH
60918: LD_VAR 0 2
60922: ST_TO_ADDR
// vc_control := control ;
60923: LD_ADDR_OWVAR 38
60927: PUSH
60928: LD_VAR 0 3
60932: ST_TO_ADDR
// vc_weapon := weapon ;
60933: LD_ADDR_OWVAR 40
60937: PUSH
60938: LD_VAR 0 4
60942: ST_TO_ADDR
// un := CreateVehicle ;
60943: LD_ADDR_VAR 0 8
60947: PUSH
60948: CALL_OW 45
60952: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60953: LD_VAR 0 8
60957: PPUSH
60958: LD_INT 0
60960: PPUSH
60961: LD_INT 5
60963: PPUSH
60964: CALL_OW 12
60968: PPUSH
60969: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60973: LD_VAR 0 8
60977: PPUSH
60978: LD_VAR 0 5
60982: PPUSH
60983: LD_VAR 0 6
60987: PPUSH
60988: LD_INT 1
60990: PPUSH
60991: CALL_OW 48
// end ;
60995: LD_VAR 0 7
60999: RET
// export hInvincible ; every 1 do
61000: GO 61002
61002: DISABLE
// hInvincible := [ ] ;
61003: LD_ADDR_EXP 85
61007: PUSH
61008: EMPTY
61009: ST_TO_ADDR
61010: END
// every 10 do var i ;
61011: GO 61013
61013: DISABLE
61014: LD_INT 0
61016: PPUSH
// begin enable ;
61017: ENABLE
// if not hInvincible then
61018: LD_EXP 85
61022: NOT
61023: IFFALSE 61027
// exit ;
61025: GO 61071
// for i in hInvincible do
61027: LD_ADDR_VAR 0 1
61031: PUSH
61032: LD_EXP 85
61036: PUSH
61037: FOR_IN
61038: IFFALSE 61069
// if GetLives ( i ) < 1000 then
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 256
61049: PUSH
61050: LD_INT 1000
61052: LESS
61053: IFFALSE 61067
// SetLives ( i , 1000 ) ;
61055: LD_VAR 0 1
61059: PPUSH
61060: LD_INT 1000
61062: PPUSH
61063: CALL_OW 234
61067: GO 61037
61069: POP
61070: POP
// end ;
61071: PPOPN 1
61073: END
// export function hHackInvincible ; var i ; begin
61074: LD_INT 0
61076: PPUSH
61077: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61078: LD_ADDR_VAR 0 2
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 21
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 21
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: PPUSH
61111: CALL_OW 69
61115: PUSH
61116: FOR_IN
61117: IFFALSE 61178
// if IsSelected ( i ) then
61119: LD_VAR 0 2
61123: PPUSH
61124: CALL_OW 306
61128: IFFALSE 61176
// begin if i in hInvincible then
61130: LD_VAR 0 2
61134: PUSH
61135: LD_EXP 85
61139: IN
61140: IFFALSE 61160
// hInvincible := hInvincible diff i else
61142: LD_ADDR_EXP 85
61146: PUSH
61147: LD_EXP 85
61151: PUSH
61152: LD_VAR 0 2
61156: DIFF
61157: ST_TO_ADDR
61158: GO 61176
// hInvincible := hInvincible union i ;
61160: LD_ADDR_EXP 85
61164: PUSH
61165: LD_EXP 85
61169: PUSH
61170: LD_VAR 0 2
61174: UNION
61175: ST_TO_ADDR
// end ;
61176: GO 61116
61178: POP
61179: POP
// end ;
61180: LD_VAR 0 1
61184: RET
// export function hHackInvisible ; var i , j ; begin
61185: LD_INT 0
61187: PPUSH
61188: PPUSH
61189: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61190: LD_ADDR_VAR 0 2
61194: PUSH
61195: LD_INT 21
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PPUSH
61205: CALL_OW 69
61209: PUSH
61210: FOR_IN
61211: IFFALSE 61235
// if IsSelected ( i ) then
61213: LD_VAR 0 2
61217: PPUSH
61218: CALL_OW 306
61222: IFFALSE 61233
// ComForceInvisible ( i ) ;
61224: LD_VAR 0 2
61228: PPUSH
61229: CALL_OW 496
61233: GO 61210
61235: POP
61236: POP
// end ;
61237: LD_VAR 0 1
61241: RET
// export function hHackChangeYourSide ; begin
61242: LD_INT 0
61244: PPUSH
// if your_side = 8 then
61245: LD_OWVAR 2
61249: PUSH
61250: LD_INT 8
61252: EQUAL
61253: IFFALSE 61265
// your_side := 0 else
61255: LD_ADDR_OWVAR 2
61259: PUSH
61260: LD_INT 0
61262: ST_TO_ADDR
61263: GO 61279
// your_side := your_side + 1 ;
61265: LD_ADDR_OWVAR 2
61269: PUSH
61270: LD_OWVAR 2
61274: PUSH
61275: LD_INT 1
61277: PLUS
61278: ST_TO_ADDR
// end ;
61279: LD_VAR 0 1
61283: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61284: LD_INT 0
61286: PPUSH
61287: PPUSH
61288: PPUSH
// for i in all_units do
61289: LD_ADDR_VAR 0 2
61293: PUSH
61294: LD_OWVAR 3
61298: PUSH
61299: FOR_IN
61300: IFFALSE 61378
// if IsSelected ( i ) then
61302: LD_VAR 0 2
61306: PPUSH
61307: CALL_OW 306
61311: IFFALSE 61376
// begin j := GetSide ( i ) ;
61313: LD_ADDR_VAR 0 3
61317: PUSH
61318: LD_VAR 0 2
61322: PPUSH
61323: CALL_OW 255
61327: ST_TO_ADDR
// if j = 8 then
61328: LD_VAR 0 3
61332: PUSH
61333: LD_INT 8
61335: EQUAL
61336: IFFALSE 61348
// j := 0 else
61338: LD_ADDR_VAR 0 3
61342: PUSH
61343: LD_INT 0
61345: ST_TO_ADDR
61346: GO 61362
// j := j + 1 ;
61348: LD_ADDR_VAR 0 3
61352: PUSH
61353: LD_VAR 0 3
61357: PUSH
61358: LD_INT 1
61360: PLUS
61361: ST_TO_ADDR
// SetSide ( i , j ) ;
61362: LD_VAR 0 2
61366: PPUSH
61367: LD_VAR 0 3
61371: PPUSH
61372: CALL_OW 235
// end ;
61376: GO 61299
61378: POP
61379: POP
// end ;
61380: LD_VAR 0 1
61384: RET
// export function hHackFog ; begin
61385: LD_INT 0
61387: PPUSH
// FogOff ( true ) ;
61388: LD_INT 1
61390: PPUSH
61391: CALL_OW 344
// end ;
61395: LD_VAR 0 1
61399: RET
// export function hHackTeleport ( unit , x , y ) ; begin
61400: LD_INT 0
61402: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
61403: LD_VAR 0 1
61407: PPUSH
61408: LD_VAR 0 2
61412: PPUSH
61413: LD_VAR 0 3
61417: PPUSH
61418: LD_INT 1
61420: PPUSH
61421: LD_INT 1
61423: PPUSH
61424: CALL_OW 483
// CenterOnXY ( x , y ) ;
61428: LD_VAR 0 2
61432: PPUSH
61433: LD_VAR 0 3
61437: PPUSH
61438: CALL_OW 84
// end ;
61442: LD_VAR 0 4
61446: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61447: LD_INT 0
61449: PPUSH
61450: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61451: LD_VAR 0 1
61455: NOT
61456: PUSH
61457: LD_VAR 0 2
61461: PPUSH
61462: LD_VAR 0 3
61466: PPUSH
61467: CALL_OW 488
61471: NOT
61472: OR
61473: PUSH
61474: LD_VAR 0 1
61478: PPUSH
61479: CALL_OW 266
61483: PUSH
61484: LD_INT 3
61486: NONEQUAL
61487: PUSH
61488: LD_VAR 0 1
61492: PPUSH
61493: CALL_OW 247
61497: PUSH
61498: LD_INT 1
61500: EQUAL
61501: NOT
61502: AND
61503: OR
61504: IFFALSE 61508
// exit ;
61506: GO 61657
// if GetType ( factory ) = unit_human then
61508: LD_VAR 0 1
61512: PPUSH
61513: CALL_OW 247
61517: PUSH
61518: LD_INT 1
61520: EQUAL
61521: IFFALSE 61538
// factory := IsInUnit ( factory ) ;
61523: LD_ADDR_VAR 0 1
61527: PUSH
61528: LD_VAR 0 1
61532: PPUSH
61533: CALL_OW 310
61537: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61538: LD_VAR 0 1
61542: PPUSH
61543: CALL_OW 266
61547: PUSH
61548: LD_INT 3
61550: NONEQUAL
61551: IFFALSE 61555
// exit ;
61553: GO 61657
// if HexInfo ( x , y ) = factory then
61555: LD_VAR 0 2
61559: PPUSH
61560: LD_VAR 0 3
61564: PPUSH
61565: CALL_OW 428
61569: PUSH
61570: LD_VAR 0 1
61574: EQUAL
61575: IFFALSE 61602
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
61577: LD_ADDR_EXP 86
61581: PUSH
61582: LD_EXP 86
61586: PPUSH
61587: LD_VAR 0 1
61591: PPUSH
61592: LD_INT 0
61594: PPUSH
61595: CALL_OW 1
61599: ST_TO_ADDR
61600: GO 61653
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
61602: LD_ADDR_EXP 86
61606: PUSH
61607: LD_EXP 86
61611: PPUSH
61612: LD_VAR 0 1
61616: PPUSH
61617: LD_VAR 0 1
61621: PPUSH
61622: CALL_OW 255
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: LD_VAR 0 2
61636: PUSH
61637: LD_VAR 0 3
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: PPUSH
61648: CALL_OW 1
61652: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61653: CALL 61662 0 0
// end ;
61657: LD_VAR 0 4
61661: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61662: LD_INT 0
61664: PPUSH
61665: PPUSH
61666: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61667: LD_STRING resetFactoryWaypoint();
61669: PPUSH
61670: CALL_OW 559
// if factoryWaypoints then
61674: LD_EXP 86
61678: IFFALSE 61804
// begin list := PrepareArray ( factoryWaypoints ) ;
61680: LD_ADDR_VAR 0 3
61684: PUSH
61685: LD_EXP 86
61689: PPUSH
61690: CALL 46189 0 1
61694: ST_TO_ADDR
// for i := 1 to list do
61695: LD_ADDR_VAR 0 2
61699: PUSH
61700: DOUBLE
61701: LD_INT 1
61703: DEC
61704: ST_TO_ADDR
61705: LD_VAR 0 3
61709: PUSH
61710: FOR_TO
61711: IFFALSE 61802
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61713: LD_STRING setFactoryWaypointXY(
61715: PUSH
61716: LD_VAR 0 3
61720: PUSH
61721: LD_VAR 0 2
61725: ARRAY
61726: PUSH
61727: LD_INT 1
61729: ARRAY
61730: STR
61731: PUSH
61732: LD_STRING ,
61734: STR
61735: PUSH
61736: LD_VAR 0 3
61740: PUSH
61741: LD_VAR 0 2
61745: ARRAY
61746: PUSH
61747: LD_INT 2
61749: ARRAY
61750: STR
61751: PUSH
61752: LD_STRING ,
61754: STR
61755: PUSH
61756: LD_VAR 0 3
61760: PUSH
61761: LD_VAR 0 2
61765: ARRAY
61766: PUSH
61767: LD_INT 3
61769: ARRAY
61770: STR
61771: PUSH
61772: LD_STRING ,
61774: STR
61775: PUSH
61776: LD_VAR 0 3
61780: PUSH
61781: LD_VAR 0 2
61785: ARRAY
61786: PUSH
61787: LD_INT 4
61789: ARRAY
61790: STR
61791: PUSH
61792: LD_STRING )
61794: STR
61795: PPUSH
61796: CALL_OW 559
61800: GO 61710
61802: POP
61803: POP
// end ; end ;
61804: LD_VAR 0 1
61808: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61809: LD_INT 0
61811: PPUSH
// if HexInfo ( x , y ) = warehouse then
61812: LD_VAR 0 2
61816: PPUSH
61817: LD_VAR 0 3
61821: PPUSH
61822: CALL_OW 428
61826: PUSH
61827: LD_VAR 0 1
61831: EQUAL
61832: IFFALSE 61859
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61834: LD_ADDR_EXP 87
61838: PUSH
61839: LD_EXP 87
61843: PPUSH
61844: LD_VAR 0 1
61848: PPUSH
61849: LD_INT 0
61851: PPUSH
61852: CALL_OW 1
61856: ST_TO_ADDR
61857: GO 61910
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61859: LD_ADDR_EXP 87
61863: PUSH
61864: LD_EXP 87
61868: PPUSH
61869: LD_VAR 0 1
61873: PPUSH
61874: LD_VAR 0 1
61878: PPUSH
61879: CALL_OW 255
61883: PUSH
61884: LD_VAR 0 1
61888: PUSH
61889: LD_VAR 0 2
61893: PUSH
61894: LD_VAR 0 3
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: PPUSH
61905: CALL_OW 1
61909: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61910: CALL 61919 0 0
// end ;
61914: LD_VAR 0 4
61918: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61919: LD_INT 0
61921: PPUSH
61922: PPUSH
61923: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61924: LD_STRING resetWarehouseGatheringPoints();
61926: PPUSH
61927: CALL_OW 559
// if warehouseGatheringPoints then
61931: LD_EXP 87
61935: IFFALSE 62061
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61937: LD_ADDR_VAR 0 3
61941: PUSH
61942: LD_EXP 87
61946: PPUSH
61947: CALL 46189 0 1
61951: ST_TO_ADDR
// for i := 1 to list do
61952: LD_ADDR_VAR 0 2
61956: PUSH
61957: DOUBLE
61958: LD_INT 1
61960: DEC
61961: ST_TO_ADDR
61962: LD_VAR 0 3
61966: PUSH
61967: FOR_TO
61968: IFFALSE 62059
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61970: LD_STRING setWarehouseGatheringPointXY(
61972: PUSH
61973: LD_VAR 0 3
61977: PUSH
61978: LD_VAR 0 2
61982: ARRAY
61983: PUSH
61984: LD_INT 1
61986: ARRAY
61987: STR
61988: PUSH
61989: LD_STRING ,
61991: STR
61992: PUSH
61993: LD_VAR 0 3
61997: PUSH
61998: LD_VAR 0 2
62002: ARRAY
62003: PUSH
62004: LD_INT 2
62006: ARRAY
62007: STR
62008: PUSH
62009: LD_STRING ,
62011: STR
62012: PUSH
62013: LD_VAR 0 3
62017: PUSH
62018: LD_VAR 0 2
62022: ARRAY
62023: PUSH
62024: LD_INT 3
62026: ARRAY
62027: STR
62028: PUSH
62029: LD_STRING ,
62031: STR
62032: PUSH
62033: LD_VAR 0 3
62037: PUSH
62038: LD_VAR 0 2
62042: ARRAY
62043: PUSH
62044: LD_INT 4
62046: ARRAY
62047: STR
62048: PUSH
62049: LD_STRING )
62051: STR
62052: PPUSH
62053: CALL_OW 559
62057: GO 61967
62059: POP
62060: POP
// end ; end ;
62061: LD_VAR 0 1
62065: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62066: LD_EXP 87
62070: IFFALSE 62755
62072: GO 62074
62074: DISABLE
62075: LD_INT 0
62077: PPUSH
62078: PPUSH
62079: PPUSH
62080: PPUSH
62081: PPUSH
62082: PPUSH
62083: PPUSH
62084: PPUSH
62085: PPUSH
// begin enable ;
62086: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62087: LD_ADDR_VAR 0 3
62091: PUSH
62092: LD_EXP 87
62096: PPUSH
62097: CALL 46189 0 1
62101: ST_TO_ADDR
// if not list then
62102: LD_VAR 0 3
62106: NOT
62107: IFFALSE 62111
// exit ;
62109: GO 62755
// for i := 1 to list do
62111: LD_ADDR_VAR 0 1
62115: PUSH
62116: DOUBLE
62117: LD_INT 1
62119: DEC
62120: ST_TO_ADDR
62121: LD_VAR 0 3
62125: PUSH
62126: FOR_TO
62127: IFFALSE 62753
// begin depot := list [ i ] [ 2 ] ;
62129: LD_ADDR_VAR 0 8
62133: PUSH
62134: LD_VAR 0 3
62138: PUSH
62139: LD_VAR 0 1
62143: ARRAY
62144: PUSH
62145: LD_INT 2
62147: ARRAY
62148: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62149: LD_ADDR_VAR 0 5
62153: PUSH
62154: LD_VAR 0 3
62158: PUSH
62159: LD_VAR 0 1
62163: ARRAY
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
62169: LD_VAR 0 8
62173: PPUSH
62174: CALL_OW 301
62178: PUSH
62179: LD_VAR 0 5
62183: PUSH
62184: LD_VAR 0 8
62188: PPUSH
62189: CALL_OW 255
62193: NONEQUAL
62194: OR
62195: IFFALSE 62224
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
62197: LD_ADDR_EXP 87
62201: PUSH
62202: LD_EXP 87
62206: PPUSH
62207: LD_VAR 0 8
62211: PPUSH
62212: LD_INT 0
62214: PPUSH
62215: CALL_OW 1
62219: ST_TO_ADDR
// exit ;
62220: POP
62221: POP
62222: GO 62755
// end ; x := list [ i ] [ 3 ] ;
62224: LD_ADDR_VAR 0 6
62228: PUSH
62229: LD_VAR 0 3
62233: PUSH
62234: LD_VAR 0 1
62238: ARRAY
62239: PUSH
62240: LD_INT 3
62242: ARRAY
62243: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
62244: LD_ADDR_VAR 0 7
62248: PUSH
62249: LD_VAR 0 3
62253: PUSH
62254: LD_VAR 0 1
62258: ARRAY
62259: PUSH
62260: LD_INT 4
62262: ARRAY
62263: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
62264: LD_ADDR_VAR 0 9
62268: PUSH
62269: LD_VAR 0 6
62273: PPUSH
62274: LD_VAR 0 7
62278: PPUSH
62279: LD_INT 16
62281: PPUSH
62282: CALL 44777 0 3
62286: ST_TO_ADDR
// if not cratesNearbyPoint then
62287: LD_VAR 0 9
62291: NOT
62292: IFFALSE 62298
// exit ;
62294: POP
62295: POP
62296: GO 62755
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62298: LD_ADDR_VAR 0 4
62302: PUSH
62303: LD_INT 22
62305: PUSH
62306: LD_VAR 0 5
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: LD_INT 60
62320: PUSH
62321: EMPTY
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 91
62330: PUSH
62331: LD_VAR 0 8
62335: PUSH
62336: LD_INT 6
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 25
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 25
62359: PUSH
62360: LD_INT 16
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: PPUSH
62378: CALL_OW 69
62382: PUSH
62383: LD_VAR 0 8
62387: PPUSH
62388: CALL_OW 313
62392: PPUSH
62393: LD_INT 3
62395: PUSH
62396: LD_INT 60
62398: PUSH
62399: EMPTY
62400: LIST
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: LD_INT 25
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 25
62421: PUSH
62422: LD_INT 16
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: LIST
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PPUSH
62438: CALL_OW 72
62442: UNION
62443: ST_TO_ADDR
// if tmp then
62444: LD_VAR 0 4
62448: IFFALSE 62528
// begin tmp := ShrinkArray ( tmp , 3 ) ;
62450: LD_ADDR_VAR 0 4
62454: PUSH
62455: LD_VAR 0 4
62459: PPUSH
62460: LD_INT 3
62462: PPUSH
62463: CALL 42746 0 2
62467: ST_TO_ADDR
// for j in tmp do
62468: LD_ADDR_VAR 0 2
62472: PUSH
62473: LD_VAR 0 4
62477: PUSH
62478: FOR_IN
62479: IFFALSE 62522
// begin if IsInUnit ( j ) then
62481: LD_VAR 0 2
62485: PPUSH
62486: CALL_OW 310
62490: IFFALSE 62501
// ComExit ( j ) ;
62492: LD_VAR 0 2
62496: PPUSH
62497: CALL 42829 0 1
// AddComCollect ( j , x , y ) ;
62501: LD_VAR 0 2
62505: PPUSH
62506: LD_VAR 0 6
62510: PPUSH
62511: LD_VAR 0 7
62515: PPUSH
62516: CALL_OW 177
// end ;
62520: GO 62478
62522: POP
62523: POP
// exit ;
62524: POP
62525: POP
62526: GO 62755
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
62528: LD_ADDR_VAR 0 4
62532: PUSH
62533: LD_INT 22
62535: PUSH
62536: LD_VAR 0 5
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 91
62547: PUSH
62548: LD_VAR 0 8
62552: PUSH
62553: LD_INT 8
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: LD_INT 34
62566: PUSH
62567: LD_INT 12
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 34
62576: PUSH
62577: LD_INT 51
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 34
62586: PUSH
62587: LD_INT 32
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 34
62596: PUSH
62597: LD_INT 89
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: PPUSH
62616: CALL_OW 69
62620: ST_TO_ADDR
// if tmp then
62621: LD_VAR 0 4
62625: IFFALSE 62751
// begin for j in tmp do
62627: LD_ADDR_VAR 0 2
62631: PUSH
62632: LD_VAR 0 4
62636: PUSH
62637: FOR_IN
62638: IFFALSE 62749
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
62640: LD_VAR 0 2
62644: PPUSH
62645: CALL_OW 262
62649: PUSH
62650: LD_INT 3
62652: EQUAL
62653: PUSH
62654: LD_VAR 0 2
62658: PPUSH
62659: CALL_OW 261
62663: PUSH
62664: LD_INT 20
62666: GREATER
62667: OR
62668: PUSH
62669: LD_VAR 0 2
62673: PPUSH
62674: CALL_OW 314
62678: NOT
62679: AND
62680: PUSH
62681: LD_VAR 0 2
62685: PPUSH
62686: CALL_OW 263
62690: PUSH
62691: LD_INT 1
62693: NONEQUAL
62694: PUSH
62695: LD_VAR 0 2
62699: PPUSH
62700: CALL_OW 311
62704: OR
62705: AND
62706: IFFALSE 62747
// begin ComCollect ( j , x , y ) ;
62708: LD_VAR 0 2
62712: PPUSH
62713: LD_VAR 0 6
62717: PPUSH
62718: LD_VAR 0 7
62722: PPUSH
62723: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
62727: LD_VAR 0 2
62731: PPUSH
62732: LD_VAR 0 8
62736: PPUSH
62737: CALL_OW 172
// exit ;
62741: POP
62742: POP
62743: POP
62744: POP
62745: GO 62755
// end ;
62747: GO 62637
62749: POP
62750: POP
// end ; end ;
62751: GO 62126
62753: POP
62754: POP
// end ; end_of_file
62755: PPOPN 9
62757: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62758: LD_VAR 0 1
62762: PUSH
62763: LD_INT 200
62765: DOUBLE
62766: GREATEREQUAL
62767: IFFALSE 62775
62769: LD_INT 299
62771: DOUBLE
62772: LESSEQUAL
62773: IFTRUE 62777
62775: GO 62809
62777: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62778: LD_VAR 0 1
62782: PPUSH
62783: LD_VAR 0 2
62787: PPUSH
62788: LD_VAR 0 3
62792: PPUSH
62793: LD_VAR 0 4
62797: PPUSH
62798: LD_VAR 0 5
62802: PPUSH
62803: CALL 63297 0 5
62807: GO 62886
62809: LD_INT 300
62811: DOUBLE
62812: GREATEREQUAL
62813: IFFALSE 62821
62815: LD_INT 399
62817: DOUBLE
62818: LESSEQUAL
62819: IFTRUE 62823
62821: GO 62885
62823: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62824: LD_VAR 0 1
62828: PPUSH
62829: LD_VAR 0 2
62833: PPUSH
62834: LD_VAR 0 3
62838: PPUSH
62839: LD_VAR 0 4
62843: PPUSH
62844: LD_VAR 0 5
62848: PPUSH
62849: LD_VAR 0 6
62853: PPUSH
62854: LD_VAR 0 7
62858: PPUSH
62859: LD_VAR 0 8
62863: PPUSH
62864: LD_VAR 0 9
62868: PPUSH
62869: LD_VAR 0 10
62873: PPUSH
62874: LD_VAR 0 11
62878: PPUSH
62879: CALL 59459 0 11
62883: GO 62886
62885: POP
// end ;
62886: PPOPN 11
62888: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62889: LD_VAR 0 1
62893: PPUSH
62894: LD_VAR 0 2
62898: PPUSH
62899: LD_VAR 0 3
62903: PPUSH
62904: LD_VAR 0 4
62908: PPUSH
62909: LD_VAR 0 5
62913: PPUSH
62914: CALL 63033 0 5
// end ; end_of_file
62918: PPOPN 5
62920: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62921: LD_INT 0
62923: PPUSH
62924: PPUSH
62925: PPUSH
62926: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62927: LD_VAR 0 1
62931: PPUSH
62932: CALL_OW 264
62936: PUSH
62937: LD_INT 91
62939: EQUAL
62940: IFFALSE 63012
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62942: LD_INT 68
62944: PPUSH
62945: LD_VAR 0 1
62949: PPUSH
62950: CALL_OW 255
62954: PPUSH
62955: CALL_OW 321
62959: PUSH
62960: LD_INT 2
62962: EQUAL
62963: IFFALSE 62975
// eff := 70 else
62965: LD_ADDR_VAR 0 4
62969: PUSH
62970: LD_INT 70
62972: ST_TO_ADDR
62973: GO 62983
// eff := 30 ;
62975: LD_ADDR_VAR 0 4
62979: PUSH
62980: LD_INT 30
62982: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62983: LD_VAR 0 1
62987: PPUSH
62988: CALL_OW 250
62992: PPUSH
62993: LD_VAR 0 1
62997: PPUSH
62998: CALL_OW 251
63002: PPUSH
63003: LD_VAR 0 4
63007: PPUSH
63008: CALL_OW 495
// end ; end ;
63012: LD_VAR 0 2
63016: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63017: LD_INT 0
63019: PPUSH
// end ;
63020: LD_VAR 0 4
63024: RET
// export function SOS_Command ( cmd ) ; begin
63025: LD_INT 0
63027: PPUSH
// end ;
63028: LD_VAR 0 2
63032: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63033: LD_INT 0
63035: PPUSH
// end ;
63036: LD_VAR 0 6
63040: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
63041: LD_INT 0
63043: PPUSH
63044: PPUSH
// if not vehicle or not factory then
63045: LD_VAR 0 1
63049: NOT
63050: PUSH
63051: LD_VAR 0 2
63055: NOT
63056: OR
63057: IFFALSE 63061
// exit ;
63059: GO 63292
// if factoryWaypoints >= factory then
63061: LD_EXP 86
63065: PUSH
63066: LD_VAR 0 2
63070: GREATEREQUAL
63071: IFFALSE 63292
// if factoryWaypoints [ factory ] then
63073: LD_EXP 86
63077: PUSH
63078: LD_VAR 0 2
63082: ARRAY
63083: IFFALSE 63292
// begin if GetControl ( vehicle ) = control_manual then
63085: LD_VAR 0 1
63089: PPUSH
63090: CALL_OW 263
63094: PUSH
63095: LD_INT 1
63097: EQUAL
63098: IFFALSE 63179
// begin driver := IsDrivenBy ( vehicle ) ;
63100: LD_ADDR_VAR 0 4
63104: PUSH
63105: LD_VAR 0 1
63109: PPUSH
63110: CALL_OW 311
63114: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63115: LD_VAR 0 4
63119: PPUSH
63120: LD_EXP 86
63124: PUSH
63125: LD_VAR 0 2
63129: ARRAY
63130: PUSH
63131: LD_INT 3
63133: ARRAY
63134: PPUSH
63135: LD_EXP 86
63139: PUSH
63140: LD_VAR 0 2
63144: ARRAY
63145: PUSH
63146: LD_INT 4
63148: ARRAY
63149: PPUSH
63150: CALL_OW 171
// AddComExitVehicle ( driver ) ;
63154: LD_VAR 0 4
63158: PPUSH
63159: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
63163: LD_VAR 0 4
63167: PPUSH
63168: LD_VAR 0 2
63172: PPUSH
63173: CALL_OW 180
// end else
63177: GO 63292
// if GetControl ( vehicle ) = control_remote then
63179: LD_VAR 0 1
63183: PPUSH
63184: CALL_OW 263
63188: PUSH
63189: LD_INT 2
63191: EQUAL
63192: IFFALSE 63253
// begin wait ( 0 0$2 ) ;
63194: LD_INT 70
63196: PPUSH
63197: CALL_OW 67
// if Connect ( vehicle ) then
63201: LD_VAR 0 1
63205: PPUSH
63206: CALL 13037 0 1
63210: IFFALSE 63251
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63212: LD_VAR 0 1
63216: PPUSH
63217: LD_EXP 86
63221: PUSH
63222: LD_VAR 0 2
63226: ARRAY
63227: PUSH
63228: LD_INT 3
63230: ARRAY
63231: PPUSH
63232: LD_EXP 86
63236: PUSH
63237: LD_VAR 0 2
63241: ARRAY
63242: PUSH
63243: LD_INT 4
63245: ARRAY
63246: PPUSH
63247: CALL_OW 171
// end else
63251: GO 63292
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63253: LD_VAR 0 1
63257: PPUSH
63258: LD_EXP 86
63262: PUSH
63263: LD_VAR 0 2
63267: ARRAY
63268: PUSH
63269: LD_INT 3
63271: ARRAY
63272: PPUSH
63273: LD_EXP 86
63277: PUSH
63278: LD_VAR 0 2
63282: ARRAY
63283: PUSH
63284: LD_INT 4
63286: ARRAY
63287: PPUSH
63288: CALL_OW 171
// end ; end ;
63292: LD_VAR 0 3
63296: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63297: LD_INT 0
63299: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63300: LD_VAR 0 1
63304: PUSH
63305: LD_INT 250
63307: EQUAL
63308: PUSH
63309: LD_VAR 0 2
63313: PPUSH
63314: CALL_OW 264
63318: PUSH
63319: LD_INT 81
63321: EQUAL
63322: AND
63323: IFFALSE 63344
// MinerPlaceMine ( unit , x , y ) ;
63325: LD_VAR 0 2
63329: PPUSH
63330: LD_VAR 0 4
63334: PPUSH
63335: LD_VAR 0 5
63339: PPUSH
63340: CALL 66168 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
63344: LD_VAR 0 1
63348: PUSH
63349: LD_INT 251
63351: EQUAL
63352: PUSH
63353: LD_VAR 0 2
63357: PPUSH
63358: CALL_OW 264
63362: PUSH
63363: LD_INT 81
63365: EQUAL
63366: AND
63367: IFFALSE 63388
// MinerDetonateMine ( unit , x , y ) ;
63369: LD_VAR 0 2
63373: PPUSH
63374: LD_VAR 0 4
63378: PPUSH
63379: LD_VAR 0 5
63383: PPUSH
63384: CALL 66443 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
63388: LD_VAR 0 1
63392: PUSH
63393: LD_INT 252
63395: EQUAL
63396: PUSH
63397: LD_VAR 0 2
63401: PPUSH
63402: CALL_OW 264
63406: PUSH
63407: LD_INT 81
63409: EQUAL
63410: AND
63411: IFFALSE 63432
// MinerCreateMinefield ( unit , x , y ) ;
63413: LD_VAR 0 2
63417: PPUSH
63418: LD_VAR 0 4
63422: PPUSH
63423: LD_VAR 0 5
63427: PPUSH
63428: CALL 66860 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
63432: LD_VAR 0 1
63436: PUSH
63437: LD_INT 253
63439: EQUAL
63440: PUSH
63441: LD_VAR 0 2
63445: PPUSH
63446: CALL_OW 257
63450: PUSH
63451: LD_INT 5
63453: EQUAL
63454: AND
63455: IFFALSE 63476
// ComBinocular ( unit , x , y ) ;
63457: LD_VAR 0 2
63461: PPUSH
63462: LD_VAR 0 4
63466: PPUSH
63467: LD_VAR 0 5
63471: PPUSH
63472: CALL 67229 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
63476: LD_VAR 0 1
63480: PUSH
63481: LD_INT 254
63483: EQUAL
63484: PUSH
63485: LD_VAR 0 2
63489: PPUSH
63490: CALL_OW 264
63494: PUSH
63495: LD_INT 99
63497: EQUAL
63498: AND
63499: PUSH
63500: LD_VAR 0 3
63504: PPUSH
63505: CALL_OW 263
63509: PUSH
63510: LD_INT 3
63512: EQUAL
63513: AND
63514: IFFALSE 63530
// HackDestroyVehicle ( unit , selectedUnit ) ;
63516: LD_VAR 0 2
63520: PPUSH
63521: LD_VAR 0 3
63525: PPUSH
63526: CALL 65532 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
63530: LD_VAR 0 1
63534: PUSH
63535: LD_INT 255
63537: EQUAL
63538: PUSH
63539: LD_VAR 0 2
63543: PPUSH
63544: CALL_OW 264
63548: PUSH
63549: LD_INT 14
63551: PUSH
63552: LD_INT 53
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: IN
63559: AND
63560: PUSH
63561: LD_VAR 0 4
63565: PPUSH
63566: LD_VAR 0 5
63570: PPUSH
63571: CALL_OW 488
63575: AND
63576: IFFALSE 63600
// CutTreeXYR ( unit , x , y , 12 ) ;
63578: LD_VAR 0 2
63582: PPUSH
63583: LD_VAR 0 4
63587: PPUSH
63588: LD_VAR 0 5
63592: PPUSH
63593: LD_INT 12
63595: PPUSH
63596: CALL 63695 0 4
// if cmd = 256 then
63600: LD_VAR 0 1
63604: PUSH
63605: LD_INT 256
63607: EQUAL
63608: IFFALSE 63629
// SetFactoryWaypoint ( unit , x , y ) ;
63610: LD_VAR 0 2
63614: PPUSH
63615: LD_VAR 0 4
63619: PPUSH
63620: LD_VAR 0 5
63624: PPUSH
63625: CALL 61447 0 3
// if cmd = 257 then
63629: LD_VAR 0 1
63633: PUSH
63634: LD_INT 257
63636: EQUAL
63637: IFFALSE 63658
// SetWarehouseGatheringPoint ( unit , x , y ) ;
63639: LD_VAR 0 2
63643: PPUSH
63644: LD_VAR 0 4
63648: PPUSH
63649: LD_VAR 0 5
63653: PPUSH
63654: CALL 61809 0 3
// if cmd = 258 then
63658: LD_VAR 0 1
63662: PUSH
63663: LD_INT 258
63665: EQUAL
63666: IFFALSE 63690
// BurnTreeXYR ( unit , x , y , 8 ) ;
63668: LD_VAR 0 2
63672: PPUSH
63673: LD_VAR 0 4
63677: PPUSH
63678: LD_VAR 0 5
63682: PPUSH
63683: LD_INT 8
63685: PPUSH
63686: CALL 64089 0 4
// end ;
63690: LD_VAR 0 6
63694: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63695: LD_INT 0
63697: PPUSH
63698: PPUSH
63699: PPUSH
63700: PPUSH
63701: PPUSH
63702: PPUSH
63703: PPUSH
63704: PPUSH
63705: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
63706: LD_VAR 0 1
63710: PPUSH
63711: CALL_OW 302
63715: NOT
63716: PUSH
63717: LD_VAR 0 2
63721: PPUSH
63722: LD_VAR 0 3
63726: PPUSH
63727: CALL_OW 488
63731: NOT
63732: OR
63733: PUSH
63734: LD_VAR 0 4
63738: NOT
63739: OR
63740: IFFALSE 63744
// exit ;
63742: GO 64084
// list := [ ] ;
63744: LD_ADDR_VAR 0 13
63748: PUSH
63749: EMPTY
63750: ST_TO_ADDR
// if x - r < 0 then
63751: LD_VAR 0 2
63755: PUSH
63756: LD_VAR 0 4
63760: MINUS
63761: PUSH
63762: LD_INT 0
63764: LESS
63765: IFFALSE 63777
// min_x := 0 else
63767: LD_ADDR_VAR 0 7
63771: PUSH
63772: LD_INT 0
63774: ST_TO_ADDR
63775: GO 63793
// min_x := x - r ;
63777: LD_ADDR_VAR 0 7
63781: PUSH
63782: LD_VAR 0 2
63786: PUSH
63787: LD_VAR 0 4
63791: MINUS
63792: ST_TO_ADDR
// if y - r < 0 then
63793: LD_VAR 0 3
63797: PUSH
63798: LD_VAR 0 4
63802: MINUS
63803: PUSH
63804: LD_INT 0
63806: LESS
63807: IFFALSE 63819
// min_y := 0 else
63809: LD_ADDR_VAR 0 8
63813: PUSH
63814: LD_INT 0
63816: ST_TO_ADDR
63817: GO 63835
// min_y := y - r ;
63819: LD_ADDR_VAR 0 8
63823: PUSH
63824: LD_VAR 0 3
63828: PUSH
63829: LD_VAR 0 4
63833: MINUS
63834: ST_TO_ADDR
// max_x := x + r ;
63835: LD_ADDR_VAR 0 9
63839: PUSH
63840: LD_VAR 0 2
63844: PUSH
63845: LD_VAR 0 4
63849: PLUS
63850: ST_TO_ADDR
// max_y := y + r ;
63851: LD_ADDR_VAR 0 10
63855: PUSH
63856: LD_VAR 0 3
63860: PUSH
63861: LD_VAR 0 4
63865: PLUS
63866: ST_TO_ADDR
// for _x = min_x to max_x do
63867: LD_ADDR_VAR 0 11
63871: PUSH
63872: DOUBLE
63873: LD_VAR 0 7
63877: DEC
63878: ST_TO_ADDR
63879: LD_VAR 0 9
63883: PUSH
63884: FOR_TO
63885: IFFALSE 64002
// for _y = min_y to max_y do
63887: LD_ADDR_VAR 0 12
63891: PUSH
63892: DOUBLE
63893: LD_VAR 0 8
63897: DEC
63898: ST_TO_ADDR
63899: LD_VAR 0 10
63903: PUSH
63904: FOR_TO
63905: IFFALSE 63998
// begin if not ValidHex ( _x , _y ) then
63907: LD_VAR 0 11
63911: PPUSH
63912: LD_VAR 0 12
63916: PPUSH
63917: CALL_OW 488
63921: NOT
63922: IFFALSE 63926
// continue ;
63924: GO 63904
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63926: LD_VAR 0 11
63930: PPUSH
63931: LD_VAR 0 12
63935: PPUSH
63936: CALL_OW 351
63940: PUSH
63941: LD_VAR 0 11
63945: PPUSH
63946: LD_VAR 0 12
63950: PPUSH
63951: CALL_OW 554
63955: AND
63956: IFFALSE 63996
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63958: LD_ADDR_VAR 0 13
63962: PUSH
63963: LD_VAR 0 13
63967: PPUSH
63968: LD_VAR 0 13
63972: PUSH
63973: LD_INT 1
63975: PLUS
63976: PPUSH
63977: LD_VAR 0 11
63981: PUSH
63982: LD_VAR 0 12
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PPUSH
63991: CALL_OW 2
63995: ST_TO_ADDR
// end ;
63996: GO 63904
63998: POP
63999: POP
64000: GO 63884
64002: POP
64003: POP
// if not list then
64004: LD_VAR 0 13
64008: NOT
64009: IFFALSE 64013
// exit ;
64011: GO 64084
// for i in list do
64013: LD_ADDR_VAR 0 6
64017: PUSH
64018: LD_VAR 0 13
64022: PUSH
64023: FOR_IN
64024: IFFALSE 64082
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64026: LD_VAR 0 1
64030: PPUSH
64031: LD_STRING M
64033: PUSH
64034: LD_VAR 0 6
64038: PUSH
64039: LD_INT 1
64041: ARRAY
64042: PUSH
64043: LD_VAR 0 6
64047: PUSH
64048: LD_INT 2
64050: ARRAY
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: PPUSH
64076: CALL_OW 447
64080: GO 64023
64082: POP
64083: POP
// end ;
64084: LD_VAR 0 5
64088: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64089: LD_INT 0
64091: PPUSH
64092: PPUSH
64093: PPUSH
64094: PPUSH
64095: PPUSH
64096: PPUSH
64097: PPUSH
64098: PPUSH
64099: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
64100: LD_VAR 0 1
64104: PPUSH
64105: CALL_OW 302
64109: NOT
64110: PUSH
64111: LD_VAR 0 2
64115: PPUSH
64116: LD_VAR 0 3
64120: PPUSH
64121: CALL_OW 488
64125: NOT
64126: OR
64127: PUSH
64128: LD_VAR 0 4
64132: NOT
64133: OR
64134: IFFALSE 64138
// exit ;
64136: GO 64486
// list := [ ] ;
64138: LD_ADDR_VAR 0 13
64142: PUSH
64143: EMPTY
64144: ST_TO_ADDR
// if x - r < 0 then
64145: LD_VAR 0 2
64149: PUSH
64150: LD_VAR 0 4
64154: MINUS
64155: PUSH
64156: LD_INT 0
64158: LESS
64159: IFFALSE 64171
// min_x := 0 else
64161: LD_ADDR_VAR 0 7
64165: PUSH
64166: LD_INT 0
64168: ST_TO_ADDR
64169: GO 64187
// min_x := x - r ;
64171: LD_ADDR_VAR 0 7
64175: PUSH
64176: LD_VAR 0 2
64180: PUSH
64181: LD_VAR 0 4
64185: MINUS
64186: ST_TO_ADDR
// if y - r < 0 then
64187: LD_VAR 0 3
64191: PUSH
64192: LD_VAR 0 4
64196: MINUS
64197: PUSH
64198: LD_INT 0
64200: LESS
64201: IFFALSE 64213
// min_y := 0 else
64203: LD_ADDR_VAR 0 8
64207: PUSH
64208: LD_INT 0
64210: ST_TO_ADDR
64211: GO 64229
// min_y := y - r ;
64213: LD_ADDR_VAR 0 8
64217: PUSH
64218: LD_VAR 0 3
64222: PUSH
64223: LD_VAR 0 4
64227: MINUS
64228: ST_TO_ADDR
// max_x := x + r ;
64229: LD_ADDR_VAR 0 9
64233: PUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_VAR 0 4
64243: PLUS
64244: ST_TO_ADDR
// max_y := y + r ;
64245: LD_ADDR_VAR 0 10
64249: PUSH
64250: LD_VAR 0 3
64254: PUSH
64255: LD_VAR 0 4
64259: PLUS
64260: ST_TO_ADDR
// for _x = min_x to max_x do
64261: LD_ADDR_VAR 0 11
64265: PUSH
64266: DOUBLE
64267: LD_VAR 0 7
64271: DEC
64272: ST_TO_ADDR
64273: LD_VAR 0 9
64277: PUSH
64278: FOR_TO
64279: IFFALSE 64396
// for _y = min_y to max_y do
64281: LD_ADDR_VAR 0 12
64285: PUSH
64286: DOUBLE
64287: LD_VAR 0 8
64291: DEC
64292: ST_TO_ADDR
64293: LD_VAR 0 10
64297: PUSH
64298: FOR_TO
64299: IFFALSE 64392
// begin if not ValidHex ( _x , _y ) then
64301: LD_VAR 0 11
64305: PPUSH
64306: LD_VAR 0 12
64310: PPUSH
64311: CALL_OW 488
64315: NOT
64316: IFFALSE 64320
// continue ;
64318: GO 64298
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64320: LD_VAR 0 11
64324: PPUSH
64325: LD_VAR 0 12
64329: PPUSH
64330: CALL_OW 351
64334: PUSH
64335: LD_VAR 0 11
64339: PPUSH
64340: LD_VAR 0 12
64344: PPUSH
64345: CALL_OW 554
64349: AND
64350: IFFALSE 64390
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64352: LD_ADDR_VAR 0 13
64356: PUSH
64357: LD_VAR 0 13
64361: PPUSH
64362: LD_VAR 0 13
64366: PUSH
64367: LD_INT 1
64369: PLUS
64370: PPUSH
64371: LD_VAR 0 11
64375: PUSH
64376: LD_VAR 0 12
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PPUSH
64385: CALL_OW 2
64389: ST_TO_ADDR
// end ;
64390: GO 64298
64392: POP
64393: POP
64394: GO 64278
64396: POP
64397: POP
// if not list then
64398: LD_VAR 0 13
64402: NOT
64403: IFFALSE 64407
// exit ;
64405: GO 64486
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
64407: LD_ADDR_VAR 0 13
64411: PUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: LD_VAR 0 13
64421: PPUSH
64422: LD_INT 1
64424: PPUSH
64425: LD_INT 1
64427: PPUSH
64428: CALL 10179 0 4
64432: ST_TO_ADDR
// ComStop ( flame ) ;
64433: LD_VAR 0 1
64437: PPUSH
64438: CALL_OW 141
// for i in list do
64442: LD_ADDR_VAR 0 6
64446: PUSH
64447: LD_VAR 0 13
64451: PUSH
64452: FOR_IN
64453: IFFALSE 64484
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
64455: LD_VAR 0 1
64459: PPUSH
64460: LD_VAR 0 6
64464: PUSH
64465: LD_INT 1
64467: ARRAY
64468: PPUSH
64469: LD_VAR 0 6
64473: PUSH
64474: LD_INT 2
64476: ARRAY
64477: PPUSH
64478: CALL_OW 176
64482: GO 64452
64484: POP
64485: POP
// end ;
64486: LD_VAR 0 5
64490: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64491: LD_EXP 89
64495: NOT
64496: IFFALSE 64546
64498: GO 64500
64500: DISABLE
// begin initHack := true ;
64501: LD_ADDR_EXP 89
64505: PUSH
64506: LD_INT 1
64508: ST_TO_ADDR
// hackTanks := [ ] ;
64509: LD_ADDR_EXP 90
64513: PUSH
64514: EMPTY
64515: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64516: LD_ADDR_EXP 91
64520: PUSH
64521: EMPTY
64522: ST_TO_ADDR
// hackLimit := 3 ;
64523: LD_ADDR_EXP 92
64527: PUSH
64528: LD_INT 3
64530: ST_TO_ADDR
// hackDist := 12 ;
64531: LD_ADDR_EXP 93
64535: PUSH
64536: LD_INT 12
64538: ST_TO_ADDR
// hackCounter := [ ] ;
64539: LD_ADDR_EXP 94
64543: PUSH
64544: EMPTY
64545: ST_TO_ADDR
// end ;
64546: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64547: LD_EXP 89
64551: PUSH
64552: LD_INT 34
64554: PUSH
64555: LD_INT 99
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PPUSH
64562: CALL_OW 69
64566: AND
64567: IFFALSE 64820
64569: GO 64571
64571: DISABLE
64572: LD_INT 0
64574: PPUSH
64575: PPUSH
// begin enable ;
64576: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64577: LD_ADDR_VAR 0 1
64581: PUSH
64582: LD_INT 34
64584: PUSH
64585: LD_INT 99
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PPUSH
64592: CALL_OW 69
64596: PUSH
64597: FOR_IN
64598: IFFALSE 64818
// begin if not i in hackTanks then
64600: LD_VAR 0 1
64604: PUSH
64605: LD_EXP 90
64609: IN
64610: NOT
64611: IFFALSE 64694
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64613: LD_ADDR_EXP 90
64617: PUSH
64618: LD_EXP 90
64622: PPUSH
64623: LD_EXP 90
64627: PUSH
64628: LD_INT 1
64630: PLUS
64631: PPUSH
64632: LD_VAR 0 1
64636: PPUSH
64637: CALL_OW 1
64641: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64642: LD_ADDR_EXP 91
64646: PUSH
64647: LD_EXP 91
64651: PPUSH
64652: LD_EXP 91
64656: PUSH
64657: LD_INT 1
64659: PLUS
64660: PPUSH
64661: EMPTY
64662: PPUSH
64663: CALL_OW 1
64667: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64668: LD_ADDR_EXP 94
64672: PUSH
64673: LD_EXP 94
64677: PPUSH
64678: LD_EXP 94
64682: PUSH
64683: LD_INT 1
64685: PLUS
64686: PPUSH
64687: EMPTY
64688: PPUSH
64689: CALL_OW 1
64693: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64694: LD_VAR 0 1
64698: PPUSH
64699: CALL_OW 302
64703: NOT
64704: IFFALSE 64717
// begin HackUnlinkAll ( i ) ;
64706: LD_VAR 0 1
64710: PPUSH
64711: CALL 64823 0 1
// continue ;
64715: GO 64597
// end ; HackCheckCapturedStatus ( i ) ;
64717: LD_VAR 0 1
64721: PPUSH
64722: CALL 65266 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64726: LD_ADDR_VAR 0 2
64730: PUSH
64731: LD_INT 81
64733: PUSH
64734: LD_VAR 0 1
64738: PPUSH
64739: CALL_OW 255
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 33
64750: PUSH
64751: LD_INT 3
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 91
64760: PUSH
64761: LD_VAR 0 1
64765: PUSH
64766: LD_EXP 93
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 50
64778: PUSH
64779: EMPTY
64780: LIST
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: PPUSH
64788: CALL_OW 69
64792: ST_TO_ADDR
// if not tmp then
64793: LD_VAR 0 2
64797: NOT
64798: IFFALSE 64802
// continue ;
64800: GO 64597
// HackLink ( i , tmp ) ;
64802: LD_VAR 0 1
64806: PPUSH
64807: LD_VAR 0 2
64811: PPUSH
64812: CALL 64959 0 2
// end ;
64816: GO 64597
64818: POP
64819: POP
// end ;
64820: PPOPN 2
64822: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
64823: LD_INT 0
64825: PPUSH
64826: PPUSH
64827: PPUSH
// if not hack in hackTanks then
64828: LD_VAR 0 1
64832: PUSH
64833: LD_EXP 90
64837: IN
64838: NOT
64839: IFFALSE 64843
// exit ;
64841: GO 64954
// index := GetElementIndex ( hackTanks , hack ) ;
64843: LD_ADDR_VAR 0 4
64847: PUSH
64848: LD_EXP 90
64852: PPUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: CALL 9476 0 2
64862: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
64863: LD_EXP 91
64867: PUSH
64868: LD_VAR 0 4
64872: ARRAY
64873: IFFALSE 64954
// begin for i in hackTanksCaptured [ index ] do
64875: LD_ADDR_VAR 0 3
64879: PUSH
64880: LD_EXP 91
64884: PUSH
64885: LD_VAR 0 4
64889: ARRAY
64890: PUSH
64891: FOR_IN
64892: IFFALSE 64918
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
64894: LD_VAR 0 3
64898: PUSH
64899: LD_INT 1
64901: ARRAY
64902: PPUSH
64903: LD_VAR 0 3
64907: PUSH
64908: LD_INT 2
64910: ARRAY
64911: PPUSH
64912: CALL_OW 235
64916: GO 64891
64918: POP
64919: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
64920: LD_ADDR_EXP 91
64924: PUSH
64925: LD_EXP 91
64929: PPUSH
64930: LD_VAR 0 4
64934: PPUSH
64935: EMPTY
64936: PPUSH
64937: CALL_OW 1
64941: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
64942: LD_VAR 0 1
64946: PPUSH
64947: LD_INT 0
64949: PPUSH
64950: CALL_OW 505
// end ; end ;
64954: LD_VAR 0 2
64958: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
64959: LD_INT 0
64961: PPUSH
64962: PPUSH
64963: PPUSH
// if not hack in hackTanks or not vehicles then
64964: LD_VAR 0 1
64968: PUSH
64969: LD_EXP 90
64973: IN
64974: NOT
64975: PUSH
64976: LD_VAR 0 2
64980: NOT
64981: OR
64982: IFFALSE 64986
// exit ;
64984: GO 65261
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
64986: LD_ADDR_VAR 0 2
64990: PUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: LD_VAR 0 2
65000: PPUSH
65001: LD_INT 1
65003: PPUSH
65004: LD_INT 1
65006: PPUSH
65007: CALL 10126 0 4
65011: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65012: LD_ADDR_VAR 0 5
65016: PUSH
65017: LD_EXP 90
65021: PPUSH
65022: LD_VAR 0 1
65026: PPUSH
65027: CALL 9476 0 2
65031: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65032: LD_EXP 91
65036: PUSH
65037: LD_VAR 0 5
65041: ARRAY
65042: PUSH
65043: LD_EXP 92
65047: LESS
65048: IFFALSE 65237
// begin for i := 1 to vehicles do
65050: LD_ADDR_VAR 0 4
65054: PUSH
65055: DOUBLE
65056: LD_INT 1
65058: DEC
65059: ST_TO_ADDR
65060: LD_VAR 0 2
65064: PUSH
65065: FOR_TO
65066: IFFALSE 65235
// begin if hackTanksCaptured [ index ] = hackLimit then
65068: LD_EXP 91
65072: PUSH
65073: LD_VAR 0 5
65077: ARRAY
65078: PUSH
65079: LD_EXP 92
65083: EQUAL
65084: IFFALSE 65088
// break ;
65086: GO 65235
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65088: LD_ADDR_EXP 94
65092: PUSH
65093: LD_EXP 94
65097: PPUSH
65098: LD_VAR 0 5
65102: PPUSH
65103: LD_EXP 94
65107: PUSH
65108: LD_VAR 0 5
65112: ARRAY
65113: PUSH
65114: LD_INT 1
65116: PLUS
65117: PPUSH
65118: CALL_OW 1
65122: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65123: LD_ADDR_EXP 91
65127: PUSH
65128: LD_EXP 91
65132: PPUSH
65133: LD_VAR 0 5
65137: PUSH
65138: LD_EXP 91
65142: PUSH
65143: LD_VAR 0 5
65147: ARRAY
65148: PUSH
65149: LD_INT 1
65151: PLUS
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PPUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_VAR 0 4
65166: ARRAY
65167: PUSH
65168: LD_VAR 0 2
65172: PUSH
65173: LD_VAR 0 4
65177: ARRAY
65178: PPUSH
65179: CALL_OW 255
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PPUSH
65188: CALL 9691 0 3
65192: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65193: LD_VAR 0 2
65197: PUSH
65198: LD_VAR 0 4
65202: ARRAY
65203: PPUSH
65204: LD_VAR 0 1
65208: PPUSH
65209: CALL_OW 255
65213: PPUSH
65214: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65218: LD_VAR 0 2
65222: PUSH
65223: LD_VAR 0 4
65227: ARRAY
65228: PPUSH
65229: CALL_OW 141
// end ;
65233: GO 65065
65235: POP
65236: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65237: LD_VAR 0 1
65241: PPUSH
65242: LD_EXP 91
65246: PUSH
65247: LD_VAR 0 5
65251: ARRAY
65252: PUSH
65253: LD_INT 0
65255: PLUS
65256: PPUSH
65257: CALL_OW 505
// end ;
65261: LD_VAR 0 3
65265: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65266: LD_INT 0
65268: PPUSH
65269: PPUSH
65270: PPUSH
65271: PPUSH
// if not hack in hackTanks then
65272: LD_VAR 0 1
65276: PUSH
65277: LD_EXP 90
65281: IN
65282: NOT
65283: IFFALSE 65287
// exit ;
65285: GO 65527
// index := GetElementIndex ( hackTanks , hack ) ;
65287: LD_ADDR_VAR 0 4
65291: PUSH
65292: LD_EXP 90
65296: PPUSH
65297: LD_VAR 0 1
65301: PPUSH
65302: CALL 9476 0 2
65306: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65307: LD_ADDR_VAR 0 3
65311: PUSH
65312: DOUBLE
65313: LD_EXP 91
65317: PUSH
65318: LD_VAR 0 4
65322: ARRAY
65323: INC
65324: ST_TO_ADDR
65325: LD_INT 1
65327: PUSH
65328: FOR_DOWNTO
65329: IFFALSE 65501
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65331: LD_ADDR_VAR 0 5
65335: PUSH
65336: LD_EXP 91
65340: PUSH
65341: LD_VAR 0 4
65345: ARRAY
65346: PUSH
65347: LD_VAR 0 3
65351: ARRAY
65352: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65353: LD_VAR 0 5
65357: PUSH
65358: LD_INT 1
65360: ARRAY
65361: PPUSH
65362: CALL_OW 302
65366: NOT
65367: PUSH
65368: LD_VAR 0 5
65372: PUSH
65373: LD_INT 1
65375: ARRAY
65376: PPUSH
65377: CALL_OW 255
65381: PUSH
65382: LD_VAR 0 1
65386: PPUSH
65387: CALL_OW 255
65391: NONEQUAL
65392: OR
65393: IFFALSE 65499
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65395: LD_VAR 0 5
65399: PUSH
65400: LD_INT 1
65402: ARRAY
65403: PPUSH
65404: CALL_OW 305
65408: PUSH
65409: LD_VAR 0 5
65413: PUSH
65414: LD_INT 1
65416: ARRAY
65417: PPUSH
65418: CALL_OW 255
65422: PUSH
65423: LD_VAR 0 1
65427: PPUSH
65428: CALL_OW 255
65432: EQUAL
65433: AND
65434: IFFALSE 65458
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65436: LD_VAR 0 5
65440: PUSH
65441: LD_INT 1
65443: ARRAY
65444: PPUSH
65445: LD_VAR 0 5
65449: PUSH
65450: LD_INT 2
65452: ARRAY
65453: PPUSH
65454: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65458: LD_ADDR_EXP 91
65462: PUSH
65463: LD_EXP 91
65467: PPUSH
65468: LD_VAR 0 4
65472: PPUSH
65473: LD_EXP 91
65477: PUSH
65478: LD_VAR 0 4
65482: ARRAY
65483: PPUSH
65484: LD_VAR 0 3
65488: PPUSH
65489: CALL_OW 3
65493: PPUSH
65494: CALL_OW 1
65498: ST_TO_ADDR
// end ; end ;
65499: GO 65328
65501: POP
65502: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65503: LD_VAR 0 1
65507: PPUSH
65508: LD_EXP 91
65512: PUSH
65513: LD_VAR 0 4
65517: ARRAY
65518: PUSH
65519: LD_INT 0
65521: PLUS
65522: PPUSH
65523: CALL_OW 505
// end ;
65527: LD_VAR 0 2
65531: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65532: LD_INT 0
65534: PPUSH
65535: PPUSH
65536: PPUSH
65537: PPUSH
// if not hack in hackTanks then
65538: LD_VAR 0 1
65542: PUSH
65543: LD_EXP 90
65547: IN
65548: NOT
65549: IFFALSE 65553
// exit ;
65551: GO 65638
// index := GetElementIndex ( hackTanks , hack ) ;
65553: LD_ADDR_VAR 0 5
65557: PUSH
65558: LD_EXP 90
65562: PPUSH
65563: LD_VAR 0 1
65567: PPUSH
65568: CALL 9476 0 2
65572: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65573: LD_ADDR_VAR 0 4
65577: PUSH
65578: DOUBLE
65579: LD_INT 1
65581: DEC
65582: ST_TO_ADDR
65583: LD_EXP 91
65587: PUSH
65588: LD_VAR 0 5
65592: ARRAY
65593: PUSH
65594: FOR_TO
65595: IFFALSE 65636
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65597: LD_EXP 91
65601: PUSH
65602: LD_VAR 0 5
65606: ARRAY
65607: PUSH
65608: LD_VAR 0 4
65612: ARRAY
65613: PUSH
65614: LD_INT 1
65616: ARRAY
65617: PUSH
65618: LD_VAR 0 2
65622: EQUAL
65623: IFFALSE 65634
// KillUnit ( vehicle ) ;
65625: LD_VAR 0 2
65629: PPUSH
65630: CALL_OW 66
65634: GO 65594
65636: POP
65637: POP
// end ;
65638: LD_VAR 0 3
65642: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65643: LD_EXP 95
65647: NOT
65648: IFFALSE 65683
65650: GO 65652
65652: DISABLE
// begin initMiner := true ;
65653: LD_ADDR_EXP 95
65657: PUSH
65658: LD_INT 1
65660: ST_TO_ADDR
// minersList := [ ] ;
65661: LD_ADDR_EXP 96
65665: PUSH
65666: EMPTY
65667: ST_TO_ADDR
// minerMinesList := [ ] ;
65668: LD_ADDR_EXP 97
65672: PUSH
65673: EMPTY
65674: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65675: LD_ADDR_EXP 98
65679: PUSH
65680: LD_INT 5
65682: ST_TO_ADDR
// end ;
65683: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65684: LD_EXP 95
65688: PUSH
65689: LD_INT 34
65691: PUSH
65692: LD_INT 81
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PPUSH
65699: CALL_OW 69
65703: AND
65704: IFFALSE 66165
65706: GO 65708
65708: DISABLE
65709: LD_INT 0
65711: PPUSH
65712: PPUSH
65713: PPUSH
65714: PPUSH
// begin enable ;
65715: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65716: LD_ADDR_VAR 0 1
65720: PUSH
65721: LD_INT 34
65723: PUSH
65724: LD_INT 81
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PPUSH
65731: CALL_OW 69
65735: PUSH
65736: FOR_IN
65737: IFFALSE 65809
// begin if not i in minersList then
65739: LD_VAR 0 1
65743: PUSH
65744: LD_EXP 96
65748: IN
65749: NOT
65750: IFFALSE 65807
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
65752: LD_ADDR_EXP 96
65756: PUSH
65757: LD_EXP 96
65761: PPUSH
65762: LD_EXP 96
65766: PUSH
65767: LD_INT 1
65769: PLUS
65770: PPUSH
65771: LD_VAR 0 1
65775: PPUSH
65776: CALL_OW 1
65780: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
65781: LD_ADDR_EXP 97
65785: PUSH
65786: LD_EXP 97
65790: PPUSH
65791: LD_EXP 97
65795: PUSH
65796: LD_INT 1
65798: PLUS
65799: PPUSH
65800: EMPTY
65801: PPUSH
65802: CALL_OW 1
65806: ST_TO_ADDR
// end end ;
65807: GO 65736
65809: POP
65810: POP
// for i := minerMinesList downto 1 do
65811: LD_ADDR_VAR 0 1
65815: PUSH
65816: DOUBLE
65817: LD_EXP 97
65821: INC
65822: ST_TO_ADDR
65823: LD_INT 1
65825: PUSH
65826: FOR_DOWNTO
65827: IFFALSE 66163
// begin if IsLive ( minersList [ i ] ) then
65829: LD_EXP 96
65833: PUSH
65834: LD_VAR 0 1
65838: ARRAY
65839: PPUSH
65840: CALL_OW 300
65844: IFFALSE 65872
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
65846: LD_EXP 96
65850: PUSH
65851: LD_VAR 0 1
65855: ARRAY
65856: PPUSH
65857: LD_EXP 97
65861: PUSH
65862: LD_VAR 0 1
65866: ARRAY
65867: PPUSH
65868: CALL_OW 505
// if not minerMinesList [ i ] then
65872: LD_EXP 97
65876: PUSH
65877: LD_VAR 0 1
65881: ARRAY
65882: NOT
65883: IFFALSE 65887
// continue ;
65885: GO 65826
// for j := minerMinesList [ i ] downto 1 do
65887: LD_ADDR_VAR 0 2
65891: PUSH
65892: DOUBLE
65893: LD_EXP 97
65897: PUSH
65898: LD_VAR 0 1
65902: ARRAY
65903: INC
65904: ST_TO_ADDR
65905: LD_INT 1
65907: PUSH
65908: FOR_DOWNTO
65909: IFFALSE 66159
// begin side := GetSide ( minersList [ i ] ) ;
65911: LD_ADDR_VAR 0 3
65915: PUSH
65916: LD_EXP 96
65920: PUSH
65921: LD_VAR 0 1
65925: ARRAY
65926: PPUSH
65927: CALL_OW 255
65931: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
65932: LD_ADDR_VAR 0 4
65936: PUSH
65937: LD_EXP 97
65941: PUSH
65942: LD_VAR 0 1
65946: ARRAY
65947: PUSH
65948: LD_VAR 0 2
65952: ARRAY
65953: PUSH
65954: LD_INT 1
65956: ARRAY
65957: PPUSH
65958: LD_EXP 97
65962: PUSH
65963: LD_VAR 0 1
65967: ARRAY
65968: PUSH
65969: LD_VAR 0 2
65973: ARRAY
65974: PUSH
65975: LD_INT 2
65977: ARRAY
65978: PPUSH
65979: CALL_OW 428
65983: ST_TO_ADDR
// if not tmp then
65984: LD_VAR 0 4
65988: NOT
65989: IFFALSE 65993
// continue ;
65991: GO 65908
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
65993: LD_VAR 0 4
65997: PUSH
65998: LD_INT 81
66000: PUSH
66001: LD_VAR 0 3
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PPUSH
66010: CALL_OW 69
66014: IN
66015: PUSH
66016: LD_EXP 97
66020: PUSH
66021: LD_VAR 0 1
66025: ARRAY
66026: PUSH
66027: LD_VAR 0 2
66031: ARRAY
66032: PUSH
66033: LD_INT 1
66035: ARRAY
66036: PPUSH
66037: LD_EXP 97
66041: PUSH
66042: LD_VAR 0 1
66046: ARRAY
66047: PUSH
66048: LD_VAR 0 2
66052: ARRAY
66053: PUSH
66054: LD_INT 2
66056: ARRAY
66057: PPUSH
66058: CALL_OW 458
66062: AND
66063: IFFALSE 66157
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66065: LD_EXP 97
66069: PUSH
66070: LD_VAR 0 1
66074: ARRAY
66075: PUSH
66076: LD_VAR 0 2
66080: ARRAY
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: PPUSH
66086: LD_EXP 97
66090: PUSH
66091: LD_VAR 0 1
66095: ARRAY
66096: PUSH
66097: LD_VAR 0 2
66101: ARRAY
66102: PUSH
66103: LD_INT 2
66105: ARRAY
66106: PPUSH
66107: LD_VAR 0 3
66111: PPUSH
66112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66116: LD_ADDR_EXP 97
66120: PUSH
66121: LD_EXP 97
66125: PPUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: LD_EXP 97
66135: PUSH
66136: LD_VAR 0 1
66140: ARRAY
66141: PPUSH
66142: LD_VAR 0 2
66146: PPUSH
66147: CALL_OW 3
66151: PPUSH
66152: CALL_OW 1
66156: ST_TO_ADDR
// end ; end ;
66157: GO 65908
66159: POP
66160: POP
// end ;
66161: GO 65826
66163: POP
66164: POP
// end ;
66165: PPOPN 4
66167: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66168: LD_INT 0
66170: PPUSH
66171: PPUSH
// result := false ;
66172: LD_ADDR_VAR 0 4
66176: PUSH
66177: LD_INT 0
66179: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66180: LD_VAR 0 1
66184: PPUSH
66185: CALL_OW 264
66189: PUSH
66190: LD_INT 81
66192: EQUAL
66193: NOT
66194: IFFALSE 66198
// exit ;
66196: GO 66438
// index := GetElementIndex ( minersList , unit ) ;
66198: LD_ADDR_VAR 0 5
66202: PUSH
66203: LD_EXP 96
66207: PPUSH
66208: LD_VAR 0 1
66212: PPUSH
66213: CALL 9476 0 2
66217: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66218: LD_EXP 97
66222: PUSH
66223: LD_VAR 0 5
66227: ARRAY
66228: PUSH
66229: LD_EXP 98
66233: GREATEREQUAL
66234: IFFALSE 66238
// exit ;
66236: GO 66438
// ComMoveXY ( unit , x , y ) ;
66238: LD_VAR 0 1
66242: PPUSH
66243: LD_VAR 0 2
66247: PPUSH
66248: LD_VAR 0 3
66252: PPUSH
66253: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66257: LD_INT 35
66259: PPUSH
66260: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66264: LD_VAR 0 1
66268: PPUSH
66269: LD_VAR 0 2
66273: PPUSH
66274: LD_VAR 0 3
66278: PPUSH
66279: CALL 41228 0 3
66283: NOT
66284: PUSH
66285: LD_VAR 0 1
66289: PPUSH
66290: CALL_OW 314
66294: AND
66295: IFFALSE 66299
// exit ;
66297: GO 66438
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66299: LD_VAR 0 2
66303: PPUSH
66304: LD_VAR 0 3
66308: PPUSH
66309: CALL_OW 428
66313: PUSH
66314: LD_VAR 0 1
66318: EQUAL
66319: PUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: CALL_OW 314
66329: NOT
66330: AND
66331: IFFALSE 66257
// PlaySoundXY ( x , y , PlantMine ) ;
66333: LD_VAR 0 2
66337: PPUSH
66338: LD_VAR 0 3
66342: PPUSH
66343: LD_STRING PlantMine
66345: PPUSH
66346: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66350: LD_VAR 0 2
66354: PPUSH
66355: LD_VAR 0 3
66359: PPUSH
66360: LD_VAR 0 1
66364: PPUSH
66365: CALL_OW 255
66369: PPUSH
66370: LD_INT 0
66372: PPUSH
66373: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66377: LD_ADDR_EXP 97
66381: PUSH
66382: LD_EXP 97
66386: PPUSH
66387: LD_VAR 0 5
66391: PUSH
66392: LD_EXP 97
66396: PUSH
66397: LD_VAR 0 5
66401: ARRAY
66402: PUSH
66403: LD_INT 1
66405: PLUS
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PPUSH
66411: LD_VAR 0 2
66415: PUSH
66416: LD_VAR 0 3
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PPUSH
66425: CALL 9691 0 3
66429: ST_TO_ADDR
// result := true ;
66430: LD_ADDR_VAR 0 4
66434: PUSH
66435: LD_INT 1
66437: ST_TO_ADDR
// end ;
66438: LD_VAR 0 4
66442: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66443: LD_INT 0
66445: PPUSH
66446: PPUSH
66447: PPUSH
// if not unit in minersList then
66448: LD_VAR 0 1
66452: PUSH
66453: LD_EXP 96
66457: IN
66458: NOT
66459: IFFALSE 66463
// exit ;
66461: GO 66855
// index := GetElementIndex ( minersList , unit ) ;
66463: LD_ADDR_VAR 0 6
66467: PUSH
66468: LD_EXP 96
66472: PPUSH
66473: LD_VAR 0 1
66477: PPUSH
66478: CALL 9476 0 2
66482: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66483: LD_ADDR_VAR 0 5
66487: PUSH
66488: DOUBLE
66489: LD_EXP 97
66493: PUSH
66494: LD_VAR 0 6
66498: ARRAY
66499: INC
66500: ST_TO_ADDR
66501: LD_INT 1
66503: PUSH
66504: FOR_DOWNTO
66505: IFFALSE 66666
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66507: LD_EXP 97
66511: PUSH
66512: LD_VAR 0 6
66516: ARRAY
66517: PUSH
66518: LD_VAR 0 5
66522: ARRAY
66523: PUSH
66524: LD_INT 1
66526: ARRAY
66527: PUSH
66528: LD_VAR 0 2
66532: EQUAL
66533: PUSH
66534: LD_EXP 97
66538: PUSH
66539: LD_VAR 0 6
66543: ARRAY
66544: PUSH
66545: LD_VAR 0 5
66549: ARRAY
66550: PUSH
66551: LD_INT 2
66553: ARRAY
66554: PUSH
66555: LD_VAR 0 3
66559: EQUAL
66560: AND
66561: IFFALSE 66664
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66563: LD_EXP 97
66567: PUSH
66568: LD_VAR 0 6
66572: ARRAY
66573: PUSH
66574: LD_VAR 0 5
66578: ARRAY
66579: PUSH
66580: LD_INT 1
66582: ARRAY
66583: PPUSH
66584: LD_EXP 97
66588: PUSH
66589: LD_VAR 0 6
66593: ARRAY
66594: PUSH
66595: LD_VAR 0 5
66599: ARRAY
66600: PUSH
66601: LD_INT 2
66603: ARRAY
66604: PPUSH
66605: LD_VAR 0 1
66609: PPUSH
66610: CALL_OW 255
66614: PPUSH
66615: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66619: LD_ADDR_EXP 97
66623: PUSH
66624: LD_EXP 97
66628: PPUSH
66629: LD_VAR 0 6
66633: PPUSH
66634: LD_EXP 97
66638: PUSH
66639: LD_VAR 0 6
66643: ARRAY
66644: PPUSH
66645: LD_VAR 0 5
66649: PPUSH
66650: CALL_OW 3
66654: PPUSH
66655: CALL_OW 1
66659: ST_TO_ADDR
// exit ;
66660: POP
66661: POP
66662: GO 66855
// end ; end ;
66664: GO 66504
66666: POP
66667: POP
// for i := minerMinesList [ index ] downto 1 do
66668: LD_ADDR_VAR 0 5
66672: PUSH
66673: DOUBLE
66674: LD_EXP 97
66678: PUSH
66679: LD_VAR 0 6
66683: ARRAY
66684: INC
66685: ST_TO_ADDR
66686: LD_INT 1
66688: PUSH
66689: FOR_DOWNTO
66690: IFFALSE 66853
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66692: LD_EXP 97
66696: PUSH
66697: LD_VAR 0 6
66701: ARRAY
66702: PUSH
66703: LD_VAR 0 5
66707: ARRAY
66708: PUSH
66709: LD_INT 1
66711: ARRAY
66712: PPUSH
66713: LD_EXP 97
66717: PUSH
66718: LD_VAR 0 6
66722: ARRAY
66723: PUSH
66724: LD_VAR 0 5
66728: ARRAY
66729: PUSH
66730: LD_INT 2
66732: ARRAY
66733: PPUSH
66734: LD_VAR 0 2
66738: PPUSH
66739: LD_VAR 0 3
66743: PPUSH
66744: CALL_OW 298
66748: PUSH
66749: LD_INT 6
66751: LESS
66752: IFFALSE 66851
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66754: LD_EXP 97
66758: PUSH
66759: LD_VAR 0 6
66763: ARRAY
66764: PUSH
66765: LD_VAR 0 5
66769: ARRAY
66770: PUSH
66771: LD_INT 1
66773: ARRAY
66774: PPUSH
66775: LD_EXP 97
66779: PUSH
66780: LD_VAR 0 6
66784: ARRAY
66785: PUSH
66786: LD_VAR 0 5
66790: ARRAY
66791: PUSH
66792: LD_INT 2
66794: ARRAY
66795: PPUSH
66796: LD_VAR 0 1
66800: PPUSH
66801: CALL_OW 255
66805: PPUSH
66806: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66810: LD_ADDR_EXP 97
66814: PUSH
66815: LD_EXP 97
66819: PPUSH
66820: LD_VAR 0 6
66824: PPUSH
66825: LD_EXP 97
66829: PUSH
66830: LD_VAR 0 6
66834: ARRAY
66835: PPUSH
66836: LD_VAR 0 5
66840: PPUSH
66841: CALL_OW 3
66845: PPUSH
66846: CALL_OW 1
66850: ST_TO_ADDR
// end ; end ;
66851: GO 66689
66853: POP
66854: POP
// end ;
66855: LD_VAR 0 4
66859: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
66860: LD_INT 0
66862: PPUSH
66863: PPUSH
66864: PPUSH
66865: PPUSH
66866: PPUSH
66867: PPUSH
66868: PPUSH
66869: PPUSH
66870: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
66871: LD_VAR 0 1
66875: PPUSH
66876: CALL_OW 264
66880: PUSH
66881: LD_INT 81
66883: EQUAL
66884: NOT
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_EXP 96
66895: IN
66896: NOT
66897: OR
66898: IFFALSE 66902
// exit ;
66900: GO 67224
// index := GetElementIndex ( minersList , unit ) ;
66902: LD_ADDR_VAR 0 6
66906: PUSH
66907: LD_EXP 96
66911: PPUSH
66912: LD_VAR 0 1
66916: PPUSH
66917: CALL 9476 0 2
66921: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
66922: LD_ADDR_VAR 0 8
66926: PUSH
66927: LD_EXP 98
66931: PUSH
66932: LD_EXP 97
66936: PUSH
66937: LD_VAR 0 6
66941: ARRAY
66942: MINUS
66943: ST_TO_ADDR
// if not minesFreeAmount then
66944: LD_VAR 0 8
66948: NOT
66949: IFFALSE 66953
// exit ;
66951: GO 67224
// tmp := [ ] ;
66953: LD_ADDR_VAR 0 7
66957: PUSH
66958: EMPTY
66959: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
66960: LD_ADDR_VAR 0 5
66964: PUSH
66965: DOUBLE
66966: LD_INT 1
66968: DEC
66969: ST_TO_ADDR
66970: LD_VAR 0 8
66974: PUSH
66975: FOR_TO
66976: IFFALSE 67171
// begin _d := rand ( 0 , 5 ) ;
66978: LD_ADDR_VAR 0 11
66982: PUSH
66983: LD_INT 0
66985: PPUSH
66986: LD_INT 5
66988: PPUSH
66989: CALL_OW 12
66993: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
66994: LD_ADDR_VAR 0 12
66998: PUSH
66999: LD_INT 2
67001: PPUSH
67002: LD_INT 6
67004: PPUSH
67005: CALL_OW 12
67009: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67010: LD_ADDR_VAR 0 9
67014: PUSH
67015: LD_VAR 0 2
67019: PPUSH
67020: LD_VAR 0 11
67024: PPUSH
67025: LD_VAR 0 12
67029: PPUSH
67030: CALL_OW 272
67034: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67035: LD_ADDR_VAR 0 10
67039: PUSH
67040: LD_VAR 0 3
67044: PPUSH
67045: LD_VAR 0 11
67049: PPUSH
67050: LD_VAR 0 12
67054: PPUSH
67055: CALL_OW 273
67059: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67060: LD_VAR 0 9
67064: PPUSH
67065: LD_VAR 0 10
67069: PPUSH
67070: CALL_OW 488
67074: PUSH
67075: LD_VAR 0 9
67079: PUSH
67080: LD_VAR 0 10
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_VAR 0 7
67093: IN
67094: NOT
67095: AND
67096: PUSH
67097: LD_VAR 0 9
67101: PPUSH
67102: LD_VAR 0 10
67106: PPUSH
67107: CALL_OW 458
67111: NOT
67112: AND
67113: IFFALSE 67155
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67115: LD_ADDR_VAR 0 7
67119: PUSH
67120: LD_VAR 0 7
67124: PPUSH
67125: LD_VAR 0 7
67129: PUSH
67130: LD_INT 1
67132: PLUS
67133: PPUSH
67134: LD_VAR 0 9
67138: PUSH
67139: LD_VAR 0 10
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PPUSH
67148: CALL_OW 1
67152: ST_TO_ADDR
67153: GO 67169
// i := i - 1 ;
67155: LD_ADDR_VAR 0 5
67159: PUSH
67160: LD_VAR 0 5
67164: PUSH
67165: LD_INT 1
67167: MINUS
67168: ST_TO_ADDR
// end ;
67169: GO 66975
67171: POP
67172: POP
// for i in tmp do
67173: LD_ADDR_VAR 0 5
67177: PUSH
67178: LD_VAR 0 7
67182: PUSH
67183: FOR_IN
67184: IFFALSE 67222
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67186: LD_VAR 0 1
67190: PPUSH
67191: LD_VAR 0 5
67195: PUSH
67196: LD_INT 1
67198: ARRAY
67199: PPUSH
67200: LD_VAR 0 5
67204: PUSH
67205: LD_INT 2
67207: ARRAY
67208: PPUSH
67209: CALL 66168 0 3
67213: NOT
67214: IFFALSE 67220
// exit ;
67216: POP
67217: POP
67218: GO 67224
67220: GO 67183
67222: POP
67223: POP
// end ;
67224: LD_VAR 0 4
67228: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67229: LD_INT 0
67231: PPUSH
67232: PPUSH
67233: PPUSH
67234: PPUSH
67235: PPUSH
67236: PPUSH
67237: PPUSH
// if not GetClass ( unit ) = class_sniper then
67238: LD_VAR 0 1
67242: PPUSH
67243: CALL_OW 257
67247: PUSH
67248: LD_INT 5
67250: EQUAL
67251: NOT
67252: IFFALSE 67256
// exit ;
67254: GO 67644
// dist := 8 ;
67256: LD_ADDR_VAR 0 5
67260: PUSH
67261: LD_INT 8
67263: ST_TO_ADDR
// viewRange := 12 ;
67264: LD_ADDR_VAR 0 7
67268: PUSH
67269: LD_INT 12
67271: ST_TO_ADDR
// side := GetSide ( unit ) ;
67272: LD_ADDR_VAR 0 6
67276: PUSH
67277: LD_VAR 0 1
67281: PPUSH
67282: CALL_OW 255
67286: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67287: LD_INT 61
67289: PPUSH
67290: LD_VAR 0 6
67294: PPUSH
67295: CALL_OW 321
67299: PUSH
67300: LD_INT 2
67302: EQUAL
67303: IFFALSE 67313
// viewRange := 16 ;
67305: LD_ADDR_VAR 0 7
67309: PUSH
67310: LD_INT 16
67312: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67313: LD_VAR 0 1
67317: PPUSH
67318: LD_VAR 0 2
67322: PPUSH
67323: LD_VAR 0 3
67327: PPUSH
67328: CALL_OW 297
67332: PUSH
67333: LD_VAR 0 5
67337: GREATER
67338: IFFALSE 67417
// begin ComMoveXY ( unit , x , y ) ;
67340: LD_VAR 0 1
67344: PPUSH
67345: LD_VAR 0 2
67349: PPUSH
67350: LD_VAR 0 3
67354: PPUSH
67355: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67359: LD_INT 35
67361: PPUSH
67362: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67366: LD_VAR 0 1
67370: PPUSH
67371: LD_VAR 0 2
67375: PPUSH
67376: LD_VAR 0 3
67380: PPUSH
67381: CALL 41228 0 3
67385: NOT
67386: IFFALSE 67390
// exit ;
67388: GO 67644
// until GetDistUnitXY ( unit , x , y ) < dist ;
67390: LD_VAR 0 1
67394: PPUSH
67395: LD_VAR 0 2
67399: PPUSH
67400: LD_VAR 0 3
67404: PPUSH
67405: CALL_OW 297
67409: PUSH
67410: LD_VAR 0 5
67414: LESS
67415: IFFALSE 67359
// end ; ComTurnXY ( unit , x , y ) ;
67417: LD_VAR 0 1
67421: PPUSH
67422: LD_VAR 0 2
67426: PPUSH
67427: LD_VAR 0 3
67431: PPUSH
67432: CALL_OW 118
// wait ( 5 ) ;
67436: LD_INT 5
67438: PPUSH
67439: CALL_OW 67
// _d := GetDir ( unit ) ;
67443: LD_ADDR_VAR 0 10
67447: PUSH
67448: LD_VAR 0 1
67452: PPUSH
67453: CALL_OW 254
67457: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67458: LD_ADDR_VAR 0 8
67462: PUSH
67463: LD_VAR 0 1
67467: PPUSH
67468: CALL_OW 250
67472: PPUSH
67473: LD_VAR 0 10
67477: PPUSH
67478: LD_VAR 0 5
67482: PPUSH
67483: CALL_OW 272
67487: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67488: LD_ADDR_VAR 0 9
67492: PUSH
67493: LD_VAR 0 1
67497: PPUSH
67498: CALL_OW 251
67502: PPUSH
67503: LD_VAR 0 10
67507: PPUSH
67508: LD_VAR 0 5
67512: PPUSH
67513: CALL_OW 273
67517: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67518: LD_VAR 0 8
67522: PPUSH
67523: LD_VAR 0 9
67527: PPUSH
67528: CALL_OW 488
67532: NOT
67533: IFFALSE 67537
// exit ;
67535: GO 67644
// ComAnimCustom ( unit , 1 ) ;
67537: LD_VAR 0 1
67541: PPUSH
67542: LD_INT 1
67544: PPUSH
67545: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67549: LD_VAR 0 8
67553: PPUSH
67554: LD_VAR 0 9
67558: PPUSH
67559: LD_VAR 0 6
67563: PPUSH
67564: LD_VAR 0 7
67568: PPUSH
67569: CALL_OW 330
// repeat wait ( 1 ) ;
67573: LD_INT 1
67575: PPUSH
67576: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67580: LD_VAR 0 1
67584: PPUSH
67585: CALL_OW 316
67589: PUSH
67590: LD_VAR 0 1
67594: PPUSH
67595: CALL_OW 314
67599: OR
67600: PUSH
67601: LD_VAR 0 1
67605: PPUSH
67606: CALL_OW 302
67610: NOT
67611: OR
67612: PUSH
67613: LD_VAR 0 1
67617: PPUSH
67618: CALL_OW 301
67622: OR
67623: IFFALSE 67573
// RemoveSeeing ( _x , _y , side ) ;
67625: LD_VAR 0 8
67629: PPUSH
67630: LD_VAR 0 9
67634: PPUSH
67635: LD_VAR 0 6
67639: PPUSH
67640: CALL_OW 331
// end ;
67644: LD_VAR 0 4
67648: RET
