// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 568 0 0
// CreateDeposits ;
  12: CALL 739 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 1852 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 37800
  80: PUSH
  81: LD_INT 33600
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// schulzSecondSquad := [ ] ;
 233: LD_ADDR_EXP 26
 237: PUSH
 238: EMPTY
 239: ST_TO_ADDR
// for i := 1 to 3 do
 240: LD_ADDR_VAR 0 2
 244: PUSH
 245: DOUBLE
 246: LD_INT 1
 248: DEC
 249: ST_TO_ADDR
 250: LD_INT 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 293
// begin PrepareHuman ( false , i , 6 ) ;
 256: LD_INT 0
 258: PPUSH
 259: LD_VAR 0 2
 263: PPUSH
 264: LD_INT 6
 266: PPUSH
 267: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_EXP 26
 280: PPUSH
 281: CALL_OW 44
 285: PPUSH
 286: CALL 41888 0 2
 290: ST_TO_ADDR
// end ;
 291: GO 253
 293: POP
 294: POP
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: LD_EXP 20
 304: PUSH
 305: LD_EXP 21
 309: PUSH
 310: LD_EXP 22
 314: PUSH
 315: LD_EXP 23
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_EXP 26
 330: UNION
 331: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 4
 346: PPUSH
 347: CALL 6522 0 1
 351: PUSH
 352: FOR_TO
 353: IFFALSE 478
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 355: LD_INT 13
 357: PPUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 1
 363: PPUSH
 364: LD_INT 25
 366: PUSH
 367: LD_INT 27
 369: PUSH
 370: LD_INT 26
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: MOD
 390: PUSH
 391: LD_INT 1
 393: PLUS
 394: ARRAY
 395: PPUSH
 396: LD_INT 20
 398: PPUSH
 399: CALL 9435 0 5
// un := CreateVehicle ;
 403: LD_ADDR_VAR 0 3
 407: PUSH
 408: CALL_OW 45
 412: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 413: LD_VAR 0 3
 417: PPUSH
 418: LD_INT 2
 420: PPUSH
 421: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 425: LD_VAR 0 3
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 440: LD_VAR 0 4
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: LD_VAR 0 3
 453: PPUSH
 454: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 4
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL_OW 3
 475: ST_TO_ADDR
// end ;
 476: GO 352
 478: POP
 479: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 480: LD_INT 14
 482: PPUSH
 483: LD_INT 1
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: LD_INT 27
 491: PPUSH
 492: LD_INT 30
 494: PPUSH
 495: CALL 9435 0 5
// un := CreateVehicle ;
 499: LD_ADDR_VAR 0 3
 503: PUSH
 504: CALL_OW 45
 508: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 509: LD_VAR 0 3
 513: PPUSH
 514: LD_INT 2
 516: PPUSH
 517: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 521: LD_VAR 0 3
 525: PPUSH
 526: LD_INT 4
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// SetMark ( un , - 2 ) ;
 536: LD_VAR 0 3
 540: PPUSH
 541: LD_INT 2
 543: NEG
 544: PPUSH
 545: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 549: LD_EXP 18
 553: PPUSH
 554: LD_VAR 0 3
 558: PPUSH
 559: CALL_OW 52
// end ; end_of_file end_of_file
 563: LD_VAR 0 1
 567: RET
// export function CreateNature ; var i ; begin
 568: LD_INT 0
 570: PPUSH
 571: PPUSH
// PrepareApeman ( 0 ) ;
 572: LD_INT 0
 574: PPUSH
 575: CALL 38168 0 1
// for i := 1 to 5 do
 579: LD_ADDR_VAR 0 2
 583: PUSH
 584: DOUBLE
 585: LD_INT 1
 587: DEC
 588: ST_TO_ADDR
 589: LD_INT 5
 591: PUSH
 592: FOR_TO
 593: IFFALSE 612
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 595: CALL_OW 44
 599: PPUSH
 600: LD_INT 8
 602: PPUSH
 603: LD_INT 0
 605: PPUSH
 606: CALL_OW 49
 610: GO 592
 612: POP
 613: POP
// PrepareTiger ( 0 ) ;
 614: LD_INT 0
 616: PPUSH
 617: CALL 38276 0 1
// for i := 1 to 2 do
 621: LD_ADDR_VAR 0 2
 625: PUSH
 626: DOUBLE
 627: LD_INT 1
 629: DEC
 630: ST_TO_ADDR
 631: LD_INT 2
 633: PUSH
 634: FOR_TO
 635: IFFALSE 654
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 637: CALL_OW 44
 641: PPUSH
 642: LD_INT 8
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
 652: GO 634
 654: POP
 655: POP
// PrepareBird ;
 656: CALL 38457 0 0
// for i := 1 to 3 do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_INT 3
 672: PUSH
 673: FOR_TO
 674: IFFALSE 693
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 676: CALL_OW 44
 680: PPUSH
 681: LD_INT 8
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: CALL_OW 49
 691: GO 673
 693: POP
 694: POP
// PrepareFrog ;
 695: CALL 38377 0 0
// for i := 1 to 3 do
 699: LD_ADDR_VAR 0 2
 703: PUSH
 704: DOUBLE
 705: LD_INT 1
 707: DEC
 708: ST_TO_ADDR
 709: LD_INT 3
 711: PUSH
 712: FOR_TO
 713: IFFALSE 732
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 715: CALL_OW 44
 719: PPUSH
 720: LD_INT 9
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 49
 730: GO 712
 732: POP
 733: POP
// end ;
 734: LD_VAR 0 1
 738: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 739: LD_INT 0
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 745: LD_ADDR_VAR 0 3
 749: PUSH
 750: LD_INT 91
 752: PUSH
 753: LD_INT 13
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 52
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: LD_INT 115
 772: PUSH
 773: LD_INT 150
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 785: LD_ADDR_VAR 0 4
 789: PUSH
 790: LD_INT 82
 792: PUSH
 793: LD_INT 42
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 128
 802: PUSH
 803: LD_INT 132
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// for i in oil do
 814: LD_ADDR_VAR 0 2
 818: PUSH
 819: LD_VAR 0 3
 823: PUSH
 824: FOR_IN
 825: IFFALSE 854
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 2
 843: ARRAY
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: CALL_OW 62
 852: GO 824
 854: POP
 855: POP
// for i in sib do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: LD_VAR 0 4
 865: PUSH
 866: FOR_IN
 867: IFFALSE 896
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 1
 876: ARRAY
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 2
 885: ARRAY
 886: PPUSH
 887: LD_INT 3
 889: PPUSH
 890: CALL_OW 62
 894: GO 866
 896: POP
 897: POP
// end ;
 898: LD_VAR 0 1
 902: RET
// export function SaveEnvironment ( area , saveId ) ; begin
 903: LD_INT 0
 905: PPUSH
// result := ListEnvironmentArea ( area ) ;
 906: LD_ADDR_VAR 0 3
 910: PUSH
 911: LD_VAR 0 1
 915: PPUSH
 916: CALL_OW 353
 920: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
 921: LD_VAR 0 3
 925: PPUSH
 926: LD_VAR 0 2
 930: PPUSH
 931: CALL_OW 39
// end ;
 935: LD_VAR 0 3
 939: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
// result := [ ] ;
 945: LD_ADDR_VAR 0 3
 949: PUSH
 950: EMPTY
 951: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 952: LD_ADDR_VAR 0 4
 956: PUSH
 957: LD_INT 22
 959: PUSH
 960: LD_INT 2
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 30
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 30
 982: PUSH
 983: LD_INT 1
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PPUSH
 999: CALL_OW 69
1003: PUSH
1004: FOR_IN
1005: IFFALSE 1049
// begin base := GetBase ( i ) ;
1007: LD_ADDR_VAR 0 5
1011: PUSH
1012: LD_VAR 0 4
1016: PPUSH
1017: CALL_OW 274
1021: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 3
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: CALL_OW 279
1041: PPUSH
1042: CALL 41888 0 2
1046: ST_TO_ADDR
// end ;
1047: GO 1004
1049: POP
1050: POP
// if not result then
1051: LD_VAR 0 3
1055: NOT
1056: IFFALSE 1060
// exit ;
1058: GO 1074
// SaveVariable ( result , saveId ) ;
1060: LD_VAR 0 3
1064: PPUSH
1065: LD_VAR 0 2
1069: PPUSH
1070: CALL_OW 39
// end ;
1074: LD_VAR 0 3
1078: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1079: LD_INT 0
1081: PPUSH
1082: PPUSH
// result := [ ] ;
1083: LD_ADDR_VAR 0 3
1087: PUSH
1088: EMPTY
1089: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: LD_INT 22
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 21
1107: PUSH
1108: LD_INT 3
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: PUSH
1115: LD_INT 50
1117: PUSH
1118: EMPTY
1119: LIST
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PPUSH
1126: CALL_OW 69
1130: PUSH
1131: FOR_IN
1132: IFFALSE 1258
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1134: LD_ADDR_VAR 0 3
1138: PUSH
1139: LD_VAR 0 3
1143: PPUSH
1144: LD_VAR 0 4
1148: PPUSH
1149: CALL_OW 266
1153: PUSH
1154: LD_VAR 0 4
1158: PPUSH
1159: CALL_OW 250
1163: PUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 251
1173: PUSH
1174: LD_VAR 0 4
1178: PPUSH
1179: CALL_OW 254
1183: PUSH
1184: LD_VAR 0 4
1188: PPUSH
1189: CALL_OW 267
1193: PUSH
1194: LD_VAR 0 4
1198: PPUSH
1199: CALL_OW 256
1203: PUSH
1204: LD_VAR 0 4
1208: PPUSH
1209: LD_INT 1
1211: PPUSH
1212: CALL_OW 268
1216: PUSH
1217: LD_VAR 0 4
1221: PPUSH
1222: LD_INT 2
1224: PPUSH
1225: CALL_OW 268
1229: PUSH
1230: LD_VAR 0 4
1234: PPUSH
1235: CALL_OW 269
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: PPUSH
1251: CALL 41888 0 2
1255: ST_TO_ADDR
// end ;
1256: GO 1131
1258: POP
1259: POP
// if not result then
1260: LD_VAR 0 3
1264: NOT
1265: IFFALSE 1269
// exit ;
1267: GO 1283
// SaveVariable ( result , saveId ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_VAR 0 2
1278: PPUSH
1279: CALL_OW 39
// end ;
1283: LD_VAR 0 3
1287: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// result := [ ] ;
1292: LD_ADDR_VAR 0 3
1296: PUSH
1297: EMPTY
1298: ST_TO_ADDR
// for i := 1 to 100 do
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: DOUBLE
1305: LD_INT 1
1307: DEC
1308: ST_TO_ADDR
1309: LD_INT 100
1311: PUSH
1312: FOR_TO
1313: IFFALSE 1347
// result := Join ( result , GetTech ( i , side ) ) ;
1315: LD_ADDR_VAR 0 3
1319: PUSH
1320: LD_VAR 0 3
1324: PPUSH
1325: LD_VAR 0 4
1329: PPUSH
1330: LD_VAR 0 1
1334: PPUSH
1335: CALL_OW 321
1339: PPUSH
1340: CALL 41888 0 2
1344: ST_TO_ADDR
1345: GO 1312
1347: POP
1348: POP
// SaveVariable ( result , saveId ) ;
1349: LD_VAR 0 3
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 39
// end ; end_of_file
1363: LD_VAR 0 3
1367: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1368: LD_VAR 0 1
1372: PUSH
1373: LD_EXP 18
1377: EQUAL
1378: IFFALSE 1387
// YouLost ( Schulz ) ;
1380: LD_STRING Schulz
1382: PPUSH
1383: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1387: LD_VAR 0 1
1391: PPUSH
1392: CALL_OW 266
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 1
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: IN
1407: IFFALSE 1416
// YouLost ( Depot ) ;
1409: LD_STRING Depot
1411: PPUSH
1412: CALL_OW 104
// end ;
1416: PPOPN 1
1418: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1419: LD_VAR 0 1
1423: PPUSH
1424: CALL 61857 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1428: LD_VAR 0 1
1432: PUSH
1433: LD_INT 22
1435: PUSH
1436: LD_INT 2
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 21
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 23
1455: PUSH
1456: LD_INT 2
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: PPUSH
1468: CALL_OW 69
1472: PUSH
1473: LD_EXP 18
1477: DIFF
1478: IN
1479: IFFALSE 1507
// if killerSide = 2 then
1481: LD_VAR 0 2
1485: PUSH
1486: LD_INT 2
1488: EQUAL
1489: IFFALSE 1500
// YouLost ( TeamKiller ) else
1491: LD_STRING TeamKiller
1493: PPUSH
1494: CALL_OW 104
1498: GO 1507
// YouLost ( SoldierKilled ) ;
1500: LD_STRING SoldierKilled
1502: PPUSH
1503: CALL_OW 104
// end ;
1507: PPOPN 3
1509: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1510: LD_VAR 0 1
1514: PPUSH
1515: LD_VAR 0 2
1519: PPUSH
1520: CALL 61977 0 2
1524: PPOPN 2
1526: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1527: LD_ADDR_EXP 3
1531: PUSH
1532: LD_EXP 3
1536: PPUSH
1537: LD_VAR 0 3
1541: PUSH
1542: LD_VAR 0 4
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PPUSH
1551: CALL 41888 0 2
1555: ST_TO_ADDR
// end ;
1556: PPOPN 4
1558: END
// on SailEvent ( event ) do var i , eng ;
1559: LD_INT 0
1561: PPUSH
1562: PPUSH
// begin if event = 1 then
1563: LD_VAR 0 1
1567: PUSH
1568: LD_INT 1
1570: EQUAL
1571: IFFALSE 1849
// begin repeat ComExitVehicle ( Lemmy ) ;
1573: LD_EXP 20
1577: PPUSH
1578: CALL_OW 121
// wait ( 0 0$1 ) ;
1582: LD_INT 35
1584: PPUSH
1585: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1589: LD_EXP 20
1593: PPUSH
1594: CALL_OW 310
1598: NOT
1599: IFFALSE 1573
// wait ( 3 ) ;
1601: LD_INT 3
1603: PPUSH
1604: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1608: LD_EXP 20
1612: PPUSH
1613: CALL_OW 314
1617: NOT
1618: IFFALSE 1641
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1620: LD_EXP 20
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 69
1630: PPUSH
1631: LD_INT 14
1633: PPUSH
1634: LD_INT 2
1636: PPUSH
1637: CALL_OW 145
// wait ( 0 0$1 ) ;
1641: LD_INT 35
1643: PPUSH
1644: CALL_OW 67
// until HasTask ( Lemmy ) ;
1648: LD_EXP 20
1652: PPUSH
1653: CALL_OW 314
1657: IFFALSE 1608
// wait ( 0 0$2 ) ;
1659: LD_INT 70
1661: PPUSH
1662: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_EXP 26
1675: PPUSH
1676: LD_INT 3
1678: PUSH
1679: LD_INT 25
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL_OW 72
1697: PUSH
1698: LD_EXP 21
1702: UNION
1703: PUSH
1704: LD_EXP 23
1708: UNION
1709: PUSH
1710: LD_EXP 22
1714: UNION
1715: PUSH
1716: FOR_IN
1717: IFFALSE 1752
// begin ComExitVehicle ( i ) ;
1719: LD_VAR 0 2
1723: PPUSH
1724: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1728: LD_INT 10
1730: PPUSH
1731: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1735: LD_VAR 0 2
1739: PPUSH
1740: LD_INT 69
1742: PPUSH
1743: LD_INT 14
1745: PPUSH
1746: CALL_OW 171
// end ;
1750: GO 1716
1752: POP
1753: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1754: LD_ADDR_VAR 0 3
1758: PUSH
1759: LD_EXP 26
1763: PPUSH
1764: LD_INT 25
1766: PUSH
1767: LD_INT 2
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PPUSH
1774: CALL_OW 72
1778: ST_TO_ADDR
// if not eng then
1779: LD_VAR 0 3
1783: NOT
1784: IFFALSE 1788
// exit ;
1786: GO 1849
// ComExitVehicle ( eng ) ;
1788: LD_VAR 0 3
1792: PPUSH
1793: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1797: LD_INT 10
1799: PPUSH
1800: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
1804: LD_VAR 0 3
1808: PPUSH
1809: LD_INT 55
1811: PPUSH
1812: LD_INT 42
1814: PPUSH
1815: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
1819: LD_VAR 0 3
1823: PPUSH
1824: LD_INT 84
1826: PPUSH
1827: LD_INT 47
1829: PPUSH
1830: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 70
1841: PPUSH
1842: LD_INT 19
1844: PPUSH
1845: CALL_OW 171
// end ; end ; end_of_file
1849: PPOPN 3
1851: END
// export function Action ; var i ; begin
1852: LD_INT 0
1854: PPUSH
1855: PPUSH
// Video ( true ) ;
1856: LD_INT 1
1858: PPUSH
1859: CALL 41860 0 1
// CenterNowOnXY ( 18 , 15 ) ;
1863: LD_INT 18
1865: PPUSH
1866: LD_INT 15
1868: PPUSH
1869: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
1873: LD_EXP 18
1877: PPUSH
1878: LD_INT 80
1880: PPUSH
1881: LD_INT 28
1883: PPUSH
1884: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
1888: LD_EXP 20
1892: PPUSH
1893: LD_INT 61
1895: PPUSH
1896: LD_INT 17
1898: PPUSH
1899: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
1903: LD_EXP 22
1907: PPUSH
1908: LD_INT 72
1910: PPUSH
1911: LD_INT 28
1913: PPUSH
1914: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
1918: LD_EXP 23
1922: PPUSH
1923: LD_INT 74
1925: PPUSH
1926: LD_INT 22
1928: PPUSH
1929: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
1933: LD_EXP 21
1937: PPUSH
1938: LD_INT 68
1940: PPUSH
1941: LD_INT 22
1943: PPUSH
1944: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
1948: LD_EXP 26
1952: PPUSH
1953: LD_INT 83
1955: PPUSH
1956: LD_INT 37
1958: PPUSH
1959: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
1963: LD_EXP 18
1967: PPUSH
1968: LD_STRING DL-Intro-8
1970: PPUSH
1971: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1975: LD_EXP 18
1979: PPUSH
1980: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
1984: LD_EXP 18
1988: PPUSH
1989: LD_STRING DL-Intro-9
1991: PPUSH
1992: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1996: LD_EXP 18
2000: PPUSH
2001: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2005: LD_EXP 18
2009: PPUSH
2010: LD_STRING DL-Intro-10
2012: PPUSH
2013: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2017: LD_INT 80
2019: PPUSH
2020: LD_INT 28
2022: PPUSH
2023: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2027: LD_INT 35
2029: PPUSH
2030: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2034: LD_INT 22
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 92
2046: PUSH
2047: LD_INT 80
2049: PUSH
2050: LD_INT 28
2052: PUSH
2053: LD_INT 6
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PPUSH
2066: CALL_OW 69
2070: IFFALSE 2027
// RaiseSailEvent ( 1 ) ;
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2079: LD_INT 10
2081: PPUSH
2082: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2086: LD_EXP 18
2090: PPUSH
2091: LD_STRING DL-Intro-11
2093: PPUSH
2094: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2098: LD_EXP 24
2102: PPUSH
2103: LD_STRING DOm-Intro-12
2105: PPUSH
2106: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2110: LD_EXP 24
2114: PPUSH
2115: LD_STRING DOm-Intro-13
2117: PPUSH
2118: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2122: LD_EXP 18
2126: PPUSH
2127: LD_STRING DL-Intro-14
2129: PPUSH
2130: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2134: LD_EXP 18
2138: PPUSH
2139: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2143: LD_INT 10
2145: PPUSH
2146: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2150: LD_EXP 18
2154: PPUSH
2155: LD_INT 73
2157: PPUSH
2158: LD_INT 17
2160: PPUSH
2161: CALL_OW 111
// wait ( 0 0$2 ) ;
2165: LD_INT 70
2167: PPUSH
2168: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2172: LD_EXP 18
2176: PPUSH
2177: LD_STRING DL-Intro-15
2179: PPUSH
2180: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2184: LD_EXP 20
2188: PPUSH
2189: LD_STRING DLt-Intro-16
2191: PPUSH
2192: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2196: LD_EXP 20
2200: PPUSH
2201: LD_STRING DLt-Intro-17
2203: PPUSH
2204: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2208: LD_INT 35
2210: PPUSH
2211: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2215: LD_INT 22
2217: PUSH
2218: LD_INT 2
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 30
2227: PUSH
2228: LD_INT 0
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PPUSH
2239: CALL_OW 69
2243: IFFALSE 2208
// wait ( 0 0$2 ) ;
2245: LD_INT 70
2247: PPUSH
2248: CALL_OW 67
// Video ( false ) ;
2252: LD_INT 0
2254: PPUSH
2255: CALL 41860 0 1
// tick := 0 ;
2259: LD_ADDR_OWVAR 1
2263: PUSH
2264: LD_INT 0
2266: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2267: LD_STRING M1
2269: PPUSH
2270: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 2
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2287: LD_INT 35
2289: PPUSH
2290: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
2294: LD_INT 22
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 30
2306: PUSH
2307: LD_INT 0
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: LD_INT 57
2316: PUSH
2317: EMPTY
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: PPUSH
2325: CALL_OW 69
2329: IFFALSE 2287
// DialogueOn ;
2331: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2335: LD_EXP 18
2339: PPUSH
2340: LD_STRING DL-Intro-18
2342: PPUSH
2343: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2347: LD_EXP 18
2351: PPUSH
2352: LD_STRING DL-Intro-19
2354: PPUSH
2355: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2359: LD_EXP 18
2363: PPUSH
2364: LD_STRING DL-Intro-20
2366: PPUSH
2367: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2371: LD_EXP 20
2375: PPUSH
2376: LD_STRING DLt-Intro-21
2378: PPUSH
2379: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2383: LD_EXP 20
2387: PPUSH
2388: LD_STRING DLt-Intro-22
2390: PPUSH
2391: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2395: LD_EXP 20
2399: PPUSH
2400: LD_STRING DLt-Intro-23
2402: PPUSH
2403: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2407: LD_EXP 18
2411: PPUSH
2412: LD_STRING DL-Intro-24
2414: PPUSH
2415: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2419: LD_EXP 20
2423: PPUSH
2424: LD_STRING DLt-Intro-25
2426: PPUSH
2427: CALL_OW 88
// DialogueOff ;
2431: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2435: LD_STRING M2
2437: PPUSH
2438: CALL_OW 337
// Query ( Prepare ) ;
2442: LD_STRING Prepare
2444: PPUSH
2445: CALL_OW 97
// end ;
2449: LD_VAR 0 1
2453: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2454: LD_INT 22
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 30
2466: PUSH
2467: LD_INT 15
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PPUSH
2478: CALL_OW 69
2482: IFFALSE 2499
2484: GO 2486
2486: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2487: LD_EXP 18
2491: PPUSH
2492: LD_STRING DL-Cam-1
2494: PPUSH
2495: CALL_OW 88
2499: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2500: LD_OWVAR 1
2504: PUSH
2505: LD_EXP 4
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: GREATEREQUAL
2514: IFFALSE 2539
2516: GO 2518
2518: DISABLE
// begin DialogueOn ;
2519: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2523: LD_EXP 18
2527: PPUSH
2528: LD_STRING DL-Faster-1
2530: PPUSH
2531: CALL_OW 88
// DialogueOff ;
2535: CALL_OW 7
// end ;
2539: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2540: LD_OWVAR 1
2544: PUSH
2545: LD_EXP 4
2549: PUSH
2550: LD_INT 2
2552: DIV
2553: PUSH
2554: LD_INT 10500
2556: PLUS
2557: GREATEREQUAL
2558: IFFALSE 2583
2560: GO 2562
2562: DISABLE
// begin DialogueOn ;
2563: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2567: LD_EXP 18
2571: PPUSH
2572: LD_STRING DL-Faster-2
2574: PPUSH
2575: CALL_OW 88
// DialogueOff ;
2579: CALL_OW 7
// end ;
2583: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2584: LD_INT 22
2586: PUSH
2587: LD_INT 2
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 57
2596: PUSH
2597: EMPTY
2598: LIST
2599: PUSH
2600: LD_INT 2
2602: PUSH
2603: LD_INT 30
2605: PUSH
2606: LD_INT 6
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 30
2615: PUSH
2616: LD_INT 7
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 30
2625: PUSH
2626: LD_INT 8
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 69
2648: PUSH
2649: LD_INT 22
2651: PUSH
2652: LD_INT 2
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_INT 3
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: AND
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 2
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 57
2698: PUSH
2699: EMPTY
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 32
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: PPUSH
2717: CALL_OW 69
2721: PUSH
2722: LD_INT 3
2724: GREATEREQUAL
2725: AND
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 57
2739: PUSH
2740: EMPTY
2741: LIST
2742: PUSH
2743: LD_INT 30
2745: PUSH
2746: LD_INT 5
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 69
2762: AND
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 2
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 57
2776: PUSH
2777: EMPTY
2778: LIST
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 30
2785: PUSH
2786: LD_INT 26
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 30
2795: PUSH
2796: LD_INT 28
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: PPUSH
2813: CALL_OW 69
2817: AND
2818: IFFALSE 2855
2820: GO 2822
2822: DISABLE
// begin if tick <= 8 8$00 then
2823: LD_OWVAR 1
2827: PUSH
2828: LD_INT 16800
2830: LESSEQUAL
2831: IFFALSE 2840
// SetAchievement ( ACH_BOB ) ;
2833: LD_STRING ACH_BOB
2835: PPUSH
2836: CALL_OW 543
// baseDone := true ;
2840: LD_ADDR_EXP 5
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
2848: LD_STRING M1out
2850: PPUSH
2851: CALL_OW 337
// end ;
2855: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
2856: LD_EXP 5
2860: PUSH
2861: LD_INT 22
2863: PUSH
2864: LD_INT 2
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 21
2873: PUSH
2874: LD_INT 2
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 2
2886: PUSH
2887: LD_INT 34
2889: PUSH
2890: LD_INT 32
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 34
2899: PUSH
2900: LD_INT 88
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: LIST
2920: PPUSH
2921: CALL_OW 69
2925: PUSH
2926: LD_INT 22
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 21
2938: PUSH
2939: LD_INT 1
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: LD_INT 23
2948: PUSH
2949: LD_INT 2
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: PPUSH
2961: CALL_OW 69
2965: PPUSH
2966: CALL 6522 0 1
2970: GREATEREQUAL
2971: AND
2972: IFFALSE 3064
2974: GO 2976
2976: DISABLE
// begin DialogueOn ;
2977: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
2981: LD_EXP 18
2985: PPUSH
2986: LD_STRING DL-Ready-1
2988: PPUSH
2989: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
2993: LD_INT 22
2995: PUSH
2996: LD_INT 2
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: LD_INT 23
3005: PUSH
3006: LD_INT 0
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 69
3021: IFFALSE 3035
// Say ( Schulz , DL-Ready-2 ) ;
3023: LD_EXP 18
3027: PPUSH
3028: LD_STRING DL-Ready-2
3030: PPUSH
3031: CALL_OW 88
// DialogueOff ;
3035: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3039: LD_STRING M3
3041: PPUSH
3042: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3046: LD_INT 7
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: CALL_OW 424
// canGo := true ;
3056: LD_ADDR_EXP 6
3060: PUSH
3061: LD_INT 1
3063: ST_TO_ADDR
// end ;
3064: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3065: LD_EXP 6
3069: PUSH
3070: LD_INT 7
3072: PPUSH
3073: LD_INT 22
3075: PUSH
3076: LD_INT 2
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: PUSH
3083: LD_INT 21
3085: PUSH
3086: LD_INT 2
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 33
3095: PUSH
3096: LD_INT 1
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 58
3108: PUSH
3109: EMPTY
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: PPUSH
3122: CALL_OW 70
3126: PPUSH
3127: CALL 6522 0 1
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 2
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 21
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 23
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PPUSH
3172: CALL 6522 0 1
3176: GREATEREQUAL
3177: AND
3178: PUSH
3179: LD_INT 22
3181: PUSH
3182: LD_INT 2
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 21
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 3
3201: PUSH
3202: LD_INT 55
3204: PUSH
3205: EMPTY
3206: LIST
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 23
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: PPUSH
3228: CALL_OW 69
3232: PPUSH
3233: CALL 6522 0 1
3237: PUSH
3238: LD_INT 0
3240: EQUAL
3241: AND
3242: IFFALSE 4295
3244: GO 3246
3246: DISABLE
3247: LD_INT 0
3249: PPUSH
3250: PPUSH
3251: PPUSH
3252: PPUSH
3253: PPUSH
// begin enable ;
3254: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_INT 7
3262: PPUSH
3263: LD_INT 22
3265: PUSH
3266: LD_INT 2
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: PUSH
3273: LD_INT 21
3275: PUSH
3276: LD_INT 2
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 70
3291: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_INT 2
3299: PUSH
3300: LD_INT 34
3302: PUSH
3303: LD_INT 88
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 34
3312: PUSH
3313: LD_INT 32
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: IFFALSE 3340
// begin Query ( InvalidWeapon ) ;
3331: LD_STRING InvalidWeapon
3333: PPUSH
3334: CALL_OW 97
// exit ;
3338: GO 4295
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3340: LD_VAR 0 2
3344: PPUSH
3345: LD_INT 3
3347: PUSH
3348: LD_INT 24
3350: PUSH
3351: LD_INT 1000
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 72
3366: IFFALSE 3377
// begin Query ( HealthLevel ) ;
3368: LD_STRING HealthLevel
3370: PPUSH
3371: CALL_OW 97
// exit ;
3375: GO 4295
// end ; for i in tmp do
3377: LD_ADDR_VAR 0 1
3381: PUSH
3382: LD_VAR 0 2
3386: PUSH
3387: FOR_IN
3388: IFFALSE 3433
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 80 then
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 262
3399: PUSH
3400: LD_INT 1
3402: EQUAL
3403: PUSH
3404: LD_VAR 0 1
3408: PPUSH
3409: CALL_OW 261
3413: PUSH
3414: LD_INT 80
3416: LESS
3417: AND
3418: IFFALSE 3431
// begin Query ( FuelLevel ) ;
3420: LD_STRING FuelLevel
3422: PPUSH
3423: CALL_OW 97
// exit ;
3427: POP
3428: POP
3429: GO 4295
// end ;
3431: GO 3387
3433: POP
3434: POP
// disable ;
3435: DISABLE
// saveVehicles := [ ] ;
3436: LD_ADDR_VAR 0 3
3440: PUSH
3441: EMPTY
3442: ST_TO_ADDR
// for i in tmp do
3443: LD_ADDR_VAR 0 1
3447: PUSH
3448: LD_VAR 0 2
3452: PUSH
3453: FOR_IN
3454: IFFALSE 3563
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3456: LD_ADDR_VAR 0 3
3460: PUSH
3461: LD_VAR 0 3
3465: PPUSH
3466: LD_VAR 0 1
3470: PPUSH
3471: CALL_OW 265
3475: PUSH
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 262
3485: PUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 263
3495: PUSH
3496: LD_VAR 0 1
3500: PPUSH
3501: CALL_OW 264
3505: PUSH
3506: LD_VAR 0 1
3510: PPUSH
3511: CALL_OW 248
3515: PUSH
3516: LD_VAR 0 1
3520: PPUSH
3521: CALL_OW 261
3525: PUSH
3526: LD_VAR 0 1
3530: PPUSH
3531: CALL_OW 271
3535: PUSH
3536: LD_VAR 0 1
3540: PPUSH
3541: CALL_OW 311
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: PPUSH
3556: CALL 41888 0 2
3560: ST_TO_ADDR
3561: GO 3453
3563: POP
3564: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: LD_INT 22
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 21
3582: PUSH
3583: LD_INT 2
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 50
3592: PUSH
3593: EMPTY
3594: LIST
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: LIST
3600: PPUSH
3601: CALL_OW 69
3605: PUSH
3606: LD_VAR 0 2
3610: DIFF
3611: ST_TO_ADDR
// if otherVehicles then
3612: LD_VAR 0 4
3616: IFFALSE 3792
// begin tmp := [ ] ;
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: EMPTY
3624: ST_TO_ADDR
// for i in otherVehicles do
3625: LD_ADDR_VAR 0 1
3629: PUSH
3630: LD_VAR 0 4
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3778
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_VAR 0 2
3647: PPUSH
3648: LD_VAR 0 1
3652: PPUSH
3653: CALL_OW 265
3657: PUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: CALL_OW 262
3667: PUSH
3668: LD_VAR 0 1
3672: PPUSH
3673: CALL_OW 263
3677: PUSH
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 264
3687: PUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 248
3697: PUSH
3698: LD_VAR 0 1
3702: PPUSH
3703: CALL_OW 261
3707: PUSH
3708: LD_VAR 0 1
3712: PPUSH
3713: CALL_OW 271
3717: PUSH
3718: LD_VAR 0 1
3722: PPUSH
3723: CALL_OW 250
3727: PUSH
3728: LD_VAR 0 1
3732: PPUSH
3733: CALL_OW 251
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 254
3747: PUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: CALL_OW 256
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PPUSH
3771: CALL 41888 0 2
3775: ST_TO_ADDR
3776: GO 3635
3778: POP
3779: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
3780: LD_VAR 0 2
3784: PPUSH
3785: LD_STRING 09_otherVehicles
3787: PPUSH
3788: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) then
3792: LD_VAR 0 3
3796: PPUSH
3797: LD_INT 32
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 72
3811: NOT
3812: IFFALSE 3821
// SetAchievement ( ACH_GREEN ) ;
3814: LD_STRING ACH_GREEN
3816: PPUSH
3817: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
3821: LD_EXP 18
3825: PPUSH
3826: LD_STRING 09_Schulz
3828: PPUSH
3829: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
3833: LD_EXP 18
3837: PPUSH
3838: LD_STRING 09_Schulz_ID
3840: PPUSH
3841: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
3845: LD_EXP 20
3849: PPUSH
3850: LD_STRING 09_Lemmy
3852: PPUSH
3853: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
3857: LD_EXP 20
3861: PPUSH
3862: LD_STRING 09_Lemmy_ID
3864: PPUSH
3865: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
3869: LD_EXP 22
3873: PPUSH
3874: LD_STRING 09_Nia
3876: PPUSH
3877: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
3881: LD_EXP 22
3885: PPUSH
3886: LD_STRING 09_Nia_ID
3888: PPUSH
3889: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
3893: LD_EXP 21
3897: PPUSH
3898: LD_STRING 09_Mia
3900: PPUSH
3901: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
3905: LD_EXP 21
3909: PPUSH
3910: LD_STRING 09_Mia_ID
3912: PPUSH
3913: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
3917: LD_EXP 23
3921: PPUSH
3922: LD_STRING 09_Jenna
3924: PPUSH
3925: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
3929: LD_EXP 23
3933: PPUSH
3934: LD_STRING 09_Jenna_ID
3936: PPUSH
3937: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
3941: LD_EXP 26
3945: PPUSH
3946: LD_STRING 09_schulzSecondSquad
3948: PPUSH
3949: CALL_OW 38
// for i := 1 to schulzSecondSquad do
3953: LD_ADDR_VAR 0 1
3957: PUSH
3958: DOUBLE
3959: LD_INT 1
3961: DEC
3962: ST_TO_ADDR
3963: LD_EXP 26
3967: PUSH
3968: FOR_TO
3969: IFFALSE 3997
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
3971: LD_EXP 26
3975: PUSH
3976: LD_VAR 0 1
3980: ARRAY
3981: PPUSH
3982: LD_STRING 09_random_ID_
3984: PUSH
3985: LD_VAR 0 1
3989: STR
3990: PPUSH
3991: CALL_OW 39
3995: GO 3968
3997: POP
3998: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
3999: LD_VAR 0 3
4003: PPUSH
4004: LD_STRING 09_vehicles
4006: PPUSH
4007: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4011: LD_OWVAR 1
4015: PPUSH
4016: LD_STRING 09_tick
4018: PPUSH
4019: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4023: LD_INT 6
4025: PPUSH
4026: LD_STRING 09_env
4028: PPUSH
4029: CALL 903 0 2
// SaveTech ( 2 , 09_tech ) ;
4033: LD_INT 2
4035: PPUSH
4036: LD_STRING 09_tech
4038: PPUSH
4039: CALL 1288 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4043: LD_INT 2
4045: PPUSH
4046: LD_STRING 09_materials
4048: PPUSH
4049: CALL 940 0 2
// SaveBase ( 2 , 09_buildings ) ;
4053: LD_INT 2
4055: PPUSH
4056: LD_STRING 09_buildings
4058: PPUSH
4059: CALL 1079 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4063: LD_INT 22
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 23
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 69
4091: PPUSH
4092: LD_STRING 09_apes
4094: PPUSH
4095: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4099: LD_EXP 4
4103: PPUSH
4104: LD_STRING 09_timeToHeikeDead
4106: PPUSH
4107: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4111: LD_EXP 3
4115: PPUSH
4116: LD_STRING 09_cameras
4118: PPUSH
4119: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4123: LD_ADDR_VAR 0 2
4127: PUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 0
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 23
4140: PUSH
4141: LD_INT 0
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: LD_INT 50
4150: PUSH
4151: EMPTY
4152: LIST
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 69
4163: ST_TO_ADDR
// if tmp then
4164: LD_VAR 0 2
4168: IFFALSE 4278
// begin animals := [ ] ;
4170: LD_ADDR_VAR 0 5
4174: PUSH
4175: EMPTY
4176: ST_TO_ADDR
// for i in tmp do
4177: LD_ADDR_VAR 0 1
4181: PUSH
4182: LD_VAR 0 2
4186: PUSH
4187: FOR_IN
4188: IFFALSE 4264
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_VAR 0 5
4199: PPUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 257
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 250
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 251
4229: PUSH
4230: LD_VAR 0 1
4234: PPUSH
4235: CALL_OW 254
4239: PUSH
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 256
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: PPUSH
4257: CALL 41888 0 2
4261: ST_TO_ADDR
4262: GO 4187
4264: POP
4265: POP
// SaveVariable ( animals , 09_animals ) ;
4266: LD_VAR 0 5
4270: PPUSH
4271: LD_STRING 09_animals
4273: PPUSH
4274: CALL_OW 39
// end ; wait ( 3 ) ;
4278: LD_INT 3
4280: PPUSH
4281: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4285: LD_INT 1
4287: PPUSH
4288: LD_STRING %2
4290: PPUSH
4291: CALL_OW 340
// end ; end_of_file
4295: PPOPN 5
4297: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4298: LD_OWVAR 1
4302: PUSH
4303: LD_INT 14700
4305: LESS
4306: IFFALSE 4339
4308: GO 4310
4310: DISABLE
// begin enable ;
4311: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 5
4317: PPUSH
4318: CALL_OW 12
4322: PPUSH
4323: LD_INT 85
4325: PPUSH
4326: LD_INT 44
4328: PPUSH
4329: LD_INT 30
4331: PPUSH
4332: LD_INT 1
4334: PPUSH
4335: CALL_OW 56
// end ;
4339: END
// every 0 0$29 trigger tick < 20 20$00 do
4340: LD_OWVAR 1
4344: PUSH
4345: LD_INT 42000
4347: LESS
4348: IFFALSE 4419
4350: GO 4352
4352: DISABLE
// begin enable ;
4353: ENABLE
// if Prob ( 50 ) then
4354: LD_INT 50
4356: PPUSH
4357: CALL_OW 13
4361: IFFALSE 4392
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4363: LD_INT 1
4365: PPUSH
4366: LD_INT 5
4368: PPUSH
4369: CALL_OW 12
4373: PPUSH
4374: LD_INT 72
4376: PPUSH
4377: LD_INT 109
4379: PPUSH
4380: LD_INT 22
4382: PPUSH
4383: LD_INT 1
4385: PPUSH
4386: CALL_OW 56
4390: GO 4419
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4392: LD_INT 1
4394: PPUSH
4395: LD_INT 5
4397: PPUSH
4398: CALL_OW 12
4402: PPUSH
4403: LD_INT 140
4405: PPUSH
4406: LD_INT 73
4408: PPUSH
4409: LD_INT 22
4411: PPUSH
4412: LD_INT 1
4414: PPUSH
4415: CALL_OW 56
4419: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4420: LD_INT 0
4422: PPUSH
4423: PPUSH
// if exist_mode then
4424: LD_VAR 0 2
4428: IFFALSE 4453
// unit := CreateCharacter ( prefix & ident ) else
4430: LD_ADDR_VAR 0 5
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_VAR 0 1
4444: STR
4445: PPUSH
4446: CALL_OW 34
4450: ST_TO_ADDR
4451: GO 4468
// unit := NewCharacter ( ident ) ;
4453: LD_ADDR_VAR 0 5
4457: PUSH
4458: LD_VAR 0 1
4462: PPUSH
4463: CALL_OW 25
4467: ST_TO_ADDR
// result := unit ;
4468: LD_ADDR_VAR 0 4
4472: PUSH
4473: LD_VAR 0 5
4477: ST_TO_ADDR
// end ;
4478: LD_VAR 0 4
4482: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4483: LD_INT 0
4485: PPUSH
4486: PPUSH
// if not side or not nation then
4487: LD_VAR 0 1
4491: NOT
4492: PUSH
4493: LD_VAR 0 2
4497: NOT
4498: OR
4499: IFFALSE 4503
// exit ;
4501: GO 5271
// case nation of nation_american :
4503: LD_VAR 0 2
4507: PUSH
4508: LD_INT 1
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4730
4516: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4517: LD_ADDR_VAR 0 4
4521: PUSH
4522: LD_INT 35
4524: PUSH
4525: LD_INT 45
4527: PUSH
4528: LD_INT 46
4530: PUSH
4531: LD_INT 47
4533: PUSH
4534: LD_INT 82
4536: PUSH
4537: LD_INT 83
4539: PUSH
4540: LD_INT 84
4542: PUSH
4543: LD_INT 85
4545: PUSH
4546: LD_INT 86
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: LD_INT 2
4554: PUSH
4555: LD_INT 6
4557: PUSH
4558: LD_INT 15
4560: PUSH
4561: LD_INT 16
4563: PUSH
4564: LD_INT 7
4566: PUSH
4567: LD_INT 12
4569: PUSH
4570: LD_INT 13
4572: PUSH
4573: LD_INT 10
4575: PUSH
4576: LD_INT 14
4578: PUSH
4579: LD_INT 20
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 25
4590: PUSH
4591: LD_INT 32
4593: PUSH
4594: LD_INT 27
4596: PUSH
4597: LD_INT 36
4599: PUSH
4600: LD_INT 69
4602: PUSH
4603: LD_INT 39
4605: PUSH
4606: LD_INT 34
4608: PUSH
4609: LD_INT 40
4611: PUSH
4612: LD_INT 48
4614: PUSH
4615: LD_INT 49
4617: PUSH
4618: LD_INT 50
4620: PUSH
4621: LD_INT 51
4623: PUSH
4624: LD_INT 52
4626: PUSH
4627: LD_INT 53
4629: PUSH
4630: LD_INT 54
4632: PUSH
4633: LD_INT 55
4635: PUSH
4636: LD_INT 56
4638: PUSH
4639: LD_INT 57
4641: PUSH
4642: LD_INT 58
4644: PUSH
4645: LD_INT 59
4647: PUSH
4648: LD_INT 60
4650: PUSH
4651: LD_INT 61
4653: PUSH
4654: LD_INT 62
4656: PUSH
4657: LD_INT 80
4659: PUSH
4660: LD_INT 82
4662: PUSH
4663: LD_INT 83
4665: PUSH
4666: LD_INT 84
4668: PUSH
4669: LD_INT 85
4671: PUSH
4672: LD_INT 86
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
4728: GO 5195
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4964
4738: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4739: LD_ADDR_VAR 0 4
4743: PUSH
4744: LD_INT 35
4746: PUSH
4747: LD_INT 45
4749: PUSH
4750: LD_INT 46
4752: PUSH
4753: LD_INT 47
4755: PUSH
4756: LD_INT 82
4758: PUSH
4759: LD_INT 83
4761: PUSH
4762: LD_INT 84
4764: PUSH
4765: LD_INT 85
4767: PUSH
4768: LD_INT 87
4770: PUSH
4771: LD_INT 70
4773: PUSH
4774: LD_INT 1
4776: PUSH
4777: LD_INT 11
4779: PUSH
4780: LD_INT 3
4782: PUSH
4783: LD_INT 4
4785: PUSH
4786: LD_INT 5
4788: PUSH
4789: LD_INT 6
4791: PUSH
4792: LD_INT 15
4794: PUSH
4795: LD_INT 18
4797: PUSH
4798: LD_INT 7
4800: PUSH
4801: LD_INT 17
4803: PUSH
4804: LD_INT 8
4806: PUSH
4807: LD_INT 20
4809: PUSH
4810: LD_INT 21
4812: PUSH
4813: LD_INT 22
4815: PUSH
4816: LD_INT 72
4818: PUSH
4819: LD_INT 26
4821: PUSH
4822: LD_INT 69
4824: PUSH
4825: LD_INT 39
4827: PUSH
4828: LD_INT 40
4830: PUSH
4831: LD_INT 41
4833: PUSH
4834: LD_INT 42
4836: PUSH
4837: LD_INT 43
4839: PUSH
4840: LD_INT 48
4842: PUSH
4843: LD_INT 49
4845: PUSH
4846: LD_INT 50
4848: PUSH
4849: LD_INT 51
4851: PUSH
4852: LD_INT 52
4854: PUSH
4855: LD_INT 53
4857: PUSH
4858: LD_INT 54
4860: PUSH
4861: LD_INT 55
4863: PUSH
4864: LD_INT 56
4866: PUSH
4867: LD_INT 60
4869: PUSH
4870: LD_INT 61
4872: PUSH
4873: LD_INT 62
4875: PUSH
4876: LD_INT 66
4878: PUSH
4879: LD_INT 67
4881: PUSH
4882: LD_INT 68
4884: PUSH
4885: LD_INT 81
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: LD_INT 83
4893: PUSH
4894: LD_INT 84
4896: PUSH
4897: LD_INT 85
4899: PUSH
4900: LD_INT 87
4902: PUSH
4903: LD_INT 88
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
4962: GO 5195
4964: LD_INT 3
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5194
4972: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4973: LD_ADDR_VAR 0 4
4977: PUSH
4978: LD_INT 46
4980: PUSH
4981: LD_INT 47
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: LD_INT 2
4989: PUSH
4990: LD_INT 82
4992: PUSH
4993: LD_INT 83
4995: PUSH
4996: LD_INT 84
4998: PUSH
4999: LD_INT 85
5001: PUSH
5002: LD_INT 86
5004: PUSH
5005: LD_INT 11
5007: PUSH
5008: LD_INT 9
5010: PUSH
5011: LD_INT 20
5013: PUSH
5014: LD_INT 19
5016: PUSH
5017: LD_INT 21
5019: PUSH
5020: LD_INT 24
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 25
5028: PUSH
5029: LD_INT 28
5031: PUSH
5032: LD_INT 29
5034: PUSH
5035: LD_INT 30
5037: PUSH
5038: LD_INT 31
5040: PUSH
5041: LD_INT 37
5043: PUSH
5044: LD_INT 38
5046: PUSH
5047: LD_INT 32
5049: PUSH
5050: LD_INT 27
5052: PUSH
5053: LD_INT 33
5055: PUSH
5056: LD_INT 69
5058: PUSH
5059: LD_INT 39
5061: PUSH
5062: LD_INT 34
5064: PUSH
5065: LD_INT 40
5067: PUSH
5068: LD_INT 71
5070: PUSH
5071: LD_INT 23
5073: PUSH
5074: LD_INT 44
5076: PUSH
5077: LD_INT 48
5079: PUSH
5080: LD_INT 49
5082: PUSH
5083: LD_INT 50
5085: PUSH
5086: LD_INT 51
5088: PUSH
5089: LD_INT 52
5091: PUSH
5092: LD_INT 53
5094: PUSH
5095: LD_INT 54
5097: PUSH
5098: LD_INT 55
5100: PUSH
5101: LD_INT 56
5103: PUSH
5104: LD_INT 57
5106: PUSH
5107: LD_INT 58
5109: PUSH
5110: LD_INT 59
5112: PUSH
5113: LD_INT 63
5115: PUSH
5116: LD_INT 64
5118: PUSH
5119: LD_INT 65
5121: PUSH
5122: LD_INT 82
5124: PUSH
5125: LD_INT 83
5127: PUSH
5128: LD_INT 84
5130: PUSH
5131: LD_INT 85
5133: PUSH
5134: LD_INT 86
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: ST_TO_ADDR
5192: GO 5195
5194: POP
// if state > - 1 and state < 3 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 1
5202: NEG
5203: GREATER
5204: PUSH
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 3
5212: LESS
5213: AND
5214: IFFALSE 5271
// for i in result do
5216: LD_ADDR_VAR 0 5
5220: PUSH
5221: LD_VAR 0 4
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5269
// if GetTech ( i , side ) <> state then
5229: LD_VAR 0 5
5233: PPUSH
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 321
5243: PUSH
5244: LD_VAR 0 3
5248: NONEQUAL
5249: IFFALSE 5267
// result := result diff i ;
5251: LD_ADDR_VAR 0 4
5255: PUSH
5256: LD_VAR 0 4
5260: PUSH
5261: LD_VAR 0 5
5265: DIFF
5266: ST_TO_ADDR
5267: GO 5226
5269: POP
5270: POP
// end ;
5271: LD_VAR 0 4
5275: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5276: LD_INT 0
5278: PPUSH
5279: PPUSH
5280: PPUSH
// result := true ;
5281: LD_ADDR_VAR 0 3
5285: PUSH
5286: LD_INT 1
5288: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5289: LD_ADDR_VAR 0 5
5293: PUSH
5294: LD_VAR 0 2
5298: PPUSH
5299: CALL_OW 480
5303: ST_TO_ADDR
// if not tmp then
5304: LD_VAR 0 5
5308: NOT
5309: IFFALSE 5313
// exit ;
5311: GO 5362
// for i in tmp do
5313: LD_ADDR_VAR 0 4
5317: PUSH
5318: LD_VAR 0 5
5322: PUSH
5323: FOR_IN
5324: IFFALSE 5360
// if GetTech ( i , side ) <> state_researched then
5326: LD_VAR 0 4
5330: PPUSH
5331: LD_VAR 0 1
5335: PPUSH
5336: CALL_OW 321
5340: PUSH
5341: LD_INT 2
5343: NONEQUAL
5344: IFFALSE 5358
// begin result := false ;
5346: LD_ADDR_VAR 0 3
5350: PUSH
5351: LD_INT 0
5353: ST_TO_ADDR
// exit ;
5354: POP
5355: POP
5356: GO 5362
// end ;
5358: GO 5323
5360: POP
5361: POP
// end ;
5362: LD_VAR 0 3
5366: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
5374: PPUSH
5375: PPUSH
5376: PPUSH
5377: PPUSH
5378: PPUSH
5379: PPUSH
5380: PPUSH
5381: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5382: LD_VAR 0 1
5386: NOT
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 257
5397: PUSH
5398: LD_INT 9
5400: NONEQUAL
5401: OR
5402: IFFALSE 5406
// exit ;
5404: GO 5979
// side := GetSide ( unit ) ;
5406: LD_ADDR_VAR 0 9
5410: PUSH
5411: LD_VAR 0 1
5415: PPUSH
5416: CALL_OW 255
5420: ST_TO_ADDR
// tech_space := tech_spacanom ;
5421: LD_ADDR_VAR 0 12
5425: PUSH
5426: LD_INT 29
5428: ST_TO_ADDR
// tech_time := tech_taurad ;
5429: LD_ADDR_VAR 0 13
5433: PUSH
5434: LD_INT 28
5436: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5437: LD_ADDR_VAR 0 11
5441: PUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: CALL_OW 310
5451: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5452: LD_VAR 0 11
5456: PPUSH
5457: CALL_OW 247
5461: PUSH
5462: LD_INT 2
5464: EQUAL
5465: IFFALSE 5469
// exit ;
5467: GO 5979
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: LD_INT 81
5476: PUSH
5477: LD_VAR 0 9
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 3
5488: PUSH
5489: LD_INT 21
5491: PUSH
5492: LD_INT 3
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 69
5511: ST_TO_ADDR
// if not tmp then
5512: LD_VAR 0 8
5516: NOT
5517: IFFALSE 5521
// exit ;
5519: GO 5979
// if in_unit then
5521: LD_VAR 0 11
5525: IFFALSE 5549
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5527: LD_ADDR_VAR 0 10
5531: PUSH
5532: LD_VAR 0 8
5536: PPUSH
5537: LD_VAR 0 11
5541: PPUSH
5542: CALL_OW 74
5546: ST_TO_ADDR
5547: GO 5569
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5549: LD_ADDR_VAR 0 10
5553: PUSH
5554: LD_VAR 0 8
5558: PPUSH
5559: LD_VAR 0 1
5563: PPUSH
5564: CALL_OW 74
5568: ST_TO_ADDR
// if not enemy then
5569: LD_VAR 0 10
5573: NOT
5574: IFFALSE 5578
// exit ;
5576: GO 5979
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5578: LD_VAR 0 11
5582: PUSH
5583: LD_VAR 0 11
5587: PPUSH
5588: LD_VAR 0 10
5592: PPUSH
5593: CALL_OW 296
5597: PUSH
5598: LD_INT 13
5600: GREATER
5601: AND
5602: PUSH
5603: LD_VAR 0 1
5607: PPUSH
5608: LD_VAR 0 10
5612: PPUSH
5613: CALL_OW 296
5617: PUSH
5618: LD_INT 12
5620: GREATER
5621: OR
5622: IFFALSE 5626
// exit ;
5624: GO 5979
// missile := [ 1 ] ;
5626: LD_ADDR_VAR 0 14
5630: PUSH
5631: LD_INT 1
5633: PUSH
5634: EMPTY
5635: LIST
5636: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5637: LD_VAR 0 9
5641: PPUSH
5642: LD_VAR 0 12
5646: PPUSH
5647: CALL_OW 325
5651: IFFALSE 5680
// missile := Replace ( missile , missile + 1 , 2 ) ;
5653: LD_ADDR_VAR 0 14
5657: PUSH
5658: LD_VAR 0 14
5662: PPUSH
5663: LD_VAR 0 14
5667: PUSH
5668: LD_INT 1
5670: PLUS
5671: PPUSH
5672: LD_INT 2
5674: PPUSH
5675: CALL_OW 1
5679: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5680: LD_VAR 0 9
5684: PPUSH
5685: LD_VAR 0 13
5689: PPUSH
5690: CALL_OW 325
5694: PUSH
5695: LD_VAR 0 10
5699: PPUSH
5700: CALL_OW 255
5704: PPUSH
5705: LD_VAR 0 13
5709: PPUSH
5710: CALL_OW 325
5714: NOT
5715: AND
5716: IFFALSE 5745
// missile := Replace ( missile , missile + 1 , 3 ) ;
5718: LD_ADDR_VAR 0 14
5722: PUSH
5723: LD_VAR 0 14
5727: PPUSH
5728: LD_VAR 0 14
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_INT 3
5739: PPUSH
5740: CALL_OW 1
5744: ST_TO_ADDR
// if missile < 2 then
5745: LD_VAR 0 14
5749: PUSH
5750: LD_INT 2
5752: LESS
5753: IFFALSE 5757
// exit ;
5755: GO 5979
// x := GetX ( enemy ) ;
5757: LD_ADDR_VAR 0 4
5761: PUSH
5762: LD_VAR 0 10
5766: PPUSH
5767: CALL_OW 250
5771: ST_TO_ADDR
// y := GetY ( enemy ) ;
5772: LD_ADDR_VAR 0 5
5776: PUSH
5777: LD_VAR 0 10
5781: PPUSH
5782: CALL_OW 251
5786: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5787: LD_ADDR_VAR 0 6
5791: PUSH
5792: LD_VAR 0 4
5796: PUSH
5797: LD_INT 1
5799: NEG
5800: PPUSH
5801: LD_INT 1
5803: PPUSH
5804: CALL_OW 12
5808: PLUS
5809: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5810: LD_ADDR_VAR 0 7
5814: PUSH
5815: LD_VAR 0 5
5819: PUSH
5820: LD_INT 1
5822: NEG
5823: PPUSH
5824: LD_INT 1
5826: PPUSH
5827: CALL_OW 12
5831: PLUS
5832: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5833: LD_VAR 0 6
5837: PPUSH
5838: LD_VAR 0 7
5842: PPUSH
5843: CALL_OW 488
5847: NOT
5848: IFFALSE 5870
// begin _x := x ;
5850: LD_ADDR_VAR 0 6
5854: PUSH
5855: LD_VAR 0 4
5859: ST_TO_ADDR
// _y := y ;
5860: LD_ADDR_VAR 0 7
5864: PUSH
5865: LD_VAR 0 5
5869: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5870: LD_ADDR_VAR 0 3
5874: PUSH
5875: LD_INT 1
5877: PPUSH
5878: LD_VAR 0 14
5882: PPUSH
5883: CALL_OW 12
5887: ST_TO_ADDR
// case i of 1 :
5888: LD_VAR 0 3
5892: PUSH
5893: LD_INT 1
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5918
5901: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5902: LD_VAR 0 1
5906: PPUSH
5907: LD_VAR 0 10
5911: PPUSH
5912: CALL_OW 115
5916: GO 5979
5918: LD_INT 2
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 5948
5926: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 6
5936: PPUSH
5937: LD_VAR 0 7
5941: PPUSH
5942: CALL_OW 153
5946: GO 5979
5948: LD_INT 3
5950: DOUBLE
5951: EQUAL
5952: IFTRUE 5956
5954: GO 5978
5956: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_VAR 0 6
5966: PPUSH
5967: LD_VAR 0 7
5971: PPUSH
5972: CALL_OW 154
5976: GO 5979
5978: POP
// end ;
5979: LD_VAR 0 2
5983: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
// if not unit or not building then
5992: LD_VAR 0 1
5996: NOT
5997: PUSH
5998: LD_VAR 0 2
6002: NOT
6003: OR
6004: IFFALSE 6008
// exit ;
6006: GO 6166
// x := GetX ( building ) ;
6008: LD_ADDR_VAR 0 5
6012: PUSH
6013: LD_VAR 0 2
6017: PPUSH
6018: CALL_OW 250
6022: ST_TO_ADDR
// y := GetY ( building ) ;
6023: LD_ADDR_VAR 0 6
6027: PUSH
6028: LD_VAR 0 2
6032: PPUSH
6033: CALL_OW 251
6037: ST_TO_ADDR
// for i = 0 to 5 do
6038: LD_ADDR_VAR 0 4
6042: PUSH
6043: DOUBLE
6044: LD_INT 0
6046: DEC
6047: ST_TO_ADDR
6048: LD_INT 5
6050: PUSH
6051: FOR_TO
6052: IFFALSE 6164
// begin _x := ShiftX ( x , i , 3 ) ;
6054: LD_ADDR_VAR 0 7
6058: PUSH
6059: LD_VAR 0 5
6063: PPUSH
6064: LD_VAR 0 4
6068: PPUSH
6069: LD_INT 3
6071: PPUSH
6072: CALL_OW 272
6076: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6077: LD_ADDR_VAR 0 8
6081: PUSH
6082: LD_VAR 0 6
6086: PPUSH
6087: LD_VAR 0 4
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 273
6099: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6100: LD_VAR 0 7
6104: PPUSH
6105: LD_VAR 0 8
6109: PPUSH
6110: CALL_OW 488
6114: NOT
6115: IFFALSE 6119
// continue ;
6117: GO 6051
// if HexInfo ( _x , _y ) = 0 then
6119: LD_VAR 0 7
6123: PPUSH
6124: LD_VAR 0 8
6128: PPUSH
6129: CALL_OW 428
6133: PUSH
6134: LD_INT 0
6136: EQUAL
6137: IFFALSE 6162
// begin ComMoveXY ( unit , _x , _y ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: LD_VAR 0 7
6148: PPUSH
6149: LD_VAR 0 8
6153: PPUSH
6154: CALL_OW 111
// exit ;
6158: POP
6159: POP
6160: GO 6166
// end ; end ;
6162: GO 6051
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 3
6170: RET
// export function ScanBase ( side , base_area ) ; begin
6171: LD_INT 0
6173: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6174: LD_ADDR_VAR 0 3
6178: PUSH
6179: LD_VAR 0 2
6183: PPUSH
6184: LD_INT 81
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 70
6200: ST_TO_ADDR
// end ;
6201: LD_VAR 0 3
6205: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6206: LD_INT 0
6208: PPUSH
6209: PPUSH
6210: PPUSH
6211: PPUSH
// result := false ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// side := GetSide ( unit ) ;
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: CALL_OW 255
6234: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6235: LD_ADDR_VAR 0 4
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 248
6249: ST_TO_ADDR
// case nat of 1 :
6250: LD_VAR 0 4
6254: PUSH
6255: LD_INT 1
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6263
6261: GO 6274
6263: POP
// tech := tech_lassight ; 2 :
6264: LD_ADDR_VAR 0 5
6268: PUSH
6269: LD_INT 12
6271: ST_TO_ADDR
6272: GO 6313
6274: LD_INT 2
6276: DOUBLE
6277: EQUAL
6278: IFTRUE 6282
6280: GO 6293
6282: POP
// tech := tech_mortar ; 3 :
6283: LD_ADDR_VAR 0 5
6287: PUSH
6288: LD_INT 41
6290: ST_TO_ADDR
6291: GO 6313
6293: LD_INT 3
6295: DOUBLE
6296: EQUAL
6297: IFTRUE 6301
6299: GO 6312
6301: POP
// tech := tech_bazooka ; end ;
6302: LD_ADDR_VAR 0 5
6306: PUSH
6307: LD_INT 44
6309: ST_TO_ADDR
6310: GO 6313
6312: POP
// if Researched ( side , tech ) then
6313: LD_VAR 0 3
6317: PPUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: CALL_OW 325
6327: IFFALSE 6354
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6329: LD_ADDR_VAR 0 2
6333: PUSH
6334: LD_INT 5
6336: PUSH
6337: LD_INT 8
6339: PUSH
6340: LD_INT 9
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: PUSH
6348: LD_VAR 0 4
6352: ARRAY
6353: ST_TO_ADDR
// end ;
6354: LD_VAR 0 2
6358: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6359: LD_INT 0
6361: PPUSH
6362: PPUSH
6363: PPUSH
// if not mines then
6364: LD_VAR 0 2
6368: NOT
6369: IFFALSE 6373
// exit ;
6371: GO 6517
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6373: LD_ADDR_VAR 0 5
6377: PUSH
6378: LD_INT 81
6380: PUSH
6381: LD_VAR 0 1
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: LD_INT 21
6395: PUSH
6396: LD_INT 3
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PPUSH
6411: CALL_OW 69
6415: ST_TO_ADDR
// for i in mines do
6416: LD_ADDR_VAR 0 4
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: FOR_IN
6427: IFFALSE 6515
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6429: LD_VAR 0 4
6433: PUSH
6434: LD_INT 1
6436: ARRAY
6437: PPUSH
6438: LD_VAR 0 4
6442: PUSH
6443: LD_INT 2
6445: ARRAY
6446: PPUSH
6447: CALL_OW 458
6451: NOT
6452: IFFALSE 6456
// continue ;
6454: GO 6426
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6456: LD_VAR 0 4
6460: PUSH
6461: LD_INT 1
6463: ARRAY
6464: PPUSH
6465: LD_VAR 0 4
6469: PUSH
6470: LD_INT 2
6472: ARRAY
6473: PPUSH
6474: CALL_OW 428
6478: PUSH
6479: LD_VAR 0 5
6483: IN
6484: IFFALSE 6513
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6486: LD_VAR 0 4
6490: PUSH
6491: LD_INT 1
6493: ARRAY
6494: PPUSH
6495: LD_VAR 0 4
6499: PUSH
6500: LD_INT 2
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 1
6508: PPUSH
6509: CALL_OW 456
// end ;
6513: GO 6426
6515: POP
6516: POP
// end ;
6517: LD_VAR 0 3
6521: RET
// export function Count ( array ) ; var i ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
// result := 0 ;
6526: LD_ADDR_VAR 0 2
6530: PUSH
6531: LD_INT 0
6533: ST_TO_ADDR
// for i in array do
6534: LD_ADDR_VAR 0 3
6538: PUSH
6539: LD_VAR 0 1
6543: PUSH
6544: FOR_IN
6545: IFFALSE 6569
// if i then
6547: LD_VAR 0 3
6551: IFFALSE 6567
// result := result + 1 ;
6553: LD_ADDR_VAR 0 2
6557: PUSH
6558: LD_VAR 0 2
6562: PUSH
6563: LD_INT 1
6565: PLUS
6566: ST_TO_ADDR
6567: GO 6544
6569: POP
6570: POP
// end ;
6571: LD_VAR 0 2
6575: RET
// export function IsEmpty ( building ) ; begin
6576: LD_INT 0
6578: PPUSH
// if not building then
6579: LD_VAR 0 1
6583: NOT
6584: IFFALSE 6588
// exit ;
6586: GO 6631
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: LD_VAR 0 1
6597: PUSH
6598: LD_INT 22
6600: PUSH
6601: LD_VAR 0 1
6605: PPUSH
6606: CALL_OW 255
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 58
6617: PUSH
6618: EMPTY
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PPUSH
6625: CALL_OW 69
6629: IN
6630: ST_TO_ADDR
// end ;
6631: LD_VAR 0 2
6635: RET
// export function IsNotFull ( building ) ; var places ; begin
6636: LD_INT 0
6638: PPUSH
6639: PPUSH
// if not building then
6640: LD_VAR 0 1
6644: NOT
6645: IFFALSE 6649
// exit ;
6647: GO 6820
// result := false ;
6649: LD_ADDR_VAR 0 2
6653: PUSH
6654: LD_INT 0
6656: ST_TO_ADDR
// places := 0 ;
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_INT 0
6664: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 266
6674: PUSH
6675: LD_INT 0
6677: DOUBLE
6678: EQUAL
6679: IFTRUE 6737
6681: LD_INT 1
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6737
6687: LD_INT 6
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6737
6693: LD_INT 7
6695: DOUBLE
6696: EQUAL
6697: IFTRUE 6737
6699: LD_INT 8
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6737
6705: LD_INT 4
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6737
6711: LD_INT 5
6713: DOUBLE
6714: EQUAL
6715: IFTRUE 6737
6717: LD_INT 2
6719: DOUBLE
6720: EQUAL
6721: IFTRUE 6737
6723: LD_INT 3
6725: DOUBLE
6726: EQUAL
6727: IFTRUE 6737
6729: LD_INT 35
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6748
6737: POP
// places := 6 ; b_bunker , b_breastwork :
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_INT 6
6745: ST_TO_ADDR
6746: GO 6793
6748: LD_INT 32
6750: DOUBLE
6751: EQUAL
6752: IFTRUE 6762
6754: LD_INT 31
6756: DOUBLE
6757: EQUAL
6758: IFTRUE 6762
6760: GO 6773
6762: POP
// places := 1 ; b_control_tower :
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_INT 1
6770: ST_TO_ADDR
6771: GO 6793
6773: LD_INT 36
6775: DOUBLE
6776: EQUAL
6777: IFTRUE 6781
6779: GO 6792
6781: POP
// places := 3 ; end ;
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 3
6789: ST_TO_ADDR
6790: GO 6793
6792: POP
// if places then
6793: LD_VAR 0 3
6797: IFFALSE 6820
// result := UnitsInside ( building ) < places ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_VAR 0 1
6808: PPUSH
6809: CALL_OW 313
6813: PUSH
6814: LD_VAR 0 3
6818: LESS
6819: ST_TO_ADDR
// end ;
6820: LD_VAR 0 2
6824: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
6830: PPUSH
// tmp := [ ] ;
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: EMPTY
6837: ST_TO_ADDR
// list := [ ] ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: EMPTY
6844: ST_TO_ADDR
// for i = 16 to 25 do
6845: LD_ADDR_VAR 0 4
6849: PUSH
6850: DOUBLE
6851: LD_INT 16
6853: DEC
6854: ST_TO_ADDR
6855: LD_INT 25
6857: PUSH
6858: FOR_TO
6859: IFFALSE 6932
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6861: LD_ADDR_VAR 0 3
6865: PUSH
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 255
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 91
6890: PUSH
6891: LD_VAR 0 1
6895: PUSH
6896: LD_INT 6
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_VAR 0 4
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: EMPTY
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: ADD
6929: ST_TO_ADDR
6930: GO 6858
6932: POP
6933: POP
// for i = 1 to tmp do
6934: LD_ADDR_VAR 0 4
6938: PUSH
6939: DOUBLE
6940: LD_INT 1
6942: DEC
6943: ST_TO_ADDR
6944: LD_VAR 0 3
6948: PUSH
6949: FOR_TO
6950: IFFALSE 7038
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6952: LD_ADDR_VAR 0 5
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: LD_VAR 0 3
6966: PUSH
6967: LD_VAR 0 4
6971: ARRAY
6972: PPUSH
6973: CALL_OW 266
6977: PUSH
6978: LD_VAR 0 3
6982: PUSH
6983: LD_VAR 0 4
6987: ARRAY
6988: PPUSH
6989: CALL_OW 250
6993: PUSH
6994: LD_VAR 0 3
6998: PUSH
6999: LD_VAR 0 4
7003: ARRAY
7004: PPUSH
7005: CALL_OW 251
7009: PUSH
7010: LD_VAR 0 3
7014: PUSH
7015: LD_VAR 0 4
7019: ARRAY
7020: PPUSH
7021: CALL_OW 254
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: ADD
7035: ST_TO_ADDR
7036: GO 6949
7038: POP
7039: POP
// result := list ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_VAR 0 5
7049: ST_TO_ADDR
// end ;
7050: LD_VAR 0 2
7054: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7055: LD_INT 0
7057: PPUSH
7058: PPUSH
7059: PPUSH
7060: PPUSH
7061: PPUSH
7062: PPUSH
7063: PPUSH
// if not factory then
7064: LD_VAR 0 1
7068: NOT
7069: IFFALSE 7073
// exit ;
7071: GO 7666
// if control = control_apeman then
7073: LD_VAR 0 4
7077: PUSH
7078: LD_INT 5
7080: EQUAL
7081: IFFALSE 7190
// begin tmp := UnitsInside ( factory ) ;
7083: LD_ADDR_VAR 0 8
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 313
7097: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7098: LD_VAR 0 8
7102: PPUSH
7103: LD_INT 25
7105: PUSH
7106: LD_INT 12
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PPUSH
7113: CALL_OW 72
7117: NOT
7118: IFFALSE 7128
// control := control_manual ;
7120: LD_ADDR_VAR 0 4
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7128: LD_ADDR_VAR 0 8
7132: PUSH
7133: LD_VAR 0 1
7137: PPUSH
7138: CALL 6825 0 1
7142: ST_TO_ADDR
// if tmp then
7143: LD_VAR 0 8
7147: IFFALSE 7190
// begin for i in tmp do
7149: LD_ADDR_VAR 0 7
7153: PUSH
7154: LD_VAR 0 8
7158: PUSH
7159: FOR_IN
7160: IFFALSE 7188
// if i [ 1 ] = b_ext_radio then
7162: LD_VAR 0 7
7166: PUSH
7167: LD_INT 1
7169: ARRAY
7170: PUSH
7171: LD_INT 22
7173: EQUAL
7174: IFFALSE 7186
// begin control := control_remote ;
7176: LD_ADDR_VAR 0 4
7180: PUSH
7181: LD_INT 2
7183: ST_TO_ADDR
// break ;
7184: GO 7188
// end ;
7186: GO 7159
7188: POP
7189: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7190: LD_VAR 0 1
7194: PPUSH
7195: LD_VAR 0 2
7199: PPUSH
7200: LD_VAR 0 3
7204: PPUSH
7205: LD_VAR 0 4
7209: PPUSH
7210: LD_VAR 0 5
7214: PPUSH
7215: CALL_OW 448
7219: IFFALSE 7254
// begin result := [ chassis , engine , control , weapon ] ;
7221: LD_ADDR_VAR 0 6
7225: PUSH
7226: LD_VAR 0 2
7230: PUSH
7231: LD_VAR 0 3
7235: PUSH
7236: LD_VAR 0 4
7240: PUSH
7241: LD_VAR 0 5
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: ST_TO_ADDR
// exit ;
7252: GO 7666
// end ; _chassis := AvailableChassisList ( factory ) ;
7254: LD_ADDR_VAR 0 9
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 475
7268: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7269: LD_ADDR_VAR 0 11
7273: PUSH
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 476
7283: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7284: LD_ADDR_VAR 0 12
7288: PUSH
7289: LD_VAR 0 1
7293: PPUSH
7294: CALL_OW 477
7298: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7299: LD_ADDR_VAR 0 10
7303: PUSH
7304: LD_VAR 0 1
7308: PPUSH
7309: CALL_OW 478
7313: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7314: LD_VAR 0 9
7318: NOT
7319: PUSH
7320: LD_VAR 0 11
7324: NOT
7325: OR
7326: PUSH
7327: LD_VAR 0 12
7331: NOT
7332: OR
7333: PUSH
7334: LD_VAR 0 10
7338: NOT
7339: OR
7340: IFFALSE 7375
// begin result := [ chassis , engine , control , weapon ] ;
7342: LD_ADDR_VAR 0 6
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_VAR 0 4
7361: PUSH
7362: LD_VAR 0 5
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
// exit ;
7373: GO 7666
// end ; if not chassis in _chassis then
7375: LD_VAR 0 2
7379: PUSH
7380: LD_VAR 0 9
7384: IN
7385: NOT
7386: IFFALSE 7412
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7388: LD_ADDR_VAR 0 2
7392: PUSH
7393: LD_VAR 0 9
7397: PUSH
7398: LD_INT 1
7400: PPUSH
7401: LD_VAR 0 9
7405: PPUSH
7406: CALL_OW 12
7410: ARRAY
7411: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7412: LD_VAR 0 2
7416: PPUSH
7417: LD_VAR 0 3
7421: PPUSH
7422: CALL 7671 0 2
7426: NOT
7427: IFFALSE 7486
// repeat engine := _engine [ 1 ] ;
7429: LD_ADDR_VAR 0 3
7433: PUSH
7434: LD_VAR 0 11
7438: PUSH
7439: LD_INT 1
7441: ARRAY
7442: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7443: LD_ADDR_VAR 0 11
7447: PUSH
7448: LD_VAR 0 11
7452: PPUSH
7453: LD_INT 1
7455: PPUSH
7456: CALL_OW 3
7460: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7461: LD_VAR 0 2
7465: PPUSH
7466: LD_VAR 0 3
7470: PPUSH
7471: CALL 7671 0 2
7475: PUSH
7476: LD_VAR 0 11
7480: PUSH
7481: EMPTY
7482: EQUAL
7483: OR
7484: IFFALSE 7429
// if not control in _control then
7486: LD_VAR 0 4
7490: PUSH
7491: LD_VAR 0 12
7495: IN
7496: NOT
7497: IFFALSE 7523
// control := _control [ rand ( 1 , _control ) ] ;
7499: LD_ADDR_VAR 0 4
7503: PUSH
7504: LD_VAR 0 12
7508: PUSH
7509: LD_INT 1
7511: PPUSH
7512: LD_VAR 0 12
7516: PPUSH
7517: CALL_OW 12
7521: ARRAY
7522: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7523: LD_VAR 0 2
7527: PPUSH
7528: LD_VAR 0 5
7532: PPUSH
7533: CALL 7891 0 2
7537: NOT
7538: IFFALSE 7597
// repeat weapon := _weapon [ 1 ] ;
7540: LD_ADDR_VAR 0 5
7544: PUSH
7545: LD_VAR 0 10
7549: PUSH
7550: LD_INT 1
7552: ARRAY
7553: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7554: LD_ADDR_VAR 0 10
7558: PUSH
7559: LD_VAR 0 10
7563: PPUSH
7564: LD_INT 1
7566: PPUSH
7567: CALL_OW 3
7571: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7572: LD_VAR 0 2
7576: PPUSH
7577: LD_VAR 0 5
7581: PPUSH
7582: CALL 7891 0 2
7586: PUSH
7587: LD_VAR 0 10
7591: PUSH
7592: EMPTY
7593: EQUAL
7594: OR
7595: IFFALSE 7540
// result := [ ] ;
7597: LD_ADDR_VAR 0 6
7601: PUSH
7602: EMPTY
7603: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7604: LD_VAR 0 1
7608: PPUSH
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_VAR 0 3
7618: PPUSH
7619: LD_VAR 0 4
7623: PPUSH
7624: LD_VAR 0 5
7628: PPUSH
7629: CALL_OW 448
7633: IFFALSE 7666
// result := [ chassis , engine , control , weapon ] ;
7635: LD_ADDR_VAR 0 6
7639: PUSH
7640: LD_VAR 0 2
7644: PUSH
7645: LD_VAR 0 3
7649: PUSH
7650: LD_VAR 0 4
7654: PUSH
7655: LD_VAR 0 5
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: ST_TO_ADDR
// end ;
7666: LD_VAR 0 6
7670: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7671: LD_INT 0
7673: PPUSH
// if not chassis or not engine then
7674: LD_VAR 0 1
7678: NOT
7679: PUSH
7680: LD_VAR 0 2
7684: NOT
7685: OR
7686: IFFALSE 7690
// exit ;
7688: GO 7886
// case engine of engine_solar :
7690: LD_VAR 0 2
7694: PUSH
7695: LD_INT 2
7697: DOUBLE
7698: EQUAL
7699: IFTRUE 7703
7701: GO 7741
7703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7704: LD_ADDR_VAR 0 3
7708: PUSH
7709: LD_INT 11
7711: PUSH
7712: LD_INT 12
7714: PUSH
7715: LD_INT 13
7717: PUSH
7718: LD_INT 14
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 3
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: ST_TO_ADDR
7739: GO 7870
7741: LD_INT 1
7743: DOUBLE
7744: EQUAL
7745: IFTRUE 7749
7747: GO 7811
7749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7750: LD_ADDR_VAR 0 3
7754: PUSH
7755: LD_INT 11
7757: PUSH
7758: LD_INT 12
7760: PUSH
7761: LD_INT 13
7763: PUSH
7764: LD_INT 14
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: LD_INT 2
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_INT 4
7778: PUSH
7779: LD_INT 5
7781: PUSH
7782: LD_INT 21
7784: PUSH
7785: LD_INT 23
7787: PUSH
7788: LD_INT 22
7790: PUSH
7791: LD_INT 24
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: ST_TO_ADDR
7809: GO 7870
7811: LD_INT 3
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7869
7819: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_INT 13
7827: PUSH
7828: LD_INT 14
7830: PUSH
7831: LD_INT 2
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: LD_INT 4
7839: PUSH
7840: LD_INT 5
7842: PUSH
7843: LD_INT 21
7845: PUSH
7846: LD_INT 22
7848: PUSH
7849: LD_INT 23
7851: PUSH
7852: LD_INT 24
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: ST_TO_ADDR
7867: GO 7870
7869: POP
// result := ( chassis in result ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_VAR 0 1
7879: PUSH
7880: LD_VAR 0 3
7884: IN
7885: ST_TO_ADDR
// end ;
7886: LD_VAR 0 3
7890: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7891: LD_INT 0
7893: PPUSH
// if not chassis or not weapon then
7894: LD_VAR 0 1
7898: NOT
7899: PUSH
7900: LD_VAR 0 2
7904: NOT
7905: OR
7906: IFFALSE 7910
// exit ;
7908: GO 8970
// case weapon of us_machine_gun :
7910: LD_VAR 0 2
7914: PUSH
7915: LD_INT 2
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7953
7923: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7924: LD_ADDR_VAR 0 3
7928: PUSH
7929: LD_INT 1
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: LD_INT 3
7937: PUSH
7938: LD_INT 4
7940: PUSH
7941: LD_INT 5
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: ST_TO_ADDR
7951: GO 8954
7953: LD_INT 3
7955: DOUBLE
7956: EQUAL
7957: IFTRUE 7961
7959: GO 7991
7961: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7962: LD_ADDR_VAR 0 3
7966: PUSH
7967: LD_INT 1
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: LD_INT 4
7978: PUSH
7979: LD_INT 5
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: ST_TO_ADDR
7989: GO 8954
7991: LD_INT 11
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8029
7999: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8000: LD_ADDR_VAR 0 3
8004: PUSH
8005: LD_INT 1
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: LD_INT 3
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: LD_INT 5
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
8027: GO 8954
8029: LD_INT 4
8031: DOUBLE
8032: EQUAL
8033: IFTRUE 8037
8035: GO 8063
8037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: LD_INT 2
8045: PUSH
8046: LD_INT 3
8048: PUSH
8049: LD_INT 4
8051: PUSH
8052: LD_INT 5
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: ST_TO_ADDR
8061: GO 8954
8063: LD_INT 5
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8097
8071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8072: LD_ADDR_VAR 0 3
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 3
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: LD_INT 5
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: ST_TO_ADDR
8095: GO 8954
8097: LD_INT 9
8099: DOUBLE
8100: EQUAL
8101: IFTRUE 8105
8103: GO 8131
8105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8106: LD_ADDR_VAR 0 3
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 3
8116: PUSH
8117: LD_INT 4
8119: PUSH
8120: LD_INT 5
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: ST_TO_ADDR
8129: GO 8954
8131: LD_INT 7
8133: DOUBLE
8134: EQUAL
8135: IFTRUE 8139
8137: GO 8165
8139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8140: LD_ADDR_VAR 0 3
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 3
8150: PUSH
8151: LD_INT 4
8153: PUSH
8154: LD_INT 5
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: ST_TO_ADDR
8163: GO 8954
8165: LD_INT 12
8167: DOUBLE
8168: EQUAL
8169: IFTRUE 8173
8171: GO 8199
8173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8174: LD_ADDR_VAR 0 3
8178: PUSH
8179: LD_INT 2
8181: PUSH
8182: LD_INT 3
8184: PUSH
8185: LD_INT 4
8187: PUSH
8188: LD_INT 5
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: ST_TO_ADDR
8197: GO 8954
8199: LD_INT 13
8201: DOUBLE
8202: EQUAL
8203: IFTRUE 8207
8205: GO 8233
8207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8208: LD_ADDR_VAR 0 3
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: LD_INT 3
8218: PUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
8231: GO 8954
8233: LD_INT 14
8235: DOUBLE
8236: EQUAL
8237: IFTRUE 8241
8239: GO 8259
8241: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8242: LD_ADDR_VAR 0 3
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: LD_INT 5
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: ST_TO_ADDR
8257: GO 8954
8259: LD_INT 6
8261: DOUBLE
8262: EQUAL
8263: IFTRUE 8267
8265: GO 8285
8267: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8268: LD_ADDR_VAR 0 3
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
8283: GO 8954
8285: LD_INT 10
8287: DOUBLE
8288: EQUAL
8289: IFTRUE 8293
8291: GO 8311
8293: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8294: LD_ADDR_VAR 0 3
8298: PUSH
8299: LD_INT 4
8301: PUSH
8302: LD_INT 5
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: ST_TO_ADDR
8309: GO 8954
8311: LD_INT 22
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8345
8319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8320: LD_ADDR_VAR 0 3
8324: PUSH
8325: LD_INT 11
8327: PUSH
8328: LD_INT 12
8330: PUSH
8331: LD_INT 13
8333: PUSH
8334: LD_INT 14
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: ST_TO_ADDR
8343: GO 8954
8345: LD_INT 23
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8379
8353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: LD_INT 11
8361: PUSH
8362: LD_INT 12
8364: PUSH
8365: LD_INT 13
8367: PUSH
8368: LD_INT 14
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: ST_TO_ADDR
8377: GO 8954
8379: LD_INT 24
8381: DOUBLE
8382: EQUAL
8383: IFTRUE 8387
8385: GO 8413
8387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8388: LD_ADDR_VAR 0 3
8392: PUSH
8393: LD_INT 11
8395: PUSH
8396: LD_INT 12
8398: PUSH
8399: LD_INT 13
8401: PUSH
8402: LD_INT 14
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: ST_TO_ADDR
8411: GO 8954
8413: LD_INT 30
8415: DOUBLE
8416: EQUAL
8417: IFTRUE 8421
8419: GO 8447
8421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8422: LD_ADDR_VAR 0 3
8426: PUSH
8427: LD_INT 11
8429: PUSH
8430: LD_INT 12
8432: PUSH
8433: LD_INT 13
8435: PUSH
8436: LD_INT 14
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: ST_TO_ADDR
8445: GO 8954
8447: LD_INT 25
8449: DOUBLE
8450: EQUAL
8451: IFTRUE 8455
8453: GO 8473
8455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8456: LD_ADDR_VAR 0 3
8460: PUSH
8461: LD_INT 13
8463: PUSH
8464: LD_INT 14
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: ST_TO_ADDR
8471: GO 8954
8473: LD_INT 27
8475: DOUBLE
8476: EQUAL
8477: IFTRUE 8481
8479: GO 8499
8481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8482: LD_ADDR_VAR 0 3
8486: PUSH
8487: LD_INT 13
8489: PUSH
8490: LD_INT 14
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: ST_TO_ADDR
8497: GO 8954
8499: LD_INT 92
8501: DOUBLE
8502: EQUAL
8503: IFTRUE 8507
8505: GO 8533
8507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8508: LD_ADDR_VAR 0 3
8512: PUSH
8513: LD_INT 11
8515: PUSH
8516: LD_INT 12
8518: PUSH
8519: LD_INT 13
8521: PUSH
8522: LD_INT 14
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: ST_TO_ADDR
8531: GO 8954
8533: LD_INT 28
8535: DOUBLE
8536: EQUAL
8537: IFTRUE 8541
8539: GO 8559
8541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: LD_INT 13
8549: PUSH
8550: LD_INT 14
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: ST_TO_ADDR
8557: GO 8954
8559: LD_INT 29
8561: DOUBLE
8562: EQUAL
8563: IFTRUE 8567
8565: GO 8585
8567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8568: LD_ADDR_VAR 0 3
8572: PUSH
8573: LD_INT 13
8575: PUSH
8576: LD_INT 14
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: ST_TO_ADDR
8583: GO 8954
8585: LD_INT 31
8587: DOUBLE
8588: EQUAL
8589: IFTRUE 8593
8591: GO 8611
8593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8594: LD_ADDR_VAR 0 3
8598: PUSH
8599: LD_INT 13
8601: PUSH
8602: LD_INT 14
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: ST_TO_ADDR
8609: GO 8954
8611: LD_INT 26
8613: DOUBLE
8614: EQUAL
8615: IFTRUE 8619
8617: GO 8637
8619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_INT 13
8627: PUSH
8628: LD_INT 14
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: ST_TO_ADDR
8635: GO 8954
8637: LD_INT 42
8639: DOUBLE
8640: EQUAL
8641: IFTRUE 8645
8643: GO 8671
8645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8646: LD_ADDR_VAR 0 3
8650: PUSH
8651: LD_INT 21
8653: PUSH
8654: LD_INT 22
8656: PUSH
8657: LD_INT 23
8659: PUSH
8660: LD_INT 24
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: ST_TO_ADDR
8669: GO 8954
8671: LD_INT 43
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8705
8679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8680: LD_ADDR_VAR 0 3
8684: PUSH
8685: LD_INT 21
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 23
8693: PUSH
8694: LD_INT 24
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: ST_TO_ADDR
8703: GO 8954
8705: LD_INT 44
8707: DOUBLE
8708: EQUAL
8709: IFTRUE 8713
8711: GO 8739
8713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8714: LD_ADDR_VAR 0 3
8718: PUSH
8719: LD_INT 21
8721: PUSH
8722: LD_INT 22
8724: PUSH
8725: LD_INT 23
8727: PUSH
8728: LD_INT 24
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: ST_TO_ADDR
8737: GO 8954
8739: LD_INT 45
8741: DOUBLE
8742: EQUAL
8743: IFTRUE 8747
8745: GO 8773
8747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8748: LD_ADDR_VAR 0 3
8752: PUSH
8753: LD_INT 21
8755: PUSH
8756: LD_INT 22
8758: PUSH
8759: LD_INT 23
8761: PUSH
8762: LD_INT 24
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: ST_TO_ADDR
8771: GO 8954
8773: LD_INT 49
8775: DOUBLE
8776: EQUAL
8777: IFTRUE 8781
8779: GO 8807
8781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8782: LD_ADDR_VAR 0 3
8786: PUSH
8787: LD_INT 21
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_INT 23
8795: PUSH
8796: LD_INT 24
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: ST_TO_ADDR
8805: GO 8954
8807: LD_INT 51
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8841
8815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8816: LD_ADDR_VAR 0 3
8820: PUSH
8821: LD_INT 21
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_INT 23
8829: PUSH
8830: LD_INT 24
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: ST_TO_ADDR
8839: GO 8954
8841: LD_INT 52
8843: DOUBLE
8844: EQUAL
8845: IFTRUE 8849
8847: GO 8875
8849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8850: LD_ADDR_VAR 0 3
8854: PUSH
8855: LD_INT 21
8857: PUSH
8858: LD_INT 22
8860: PUSH
8861: LD_INT 23
8863: PUSH
8864: LD_INT 24
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: ST_TO_ADDR
8873: GO 8954
8875: LD_INT 53
8877: DOUBLE
8878: EQUAL
8879: IFTRUE 8883
8881: GO 8901
8883: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8884: LD_ADDR_VAR 0 3
8888: PUSH
8889: LD_INT 23
8891: PUSH
8892: LD_INT 24
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: ST_TO_ADDR
8899: GO 8954
8901: LD_INT 46
8903: DOUBLE
8904: EQUAL
8905: IFTRUE 8909
8907: GO 8927
8909: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8910: LD_ADDR_VAR 0 3
8914: PUSH
8915: LD_INT 23
8917: PUSH
8918: LD_INT 24
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: ST_TO_ADDR
8925: GO 8954
8927: LD_INT 47
8929: DOUBLE
8930: EQUAL
8931: IFTRUE 8935
8933: GO 8953
8935: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8936: LD_ADDR_VAR 0 3
8940: PUSH
8941: LD_INT 23
8943: PUSH
8944: LD_INT 24
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: ST_TO_ADDR
8951: GO 8954
8953: POP
// result := ( chassis in result ) ;
8954: LD_ADDR_VAR 0 3
8958: PUSH
8959: LD_VAR 0 1
8963: PUSH
8964: LD_VAR 0 3
8968: IN
8969: ST_TO_ADDR
// end ;
8970: LD_VAR 0 3
8974: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8975: LD_INT 0
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
// result := array ;
8984: LD_ADDR_VAR 0 5
8988: PUSH
8989: LD_VAR 0 1
8993: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8994: LD_VAR 0 1
8998: NOT
8999: PUSH
9000: LD_VAR 0 2
9004: NOT
9005: OR
9006: PUSH
9007: LD_VAR 0 3
9011: NOT
9012: OR
9013: PUSH
9014: LD_VAR 0 2
9018: PUSH
9019: LD_VAR 0 1
9023: GREATER
9024: OR
9025: PUSH
9026: LD_VAR 0 3
9030: PUSH
9031: LD_VAR 0 1
9035: GREATER
9036: OR
9037: IFFALSE 9041
// exit ;
9039: GO 9337
// if direction then
9041: LD_VAR 0 4
9045: IFFALSE 9109
// begin d := 1 ;
9047: LD_ADDR_VAR 0 9
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// if i_from > i_to then
9055: LD_VAR 0 2
9059: PUSH
9060: LD_VAR 0 3
9064: GREATER
9065: IFFALSE 9091
// length := ( array - i_from ) + i_to else
9067: LD_ADDR_VAR 0 11
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: LD_VAR 0 2
9081: MINUS
9082: PUSH
9083: LD_VAR 0 3
9087: PLUS
9088: ST_TO_ADDR
9089: GO 9107
// length := i_to - i_from ;
9091: LD_ADDR_VAR 0 11
9095: PUSH
9096: LD_VAR 0 3
9100: PUSH
9101: LD_VAR 0 2
9105: MINUS
9106: ST_TO_ADDR
// end else
9107: GO 9170
// begin d := - 1 ;
9109: LD_ADDR_VAR 0 9
9113: PUSH
9114: LD_INT 1
9116: NEG
9117: ST_TO_ADDR
// if i_from > i_to then
9118: LD_VAR 0 2
9122: PUSH
9123: LD_VAR 0 3
9127: GREATER
9128: IFFALSE 9148
// length := i_from - i_to else
9130: LD_ADDR_VAR 0 11
9134: PUSH
9135: LD_VAR 0 2
9139: PUSH
9140: LD_VAR 0 3
9144: MINUS
9145: ST_TO_ADDR
9146: GO 9170
// length := ( array - i_to ) + i_from ;
9148: LD_ADDR_VAR 0 11
9152: PUSH
9153: LD_VAR 0 1
9157: PUSH
9158: LD_VAR 0 3
9162: MINUS
9163: PUSH
9164: LD_VAR 0 2
9168: PLUS
9169: ST_TO_ADDR
// end ; if not length then
9170: LD_VAR 0 11
9174: NOT
9175: IFFALSE 9179
// exit ;
9177: GO 9337
// tmp := array ;
9179: LD_ADDR_VAR 0 10
9183: PUSH
9184: LD_VAR 0 1
9188: ST_TO_ADDR
// for i = 1 to length do
9189: LD_ADDR_VAR 0 6
9193: PUSH
9194: DOUBLE
9195: LD_INT 1
9197: DEC
9198: ST_TO_ADDR
9199: LD_VAR 0 11
9203: PUSH
9204: FOR_TO
9205: IFFALSE 9325
// begin for j = 1 to array do
9207: LD_ADDR_VAR 0 7
9211: PUSH
9212: DOUBLE
9213: LD_INT 1
9215: DEC
9216: ST_TO_ADDR
9217: LD_VAR 0 1
9221: PUSH
9222: FOR_TO
9223: IFFALSE 9311
// begin k := j + d ;
9225: LD_ADDR_VAR 0 8
9229: PUSH
9230: LD_VAR 0 7
9234: PUSH
9235: LD_VAR 0 9
9239: PLUS
9240: ST_TO_ADDR
// if k > array then
9241: LD_VAR 0 8
9245: PUSH
9246: LD_VAR 0 1
9250: GREATER
9251: IFFALSE 9261
// k := 1 ;
9253: LD_ADDR_VAR 0 8
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// if not k then
9261: LD_VAR 0 8
9265: NOT
9266: IFFALSE 9278
// k := array ;
9268: LD_ADDR_VAR 0 8
9272: PUSH
9273: LD_VAR 0 1
9277: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9278: LD_ADDR_VAR 0 10
9282: PUSH
9283: LD_VAR 0 10
9287: PPUSH
9288: LD_VAR 0 8
9292: PPUSH
9293: LD_VAR 0 1
9297: PUSH
9298: LD_VAR 0 7
9302: ARRAY
9303: PPUSH
9304: CALL_OW 1
9308: ST_TO_ADDR
// end ;
9309: GO 9222
9311: POP
9312: POP
// array := tmp ;
9313: LD_ADDR_VAR 0 1
9317: PUSH
9318: LD_VAR 0 10
9322: ST_TO_ADDR
// end ;
9323: GO 9204
9325: POP
9326: POP
// result := array ;
9327: LD_ADDR_VAR 0 5
9331: PUSH
9332: LD_VAR 0 1
9336: ST_TO_ADDR
// end ;
9337: LD_VAR 0 5
9341: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9342: LD_INT 0
9344: PPUSH
9345: PPUSH
// result := 0 ;
9346: LD_ADDR_VAR 0 3
9350: PUSH
9351: LD_INT 0
9353: ST_TO_ADDR
// if not array or not value in array then
9354: LD_VAR 0 1
9358: NOT
9359: PUSH
9360: LD_VAR 0 2
9364: PUSH
9365: LD_VAR 0 1
9369: IN
9370: NOT
9371: OR
9372: IFFALSE 9376
// exit ;
9374: GO 9430
// for i = 1 to array do
9376: LD_ADDR_VAR 0 4
9380: PUSH
9381: DOUBLE
9382: LD_INT 1
9384: DEC
9385: ST_TO_ADDR
9386: LD_VAR 0 1
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9428
// if value = array [ i ] then
9394: LD_VAR 0 2
9398: PUSH
9399: LD_VAR 0 1
9403: PUSH
9404: LD_VAR 0 4
9408: ARRAY
9409: EQUAL
9410: IFFALSE 9426
// begin result := i ;
9412: LD_ADDR_VAR 0 3
9416: PUSH
9417: LD_VAR 0 4
9421: ST_TO_ADDR
// exit ;
9422: POP
9423: POP
9424: GO 9430
// end ;
9426: GO 9391
9428: POP
9429: POP
// end ;
9430: LD_VAR 0 3
9434: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9435: LD_INT 0
9437: PPUSH
// vc_chassis := chassis ;
9438: LD_ADDR_OWVAR 37
9442: PUSH
9443: LD_VAR 0 1
9447: ST_TO_ADDR
// vc_engine := engine ;
9448: LD_ADDR_OWVAR 39
9452: PUSH
9453: LD_VAR 0 2
9457: ST_TO_ADDR
// vc_control := control ;
9458: LD_ADDR_OWVAR 38
9462: PUSH
9463: LD_VAR 0 3
9467: ST_TO_ADDR
// vc_weapon := weapon ;
9468: LD_ADDR_OWVAR 40
9472: PUSH
9473: LD_VAR 0 4
9477: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9478: LD_ADDR_OWVAR 41
9482: PUSH
9483: LD_VAR 0 5
9487: ST_TO_ADDR
// end ;
9488: LD_VAR 0 6
9492: RET
// export function WantPlant ( unit ) ; var task ; begin
9493: LD_INT 0
9495: PPUSH
9496: PPUSH
// result := false ;
9497: LD_ADDR_VAR 0 2
9501: PUSH
9502: LD_INT 0
9504: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9505: LD_ADDR_VAR 0 3
9509: PUSH
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 437
9519: ST_TO_ADDR
// if task then
9520: LD_VAR 0 3
9524: IFFALSE 9552
// if task [ 1 ] [ 1 ] = p then
9526: LD_VAR 0 3
9530: PUSH
9531: LD_INT 1
9533: ARRAY
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PUSH
9539: LD_STRING p
9541: EQUAL
9542: IFFALSE 9552
// result := true ;
9544: LD_ADDR_VAR 0 2
9548: PUSH
9549: LD_INT 1
9551: ST_TO_ADDR
// end ;
9552: LD_VAR 0 2
9556: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9557: LD_INT 0
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
// if pos < 1 then
9563: LD_VAR 0 2
9567: PUSH
9568: LD_INT 1
9570: LESS
9571: IFFALSE 9575
// exit ;
9573: GO 9878
// if pos = 1 then
9575: LD_VAR 0 2
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9616
// result := Replace ( arr , pos [ 1 ] , value ) else
9585: LD_ADDR_VAR 0 4
9589: PUSH
9590: LD_VAR 0 1
9594: PPUSH
9595: LD_VAR 0 2
9599: PUSH
9600: LD_INT 1
9602: ARRAY
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: CALL_OW 1
9613: ST_TO_ADDR
9614: GO 9878
// begin tmp := arr ;
9616: LD_ADDR_VAR 0 6
9620: PUSH
9621: LD_VAR 0 1
9625: ST_TO_ADDR
// s_arr := [ tmp ] ;
9626: LD_ADDR_VAR 0 7
9630: PUSH
9631: LD_VAR 0 6
9635: PUSH
9636: EMPTY
9637: LIST
9638: ST_TO_ADDR
// for i = 1 to pos - 1 do
9639: LD_ADDR_VAR 0 5
9643: PUSH
9644: DOUBLE
9645: LD_INT 1
9647: DEC
9648: ST_TO_ADDR
9649: LD_VAR 0 2
9653: PUSH
9654: LD_INT 1
9656: MINUS
9657: PUSH
9658: FOR_TO
9659: IFFALSE 9704
// begin tmp := tmp [ pos [ i ] ] ;
9661: LD_ADDR_VAR 0 6
9665: PUSH
9666: LD_VAR 0 6
9670: PUSH
9671: LD_VAR 0 2
9675: PUSH
9676: LD_VAR 0 5
9680: ARRAY
9681: ARRAY
9682: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9683: LD_ADDR_VAR 0 7
9687: PUSH
9688: LD_VAR 0 7
9692: PUSH
9693: LD_VAR 0 6
9697: PUSH
9698: EMPTY
9699: LIST
9700: ADD
9701: ST_TO_ADDR
// end ;
9702: GO 9658
9704: POP
9705: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9706: LD_ADDR_VAR 0 6
9710: PUSH
9711: LD_VAR 0 6
9715: PPUSH
9716: LD_VAR 0 2
9720: PUSH
9721: LD_VAR 0 2
9725: ARRAY
9726: PPUSH
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 1
9736: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9737: LD_ADDR_VAR 0 7
9741: PUSH
9742: LD_VAR 0 7
9746: PPUSH
9747: LD_VAR 0 7
9751: PPUSH
9752: LD_VAR 0 6
9756: PPUSH
9757: CALL_OW 1
9761: ST_TO_ADDR
// for i = s_arr downto 2 do
9762: LD_ADDR_VAR 0 5
9766: PUSH
9767: DOUBLE
9768: LD_VAR 0 7
9772: INC
9773: ST_TO_ADDR
9774: LD_INT 2
9776: PUSH
9777: FOR_DOWNTO
9778: IFFALSE 9862
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9780: LD_ADDR_VAR 0 6
9784: PUSH
9785: LD_VAR 0 7
9789: PUSH
9790: LD_VAR 0 5
9794: PUSH
9795: LD_INT 1
9797: MINUS
9798: ARRAY
9799: PPUSH
9800: LD_VAR 0 2
9804: PUSH
9805: LD_VAR 0 5
9809: PUSH
9810: LD_INT 1
9812: MINUS
9813: ARRAY
9814: PPUSH
9815: LD_VAR 0 7
9819: PUSH
9820: LD_VAR 0 5
9824: ARRAY
9825: PPUSH
9826: CALL_OW 1
9830: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9831: LD_ADDR_VAR 0 7
9835: PUSH
9836: LD_VAR 0 7
9840: PPUSH
9841: LD_VAR 0 5
9845: PUSH
9846: LD_INT 1
9848: MINUS
9849: PPUSH
9850: LD_VAR 0 6
9854: PPUSH
9855: CALL_OW 1
9859: ST_TO_ADDR
// end ;
9860: GO 9777
9862: POP
9863: POP
// result := s_arr [ 1 ] ;
9864: LD_ADDR_VAR 0 4
9868: PUSH
9869: LD_VAR 0 7
9873: PUSH
9874: LD_INT 1
9876: ARRAY
9877: ST_TO_ADDR
// end ; end ;
9878: LD_VAR 0 4
9882: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9883: LD_INT 0
9885: PPUSH
9886: PPUSH
// if not list then
9887: LD_VAR 0 1
9891: NOT
9892: IFFALSE 9896
// exit ;
9894: GO 9987
// i := list [ pos1 ] ;
9896: LD_ADDR_VAR 0 5
9900: PUSH
9901: LD_VAR 0 1
9905: PUSH
9906: LD_VAR 0 2
9910: ARRAY
9911: ST_TO_ADDR
// if not i then
9912: LD_VAR 0 5
9916: NOT
9917: IFFALSE 9921
// exit ;
9919: GO 9987
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9921: LD_ADDR_VAR 0 1
9925: PUSH
9926: LD_VAR 0 1
9930: PPUSH
9931: LD_VAR 0 2
9935: PPUSH
9936: LD_VAR 0 1
9940: PUSH
9941: LD_VAR 0 3
9945: ARRAY
9946: PPUSH
9947: CALL_OW 1
9951: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9952: LD_ADDR_VAR 0 1
9956: PUSH
9957: LD_VAR 0 1
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_VAR 0 5
9971: PPUSH
9972: CALL_OW 1
9976: ST_TO_ADDR
// result := list ;
9977: LD_ADDR_VAR 0 4
9981: PUSH
9982: LD_VAR 0 1
9986: ST_TO_ADDR
// end ;
9987: LD_VAR 0 4
9991: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9992: LD_INT 0
9994: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9995: LD_ADDR_VAR 0 5
9999: PUSH
10000: LD_VAR 0 1
10004: PPUSH
10005: CALL_OW 250
10009: PPUSH
10010: LD_VAR 0 1
10014: PPUSH
10015: CALL_OW 251
10019: PPUSH
10020: LD_VAR 0 2
10024: PPUSH
10025: LD_VAR 0 3
10029: PPUSH
10030: LD_VAR 0 4
10034: PPUSH
10035: CALL 10045 0 5
10039: ST_TO_ADDR
// end ;
10040: LD_VAR 0 5
10044: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10045: LD_INT 0
10047: PPUSH
10048: PPUSH
10049: PPUSH
10050: PPUSH
// if not list then
10051: LD_VAR 0 3
10055: NOT
10056: IFFALSE 10060
// exit ;
10058: GO 10448
// result := [ ] ;
10060: LD_ADDR_VAR 0 6
10064: PUSH
10065: EMPTY
10066: ST_TO_ADDR
// for i in list do
10067: LD_ADDR_VAR 0 7
10071: PUSH
10072: LD_VAR 0 3
10076: PUSH
10077: FOR_IN
10078: IFFALSE 10280
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10080: LD_ADDR_VAR 0 9
10084: PUSH
10085: LD_VAR 0 7
10089: PPUSH
10090: LD_VAR 0 1
10094: PPUSH
10095: LD_VAR 0 2
10099: PPUSH
10100: CALL_OW 297
10104: ST_TO_ADDR
// if not result then
10105: LD_VAR 0 6
10109: NOT
10110: IFFALSE 10136
// result := [ [ i , tmp ] ] else
10112: LD_ADDR_VAR 0 6
10116: PUSH
10117: LD_VAR 0 7
10121: PUSH
10122: LD_VAR 0 9
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: ST_TO_ADDR
10134: GO 10278
// begin if result [ result ] [ 2 ] < tmp then
10136: LD_VAR 0 6
10140: PUSH
10141: LD_VAR 0 6
10145: ARRAY
10146: PUSH
10147: LD_INT 2
10149: ARRAY
10150: PUSH
10151: LD_VAR 0 9
10155: LESS
10156: IFFALSE 10198
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10158: LD_ADDR_VAR 0 6
10162: PUSH
10163: LD_VAR 0 6
10167: PPUSH
10168: LD_VAR 0 6
10172: PUSH
10173: LD_INT 1
10175: PLUS
10176: PPUSH
10177: LD_VAR 0 7
10181: PUSH
10182: LD_VAR 0 9
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PPUSH
10191: CALL_OW 2
10195: ST_TO_ADDR
10196: GO 10278
// for j = 1 to result do
10198: LD_ADDR_VAR 0 8
10202: PUSH
10203: DOUBLE
10204: LD_INT 1
10206: DEC
10207: ST_TO_ADDR
10208: LD_VAR 0 6
10212: PUSH
10213: FOR_TO
10214: IFFALSE 10276
// begin if tmp < result [ j ] [ 2 ] then
10216: LD_VAR 0 9
10220: PUSH
10221: LD_VAR 0 6
10225: PUSH
10226: LD_VAR 0 8
10230: ARRAY
10231: PUSH
10232: LD_INT 2
10234: ARRAY
10235: LESS
10236: IFFALSE 10274
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10238: LD_ADDR_VAR 0 6
10242: PUSH
10243: LD_VAR 0 6
10247: PPUSH
10248: LD_VAR 0 8
10252: PPUSH
10253: LD_VAR 0 7
10257: PUSH
10258: LD_VAR 0 9
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 2
10271: ST_TO_ADDR
// break ;
10272: GO 10276
// end ; end ;
10274: GO 10213
10276: POP
10277: POP
// end ; end ;
10278: GO 10077
10280: POP
10281: POP
// if result and not asc then
10282: LD_VAR 0 6
10286: PUSH
10287: LD_VAR 0 4
10291: NOT
10292: AND
10293: IFFALSE 10368
// begin tmp := result ;
10295: LD_ADDR_VAR 0 9
10299: PUSH
10300: LD_VAR 0 6
10304: ST_TO_ADDR
// for i = tmp downto 1 do
10305: LD_ADDR_VAR 0 7
10309: PUSH
10310: DOUBLE
10311: LD_VAR 0 9
10315: INC
10316: ST_TO_ADDR
10317: LD_INT 1
10319: PUSH
10320: FOR_DOWNTO
10321: IFFALSE 10366
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10323: LD_ADDR_VAR 0 6
10327: PUSH
10328: LD_VAR 0 6
10332: PPUSH
10333: LD_VAR 0 9
10337: PUSH
10338: LD_VAR 0 7
10342: MINUS
10343: PUSH
10344: LD_INT 1
10346: PLUS
10347: PPUSH
10348: LD_VAR 0 9
10352: PUSH
10353: LD_VAR 0 7
10357: ARRAY
10358: PPUSH
10359: CALL_OW 1
10363: ST_TO_ADDR
10364: GO 10320
10366: POP
10367: POP
// end ; tmp := [ ] ;
10368: LD_ADDR_VAR 0 9
10372: PUSH
10373: EMPTY
10374: ST_TO_ADDR
// if mode then
10375: LD_VAR 0 5
10379: IFFALSE 10448
// begin for i = 1 to result do
10381: LD_ADDR_VAR 0 7
10385: PUSH
10386: DOUBLE
10387: LD_INT 1
10389: DEC
10390: ST_TO_ADDR
10391: LD_VAR 0 6
10395: PUSH
10396: FOR_TO
10397: IFFALSE 10436
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10399: LD_ADDR_VAR 0 9
10403: PUSH
10404: LD_VAR 0 9
10408: PPUSH
10409: LD_VAR 0 7
10413: PPUSH
10414: LD_VAR 0 6
10418: PUSH
10419: LD_VAR 0 7
10423: ARRAY
10424: PUSH
10425: LD_INT 1
10427: ARRAY
10428: PPUSH
10429: CALL_OW 1
10433: ST_TO_ADDR
10434: GO 10396
10436: POP
10437: POP
// result := tmp ;
10438: LD_ADDR_VAR 0 6
10442: PUSH
10443: LD_VAR 0 9
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 6
10452: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
10458: PPUSH
10459: PPUSH
10460: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10461: LD_ADDR_VAR 0 5
10465: PUSH
10466: LD_INT 0
10468: PUSH
10469: LD_INT 0
10471: PUSH
10472: LD_INT 0
10474: PUSH
10475: EMPTY
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: ST_TO_ADDR
// if not x or not y then
10483: LD_VAR 0 2
10487: NOT
10488: PUSH
10489: LD_VAR 0 3
10493: NOT
10494: OR
10495: IFFALSE 10499
// exit ;
10497: GO 12149
// if not range then
10499: LD_VAR 0 4
10503: NOT
10504: IFFALSE 10514
// range := 10 ;
10506: LD_ADDR_VAR 0 4
10510: PUSH
10511: LD_INT 10
10513: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10514: LD_ADDR_VAR 0 8
10518: PUSH
10519: LD_INT 81
10521: PUSH
10522: LD_VAR 0 1
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 92
10533: PUSH
10534: LD_VAR 0 2
10538: PUSH
10539: LD_VAR 0 3
10543: PUSH
10544: LD_VAR 0 4
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: LD_INT 21
10560: PUSH
10561: LD_INT 3
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: ST_TO_ADDR
// if not tmp then
10582: LD_VAR 0 8
10586: NOT
10587: IFFALSE 10591
// exit ;
10589: GO 12149
// for i in tmp do
10591: LD_ADDR_VAR 0 6
10595: PUSH
10596: LD_VAR 0 8
10600: PUSH
10601: FOR_IN
10602: IFFALSE 12124
// begin points := [ 0 , 0 , 0 ] ;
10604: LD_ADDR_VAR 0 9
10608: PUSH
10609: LD_INT 0
10611: PUSH
10612: LD_INT 0
10614: PUSH
10615: LD_INT 0
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: ST_TO_ADDR
// bpoints := 1 ;
10623: LD_ADDR_VAR 0 10
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10631: LD_VAR 0 6
10635: PPUSH
10636: CALL_OW 247
10640: PUSH
10641: LD_INT 1
10643: DOUBLE
10644: EQUAL
10645: IFTRUE 10649
10647: GO 11227
10649: POP
// begin if GetClass ( i ) = 1 then
10650: LD_VAR 0 6
10654: PPUSH
10655: CALL_OW 257
10659: PUSH
10660: LD_INT 1
10662: EQUAL
10663: IFFALSE 10684
// points := [ 10 , 5 , 3 ] ;
10665: LD_ADDR_VAR 0 9
10669: PUSH
10670: LD_INT 10
10672: PUSH
10673: LD_INT 5
10675: PUSH
10676: LD_INT 3
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10684: LD_VAR 0 6
10688: PPUSH
10689: CALL_OW 257
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 3
10699: PUSH
10700: LD_INT 4
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: IN
10708: IFFALSE 10729
// points := [ 3 , 2 , 1 ] ;
10710: LD_ADDR_VAR 0 9
10714: PUSH
10715: LD_INT 3
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10729: LD_VAR 0 6
10733: PPUSH
10734: CALL_OW 257
10738: PUSH
10739: LD_INT 5
10741: EQUAL
10742: IFFALSE 10763
// points := [ 130 , 5 , 2 ] ;
10744: LD_ADDR_VAR 0 9
10748: PUSH
10749: LD_INT 130
10751: PUSH
10752: LD_INT 5
10754: PUSH
10755: LD_INT 2
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10763: LD_VAR 0 6
10767: PPUSH
10768: CALL_OW 257
10772: PUSH
10773: LD_INT 8
10775: EQUAL
10776: IFFALSE 10797
// points := [ 35 , 35 , 30 ] ;
10778: LD_ADDR_VAR 0 9
10782: PUSH
10783: LD_INT 35
10785: PUSH
10786: LD_INT 35
10788: PUSH
10789: LD_INT 30
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10797: LD_VAR 0 6
10801: PPUSH
10802: CALL_OW 257
10806: PUSH
10807: LD_INT 9
10809: EQUAL
10810: IFFALSE 10831
// points := [ 20 , 55 , 40 ] ;
10812: LD_ADDR_VAR 0 9
10816: PUSH
10817: LD_INT 20
10819: PUSH
10820: LD_INT 55
10822: PUSH
10823: LD_INT 40
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10831: LD_VAR 0 6
10835: PPUSH
10836: CALL_OW 257
10840: PUSH
10841: LD_INT 12
10843: PUSH
10844: LD_INT 16
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: IN
10851: IFFALSE 10872
// points := [ 5 , 3 , 2 ] ;
10853: LD_ADDR_VAR 0 9
10857: PUSH
10858: LD_INT 5
10860: PUSH
10861: LD_INT 3
10863: PUSH
10864: LD_INT 2
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10872: LD_VAR 0 6
10876: PPUSH
10877: CALL_OW 257
10881: PUSH
10882: LD_INT 17
10884: EQUAL
10885: IFFALSE 10906
// points := [ 100 , 50 , 75 ] ;
10887: LD_ADDR_VAR 0 9
10891: PUSH
10892: LD_INT 100
10894: PUSH
10895: LD_INT 50
10897: PUSH
10898: LD_INT 75
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10906: LD_VAR 0 6
10910: PPUSH
10911: CALL_OW 257
10915: PUSH
10916: LD_INT 15
10918: EQUAL
10919: IFFALSE 10940
// points := [ 10 , 5 , 3 ] ;
10921: LD_ADDR_VAR 0 9
10925: PUSH
10926: LD_INT 10
10928: PUSH
10929: LD_INT 5
10931: PUSH
10932: LD_INT 3
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10940: LD_VAR 0 6
10944: PPUSH
10945: CALL_OW 257
10949: PUSH
10950: LD_INT 14
10952: EQUAL
10953: IFFALSE 10974
// points := [ 10 , 0 , 0 ] ;
10955: LD_ADDR_VAR 0 9
10959: PUSH
10960: LD_INT 10
10962: PUSH
10963: LD_INT 0
10965: PUSH
10966: LD_INT 0
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10974: LD_VAR 0 6
10978: PPUSH
10979: CALL_OW 257
10983: PUSH
10984: LD_INT 11
10986: EQUAL
10987: IFFALSE 11008
// points := [ 30 , 10 , 5 ] ;
10989: LD_ADDR_VAR 0 9
10993: PUSH
10994: LD_INT 30
10996: PUSH
10997: LD_INT 10
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11008: LD_VAR 0 1
11012: PPUSH
11013: LD_INT 5
11015: PPUSH
11016: CALL_OW 321
11020: PUSH
11021: LD_INT 2
11023: EQUAL
11024: IFFALSE 11041
// bpoints := bpoints * 1.8 ;
11026: LD_ADDR_VAR 0 10
11030: PUSH
11031: LD_VAR 0 10
11035: PUSH
11036: LD_REAL  1.80000000000000E+0000
11039: MUL
11040: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11041: LD_VAR 0 6
11045: PPUSH
11046: CALL_OW 257
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: LD_INT 2
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: LD_INT 4
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: IN
11069: PUSH
11070: LD_VAR 0 1
11074: PPUSH
11075: LD_INT 51
11077: PPUSH
11078: CALL_OW 321
11082: PUSH
11083: LD_INT 2
11085: EQUAL
11086: AND
11087: IFFALSE 11104
// bpoints := bpoints * 1.2 ;
11089: LD_ADDR_VAR 0 10
11093: PUSH
11094: LD_VAR 0 10
11098: PUSH
11099: LD_REAL  1.20000000000000E+0000
11102: MUL
11103: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11104: LD_VAR 0 6
11108: PPUSH
11109: CALL_OW 257
11113: PUSH
11114: LD_INT 5
11116: PUSH
11117: LD_INT 7
11119: PUSH
11120: LD_INT 9
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: IN
11128: PUSH
11129: LD_VAR 0 1
11133: PPUSH
11134: LD_INT 52
11136: PPUSH
11137: CALL_OW 321
11141: PUSH
11142: LD_INT 2
11144: EQUAL
11145: AND
11146: IFFALSE 11163
// bpoints := bpoints * 1.5 ;
11148: LD_ADDR_VAR 0 10
11152: PUSH
11153: LD_VAR 0 10
11157: PUSH
11158: LD_REAL  1.50000000000000E+0000
11161: MUL
11162: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11163: LD_VAR 0 1
11167: PPUSH
11168: LD_INT 66
11170: PPUSH
11171: CALL_OW 321
11175: PUSH
11176: LD_INT 2
11178: EQUAL
11179: IFFALSE 11196
// bpoints := bpoints * 1.1 ;
11181: LD_ADDR_VAR 0 10
11185: PUSH
11186: LD_VAR 0 10
11190: PUSH
11191: LD_REAL  1.10000000000000E+0000
11194: MUL
11195: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11196: LD_ADDR_VAR 0 10
11200: PUSH
11201: LD_VAR 0 10
11205: PUSH
11206: LD_VAR 0 6
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 259
11218: PUSH
11219: LD_REAL  1.15000000000000E+0000
11222: MUL
11223: MUL
11224: ST_TO_ADDR
// end ; unit_vehicle :
11225: GO 12053
11227: LD_INT 2
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 12041
11235: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11236: LD_VAR 0 6
11240: PPUSH
11241: CALL_OW 264
11245: PUSH
11246: LD_INT 2
11248: PUSH
11249: LD_INT 42
11251: PUSH
11252: LD_INT 24
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: IN
11260: IFFALSE 11281
// points := [ 25 , 5 , 3 ] ;
11262: LD_ADDR_VAR 0 9
11266: PUSH
11267: LD_INT 25
11269: PUSH
11270: LD_INT 5
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11281: LD_VAR 0 6
11285: PPUSH
11286: CALL_OW 264
11290: PUSH
11291: LD_INT 4
11293: PUSH
11294: LD_INT 43
11296: PUSH
11297: LD_INT 25
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: IN
11305: IFFALSE 11326
// points := [ 40 , 15 , 5 ] ;
11307: LD_ADDR_VAR 0 9
11311: PUSH
11312: LD_INT 40
11314: PUSH
11315: LD_INT 15
11317: PUSH
11318: LD_INT 5
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11326: LD_VAR 0 6
11330: PPUSH
11331: CALL_OW 264
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: LD_INT 23
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: IN
11346: IFFALSE 11367
// points := [ 7 , 25 , 8 ] ;
11348: LD_ADDR_VAR 0 9
11352: PUSH
11353: LD_INT 7
11355: PUSH
11356: LD_INT 25
11358: PUSH
11359: LD_INT 8
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: LIST
11366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 264
11376: PUSH
11377: LD_INT 5
11379: PUSH
11380: LD_INT 27
11382: PUSH
11383: LD_INT 44
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: LIST
11390: IN
11391: IFFALSE 11412
// points := [ 14 , 50 , 16 ] ;
11393: LD_ADDR_VAR 0 9
11397: PUSH
11398: LD_INT 14
11400: PUSH
11401: LD_INT 50
11403: PUSH
11404: LD_INT 16
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11412: LD_VAR 0 6
11416: PPUSH
11417: CALL_OW 264
11421: PUSH
11422: LD_INT 6
11424: PUSH
11425: LD_INT 46
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: IN
11432: IFFALSE 11453
// points := [ 32 , 120 , 70 ] ;
11434: LD_ADDR_VAR 0 9
11438: PUSH
11439: LD_INT 32
11441: PUSH
11442: LD_INT 120
11444: PUSH
11445: LD_INT 70
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11453: LD_VAR 0 6
11457: PPUSH
11458: CALL_OW 264
11462: PUSH
11463: LD_INT 7
11465: PUSH
11466: LD_INT 28
11468: PUSH
11469: LD_INT 45
11471: PUSH
11472: LD_INT 92
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: IN
11481: IFFALSE 11502
// points := [ 35 , 20 , 45 ] ;
11483: LD_ADDR_VAR 0 9
11487: PUSH
11488: LD_INT 35
11490: PUSH
11491: LD_INT 20
11493: PUSH
11494: LD_INT 45
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11502: LD_VAR 0 6
11506: PPUSH
11507: CALL_OW 264
11511: PUSH
11512: LD_INT 47
11514: PUSH
11515: EMPTY
11516: LIST
11517: IN
11518: IFFALSE 11539
// points := [ 67 , 45 , 75 ] ;
11520: LD_ADDR_VAR 0 9
11524: PUSH
11525: LD_INT 67
11527: PUSH
11528: LD_INT 45
11530: PUSH
11531: LD_INT 75
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11539: LD_VAR 0 6
11543: PPUSH
11544: CALL_OW 264
11548: PUSH
11549: LD_INT 26
11551: PUSH
11552: EMPTY
11553: LIST
11554: IN
11555: IFFALSE 11576
// points := [ 120 , 30 , 80 ] ;
11557: LD_ADDR_VAR 0 9
11561: PUSH
11562: LD_INT 120
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 80
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11576: LD_VAR 0 6
11580: PPUSH
11581: CALL_OW 264
11585: PUSH
11586: LD_INT 22
11588: PUSH
11589: EMPTY
11590: LIST
11591: IN
11592: IFFALSE 11613
// points := [ 40 , 1 , 1 ] ;
11594: LD_ADDR_VAR 0 9
11598: PUSH
11599: LD_INT 40
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: LD_INT 1
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11613: LD_VAR 0 6
11617: PPUSH
11618: CALL_OW 264
11622: PUSH
11623: LD_INT 29
11625: PUSH
11626: EMPTY
11627: LIST
11628: IN
11629: IFFALSE 11650
// points := [ 70 , 200 , 400 ] ;
11631: LD_ADDR_VAR 0 9
11635: PUSH
11636: LD_INT 70
11638: PUSH
11639: LD_INT 200
11641: PUSH
11642: LD_INT 400
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11650: LD_VAR 0 6
11654: PPUSH
11655: CALL_OW 264
11659: PUSH
11660: LD_INT 14
11662: PUSH
11663: LD_INT 53
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: IN
11670: IFFALSE 11691
// points := [ 40 , 10 , 20 ] ;
11672: LD_ADDR_VAR 0 9
11676: PUSH
11677: LD_INT 40
11679: PUSH
11680: LD_INT 10
11682: PUSH
11683: LD_INT 20
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11691: LD_VAR 0 6
11695: PPUSH
11696: CALL_OW 264
11700: PUSH
11701: LD_INT 9
11703: PUSH
11704: EMPTY
11705: LIST
11706: IN
11707: IFFALSE 11728
// points := [ 5 , 70 , 20 ] ;
11709: LD_ADDR_VAR 0 9
11713: PUSH
11714: LD_INT 5
11716: PUSH
11717: LD_INT 70
11719: PUSH
11720: LD_INT 20
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11728: LD_VAR 0 6
11732: PPUSH
11733: CALL_OW 264
11737: PUSH
11738: LD_INT 10
11740: PUSH
11741: EMPTY
11742: LIST
11743: IN
11744: IFFALSE 11765
// points := [ 35 , 110 , 70 ] ;
11746: LD_ADDR_VAR 0 9
11750: PUSH
11751: LD_INT 35
11753: PUSH
11754: LD_INT 110
11756: PUSH
11757: LD_INT 70
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11765: LD_VAR 0 6
11769: PPUSH
11770: CALL_OW 265
11774: PUSH
11775: LD_INT 25
11777: EQUAL
11778: IFFALSE 11799
// points := [ 80 , 65 , 100 ] ;
11780: LD_ADDR_VAR 0 9
11784: PUSH
11785: LD_INT 80
11787: PUSH
11788: LD_INT 65
11790: PUSH
11791: LD_INT 100
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11799: LD_VAR 0 6
11803: PPUSH
11804: CALL_OW 263
11808: PUSH
11809: LD_INT 1
11811: EQUAL
11812: IFFALSE 11847
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11814: LD_ADDR_VAR 0 10
11818: PUSH
11819: LD_VAR 0 10
11823: PUSH
11824: LD_VAR 0 6
11828: PPUSH
11829: CALL_OW 311
11833: PPUSH
11834: LD_INT 3
11836: PPUSH
11837: CALL_OW 259
11841: PUSH
11842: LD_INT 4
11844: MUL
11845: MUL
11846: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11847: LD_VAR 0 6
11851: PPUSH
11852: CALL_OW 263
11856: PUSH
11857: LD_INT 2
11859: EQUAL
11860: IFFALSE 11911
// begin j := IsControledBy ( i ) ;
11862: LD_ADDR_VAR 0 7
11866: PUSH
11867: LD_VAR 0 6
11871: PPUSH
11872: CALL_OW 312
11876: ST_TO_ADDR
// if j then
11877: LD_VAR 0 7
11881: IFFALSE 11911
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11883: LD_ADDR_VAR 0 10
11887: PUSH
11888: LD_VAR 0 10
11892: PUSH
11893: LD_VAR 0 7
11897: PPUSH
11898: LD_INT 3
11900: PPUSH
11901: CALL_OW 259
11905: PUSH
11906: LD_INT 3
11908: MUL
11909: MUL
11910: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11911: LD_VAR 0 6
11915: PPUSH
11916: CALL_OW 264
11920: PUSH
11921: LD_INT 5
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 46
11929: PUSH
11930: LD_INT 44
11932: PUSH
11933: LD_INT 47
11935: PUSH
11936: LD_INT 45
11938: PUSH
11939: LD_INT 28
11941: PUSH
11942: LD_INT 7
11944: PUSH
11945: LD_INT 27
11947: PUSH
11948: LD_INT 29
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: IN
11963: PUSH
11964: LD_VAR 0 1
11968: PPUSH
11969: LD_INT 52
11971: PPUSH
11972: CALL_OW 321
11976: PUSH
11977: LD_INT 2
11979: EQUAL
11980: AND
11981: IFFALSE 11998
// bpoints := bpoints * 1.2 ;
11983: LD_ADDR_VAR 0 10
11987: PUSH
11988: LD_VAR 0 10
11992: PUSH
11993: LD_REAL  1.20000000000000E+0000
11996: MUL
11997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11998: LD_VAR 0 6
12002: PPUSH
12003: CALL_OW 264
12007: PUSH
12008: LD_INT 6
12010: PUSH
12011: LD_INT 46
12013: PUSH
12014: LD_INT 47
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: IN
12022: IFFALSE 12039
// bpoints := bpoints * 1.2 ;
12024: LD_ADDR_VAR 0 10
12028: PUSH
12029: LD_VAR 0 10
12033: PUSH
12034: LD_REAL  1.20000000000000E+0000
12037: MUL
12038: ST_TO_ADDR
// end ; unit_building :
12039: GO 12053
12041: LD_INT 3
12043: DOUBLE
12044: EQUAL
12045: IFTRUE 12049
12047: GO 12052
12049: POP
// ; end ;
12050: GO 12053
12052: POP
// for j = 1 to 3 do
12053: LD_ADDR_VAR 0 7
12057: PUSH
12058: DOUBLE
12059: LD_INT 1
12061: DEC
12062: ST_TO_ADDR
12063: LD_INT 3
12065: PUSH
12066: FOR_TO
12067: IFFALSE 12120
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12069: LD_ADDR_VAR 0 5
12073: PUSH
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 7
12083: PPUSH
12084: LD_VAR 0 5
12088: PUSH
12089: LD_VAR 0 7
12093: ARRAY
12094: PUSH
12095: LD_VAR 0 9
12099: PUSH
12100: LD_VAR 0 7
12104: ARRAY
12105: PUSH
12106: LD_VAR 0 10
12110: MUL
12111: PLUS
12112: PPUSH
12113: CALL_OW 1
12117: ST_TO_ADDR
12118: GO 12066
12120: POP
12121: POP
// end ;
12122: GO 10601
12124: POP
12125: POP
// result := Replace ( result , 4 , tmp ) ;
12126: LD_ADDR_VAR 0 5
12130: PUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: LD_INT 4
12138: PPUSH
12139: LD_VAR 0 8
12143: PPUSH
12144: CALL_OW 1
12148: ST_TO_ADDR
// end ;
12149: LD_VAR 0 5
12153: RET
// export function DangerAtRange ( unit , range ) ; begin
12154: LD_INT 0
12156: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12157: LD_ADDR_VAR 0 3
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 255
12171: PPUSH
12172: LD_VAR 0 1
12176: PPUSH
12177: CALL_OW 250
12181: PPUSH
12182: LD_VAR 0 1
12186: PPUSH
12187: CALL_OW 251
12191: PPUSH
12192: LD_VAR 0 2
12196: PPUSH
12197: CALL 10453 0 4
12201: ST_TO_ADDR
// end ;
12202: LD_VAR 0 3
12206: RET
// export function DangerInArea ( side , area ) ; begin
12207: LD_INT 0
12209: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12210: LD_ADDR_VAR 0 3
12214: PUSH
12215: LD_VAR 0 2
12219: PPUSH
12220: LD_INT 81
12222: PUSH
12223: LD_VAR 0 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 70
12236: ST_TO_ADDR
// end ;
12237: LD_VAR 0 3
12241: RET
// export function IsExtension ( b ) ; begin
12242: LD_INT 0
12244: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: LD_VAR 0 1
12254: PUSH
12255: LD_INT 23
12257: PUSH
12258: LD_INT 20
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 17
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 19
12275: PUSH
12276: LD_INT 16
12278: PUSH
12279: LD_INT 25
12281: PUSH
12282: LD_INT 18
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: IN
12297: ST_TO_ADDR
// end ;
12298: LD_VAR 0 2
12302: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
12307: PPUSH
// result := [ ] ;
12308: LD_ADDR_VAR 0 4
12312: PUSH
12313: EMPTY
12314: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12315: LD_ADDR_VAR 0 5
12319: PUSH
12320: LD_VAR 0 2
12324: PPUSH
12325: LD_INT 21
12327: PUSH
12328: LD_INT 3
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 70
12339: ST_TO_ADDR
// if not tmp then
12340: LD_VAR 0 5
12344: NOT
12345: IFFALSE 12349
// exit ;
12347: GO 12413
// if checkLink then
12349: LD_VAR 0 3
12353: IFFALSE 12403
// begin for i in tmp do
12355: LD_ADDR_VAR 0 6
12359: PUSH
12360: LD_VAR 0 5
12364: PUSH
12365: FOR_IN
12366: IFFALSE 12401
// if GetBase ( i ) <> base then
12368: LD_VAR 0 6
12372: PPUSH
12373: CALL_OW 274
12377: PUSH
12378: LD_VAR 0 1
12382: NONEQUAL
12383: IFFALSE 12399
// ComLinkToBase ( base , i ) ;
12385: LD_VAR 0 1
12389: PPUSH
12390: LD_VAR 0 6
12394: PPUSH
12395: CALL_OW 169
12399: GO 12365
12401: POP
12402: POP
// end ; result := tmp ;
12403: LD_ADDR_VAR 0 4
12407: PUSH
12408: LD_VAR 0 5
12412: ST_TO_ADDR
// end ;
12413: LD_VAR 0 4
12417: RET
// export function ComComplete ( units , b ) ; var i ; begin
12418: LD_INT 0
12420: PPUSH
12421: PPUSH
// if not units then
12422: LD_VAR 0 1
12426: NOT
12427: IFFALSE 12431
// exit ;
12429: GO 12521
// for i in units do
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: LD_VAR 0 1
12440: PUSH
12441: FOR_IN
12442: IFFALSE 12519
// if BuildingStatus ( b ) = bs_build then
12444: LD_VAR 0 2
12448: PPUSH
12449: CALL_OW 461
12453: PUSH
12454: LD_INT 1
12456: EQUAL
12457: IFFALSE 12517
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12459: LD_VAR 0 4
12463: PPUSH
12464: LD_STRING h
12466: PUSH
12467: LD_VAR 0 2
12471: PPUSH
12472: CALL_OW 250
12476: PUSH
12477: LD_VAR 0 2
12481: PPUSH
12482: CALL_OW 251
12486: PUSH
12487: LD_VAR 0 2
12491: PUSH
12492: LD_INT 0
12494: PUSH
12495: LD_INT 0
12497: PUSH
12498: LD_INT 0
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: PPUSH
12513: CALL_OW 446
12517: GO 12441
12519: POP
12520: POP
// end ;
12521: LD_VAR 0 3
12525: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12526: LD_INT 0
12528: PPUSH
12529: PPUSH
12530: PPUSH
12531: PPUSH
12532: PPUSH
12533: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12534: LD_VAR 0 1
12538: NOT
12539: PUSH
12540: LD_VAR 0 1
12544: PPUSH
12545: CALL_OW 263
12549: PUSH
12550: LD_INT 2
12552: NONEQUAL
12553: OR
12554: IFFALSE 12558
// exit ;
12556: GO 12874
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12558: LD_ADDR_VAR 0 6
12562: PUSH
12563: LD_INT 22
12565: PUSH
12566: LD_VAR 0 1
12570: PPUSH
12571: CALL_OW 255
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: LD_INT 30
12585: PUSH
12586: LD_INT 36
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 34
12595: PUSH
12596: LD_INT 31
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: ST_TO_ADDR
// if not tmp then
12617: LD_VAR 0 6
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 12874
// result := [ ] ;
12626: LD_ADDR_VAR 0 2
12630: PUSH
12631: EMPTY
12632: ST_TO_ADDR
// for i in tmp do
12633: LD_ADDR_VAR 0 3
12637: PUSH
12638: LD_VAR 0 6
12642: PUSH
12643: FOR_IN
12644: IFFALSE 12715
// begin t := UnitsInside ( i ) ;
12646: LD_ADDR_VAR 0 4
12650: PUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: CALL_OW 313
12660: ST_TO_ADDR
// if t then
12661: LD_VAR 0 4
12665: IFFALSE 12713
// for j in t do
12667: LD_ADDR_VAR 0 7
12671: PUSH
12672: LD_VAR 0 4
12676: PUSH
12677: FOR_IN
12678: IFFALSE 12711
// result := Replace ( result , result + 1 , j ) ;
12680: LD_ADDR_VAR 0 2
12684: PUSH
12685: LD_VAR 0 2
12689: PPUSH
12690: LD_VAR 0 2
12694: PUSH
12695: LD_INT 1
12697: PLUS
12698: PPUSH
12699: LD_VAR 0 7
12703: PPUSH
12704: CALL_OW 1
12708: ST_TO_ADDR
12709: GO 12677
12711: POP
12712: POP
// end ;
12713: GO 12643
12715: POP
12716: POP
// if not result then
12717: LD_VAR 0 2
12721: NOT
12722: IFFALSE 12726
// exit ;
12724: GO 12874
// mech := result [ 1 ] ;
12726: LD_ADDR_VAR 0 5
12730: PUSH
12731: LD_VAR 0 2
12735: PUSH
12736: LD_INT 1
12738: ARRAY
12739: ST_TO_ADDR
// if result > 1 then
12740: LD_VAR 0 2
12744: PUSH
12745: LD_INT 1
12747: GREATER
12748: IFFALSE 12860
// begin for i = 2 to result do
12750: LD_ADDR_VAR 0 3
12754: PUSH
12755: DOUBLE
12756: LD_INT 2
12758: DEC
12759: ST_TO_ADDR
12760: LD_VAR 0 2
12764: PUSH
12765: FOR_TO
12766: IFFALSE 12858
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12768: LD_ADDR_VAR 0 4
12772: PUSH
12773: LD_VAR 0 2
12777: PUSH
12778: LD_VAR 0 3
12782: ARRAY
12783: PPUSH
12784: LD_INT 3
12786: PPUSH
12787: CALL_OW 259
12791: PUSH
12792: LD_VAR 0 2
12796: PUSH
12797: LD_VAR 0 3
12801: ARRAY
12802: PPUSH
12803: CALL_OW 432
12807: MINUS
12808: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12809: LD_VAR 0 4
12813: PUSH
12814: LD_VAR 0 5
12818: PPUSH
12819: LD_INT 3
12821: PPUSH
12822: CALL_OW 259
12826: PUSH
12827: LD_VAR 0 5
12831: PPUSH
12832: CALL_OW 432
12836: MINUS
12837: GREATEREQUAL
12838: IFFALSE 12856
// mech := result [ i ] ;
12840: LD_ADDR_VAR 0 5
12844: PUSH
12845: LD_VAR 0 2
12849: PUSH
12850: LD_VAR 0 3
12854: ARRAY
12855: ST_TO_ADDR
// end ;
12856: GO 12765
12858: POP
12859: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12860: LD_VAR 0 1
12864: PPUSH
12865: LD_VAR 0 5
12869: PPUSH
12870: CALL_OW 135
// end ;
12874: LD_VAR 0 2
12878: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
12884: PPUSH
12885: PPUSH
12886: PPUSH
12887: PPUSH
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
// result := [ ] ;
12894: LD_ADDR_VAR 0 7
12898: PUSH
12899: EMPTY
12900: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 266
12910: PUSH
12911: LD_INT 0
12913: PUSH
12914: LD_INT 1
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: IN
12921: NOT
12922: IFFALSE 12926
// exit ;
12924: GO 14560
// if name then
12926: LD_VAR 0 3
12930: IFFALSE 12946
// SetBName ( base_dep , name ) ;
12932: LD_VAR 0 1
12936: PPUSH
12937: LD_VAR 0 3
12941: PPUSH
12942: CALL_OW 500
// base := GetBase ( base_dep ) ;
12946: LD_ADDR_VAR 0 15
12950: PUSH
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 274
12960: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12961: LD_ADDR_VAR 0 16
12965: PUSH
12966: LD_VAR 0 1
12970: PPUSH
12971: CALL_OW 255
12975: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12976: LD_ADDR_VAR 0 17
12980: PUSH
12981: LD_VAR 0 1
12985: PPUSH
12986: CALL_OW 248
12990: ST_TO_ADDR
// if sources then
12991: LD_VAR 0 5
12995: IFFALSE 13042
// for i = 1 to 3 do
12997: LD_ADDR_VAR 0 8
13001: PUSH
13002: DOUBLE
13003: LD_INT 1
13005: DEC
13006: ST_TO_ADDR
13007: LD_INT 3
13009: PUSH
13010: FOR_TO
13011: IFFALSE 13040
// AddResourceType ( base , i , sources [ i ] ) ;
13013: LD_VAR 0 15
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: LD_VAR 0 5
13027: PUSH
13028: LD_VAR 0 8
13032: ARRAY
13033: PPUSH
13034: CALL_OW 276
13038: GO 13010
13040: POP
13041: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13042: LD_ADDR_VAR 0 18
13046: PUSH
13047: LD_VAR 0 15
13051: PPUSH
13052: LD_VAR 0 2
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL 12303 0 3
13064: ST_TO_ADDR
// InitHc ;
13065: CALL_OW 19
// InitUc ;
13069: CALL_OW 18
// uc_side := side ;
13073: LD_ADDR_OWVAR 20
13077: PUSH
13078: LD_VAR 0 16
13082: ST_TO_ADDR
// uc_nation := nation ;
13083: LD_ADDR_OWVAR 21
13087: PUSH
13088: LD_VAR 0 17
13092: ST_TO_ADDR
// if buildings then
13093: LD_VAR 0 18
13097: IFFALSE 14419
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13099: LD_ADDR_VAR 0 19
13103: PUSH
13104: LD_VAR 0 18
13108: PPUSH
13109: LD_INT 2
13111: PUSH
13112: LD_INT 30
13114: PUSH
13115: LD_INT 29
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 30
13124: PUSH
13125: LD_INT 30
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 72
13141: ST_TO_ADDR
// if tmp then
13142: LD_VAR 0 19
13146: IFFALSE 13194
// for i in tmp do
13148: LD_ADDR_VAR 0 8
13152: PUSH
13153: LD_VAR 0 19
13157: PUSH
13158: FOR_IN
13159: IFFALSE 13192
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13161: LD_VAR 0 8
13165: PPUSH
13166: CALL_OW 250
13170: PPUSH
13171: LD_VAR 0 8
13175: PPUSH
13176: CALL_OW 251
13180: PPUSH
13181: LD_VAR 0 16
13185: PPUSH
13186: CALL_OW 441
13190: GO 13158
13192: POP
13193: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13194: LD_VAR 0 18
13198: PPUSH
13199: LD_INT 2
13201: PUSH
13202: LD_INT 30
13204: PUSH
13205: LD_INT 32
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 30
13214: PUSH
13215: LD_INT 33
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 72
13231: IFFALSE 13319
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13233: LD_ADDR_VAR 0 8
13237: PUSH
13238: LD_VAR 0 18
13242: PPUSH
13243: LD_INT 2
13245: PUSH
13246: LD_INT 30
13248: PUSH
13249: LD_INT 32
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 30
13258: PUSH
13259: LD_INT 33
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 72
13275: PUSH
13276: FOR_IN
13277: IFFALSE 13317
// begin if not GetBWeapon ( i ) then
13279: LD_VAR 0 8
13283: PPUSH
13284: CALL_OW 269
13288: NOT
13289: IFFALSE 13315
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13291: LD_VAR 0 8
13295: PPUSH
13296: LD_VAR 0 8
13300: PPUSH
13301: LD_VAR 0 2
13305: PPUSH
13306: CALL 14565 0 2
13310: PPUSH
13311: CALL_OW 431
// end ;
13315: GO 13276
13317: POP
13318: POP
// end ; for i = 1 to personel do
13319: LD_ADDR_VAR 0 8
13323: PUSH
13324: DOUBLE
13325: LD_INT 1
13327: DEC
13328: ST_TO_ADDR
13329: LD_VAR 0 6
13333: PUSH
13334: FOR_TO
13335: IFFALSE 14399
// begin if i > 4 then
13337: LD_VAR 0 8
13341: PUSH
13342: LD_INT 4
13344: GREATER
13345: IFFALSE 13349
// break ;
13347: GO 14399
// case i of 1 :
13349: LD_VAR 0 8
13353: PUSH
13354: LD_INT 1
13356: DOUBLE
13357: EQUAL
13358: IFTRUE 13362
13360: GO 13442
13362: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13363: LD_ADDR_VAR 0 12
13367: PUSH
13368: LD_VAR 0 18
13372: PPUSH
13373: LD_INT 22
13375: PUSH
13376: LD_VAR 0 16
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 58
13387: PUSH
13388: EMPTY
13389: LIST
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 32
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 30
13406: PUSH
13407: LD_INT 4
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 30
13416: PUSH
13417: LD_INT 5
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 72
13439: ST_TO_ADDR
13440: GO 13664
13442: LD_INT 2
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13512
13450: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13451: LD_ADDR_VAR 0 12
13455: PUSH
13456: LD_VAR 0 18
13460: PPUSH
13461: LD_INT 22
13463: PUSH
13464: LD_VAR 0 16
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 2
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 0
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 30
13488: PUSH
13489: LD_INT 1
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: ST_TO_ADDR
13510: GO 13664
13512: LD_INT 3
13514: DOUBLE
13515: EQUAL
13516: IFTRUE 13520
13518: GO 13582
13520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13521: LD_ADDR_VAR 0 12
13525: PUSH
13526: LD_VAR 0 18
13530: PPUSH
13531: LD_INT 22
13533: PUSH
13534: LD_VAR 0 16
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: LD_INT 30
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 30
13558: PUSH
13559: LD_INT 3
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 72
13579: ST_TO_ADDR
13580: GO 13664
13582: LD_INT 4
13584: DOUBLE
13585: EQUAL
13586: IFTRUE 13590
13588: GO 13663
13590: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13591: LD_ADDR_VAR 0 12
13595: PUSH
13596: LD_VAR 0 18
13600: PPUSH
13601: LD_INT 22
13603: PUSH
13604: LD_VAR 0 16
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 30
13618: PUSH
13619: LD_INT 6
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 30
13628: PUSH
13629: LD_INT 7
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 30
13638: PUSH
13639: LD_INT 8
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PPUSH
13656: CALL_OW 72
13660: ST_TO_ADDR
13661: GO 13664
13663: POP
// if i = 1 then
13664: LD_VAR 0 8
13668: PUSH
13669: LD_INT 1
13671: EQUAL
13672: IFFALSE 13783
// begin tmp := [ ] ;
13674: LD_ADDR_VAR 0 19
13678: PUSH
13679: EMPTY
13680: ST_TO_ADDR
// for j in f do
13681: LD_ADDR_VAR 0 9
13685: PUSH
13686: LD_VAR 0 12
13690: PUSH
13691: FOR_IN
13692: IFFALSE 13765
// if GetBType ( j ) = b_bunker then
13694: LD_VAR 0 9
13698: PPUSH
13699: CALL_OW 266
13703: PUSH
13704: LD_INT 32
13706: EQUAL
13707: IFFALSE 13734
// tmp := Insert ( tmp , 1 , j ) else
13709: LD_ADDR_VAR 0 19
13713: PUSH
13714: LD_VAR 0 19
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: LD_VAR 0 9
13726: PPUSH
13727: CALL_OW 2
13731: ST_TO_ADDR
13732: GO 13763
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13734: LD_ADDR_VAR 0 19
13738: PUSH
13739: LD_VAR 0 19
13743: PPUSH
13744: LD_VAR 0 19
13748: PUSH
13749: LD_INT 1
13751: PLUS
13752: PPUSH
13753: LD_VAR 0 9
13757: PPUSH
13758: CALL_OW 2
13762: ST_TO_ADDR
13763: GO 13691
13765: POP
13766: POP
// if tmp then
13767: LD_VAR 0 19
13771: IFFALSE 13783
// f := tmp ;
13773: LD_ADDR_VAR 0 12
13777: PUSH
13778: LD_VAR 0 19
13782: ST_TO_ADDR
// end ; x := personel [ i ] ;
13783: LD_ADDR_VAR 0 13
13787: PUSH
13788: LD_VAR 0 6
13792: PUSH
13793: LD_VAR 0 8
13797: ARRAY
13798: ST_TO_ADDR
// if x = - 1 then
13799: LD_VAR 0 13
13803: PUSH
13804: LD_INT 1
13806: NEG
13807: EQUAL
13808: IFFALSE 14017
// begin for j in f do
13810: LD_ADDR_VAR 0 9
13814: PUSH
13815: LD_VAR 0 12
13819: PUSH
13820: FOR_IN
13821: IFFALSE 14013
// repeat InitHc ;
13823: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13827: LD_VAR 0 9
13831: PPUSH
13832: CALL_OW 266
13836: PUSH
13837: LD_INT 5
13839: EQUAL
13840: IFFALSE 13910
// begin if UnitsInside ( j ) < 3 then
13842: LD_VAR 0 9
13846: PPUSH
13847: CALL_OW 313
13851: PUSH
13852: LD_INT 3
13854: LESS
13855: IFFALSE 13891
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13857: LD_INT 0
13859: PPUSH
13860: LD_INT 5
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: LD_INT 9
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: PUSH
13874: LD_VAR 0 17
13878: ARRAY
13879: PPUSH
13880: LD_VAR 0 4
13884: PPUSH
13885: CALL_OW 380
13889: GO 13908
// PrepareHuman ( false , i , skill ) ;
13891: LD_INT 0
13893: PPUSH
13894: LD_VAR 0 8
13898: PPUSH
13899: LD_VAR 0 4
13903: PPUSH
13904: CALL_OW 380
// end else
13908: GO 13927
// PrepareHuman ( false , i , skill ) ;
13910: LD_INT 0
13912: PPUSH
13913: LD_VAR 0 8
13917: PPUSH
13918: LD_VAR 0 4
13922: PPUSH
13923: CALL_OW 380
// un := CreateHuman ;
13927: LD_ADDR_VAR 0 14
13931: PUSH
13932: CALL_OW 44
13936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13937: LD_ADDR_VAR 0 7
13941: PUSH
13942: LD_VAR 0 7
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: LD_VAR 0 14
13954: PPUSH
13955: CALL_OW 2
13959: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13960: LD_VAR 0 14
13964: PPUSH
13965: LD_VAR 0 9
13969: PPUSH
13970: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13974: LD_VAR 0 9
13978: PPUSH
13979: CALL_OW 313
13983: PUSH
13984: LD_INT 6
13986: EQUAL
13987: PUSH
13988: LD_VAR 0 9
13992: PPUSH
13993: CALL_OW 266
13997: PUSH
13998: LD_INT 32
14000: PUSH
14001: LD_INT 31
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: IN
14008: OR
14009: IFFALSE 13823
14011: GO 13820
14013: POP
14014: POP
// end else
14015: GO 14397
// for j = 1 to x do
14017: LD_ADDR_VAR 0 9
14021: PUSH
14022: DOUBLE
14023: LD_INT 1
14025: DEC
14026: ST_TO_ADDR
14027: LD_VAR 0 13
14031: PUSH
14032: FOR_TO
14033: IFFALSE 14395
// begin InitHc ;
14035: CALL_OW 19
// if not f then
14039: LD_VAR 0 12
14043: NOT
14044: IFFALSE 14133
// begin PrepareHuman ( false , i , skill ) ;
14046: LD_INT 0
14048: PPUSH
14049: LD_VAR 0 8
14053: PPUSH
14054: LD_VAR 0 4
14058: PPUSH
14059: CALL_OW 380
// un := CreateHuman ;
14063: LD_ADDR_VAR 0 14
14067: PUSH
14068: CALL_OW 44
14072: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14073: LD_ADDR_VAR 0 7
14077: PUSH
14078: LD_VAR 0 7
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: LD_VAR 0 14
14090: PPUSH
14091: CALL_OW 2
14095: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14096: LD_VAR 0 14
14100: PPUSH
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 250
14110: PPUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 251
14120: PPUSH
14121: LD_INT 10
14123: PPUSH
14124: LD_INT 0
14126: PPUSH
14127: CALL_OW 50
// continue ;
14131: GO 14032
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14133: LD_VAR 0 12
14137: PUSH
14138: LD_INT 1
14140: ARRAY
14141: PPUSH
14142: CALL_OW 313
14146: PUSH
14147: LD_VAR 0 12
14151: PUSH
14152: LD_INT 1
14154: ARRAY
14155: PPUSH
14156: CALL_OW 266
14160: PUSH
14161: LD_INT 32
14163: PUSH
14164: LD_INT 31
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: IN
14171: AND
14172: PUSH
14173: LD_VAR 0 12
14177: PUSH
14178: LD_INT 1
14180: ARRAY
14181: PPUSH
14182: CALL_OW 313
14186: PUSH
14187: LD_INT 6
14189: EQUAL
14190: OR
14191: IFFALSE 14211
// f := Delete ( f , 1 ) ;
14193: LD_ADDR_VAR 0 12
14197: PUSH
14198: LD_VAR 0 12
14202: PPUSH
14203: LD_INT 1
14205: PPUSH
14206: CALL_OW 3
14210: ST_TO_ADDR
// if not f then
14211: LD_VAR 0 12
14215: NOT
14216: IFFALSE 14234
// begin x := x + 2 ;
14218: LD_ADDR_VAR 0 13
14222: PUSH
14223: LD_VAR 0 13
14227: PUSH
14228: LD_INT 2
14230: PLUS
14231: ST_TO_ADDR
// continue ;
14232: GO 14032
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14234: LD_VAR 0 12
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: PPUSH
14243: CALL_OW 266
14247: PUSH
14248: LD_INT 5
14250: EQUAL
14251: IFFALSE 14325
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14253: LD_VAR 0 12
14257: PUSH
14258: LD_INT 1
14260: ARRAY
14261: PPUSH
14262: CALL_OW 313
14266: PUSH
14267: LD_INT 3
14269: LESS
14270: IFFALSE 14306
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14272: LD_INT 0
14274: PPUSH
14275: LD_INT 5
14277: PUSH
14278: LD_INT 8
14280: PUSH
14281: LD_INT 9
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: PUSH
14289: LD_VAR 0 17
14293: ARRAY
14294: PPUSH
14295: LD_VAR 0 4
14299: PPUSH
14300: CALL_OW 380
14304: GO 14323
// PrepareHuman ( false , i , skill ) ;
14306: LD_INT 0
14308: PPUSH
14309: LD_VAR 0 8
14313: PPUSH
14314: LD_VAR 0 4
14318: PPUSH
14319: CALL_OW 380
// end else
14323: GO 14342
// PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 8
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 14
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 7
14356: PUSH
14357: LD_VAR 0 7
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 14
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14375: LD_VAR 0 14
14379: PPUSH
14380: LD_VAR 0 12
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PPUSH
14389: CALL_OW 52
// end ;
14393: GO 14032
14395: POP
14396: POP
// end ;
14397: GO 13334
14399: POP
14400: POP
// result := result ^ buildings ;
14401: LD_ADDR_VAR 0 7
14405: PUSH
14406: LD_VAR 0 7
14410: PUSH
14411: LD_VAR 0 18
14415: ADD
14416: ST_TO_ADDR
// end else
14417: GO 14560
// begin for i = 1 to personel do
14419: LD_ADDR_VAR 0 8
14423: PUSH
14424: DOUBLE
14425: LD_INT 1
14427: DEC
14428: ST_TO_ADDR
14429: LD_VAR 0 6
14433: PUSH
14434: FOR_TO
14435: IFFALSE 14558
// begin if i > 4 then
14437: LD_VAR 0 8
14441: PUSH
14442: LD_INT 4
14444: GREATER
14445: IFFALSE 14449
// break ;
14447: GO 14558
// x := personel [ i ] ;
14449: LD_ADDR_VAR 0 13
14453: PUSH
14454: LD_VAR 0 6
14458: PUSH
14459: LD_VAR 0 8
14463: ARRAY
14464: ST_TO_ADDR
// if x = - 1 then
14465: LD_VAR 0 13
14469: PUSH
14470: LD_INT 1
14472: NEG
14473: EQUAL
14474: IFFALSE 14478
// continue ;
14476: GO 14434
// PrepareHuman ( false , i , skill ) ;
14478: LD_INT 0
14480: PPUSH
14481: LD_VAR 0 8
14485: PPUSH
14486: LD_VAR 0 4
14490: PPUSH
14491: CALL_OW 380
// un := CreateHuman ;
14495: LD_ADDR_VAR 0 14
14499: PUSH
14500: CALL_OW 44
14504: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14505: LD_VAR 0 14
14509: PPUSH
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 250
14519: PPUSH
14520: LD_VAR 0 1
14524: PPUSH
14525: CALL_OW 251
14529: PPUSH
14530: LD_INT 10
14532: PPUSH
14533: LD_INT 0
14535: PPUSH
14536: CALL_OW 50
// result := result ^ un ;
14540: LD_ADDR_VAR 0 7
14544: PUSH
14545: LD_VAR 0 7
14549: PUSH
14550: LD_VAR 0 14
14554: ADD
14555: ST_TO_ADDR
// end ;
14556: GO 14434
14558: POP
14559: POP
// end ; end ;
14560: LD_VAR 0 7
14564: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14565: LD_INT 0
14567: PPUSH
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
14572: PPUSH
14573: PPUSH
14574: PPUSH
14575: PPUSH
14576: PPUSH
14577: PPUSH
14578: PPUSH
14579: PPUSH
14580: PPUSH
14581: PPUSH
14582: PPUSH
// result := false ;
14583: LD_ADDR_VAR 0 3
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14591: LD_VAR 0 1
14595: NOT
14596: PUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: CALL_OW 266
14606: PUSH
14607: LD_INT 32
14609: PUSH
14610: LD_INT 33
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: IN
14617: NOT
14618: OR
14619: IFFALSE 14623
// exit ;
14621: GO 15732
// nat := GetNation ( tower ) ;
14623: LD_ADDR_VAR 0 12
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 248
14637: ST_TO_ADDR
// side := GetSide ( tower ) ;
14638: LD_ADDR_VAR 0 16
14642: PUSH
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 255
14652: ST_TO_ADDR
// x := GetX ( tower ) ;
14653: LD_ADDR_VAR 0 10
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 250
14667: ST_TO_ADDR
// y := GetY ( tower ) ;
14668: LD_ADDR_VAR 0 11
14672: PUSH
14673: LD_VAR 0 1
14677: PPUSH
14678: CALL_OW 251
14682: ST_TO_ADDR
// if not x or not y then
14683: LD_VAR 0 10
14687: NOT
14688: PUSH
14689: LD_VAR 0 11
14693: NOT
14694: OR
14695: IFFALSE 14699
// exit ;
14697: GO 15732
// weapon := 0 ;
14699: LD_ADDR_VAR 0 18
14703: PUSH
14704: LD_INT 0
14706: ST_TO_ADDR
// fac_list := [ ] ;
14707: LD_ADDR_VAR 0 17
14711: PUSH
14712: EMPTY
14713: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14714: LD_ADDR_VAR 0 6
14718: PUSH
14719: LD_VAR 0 1
14723: PPUSH
14724: CALL_OW 274
14728: PPUSH
14729: LD_VAR 0 2
14733: PPUSH
14734: LD_INT 0
14736: PPUSH
14737: CALL 12303 0 3
14741: PPUSH
14742: LD_INT 30
14744: PUSH
14745: LD_INT 3
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 72
14756: ST_TO_ADDR
// if not factories then
14757: LD_VAR 0 6
14761: NOT
14762: IFFALSE 14766
// exit ;
14764: GO 15732
// for i in factories do
14766: LD_ADDR_VAR 0 8
14770: PUSH
14771: LD_VAR 0 6
14775: PUSH
14776: FOR_IN
14777: IFFALSE 14802
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14779: LD_ADDR_VAR 0 17
14783: PUSH
14784: LD_VAR 0 17
14788: PUSH
14789: LD_VAR 0 8
14793: PPUSH
14794: CALL_OW 478
14798: UNION
14799: ST_TO_ADDR
14800: GO 14776
14802: POP
14803: POP
// if not fac_list then
14804: LD_VAR 0 17
14808: NOT
14809: IFFALSE 14813
// exit ;
14811: GO 15732
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14813: LD_ADDR_VAR 0 5
14817: PUSH
14818: LD_INT 4
14820: PUSH
14821: LD_INT 5
14823: PUSH
14824: LD_INT 9
14826: PUSH
14827: LD_INT 10
14829: PUSH
14830: LD_INT 6
14832: PUSH
14833: LD_INT 7
14835: PUSH
14836: LD_INT 11
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 27
14850: PUSH
14851: LD_INT 28
14853: PUSH
14854: LD_INT 26
14856: PUSH
14857: LD_INT 30
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 43
14868: PUSH
14869: LD_INT 44
14871: PUSH
14872: LD_INT 46
14874: PUSH
14875: LD_INT 45
14877: PUSH
14878: LD_INT 47
14880: PUSH
14881: LD_INT 49
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_VAR 0 12
14901: ARRAY
14902: ST_TO_ADDR
// list := list isect fac_list ;
14903: LD_ADDR_VAR 0 5
14907: PUSH
14908: LD_VAR 0 5
14912: PUSH
14913: LD_VAR 0 17
14917: ISECT
14918: ST_TO_ADDR
// if not list then
14919: LD_VAR 0 5
14923: NOT
14924: IFFALSE 14928
// exit ;
14926: GO 15732
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14928: LD_VAR 0 12
14932: PUSH
14933: LD_INT 3
14935: EQUAL
14936: PUSH
14937: LD_INT 49
14939: PUSH
14940: LD_VAR 0 5
14944: IN
14945: AND
14946: PUSH
14947: LD_INT 31
14949: PPUSH
14950: LD_VAR 0 16
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15024
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14966: LD_INT 22
14968: PUSH
14969: LD_VAR 0 16
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 35
14980: PUSH
14981: LD_INT 49
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 91
14990: PUSH
14991: LD_VAR 0 1
14995: PUSH
14996: LD_INT 10
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: NOT
15014: IFFALSE 15024
// weapon := ru_time_lapser ;
15016: LD_ADDR_VAR 0 18
15020: PUSH
15021: LD_INT 49
15023: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15024: LD_VAR 0 12
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: IN
15039: PUSH
15040: LD_INT 11
15042: PUSH
15043: LD_VAR 0 5
15047: IN
15048: PUSH
15049: LD_INT 30
15051: PUSH
15052: LD_VAR 0 5
15056: IN
15057: OR
15058: AND
15059: PUSH
15060: LD_INT 6
15062: PPUSH
15063: LD_VAR 0 16
15067: PPUSH
15068: CALL_OW 321
15072: PUSH
15073: LD_INT 2
15075: EQUAL
15076: AND
15077: IFFALSE 15242
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15079: LD_INT 22
15081: PUSH
15082: LD_VAR 0 16
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 35
15096: PUSH
15097: LD_INT 11
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 35
15106: PUSH
15107: LD_INT 30
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 91
15121: PUSH
15122: LD_VAR 0 1
15126: PUSH
15127: LD_INT 18
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: NOT
15145: PUSH
15146: LD_INT 22
15148: PUSH
15149: LD_VAR 0 16
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 2
15160: PUSH
15161: LD_INT 30
15163: PUSH
15164: LD_INT 32
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 30
15173: PUSH
15174: LD_INT 33
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 91
15188: PUSH
15189: LD_VAR 0 1
15193: PUSH
15194: LD_INT 12
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: PPUSH
15210: CALL_OW 69
15214: PUSH
15215: LD_INT 2
15217: GREATER
15218: AND
15219: IFFALSE 15242
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15221: LD_ADDR_VAR 0 18
15225: PUSH
15226: LD_INT 11
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_VAR 0 12
15240: ARRAY
15241: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15242: LD_VAR 0 18
15246: NOT
15247: PUSH
15248: LD_INT 40
15250: PPUSH
15251: LD_VAR 0 16
15255: PPUSH
15256: CALL_OW 321
15260: PUSH
15261: LD_INT 2
15263: EQUAL
15264: AND
15265: PUSH
15266: LD_INT 7
15268: PUSH
15269: LD_VAR 0 5
15273: IN
15274: PUSH
15275: LD_INT 28
15277: PUSH
15278: LD_VAR 0 5
15282: IN
15283: OR
15284: PUSH
15285: LD_INT 45
15287: PUSH
15288: LD_VAR 0 5
15292: IN
15293: OR
15294: AND
15295: IFFALSE 15549
// begin hex := GetHexInfo ( x , y ) ;
15297: LD_ADDR_VAR 0 4
15301: PUSH
15302: LD_VAR 0 10
15306: PPUSH
15307: LD_VAR 0 11
15311: PPUSH
15312: CALL_OW 546
15316: ST_TO_ADDR
// if hex [ 1 ] then
15317: LD_VAR 0 4
15321: PUSH
15322: LD_INT 1
15324: ARRAY
15325: IFFALSE 15329
// exit ;
15327: GO 15732
// height := hex [ 2 ] ;
15329: LD_ADDR_VAR 0 15
15333: PUSH
15334: LD_VAR 0 4
15338: PUSH
15339: LD_INT 2
15341: ARRAY
15342: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15343: LD_ADDR_VAR 0 14
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: LD_INT 3
15356: PUSH
15357: LD_INT 5
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: ST_TO_ADDR
// for i in tmp do
15366: LD_ADDR_VAR 0 8
15370: PUSH
15371: LD_VAR 0 14
15375: PUSH
15376: FOR_IN
15377: IFFALSE 15547
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15379: LD_ADDR_VAR 0 9
15383: PUSH
15384: LD_VAR 0 10
15388: PPUSH
15389: LD_VAR 0 8
15393: PPUSH
15394: LD_INT 5
15396: PPUSH
15397: CALL_OW 272
15401: PUSH
15402: LD_VAR 0 11
15406: PPUSH
15407: LD_VAR 0 8
15411: PPUSH
15412: LD_INT 5
15414: PPUSH
15415: CALL_OW 273
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15424: LD_VAR 0 9
15428: PUSH
15429: LD_INT 1
15431: ARRAY
15432: PPUSH
15433: LD_VAR 0 9
15437: PUSH
15438: LD_INT 2
15440: ARRAY
15441: PPUSH
15442: CALL_OW 488
15446: IFFALSE 15545
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15448: LD_ADDR_VAR 0 4
15452: PUSH
15453: LD_VAR 0 9
15457: PUSH
15458: LD_INT 1
15460: ARRAY
15461: PPUSH
15462: LD_VAR 0 9
15466: PUSH
15467: LD_INT 2
15469: ARRAY
15470: PPUSH
15471: CALL_OW 546
15475: ST_TO_ADDR
// if hex [ 1 ] then
15476: LD_VAR 0 4
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: IFFALSE 15488
// continue ;
15486: GO 15376
// h := hex [ 2 ] ;
15488: LD_ADDR_VAR 0 13
15492: PUSH
15493: LD_VAR 0 4
15497: PUSH
15498: LD_INT 2
15500: ARRAY
15501: ST_TO_ADDR
// if h + 7 < height then
15502: LD_VAR 0 13
15506: PUSH
15507: LD_INT 7
15509: PLUS
15510: PUSH
15511: LD_VAR 0 15
15515: LESS
15516: IFFALSE 15545
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15518: LD_ADDR_VAR 0 18
15522: PUSH
15523: LD_INT 7
15525: PUSH
15526: LD_INT 28
15528: PUSH
15529: LD_INT 45
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_VAR 0 12
15541: ARRAY
15542: ST_TO_ADDR
// break ;
15543: GO 15547
// end ; end ; end ;
15545: GO 15376
15547: POP
15548: POP
// end ; if not weapon then
15549: LD_VAR 0 18
15553: NOT
15554: IFFALSE 15614
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15556: LD_ADDR_VAR 0 5
15560: PUSH
15561: LD_VAR 0 5
15565: PUSH
15566: LD_INT 11
15568: PUSH
15569: LD_INT 30
15571: PUSH
15572: LD_INT 49
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: DIFF
15580: ST_TO_ADDR
// if not list then
15581: LD_VAR 0 5
15585: NOT
15586: IFFALSE 15590
// exit ;
15588: GO 15732
// weapon := list [ rand ( 1 , list ) ] ;
15590: LD_ADDR_VAR 0 18
15594: PUSH
15595: LD_VAR 0 5
15599: PUSH
15600: LD_INT 1
15602: PPUSH
15603: LD_VAR 0 5
15607: PPUSH
15608: CALL_OW 12
15612: ARRAY
15613: ST_TO_ADDR
// end ; if weapon then
15614: LD_VAR 0 18
15618: IFFALSE 15732
// begin tmp := CostOfWeapon ( weapon ) ;
15620: LD_ADDR_VAR 0 14
15624: PUSH
15625: LD_VAR 0 18
15629: PPUSH
15630: CALL_OW 451
15634: ST_TO_ADDR
// j := GetBase ( tower ) ;
15635: LD_ADDR_VAR 0 9
15639: PUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: CALL_OW 274
15649: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15650: LD_VAR 0 9
15654: PPUSH
15655: LD_INT 1
15657: PPUSH
15658: CALL_OW 275
15662: PUSH
15663: LD_VAR 0 14
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: GREATEREQUAL
15672: PUSH
15673: LD_VAR 0 9
15677: PPUSH
15678: LD_INT 2
15680: PPUSH
15681: CALL_OW 275
15685: PUSH
15686: LD_VAR 0 14
15690: PUSH
15691: LD_INT 2
15693: ARRAY
15694: GREATEREQUAL
15695: AND
15696: PUSH
15697: LD_VAR 0 9
15701: PPUSH
15702: LD_INT 3
15704: PPUSH
15705: CALL_OW 275
15709: PUSH
15710: LD_VAR 0 14
15714: PUSH
15715: LD_INT 3
15717: ARRAY
15718: GREATEREQUAL
15719: AND
15720: IFFALSE 15732
// result := weapon ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_VAR 0 18
15731: ST_TO_ADDR
// end ; end ;
15732: LD_VAR 0 3
15736: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// result := true ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_INT 1
15748: ST_TO_ADDR
// if array1 = array2 then
15749: LD_VAR 0 1
15753: PUSH
15754: LD_VAR 0 2
15758: EQUAL
15759: IFFALSE 15819
// begin for i = 1 to array1 do
15761: LD_ADDR_VAR 0 4
15765: PUSH
15766: DOUBLE
15767: LD_INT 1
15769: DEC
15770: ST_TO_ADDR
15771: LD_VAR 0 1
15775: PUSH
15776: FOR_TO
15777: IFFALSE 15815
// if array1 [ i ] <> array2 [ i ] then
15779: LD_VAR 0 1
15783: PUSH
15784: LD_VAR 0 4
15788: ARRAY
15789: PUSH
15790: LD_VAR 0 2
15794: PUSH
15795: LD_VAR 0 4
15799: ARRAY
15800: NONEQUAL
15801: IFFALSE 15813
// begin result := false ;
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// break ;
15811: GO 15815
// end ;
15813: GO 15776
15815: POP
15816: POP
// end else
15817: GO 15827
// result := false ;
15819: LD_ADDR_VAR 0 3
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// end ;
15827: LD_VAR 0 3
15831: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15832: LD_INT 0
15834: PPUSH
15835: PPUSH
// if not array1 or not array2 then
15836: LD_VAR 0 1
15840: NOT
15841: PUSH
15842: LD_VAR 0 2
15846: NOT
15847: OR
15848: IFFALSE 15852
// exit ;
15850: GO 15916
// result := true ;
15852: LD_ADDR_VAR 0 3
15856: PUSH
15857: LD_INT 1
15859: ST_TO_ADDR
// for i = 1 to array1 do
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: DOUBLE
15866: LD_INT 1
15868: DEC
15869: ST_TO_ADDR
15870: LD_VAR 0 1
15874: PUSH
15875: FOR_TO
15876: IFFALSE 15914
// if array1 [ i ] <> array2 [ i ] then
15878: LD_VAR 0 1
15882: PUSH
15883: LD_VAR 0 4
15887: ARRAY
15888: PUSH
15889: LD_VAR 0 2
15893: PUSH
15894: LD_VAR 0 4
15898: ARRAY
15899: NONEQUAL
15900: IFFALSE 15912
// begin result := false ;
15902: LD_ADDR_VAR 0 3
15906: PUSH
15907: LD_INT 0
15909: ST_TO_ADDR
// break ;
15910: GO 15914
// end ;
15912: GO 15875
15914: POP
15915: POP
// end ;
15916: LD_VAR 0 3
15920: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15921: LD_INT 0
15923: PPUSH
15924: PPUSH
15925: PPUSH
// pom := GetBase ( fac ) ;
15926: LD_ADDR_VAR 0 5
15930: PUSH
15931: LD_VAR 0 1
15935: PPUSH
15936: CALL_OW 274
15940: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15941: LD_ADDR_VAR 0 4
15945: PUSH
15946: LD_VAR 0 2
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PPUSH
15955: LD_VAR 0 2
15959: PUSH
15960: LD_INT 2
15962: ARRAY
15963: PPUSH
15964: LD_VAR 0 2
15968: PUSH
15969: LD_INT 3
15971: ARRAY
15972: PPUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_INT 4
15980: ARRAY
15981: PPUSH
15982: CALL_OW 449
15986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15987: LD_ADDR_VAR 0 3
15991: PUSH
15992: LD_VAR 0 5
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 275
16004: PUSH
16005: LD_VAR 0 4
16009: PUSH
16010: LD_INT 1
16012: ARRAY
16013: GREATEREQUAL
16014: PUSH
16015: LD_VAR 0 5
16019: PPUSH
16020: LD_INT 2
16022: PPUSH
16023: CALL_OW 275
16027: PUSH
16028: LD_VAR 0 4
16032: PUSH
16033: LD_INT 2
16035: ARRAY
16036: GREATEREQUAL
16037: AND
16038: PUSH
16039: LD_VAR 0 5
16043: PPUSH
16044: LD_INT 3
16046: PPUSH
16047: CALL_OW 275
16051: PUSH
16052: LD_VAR 0 4
16056: PUSH
16057: LD_INT 3
16059: ARRAY
16060: GREATEREQUAL
16061: AND
16062: ST_TO_ADDR
// end ;
16063: LD_VAR 0 3
16067: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// pom := GetBase ( building ) ;
16074: LD_ADDR_VAR 0 3
16078: PUSH
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 274
16088: ST_TO_ADDR
// if not pom then
16089: LD_VAR 0 3
16093: NOT
16094: IFFALSE 16098
// exit ;
16096: GO 16268
// btype := GetBType ( building ) ;
16098: LD_ADDR_VAR 0 5
16102: PUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 266
16112: ST_TO_ADDR
// if btype = b_armoury then
16113: LD_VAR 0 5
16117: PUSH
16118: LD_INT 4
16120: EQUAL
16121: IFFALSE 16131
// btype := b_barracks ;
16123: LD_ADDR_VAR 0 5
16127: PUSH
16128: LD_INT 5
16130: ST_TO_ADDR
// if btype = b_depot then
16131: LD_VAR 0 5
16135: PUSH
16136: LD_INT 0
16138: EQUAL
16139: IFFALSE 16149
// btype := b_warehouse ;
16141: LD_ADDR_VAR 0 5
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// if btype = b_workshop then
16149: LD_VAR 0 5
16153: PUSH
16154: LD_INT 2
16156: EQUAL
16157: IFFALSE 16167
// btype := b_factory ;
16159: LD_ADDR_VAR 0 5
16163: PUSH
16164: LD_INT 3
16166: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16167: LD_ADDR_VAR 0 4
16171: PUSH
16172: LD_VAR 0 5
16176: PPUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 248
16186: PPUSH
16187: CALL_OW 450
16191: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: LD_VAR 0 3
16201: PPUSH
16202: LD_INT 1
16204: PPUSH
16205: CALL_OW 275
16209: PUSH
16210: LD_VAR 0 4
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: GREATEREQUAL
16219: PUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: LD_INT 2
16227: PPUSH
16228: CALL_OW 275
16232: PUSH
16233: LD_VAR 0 4
16237: PUSH
16238: LD_INT 2
16240: ARRAY
16241: GREATEREQUAL
16242: AND
16243: PUSH
16244: LD_VAR 0 3
16248: PPUSH
16249: LD_INT 3
16251: PPUSH
16252: CALL_OW 275
16256: PUSH
16257: LD_VAR 0 4
16261: PUSH
16262: LD_INT 3
16264: ARRAY
16265: GREATEREQUAL
16266: AND
16267: ST_TO_ADDR
// end ;
16268: LD_VAR 0 2
16272: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// pom := GetBase ( building ) ;
16278: LD_ADDR_VAR 0 4
16282: PUSH
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL_OW 274
16292: ST_TO_ADDR
// if not pom then
16293: LD_VAR 0 4
16297: NOT
16298: IFFALSE 16302
// exit ;
16300: GO 16403
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16302: LD_ADDR_VAR 0 5
16306: PUSH
16307: LD_VAR 0 2
16311: PPUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 248
16321: PPUSH
16322: CALL_OW 450
16326: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_VAR 0 4
16336: PPUSH
16337: LD_INT 1
16339: PPUSH
16340: CALL_OW 275
16344: PUSH
16345: LD_VAR 0 5
16349: PUSH
16350: LD_INT 1
16352: ARRAY
16353: GREATEREQUAL
16354: PUSH
16355: LD_VAR 0 4
16359: PPUSH
16360: LD_INT 2
16362: PPUSH
16363: CALL_OW 275
16367: PUSH
16368: LD_VAR 0 5
16372: PUSH
16373: LD_INT 2
16375: ARRAY
16376: GREATEREQUAL
16377: AND
16378: PUSH
16379: LD_VAR 0 4
16383: PPUSH
16384: LD_INT 3
16386: PPUSH
16387: CALL_OW 275
16391: PUSH
16392: LD_VAR 0 5
16396: PUSH
16397: LD_INT 3
16399: ARRAY
16400: GREATEREQUAL
16401: AND
16402: ST_TO_ADDR
// end ;
16403: LD_VAR 0 3
16407: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16408: LD_INT 0
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
// result := false ;
16421: LD_ADDR_VAR 0 8
16425: PUSH
16426: LD_INT 0
16428: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16429: LD_VAR 0 5
16433: NOT
16434: PUSH
16435: LD_VAR 0 1
16439: NOT
16440: OR
16441: PUSH
16442: LD_VAR 0 2
16446: NOT
16447: OR
16448: PUSH
16449: LD_VAR 0 3
16453: NOT
16454: OR
16455: IFFALSE 16459
// exit ;
16457: GO 17273
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16459: LD_ADDR_VAR 0 14
16463: PUSH
16464: LD_VAR 0 1
16468: PPUSH
16469: LD_VAR 0 2
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_VAR 0 4
16483: PPUSH
16484: LD_VAR 0 5
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PPUSH
16493: CALL_OW 248
16497: PPUSH
16498: LD_INT 0
16500: PPUSH
16501: CALL 18506 0 6
16505: ST_TO_ADDR
// if not hexes then
16506: LD_VAR 0 14
16510: NOT
16511: IFFALSE 16515
// exit ;
16513: GO 17273
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16515: LD_ADDR_VAR 0 17
16519: PUSH
16520: LD_VAR 0 5
16524: PPUSH
16525: LD_INT 22
16527: PUSH
16528: LD_VAR 0 13
16532: PPUSH
16533: CALL_OW 255
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: LD_INT 30
16547: PUSH
16548: LD_INT 0
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 30
16557: PUSH
16558: LD_INT 1
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PPUSH
16574: CALL_OW 72
16578: ST_TO_ADDR
// for i = 1 to hexes do
16579: LD_ADDR_VAR 0 9
16583: PUSH
16584: DOUBLE
16585: LD_INT 1
16587: DEC
16588: ST_TO_ADDR
16589: LD_VAR 0 14
16593: PUSH
16594: FOR_TO
16595: IFFALSE 17271
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16597: LD_ADDR_VAR 0 13
16601: PUSH
16602: LD_VAR 0 14
16606: PUSH
16607: LD_VAR 0 9
16611: ARRAY
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: PPUSH
16617: LD_VAR 0 14
16621: PUSH
16622: LD_VAR 0 9
16626: ARRAY
16627: PUSH
16628: LD_INT 2
16630: ARRAY
16631: PPUSH
16632: CALL_OW 428
16636: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16637: LD_VAR 0 14
16641: PUSH
16642: LD_VAR 0 9
16646: ARRAY
16647: PUSH
16648: LD_INT 1
16650: ARRAY
16651: PPUSH
16652: LD_VAR 0 14
16656: PUSH
16657: LD_VAR 0 9
16661: ARRAY
16662: PUSH
16663: LD_INT 2
16665: ARRAY
16666: PPUSH
16667: CALL_OW 351
16671: PUSH
16672: LD_VAR 0 14
16676: PUSH
16677: LD_VAR 0 9
16681: ARRAY
16682: PUSH
16683: LD_INT 1
16685: ARRAY
16686: PPUSH
16687: LD_VAR 0 14
16691: PUSH
16692: LD_VAR 0 9
16696: ARRAY
16697: PUSH
16698: LD_INT 2
16700: ARRAY
16701: PPUSH
16702: CALL_OW 488
16706: NOT
16707: OR
16708: PUSH
16709: LD_VAR 0 13
16713: PPUSH
16714: CALL_OW 247
16718: PUSH
16719: LD_INT 3
16721: EQUAL
16722: OR
16723: IFFALSE 16729
// exit ;
16725: POP
16726: POP
16727: GO 17273
// if not tmp then
16729: LD_VAR 0 13
16733: NOT
16734: IFFALSE 16738
// continue ;
16736: GO 16594
// result := true ;
16738: LD_ADDR_VAR 0 8
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16746: LD_VAR 0 6
16750: PUSH
16751: LD_VAR 0 13
16755: PPUSH
16756: CALL_OW 247
16760: PUSH
16761: LD_INT 2
16763: EQUAL
16764: AND
16765: PUSH
16766: LD_VAR 0 13
16770: PPUSH
16771: CALL_OW 263
16775: PUSH
16776: LD_INT 1
16778: EQUAL
16779: AND
16780: IFFALSE 16944
// begin if IsDrivenBy ( tmp ) then
16782: LD_VAR 0 13
16786: PPUSH
16787: CALL_OW 311
16791: IFFALSE 16795
// continue ;
16793: GO 16594
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16795: LD_VAR 0 6
16799: PPUSH
16800: LD_INT 3
16802: PUSH
16803: LD_INT 60
16805: PUSH
16806: EMPTY
16807: LIST
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 3
16815: PUSH
16816: LD_INT 55
16818: PUSH
16819: EMPTY
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 72
16834: IFFALSE 16942
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16836: LD_ADDR_VAR 0 18
16840: PUSH
16841: LD_VAR 0 6
16845: PPUSH
16846: LD_INT 3
16848: PUSH
16849: LD_INT 60
16851: PUSH
16852: EMPTY
16853: LIST
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 3
16861: PUSH
16862: LD_INT 55
16864: PUSH
16865: EMPTY
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 72
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: ST_TO_ADDR
// if IsInUnit ( driver ) then
16885: LD_VAR 0 18
16889: PPUSH
16890: CALL_OW 310
16894: IFFALSE 16905
// ComExit ( driver ) ;
16896: LD_VAR 0 18
16900: PPUSH
16901: CALL 42286 0 1
// AddComEnterUnit ( driver , tmp ) ;
16905: LD_VAR 0 18
16909: PPUSH
16910: LD_VAR 0 13
16914: PPUSH
16915: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16919: LD_VAR 0 18
16923: PPUSH
16924: LD_VAR 0 7
16928: PPUSH
16929: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16933: LD_VAR 0 18
16937: PPUSH
16938: CALL_OW 181
// end ; continue ;
16942: GO 16594
// end ; if not cleaners or not tmp in cleaners then
16944: LD_VAR 0 6
16948: NOT
16949: PUSH
16950: LD_VAR 0 13
16954: PUSH
16955: LD_VAR 0 6
16959: IN
16960: NOT
16961: OR
16962: IFFALSE 17269
// begin if dep then
16964: LD_VAR 0 17
16968: IFFALSE 17104
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16970: LD_ADDR_VAR 0 16
16974: PUSH
16975: LD_VAR 0 17
16979: PUSH
16980: LD_INT 1
16982: ARRAY
16983: PPUSH
16984: CALL_OW 250
16988: PPUSH
16989: LD_VAR 0 17
16993: PUSH
16994: LD_INT 1
16996: ARRAY
16997: PPUSH
16998: CALL_OW 254
17002: PPUSH
17003: LD_INT 5
17005: PPUSH
17006: CALL_OW 272
17010: PUSH
17011: LD_VAR 0 17
17015: PUSH
17016: LD_INT 1
17018: ARRAY
17019: PPUSH
17020: CALL_OW 251
17024: PPUSH
17025: LD_VAR 0 17
17029: PUSH
17030: LD_INT 1
17032: ARRAY
17033: PPUSH
17034: CALL_OW 254
17038: PPUSH
17039: LD_INT 5
17041: PPUSH
17042: CALL_OW 273
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17051: LD_VAR 0 16
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: LD_VAR 0 16
17064: PUSH
17065: LD_INT 2
17067: ARRAY
17068: PPUSH
17069: CALL_OW 488
17073: IFFALSE 17104
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17075: LD_VAR 0 13
17079: PPUSH
17080: LD_VAR 0 16
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PPUSH
17089: LD_VAR 0 16
17093: PUSH
17094: LD_INT 2
17096: ARRAY
17097: PPUSH
17098: CALL_OW 111
// continue ;
17102: GO 16594
// end ; end ; r := GetDir ( tmp ) ;
17104: LD_ADDR_VAR 0 15
17108: PUSH
17109: LD_VAR 0 13
17113: PPUSH
17114: CALL_OW 254
17118: ST_TO_ADDR
// if r = 5 then
17119: LD_VAR 0 15
17123: PUSH
17124: LD_INT 5
17126: EQUAL
17127: IFFALSE 17137
// r := 0 ;
17129: LD_ADDR_VAR 0 15
17133: PUSH
17134: LD_INT 0
17136: ST_TO_ADDR
// for j = r to 5 do
17137: LD_ADDR_VAR 0 10
17141: PUSH
17142: DOUBLE
17143: LD_VAR 0 15
17147: DEC
17148: ST_TO_ADDR
17149: LD_INT 5
17151: PUSH
17152: FOR_TO
17153: IFFALSE 17267
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17155: LD_ADDR_VAR 0 11
17159: PUSH
17160: LD_VAR 0 13
17164: PPUSH
17165: CALL_OW 250
17169: PPUSH
17170: LD_VAR 0 10
17174: PPUSH
17175: LD_INT 2
17177: PPUSH
17178: CALL_OW 272
17182: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17183: LD_ADDR_VAR 0 12
17187: PUSH
17188: LD_VAR 0 13
17192: PPUSH
17193: CALL_OW 251
17197: PPUSH
17198: LD_VAR 0 10
17202: PPUSH
17203: LD_INT 2
17205: PPUSH
17206: CALL_OW 273
17210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17211: LD_VAR 0 11
17215: PPUSH
17216: LD_VAR 0 12
17220: PPUSH
17221: CALL_OW 488
17225: PUSH
17226: LD_VAR 0 11
17230: PPUSH
17231: LD_VAR 0 12
17235: PPUSH
17236: CALL_OW 428
17240: NOT
17241: AND
17242: IFFALSE 17265
// begin ComMoveXY ( tmp , _x , _y ) ;
17244: LD_VAR 0 13
17248: PPUSH
17249: LD_VAR 0 11
17253: PPUSH
17254: LD_VAR 0 12
17258: PPUSH
17259: CALL_OW 111
// break ;
17263: GO 17267
// end ; end ;
17265: GO 17152
17267: POP
17268: POP
// end ; end ;
17269: GO 16594
17271: POP
17272: POP
// end ;
17273: LD_VAR 0 8
17277: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17278: LD_INT 0
17280: PPUSH
// result := true ;
17281: LD_ADDR_VAR 0 3
17285: PUSH
17286: LD_INT 1
17288: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17289: LD_VAR 0 2
17293: PUSH
17294: LD_INT 24
17296: DOUBLE
17297: EQUAL
17298: IFTRUE 17308
17300: LD_INT 33
17302: DOUBLE
17303: EQUAL
17304: IFTRUE 17308
17306: GO 17333
17308: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17309: LD_ADDR_VAR 0 3
17313: PUSH
17314: LD_INT 32
17316: PPUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 321
17326: PUSH
17327: LD_INT 2
17329: EQUAL
17330: ST_TO_ADDR
17331: GO 17649
17333: LD_INT 20
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17366
17341: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_INT 6
17349: PPUSH
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 321
17359: PUSH
17360: LD_INT 2
17362: EQUAL
17363: ST_TO_ADDR
17364: GO 17649
17366: LD_INT 22
17368: DOUBLE
17369: EQUAL
17370: IFTRUE 17380
17372: LD_INT 36
17374: DOUBLE
17375: EQUAL
17376: IFTRUE 17380
17378: GO 17405
17380: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17381: LD_ADDR_VAR 0 3
17385: PUSH
17386: LD_INT 15
17388: PPUSH
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 321
17398: PUSH
17399: LD_INT 2
17401: EQUAL
17402: ST_TO_ADDR
17403: GO 17649
17405: LD_INT 30
17407: DOUBLE
17408: EQUAL
17409: IFTRUE 17413
17411: GO 17438
17413: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17414: LD_ADDR_VAR 0 3
17418: PUSH
17419: LD_INT 20
17421: PPUSH
17422: LD_VAR 0 1
17426: PPUSH
17427: CALL_OW 321
17431: PUSH
17432: LD_INT 2
17434: EQUAL
17435: ST_TO_ADDR
17436: GO 17649
17438: LD_INT 28
17440: DOUBLE
17441: EQUAL
17442: IFTRUE 17452
17444: LD_INT 21
17446: DOUBLE
17447: EQUAL
17448: IFTRUE 17452
17450: GO 17477
17452: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17453: LD_ADDR_VAR 0 3
17457: PUSH
17458: LD_INT 21
17460: PPUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 321
17470: PUSH
17471: LD_INT 2
17473: EQUAL
17474: ST_TO_ADDR
17475: GO 17649
17477: LD_INT 16
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17510
17485: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17486: LD_ADDR_VAR 0 3
17490: PUSH
17491: LD_INT 84
17493: PPUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 321
17503: PUSH
17504: LD_INT 2
17506: EQUAL
17507: ST_TO_ADDR
17508: GO 17649
17510: LD_INT 19
17512: DOUBLE
17513: EQUAL
17514: IFTRUE 17524
17516: LD_INT 23
17518: DOUBLE
17519: EQUAL
17520: IFTRUE 17524
17522: GO 17549
17524: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17525: LD_ADDR_VAR 0 3
17529: PUSH
17530: LD_INT 83
17532: PPUSH
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL_OW 321
17542: PUSH
17543: LD_INT 2
17545: EQUAL
17546: ST_TO_ADDR
17547: GO 17649
17549: LD_INT 17
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17582
17557: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17558: LD_ADDR_VAR 0 3
17562: PUSH
17563: LD_INT 39
17565: PPUSH
17566: LD_VAR 0 1
17570: PPUSH
17571: CALL_OW 321
17575: PUSH
17576: LD_INT 2
17578: EQUAL
17579: ST_TO_ADDR
17580: GO 17649
17582: LD_INT 18
17584: DOUBLE
17585: EQUAL
17586: IFTRUE 17590
17588: GO 17615
17590: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17591: LD_ADDR_VAR 0 3
17595: PUSH
17596: LD_INT 40
17598: PPUSH
17599: LD_VAR 0 1
17603: PPUSH
17604: CALL_OW 321
17608: PUSH
17609: LD_INT 2
17611: EQUAL
17612: ST_TO_ADDR
17613: GO 17649
17615: LD_INT 27
17617: DOUBLE
17618: EQUAL
17619: IFTRUE 17623
17621: GO 17648
17623: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17624: LD_ADDR_VAR 0 3
17628: PUSH
17629: LD_INT 35
17631: PPUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 321
17641: PUSH
17642: LD_INT 2
17644: EQUAL
17645: ST_TO_ADDR
17646: GO 17649
17648: POP
// end ;
17649: LD_VAR 0 3
17653: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17654: LD_INT 0
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
// result := false ;
17667: LD_ADDR_VAR 0 6
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17675: LD_VAR 0 1
17679: NOT
17680: PUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: CALL_OW 266
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: IN
17701: NOT
17702: OR
17703: PUSH
17704: LD_VAR 0 2
17708: NOT
17709: OR
17710: PUSH
17711: LD_VAR 0 5
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 3
17727: PUSH
17728: LD_INT 4
17730: PUSH
17731: LD_INT 5
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: IN
17742: NOT
17743: OR
17744: PUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: LD_VAR 0 4
17754: PPUSH
17755: CALL_OW 488
17759: NOT
17760: OR
17761: IFFALSE 17765
// exit ;
17763: GO 18501
// side := GetSide ( depot ) ;
17765: LD_ADDR_VAR 0 9
17769: PUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 255
17779: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17780: LD_VAR 0 9
17784: PPUSH
17785: LD_VAR 0 2
17789: PPUSH
17790: CALL 17278 0 2
17794: NOT
17795: IFFALSE 17799
// exit ;
17797: GO 18501
// pom := GetBase ( depot ) ;
17799: LD_ADDR_VAR 0 10
17803: PUSH
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL_OW 274
17813: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17814: LD_ADDR_VAR 0 11
17818: PUSH
17819: LD_VAR 0 2
17823: PPUSH
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 248
17833: PPUSH
17834: CALL_OW 450
17838: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17839: LD_VAR 0 10
17843: PPUSH
17844: LD_INT 1
17846: PPUSH
17847: CALL_OW 275
17851: PUSH
17852: LD_VAR 0 11
17856: PUSH
17857: LD_INT 1
17859: ARRAY
17860: GREATEREQUAL
17861: PUSH
17862: LD_VAR 0 10
17866: PPUSH
17867: LD_INT 2
17869: PPUSH
17870: CALL_OW 275
17874: PUSH
17875: LD_VAR 0 11
17879: PUSH
17880: LD_INT 2
17882: ARRAY
17883: GREATEREQUAL
17884: AND
17885: PUSH
17886: LD_VAR 0 10
17890: PPUSH
17891: LD_INT 3
17893: PPUSH
17894: CALL_OW 275
17898: PUSH
17899: LD_VAR 0 11
17903: PUSH
17904: LD_INT 3
17906: ARRAY
17907: GREATEREQUAL
17908: AND
17909: NOT
17910: IFFALSE 17914
// exit ;
17912: GO 18501
// if GetBType ( depot ) = b_depot then
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 266
17923: PUSH
17924: LD_INT 0
17926: EQUAL
17927: IFFALSE 17939
// dist := 28 else
17929: LD_ADDR_VAR 0 14
17933: PUSH
17934: LD_INT 28
17936: ST_TO_ADDR
17937: GO 17947
// dist := 36 ;
17939: LD_ADDR_VAR 0 14
17943: PUSH
17944: LD_INT 36
17946: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17947: LD_VAR 0 1
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_VAR 0 4
17961: PPUSH
17962: CALL_OW 297
17966: PUSH
17967: LD_VAR 0 14
17971: GREATER
17972: IFFALSE 17976
// exit ;
17974: GO 18501
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17976: LD_ADDR_VAR 0 12
17980: PUSH
17981: LD_VAR 0 2
17985: PPUSH
17986: LD_VAR 0 3
17990: PPUSH
17991: LD_VAR 0 4
17995: PPUSH
17996: LD_VAR 0 5
18000: PPUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 248
18010: PPUSH
18011: LD_INT 0
18013: PPUSH
18014: CALL 18506 0 6
18018: ST_TO_ADDR
// if not hexes then
18019: LD_VAR 0 12
18023: NOT
18024: IFFALSE 18028
// exit ;
18026: GO 18501
// hex := GetHexInfo ( x , y ) ;
18028: LD_ADDR_VAR 0 15
18032: PUSH
18033: LD_VAR 0 3
18037: PPUSH
18038: LD_VAR 0 4
18042: PPUSH
18043: CALL_OW 546
18047: ST_TO_ADDR
// if hex [ 1 ] then
18048: LD_VAR 0 15
18052: PUSH
18053: LD_INT 1
18055: ARRAY
18056: IFFALSE 18060
// exit ;
18058: GO 18501
// height := hex [ 2 ] ;
18060: LD_ADDR_VAR 0 13
18064: PUSH
18065: LD_VAR 0 15
18069: PUSH
18070: LD_INT 2
18072: ARRAY
18073: ST_TO_ADDR
// for i = 1 to hexes do
18074: LD_ADDR_VAR 0 7
18078: PUSH
18079: DOUBLE
18080: LD_INT 1
18082: DEC
18083: ST_TO_ADDR
18084: LD_VAR 0 12
18088: PUSH
18089: FOR_TO
18090: IFFALSE 18420
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18092: LD_VAR 0 12
18096: PUSH
18097: LD_VAR 0 7
18101: ARRAY
18102: PUSH
18103: LD_INT 1
18105: ARRAY
18106: PPUSH
18107: LD_VAR 0 12
18111: PUSH
18112: LD_VAR 0 7
18116: ARRAY
18117: PUSH
18118: LD_INT 2
18120: ARRAY
18121: PPUSH
18122: CALL_OW 488
18126: NOT
18127: PUSH
18128: LD_VAR 0 12
18132: PUSH
18133: LD_VAR 0 7
18137: ARRAY
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PPUSH
18143: LD_VAR 0 12
18147: PUSH
18148: LD_VAR 0 7
18152: ARRAY
18153: PUSH
18154: LD_INT 2
18156: ARRAY
18157: PPUSH
18158: CALL_OW 428
18162: PUSH
18163: LD_INT 0
18165: GREATER
18166: OR
18167: PUSH
18168: LD_VAR 0 12
18172: PUSH
18173: LD_VAR 0 7
18177: ARRAY
18178: PUSH
18179: LD_INT 1
18181: ARRAY
18182: PPUSH
18183: LD_VAR 0 12
18187: PUSH
18188: LD_VAR 0 7
18192: ARRAY
18193: PUSH
18194: LD_INT 2
18196: ARRAY
18197: PPUSH
18198: CALL_OW 351
18202: OR
18203: IFFALSE 18209
// exit ;
18205: POP
18206: POP
18207: GO 18501
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18209: LD_ADDR_VAR 0 8
18213: PUSH
18214: LD_VAR 0 12
18218: PUSH
18219: LD_VAR 0 7
18223: ARRAY
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: LD_VAR 0 12
18233: PUSH
18234: LD_VAR 0 7
18238: ARRAY
18239: PUSH
18240: LD_INT 2
18242: ARRAY
18243: PPUSH
18244: CALL_OW 546
18248: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18249: LD_VAR 0 8
18253: PUSH
18254: LD_INT 1
18256: ARRAY
18257: PUSH
18258: LD_VAR 0 8
18262: PUSH
18263: LD_INT 2
18265: ARRAY
18266: PUSH
18267: LD_VAR 0 13
18271: PUSH
18272: LD_INT 2
18274: PLUS
18275: GREATER
18276: OR
18277: PUSH
18278: LD_VAR 0 8
18282: PUSH
18283: LD_INT 2
18285: ARRAY
18286: PUSH
18287: LD_VAR 0 13
18291: PUSH
18292: LD_INT 2
18294: MINUS
18295: LESS
18296: OR
18297: PUSH
18298: LD_VAR 0 8
18302: PUSH
18303: LD_INT 3
18305: ARRAY
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: LD_INT 8
18312: PUSH
18313: LD_INT 9
18315: PUSH
18316: LD_INT 10
18318: PUSH
18319: LD_INT 11
18321: PUSH
18322: LD_INT 12
18324: PUSH
18325: LD_INT 13
18327: PUSH
18328: LD_INT 16
18330: PUSH
18331: LD_INT 17
18333: PUSH
18334: LD_INT 18
18336: PUSH
18337: LD_INT 19
18339: PUSH
18340: LD_INT 20
18342: PUSH
18343: LD_INT 21
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: IN
18361: NOT
18362: OR
18363: PUSH
18364: LD_VAR 0 8
18368: PUSH
18369: LD_INT 5
18371: ARRAY
18372: NOT
18373: OR
18374: PUSH
18375: LD_VAR 0 8
18379: PUSH
18380: LD_INT 6
18382: ARRAY
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 7
18392: PUSH
18393: LD_INT 9
18395: PUSH
18396: LD_INT 10
18398: PUSH
18399: LD_INT 11
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: IN
18410: NOT
18411: OR
18412: IFFALSE 18418
// exit ;
18414: POP
18415: POP
18416: GO 18501
// end ;
18418: GO 18089
18420: POP
18421: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18422: LD_VAR 0 9
18426: PPUSH
18427: LD_VAR 0 3
18431: PPUSH
18432: LD_VAR 0 4
18436: PPUSH
18437: LD_INT 20
18439: PPUSH
18440: CALL 10453 0 4
18444: PUSH
18445: LD_INT 4
18447: ARRAY
18448: IFFALSE 18452
// exit ;
18450: GO 18501
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18452: LD_VAR 0 2
18456: PUSH
18457: LD_INT 29
18459: PUSH
18460: LD_INT 30
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: IN
18467: PUSH
18468: LD_VAR 0 3
18472: PPUSH
18473: LD_VAR 0 4
18477: PPUSH
18478: LD_VAR 0 9
18482: PPUSH
18483: CALL_OW 440
18487: NOT
18488: AND
18489: IFFALSE 18493
// exit ;
18491: GO 18501
// result := true ;
18493: LD_ADDR_VAR 0 6
18497: PUSH
18498: LD_INT 1
18500: ST_TO_ADDR
// end ;
18501: LD_VAR 0 6
18505: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18506: LD_INT 0
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
18530: PPUSH
18531: PPUSH
18532: PPUSH
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
18540: PPUSH
18541: PPUSH
18542: PPUSH
18543: PPUSH
18544: PPUSH
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
// result = [ ] ;
18566: LD_ADDR_VAR 0 7
18570: PUSH
18571: EMPTY
18572: ST_TO_ADDR
// temp_list = [ ] ;
18573: LD_ADDR_VAR 0 9
18577: PUSH
18578: EMPTY
18579: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18580: LD_VAR 0 4
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: LD_INT 4
18599: PUSH
18600: LD_INT 5
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: IN
18611: NOT
18612: PUSH
18613: LD_VAR 0 1
18617: PUSH
18618: LD_INT 0
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: IN
18628: PUSH
18629: LD_VAR 0 5
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: LD_INT 3
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: LIST
18647: IN
18648: NOT
18649: AND
18650: OR
18651: IFFALSE 18655
// exit ;
18653: GO 37046
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: LD_INT 7
18665: PUSH
18666: LD_INT 8
18668: PUSH
18669: LD_INT 13
18671: PUSH
18672: LD_INT 12
18674: PUSH
18675: LD_INT 15
18677: PUSH
18678: LD_INT 11
18680: PUSH
18681: LD_INT 14
18683: PUSH
18684: LD_INT 10
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: IN
18698: IFFALSE 18708
// btype = b_lab ;
18700: LD_ADDR_VAR 0 1
18704: PUSH
18705: LD_INT 6
18707: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18708: LD_VAR 0 6
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: IN
18727: NOT
18728: PUSH
18729: LD_VAR 0 1
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 3
18745: PUSH
18746: LD_INT 6
18748: PUSH
18749: LD_INT 36
18751: PUSH
18752: LD_INT 4
18754: PUSH
18755: LD_INT 5
18757: PUSH
18758: LD_INT 31
18760: PUSH
18761: LD_INT 32
18763: PUSH
18764: LD_INT 33
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: IN
18780: NOT
18781: PUSH
18782: LD_VAR 0 6
18786: PUSH
18787: LD_INT 1
18789: EQUAL
18790: AND
18791: OR
18792: PUSH
18793: LD_VAR 0 1
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: IN
18808: NOT
18809: PUSH
18810: LD_VAR 0 6
18814: PUSH
18815: LD_INT 2
18817: EQUAL
18818: AND
18819: OR
18820: IFFALSE 18830
// mode = 0 ;
18822: LD_ADDR_VAR 0 6
18826: PUSH
18827: LD_INT 0
18829: ST_TO_ADDR
// case mode of 0 :
18830: LD_VAR 0 6
18834: PUSH
18835: LD_INT 0
18837: DOUBLE
18838: EQUAL
18839: IFTRUE 18843
18841: GO 30296
18843: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18844: LD_ADDR_VAR 0 11
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 1
18864: NEG
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: LD_INT 1
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 1
18902: NEG
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: LD_INT 1
18917: NEG
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: LD_INT 2
18929: NEG
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 0
18937: PUSH
18938: LD_INT 2
18940: NEG
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: LD_INT 1
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: LD_INT 1
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: LD_INT 3
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: NEG
19011: PUSH
19012: LD_INT 2
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19037: LD_ADDR_VAR 0 12
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: LD_INT 1
19057: NEG
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: NEG
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: NEG
19107: PUSH
19108: LD_INT 1
19110: NEG
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: LD_INT 1
19121: NEG
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 2
19160: NEG
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: NEG
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 3
19194: NEG
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 3
19205: NEG
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19233: LD_ADDR_VAR 0 13
19237: PUSH
19238: LD_INT 0
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: NEG
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: NEG
19315: PUSH
19316: LD_INT 2
19318: NEG
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: LD_INT 3
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 3
19392: NEG
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 3
19404: NEG
19405: PUSH
19406: LD_INT 3
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19432: LD_ADDR_VAR 0 14
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 2
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: LD_INT 3
19582: NEG
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: LD_INT 3
19593: NEG
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 2
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19628: LD_ADDR_VAR 0 15
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 0
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 2
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: NEG
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 1
19777: NEG
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 3
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 3
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19821: LD_ADDR_VAR 0 16
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: LD_INT 0
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: LD_INT 1
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: NEG
19903: PUSH
19904: LD_INT 2
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: LD_INT 2
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 1
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 2
19944: NEG
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: LD_INT 2
19960: NEG
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 3
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 3
19978: PUSH
19979: LD_INT 3
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 2
19988: PUSH
19989: LD_INT 3
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20014: LD_ADDR_VAR 0 17
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 1
20095: NEG
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 2
20190: NEG
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: NEG
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 2
20213: NEG
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20244: LD_ADDR_VAR 0 18
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 1
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: LD_INT 1
20317: NEG
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: LD_INT 2
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 2
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 2
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 1
20409: NEG
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 2
20420: NEG
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: NEG
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20474: LD_ADDR_VAR 0 19
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: LD_INT 2
20559: NEG
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 2
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 2
20650: NEG
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 2
20673: NEG
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20704: LD_ADDR_VAR 0 20
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: LD_INT 2
20789: NEG
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 2
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 2
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 2
20880: NEG
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 2
20891: NEG
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 2
20903: NEG
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20934: LD_ADDR_VAR 0 21
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 0
20982: PUSH
20983: LD_INT 1
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: NEG
20993: PUSH
20994: LD_INT 0
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 1
21003: NEG
21004: PUSH
21005: LD_INT 1
21007: NEG
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: LD_INT 2
21019: NEG
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 2
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: LD_INT 1
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: LD_INT 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 1
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 2
21110: NEG
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: NEG
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21164: LD_ADDR_VAR 0 22
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: LD_INT 2
21260: NEG
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 2
21340: NEG
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: NEG
21364: PUSH
21365: LD_INT 2
21367: NEG
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21394: LD_ADDR_VAR 0 23
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 1
21452: NEG
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: LD_INT 2
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: LD_INT 2
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: NEG
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: LD_INT 2
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 2
21605: NEG
21606: PUSH
21607: LD_INT 3
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: LD_INT 3
21621: NEG
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: LD_INT 2
21632: NEG
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: LD_INT 1
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21674: LD_ADDR_VAR 0 24
21678: PUSH
21679: LD_INT 0
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 0
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 1
21743: NEG
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 0
21767: PUSH
21768: LD_INT 2
21770: NEG
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: NEG
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 2
21861: NEG
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: LD_INT 2
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: LD_INT 2
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 3
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: LD_INT 2
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21950: LD_ADDR_VAR 0 25
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: LD_INT 0
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 2
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 2
22137: NEG
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 3
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 3
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22224: LD_ADDR_VAR 0 26
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: LD_INT 0
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: LD_INT 1
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: LD_INT 2
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 2
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 2
22400: NEG
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: NEG
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: LD_INT 2
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 2
22466: NEG
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22500: LD_ADDR_VAR 0 27
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: LD_INT 2
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: LD_INT 2
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: NEG
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: NEG
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: NEG
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 2
22699: NEG
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 3
22733: NEG
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 3
22745: NEG
22746: PUSH
22747: LD_INT 2
22749: NEG
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22780: LD_ADDR_VAR 0 28
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 2
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: LD_INT 2
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: NEG
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 2
22967: NEG
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 2
22979: NEG
22980: PUSH
22981: LD_INT 2
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 2
22991: NEG
22992: PUSH
22993: LD_INT 3
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: LD_INT 3
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 3
23015: NEG
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 3
23027: NEG
23028: PUSH
23029: LD_INT 2
23031: NEG
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23062: LD_ADDR_VAR 0 29
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 2
23240: NEG
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: LD_INT 3
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 3
23306: NEG
23307: PUSH
23308: LD_INT 2
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23341: LD_ADDR_VAR 0 30
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: LD_INT 1
23361: NEG
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PUSH
23424: LD_INT 2
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 1
23496: NEG
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 2
23507: NEG
23508: PUSH
23509: LD_INT 0
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: LD_INT 1
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: LD_INT 3
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: LD_INT 2
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 3
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: NEG
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 3
23584: NEG
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23619: LD_ADDR_VAR 0 31
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 2
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 2
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 2
23784: NEG
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: NEG
23809: PUSH
23810: LD_INT 3
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 3
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 3
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: LD_INT 2
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 3
23862: NEG
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23897: LD_ADDR_VAR 0 32
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: NEG
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: LD_INT 2
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 2
24063: NEG
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 2
24074: NEG
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: LD_INT 3
24090: NEG
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 3
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 2
24119: PUSH
24120: LD_INT 3
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 2
24129: NEG
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 3
24140: NEG
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24175: LD_ADDR_VAR 0 33
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 1
24271: NEG
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 2
24330: NEG
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: LD_INT 2
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: LD_INT 3
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 3
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 3
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: NEG
24420: PUSH
24421: LD_INT 2
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24454: LD_ADDR_VAR 0 34
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: NEG
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: LD_INT 2
24550: NEG
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 2
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 2
24579: PUSH
24580: LD_INT 2
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: LD_INT 2
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 2
24610: NEG
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: NEG
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: NEG
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 3
24649: NEG
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 3
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: LD_INT 3
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 3
24699: NEG
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24734: LD_ADDR_VAR 0 35
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 0
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 1
24792: NEG
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24846: LD_ADDR_VAR 0 36
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24958: LD_ADDR_VAR 0 37
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: NEG
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25070: LD_ADDR_VAR 0 38
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: NEG
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25182: LD_ADDR_VAR 0 39
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 2
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25294: LD_ADDR_VAR 0 40
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25406: LD_ADDR_VAR 0 41
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 2
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 2
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 2
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: NEG
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: LD_INT 3
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 3
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 3
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 3
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 3
25649: PUSH
25650: LD_INT 3
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: LD_INT 3
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 2
25669: NEG
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 3
25680: NEG
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 3
25691: NEG
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: LD_INT 2
25707: NEG
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 3
25715: NEG
25716: PUSH
25717: LD_INT 3
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25756: LD_ADDR_VAR 0 42
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: LD_INT 1
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 2
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 2
25922: NEG
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: LD_INT 2
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: LD_INT 3
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 3
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: LD_INT 3
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: LD_INT 2
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 3
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: LD_INT 3
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: LD_INT 3
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 3
26053: NEG
26054: PUSH
26055: LD_INT 2
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 3
26065: NEG
26066: PUSH
26067: LD_INT 3
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26106: LD_ADDR_VAR 0 43
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 1
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: LD_INT 2
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 3
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 3
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: LD_INT 2
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 3
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 3
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 3
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: NEG
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 3
26402: NEG
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 3
26413: NEG
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26454: LD_ADDR_VAR 0 44
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: LD_INT 2
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: NEG
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: NEG
26633: PUSH
26634: LD_INT 2
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: LD_INT 3
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 3
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 3
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 3
26697: PUSH
26698: LD_INT 3
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: LD_INT 3
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 3
26728: NEG
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 3
26739: NEG
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 3
26751: NEG
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 3
26763: NEG
26764: PUSH
26765: LD_INT 3
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26804: LD_ADDR_VAR 0 45
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 2
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 2
26970: NEG
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: NEG
26983: PUSH
26984: LD_INT 2
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 2
26994: NEG
26995: PUSH
26996: LD_INT 3
26998: NEG
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 3
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: LD_INT 3
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: LD_INT 2
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 3
27040: PUSH
27041: LD_INT 2
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 3
27050: PUSH
27051: LD_INT 3
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 3
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: LD_INT 3
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 3
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 3
27101: NEG
27102: PUSH
27103: LD_INT 2
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 3
27113: NEG
27114: PUSH
27115: LD_INT 3
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27154: LD_ADDR_VAR 0 46
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 2
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: LD_INT 2
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: NEG
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: NEG
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 3
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 3
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 2
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 3
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 3
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 3
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 3
27450: NEG
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 3
27461: NEG
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27502: LD_ADDR_VAR 0 47
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 2
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: LD_INT 2
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: NEG
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27653: LD_ADDR_VAR 0 48
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27800: LD_ADDR_VAR 0 49
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: LD_INT 1
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27944: LD_ADDR_VAR 0 50
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28088: LD_ADDR_VAR 0 51
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28235: LD_ADDR_VAR 0 52
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 1
28316: NEG
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: NEG
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: NEG
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: NEG
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28386: LD_ADDR_VAR 0 53
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28616: LD_ADDR_VAR 0 54
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: NEG
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 2
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28846: LD_ADDR_VAR 0 55
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29076: LD_ADDR_VAR 0 56
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: NEG
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 2
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 2
29275: NEG
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29306: LD_ADDR_VAR 0 57
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 2
29482: NEG
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29536: LD_ADDR_VAR 0 58
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: LD_INT 2
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 2
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 2
29712: NEG
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 2
29735: NEG
29736: PUSH
29737: LD_INT 2
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29766: LD_ADDR_VAR 0 59
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 1
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29854: LD_ADDR_VAR 0 60
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 1
29923: NEG
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29942: LD_ADDR_VAR 0 61
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30030: LD_ADDR_VAR 0 62
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30118: LD_ADDR_VAR 0 63
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30206: LD_ADDR_VAR 0 64
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: ST_TO_ADDR
// end ; 1 :
30294: GO 36191
30296: LD_INT 1
30298: DOUBLE
30299: EQUAL
30300: IFTRUE 30304
30302: GO 32927
30304: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30305: LD_ADDR_VAR 0 11
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 3
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 3
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30349: LD_ADDR_VAR 0 12
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30390: LD_ADDR_VAR 0 13
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: LD_INT 3
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 2
30417: PUSH
30418: LD_INT 3
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30430: LD_ADDR_VAR 0 14
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: LD_INT 3
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30471: LD_ADDR_VAR 0 15
30475: PUSH
30476: LD_INT 2
30478: NEG
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30515: LD_ADDR_VAR 0 16
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 3
30546: NEG
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30561: LD_ADDR_VAR 0 17
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: LD_INT 3
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: LD_INT 2
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30605: LD_ADDR_VAR 0 18
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30646: LD_ADDR_VAR 0 19
30650: PUSH
30651: LD_INT 3
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30686: LD_ADDR_VAR 0 20
30690: PUSH
30691: LD_INT 1
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30727: LD_ADDR_VAR 0 21
30731: PUSH
30732: LD_INT 2
30734: NEG
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 3
30745: NEG
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30771: LD_ADDR_VAR 0 22
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: LD_INT 3
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 3
30790: NEG
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 3
30802: NEG
30803: PUSH
30804: LD_INT 3
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30817: LD_ADDR_VAR 0 23
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: LD_INT 4
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30861: LD_ADDR_VAR 0 24
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 4
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30902: LD_ADDR_VAR 0 25
30906: PUSH
30907: LD_INT 3
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 4
30919: PUSH
30920: LD_INT 3
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 4
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30942: LD_ADDR_VAR 0 26
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: LD_INT 4
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30983: LD_ADDR_VAR 0 27
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 3
31001: NEG
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 4
31012: NEG
31013: PUSH
31014: LD_INT 1
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31027: LD_ADDR_VAR 0 28
31031: PUSH
31032: LD_INT 3
31034: NEG
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: LD_INT 4
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 4
31058: NEG
31059: PUSH
31060: LD_INT 3
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31073: LD_ADDR_VAR 0 29
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: LD_INT 3
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: LD_INT 3
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 4
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 4
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: LD_INT 3
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: LD_INT 5
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 5
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: LD_INT 4
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: LD_INT 6
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 6
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: LD_INT 5
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31228: LD_ADDR_VAR 0 30
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 4
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 4
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 5
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 5
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 5
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 6
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 6
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31371: LD_ADDR_VAR 0 31
31375: PUSH
31376: LD_INT 3
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 2
31398: PUSH
31399: LD_INT 3
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 4
31408: PUSH
31409: LD_INT 3
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 4
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: LD_INT 4
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 5
31438: PUSH
31439: LD_INT 4
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 5
31448: PUSH
31449: LD_INT 5
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 4
31458: PUSH
31459: LD_INT 5
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 6
31468: PUSH
31469: LD_INT 5
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 6
31478: PUSH
31479: LD_INT 6
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: LD_INT 6
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31510: LD_ADDR_VAR 0 32
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 4
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: LD_INT 4
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 5
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: LD_INT 5
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: LD_INT 4
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 6
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: LD_INT 6
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: LD_INT 5
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31653: LD_ADDR_VAR 0 33
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 3
31671: NEG
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 3
31682: NEG
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 3
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 4
31705: NEG
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 4
31716: NEG
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 4
31728: NEG
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 5
31739: NEG
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 5
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 5
31762: NEG
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 6
31773: NEG
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 6
31784: NEG
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31808: LD_ADDR_VAR 0 34
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: NEG
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 3
31851: NEG
31852: PUSH
31853: LD_INT 4
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 4
31863: NEG
31864: PUSH
31865: LD_INT 3
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 4
31875: NEG
31876: PUSH
31877: LD_INT 4
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 4
31887: NEG
31888: PUSH
31889: LD_INT 5
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 5
31899: NEG
31900: PUSH
31901: LD_INT 4
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 5
31911: NEG
31912: PUSH
31913: LD_INT 5
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 5
31923: NEG
31924: PUSH
31925: LD_INT 6
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 6
31935: NEG
31936: PUSH
31937: LD_INT 5
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 6
31947: NEG
31948: PUSH
31949: LD_INT 6
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31971: LD_ADDR_VAR 0 41
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 3
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32015: LD_ADDR_VAR 0 42
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32056: LD_ADDR_VAR 0 43
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32096: LD_ADDR_VAR 0 44
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32137: LD_ADDR_VAR 0 45
32141: PUSH
32142: LD_INT 2
32144: NEG
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 2
32155: NEG
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: NEG
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32181: LD_ADDR_VAR 0 46
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: LD_INT 3
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 3
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: LIST
32226: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32227: LD_ADDR_VAR 0 47
32231: PUSH
32232: LD_INT 2
32234: NEG
32235: PUSH
32236: LD_INT 3
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: LD_INT 3
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32260: LD_ADDR_VAR 0 48
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 2
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32291: LD_ADDR_VAR 0 49
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32320: LD_ADDR_VAR 0 50
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 3
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32349: LD_ADDR_VAR 0 51
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32380: LD_ADDR_VAR 0 52
32384: PUSH
32385: LD_INT 3
32387: NEG
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 3
32399: NEG
32400: PUSH
32401: LD_INT 2
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32413: LD_ADDR_VAR 0 53
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: LD_INT 2
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32457: LD_ADDR_VAR 0 54
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32498: LD_ADDR_VAR 0 55
32502: PUSH
32503: LD_INT 3
32505: PUSH
32506: LD_INT 2
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32538: LD_ADDR_VAR 0 56
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: LD_INT 3
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 3
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32579: LD_ADDR_VAR 0 57
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 3
32597: NEG
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: NEG
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32623: LD_ADDR_VAR 0 58
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: LD_INT 3
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 3
32642: NEG
32643: PUSH
32644: LD_INT 2
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 3
32654: NEG
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32669: LD_ADDR_VAR 0 59
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32713: LD_ADDR_VAR 0 60
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32754: LD_ADDR_VAR 0 61
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: LIST
32793: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32794: LD_ADDR_VAR 0 62
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32835: LD_ADDR_VAR 0 63
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: LD_INT 1
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32879: LD_ADDR_VAR 0 64
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: LD_INT 2
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: NEG
32911: PUSH
32912: LD_INT 2
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// end ; 2 :
32925: GO 36191
32927: LD_INT 2
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 36190
32935: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32936: LD_ADDR_VAR 0 29
32940: PUSH
32941: LD_INT 4
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 4
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 5
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 5
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 4
32984: PUSH
32985: LD_INT 1
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 3
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 3
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 5
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 3
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 3
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 4
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 4
33066: PUSH
33067: LD_INT 4
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 3
33076: PUSH
33077: LD_INT 4
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 4
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 4
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: LD_INT 4
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 5
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 4
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 3
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: LD_INT 5
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 4
33275: NEG
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 4
33286: NEG
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 4
33298: NEG
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 4
33321: NEG
33322: PUSH
33323: LD_INT 4
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: LD_INT 5
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: LD_INT 4
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 3
33357: NEG
33358: PUSH
33359: LD_INT 3
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 4
33369: NEG
33370: PUSH
33371: LD_INT 3
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 5
33381: NEG
33382: PUSH
33383: LD_INT 4
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 5
33393: NEG
33394: PUSH
33395: LD_INT 5
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 3
33405: NEG
33406: PUSH
33407: LD_INT 5
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 5
33417: NEG
33418: PUSH
33419: LD_INT 3
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33474: LD_ADDR_VAR 0 30
33478: PUSH
33479: LD_INT 4
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 4
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 5
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 5
33511: PUSH
33512: LD_INT 5
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 4
33521: PUSH
33522: LD_INT 5
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: LD_INT 4
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 5
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 3
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: LD_INT 3
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: LD_INT 4
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 4
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: LD_INT 3
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: LD_INT 4
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 4
33664: NEG
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 4
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 3
33687: NEG
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 3
33698: NEG
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 4
33709: NEG
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 5
33720: NEG
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 5
33731: NEG
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 5
33743: NEG
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 3
33755: NEG
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: LD_INT 3
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 3
33778: NEG
33779: PUSH
33780: LD_INT 4
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 2
33790: NEG
33791: PUSH
33792: LD_INT 3
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 4
33826: NEG
33827: PUSH
33828: LD_INT 3
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 4
33838: NEG
33839: PUSH
33840: LD_INT 4
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: LD_INT 4
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 4
33862: NEG
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 4
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: LD_INT 5
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: LD_INT 4
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: LD_INT 3
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 4
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 5
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: LD_INT 3
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: LD_INT 5
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34021: LD_ADDR_VAR 0 31
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 4
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: LD_INT 4
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 5
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 5
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 4
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: LD_INT 3
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 5
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: NEG
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 3
34166: NEG
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 4
34177: NEG
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 4
34188: NEG
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 4
34200: NEG
34201: PUSH
34202: LD_INT 2
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 4
34223: NEG
34224: PUSH
34225: LD_INT 4
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 4
34235: NEG
34236: PUSH
34237: LD_INT 5
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 3
34247: NEG
34248: PUSH
34249: LD_INT 4
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 3
34259: NEG
34260: PUSH
34261: LD_INT 3
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 4
34271: NEG
34272: PUSH
34273: LD_INT 3
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 5
34283: NEG
34284: PUSH
34285: LD_INT 4
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 5
34295: NEG
34296: PUSH
34297: LD_INT 5
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 3
34307: NEG
34308: PUSH
34309: LD_INT 5
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 5
34319: NEG
34320: PUSH
34321: LD_INT 3
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 3
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 4
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: LD_INT 3
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: LD_INT 3
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 4
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: LD_INT 2
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 4
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 4
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 4
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 5
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 5
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 4
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 3
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 3
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34571: LD_ADDR_VAR 0 32
34575: PUSH
34576: LD_INT 4
34578: NEG
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 4
34589: NEG
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 3
34601: NEG
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 3
34612: NEG
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 4
34623: NEG
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 5
34634: NEG
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 5
34645: NEG
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 5
34657: NEG
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 3
34669: NEG
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 3
34680: NEG
34681: PUSH
34682: LD_INT 3
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 3
34692: NEG
34693: PUSH
34694: LD_INT 4
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: LD_INT 3
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 3
34728: NEG
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 4
34740: NEG
34741: PUSH
34742: LD_INT 3
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 4
34752: NEG
34753: PUSH
34754: LD_INT 4
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: LD_INT 4
34768: NEG
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 4
34776: NEG
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: LD_INT 4
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 5
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 4
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 3
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: LD_INT 4
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 5
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 3
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: NEG
34879: PUSH
34880: LD_INT 5
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 3
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 4
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 4
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 4
34983: PUSH
34984: LD_INT 4
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: LD_INT 4
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: LD_INT 5
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 4
35023: PUSH
35024: LD_INT 5
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: LD_INT 4
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 5
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: LD_INT 5
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35118: LD_ADDR_VAR 0 33
35122: PUSH
35123: LD_INT 4
35125: NEG
35126: PUSH
35127: LD_INT 4
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 4
35137: NEG
35138: PUSH
35139: LD_INT 5
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 3
35149: NEG
35150: PUSH
35151: LD_INT 4
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 3
35161: NEG
35162: PUSH
35163: LD_INT 3
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 4
35173: NEG
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 5
35185: NEG
35186: PUSH
35187: LD_INT 4
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 5
35197: NEG
35198: PUSH
35199: LD_INT 5
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 3
35209: NEG
35210: PUSH
35211: LD_INT 5
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 5
35221: NEG
35222: PUSH
35223: LD_INT 3
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 3
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 4
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: LD_INT 3
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 4
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: LD_INT 2
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: NEG
35324: PUSH
35325: LD_INT 4
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 4
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 4
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 5
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 5
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 4
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 3
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 5
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 3
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 4
35448: PUSH
35449: LD_INT 3
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 4
35458: PUSH
35459: LD_INT 4
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: LD_INT 4
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 3
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 4
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: LD_INT 4
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 4
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: LD_INT 3
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 4
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 5
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 5
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 4
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 3
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 5
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: LD_INT 3
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35656: LD_ADDR_VAR 0 34
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 4
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 5
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 4
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: LD_INT 3
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 3
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 4
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 5
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: LD_INT 3
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: LD_INT 5
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 3
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 4
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 4
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 3
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 2
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: LD_INT 2
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 4
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 4
35858: PUSH
35859: LD_INT 4
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 4
35868: PUSH
35869: LD_INT 3
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 5
35878: PUSH
35879: LD_INT 4
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 5
35888: PUSH
35889: LD_INT 5
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 4
35898: PUSH
35899: LD_INT 5
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: LD_INT 4
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 5
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: LD_INT 5
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 3
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 3
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 4
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: LD_INT 3
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 2
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 4
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: NEG
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 4
36041: NEG
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 4
36052: NEG
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 3
36064: NEG
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 3
36075: NEG
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 4
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 5
36097: NEG
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 5
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 5
36120: NEG
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 3
36132: NEG
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
// end ; end ;
36188: GO 36191
36190: POP
// case btype of b_depot , b_warehouse :
36191: LD_VAR 0 1
36195: PUSH
36196: LD_INT 0
36198: DOUBLE
36199: EQUAL
36200: IFTRUE 36210
36202: LD_INT 1
36204: DOUBLE
36205: EQUAL
36206: IFTRUE 36210
36208: GO 36411
36210: POP
// case nation of nation_american :
36211: LD_VAR 0 5
36215: PUSH
36216: LD_INT 1
36218: DOUBLE
36219: EQUAL
36220: IFTRUE 36224
36222: GO 36280
36224: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36225: LD_ADDR_VAR 0 9
36229: PUSH
36230: LD_VAR 0 11
36234: PUSH
36235: LD_VAR 0 12
36239: PUSH
36240: LD_VAR 0 13
36244: PUSH
36245: LD_VAR 0 14
36249: PUSH
36250: LD_VAR 0 15
36254: PUSH
36255: LD_VAR 0 16
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: PUSH
36268: LD_VAR 0 4
36272: PUSH
36273: LD_INT 1
36275: PLUS
36276: ARRAY
36277: ST_TO_ADDR
36278: GO 36409
36280: LD_INT 2
36282: DOUBLE
36283: EQUAL
36284: IFTRUE 36288
36286: GO 36344
36288: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36289: LD_ADDR_VAR 0 9
36293: PUSH
36294: LD_VAR 0 17
36298: PUSH
36299: LD_VAR 0 18
36303: PUSH
36304: LD_VAR 0 19
36308: PUSH
36309: LD_VAR 0 20
36313: PUSH
36314: LD_VAR 0 21
36318: PUSH
36319: LD_VAR 0 22
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: PUSH
36332: LD_VAR 0 4
36336: PUSH
36337: LD_INT 1
36339: PLUS
36340: ARRAY
36341: ST_TO_ADDR
36342: GO 36409
36344: LD_INT 3
36346: DOUBLE
36347: EQUAL
36348: IFTRUE 36352
36350: GO 36408
36352: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36353: LD_ADDR_VAR 0 9
36357: PUSH
36358: LD_VAR 0 23
36362: PUSH
36363: LD_VAR 0 24
36367: PUSH
36368: LD_VAR 0 25
36372: PUSH
36373: LD_VAR 0 26
36377: PUSH
36378: LD_VAR 0 27
36382: PUSH
36383: LD_VAR 0 28
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: LD_VAR 0 4
36400: PUSH
36401: LD_INT 1
36403: PLUS
36404: ARRAY
36405: ST_TO_ADDR
36406: GO 36409
36408: POP
36409: GO 36964
36411: LD_INT 2
36413: DOUBLE
36414: EQUAL
36415: IFTRUE 36425
36417: LD_INT 3
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36425
36423: GO 36481
36425: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36426: LD_ADDR_VAR 0 9
36430: PUSH
36431: LD_VAR 0 29
36435: PUSH
36436: LD_VAR 0 30
36440: PUSH
36441: LD_VAR 0 31
36445: PUSH
36446: LD_VAR 0 32
36450: PUSH
36451: LD_VAR 0 33
36455: PUSH
36456: LD_VAR 0 34
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: PUSH
36469: LD_VAR 0 4
36473: PUSH
36474: LD_INT 1
36476: PLUS
36477: ARRAY
36478: ST_TO_ADDR
36479: GO 36964
36481: LD_INT 16
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36543
36487: LD_INT 17
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36543
36493: LD_INT 18
36495: DOUBLE
36496: EQUAL
36497: IFTRUE 36543
36499: LD_INT 19
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36543
36505: LD_INT 22
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36543
36511: LD_INT 20
36513: DOUBLE
36514: EQUAL
36515: IFTRUE 36543
36517: LD_INT 21
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36543
36523: LD_INT 23
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36543
36529: LD_INT 24
36531: DOUBLE
36532: EQUAL
36533: IFTRUE 36543
36535: LD_INT 25
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36543
36541: GO 36599
36543: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36544: LD_ADDR_VAR 0 9
36548: PUSH
36549: LD_VAR 0 35
36553: PUSH
36554: LD_VAR 0 36
36558: PUSH
36559: LD_VAR 0 37
36563: PUSH
36564: LD_VAR 0 38
36568: PUSH
36569: LD_VAR 0 39
36573: PUSH
36574: LD_VAR 0 40
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: PUSH
36587: LD_VAR 0 4
36591: PUSH
36592: LD_INT 1
36594: PLUS
36595: ARRAY
36596: ST_TO_ADDR
36597: GO 36964
36599: LD_INT 6
36601: DOUBLE
36602: EQUAL
36603: IFTRUE 36655
36605: LD_INT 7
36607: DOUBLE
36608: EQUAL
36609: IFTRUE 36655
36611: LD_INT 8
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36655
36617: LD_INT 13
36619: DOUBLE
36620: EQUAL
36621: IFTRUE 36655
36623: LD_INT 12
36625: DOUBLE
36626: EQUAL
36627: IFTRUE 36655
36629: LD_INT 15
36631: DOUBLE
36632: EQUAL
36633: IFTRUE 36655
36635: LD_INT 11
36637: DOUBLE
36638: EQUAL
36639: IFTRUE 36655
36641: LD_INT 14
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36655
36647: LD_INT 10
36649: DOUBLE
36650: EQUAL
36651: IFTRUE 36655
36653: GO 36711
36655: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36656: LD_ADDR_VAR 0 9
36660: PUSH
36661: LD_VAR 0 41
36665: PUSH
36666: LD_VAR 0 42
36670: PUSH
36671: LD_VAR 0 43
36675: PUSH
36676: LD_VAR 0 44
36680: PUSH
36681: LD_VAR 0 45
36685: PUSH
36686: LD_VAR 0 46
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: PUSH
36699: LD_VAR 0 4
36703: PUSH
36704: LD_INT 1
36706: PLUS
36707: ARRAY
36708: ST_TO_ADDR
36709: GO 36964
36711: LD_INT 36
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36719
36717: GO 36775
36719: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36720: LD_ADDR_VAR 0 9
36724: PUSH
36725: LD_VAR 0 47
36729: PUSH
36730: LD_VAR 0 48
36734: PUSH
36735: LD_VAR 0 49
36739: PUSH
36740: LD_VAR 0 50
36744: PUSH
36745: LD_VAR 0 51
36749: PUSH
36750: LD_VAR 0 52
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: PUSH
36763: LD_VAR 0 4
36767: PUSH
36768: LD_INT 1
36770: PLUS
36771: ARRAY
36772: ST_TO_ADDR
36773: GO 36964
36775: LD_INT 4
36777: DOUBLE
36778: EQUAL
36779: IFTRUE 36801
36781: LD_INT 5
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36801
36787: LD_INT 34
36789: DOUBLE
36790: EQUAL
36791: IFTRUE 36801
36793: LD_INT 37
36795: DOUBLE
36796: EQUAL
36797: IFTRUE 36801
36799: GO 36857
36801: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36802: LD_ADDR_VAR 0 9
36806: PUSH
36807: LD_VAR 0 53
36811: PUSH
36812: LD_VAR 0 54
36816: PUSH
36817: LD_VAR 0 55
36821: PUSH
36822: LD_VAR 0 56
36826: PUSH
36827: LD_VAR 0 57
36831: PUSH
36832: LD_VAR 0 58
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: PUSH
36845: LD_VAR 0 4
36849: PUSH
36850: LD_INT 1
36852: PLUS
36853: ARRAY
36854: ST_TO_ADDR
36855: GO 36964
36857: LD_INT 31
36859: DOUBLE
36860: EQUAL
36861: IFTRUE 36907
36863: LD_INT 32
36865: DOUBLE
36866: EQUAL
36867: IFTRUE 36907
36869: LD_INT 33
36871: DOUBLE
36872: EQUAL
36873: IFTRUE 36907
36875: LD_INT 27
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36907
36881: LD_INT 26
36883: DOUBLE
36884: EQUAL
36885: IFTRUE 36907
36887: LD_INT 28
36889: DOUBLE
36890: EQUAL
36891: IFTRUE 36907
36893: LD_INT 29
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36907
36899: LD_INT 30
36901: DOUBLE
36902: EQUAL
36903: IFTRUE 36907
36905: GO 36963
36907: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36908: LD_ADDR_VAR 0 9
36912: PUSH
36913: LD_VAR 0 59
36917: PUSH
36918: LD_VAR 0 60
36922: PUSH
36923: LD_VAR 0 61
36927: PUSH
36928: LD_VAR 0 62
36932: PUSH
36933: LD_VAR 0 63
36937: PUSH
36938: LD_VAR 0 64
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: PUSH
36951: LD_VAR 0 4
36955: PUSH
36956: LD_INT 1
36958: PLUS
36959: ARRAY
36960: ST_TO_ADDR
36961: GO 36964
36963: POP
// temp_list2 = [ ] ;
36964: LD_ADDR_VAR 0 10
36968: PUSH
36969: EMPTY
36970: ST_TO_ADDR
// for i in temp_list do
36971: LD_ADDR_VAR 0 8
36975: PUSH
36976: LD_VAR 0 9
36980: PUSH
36981: FOR_IN
36982: IFFALSE 37034
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36984: LD_ADDR_VAR 0 10
36988: PUSH
36989: LD_VAR 0 10
36993: PUSH
36994: LD_VAR 0 8
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PUSH
37003: LD_VAR 0 2
37007: PLUS
37008: PUSH
37009: LD_VAR 0 8
37013: PUSH
37014: LD_INT 2
37016: ARRAY
37017: PUSH
37018: LD_VAR 0 3
37022: PLUS
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: EMPTY
37029: LIST
37030: ADD
37031: ST_TO_ADDR
37032: GO 36981
37034: POP
37035: POP
// result = temp_list2 ;
37036: LD_ADDR_VAR 0 7
37040: PUSH
37041: LD_VAR 0 10
37045: ST_TO_ADDR
// end ;
37046: LD_VAR 0 7
37050: RET
// export function EnemyInRange ( unit , dist ) ; begin
37051: LD_INT 0
37053: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37054: LD_ADDR_VAR 0 3
37058: PUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 255
37068: PPUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 250
37078: PPUSH
37079: LD_VAR 0 1
37083: PPUSH
37084: CALL_OW 251
37088: PPUSH
37089: LD_VAR 0 2
37093: PPUSH
37094: CALL 10453 0 4
37098: PUSH
37099: LD_INT 4
37101: ARRAY
37102: ST_TO_ADDR
// end ;
37103: LD_VAR 0 3
37107: RET
// export function PlayerSeeMe ( unit ) ; begin
37108: LD_INT 0
37110: PPUSH
// result := See ( your_side , unit ) ;
37111: LD_ADDR_VAR 0 2
37115: PUSH
37116: LD_OWVAR 2
37120: PPUSH
37121: LD_VAR 0 1
37125: PPUSH
37126: CALL_OW 292
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 2
37135: RET
// export function ReverseDir ( unit ) ; begin
37136: LD_INT 0
37138: PPUSH
// if not unit then
37139: LD_VAR 0 1
37143: NOT
37144: IFFALSE 37148
// exit ;
37146: GO 37171
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37148: LD_ADDR_VAR 0 2
37152: PUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 254
37162: PUSH
37163: LD_INT 3
37165: PLUS
37166: PUSH
37167: LD_INT 6
37169: MOD
37170: ST_TO_ADDR
// end ;
37171: LD_VAR 0 2
37175: RET
// export function ReverseArray ( array ) ; var i ; begin
37176: LD_INT 0
37178: PPUSH
37179: PPUSH
// if not array then
37180: LD_VAR 0 1
37184: NOT
37185: IFFALSE 37189
// exit ;
37187: GO 37244
// result := [ ] ;
37189: LD_ADDR_VAR 0 2
37193: PUSH
37194: EMPTY
37195: ST_TO_ADDR
// for i := array downto 1 do
37196: LD_ADDR_VAR 0 3
37200: PUSH
37201: DOUBLE
37202: LD_VAR 0 1
37206: INC
37207: ST_TO_ADDR
37208: LD_INT 1
37210: PUSH
37211: FOR_DOWNTO
37212: IFFALSE 37242
// result := Join ( result , array [ i ] ) ;
37214: LD_ADDR_VAR 0 2
37218: PUSH
37219: LD_VAR 0 2
37223: PPUSH
37224: LD_VAR 0 1
37228: PUSH
37229: LD_VAR 0 3
37233: ARRAY
37234: PPUSH
37235: CALL 41888 0 2
37239: ST_TO_ADDR
37240: GO 37211
37242: POP
37243: POP
// end ;
37244: LD_VAR 0 2
37248: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37249: LD_INT 0
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
// if not unit or not hexes then
37257: LD_VAR 0 1
37261: NOT
37262: PUSH
37263: LD_VAR 0 2
37267: NOT
37268: OR
37269: IFFALSE 37273
// exit ;
37271: GO 37396
// dist := 9999 ;
37273: LD_ADDR_VAR 0 5
37277: PUSH
37278: LD_INT 9999
37280: ST_TO_ADDR
// for i = 1 to hexes do
37281: LD_ADDR_VAR 0 4
37285: PUSH
37286: DOUBLE
37287: LD_INT 1
37289: DEC
37290: ST_TO_ADDR
37291: LD_VAR 0 2
37295: PUSH
37296: FOR_TO
37297: IFFALSE 37384
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37299: LD_ADDR_VAR 0 6
37303: PUSH
37304: LD_VAR 0 1
37308: PPUSH
37309: LD_VAR 0 2
37313: PUSH
37314: LD_VAR 0 4
37318: ARRAY
37319: PUSH
37320: LD_INT 1
37322: ARRAY
37323: PPUSH
37324: LD_VAR 0 2
37328: PUSH
37329: LD_VAR 0 4
37333: ARRAY
37334: PUSH
37335: LD_INT 2
37337: ARRAY
37338: PPUSH
37339: CALL_OW 297
37343: ST_TO_ADDR
// if tdist < dist then
37344: LD_VAR 0 6
37348: PUSH
37349: LD_VAR 0 5
37353: LESS
37354: IFFALSE 37382
// begin hex := hexes [ i ] ;
37356: LD_ADDR_VAR 0 8
37360: PUSH
37361: LD_VAR 0 2
37365: PUSH
37366: LD_VAR 0 4
37370: ARRAY
37371: ST_TO_ADDR
// dist := tdist ;
37372: LD_ADDR_VAR 0 5
37376: PUSH
37377: LD_VAR 0 6
37381: ST_TO_ADDR
// end ; end ;
37382: GO 37296
37384: POP
37385: POP
// result := hex ;
37386: LD_ADDR_VAR 0 3
37390: PUSH
37391: LD_VAR 0 8
37395: ST_TO_ADDR
// end ;
37396: LD_VAR 0 3
37400: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37401: LD_INT 0
37403: PPUSH
37404: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37405: LD_VAR 0 1
37409: NOT
37410: PUSH
37411: LD_VAR 0 1
37415: PUSH
37416: LD_INT 21
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 23
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PPUSH
37440: CALL_OW 69
37444: IN
37445: NOT
37446: OR
37447: IFFALSE 37451
// exit ;
37449: GO 37498
// for i = 1 to 3 do
37451: LD_ADDR_VAR 0 3
37455: PUSH
37456: DOUBLE
37457: LD_INT 1
37459: DEC
37460: ST_TO_ADDR
37461: LD_INT 3
37463: PUSH
37464: FOR_TO
37465: IFFALSE 37496
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37467: LD_VAR 0 1
37471: PPUSH
37472: CALL_OW 250
37476: PPUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 251
37486: PPUSH
37487: LD_INT 1
37489: PPUSH
37490: CALL_OW 453
37494: GO 37464
37496: POP
37497: POP
// end ;
37498: LD_VAR 0 2
37502: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37503: LD_INT 0
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37511: LD_VAR 0 1
37515: NOT
37516: PUSH
37517: LD_VAR 0 2
37521: NOT
37522: OR
37523: PUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 314
37533: OR
37534: IFFALSE 37538
// exit ;
37536: GO 38005
// if GetLives ( i ) < 250 then
37538: LD_VAR 0 4
37542: PPUSH
37543: CALL_OW 256
37547: PUSH
37548: LD_INT 250
37550: LESS
37551: IFFALSE 37564
// begin ComAutodestruct ( i ) ;
37553: LD_VAR 0 4
37557: PPUSH
37558: CALL 37401 0 1
// exit ;
37562: GO 38005
// end ; x := GetX ( enemy_unit ) ;
37564: LD_ADDR_VAR 0 7
37568: PUSH
37569: LD_VAR 0 2
37573: PPUSH
37574: CALL_OW 250
37578: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37579: LD_ADDR_VAR 0 8
37583: PUSH
37584: LD_VAR 0 2
37588: PPUSH
37589: CALL_OW 251
37593: ST_TO_ADDR
// if not x or not y then
37594: LD_VAR 0 7
37598: NOT
37599: PUSH
37600: LD_VAR 0 8
37604: NOT
37605: OR
37606: IFFALSE 37610
// exit ;
37608: GO 38005
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37610: LD_ADDR_VAR 0 6
37614: PUSH
37615: LD_VAR 0 7
37619: PPUSH
37620: LD_INT 0
37622: PPUSH
37623: LD_INT 4
37625: PPUSH
37626: CALL_OW 272
37630: PUSH
37631: LD_VAR 0 8
37635: PPUSH
37636: LD_INT 0
37638: PPUSH
37639: LD_INT 4
37641: PPUSH
37642: CALL_OW 273
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_VAR 0 7
37655: PPUSH
37656: LD_INT 1
37658: PPUSH
37659: LD_INT 4
37661: PPUSH
37662: CALL_OW 272
37666: PUSH
37667: LD_VAR 0 8
37671: PPUSH
37672: LD_INT 1
37674: PPUSH
37675: LD_INT 4
37677: PPUSH
37678: CALL_OW 273
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_VAR 0 7
37691: PPUSH
37692: LD_INT 2
37694: PPUSH
37695: LD_INT 4
37697: PPUSH
37698: CALL_OW 272
37702: PUSH
37703: LD_VAR 0 8
37707: PPUSH
37708: LD_INT 2
37710: PPUSH
37711: LD_INT 4
37713: PPUSH
37714: CALL_OW 273
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_VAR 0 7
37727: PPUSH
37728: LD_INT 3
37730: PPUSH
37731: LD_INT 4
37733: PPUSH
37734: CALL_OW 272
37738: PUSH
37739: LD_VAR 0 8
37743: PPUSH
37744: LD_INT 3
37746: PPUSH
37747: LD_INT 4
37749: PPUSH
37750: CALL_OW 273
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_VAR 0 7
37763: PPUSH
37764: LD_INT 4
37766: PPUSH
37767: LD_INT 4
37769: PPUSH
37770: CALL_OW 272
37774: PUSH
37775: LD_VAR 0 8
37779: PPUSH
37780: LD_INT 4
37782: PPUSH
37783: LD_INT 4
37785: PPUSH
37786: CALL_OW 273
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_VAR 0 7
37799: PPUSH
37800: LD_INT 5
37802: PPUSH
37803: LD_INT 4
37805: PPUSH
37806: CALL_OW 272
37810: PUSH
37811: LD_VAR 0 8
37815: PPUSH
37816: LD_INT 5
37818: PPUSH
37819: LD_INT 4
37821: PPUSH
37822: CALL_OW 273
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// for i = tmp downto 1 do
37839: LD_ADDR_VAR 0 4
37843: PUSH
37844: DOUBLE
37845: LD_VAR 0 6
37849: INC
37850: ST_TO_ADDR
37851: LD_INT 1
37853: PUSH
37854: FOR_DOWNTO
37855: IFFALSE 37956
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37857: LD_VAR 0 6
37861: PUSH
37862: LD_VAR 0 4
37866: ARRAY
37867: PUSH
37868: LD_INT 1
37870: ARRAY
37871: PPUSH
37872: LD_VAR 0 6
37876: PUSH
37877: LD_VAR 0 4
37881: ARRAY
37882: PUSH
37883: LD_INT 2
37885: ARRAY
37886: PPUSH
37887: CALL_OW 488
37891: NOT
37892: PUSH
37893: LD_VAR 0 6
37897: PUSH
37898: LD_VAR 0 4
37902: ARRAY
37903: PUSH
37904: LD_INT 1
37906: ARRAY
37907: PPUSH
37908: LD_VAR 0 6
37912: PUSH
37913: LD_VAR 0 4
37917: ARRAY
37918: PUSH
37919: LD_INT 2
37921: ARRAY
37922: PPUSH
37923: CALL_OW 428
37927: PUSH
37928: LD_INT 0
37930: NONEQUAL
37931: OR
37932: IFFALSE 37954
// tmp := Delete ( tmp , i ) ;
37934: LD_ADDR_VAR 0 6
37938: PUSH
37939: LD_VAR 0 6
37943: PPUSH
37944: LD_VAR 0 4
37948: PPUSH
37949: CALL_OW 3
37953: ST_TO_ADDR
37954: GO 37854
37956: POP
37957: POP
// j := GetClosestHex ( unit , tmp ) ;
37958: LD_ADDR_VAR 0 5
37962: PUSH
37963: LD_VAR 0 1
37967: PPUSH
37968: LD_VAR 0 6
37972: PPUSH
37973: CALL 37249 0 2
37977: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37978: LD_VAR 0 1
37982: PPUSH
37983: LD_VAR 0 5
37987: PUSH
37988: LD_INT 1
37990: ARRAY
37991: PPUSH
37992: LD_VAR 0 5
37996: PUSH
37997: LD_INT 2
37999: ARRAY
38000: PPUSH
38001: CALL_OW 111
// end ;
38005: LD_VAR 0 3
38009: RET
// export function PrepareApemanSoldier ( ) ; begin
38010: LD_INT 0
38012: PPUSH
// uc_nation := 0 ;
38013: LD_ADDR_OWVAR 21
38017: PUSH
38018: LD_INT 0
38020: ST_TO_ADDR
// hc_sex := sex_male ;
38021: LD_ADDR_OWVAR 27
38025: PUSH
38026: LD_INT 1
38028: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38029: LD_ADDR_OWVAR 28
38033: PUSH
38034: LD_INT 15
38036: ST_TO_ADDR
// hc_gallery :=  ;
38037: LD_ADDR_OWVAR 33
38041: PUSH
38042: LD_STRING 
38044: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38045: LD_ADDR_OWVAR 31
38049: PUSH
38050: LD_INT 0
38052: PPUSH
38053: LD_INT 3
38055: PPUSH
38056: CALL_OW 12
38060: PUSH
38061: LD_INT 0
38063: PPUSH
38064: LD_INT 3
38066: PPUSH
38067: CALL_OW 12
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: ST_TO_ADDR
// end ;
38084: LD_VAR 0 1
38088: RET
// export function PrepareApemanEngineer ( ) ; begin
38089: LD_INT 0
38091: PPUSH
// uc_nation := 0 ;
38092: LD_ADDR_OWVAR 21
38096: PUSH
38097: LD_INT 0
38099: ST_TO_ADDR
// hc_sex := sex_male ;
38100: LD_ADDR_OWVAR 27
38104: PUSH
38105: LD_INT 1
38107: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38108: LD_ADDR_OWVAR 28
38112: PUSH
38113: LD_INT 16
38115: ST_TO_ADDR
// hc_gallery :=  ;
38116: LD_ADDR_OWVAR 33
38120: PUSH
38121: LD_STRING 
38123: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38124: LD_ADDR_OWVAR 31
38128: PUSH
38129: LD_INT 0
38131: PPUSH
38132: LD_INT 3
38134: PPUSH
38135: CALL_OW 12
38139: PUSH
38140: LD_INT 0
38142: PPUSH
38143: LD_INT 3
38145: PPUSH
38146: CALL_OW 12
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: ST_TO_ADDR
// end ;
38163: LD_VAR 0 1
38167: RET
// export function PrepareApeman ( agressivity ) ; begin
38168: LD_INT 0
38170: PPUSH
// uc_side := 0 ;
38171: LD_ADDR_OWVAR 20
38175: PUSH
38176: LD_INT 0
38178: ST_TO_ADDR
// uc_nation := 0 ;
38179: LD_ADDR_OWVAR 21
38183: PUSH
38184: LD_INT 0
38186: ST_TO_ADDR
// hc_sex := sex_male ;
38187: LD_ADDR_OWVAR 27
38191: PUSH
38192: LD_INT 1
38194: ST_TO_ADDR
// hc_class := class_apeman ;
38195: LD_ADDR_OWVAR 28
38199: PUSH
38200: LD_INT 12
38202: ST_TO_ADDR
// hc_gallery :=  ;
38203: LD_ADDR_OWVAR 33
38207: PUSH
38208: LD_STRING 
38210: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38211: LD_ADDR_OWVAR 35
38215: PUSH
38216: LD_VAR 0 1
38220: NEG
38221: PPUSH
38222: LD_VAR 0 1
38226: PPUSH
38227: CALL_OW 12
38231: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38232: LD_ADDR_OWVAR 31
38236: PUSH
38237: LD_INT 0
38239: PPUSH
38240: LD_INT 3
38242: PPUSH
38243: CALL_OW 12
38247: PUSH
38248: LD_INT 0
38250: PPUSH
38251: LD_INT 3
38253: PPUSH
38254: CALL_OW 12
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// end ;
38271: LD_VAR 0 2
38275: RET
// export function PrepareTiger ( agressivity ) ; begin
38276: LD_INT 0
38278: PPUSH
// uc_side := 0 ;
38279: LD_ADDR_OWVAR 20
38283: PUSH
38284: LD_INT 0
38286: ST_TO_ADDR
// uc_nation := 0 ;
38287: LD_ADDR_OWVAR 21
38291: PUSH
38292: LD_INT 0
38294: ST_TO_ADDR
// hc_class := class_tiger ;
38295: LD_ADDR_OWVAR 28
38299: PUSH
38300: LD_INT 14
38302: ST_TO_ADDR
// hc_gallery :=  ;
38303: LD_ADDR_OWVAR 33
38307: PUSH
38308: LD_STRING 
38310: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38311: LD_ADDR_OWVAR 35
38315: PUSH
38316: LD_VAR 0 1
38320: NEG
38321: PPUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 12
38331: ST_TO_ADDR
// end ;
38332: LD_VAR 0 2
38336: RET
// export function PrepareEnchidna ( ) ; begin
38337: LD_INT 0
38339: PPUSH
// uc_side := 0 ;
38340: LD_ADDR_OWVAR 20
38344: PUSH
38345: LD_INT 0
38347: ST_TO_ADDR
// uc_nation := 0 ;
38348: LD_ADDR_OWVAR 21
38352: PUSH
38353: LD_INT 0
38355: ST_TO_ADDR
// hc_class := class_baggie ;
38356: LD_ADDR_OWVAR 28
38360: PUSH
38361: LD_INT 13
38363: ST_TO_ADDR
// hc_gallery :=  ;
38364: LD_ADDR_OWVAR 33
38368: PUSH
38369: LD_STRING 
38371: ST_TO_ADDR
// end ;
38372: LD_VAR 0 1
38376: RET
// export function PrepareFrog ( ) ; begin
38377: LD_INT 0
38379: PPUSH
// uc_side := 0 ;
38380: LD_ADDR_OWVAR 20
38384: PUSH
38385: LD_INT 0
38387: ST_TO_ADDR
// uc_nation := 0 ;
38388: LD_ADDR_OWVAR 21
38392: PUSH
38393: LD_INT 0
38395: ST_TO_ADDR
// hc_class := class_frog ;
38396: LD_ADDR_OWVAR 28
38400: PUSH
38401: LD_INT 19
38403: ST_TO_ADDR
// hc_gallery :=  ;
38404: LD_ADDR_OWVAR 33
38408: PUSH
38409: LD_STRING 
38411: ST_TO_ADDR
// end ;
38412: LD_VAR 0 1
38416: RET
// export function PrepareFish ( ) ; begin
38417: LD_INT 0
38419: PPUSH
// uc_side := 0 ;
38420: LD_ADDR_OWVAR 20
38424: PUSH
38425: LD_INT 0
38427: ST_TO_ADDR
// uc_nation := 0 ;
38428: LD_ADDR_OWVAR 21
38432: PUSH
38433: LD_INT 0
38435: ST_TO_ADDR
// hc_class := class_fish ;
38436: LD_ADDR_OWVAR 28
38440: PUSH
38441: LD_INT 20
38443: ST_TO_ADDR
// hc_gallery :=  ;
38444: LD_ADDR_OWVAR 33
38448: PUSH
38449: LD_STRING 
38451: ST_TO_ADDR
// end ;
38452: LD_VAR 0 1
38456: RET
// export function PrepareBird ( ) ; begin
38457: LD_INT 0
38459: PPUSH
// uc_side := 0 ;
38460: LD_ADDR_OWVAR 20
38464: PUSH
38465: LD_INT 0
38467: ST_TO_ADDR
// uc_nation := 0 ;
38468: LD_ADDR_OWVAR 21
38472: PUSH
38473: LD_INT 0
38475: ST_TO_ADDR
// hc_class := class_phororhacos ;
38476: LD_ADDR_OWVAR 28
38480: PUSH
38481: LD_INT 18
38483: ST_TO_ADDR
// hc_gallery :=  ;
38484: LD_ADDR_OWVAR 33
38488: PUSH
38489: LD_STRING 
38491: ST_TO_ADDR
// end ;
38492: LD_VAR 0 1
38496: RET
// export function PrepareHorse ( ) ; begin
38497: LD_INT 0
38499: PPUSH
// uc_side := 0 ;
38500: LD_ADDR_OWVAR 20
38504: PUSH
38505: LD_INT 0
38507: ST_TO_ADDR
// uc_nation := 0 ;
38508: LD_ADDR_OWVAR 21
38512: PUSH
38513: LD_INT 0
38515: ST_TO_ADDR
// hc_class := class_horse ;
38516: LD_ADDR_OWVAR 28
38520: PUSH
38521: LD_INT 21
38523: ST_TO_ADDR
// hc_gallery :=  ;
38524: LD_ADDR_OWVAR 33
38528: PUSH
38529: LD_STRING 
38531: ST_TO_ADDR
// end ;
38532: LD_VAR 0 1
38536: RET
// export function PrepareMastodont ( ) ; begin
38537: LD_INT 0
38539: PPUSH
// uc_side := 0 ;
38540: LD_ADDR_OWVAR 20
38544: PUSH
38545: LD_INT 0
38547: ST_TO_ADDR
// uc_nation := 0 ;
38548: LD_ADDR_OWVAR 21
38552: PUSH
38553: LD_INT 0
38555: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38556: LD_ADDR_OWVAR 37
38560: PUSH
38561: LD_INT 31
38563: ST_TO_ADDR
// vc_control := control_rider ;
38564: LD_ADDR_OWVAR 38
38568: PUSH
38569: LD_INT 4
38571: ST_TO_ADDR
// end ;
38572: LD_VAR 0 1
38576: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38577: LD_INT 0
38579: PPUSH
38580: PPUSH
38581: PPUSH
// uc_side = 0 ;
38582: LD_ADDR_OWVAR 20
38586: PUSH
38587: LD_INT 0
38589: ST_TO_ADDR
// uc_nation = 0 ;
38590: LD_ADDR_OWVAR 21
38594: PUSH
38595: LD_INT 0
38597: ST_TO_ADDR
// InitHc_All ( ) ;
38598: CALL_OW 584
// InitVc ;
38602: CALL_OW 20
// if mastodonts then
38606: LD_VAR 0 6
38610: IFFALSE 38677
// for i = 1 to mastodonts do
38612: LD_ADDR_VAR 0 11
38616: PUSH
38617: DOUBLE
38618: LD_INT 1
38620: DEC
38621: ST_TO_ADDR
38622: LD_VAR 0 6
38626: PUSH
38627: FOR_TO
38628: IFFALSE 38675
// begin vc_chassis := 31 ;
38630: LD_ADDR_OWVAR 37
38634: PUSH
38635: LD_INT 31
38637: ST_TO_ADDR
// vc_control := control_rider ;
38638: LD_ADDR_OWVAR 38
38642: PUSH
38643: LD_INT 4
38645: ST_TO_ADDR
// animal := CreateVehicle ;
38646: LD_ADDR_VAR 0 12
38650: PUSH
38651: CALL_OW 45
38655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38656: LD_VAR 0 12
38660: PPUSH
38661: LD_VAR 0 8
38665: PPUSH
38666: LD_INT 0
38668: PPUSH
38669: CALL 40805 0 3
// end ;
38673: GO 38627
38675: POP
38676: POP
// if horses then
38677: LD_VAR 0 5
38681: IFFALSE 38748
// for i = 1 to horses do
38683: LD_ADDR_VAR 0 11
38687: PUSH
38688: DOUBLE
38689: LD_INT 1
38691: DEC
38692: ST_TO_ADDR
38693: LD_VAR 0 5
38697: PUSH
38698: FOR_TO
38699: IFFALSE 38746
// begin hc_class := 21 ;
38701: LD_ADDR_OWVAR 28
38705: PUSH
38706: LD_INT 21
38708: ST_TO_ADDR
// hc_gallery :=  ;
38709: LD_ADDR_OWVAR 33
38713: PUSH
38714: LD_STRING 
38716: ST_TO_ADDR
// animal := CreateHuman ;
38717: LD_ADDR_VAR 0 12
38721: PUSH
38722: CALL_OW 44
38726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38727: LD_VAR 0 12
38731: PPUSH
38732: LD_VAR 0 8
38736: PPUSH
38737: LD_INT 0
38739: PPUSH
38740: CALL 40805 0 3
// end ;
38744: GO 38698
38746: POP
38747: POP
// if birds then
38748: LD_VAR 0 1
38752: IFFALSE 38819
// for i = 1 to birds do
38754: LD_ADDR_VAR 0 11
38758: PUSH
38759: DOUBLE
38760: LD_INT 1
38762: DEC
38763: ST_TO_ADDR
38764: LD_VAR 0 1
38768: PUSH
38769: FOR_TO
38770: IFFALSE 38817
// begin hc_class = 18 ;
38772: LD_ADDR_OWVAR 28
38776: PUSH
38777: LD_INT 18
38779: ST_TO_ADDR
// hc_gallery =  ;
38780: LD_ADDR_OWVAR 33
38784: PUSH
38785: LD_STRING 
38787: ST_TO_ADDR
// animal := CreateHuman ;
38788: LD_ADDR_VAR 0 12
38792: PUSH
38793: CALL_OW 44
38797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38798: LD_VAR 0 12
38802: PPUSH
38803: LD_VAR 0 8
38807: PPUSH
38808: LD_INT 0
38810: PPUSH
38811: CALL 40805 0 3
// end ;
38815: GO 38769
38817: POP
38818: POP
// if tigers then
38819: LD_VAR 0 2
38823: IFFALSE 38907
// for i = 1 to tigers do
38825: LD_ADDR_VAR 0 11
38829: PUSH
38830: DOUBLE
38831: LD_INT 1
38833: DEC
38834: ST_TO_ADDR
38835: LD_VAR 0 2
38839: PUSH
38840: FOR_TO
38841: IFFALSE 38905
// begin hc_class = class_tiger ;
38843: LD_ADDR_OWVAR 28
38847: PUSH
38848: LD_INT 14
38850: ST_TO_ADDR
// hc_gallery =  ;
38851: LD_ADDR_OWVAR 33
38855: PUSH
38856: LD_STRING 
38858: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38859: LD_ADDR_OWVAR 35
38863: PUSH
38864: LD_INT 7
38866: NEG
38867: PPUSH
38868: LD_INT 7
38870: PPUSH
38871: CALL_OW 12
38875: ST_TO_ADDR
// animal := CreateHuman ;
38876: LD_ADDR_VAR 0 12
38880: PUSH
38881: CALL_OW 44
38885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38886: LD_VAR 0 12
38890: PPUSH
38891: LD_VAR 0 8
38895: PPUSH
38896: LD_INT 0
38898: PPUSH
38899: CALL 40805 0 3
// end ;
38903: GO 38840
38905: POP
38906: POP
// if apemans then
38907: LD_VAR 0 3
38911: IFFALSE 39034
// for i = 1 to apemans do
38913: LD_ADDR_VAR 0 11
38917: PUSH
38918: DOUBLE
38919: LD_INT 1
38921: DEC
38922: ST_TO_ADDR
38923: LD_VAR 0 3
38927: PUSH
38928: FOR_TO
38929: IFFALSE 39032
// begin hc_class = class_apeman ;
38931: LD_ADDR_OWVAR 28
38935: PUSH
38936: LD_INT 12
38938: ST_TO_ADDR
// hc_gallery =  ;
38939: LD_ADDR_OWVAR 33
38943: PUSH
38944: LD_STRING 
38946: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38947: LD_ADDR_OWVAR 35
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PPUSH
38956: LD_INT 2
38958: PPUSH
38959: CALL_OW 12
38963: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38964: LD_ADDR_OWVAR 31
38968: PUSH
38969: LD_INT 1
38971: PPUSH
38972: LD_INT 3
38974: PPUSH
38975: CALL_OW 12
38979: PUSH
38980: LD_INT 1
38982: PPUSH
38983: LD_INT 3
38985: PPUSH
38986: CALL_OW 12
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// animal := CreateHuman ;
39003: LD_ADDR_VAR 0 12
39007: PUSH
39008: CALL_OW 44
39012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39013: LD_VAR 0 12
39017: PPUSH
39018: LD_VAR 0 8
39022: PPUSH
39023: LD_INT 0
39025: PPUSH
39026: CALL 40805 0 3
// end ;
39030: GO 38928
39032: POP
39033: POP
// if enchidnas then
39034: LD_VAR 0 4
39038: IFFALSE 39105
// for i = 1 to enchidnas do
39040: LD_ADDR_VAR 0 11
39044: PUSH
39045: DOUBLE
39046: LD_INT 1
39048: DEC
39049: ST_TO_ADDR
39050: LD_VAR 0 4
39054: PUSH
39055: FOR_TO
39056: IFFALSE 39103
// begin hc_class = 13 ;
39058: LD_ADDR_OWVAR 28
39062: PUSH
39063: LD_INT 13
39065: ST_TO_ADDR
// hc_gallery =  ;
39066: LD_ADDR_OWVAR 33
39070: PUSH
39071: LD_STRING 
39073: ST_TO_ADDR
// animal := CreateHuman ;
39074: LD_ADDR_VAR 0 12
39078: PUSH
39079: CALL_OW 44
39083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39084: LD_VAR 0 12
39088: PPUSH
39089: LD_VAR 0 8
39093: PPUSH
39094: LD_INT 0
39096: PPUSH
39097: CALL 40805 0 3
// end ;
39101: GO 39055
39103: POP
39104: POP
// if fishes then
39105: LD_VAR 0 7
39109: IFFALSE 39176
// for i = 1 to fishes do
39111: LD_ADDR_VAR 0 11
39115: PUSH
39116: DOUBLE
39117: LD_INT 1
39119: DEC
39120: ST_TO_ADDR
39121: LD_VAR 0 7
39125: PUSH
39126: FOR_TO
39127: IFFALSE 39174
// begin hc_class = 20 ;
39129: LD_ADDR_OWVAR 28
39133: PUSH
39134: LD_INT 20
39136: ST_TO_ADDR
// hc_gallery =  ;
39137: LD_ADDR_OWVAR 33
39141: PUSH
39142: LD_STRING 
39144: ST_TO_ADDR
// animal := CreateHuman ;
39145: LD_ADDR_VAR 0 12
39149: PUSH
39150: CALL_OW 44
39154: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39155: LD_VAR 0 12
39159: PPUSH
39160: LD_VAR 0 9
39164: PPUSH
39165: LD_INT 0
39167: PPUSH
39168: CALL 40805 0 3
// end ;
39172: GO 39126
39174: POP
39175: POP
// end ;
39176: LD_VAR 0 10
39180: RET
// export function WantHeal ( sci , unit ) ; begin
39181: LD_INT 0
39183: PPUSH
// if GetTaskList ( sci ) > 0 then
39184: LD_VAR 0 1
39188: PPUSH
39189: CALL_OW 437
39193: PUSH
39194: LD_INT 0
39196: GREATER
39197: IFFALSE 39267
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 437
39208: PUSH
39209: LD_INT 1
39211: ARRAY
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PUSH
39217: LD_STRING l
39219: EQUAL
39220: PUSH
39221: LD_VAR 0 1
39225: PPUSH
39226: CALL_OW 437
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: PUSH
39235: LD_INT 4
39237: ARRAY
39238: PUSH
39239: LD_VAR 0 2
39243: EQUAL
39244: AND
39245: IFFALSE 39257
// result := true else
39247: LD_ADDR_VAR 0 3
39251: PUSH
39252: LD_INT 1
39254: ST_TO_ADDR
39255: GO 39265
// result := false ;
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_INT 0
39264: ST_TO_ADDR
// end else
39265: GO 39275
// result := false ;
39267: LD_ADDR_VAR 0 3
39271: PUSH
39272: LD_INT 0
39274: ST_TO_ADDR
// end ;
39275: LD_VAR 0 3
39279: RET
// export function HealTarget ( sci ) ; begin
39280: LD_INT 0
39282: PPUSH
// if not sci then
39283: LD_VAR 0 1
39287: NOT
39288: IFFALSE 39292
// exit ;
39290: GO 39357
// result := 0 ;
39292: LD_ADDR_VAR 0 2
39296: PUSH
39297: LD_INT 0
39299: ST_TO_ADDR
// if GetTaskList ( sci ) then
39300: LD_VAR 0 1
39304: PPUSH
39305: CALL_OW 437
39309: IFFALSE 39357
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 437
39320: PUSH
39321: LD_INT 1
39323: ARRAY
39324: PUSH
39325: LD_INT 1
39327: ARRAY
39328: PUSH
39329: LD_STRING l
39331: EQUAL
39332: IFFALSE 39357
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39334: LD_ADDR_VAR 0 2
39338: PUSH
39339: LD_VAR 0 1
39343: PPUSH
39344: CALL_OW 437
39348: PUSH
39349: LD_INT 1
39351: ARRAY
39352: PUSH
39353: LD_INT 4
39355: ARRAY
39356: ST_TO_ADDR
// end ;
39357: LD_VAR 0 2
39361: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39362: LD_INT 0
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
// if not base_units then
39368: LD_VAR 0 1
39372: NOT
39373: IFFALSE 39377
// exit ;
39375: GO 39464
// result := false ;
39377: LD_ADDR_VAR 0 2
39381: PUSH
39382: LD_INT 0
39384: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39385: LD_ADDR_VAR 0 5
39389: PUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: LD_INT 21
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PPUSH
39405: CALL_OW 72
39409: ST_TO_ADDR
// if not tmp then
39410: LD_VAR 0 5
39414: NOT
39415: IFFALSE 39419
// exit ;
39417: GO 39464
// for i in tmp do
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_VAR 0 5
39428: PUSH
39429: FOR_IN
39430: IFFALSE 39462
// begin result := EnemyInRange ( i , 22 ) ;
39432: LD_ADDR_VAR 0 2
39436: PUSH
39437: LD_VAR 0 3
39441: PPUSH
39442: LD_INT 22
39444: PPUSH
39445: CALL 37051 0 2
39449: ST_TO_ADDR
// if result then
39450: LD_VAR 0 2
39454: IFFALSE 39460
// exit ;
39456: POP
39457: POP
39458: GO 39464
// end ;
39460: GO 39429
39462: POP
39463: POP
// end ;
39464: LD_VAR 0 2
39468: RET
// export function FilterByTag ( units , tag ) ; begin
39469: LD_INT 0
39471: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39472: LD_ADDR_VAR 0 3
39476: PUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: LD_INT 120
39484: PUSH
39485: LD_VAR 0 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PPUSH
39494: CALL_OW 72
39498: ST_TO_ADDR
// end ;
39499: LD_VAR 0 3
39503: RET
// export function IsDriver ( un ) ; begin
39504: LD_INT 0
39506: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39507: LD_ADDR_VAR 0 2
39511: PUSH
39512: LD_VAR 0 1
39516: PUSH
39517: LD_INT 55
39519: PUSH
39520: EMPTY
39521: LIST
39522: PPUSH
39523: CALL_OW 69
39527: IN
39528: ST_TO_ADDR
// end ;
39529: LD_VAR 0 2
39533: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39534: LD_INT 0
39536: PPUSH
39537: PPUSH
// list := [ ] ;
39538: LD_ADDR_VAR 0 5
39542: PUSH
39543: EMPTY
39544: ST_TO_ADDR
// case d of 0 :
39545: LD_VAR 0 3
39549: PUSH
39550: LD_INT 0
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39691
39558: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39559: LD_ADDR_VAR 0 5
39563: PUSH
39564: LD_VAR 0 1
39568: PUSH
39569: LD_INT 4
39571: MINUS
39572: PUSH
39573: LD_VAR 0 2
39577: PUSH
39578: LD_INT 4
39580: MINUS
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: LIST
39589: PUSH
39590: LD_VAR 0 1
39594: PUSH
39595: LD_INT 3
39597: MINUS
39598: PUSH
39599: LD_VAR 0 2
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: LIST
39611: PUSH
39612: LD_VAR 0 1
39616: PUSH
39617: LD_INT 4
39619: PLUS
39620: PUSH
39621: LD_VAR 0 2
39625: PUSH
39626: LD_INT 4
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: LIST
39633: PUSH
39634: LD_VAR 0 1
39638: PUSH
39639: LD_INT 3
39641: PLUS
39642: PUSH
39643: LD_VAR 0 2
39647: PUSH
39648: LD_INT 3
39650: PLUS
39651: PUSH
39652: LD_INT 5
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: PUSH
39660: LD_VAR 0 1
39664: PUSH
39665: LD_VAR 0 2
39669: PUSH
39670: LD_INT 4
39672: PLUS
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: ST_TO_ADDR
// end ; 1 :
39689: GO 40389
39691: LD_INT 1
39693: DOUBLE
39694: EQUAL
39695: IFTRUE 39699
39697: GO 39832
39699: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39700: LD_ADDR_VAR 0 5
39704: PUSH
39705: LD_VAR 0 1
39709: PUSH
39710: LD_VAR 0 2
39714: PUSH
39715: LD_INT 4
39717: MINUS
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: LIST
39726: PUSH
39727: LD_VAR 0 1
39731: PUSH
39732: LD_INT 3
39734: MINUS
39735: PUSH
39736: LD_VAR 0 2
39740: PUSH
39741: LD_INT 3
39743: MINUS
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: PUSH
39753: LD_VAR 0 1
39757: PUSH
39758: LD_INT 4
39760: MINUS
39761: PUSH
39762: LD_VAR 0 2
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: PUSH
39775: LD_VAR 0 1
39779: PUSH
39780: LD_VAR 0 2
39784: PUSH
39785: LD_INT 3
39787: PLUS
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: PUSH
39797: LD_VAR 0 1
39801: PUSH
39802: LD_INT 4
39804: PLUS
39805: PUSH
39806: LD_VAR 0 2
39810: PUSH
39811: LD_INT 4
39813: PLUS
39814: PUSH
39815: LD_INT 5
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: ST_TO_ADDR
// end ; 2 :
39830: GO 40389
39832: LD_INT 2
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 39969
39840: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39841: LD_ADDR_VAR 0 5
39845: PUSH
39846: LD_VAR 0 1
39850: PUSH
39851: LD_VAR 0 2
39855: PUSH
39856: LD_INT 3
39858: MINUS
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: PUSH
39868: LD_VAR 0 1
39872: PUSH
39873: LD_INT 4
39875: PLUS
39876: PUSH
39877: LD_VAR 0 2
39881: PUSH
39882: LD_INT 4
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: PUSH
39890: LD_VAR 0 1
39894: PUSH
39895: LD_VAR 0 2
39899: PUSH
39900: LD_INT 4
39902: PLUS
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: PUSH
39912: LD_VAR 0 1
39916: PUSH
39917: LD_INT 3
39919: MINUS
39920: PUSH
39921: LD_VAR 0 2
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: PUSH
39934: LD_VAR 0 1
39938: PUSH
39939: LD_INT 4
39941: MINUS
39942: PUSH
39943: LD_VAR 0 2
39947: PUSH
39948: LD_INT 4
39950: MINUS
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// end ; 3 :
39967: GO 40389
39969: LD_INT 3
39971: DOUBLE
39972: EQUAL
39973: IFTRUE 39977
39975: GO 40110
39977: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39978: LD_ADDR_VAR 0 5
39982: PUSH
39983: LD_VAR 0 1
39987: PUSH
39988: LD_INT 3
39990: PLUS
39991: PUSH
39992: LD_VAR 0 2
39996: PUSH
39997: LD_INT 4
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: PUSH
40005: LD_VAR 0 1
40009: PUSH
40010: LD_INT 4
40012: PLUS
40013: PUSH
40014: LD_VAR 0 2
40018: PUSH
40019: LD_INT 4
40021: PLUS
40022: PUSH
40023: LD_INT 5
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: PUSH
40031: LD_VAR 0 1
40035: PUSH
40036: LD_INT 4
40038: MINUS
40039: PUSH
40040: LD_VAR 0 2
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: LD_VAR 0 1
40057: PUSH
40058: LD_VAR 0 2
40062: PUSH
40063: LD_INT 4
40065: MINUS
40066: PUSH
40067: LD_INT 3
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: PUSH
40075: LD_VAR 0 1
40079: PUSH
40080: LD_INT 3
40082: MINUS
40083: PUSH
40084: LD_VAR 0 2
40088: PUSH
40089: LD_INT 3
40091: MINUS
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
// end ; 4 :
40108: GO 40389
40110: LD_INT 4
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 40251
40118: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40119: LD_ADDR_VAR 0 5
40123: PUSH
40124: LD_VAR 0 1
40128: PUSH
40129: LD_VAR 0 2
40133: PUSH
40134: LD_INT 4
40136: PLUS
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: PUSH
40146: LD_VAR 0 1
40150: PUSH
40151: LD_INT 3
40153: PLUS
40154: PUSH
40155: LD_VAR 0 2
40159: PUSH
40160: LD_INT 3
40162: PLUS
40163: PUSH
40164: LD_INT 5
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PUSH
40172: LD_VAR 0 1
40176: PUSH
40177: LD_INT 4
40179: PLUS
40180: PUSH
40181: LD_VAR 0 2
40185: PUSH
40186: LD_INT 4
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: PUSH
40194: LD_VAR 0 1
40198: PUSH
40199: LD_VAR 0 2
40203: PUSH
40204: LD_INT 3
40206: MINUS
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: PUSH
40216: LD_VAR 0 1
40220: PUSH
40221: LD_INT 4
40223: MINUS
40224: PUSH
40225: LD_VAR 0 2
40229: PUSH
40230: LD_INT 4
40232: MINUS
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: LIST
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// end ; 5 :
40249: GO 40389
40251: LD_INT 5
40253: DOUBLE
40254: EQUAL
40255: IFTRUE 40259
40257: GO 40388
40259: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40260: LD_ADDR_VAR 0 5
40264: PUSH
40265: LD_VAR 0 1
40269: PUSH
40270: LD_INT 4
40272: MINUS
40273: PUSH
40274: LD_VAR 0 2
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: PUSH
40287: LD_VAR 0 1
40291: PUSH
40292: LD_VAR 0 2
40296: PUSH
40297: LD_INT 4
40299: MINUS
40300: PUSH
40301: LD_INT 3
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: LIST
40308: PUSH
40309: LD_VAR 0 1
40313: PUSH
40314: LD_INT 4
40316: PLUS
40317: PUSH
40318: LD_VAR 0 2
40322: PUSH
40323: LD_INT 4
40325: PLUS
40326: PUSH
40327: LD_INT 5
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: PUSH
40335: LD_VAR 0 1
40339: PUSH
40340: LD_INT 3
40342: PLUS
40343: PUSH
40344: LD_VAR 0 2
40348: PUSH
40349: LD_INT 4
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: PUSH
40357: LD_VAR 0 1
40361: PUSH
40362: LD_VAR 0 2
40366: PUSH
40367: LD_INT 3
40369: PLUS
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: ST_TO_ADDR
// end ; end ;
40386: GO 40389
40388: POP
// result := list ;
40389: LD_ADDR_VAR 0 4
40393: PUSH
40394: LD_VAR 0 5
40398: ST_TO_ADDR
// end ;
40399: LD_VAR 0 4
40403: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40404: LD_INT 0
40406: PPUSH
40407: PPUSH
40408: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40409: LD_VAR 0 1
40413: NOT
40414: PUSH
40415: LD_VAR 0 2
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: LD_INT 4
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: IN
40438: NOT
40439: OR
40440: IFFALSE 40444
// exit ;
40442: GO 40527
// tmp := [ ] ;
40444: LD_ADDR_VAR 0 5
40448: PUSH
40449: EMPTY
40450: ST_TO_ADDR
// for i in units do
40451: LD_ADDR_VAR 0 4
40455: PUSH
40456: LD_VAR 0 1
40460: PUSH
40461: FOR_IN
40462: IFFALSE 40496
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40464: LD_ADDR_VAR 0 5
40468: PUSH
40469: LD_VAR 0 5
40473: PPUSH
40474: LD_VAR 0 4
40478: PPUSH
40479: LD_VAR 0 2
40483: PPUSH
40484: CALL_OW 259
40488: PPUSH
40489: CALL 41888 0 2
40493: ST_TO_ADDR
40494: GO 40461
40496: POP
40497: POP
// if not tmp then
40498: LD_VAR 0 5
40502: NOT
40503: IFFALSE 40507
// exit ;
40505: GO 40527
// result := SortListByListDesc ( units , tmp ) ;
40507: LD_ADDR_VAR 0 3
40511: PUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: LD_VAR 0 5
40521: PPUSH
40522: CALL_OW 77
40526: ST_TO_ADDR
// end ;
40527: LD_VAR 0 3
40531: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40532: LD_INT 0
40534: PPUSH
40535: PPUSH
40536: PPUSH
// result := false ;
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_INT 0
40544: ST_TO_ADDR
// if not building then
40545: LD_VAR 0 2
40549: NOT
40550: IFFALSE 40554
// exit ;
40552: GO 40692
// x := GetX ( building ) ;
40554: LD_ADDR_VAR 0 4
40558: PUSH
40559: LD_VAR 0 2
40563: PPUSH
40564: CALL_OW 250
40568: ST_TO_ADDR
// y := GetY ( building ) ;
40569: LD_ADDR_VAR 0 5
40573: PUSH
40574: LD_VAR 0 2
40578: PPUSH
40579: CALL_OW 251
40583: ST_TO_ADDR
// if not x or not y then
40584: LD_VAR 0 4
40588: NOT
40589: PUSH
40590: LD_VAR 0 5
40594: NOT
40595: OR
40596: IFFALSE 40600
// exit ;
40598: GO 40692
// if GetTaskList ( unit ) then
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 437
40609: IFFALSE 40692
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40611: LD_STRING e
40613: PUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL_OW 437
40623: PUSH
40624: LD_INT 1
40626: ARRAY
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: EQUAL
40632: PUSH
40633: LD_VAR 0 4
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 437
40647: PUSH
40648: LD_INT 1
40650: ARRAY
40651: PUSH
40652: LD_INT 2
40654: ARRAY
40655: EQUAL
40656: AND
40657: PUSH
40658: LD_VAR 0 5
40662: PUSH
40663: LD_VAR 0 1
40667: PPUSH
40668: CALL_OW 437
40672: PUSH
40673: LD_INT 1
40675: ARRAY
40676: PUSH
40677: LD_INT 3
40679: ARRAY
40680: EQUAL
40681: AND
40682: IFFALSE 40692
// result := true end ;
40684: LD_ADDR_VAR 0 3
40688: PUSH
40689: LD_INT 1
40691: ST_TO_ADDR
// end ;
40692: LD_VAR 0 3
40696: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40697: LD_INT 0
40699: PPUSH
// result := false ;
40700: LD_ADDR_VAR 0 4
40704: PUSH
40705: LD_INT 0
40707: ST_TO_ADDR
// if GetTaskList ( unit ) then
40708: LD_VAR 0 1
40712: PPUSH
40713: CALL_OW 437
40717: IFFALSE 40800
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40719: LD_STRING M
40721: PUSH
40722: LD_VAR 0 1
40726: PPUSH
40727: CALL_OW 437
40731: PUSH
40732: LD_INT 1
40734: ARRAY
40735: PUSH
40736: LD_INT 1
40738: ARRAY
40739: EQUAL
40740: PUSH
40741: LD_VAR 0 2
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 437
40755: PUSH
40756: LD_INT 1
40758: ARRAY
40759: PUSH
40760: LD_INT 2
40762: ARRAY
40763: EQUAL
40764: AND
40765: PUSH
40766: LD_VAR 0 3
40770: PUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 437
40780: PUSH
40781: LD_INT 1
40783: ARRAY
40784: PUSH
40785: LD_INT 3
40787: ARRAY
40788: EQUAL
40789: AND
40790: IFFALSE 40800
// result := true ;
40792: LD_ADDR_VAR 0 4
40796: PUSH
40797: LD_INT 1
40799: ST_TO_ADDR
// end ; end ;
40800: LD_VAR 0 4
40804: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40805: LD_INT 0
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
// if not unit or not area then
40811: LD_VAR 0 1
40815: NOT
40816: PUSH
40817: LD_VAR 0 2
40821: NOT
40822: OR
40823: IFFALSE 40827
// exit ;
40825: GO 40991
// tmp := AreaToList ( area , i ) ;
40827: LD_ADDR_VAR 0 6
40831: PUSH
40832: LD_VAR 0 2
40836: PPUSH
40837: LD_VAR 0 5
40841: PPUSH
40842: CALL_OW 517
40846: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40847: LD_ADDR_VAR 0 5
40851: PUSH
40852: DOUBLE
40853: LD_INT 1
40855: DEC
40856: ST_TO_ADDR
40857: LD_VAR 0 6
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PUSH
40866: FOR_TO
40867: IFFALSE 40989
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40869: LD_ADDR_VAR 0 7
40873: PUSH
40874: LD_VAR 0 6
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PUSH
40883: LD_VAR 0 5
40887: ARRAY
40888: PUSH
40889: LD_VAR 0 6
40893: PUSH
40894: LD_INT 2
40896: ARRAY
40897: PUSH
40898: LD_VAR 0 5
40902: ARRAY
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40908: LD_VAR 0 7
40912: PUSH
40913: LD_INT 1
40915: ARRAY
40916: PPUSH
40917: LD_VAR 0 7
40921: PUSH
40922: LD_INT 2
40924: ARRAY
40925: PPUSH
40926: CALL_OW 428
40930: PUSH
40931: LD_INT 0
40933: EQUAL
40934: IFFALSE 40987
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40936: LD_VAR 0 1
40940: PPUSH
40941: LD_VAR 0 7
40945: PUSH
40946: LD_INT 1
40948: ARRAY
40949: PPUSH
40950: LD_VAR 0 7
40954: PUSH
40955: LD_INT 2
40957: ARRAY
40958: PPUSH
40959: LD_VAR 0 3
40963: PPUSH
40964: CALL_OW 48
// result := IsPlaced ( unit ) ;
40968: LD_ADDR_VAR 0 4
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 305
40982: ST_TO_ADDR
// exit ;
40983: POP
40984: POP
40985: GO 40991
// end ; end ;
40987: GO 40866
40989: POP
40990: POP
// end ;
40991: LD_VAR 0 4
40995: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40996: LD_INT 0
40998: PPUSH
40999: PPUSH
41000: PPUSH
// if not side or side > 8 then
41001: LD_VAR 0 1
41005: NOT
41006: PUSH
41007: LD_VAR 0 1
41011: PUSH
41012: LD_INT 8
41014: GREATER
41015: OR
41016: IFFALSE 41020
// exit ;
41018: GO 41207
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41020: LD_ADDR_VAR 0 4
41024: PUSH
41025: LD_INT 22
41027: PUSH
41028: LD_VAR 0 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 21
41039: PUSH
41040: LD_INT 3
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PPUSH
41051: CALL_OW 69
41055: ST_TO_ADDR
// if not tmp then
41056: LD_VAR 0 4
41060: NOT
41061: IFFALSE 41065
// exit ;
41063: GO 41207
// enable_addtolog := true ;
41065: LD_ADDR_OWVAR 81
41069: PUSH
41070: LD_INT 1
41072: ST_TO_ADDR
// AddToLog ( [ ) ;
41073: LD_STRING [
41075: PPUSH
41076: CALL_OW 561
// for i in tmp do
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: LD_VAR 0 4
41089: PUSH
41090: FOR_IN
41091: IFFALSE 41198
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41093: LD_STRING [
41095: PUSH
41096: LD_VAR 0 3
41100: PPUSH
41101: CALL_OW 266
41105: STR
41106: PUSH
41107: LD_STRING , 
41109: STR
41110: PUSH
41111: LD_VAR 0 3
41115: PPUSH
41116: CALL_OW 250
41120: STR
41121: PUSH
41122: LD_STRING , 
41124: STR
41125: PUSH
41126: LD_VAR 0 3
41130: PPUSH
41131: CALL_OW 251
41135: STR
41136: PUSH
41137: LD_STRING , 
41139: STR
41140: PUSH
41141: LD_VAR 0 3
41145: PPUSH
41146: CALL_OW 254
41150: STR
41151: PUSH
41152: LD_STRING , 
41154: STR
41155: PUSH
41156: LD_VAR 0 3
41160: PPUSH
41161: LD_INT 1
41163: PPUSH
41164: CALL_OW 268
41168: STR
41169: PUSH
41170: LD_STRING , 
41172: STR
41173: PUSH
41174: LD_VAR 0 3
41178: PPUSH
41179: LD_INT 2
41181: PPUSH
41182: CALL_OW 268
41186: STR
41187: PUSH
41188: LD_STRING ],
41190: STR
41191: PPUSH
41192: CALL_OW 561
// end ;
41196: GO 41090
41198: POP
41199: POP
// AddToLog ( ]; ) ;
41200: LD_STRING ];
41202: PPUSH
41203: CALL_OW 561
// end ;
41207: LD_VAR 0 2
41211: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41212: LD_INT 0
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
// if not area or not rate or not max then
41219: LD_VAR 0 1
41223: NOT
41224: PUSH
41225: LD_VAR 0 2
41229: NOT
41230: OR
41231: PUSH
41232: LD_VAR 0 4
41236: NOT
41237: OR
41238: IFFALSE 41242
// exit ;
41240: GO 41431
// while 1 do
41242: LD_INT 1
41244: IFFALSE 41431
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41246: LD_ADDR_VAR 0 9
41250: PUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: LD_INT 1
41258: PPUSH
41259: CALL_OW 287
41263: PUSH
41264: LD_INT 10
41266: MUL
41267: ST_TO_ADDR
// r := rate / 10 ;
41268: LD_ADDR_VAR 0 7
41272: PUSH
41273: LD_VAR 0 2
41277: PUSH
41278: LD_INT 10
41280: DIVREAL
41281: ST_TO_ADDR
// time := 1 1$00 ;
41282: LD_ADDR_VAR 0 8
41286: PUSH
41287: LD_INT 2100
41289: ST_TO_ADDR
// if amount < min then
41290: LD_VAR 0 9
41294: PUSH
41295: LD_VAR 0 3
41299: LESS
41300: IFFALSE 41318
// r := r * 2 else
41302: LD_ADDR_VAR 0 7
41306: PUSH
41307: LD_VAR 0 7
41311: PUSH
41312: LD_INT 2
41314: MUL
41315: ST_TO_ADDR
41316: GO 41344
// if amount > max then
41318: LD_VAR 0 9
41322: PUSH
41323: LD_VAR 0 4
41327: GREATER
41328: IFFALSE 41344
// r := r / 2 ;
41330: LD_ADDR_VAR 0 7
41334: PUSH
41335: LD_VAR 0 7
41339: PUSH
41340: LD_INT 2
41342: DIVREAL
41343: ST_TO_ADDR
// time := time / r ;
41344: LD_ADDR_VAR 0 8
41348: PUSH
41349: LD_VAR 0 8
41353: PUSH
41354: LD_VAR 0 7
41358: DIVREAL
41359: ST_TO_ADDR
// if time < 0 then
41360: LD_VAR 0 8
41364: PUSH
41365: LD_INT 0
41367: LESS
41368: IFFALSE 41385
// time := time * - 1 ;
41370: LD_ADDR_VAR 0 8
41374: PUSH
41375: LD_VAR 0 8
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: MUL
41384: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41385: LD_VAR 0 8
41389: PUSH
41390: LD_INT 35
41392: PPUSH
41393: LD_INT 875
41395: PPUSH
41396: CALL_OW 12
41400: PLUS
41401: PPUSH
41402: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41406: LD_INT 1
41408: PPUSH
41409: LD_INT 5
41411: PPUSH
41412: CALL_OW 12
41416: PPUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: LD_INT 1
41424: PPUSH
41425: CALL_OW 55
// end ;
41429: GO 41242
// end ;
41431: LD_VAR 0 5
41435: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41436: LD_INT 0
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
// if not turrets or not factories then
41446: LD_VAR 0 1
41450: NOT
41451: PUSH
41452: LD_VAR 0 2
41456: NOT
41457: OR
41458: IFFALSE 41462
// exit ;
41460: GO 41769
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41462: LD_ADDR_VAR 0 10
41466: PUSH
41467: LD_INT 5
41469: PUSH
41470: LD_INT 6
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: LD_INT 4
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: LD_INT 5
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 24
41504: PUSH
41505: LD_INT 25
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 23
41514: PUSH
41515: LD_INT 27
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 42
41528: PUSH
41529: LD_INT 43
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 44
41538: PUSH
41539: LD_INT 46
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 45
41548: PUSH
41549: LD_INT 47
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: ST_TO_ADDR
// result := [ ] ;
41566: LD_ADDR_VAR 0 3
41570: PUSH
41571: EMPTY
41572: ST_TO_ADDR
// for i in turrets do
41573: LD_ADDR_VAR 0 4
41577: PUSH
41578: LD_VAR 0 1
41582: PUSH
41583: FOR_IN
41584: IFFALSE 41767
// begin nat := GetNation ( i ) ;
41586: LD_ADDR_VAR 0 7
41590: PUSH
41591: LD_VAR 0 4
41595: PPUSH
41596: CALL_OW 248
41600: ST_TO_ADDR
// weapon := 0 ;
41601: LD_ADDR_VAR 0 8
41605: PUSH
41606: LD_INT 0
41608: ST_TO_ADDR
// if not nat then
41609: LD_VAR 0 7
41613: NOT
41614: IFFALSE 41618
// continue ;
41616: GO 41583
// for j in list [ nat ] do
41618: LD_ADDR_VAR 0 5
41622: PUSH
41623: LD_VAR 0 10
41627: PUSH
41628: LD_VAR 0 7
41632: ARRAY
41633: PUSH
41634: FOR_IN
41635: IFFALSE 41676
// if GetBWeapon ( i ) = j [ 1 ] then
41637: LD_VAR 0 4
41641: PPUSH
41642: CALL_OW 269
41646: PUSH
41647: LD_VAR 0 5
41651: PUSH
41652: LD_INT 1
41654: ARRAY
41655: EQUAL
41656: IFFALSE 41674
// begin weapon := j [ 2 ] ;
41658: LD_ADDR_VAR 0 8
41662: PUSH
41663: LD_VAR 0 5
41667: PUSH
41668: LD_INT 2
41670: ARRAY
41671: ST_TO_ADDR
// break ;
41672: GO 41676
// end ;
41674: GO 41634
41676: POP
41677: POP
// if not weapon then
41678: LD_VAR 0 8
41682: NOT
41683: IFFALSE 41687
// continue ;
41685: GO 41583
// for k in factories do
41687: LD_ADDR_VAR 0 6
41691: PUSH
41692: LD_VAR 0 2
41696: PUSH
41697: FOR_IN
41698: IFFALSE 41763
// begin weapons := AvailableWeaponList ( k ) ;
41700: LD_ADDR_VAR 0 9
41704: PUSH
41705: LD_VAR 0 6
41709: PPUSH
41710: CALL_OW 478
41714: ST_TO_ADDR
// if not weapons then
41715: LD_VAR 0 9
41719: NOT
41720: IFFALSE 41724
// continue ;
41722: GO 41697
// if weapon in weapons then
41724: LD_VAR 0 8
41728: PUSH
41729: LD_VAR 0 9
41733: IN
41734: IFFALSE 41761
// begin result := [ i , weapon ] ;
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_VAR 0 4
41745: PUSH
41746: LD_VAR 0 8
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// exit ;
41755: POP
41756: POP
41757: POP
41758: POP
41759: GO 41769
// end ; end ;
41761: GO 41697
41763: POP
41764: POP
// end ;
41765: GO 41583
41767: POP
41768: POP
// end ;
41769: LD_VAR 0 3
41773: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41774: LD_INT 0
41776: PPUSH
// if not side or side > 8 then
41777: LD_VAR 0 3
41781: NOT
41782: PUSH
41783: LD_VAR 0 3
41787: PUSH
41788: LD_INT 8
41790: GREATER
41791: OR
41792: IFFALSE 41796
// exit ;
41794: GO 41855
// if not range then
41796: LD_VAR 0 4
41800: NOT
41801: IFFALSE 41812
// range := - 12 ;
41803: LD_ADDR_VAR 0 4
41807: PUSH
41808: LD_INT 12
41810: NEG
41811: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41812: LD_VAR 0 1
41816: PPUSH
41817: LD_VAR 0 2
41821: PPUSH
41822: LD_VAR 0 3
41826: PPUSH
41827: LD_VAR 0 4
41831: PPUSH
41832: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41836: LD_VAR 0 1
41840: PPUSH
41841: LD_VAR 0 2
41845: PPUSH
41846: LD_VAR 0 3
41850: PPUSH
41851: CALL_OW 331
// end ;
41855: LD_VAR 0 5
41859: RET
// export function Video ( mode ) ; begin
41860: LD_INT 0
41862: PPUSH
// ingame_video = mode ;
41863: LD_ADDR_OWVAR 52
41867: PUSH
41868: LD_VAR 0 1
41872: ST_TO_ADDR
// interface_hidden = mode ;
41873: LD_ADDR_OWVAR 54
41877: PUSH
41878: LD_VAR 0 1
41882: ST_TO_ADDR
// end ;
41883: LD_VAR 0 2
41887: RET
// export function Join ( array , element ) ; begin
41888: LD_INT 0
41890: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: LD_VAR 0 1
41905: PUSH
41906: LD_INT 1
41908: PLUS
41909: PPUSH
41910: LD_VAR 0 2
41914: PPUSH
41915: CALL_OW 1
41919: ST_TO_ADDR
// end ;
41920: LD_VAR 0 3
41924: RET
// export function JoinUnion ( array , element ) ; begin
41925: LD_INT 0
41927: PPUSH
// result := array union element ;
41928: LD_ADDR_VAR 0 3
41932: PUSH
41933: LD_VAR 0 1
41937: PUSH
41938: LD_VAR 0 2
41942: UNION
41943: ST_TO_ADDR
// end ;
41944: LD_VAR 0 3
41948: RET
// export function GetBehemoths ( side ) ; begin
41949: LD_INT 0
41951: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41952: LD_ADDR_VAR 0 2
41956: PUSH
41957: LD_INT 22
41959: PUSH
41960: LD_VAR 0 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 31
41971: PUSH
41972: LD_INT 25
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PPUSH
41983: CALL_OW 69
41987: ST_TO_ADDR
// end ;
41988: LD_VAR 0 2
41992: RET
// export function Shuffle ( array ) ; var i , index ; begin
41993: LD_INT 0
41995: PPUSH
41996: PPUSH
41997: PPUSH
// result := [ ] ;
41998: LD_ADDR_VAR 0 2
42002: PUSH
42003: EMPTY
42004: ST_TO_ADDR
// if not array then
42005: LD_VAR 0 1
42009: NOT
42010: IFFALSE 42014
// exit ;
42012: GO 42113
// Randomize ;
42014: CALL_OW 10
// for i = array downto 1 do
42018: LD_ADDR_VAR 0 3
42022: PUSH
42023: DOUBLE
42024: LD_VAR 0 1
42028: INC
42029: ST_TO_ADDR
42030: LD_INT 1
42032: PUSH
42033: FOR_DOWNTO
42034: IFFALSE 42111
// begin index := rand ( 1 , array ) ;
42036: LD_ADDR_VAR 0 4
42040: PUSH
42041: LD_INT 1
42043: PPUSH
42044: LD_VAR 0 1
42048: PPUSH
42049: CALL_OW 12
42053: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42054: LD_ADDR_VAR 0 2
42058: PUSH
42059: LD_VAR 0 2
42063: PPUSH
42064: LD_VAR 0 2
42068: PUSH
42069: LD_INT 1
42071: PLUS
42072: PPUSH
42073: LD_VAR 0 1
42077: PUSH
42078: LD_VAR 0 4
42082: ARRAY
42083: PPUSH
42084: CALL_OW 2
42088: ST_TO_ADDR
// array := Delete ( array , index ) ;
42089: LD_ADDR_VAR 0 1
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: LD_VAR 0 4
42103: PPUSH
42104: CALL_OW 3
42108: ST_TO_ADDR
// end ;
42109: GO 42033
42111: POP
42112: POP
// end ;
42113: LD_VAR 0 2
42117: RET
// export function GetBaseMaterials ( base ) ; begin
42118: LD_INT 0
42120: PPUSH
// result := [ 0 , 0 , 0 ] ;
42121: LD_ADDR_VAR 0 2
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// if not base then
42140: LD_VAR 0 1
42144: NOT
42145: IFFALSE 42149
// exit ;
42147: GO 42198
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42149: LD_ADDR_VAR 0 2
42153: PUSH
42154: LD_VAR 0 1
42158: PPUSH
42159: LD_INT 1
42161: PPUSH
42162: CALL_OW 275
42166: PUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: LD_INT 2
42174: PPUSH
42175: CALL_OW 275
42179: PUSH
42180: LD_VAR 0 1
42184: PPUSH
42185: LD_INT 3
42187: PPUSH
42188: CALL_OW 275
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// end ;
42198: LD_VAR 0 2
42202: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42203: LD_INT 0
42205: PPUSH
42206: PPUSH
// result := array ;
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_VAR 0 1
42216: ST_TO_ADDR
// if size >= result then
42217: LD_VAR 0 2
42221: PUSH
42222: LD_VAR 0 3
42226: GREATEREQUAL
42227: IFFALSE 42231
// exit ;
42229: GO 42281
// if size then
42231: LD_VAR 0 2
42235: IFFALSE 42281
// for i := array downto size do
42237: LD_ADDR_VAR 0 4
42241: PUSH
42242: DOUBLE
42243: LD_VAR 0 1
42247: INC
42248: ST_TO_ADDR
42249: LD_VAR 0 2
42253: PUSH
42254: FOR_DOWNTO
42255: IFFALSE 42279
// result := Delete ( result , result ) ;
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_VAR 0 3
42266: PPUSH
42267: LD_VAR 0 3
42271: PPUSH
42272: CALL_OW 3
42276: ST_TO_ADDR
42277: GO 42254
42279: POP
42280: POP
// end ;
42281: LD_VAR 0 3
42285: RET
// export function ComExit ( unit ) ; var tmp ; begin
42286: LD_INT 0
42288: PPUSH
42289: PPUSH
// if not IsInUnit ( unit ) then
42290: LD_VAR 0 1
42294: PPUSH
42295: CALL_OW 310
42299: NOT
42300: IFFALSE 42304
// exit ;
42302: GO 42364
// tmp := IsInUnit ( unit ) ;
42304: LD_ADDR_VAR 0 3
42308: PUSH
42309: LD_VAR 0 1
42313: PPUSH
42314: CALL_OW 310
42318: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42319: LD_VAR 0 3
42323: PPUSH
42324: CALL_OW 247
42328: PUSH
42329: LD_INT 2
42331: EQUAL
42332: IFFALSE 42345
// ComExitVehicle ( unit ) else
42334: LD_VAR 0 1
42338: PPUSH
42339: CALL_OW 121
42343: GO 42354
// ComExitBuilding ( unit ) ;
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 122
// result := tmp ;
42354: LD_ADDR_VAR 0 2
42358: PUSH
42359: LD_VAR 0 3
42363: ST_TO_ADDR
// end ;
42364: LD_VAR 0 2
42368: RET
// export function ComExitAll ( units ) ; var i ; begin
42369: LD_INT 0
42371: PPUSH
42372: PPUSH
// if not units then
42373: LD_VAR 0 1
42377: NOT
42378: IFFALSE 42382
// exit ;
42380: GO 42408
// for i in units do
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_VAR 0 1
42391: PUSH
42392: FOR_IN
42393: IFFALSE 42406
// ComExit ( i ) ;
42395: LD_VAR 0 3
42399: PPUSH
42400: CALL 42286 0 1
42404: GO 42392
42406: POP
42407: POP
// end ;
42408: LD_VAR 0 2
42412: RET
// export function ResetHc ; begin
42413: LD_INT 0
42415: PPUSH
// InitHc ;
42416: CALL_OW 19
// hc_importance := 0 ;
42420: LD_ADDR_OWVAR 32
42424: PUSH
42425: LD_INT 0
42427: ST_TO_ADDR
// end ;
42428: LD_VAR 0 1
42432: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42433: LD_INT 0
42435: PPUSH
42436: PPUSH
42437: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42438: LD_ADDR_VAR 0 6
42442: PUSH
42443: LD_VAR 0 1
42447: PUSH
42448: LD_VAR 0 3
42452: PLUS
42453: PUSH
42454: LD_INT 2
42456: DIV
42457: ST_TO_ADDR
// if _x < 0 then
42458: LD_VAR 0 6
42462: PUSH
42463: LD_INT 0
42465: LESS
42466: IFFALSE 42483
// _x := _x * - 1 ;
42468: LD_ADDR_VAR 0 6
42472: PUSH
42473: LD_VAR 0 6
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: MUL
42482: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42483: LD_ADDR_VAR 0 7
42487: PUSH
42488: LD_VAR 0 2
42492: PUSH
42493: LD_VAR 0 4
42497: PLUS
42498: PUSH
42499: LD_INT 2
42501: DIV
42502: ST_TO_ADDR
// if _y < 0 then
42503: LD_VAR 0 7
42507: PUSH
42508: LD_INT 0
42510: LESS
42511: IFFALSE 42528
// _y := _y * - 1 ;
42513: LD_ADDR_VAR 0 7
42517: PUSH
42518: LD_VAR 0 7
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: MUL
42527: ST_TO_ADDR
// result := [ _x , _y ] ;
42528: LD_ADDR_VAR 0 5
42532: PUSH
42533: LD_VAR 0 6
42537: PUSH
42538: LD_VAR 0 7
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// end ;
42547: LD_VAR 0 5
42551: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42552: LD_INT 0
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
// task := GetTaskList ( unit ) ;
42558: LD_ADDR_VAR 0 7
42562: PUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: CALL_OW 437
42572: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42573: LD_VAR 0 7
42577: NOT
42578: PUSH
42579: LD_VAR 0 1
42583: PPUSH
42584: LD_VAR 0 2
42588: PPUSH
42589: CALL_OW 308
42593: NOT
42594: AND
42595: IFFALSE 42599
// exit ;
42597: GO 42717
// if IsInArea ( unit , area ) then
42599: LD_VAR 0 1
42603: PPUSH
42604: LD_VAR 0 2
42608: PPUSH
42609: CALL_OW 308
42613: IFFALSE 42631
// begin ComMoveToArea ( unit , goAway ) ;
42615: LD_VAR 0 1
42619: PPUSH
42620: LD_VAR 0 3
42624: PPUSH
42625: CALL_OW 113
// exit ;
42629: GO 42717
// end ; if task [ 1 ] [ 1 ] <> M then
42631: LD_VAR 0 7
42635: PUSH
42636: LD_INT 1
42638: ARRAY
42639: PUSH
42640: LD_INT 1
42642: ARRAY
42643: PUSH
42644: LD_STRING M
42646: NONEQUAL
42647: IFFALSE 42651
// exit ;
42649: GO 42717
// x := task [ 1 ] [ 2 ] ;
42651: LD_ADDR_VAR 0 5
42655: PUSH
42656: LD_VAR 0 7
42660: PUSH
42661: LD_INT 1
42663: ARRAY
42664: PUSH
42665: LD_INT 2
42667: ARRAY
42668: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42669: LD_ADDR_VAR 0 6
42673: PUSH
42674: LD_VAR 0 7
42678: PUSH
42679: LD_INT 1
42681: ARRAY
42682: PUSH
42683: LD_INT 3
42685: ARRAY
42686: ST_TO_ADDR
// if InArea ( x , y , area ) then
42687: LD_VAR 0 5
42691: PPUSH
42692: LD_VAR 0 6
42696: PPUSH
42697: LD_VAR 0 2
42701: PPUSH
42702: CALL_OW 309
42706: IFFALSE 42717
// ComStop ( unit ) ;
42708: LD_VAR 0 1
42712: PPUSH
42713: CALL_OW 141
// end ;
42717: LD_VAR 0 4
42721: RET
// export function Abs ( value ) ; begin
42722: LD_INT 0
42724: PPUSH
// result := value ;
42725: LD_ADDR_VAR 0 2
42729: PUSH
42730: LD_VAR 0 1
42734: ST_TO_ADDR
// if value < 0 then
42735: LD_VAR 0 1
42739: PUSH
42740: LD_INT 0
42742: LESS
42743: IFFALSE 42760
// result := value * - 1 ;
42745: LD_ADDR_VAR 0 2
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: MUL
42759: ST_TO_ADDR
// end ;
42760: LD_VAR 0 2
42764: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42765: LD_INT 0
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
// if not unit or not building then
42775: LD_VAR 0 1
42779: NOT
42780: PUSH
42781: LD_VAR 0 2
42785: NOT
42786: OR
42787: IFFALSE 42791
// exit ;
42789: GO 43017
// x := GetX ( building ) ;
42791: LD_ADDR_VAR 0 4
42795: PUSH
42796: LD_VAR 0 2
42800: PPUSH
42801: CALL_OW 250
42805: ST_TO_ADDR
// y := GetY ( building ) ;
42806: LD_ADDR_VAR 0 6
42810: PUSH
42811: LD_VAR 0 2
42815: PPUSH
42816: CALL_OW 251
42820: ST_TO_ADDR
// d := GetDir ( building ) ;
42821: LD_ADDR_VAR 0 8
42825: PUSH
42826: LD_VAR 0 2
42830: PPUSH
42831: CALL_OW 254
42835: ST_TO_ADDR
// r := 4 ;
42836: LD_ADDR_VAR 0 9
42840: PUSH
42841: LD_INT 4
42843: ST_TO_ADDR
// for i := 1 to 5 do
42844: LD_ADDR_VAR 0 10
42848: PUSH
42849: DOUBLE
42850: LD_INT 1
42852: DEC
42853: ST_TO_ADDR
42854: LD_INT 5
42856: PUSH
42857: FOR_TO
42858: IFFALSE 43015
// begin _x := ShiftX ( x , d , r + i ) ;
42860: LD_ADDR_VAR 0 5
42864: PUSH
42865: LD_VAR 0 4
42869: PPUSH
42870: LD_VAR 0 8
42874: PPUSH
42875: LD_VAR 0 9
42879: PUSH
42880: LD_VAR 0 10
42884: PLUS
42885: PPUSH
42886: CALL_OW 272
42890: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42891: LD_ADDR_VAR 0 7
42895: PUSH
42896: LD_VAR 0 6
42900: PPUSH
42901: LD_VAR 0 8
42905: PPUSH
42906: LD_VAR 0 9
42910: PUSH
42911: LD_VAR 0 10
42915: PLUS
42916: PPUSH
42917: CALL_OW 273
42921: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42922: LD_VAR 0 5
42926: PPUSH
42927: LD_VAR 0 7
42931: PPUSH
42932: CALL_OW 488
42936: PUSH
42937: LD_VAR 0 5
42941: PPUSH
42942: LD_VAR 0 7
42946: PPUSH
42947: CALL_OW 428
42951: PPUSH
42952: CALL_OW 247
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: IN
42967: NOT
42968: AND
42969: IFFALSE 43013
// begin ComMoveXY ( unit , _x , _y ) ;
42971: LD_VAR 0 1
42975: PPUSH
42976: LD_VAR 0 5
42980: PPUSH
42981: LD_VAR 0 7
42985: PPUSH
42986: CALL_OW 111
// result := [ _x , _y ] ;
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: LD_VAR 0 5
42999: PUSH
43000: LD_VAR 0 7
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// exit ;
43009: POP
43010: POP
43011: GO 43017
// end ; end ;
43013: GO 42857
43015: POP
43016: POP
// end ;
43017: LD_VAR 0 3
43021: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43022: LD_INT 0
43024: PPUSH
43025: PPUSH
43026: PPUSH
// result := 0 ;
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: LD_INT 0
43034: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43035: LD_VAR 0 1
43039: PUSH
43040: LD_INT 0
43042: LESS
43043: PUSH
43044: LD_VAR 0 1
43048: PUSH
43049: LD_INT 8
43051: GREATER
43052: OR
43053: PUSH
43054: LD_VAR 0 2
43058: PUSH
43059: LD_INT 0
43061: LESS
43062: OR
43063: PUSH
43064: LD_VAR 0 2
43068: PUSH
43069: LD_INT 8
43071: GREATER
43072: OR
43073: IFFALSE 43077
// exit ;
43075: GO 43152
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43077: LD_ADDR_VAR 0 4
43081: PUSH
43082: LD_INT 22
43084: PUSH
43085: LD_VAR 0 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PPUSH
43094: CALL_OW 69
43098: PUSH
43099: FOR_IN
43100: IFFALSE 43150
// begin un := UnitShoot ( i ) ;
43102: LD_ADDR_VAR 0 5
43106: PUSH
43107: LD_VAR 0 4
43111: PPUSH
43112: CALL_OW 504
43116: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43117: LD_VAR 0 5
43121: PPUSH
43122: CALL_OW 255
43126: PUSH
43127: LD_VAR 0 1
43131: EQUAL
43132: IFFALSE 43148
// begin result := un ;
43134: LD_ADDR_VAR 0 3
43138: PUSH
43139: LD_VAR 0 5
43143: ST_TO_ADDR
// exit ;
43144: POP
43145: POP
43146: GO 43152
// end ; end ;
43148: GO 43099
43150: POP
43151: POP
// end ;
43152: LD_VAR 0 3
43156: RET
// export function GetCargoBay ( units ) ; begin
43157: LD_INT 0
43159: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43160: LD_ADDR_VAR 0 2
43164: PUSH
43165: LD_VAR 0 1
43169: PPUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 34
43175: PUSH
43176: LD_INT 12
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 34
43185: PUSH
43186: LD_INT 51
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 34
43195: PUSH
43196: LD_INT 32
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 34
43205: PUSH
43206: LD_INT 89
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: PPUSH
43220: CALL_OW 72
43224: ST_TO_ADDR
// end ;
43225: LD_VAR 0 2
43229: RET
// export function Negate ( value ) ; begin
43230: LD_INT 0
43232: PPUSH
// result := not value ;
43233: LD_ADDR_VAR 0 2
43237: PUSH
43238: LD_VAR 0 1
43242: NOT
43243: ST_TO_ADDR
// end ;
43244: LD_VAR 0 2
43248: RET
// export function Inc ( value ) ; begin
43249: LD_INT 0
43251: PPUSH
// result := value + 1 ;
43252: LD_ADDR_VAR 0 2
43256: PUSH
43257: LD_VAR 0 1
43261: PUSH
43262: LD_INT 1
43264: PLUS
43265: ST_TO_ADDR
// end ;
43266: LD_VAR 0 2
43270: RET
// export function Dec ( value ) ; begin
43271: LD_INT 0
43273: PPUSH
// result := value - 1 ;
43274: LD_ADDR_VAR 0 2
43278: PUSH
43279: LD_VAR 0 1
43283: PUSH
43284: LD_INT 1
43286: MINUS
43287: ST_TO_ADDR
// end ;
43288: LD_VAR 0 2
43292: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43293: LD_INT 0
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43303: LD_VAR 0 1
43307: PPUSH
43308: LD_VAR 0 2
43312: PPUSH
43313: CALL_OW 488
43317: NOT
43318: PUSH
43319: LD_VAR 0 3
43323: PPUSH
43324: LD_VAR 0 4
43328: PPUSH
43329: CALL_OW 488
43333: NOT
43334: OR
43335: IFFALSE 43348
// begin result := - 1 ;
43337: LD_ADDR_VAR 0 5
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: ST_TO_ADDR
// exit ;
43346: GO 43583
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43348: LD_ADDR_VAR 0 12
43352: PUSH
43353: LD_VAR 0 1
43357: PPUSH
43358: LD_VAR 0 2
43362: PPUSH
43363: LD_VAR 0 3
43367: PPUSH
43368: LD_VAR 0 4
43372: PPUSH
43373: CALL 42433 0 4
43377: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43378: LD_ADDR_VAR 0 11
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: LD_VAR 0 2
43392: PPUSH
43393: LD_VAR 0 12
43397: PUSH
43398: LD_INT 1
43400: ARRAY
43401: PPUSH
43402: LD_VAR 0 12
43406: PUSH
43407: LD_INT 2
43409: ARRAY
43410: PPUSH
43411: CALL_OW 298
43415: ST_TO_ADDR
// distance := 9999 ;
43416: LD_ADDR_VAR 0 10
43420: PUSH
43421: LD_INT 9999
43423: ST_TO_ADDR
// for i := 0 to 5 do
43424: LD_ADDR_VAR 0 6
43428: PUSH
43429: DOUBLE
43430: LD_INT 0
43432: DEC
43433: ST_TO_ADDR
43434: LD_INT 5
43436: PUSH
43437: FOR_TO
43438: IFFALSE 43581
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43440: LD_ADDR_VAR 0 7
43444: PUSH
43445: LD_VAR 0 1
43449: PPUSH
43450: LD_VAR 0 6
43454: PPUSH
43455: LD_VAR 0 11
43459: PPUSH
43460: CALL_OW 272
43464: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43465: LD_ADDR_VAR 0 8
43469: PUSH
43470: LD_VAR 0 2
43474: PPUSH
43475: LD_VAR 0 6
43479: PPUSH
43480: LD_VAR 0 11
43484: PPUSH
43485: CALL_OW 273
43489: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43490: LD_VAR 0 7
43494: PPUSH
43495: LD_VAR 0 8
43499: PPUSH
43500: CALL_OW 488
43504: NOT
43505: IFFALSE 43509
// continue ;
43507: GO 43437
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43509: LD_ADDR_VAR 0 9
43513: PUSH
43514: LD_VAR 0 12
43518: PUSH
43519: LD_INT 1
43521: ARRAY
43522: PPUSH
43523: LD_VAR 0 12
43527: PUSH
43528: LD_INT 2
43530: ARRAY
43531: PPUSH
43532: LD_VAR 0 7
43536: PPUSH
43537: LD_VAR 0 8
43541: PPUSH
43542: CALL_OW 298
43546: ST_TO_ADDR
// if tmp < distance then
43547: LD_VAR 0 9
43551: PUSH
43552: LD_VAR 0 10
43556: LESS
43557: IFFALSE 43579
// begin result := i ;
43559: LD_ADDR_VAR 0 5
43563: PUSH
43564: LD_VAR 0 6
43568: ST_TO_ADDR
// distance := tmp ;
43569: LD_ADDR_VAR 0 10
43573: PUSH
43574: LD_VAR 0 9
43578: ST_TO_ADDR
// end ; end ;
43579: GO 43437
43581: POP
43582: POP
// end ;
43583: LD_VAR 0 5
43587: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43588: LD_INT 0
43590: PPUSH
43591: PPUSH
// if not driver or not IsInUnit ( driver ) then
43592: LD_VAR 0 1
43596: NOT
43597: PUSH
43598: LD_VAR 0 1
43602: PPUSH
43603: CALL_OW 310
43607: NOT
43608: OR
43609: IFFALSE 43613
// exit ;
43611: GO 43703
// vehicle := IsInUnit ( driver ) ;
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_VAR 0 1
43622: PPUSH
43623: CALL_OW 310
43627: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43628: LD_VAR 0 1
43632: PPUSH
43633: LD_STRING \
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: PUSH
43663: LD_STRING E
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_VAR 0 3
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PPUSH
43699: CALL_OW 446
// end ;
43703: LD_VAR 0 2
43707: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43708: LD_INT 0
43710: PPUSH
43711: PPUSH
// if not driver or not IsInUnit ( driver ) then
43712: LD_VAR 0 1
43716: NOT
43717: PUSH
43718: LD_VAR 0 1
43722: PPUSH
43723: CALL_OW 310
43727: NOT
43728: OR
43729: IFFALSE 43733
// exit ;
43731: GO 43823
// vehicle := IsInUnit ( driver ) ;
43733: LD_ADDR_VAR 0 3
43737: PUSH
43738: LD_VAR 0 1
43742: PPUSH
43743: CALL_OW 310
43747: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43748: LD_VAR 0 1
43752: PPUSH
43753: LD_STRING \
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: PUSH
43783: LD_STRING E
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_VAR 0 3
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PPUSH
43819: CALL_OW 447
// end ;
43823: LD_VAR 0 2
43827: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43828: LD_INT 0
43830: PPUSH
43831: PPUSH
43832: PPUSH
// tmp := [ ] ;
43833: LD_ADDR_VAR 0 5
43837: PUSH
43838: EMPTY
43839: ST_TO_ADDR
// for i in units do
43840: LD_ADDR_VAR 0 4
43844: PUSH
43845: LD_VAR 0 1
43849: PUSH
43850: FOR_IN
43851: IFFALSE 43889
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_VAR 0 5
43862: PPUSH
43863: LD_VAR 0 5
43867: PUSH
43868: LD_INT 1
43870: PLUS
43871: PPUSH
43872: LD_VAR 0 4
43876: PPUSH
43877: CALL_OW 256
43881: PPUSH
43882: CALL_OW 2
43886: ST_TO_ADDR
43887: GO 43850
43889: POP
43890: POP
// if not tmp then
43891: LD_VAR 0 5
43895: NOT
43896: IFFALSE 43900
// exit ;
43898: GO 43948
// if asc then
43900: LD_VAR 0 2
43904: IFFALSE 43928
// result := SortListByListAsc ( units , tmp ) else
43906: LD_ADDR_VAR 0 3
43910: PUSH
43911: LD_VAR 0 1
43915: PPUSH
43916: LD_VAR 0 5
43920: PPUSH
43921: CALL_OW 76
43925: ST_TO_ADDR
43926: GO 43948
// result := SortListByListDesc ( units , tmp ) ;
43928: LD_ADDR_VAR 0 3
43932: PUSH
43933: LD_VAR 0 1
43937: PPUSH
43938: LD_VAR 0 5
43942: PPUSH
43943: CALL_OW 77
43947: ST_TO_ADDR
// end ;
43948: LD_VAR 0 3
43952: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43953: LD_INT 0
43955: PPUSH
43956: PPUSH
// task := GetTaskList ( mech ) ;
43957: LD_ADDR_VAR 0 4
43961: PUSH
43962: LD_VAR 0 1
43966: PPUSH
43967: CALL_OW 437
43971: ST_TO_ADDR
// if not task then
43972: LD_VAR 0 4
43976: NOT
43977: IFFALSE 43981
// exit ;
43979: GO 44023
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43981: LD_ADDR_VAR 0 3
43985: PUSH
43986: LD_VAR 0 4
43990: PUSH
43991: LD_INT 1
43993: ARRAY
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: PUSH
43999: LD_STRING r
44001: EQUAL
44002: PUSH
44003: LD_VAR 0 4
44007: PUSH
44008: LD_INT 1
44010: ARRAY
44011: PUSH
44012: LD_INT 4
44014: ARRAY
44015: PUSH
44016: LD_VAR 0 2
44020: EQUAL
44021: AND
44022: ST_TO_ADDR
// end ;
44023: LD_VAR 0 3
44027: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44028: LD_INT 0
44030: PPUSH
// SetDir ( unit , d ) ;
44031: LD_VAR 0 1
44035: PPUSH
44036: LD_VAR 0 4
44040: PPUSH
44041: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44045: LD_VAR 0 1
44049: PPUSH
44050: LD_VAR 0 2
44054: PPUSH
44055: LD_VAR 0 3
44059: PPUSH
44060: LD_VAR 0 5
44064: PPUSH
44065: CALL_OW 48
// end ;
44069: LD_VAR 0 6
44073: RET
// export function ToNaturalNumber ( number ) ; begin
44074: LD_INT 0
44076: PPUSH
// result := number div 1 ;
44077: LD_ADDR_VAR 0 2
44081: PUSH
44082: LD_VAR 0 1
44086: PUSH
44087: LD_INT 1
44089: DIV
44090: ST_TO_ADDR
// if number < 0 then
44091: LD_VAR 0 1
44095: PUSH
44096: LD_INT 0
44098: LESS
44099: IFFALSE 44109
// result := 0 ;
44101: LD_ADDR_VAR 0 2
44105: PUSH
44106: LD_INT 0
44108: ST_TO_ADDR
// end ;
44109: LD_VAR 0 2
44113: RET
// export function SortByClass ( units , class ) ; var un ; begin
44114: LD_INT 0
44116: PPUSH
44117: PPUSH
// if not units or not class then
44118: LD_VAR 0 1
44122: NOT
44123: PUSH
44124: LD_VAR 0 2
44128: NOT
44129: OR
44130: IFFALSE 44134
// exit ;
44132: GO 44229
// result := [ ] ;
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: EMPTY
44140: ST_TO_ADDR
// for un in units do
44141: LD_ADDR_VAR 0 4
44145: PUSH
44146: LD_VAR 0 1
44150: PUSH
44151: FOR_IN
44152: IFFALSE 44227
// if GetClass ( un ) = class then
44154: LD_VAR 0 4
44158: PPUSH
44159: CALL_OW 257
44163: PUSH
44164: LD_VAR 0 2
44168: EQUAL
44169: IFFALSE 44196
// result := Insert ( result , 1 , un ) else
44171: LD_ADDR_VAR 0 3
44175: PUSH
44176: LD_VAR 0 3
44180: PPUSH
44181: LD_INT 1
44183: PPUSH
44184: LD_VAR 0 4
44188: PPUSH
44189: CALL_OW 2
44193: ST_TO_ADDR
44194: GO 44225
// result := Replace ( result , result + 1 , un ) ;
44196: LD_ADDR_VAR 0 3
44200: PUSH
44201: LD_VAR 0 3
44205: PPUSH
44206: LD_VAR 0 3
44210: PUSH
44211: LD_INT 1
44213: PLUS
44214: PPUSH
44215: LD_VAR 0 4
44219: PPUSH
44220: CALL_OW 1
44224: ST_TO_ADDR
44225: GO 44151
44227: POP
44228: POP
// end ;
44229: LD_VAR 0 3
44233: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44234: LD_INT 0
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
// result := [ ] ;
44243: LD_ADDR_VAR 0 4
44247: PUSH
44248: EMPTY
44249: ST_TO_ADDR
// if x - r < 0 then
44250: LD_VAR 0 1
44254: PUSH
44255: LD_VAR 0 3
44259: MINUS
44260: PUSH
44261: LD_INT 0
44263: LESS
44264: IFFALSE 44276
// min_x := 0 else
44266: LD_ADDR_VAR 0 8
44270: PUSH
44271: LD_INT 0
44273: ST_TO_ADDR
44274: GO 44292
// min_x := x - r ;
44276: LD_ADDR_VAR 0 8
44280: PUSH
44281: LD_VAR 0 1
44285: PUSH
44286: LD_VAR 0 3
44290: MINUS
44291: ST_TO_ADDR
// if y - r < 0 then
44292: LD_VAR 0 2
44296: PUSH
44297: LD_VAR 0 3
44301: MINUS
44302: PUSH
44303: LD_INT 0
44305: LESS
44306: IFFALSE 44318
// min_y := 0 else
44308: LD_ADDR_VAR 0 7
44312: PUSH
44313: LD_INT 0
44315: ST_TO_ADDR
44316: GO 44334
// min_y := y - r ;
44318: LD_ADDR_VAR 0 7
44322: PUSH
44323: LD_VAR 0 2
44327: PUSH
44328: LD_VAR 0 3
44332: MINUS
44333: ST_TO_ADDR
// max_x := x + r ;
44334: LD_ADDR_VAR 0 9
44338: PUSH
44339: LD_VAR 0 1
44343: PUSH
44344: LD_VAR 0 3
44348: PLUS
44349: ST_TO_ADDR
// max_y := y + r ;
44350: LD_ADDR_VAR 0 10
44354: PUSH
44355: LD_VAR 0 2
44359: PUSH
44360: LD_VAR 0 3
44364: PLUS
44365: ST_TO_ADDR
// for _x = min_x to max_x do
44366: LD_ADDR_VAR 0 5
44370: PUSH
44371: DOUBLE
44372: LD_VAR 0 8
44376: DEC
44377: ST_TO_ADDR
44378: LD_VAR 0 9
44382: PUSH
44383: FOR_TO
44384: IFFALSE 44485
// for _y = min_y to max_y do
44386: LD_ADDR_VAR 0 6
44390: PUSH
44391: DOUBLE
44392: LD_VAR 0 7
44396: DEC
44397: ST_TO_ADDR
44398: LD_VAR 0 10
44402: PUSH
44403: FOR_TO
44404: IFFALSE 44481
// begin if not ValidHex ( _x , _y ) then
44406: LD_VAR 0 5
44410: PPUSH
44411: LD_VAR 0 6
44415: PPUSH
44416: CALL_OW 488
44420: NOT
44421: IFFALSE 44425
// continue ;
44423: GO 44403
// if GetResourceTypeXY ( _x , _y ) then
44425: LD_VAR 0 5
44429: PPUSH
44430: LD_VAR 0 6
44434: PPUSH
44435: CALL_OW 283
44439: IFFALSE 44479
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44441: LD_ADDR_VAR 0 4
44445: PUSH
44446: LD_VAR 0 4
44450: PPUSH
44451: LD_VAR 0 4
44455: PUSH
44456: LD_INT 1
44458: PLUS
44459: PPUSH
44460: LD_VAR 0 5
44464: PUSH
44465: LD_VAR 0 6
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PPUSH
44474: CALL_OW 1
44478: ST_TO_ADDR
// end ;
44479: GO 44403
44481: POP
44482: POP
44483: GO 44383
44485: POP
44486: POP
// end ;
44487: LD_VAR 0 4
44491: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44492: LD_INT 0
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
44500: PPUSH
44501: PPUSH
// if not units then
44502: LD_VAR 0 1
44506: NOT
44507: IFFALSE 44511
// exit ;
44509: GO 45035
// result := UnitFilter ( units , [ f_ok ] ) ;
44511: LD_ADDR_VAR 0 3
44515: PUSH
44516: LD_VAR 0 1
44520: PPUSH
44521: LD_INT 50
44523: PUSH
44524: EMPTY
44525: LIST
44526: PPUSH
44527: CALL_OW 72
44531: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44532: LD_ADDR_VAR 0 8
44536: PUSH
44537: LD_VAR 0 1
44541: PUSH
44542: LD_INT 1
44544: ARRAY
44545: PPUSH
44546: CALL_OW 255
44550: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44551: LD_ADDR_VAR 0 10
44555: PUSH
44556: LD_INT 29
44558: PUSH
44559: LD_INT 91
44561: PUSH
44562: LD_INT 49
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: ST_TO_ADDR
// if not result then
44570: LD_VAR 0 3
44574: NOT
44575: IFFALSE 44579
// exit ;
44577: GO 45035
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44579: LD_ADDR_VAR 0 5
44583: PUSH
44584: LD_INT 81
44586: PUSH
44587: LD_VAR 0 8
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PPUSH
44596: CALL_OW 69
44600: ST_TO_ADDR
// for i in result do
44601: LD_ADDR_VAR 0 4
44605: PUSH
44606: LD_VAR 0 3
44610: PUSH
44611: FOR_IN
44612: IFFALSE 45033
// begin tag := GetTag ( i ) + 1 ;
44614: LD_ADDR_VAR 0 9
44618: PUSH
44619: LD_VAR 0 4
44623: PPUSH
44624: CALL_OW 110
44628: PUSH
44629: LD_INT 1
44631: PLUS
44632: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44633: LD_ADDR_VAR 0 7
44637: PUSH
44638: LD_VAR 0 4
44642: PPUSH
44643: CALL_OW 250
44647: PPUSH
44648: LD_VAR 0 4
44652: PPUSH
44653: CALL_OW 251
44657: PPUSH
44658: LD_INT 6
44660: PPUSH
44661: CALL 44234 0 3
44665: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44666: LD_VAR 0 4
44670: PPUSH
44671: CALL_OW 247
44675: PUSH
44676: LD_INT 2
44678: EQUAL
44679: PUSH
44680: LD_VAR 0 7
44684: AND
44685: PUSH
44686: LD_VAR 0 4
44690: PPUSH
44691: CALL_OW 264
44695: PUSH
44696: LD_VAR 0 10
44700: IN
44701: NOT
44702: AND
44703: IFFALSE 44742
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44705: LD_VAR 0 4
44709: PPUSH
44710: LD_VAR 0 7
44714: PUSH
44715: LD_INT 1
44717: ARRAY
44718: PUSH
44719: LD_INT 1
44721: ARRAY
44722: PPUSH
44723: LD_VAR 0 7
44727: PUSH
44728: LD_INT 1
44730: ARRAY
44731: PUSH
44732: LD_INT 2
44734: ARRAY
44735: PPUSH
44736: CALL_OW 116
44740: GO 45031
// if path > tag then
44742: LD_VAR 0 2
44746: PUSH
44747: LD_VAR 0 9
44751: GREATER
44752: IFFALSE 44960
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44754: LD_ADDR_VAR 0 6
44758: PUSH
44759: LD_VAR 0 5
44763: PPUSH
44764: LD_INT 91
44766: PUSH
44767: LD_VAR 0 4
44771: PUSH
44772: LD_INT 8
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: PPUSH
44780: CALL_OW 72
44784: ST_TO_ADDR
// if nearEnemy then
44785: LD_VAR 0 6
44789: IFFALSE 44858
// begin if GetWeapon ( i ) = ru_time_lapser then
44791: LD_VAR 0 4
44795: PPUSH
44796: CALL_OW 264
44800: PUSH
44801: LD_INT 49
44803: EQUAL
44804: IFFALSE 44832
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44806: LD_VAR 0 4
44810: PPUSH
44811: LD_VAR 0 6
44815: PPUSH
44816: LD_VAR 0 4
44820: PPUSH
44821: CALL_OW 74
44825: PPUSH
44826: CALL_OW 112
44830: GO 44856
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44832: LD_VAR 0 4
44836: PPUSH
44837: LD_VAR 0 6
44841: PPUSH
44842: LD_VAR 0 4
44846: PPUSH
44847: CALL_OW 74
44851: PPUSH
44852: CALL_OW 115
// end else
44856: GO 44958
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44858: LD_VAR 0 4
44862: PPUSH
44863: LD_VAR 0 2
44867: PUSH
44868: LD_VAR 0 9
44872: ARRAY
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PPUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_VAR 0 9
44887: ARRAY
44888: PUSH
44889: LD_INT 2
44891: ARRAY
44892: PPUSH
44893: CALL_OW 297
44897: PUSH
44898: LD_INT 6
44900: GREATER
44901: IFFALSE 44944
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44903: LD_VAR 0 4
44907: PPUSH
44908: LD_VAR 0 2
44912: PUSH
44913: LD_VAR 0 9
44917: ARRAY
44918: PUSH
44919: LD_INT 1
44921: ARRAY
44922: PPUSH
44923: LD_VAR 0 2
44927: PUSH
44928: LD_VAR 0 9
44932: ARRAY
44933: PUSH
44934: LD_INT 2
44936: ARRAY
44937: PPUSH
44938: CALL_OW 114
44942: GO 44958
// SetTag ( i , tag ) ;
44944: LD_VAR 0 4
44948: PPUSH
44949: LD_VAR 0 9
44953: PPUSH
44954: CALL_OW 109
// end else
44958: GO 45031
// if enemy then
44960: LD_VAR 0 5
44964: IFFALSE 45031
// begin if GetWeapon ( i ) = ru_time_lapser then
44966: LD_VAR 0 4
44970: PPUSH
44971: CALL_OW 264
44975: PUSH
44976: LD_INT 49
44978: EQUAL
44979: IFFALSE 45007
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44981: LD_VAR 0 4
44985: PPUSH
44986: LD_VAR 0 5
44990: PPUSH
44991: LD_VAR 0 4
44995: PPUSH
44996: CALL_OW 74
45000: PPUSH
45001: CALL_OW 112
45005: GO 45031
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45007: LD_VAR 0 4
45011: PPUSH
45012: LD_VAR 0 5
45016: PPUSH
45017: LD_VAR 0 4
45021: PPUSH
45022: CALL_OW 74
45026: PPUSH
45027: CALL_OW 115
// end ; end ;
45031: GO 44611
45033: POP
45034: POP
// end ;
45035: LD_VAR 0 3
45039: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45040: LD_INT 0
45042: PPUSH
45043: PPUSH
45044: PPUSH
// if not unit or IsInUnit ( unit ) then
45045: LD_VAR 0 1
45049: NOT
45050: PUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 310
45060: OR
45061: IFFALSE 45065
// exit ;
45063: GO 45156
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45065: LD_ADDR_VAR 0 4
45069: PUSH
45070: LD_VAR 0 1
45074: PPUSH
45075: CALL_OW 250
45079: PPUSH
45080: LD_VAR 0 2
45084: PPUSH
45085: LD_INT 1
45087: PPUSH
45088: CALL_OW 272
45092: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45093: LD_ADDR_VAR 0 5
45097: PUSH
45098: LD_VAR 0 1
45102: PPUSH
45103: CALL_OW 251
45107: PPUSH
45108: LD_VAR 0 2
45112: PPUSH
45113: LD_INT 1
45115: PPUSH
45116: CALL_OW 273
45120: ST_TO_ADDR
// if ValidHex ( x , y ) then
45121: LD_VAR 0 4
45125: PPUSH
45126: LD_VAR 0 5
45130: PPUSH
45131: CALL_OW 488
45135: IFFALSE 45156
// ComTurnXY ( unit , x , y ) ;
45137: LD_VAR 0 1
45141: PPUSH
45142: LD_VAR 0 4
45146: PPUSH
45147: LD_VAR 0 5
45151: PPUSH
45152: CALL_OW 118
// end ;
45156: LD_VAR 0 3
45160: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45161: LD_INT 0
45163: PPUSH
45164: PPUSH
// result := false ;
45165: LD_ADDR_VAR 0 3
45169: PUSH
45170: LD_INT 0
45172: ST_TO_ADDR
// if not units then
45173: LD_VAR 0 2
45177: NOT
45178: IFFALSE 45182
// exit ;
45180: GO 45227
// for i in units do
45182: LD_ADDR_VAR 0 4
45186: PUSH
45187: LD_VAR 0 2
45191: PUSH
45192: FOR_IN
45193: IFFALSE 45225
// if See ( side , i ) then
45195: LD_VAR 0 1
45199: PPUSH
45200: LD_VAR 0 4
45204: PPUSH
45205: CALL_OW 292
45209: IFFALSE 45223
// begin result := true ;
45211: LD_ADDR_VAR 0 3
45215: PUSH
45216: LD_INT 1
45218: ST_TO_ADDR
// exit ;
45219: POP
45220: POP
45221: GO 45227
// end ;
45223: GO 45192
45225: POP
45226: POP
// end ;
45227: LD_VAR 0 3
45231: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45232: LD_INT 0
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
// if not unit or not points then
45238: LD_VAR 0 1
45242: NOT
45243: PUSH
45244: LD_VAR 0 2
45248: NOT
45249: OR
45250: IFFALSE 45254
// exit ;
45252: GO 45344
// dist := 99999 ;
45254: LD_ADDR_VAR 0 5
45258: PUSH
45259: LD_INT 99999
45261: ST_TO_ADDR
// for i in points do
45262: LD_ADDR_VAR 0 4
45266: PUSH
45267: LD_VAR 0 2
45271: PUSH
45272: FOR_IN
45273: IFFALSE 45342
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45275: LD_ADDR_VAR 0 6
45279: PUSH
45280: LD_VAR 0 1
45284: PPUSH
45285: LD_VAR 0 4
45289: PUSH
45290: LD_INT 1
45292: ARRAY
45293: PPUSH
45294: LD_VAR 0 4
45298: PUSH
45299: LD_INT 2
45301: ARRAY
45302: PPUSH
45303: CALL_OW 297
45307: ST_TO_ADDR
// if tmpDist < dist then
45308: LD_VAR 0 6
45312: PUSH
45313: LD_VAR 0 5
45317: LESS
45318: IFFALSE 45340
// begin result := i ;
45320: LD_ADDR_VAR 0 3
45324: PUSH
45325: LD_VAR 0 4
45329: ST_TO_ADDR
// dist := tmpDist ;
45330: LD_ADDR_VAR 0 5
45334: PUSH
45335: LD_VAR 0 6
45339: ST_TO_ADDR
// end ; end ;
45340: GO 45272
45342: POP
45343: POP
// end ;
45344: LD_VAR 0 3
45348: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45349: LD_INT 0
45351: PPUSH
// uc_side := side ;
45352: LD_ADDR_OWVAR 20
45356: PUSH
45357: LD_VAR 0 1
45361: ST_TO_ADDR
// uc_nation := 3 ;
45362: LD_ADDR_OWVAR 21
45366: PUSH
45367: LD_INT 3
45369: ST_TO_ADDR
// vc_chassis := 25 ;
45370: LD_ADDR_OWVAR 37
45374: PUSH
45375: LD_INT 25
45377: ST_TO_ADDR
// vc_engine := engine_siberite ;
45378: LD_ADDR_OWVAR 39
45382: PUSH
45383: LD_INT 3
45385: ST_TO_ADDR
// vc_control := control_computer ;
45386: LD_ADDR_OWVAR 38
45390: PUSH
45391: LD_INT 3
45393: ST_TO_ADDR
// vc_weapon := 59 ;
45394: LD_ADDR_OWVAR 40
45398: PUSH
45399: LD_INT 59
45401: ST_TO_ADDR
// result := CreateVehicle ;
45402: LD_ADDR_VAR 0 5
45406: PUSH
45407: CALL_OW 45
45411: ST_TO_ADDR
// SetDir ( result , d ) ;
45412: LD_VAR 0 5
45416: PPUSH
45417: LD_VAR 0 4
45421: PPUSH
45422: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45426: LD_VAR 0 5
45430: PPUSH
45431: LD_VAR 0 2
45435: PPUSH
45436: LD_VAR 0 3
45440: PPUSH
45441: LD_INT 0
45443: PPUSH
45444: CALL_OW 48
// end ;
45448: LD_VAR 0 5
45452: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45453: LD_INT 0
45455: PPUSH
45456: PPUSH
45457: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45458: LD_ADDR_VAR 0 2
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45481: LD_VAR 0 1
45485: NOT
45486: PUSH
45487: LD_VAR 0 1
45491: PPUSH
45492: CALL_OW 264
45496: PUSH
45497: LD_INT 12
45499: PUSH
45500: LD_INT 51
45502: PUSH
45503: LD_INT 32
45505: PUSH
45506: LD_INT 89
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: IN
45515: NOT
45516: OR
45517: IFFALSE 45521
// exit ;
45519: GO 45619
// for i := 1 to 3 do
45521: LD_ADDR_VAR 0 3
45525: PUSH
45526: DOUBLE
45527: LD_INT 1
45529: DEC
45530: ST_TO_ADDR
45531: LD_INT 3
45533: PUSH
45534: FOR_TO
45535: IFFALSE 45617
// begin tmp := GetCargo ( cargo , i ) ;
45537: LD_ADDR_VAR 0 4
45541: PUSH
45542: LD_VAR 0 1
45546: PPUSH
45547: LD_VAR 0 3
45551: PPUSH
45552: CALL_OW 289
45556: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45557: LD_ADDR_VAR 0 2
45561: PUSH
45562: LD_VAR 0 2
45566: PPUSH
45567: LD_VAR 0 3
45571: PPUSH
45572: LD_VAR 0 4
45576: PPUSH
45577: CALL_OW 1
45581: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45582: LD_ADDR_VAR 0 2
45586: PUSH
45587: LD_VAR 0 2
45591: PPUSH
45592: LD_INT 4
45594: PPUSH
45595: LD_VAR 0 2
45599: PUSH
45600: LD_INT 4
45602: ARRAY
45603: PUSH
45604: LD_VAR 0 4
45608: PLUS
45609: PPUSH
45610: CALL_OW 1
45614: ST_TO_ADDR
// end ;
45615: GO 45534
45617: POP
45618: POP
// end ;
45619: LD_VAR 0 2
45623: RET
// export function Length ( array ) ; begin
45624: LD_INT 0
45626: PPUSH
// result := array + 0 ;
45627: LD_ADDR_VAR 0 2
45631: PUSH
45632: LD_VAR 0 1
45636: PUSH
45637: LD_INT 0
45639: PLUS
45640: ST_TO_ADDR
// end ;
45641: LD_VAR 0 2
45645: RET
// export function PrepareArray ( array ) ; begin
45646: LD_INT 0
45648: PPUSH
// result := array diff 0 ;
45649: LD_ADDR_VAR 0 2
45653: PUSH
45654: LD_VAR 0 1
45658: PUSH
45659: LD_INT 0
45661: DIFF
45662: ST_TO_ADDR
// if not result [ 1 ] then
45663: LD_VAR 0 2
45667: PUSH
45668: LD_INT 1
45670: ARRAY
45671: NOT
45672: IFFALSE 45692
// result := Delete ( result , 1 ) ;
45674: LD_ADDR_VAR 0 2
45678: PUSH
45679: LD_VAR 0 2
45683: PPUSH
45684: LD_INT 1
45686: PPUSH
45687: CALL_OW 3
45691: ST_TO_ADDR
// end ;
45692: LD_VAR 0 2
45696: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45697: LD_INT 0
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
// sibRocketRange := 25 ;
45703: LD_ADDR_VAR 0 6
45707: PUSH
45708: LD_INT 25
45710: ST_TO_ADDR
// result := false ;
45711: LD_ADDR_VAR 0 4
45715: PUSH
45716: LD_INT 0
45718: ST_TO_ADDR
// for i := 0 to 5 do
45719: LD_ADDR_VAR 0 5
45723: PUSH
45724: DOUBLE
45725: LD_INT 0
45727: DEC
45728: ST_TO_ADDR
45729: LD_INT 5
45731: PUSH
45732: FOR_TO
45733: IFFALSE 45800
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45735: LD_VAR 0 1
45739: PPUSH
45740: LD_VAR 0 5
45744: PPUSH
45745: LD_VAR 0 6
45749: PPUSH
45750: CALL_OW 272
45754: PPUSH
45755: LD_VAR 0 2
45759: PPUSH
45760: LD_VAR 0 5
45764: PPUSH
45765: LD_VAR 0 6
45769: PPUSH
45770: CALL_OW 273
45774: PPUSH
45775: LD_VAR 0 3
45779: PPUSH
45780: CALL_OW 309
45784: IFFALSE 45798
// begin result := true ;
45786: LD_ADDR_VAR 0 4
45790: PUSH
45791: LD_INT 1
45793: ST_TO_ADDR
// exit ;
45794: POP
45795: POP
45796: GO 45802
// end ;
45798: GO 45732
45800: POP
45801: POP
// end ;
45802: LD_VAR 0 4
45806: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45807: LD_INT 0
45809: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45810: LD_VAR 0 1
45814: PPUSH
45815: LD_VAR 0 2
45819: PPUSH
45820: LD_INT 0
45822: PPUSH
45823: LD_INT 0
45825: PPUSH
45826: LD_INT 1
45828: PPUSH
45829: LD_INT 0
45831: PPUSH
45832: CALL_OW 587
// end ; end_of_file end_of_file
45836: LD_VAR 0 3
45840: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45841: LD_VAR 0 1
45845: PPUSH
45846: LD_VAR 0 2
45850: PPUSH
45851: LD_VAR 0 3
45855: PPUSH
45856: LD_VAR 0 4
45860: PPUSH
45861: LD_VAR 0 5
45865: PPUSH
45866: LD_VAR 0 6
45870: PPUSH
45871: CALL 46055 0 6
// end ;
45875: PPOPN 6
45877: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
45878: LD_INT 0
45880: PPUSH
// begin if not units then
45881: LD_VAR 0 1
45885: NOT
45886: IFFALSE 45890
// exit ;
45888: GO 45890
// end ;
45890: PPOPN 7
45892: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
45893: CALL 45959 0 0
// end ; end_of_file
45897: PPOPN 1
45899: END
// export globalGameSaveCounter ; every 0 0$1 do
45900: GO 45902
45902: DISABLE
// begin enable ;
45903: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45904: LD_STRING updateTimer(
45906: PUSH
45907: LD_OWVAR 1
45911: STR
45912: PUSH
45913: LD_STRING );
45915: STR
45916: PPUSH
45917: CALL_OW 559
// end ;
45921: END
// every 0 0$1 do
45922: GO 45924
45924: DISABLE
// begin globalGameSaveCounter := 0 ;
45925: LD_ADDR_EXP 27
45929: PUSH
45930: LD_INT 0
45932: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
45933: LD_STRING setGameSaveCounter(0)
45935: PPUSH
45936: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
45940: LD_STRING initStreamRollete();
45942: PPUSH
45943: CALL_OW 559
// InitStreamMode ;
45947: CALL 47273 0 0
// DefineStreamItems ( false ) ;
45951: LD_INT 0
45953: PPUSH
45954: CALL 47737 0 1
// end ;
45958: END
// export function SOS_MapStart ( ) ; begin
45959: LD_INT 0
45961: PPUSH
// if streamModeActive then
45962: LD_EXP 28
45966: IFFALSE 45975
// DefineStreamItems ( true ) ;
45968: LD_INT 1
45970: PPUSH
45971: CALL 47737 0 1
// UpdateLuaVariables ( ) ;
45975: CALL 45992 0 0
// UpdateFactoryWaypoints ( ) ;
45979: CALL 60598 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45983: CALL 60855 0 0
// end ;
45987: LD_VAR 0 1
45991: RET
// function UpdateLuaVariables ( ) ; begin
45992: LD_INT 0
45994: PPUSH
// if globalGameSaveCounter then
45995: LD_EXP 27
45999: IFFALSE 46033
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
46001: LD_ADDR_EXP 27
46005: PUSH
46006: LD_EXP 27
46010: PPUSH
46011: CALL 43249 0 1
46015: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46016: LD_STRING setGameSaveCounter(
46018: PUSH
46019: LD_EXP 27
46023: STR
46024: PUSH
46025: LD_STRING )
46027: STR
46028: PPUSH
46029: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46033: LD_STRING setGameDifficulty(
46035: PUSH
46036: LD_OWVAR 67
46040: STR
46041: PUSH
46042: LD_STRING )
46044: STR
46045: PPUSH
46046: CALL_OW 559
// end ;
46050: LD_VAR 0 1
46054: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46055: LD_INT 0
46057: PPUSH
// if p2 = stream_mode then
46058: LD_VAR 0 2
46062: PUSH
46063: LD_INT 100
46065: EQUAL
46066: IFFALSE 47069
// begin if not StreamModeActive then
46068: LD_EXP 28
46072: NOT
46073: IFFALSE 46083
// StreamModeActive := true ;
46075: LD_ADDR_EXP 28
46079: PUSH
46080: LD_INT 1
46082: ST_TO_ADDR
// if p3 = 0 then
46083: LD_VAR 0 3
46087: PUSH
46088: LD_INT 0
46090: EQUAL
46091: IFFALSE 46097
// InitStreamMode ;
46093: CALL 47273 0 0
// if p3 = 1 then
46097: LD_VAR 0 3
46101: PUSH
46102: LD_INT 1
46104: EQUAL
46105: IFFALSE 46115
// sRocket := true ;
46107: LD_ADDR_EXP 33
46111: PUSH
46112: LD_INT 1
46114: ST_TO_ADDR
// if p3 = 2 then
46115: LD_VAR 0 3
46119: PUSH
46120: LD_INT 2
46122: EQUAL
46123: IFFALSE 46133
// sSpeed := true ;
46125: LD_ADDR_EXP 32
46129: PUSH
46130: LD_INT 1
46132: ST_TO_ADDR
// if p3 = 3 then
46133: LD_VAR 0 3
46137: PUSH
46138: LD_INT 3
46140: EQUAL
46141: IFFALSE 46151
// sEngine := true ;
46143: LD_ADDR_EXP 34
46147: PUSH
46148: LD_INT 1
46150: ST_TO_ADDR
// if p3 = 4 then
46151: LD_VAR 0 3
46155: PUSH
46156: LD_INT 4
46158: EQUAL
46159: IFFALSE 46169
// sSpec := true ;
46161: LD_ADDR_EXP 31
46165: PUSH
46166: LD_INT 1
46168: ST_TO_ADDR
// if p3 = 5 then
46169: LD_VAR 0 3
46173: PUSH
46174: LD_INT 5
46176: EQUAL
46177: IFFALSE 46187
// sLevel := true ;
46179: LD_ADDR_EXP 35
46183: PUSH
46184: LD_INT 1
46186: ST_TO_ADDR
// if p3 = 6 then
46187: LD_VAR 0 3
46191: PUSH
46192: LD_INT 6
46194: EQUAL
46195: IFFALSE 46205
// sArmoury := true ;
46197: LD_ADDR_EXP 36
46201: PUSH
46202: LD_INT 1
46204: ST_TO_ADDR
// if p3 = 7 then
46205: LD_VAR 0 3
46209: PUSH
46210: LD_INT 7
46212: EQUAL
46213: IFFALSE 46223
// sRadar := true ;
46215: LD_ADDR_EXP 37
46219: PUSH
46220: LD_INT 1
46222: ST_TO_ADDR
// if p3 = 8 then
46223: LD_VAR 0 3
46227: PUSH
46228: LD_INT 8
46230: EQUAL
46231: IFFALSE 46241
// sBunker := true ;
46233: LD_ADDR_EXP 38
46237: PUSH
46238: LD_INT 1
46240: ST_TO_ADDR
// if p3 = 9 then
46241: LD_VAR 0 3
46245: PUSH
46246: LD_INT 9
46248: EQUAL
46249: IFFALSE 46259
// sHack := true ;
46251: LD_ADDR_EXP 39
46255: PUSH
46256: LD_INT 1
46258: ST_TO_ADDR
// if p3 = 10 then
46259: LD_VAR 0 3
46263: PUSH
46264: LD_INT 10
46266: EQUAL
46267: IFFALSE 46277
// sFire := true ;
46269: LD_ADDR_EXP 40
46273: PUSH
46274: LD_INT 1
46276: ST_TO_ADDR
// if p3 = 11 then
46277: LD_VAR 0 3
46281: PUSH
46282: LD_INT 11
46284: EQUAL
46285: IFFALSE 46295
// sRefresh := true ;
46287: LD_ADDR_EXP 41
46291: PUSH
46292: LD_INT 1
46294: ST_TO_ADDR
// if p3 = 12 then
46295: LD_VAR 0 3
46299: PUSH
46300: LD_INT 12
46302: EQUAL
46303: IFFALSE 46313
// sExp := true ;
46305: LD_ADDR_EXP 42
46309: PUSH
46310: LD_INT 1
46312: ST_TO_ADDR
// if p3 = 13 then
46313: LD_VAR 0 3
46317: PUSH
46318: LD_INT 13
46320: EQUAL
46321: IFFALSE 46331
// sDepot := true ;
46323: LD_ADDR_EXP 43
46327: PUSH
46328: LD_INT 1
46330: ST_TO_ADDR
// if p3 = 14 then
46331: LD_VAR 0 3
46335: PUSH
46336: LD_INT 14
46338: EQUAL
46339: IFFALSE 46349
// sFlag := true ;
46341: LD_ADDR_EXP 44
46345: PUSH
46346: LD_INT 1
46348: ST_TO_ADDR
// if p3 = 15 then
46349: LD_VAR 0 3
46353: PUSH
46354: LD_INT 15
46356: EQUAL
46357: IFFALSE 46367
// sKamikadze := true ;
46359: LD_ADDR_EXP 52
46363: PUSH
46364: LD_INT 1
46366: ST_TO_ADDR
// if p3 = 16 then
46367: LD_VAR 0 3
46371: PUSH
46372: LD_INT 16
46374: EQUAL
46375: IFFALSE 46385
// sTroll := true ;
46377: LD_ADDR_EXP 53
46381: PUSH
46382: LD_INT 1
46384: ST_TO_ADDR
// if p3 = 17 then
46385: LD_VAR 0 3
46389: PUSH
46390: LD_INT 17
46392: EQUAL
46393: IFFALSE 46403
// sSlow := true ;
46395: LD_ADDR_EXP 54
46399: PUSH
46400: LD_INT 1
46402: ST_TO_ADDR
// if p3 = 18 then
46403: LD_VAR 0 3
46407: PUSH
46408: LD_INT 18
46410: EQUAL
46411: IFFALSE 46421
// sLack := true ;
46413: LD_ADDR_EXP 55
46417: PUSH
46418: LD_INT 1
46420: ST_TO_ADDR
// if p3 = 19 then
46421: LD_VAR 0 3
46425: PUSH
46426: LD_INT 19
46428: EQUAL
46429: IFFALSE 46439
// sTank := true ;
46431: LD_ADDR_EXP 57
46435: PUSH
46436: LD_INT 1
46438: ST_TO_ADDR
// if p3 = 20 then
46439: LD_VAR 0 3
46443: PUSH
46444: LD_INT 20
46446: EQUAL
46447: IFFALSE 46457
// sRemote := true ;
46449: LD_ADDR_EXP 58
46453: PUSH
46454: LD_INT 1
46456: ST_TO_ADDR
// if p3 = 21 then
46457: LD_VAR 0 3
46461: PUSH
46462: LD_INT 21
46464: EQUAL
46465: IFFALSE 46475
// sPowell := true ;
46467: LD_ADDR_EXP 59
46471: PUSH
46472: LD_INT 1
46474: ST_TO_ADDR
// if p3 = 22 then
46475: LD_VAR 0 3
46479: PUSH
46480: LD_INT 22
46482: EQUAL
46483: IFFALSE 46493
// sTeleport := true ;
46485: LD_ADDR_EXP 62
46489: PUSH
46490: LD_INT 1
46492: ST_TO_ADDR
// if p3 = 23 then
46493: LD_VAR 0 3
46497: PUSH
46498: LD_INT 23
46500: EQUAL
46501: IFFALSE 46511
// sOilTower := true ;
46503: LD_ADDR_EXP 64
46507: PUSH
46508: LD_INT 1
46510: ST_TO_ADDR
// if p3 = 24 then
46511: LD_VAR 0 3
46515: PUSH
46516: LD_INT 24
46518: EQUAL
46519: IFFALSE 46529
// sShovel := true ;
46521: LD_ADDR_EXP 65
46525: PUSH
46526: LD_INT 1
46528: ST_TO_ADDR
// if p3 = 25 then
46529: LD_VAR 0 3
46533: PUSH
46534: LD_INT 25
46536: EQUAL
46537: IFFALSE 46547
// sSheik := true ;
46539: LD_ADDR_EXP 66
46543: PUSH
46544: LD_INT 1
46546: ST_TO_ADDR
// if p3 = 26 then
46547: LD_VAR 0 3
46551: PUSH
46552: LD_INT 26
46554: EQUAL
46555: IFFALSE 46565
// sEarthquake := true ;
46557: LD_ADDR_EXP 68
46561: PUSH
46562: LD_INT 1
46564: ST_TO_ADDR
// if p3 = 27 then
46565: LD_VAR 0 3
46569: PUSH
46570: LD_INT 27
46572: EQUAL
46573: IFFALSE 46583
// sAI := true ;
46575: LD_ADDR_EXP 69
46579: PUSH
46580: LD_INT 1
46582: ST_TO_ADDR
// if p3 = 28 then
46583: LD_VAR 0 3
46587: PUSH
46588: LD_INT 28
46590: EQUAL
46591: IFFALSE 46601
// sCargo := true ;
46593: LD_ADDR_EXP 72
46597: PUSH
46598: LD_INT 1
46600: ST_TO_ADDR
// if p3 = 29 then
46601: LD_VAR 0 3
46605: PUSH
46606: LD_INT 29
46608: EQUAL
46609: IFFALSE 46619
// sDLaser := true ;
46611: LD_ADDR_EXP 73
46615: PUSH
46616: LD_INT 1
46618: ST_TO_ADDR
// if p3 = 30 then
46619: LD_VAR 0 3
46623: PUSH
46624: LD_INT 30
46626: EQUAL
46627: IFFALSE 46637
// sExchange := true ;
46629: LD_ADDR_EXP 74
46633: PUSH
46634: LD_INT 1
46636: ST_TO_ADDR
// if p3 = 31 then
46637: LD_VAR 0 3
46641: PUSH
46642: LD_INT 31
46644: EQUAL
46645: IFFALSE 46655
// sFac := true ;
46647: LD_ADDR_EXP 75
46651: PUSH
46652: LD_INT 1
46654: ST_TO_ADDR
// if p3 = 32 then
46655: LD_VAR 0 3
46659: PUSH
46660: LD_INT 32
46662: EQUAL
46663: IFFALSE 46673
// sPower := true ;
46665: LD_ADDR_EXP 76
46669: PUSH
46670: LD_INT 1
46672: ST_TO_ADDR
// if p3 = 33 then
46673: LD_VAR 0 3
46677: PUSH
46678: LD_INT 33
46680: EQUAL
46681: IFFALSE 46691
// sRandom := true ;
46683: LD_ADDR_EXP 77
46687: PUSH
46688: LD_INT 1
46690: ST_TO_ADDR
// if p3 = 34 then
46691: LD_VAR 0 3
46695: PUSH
46696: LD_INT 34
46698: EQUAL
46699: IFFALSE 46709
// sShield := true ;
46701: LD_ADDR_EXP 78
46705: PUSH
46706: LD_INT 1
46708: ST_TO_ADDR
// if p3 = 35 then
46709: LD_VAR 0 3
46713: PUSH
46714: LD_INT 35
46716: EQUAL
46717: IFFALSE 46727
// sTime := true ;
46719: LD_ADDR_EXP 79
46723: PUSH
46724: LD_INT 1
46726: ST_TO_ADDR
// if p3 = 36 then
46727: LD_VAR 0 3
46731: PUSH
46732: LD_INT 36
46734: EQUAL
46735: IFFALSE 46745
// sTools := true ;
46737: LD_ADDR_EXP 80
46741: PUSH
46742: LD_INT 1
46744: ST_TO_ADDR
// if p3 = 101 then
46745: LD_VAR 0 3
46749: PUSH
46750: LD_INT 101
46752: EQUAL
46753: IFFALSE 46763
// sSold := true ;
46755: LD_ADDR_EXP 45
46759: PUSH
46760: LD_INT 1
46762: ST_TO_ADDR
// if p3 = 102 then
46763: LD_VAR 0 3
46767: PUSH
46768: LD_INT 102
46770: EQUAL
46771: IFFALSE 46781
// sDiff := true ;
46773: LD_ADDR_EXP 46
46777: PUSH
46778: LD_INT 1
46780: ST_TO_ADDR
// if p3 = 103 then
46781: LD_VAR 0 3
46785: PUSH
46786: LD_INT 103
46788: EQUAL
46789: IFFALSE 46799
// sFog := true ;
46791: LD_ADDR_EXP 49
46795: PUSH
46796: LD_INT 1
46798: ST_TO_ADDR
// if p3 = 104 then
46799: LD_VAR 0 3
46803: PUSH
46804: LD_INT 104
46806: EQUAL
46807: IFFALSE 46817
// sReset := true ;
46809: LD_ADDR_EXP 50
46813: PUSH
46814: LD_INT 1
46816: ST_TO_ADDR
// if p3 = 105 then
46817: LD_VAR 0 3
46821: PUSH
46822: LD_INT 105
46824: EQUAL
46825: IFFALSE 46835
// sSun := true ;
46827: LD_ADDR_EXP 51
46831: PUSH
46832: LD_INT 1
46834: ST_TO_ADDR
// if p3 = 106 then
46835: LD_VAR 0 3
46839: PUSH
46840: LD_INT 106
46842: EQUAL
46843: IFFALSE 46853
// sTiger := true ;
46845: LD_ADDR_EXP 47
46849: PUSH
46850: LD_INT 1
46852: ST_TO_ADDR
// if p3 = 107 then
46853: LD_VAR 0 3
46857: PUSH
46858: LD_INT 107
46860: EQUAL
46861: IFFALSE 46871
// sBomb := true ;
46863: LD_ADDR_EXP 48
46867: PUSH
46868: LD_INT 1
46870: ST_TO_ADDR
// if p3 = 108 then
46871: LD_VAR 0 3
46875: PUSH
46876: LD_INT 108
46878: EQUAL
46879: IFFALSE 46889
// sWound := true ;
46881: LD_ADDR_EXP 56
46885: PUSH
46886: LD_INT 1
46888: ST_TO_ADDR
// if p3 = 109 then
46889: LD_VAR 0 3
46893: PUSH
46894: LD_INT 109
46896: EQUAL
46897: IFFALSE 46907
// sBetray := true ;
46899: LD_ADDR_EXP 60
46903: PUSH
46904: LD_INT 1
46906: ST_TO_ADDR
// if p3 = 110 then
46907: LD_VAR 0 3
46911: PUSH
46912: LD_INT 110
46914: EQUAL
46915: IFFALSE 46925
// sContamin := true ;
46917: LD_ADDR_EXP 61
46921: PUSH
46922: LD_INT 1
46924: ST_TO_ADDR
// if p3 = 111 then
46925: LD_VAR 0 3
46929: PUSH
46930: LD_INT 111
46932: EQUAL
46933: IFFALSE 46943
// sOil := true ;
46935: LD_ADDR_EXP 63
46939: PUSH
46940: LD_INT 1
46942: ST_TO_ADDR
// if p3 = 112 then
46943: LD_VAR 0 3
46947: PUSH
46948: LD_INT 112
46950: EQUAL
46951: IFFALSE 46961
// sStu := true ;
46953: LD_ADDR_EXP 67
46957: PUSH
46958: LD_INT 1
46960: ST_TO_ADDR
// if p3 = 113 then
46961: LD_VAR 0 3
46965: PUSH
46966: LD_INT 113
46968: EQUAL
46969: IFFALSE 46979
// sBazooka := true ;
46971: LD_ADDR_EXP 70
46975: PUSH
46976: LD_INT 1
46978: ST_TO_ADDR
// if p3 = 114 then
46979: LD_VAR 0 3
46983: PUSH
46984: LD_INT 114
46986: EQUAL
46987: IFFALSE 46997
// sMortar := true ;
46989: LD_ADDR_EXP 71
46993: PUSH
46994: LD_INT 1
46996: ST_TO_ADDR
// if p3 = 115 then
46997: LD_VAR 0 3
47001: PUSH
47002: LD_INT 115
47004: EQUAL
47005: IFFALSE 47015
// sRanger := true ;
47007: LD_ADDR_EXP 81
47011: PUSH
47012: LD_INT 1
47014: ST_TO_ADDR
// if p3 = 116 then
47015: LD_VAR 0 3
47019: PUSH
47020: LD_INT 116
47022: EQUAL
47023: IFFALSE 47033
// sComputer := true ;
47025: LD_ADDR_EXP 82
47029: PUSH
47030: LD_INT 1
47032: ST_TO_ADDR
// if p3 = 117 then
47033: LD_VAR 0 3
47037: PUSH
47038: LD_INT 117
47040: EQUAL
47041: IFFALSE 47051
// s30 := true ;
47043: LD_ADDR_EXP 83
47047: PUSH
47048: LD_INT 1
47050: ST_TO_ADDR
// if p3 = 118 then
47051: LD_VAR 0 3
47055: PUSH
47056: LD_INT 118
47058: EQUAL
47059: IFFALSE 47069
// s60 := true ;
47061: LD_ADDR_EXP 84
47065: PUSH
47066: LD_INT 1
47068: ST_TO_ADDR
// end ; if p2 = hack_mode then
47069: LD_VAR 0 2
47073: PUSH
47074: LD_INT 101
47076: EQUAL
47077: IFFALSE 47205
// begin case p3 of 1 :
47079: LD_VAR 0 3
47083: PUSH
47084: LD_INT 1
47086: DOUBLE
47087: EQUAL
47088: IFTRUE 47092
47090: GO 47099
47092: POP
// hHackUnlimitedResources ; 2 :
47093: CALL 59344 0 0
47097: GO 47205
47099: LD_INT 2
47101: DOUBLE
47102: EQUAL
47103: IFTRUE 47107
47105: GO 47114
47107: POP
// hHackSetLevel10 ; 3 :
47108: CALL 59477 0 0
47112: GO 47205
47114: LD_INT 3
47116: DOUBLE
47117: EQUAL
47118: IFTRUE 47122
47120: GO 47129
47122: POP
// hHackSetLevel10YourUnits ; 4 :
47123: CALL 59562 0 0
47127: GO 47205
47129: LD_INT 4
47131: DOUBLE
47132: EQUAL
47133: IFTRUE 47137
47135: GO 47144
47137: POP
// hHackInvincible ; 5 :
47138: CALL 60010 0 0
47142: GO 47205
47144: LD_INT 5
47146: DOUBLE
47147: EQUAL
47148: IFTRUE 47152
47150: GO 47159
47152: POP
// hHackInvisible ; 6 :
47153: CALL 60121 0 0
47157: GO 47205
47159: LD_INT 6
47161: DOUBLE
47162: EQUAL
47163: IFTRUE 47167
47165: GO 47174
47167: POP
// hHackChangeYourSide ; 7 :
47168: CALL 60178 0 0
47172: GO 47205
47174: LD_INT 7
47176: DOUBLE
47177: EQUAL
47178: IFTRUE 47182
47180: GO 47189
47182: POP
// hHackChangeUnitSide ; 8 :
47183: CALL 60220 0 0
47187: GO 47205
47189: LD_INT 8
47191: DOUBLE
47192: EQUAL
47193: IFTRUE 47197
47195: GO 47204
47197: POP
// hHackFog ; end ;
47198: CALL 60321 0 0
47202: GO 47205
47204: POP
// end ; if p2 = game_save_mode then
47205: LD_VAR 0 2
47209: PUSH
47210: LD_INT 102
47212: EQUAL
47213: IFFALSE 47268
// begin if p3 = 1 then
47215: LD_VAR 0 3
47219: PUSH
47220: LD_INT 1
47222: EQUAL
47223: IFFALSE 47235
// globalGameSaveCounter := p4 ;
47225: LD_ADDR_EXP 27
47229: PUSH
47230: LD_VAR 0 4
47234: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
47235: LD_VAR 0 3
47239: PUSH
47240: LD_INT 2
47242: EQUAL
47243: PUSH
47244: LD_EXP 27
47248: AND
47249: IFFALSE 47268
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47251: LD_STRING setGameSaveCounter(
47253: PUSH
47254: LD_EXP 27
47258: STR
47259: PUSH
47260: LD_STRING )
47262: STR
47263: PPUSH
47264: CALL_OW 559
// end ; end ;
47268: LD_VAR 0 7
47272: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
47273: LD_INT 0
47275: PPUSH
// streamModeActive := false ;
47276: LD_ADDR_EXP 28
47280: PUSH
47281: LD_INT 0
47283: ST_TO_ADDR
// normalCounter := 36 ;
47284: LD_ADDR_EXP 29
47288: PUSH
47289: LD_INT 36
47291: ST_TO_ADDR
// hardcoreCounter := 18 ;
47292: LD_ADDR_EXP 30
47296: PUSH
47297: LD_INT 18
47299: ST_TO_ADDR
// sRocket := false ;
47300: LD_ADDR_EXP 33
47304: PUSH
47305: LD_INT 0
47307: ST_TO_ADDR
// sSpeed := false ;
47308: LD_ADDR_EXP 32
47312: PUSH
47313: LD_INT 0
47315: ST_TO_ADDR
// sEngine := false ;
47316: LD_ADDR_EXP 34
47320: PUSH
47321: LD_INT 0
47323: ST_TO_ADDR
// sSpec := false ;
47324: LD_ADDR_EXP 31
47328: PUSH
47329: LD_INT 0
47331: ST_TO_ADDR
// sLevel := false ;
47332: LD_ADDR_EXP 35
47336: PUSH
47337: LD_INT 0
47339: ST_TO_ADDR
// sArmoury := false ;
47340: LD_ADDR_EXP 36
47344: PUSH
47345: LD_INT 0
47347: ST_TO_ADDR
// sRadar := false ;
47348: LD_ADDR_EXP 37
47352: PUSH
47353: LD_INT 0
47355: ST_TO_ADDR
// sBunker := false ;
47356: LD_ADDR_EXP 38
47360: PUSH
47361: LD_INT 0
47363: ST_TO_ADDR
// sHack := false ;
47364: LD_ADDR_EXP 39
47368: PUSH
47369: LD_INT 0
47371: ST_TO_ADDR
// sFire := false ;
47372: LD_ADDR_EXP 40
47376: PUSH
47377: LD_INT 0
47379: ST_TO_ADDR
// sRefresh := false ;
47380: LD_ADDR_EXP 41
47384: PUSH
47385: LD_INT 0
47387: ST_TO_ADDR
// sExp := false ;
47388: LD_ADDR_EXP 42
47392: PUSH
47393: LD_INT 0
47395: ST_TO_ADDR
// sDepot := false ;
47396: LD_ADDR_EXP 43
47400: PUSH
47401: LD_INT 0
47403: ST_TO_ADDR
// sFlag := false ;
47404: LD_ADDR_EXP 44
47408: PUSH
47409: LD_INT 0
47411: ST_TO_ADDR
// sKamikadze := false ;
47412: LD_ADDR_EXP 52
47416: PUSH
47417: LD_INT 0
47419: ST_TO_ADDR
// sTroll := false ;
47420: LD_ADDR_EXP 53
47424: PUSH
47425: LD_INT 0
47427: ST_TO_ADDR
// sSlow := false ;
47428: LD_ADDR_EXP 54
47432: PUSH
47433: LD_INT 0
47435: ST_TO_ADDR
// sLack := false ;
47436: LD_ADDR_EXP 55
47440: PUSH
47441: LD_INT 0
47443: ST_TO_ADDR
// sTank := false ;
47444: LD_ADDR_EXP 57
47448: PUSH
47449: LD_INT 0
47451: ST_TO_ADDR
// sRemote := false ;
47452: LD_ADDR_EXP 58
47456: PUSH
47457: LD_INT 0
47459: ST_TO_ADDR
// sPowell := false ;
47460: LD_ADDR_EXP 59
47464: PUSH
47465: LD_INT 0
47467: ST_TO_ADDR
// sTeleport := false ;
47468: LD_ADDR_EXP 62
47472: PUSH
47473: LD_INT 0
47475: ST_TO_ADDR
// sOilTower := false ;
47476: LD_ADDR_EXP 64
47480: PUSH
47481: LD_INT 0
47483: ST_TO_ADDR
// sShovel := false ;
47484: LD_ADDR_EXP 65
47488: PUSH
47489: LD_INT 0
47491: ST_TO_ADDR
// sSheik := false ;
47492: LD_ADDR_EXP 66
47496: PUSH
47497: LD_INT 0
47499: ST_TO_ADDR
// sEarthquake := false ;
47500: LD_ADDR_EXP 68
47504: PUSH
47505: LD_INT 0
47507: ST_TO_ADDR
// sAI := false ;
47508: LD_ADDR_EXP 69
47512: PUSH
47513: LD_INT 0
47515: ST_TO_ADDR
// sCargo := false ;
47516: LD_ADDR_EXP 72
47520: PUSH
47521: LD_INT 0
47523: ST_TO_ADDR
// sDLaser := false ;
47524: LD_ADDR_EXP 73
47528: PUSH
47529: LD_INT 0
47531: ST_TO_ADDR
// sExchange := false ;
47532: LD_ADDR_EXP 74
47536: PUSH
47537: LD_INT 0
47539: ST_TO_ADDR
// sFac := false ;
47540: LD_ADDR_EXP 75
47544: PUSH
47545: LD_INT 0
47547: ST_TO_ADDR
// sPower := false ;
47548: LD_ADDR_EXP 76
47552: PUSH
47553: LD_INT 0
47555: ST_TO_ADDR
// sRandom := false ;
47556: LD_ADDR_EXP 77
47560: PUSH
47561: LD_INT 0
47563: ST_TO_ADDR
// sShield := false ;
47564: LD_ADDR_EXP 78
47568: PUSH
47569: LD_INT 0
47571: ST_TO_ADDR
// sTime := false ;
47572: LD_ADDR_EXP 79
47576: PUSH
47577: LD_INT 0
47579: ST_TO_ADDR
// sTools := false ;
47580: LD_ADDR_EXP 80
47584: PUSH
47585: LD_INT 0
47587: ST_TO_ADDR
// sSold := false ;
47588: LD_ADDR_EXP 45
47592: PUSH
47593: LD_INT 0
47595: ST_TO_ADDR
// sDiff := false ;
47596: LD_ADDR_EXP 46
47600: PUSH
47601: LD_INT 0
47603: ST_TO_ADDR
// sFog := false ;
47604: LD_ADDR_EXP 49
47608: PUSH
47609: LD_INT 0
47611: ST_TO_ADDR
// sReset := false ;
47612: LD_ADDR_EXP 50
47616: PUSH
47617: LD_INT 0
47619: ST_TO_ADDR
// sSun := false ;
47620: LD_ADDR_EXP 51
47624: PUSH
47625: LD_INT 0
47627: ST_TO_ADDR
// sTiger := false ;
47628: LD_ADDR_EXP 47
47632: PUSH
47633: LD_INT 0
47635: ST_TO_ADDR
// sBomb := false ;
47636: LD_ADDR_EXP 48
47640: PUSH
47641: LD_INT 0
47643: ST_TO_ADDR
// sWound := false ;
47644: LD_ADDR_EXP 56
47648: PUSH
47649: LD_INT 0
47651: ST_TO_ADDR
// sBetray := false ;
47652: LD_ADDR_EXP 60
47656: PUSH
47657: LD_INT 0
47659: ST_TO_ADDR
// sContamin := false ;
47660: LD_ADDR_EXP 61
47664: PUSH
47665: LD_INT 0
47667: ST_TO_ADDR
// sOil := false ;
47668: LD_ADDR_EXP 63
47672: PUSH
47673: LD_INT 0
47675: ST_TO_ADDR
// sStu := false ;
47676: LD_ADDR_EXP 67
47680: PUSH
47681: LD_INT 0
47683: ST_TO_ADDR
// sBazooka := false ;
47684: LD_ADDR_EXP 70
47688: PUSH
47689: LD_INT 0
47691: ST_TO_ADDR
// sMortar := false ;
47692: LD_ADDR_EXP 71
47696: PUSH
47697: LD_INT 0
47699: ST_TO_ADDR
// sRanger := false ;
47700: LD_ADDR_EXP 81
47704: PUSH
47705: LD_INT 0
47707: ST_TO_ADDR
// sComputer := false ;
47708: LD_ADDR_EXP 82
47712: PUSH
47713: LD_INT 0
47715: ST_TO_ADDR
// s30 := false ;
47716: LD_ADDR_EXP 83
47720: PUSH
47721: LD_INT 0
47723: ST_TO_ADDR
// s60 := false ;
47724: LD_ADDR_EXP 84
47728: PUSH
47729: LD_INT 0
47731: ST_TO_ADDR
// end ;
47732: LD_VAR 0 1
47736: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47737: LD_INT 0
47739: PPUSH
47740: PPUSH
47741: PPUSH
47742: PPUSH
47743: PPUSH
47744: PPUSH
47745: PPUSH
// result := [ ] ;
47746: LD_ADDR_VAR 0 2
47750: PUSH
47751: EMPTY
47752: ST_TO_ADDR
// if campaign_id = 1 then
47753: LD_OWVAR 69
47757: PUSH
47758: LD_INT 1
47760: EQUAL
47761: IFFALSE 50927
// begin case mission_number of 1 :
47763: LD_OWVAR 70
47767: PUSH
47768: LD_INT 1
47770: DOUBLE
47771: EQUAL
47772: IFTRUE 47776
47774: GO 47852
47776: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47777: LD_ADDR_VAR 0 2
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: LD_INT 11
47790: PUSH
47791: LD_INT 12
47793: PUSH
47794: LD_INT 15
47796: PUSH
47797: LD_INT 16
47799: PUSH
47800: LD_INT 22
47802: PUSH
47803: LD_INT 23
47805: PUSH
47806: LD_INT 26
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 101
47822: PUSH
47823: LD_INT 102
47825: PUSH
47826: LD_INT 106
47828: PUSH
47829: LD_INT 116
47831: PUSH
47832: LD_INT 117
47834: PUSH
47835: LD_INT 118
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: ST_TO_ADDR
47850: GO 50925
47852: LD_INT 2
47854: DOUBLE
47855: EQUAL
47856: IFTRUE 47860
47858: GO 47944
47860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47861: LD_ADDR_VAR 0 2
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: LD_INT 4
47871: PUSH
47872: LD_INT 11
47874: PUSH
47875: LD_INT 12
47877: PUSH
47878: LD_INT 15
47880: PUSH
47881: LD_INT 16
47883: PUSH
47884: LD_INT 22
47886: PUSH
47887: LD_INT 23
47889: PUSH
47890: LD_INT 26
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 101
47906: PUSH
47907: LD_INT 102
47909: PUSH
47910: LD_INT 105
47912: PUSH
47913: LD_INT 106
47915: PUSH
47916: LD_INT 108
47918: PUSH
47919: LD_INT 116
47921: PUSH
47922: LD_INT 117
47924: PUSH
47925: LD_INT 118
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: ST_TO_ADDR
47942: GO 50925
47944: LD_INT 3
47946: DOUBLE
47947: EQUAL
47948: IFTRUE 47952
47950: GO 48040
47952: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47953: LD_ADDR_VAR 0 2
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 4
47963: PUSH
47964: LD_INT 5
47966: PUSH
47967: LD_INT 11
47969: PUSH
47970: LD_INT 12
47972: PUSH
47973: LD_INT 15
47975: PUSH
47976: LD_INT 16
47978: PUSH
47979: LD_INT 22
47981: PUSH
47982: LD_INT 26
47984: PUSH
47985: LD_INT 36
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 101
48002: PUSH
48003: LD_INT 102
48005: PUSH
48006: LD_INT 105
48008: PUSH
48009: LD_INT 106
48011: PUSH
48012: LD_INT 108
48014: PUSH
48015: LD_INT 116
48017: PUSH
48018: LD_INT 117
48020: PUSH
48021: LD_INT 118
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: ST_TO_ADDR
48038: GO 50925
48040: LD_INT 4
48042: DOUBLE
48043: EQUAL
48044: IFTRUE 48048
48046: GO 48144
48048: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48049: LD_ADDR_VAR 0 2
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 4
48059: PUSH
48060: LD_INT 5
48062: PUSH
48063: LD_INT 8
48065: PUSH
48066: LD_INT 11
48068: PUSH
48069: LD_INT 12
48071: PUSH
48072: LD_INT 15
48074: PUSH
48075: LD_INT 16
48077: PUSH
48078: LD_INT 22
48080: PUSH
48081: LD_INT 23
48083: PUSH
48084: LD_INT 26
48086: PUSH
48087: LD_INT 36
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 101
48106: PUSH
48107: LD_INT 102
48109: PUSH
48110: LD_INT 105
48112: PUSH
48113: LD_INT 106
48115: PUSH
48116: LD_INT 108
48118: PUSH
48119: LD_INT 116
48121: PUSH
48122: LD_INT 117
48124: PUSH
48125: LD_INT 118
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: ST_TO_ADDR
48142: GO 50925
48144: LD_INT 5
48146: DOUBLE
48147: EQUAL
48148: IFTRUE 48152
48150: GO 48264
48152: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48153: LD_ADDR_VAR 0 2
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: LD_INT 4
48163: PUSH
48164: LD_INT 5
48166: PUSH
48167: LD_INT 6
48169: PUSH
48170: LD_INT 8
48172: PUSH
48173: LD_INT 11
48175: PUSH
48176: LD_INT 12
48178: PUSH
48179: LD_INT 15
48181: PUSH
48182: LD_INT 16
48184: PUSH
48185: LD_INT 22
48187: PUSH
48188: LD_INT 23
48190: PUSH
48191: LD_INT 25
48193: PUSH
48194: LD_INT 26
48196: PUSH
48197: LD_INT 36
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 101
48218: PUSH
48219: LD_INT 102
48221: PUSH
48222: LD_INT 105
48224: PUSH
48225: LD_INT 106
48227: PUSH
48228: LD_INT 108
48230: PUSH
48231: LD_INT 109
48233: PUSH
48234: LD_INT 112
48236: PUSH
48237: LD_INT 116
48239: PUSH
48240: LD_INT 117
48242: PUSH
48243: LD_INT 118
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: ST_TO_ADDR
48262: GO 50925
48264: LD_INT 6
48266: DOUBLE
48267: EQUAL
48268: IFTRUE 48272
48270: GO 48404
48272: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48273: LD_ADDR_VAR 0 2
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 4
48283: PUSH
48284: LD_INT 5
48286: PUSH
48287: LD_INT 6
48289: PUSH
48290: LD_INT 8
48292: PUSH
48293: LD_INT 11
48295: PUSH
48296: LD_INT 12
48298: PUSH
48299: LD_INT 15
48301: PUSH
48302: LD_INT 16
48304: PUSH
48305: LD_INT 20
48307: PUSH
48308: LD_INT 21
48310: PUSH
48311: LD_INT 22
48313: PUSH
48314: LD_INT 23
48316: PUSH
48317: LD_INT 25
48319: PUSH
48320: LD_INT 26
48322: PUSH
48323: LD_INT 30
48325: PUSH
48326: LD_INT 31
48328: PUSH
48329: LD_INT 32
48331: PUSH
48332: LD_INT 36
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 101
48358: PUSH
48359: LD_INT 102
48361: PUSH
48362: LD_INT 105
48364: PUSH
48365: LD_INT 106
48367: PUSH
48368: LD_INT 108
48370: PUSH
48371: LD_INT 109
48373: PUSH
48374: LD_INT 112
48376: PUSH
48377: LD_INT 116
48379: PUSH
48380: LD_INT 117
48382: PUSH
48383: LD_INT 118
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: ST_TO_ADDR
48402: GO 50925
48404: LD_INT 7
48406: DOUBLE
48407: EQUAL
48408: IFTRUE 48412
48410: GO 48524
48412: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48413: LD_ADDR_VAR 0 2
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 4
48423: PUSH
48424: LD_INT 5
48426: PUSH
48427: LD_INT 7
48429: PUSH
48430: LD_INT 11
48432: PUSH
48433: LD_INT 12
48435: PUSH
48436: LD_INT 15
48438: PUSH
48439: LD_INT 16
48441: PUSH
48442: LD_INT 20
48444: PUSH
48445: LD_INT 21
48447: PUSH
48448: LD_INT 22
48450: PUSH
48451: LD_INT 23
48453: PUSH
48454: LD_INT 25
48456: PUSH
48457: LD_INT 26
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 101
48478: PUSH
48479: LD_INT 102
48481: PUSH
48482: LD_INT 103
48484: PUSH
48485: LD_INT 105
48487: PUSH
48488: LD_INT 106
48490: PUSH
48491: LD_INT 108
48493: PUSH
48494: LD_INT 112
48496: PUSH
48497: LD_INT 116
48499: PUSH
48500: LD_INT 117
48502: PUSH
48503: LD_INT 118
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: ST_TO_ADDR
48522: GO 50925
48524: LD_INT 8
48526: DOUBLE
48527: EQUAL
48528: IFTRUE 48532
48530: GO 48672
48532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48533: LD_ADDR_VAR 0 2
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: LD_INT 4
48543: PUSH
48544: LD_INT 5
48546: PUSH
48547: LD_INT 6
48549: PUSH
48550: LD_INT 7
48552: PUSH
48553: LD_INT 8
48555: PUSH
48556: LD_INT 11
48558: PUSH
48559: LD_INT 12
48561: PUSH
48562: LD_INT 15
48564: PUSH
48565: LD_INT 16
48567: PUSH
48568: LD_INT 20
48570: PUSH
48571: LD_INT 21
48573: PUSH
48574: LD_INT 22
48576: PUSH
48577: LD_INT 23
48579: PUSH
48580: LD_INT 25
48582: PUSH
48583: LD_INT 26
48585: PUSH
48586: LD_INT 30
48588: PUSH
48589: LD_INT 31
48591: PUSH
48592: LD_INT 32
48594: PUSH
48595: LD_INT 36
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 101
48622: PUSH
48623: LD_INT 102
48625: PUSH
48626: LD_INT 103
48628: PUSH
48629: LD_INT 105
48631: PUSH
48632: LD_INT 106
48634: PUSH
48635: LD_INT 108
48637: PUSH
48638: LD_INT 109
48640: PUSH
48641: LD_INT 112
48643: PUSH
48644: LD_INT 116
48646: PUSH
48647: LD_INT 117
48649: PUSH
48650: LD_INT 118
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: ST_TO_ADDR
48670: GO 50925
48672: LD_INT 9
48674: DOUBLE
48675: EQUAL
48676: IFTRUE 48680
48678: GO 48828
48680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48681: LD_ADDR_VAR 0 2
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 4
48691: PUSH
48692: LD_INT 5
48694: PUSH
48695: LD_INT 6
48697: PUSH
48698: LD_INT 7
48700: PUSH
48701: LD_INT 8
48703: PUSH
48704: LD_INT 11
48706: PUSH
48707: LD_INT 12
48709: PUSH
48710: LD_INT 15
48712: PUSH
48713: LD_INT 16
48715: PUSH
48716: LD_INT 20
48718: PUSH
48719: LD_INT 21
48721: PUSH
48722: LD_INT 22
48724: PUSH
48725: LD_INT 23
48727: PUSH
48728: LD_INT 25
48730: PUSH
48731: LD_INT 26
48733: PUSH
48734: LD_INT 28
48736: PUSH
48737: LD_INT 30
48739: PUSH
48740: LD_INT 31
48742: PUSH
48743: LD_INT 32
48745: PUSH
48746: LD_INT 36
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 101
48774: PUSH
48775: LD_INT 102
48777: PUSH
48778: LD_INT 103
48780: PUSH
48781: LD_INT 105
48783: PUSH
48784: LD_INT 106
48786: PUSH
48787: LD_INT 108
48789: PUSH
48790: LD_INT 109
48792: PUSH
48793: LD_INT 112
48795: PUSH
48796: LD_INT 114
48798: PUSH
48799: LD_INT 116
48801: PUSH
48802: LD_INT 117
48804: PUSH
48805: LD_INT 118
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: ST_TO_ADDR
48826: GO 50925
48828: LD_INT 10
48830: DOUBLE
48831: EQUAL
48832: IFTRUE 48836
48834: GO 49032
48836: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48837: LD_ADDR_VAR 0 2
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: LD_INT 4
48847: PUSH
48848: LD_INT 5
48850: PUSH
48851: LD_INT 6
48853: PUSH
48854: LD_INT 7
48856: PUSH
48857: LD_INT 8
48859: PUSH
48860: LD_INT 9
48862: PUSH
48863: LD_INT 10
48865: PUSH
48866: LD_INT 11
48868: PUSH
48869: LD_INT 12
48871: PUSH
48872: LD_INT 13
48874: PUSH
48875: LD_INT 14
48877: PUSH
48878: LD_INT 15
48880: PUSH
48881: LD_INT 16
48883: PUSH
48884: LD_INT 17
48886: PUSH
48887: LD_INT 18
48889: PUSH
48890: LD_INT 19
48892: PUSH
48893: LD_INT 20
48895: PUSH
48896: LD_INT 21
48898: PUSH
48899: LD_INT 22
48901: PUSH
48902: LD_INT 23
48904: PUSH
48905: LD_INT 24
48907: PUSH
48908: LD_INT 25
48910: PUSH
48911: LD_INT 26
48913: PUSH
48914: LD_INT 28
48916: PUSH
48917: LD_INT 30
48919: PUSH
48920: LD_INT 31
48922: PUSH
48923: LD_INT 32
48925: PUSH
48926: LD_INT 36
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 101
48962: PUSH
48963: LD_INT 102
48965: PUSH
48966: LD_INT 103
48968: PUSH
48969: LD_INT 104
48971: PUSH
48972: LD_INT 105
48974: PUSH
48975: LD_INT 106
48977: PUSH
48978: LD_INT 107
48980: PUSH
48981: LD_INT 108
48983: PUSH
48984: LD_INT 109
48986: PUSH
48987: LD_INT 110
48989: PUSH
48990: LD_INT 111
48992: PUSH
48993: LD_INT 112
48995: PUSH
48996: LD_INT 114
48998: PUSH
48999: LD_INT 116
49001: PUSH
49002: LD_INT 117
49004: PUSH
49005: LD_INT 118
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: ST_TO_ADDR
49030: GO 50925
49032: LD_INT 11
49034: DOUBLE
49035: EQUAL
49036: IFTRUE 49040
49038: GO 49244
49040: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49041: LD_ADDR_VAR 0 2
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: LD_INT 4
49054: PUSH
49055: LD_INT 5
49057: PUSH
49058: LD_INT 6
49060: PUSH
49061: LD_INT 7
49063: PUSH
49064: LD_INT 8
49066: PUSH
49067: LD_INT 9
49069: PUSH
49070: LD_INT 10
49072: PUSH
49073: LD_INT 11
49075: PUSH
49076: LD_INT 12
49078: PUSH
49079: LD_INT 13
49081: PUSH
49082: LD_INT 14
49084: PUSH
49085: LD_INT 15
49087: PUSH
49088: LD_INT 16
49090: PUSH
49091: LD_INT 17
49093: PUSH
49094: LD_INT 18
49096: PUSH
49097: LD_INT 19
49099: PUSH
49100: LD_INT 20
49102: PUSH
49103: LD_INT 21
49105: PUSH
49106: LD_INT 22
49108: PUSH
49109: LD_INT 23
49111: PUSH
49112: LD_INT 24
49114: PUSH
49115: LD_INT 25
49117: PUSH
49118: LD_INT 26
49120: PUSH
49121: LD_INT 28
49123: PUSH
49124: LD_INT 30
49126: PUSH
49127: LD_INT 31
49129: PUSH
49130: LD_INT 32
49132: PUSH
49133: LD_INT 34
49135: PUSH
49136: LD_INT 36
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 101
49174: PUSH
49175: LD_INT 102
49177: PUSH
49178: LD_INT 103
49180: PUSH
49181: LD_INT 104
49183: PUSH
49184: LD_INT 105
49186: PUSH
49187: LD_INT 106
49189: PUSH
49190: LD_INT 107
49192: PUSH
49193: LD_INT 108
49195: PUSH
49196: LD_INT 109
49198: PUSH
49199: LD_INT 110
49201: PUSH
49202: LD_INT 111
49204: PUSH
49205: LD_INT 112
49207: PUSH
49208: LD_INT 114
49210: PUSH
49211: LD_INT 116
49213: PUSH
49214: LD_INT 117
49216: PUSH
49217: LD_INT 118
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: ST_TO_ADDR
49242: GO 50925
49244: LD_INT 12
49246: DOUBLE
49247: EQUAL
49248: IFTRUE 49252
49250: GO 49472
49252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49253: LD_ADDR_VAR 0 2
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 4
49269: PUSH
49270: LD_INT 5
49272: PUSH
49273: LD_INT 6
49275: PUSH
49276: LD_INT 7
49278: PUSH
49279: LD_INT 8
49281: PUSH
49282: LD_INT 9
49284: PUSH
49285: LD_INT 10
49287: PUSH
49288: LD_INT 11
49290: PUSH
49291: LD_INT 12
49293: PUSH
49294: LD_INT 13
49296: PUSH
49297: LD_INT 14
49299: PUSH
49300: LD_INT 15
49302: PUSH
49303: LD_INT 16
49305: PUSH
49306: LD_INT 17
49308: PUSH
49309: LD_INT 18
49311: PUSH
49312: LD_INT 19
49314: PUSH
49315: LD_INT 20
49317: PUSH
49318: LD_INT 21
49320: PUSH
49321: LD_INT 22
49323: PUSH
49324: LD_INT 23
49326: PUSH
49327: LD_INT 24
49329: PUSH
49330: LD_INT 25
49332: PUSH
49333: LD_INT 26
49335: PUSH
49336: LD_INT 27
49338: PUSH
49339: LD_INT 28
49341: PUSH
49342: LD_INT 30
49344: PUSH
49345: LD_INT 31
49347: PUSH
49348: LD_INT 32
49350: PUSH
49351: LD_INT 33
49353: PUSH
49354: LD_INT 34
49356: PUSH
49357: LD_INT 36
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 101
49398: PUSH
49399: LD_INT 102
49401: PUSH
49402: LD_INT 103
49404: PUSH
49405: LD_INT 104
49407: PUSH
49408: LD_INT 105
49410: PUSH
49411: LD_INT 106
49413: PUSH
49414: LD_INT 107
49416: PUSH
49417: LD_INT 108
49419: PUSH
49420: LD_INT 109
49422: PUSH
49423: LD_INT 110
49425: PUSH
49426: LD_INT 111
49428: PUSH
49429: LD_INT 112
49431: PUSH
49432: LD_INT 113
49434: PUSH
49435: LD_INT 114
49437: PUSH
49438: LD_INT 116
49440: PUSH
49441: LD_INT 117
49443: PUSH
49444: LD_INT 118
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: ST_TO_ADDR
49470: GO 50925
49472: LD_INT 13
49474: DOUBLE
49475: EQUAL
49476: IFTRUE 49480
49478: GO 49688
49480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49481: LD_ADDR_VAR 0 2
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 4
49497: PUSH
49498: LD_INT 5
49500: PUSH
49501: LD_INT 8
49503: PUSH
49504: LD_INT 9
49506: PUSH
49507: LD_INT 10
49509: PUSH
49510: LD_INT 11
49512: PUSH
49513: LD_INT 12
49515: PUSH
49516: LD_INT 14
49518: PUSH
49519: LD_INT 15
49521: PUSH
49522: LD_INT 16
49524: PUSH
49525: LD_INT 17
49527: PUSH
49528: LD_INT 18
49530: PUSH
49531: LD_INT 19
49533: PUSH
49534: LD_INT 20
49536: PUSH
49537: LD_INT 21
49539: PUSH
49540: LD_INT 22
49542: PUSH
49543: LD_INT 23
49545: PUSH
49546: LD_INT 24
49548: PUSH
49549: LD_INT 25
49551: PUSH
49552: LD_INT 26
49554: PUSH
49555: LD_INT 27
49557: PUSH
49558: LD_INT 28
49560: PUSH
49561: LD_INT 30
49563: PUSH
49564: LD_INT 31
49566: PUSH
49567: LD_INT 32
49569: PUSH
49570: LD_INT 33
49572: PUSH
49573: LD_INT 34
49575: PUSH
49576: LD_INT 36
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 101
49614: PUSH
49615: LD_INT 102
49617: PUSH
49618: LD_INT 103
49620: PUSH
49621: LD_INT 104
49623: PUSH
49624: LD_INT 105
49626: PUSH
49627: LD_INT 106
49629: PUSH
49630: LD_INT 107
49632: PUSH
49633: LD_INT 108
49635: PUSH
49636: LD_INT 109
49638: PUSH
49639: LD_INT 110
49641: PUSH
49642: LD_INT 111
49644: PUSH
49645: LD_INT 112
49647: PUSH
49648: LD_INT 113
49650: PUSH
49651: LD_INT 114
49653: PUSH
49654: LD_INT 116
49656: PUSH
49657: LD_INT 117
49659: PUSH
49660: LD_INT 118
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: ST_TO_ADDR
49686: GO 50925
49688: LD_INT 14
49690: DOUBLE
49691: EQUAL
49692: IFTRUE 49696
49694: GO 49920
49696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49697: LD_ADDR_VAR 0 2
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: LD_INT 4
49713: PUSH
49714: LD_INT 5
49716: PUSH
49717: LD_INT 6
49719: PUSH
49720: LD_INT 7
49722: PUSH
49723: LD_INT 8
49725: PUSH
49726: LD_INT 9
49728: PUSH
49729: LD_INT 10
49731: PUSH
49732: LD_INT 11
49734: PUSH
49735: LD_INT 12
49737: PUSH
49738: LD_INT 13
49740: PUSH
49741: LD_INT 14
49743: PUSH
49744: LD_INT 15
49746: PUSH
49747: LD_INT 16
49749: PUSH
49750: LD_INT 17
49752: PUSH
49753: LD_INT 18
49755: PUSH
49756: LD_INT 19
49758: PUSH
49759: LD_INT 20
49761: PUSH
49762: LD_INT 21
49764: PUSH
49765: LD_INT 22
49767: PUSH
49768: LD_INT 23
49770: PUSH
49771: LD_INT 24
49773: PUSH
49774: LD_INT 25
49776: PUSH
49777: LD_INT 26
49779: PUSH
49780: LD_INT 27
49782: PUSH
49783: LD_INT 28
49785: PUSH
49786: LD_INT 29
49788: PUSH
49789: LD_INT 30
49791: PUSH
49792: LD_INT 31
49794: PUSH
49795: LD_INT 32
49797: PUSH
49798: LD_INT 33
49800: PUSH
49801: LD_INT 34
49803: PUSH
49804: LD_INT 36
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 101
49846: PUSH
49847: LD_INT 102
49849: PUSH
49850: LD_INT 103
49852: PUSH
49853: LD_INT 104
49855: PUSH
49856: LD_INT 105
49858: PUSH
49859: LD_INT 106
49861: PUSH
49862: LD_INT 107
49864: PUSH
49865: LD_INT 108
49867: PUSH
49868: LD_INT 109
49870: PUSH
49871: LD_INT 110
49873: PUSH
49874: LD_INT 111
49876: PUSH
49877: LD_INT 112
49879: PUSH
49880: LD_INT 113
49882: PUSH
49883: LD_INT 114
49885: PUSH
49886: LD_INT 116
49888: PUSH
49889: LD_INT 117
49891: PUSH
49892: LD_INT 118
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: ST_TO_ADDR
49918: GO 50925
49920: LD_INT 15
49922: DOUBLE
49923: EQUAL
49924: IFTRUE 49928
49926: GO 50152
49928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49929: LD_ADDR_VAR 0 2
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: LD_INT 4
49945: PUSH
49946: LD_INT 5
49948: PUSH
49949: LD_INT 6
49951: PUSH
49952: LD_INT 7
49954: PUSH
49955: LD_INT 8
49957: PUSH
49958: LD_INT 9
49960: PUSH
49961: LD_INT 10
49963: PUSH
49964: LD_INT 11
49966: PUSH
49967: LD_INT 12
49969: PUSH
49970: LD_INT 13
49972: PUSH
49973: LD_INT 14
49975: PUSH
49976: LD_INT 15
49978: PUSH
49979: LD_INT 16
49981: PUSH
49982: LD_INT 17
49984: PUSH
49985: LD_INT 18
49987: PUSH
49988: LD_INT 19
49990: PUSH
49991: LD_INT 20
49993: PUSH
49994: LD_INT 21
49996: PUSH
49997: LD_INT 22
49999: PUSH
50000: LD_INT 23
50002: PUSH
50003: LD_INT 24
50005: PUSH
50006: LD_INT 25
50008: PUSH
50009: LD_INT 26
50011: PUSH
50012: LD_INT 27
50014: PUSH
50015: LD_INT 28
50017: PUSH
50018: LD_INT 29
50020: PUSH
50021: LD_INT 30
50023: PUSH
50024: LD_INT 31
50026: PUSH
50027: LD_INT 32
50029: PUSH
50030: LD_INT 33
50032: PUSH
50033: LD_INT 34
50035: PUSH
50036: LD_INT 36
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 101
50078: PUSH
50079: LD_INT 102
50081: PUSH
50082: LD_INT 103
50084: PUSH
50085: LD_INT 104
50087: PUSH
50088: LD_INT 105
50090: PUSH
50091: LD_INT 106
50093: PUSH
50094: LD_INT 107
50096: PUSH
50097: LD_INT 108
50099: PUSH
50100: LD_INT 109
50102: PUSH
50103: LD_INT 110
50105: PUSH
50106: LD_INT 111
50108: PUSH
50109: LD_INT 112
50111: PUSH
50112: LD_INT 113
50114: PUSH
50115: LD_INT 114
50117: PUSH
50118: LD_INT 116
50120: PUSH
50121: LD_INT 117
50123: PUSH
50124: LD_INT 118
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: ST_TO_ADDR
50150: GO 50925
50152: LD_INT 16
50154: DOUBLE
50155: EQUAL
50156: IFTRUE 50160
50158: GO 50296
50160: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50161: LD_ADDR_VAR 0 2
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 4
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: LD_INT 7
50177: PUSH
50178: LD_INT 11
50180: PUSH
50181: LD_INT 12
50183: PUSH
50184: LD_INT 15
50186: PUSH
50187: LD_INT 16
50189: PUSH
50190: LD_INT 20
50192: PUSH
50193: LD_INT 21
50195: PUSH
50196: LD_INT 22
50198: PUSH
50199: LD_INT 23
50201: PUSH
50202: LD_INT 25
50204: PUSH
50205: LD_INT 26
50207: PUSH
50208: LD_INT 30
50210: PUSH
50211: LD_INT 31
50213: PUSH
50214: LD_INT 32
50216: PUSH
50217: LD_INT 33
50219: PUSH
50220: LD_INT 34
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 101
50246: PUSH
50247: LD_INT 102
50249: PUSH
50250: LD_INT 103
50252: PUSH
50253: LD_INT 106
50255: PUSH
50256: LD_INT 108
50258: PUSH
50259: LD_INT 112
50261: PUSH
50262: LD_INT 113
50264: PUSH
50265: LD_INT 114
50267: PUSH
50268: LD_INT 116
50270: PUSH
50271: LD_INT 117
50273: PUSH
50274: LD_INT 118
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: ST_TO_ADDR
50294: GO 50925
50296: LD_INT 17
50298: DOUBLE
50299: EQUAL
50300: IFTRUE 50304
50302: GO 50528
50304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50305: LD_ADDR_VAR 0 2
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: LD_INT 3
50318: PUSH
50319: LD_INT 4
50321: PUSH
50322: LD_INT 5
50324: PUSH
50325: LD_INT 6
50327: PUSH
50328: LD_INT 7
50330: PUSH
50331: LD_INT 8
50333: PUSH
50334: LD_INT 9
50336: PUSH
50337: LD_INT 10
50339: PUSH
50340: LD_INT 11
50342: PUSH
50343: LD_INT 12
50345: PUSH
50346: LD_INT 13
50348: PUSH
50349: LD_INT 14
50351: PUSH
50352: LD_INT 15
50354: PUSH
50355: LD_INT 16
50357: PUSH
50358: LD_INT 17
50360: PUSH
50361: LD_INT 18
50363: PUSH
50364: LD_INT 19
50366: PUSH
50367: LD_INT 20
50369: PUSH
50370: LD_INT 21
50372: PUSH
50373: LD_INT 22
50375: PUSH
50376: LD_INT 23
50378: PUSH
50379: LD_INT 24
50381: PUSH
50382: LD_INT 25
50384: PUSH
50385: LD_INT 26
50387: PUSH
50388: LD_INT 27
50390: PUSH
50391: LD_INT 28
50393: PUSH
50394: LD_INT 29
50396: PUSH
50397: LD_INT 30
50399: PUSH
50400: LD_INT 31
50402: PUSH
50403: LD_INT 32
50405: PUSH
50406: LD_INT 33
50408: PUSH
50409: LD_INT 34
50411: PUSH
50412: LD_INT 36
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 101
50454: PUSH
50455: LD_INT 102
50457: PUSH
50458: LD_INT 103
50460: PUSH
50461: LD_INT 104
50463: PUSH
50464: LD_INT 105
50466: PUSH
50467: LD_INT 106
50469: PUSH
50470: LD_INT 107
50472: PUSH
50473: LD_INT 108
50475: PUSH
50476: LD_INT 109
50478: PUSH
50479: LD_INT 110
50481: PUSH
50482: LD_INT 111
50484: PUSH
50485: LD_INT 112
50487: PUSH
50488: LD_INT 113
50490: PUSH
50491: LD_INT 114
50493: PUSH
50494: LD_INT 116
50496: PUSH
50497: LD_INT 117
50499: PUSH
50500: LD_INT 118
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: ST_TO_ADDR
50526: GO 50925
50528: LD_INT 18
50530: DOUBLE
50531: EQUAL
50532: IFTRUE 50536
50534: GO 50684
50536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50537: LD_ADDR_VAR 0 2
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 4
50547: PUSH
50548: LD_INT 5
50550: PUSH
50551: LD_INT 7
50553: PUSH
50554: LD_INT 11
50556: PUSH
50557: LD_INT 12
50559: PUSH
50560: LD_INT 15
50562: PUSH
50563: LD_INT 16
50565: PUSH
50566: LD_INT 20
50568: PUSH
50569: LD_INT 21
50571: PUSH
50572: LD_INT 22
50574: PUSH
50575: LD_INT 23
50577: PUSH
50578: LD_INT 25
50580: PUSH
50581: LD_INT 26
50583: PUSH
50584: LD_INT 30
50586: PUSH
50587: LD_INT 31
50589: PUSH
50590: LD_INT 32
50592: PUSH
50593: LD_INT 33
50595: PUSH
50596: LD_INT 34
50598: PUSH
50599: LD_INT 35
50601: PUSH
50602: LD_INT 36
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 101
50630: PUSH
50631: LD_INT 102
50633: PUSH
50634: LD_INT 103
50636: PUSH
50637: LD_INT 106
50639: PUSH
50640: LD_INT 108
50642: PUSH
50643: LD_INT 112
50645: PUSH
50646: LD_INT 113
50648: PUSH
50649: LD_INT 114
50651: PUSH
50652: LD_INT 115
50654: PUSH
50655: LD_INT 116
50657: PUSH
50658: LD_INT 117
50660: PUSH
50661: LD_INT 118
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: ST_TO_ADDR
50682: GO 50925
50684: LD_INT 19
50686: DOUBLE
50687: EQUAL
50688: IFTRUE 50692
50690: GO 50924
50692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50693: LD_ADDR_VAR 0 2
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: LD_INT 4
50709: PUSH
50710: LD_INT 5
50712: PUSH
50713: LD_INT 6
50715: PUSH
50716: LD_INT 7
50718: PUSH
50719: LD_INT 8
50721: PUSH
50722: LD_INT 9
50724: PUSH
50725: LD_INT 10
50727: PUSH
50728: LD_INT 11
50730: PUSH
50731: LD_INT 12
50733: PUSH
50734: LD_INT 13
50736: PUSH
50737: LD_INT 14
50739: PUSH
50740: LD_INT 15
50742: PUSH
50743: LD_INT 16
50745: PUSH
50746: LD_INT 17
50748: PUSH
50749: LD_INT 18
50751: PUSH
50752: LD_INT 19
50754: PUSH
50755: LD_INT 20
50757: PUSH
50758: LD_INT 21
50760: PUSH
50761: LD_INT 22
50763: PUSH
50764: LD_INT 23
50766: PUSH
50767: LD_INT 24
50769: PUSH
50770: LD_INT 25
50772: PUSH
50773: LD_INT 26
50775: PUSH
50776: LD_INT 27
50778: PUSH
50779: LD_INT 28
50781: PUSH
50782: LD_INT 29
50784: PUSH
50785: LD_INT 30
50787: PUSH
50788: LD_INT 31
50790: PUSH
50791: LD_INT 32
50793: PUSH
50794: LD_INT 33
50796: PUSH
50797: LD_INT 34
50799: PUSH
50800: LD_INT 35
50802: PUSH
50803: LD_INT 36
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 101
50846: PUSH
50847: LD_INT 102
50849: PUSH
50850: LD_INT 103
50852: PUSH
50853: LD_INT 104
50855: PUSH
50856: LD_INT 105
50858: PUSH
50859: LD_INT 106
50861: PUSH
50862: LD_INT 107
50864: PUSH
50865: LD_INT 108
50867: PUSH
50868: LD_INT 109
50870: PUSH
50871: LD_INT 110
50873: PUSH
50874: LD_INT 111
50876: PUSH
50877: LD_INT 112
50879: PUSH
50880: LD_INT 113
50882: PUSH
50883: LD_INT 114
50885: PUSH
50886: LD_INT 115
50888: PUSH
50889: LD_INT 116
50891: PUSH
50892: LD_INT 117
50894: PUSH
50895: LD_INT 118
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: ST_TO_ADDR
50922: GO 50925
50924: POP
// end else
50925: GO 51156
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50927: LD_ADDR_VAR 0 2
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: LD_INT 5
50946: PUSH
50947: LD_INT 6
50949: PUSH
50950: LD_INT 7
50952: PUSH
50953: LD_INT 8
50955: PUSH
50956: LD_INT 9
50958: PUSH
50959: LD_INT 10
50961: PUSH
50962: LD_INT 11
50964: PUSH
50965: LD_INT 12
50967: PUSH
50968: LD_INT 13
50970: PUSH
50971: LD_INT 14
50973: PUSH
50974: LD_INT 15
50976: PUSH
50977: LD_INT 16
50979: PUSH
50980: LD_INT 17
50982: PUSH
50983: LD_INT 18
50985: PUSH
50986: LD_INT 19
50988: PUSH
50989: LD_INT 20
50991: PUSH
50992: LD_INT 21
50994: PUSH
50995: LD_INT 22
50997: PUSH
50998: LD_INT 23
51000: PUSH
51001: LD_INT 24
51003: PUSH
51004: LD_INT 25
51006: PUSH
51007: LD_INT 26
51009: PUSH
51010: LD_INT 27
51012: PUSH
51013: LD_INT 28
51015: PUSH
51016: LD_INT 29
51018: PUSH
51019: LD_INT 30
51021: PUSH
51022: LD_INT 31
51024: PUSH
51025: LD_INT 32
51027: PUSH
51028: LD_INT 33
51030: PUSH
51031: LD_INT 34
51033: PUSH
51034: LD_INT 35
51036: PUSH
51037: LD_INT 36
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 101
51080: PUSH
51081: LD_INT 102
51083: PUSH
51084: LD_INT 103
51086: PUSH
51087: LD_INT 104
51089: PUSH
51090: LD_INT 105
51092: PUSH
51093: LD_INT 106
51095: PUSH
51096: LD_INT 107
51098: PUSH
51099: LD_INT 108
51101: PUSH
51102: LD_INT 109
51104: PUSH
51105: LD_INT 110
51107: PUSH
51108: LD_INT 111
51110: PUSH
51111: LD_INT 112
51113: PUSH
51114: LD_INT 113
51116: PUSH
51117: LD_INT 114
51119: PUSH
51120: LD_INT 115
51122: PUSH
51123: LD_INT 116
51125: PUSH
51126: LD_INT 117
51128: PUSH
51129: LD_INT 118
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: ST_TO_ADDR
// if result then
51156: LD_VAR 0 2
51160: IFFALSE 51946
// begin normal :=  ;
51162: LD_ADDR_VAR 0 5
51166: PUSH
51167: LD_STRING 
51169: ST_TO_ADDR
// hardcore :=  ;
51170: LD_ADDR_VAR 0 6
51174: PUSH
51175: LD_STRING 
51177: ST_TO_ADDR
// active :=  ;
51178: LD_ADDR_VAR 0 7
51182: PUSH
51183: LD_STRING 
51185: ST_TO_ADDR
// for i = 1 to normalCounter do
51186: LD_ADDR_VAR 0 8
51190: PUSH
51191: DOUBLE
51192: LD_INT 1
51194: DEC
51195: ST_TO_ADDR
51196: LD_EXP 29
51200: PUSH
51201: FOR_TO
51202: IFFALSE 51303
// begin tmp := 0 ;
51204: LD_ADDR_VAR 0 3
51208: PUSH
51209: LD_STRING 0
51211: ST_TO_ADDR
// if result [ 1 ] then
51212: LD_VAR 0 2
51216: PUSH
51217: LD_INT 1
51219: ARRAY
51220: IFFALSE 51285
// if result [ 1 ] [ 1 ] = i then
51222: LD_VAR 0 2
51226: PUSH
51227: LD_INT 1
51229: ARRAY
51230: PUSH
51231: LD_INT 1
51233: ARRAY
51234: PUSH
51235: LD_VAR 0 8
51239: EQUAL
51240: IFFALSE 51285
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51242: LD_ADDR_VAR 0 2
51246: PUSH
51247: LD_VAR 0 2
51251: PPUSH
51252: LD_INT 1
51254: PPUSH
51255: LD_VAR 0 2
51259: PUSH
51260: LD_INT 1
51262: ARRAY
51263: PPUSH
51264: LD_INT 1
51266: PPUSH
51267: CALL_OW 3
51271: PPUSH
51272: CALL_OW 1
51276: ST_TO_ADDR
// tmp := 1 ;
51277: LD_ADDR_VAR 0 3
51281: PUSH
51282: LD_STRING 1
51284: ST_TO_ADDR
// end ; normal := normal & tmp ;
51285: LD_ADDR_VAR 0 5
51289: PUSH
51290: LD_VAR 0 5
51294: PUSH
51295: LD_VAR 0 3
51299: STR
51300: ST_TO_ADDR
// end ;
51301: GO 51201
51303: POP
51304: POP
// for i = 1 to hardcoreCounter do
51305: LD_ADDR_VAR 0 8
51309: PUSH
51310: DOUBLE
51311: LD_INT 1
51313: DEC
51314: ST_TO_ADDR
51315: LD_EXP 30
51319: PUSH
51320: FOR_TO
51321: IFFALSE 51426
// begin tmp := 0 ;
51323: LD_ADDR_VAR 0 3
51327: PUSH
51328: LD_STRING 0
51330: ST_TO_ADDR
// if result [ 2 ] then
51331: LD_VAR 0 2
51335: PUSH
51336: LD_INT 2
51338: ARRAY
51339: IFFALSE 51408
// if result [ 2 ] [ 1 ] = 100 + i then
51341: LD_VAR 0 2
51345: PUSH
51346: LD_INT 2
51348: ARRAY
51349: PUSH
51350: LD_INT 1
51352: ARRAY
51353: PUSH
51354: LD_INT 100
51356: PUSH
51357: LD_VAR 0 8
51361: PLUS
51362: EQUAL
51363: IFFALSE 51408
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51365: LD_ADDR_VAR 0 2
51369: PUSH
51370: LD_VAR 0 2
51374: PPUSH
51375: LD_INT 2
51377: PPUSH
51378: LD_VAR 0 2
51382: PUSH
51383: LD_INT 2
51385: ARRAY
51386: PPUSH
51387: LD_INT 1
51389: PPUSH
51390: CALL_OW 3
51394: PPUSH
51395: CALL_OW 1
51399: ST_TO_ADDR
// tmp := 1 ;
51400: LD_ADDR_VAR 0 3
51404: PUSH
51405: LD_STRING 1
51407: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51408: LD_ADDR_VAR 0 6
51412: PUSH
51413: LD_VAR 0 6
51417: PUSH
51418: LD_VAR 0 3
51422: STR
51423: ST_TO_ADDR
// end ;
51424: GO 51320
51426: POP
51427: POP
// if isGameLoad then
51428: LD_VAR 0 1
51432: IFFALSE 51907
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51434: LD_ADDR_VAR 0 4
51438: PUSH
51439: LD_EXP 33
51443: PUSH
51444: LD_EXP 32
51448: PUSH
51449: LD_EXP 34
51453: PUSH
51454: LD_EXP 31
51458: PUSH
51459: LD_EXP 35
51463: PUSH
51464: LD_EXP 36
51468: PUSH
51469: LD_EXP 37
51473: PUSH
51474: LD_EXP 38
51478: PUSH
51479: LD_EXP 39
51483: PUSH
51484: LD_EXP 40
51488: PUSH
51489: LD_EXP 41
51493: PUSH
51494: LD_EXP 42
51498: PUSH
51499: LD_EXP 43
51503: PUSH
51504: LD_EXP 44
51508: PUSH
51509: LD_EXP 52
51513: PUSH
51514: LD_EXP 53
51518: PUSH
51519: LD_EXP 54
51523: PUSH
51524: LD_EXP 55
51528: PUSH
51529: LD_EXP 57
51533: PUSH
51534: LD_EXP 58
51538: PUSH
51539: LD_EXP 59
51543: PUSH
51544: LD_EXP 62
51548: PUSH
51549: LD_EXP 64
51553: PUSH
51554: LD_EXP 65
51558: PUSH
51559: LD_EXP 66
51563: PUSH
51564: LD_EXP 68
51568: PUSH
51569: LD_EXP 69
51573: PUSH
51574: LD_EXP 72
51578: PUSH
51579: LD_EXP 73
51583: PUSH
51584: LD_EXP 74
51588: PUSH
51589: LD_EXP 75
51593: PUSH
51594: LD_EXP 76
51598: PUSH
51599: LD_EXP 77
51603: PUSH
51604: LD_EXP 78
51608: PUSH
51609: LD_EXP 79
51613: PUSH
51614: LD_EXP 80
51618: PUSH
51619: LD_EXP 45
51623: PUSH
51624: LD_EXP 46
51628: PUSH
51629: LD_EXP 49
51633: PUSH
51634: LD_EXP 50
51638: PUSH
51639: LD_EXP 51
51643: PUSH
51644: LD_EXP 47
51648: PUSH
51649: LD_EXP 48
51653: PUSH
51654: LD_EXP 56
51658: PUSH
51659: LD_EXP 60
51663: PUSH
51664: LD_EXP 61
51668: PUSH
51669: LD_EXP 63
51673: PUSH
51674: LD_EXP 67
51678: PUSH
51679: LD_EXP 70
51683: PUSH
51684: LD_EXP 71
51688: PUSH
51689: LD_EXP 81
51693: PUSH
51694: LD_EXP 82
51698: PUSH
51699: LD_EXP 83
51703: PUSH
51704: LD_EXP 84
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// tmp :=  ;
51765: LD_ADDR_VAR 0 3
51769: PUSH
51770: LD_STRING 
51772: ST_TO_ADDR
// for i = 1 to normalCounter do
51773: LD_ADDR_VAR 0 8
51777: PUSH
51778: DOUBLE
51779: LD_INT 1
51781: DEC
51782: ST_TO_ADDR
51783: LD_EXP 29
51787: PUSH
51788: FOR_TO
51789: IFFALSE 51825
// begin if flags [ i ] then
51791: LD_VAR 0 4
51795: PUSH
51796: LD_VAR 0 8
51800: ARRAY
51801: IFFALSE 51823
// tmp := tmp & i & ; ;
51803: LD_ADDR_VAR 0 3
51807: PUSH
51808: LD_VAR 0 3
51812: PUSH
51813: LD_VAR 0 8
51817: STR
51818: PUSH
51819: LD_STRING ;
51821: STR
51822: ST_TO_ADDR
// end ;
51823: GO 51788
51825: POP
51826: POP
// for i = 1 to hardcoreCounter do
51827: LD_ADDR_VAR 0 8
51831: PUSH
51832: DOUBLE
51833: LD_INT 1
51835: DEC
51836: ST_TO_ADDR
51837: LD_EXP 30
51841: PUSH
51842: FOR_TO
51843: IFFALSE 51889
// begin if flags [ normalCounter + i ] then
51845: LD_VAR 0 4
51849: PUSH
51850: LD_EXP 29
51854: PUSH
51855: LD_VAR 0 8
51859: PLUS
51860: ARRAY
51861: IFFALSE 51887
// tmp := tmp & ( 100 + i ) & ; ;
51863: LD_ADDR_VAR 0 3
51867: PUSH
51868: LD_VAR 0 3
51872: PUSH
51873: LD_INT 100
51875: PUSH
51876: LD_VAR 0 8
51880: PLUS
51881: STR
51882: PUSH
51883: LD_STRING ;
51885: STR
51886: ST_TO_ADDR
// end ;
51887: GO 51842
51889: POP
51890: POP
// if tmp then
51891: LD_VAR 0 3
51895: IFFALSE 51907
// active := tmp ;
51897: LD_ADDR_VAR 0 7
51901: PUSH
51902: LD_VAR 0 3
51906: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51907: LD_STRING getStreamItemsFromMission("
51909: PUSH
51910: LD_VAR 0 5
51914: STR
51915: PUSH
51916: LD_STRING ","
51918: STR
51919: PUSH
51920: LD_VAR 0 6
51924: STR
51925: PUSH
51926: LD_STRING ","
51928: STR
51929: PUSH
51930: LD_VAR 0 7
51934: STR
51935: PUSH
51936: LD_STRING ")
51938: STR
51939: PPUSH
51940: CALL_OW 559
// end else
51944: GO 51953
// ToLua ( getStreamItemsFromMission("","","") ) ;
51946: LD_STRING getStreamItemsFromMission("","","")
51948: PPUSH
51949: CALL_OW 559
// end ;
51953: LD_VAR 0 2
51957: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51958: LD_EXP 28
51962: PUSH
51963: LD_EXP 33
51967: AND
51968: IFFALSE 52092
51970: GO 51972
51972: DISABLE
51973: LD_INT 0
51975: PPUSH
51976: PPUSH
// begin enable ;
51977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51978: LD_ADDR_VAR 0 2
51982: PUSH
51983: LD_INT 22
51985: PUSH
51986: LD_OWVAR 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 34
52000: PUSH
52001: LD_INT 7
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 34
52010: PUSH
52011: LD_INT 45
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 34
52020: PUSH
52021: LD_INT 28
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 34
52030: PUSH
52031: LD_INT 47
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PPUSH
52049: CALL_OW 69
52053: ST_TO_ADDR
// if not tmp then
52054: LD_VAR 0 2
52058: NOT
52059: IFFALSE 52063
// exit ;
52061: GO 52092
// for i in tmp do
52063: LD_ADDR_VAR 0 1
52067: PUSH
52068: LD_VAR 0 2
52072: PUSH
52073: FOR_IN
52074: IFFALSE 52090
// begin SetLives ( i , 0 ) ;
52076: LD_VAR 0 1
52080: PPUSH
52081: LD_INT 0
52083: PPUSH
52084: CALL_OW 234
// end ;
52088: GO 52073
52090: POP
52091: POP
// end ;
52092: PPOPN 2
52094: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52095: LD_EXP 28
52099: PUSH
52100: LD_EXP 34
52104: AND
52105: IFFALSE 52189
52107: GO 52109
52109: DISABLE
52110: LD_INT 0
52112: PPUSH
52113: PPUSH
// begin enable ;
52114: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52115: LD_ADDR_VAR 0 2
52119: PUSH
52120: LD_INT 22
52122: PUSH
52123: LD_OWVAR 2
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 32
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PPUSH
52146: CALL_OW 69
52150: ST_TO_ADDR
// if not tmp then
52151: LD_VAR 0 2
52155: NOT
52156: IFFALSE 52160
// exit ;
52158: GO 52189
// for i in tmp do
52160: LD_ADDR_VAR 0 1
52164: PUSH
52165: LD_VAR 0 2
52169: PUSH
52170: FOR_IN
52171: IFFALSE 52187
// begin SetLives ( i , 0 ) ;
52173: LD_VAR 0 1
52177: PPUSH
52178: LD_INT 0
52180: PPUSH
52181: CALL_OW 234
// end ;
52185: GO 52170
52187: POP
52188: POP
// end ;
52189: PPOPN 2
52191: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52192: LD_EXP 28
52196: PUSH
52197: LD_EXP 31
52201: AND
52202: IFFALSE 52295
52204: GO 52206
52206: DISABLE
52207: LD_INT 0
52209: PPUSH
// begin enable ;
52210: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52211: LD_ADDR_VAR 0 1
52215: PUSH
52216: LD_INT 22
52218: PUSH
52219: LD_OWVAR 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 25
52233: PUSH
52234: LD_INT 5
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 25
52243: PUSH
52244: LD_INT 9
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 25
52253: PUSH
52254: LD_INT 8
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PPUSH
52271: CALL_OW 69
52275: PUSH
52276: FOR_IN
52277: IFFALSE 52293
// begin SetClass ( i , 1 ) ;
52279: LD_VAR 0 1
52283: PPUSH
52284: LD_INT 1
52286: PPUSH
52287: CALL_OW 336
// end ;
52291: GO 52276
52293: POP
52294: POP
// end ;
52295: PPOPN 1
52297: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52298: LD_EXP 28
52302: PUSH
52303: LD_EXP 32
52307: AND
52308: PUSH
52309: LD_OWVAR 65
52313: PUSH
52314: LD_INT 7
52316: LESS
52317: AND
52318: IFFALSE 52332
52320: GO 52322
52322: DISABLE
// begin enable ;
52323: ENABLE
// game_speed := 7 ;
52324: LD_ADDR_OWVAR 65
52328: PUSH
52329: LD_INT 7
52331: ST_TO_ADDR
// end ;
52332: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52333: LD_EXP 28
52337: PUSH
52338: LD_EXP 35
52342: AND
52343: IFFALSE 52545
52345: GO 52347
52347: DISABLE
52348: LD_INT 0
52350: PPUSH
52351: PPUSH
52352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52353: LD_ADDR_VAR 0 3
52357: PUSH
52358: LD_INT 81
52360: PUSH
52361: LD_OWVAR 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 21
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PPUSH
52384: CALL_OW 69
52388: ST_TO_ADDR
// if not tmp then
52389: LD_VAR 0 3
52393: NOT
52394: IFFALSE 52398
// exit ;
52396: GO 52545
// if tmp > 5 then
52398: LD_VAR 0 3
52402: PUSH
52403: LD_INT 5
52405: GREATER
52406: IFFALSE 52418
// k := 5 else
52408: LD_ADDR_VAR 0 2
52412: PUSH
52413: LD_INT 5
52415: ST_TO_ADDR
52416: GO 52428
// k := tmp ;
52418: LD_ADDR_VAR 0 2
52422: PUSH
52423: LD_VAR 0 3
52427: ST_TO_ADDR
// for i := 1 to k do
52428: LD_ADDR_VAR 0 1
52432: PUSH
52433: DOUBLE
52434: LD_INT 1
52436: DEC
52437: ST_TO_ADDR
52438: LD_VAR 0 2
52442: PUSH
52443: FOR_TO
52444: IFFALSE 52543
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52446: LD_VAR 0 3
52450: PUSH
52451: LD_VAR 0 1
52455: ARRAY
52456: PPUSH
52457: LD_VAR 0 1
52461: PUSH
52462: LD_INT 4
52464: MOD
52465: PUSH
52466: LD_INT 1
52468: PLUS
52469: PPUSH
52470: CALL_OW 259
52474: PUSH
52475: LD_INT 10
52477: LESS
52478: IFFALSE 52541
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52480: LD_VAR 0 3
52484: PUSH
52485: LD_VAR 0 1
52489: ARRAY
52490: PPUSH
52491: LD_VAR 0 1
52495: PUSH
52496: LD_INT 4
52498: MOD
52499: PUSH
52500: LD_INT 1
52502: PLUS
52503: PPUSH
52504: LD_VAR 0 3
52508: PUSH
52509: LD_VAR 0 1
52513: ARRAY
52514: PPUSH
52515: LD_VAR 0 1
52519: PUSH
52520: LD_INT 4
52522: MOD
52523: PUSH
52524: LD_INT 1
52526: PLUS
52527: PPUSH
52528: CALL_OW 259
52532: PUSH
52533: LD_INT 1
52535: PLUS
52536: PPUSH
52537: CALL_OW 237
52541: GO 52443
52543: POP
52544: POP
// end ;
52545: PPOPN 3
52547: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52548: LD_EXP 28
52552: PUSH
52553: LD_EXP 36
52557: AND
52558: IFFALSE 52578
52560: GO 52562
52562: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52563: LD_INT 4
52565: PPUSH
52566: LD_OWVAR 2
52570: PPUSH
52571: LD_INT 0
52573: PPUSH
52574: CALL_OW 324
52578: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52579: LD_EXP 28
52583: PUSH
52584: LD_EXP 65
52588: AND
52589: IFFALSE 52609
52591: GO 52593
52593: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52594: LD_INT 19
52596: PPUSH
52597: LD_OWVAR 2
52601: PPUSH
52602: LD_INT 0
52604: PPUSH
52605: CALL_OW 324
52609: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52610: LD_EXP 28
52614: PUSH
52615: LD_EXP 37
52619: AND
52620: IFFALSE 52722
52622: GO 52624
52624: DISABLE
52625: LD_INT 0
52627: PPUSH
52628: PPUSH
// begin enable ;
52629: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52630: LD_ADDR_VAR 0 2
52634: PUSH
52635: LD_INT 22
52637: PUSH
52638: LD_OWVAR 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 34
52652: PUSH
52653: LD_INT 11
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 34
52662: PUSH
52663: LD_INT 30
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PPUSH
52679: CALL_OW 69
52683: ST_TO_ADDR
// if not tmp then
52684: LD_VAR 0 2
52688: NOT
52689: IFFALSE 52693
// exit ;
52691: GO 52722
// for i in tmp do
52693: LD_ADDR_VAR 0 1
52697: PUSH
52698: LD_VAR 0 2
52702: PUSH
52703: FOR_IN
52704: IFFALSE 52720
// begin SetLives ( i , 0 ) ;
52706: LD_VAR 0 1
52710: PPUSH
52711: LD_INT 0
52713: PPUSH
52714: CALL_OW 234
// end ;
52718: GO 52703
52720: POP
52721: POP
// end ;
52722: PPOPN 2
52724: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52725: LD_EXP 28
52729: PUSH
52730: LD_EXP 38
52734: AND
52735: IFFALSE 52755
52737: GO 52739
52739: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52740: LD_INT 32
52742: PPUSH
52743: LD_OWVAR 2
52747: PPUSH
52748: LD_INT 0
52750: PPUSH
52751: CALL_OW 324
52755: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52756: LD_EXP 28
52760: PUSH
52761: LD_EXP 39
52765: AND
52766: IFFALSE 52947
52768: GO 52770
52770: DISABLE
52771: LD_INT 0
52773: PPUSH
52774: PPUSH
52775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52776: LD_ADDR_VAR 0 2
52780: PUSH
52781: LD_INT 22
52783: PUSH
52784: LD_OWVAR 2
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 33
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PPUSH
52807: CALL_OW 69
52811: ST_TO_ADDR
// if not tmp then
52812: LD_VAR 0 2
52816: NOT
52817: IFFALSE 52821
// exit ;
52819: GO 52947
// side := 0 ;
52821: LD_ADDR_VAR 0 3
52825: PUSH
52826: LD_INT 0
52828: ST_TO_ADDR
// for i := 1 to 8 do
52829: LD_ADDR_VAR 0 1
52833: PUSH
52834: DOUBLE
52835: LD_INT 1
52837: DEC
52838: ST_TO_ADDR
52839: LD_INT 8
52841: PUSH
52842: FOR_TO
52843: IFFALSE 52891
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52845: LD_OWVAR 2
52849: PUSH
52850: LD_VAR 0 1
52854: NONEQUAL
52855: PUSH
52856: LD_OWVAR 2
52860: PPUSH
52861: LD_VAR 0 1
52865: PPUSH
52866: CALL_OW 81
52870: PUSH
52871: LD_INT 2
52873: EQUAL
52874: AND
52875: IFFALSE 52889
// begin side := i ;
52877: LD_ADDR_VAR 0 3
52881: PUSH
52882: LD_VAR 0 1
52886: ST_TO_ADDR
// break ;
52887: GO 52891
// end ;
52889: GO 52842
52891: POP
52892: POP
// if not side then
52893: LD_VAR 0 3
52897: NOT
52898: IFFALSE 52902
// exit ;
52900: GO 52947
// for i := 1 to tmp do
52902: LD_ADDR_VAR 0 1
52906: PUSH
52907: DOUBLE
52908: LD_INT 1
52910: DEC
52911: ST_TO_ADDR
52912: LD_VAR 0 2
52916: PUSH
52917: FOR_TO
52918: IFFALSE 52945
// if Prob ( 60 ) then
52920: LD_INT 60
52922: PPUSH
52923: CALL_OW 13
52927: IFFALSE 52943
// SetSide ( i , side ) ;
52929: LD_VAR 0 1
52933: PPUSH
52934: LD_VAR 0 3
52938: PPUSH
52939: CALL_OW 235
52943: GO 52917
52945: POP
52946: POP
// end ;
52947: PPOPN 3
52949: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52950: LD_EXP 28
52954: PUSH
52955: LD_EXP 41
52959: AND
52960: IFFALSE 53079
52962: GO 52964
52964: DISABLE
52965: LD_INT 0
52967: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52968: LD_ADDR_VAR 0 1
52972: PUSH
52973: LD_INT 22
52975: PUSH
52976: LD_OWVAR 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 21
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: LD_INT 23
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: PPUSH
53017: CALL_OW 69
53021: PUSH
53022: FOR_IN
53023: IFFALSE 53077
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53025: LD_VAR 0 1
53029: PPUSH
53030: CALL_OW 257
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: LD_INT 3
53043: PUSH
53044: LD_INT 4
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: IN
53053: IFFALSE 53075
// SetClass ( un , rand ( 1 , 4 ) ) ;
53055: LD_VAR 0 1
53059: PPUSH
53060: LD_INT 1
53062: PPUSH
53063: LD_INT 4
53065: PPUSH
53066: CALL_OW 12
53070: PPUSH
53071: CALL_OW 336
53075: GO 53022
53077: POP
53078: POP
// end ;
53079: PPOPN 1
53081: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53082: LD_EXP 28
53086: PUSH
53087: LD_EXP 40
53091: AND
53092: IFFALSE 53171
53094: GO 53096
53096: DISABLE
53097: LD_INT 0
53099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53100: LD_ADDR_VAR 0 1
53104: PUSH
53105: LD_INT 22
53107: PUSH
53108: LD_OWVAR 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 21
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PPUSH
53131: CALL_OW 69
53135: ST_TO_ADDR
// if not tmp then
53136: LD_VAR 0 1
53140: NOT
53141: IFFALSE 53145
// exit ;
53143: GO 53171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53145: LD_VAR 0 1
53149: PUSH
53150: LD_INT 1
53152: PPUSH
53153: LD_VAR 0 1
53157: PPUSH
53158: CALL_OW 12
53162: ARRAY
53163: PPUSH
53164: LD_INT 100
53166: PPUSH
53167: CALL_OW 234
// end ;
53171: PPOPN 1
53173: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53174: LD_EXP 28
53178: PUSH
53179: LD_EXP 42
53183: AND
53184: IFFALSE 53282
53186: GO 53188
53188: DISABLE
53189: LD_INT 0
53191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53192: LD_ADDR_VAR 0 1
53196: PUSH
53197: LD_INT 22
53199: PUSH
53200: LD_OWVAR 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 21
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PPUSH
53223: CALL_OW 69
53227: ST_TO_ADDR
// if not tmp then
53228: LD_VAR 0 1
53232: NOT
53233: IFFALSE 53237
// exit ;
53235: GO 53282
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53237: LD_VAR 0 1
53241: PUSH
53242: LD_INT 1
53244: PPUSH
53245: LD_VAR 0 1
53249: PPUSH
53250: CALL_OW 12
53254: ARRAY
53255: PPUSH
53256: LD_INT 1
53258: PPUSH
53259: LD_INT 4
53261: PPUSH
53262: CALL_OW 12
53266: PPUSH
53267: LD_INT 3000
53269: PPUSH
53270: LD_INT 9000
53272: PPUSH
53273: CALL_OW 12
53277: PPUSH
53278: CALL_OW 492
// end ;
53282: PPOPN 1
53284: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53285: LD_EXP 28
53289: PUSH
53290: LD_EXP 43
53294: AND
53295: IFFALSE 53315
53297: GO 53299
53299: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53300: LD_INT 1
53302: PPUSH
53303: LD_OWVAR 2
53307: PPUSH
53308: LD_INT 0
53310: PPUSH
53311: CALL_OW 324
53315: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53316: LD_EXP 28
53320: PUSH
53321: LD_EXP 44
53325: AND
53326: IFFALSE 53409
53328: GO 53330
53330: DISABLE
53331: LD_INT 0
53333: PPUSH
53334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53335: LD_ADDR_VAR 0 2
53339: PUSH
53340: LD_INT 22
53342: PUSH
53343: LD_OWVAR 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 21
53354: PUSH
53355: LD_INT 3
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PPUSH
53366: CALL_OW 69
53370: ST_TO_ADDR
// if not tmp then
53371: LD_VAR 0 2
53375: NOT
53376: IFFALSE 53380
// exit ;
53378: GO 53409
// for i in tmp do
53380: LD_ADDR_VAR 0 1
53384: PUSH
53385: LD_VAR 0 2
53389: PUSH
53390: FOR_IN
53391: IFFALSE 53407
// SetBLevel ( i , 10 ) ;
53393: LD_VAR 0 1
53397: PPUSH
53398: LD_INT 10
53400: PPUSH
53401: CALL_OW 241
53405: GO 53390
53407: POP
53408: POP
// end ;
53409: PPOPN 2
53411: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53412: LD_EXP 28
53416: PUSH
53417: LD_EXP 45
53421: AND
53422: IFFALSE 53533
53424: GO 53426
53426: DISABLE
53427: LD_INT 0
53429: PPUSH
53430: PPUSH
53431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53432: LD_ADDR_VAR 0 3
53436: PUSH
53437: LD_INT 22
53439: PUSH
53440: LD_OWVAR 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 25
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PPUSH
53463: CALL_OW 69
53467: ST_TO_ADDR
// if not tmp then
53468: LD_VAR 0 3
53472: NOT
53473: IFFALSE 53477
// exit ;
53475: GO 53533
// un := tmp [ rand ( 1 , tmp ) ] ;
53477: LD_ADDR_VAR 0 2
53481: PUSH
53482: LD_VAR 0 3
53486: PUSH
53487: LD_INT 1
53489: PPUSH
53490: LD_VAR 0 3
53494: PPUSH
53495: CALL_OW 12
53499: ARRAY
53500: ST_TO_ADDR
// if Crawls ( un ) then
53501: LD_VAR 0 2
53505: PPUSH
53506: CALL_OW 318
53510: IFFALSE 53521
// ComWalk ( un ) ;
53512: LD_VAR 0 2
53516: PPUSH
53517: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53521: LD_VAR 0 2
53525: PPUSH
53526: LD_INT 5
53528: PPUSH
53529: CALL_OW 336
// end ;
53533: PPOPN 3
53535: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53536: LD_EXP 28
53540: PUSH
53541: LD_EXP 46
53545: AND
53546: PUSH
53547: LD_OWVAR 67
53551: PUSH
53552: LD_INT 4
53554: LESS
53555: AND
53556: IFFALSE 53575
53558: GO 53560
53560: DISABLE
// begin Difficulty := Difficulty + 1 ;
53561: LD_ADDR_OWVAR 67
53565: PUSH
53566: LD_OWVAR 67
53570: PUSH
53571: LD_INT 1
53573: PLUS
53574: ST_TO_ADDR
// end ;
53575: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53576: LD_EXP 28
53580: PUSH
53581: LD_EXP 47
53585: AND
53586: IFFALSE 53689
53588: GO 53590
53590: DISABLE
53591: LD_INT 0
53593: PPUSH
// begin for i := 1 to 5 do
53594: LD_ADDR_VAR 0 1
53598: PUSH
53599: DOUBLE
53600: LD_INT 1
53602: DEC
53603: ST_TO_ADDR
53604: LD_INT 5
53606: PUSH
53607: FOR_TO
53608: IFFALSE 53687
// begin uc_nation := nation_nature ;
53610: LD_ADDR_OWVAR 21
53614: PUSH
53615: LD_INT 0
53617: ST_TO_ADDR
// uc_side := 0 ;
53618: LD_ADDR_OWVAR 20
53622: PUSH
53623: LD_INT 0
53625: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53626: LD_ADDR_OWVAR 29
53630: PUSH
53631: LD_INT 12
53633: PUSH
53634: LD_INT 12
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: ST_TO_ADDR
// hc_agressivity := 20 ;
53641: LD_ADDR_OWVAR 35
53645: PUSH
53646: LD_INT 20
53648: ST_TO_ADDR
// hc_class := class_tiger ;
53649: LD_ADDR_OWVAR 28
53653: PUSH
53654: LD_INT 14
53656: ST_TO_ADDR
// hc_gallery :=  ;
53657: LD_ADDR_OWVAR 33
53661: PUSH
53662: LD_STRING 
53664: ST_TO_ADDR
// hc_name :=  ;
53665: LD_ADDR_OWVAR 26
53669: PUSH
53670: LD_STRING 
53672: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53673: CALL_OW 44
53677: PPUSH
53678: LD_INT 0
53680: PPUSH
53681: CALL_OW 51
// end ;
53685: GO 53607
53687: POP
53688: POP
// end ;
53689: PPOPN 1
53691: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53692: LD_EXP 28
53696: PUSH
53697: LD_EXP 48
53701: AND
53702: IFFALSE 53711
53704: GO 53706
53706: DISABLE
// StreamSibBomb ;
53707: CALL 53712 0 0
53711: END
// export function StreamSibBomb ; var i , x , y ; begin
53712: LD_INT 0
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
// result := false ;
53718: LD_ADDR_VAR 0 1
53722: PUSH
53723: LD_INT 0
53725: ST_TO_ADDR
// for i := 1 to 16 do
53726: LD_ADDR_VAR 0 2
53730: PUSH
53731: DOUBLE
53732: LD_INT 1
53734: DEC
53735: ST_TO_ADDR
53736: LD_INT 16
53738: PUSH
53739: FOR_TO
53740: IFFALSE 53939
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53742: LD_ADDR_VAR 0 3
53746: PUSH
53747: LD_INT 10
53749: PUSH
53750: LD_INT 20
53752: PUSH
53753: LD_INT 30
53755: PUSH
53756: LD_INT 40
53758: PUSH
53759: LD_INT 50
53761: PUSH
53762: LD_INT 60
53764: PUSH
53765: LD_INT 70
53767: PUSH
53768: LD_INT 80
53770: PUSH
53771: LD_INT 90
53773: PUSH
53774: LD_INT 100
53776: PUSH
53777: LD_INT 110
53779: PUSH
53780: LD_INT 120
53782: PUSH
53783: LD_INT 130
53785: PUSH
53786: LD_INT 140
53788: PUSH
53789: LD_INT 150
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PPUSH
53812: LD_INT 15
53814: PPUSH
53815: CALL_OW 12
53819: ARRAY
53820: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53821: LD_ADDR_VAR 0 4
53825: PUSH
53826: LD_INT 10
53828: PUSH
53829: LD_INT 20
53831: PUSH
53832: LD_INT 30
53834: PUSH
53835: LD_INT 40
53837: PUSH
53838: LD_INT 50
53840: PUSH
53841: LD_INT 60
53843: PUSH
53844: LD_INT 70
53846: PUSH
53847: LD_INT 80
53849: PUSH
53850: LD_INT 90
53852: PUSH
53853: LD_INT 100
53855: PUSH
53856: LD_INT 110
53858: PUSH
53859: LD_INT 120
53861: PUSH
53862: LD_INT 130
53864: PUSH
53865: LD_INT 140
53867: PUSH
53868: LD_INT 150
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PPUSH
53891: LD_INT 15
53893: PPUSH
53894: CALL_OW 12
53898: ARRAY
53899: ST_TO_ADDR
// if ValidHex ( x , y ) then
53900: LD_VAR 0 3
53904: PPUSH
53905: LD_VAR 0 4
53909: PPUSH
53910: CALL_OW 488
53914: IFFALSE 53937
// begin result := [ x , y ] ;
53916: LD_ADDR_VAR 0 1
53920: PUSH
53921: LD_VAR 0 3
53925: PUSH
53926: LD_VAR 0 4
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: ST_TO_ADDR
// break ;
53935: GO 53939
// end ; end ;
53937: GO 53739
53939: POP
53940: POP
// if result then
53941: LD_VAR 0 1
53945: IFFALSE 54005
// begin ToLua ( playSibBomb() ) ;
53947: LD_STRING playSibBomb()
53949: PPUSH
53950: CALL_OW 559
// wait ( 0 0$14 ) ;
53954: LD_INT 490
53956: PPUSH
53957: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53961: LD_VAR 0 1
53965: PUSH
53966: LD_INT 1
53968: ARRAY
53969: PPUSH
53970: LD_VAR 0 1
53974: PUSH
53975: LD_INT 2
53977: ARRAY
53978: PPUSH
53979: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53983: LD_VAR 0 1
53987: PUSH
53988: LD_INT 1
53990: ARRAY
53991: PPUSH
53992: LD_VAR 0 1
53996: PUSH
53997: LD_INT 2
53999: ARRAY
54000: PPUSH
54001: CALL_OW 429
// end ; end ;
54005: LD_VAR 0 1
54009: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54010: LD_EXP 28
54014: PUSH
54015: LD_EXP 50
54019: AND
54020: IFFALSE 54032
54022: GO 54024
54024: DISABLE
// YouLost (  ) ;
54025: LD_STRING 
54027: PPUSH
54028: CALL_OW 104
54032: END
// every 0 0$1 trigger StreamModeActive and sFog do
54033: LD_EXP 28
54037: PUSH
54038: LD_EXP 49
54042: AND
54043: IFFALSE 54057
54045: GO 54047
54047: DISABLE
// FogOff ( your_side ) ;
54048: LD_OWVAR 2
54052: PPUSH
54053: CALL_OW 344
54057: END
// every 0 0$1 trigger StreamModeActive and sSun do
54058: LD_EXP 28
54062: PUSH
54063: LD_EXP 51
54067: AND
54068: IFFALSE 54096
54070: GO 54072
54072: DISABLE
// begin solar_recharge_percent := 0 ;
54073: LD_ADDR_OWVAR 79
54077: PUSH
54078: LD_INT 0
54080: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54081: LD_INT 10500
54083: PPUSH
54084: CALL_OW 67
// solar_recharge_percent := 100 ;
54088: LD_ADDR_OWVAR 79
54092: PUSH
54093: LD_INT 100
54095: ST_TO_ADDR
// end ;
54096: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54097: LD_EXP 28
54101: PUSH
54102: LD_EXP 52
54106: AND
54107: IFFALSE 54346
54109: GO 54111
54111: DISABLE
54112: LD_INT 0
54114: PPUSH
54115: PPUSH
54116: PPUSH
// begin tmp := [ ] ;
54117: LD_ADDR_VAR 0 3
54121: PUSH
54122: EMPTY
54123: ST_TO_ADDR
// for i := 1 to 6 do
54124: LD_ADDR_VAR 0 1
54128: PUSH
54129: DOUBLE
54130: LD_INT 1
54132: DEC
54133: ST_TO_ADDR
54134: LD_INT 6
54136: PUSH
54137: FOR_TO
54138: IFFALSE 54243
// begin uc_nation := nation_nature ;
54140: LD_ADDR_OWVAR 21
54144: PUSH
54145: LD_INT 0
54147: ST_TO_ADDR
// uc_side := 0 ;
54148: LD_ADDR_OWVAR 20
54152: PUSH
54153: LD_INT 0
54155: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54156: LD_ADDR_OWVAR 29
54160: PUSH
54161: LD_INT 12
54163: PUSH
54164: LD_INT 12
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: ST_TO_ADDR
// hc_agressivity := 20 ;
54171: LD_ADDR_OWVAR 35
54175: PUSH
54176: LD_INT 20
54178: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54179: LD_ADDR_OWVAR 28
54183: PUSH
54184: LD_INT 17
54186: ST_TO_ADDR
// hc_gallery :=  ;
54187: LD_ADDR_OWVAR 33
54191: PUSH
54192: LD_STRING 
54194: ST_TO_ADDR
// hc_name :=  ;
54195: LD_ADDR_OWVAR 26
54199: PUSH
54200: LD_STRING 
54202: ST_TO_ADDR
// un := CreateHuman ;
54203: LD_ADDR_VAR 0 2
54207: PUSH
54208: CALL_OW 44
54212: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54213: LD_VAR 0 2
54217: PPUSH
54218: LD_INT 1
54220: PPUSH
54221: CALL_OW 51
// tmp := tmp ^ un ;
54225: LD_ADDR_VAR 0 3
54229: PUSH
54230: LD_VAR 0 3
54234: PUSH
54235: LD_VAR 0 2
54239: ADD
54240: ST_TO_ADDR
// end ;
54241: GO 54137
54243: POP
54244: POP
// repeat wait ( 0 0$1 ) ;
54245: LD_INT 35
54247: PPUSH
54248: CALL_OW 67
// for un in tmp do
54252: LD_ADDR_VAR 0 2
54256: PUSH
54257: LD_VAR 0 3
54261: PUSH
54262: FOR_IN
54263: IFFALSE 54337
// begin if IsDead ( un ) then
54265: LD_VAR 0 2
54269: PPUSH
54270: CALL_OW 301
54274: IFFALSE 54294
// begin tmp := tmp diff un ;
54276: LD_ADDR_VAR 0 3
54280: PUSH
54281: LD_VAR 0 3
54285: PUSH
54286: LD_VAR 0 2
54290: DIFF
54291: ST_TO_ADDR
// continue ;
54292: GO 54262
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54294: LD_VAR 0 2
54298: PPUSH
54299: LD_INT 3
54301: PUSH
54302: LD_INT 22
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PPUSH
54316: CALL_OW 69
54320: PPUSH
54321: LD_VAR 0 2
54325: PPUSH
54326: CALL_OW 74
54330: PPUSH
54331: CALL_OW 115
// end ;
54335: GO 54262
54337: POP
54338: POP
// until not tmp ;
54339: LD_VAR 0 3
54343: NOT
54344: IFFALSE 54245
// end ;
54346: PPOPN 3
54348: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54349: LD_EXP 28
54353: PUSH
54354: LD_EXP 53
54358: AND
54359: IFFALSE 54413
54361: GO 54363
54363: DISABLE
// begin ToLua ( displayTroll(); ) ;
54364: LD_STRING displayTroll();
54366: PPUSH
54367: CALL_OW 559
// wait ( 3 3$00 ) ;
54371: LD_INT 6300
54373: PPUSH
54374: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54378: LD_STRING hideTroll();
54380: PPUSH
54381: CALL_OW 559
// wait ( 1 1$00 ) ;
54385: LD_INT 2100
54387: PPUSH
54388: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54392: LD_STRING displayTroll();
54394: PPUSH
54395: CALL_OW 559
// wait ( 1 1$00 ) ;
54399: LD_INT 2100
54401: PPUSH
54402: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54406: LD_STRING hideTroll();
54408: PPUSH
54409: CALL_OW 559
// end ;
54413: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54414: LD_EXP 28
54418: PUSH
54419: LD_EXP 54
54423: AND
54424: IFFALSE 54487
54426: GO 54428
54428: DISABLE
54429: LD_INT 0
54431: PPUSH
// begin p := 0 ;
54432: LD_ADDR_VAR 0 1
54436: PUSH
54437: LD_INT 0
54439: ST_TO_ADDR
// repeat game_speed := 1 ;
54440: LD_ADDR_OWVAR 65
54444: PUSH
54445: LD_INT 1
54447: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54448: LD_INT 35
54450: PPUSH
54451: CALL_OW 67
// p := p + 1 ;
54455: LD_ADDR_VAR 0 1
54459: PUSH
54460: LD_VAR 0 1
54464: PUSH
54465: LD_INT 1
54467: PLUS
54468: ST_TO_ADDR
// until p >= 60 ;
54469: LD_VAR 0 1
54473: PUSH
54474: LD_INT 60
54476: GREATEREQUAL
54477: IFFALSE 54440
// game_speed := 4 ;
54479: LD_ADDR_OWVAR 65
54483: PUSH
54484: LD_INT 4
54486: ST_TO_ADDR
// end ;
54487: PPOPN 1
54489: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54490: LD_EXP 28
54494: PUSH
54495: LD_EXP 55
54499: AND
54500: IFFALSE 54646
54502: GO 54504
54504: DISABLE
54505: LD_INT 0
54507: PPUSH
54508: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54509: LD_ADDR_VAR 0 1
54513: PUSH
54514: LD_INT 22
54516: PUSH
54517: LD_OWVAR 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 30
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 30
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PPUSH
54558: CALL_OW 69
54562: ST_TO_ADDR
// if not depot then
54563: LD_VAR 0 1
54567: NOT
54568: IFFALSE 54572
// exit ;
54570: GO 54646
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54572: LD_ADDR_VAR 0 2
54576: PUSH
54577: LD_VAR 0 1
54581: PUSH
54582: LD_INT 1
54584: PPUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: CALL_OW 12
54594: ARRAY
54595: PPUSH
54596: CALL_OW 274
54600: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54601: LD_VAR 0 2
54605: PPUSH
54606: LD_INT 1
54608: PPUSH
54609: LD_INT 0
54611: PPUSH
54612: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54616: LD_VAR 0 2
54620: PPUSH
54621: LD_INT 2
54623: PPUSH
54624: LD_INT 0
54626: PPUSH
54627: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54631: LD_VAR 0 2
54635: PPUSH
54636: LD_INT 3
54638: PPUSH
54639: LD_INT 0
54641: PPUSH
54642: CALL_OW 277
// end ;
54646: PPOPN 2
54648: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54649: LD_EXP 28
54653: PUSH
54654: LD_EXP 56
54658: AND
54659: IFFALSE 54756
54661: GO 54663
54663: DISABLE
54664: LD_INT 0
54666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54667: LD_ADDR_VAR 0 1
54671: PUSH
54672: LD_INT 22
54674: PUSH
54675: LD_OWVAR 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 21
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: LD_INT 23
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: PPUSH
54716: CALL_OW 69
54720: ST_TO_ADDR
// if not tmp then
54721: LD_VAR 0 1
54725: NOT
54726: IFFALSE 54730
// exit ;
54728: GO 54756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54730: LD_VAR 0 1
54734: PUSH
54735: LD_INT 1
54737: PPUSH
54738: LD_VAR 0 1
54742: PPUSH
54743: CALL_OW 12
54747: ARRAY
54748: PPUSH
54749: LD_INT 200
54751: PPUSH
54752: CALL_OW 234
// end ;
54756: PPOPN 1
54758: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54759: LD_EXP 28
54763: PUSH
54764: LD_EXP 57
54768: AND
54769: IFFALSE 54848
54771: GO 54773
54773: DISABLE
54774: LD_INT 0
54776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54777: LD_ADDR_VAR 0 1
54781: PUSH
54782: LD_INT 22
54784: PUSH
54785: LD_OWVAR 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 21
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PPUSH
54808: CALL_OW 69
54812: ST_TO_ADDR
// if not tmp then
54813: LD_VAR 0 1
54817: NOT
54818: IFFALSE 54822
// exit ;
54820: GO 54848
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54822: LD_VAR 0 1
54826: PUSH
54827: LD_INT 1
54829: PPUSH
54830: LD_VAR 0 1
54834: PPUSH
54835: CALL_OW 12
54839: ARRAY
54840: PPUSH
54841: LD_INT 60
54843: PPUSH
54844: CALL_OW 234
// end ;
54848: PPOPN 1
54850: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54851: LD_EXP 28
54855: PUSH
54856: LD_EXP 58
54860: AND
54861: IFFALSE 54960
54863: GO 54865
54865: DISABLE
54866: LD_INT 0
54868: PPUSH
54869: PPUSH
// begin enable ;
54870: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54871: LD_ADDR_VAR 0 1
54875: PUSH
54876: LD_INT 22
54878: PUSH
54879: LD_OWVAR 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 61
54890: PUSH
54891: EMPTY
54892: LIST
54893: PUSH
54894: LD_INT 33
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: PPUSH
54909: CALL_OW 69
54913: ST_TO_ADDR
// if not tmp then
54914: LD_VAR 0 1
54918: NOT
54919: IFFALSE 54923
// exit ;
54921: GO 54960
// for i in tmp do
54923: LD_ADDR_VAR 0 2
54927: PUSH
54928: LD_VAR 0 1
54932: PUSH
54933: FOR_IN
54934: IFFALSE 54958
// if IsControledBy ( i ) then
54936: LD_VAR 0 2
54940: PPUSH
54941: CALL_OW 312
54945: IFFALSE 54956
// ComUnlink ( i ) ;
54947: LD_VAR 0 2
54951: PPUSH
54952: CALL_OW 136
54956: GO 54933
54958: POP
54959: POP
// end ;
54960: PPOPN 2
54962: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54963: LD_EXP 28
54967: PUSH
54968: LD_EXP 59
54972: AND
54973: IFFALSE 55113
54975: GO 54977
54977: DISABLE
54978: LD_INT 0
54980: PPUSH
54981: PPUSH
// begin ToLua ( displayPowell(); ) ;
54982: LD_STRING displayPowell();
54984: PPUSH
54985: CALL_OW 559
// uc_side := 0 ;
54989: LD_ADDR_OWVAR 20
54993: PUSH
54994: LD_INT 0
54996: ST_TO_ADDR
// uc_nation := 2 ;
54997: LD_ADDR_OWVAR 21
55001: PUSH
55002: LD_INT 2
55004: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55005: LD_ADDR_OWVAR 37
55009: PUSH
55010: LD_INT 14
55012: ST_TO_ADDR
// vc_engine := engine_siberite ;
55013: LD_ADDR_OWVAR 39
55017: PUSH
55018: LD_INT 3
55020: ST_TO_ADDR
// vc_control := control_apeman ;
55021: LD_ADDR_OWVAR 38
55025: PUSH
55026: LD_INT 5
55028: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55029: LD_ADDR_OWVAR 40
55033: PUSH
55034: LD_INT 29
55036: ST_TO_ADDR
// un := CreateVehicle ;
55037: LD_ADDR_VAR 0 2
55041: PUSH
55042: CALL_OW 45
55046: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55047: LD_VAR 0 2
55051: PPUSH
55052: LD_INT 1
55054: PPUSH
55055: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55059: LD_INT 35
55061: PPUSH
55062: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55066: LD_VAR 0 2
55070: PPUSH
55071: LD_INT 22
55073: PUSH
55074: LD_OWVAR 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PPUSH
55083: CALL_OW 69
55087: PPUSH
55088: LD_VAR 0 2
55092: PPUSH
55093: CALL_OW 74
55097: PPUSH
55098: CALL_OW 115
// until IsDead ( un ) ;
55102: LD_VAR 0 2
55106: PPUSH
55107: CALL_OW 301
55111: IFFALSE 55059
// end ;
55113: PPOPN 2
55115: END
// every 0 0$1 trigger StreamModeActive and sStu do
55116: LD_EXP 28
55120: PUSH
55121: LD_EXP 67
55125: AND
55126: IFFALSE 55142
55128: GO 55130
55130: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55131: LD_STRING displayStucuk();
55133: PPUSH
55134: CALL_OW 559
// ResetFog ;
55138: CALL_OW 335
// end ;
55142: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55143: LD_EXP 28
55147: PUSH
55148: LD_EXP 60
55152: AND
55153: IFFALSE 55294
55155: GO 55157
55157: DISABLE
55158: LD_INT 0
55160: PPUSH
55161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55162: LD_ADDR_VAR 0 2
55166: PUSH
55167: LD_INT 22
55169: PUSH
55170: LD_OWVAR 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 21
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PPUSH
55193: CALL_OW 69
55197: ST_TO_ADDR
// if not tmp then
55198: LD_VAR 0 2
55202: NOT
55203: IFFALSE 55207
// exit ;
55205: GO 55294
// un := tmp [ rand ( 1 , tmp ) ] ;
55207: LD_ADDR_VAR 0 1
55211: PUSH
55212: LD_VAR 0 2
55216: PUSH
55217: LD_INT 1
55219: PPUSH
55220: LD_VAR 0 2
55224: PPUSH
55225: CALL_OW 12
55229: ARRAY
55230: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55231: LD_VAR 0 1
55235: PPUSH
55236: LD_INT 0
55238: PPUSH
55239: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55243: LD_VAR 0 1
55247: PPUSH
55248: LD_OWVAR 3
55252: PUSH
55253: LD_VAR 0 1
55257: DIFF
55258: PPUSH
55259: LD_VAR 0 1
55263: PPUSH
55264: CALL_OW 74
55268: PPUSH
55269: CALL_OW 115
// wait ( 0 0$20 ) ;
55273: LD_INT 700
55275: PPUSH
55276: CALL_OW 67
// SetSide ( un , your_side ) ;
55280: LD_VAR 0 1
55284: PPUSH
55285: LD_OWVAR 2
55289: PPUSH
55290: CALL_OW 235
// end ;
55294: PPOPN 2
55296: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55297: LD_EXP 28
55301: PUSH
55302: LD_EXP 61
55306: AND
55307: IFFALSE 55413
55309: GO 55311
55311: DISABLE
55312: LD_INT 0
55314: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55315: LD_ADDR_VAR 0 1
55319: PUSH
55320: LD_INT 22
55322: PUSH
55323: LD_OWVAR 2
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 30
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 30
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PPUSH
55364: CALL_OW 69
55368: ST_TO_ADDR
// if not depot then
55369: LD_VAR 0 1
55373: NOT
55374: IFFALSE 55378
// exit ;
55376: GO 55413
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55378: LD_VAR 0 1
55382: PUSH
55383: LD_INT 1
55385: ARRAY
55386: PPUSH
55387: CALL_OW 250
55391: PPUSH
55392: LD_VAR 0 1
55396: PUSH
55397: LD_INT 1
55399: ARRAY
55400: PPUSH
55401: CALL_OW 251
55405: PPUSH
55406: LD_INT 70
55408: PPUSH
55409: CALL_OW 495
// end ;
55413: PPOPN 1
55415: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55416: LD_EXP 28
55420: PUSH
55421: LD_EXP 62
55425: AND
55426: IFFALSE 55637
55428: GO 55430
55430: DISABLE
55431: LD_INT 0
55433: PPUSH
55434: PPUSH
55435: PPUSH
55436: PPUSH
55437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55438: LD_ADDR_VAR 0 5
55442: PUSH
55443: LD_INT 22
55445: PUSH
55446: LD_OWVAR 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 21
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PPUSH
55469: CALL_OW 69
55473: ST_TO_ADDR
// if not tmp then
55474: LD_VAR 0 5
55478: NOT
55479: IFFALSE 55483
// exit ;
55481: GO 55637
// for i in tmp do
55483: LD_ADDR_VAR 0 1
55487: PUSH
55488: LD_VAR 0 5
55492: PUSH
55493: FOR_IN
55494: IFFALSE 55635
// begin d := rand ( 0 , 5 ) ;
55496: LD_ADDR_VAR 0 4
55500: PUSH
55501: LD_INT 0
55503: PPUSH
55504: LD_INT 5
55506: PPUSH
55507: CALL_OW 12
55511: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55512: LD_ADDR_VAR 0 2
55516: PUSH
55517: LD_VAR 0 1
55521: PPUSH
55522: CALL_OW 250
55526: PPUSH
55527: LD_VAR 0 4
55531: PPUSH
55532: LD_INT 3
55534: PPUSH
55535: LD_INT 12
55537: PPUSH
55538: CALL_OW 12
55542: PPUSH
55543: CALL_OW 272
55547: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55548: LD_ADDR_VAR 0 3
55552: PUSH
55553: LD_VAR 0 1
55557: PPUSH
55558: CALL_OW 251
55562: PPUSH
55563: LD_VAR 0 4
55567: PPUSH
55568: LD_INT 3
55570: PPUSH
55571: LD_INT 12
55573: PPUSH
55574: CALL_OW 12
55578: PPUSH
55579: CALL_OW 273
55583: ST_TO_ADDR
// if ValidHex ( x , y ) then
55584: LD_VAR 0 2
55588: PPUSH
55589: LD_VAR 0 3
55593: PPUSH
55594: CALL_OW 488
55598: IFFALSE 55633
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55600: LD_VAR 0 1
55604: PPUSH
55605: LD_VAR 0 2
55609: PPUSH
55610: LD_VAR 0 3
55614: PPUSH
55615: LD_INT 3
55617: PPUSH
55618: LD_INT 6
55620: PPUSH
55621: CALL_OW 12
55625: PPUSH
55626: LD_INT 1
55628: PPUSH
55629: CALL_OW 483
// end ;
55633: GO 55493
55635: POP
55636: POP
// end ;
55637: PPOPN 5
55639: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55640: LD_EXP 28
55644: PUSH
55645: LD_EXP 63
55649: AND
55650: IFFALSE 55744
55652: GO 55654
55654: DISABLE
55655: LD_INT 0
55657: PPUSH
55658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55659: LD_ADDR_VAR 0 2
55663: PUSH
55664: LD_INT 22
55666: PUSH
55667: LD_OWVAR 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 32
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 21
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: PPUSH
55701: CALL_OW 69
55705: ST_TO_ADDR
// if not tmp then
55706: LD_VAR 0 2
55710: NOT
55711: IFFALSE 55715
// exit ;
55713: GO 55744
// for i in tmp do
55715: LD_ADDR_VAR 0 1
55719: PUSH
55720: LD_VAR 0 2
55724: PUSH
55725: FOR_IN
55726: IFFALSE 55742
// SetFuel ( i , 0 ) ;
55728: LD_VAR 0 1
55732: PPUSH
55733: LD_INT 0
55735: PPUSH
55736: CALL_OW 240
55740: GO 55725
55742: POP
55743: POP
// end ;
55744: PPOPN 2
55746: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55747: LD_EXP 28
55751: PUSH
55752: LD_EXP 64
55756: AND
55757: IFFALSE 55823
55759: GO 55761
55761: DISABLE
55762: LD_INT 0
55764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55765: LD_ADDR_VAR 0 1
55769: PUSH
55770: LD_INT 22
55772: PUSH
55773: LD_OWVAR 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 30
55784: PUSH
55785: LD_INT 29
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PPUSH
55796: CALL_OW 69
55800: ST_TO_ADDR
// if not tmp then
55801: LD_VAR 0 1
55805: NOT
55806: IFFALSE 55810
// exit ;
55808: GO 55823
// DestroyUnit ( tmp [ 1 ] ) ;
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 1
55817: ARRAY
55818: PPUSH
55819: CALL_OW 65
// end ;
55823: PPOPN 1
55825: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55826: LD_EXP 28
55830: PUSH
55831: LD_EXP 66
55835: AND
55836: IFFALSE 55965
55838: GO 55840
55840: DISABLE
55841: LD_INT 0
55843: PPUSH
// begin uc_side := 0 ;
55844: LD_ADDR_OWVAR 20
55848: PUSH
55849: LD_INT 0
55851: ST_TO_ADDR
// uc_nation := nation_arabian ;
55852: LD_ADDR_OWVAR 21
55856: PUSH
55857: LD_INT 2
55859: ST_TO_ADDR
// hc_gallery :=  ;
55860: LD_ADDR_OWVAR 33
55864: PUSH
55865: LD_STRING 
55867: ST_TO_ADDR
// hc_name :=  ;
55868: LD_ADDR_OWVAR 26
55872: PUSH
55873: LD_STRING 
55875: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55876: LD_INT 1
55878: PPUSH
55879: LD_INT 11
55881: PPUSH
55882: LD_INT 10
55884: PPUSH
55885: CALL_OW 380
// un := CreateHuman ;
55889: LD_ADDR_VAR 0 1
55893: PUSH
55894: CALL_OW 44
55898: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55899: LD_VAR 0 1
55903: PPUSH
55904: LD_INT 1
55906: PPUSH
55907: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55911: LD_INT 35
55913: PPUSH
55914: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55918: LD_VAR 0 1
55922: PPUSH
55923: LD_INT 22
55925: PUSH
55926: LD_OWVAR 2
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PPUSH
55935: CALL_OW 69
55939: PPUSH
55940: LD_VAR 0 1
55944: PPUSH
55945: CALL_OW 74
55949: PPUSH
55950: CALL_OW 115
// until IsDead ( un ) ;
55954: LD_VAR 0 1
55958: PPUSH
55959: CALL_OW 301
55963: IFFALSE 55911
// end ;
55965: PPOPN 1
55967: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55968: LD_EXP 28
55972: PUSH
55973: LD_EXP 68
55977: AND
55978: IFFALSE 55990
55980: GO 55982
55982: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55983: LD_STRING earthquake(getX(game), 0, 32)
55985: PPUSH
55986: CALL_OW 559
55990: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55991: LD_EXP 28
55995: PUSH
55996: LD_EXP 69
56000: AND
56001: IFFALSE 56092
56003: GO 56005
56005: DISABLE
56006: LD_INT 0
56008: PPUSH
// begin enable ;
56009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56010: LD_ADDR_VAR 0 1
56014: PUSH
56015: LD_INT 22
56017: PUSH
56018: LD_OWVAR 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 21
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 33
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: PPUSH
56052: CALL_OW 69
56056: ST_TO_ADDR
// if not tmp then
56057: LD_VAR 0 1
56061: NOT
56062: IFFALSE 56066
// exit ;
56064: GO 56092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56066: LD_VAR 0 1
56070: PUSH
56071: LD_INT 1
56073: PPUSH
56074: LD_VAR 0 1
56078: PPUSH
56079: CALL_OW 12
56083: ARRAY
56084: PPUSH
56085: LD_INT 1
56087: PPUSH
56088: CALL_OW 234
// end ;
56092: PPOPN 1
56094: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56095: LD_EXP 28
56099: PUSH
56100: LD_EXP 70
56104: AND
56105: IFFALSE 56246
56107: GO 56109
56109: DISABLE
56110: LD_INT 0
56112: PPUSH
56113: PPUSH
56114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56115: LD_ADDR_VAR 0 3
56119: PUSH
56120: LD_INT 22
56122: PUSH
56123: LD_OWVAR 2
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 25
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PPUSH
56146: CALL_OW 69
56150: ST_TO_ADDR
// if not tmp then
56151: LD_VAR 0 3
56155: NOT
56156: IFFALSE 56160
// exit ;
56158: GO 56246
// un := tmp [ rand ( 1 , tmp ) ] ;
56160: LD_ADDR_VAR 0 2
56164: PUSH
56165: LD_VAR 0 3
56169: PUSH
56170: LD_INT 1
56172: PPUSH
56173: LD_VAR 0 3
56177: PPUSH
56178: CALL_OW 12
56182: ARRAY
56183: ST_TO_ADDR
// if Crawls ( un ) then
56184: LD_VAR 0 2
56188: PPUSH
56189: CALL_OW 318
56193: IFFALSE 56204
// ComWalk ( un ) ;
56195: LD_VAR 0 2
56199: PPUSH
56200: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56204: LD_VAR 0 2
56208: PPUSH
56209: LD_INT 9
56211: PPUSH
56212: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56216: LD_INT 28
56218: PPUSH
56219: LD_OWVAR 2
56223: PPUSH
56224: LD_INT 2
56226: PPUSH
56227: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56231: LD_INT 29
56233: PPUSH
56234: LD_OWVAR 2
56238: PPUSH
56239: LD_INT 2
56241: PPUSH
56242: CALL_OW 322
// end ;
56246: PPOPN 3
56248: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56249: LD_EXP 28
56253: PUSH
56254: LD_EXP 71
56258: AND
56259: IFFALSE 56370
56261: GO 56263
56263: DISABLE
56264: LD_INT 0
56266: PPUSH
56267: PPUSH
56268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56269: LD_ADDR_VAR 0 3
56273: PUSH
56274: LD_INT 22
56276: PUSH
56277: LD_OWVAR 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 25
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PPUSH
56300: CALL_OW 69
56304: ST_TO_ADDR
// if not tmp then
56305: LD_VAR 0 3
56309: NOT
56310: IFFALSE 56314
// exit ;
56312: GO 56370
// un := tmp [ rand ( 1 , tmp ) ] ;
56314: LD_ADDR_VAR 0 2
56318: PUSH
56319: LD_VAR 0 3
56323: PUSH
56324: LD_INT 1
56326: PPUSH
56327: LD_VAR 0 3
56331: PPUSH
56332: CALL_OW 12
56336: ARRAY
56337: ST_TO_ADDR
// if Crawls ( un ) then
56338: LD_VAR 0 2
56342: PPUSH
56343: CALL_OW 318
56347: IFFALSE 56358
// ComWalk ( un ) ;
56349: LD_VAR 0 2
56353: PPUSH
56354: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56358: LD_VAR 0 2
56362: PPUSH
56363: LD_INT 8
56365: PPUSH
56366: CALL_OW 336
// end ;
56370: PPOPN 3
56372: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56373: LD_EXP 28
56377: PUSH
56378: LD_EXP 72
56382: AND
56383: IFFALSE 56527
56385: GO 56387
56387: DISABLE
56388: LD_INT 0
56390: PPUSH
56391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56392: LD_ADDR_VAR 0 2
56396: PUSH
56397: LD_INT 22
56399: PUSH
56400: LD_OWVAR 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 21
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: LD_INT 34
56424: PUSH
56425: LD_INT 12
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 34
56434: PUSH
56435: LD_INT 51
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 34
56444: PUSH
56445: LD_INT 32
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: PPUSH
56463: CALL_OW 69
56467: ST_TO_ADDR
// if not tmp then
56468: LD_VAR 0 2
56472: NOT
56473: IFFALSE 56477
// exit ;
56475: GO 56527
// for i in tmp do
56477: LD_ADDR_VAR 0 1
56481: PUSH
56482: LD_VAR 0 2
56486: PUSH
56487: FOR_IN
56488: IFFALSE 56525
// if GetCargo ( i , mat_artifact ) = 0 then
56490: LD_VAR 0 1
56494: PPUSH
56495: LD_INT 4
56497: PPUSH
56498: CALL_OW 289
56502: PUSH
56503: LD_INT 0
56505: EQUAL
56506: IFFALSE 56523
// SetCargo ( i , mat_siberit , 100 ) ;
56508: LD_VAR 0 1
56512: PPUSH
56513: LD_INT 3
56515: PPUSH
56516: LD_INT 100
56518: PPUSH
56519: CALL_OW 290
56523: GO 56487
56525: POP
56526: POP
// end ;
56527: PPOPN 2
56529: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56530: LD_EXP 28
56534: PUSH
56535: LD_EXP 73
56539: AND
56540: IFFALSE 56723
56542: GO 56544
56544: DISABLE
56545: LD_INT 0
56547: PPUSH
56548: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56549: LD_ADDR_VAR 0 2
56553: PUSH
56554: LD_INT 22
56556: PUSH
56557: LD_OWVAR 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PPUSH
56566: CALL_OW 69
56570: ST_TO_ADDR
// if not tmp then
56571: LD_VAR 0 2
56575: NOT
56576: IFFALSE 56580
// exit ;
56578: GO 56723
// for i := 1 to 2 do
56580: LD_ADDR_VAR 0 1
56584: PUSH
56585: DOUBLE
56586: LD_INT 1
56588: DEC
56589: ST_TO_ADDR
56590: LD_INT 2
56592: PUSH
56593: FOR_TO
56594: IFFALSE 56721
// begin uc_side := your_side ;
56596: LD_ADDR_OWVAR 20
56600: PUSH
56601: LD_OWVAR 2
56605: ST_TO_ADDR
// uc_nation := nation_american ;
56606: LD_ADDR_OWVAR 21
56610: PUSH
56611: LD_INT 1
56613: ST_TO_ADDR
// vc_chassis := us_morphling ;
56614: LD_ADDR_OWVAR 37
56618: PUSH
56619: LD_INT 5
56621: ST_TO_ADDR
// vc_engine := engine_siberite ;
56622: LD_ADDR_OWVAR 39
56626: PUSH
56627: LD_INT 3
56629: ST_TO_ADDR
// vc_control := control_computer ;
56630: LD_ADDR_OWVAR 38
56634: PUSH
56635: LD_INT 3
56637: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56638: LD_ADDR_OWVAR 40
56642: PUSH
56643: LD_INT 10
56645: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56646: LD_VAR 0 2
56650: PUSH
56651: LD_INT 1
56653: ARRAY
56654: PPUSH
56655: CALL_OW 310
56659: NOT
56660: IFFALSE 56707
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56662: CALL_OW 45
56666: PPUSH
56667: LD_VAR 0 2
56671: PUSH
56672: LD_INT 1
56674: ARRAY
56675: PPUSH
56676: CALL_OW 250
56680: PPUSH
56681: LD_VAR 0 2
56685: PUSH
56686: LD_INT 1
56688: ARRAY
56689: PPUSH
56690: CALL_OW 251
56694: PPUSH
56695: LD_INT 12
56697: PPUSH
56698: LD_INT 1
56700: PPUSH
56701: CALL_OW 50
56705: GO 56719
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56707: CALL_OW 45
56711: PPUSH
56712: LD_INT 1
56714: PPUSH
56715: CALL_OW 51
// end ;
56719: GO 56593
56721: POP
56722: POP
// end ;
56723: PPOPN 2
56725: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56726: LD_EXP 28
56730: PUSH
56731: LD_EXP 74
56735: AND
56736: IFFALSE 56958
56738: GO 56740
56740: DISABLE
56741: LD_INT 0
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
56747: PPUSH
56748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56749: LD_ADDR_VAR 0 6
56753: PUSH
56754: LD_INT 22
56756: PUSH
56757: LD_OWVAR 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 21
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: LD_INT 23
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: PPUSH
56798: CALL_OW 69
56802: ST_TO_ADDR
// if not tmp then
56803: LD_VAR 0 6
56807: NOT
56808: IFFALSE 56812
// exit ;
56810: GO 56958
// s1 := rand ( 1 , 4 ) ;
56812: LD_ADDR_VAR 0 2
56816: PUSH
56817: LD_INT 1
56819: PPUSH
56820: LD_INT 4
56822: PPUSH
56823: CALL_OW 12
56827: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56828: LD_ADDR_VAR 0 4
56832: PUSH
56833: LD_VAR 0 6
56837: PUSH
56838: LD_INT 1
56840: ARRAY
56841: PPUSH
56842: LD_VAR 0 2
56846: PPUSH
56847: CALL_OW 259
56851: ST_TO_ADDR
// if s1 = 1 then
56852: LD_VAR 0 2
56856: PUSH
56857: LD_INT 1
56859: EQUAL
56860: IFFALSE 56880
// s2 := rand ( 2 , 4 ) else
56862: LD_ADDR_VAR 0 3
56866: PUSH
56867: LD_INT 2
56869: PPUSH
56870: LD_INT 4
56872: PPUSH
56873: CALL_OW 12
56877: ST_TO_ADDR
56878: GO 56888
// s2 := 1 ;
56880: LD_ADDR_VAR 0 3
56884: PUSH
56885: LD_INT 1
56887: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56888: LD_ADDR_VAR 0 5
56892: PUSH
56893: LD_VAR 0 6
56897: PUSH
56898: LD_INT 1
56900: ARRAY
56901: PPUSH
56902: LD_VAR 0 3
56906: PPUSH
56907: CALL_OW 259
56911: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56912: LD_VAR 0 6
56916: PUSH
56917: LD_INT 1
56919: ARRAY
56920: PPUSH
56921: LD_VAR 0 2
56925: PPUSH
56926: LD_VAR 0 5
56930: PPUSH
56931: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56935: LD_VAR 0 6
56939: PUSH
56940: LD_INT 1
56942: ARRAY
56943: PPUSH
56944: LD_VAR 0 3
56948: PPUSH
56949: LD_VAR 0 4
56953: PPUSH
56954: CALL_OW 237
// end ;
56958: PPOPN 6
56960: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56961: LD_EXP 28
56965: PUSH
56966: LD_EXP 75
56970: AND
56971: IFFALSE 57050
56973: GO 56975
56975: DISABLE
56976: LD_INT 0
56978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56979: LD_ADDR_VAR 0 1
56983: PUSH
56984: LD_INT 22
56986: PUSH
56987: LD_OWVAR 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 30
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PPUSH
57010: CALL_OW 69
57014: ST_TO_ADDR
// if not tmp then
57015: LD_VAR 0 1
57019: NOT
57020: IFFALSE 57024
// exit ;
57022: GO 57050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57024: LD_VAR 0 1
57028: PUSH
57029: LD_INT 1
57031: PPUSH
57032: LD_VAR 0 1
57036: PPUSH
57037: CALL_OW 12
57041: ARRAY
57042: PPUSH
57043: LD_INT 1
57045: PPUSH
57046: CALL_OW 234
// end ;
57050: PPOPN 1
57052: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57053: LD_EXP 28
57057: PUSH
57058: LD_EXP 76
57062: AND
57063: IFFALSE 57175
57065: GO 57067
57067: DISABLE
57068: LD_INT 0
57070: PPUSH
57071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57072: LD_ADDR_VAR 0 2
57076: PUSH
57077: LD_INT 22
57079: PUSH
57080: LD_OWVAR 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: LD_INT 30
57094: PUSH
57095: LD_INT 27
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 30
57104: PUSH
57105: LD_INT 26
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 30
57114: PUSH
57115: LD_INT 28
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PPUSH
57132: CALL_OW 69
57136: ST_TO_ADDR
// if not tmp then
57137: LD_VAR 0 2
57141: NOT
57142: IFFALSE 57146
// exit ;
57144: GO 57175
// for i in tmp do
57146: LD_ADDR_VAR 0 1
57150: PUSH
57151: LD_VAR 0 2
57155: PUSH
57156: FOR_IN
57157: IFFALSE 57173
// SetLives ( i , 1 ) ;
57159: LD_VAR 0 1
57163: PPUSH
57164: LD_INT 1
57166: PPUSH
57167: CALL_OW 234
57171: GO 57156
57173: POP
57174: POP
// end ;
57175: PPOPN 2
57177: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57178: LD_EXP 28
57182: PUSH
57183: LD_EXP 77
57187: AND
57188: IFFALSE 57475
57190: GO 57192
57192: DISABLE
57193: LD_INT 0
57195: PPUSH
57196: PPUSH
57197: PPUSH
// begin i := rand ( 1 , 7 ) ;
57198: LD_ADDR_VAR 0 1
57202: PUSH
57203: LD_INT 1
57205: PPUSH
57206: LD_INT 7
57208: PPUSH
57209: CALL_OW 12
57213: ST_TO_ADDR
// case i of 1 :
57214: LD_VAR 0 1
57218: PUSH
57219: LD_INT 1
57221: DOUBLE
57222: EQUAL
57223: IFTRUE 57227
57225: GO 57237
57227: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57228: LD_STRING earthquake(getX(game), 0, 32)
57230: PPUSH
57231: CALL_OW 559
57235: GO 57475
57237: LD_INT 2
57239: DOUBLE
57240: EQUAL
57241: IFTRUE 57245
57243: GO 57259
57245: POP
// begin ToLua ( displayStucuk(); ) ;
57246: LD_STRING displayStucuk();
57248: PPUSH
57249: CALL_OW 559
// ResetFog ;
57253: CALL_OW 335
// end ; 3 :
57257: GO 57475
57259: LD_INT 3
57261: DOUBLE
57262: EQUAL
57263: IFTRUE 57267
57265: GO 57371
57267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57268: LD_ADDR_VAR 0 2
57272: PUSH
57273: LD_INT 22
57275: PUSH
57276: LD_OWVAR 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 25
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PPUSH
57299: CALL_OW 69
57303: ST_TO_ADDR
// if not tmp then
57304: LD_VAR 0 2
57308: NOT
57309: IFFALSE 57313
// exit ;
57311: GO 57475
// un := tmp [ rand ( 1 , tmp ) ] ;
57313: LD_ADDR_VAR 0 3
57317: PUSH
57318: LD_VAR 0 2
57322: PUSH
57323: LD_INT 1
57325: PPUSH
57326: LD_VAR 0 2
57330: PPUSH
57331: CALL_OW 12
57335: ARRAY
57336: ST_TO_ADDR
// if Crawls ( un ) then
57337: LD_VAR 0 3
57341: PPUSH
57342: CALL_OW 318
57346: IFFALSE 57357
// ComWalk ( un ) ;
57348: LD_VAR 0 3
57352: PPUSH
57353: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57357: LD_VAR 0 3
57361: PPUSH
57362: LD_INT 8
57364: PPUSH
57365: CALL_OW 336
// end ; 4 :
57369: GO 57475
57371: LD_INT 4
57373: DOUBLE
57374: EQUAL
57375: IFTRUE 57379
57377: GO 57453
57379: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57380: LD_ADDR_VAR 0 2
57384: PUSH
57385: LD_INT 22
57387: PUSH
57388: LD_OWVAR 2
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 30
57399: PUSH
57400: LD_INT 29
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PPUSH
57411: CALL_OW 69
57415: ST_TO_ADDR
// if not tmp then
57416: LD_VAR 0 2
57420: NOT
57421: IFFALSE 57425
// exit ;
57423: GO 57475
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57425: LD_VAR 0 2
57429: PUSH
57430: LD_INT 1
57432: ARRAY
57433: PPUSH
57434: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57438: LD_VAR 0 2
57442: PUSH
57443: LD_INT 1
57445: ARRAY
57446: PPUSH
57447: CALL_OW 65
// end ; 5 .. 7 :
57451: GO 57475
57453: LD_INT 5
57455: DOUBLE
57456: GREATEREQUAL
57457: IFFALSE 57465
57459: LD_INT 7
57461: DOUBLE
57462: LESSEQUAL
57463: IFTRUE 57467
57465: GO 57474
57467: POP
// StreamSibBomb ; end ;
57468: CALL 53712 0 0
57472: GO 57475
57474: POP
// end ;
57475: PPOPN 3
57477: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57478: LD_EXP 28
57482: PUSH
57483: LD_EXP 78
57487: AND
57488: IFFALSE 57644
57490: GO 57492
57492: DISABLE
57493: LD_INT 0
57495: PPUSH
57496: PPUSH
57497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57498: LD_ADDR_VAR 0 2
57502: PUSH
57503: LD_INT 81
57505: PUSH
57506: LD_OWVAR 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 21
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 21
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PPUSH
57547: CALL_OW 69
57551: ST_TO_ADDR
// if not tmp then
57552: LD_VAR 0 2
57556: NOT
57557: IFFALSE 57561
// exit ;
57559: GO 57644
// p := 0 ;
57561: LD_ADDR_VAR 0 3
57565: PUSH
57566: LD_INT 0
57568: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57569: LD_INT 35
57571: PPUSH
57572: CALL_OW 67
// p := p + 1 ;
57576: LD_ADDR_VAR 0 3
57580: PUSH
57581: LD_VAR 0 3
57585: PUSH
57586: LD_INT 1
57588: PLUS
57589: ST_TO_ADDR
// for i in tmp do
57590: LD_ADDR_VAR 0 1
57594: PUSH
57595: LD_VAR 0 2
57599: PUSH
57600: FOR_IN
57601: IFFALSE 57632
// if GetLives ( i ) < 1000 then
57603: LD_VAR 0 1
57607: PPUSH
57608: CALL_OW 256
57612: PUSH
57613: LD_INT 1000
57615: LESS
57616: IFFALSE 57630
// SetLives ( i , 1000 ) ;
57618: LD_VAR 0 1
57622: PPUSH
57623: LD_INT 1000
57625: PPUSH
57626: CALL_OW 234
57630: GO 57600
57632: POP
57633: POP
// until p > 20 ;
57634: LD_VAR 0 3
57638: PUSH
57639: LD_INT 20
57641: GREATER
57642: IFFALSE 57569
// end ;
57644: PPOPN 3
57646: END
// every 0 0$1 trigger StreamModeActive and sTime do
57647: LD_EXP 28
57651: PUSH
57652: LD_EXP 79
57656: AND
57657: IFFALSE 57692
57659: GO 57661
57661: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57662: LD_INT 28
57664: PPUSH
57665: LD_OWVAR 2
57669: PPUSH
57670: LD_INT 2
57672: PPUSH
57673: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57677: LD_INT 30
57679: PPUSH
57680: LD_OWVAR 2
57684: PPUSH
57685: LD_INT 2
57687: PPUSH
57688: CALL_OW 322
// end ;
57692: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57693: LD_EXP 28
57697: PUSH
57698: LD_EXP 80
57702: AND
57703: IFFALSE 57824
57705: GO 57707
57707: DISABLE
57708: LD_INT 0
57710: PPUSH
57711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57712: LD_ADDR_VAR 0 2
57716: PUSH
57717: LD_INT 22
57719: PUSH
57720: LD_OWVAR 2
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 21
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: LD_INT 23
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: PPUSH
57761: CALL_OW 69
57765: ST_TO_ADDR
// if not tmp then
57766: LD_VAR 0 2
57770: NOT
57771: IFFALSE 57775
// exit ;
57773: GO 57824
// for i in tmp do
57775: LD_ADDR_VAR 0 1
57779: PUSH
57780: LD_VAR 0 2
57784: PUSH
57785: FOR_IN
57786: IFFALSE 57822
// begin if Crawls ( i ) then
57788: LD_VAR 0 1
57792: PPUSH
57793: CALL_OW 318
57797: IFFALSE 57808
// ComWalk ( i ) ;
57799: LD_VAR 0 1
57803: PPUSH
57804: CALL_OW 138
// SetClass ( i , 2 ) ;
57808: LD_VAR 0 1
57812: PPUSH
57813: LD_INT 2
57815: PPUSH
57816: CALL_OW 336
// end ;
57820: GO 57785
57822: POP
57823: POP
// end ;
57824: PPOPN 2
57826: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57827: LD_EXP 28
57831: PUSH
57832: LD_EXP 81
57836: AND
57837: IFFALSE 58125
57839: GO 57841
57841: DISABLE
57842: LD_INT 0
57844: PPUSH
57845: PPUSH
57846: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57847: LD_OWVAR 2
57851: PPUSH
57852: LD_INT 9
57854: PPUSH
57855: LD_INT 1
57857: PPUSH
57858: LD_INT 1
57860: PPUSH
57861: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57865: LD_INT 9
57867: PPUSH
57868: LD_OWVAR 2
57872: PPUSH
57873: CALL_OW 343
// uc_side := 9 ;
57877: LD_ADDR_OWVAR 20
57881: PUSH
57882: LD_INT 9
57884: ST_TO_ADDR
// uc_nation := 2 ;
57885: LD_ADDR_OWVAR 21
57889: PUSH
57890: LD_INT 2
57892: ST_TO_ADDR
// hc_name := Dark Warrior ;
57893: LD_ADDR_OWVAR 26
57897: PUSH
57898: LD_STRING Dark Warrior
57900: ST_TO_ADDR
// hc_gallery :=  ;
57901: LD_ADDR_OWVAR 33
57905: PUSH
57906: LD_STRING 
57908: ST_TO_ADDR
// hc_noskilllimit := true ;
57909: LD_ADDR_OWVAR 76
57913: PUSH
57914: LD_INT 1
57916: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57917: LD_ADDR_OWVAR 31
57921: PUSH
57922: LD_INT 30
57924: PUSH
57925: LD_INT 30
57927: PUSH
57928: LD_INT 30
57930: PUSH
57931: LD_INT 30
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// un := CreateHuman ;
57940: LD_ADDR_VAR 0 3
57944: PUSH
57945: CALL_OW 44
57949: ST_TO_ADDR
// hc_noskilllimit := false ;
57950: LD_ADDR_OWVAR 76
57954: PUSH
57955: LD_INT 0
57957: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57958: LD_VAR 0 3
57962: PPUSH
57963: LD_INT 1
57965: PPUSH
57966: CALL_OW 51
// ToLua ( playRanger() ) ;
57970: LD_STRING playRanger()
57972: PPUSH
57973: CALL_OW 559
// p := 0 ;
57977: LD_ADDR_VAR 0 2
57981: PUSH
57982: LD_INT 0
57984: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57985: LD_INT 35
57987: PPUSH
57988: CALL_OW 67
// p := p + 1 ;
57992: LD_ADDR_VAR 0 2
57996: PUSH
57997: LD_VAR 0 2
58001: PUSH
58002: LD_INT 1
58004: PLUS
58005: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58006: LD_VAR 0 3
58010: PPUSH
58011: CALL_OW 256
58015: PUSH
58016: LD_INT 1000
58018: LESS
58019: IFFALSE 58033
// SetLives ( un , 1000 ) ;
58021: LD_VAR 0 3
58025: PPUSH
58026: LD_INT 1000
58028: PPUSH
58029: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58033: LD_VAR 0 3
58037: PPUSH
58038: LD_INT 81
58040: PUSH
58041: LD_OWVAR 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 91
58052: PUSH
58053: LD_VAR 0 3
58057: PUSH
58058: LD_INT 30
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PPUSH
58070: CALL_OW 69
58074: PPUSH
58075: LD_VAR 0 3
58079: PPUSH
58080: CALL_OW 74
58084: PPUSH
58085: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58089: LD_VAR 0 2
58093: PUSH
58094: LD_INT 80
58096: GREATER
58097: PUSH
58098: LD_VAR 0 3
58102: PPUSH
58103: CALL_OW 301
58107: OR
58108: IFFALSE 57985
// if un then
58110: LD_VAR 0 3
58114: IFFALSE 58125
// RemoveUnit ( un ) ;
58116: LD_VAR 0 3
58120: PPUSH
58121: CALL_OW 64
// end ;
58125: PPOPN 3
58127: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58128: LD_EXP 82
58132: IFFALSE 58248
58134: GO 58136
58136: DISABLE
58137: LD_INT 0
58139: PPUSH
58140: PPUSH
58141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58142: LD_ADDR_VAR 0 2
58146: PUSH
58147: LD_INT 81
58149: PUSH
58150: LD_OWVAR 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 21
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PPUSH
58173: CALL_OW 69
58177: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58178: LD_STRING playComputer()
58180: PPUSH
58181: CALL_OW 559
// if not tmp then
58185: LD_VAR 0 2
58189: NOT
58190: IFFALSE 58194
// exit ;
58192: GO 58248
// for i in tmp do
58194: LD_ADDR_VAR 0 1
58198: PUSH
58199: LD_VAR 0 2
58203: PUSH
58204: FOR_IN
58205: IFFALSE 58246
// for j := 1 to 4 do
58207: LD_ADDR_VAR 0 3
58211: PUSH
58212: DOUBLE
58213: LD_INT 1
58215: DEC
58216: ST_TO_ADDR
58217: LD_INT 4
58219: PUSH
58220: FOR_TO
58221: IFFALSE 58242
// SetSkill ( i , j , 10 ) ;
58223: LD_VAR 0 1
58227: PPUSH
58228: LD_VAR 0 3
58232: PPUSH
58233: LD_INT 10
58235: PPUSH
58236: CALL_OW 237
58240: GO 58220
58242: POP
58243: POP
58244: GO 58204
58246: POP
58247: POP
// end ;
58248: PPOPN 3
58250: END
// every 0 0$1 trigger s30 do var i , tmp ;
58251: LD_EXP 83
58255: IFFALSE 58324
58257: GO 58259
58259: DISABLE
58260: LD_INT 0
58262: PPUSH
58263: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58264: LD_ADDR_VAR 0 2
58268: PUSH
58269: LD_INT 22
58271: PUSH
58272: LD_OWVAR 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PPUSH
58281: CALL_OW 69
58285: ST_TO_ADDR
// if not tmp then
58286: LD_VAR 0 2
58290: NOT
58291: IFFALSE 58295
// exit ;
58293: GO 58324
// for i in tmp do
58295: LD_ADDR_VAR 0 1
58299: PUSH
58300: LD_VAR 0 2
58304: PUSH
58305: FOR_IN
58306: IFFALSE 58322
// SetLives ( i , 300 ) ;
58308: LD_VAR 0 1
58312: PPUSH
58313: LD_INT 300
58315: PPUSH
58316: CALL_OW 234
58320: GO 58305
58322: POP
58323: POP
// end ;
58324: PPOPN 2
58326: END
// every 0 0$1 trigger s60 do var i , tmp ;
58327: LD_EXP 84
58331: IFFALSE 58400
58333: GO 58335
58335: DISABLE
58336: LD_INT 0
58338: PPUSH
58339: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58340: LD_ADDR_VAR 0 2
58344: PUSH
58345: LD_INT 22
58347: PUSH
58348: LD_OWVAR 2
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PPUSH
58357: CALL_OW 69
58361: ST_TO_ADDR
// if not tmp then
58362: LD_VAR 0 2
58366: NOT
58367: IFFALSE 58371
// exit ;
58369: GO 58400
// for i in tmp do
58371: LD_ADDR_VAR 0 1
58375: PUSH
58376: LD_VAR 0 2
58380: PUSH
58381: FOR_IN
58382: IFFALSE 58398
// SetLives ( i , 600 ) ;
58384: LD_VAR 0 1
58388: PPUSH
58389: LD_INT 600
58391: PPUSH
58392: CALL_OW 234
58396: GO 58381
58398: POP
58399: POP
// end ;
58400: PPOPN 2
58402: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58403: LD_INT 0
58405: PPUSH
// case cmd of 301 :
58406: LD_VAR 0 1
58410: PUSH
58411: LD_INT 301
58413: DOUBLE
58414: EQUAL
58415: IFTRUE 58419
58417: GO 58451
58419: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58420: LD_VAR 0 6
58424: PPUSH
58425: LD_VAR 0 7
58429: PPUSH
58430: LD_VAR 0 8
58434: PPUSH
58435: LD_VAR 0 4
58439: PPUSH
58440: LD_VAR 0 5
58444: PPUSH
58445: CALL 59652 0 5
58449: GO 58572
58451: LD_INT 302
58453: DOUBLE
58454: EQUAL
58455: IFTRUE 58459
58457: GO 58496
58459: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58460: LD_VAR 0 6
58464: PPUSH
58465: LD_VAR 0 7
58469: PPUSH
58470: LD_VAR 0 8
58474: PPUSH
58475: LD_VAR 0 9
58479: PPUSH
58480: LD_VAR 0 4
58484: PPUSH
58485: LD_VAR 0 5
58489: PPUSH
58490: CALL 59743 0 6
58494: GO 58572
58496: LD_INT 303
58498: DOUBLE
58499: EQUAL
58500: IFTRUE 58504
58502: GO 58541
58504: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58505: LD_VAR 0 6
58509: PPUSH
58510: LD_VAR 0 7
58514: PPUSH
58515: LD_VAR 0 8
58519: PPUSH
58520: LD_VAR 0 9
58524: PPUSH
58525: LD_VAR 0 4
58529: PPUSH
58530: LD_VAR 0 5
58534: PPUSH
58535: CALL 58577 0 6
58539: GO 58572
58541: LD_INT 304
58543: DOUBLE
58544: EQUAL
58545: IFTRUE 58549
58547: GO 58571
58549: POP
// hHackTeleport ( unit , x , y ) ; end ;
58550: LD_VAR 0 2
58554: PPUSH
58555: LD_VAR 0 4
58559: PPUSH
58560: LD_VAR 0 5
58564: PPUSH
58565: CALL 60336 0 3
58569: GO 58572
58571: POP
// end ;
58572: LD_VAR 0 12
58576: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58577: LD_INT 0
58579: PPUSH
58580: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58581: LD_VAR 0 1
58585: PUSH
58586: LD_INT 1
58588: LESS
58589: PUSH
58590: LD_VAR 0 1
58594: PUSH
58595: LD_INT 3
58597: GREATER
58598: OR
58599: PUSH
58600: LD_VAR 0 5
58604: PPUSH
58605: LD_VAR 0 6
58609: PPUSH
58610: CALL_OW 428
58614: OR
58615: IFFALSE 58619
// exit ;
58617: GO 59339
// uc_side := your_side ;
58619: LD_ADDR_OWVAR 20
58623: PUSH
58624: LD_OWVAR 2
58628: ST_TO_ADDR
// uc_nation := nation ;
58629: LD_ADDR_OWVAR 21
58633: PUSH
58634: LD_VAR 0 1
58638: ST_TO_ADDR
// bc_level = 1 ;
58639: LD_ADDR_OWVAR 43
58643: PUSH
58644: LD_INT 1
58646: ST_TO_ADDR
// case btype of 1 :
58647: LD_VAR 0 2
58651: PUSH
58652: LD_INT 1
58654: DOUBLE
58655: EQUAL
58656: IFTRUE 58660
58658: GO 58671
58660: POP
// bc_type := b_depot ; 2 :
58661: LD_ADDR_OWVAR 42
58665: PUSH
58666: LD_INT 0
58668: ST_TO_ADDR
58669: GO 59283
58671: LD_INT 2
58673: DOUBLE
58674: EQUAL
58675: IFTRUE 58679
58677: GO 58690
58679: POP
// bc_type := b_warehouse ; 3 :
58680: LD_ADDR_OWVAR 42
58684: PUSH
58685: LD_INT 1
58687: ST_TO_ADDR
58688: GO 59283
58690: LD_INT 3
58692: DOUBLE
58693: EQUAL
58694: IFTRUE 58698
58696: GO 58709
58698: POP
// bc_type := b_lab ; 4 .. 9 :
58699: LD_ADDR_OWVAR 42
58703: PUSH
58704: LD_INT 6
58706: ST_TO_ADDR
58707: GO 59283
58709: LD_INT 4
58711: DOUBLE
58712: GREATEREQUAL
58713: IFFALSE 58721
58715: LD_INT 9
58717: DOUBLE
58718: LESSEQUAL
58719: IFTRUE 58723
58721: GO 58775
58723: POP
// begin bc_type := b_lab_half ;
58724: LD_ADDR_OWVAR 42
58728: PUSH
58729: LD_INT 7
58731: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58732: LD_ADDR_OWVAR 44
58736: PUSH
58737: LD_INT 10
58739: PUSH
58740: LD_INT 11
58742: PUSH
58743: LD_INT 12
58745: PUSH
58746: LD_INT 15
58748: PUSH
58749: LD_INT 14
58751: PUSH
58752: LD_INT 13
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: PUSH
58763: LD_VAR 0 2
58767: PUSH
58768: LD_INT 3
58770: MINUS
58771: ARRAY
58772: ST_TO_ADDR
// end ; 10 .. 13 :
58773: GO 59283
58775: LD_INT 10
58777: DOUBLE
58778: GREATEREQUAL
58779: IFFALSE 58787
58781: LD_INT 13
58783: DOUBLE
58784: LESSEQUAL
58785: IFTRUE 58789
58787: GO 58866
58789: POP
// begin bc_type := b_lab_full ;
58790: LD_ADDR_OWVAR 42
58794: PUSH
58795: LD_INT 8
58797: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58798: LD_ADDR_OWVAR 44
58802: PUSH
58803: LD_INT 10
58805: PUSH
58806: LD_INT 12
58808: PUSH
58809: LD_INT 14
58811: PUSH
58812: LD_INT 13
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: PUSH
58821: LD_VAR 0 2
58825: PUSH
58826: LD_INT 9
58828: MINUS
58829: ARRAY
58830: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58831: LD_ADDR_OWVAR 45
58835: PUSH
58836: LD_INT 11
58838: PUSH
58839: LD_INT 15
58841: PUSH
58842: LD_INT 12
58844: PUSH
58845: LD_INT 15
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: PUSH
58854: LD_VAR 0 2
58858: PUSH
58859: LD_INT 9
58861: MINUS
58862: ARRAY
58863: ST_TO_ADDR
// end ; 14 :
58864: GO 59283
58866: LD_INT 14
58868: DOUBLE
58869: EQUAL
58870: IFTRUE 58874
58872: GO 58885
58874: POP
// bc_type := b_workshop ; 15 :
58875: LD_ADDR_OWVAR 42
58879: PUSH
58880: LD_INT 2
58882: ST_TO_ADDR
58883: GO 59283
58885: LD_INT 15
58887: DOUBLE
58888: EQUAL
58889: IFTRUE 58893
58891: GO 58904
58893: POP
// bc_type := b_factory ; 16 :
58894: LD_ADDR_OWVAR 42
58898: PUSH
58899: LD_INT 3
58901: ST_TO_ADDR
58902: GO 59283
58904: LD_INT 16
58906: DOUBLE
58907: EQUAL
58908: IFTRUE 58912
58910: GO 58923
58912: POP
// bc_type := b_ext_gun ; 17 :
58913: LD_ADDR_OWVAR 42
58917: PUSH
58918: LD_INT 17
58920: ST_TO_ADDR
58921: GO 59283
58923: LD_INT 17
58925: DOUBLE
58926: EQUAL
58927: IFTRUE 58931
58929: GO 58959
58931: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58932: LD_ADDR_OWVAR 42
58936: PUSH
58937: LD_INT 19
58939: PUSH
58940: LD_INT 23
58942: PUSH
58943: LD_INT 19
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: PUSH
58951: LD_VAR 0 1
58955: ARRAY
58956: ST_TO_ADDR
58957: GO 59283
58959: LD_INT 18
58961: DOUBLE
58962: EQUAL
58963: IFTRUE 58967
58965: GO 58978
58967: POP
// bc_type := b_ext_radar ; 19 :
58968: LD_ADDR_OWVAR 42
58972: PUSH
58973: LD_INT 20
58975: ST_TO_ADDR
58976: GO 59283
58978: LD_INT 19
58980: DOUBLE
58981: EQUAL
58982: IFTRUE 58986
58984: GO 58997
58986: POP
// bc_type := b_ext_radio ; 20 :
58987: LD_ADDR_OWVAR 42
58991: PUSH
58992: LD_INT 22
58994: ST_TO_ADDR
58995: GO 59283
58997: LD_INT 20
58999: DOUBLE
59000: EQUAL
59001: IFTRUE 59005
59003: GO 59016
59005: POP
// bc_type := b_ext_siberium ; 21 :
59006: LD_ADDR_OWVAR 42
59010: PUSH
59011: LD_INT 21
59013: ST_TO_ADDR
59014: GO 59283
59016: LD_INT 21
59018: DOUBLE
59019: EQUAL
59020: IFTRUE 59024
59022: GO 59035
59024: POP
// bc_type := b_ext_computer ; 22 :
59025: LD_ADDR_OWVAR 42
59029: PUSH
59030: LD_INT 24
59032: ST_TO_ADDR
59033: GO 59283
59035: LD_INT 22
59037: DOUBLE
59038: EQUAL
59039: IFTRUE 59043
59041: GO 59054
59043: POP
// bc_type := b_ext_track ; 23 :
59044: LD_ADDR_OWVAR 42
59048: PUSH
59049: LD_INT 16
59051: ST_TO_ADDR
59052: GO 59283
59054: LD_INT 23
59056: DOUBLE
59057: EQUAL
59058: IFTRUE 59062
59060: GO 59073
59062: POP
// bc_type := b_ext_laser ; 24 :
59063: LD_ADDR_OWVAR 42
59067: PUSH
59068: LD_INT 25
59070: ST_TO_ADDR
59071: GO 59283
59073: LD_INT 24
59075: DOUBLE
59076: EQUAL
59077: IFTRUE 59081
59079: GO 59092
59081: POP
// bc_type := b_control_tower ; 25 :
59082: LD_ADDR_OWVAR 42
59086: PUSH
59087: LD_INT 36
59089: ST_TO_ADDR
59090: GO 59283
59092: LD_INT 25
59094: DOUBLE
59095: EQUAL
59096: IFTRUE 59100
59098: GO 59111
59100: POP
// bc_type := b_breastwork ; 26 :
59101: LD_ADDR_OWVAR 42
59105: PUSH
59106: LD_INT 31
59108: ST_TO_ADDR
59109: GO 59283
59111: LD_INT 26
59113: DOUBLE
59114: EQUAL
59115: IFTRUE 59119
59117: GO 59130
59119: POP
// bc_type := b_bunker ; 27 :
59120: LD_ADDR_OWVAR 42
59124: PUSH
59125: LD_INT 32
59127: ST_TO_ADDR
59128: GO 59283
59130: LD_INT 27
59132: DOUBLE
59133: EQUAL
59134: IFTRUE 59138
59136: GO 59149
59138: POP
// bc_type := b_turret ; 28 :
59139: LD_ADDR_OWVAR 42
59143: PUSH
59144: LD_INT 33
59146: ST_TO_ADDR
59147: GO 59283
59149: LD_INT 28
59151: DOUBLE
59152: EQUAL
59153: IFTRUE 59157
59155: GO 59168
59157: POP
// bc_type := b_armoury ; 29 :
59158: LD_ADDR_OWVAR 42
59162: PUSH
59163: LD_INT 4
59165: ST_TO_ADDR
59166: GO 59283
59168: LD_INT 29
59170: DOUBLE
59171: EQUAL
59172: IFTRUE 59176
59174: GO 59187
59176: POP
// bc_type := b_barracks ; 30 :
59177: LD_ADDR_OWVAR 42
59181: PUSH
59182: LD_INT 5
59184: ST_TO_ADDR
59185: GO 59283
59187: LD_INT 30
59189: DOUBLE
59190: EQUAL
59191: IFTRUE 59195
59193: GO 59206
59195: POP
// bc_type := b_solar_power ; 31 :
59196: LD_ADDR_OWVAR 42
59200: PUSH
59201: LD_INT 27
59203: ST_TO_ADDR
59204: GO 59283
59206: LD_INT 31
59208: DOUBLE
59209: EQUAL
59210: IFTRUE 59214
59212: GO 59225
59214: POP
// bc_type := b_oil_power ; 32 :
59215: LD_ADDR_OWVAR 42
59219: PUSH
59220: LD_INT 26
59222: ST_TO_ADDR
59223: GO 59283
59225: LD_INT 32
59227: DOUBLE
59228: EQUAL
59229: IFTRUE 59233
59231: GO 59244
59233: POP
// bc_type := b_siberite_power ; 33 :
59234: LD_ADDR_OWVAR 42
59238: PUSH
59239: LD_INT 28
59241: ST_TO_ADDR
59242: GO 59283
59244: LD_INT 33
59246: DOUBLE
59247: EQUAL
59248: IFTRUE 59252
59250: GO 59263
59252: POP
// bc_type := b_oil_mine ; 34 :
59253: LD_ADDR_OWVAR 42
59257: PUSH
59258: LD_INT 29
59260: ST_TO_ADDR
59261: GO 59283
59263: LD_INT 34
59265: DOUBLE
59266: EQUAL
59267: IFTRUE 59271
59269: GO 59282
59271: POP
// bc_type := b_siberite_mine ; end ;
59272: LD_ADDR_OWVAR 42
59276: PUSH
59277: LD_INT 30
59279: ST_TO_ADDR
59280: GO 59283
59282: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59283: LD_ADDR_VAR 0 8
59287: PUSH
59288: LD_VAR 0 5
59292: PPUSH
59293: LD_VAR 0 6
59297: PPUSH
59298: LD_VAR 0 3
59302: PPUSH
59303: CALL_OW 47
59307: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59308: LD_OWVAR 42
59312: PUSH
59313: LD_INT 32
59315: PUSH
59316: LD_INT 33
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: IN
59323: IFFALSE 59339
// PlaceWeaponTurret ( b , weapon ) ;
59325: LD_VAR 0 8
59329: PPUSH
59330: LD_VAR 0 4
59334: PPUSH
59335: CALL_OW 431
// end ;
59339: LD_VAR 0 7
59343: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59344: LD_INT 0
59346: PPUSH
59347: PPUSH
59348: PPUSH
59349: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59350: LD_ADDR_VAR 0 4
59354: PUSH
59355: LD_INT 22
59357: PUSH
59358: LD_OWVAR 2
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 30
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 30
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PPUSH
59399: CALL_OW 69
59403: ST_TO_ADDR
// if not tmp then
59404: LD_VAR 0 4
59408: NOT
59409: IFFALSE 59413
// exit ;
59411: GO 59472
// for i in tmp do
59413: LD_ADDR_VAR 0 2
59417: PUSH
59418: LD_VAR 0 4
59422: PUSH
59423: FOR_IN
59424: IFFALSE 59470
// for j = 1 to 3 do
59426: LD_ADDR_VAR 0 3
59430: PUSH
59431: DOUBLE
59432: LD_INT 1
59434: DEC
59435: ST_TO_ADDR
59436: LD_INT 3
59438: PUSH
59439: FOR_TO
59440: IFFALSE 59466
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59442: LD_VAR 0 2
59446: PPUSH
59447: CALL_OW 274
59451: PPUSH
59452: LD_VAR 0 3
59456: PPUSH
59457: LD_INT 99999
59459: PPUSH
59460: CALL_OW 277
59464: GO 59439
59466: POP
59467: POP
59468: GO 59423
59470: POP
59471: POP
// end ;
59472: LD_VAR 0 1
59476: RET
// export function hHackSetLevel10 ; var i , j ; begin
59477: LD_INT 0
59479: PPUSH
59480: PPUSH
59481: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59482: LD_ADDR_VAR 0 2
59486: PUSH
59487: LD_INT 21
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PPUSH
59497: CALL_OW 69
59501: PUSH
59502: FOR_IN
59503: IFFALSE 59555
// if IsSelected ( i ) then
59505: LD_VAR 0 2
59509: PPUSH
59510: CALL_OW 306
59514: IFFALSE 59553
// begin for j := 1 to 4 do
59516: LD_ADDR_VAR 0 3
59520: PUSH
59521: DOUBLE
59522: LD_INT 1
59524: DEC
59525: ST_TO_ADDR
59526: LD_INT 4
59528: PUSH
59529: FOR_TO
59530: IFFALSE 59551
// SetSkill ( i , j , 10 ) ;
59532: LD_VAR 0 2
59536: PPUSH
59537: LD_VAR 0 3
59541: PPUSH
59542: LD_INT 10
59544: PPUSH
59545: CALL_OW 237
59549: GO 59529
59551: POP
59552: POP
// end ;
59553: GO 59502
59555: POP
59556: POP
// end ;
59557: LD_VAR 0 1
59561: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59562: LD_INT 0
59564: PPUSH
59565: PPUSH
59566: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59567: LD_ADDR_VAR 0 2
59571: PUSH
59572: LD_INT 22
59574: PUSH
59575: LD_OWVAR 2
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 21
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PPUSH
59598: CALL_OW 69
59602: PUSH
59603: FOR_IN
59604: IFFALSE 59645
// begin for j := 1 to 4 do
59606: LD_ADDR_VAR 0 3
59610: PUSH
59611: DOUBLE
59612: LD_INT 1
59614: DEC
59615: ST_TO_ADDR
59616: LD_INT 4
59618: PUSH
59619: FOR_TO
59620: IFFALSE 59641
// SetSkill ( i , j , 10 ) ;
59622: LD_VAR 0 2
59626: PPUSH
59627: LD_VAR 0 3
59631: PPUSH
59632: LD_INT 10
59634: PPUSH
59635: CALL_OW 237
59639: GO 59619
59641: POP
59642: POP
// end ;
59643: GO 59603
59645: POP
59646: POP
// end ;
59647: LD_VAR 0 1
59651: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59652: LD_INT 0
59654: PPUSH
// uc_side := your_side ;
59655: LD_ADDR_OWVAR 20
59659: PUSH
59660: LD_OWVAR 2
59664: ST_TO_ADDR
// uc_nation := nation ;
59665: LD_ADDR_OWVAR 21
59669: PUSH
59670: LD_VAR 0 1
59674: ST_TO_ADDR
// InitHc ;
59675: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59679: LD_INT 0
59681: PPUSH
59682: LD_VAR 0 2
59686: PPUSH
59687: LD_VAR 0 3
59691: PPUSH
59692: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59696: LD_VAR 0 4
59700: PPUSH
59701: LD_VAR 0 5
59705: PPUSH
59706: CALL_OW 428
59710: PUSH
59711: LD_INT 0
59713: EQUAL
59714: IFFALSE 59738
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59716: CALL_OW 44
59720: PPUSH
59721: LD_VAR 0 4
59725: PPUSH
59726: LD_VAR 0 5
59730: PPUSH
59731: LD_INT 1
59733: PPUSH
59734: CALL_OW 48
// end ;
59738: LD_VAR 0 6
59742: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59743: LD_INT 0
59745: PPUSH
59746: PPUSH
// uc_side := your_side ;
59747: LD_ADDR_OWVAR 20
59751: PUSH
59752: LD_OWVAR 2
59756: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59757: LD_VAR 0 1
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 4
59773: PUSH
59774: LD_INT 5
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: IN
59784: IFFALSE 59796
// uc_nation := nation_american else
59786: LD_ADDR_OWVAR 21
59790: PUSH
59791: LD_INT 1
59793: ST_TO_ADDR
59794: GO 59839
// if chassis in [ 11 , 12 , 13 , 14 ] then
59796: LD_VAR 0 1
59800: PUSH
59801: LD_INT 11
59803: PUSH
59804: LD_INT 12
59806: PUSH
59807: LD_INT 13
59809: PUSH
59810: LD_INT 14
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: IN
59819: IFFALSE 59831
// uc_nation := nation_arabian else
59821: LD_ADDR_OWVAR 21
59825: PUSH
59826: LD_INT 2
59828: ST_TO_ADDR
59829: GO 59839
// uc_nation := nation_russian ;
59831: LD_ADDR_OWVAR 21
59835: PUSH
59836: LD_INT 3
59838: ST_TO_ADDR
// vc_chassis := chassis ;
59839: LD_ADDR_OWVAR 37
59843: PUSH
59844: LD_VAR 0 1
59848: ST_TO_ADDR
// vc_engine := engine ;
59849: LD_ADDR_OWVAR 39
59853: PUSH
59854: LD_VAR 0 2
59858: ST_TO_ADDR
// vc_control := control ;
59859: LD_ADDR_OWVAR 38
59863: PUSH
59864: LD_VAR 0 3
59868: ST_TO_ADDR
// vc_weapon := weapon ;
59869: LD_ADDR_OWVAR 40
59873: PUSH
59874: LD_VAR 0 4
59878: ST_TO_ADDR
// un := CreateVehicle ;
59879: LD_ADDR_VAR 0 8
59883: PUSH
59884: CALL_OW 45
59888: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59889: LD_VAR 0 8
59893: PPUSH
59894: LD_INT 0
59896: PPUSH
59897: LD_INT 5
59899: PPUSH
59900: CALL_OW 12
59904: PPUSH
59905: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59909: LD_VAR 0 8
59913: PPUSH
59914: LD_VAR 0 5
59918: PPUSH
59919: LD_VAR 0 6
59923: PPUSH
59924: LD_INT 1
59926: PPUSH
59927: CALL_OW 48
// end ;
59931: LD_VAR 0 7
59935: RET
// export hInvincible ; every 1 do
59936: GO 59938
59938: DISABLE
// hInvincible := [ ] ;
59939: LD_ADDR_EXP 85
59943: PUSH
59944: EMPTY
59945: ST_TO_ADDR
59946: END
// every 10 do var i ;
59947: GO 59949
59949: DISABLE
59950: LD_INT 0
59952: PPUSH
// begin enable ;
59953: ENABLE
// if not hInvincible then
59954: LD_EXP 85
59958: NOT
59959: IFFALSE 59963
// exit ;
59961: GO 60007
// for i in hInvincible do
59963: LD_ADDR_VAR 0 1
59967: PUSH
59968: LD_EXP 85
59972: PUSH
59973: FOR_IN
59974: IFFALSE 60005
// if GetLives ( i ) < 1000 then
59976: LD_VAR 0 1
59980: PPUSH
59981: CALL_OW 256
59985: PUSH
59986: LD_INT 1000
59988: LESS
59989: IFFALSE 60003
// SetLives ( i , 1000 ) ;
59991: LD_VAR 0 1
59995: PPUSH
59996: LD_INT 1000
59998: PPUSH
59999: CALL_OW 234
60003: GO 59973
60005: POP
60006: POP
// end ;
60007: PPOPN 1
60009: END
// export function hHackInvincible ; var i ; begin
60010: LD_INT 0
60012: PPUSH
60013: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60014: LD_ADDR_VAR 0 2
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 21
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 21
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: PPUSH
60047: CALL_OW 69
60051: PUSH
60052: FOR_IN
60053: IFFALSE 60114
// if IsSelected ( i ) then
60055: LD_VAR 0 2
60059: PPUSH
60060: CALL_OW 306
60064: IFFALSE 60112
// begin if i in hInvincible then
60066: LD_VAR 0 2
60070: PUSH
60071: LD_EXP 85
60075: IN
60076: IFFALSE 60096
// hInvincible := hInvincible diff i else
60078: LD_ADDR_EXP 85
60082: PUSH
60083: LD_EXP 85
60087: PUSH
60088: LD_VAR 0 2
60092: DIFF
60093: ST_TO_ADDR
60094: GO 60112
// hInvincible := hInvincible union i ;
60096: LD_ADDR_EXP 85
60100: PUSH
60101: LD_EXP 85
60105: PUSH
60106: LD_VAR 0 2
60110: UNION
60111: ST_TO_ADDR
// end ;
60112: GO 60052
60114: POP
60115: POP
// end ;
60116: LD_VAR 0 1
60120: RET
// export function hHackInvisible ; var i , j ; begin
60121: LD_INT 0
60123: PPUSH
60124: PPUSH
60125: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60126: LD_ADDR_VAR 0 2
60130: PUSH
60131: LD_INT 21
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PPUSH
60141: CALL_OW 69
60145: PUSH
60146: FOR_IN
60147: IFFALSE 60171
// if IsSelected ( i ) then
60149: LD_VAR 0 2
60153: PPUSH
60154: CALL_OW 306
60158: IFFALSE 60169
// ComForceInvisible ( i ) ;
60160: LD_VAR 0 2
60164: PPUSH
60165: CALL_OW 496
60169: GO 60146
60171: POP
60172: POP
// end ;
60173: LD_VAR 0 1
60177: RET
// export function hHackChangeYourSide ; begin
60178: LD_INT 0
60180: PPUSH
// if your_side = 8 then
60181: LD_OWVAR 2
60185: PUSH
60186: LD_INT 8
60188: EQUAL
60189: IFFALSE 60201
// your_side := 0 else
60191: LD_ADDR_OWVAR 2
60195: PUSH
60196: LD_INT 0
60198: ST_TO_ADDR
60199: GO 60215
// your_side := your_side + 1 ;
60201: LD_ADDR_OWVAR 2
60205: PUSH
60206: LD_OWVAR 2
60210: PUSH
60211: LD_INT 1
60213: PLUS
60214: ST_TO_ADDR
// end ;
60215: LD_VAR 0 1
60219: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60220: LD_INT 0
60222: PPUSH
60223: PPUSH
60224: PPUSH
// for i in all_units do
60225: LD_ADDR_VAR 0 2
60229: PUSH
60230: LD_OWVAR 3
60234: PUSH
60235: FOR_IN
60236: IFFALSE 60314
// if IsSelected ( i ) then
60238: LD_VAR 0 2
60242: PPUSH
60243: CALL_OW 306
60247: IFFALSE 60312
// begin j := GetSide ( i ) ;
60249: LD_ADDR_VAR 0 3
60253: PUSH
60254: LD_VAR 0 2
60258: PPUSH
60259: CALL_OW 255
60263: ST_TO_ADDR
// if j = 8 then
60264: LD_VAR 0 3
60268: PUSH
60269: LD_INT 8
60271: EQUAL
60272: IFFALSE 60284
// j := 0 else
60274: LD_ADDR_VAR 0 3
60278: PUSH
60279: LD_INT 0
60281: ST_TO_ADDR
60282: GO 60298
// j := j + 1 ;
60284: LD_ADDR_VAR 0 3
60288: PUSH
60289: LD_VAR 0 3
60293: PUSH
60294: LD_INT 1
60296: PLUS
60297: ST_TO_ADDR
// SetSide ( i , j ) ;
60298: LD_VAR 0 2
60302: PPUSH
60303: LD_VAR 0 3
60307: PPUSH
60308: CALL_OW 235
// end ;
60312: GO 60235
60314: POP
60315: POP
// end ;
60316: LD_VAR 0 1
60320: RET
// export function hHackFog ; begin
60321: LD_INT 0
60323: PPUSH
// FogOff ( true ) ;
60324: LD_INT 1
60326: PPUSH
60327: CALL_OW 344
// end ;
60331: LD_VAR 0 1
60335: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60336: LD_INT 0
60338: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60339: LD_VAR 0 1
60343: PPUSH
60344: LD_VAR 0 2
60348: PPUSH
60349: LD_VAR 0 3
60353: PPUSH
60354: LD_INT 1
60356: PPUSH
60357: LD_INT 1
60359: PPUSH
60360: CALL_OW 483
// CenterOnXY ( x , y ) ;
60364: LD_VAR 0 2
60368: PPUSH
60369: LD_VAR 0 3
60373: PPUSH
60374: CALL_OW 84
// end ;
60378: LD_VAR 0 4
60382: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60383: LD_INT 0
60385: PPUSH
60386: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60387: LD_VAR 0 1
60391: NOT
60392: PUSH
60393: LD_VAR 0 2
60397: PPUSH
60398: LD_VAR 0 3
60402: PPUSH
60403: CALL_OW 488
60407: NOT
60408: OR
60409: PUSH
60410: LD_VAR 0 1
60414: PPUSH
60415: CALL_OW 266
60419: PUSH
60420: LD_INT 3
60422: NONEQUAL
60423: PUSH
60424: LD_VAR 0 1
60428: PPUSH
60429: CALL_OW 247
60433: PUSH
60434: LD_INT 1
60436: EQUAL
60437: NOT
60438: AND
60439: OR
60440: IFFALSE 60444
// exit ;
60442: GO 60593
// if GetType ( factory ) = unit_human then
60444: LD_VAR 0 1
60448: PPUSH
60449: CALL_OW 247
60453: PUSH
60454: LD_INT 1
60456: EQUAL
60457: IFFALSE 60474
// factory := IsInUnit ( factory ) ;
60459: LD_ADDR_VAR 0 1
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL_OW 310
60473: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60474: LD_VAR 0 1
60478: PPUSH
60479: CALL_OW 266
60483: PUSH
60484: LD_INT 3
60486: NONEQUAL
60487: IFFALSE 60491
// exit ;
60489: GO 60593
// if HexInfo ( x , y ) = factory then
60491: LD_VAR 0 2
60495: PPUSH
60496: LD_VAR 0 3
60500: PPUSH
60501: CALL_OW 428
60505: PUSH
60506: LD_VAR 0 1
60510: EQUAL
60511: IFFALSE 60538
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60513: LD_ADDR_EXP 86
60517: PUSH
60518: LD_EXP 86
60522: PPUSH
60523: LD_VAR 0 1
60527: PPUSH
60528: LD_INT 0
60530: PPUSH
60531: CALL_OW 1
60535: ST_TO_ADDR
60536: GO 60589
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60538: LD_ADDR_EXP 86
60542: PUSH
60543: LD_EXP 86
60547: PPUSH
60548: LD_VAR 0 1
60552: PPUSH
60553: LD_VAR 0 1
60557: PPUSH
60558: CALL_OW 255
60562: PUSH
60563: LD_VAR 0 1
60567: PUSH
60568: LD_VAR 0 2
60572: PUSH
60573: LD_VAR 0 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: PPUSH
60584: CALL_OW 1
60588: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60589: CALL 60598 0 0
// end ;
60593: LD_VAR 0 4
60597: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60598: LD_INT 0
60600: PPUSH
60601: PPUSH
60602: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60603: LD_STRING resetFactoryWaypoint();
60605: PPUSH
60606: CALL_OW 559
// if factoryWaypoints then
60610: LD_EXP 86
60614: IFFALSE 60740
// begin list := PrepareArray ( factoryWaypoints ) ;
60616: LD_ADDR_VAR 0 3
60620: PUSH
60621: LD_EXP 86
60625: PPUSH
60626: CALL 45646 0 1
60630: ST_TO_ADDR
// for i := 1 to list do
60631: LD_ADDR_VAR 0 2
60635: PUSH
60636: DOUBLE
60637: LD_INT 1
60639: DEC
60640: ST_TO_ADDR
60641: LD_VAR 0 3
60645: PUSH
60646: FOR_TO
60647: IFFALSE 60738
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60649: LD_STRING setFactoryWaypointXY(
60651: PUSH
60652: LD_VAR 0 3
60656: PUSH
60657: LD_VAR 0 2
60661: ARRAY
60662: PUSH
60663: LD_INT 1
60665: ARRAY
60666: STR
60667: PUSH
60668: LD_STRING ,
60670: STR
60671: PUSH
60672: LD_VAR 0 3
60676: PUSH
60677: LD_VAR 0 2
60681: ARRAY
60682: PUSH
60683: LD_INT 2
60685: ARRAY
60686: STR
60687: PUSH
60688: LD_STRING ,
60690: STR
60691: PUSH
60692: LD_VAR 0 3
60696: PUSH
60697: LD_VAR 0 2
60701: ARRAY
60702: PUSH
60703: LD_INT 3
60705: ARRAY
60706: STR
60707: PUSH
60708: LD_STRING ,
60710: STR
60711: PUSH
60712: LD_VAR 0 3
60716: PUSH
60717: LD_VAR 0 2
60721: ARRAY
60722: PUSH
60723: LD_INT 4
60725: ARRAY
60726: STR
60727: PUSH
60728: LD_STRING )
60730: STR
60731: PPUSH
60732: CALL_OW 559
60736: GO 60646
60738: POP
60739: POP
// end ; end ;
60740: LD_VAR 0 1
60744: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60745: LD_INT 0
60747: PPUSH
// if HexInfo ( x , y ) = warehouse then
60748: LD_VAR 0 2
60752: PPUSH
60753: LD_VAR 0 3
60757: PPUSH
60758: CALL_OW 428
60762: PUSH
60763: LD_VAR 0 1
60767: EQUAL
60768: IFFALSE 60795
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60770: LD_ADDR_EXP 87
60774: PUSH
60775: LD_EXP 87
60779: PPUSH
60780: LD_VAR 0 1
60784: PPUSH
60785: LD_INT 0
60787: PPUSH
60788: CALL_OW 1
60792: ST_TO_ADDR
60793: GO 60846
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60795: LD_ADDR_EXP 87
60799: PUSH
60800: LD_EXP 87
60804: PPUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: LD_VAR 0 1
60814: PPUSH
60815: CALL_OW 255
60819: PUSH
60820: LD_VAR 0 1
60824: PUSH
60825: LD_VAR 0 2
60829: PUSH
60830: LD_VAR 0 3
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: PPUSH
60841: CALL_OW 1
60845: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60846: CALL 60855 0 0
// end ;
60850: LD_VAR 0 4
60854: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60855: LD_INT 0
60857: PPUSH
60858: PPUSH
60859: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60860: LD_STRING resetWarehouseGatheringPoints();
60862: PPUSH
60863: CALL_OW 559
// if warehouseGatheringPoints then
60867: LD_EXP 87
60871: IFFALSE 60997
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60873: LD_ADDR_VAR 0 3
60877: PUSH
60878: LD_EXP 87
60882: PPUSH
60883: CALL 45646 0 1
60887: ST_TO_ADDR
// for i := 1 to list do
60888: LD_ADDR_VAR 0 2
60892: PUSH
60893: DOUBLE
60894: LD_INT 1
60896: DEC
60897: ST_TO_ADDR
60898: LD_VAR 0 3
60902: PUSH
60903: FOR_TO
60904: IFFALSE 60995
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60906: LD_STRING setWarehouseGatheringPointXY(
60908: PUSH
60909: LD_VAR 0 3
60913: PUSH
60914: LD_VAR 0 2
60918: ARRAY
60919: PUSH
60920: LD_INT 1
60922: ARRAY
60923: STR
60924: PUSH
60925: LD_STRING ,
60927: STR
60928: PUSH
60929: LD_VAR 0 3
60933: PUSH
60934: LD_VAR 0 2
60938: ARRAY
60939: PUSH
60940: LD_INT 2
60942: ARRAY
60943: STR
60944: PUSH
60945: LD_STRING ,
60947: STR
60948: PUSH
60949: LD_VAR 0 3
60953: PUSH
60954: LD_VAR 0 2
60958: ARRAY
60959: PUSH
60960: LD_INT 3
60962: ARRAY
60963: STR
60964: PUSH
60965: LD_STRING ,
60967: STR
60968: PUSH
60969: LD_VAR 0 3
60973: PUSH
60974: LD_VAR 0 2
60978: ARRAY
60979: PUSH
60980: LD_INT 4
60982: ARRAY
60983: STR
60984: PUSH
60985: LD_STRING )
60987: STR
60988: PPUSH
60989: CALL_OW 559
60993: GO 60903
60995: POP
60996: POP
// end ; end ;
60997: LD_VAR 0 1
61001: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61002: LD_EXP 87
61006: IFFALSE 61691
61008: GO 61010
61010: DISABLE
61011: LD_INT 0
61013: PPUSH
61014: PPUSH
61015: PPUSH
61016: PPUSH
61017: PPUSH
61018: PPUSH
61019: PPUSH
61020: PPUSH
61021: PPUSH
// begin enable ;
61022: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61023: LD_ADDR_VAR 0 3
61027: PUSH
61028: LD_EXP 87
61032: PPUSH
61033: CALL 45646 0 1
61037: ST_TO_ADDR
// if not list then
61038: LD_VAR 0 3
61042: NOT
61043: IFFALSE 61047
// exit ;
61045: GO 61691
// for i := 1 to list do
61047: LD_ADDR_VAR 0 1
61051: PUSH
61052: DOUBLE
61053: LD_INT 1
61055: DEC
61056: ST_TO_ADDR
61057: LD_VAR 0 3
61061: PUSH
61062: FOR_TO
61063: IFFALSE 61689
// begin depot := list [ i ] [ 2 ] ;
61065: LD_ADDR_VAR 0 8
61069: PUSH
61070: LD_VAR 0 3
61074: PUSH
61075: LD_VAR 0 1
61079: ARRAY
61080: PUSH
61081: LD_INT 2
61083: ARRAY
61084: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61085: LD_ADDR_VAR 0 5
61089: PUSH
61090: LD_VAR 0 3
61094: PUSH
61095: LD_VAR 0 1
61099: ARRAY
61100: PUSH
61101: LD_INT 1
61103: ARRAY
61104: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61105: LD_VAR 0 8
61109: PPUSH
61110: CALL_OW 301
61114: PUSH
61115: LD_VAR 0 5
61119: PUSH
61120: LD_VAR 0 8
61124: PPUSH
61125: CALL_OW 255
61129: NONEQUAL
61130: OR
61131: IFFALSE 61160
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61133: LD_ADDR_EXP 87
61137: PUSH
61138: LD_EXP 87
61142: PPUSH
61143: LD_VAR 0 8
61147: PPUSH
61148: LD_INT 0
61150: PPUSH
61151: CALL_OW 1
61155: ST_TO_ADDR
// exit ;
61156: POP
61157: POP
61158: GO 61691
// end ; x := list [ i ] [ 3 ] ;
61160: LD_ADDR_VAR 0 6
61164: PUSH
61165: LD_VAR 0 3
61169: PUSH
61170: LD_VAR 0 1
61174: ARRAY
61175: PUSH
61176: LD_INT 3
61178: ARRAY
61179: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61180: LD_ADDR_VAR 0 7
61184: PUSH
61185: LD_VAR 0 3
61189: PUSH
61190: LD_VAR 0 1
61194: ARRAY
61195: PUSH
61196: LD_INT 4
61198: ARRAY
61199: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61200: LD_ADDR_VAR 0 9
61204: PUSH
61205: LD_VAR 0 6
61209: PPUSH
61210: LD_VAR 0 7
61214: PPUSH
61215: LD_INT 16
61217: PPUSH
61218: CALL 44234 0 3
61222: ST_TO_ADDR
// if not cratesNearbyPoint then
61223: LD_VAR 0 9
61227: NOT
61228: IFFALSE 61234
// exit ;
61230: POP
61231: POP
61232: GO 61691
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
61234: LD_ADDR_VAR 0 4
61238: PUSH
61239: LD_INT 22
61241: PUSH
61242: LD_VAR 0 5
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: LD_INT 60
61256: PUSH
61257: EMPTY
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 91
61266: PUSH
61267: LD_VAR 0 8
61271: PUSH
61272: LD_INT 6
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: LD_INT 25
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 25
61295: PUSH
61296: LD_INT 16
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: PPUSH
61314: CALL_OW 69
61318: PUSH
61319: LD_VAR 0 8
61323: PPUSH
61324: CALL_OW 313
61328: PPUSH
61329: LD_INT 3
61331: PUSH
61332: LD_INT 60
61334: PUSH
61335: EMPTY
61336: LIST
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: LD_INT 25
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 25
61357: PUSH
61358: LD_INT 16
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: LIST
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PPUSH
61374: CALL_OW 72
61378: UNION
61379: ST_TO_ADDR
// if tmp then
61380: LD_VAR 0 4
61384: IFFALSE 61464
// begin tmp := ShrinkArray ( tmp , 3 ) ;
61386: LD_ADDR_VAR 0 4
61390: PUSH
61391: LD_VAR 0 4
61395: PPUSH
61396: LD_INT 3
61398: PPUSH
61399: CALL 42203 0 2
61403: ST_TO_ADDR
// for j in tmp do
61404: LD_ADDR_VAR 0 2
61408: PUSH
61409: LD_VAR 0 4
61413: PUSH
61414: FOR_IN
61415: IFFALSE 61458
// begin if IsInUnit ( j ) then
61417: LD_VAR 0 2
61421: PPUSH
61422: CALL_OW 310
61426: IFFALSE 61437
// ComExit ( j ) ;
61428: LD_VAR 0 2
61432: PPUSH
61433: CALL 42286 0 1
// AddComCollect ( j , x , y ) ;
61437: LD_VAR 0 2
61441: PPUSH
61442: LD_VAR 0 6
61446: PPUSH
61447: LD_VAR 0 7
61451: PPUSH
61452: CALL_OW 177
// end ;
61456: GO 61414
61458: POP
61459: POP
// exit ;
61460: POP
61461: POP
61462: GO 61691
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61464: LD_ADDR_VAR 0 4
61468: PUSH
61469: LD_INT 22
61471: PUSH
61472: LD_VAR 0 5
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 91
61483: PUSH
61484: LD_VAR 0 8
61488: PUSH
61489: LD_INT 8
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: LD_INT 34
61502: PUSH
61503: LD_INT 12
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 34
61512: PUSH
61513: LD_INT 51
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 34
61522: PUSH
61523: LD_INT 32
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 34
61532: PUSH
61533: LD_INT 89
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: LIST
61551: PPUSH
61552: CALL_OW 69
61556: ST_TO_ADDR
// if tmp then
61557: LD_VAR 0 4
61561: IFFALSE 61687
// begin for j in tmp do
61563: LD_ADDR_VAR 0 2
61567: PUSH
61568: LD_VAR 0 4
61572: PUSH
61573: FOR_IN
61574: IFFALSE 61685
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61576: LD_VAR 0 2
61580: PPUSH
61581: CALL_OW 262
61585: PUSH
61586: LD_INT 3
61588: EQUAL
61589: PUSH
61590: LD_VAR 0 2
61594: PPUSH
61595: CALL_OW 261
61599: PUSH
61600: LD_INT 20
61602: GREATER
61603: OR
61604: PUSH
61605: LD_VAR 0 2
61609: PPUSH
61610: CALL_OW 314
61614: NOT
61615: AND
61616: PUSH
61617: LD_VAR 0 2
61621: PPUSH
61622: CALL_OW 263
61626: PUSH
61627: LD_INT 1
61629: NONEQUAL
61630: PUSH
61631: LD_VAR 0 2
61635: PPUSH
61636: CALL_OW 311
61640: OR
61641: AND
61642: IFFALSE 61683
// begin ComCollect ( j , x , y ) ;
61644: LD_VAR 0 2
61648: PPUSH
61649: LD_VAR 0 6
61653: PPUSH
61654: LD_VAR 0 7
61658: PPUSH
61659: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
61663: LD_VAR 0 2
61667: PPUSH
61668: LD_VAR 0 8
61672: PPUSH
61673: CALL_OW 172
// exit ;
61677: POP
61678: POP
61679: POP
61680: POP
61681: GO 61691
// end ;
61683: GO 61573
61685: POP
61686: POP
// end ; end ;
61687: GO 61062
61689: POP
61690: POP
// end ; end_of_file
61691: PPOPN 9
61693: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61694: LD_VAR 0 1
61698: PUSH
61699: LD_INT 200
61701: DOUBLE
61702: GREATEREQUAL
61703: IFFALSE 61711
61705: LD_INT 299
61707: DOUBLE
61708: LESSEQUAL
61709: IFTRUE 61713
61711: GO 61745
61713: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61714: LD_VAR 0 1
61718: PPUSH
61719: LD_VAR 0 2
61723: PPUSH
61724: LD_VAR 0 3
61728: PPUSH
61729: LD_VAR 0 4
61733: PPUSH
61734: LD_VAR 0 5
61738: PPUSH
61739: CALL 62233 0 5
61743: GO 61822
61745: LD_INT 300
61747: DOUBLE
61748: GREATEREQUAL
61749: IFFALSE 61757
61751: LD_INT 399
61753: DOUBLE
61754: LESSEQUAL
61755: IFTRUE 61759
61757: GO 61821
61759: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61760: LD_VAR 0 1
61764: PPUSH
61765: LD_VAR 0 2
61769: PPUSH
61770: LD_VAR 0 3
61774: PPUSH
61775: LD_VAR 0 4
61779: PPUSH
61780: LD_VAR 0 5
61784: PPUSH
61785: LD_VAR 0 6
61789: PPUSH
61790: LD_VAR 0 7
61794: PPUSH
61795: LD_VAR 0 8
61799: PPUSH
61800: LD_VAR 0 9
61804: PPUSH
61805: LD_VAR 0 10
61809: PPUSH
61810: LD_VAR 0 11
61814: PPUSH
61815: CALL 58403 0 11
61819: GO 61822
61821: POP
// end ;
61822: PPOPN 11
61824: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61825: LD_VAR 0 1
61829: PPUSH
61830: LD_VAR 0 2
61834: PPUSH
61835: LD_VAR 0 3
61839: PPUSH
61840: LD_VAR 0 4
61844: PPUSH
61845: LD_VAR 0 5
61849: PPUSH
61850: CALL 61969 0 5
// end ; end_of_file
61854: PPOPN 5
61856: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61857: LD_INT 0
61859: PPUSH
61860: PPUSH
61861: PPUSH
61862: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61863: LD_VAR 0 1
61867: PPUSH
61868: CALL_OW 264
61872: PUSH
61873: LD_INT 91
61875: EQUAL
61876: IFFALSE 61948
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61878: LD_INT 68
61880: PPUSH
61881: LD_VAR 0 1
61885: PPUSH
61886: CALL_OW 255
61890: PPUSH
61891: CALL_OW 321
61895: PUSH
61896: LD_INT 2
61898: EQUAL
61899: IFFALSE 61911
// eff := 70 else
61901: LD_ADDR_VAR 0 4
61905: PUSH
61906: LD_INT 70
61908: ST_TO_ADDR
61909: GO 61919
// eff := 30 ;
61911: LD_ADDR_VAR 0 4
61915: PUSH
61916: LD_INT 30
61918: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61919: LD_VAR 0 1
61923: PPUSH
61924: CALL_OW 250
61928: PPUSH
61929: LD_VAR 0 1
61933: PPUSH
61934: CALL_OW 251
61938: PPUSH
61939: LD_VAR 0 4
61943: PPUSH
61944: CALL_OW 495
// end ; end ;
61948: LD_VAR 0 2
61952: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61953: LD_INT 0
61955: PPUSH
// end ;
61956: LD_VAR 0 4
61960: RET
// export function SOS_Command ( cmd ) ; begin
61961: LD_INT 0
61963: PPUSH
// end ;
61964: LD_VAR 0 2
61968: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61969: LD_INT 0
61971: PPUSH
// end ;
61972: LD_VAR 0 6
61976: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61977: LD_INT 0
61979: PPUSH
61980: PPUSH
// if not vehicle or not factory then
61981: LD_VAR 0 1
61985: NOT
61986: PUSH
61987: LD_VAR 0 2
61991: NOT
61992: OR
61993: IFFALSE 61997
// exit ;
61995: GO 62228
// if factoryWaypoints >= factory then
61997: LD_EXP 86
62001: PUSH
62002: LD_VAR 0 2
62006: GREATEREQUAL
62007: IFFALSE 62228
// if factoryWaypoints [ factory ] then
62009: LD_EXP 86
62013: PUSH
62014: LD_VAR 0 2
62018: ARRAY
62019: IFFALSE 62228
// begin if GetControl ( vehicle ) = control_manual then
62021: LD_VAR 0 1
62025: PPUSH
62026: CALL_OW 263
62030: PUSH
62031: LD_INT 1
62033: EQUAL
62034: IFFALSE 62115
// begin driver := IsDrivenBy ( vehicle ) ;
62036: LD_ADDR_VAR 0 4
62040: PUSH
62041: LD_VAR 0 1
62045: PPUSH
62046: CALL_OW 311
62050: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62051: LD_VAR 0 4
62055: PPUSH
62056: LD_EXP 86
62060: PUSH
62061: LD_VAR 0 2
62065: ARRAY
62066: PUSH
62067: LD_INT 3
62069: ARRAY
62070: PPUSH
62071: LD_EXP 86
62075: PUSH
62076: LD_VAR 0 2
62080: ARRAY
62081: PUSH
62082: LD_INT 4
62084: ARRAY
62085: PPUSH
62086: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62090: LD_VAR 0 4
62094: PPUSH
62095: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62099: LD_VAR 0 4
62103: PPUSH
62104: LD_VAR 0 2
62108: PPUSH
62109: CALL_OW 180
// end else
62113: GO 62228
// if GetControl ( vehicle ) = control_remote then
62115: LD_VAR 0 1
62119: PPUSH
62120: CALL_OW 263
62124: PUSH
62125: LD_INT 2
62127: EQUAL
62128: IFFALSE 62189
// begin wait ( 0 0$2 ) ;
62130: LD_INT 70
62132: PPUSH
62133: CALL_OW 67
// if Connect ( vehicle ) then
62137: LD_VAR 0 1
62141: PPUSH
62142: CALL 12526 0 1
62146: IFFALSE 62187
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62148: LD_VAR 0 1
62152: PPUSH
62153: LD_EXP 86
62157: PUSH
62158: LD_VAR 0 2
62162: ARRAY
62163: PUSH
62164: LD_INT 3
62166: ARRAY
62167: PPUSH
62168: LD_EXP 86
62172: PUSH
62173: LD_VAR 0 2
62177: ARRAY
62178: PUSH
62179: LD_INT 4
62181: ARRAY
62182: PPUSH
62183: CALL_OW 171
// end else
62187: GO 62228
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62189: LD_VAR 0 1
62193: PPUSH
62194: LD_EXP 86
62198: PUSH
62199: LD_VAR 0 2
62203: ARRAY
62204: PUSH
62205: LD_INT 3
62207: ARRAY
62208: PPUSH
62209: LD_EXP 86
62213: PUSH
62214: LD_VAR 0 2
62218: ARRAY
62219: PUSH
62220: LD_INT 4
62222: ARRAY
62223: PPUSH
62224: CALL_OW 171
// end ; end ;
62228: LD_VAR 0 3
62232: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62233: LD_INT 0
62235: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62236: LD_VAR 0 1
62240: PUSH
62241: LD_INT 250
62243: EQUAL
62244: PUSH
62245: LD_VAR 0 2
62249: PPUSH
62250: CALL_OW 264
62254: PUSH
62255: LD_INT 81
62257: EQUAL
62258: AND
62259: IFFALSE 62280
// MinerPlaceMine ( unit , x , y ) ;
62261: LD_VAR 0 2
62265: PPUSH
62266: LD_VAR 0 4
62270: PPUSH
62271: LD_VAR 0 5
62275: PPUSH
62276: CALL 64665 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62280: LD_VAR 0 1
62284: PUSH
62285: LD_INT 251
62287: EQUAL
62288: PUSH
62289: LD_VAR 0 2
62293: PPUSH
62294: CALL_OW 264
62298: PUSH
62299: LD_INT 81
62301: EQUAL
62302: AND
62303: IFFALSE 62324
// MinerDetonateMine ( unit , x , y ) ;
62305: LD_VAR 0 2
62309: PPUSH
62310: LD_VAR 0 4
62314: PPUSH
62315: LD_VAR 0 5
62319: PPUSH
62320: CALL 64940 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62324: LD_VAR 0 1
62328: PUSH
62329: LD_INT 252
62331: EQUAL
62332: PUSH
62333: LD_VAR 0 2
62337: PPUSH
62338: CALL_OW 264
62342: PUSH
62343: LD_INT 81
62345: EQUAL
62346: AND
62347: IFFALSE 62368
// MinerCreateMinefield ( unit , x , y ) ;
62349: LD_VAR 0 2
62353: PPUSH
62354: LD_VAR 0 4
62358: PPUSH
62359: LD_VAR 0 5
62363: PPUSH
62364: CALL 65357 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62368: LD_VAR 0 1
62372: PUSH
62373: LD_INT 253
62375: EQUAL
62376: PUSH
62377: LD_VAR 0 2
62381: PPUSH
62382: CALL_OW 257
62386: PUSH
62387: LD_INT 5
62389: EQUAL
62390: AND
62391: IFFALSE 62412
// ComBinocular ( unit , x , y ) ;
62393: LD_VAR 0 2
62397: PPUSH
62398: LD_VAR 0 4
62402: PPUSH
62403: LD_VAR 0 5
62407: PPUSH
62408: CALL 65726 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62412: LD_VAR 0 1
62416: PUSH
62417: LD_INT 254
62419: EQUAL
62420: PUSH
62421: LD_VAR 0 2
62425: PPUSH
62426: CALL_OW 264
62430: PUSH
62431: LD_INT 99
62433: EQUAL
62434: AND
62435: PUSH
62436: LD_VAR 0 3
62440: PPUSH
62441: CALL_OW 263
62445: PUSH
62446: LD_INT 3
62448: EQUAL
62449: AND
62450: IFFALSE 62466
// HackDestroyVehicle ( unit , selectedUnit ) ;
62452: LD_VAR 0 2
62456: PPUSH
62457: LD_VAR 0 3
62461: PPUSH
62462: CALL 64029 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62466: LD_VAR 0 1
62470: PUSH
62471: LD_INT 255
62473: EQUAL
62474: PUSH
62475: LD_VAR 0 2
62479: PPUSH
62480: CALL_OW 264
62484: PUSH
62485: LD_INT 14
62487: PUSH
62488: LD_INT 53
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: IN
62495: AND
62496: PUSH
62497: LD_VAR 0 4
62501: PPUSH
62502: LD_VAR 0 5
62506: PPUSH
62507: CALL_OW 488
62511: AND
62512: IFFALSE 62536
// CutTreeXYR ( unit , x , y , 12 ) ;
62514: LD_VAR 0 2
62518: PPUSH
62519: LD_VAR 0 4
62523: PPUSH
62524: LD_VAR 0 5
62528: PPUSH
62529: LD_INT 12
62531: PPUSH
62532: CALL 62599 0 4
// if cmd = 256 then
62536: LD_VAR 0 1
62540: PUSH
62541: LD_INT 256
62543: EQUAL
62544: IFFALSE 62565
// SetFactoryWaypoint ( unit , x , y ) ;
62546: LD_VAR 0 2
62550: PPUSH
62551: LD_VAR 0 4
62555: PPUSH
62556: LD_VAR 0 5
62560: PPUSH
62561: CALL 60383 0 3
// if cmd = 257 then
62565: LD_VAR 0 1
62569: PUSH
62570: LD_INT 257
62572: EQUAL
62573: IFFALSE 62594
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62575: LD_VAR 0 2
62579: PPUSH
62580: LD_VAR 0 4
62584: PPUSH
62585: LD_VAR 0 5
62589: PPUSH
62590: CALL 60745 0 3
// end ;
62594: LD_VAR 0 6
62598: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62599: LD_INT 0
62601: PPUSH
62602: PPUSH
62603: PPUSH
62604: PPUSH
62605: PPUSH
62606: PPUSH
62607: PPUSH
62608: PPUSH
62609: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62610: LD_VAR 0 1
62614: NOT
62615: PUSH
62616: LD_VAR 0 2
62620: PPUSH
62621: LD_VAR 0 3
62625: PPUSH
62626: CALL_OW 488
62630: NOT
62631: OR
62632: PUSH
62633: LD_VAR 0 4
62637: NOT
62638: OR
62639: IFFALSE 62643
// exit ;
62641: GO 62983
// list := [ ] ;
62643: LD_ADDR_VAR 0 13
62647: PUSH
62648: EMPTY
62649: ST_TO_ADDR
// if x - r < 0 then
62650: LD_VAR 0 2
62654: PUSH
62655: LD_VAR 0 4
62659: MINUS
62660: PUSH
62661: LD_INT 0
62663: LESS
62664: IFFALSE 62676
// min_x := 0 else
62666: LD_ADDR_VAR 0 7
62670: PUSH
62671: LD_INT 0
62673: ST_TO_ADDR
62674: GO 62692
// min_x := x - r ;
62676: LD_ADDR_VAR 0 7
62680: PUSH
62681: LD_VAR 0 2
62685: PUSH
62686: LD_VAR 0 4
62690: MINUS
62691: ST_TO_ADDR
// if y - r < 0 then
62692: LD_VAR 0 3
62696: PUSH
62697: LD_VAR 0 4
62701: MINUS
62702: PUSH
62703: LD_INT 0
62705: LESS
62706: IFFALSE 62718
// min_y := 0 else
62708: LD_ADDR_VAR 0 8
62712: PUSH
62713: LD_INT 0
62715: ST_TO_ADDR
62716: GO 62734
// min_y := y - r ;
62718: LD_ADDR_VAR 0 8
62722: PUSH
62723: LD_VAR 0 3
62727: PUSH
62728: LD_VAR 0 4
62732: MINUS
62733: ST_TO_ADDR
// max_x := x + r ;
62734: LD_ADDR_VAR 0 9
62738: PUSH
62739: LD_VAR 0 2
62743: PUSH
62744: LD_VAR 0 4
62748: PLUS
62749: ST_TO_ADDR
// max_y := y + r ;
62750: LD_ADDR_VAR 0 10
62754: PUSH
62755: LD_VAR 0 3
62759: PUSH
62760: LD_VAR 0 4
62764: PLUS
62765: ST_TO_ADDR
// for _x = min_x to max_x do
62766: LD_ADDR_VAR 0 11
62770: PUSH
62771: DOUBLE
62772: LD_VAR 0 7
62776: DEC
62777: ST_TO_ADDR
62778: LD_VAR 0 9
62782: PUSH
62783: FOR_TO
62784: IFFALSE 62901
// for _y = min_y to max_y do
62786: LD_ADDR_VAR 0 12
62790: PUSH
62791: DOUBLE
62792: LD_VAR 0 8
62796: DEC
62797: ST_TO_ADDR
62798: LD_VAR 0 10
62802: PUSH
62803: FOR_TO
62804: IFFALSE 62897
// begin if not ValidHex ( _x , _y ) then
62806: LD_VAR 0 11
62810: PPUSH
62811: LD_VAR 0 12
62815: PPUSH
62816: CALL_OW 488
62820: NOT
62821: IFFALSE 62825
// continue ;
62823: GO 62803
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62825: LD_VAR 0 11
62829: PPUSH
62830: LD_VAR 0 12
62834: PPUSH
62835: CALL_OW 351
62839: PUSH
62840: LD_VAR 0 11
62844: PPUSH
62845: LD_VAR 0 12
62849: PPUSH
62850: CALL_OW 554
62854: AND
62855: IFFALSE 62895
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62857: LD_ADDR_VAR 0 13
62861: PUSH
62862: LD_VAR 0 13
62866: PPUSH
62867: LD_VAR 0 13
62871: PUSH
62872: LD_INT 1
62874: PLUS
62875: PPUSH
62876: LD_VAR 0 11
62880: PUSH
62881: LD_VAR 0 12
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PPUSH
62890: CALL_OW 2
62894: ST_TO_ADDR
// end ;
62895: GO 62803
62897: POP
62898: POP
62899: GO 62783
62901: POP
62902: POP
// if not list then
62903: LD_VAR 0 13
62907: NOT
62908: IFFALSE 62912
// exit ;
62910: GO 62983
// for i in list do
62912: LD_ADDR_VAR 0 6
62916: PUSH
62917: LD_VAR 0 13
62921: PUSH
62922: FOR_IN
62923: IFFALSE 62981
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62925: LD_VAR 0 1
62929: PPUSH
62930: LD_STRING M
62932: PUSH
62933: LD_VAR 0 6
62937: PUSH
62938: LD_INT 1
62940: ARRAY
62941: PUSH
62942: LD_VAR 0 6
62946: PUSH
62947: LD_INT 2
62949: ARRAY
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: PUSH
62972: EMPTY
62973: LIST
62974: PPUSH
62975: CALL_OW 447
62979: GO 62922
62981: POP
62982: POP
// end ;
62983: LD_VAR 0 5
62987: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62988: LD_EXP 89
62992: NOT
62993: IFFALSE 63043
62995: GO 62997
62997: DISABLE
// begin initHack := true ;
62998: LD_ADDR_EXP 89
63002: PUSH
63003: LD_INT 1
63005: ST_TO_ADDR
// hackTanks := [ ] ;
63006: LD_ADDR_EXP 90
63010: PUSH
63011: EMPTY
63012: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63013: LD_ADDR_EXP 91
63017: PUSH
63018: EMPTY
63019: ST_TO_ADDR
// hackLimit := 3 ;
63020: LD_ADDR_EXP 92
63024: PUSH
63025: LD_INT 3
63027: ST_TO_ADDR
// hackDist := 12 ;
63028: LD_ADDR_EXP 93
63032: PUSH
63033: LD_INT 12
63035: ST_TO_ADDR
// hackCounter := [ ] ;
63036: LD_ADDR_EXP 94
63040: PUSH
63041: EMPTY
63042: ST_TO_ADDR
// end ;
63043: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63044: LD_EXP 89
63048: PUSH
63049: LD_INT 34
63051: PUSH
63052: LD_INT 99
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PPUSH
63059: CALL_OW 69
63063: AND
63064: IFFALSE 63317
63066: GO 63068
63068: DISABLE
63069: LD_INT 0
63071: PPUSH
63072: PPUSH
// begin enable ;
63073: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63074: LD_ADDR_VAR 0 1
63078: PUSH
63079: LD_INT 34
63081: PUSH
63082: LD_INT 99
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PPUSH
63089: CALL_OW 69
63093: PUSH
63094: FOR_IN
63095: IFFALSE 63315
// begin if not i in hackTanks then
63097: LD_VAR 0 1
63101: PUSH
63102: LD_EXP 90
63106: IN
63107: NOT
63108: IFFALSE 63191
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63110: LD_ADDR_EXP 90
63114: PUSH
63115: LD_EXP 90
63119: PPUSH
63120: LD_EXP 90
63124: PUSH
63125: LD_INT 1
63127: PLUS
63128: PPUSH
63129: LD_VAR 0 1
63133: PPUSH
63134: CALL_OW 1
63138: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63139: LD_ADDR_EXP 91
63143: PUSH
63144: LD_EXP 91
63148: PPUSH
63149: LD_EXP 91
63153: PUSH
63154: LD_INT 1
63156: PLUS
63157: PPUSH
63158: EMPTY
63159: PPUSH
63160: CALL_OW 1
63164: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63165: LD_ADDR_EXP 94
63169: PUSH
63170: LD_EXP 94
63174: PPUSH
63175: LD_EXP 94
63179: PUSH
63180: LD_INT 1
63182: PLUS
63183: PPUSH
63184: EMPTY
63185: PPUSH
63186: CALL_OW 1
63190: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63191: LD_VAR 0 1
63195: PPUSH
63196: CALL_OW 302
63200: NOT
63201: IFFALSE 63214
// begin HackUnlinkAll ( i ) ;
63203: LD_VAR 0 1
63207: PPUSH
63208: CALL 63320 0 1
// continue ;
63212: GO 63094
// end ; HackCheckCapturedStatus ( i ) ;
63214: LD_VAR 0 1
63218: PPUSH
63219: CALL 63763 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63223: LD_ADDR_VAR 0 2
63227: PUSH
63228: LD_INT 81
63230: PUSH
63231: LD_VAR 0 1
63235: PPUSH
63236: CALL_OW 255
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 33
63247: PUSH
63248: LD_INT 3
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 91
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_EXP 93
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 50
63275: PUSH
63276: EMPTY
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: PPUSH
63285: CALL_OW 69
63289: ST_TO_ADDR
// if not tmp then
63290: LD_VAR 0 2
63294: NOT
63295: IFFALSE 63299
// continue ;
63297: GO 63094
// HackLink ( i , tmp ) ;
63299: LD_VAR 0 1
63303: PPUSH
63304: LD_VAR 0 2
63308: PPUSH
63309: CALL 63456 0 2
// end ;
63313: GO 63094
63315: POP
63316: POP
// end ;
63317: PPOPN 2
63319: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63320: LD_INT 0
63322: PPUSH
63323: PPUSH
63324: PPUSH
// if not hack in hackTanks then
63325: LD_VAR 0 1
63329: PUSH
63330: LD_EXP 90
63334: IN
63335: NOT
63336: IFFALSE 63340
// exit ;
63338: GO 63451
// index := GetElementIndex ( hackTanks , hack ) ;
63340: LD_ADDR_VAR 0 4
63344: PUSH
63345: LD_EXP 90
63349: PPUSH
63350: LD_VAR 0 1
63354: PPUSH
63355: CALL 9342 0 2
63359: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63360: LD_EXP 91
63364: PUSH
63365: LD_VAR 0 4
63369: ARRAY
63370: IFFALSE 63451
// begin for i in hackTanksCaptured [ index ] do
63372: LD_ADDR_VAR 0 3
63376: PUSH
63377: LD_EXP 91
63381: PUSH
63382: LD_VAR 0 4
63386: ARRAY
63387: PUSH
63388: FOR_IN
63389: IFFALSE 63415
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63391: LD_VAR 0 3
63395: PUSH
63396: LD_INT 1
63398: ARRAY
63399: PPUSH
63400: LD_VAR 0 3
63404: PUSH
63405: LD_INT 2
63407: ARRAY
63408: PPUSH
63409: CALL_OW 235
63413: GO 63388
63415: POP
63416: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63417: LD_ADDR_EXP 91
63421: PUSH
63422: LD_EXP 91
63426: PPUSH
63427: LD_VAR 0 4
63431: PPUSH
63432: EMPTY
63433: PPUSH
63434: CALL_OW 1
63438: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63439: LD_VAR 0 1
63443: PPUSH
63444: LD_INT 0
63446: PPUSH
63447: CALL_OW 505
// end ; end ;
63451: LD_VAR 0 2
63455: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63456: LD_INT 0
63458: PPUSH
63459: PPUSH
63460: PPUSH
// if not hack in hackTanks or not vehicles then
63461: LD_VAR 0 1
63465: PUSH
63466: LD_EXP 90
63470: IN
63471: NOT
63472: PUSH
63473: LD_VAR 0 2
63477: NOT
63478: OR
63479: IFFALSE 63483
// exit ;
63481: GO 63758
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63483: LD_ADDR_VAR 0 2
63487: PUSH
63488: LD_VAR 0 1
63492: PPUSH
63493: LD_VAR 0 2
63497: PPUSH
63498: LD_INT 1
63500: PPUSH
63501: LD_INT 1
63503: PPUSH
63504: CALL 9992 0 4
63508: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63509: LD_ADDR_VAR 0 5
63513: PUSH
63514: LD_EXP 90
63518: PPUSH
63519: LD_VAR 0 1
63523: PPUSH
63524: CALL 9342 0 2
63528: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63529: LD_EXP 91
63533: PUSH
63534: LD_VAR 0 5
63538: ARRAY
63539: PUSH
63540: LD_EXP 92
63544: LESS
63545: IFFALSE 63734
// begin for i := 1 to vehicles do
63547: LD_ADDR_VAR 0 4
63551: PUSH
63552: DOUBLE
63553: LD_INT 1
63555: DEC
63556: ST_TO_ADDR
63557: LD_VAR 0 2
63561: PUSH
63562: FOR_TO
63563: IFFALSE 63732
// begin if hackTanksCaptured [ index ] = hackLimit then
63565: LD_EXP 91
63569: PUSH
63570: LD_VAR 0 5
63574: ARRAY
63575: PUSH
63576: LD_EXP 92
63580: EQUAL
63581: IFFALSE 63585
// break ;
63583: GO 63732
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63585: LD_ADDR_EXP 94
63589: PUSH
63590: LD_EXP 94
63594: PPUSH
63595: LD_VAR 0 5
63599: PPUSH
63600: LD_EXP 94
63604: PUSH
63605: LD_VAR 0 5
63609: ARRAY
63610: PUSH
63611: LD_INT 1
63613: PLUS
63614: PPUSH
63615: CALL_OW 1
63619: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63620: LD_ADDR_EXP 91
63624: PUSH
63625: LD_EXP 91
63629: PPUSH
63630: LD_VAR 0 5
63634: PUSH
63635: LD_EXP 91
63639: PUSH
63640: LD_VAR 0 5
63644: ARRAY
63645: PUSH
63646: LD_INT 1
63648: PLUS
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PPUSH
63654: LD_VAR 0 2
63658: PUSH
63659: LD_VAR 0 4
63663: ARRAY
63664: PUSH
63665: LD_VAR 0 2
63669: PUSH
63670: LD_VAR 0 4
63674: ARRAY
63675: PPUSH
63676: CALL_OW 255
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PPUSH
63685: CALL 9557 0 3
63689: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63690: LD_VAR 0 2
63694: PUSH
63695: LD_VAR 0 4
63699: ARRAY
63700: PPUSH
63701: LD_VAR 0 1
63705: PPUSH
63706: CALL_OW 255
63710: PPUSH
63711: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63715: LD_VAR 0 2
63719: PUSH
63720: LD_VAR 0 4
63724: ARRAY
63725: PPUSH
63726: CALL_OW 141
// end ;
63730: GO 63562
63732: POP
63733: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63734: LD_VAR 0 1
63738: PPUSH
63739: LD_EXP 91
63743: PUSH
63744: LD_VAR 0 5
63748: ARRAY
63749: PUSH
63750: LD_INT 0
63752: PLUS
63753: PPUSH
63754: CALL_OW 505
// end ;
63758: LD_VAR 0 3
63762: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63763: LD_INT 0
63765: PPUSH
63766: PPUSH
63767: PPUSH
63768: PPUSH
// if not hack in hackTanks then
63769: LD_VAR 0 1
63773: PUSH
63774: LD_EXP 90
63778: IN
63779: NOT
63780: IFFALSE 63784
// exit ;
63782: GO 64024
// index := GetElementIndex ( hackTanks , hack ) ;
63784: LD_ADDR_VAR 0 4
63788: PUSH
63789: LD_EXP 90
63793: PPUSH
63794: LD_VAR 0 1
63798: PPUSH
63799: CALL 9342 0 2
63803: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63804: LD_ADDR_VAR 0 3
63808: PUSH
63809: DOUBLE
63810: LD_EXP 91
63814: PUSH
63815: LD_VAR 0 4
63819: ARRAY
63820: INC
63821: ST_TO_ADDR
63822: LD_INT 1
63824: PUSH
63825: FOR_DOWNTO
63826: IFFALSE 63998
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63828: LD_ADDR_VAR 0 5
63832: PUSH
63833: LD_EXP 91
63837: PUSH
63838: LD_VAR 0 4
63842: ARRAY
63843: PUSH
63844: LD_VAR 0 3
63848: ARRAY
63849: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63850: LD_VAR 0 5
63854: PUSH
63855: LD_INT 1
63857: ARRAY
63858: PPUSH
63859: CALL_OW 302
63863: NOT
63864: PUSH
63865: LD_VAR 0 5
63869: PUSH
63870: LD_INT 1
63872: ARRAY
63873: PPUSH
63874: CALL_OW 255
63878: PUSH
63879: LD_VAR 0 1
63883: PPUSH
63884: CALL_OW 255
63888: NONEQUAL
63889: OR
63890: IFFALSE 63996
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63892: LD_VAR 0 5
63896: PUSH
63897: LD_INT 1
63899: ARRAY
63900: PPUSH
63901: CALL_OW 305
63905: PUSH
63906: LD_VAR 0 5
63910: PUSH
63911: LD_INT 1
63913: ARRAY
63914: PPUSH
63915: CALL_OW 255
63919: PUSH
63920: LD_VAR 0 1
63924: PPUSH
63925: CALL_OW 255
63929: EQUAL
63930: AND
63931: IFFALSE 63955
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63933: LD_VAR 0 5
63937: PUSH
63938: LD_INT 1
63940: ARRAY
63941: PPUSH
63942: LD_VAR 0 5
63946: PUSH
63947: LD_INT 2
63949: ARRAY
63950: PPUSH
63951: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63955: LD_ADDR_EXP 91
63959: PUSH
63960: LD_EXP 91
63964: PPUSH
63965: LD_VAR 0 4
63969: PPUSH
63970: LD_EXP 91
63974: PUSH
63975: LD_VAR 0 4
63979: ARRAY
63980: PPUSH
63981: LD_VAR 0 3
63985: PPUSH
63986: CALL_OW 3
63990: PPUSH
63991: CALL_OW 1
63995: ST_TO_ADDR
// end ; end ;
63996: GO 63825
63998: POP
63999: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64000: LD_VAR 0 1
64004: PPUSH
64005: LD_EXP 91
64009: PUSH
64010: LD_VAR 0 4
64014: ARRAY
64015: PUSH
64016: LD_INT 0
64018: PLUS
64019: PPUSH
64020: CALL_OW 505
// end ;
64024: LD_VAR 0 2
64028: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64029: LD_INT 0
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
// if not hack in hackTanks then
64035: LD_VAR 0 1
64039: PUSH
64040: LD_EXP 90
64044: IN
64045: NOT
64046: IFFALSE 64050
// exit ;
64048: GO 64135
// index := GetElementIndex ( hackTanks , hack ) ;
64050: LD_ADDR_VAR 0 5
64054: PUSH
64055: LD_EXP 90
64059: PPUSH
64060: LD_VAR 0 1
64064: PPUSH
64065: CALL 9342 0 2
64069: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64070: LD_ADDR_VAR 0 4
64074: PUSH
64075: DOUBLE
64076: LD_INT 1
64078: DEC
64079: ST_TO_ADDR
64080: LD_EXP 91
64084: PUSH
64085: LD_VAR 0 5
64089: ARRAY
64090: PUSH
64091: FOR_TO
64092: IFFALSE 64133
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64094: LD_EXP 91
64098: PUSH
64099: LD_VAR 0 5
64103: ARRAY
64104: PUSH
64105: LD_VAR 0 4
64109: ARRAY
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PUSH
64115: LD_VAR 0 2
64119: EQUAL
64120: IFFALSE 64131
// KillUnit ( vehicle ) ;
64122: LD_VAR 0 2
64126: PPUSH
64127: CALL_OW 66
64131: GO 64091
64133: POP
64134: POP
// end ;
64135: LD_VAR 0 3
64139: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64140: LD_EXP 95
64144: NOT
64145: IFFALSE 64180
64147: GO 64149
64149: DISABLE
// begin initMiner := true ;
64150: LD_ADDR_EXP 95
64154: PUSH
64155: LD_INT 1
64157: ST_TO_ADDR
// minersList := [ ] ;
64158: LD_ADDR_EXP 96
64162: PUSH
64163: EMPTY
64164: ST_TO_ADDR
// minerMinesList := [ ] ;
64165: LD_ADDR_EXP 97
64169: PUSH
64170: EMPTY
64171: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64172: LD_ADDR_EXP 98
64176: PUSH
64177: LD_INT 5
64179: ST_TO_ADDR
// end ;
64180: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64181: LD_EXP 95
64185: PUSH
64186: LD_INT 34
64188: PUSH
64189: LD_INT 81
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PPUSH
64196: CALL_OW 69
64200: AND
64201: IFFALSE 64662
64203: GO 64205
64205: DISABLE
64206: LD_INT 0
64208: PPUSH
64209: PPUSH
64210: PPUSH
64211: PPUSH
// begin enable ;
64212: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64213: LD_ADDR_VAR 0 1
64217: PUSH
64218: LD_INT 34
64220: PUSH
64221: LD_INT 81
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PPUSH
64228: CALL_OW 69
64232: PUSH
64233: FOR_IN
64234: IFFALSE 64306
// begin if not i in minersList then
64236: LD_VAR 0 1
64240: PUSH
64241: LD_EXP 96
64245: IN
64246: NOT
64247: IFFALSE 64304
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64249: LD_ADDR_EXP 96
64253: PUSH
64254: LD_EXP 96
64258: PPUSH
64259: LD_EXP 96
64263: PUSH
64264: LD_INT 1
64266: PLUS
64267: PPUSH
64268: LD_VAR 0 1
64272: PPUSH
64273: CALL_OW 1
64277: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64278: LD_ADDR_EXP 97
64282: PUSH
64283: LD_EXP 97
64287: PPUSH
64288: LD_EXP 97
64292: PUSH
64293: LD_INT 1
64295: PLUS
64296: PPUSH
64297: EMPTY
64298: PPUSH
64299: CALL_OW 1
64303: ST_TO_ADDR
// end end ;
64304: GO 64233
64306: POP
64307: POP
// for i := minerMinesList downto 1 do
64308: LD_ADDR_VAR 0 1
64312: PUSH
64313: DOUBLE
64314: LD_EXP 97
64318: INC
64319: ST_TO_ADDR
64320: LD_INT 1
64322: PUSH
64323: FOR_DOWNTO
64324: IFFALSE 64660
// begin if IsLive ( minersList [ i ] ) then
64326: LD_EXP 96
64330: PUSH
64331: LD_VAR 0 1
64335: ARRAY
64336: PPUSH
64337: CALL_OW 300
64341: IFFALSE 64369
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64343: LD_EXP 96
64347: PUSH
64348: LD_VAR 0 1
64352: ARRAY
64353: PPUSH
64354: LD_EXP 97
64358: PUSH
64359: LD_VAR 0 1
64363: ARRAY
64364: PPUSH
64365: CALL_OW 505
// if not minerMinesList [ i ] then
64369: LD_EXP 97
64373: PUSH
64374: LD_VAR 0 1
64378: ARRAY
64379: NOT
64380: IFFALSE 64384
// continue ;
64382: GO 64323
// for j := minerMinesList [ i ] downto 1 do
64384: LD_ADDR_VAR 0 2
64388: PUSH
64389: DOUBLE
64390: LD_EXP 97
64394: PUSH
64395: LD_VAR 0 1
64399: ARRAY
64400: INC
64401: ST_TO_ADDR
64402: LD_INT 1
64404: PUSH
64405: FOR_DOWNTO
64406: IFFALSE 64656
// begin side := GetSide ( minersList [ i ] ) ;
64408: LD_ADDR_VAR 0 3
64412: PUSH
64413: LD_EXP 96
64417: PUSH
64418: LD_VAR 0 1
64422: ARRAY
64423: PPUSH
64424: CALL_OW 255
64428: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64429: LD_ADDR_VAR 0 4
64433: PUSH
64434: LD_EXP 97
64438: PUSH
64439: LD_VAR 0 1
64443: ARRAY
64444: PUSH
64445: LD_VAR 0 2
64449: ARRAY
64450: PUSH
64451: LD_INT 1
64453: ARRAY
64454: PPUSH
64455: LD_EXP 97
64459: PUSH
64460: LD_VAR 0 1
64464: ARRAY
64465: PUSH
64466: LD_VAR 0 2
64470: ARRAY
64471: PUSH
64472: LD_INT 2
64474: ARRAY
64475: PPUSH
64476: CALL_OW 428
64480: ST_TO_ADDR
// if not tmp then
64481: LD_VAR 0 4
64485: NOT
64486: IFFALSE 64490
// continue ;
64488: GO 64405
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64490: LD_VAR 0 4
64494: PUSH
64495: LD_INT 81
64497: PUSH
64498: LD_VAR 0 3
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PPUSH
64507: CALL_OW 69
64511: IN
64512: PUSH
64513: LD_EXP 97
64517: PUSH
64518: LD_VAR 0 1
64522: ARRAY
64523: PUSH
64524: LD_VAR 0 2
64528: ARRAY
64529: PUSH
64530: LD_INT 1
64532: ARRAY
64533: PPUSH
64534: LD_EXP 97
64538: PUSH
64539: LD_VAR 0 1
64543: ARRAY
64544: PUSH
64545: LD_VAR 0 2
64549: ARRAY
64550: PUSH
64551: LD_INT 2
64553: ARRAY
64554: PPUSH
64555: CALL_OW 458
64559: AND
64560: IFFALSE 64654
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64562: LD_EXP 97
64566: PUSH
64567: LD_VAR 0 1
64571: ARRAY
64572: PUSH
64573: LD_VAR 0 2
64577: ARRAY
64578: PUSH
64579: LD_INT 1
64581: ARRAY
64582: PPUSH
64583: LD_EXP 97
64587: PUSH
64588: LD_VAR 0 1
64592: ARRAY
64593: PUSH
64594: LD_VAR 0 2
64598: ARRAY
64599: PUSH
64600: LD_INT 2
64602: ARRAY
64603: PPUSH
64604: LD_VAR 0 3
64608: PPUSH
64609: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64613: LD_ADDR_EXP 97
64617: PUSH
64618: LD_EXP 97
64622: PPUSH
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_EXP 97
64632: PUSH
64633: LD_VAR 0 1
64637: ARRAY
64638: PPUSH
64639: LD_VAR 0 2
64643: PPUSH
64644: CALL_OW 3
64648: PPUSH
64649: CALL_OW 1
64653: ST_TO_ADDR
// end ; end ;
64654: GO 64405
64656: POP
64657: POP
// end ;
64658: GO 64323
64660: POP
64661: POP
// end ;
64662: PPOPN 4
64664: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64665: LD_INT 0
64667: PPUSH
64668: PPUSH
// result := false ;
64669: LD_ADDR_VAR 0 4
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64677: LD_VAR 0 1
64681: PPUSH
64682: CALL_OW 264
64686: PUSH
64687: LD_INT 81
64689: EQUAL
64690: NOT
64691: IFFALSE 64695
// exit ;
64693: GO 64935
// index := GetElementIndex ( minersList , unit ) ;
64695: LD_ADDR_VAR 0 5
64699: PUSH
64700: LD_EXP 96
64704: PPUSH
64705: LD_VAR 0 1
64709: PPUSH
64710: CALL 9342 0 2
64714: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64715: LD_EXP 97
64719: PUSH
64720: LD_VAR 0 5
64724: ARRAY
64725: PUSH
64726: LD_EXP 98
64730: GREATEREQUAL
64731: IFFALSE 64735
// exit ;
64733: GO 64935
// ComMoveXY ( unit , x , y ) ;
64735: LD_VAR 0 1
64739: PPUSH
64740: LD_VAR 0 2
64744: PPUSH
64745: LD_VAR 0 3
64749: PPUSH
64750: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64754: LD_INT 35
64756: PPUSH
64757: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64761: LD_VAR 0 1
64765: PPUSH
64766: LD_VAR 0 2
64770: PPUSH
64771: LD_VAR 0 3
64775: PPUSH
64776: CALL 40697 0 3
64780: NOT
64781: PUSH
64782: LD_VAR 0 1
64786: PPUSH
64787: CALL_OW 314
64791: AND
64792: IFFALSE 64796
// exit ;
64794: GO 64935
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64796: LD_VAR 0 2
64800: PPUSH
64801: LD_VAR 0 3
64805: PPUSH
64806: CALL_OW 428
64810: PUSH
64811: LD_VAR 0 1
64815: EQUAL
64816: PUSH
64817: LD_VAR 0 1
64821: PPUSH
64822: CALL_OW 314
64826: NOT
64827: AND
64828: IFFALSE 64754
// PlaySoundXY ( x , y , PlantMine ) ;
64830: LD_VAR 0 2
64834: PPUSH
64835: LD_VAR 0 3
64839: PPUSH
64840: LD_STRING PlantMine
64842: PPUSH
64843: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64847: LD_VAR 0 2
64851: PPUSH
64852: LD_VAR 0 3
64856: PPUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 255
64866: PPUSH
64867: LD_INT 0
64869: PPUSH
64870: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64874: LD_ADDR_EXP 97
64878: PUSH
64879: LD_EXP 97
64883: PPUSH
64884: LD_VAR 0 5
64888: PUSH
64889: LD_EXP 97
64893: PUSH
64894: LD_VAR 0 5
64898: ARRAY
64899: PUSH
64900: LD_INT 1
64902: PLUS
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PPUSH
64908: LD_VAR 0 2
64912: PUSH
64913: LD_VAR 0 3
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PPUSH
64922: CALL 9557 0 3
64926: ST_TO_ADDR
// result := true ;
64927: LD_ADDR_VAR 0 4
64931: PUSH
64932: LD_INT 1
64934: ST_TO_ADDR
// end ;
64935: LD_VAR 0 4
64939: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64940: LD_INT 0
64942: PPUSH
64943: PPUSH
64944: PPUSH
// if not unit in minersList then
64945: LD_VAR 0 1
64949: PUSH
64950: LD_EXP 96
64954: IN
64955: NOT
64956: IFFALSE 64960
// exit ;
64958: GO 65352
// index := GetElementIndex ( minersList , unit ) ;
64960: LD_ADDR_VAR 0 6
64964: PUSH
64965: LD_EXP 96
64969: PPUSH
64970: LD_VAR 0 1
64974: PPUSH
64975: CALL 9342 0 2
64979: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64980: LD_ADDR_VAR 0 5
64984: PUSH
64985: DOUBLE
64986: LD_EXP 97
64990: PUSH
64991: LD_VAR 0 6
64995: ARRAY
64996: INC
64997: ST_TO_ADDR
64998: LD_INT 1
65000: PUSH
65001: FOR_DOWNTO
65002: IFFALSE 65163
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65004: LD_EXP 97
65008: PUSH
65009: LD_VAR 0 6
65013: ARRAY
65014: PUSH
65015: LD_VAR 0 5
65019: ARRAY
65020: PUSH
65021: LD_INT 1
65023: ARRAY
65024: PUSH
65025: LD_VAR 0 2
65029: EQUAL
65030: PUSH
65031: LD_EXP 97
65035: PUSH
65036: LD_VAR 0 6
65040: ARRAY
65041: PUSH
65042: LD_VAR 0 5
65046: ARRAY
65047: PUSH
65048: LD_INT 2
65050: ARRAY
65051: PUSH
65052: LD_VAR 0 3
65056: EQUAL
65057: AND
65058: IFFALSE 65161
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65060: LD_EXP 97
65064: PUSH
65065: LD_VAR 0 6
65069: ARRAY
65070: PUSH
65071: LD_VAR 0 5
65075: ARRAY
65076: PUSH
65077: LD_INT 1
65079: ARRAY
65080: PPUSH
65081: LD_EXP 97
65085: PUSH
65086: LD_VAR 0 6
65090: ARRAY
65091: PUSH
65092: LD_VAR 0 5
65096: ARRAY
65097: PUSH
65098: LD_INT 2
65100: ARRAY
65101: PPUSH
65102: LD_VAR 0 1
65106: PPUSH
65107: CALL_OW 255
65111: PPUSH
65112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65116: LD_ADDR_EXP 97
65120: PUSH
65121: LD_EXP 97
65125: PPUSH
65126: LD_VAR 0 6
65130: PPUSH
65131: LD_EXP 97
65135: PUSH
65136: LD_VAR 0 6
65140: ARRAY
65141: PPUSH
65142: LD_VAR 0 5
65146: PPUSH
65147: CALL_OW 3
65151: PPUSH
65152: CALL_OW 1
65156: ST_TO_ADDR
// exit ;
65157: POP
65158: POP
65159: GO 65352
// end ; end ;
65161: GO 65001
65163: POP
65164: POP
// for i := minerMinesList [ index ] downto 1 do
65165: LD_ADDR_VAR 0 5
65169: PUSH
65170: DOUBLE
65171: LD_EXP 97
65175: PUSH
65176: LD_VAR 0 6
65180: ARRAY
65181: INC
65182: ST_TO_ADDR
65183: LD_INT 1
65185: PUSH
65186: FOR_DOWNTO
65187: IFFALSE 65350
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65189: LD_EXP 97
65193: PUSH
65194: LD_VAR 0 6
65198: ARRAY
65199: PUSH
65200: LD_VAR 0 5
65204: ARRAY
65205: PUSH
65206: LD_INT 1
65208: ARRAY
65209: PPUSH
65210: LD_EXP 97
65214: PUSH
65215: LD_VAR 0 6
65219: ARRAY
65220: PUSH
65221: LD_VAR 0 5
65225: ARRAY
65226: PUSH
65227: LD_INT 2
65229: ARRAY
65230: PPUSH
65231: LD_VAR 0 2
65235: PPUSH
65236: LD_VAR 0 3
65240: PPUSH
65241: CALL_OW 298
65245: PUSH
65246: LD_INT 6
65248: LESS
65249: IFFALSE 65348
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65251: LD_EXP 97
65255: PUSH
65256: LD_VAR 0 6
65260: ARRAY
65261: PUSH
65262: LD_VAR 0 5
65266: ARRAY
65267: PUSH
65268: LD_INT 1
65270: ARRAY
65271: PPUSH
65272: LD_EXP 97
65276: PUSH
65277: LD_VAR 0 6
65281: ARRAY
65282: PUSH
65283: LD_VAR 0 5
65287: ARRAY
65288: PUSH
65289: LD_INT 2
65291: ARRAY
65292: PPUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 255
65302: PPUSH
65303: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65307: LD_ADDR_EXP 97
65311: PUSH
65312: LD_EXP 97
65316: PPUSH
65317: LD_VAR 0 6
65321: PPUSH
65322: LD_EXP 97
65326: PUSH
65327: LD_VAR 0 6
65331: ARRAY
65332: PPUSH
65333: LD_VAR 0 5
65337: PPUSH
65338: CALL_OW 3
65342: PPUSH
65343: CALL_OW 1
65347: ST_TO_ADDR
// end ; end ;
65348: GO 65186
65350: POP
65351: POP
// end ;
65352: LD_VAR 0 4
65356: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65357: LD_INT 0
65359: PPUSH
65360: PPUSH
65361: PPUSH
65362: PPUSH
65363: PPUSH
65364: PPUSH
65365: PPUSH
65366: PPUSH
65367: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65368: LD_VAR 0 1
65372: PPUSH
65373: CALL_OW 264
65377: PUSH
65378: LD_INT 81
65380: EQUAL
65381: NOT
65382: PUSH
65383: LD_VAR 0 1
65387: PUSH
65388: LD_EXP 96
65392: IN
65393: NOT
65394: OR
65395: IFFALSE 65399
// exit ;
65397: GO 65721
// index := GetElementIndex ( minersList , unit ) ;
65399: LD_ADDR_VAR 0 6
65403: PUSH
65404: LD_EXP 96
65408: PPUSH
65409: LD_VAR 0 1
65413: PPUSH
65414: CALL 9342 0 2
65418: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65419: LD_ADDR_VAR 0 8
65423: PUSH
65424: LD_EXP 98
65428: PUSH
65429: LD_EXP 97
65433: PUSH
65434: LD_VAR 0 6
65438: ARRAY
65439: MINUS
65440: ST_TO_ADDR
// if not minesFreeAmount then
65441: LD_VAR 0 8
65445: NOT
65446: IFFALSE 65450
// exit ;
65448: GO 65721
// tmp := [ ] ;
65450: LD_ADDR_VAR 0 7
65454: PUSH
65455: EMPTY
65456: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65457: LD_ADDR_VAR 0 5
65461: PUSH
65462: DOUBLE
65463: LD_INT 1
65465: DEC
65466: ST_TO_ADDR
65467: LD_VAR 0 8
65471: PUSH
65472: FOR_TO
65473: IFFALSE 65668
// begin _d := rand ( 0 , 5 ) ;
65475: LD_ADDR_VAR 0 11
65479: PUSH
65480: LD_INT 0
65482: PPUSH
65483: LD_INT 5
65485: PPUSH
65486: CALL_OW 12
65490: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65491: LD_ADDR_VAR 0 12
65495: PUSH
65496: LD_INT 2
65498: PPUSH
65499: LD_INT 6
65501: PPUSH
65502: CALL_OW 12
65506: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65507: LD_ADDR_VAR 0 9
65511: PUSH
65512: LD_VAR 0 2
65516: PPUSH
65517: LD_VAR 0 11
65521: PPUSH
65522: LD_VAR 0 12
65526: PPUSH
65527: CALL_OW 272
65531: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65532: LD_ADDR_VAR 0 10
65536: PUSH
65537: LD_VAR 0 3
65541: PPUSH
65542: LD_VAR 0 11
65546: PPUSH
65547: LD_VAR 0 12
65551: PPUSH
65552: CALL_OW 273
65556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65557: LD_VAR 0 9
65561: PPUSH
65562: LD_VAR 0 10
65566: PPUSH
65567: CALL_OW 488
65571: PUSH
65572: LD_VAR 0 9
65576: PUSH
65577: LD_VAR 0 10
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_VAR 0 7
65590: IN
65591: NOT
65592: AND
65593: PUSH
65594: LD_VAR 0 9
65598: PPUSH
65599: LD_VAR 0 10
65603: PPUSH
65604: CALL_OW 458
65608: NOT
65609: AND
65610: IFFALSE 65652
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65612: LD_ADDR_VAR 0 7
65616: PUSH
65617: LD_VAR 0 7
65621: PPUSH
65622: LD_VAR 0 7
65626: PUSH
65627: LD_INT 1
65629: PLUS
65630: PPUSH
65631: LD_VAR 0 9
65635: PUSH
65636: LD_VAR 0 10
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PPUSH
65645: CALL_OW 1
65649: ST_TO_ADDR
65650: GO 65666
// i := i - 1 ;
65652: LD_ADDR_VAR 0 5
65656: PUSH
65657: LD_VAR 0 5
65661: PUSH
65662: LD_INT 1
65664: MINUS
65665: ST_TO_ADDR
// end ;
65666: GO 65472
65668: POP
65669: POP
// for i in tmp do
65670: LD_ADDR_VAR 0 5
65674: PUSH
65675: LD_VAR 0 7
65679: PUSH
65680: FOR_IN
65681: IFFALSE 65719
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65683: LD_VAR 0 1
65687: PPUSH
65688: LD_VAR 0 5
65692: PUSH
65693: LD_INT 1
65695: ARRAY
65696: PPUSH
65697: LD_VAR 0 5
65701: PUSH
65702: LD_INT 2
65704: ARRAY
65705: PPUSH
65706: CALL 64665 0 3
65710: NOT
65711: IFFALSE 65717
// exit ;
65713: POP
65714: POP
65715: GO 65721
65717: GO 65680
65719: POP
65720: POP
// end ;
65721: LD_VAR 0 4
65725: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65726: LD_INT 0
65728: PPUSH
65729: PPUSH
65730: PPUSH
65731: PPUSH
65732: PPUSH
65733: PPUSH
65734: PPUSH
// if not GetClass ( unit ) = class_sniper then
65735: LD_VAR 0 1
65739: PPUSH
65740: CALL_OW 257
65744: PUSH
65745: LD_INT 5
65747: EQUAL
65748: NOT
65749: IFFALSE 65753
// exit ;
65751: GO 66141
// dist := 8 ;
65753: LD_ADDR_VAR 0 5
65757: PUSH
65758: LD_INT 8
65760: ST_TO_ADDR
// viewRange := 12 ;
65761: LD_ADDR_VAR 0 7
65765: PUSH
65766: LD_INT 12
65768: ST_TO_ADDR
// side := GetSide ( unit ) ;
65769: LD_ADDR_VAR 0 6
65773: PUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: CALL_OW 255
65783: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65784: LD_INT 61
65786: PPUSH
65787: LD_VAR 0 6
65791: PPUSH
65792: CALL_OW 321
65796: PUSH
65797: LD_INT 2
65799: EQUAL
65800: IFFALSE 65810
// viewRange := 16 ;
65802: LD_ADDR_VAR 0 7
65806: PUSH
65807: LD_INT 16
65809: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65810: LD_VAR 0 1
65814: PPUSH
65815: LD_VAR 0 2
65819: PPUSH
65820: LD_VAR 0 3
65824: PPUSH
65825: CALL_OW 297
65829: PUSH
65830: LD_VAR 0 5
65834: GREATER
65835: IFFALSE 65914
// begin ComMoveXY ( unit , x , y ) ;
65837: LD_VAR 0 1
65841: PPUSH
65842: LD_VAR 0 2
65846: PPUSH
65847: LD_VAR 0 3
65851: PPUSH
65852: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65856: LD_INT 35
65858: PPUSH
65859: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65863: LD_VAR 0 1
65867: PPUSH
65868: LD_VAR 0 2
65872: PPUSH
65873: LD_VAR 0 3
65877: PPUSH
65878: CALL 40697 0 3
65882: NOT
65883: IFFALSE 65887
// exit ;
65885: GO 66141
// until GetDistUnitXY ( unit , x , y ) < dist ;
65887: LD_VAR 0 1
65891: PPUSH
65892: LD_VAR 0 2
65896: PPUSH
65897: LD_VAR 0 3
65901: PPUSH
65902: CALL_OW 297
65906: PUSH
65907: LD_VAR 0 5
65911: LESS
65912: IFFALSE 65856
// end ; ComTurnXY ( unit , x , y ) ;
65914: LD_VAR 0 1
65918: PPUSH
65919: LD_VAR 0 2
65923: PPUSH
65924: LD_VAR 0 3
65928: PPUSH
65929: CALL_OW 118
// wait ( 5 ) ;
65933: LD_INT 5
65935: PPUSH
65936: CALL_OW 67
// _d := GetDir ( unit ) ;
65940: LD_ADDR_VAR 0 10
65944: PUSH
65945: LD_VAR 0 1
65949: PPUSH
65950: CALL_OW 254
65954: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65955: LD_ADDR_VAR 0 8
65959: PUSH
65960: LD_VAR 0 1
65964: PPUSH
65965: CALL_OW 250
65969: PPUSH
65970: LD_VAR 0 10
65974: PPUSH
65975: LD_VAR 0 5
65979: PPUSH
65980: CALL_OW 272
65984: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65985: LD_ADDR_VAR 0 9
65989: PUSH
65990: LD_VAR 0 1
65994: PPUSH
65995: CALL_OW 251
65999: PPUSH
66000: LD_VAR 0 10
66004: PPUSH
66005: LD_VAR 0 5
66009: PPUSH
66010: CALL_OW 273
66014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66015: LD_VAR 0 8
66019: PPUSH
66020: LD_VAR 0 9
66024: PPUSH
66025: CALL_OW 488
66029: NOT
66030: IFFALSE 66034
// exit ;
66032: GO 66141
// ComAnimCustom ( unit , 1 ) ;
66034: LD_VAR 0 1
66038: PPUSH
66039: LD_INT 1
66041: PPUSH
66042: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66046: LD_VAR 0 8
66050: PPUSH
66051: LD_VAR 0 9
66055: PPUSH
66056: LD_VAR 0 6
66060: PPUSH
66061: LD_VAR 0 7
66065: PPUSH
66066: CALL_OW 330
// repeat wait ( 1 ) ;
66070: LD_INT 1
66072: PPUSH
66073: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66077: LD_VAR 0 1
66081: PPUSH
66082: CALL_OW 316
66086: PUSH
66087: LD_VAR 0 1
66091: PPUSH
66092: CALL_OW 314
66096: OR
66097: PUSH
66098: LD_VAR 0 1
66102: PPUSH
66103: CALL_OW 302
66107: NOT
66108: OR
66109: PUSH
66110: LD_VAR 0 1
66114: PPUSH
66115: CALL_OW 301
66119: OR
66120: IFFALSE 66070
// RemoveSeeing ( _x , _y , side ) ;
66122: LD_VAR 0 8
66126: PPUSH
66127: LD_VAR 0 9
66131: PPUSH
66132: LD_VAR 0 6
66136: PPUSH
66137: CALL_OW 331
// end ;
66141: LD_VAR 0 4
66145: RET
