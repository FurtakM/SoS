// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 695 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := false ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// SetBName ( ar_depot , kaba ) ;
  64: LD_INT 1
  66: PPUSH
  67: LD_STRING kaba
  69: PPUSH
  70: CALL_OW 500
// InitHC_All ( ) ;
  74: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  78: LD_ADDR_VAR 0 2
  82: PUSH
  83: LD_INT 22
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 32
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: PPUSH
 107: CALL_OW 69
 111: PUSH
 112: FOR_IN
 113: IFFALSE 178
// begin PrepareSoldier ( false , 6 ) ;
 115: LD_INT 0
 117: PPUSH
 118: LD_INT 6
 120: PPUSH
 121: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 125: CALL_OW 44
 129: PPUSH
 130: LD_VAR 0 2
 134: PPUSH
 135: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 139: LD_VAR 0 2
 143: PPUSH
 144: LD_INT 25
 146: PUSH
 147: LD_INT 27
 149: PUSH
 150: LD_INT 28
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_VAR 0 2
 162: PUSH
 163: LD_INT 3
 165: MOD
 166: PUSH
 167: LD_INT 1
 169: PLUS
 170: ARRAY
 171: PPUSH
 172: CALL_OW 431
// end ;
 176: GO 112
 178: POP
 179: POP
// PlaceWeaponTurret ( HexInfo ( 129 , 61 ) , ar_radar ) ;
 180: LD_INT 129
 182: PPUSH
 183: LD_INT 61
 185: PPUSH
 186: CALL_OW 428
 190: PPUSH
 191: LD_INT 30
 193: PPUSH
 194: CALL_OW 431
// PrepareSoldier ( sex_male , 3 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 3
 203: PPUSH
 204: CALL_OW 381
// omarSol := CreateHuman ;
 208: LD_ADDR_EXP 8
 212: PUSH
 213: CALL_OW 44
 217: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 218: LD_EXP 8
 222: PPUSH
 223: LD_INT 1
 225: PPUSH
 226: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 230: LD_ADDR_VAR 0 4
 234: PUSH
 235: LD_INT 143
 237: PPUSH
 238: LD_INT 51
 240: PPUSH
 241: CALL_OW 428
 245: ST_TO_ADDR
// for i := 1 to 2 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 2
 258: PUSH
 259: FOR_TO
 260: IFFALSE 288
// begin PrepareMechanic ( false , 3 ) ;
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 3
 267: PPUSH
 268: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 272: CALL_OW 44
 276: PPUSH
 277: LD_VAR 0 4
 281: PPUSH
 282: CALL_OW 52
// end ;
 286: GO 259
 288: POP
 289: POP
// for i := 1 to 2 do
 290: LD_ADDR_VAR 0 2
 294: PUSH
 295: DOUBLE
 296: LD_INT 1
 298: DEC
 299: ST_TO_ADDR
 300: LD_INT 2
 302: PUSH
 303: FOR_TO
 304: IFFALSE 330
// begin PrepareEngineer ( false , 2 ) ;
 306: LD_INT 0
 308: PPUSH
 309: LD_INT 2
 311: PPUSH
 312: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 316: CALL_OW 44
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 303
 330: POP
 331: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 332: CALL_OW 44
 336: PPUSH
 337: LD_INT 164
 339: PPUSH
 340: LD_INT 80
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 350: CALL_OW 44
 354: PPUSH
 355: LD_INT 166
 357: PPUSH
 358: LD_INT 84
 360: PPUSH
 361: LD_INT 0
 363: PPUSH
 364: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 368: LD_ADDR_VAR 0 2
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 2
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 8
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 451
// for j := 1 to 3 do
 405: LD_ADDR_VAR 0 5
 409: PUSH
 410: DOUBLE
 411: LD_INT 1
 413: DEC
 414: ST_TO_ADDR
 415: LD_INT 3
 417: PUSH
 418: FOR_TO
 419: IFFALSE 447
// begin PrepareScientist ( false , 3 ) ;
 421: LD_INT 0
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 2
 440: PPUSH
 441: CALL_OW 52
// end ;
 445: GO 418
 447: POP
 448: POP
 449: GO 402
 451: POP
 452: POP
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 3
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 1522 0 3
 476: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Kaia
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 1522 0 3
 500: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 501: LD_INT 14
 503: PPUSH
 504: LD_INT 3
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 27
 512: PPUSH
 513: LD_INT 100
 515: PPUSH
 516: CALL 6458 0 5
// heikeVehicle := CreateVehicle ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 530: LD_EXP 6
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 149
 549: PPUSH
 550: LD_INT 59
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 560: LD_EXP 3
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL_OW 52
// uc_side := 5 ;
 584: LD_ADDR_OWVAR 20
 588: PUSH
 589: LD_INT 5
 591: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_STRING Omar
 599: PPUSH
 600: CALL_OW 25
 604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 605: LD_INT 14
 607: PPUSH
 608: LD_INT 3
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 27
 616: PPUSH
 617: LD_INT 100
 619: PPUSH
 620: CALL 6458 0 5
// omarVehicle := CreateVehicle ;
 624: LD_ADDR_EXP 7
 628: PUSH
 629: CALL_OW 45
 633: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 634: LD_EXP 4
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 646: LD_EXP 7
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 658: LD_EXP 7
 662: PPUSH
 663: LD_INT 132
 665: PPUSH
 666: LD_INT 83
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 676: LD_EXP 4
 680: PPUSH
 681: LD_EXP 7
 685: PPUSH
 686: CALL_OW 52
// end ; end_of_file
 690: LD_VAR 0 1
 694: RET
// export function Action ; var i ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
// Video ( true ) ;
 699: LD_INT 1
 701: PPUSH
 702: CALL 39610 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: LD_INT 30
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: PUSH
 758: FOR_IN
 759: IFFALSE 778
// SetSpecResearch ( i , 1500 , false ) ;
 761: LD_VAR 0 2
 765: PPUSH
 766: LD_INT 1500
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 486
 776: GO 758
 778: POP
 779: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 780: LD_INT 1
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_INT 2
 788: PPUSH
 789: LD_INT 32963
 791: NEG
 792: PPUSH
 793: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 797: LD_EXP 4
 801: PPUSH
 802: LD_INT 150
 804: PPUSH
 805: LD_INT 72
 807: PPUSH
 808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 812: LD_INT 35
 814: PPUSH
 815: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 819: LD_INT 150
 821: PPUSH
 822: LD_INT 72
 824: PPUSH
 825: CALL_OW 428
 829: IFFALSE 812
// ComExitBuilding ( omarSol ) ;
 831: LD_EXP 8
 835: PPUSH
 836: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 840: LD_EXP 8
 844: PPUSH
 845: LD_INT 150
 847: PPUSH
 848: LD_INT 69
 850: PPUSH
 851: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 855: LD_EXP 8
 859: PPUSH
 860: LD_EXP 4
 864: PPUSH
 865: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 869: LD_EXP 8
 873: PPUSH
 874: LD_EXP 4
 878: PPUSH
 879: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 892: LD_EXP 4
 896: PPUSH
 897: LD_INT 152
 899: PPUSH
 900: LD_INT 70
 902: PPUSH
 903: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 907: LD_INT 35
 909: PPUSH
 910: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 914: LD_EXP 4
 918: PPUSH
 919: LD_EXP 8
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 3
 931: LESS
 932: IFFALSE 907
// ComTurnUnit ( Omar , omarSol ) ;
 934: LD_EXP 4
 938: PPUSH
 939: LD_EXP 8
 943: PPUSH
 944: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 948: LD_EXP 3
 952: PPUSH
 953: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 149
 964: PPUSH
 965: LD_INT 68
 967: PPUSH
 968: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 972: LD_EXP 3
 976: PPUSH
 977: LD_EXP 4
 981: PPUSH
 982: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 986: LD_EXP 4
 990: PPUSH
 991: LD_STRING DO-Intro-1
 993: PPUSH
 994: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 998: LD_EXP 8
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 120
// wait ( 0 0$0.3 ) ;
1010: LD_INT 10
1012: PPUSH
1013: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
1017: LD_EXP 3
1021: PPUSH
1022: LD_STRING DH-Intro-2
1024: PPUSH
1025: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1029: LD_EXP 4
1033: PPUSH
1034: LD_EXP 3
1038: PPUSH
1039: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_STRING DO-Intro-3
1050: PPUSH
1051: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 152
1062: PPUSH
1063: LD_INT 58
1065: PPUSH
1066: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_INT 154
1077: PPUSH
1078: LD_INT 60
1080: PPUSH
1081: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1085: LD_EXP 4
1089: PPUSH
1090: LD_EXP 3
1094: PPUSH
1095: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1099: LD_EXP 3
1103: PPUSH
1104: LD_EXP 4
1108: PPUSH
1109: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1113: LD_INT 35
1115: PPUSH
1116: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1120: LD_EXP 3
1124: PPUSH
1125: LD_INT 152
1127: PPUSH
1128: LD_INT 58
1130: PPUSH
1131: CALL_OW 307
1135: IFFALSE 1154
1137: PUSH
1138: LD_EXP 4
1142: PPUSH
1143: LD_INT 154
1145: PPUSH
1146: LD_INT 60
1148: PPUSH
1149: CALL_OW 307
1153: AND
1154: IFFALSE 1113
// wait ( 0 0$0.3 ) ;
1156: LD_INT 10
1158: PPUSH
1159: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1163: LD_EXP 4
1167: PPUSH
1168: LD_STRING DO-Intro-4
1170: PPUSH
1171: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1175: LD_INT 18
1177: PPUSH
1178: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1182: LD_EXP 3
1186: PPUSH
1187: LD_STRING DH-Intro-5
1189: PPUSH
1190: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1194: LD_EXP 4
1198: PPUSH
1199: LD_STRING DO-Intro-6
1201: PPUSH
1202: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1206: LD_INT 10
1208: PPUSH
1209: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1213: LD_EXP 3
1217: PPUSH
1218: LD_STRING DH-Intro-7
1220: PPUSH
1221: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1225: LD_INT 7
1227: PPUSH
1228: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1232: LD_EXP 3
1236: PPUSH
1237: LD_STRING DH-Intro-8
1239: PPUSH
1240: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1244: LD_EXP 4
1248: PPUSH
1249: LD_STRING DO-Intro-9
1251: PPUSH
1252: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1256: LD_EXP 3
1260: PPUSH
1261: LD_STRING DH-Intro-10
1263: PPUSH
1264: CALL_OW 88
// if not Kaia then
1268: LD_EXP 5
1272: NOT
1273: IFFALSE 1289
// Say ( Heike , DH-Intro-11-Kaia ) else
1275: LD_EXP 3
1279: PPUSH
1280: LD_STRING DH-Intro-11-Kaia
1282: PPUSH
1283: CALL_OW 88
1287: GO 1301
// Say ( Heike , DH-Intro-11-Friends ) ;
1289: LD_EXP 3
1293: PPUSH
1294: LD_STRING DH-Intro-11-Friends
1296: PPUSH
1297: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1301: LD_EXP 4
1305: PPUSH
1306: LD_STRING DO-Intro-12
1308: PPUSH
1309: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1313: LD_EXP 3
1317: PPUSH
1318: LD_STRING DH-Intro-13
1320: PPUSH
1321: CALL_OW 88
// async ;
1325: ASYNC
// wait ( 0 0$0.2 ) ;
1326: LD_INT 7
1328: PPUSH
1329: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1333: LD_EXP 3
1337: PPUSH
1338: LD_EXP 6
1342: PPUSH
1343: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1347: LD_EXP 3
1351: PPUSH
1352: LD_INT 131
1354: PPUSH
1355: LD_INT 83
1357: PPUSH
1358: CALL_OW 171
// sync ;
1362: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1363: LD_EXP 4
1367: PPUSH
1368: LD_STRING DO-Intro-14
1370: PPUSH
1371: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1375: LD_EXP 4
1379: PPUSH
1380: LD_EXP 3
1384: PPUSH
1385: CALL_OW 112
// wait ( 0 0$2 ) ;
1389: LD_INT 70
1391: PPUSH
1392: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1396: LD_INT 1
1398: PPUSH
1399: LD_STRING %_cont
1401: PPUSH
1402: CALL_OW 340
// end ;
1406: LD_VAR 0 1
1410: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1411: LD_VAR 0 2
1415: PUSH
1416: LD_EXP 4
1420: EQUAL
1421: IFFALSE 1435
// SetClass ( Omar , class_desert_warior ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 11
1430: PPUSH
1431: CALL_OW 336
// end ; end_of_file
1435: PPOPN 2
1437: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1438: LD_INT 0
1440: PPUSH
1441: PPUSH
// if exist_mode then
1442: LD_VAR 0 2
1446: IFFALSE 1492
// begin unit := CreateCharacter ( prefix & ident ) ;
1448: LD_ADDR_VAR 0 5
1452: PUSH
1453: LD_VAR 0 3
1457: PUSH
1458: LD_VAR 0 1
1462: STR
1463: PPUSH
1464: CALL_OW 34
1468: ST_TO_ADDR
// if unit then
1469: LD_VAR 0 5
1473: IFFALSE 1490
// DeleteCharacters ( prefix & ident ) ;
1475: LD_VAR 0 3
1479: PUSH
1480: LD_VAR 0 1
1484: STR
1485: PPUSH
1486: CALL_OW 40
// end else
1490: GO 1507
// unit := NewCharacter ( ident ) ;
1492: LD_ADDR_VAR 0 5
1496: PUSH
1497: LD_VAR 0 1
1501: PPUSH
1502: CALL_OW 25
1506: ST_TO_ADDR
// result := unit ;
1507: LD_ADDR_VAR 0 4
1511: PUSH
1512: LD_VAR 0 5
1516: ST_TO_ADDR
// end ;
1517: LD_VAR 0 4
1521: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1522: LD_INT 0
1524: PPUSH
1525: PPUSH
// if exist_mode then
1526: LD_VAR 0 2
1530: IFFALSE 1555
// unit := CreateCharacter ( prefix & ident ) else
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_VAR 0 3
1541: PUSH
1542: LD_VAR 0 1
1546: STR
1547: PPUSH
1548: CALL_OW 34
1552: ST_TO_ADDR
1553: GO 1570
// unit := NewCharacter ( ident ) ;
1555: LD_ADDR_VAR 0 5
1559: PUSH
1560: LD_VAR 0 1
1564: PPUSH
1565: CALL_OW 25
1569: ST_TO_ADDR
// result := unit ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_VAR 0 5
1579: ST_TO_ADDR
// end ;
1580: LD_VAR 0 4
1584: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1585: LD_INT 0
1587: PPUSH
1588: PPUSH
// if not side or not nation then
1589: LD_VAR 0 1
1593: NOT
1594: IFTRUE 1603
1596: PUSH
1597: LD_VAR 0 2
1601: NOT
1602: OR
1603: IFFALSE 1607
// exit ;
1605: GO 2401
// case nation of nation_american :
1607: LD_VAR 0 2
1611: PUSH
1612: LD_INT 1
1614: DOUBLE
1615: EQUAL
1616: IFTRUE 1620
1618: GO 1842
1620: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: LD_INT 35
1628: PUSH
1629: LD_INT 45
1631: PUSH
1632: LD_INT 46
1634: PUSH
1635: LD_INT 47
1637: PUSH
1638: LD_INT 82
1640: PUSH
1641: LD_INT 83
1643: PUSH
1644: LD_INT 84
1646: PUSH
1647: LD_INT 85
1649: PUSH
1650: LD_INT 86
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: LD_INT 2
1658: PUSH
1659: LD_INT 6
1661: PUSH
1662: LD_INT 15
1664: PUSH
1665: LD_INT 16
1667: PUSH
1668: LD_INT 7
1670: PUSH
1671: LD_INT 12
1673: PUSH
1674: LD_INT 13
1676: PUSH
1677: LD_INT 10
1679: PUSH
1680: LD_INT 14
1682: PUSH
1683: LD_INT 20
1685: PUSH
1686: LD_INT 21
1688: PUSH
1689: LD_INT 22
1691: PUSH
1692: LD_INT 25
1694: PUSH
1695: LD_INT 32
1697: PUSH
1698: LD_INT 27
1700: PUSH
1701: LD_INT 36
1703: PUSH
1704: LD_INT 69
1706: PUSH
1707: LD_INT 39
1709: PUSH
1710: LD_INT 34
1712: PUSH
1713: LD_INT 40
1715: PUSH
1716: LD_INT 48
1718: PUSH
1719: LD_INT 49
1721: PUSH
1722: LD_INT 50
1724: PUSH
1725: LD_INT 51
1727: PUSH
1728: LD_INT 52
1730: PUSH
1731: LD_INT 53
1733: PUSH
1734: LD_INT 54
1736: PUSH
1737: LD_INT 55
1739: PUSH
1740: LD_INT 56
1742: PUSH
1743: LD_INT 57
1745: PUSH
1746: LD_INT 58
1748: PUSH
1749: LD_INT 59
1751: PUSH
1752: LD_INT 60
1754: PUSH
1755: LD_INT 61
1757: PUSH
1758: LD_INT 62
1760: PUSH
1761: LD_INT 80
1763: PUSH
1764: LD_INT 82
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 84
1772: PUSH
1773: LD_INT 85
1775: PUSH
1776: LD_INT 86
1778: PUSH
1779: LD_INT 90
1781: PUSH
1782: LD_INT 93
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: ST_TO_ADDR
1840: GO 2323
1842: LD_INT 2
1844: DOUBLE
1845: EQUAL
1846: IFTRUE 1850
1848: GO 2084
1850: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
1851: LD_ADDR_VAR 0 4
1855: PUSH
1856: LD_INT 35
1858: PUSH
1859: LD_INT 45
1861: PUSH
1862: LD_INT 46
1864: PUSH
1865: LD_INT 47
1867: PUSH
1868: LD_INT 82
1870: PUSH
1871: LD_INT 83
1873: PUSH
1874: LD_INT 84
1876: PUSH
1877: LD_INT 85
1879: PUSH
1880: LD_INT 87
1882: PUSH
1883: LD_INT 70
1885: PUSH
1886: LD_INT 1
1888: PUSH
1889: LD_INT 11
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: LD_INT 4
1897: PUSH
1898: LD_INT 5
1900: PUSH
1901: LD_INT 6
1903: PUSH
1904: LD_INT 15
1906: PUSH
1907: LD_INT 18
1909: PUSH
1910: LD_INT 7
1912: PUSH
1913: LD_INT 17
1915: PUSH
1916: LD_INT 8
1918: PUSH
1919: LD_INT 20
1921: PUSH
1922: LD_INT 21
1924: PUSH
1925: LD_INT 22
1927: PUSH
1928: LD_INT 72
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 69
1936: PUSH
1937: LD_INT 39
1939: PUSH
1940: LD_INT 40
1942: PUSH
1943: LD_INT 41
1945: PUSH
1946: LD_INT 42
1948: PUSH
1949: LD_INT 43
1951: PUSH
1952: LD_INT 48
1954: PUSH
1955: LD_INT 49
1957: PUSH
1958: LD_INT 50
1960: PUSH
1961: LD_INT 51
1963: PUSH
1964: LD_INT 52
1966: PUSH
1967: LD_INT 53
1969: PUSH
1970: LD_INT 54
1972: PUSH
1973: LD_INT 55
1975: PUSH
1976: LD_INT 56
1978: PUSH
1979: LD_INT 60
1981: PUSH
1982: LD_INT 61
1984: PUSH
1985: LD_INT 62
1987: PUSH
1988: LD_INT 66
1990: PUSH
1991: LD_INT 67
1993: PUSH
1994: LD_INT 68
1996: PUSH
1997: LD_INT 81
1999: PUSH
2000: LD_INT 82
2002: PUSH
2003: LD_INT 83
2005: PUSH
2006: LD_INT 84
2008: PUSH
2009: LD_INT 85
2011: PUSH
2012: LD_INT 87
2014: PUSH
2015: LD_INT 88
2017: PUSH
2018: LD_INT 92
2020: PUSH
2021: LD_INT 94
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: ST_TO_ADDR
2082: GO 2323
2084: LD_INT 3
2086: DOUBLE
2087: EQUAL
2088: IFTRUE 2092
2090: GO 2322
2092: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2093: LD_ADDR_VAR 0 4
2097: PUSH
2098: LD_INT 46
2100: PUSH
2101: LD_INT 47
2103: PUSH
2104: LD_INT 1
2106: PUSH
2107: LD_INT 2
2109: PUSH
2110: LD_INT 82
2112: PUSH
2113: LD_INT 83
2115: PUSH
2116: LD_INT 84
2118: PUSH
2119: LD_INT 85
2121: PUSH
2122: LD_INT 86
2124: PUSH
2125: LD_INT 11
2127: PUSH
2128: LD_INT 9
2130: PUSH
2131: LD_INT 20
2133: PUSH
2134: LD_INT 19
2136: PUSH
2137: LD_INT 21
2139: PUSH
2140: LD_INT 24
2142: PUSH
2143: LD_INT 22
2145: PUSH
2146: LD_INT 25
2148: PUSH
2149: LD_INT 28
2151: PUSH
2152: LD_INT 29
2154: PUSH
2155: LD_INT 30
2157: PUSH
2158: LD_INT 31
2160: PUSH
2161: LD_INT 37
2163: PUSH
2164: LD_INT 38
2166: PUSH
2167: LD_INT 32
2169: PUSH
2170: LD_INT 27
2172: PUSH
2173: LD_INT 33
2175: PUSH
2176: LD_INT 69
2178: PUSH
2179: LD_INT 39
2181: PUSH
2182: LD_INT 34
2184: PUSH
2185: LD_INT 40
2187: PUSH
2188: LD_INT 71
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 44
2196: PUSH
2197: LD_INT 48
2199: PUSH
2200: LD_INT 49
2202: PUSH
2203: LD_INT 50
2205: PUSH
2206: LD_INT 51
2208: PUSH
2209: LD_INT 52
2211: PUSH
2212: LD_INT 53
2214: PUSH
2215: LD_INT 54
2217: PUSH
2218: LD_INT 55
2220: PUSH
2221: LD_INT 56
2223: PUSH
2224: LD_INT 57
2226: PUSH
2227: LD_INT 58
2229: PUSH
2230: LD_INT 59
2232: PUSH
2233: LD_INT 63
2235: PUSH
2236: LD_INT 64
2238: PUSH
2239: LD_INT 65
2241: PUSH
2242: LD_INT 82
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 84
2250: PUSH
2251: LD_INT 85
2253: PUSH
2254: LD_INT 86
2256: PUSH
2257: LD_INT 89
2259: PUSH
2260: LD_INT 91
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: ST_TO_ADDR
2320: GO 2323
2322: POP
// if state > - 1 and state < 3 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 1
2330: NEG
2331: GREATER
2332: IFFALSE 2344
2334: PUSH
2335: LD_VAR 0 3
2339: PUSH
2340: LD_INT 3
2342: LESS
2343: AND
2344: IFFALSE 2401
// for i in result do
2346: LD_ADDR_VAR 0 5
2350: PUSH
2351: LD_VAR 0 4
2355: PUSH
2356: FOR_IN
2357: IFFALSE 2399
// if GetTech ( i , side ) <> state then
2359: LD_VAR 0 5
2363: PPUSH
2364: LD_VAR 0 1
2368: PPUSH
2369: CALL_OW 321
2373: PUSH
2374: LD_VAR 0 3
2378: NONEQUAL
2379: IFFALSE 2397
// result := result diff i ;
2381: LD_ADDR_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: PUSH
2391: LD_VAR 0 5
2395: DIFF
2396: ST_TO_ADDR
2397: GO 2356
2399: POP
2400: POP
// end ;
2401: LD_VAR 0 4
2405: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2406: LD_INT 0
2408: PPUSH
2409: PPUSH
2410: PPUSH
// result := true ;
2411: LD_ADDR_VAR 0 3
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2419: LD_ADDR_VAR 0 5
2423: PUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 480
2433: ST_TO_ADDR
// if not tmp then
2434: LD_VAR 0 5
2438: NOT
2439: IFFALSE 2443
// exit ;
2441: GO 2492
// for i in tmp do
2443: LD_ADDR_VAR 0 4
2447: PUSH
2448: LD_VAR 0 5
2452: PUSH
2453: FOR_IN
2454: IFFALSE 2490
// if GetTech ( i , side ) <> state_researched then
2456: LD_VAR 0 4
2460: PPUSH
2461: LD_VAR 0 1
2465: PPUSH
2466: CALL_OW 321
2470: PUSH
2471: LD_INT 2
2473: NONEQUAL
2474: IFFALSE 2488
// begin result := false ;
2476: LD_ADDR_VAR 0 3
2480: PUSH
2481: LD_INT 0
2483: ST_TO_ADDR
// exit ;
2484: POP
2485: POP
2486: GO 2492
// end ;
2488: GO 2453
2490: POP
2491: POP
// end ;
2492: LD_VAR 0 3
2496: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2497: LD_INT 0
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
2505: PPUSH
2506: PPUSH
2507: PPUSH
2508: PPUSH
2509: PPUSH
2510: PPUSH
2511: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2512: LD_VAR 0 1
2516: NOT
2517: IFTRUE 2534
2519: PUSH
2520: LD_VAR 0 1
2524: PPUSH
2525: CALL_OW 257
2529: PUSH
2530: LD_INT 9
2532: NONEQUAL
2533: OR
2534: IFFALSE 2538
// exit ;
2536: GO 3117
// side := GetSide ( unit ) ;
2538: LD_ADDR_VAR 0 9
2542: PUSH
2543: LD_VAR 0 1
2547: PPUSH
2548: CALL_OW 255
2552: ST_TO_ADDR
// tech_space := tech_spacanom ;
2553: LD_ADDR_VAR 0 12
2557: PUSH
2558: LD_INT 29
2560: ST_TO_ADDR
// tech_time := tech_taurad ;
2561: LD_ADDR_VAR 0 13
2565: PUSH
2566: LD_INT 28
2568: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2569: LD_ADDR_VAR 0 11
2573: PUSH
2574: LD_VAR 0 1
2578: PPUSH
2579: CALL_OW 310
2583: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2584: LD_VAR 0 11
2588: PPUSH
2589: CALL_OW 247
2593: PUSH
2594: LD_INT 2
2596: EQUAL
2597: IFFALSE 2601
// exit ;
2599: GO 3117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2601: LD_ADDR_VAR 0 8
2605: PUSH
2606: LD_INT 81
2608: PUSH
2609: LD_VAR 0 9
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 3
2620: PUSH
2621: LD_INT 21
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: ST_TO_ADDR
// if not tmp then
2644: LD_VAR 0 8
2648: NOT
2649: IFFALSE 2653
// exit ;
2651: GO 3117
// if in_unit then
2653: LD_VAR 0 11
2657: IFFALSE 2681
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2659: LD_ADDR_VAR 0 10
2663: PUSH
2664: LD_VAR 0 8
2668: PPUSH
2669: LD_VAR 0 11
2673: PPUSH
2674: CALL_OW 74
2678: ST_TO_ADDR
2679: GO 2701
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2681: LD_ADDR_VAR 0 10
2685: PUSH
2686: LD_VAR 0 8
2690: PPUSH
2691: LD_VAR 0 1
2695: PPUSH
2696: CALL_OW 74
2700: ST_TO_ADDR
// if not enemy then
2701: LD_VAR 0 10
2705: NOT
2706: IFFALSE 2710
// exit ;
2708: GO 3117
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2710: LD_VAR 0 11
2714: IFFALSE 2736
2716: PUSH
2717: LD_VAR 0 11
2721: PPUSH
2722: LD_VAR 0 10
2726: PPUSH
2727: CALL_OW 296
2731: PUSH
2732: LD_INT 13
2734: GREATER
2735: AND
2736: IFTRUE 2758
2738: PUSH
2739: LD_VAR 0 1
2743: PPUSH
2744: LD_VAR 0 10
2748: PPUSH
2749: CALL_OW 296
2753: PUSH
2754: LD_INT 12
2756: GREATER
2757: OR
2758: IFFALSE 2762
// exit ;
2760: GO 3117
// missile := [ 1 ] ;
2762: LD_ADDR_VAR 0 14
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: EMPTY
2771: LIST
2772: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2773: LD_VAR 0 9
2777: PPUSH
2778: LD_VAR 0 12
2782: PPUSH
2783: CALL_OW 325
2787: IFFALSE 2816
// missile := Replace ( missile , missile + 1 , 2 ) ;
2789: LD_ADDR_VAR 0 14
2793: PUSH
2794: LD_VAR 0 14
2798: PPUSH
2799: LD_VAR 0 14
2803: PUSH
2804: LD_INT 1
2806: PLUS
2807: PPUSH
2808: LD_INT 2
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2816: LD_VAR 0 9
2820: PPUSH
2821: LD_VAR 0 13
2825: PPUSH
2826: CALL_OW 325
2830: IFFALSE 2854
2832: PUSH
2833: LD_VAR 0 10
2837: PPUSH
2838: CALL_OW 255
2842: PPUSH
2843: LD_VAR 0 13
2847: PPUSH
2848: CALL_OW 325
2852: NOT
2853: AND
2854: IFFALSE 2883
// missile := Replace ( missile , missile + 1 , 3 ) ;
2856: LD_ADDR_VAR 0 14
2860: PUSH
2861: LD_VAR 0 14
2865: PPUSH
2866: LD_VAR 0 14
2870: PUSH
2871: LD_INT 1
2873: PLUS
2874: PPUSH
2875: LD_INT 3
2877: PPUSH
2878: CALL_OW 1
2882: ST_TO_ADDR
// if missile < 2 then
2883: LD_VAR 0 14
2887: PUSH
2888: LD_INT 2
2890: LESS
2891: IFFALSE 2895
// exit ;
2893: GO 3117
// x := GetX ( enemy ) ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: LD_VAR 0 10
2904: PPUSH
2905: CALL_OW 250
2909: ST_TO_ADDR
// y := GetY ( enemy ) ;
2910: LD_ADDR_VAR 0 5
2914: PUSH
2915: LD_VAR 0 10
2919: PPUSH
2920: CALL_OW 251
2924: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2925: LD_ADDR_VAR 0 6
2929: PUSH
2930: LD_VAR 0 4
2934: PUSH
2935: LD_INT 1
2937: NEG
2938: PPUSH
2939: LD_INT 1
2941: PPUSH
2942: CALL_OW 12
2946: PLUS
2947: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2948: LD_ADDR_VAR 0 7
2952: PUSH
2953: LD_VAR 0 5
2957: PUSH
2958: LD_INT 1
2960: NEG
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: CALL_OW 12
2969: PLUS
2970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2971: LD_VAR 0 6
2975: PPUSH
2976: LD_VAR 0 7
2980: PPUSH
2981: CALL_OW 488
2985: NOT
2986: IFFALSE 3008
// begin _x := x ;
2988: LD_ADDR_VAR 0 6
2992: PUSH
2993: LD_VAR 0 4
2997: ST_TO_ADDR
// _y := y ;
2998: LD_ADDR_VAR 0 7
3002: PUSH
3003: LD_VAR 0 5
3007: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3008: LD_ADDR_VAR 0 3
3012: PUSH
3013: LD_INT 1
3015: PPUSH
3016: LD_VAR 0 14
3020: PPUSH
3021: CALL_OW 12
3025: ST_TO_ADDR
// case i of 1 :
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 1
3033: DOUBLE
3034: EQUAL
3035: IFTRUE 3039
3037: GO 3056
3039: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3040: LD_VAR 0 1
3044: PPUSH
3045: LD_VAR 0 10
3049: PPUSH
3050: CALL_OW 115
3054: GO 3117
3056: LD_INT 2
3058: DOUBLE
3059: EQUAL
3060: IFTRUE 3064
3062: GO 3086
3064: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3065: LD_VAR 0 1
3069: PPUSH
3070: LD_VAR 0 6
3074: PPUSH
3075: LD_VAR 0 7
3079: PPUSH
3080: CALL_OW 153
3084: GO 3117
3086: LD_INT 3
3088: DOUBLE
3089: EQUAL
3090: IFTRUE 3094
3092: GO 3116
3094: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3095: LD_VAR 0 1
3099: PPUSH
3100: LD_VAR 0 6
3104: PPUSH
3105: LD_VAR 0 7
3109: PPUSH
3110: CALL_OW 154
3114: GO 3117
3116: POP
// end ;
3117: LD_VAR 0 2
3121: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
// if not unit or not building then
3130: LD_VAR 0 1
3134: NOT
3135: IFTRUE 3144
3137: PUSH
3138: LD_VAR 0 2
3142: NOT
3143: OR
3144: IFFALSE 3148
// exit ;
3146: GO 3306
// x := GetX ( building ) ;
3148: LD_ADDR_VAR 0 5
3152: PUSH
3153: LD_VAR 0 2
3157: PPUSH
3158: CALL_OW 250
3162: ST_TO_ADDR
// y := GetY ( building ) ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 2
3172: PPUSH
3173: CALL_OW 251
3177: ST_TO_ADDR
// for i := 0 to 5 do
3178: LD_ADDR_VAR 0 4
3182: PUSH
3183: DOUBLE
3184: LD_INT 0
3186: DEC
3187: ST_TO_ADDR
3188: LD_INT 5
3190: PUSH
3191: FOR_TO
3192: IFFALSE 3304
// begin _x := ShiftX ( x , i , 3 ) ;
3194: LD_ADDR_VAR 0 7
3198: PUSH
3199: LD_VAR 0 5
3203: PPUSH
3204: LD_VAR 0 4
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: CALL_OW 272
3216: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3217: LD_ADDR_VAR 0 8
3221: PUSH
3222: LD_VAR 0 6
3226: PPUSH
3227: LD_VAR 0 4
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: CALL_OW 273
3239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3240: LD_VAR 0 7
3244: PPUSH
3245: LD_VAR 0 8
3249: PPUSH
3250: CALL_OW 488
3254: NOT
3255: IFFALSE 3259
// continue ;
3257: GO 3191
// if HexInfo ( _x , _y ) = 0 then
3259: LD_VAR 0 7
3263: PPUSH
3264: LD_VAR 0 8
3268: PPUSH
3269: CALL_OW 428
3273: PUSH
3274: LD_INT 0
3276: EQUAL
3277: IFFALSE 3302
// begin ComMoveXY ( unit , _x , _y ) ;
3279: LD_VAR 0 1
3283: PPUSH
3284: LD_VAR 0 7
3288: PPUSH
3289: LD_VAR 0 8
3293: PPUSH
3294: CALL_OW 111
// exit ;
3298: POP
3299: POP
3300: GO 3306
// end ; end ;
3302: GO 3191
3304: POP
3305: POP
// end ;
3306: LD_VAR 0 3
3310: RET
// export function ScanBase ( side , base_area ) ; begin
3311: LD_INT 0
3313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_INT 81
3326: PUSH
3327: LD_VAR 0 1
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 70
3340: ST_TO_ADDR
// end ;
3341: LD_VAR 0 3
3345: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3346: LD_INT 0
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
// result := false ;
3352: LD_ADDR_VAR 0 2
3356: PUSH
3357: LD_INT 0
3359: ST_TO_ADDR
// side := GetSide ( unit ) ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: LD_VAR 0 1
3369: PPUSH
3370: CALL_OW 255
3374: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 248
3389: ST_TO_ADDR
// case nat of 1 :
3390: LD_VAR 0 4
3394: PUSH
3395: LD_INT 1
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3403
3401: GO 3414
3403: POP
// tech := tech_lassight ; 2 :
3404: LD_ADDR_VAR 0 5
3408: PUSH
3409: LD_INT 12
3411: ST_TO_ADDR
3412: GO 3453
3414: LD_INT 2
3416: DOUBLE
3417: EQUAL
3418: IFTRUE 3422
3420: GO 3433
3422: POP
// tech := tech_mortar ; 3 :
3423: LD_ADDR_VAR 0 5
3427: PUSH
3428: LD_INT 41
3430: ST_TO_ADDR
3431: GO 3453
3433: LD_INT 3
3435: DOUBLE
3436: EQUAL
3437: IFTRUE 3441
3439: GO 3452
3441: POP
// tech := tech_bazooka ; end ;
3442: LD_ADDR_VAR 0 5
3446: PUSH
3447: LD_INT 44
3449: ST_TO_ADDR
3450: GO 3453
3452: POP
// if Researched ( side , tech ) then
3453: LD_VAR 0 3
3457: PPUSH
3458: LD_VAR 0 5
3462: PPUSH
3463: CALL_OW 325
3467: IFFALSE 3494
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3469: LD_ADDR_VAR 0 2
3473: PUSH
3474: LD_INT 5
3476: PUSH
3477: LD_INT 8
3479: PUSH
3480: LD_INT 9
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: PUSH
3488: LD_VAR 0 4
3492: ARRAY
3493: ST_TO_ADDR
// end ;
3494: LD_VAR 0 2
3498: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3499: LD_INT 0
3501: PPUSH
3502: PPUSH
3503: PPUSH
// if not mines then
3504: LD_VAR 0 2
3508: NOT
3509: IFFALSE 3513
// exit ;
3511: GO 3657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3513: LD_ADDR_VAR 0 5
3517: PUSH
3518: LD_INT 81
3520: PUSH
3521: LD_VAR 0 1
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 3
3532: PUSH
3533: LD_INT 21
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PPUSH
3551: CALL_OW 69
3555: ST_TO_ADDR
// for i in mines do
3556: LD_ADDR_VAR 0 4
3560: PUSH
3561: LD_VAR 0 2
3565: PUSH
3566: FOR_IN
3567: IFFALSE 3655
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3569: LD_VAR 0 4
3573: PUSH
3574: LD_INT 1
3576: ARRAY
3577: PPUSH
3578: LD_VAR 0 4
3582: PUSH
3583: LD_INT 2
3585: ARRAY
3586: PPUSH
3587: CALL_OW 458
3591: NOT
3592: IFFALSE 3596
// continue ;
3594: GO 3566
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 4
3609: PUSH
3610: LD_INT 2
3612: ARRAY
3613: PPUSH
3614: CALL_OW 428
3618: PUSH
3619: LD_VAR 0 5
3623: IN
3624: IFFALSE 3653
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3626: LD_VAR 0 4
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 4
3639: PUSH
3640: LD_INT 2
3642: ARRAY
3643: PPUSH
3644: LD_VAR 0 1
3648: PPUSH
3649: CALL_OW 456
// end ;
3653: GO 3566
3655: POP
3656: POP
// end ;
3657: LD_VAR 0 3
3661: RET
// export function Count ( array ) ; begin
3662: LD_INT 0
3664: PPUSH
// result := array + 0 ;
3665: LD_ADDR_VAR 0 2
3669: PUSH
3670: LD_VAR 0 1
3674: PUSH
3675: LD_INT 0
3677: PLUS
3678: ST_TO_ADDR
// end ;
3679: LD_VAR 0 2
3683: RET
// export function IsEmpty ( building ) ; begin
3684: LD_INT 0
3686: PPUSH
// if not building then
3687: LD_VAR 0 1
3691: NOT
3692: IFFALSE 3696
// exit ;
3694: GO 3739
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: LD_VAR 0 1
3705: PUSH
3706: LD_INT 22
3708: PUSH
3709: LD_VAR 0 1
3713: PPUSH
3714: CALL_OW 255
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 58
3725: PUSH
3726: EMPTY
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PPUSH
3733: CALL_OW 69
3737: IN
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 2
3743: RET
// export function IsNotFull ( building ) ; var places ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
// if not building then
3748: LD_VAR 0 1
3752: NOT
3753: IFFALSE 3757
// exit ;
3755: GO 3785
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 3
3769: PUSH
3770: LD_INT 62
3772: PUSH
3773: EMPTY
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 72
3784: ST_TO_ADDR
// end ;
3785: LD_VAR 0 2
3789: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3790: LD_INT 0
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
// tmp := [ ] ;
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: EMPTY
3802: ST_TO_ADDR
// list := [ ] ;
3803: LD_ADDR_VAR 0 5
3807: PUSH
3808: EMPTY
3809: ST_TO_ADDR
// for i = 16 to 25 do
3810: LD_ADDR_VAR 0 4
3814: PUSH
3815: DOUBLE
3816: LD_INT 16
3818: DEC
3819: ST_TO_ADDR
3820: LD_INT 25
3822: PUSH
3823: FOR_TO
3824: IFFALSE 3897
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: LD_VAR 0 3
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_VAR 0 1
3843: PPUSH
3844: CALL_OW 255
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 91
3855: PUSH
3856: LD_VAR 0 1
3860: PUSH
3861: LD_INT 6
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 30
3871: PUSH
3872: LD_VAR 0 4
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: ADD
3894: ST_TO_ADDR
3895: GO 3823
3897: POP
3898: POP
// for i = 1 to tmp do
3899: LD_ADDR_VAR 0 4
3903: PUSH
3904: DOUBLE
3905: LD_INT 1
3907: DEC
3908: ST_TO_ADDR
3909: LD_VAR 0 3
3913: PUSH
3914: FOR_TO
3915: IFFALSE 4003
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3917: LD_ADDR_VAR 0 5
3921: PUSH
3922: LD_VAR 0 5
3926: PUSH
3927: LD_VAR 0 3
3931: PUSH
3932: LD_VAR 0 4
3936: ARRAY
3937: PPUSH
3938: CALL_OW 266
3942: PUSH
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 4
3952: ARRAY
3953: PPUSH
3954: CALL_OW 250
3958: PUSH
3959: LD_VAR 0 3
3963: PUSH
3964: LD_VAR 0 4
3968: ARRAY
3969: PPUSH
3970: CALL_OW 251
3974: PUSH
3975: LD_VAR 0 3
3979: PUSH
3980: LD_VAR 0 4
3984: ARRAY
3985: PPUSH
3986: CALL_OW 254
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: PUSH
3997: EMPTY
3998: LIST
3999: ADD
4000: ST_TO_ADDR
4001: GO 3914
4003: POP
4004: POP
// result := list ;
4005: LD_ADDR_VAR 0 2
4009: PUSH
4010: LD_VAR 0 5
4014: ST_TO_ADDR
// end ;
4015: LD_VAR 0 2
4019: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4020: LD_INT 0
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// if not factory then
4029: LD_VAR 0 1
4033: NOT
4034: IFFALSE 4038
// exit ;
4036: GO 4641
// if control = control_apeman then
4038: LD_VAR 0 4
4042: PUSH
4043: LD_INT 5
4045: EQUAL
4046: IFFALSE 4155
// begin tmp := UnitsInside ( factory ) ;
4048: LD_ADDR_VAR 0 8
4052: PUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: CALL_OW 313
4062: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4063: LD_VAR 0 8
4067: PPUSH
4068: LD_INT 25
4070: PUSH
4071: LD_INT 12
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PPUSH
4078: CALL_OW 72
4082: NOT
4083: IFFALSE 4093
// control := control_manual ;
4085: LD_ADDR_VAR 0 4
4089: PUSH
4090: LD_INT 1
4092: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4093: LD_ADDR_VAR 0 8
4097: PUSH
4098: LD_VAR 0 1
4102: PPUSH
4103: CALL 3790 0 1
4107: ST_TO_ADDR
// if tmp then
4108: LD_VAR 0 8
4112: IFFALSE 4155
// begin for i in tmp do
4114: LD_ADDR_VAR 0 7
4118: PUSH
4119: LD_VAR 0 8
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4153
// if i [ 1 ] = b_ext_radio then
4127: LD_VAR 0 7
4131: PUSH
4132: LD_INT 1
4134: ARRAY
4135: PUSH
4136: LD_INT 22
4138: EQUAL
4139: IFFALSE 4151
// begin control := control_remote ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_INT 2
4148: ST_TO_ADDR
// break ;
4149: GO 4153
// end ;
4151: GO 4124
4153: POP
4154: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4155: LD_VAR 0 1
4159: PPUSH
4160: LD_VAR 0 2
4164: PPUSH
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_VAR 0 5
4179: PPUSH
4180: CALL_OW 448
4184: IFFALSE 4219
// begin result := [ chassis , engine , control , weapon ] ;
4186: LD_ADDR_VAR 0 6
4190: PUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_VAR 0 3
4200: PUSH
4201: LD_VAR 0 4
4205: PUSH
4206: LD_VAR 0 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: ST_TO_ADDR
// exit ;
4217: GO 4641
// end ; _chassis := AvailableChassisList ( factory ) ;
4219: LD_ADDR_VAR 0 9
4223: PUSH
4224: LD_VAR 0 1
4228: PPUSH
4229: CALL_OW 475
4233: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4234: LD_ADDR_VAR 0 11
4238: PUSH
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 476
4248: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4249: LD_ADDR_VAR 0 12
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 477
4263: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4264: LD_ADDR_VAR 0 10
4268: PUSH
4269: LD_VAR 0 1
4273: PPUSH
4274: CALL_OW 478
4278: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4279: LD_VAR 0 9
4283: NOT
4284: IFTRUE 4293
4286: PUSH
4287: LD_VAR 0 11
4291: NOT
4292: OR
4293: IFTRUE 4302
4295: PUSH
4296: LD_VAR 0 12
4300: NOT
4301: OR
4302: IFTRUE 4311
4304: PUSH
4305: LD_VAR 0 10
4309: NOT
4310: OR
4311: IFFALSE 4346
// begin result := [ chassis , engine , control , weapon ] ;
4313: LD_ADDR_VAR 0 6
4317: PUSH
4318: LD_VAR 0 2
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_VAR 0 5
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: ST_TO_ADDR
// exit ;
4344: GO 4641
// end ; if not chassis in _chassis then
4346: LD_VAR 0 2
4350: PUSH
4351: LD_VAR 0 9
4355: IN
4356: NOT
4357: IFFALSE 4383
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4359: LD_ADDR_VAR 0 2
4363: PUSH
4364: LD_VAR 0 9
4368: PUSH
4369: LD_INT 1
4371: PPUSH
4372: LD_VAR 0 9
4376: PPUSH
4377: CALL_OW 12
4381: ARRAY
4382: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4383: LD_VAR 0 2
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL 4646 0 2
4397: NOT
4398: IFFALSE 4459
// repeat engine := _engine [ 1 ] ;
4400: LD_ADDR_VAR 0 3
4404: PUSH
4405: LD_VAR 0 11
4409: PUSH
4410: LD_INT 1
4412: ARRAY
4413: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4414: LD_ADDR_VAR 0 11
4418: PUSH
4419: LD_VAR 0 11
4423: PPUSH
4424: LD_INT 1
4426: PPUSH
4427: CALL_OW 3
4431: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4432: LD_VAR 0 2
4436: PPUSH
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL 4646 0 2
4446: IFTRUE 4457
4448: PUSH
4449: LD_VAR 0 11
4453: PUSH
4454: EMPTY
4455: EQUAL
4456: OR
4457: IFFALSE 4400
// if not control in _control then
4459: LD_VAR 0 4
4463: PUSH
4464: LD_VAR 0 12
4468: IN
4469: NOT
4470: IFFALSE 4496
// control := _control [ rand ( 1 , _control ) ] ;
4472: LD_ADDR_VAR 0 4
4476: PUSH
4477: LD_VAR 0 12
4481: PUSH
4482: LD_INT 1
4484: PPUSH
4485: LD_VAR 0 12
4489: PPUSH
4490: CALL_OW 12
4494: ARRAY
4495: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4496: LD_VAR 0 2
4500: PPUSH
4501: LD_VAR 0 5
4505: PPUSH
4506: CALL 4868 0 2
4510: NOT
4511: IFFALSE 4572
// repeat weapon := _weapon [ 1 ] ;
4513: LD_ADDR_VAR 0 5
4517: PUSH
4518: LD_VAR 0 10
4522: PUSH
4523: LD_INT 1
4525: ARRAY
4526: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4527: LD_ADDR_VAR 0 10
4531: PUSH
4532: LD_VAR 0 10
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 3
4544: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4545: LD_VAR 0 2
4549: PPUSH
4550: LD_VAR 0 5
4554: PPUSH
4555: CALL 4868 0 2
4559: IFTRUE 4570
4561: PUSH
4562: LD_VAR 0 10
4566: PUSH
4567: EMPTY
4568: EQUAL
4569: OR
4570: IFFALSE 4513
// result := [ ] ;
4572: LD_ADDR_VAR 0 6
4576: PUSH
4577: EMPTY
4578: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4579: LD_VAR 0 1
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: LD_VAR 0 3
4593: PPUSH
4594: LD_VAR 0 4
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL_OW 448
4608: IFFALSE 4641
// result := [ chassis , engine , control , weapon ] ;
4610: LD_ADDR_VAR 0 6
4614: PUSH
4615: LD_VAR 0 2
4619: PUSH
4620: LD_VAR 0 3
4624: PUSH
4625: LD_VAR 0 4
4629: PUSH
4630: LD_VAR 0 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: ST_TO_ADDR
// end ;
4641: LD_VAR 0 6
4645: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4646: LD_INT 0
4648: PPUSH
// if not chassis or not engine then
4649: LD_VAR 0 1
4653: NOT
4654: IFTRUE 4663
4656: PUSH
4657: LD_VAR 0 2
4661: NOT
4662: OR
4663: IFFALSE 4667
// exit ;
4665: GO 4863
// case engine of engine_solar :
4667: LD_VAR 0 2
4671: PUSH
4672: LD_INT 2
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4680
4678: GO 4718
4680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4681: LD_ADDR_VAR 0 3
4685: PUSH
4686: LD_INT 11
4688: PUSH
4689: LD_INT 12
4691: PUSH
4692: LD_INT 13
4694: PUSH
4695: LD_INT 14
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: LD_INT 2
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: ST_TO_ADDR
4716: GO 4847
4718: LD_INT 1
4720: DOUBLE
4721: EQUAL
4722: IFTRUE 4726
4724: GO 4788
4726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4727: LD_ADDR_VAR 0 3
4731: PUSH
4732: LD_INT 11
4734: PUSH
4735: LD_INT 12
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 14
4743: PUSH
4744: LD_INT 1
4746: PUSH
4747: LD_INT 2
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 4
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 23
4764: PUSH
4765: LD_INT 22
4767: PUSH
4768: LD_INT 24
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: ST_TO_ADDR
4786: GO 4847
4788: LD_INT 3
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4846
4796: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_INT 13
4804: PUSH
4805: LD_INT 14
4807: PUSH
4808: LD_INT 2
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: LD_INT 4
4816: PUSH
4817: LD_INT 5
4819: PUSH
4820: LD_INT 21
4822: PUSH
4823: LD_INT 22
4825: PUSH
4826: LD_INT 23
4828: PUSH
4829: LD_INT 24
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: ST_TO_ADDR
4844: GO 4847
4846: POP
// result := ( chassis in result ) ;
4847: LD_ADDR_VAR 0 3
4851: PUSH
4852: LD_VAR 0 1
4856: PUSH
4857: LD_VAR 0 3
4861: IN
4862: ST_TO_ADDR
// end ;
4863: LD_VAR 0 3
4867: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4868: LD_INT 0
4870: PPUSH
// if not chassis or not weapon then
4871: LD_VAR 0 1
4875: NOT
4876: IFTRUE 4885
4878: PUSH
4879: LD_VAR 0 2
4883: NOT
4884: OR
4885: IFFALSE 4889
// exit ;
4887: GO 5983
// case weapon of us_machine_gun :
4889: LD_VAR 0 2
4893: PUSH
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4932
4902: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: LD_INT 4
4919: PUSH
4920: LD_INT 5
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: ST_TO_ADDR
4930: GO 5967
4932: LD_INT 3
4934: DOUBLE
4935: EQUAL
4936: IFTRUE 4940
4938: GO 4970
4940: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: LD_INT 1
4948: PUSH
4949: LD_INT 2
4951: PUSH
4952: LD_INT 3
4954: PUSH
4955: LD_INT 4
4957: PUSH
4958: LD_INT 5
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: ST_TO_ADDR
4968: GO 5967
4970: LD_INT 11
4972: DOUBLE
4973: EQUAL
4974: IFTRUE 4978
4976: GO 5008
4978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4979: LD_ADDR_VAR 0 3
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: LD_INT 2
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: LD_INT 4
4995: PUSH
4996: LD_INT 5
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: ST_TO_ADDR
5006: GO 5967
5008: LD_INT 4
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5016
5014: GO 5042
5016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5017: LD_ADDR_VAR 0 3
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: LD_INT 4
5030: PUSH
5031: LD_INT 5
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
5040: GO 5967
5042: LD_INT 5
5044: DOUBLE
5045: EQUAL
5046: IFTRUE 5050
5048: GO 5076
5050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 3
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: LD_INT 5
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: ST_TO_ADDR
5074: GO 5967
5076: LD_INT 9
5078: DOUBLE
5079: EQUAL
5080: IFTRUE 5084
5082: GO 5110
5084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_INT 2
5092: PUSH
5093: LD_INT 3
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: LD_INT 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: ST_TO_ADDR
5108: GO 5967
5110: LD_INT 7
5112: DOUBLE
5113: EQUAL
5114: IFTRUE 5118
5116: GO 5144
5118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 3
5129: PUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: ST_TO_ADDR
5142: GO 5967
5144: LD_INT 12
5146: DOUBLE
5147: EQUAL
5148: IFTRUE 5152
5150: GO 5178
5152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5153: LD_ADDR_VAR 0 3
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 3
5163: PUSH
5164: LD_INT 4
5166: PUSH
5167: LD_INT 5
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: ST_TO_ADDR
5176: GO 5967
5178: LD_INT 13
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5212
5186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5187: LD_ADDR_VAR 0 3
5191: PUSH
5192: LD_INT 2
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: LD_INT 5
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: ST_TO_ADDR
5210: GO 5967
5212: LD_INT 14
5214: DOUBLE
5215: EQUAL
5216: IFTRUE 5220
5218: GO 5238
5220: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5221: LD_ADDR_VAR 0 3
5225: PUSH
5226: LD_INT 4
5228: PUSH
5229: LD_INT 5
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: ST_TO_ADDR
5236: GO 5967
5238: LD_INT 6
5240: DOUBLE
5241: EQUAL
5242: IFTRUE 5246
5244: GO 5264
5246: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5247: LD_ADDR_VAR 0 3
5251: PUSH
5252: LD_INT 4
5254: PUSH
5255: LD_INT 5
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: ST_TO_ADDR
5262: GO 5967
5264: LD_INT 10
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5290
5272: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5273: LD_ADDR_VAR 0 3
5277: PUSH
5278: LD_INT 4
5280: PUSH
5281: LD_INT 5
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: ST_TO_ADDR
5288: GO 5967
5290: LD_INT 22
5292: DOUBLE
5293: EQUAL
5294: IFTRUE 5298
5296: GO 5324
5298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5299: LD_ADDR_VAR 0 3
5303: PUSH
5304: LD_INT 11
5306: PUSH
5307: LD_INT 12
5309: PUSH
5310: LD_INT 13
5312: PUSH
5313: LD_INT 14
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: ST_TO_ADDR
5322: GO 5967
5324: LD_INT 23
5326: DOUBLE
5327: EQUAL
5328: IFTRUE 5332
5330: GO 5358
5332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: LD_INT 11
5340: PUSH
5341: LD_INT 12
5343: PUSH
5344: LD_INT 13
5346: PUSH
5347: LD_INT 14
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: ST_TO_ADDR
5356: GO 5967
5358: LD_INT 24
5360: DOUBLE
5361: EQUAL
5362: IFTRUE 5366
5364: GO 5392
5366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: LD_INT 11
5374: PUSH
5375: LD_INT 12
5377: PUSH
5378: LD_INT 13
5380: PUSH
5381: LD_INT 14
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: ST_TO_ADDR
5390: GO 5967
5392: LD_INT 30
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5426
5400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5401: LD_ADDR_VAR 0 3
5405: PUSH
5406: LD_INT 11
5408: PUSH
5409: LD_INT 12
5411: PUSH
5412: LD_INT 13
5414: PUSH
5415: LD_INT 14
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 5967
5426: LD_INT 25
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5452
5434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_INT 13
5442: PUSH
5443: LD_INT 14
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: ST_TO_ADDR
5450: GO 5967
5452: LD_INT 27
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5460
5458: GO 5478
5460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5461: LD_ADDR_VAR 0 3
5465: PUSH
5466: LD_INT 13
5468: PUSH
5469: LD_INT 14
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: ST_TO_ADDR
5476: GO 5967
5478: LD_INT 92
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5512
5486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: LD_INT 11
5494: PUSH
5495: LD_INT 12
5497: PUSH
5498: LD_INT 13
5500: PUSH
5501: LD_INT 14
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: ST_TO_ADDR
5510: GO 5967
5512: LD_INT 28
5514: DOUBLE
5515: EQUAL
5516: IFTRUE 5520
5518: GO 5538
5520: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 13
5528: PUSH
5529: LD_INT 14
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: ST_TO_ADDR
5536: GO 5967
5538: LD_INT 29
5540: DOUBLE
5541: EQUAL
5542: IFTRUE 5546
5544: GO 5564
5546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5547: LD_ADDR_VAR 0 3
5551: PUSH
5552: LD_INT 13
5554: PUSH
5555: LD_INT 14
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: ST_TO_ADDR
5562: GO 5967
5564: LD_INT 31
5566: DOUBLE
5567: EQUAL
5568: IFTRUE 5572
5570: GO 5590
5572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5573: LD_ADDR_VAR 0 3
5577: PUSH
5578: LD_INT 13
5580: PUSH
5581: LD_INT 14
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: ST_TO_ADDR
5588: GO 5967
5590: LD_INT 26
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5598
5596: GO 5616
5598: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 13
5606: PUSH
5607: LD_INT 14
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: ST_TO_ADDR
5614: GO 5967
5616: LD_INT 42
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5624
5622: GO 5650
5624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_INT 21
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_INT 23
5638: PUSH
5639: LD_INT 24
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: ST_TO_ADDR
5648: GO 5967
5650: LD_INT 43
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5658
5656: GO 5684
5658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5659: LD_ADDR_VAR 0 3
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 22
5669: PUSH
5670: LD_INT 23
5672: PUSH
5673: LD_INT 24
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: ST_TO_ADDR
5682: GO 5967
5684: LD_INT 44
5686: DOUBLE
5687: EQUAL
5688: IFTRUE 5692
5690: GO 5718
5692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_INT 21
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 24
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: ST_TO_ADDR
5716: GO 5967
5718: LD_INT 45
5720: DOUBLE
5721: EQUAL
5722: IFTRUE 5726
5724: GO 5752
5726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5727: LD_ADDR_VAR 0 3
5731: PUSH
5732: LD_INT 21
5734: PUSH
5735: LD_INT 22
5737: PUSH
5738: LD_INT 23
5740: PUSH
5741: LD_INT 24
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: ST_TO_ADDR
5750: GO 5967
5752: LD_INT 49
5754: DOUBLE
5755: EQUAL
5756: IFTRUE 5760
5758: GO 5786
5760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5761: LD_ADDR_VAR 0 3
5765: PUSH
5766: LD_INT 21
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 23
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: ST_TO_ADDR
5784: GO 5967
5786: LD_INT 51
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5820
5794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_INT 21
5802: PUSH
5803: LD_INT 22
5805: PUSH
5806: LD_INT 23
5808: PUSH
5809: LD_INT 24
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: ST_TO_ADDR
5818: GO 5967
5820: LD_INT 52
5822: DOUBLE
5823: EQUAL
5824: IFTRUE 5828
5826: GO 5854
5828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_INT 21
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 23
5842: PUSH
5843: LD_INT 24
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: ST_TO_ADDR
5852: GO 5967
5854: LD_INT 53
5856: DOUBLE
5857: EQUAL
5858: IFTRUE 5862
5860: GO 5880
5862: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: LD_INT 23
5870: PUSH
5871: LD_INT 24
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: ST_TO_ADDR
5878: GO 5967
5880: LD_INT 46
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5906
5888: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5889: LD_ADDR_VAR 0 3
5893: PUSH
5894: LD_INT 23
5896: PUSH
5897: LD_INT 24
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: ST_TO_ADDR
5904: GO 5967
5906: LD_INT 47
5908: DOUBLE
5909: EQUAL
5910: IFTRUE 5914
5912: GO 5932
5914: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
5915: LD_ADDR_VAR 0 3
5919: PUSH
5920: LD_INT 23
5922: PUSH
5923: LD_INT 24
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: ST_TO_ADDR
5930: GO 5967
5932: LD_INT 98
5934: DOUBLE
5935: EQUAL
5936: IFTRUE 5940
5938: GO 5966
5940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5941: LD_ADDR_VAR 0 3
5945: PUSH
5946: LD_INT 21
5948: PUSH
5949: LD_INT 22
5951: PUSH
5952: LD_INT 23
5954: PUSH
5955: LD_INT 24
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: ST_TO_ADDR
5964: GO 5967
5966: POP
// result := ( chassis in result ) ;
5967: LD_ADDR_VAR 0 3
5971: PUSH
5972: LD_VAR 0 1
5976: PUSH
5977: LD_VAR 0 3
5981: IN
5982: ST_TO_ADDR
// end ;
5983: LD_VAR 0 3
5987: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5988: LD_INT 0
5990: PPUSH
5991: PPUSH
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
// result := array ;
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: LD_VAR 0 1
6006: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6007: LD_VAR 0 1
6011: NOT
6012: IFTRUE 6021
6014: PUSH
6015: LD_VAR 0 2
6019: NOT
6020: OR
6021: IFTRUE 6030
6023: PUSH
6024: LD_VAR 0 3
6028: NOT
6029: OR
6030: IFTRUE 6044
6032: PUSH
6033: LD_VAR 0 2
6037: PUSH
6038: LD_VAR 0 1
6042: GREATER
6043: OR
6044: IFTRUE 6058
6046: PUSH
6047: LD_VAR 0 3
6051: PUSH
6052: LD_VAR 0 1
6056: GREATER
6057: OR
6058: IFFALSE 6062
// exit ;
6060: GO 6358
// if direction then
6062: LD_VAR 0 4
6066: IFFALSE 6130
// begin d := 1 ;
6068: LD_ADDR_VAR 0 9
6072: PUSH
6073: LD_INT 1
6075: ST_TO_ADDR
// if i_from > i_to then
6076: LD_VAR 0 2
6080: PUSH
6081: LD_VAR 0 3
6085: GREATER
6086: IFFALSE 6112
// length := ( array - i_from ) + i_to else
6088: LD_ADDR_VAR 0 11
6092: PUSH
6093: LD_VAR 0 1
6097: PUSH
6098: LD_VAR 0 2
6102: MINUS
6103: PUSH
6104: LD_VAR 0 3
6108: PLUS
6109: ST_TO_ADDR
6110: GO 6128
// length := i_to - i_from ;
6112: LD_ADDR_VAR 0 11
6116: PUSH
6117: LD_VAR 0 3
6121: PUSH
6122: LD_VAR 0 2
6126: MINUS
6127: ST_TO_ADDR
// end else
6128: GO 6191
// begin d := - 1 ;
6130: LD_ADDR_VAR 0 9
6134: PUSH
6135: LD_INT 1
6137: NEG
6138: ST_TO_ADDR
// if i_from > i_to then
6139: LD_VAR 0 2
6143: PUSH
6144: LD_VAR 0 3
6148: GREATER
6149: IFFALSE 6169
// length := i_from - i_to else
6151: LD_ADDR_VAR 0 11
6155: PUSH
6156: LD_VAR 0 2
6160: PUSH
6161: LD_VAR 0 3
6165: MINUS
6166: ST_TO_ADDR
6167: GO 6191
// length := ( array - i_to ) + i_from ;
6169: LD_ADDR_VAR 0 11
6173: PUSH
6174: LD_VAR 0 1
6178: PUSH
6179: LD_VAR 0 3
6183: MINUS
6184: PUSH
6185: LD_VAR 0 2
6189: PLUS
6190: ST_TO_ADDR
// end ; if not length then
6191: LD_VAR 0 11
6195: NOT
6196: IFFALSE 6200
// exit ;
6198: GO 6358
// tmp := array ;
6200: LD_ADDR_VAR 0 10
6204: PUSH
6205: LD_VAR 0 1
6209: ST_TO_ADDR
// for i = 1 to length do
6210: LD_ADDR_VAR 0 6
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_VAR 0 11
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6346
// begin for j = 1 to array do
6228: LD_ADDR_VAR 0 7
6232: PUSH
6233: DOUBLE
6234: LD_INT 1
6236: DEC
6237: ST_TO_ADDR
6238: LD_VAR 0 1
6242: PUSH
6243: FOR_TO
6244: IFFALSE 6332
// begin k := j + d ;
6246: LD_ADDR_VAR 0 8
6250: PUSH
6251: LD_VAR 0 7
6255: PUSH
6256: LD_VAR 0 9
6260: PLUS
6261: ST_TO_ADDR
// if k > array then
6262: LD_VAR 0 8
6266: PUSH
6267: LD_VAR 0 1
6271: GREATER
6272: IFFALSE 6282
// k := 1 ;
6274: LD_ADDR_VAR 0 8
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// if not k then
6282: LD_VAR 0 8
6286: NOT
6287: IFFALSE 6299
// k := array ;
6289: LD_ADDR_VAR 0 8
6293: PUSH
6294: LD_VAR 0 1
6298: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6299: LD_ADDR_VAR 0 10
6303: PUSH
6304: LD_VAR 0 10
6308: PPUSH
6309: LD_VAR 0 8
6313: PPUSH
6314: LD_VAR 0 1
6318: PUSH
6319: LD_VAR 0 7
6323: ARRAY
6324: PPUSH
6325: CALL_OW 1
6329: ST_TO_ADDR
// end ;
6330: GO 6243
6332: POP
6333: POP
// array := tmp ;
6334: LD_ADDR_VAR 0 1
6338: PUSH
6339: LD_VAR 0 10
6343: ST_TO_ADDR
// end ;
6344: GO 6225
6346: POP
6347: POP
// result := array ;
6348: LD_ADDR_VAR 0 5
6352: PUSH
6353: LD_VAR 0 1
6357: ST_TO_ADDR
// end ;
6358: LD_VAR 0 5
6362: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6363: LD_INT 0
6365: PPUSH
6366: PPUSH
// result := 0 ;
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_INT 0
6374: ST_TO_ADDR
// if not array or not value in array then
6375: LD_VAR 0 1
6379: NOT
6380: IFTRUE 6395
6382: PUSH
6383: LD_VAR 0 2
6387: PUSH
6388: LD_VAR 0 1
6392: IN
6393: NOT
6394: OR
6395: IFFALSE 6399
// exit ;
6397: GO 6453
// for i = 1 to array do
6399: LD_ADDR_VAR 0 4
6403: PUSH
6404: DOUBLE
6405: LD_INT 1
6407: DEC
6408: ST_TO_ADDR
6409: LD_VAR 0 1
6413: PUSH
6414: FOR_TO
6415: IFFALSE 6451
// if value = array [ i ] then
6417: LD_VAR 0 2
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: LD_VAR 0 4
6431: ARRAY
6432: EQUAL
6433: IFFALSE 6449
// begin result := i ;
6435: LD_ADDR_VAR 0 3
6439: PUSH
6440: LD_VAR 0 4
6444: ST_TO_ADDR
// exit ;
6445: POP
6446: POP
6447: GO 6453
// end ;
6449: GO 6414
6451: POP
6452: POP
// end ;
6453: LD_VAR 0 3
6457: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6458: LD_INT 0
6460: PPUSH
// vc_chassis := chassis ;
6461: LD_ADDR_OWVAR 37
6465: PUSH
6466: LD_VAR 0 1
6470: ST_TO_ADDR
// vc_engine := engine ;
6471: LD_ADDR_OWVAR 39
6475: PUSH
6476: LD_VAR 0 2
6480: ST_TO_ADDR
// vc_control := control ;
6481: LD_ADDR_OWVAR 38
6485: PUSH
6486: LD_VAR 0 3
6490: ST_TO_ADDR
// vc_weapon := weapon ;
6491: LD_ADDR_OWVAR 40
6495: PUSH
6496: LD_VAR 0 4
6500: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6501: LD_ADDR_OWVAR 41
6505: PUSH
6506: LD_VAR 0 5
6510: ST_TO_ADDR
// end ;
6511: LD_VAR 0 6
6515: RET
// export function WantPlant ( unit ) ; var task ; begin
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
// result := false ;
6520: LD_ADDR_VAR 0 2
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: LD_VAR 0 1
6537: PPUSH
6538: CALL_OW 437
6542: ST_TO_ADDR
// if task then
6543: LD_VAR 0 3
6547: IFFALSE 6575
// if task [ 1 ] [ 1 ] = p then
6549: LD_VAR 0 3
6553: PUSH
6554: LD_INT 1
6556: ARRAY
6557: PUSH
6558: LD_INT 1
6560: ARRAY
6561: PUSH
6562: LD_STRING p
6564: EQUAL
6565: IFFALSE 6575
// result := true ;
6567: LD_ADDR_VAR 0 2
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// end ;
6575: LD_VAR 0 2
6579: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6580: LD_INT 0
6582: PPUSH
6583: PPUSH
6584: PPUSH
6585: PPUSH
// if pos < 1 then
6586: LD_VAR 0 2
6590: PUSH
6591: LD_INT 1
6593: LESS
6594: IFFALSE 6598
// exit ;
6596: GO 6901
// if pos = 1 then
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 1
6605: EQUAL
6606: IFFALSE 6639
// result := Replace ( arr , pos [ 1 ] , value ) else
6608: LD_ADDR_VAR 0 4
6612: PUSH
6613: LD_VAR 0 1
6617: PPUSH
6618: LD_VAR 0 2
6622: PUSH
6623: LD_INT 1
6625: ARRAY
6626: PPUSH
6627: LD_VAR 0 3
6631: PPUSH
6632: CALL_OW 1
6636: ST_TO_ADDR
6637: GO 6901
// begin tmp := arr ;
6639: LD_ADDR_VAR 0 6
6643: PUSH
6644: LD_VAR 0 1
6648: ST_TO_ADDR
// s_arr := [ tmp ] ;
6649: LD_ADDR_VAR 0 7
6653: PUSH
6654: LD_VAR 0 6
6658: PUSH
6659: EMPTY
6660: LIST
6661: ST_TO_ADDR
// for i = 1 to pos - 1 do
6662: LD_ADDR_VAR 0 5
6666: PUSH
6667: DOUBLE
6668: LD_INT 1
6670: DEC
6671: ST_TO_ADDR
6672: LD_VAR 0 2
6676: PUSH
6677: LD_INT 1
6679: MINUS
6680: PUSH
6681: FOR_TO
6682: IFFALSE 6727
// begin tmp := tmp [ pos [ i ] ] ;
6684: LD_ADDR_VAR 0 6
6688: PUSH
6689: LD_VAR 0 6
6693: PUSH
6694: LD_VAR 0 2
6698: PUSH
6699: LD_VAR 0 5
6703: ARRAY
6704: ARRAY
6705: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6706: LD_ADDR_VAR 0 7
6710: PUSH
6711: LD_VAR 0 7
6715: PUSH
6716: LD_VAR 0 6
6720: PUSH
6721: EMPTY
6722: LIST
6723: ADD
6724: ST_TO_ADDR
// end ;
6725: GO 6681
6727: POP
6728: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6729: LD_ADDR_VAR 0 6
6733: PUSH
6734: LD_VAR 0 6
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 3
6754: PPUSH
6755: CALL_OW 1
6759: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6760: LD_ADDR_VAR 0 7
6764: PUSH
6765: LD_VAR 0 7
6769: PPUSH
6770: LD_VAR 0 7
6774: PPUSH
6775: LD_VAR 0 6
6779: PPUSH
6780: CALL_OW 1
6784: ST_TO_ADDR
// for i = s_arr downto 2 do
6785: LD_ADDR_VAR 0 5
6789: PUSH
6790: DOUBLE
6791: LD_VAR 0 7
6795: INC
6796: ST_TO_ADDR
6797: LD_INT 2
6799: PUSH
6800: FOR_DOWNTO
6801: IFFALSE 6885
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6803: LD_ADDR_VAR 0 6
6807: PUSH
6808: LD_VAR 0 7
6812: PUSH
6813: LD_VAR 0 5
6817: PUSH
6818: LD_INT 1
6820: MINUS
6821: ARRAY
6822: PPUSH
6823: LD_VAR 0 2
6827: PUSH
6828: LD_VAR 0 5
6832: PUSH
6833: LD_INT 1
6835: MINUS
6836: ARRAY
6837: PPUSH
6838: LD_VAR 0 7
6842: PUSH
6843: LD_VAR 0 5
6847: ARRAY
6848: PPUSH
6849: CALL_OW 1
6853: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6854: LD_ADDR_VAR 0 7
6858: PUSH
6859: LD_VAR 0 7
6863: PPUSH
6864: LD_VAR 0 5
6868: PUSH
6869: LD_INT 1
6871: MINUS
6872: PPUSH
6873: LD_VAR 0 6
6877: PPUSH
6878: CALL_OW 1
6882: ST_TO_ADDR
// end ;
6883: GO 6800
6885: POP
6886: POP
// result := s_arr [ 1 ] ;
6887: LD_ADDR_VAR 0 4
6891: PUSH
6892: LD_VAR 0 7
6896: PUSH
6897: LD_INT 1
6899: ARRAY
6900: ST_TO_ADDR
// end ; end ;
6901: LD_VAR 0 4
6905: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6906: LD_INT 0
6908: PPUSH
6909: PPUSH
// if not list then
6910: LD_VAR 0 1
6914: NOT
6915: IFFALSE 6919
// exit ;
6917: GO 7010
// i := list [ pos1 ] ;
6919: LD_ADDR_VAR 0 5
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: LD_VAR 0 2
6933: ARRAY
6934: ST_TO_ADDR
// if not i then
6935: LD_VAR 0 5
6939: NOT
6940: IFFALSE 6944
// exit ;
6942: GO 7010
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: LD_VAR 0 1
6953: PPUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: LD_VAR 0 1
6963: PUSH
6964: LD_VAR 0 3
6968: ARRAY
6969: PPUSH
6970: CALL_OW 1
6974: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6975: LD_ADDR_VAR 0 1
6979: PUSH
6980: LD_VAR 0 1
6984: PPUSH
6985: LD_VAR 0 3
6989: PPUSH
6990: LD_VAR 0 5
6994: PPUSH
6995: CALL_OW 1
6999: ST_TO_ADDR
// result := list ;
7000: LD_ADDR_VAR 0 4
7004: PUSH
7005: LD_VAR 0 1
7009: ST_TO_ADDR
// end ;
7010: LD_VAR 0 4
7014: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7015: LD_INT 0
7017: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7018: LD_ADDR_VAR 0 5
7022: PUSH
7023: LD_VAR 0 1
7027: PPUSH
7028: CALL_OW 250
7032: PPUSH
7033: LD_VAR 0 1
7037: PPUSH
7038: CALL_OW 251
7042: PPUSH
7043: LD_VAR 0 2
7047: PPUSH
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_VAR 0 4
7057: PPUSH
7058: CALL 7440 0 5
7062: ST_TO_ADDR
// end ;
7063: LD_VAR 0 5
7067: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7068: LD_INT 0
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
// if not list or not unit then
7074: LD_VAR 0 2
7078: NOT
7079: IFTRUE 7088
7081: PUSH
7082: LD_VAR 0 1
7086: NOT
7087: OR
7088: IFFALSE 7092
// exit ;
7090: GO 7435
// result := [ ] ;
7092: LD_ADDR_VAR 0 5
7096: PUSH
7097: EMPTY
7098: ST_TO_ADDR
// for i in list do
7099: LD_ADDR_VAR 0 6
7103: PUSH
7104: LD_VAR 0 2
7108: PUSH
7109: FOR_IN
7110: IFFALSE 7328
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7112: LD_ADDR_VAR 0 8
7116: PUSH
7117: LD_VAR 0 1
7121: PPUSH
7122: LD_VAR 0 6
7126: PUSH
7127: LD_INT 1
7129: ARRAY
7130: PPUSH
7131: LD_VAR 0 6
7135: PUSH
7136: LD_INT 2
7138: ARRAY
7139: PPUSH
7140: CALL_OW 297
7144: ST_TO_ADDR
// if not Count ( result ) then
7145: LD_VAR 0 5
7149: PPUSH
7150: CALL 3662 0 1
7154: NOT
7155: IFFALSE 7188
// begin result := Join ( result , [ i , tmp ] ) ;
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: LD_VAR 0 5
7166: PPUSH
7167: LD_VAR 0 6
7171: PUSH
7172: LD_VAR 0 8
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL 39638 0 2
7185: ST_TO_ADDR
// continue ;
7186: GO 7109
// end ; if result [ result ] [ 2 ] <= tmp then
7188: LD_VAR 0 5
7192: PUSH
7193: LD_VAR 0 5
7197: ARRAY
7198: PUSH
7199: LD_INT 2
7201: ARRAY
7202: PUSH
7203: LD_VAR 0 8
7207: LESSEQUAL
7208: IFFALSE 7241
// result := Join ( result , [ i , tmp ] ) else
7210: LD_ADDR_VAR 0 5
7214: PUSH
7215: LD_VAR 0 5
7219: PPUSH
7220: LD_VAR 0 6
7224: PUSH
7225: LD_VAR 0 8
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PPUSH
7234: CALL 39638 0 2
7238: ST_TO_ADDR
7239: GO 7326
// begin for j := 1 to Count ( result ) do
7241: LD_ADDR_VAR 0 7
7245: PUSH
7246: DOUBLE
7247: LD_INT 1
7249: DEC
7250: ST_TO_ADDR
7251: LD_VAR 0 5
7255: PPUSH
7256: CALL 3662 0 1
7260: PUSH
7261: FOR_TO
7262: IFFALSE 7324
// begin if tmp < result [ j ] [ 2 ] then
7264: LD_VAR 0 8
7268: PUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_VAR 0 7
7278: ARRAY
7279: PUSH
7280: LD_INT 2
7282: ARRAY
7283: LESS
7284: IFFALSE 7322
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7286: LD_ADDR_VAR 0 5
7290: PUSH
7291: LD_VAR 0 5
7295: PPUSH
7296: LD_VAR 0 7
7300: PPUSH
7301: LD_VAR 0 6
7305: PUSH
7306: LD_VAR 0 8
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PPUSH
7315: CALL_OW 2
7319: ST_TO_ADDR
// break ;
7320: GO 7324
// end ; end ;
7322: GO 7261
7324: POP
7325: POP
// end ; end ;
7326: GO 7109
7328: POP
7329: POP
// if result and not asc then
7330: LD_VAR 0 5
7334: IFFALSE 7343
7336: PUSH
7337: LD_VAR 0 3
7341: NOT
7342: AND
7343: IFFALSE 7360
// result := ReverseArray ( result ) ;
7345: LD_ADDR_VAR 0 5
7349: PUSH
7350: LD_VAR 0 5
7354: PPUSH
7355: CALL 34718 0 1
7359: ST_TO_ADDR
// tmp := [ ] ;
7360: LD_ADDR_VAR 0 8
7364: PUSH
7365: EMPTY
7366: ST_TO_ADDR
// if mode then
7367: LD_VAR 0 4
7371: IFFALSE 7435
// begin for i := 1 to result do
7373: LD_ADDR_VAR 0 6
7377: PUSH
7378: DOUBLE
7379: LD_INT 1
7381: DEC
7382: ST_TO_ADDR
7383: LD_VAR 0 5
7387: PUSH
7388: FOR_TO
7389: IFFALSE 7423
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_VAR 0 8
7400: PPUSH
7401: LD_VAR 0 5
7405: PUSH
7406: LD_VAR 0 6
7410: ARRAY
7411: PUSH
7412: LD_INT 1
7414: ARRAY
7415: PPUSH
7416: CALL 39638 0 2
7420: ST_TO_ADDR
7421: GO 7388
7423: POP
7424: POP
// result := tmp ;
7425: LD_ADDR_VAR 0 5
7429: PUSH
7430: LD_VAR 0 8
7434: ST_TO_ADDR
// end ; end ;
7435: LD_VAR 0 5
7439: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
7444: PPUSH
7445: PPUSH
// if not list then
7446: LD_VAR 0 3
7450: NOT
7451: IFFALSE 7455
// exit ;
7453: GO 7845
// result := [ ] ;
7455: LD_ADDR_VAR 0 6
7459: PUSH
7460: EMPTY
7461: ST_TO_ADDR
// for i in list do
7462: LD_ADDR_VAR 0 7
7466: PUSH
7467: LD_VAR 0 3
7471: PUSH
7472: FOR_IN
7473: IFFALSE 7675
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7475: LD_ADDR_VAR 0 9
7479: PUSH
7480: LD_VAR 0 7
7484: PPUSH
7485: LD_VAR 0 1
7489: PPUSH
7490: LD_VAR 0 2
7494: PPUSH
7495: CALL_OW 297
7499: ST_TO_ADDR
// if not result then
7500: LD_VAR 0 6
7504: NOT
7505: IFFALSE 7531
// result := [ [ i , tmp ] ] else
7507: LD_ADDR_VAR 0 6
7511: PUSH
7512: LD_VAR 0 7
7516: PUSH
7517: LD_VAR 0 9
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: ST_TO_ADDR
7529: GO 7673
// begin if result [ result ] [ 2 ] <= tmp then
7531: LD_VAR 0 6
7535: PUSH
7536: LD_VAR 0 6
7540: ARRAY
7541: PUSH
7542: LD_INT 2
7544: ARRAY
7545: PUSH
7546: LD_VAR 0 9
7550: LESSEQUAL
7551: IFFALSE 7593
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7553: LD_ADDR_VAR 0 6
7557: PUSH
7558: LD_VAR 0 6
7562: PPUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: PPUSH
7572: LD_VAR 0 7
7576: PUSH
7577: LD_VAR 0 9
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 2
7590: ST_TO_ADDR
7591: GO 7673
// for j := 1 to result do
7593: LD_ADDR_VAR 0 8
7597: PUSH
7598: DOUBLE
7599: LD_INT 1
7601: DEC
7602: ST_TO_ADDR
7603: LD_VAR 0 6
7607: PUSH
7608: FOR_TO
7609: IFFALSE 7671
// begin if tmp < result [ j ] [ 2 ] then
7611: LD_VAR 0 9
7615: PUSH
7616: LD_VAR 0 6
7620: PUSH
7621: LD_VAR 0 8
7625: ARRAY
7626: PUSH
7627: LD_INT 2
7629: ARRAY
7630: LESS
7631: IFFALSE 7669
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7633: LD_ADDR_VAR 0 6
7637: PUSH
7638: LD_VAR 0 6
7642: PPUSH
7643: LD_VAR 0 8
7647: PPUSH
7648: LD_VAR 0 7
7652: PUSH
7653: LD_VAR 0 9
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PPUSH
7662: CALL_OW 2
7666: ST_TO_ADDR
// break ;
7667: GO 7671
// end ; end ;
7669: GO 7608
7671: POP
7672: POP
// end ; end ;
7673: GO 7472
7675: POP
7676: POP
// if result and not asc then
7677: LD_VAR 0 6
7681: IFFALSE 7690
7683: PUSH
7684: LD_VAR 0 4
7688: NOT
7689: AND
7690: IFFALSE 7765
// begin tmp := result ;
7692: LD_ADDR_VAR 0 9
7696: PUSH
7697: LD_VAR 0 6
7701: ST_TO_ADDR
// for i = tmp downto 1 do
7702: LD_ADDR_VAR 0 7
7706: PUSH
7707: DOUBLE
7708: LD_VAR 0 9
7712: INC
7713: ST_TO_ADDR
7714: LD_INT 1
7716: PUSH
7717: FOR_DOWNTO
7718: IFFALSE 7763
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7720: LD_ADDR_VAR 0 6
7724: PUSH
7725: LD_VAR 0 6
7729: PPUSH
7730: LD_VAR 0 9
7734: PUSH
7735: LD_VAR 0 7
7739: MINUS
7740: PUSH
7741: LD_INT 1
7743: PLUS
7744: PPUSH
7745: LD_VAR 0 9
7749: PUSH
7750: LD_VAR 0 7
7754: ARRAY
7755: PPUSH
7756: CALL_OW 1
7760: ST_TO_ADDR
7761: GO 7717
7763: POP
7764: POP
// end ; tmp := [ ] ;
7765: LD_ADDR_VAR 0 9
7769: PUSH
7770: EMPTY
7771: ST_TO_ADDR
// if mode then
7772: LD_VAR 0 5
7776: IFFALSE 7845
// begin for i = 1 to result do
7778: LD_ADDR_VAR 0 7
7782: PUSH
7783: DOUBLE
7784: LD_INT 1
7786: DEC
7787: ST_TO_ADDR
7788: LD_VAR 0 6
7792: PUSH
7793: FOR_TO
7794: IFFALSE 7833
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7796: LD_ADDR_VAR 0 9
7800: PUSH
7801: LD_VAR 0 9
7805: PPUSH
7806: LD_VAR 0 7
7810: PPUSH
7811: LD_VAR 0 6
7815: PUSH
7816: LD_VAR 0 7
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: CALL_OW 1
7830: ST_TO_ADDR
7831: GO 7793
7833: POP
7834: POP
// result := tmp ;
7835: LD_ADDR_VAR 0 6
7839: PUSH
7840: LD_VAR 0 9
7844: ST_TO_ADDR
// end ; end ;
7845: LD_VAR 0 6
7849: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7850: LD_INT 0
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7858: LD_ADDR_VAR 0 5
7862: PUSH
7863: LD_INT 0
7865: PUSH
7866: LD_INT 0
7868: PUSH
7869: LD_INT 0
7871: PUSH
7872: EMPTY
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: ST_TO_ADDR
// if not x or not y then
7880: LD_VAR 0 2
7884: NOT
7885: IFTRUE 7894
7887: PUSH
7888: LD_VAR 0 3
7892: NOT
7893: OR
7894: IFFALSE 7898
// exit ;
7896: GO 9554
// if not range then
7898: LD_VAR 0 4
7902: NOT
7903: IFFALSE 7913
// range := 10 ;
7905: LD_ADDR_VAR 0 4
7909: PUSH
7910: LD_INT 10
7912: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7913: LD_ADDR_VAR 0 8
7917: PUSH
7918: LD_INT 81
7920: PUSH
7921: LD_VAR 0 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 92
7932: PUSH
7933: LD_VAR 0 2
7937: PUSH
7938: LD_VAR 0 3
7942: PUSH
7943: LD_VAR 0 4
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 3
7956: PUSH
7957: LD_INT 21
7959: PUSH
7960: LD_INT 3
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: PPUSH
7976: CALL_OW 69
7980: ST_TO_ADDR
// if not tmp then
7981: LD_VAR 0 8
7985: NOT
7986: IFFALSE 7990
// exit ;
7988: GO 9554
// for i in tmp do
7990: LD_ADDR_VAR 0 6
7994: PUSH
7995: LD_VAR 0 8
7999: PUSH
8000: FOR_IN
8001: IFFALSE 9529
// begin points := [ 0 , 0 , 0 ] ;
8003: LD_ADDR_VAR 0 9
8007: PUSH
8008: LD_INT 0
8010: PUSH
8011: LD_INT 0
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: ST_TO_ADDR
// bpoints := 1 ;
8022: LD_ADDR_VAR 0 10
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8030: LD_VAR 0 6
8034: PPUSH
8035: CALL_OW 247
8039: PUSH
8040: LD_INT 1
8042: DOUBLE
8043: EQUAL
8044: IFTRUE 8048
8046: GO 8630
8048: POP
// begin if GetClass ( i ) = 1 then
8049: LD_VAR 0 6
8053: PPUSH
8054: CALL_OW 257
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: IFFALSE 8083
// points := [ 10 , 5 , 3 ] ;
8064: LD_ADDR_VAR 0 9
8068: PUSH
8069: LD_INT 10
8071: PUSH
8072: LD_INT 5
8074: PUSH
8075: LD_INT 3
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8083: LD_VAR 0 6
8087: PPUSH
8088: CALL_OW 257
8092: PUSH
8093: LD_INT 2
8095: PUSH
8096: LD_INT 3
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: IN
8107: IFFALSE 8128
// points := [ 3 , 2 , 1 ] ;
8109: LD_ADDR_VAR 0 9
8113: PUSH
8114: LD_INT 3
8116: PUSH
8117: LD_INT 2
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8128: LD_VAR 0 6
8132: PPUSH
8133: CALL_OW 257
8137: PUSH
8138: LD_INT 5
8140: EQUAL
8141: IFFALSE 8162
// points := [ 130 , 5 , 2 ] ;
8143: LD_ADDR_VAR 0 9
8147: PUSH
8148: LD_INT 130
8150: PUSH
8151: LD_INT 5
8153: PUSH
8154: LD_INT 2
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8162: LD_VAR 0 6
8166: PPUSH
8167: CALL_OW 257
8171: PUSH
8172: LD_INT 8
8174: EQUAL
8175: IFFALSE 8196
// points := [ 35 , 35 , 30 ] ;
8177: LD_ADDR_VAR 0 9
8181: PUSH
8182: LD_INT 35
8184: PUSH
8185: LD_INT 35
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8196: LD_VAR 0 6
8200: PPUSH
8201: CALL_OW 257
8205: PUSH
8206: LD_INT 9
8208: EQUAL
8209: IFFALSE 8230
// points := [ 20 , 55 , 40 ] ;
8211: LD_ADDR_VAR 0 9
8215: PUSH
8216: LD_INT 20
8218: PUSH
8219: LD_INT 55
8221: PUSH
8222: LD_INT 40
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8230: LD_VAR 0 6
8234: PPUSH
8235: CALL_OW 257
8239: PUSH
8240: LD_INT 12
8242: PUSH
8243: LD_INT 16
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: IN
8250: IFFALSE 8271
// points := [ 5 , 3 , 2 ] ;
8252: LD_ADDR_VAR 0 9
8256: PUSH
8257: LD_INT 5
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8271: LD_VAR 0 6
8275: PPUSH
8276: CALL_OW 257
8280: PUSH
8281: LD_INT 17
8283: EQUAL
8284: IFFALSE 8305
// points := [ 100 , 50 , 75 ] ;
8286: LD_ADDR_VAR 0 9
8290: PUSH
8291: LD_INT 100
8293: PUSH
8294: LD_INT 50
8296: PUSH
8297: LD_INT 75
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8305: LD_VAR 0 6
8309: PPUSH
8310: CALL_OW 257
8314: PUSH
8315: LD_INT 15
8317: EQUAL
8318: IFFALSE 8339
// points := [ 10 , 5 , 3 ] ;
8320: LD_ADDR_VAR 0 9
8324: PUSH
8325: LD_INT 10
8327: PUSH
8328: LD_INT 5
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8339: LD_VAR 0 6
8343: PPUSH
8344: CALL_OW 257
8348: PUSH
8349: LD_INT 14
8351: EQUAL
8352: IFFALSE 8373
// points := [ 10 , 0 , 0 ] ;
8354: LD_ADDR_VAR 0 9
8358: PUSH
8359: LD_INT 10
8361: PUSH
8362: LD_INT 0
8364: PUSH
8365: LD_INT 0
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8373: LD_VAR 0 6
8377: PPUSH
8378: CALL_OW 257
8382: PUSH
8383: LD_INT 11
8385: EQUAL
8386: IFFALSE 8407
// points := [ 30 , 10 , 5 ] ;
8388: LD_ADDR_VAR 0 9
8392: PUSH
8393: LD_INT 30
8395: PUSH
8396: LD_INT 10
8398: PUSH
8399: LD_INT 5
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8407: LD_VAR 0 1
8411: PPUSH
8412: LD_INT 5
8414: PPUSH
8415: CALL_OW 321
8419: PUSH
8420: LD_INT 2
8422: EQUAL
8423: IFFALSE 8440
// bpoints := bpoints * 1.8 ;
8425: LD_ADDR_VAR 0 10
8429: PUSH
8430: LD_VAR 0 10
8434: PUSH
8435: LD_REAL  1.80000000000000E+0000
8438: MUL
8439: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8440: LD_VAR 0 6
8444: PPUSH
8445: CALL_OW 257
8449: PUSH
8450: LD_INT 1
8452: PUSH
8453: LD_INT 2
8455: PUSH
8456: LD_INT 3
8458: PUSH
8459: LD_INT 4
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: IN
8468: IFFALSE 8488
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_INT 51
8478: PPUSH
8479: CALL_OW 321
8483: PUSH
8484: LD_INT 2
8486: EQUAL
8487: AND
8488: IFFALSE 8505
// bpoints := bpoints * 1.2 ;
8490: LD_ADDR_VAR 0 10
8494: PUSH
8495: LD_VAR 0 10
8499: PUSH
8500: LD_REAL  1.20000000000000E+0000
8503: MUL
8504: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8505: LD_VAR 0 6
8509: PPUSH
8510: CALL_OW 257
8514: PUSH
8515: LD_INT 5
8517: PUSH
8518: LD_INT 7
8520: PUSH
8521: LD_INT 9
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: IN
8529: IFFALSE 8549
8531: PUSH
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_INT 52
8539: PPUSH
8540: CALL_OW 321
8544: PUSH
8545: LD_INT 2
8547: EQUAL
8548: AND
8549: IFFALSE 8566
// bpoints := bpoints * 1.5 ;
8551: LD_ADDR_VAR 0 10
8555: PUSH
8556: LD_VAR 0 10
8560: PUSH
8561: LD_REAL  1.50000000000000E+0000
8564: MUL
8565: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8566: LD_VAR 0 1
8570: PPUSH
8571: LD_INT 66
8573: PPUSH
8574: CALL_OW 321
8578: PUSH
8579: LD_INT 2
8581: EQUAL
8582: IFFALSE 8599
// bpoints := bpoints * 1.1 ;
8584: LD_ADDR_VAR 0 10
8588: PUSH
8589: LD_VAR 0 10
8593: PUSH
8594: LD_REAL  1.10000000000000E+0000
8597: MUL
8598: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8599: LD_ADDR_VAR 0 10
8603: PUSH
8604: LD_VAR 0 10
8608: PUSH
8609: LD_VAR 0 6
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: CALL_OW 259
8621: PUSH
8622: LD_REAL  1.15000000000000E+0000
8625: MUL
8626: MUL
8627: ST_TO_ADDR
// end ; unit_vehicle :
8628: GO 9458
8630: LD_INT 2
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 9446
8638: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8639: LD_VAR 0 6
8643: PPUSH
8644: CALL_OW 264
8648: PUSH
8649: LD_INT 2
8651: PUSH
8652: LD_INT 42
8654: PUSH
8655: LD_INT 24
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: LIST
8662: IN
8663: IFFALSE 8684
// points := [ 25 , 5 , 3 ] ;
8665: LD_ADDR_VAR 0 9
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8684: LD_VAR 0 6
8688: PPUSH
8689: CALL_OW 264
8693: PUSH
8694: LD_INT 4
8696: PUSH
8697: LD_INT 43
8699: PUSH
8700: LD_INT 25
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: IN
8708: IFFALSE 8729
// points := [ 40 , 15 , 5 ] ;
8710: LD_ADDR_VAR 0 9
8714: PUSH
8715: LD_INT 40
8717: PUSH
8718: LD_INT 15
8720: PUSH
8721: LD_INT 5
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8729: LD_VAR 0 6
8733: PPUSH
8734: CALL_OW 264
8738: PUSH
8739: LD_INT 3
8741: PUSH
8742: LD_INT 23
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: IN
8749: IFFALSE 8770
// points := [ 7 , 25 , 8 ] ;
8751: LD_ADDR_VAR 0 9
8755: PUSH
8756: LD_INT 7
8758: PUSH
8759: LD_INT 25
8761: PUSH
8762: LD_INT 8
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8770: LD_VAR 0 6
8774: PPUSH
8775: CALL_OW 264
8779: PUSH
8780: LD_INT 5
8782: PUSH
8783: LD_INT 27
8785: PUSH
8786: LD_INT 44
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: LIST
8793: IN
8794: IFFALSE 8815
// points := [ 14 , 50 , 16 ] ;
8796: LD_ADDR_VAR 0 9
8800: PUSH
8801: LD_INT 14
8803: PUSH
8804: LD_INT 50
8806: PUSH
8807: LD_INT 16
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8815: LD_VAR 0 6
8819: PPUSH
8820: CALL_OW 264
8824: PUSH
8825: LD_INT 6
8827: PUSH
8828: LD_INT 46
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: IN
8835: IFFALSE 8856
// points := [ 32 , 120 , 70 ] ;
8837: LD_ADDR_VAR 0 9
8841: PUSH
8842: LD_INT 32
8844: PUSH
8845: LD_INT 120
8847: PUSH
8848: LD_INT 70
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: LIST
8855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8856: LD_VAR 0 6
8860: PPUSH
8861: CALL_OW 264
8865: PUSH
8866: LD_INT 7
8868: PUSH
8869: LD_INT 28
8871: PUSH
8872: LD_INT 45
8874: PUSH
8875: LD_INT 92
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: IN
8884: IFFALSE 8905
// points := [ 35 , 20 , 45 ] ;
8886: LD_ADDR_VAR 0 9
8890: PUSH
8891: LD_INT 35
8893: PUSH
8894: LD_INT 20
8896: PUSH
8897: LD_INT 45
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8905: LD_VAR 0 6
8909: PPUSH
8910: CALL_OW 264
8914: PUSH
8915: LD_INT 47
8917: PUSH
8918: EMPTY
8919: LIST
8920: IN
8921: IFFALSE 8942
// points := [ 67 , 45 , 75 ] ;
8923: LD_ADDR_VAR 0 9
8927: PUSH
8928: LD_INT 67
8930: PUSH
8931: LD_INT 45
8933: PUSH
8934: LD_INT 75
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8942: LD_VAR 0 6
8946: PPUSH
8947: CALL_OW 264
8951: PUSH
8952: LD_INT 26
8954: PUSH
8955: EMPTY
8956: LIST
8957: IN
8958: IFFALSE 8979
// points := [ 120 , 30 , 80 ] ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_INT 120
8967: PUSH
8968: LD_INT 30
8970: PUSH
8971: LD_INT 80
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8979: LD_VAR 0 6
8983: PPUSH
8984: CALL_OW 264
8988: PUSH
8989: LD_INT 22
8991: PUSH
8992: EMPTY
8993: LIST
8994: IN
8995: IFFALSE 9016
// points := [ 40 , 1 , 1 ] ;
8997: LD_ADDR_VAR 0 9
9001: PUSH
9002: LD_INT 40
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: LD_INT 1
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9016: LD_VAR 0 6
9020: PPUSH
9021: CALL_OW 264
9025: PUSH
9026: LD_INT 29
9028: PUSH
9029: EMPTY
9030: LIST
9031: IN
9032: IFFALSE 9053
// points := [ 70 , 200 , 400 ] ;
9034: LD_ADDR_VAR 0 9
9038: PUSH
9039: LD_INT 70
9041: PUSH
9042: LD_INT 200
9044: PUSH
9045: LD_INT 400
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9053: LD_VAR 0 6
9057: PPUSH
9058: CALL_OW 264
9062: PUSH
9063: LD_INT 14
9065: PUSH
9066: LD_INT 53
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: IN
9073: IFFALSE 9094
// points := [ 40 , 10 , 20 ] ;
9075: LD_ADDR_VAR 0 9
9079: PUSH
9080: LD_INT 40
9082: PUSH
9083: LD_INT 10
9085: PUSH
9086: LD_INT 20
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9094: LD_VAR 0 6
9098: PPUSH
9099: CALL_OW 264
9103: PUSH
9104: LD_INT 9
9106: PUSH
9107: EMPTY
9108: LIST
9109: IN
9110: IFFALSE 9131
// points := [ 5 , 70 , 20 ] ;
9112: LD_ADDR_VAR 0 9
9116: PUSH
9117: LD_INT 5
9119: PUSH
9120: LD_INT 70
9122: PUSH
9123: LD_INT 20
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9131: LD_VAR 0 6
9135: PPUSH
9136: CALL_OW 264
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: IN
9147: IFFALSE 9168
// points := [ 35 , 110 , 70 ] ;
9149: LD_ADDR_VAR 0 9
9153: PUSH
9154: LD_INT 35
9156: PUSH
9157: LD_INT 110
9159: PUSH
9160: LD_INT 70
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9168: LD_VAR 0 6
9172: PPUSH
9173: CALL_OW 265
9177: PUSH
9178: LD_INT 25
9180: EQUAL
9181: IFFALSE 9202
// points := [ 80 , 65 , 100 ] ;
9183: LD_ADDR_VAR 0 9
9187: PUSH
9188: LD_INT 80
9190: PUSH
9191: LD_INT 65
9193: PUSH
9194: LD_INT 100
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9202: LD_VAR 0 6
9206: PPUSH
9207: CALL_OW 263
9211: PUSH
9212: LD_INT 1
9214: EQUAL
9215: IFFALSE 9250
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9217: LD_ADDR_VAR 0 10
9221: PUSH
9222: LD_VAR 0 10
9226: PUSH
9227: LD_VAR 0 6
9231: PPUSH
9232: CALL_OW 311
9236: PPUSH
9237: LD_INT 3
9239: PPUSH
9240: CALL_OW 259
9244: PUSH
9245: LD_INT 4
9247: MUL
9248: MUL
9249: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9250: LD_VAR 0 6
9254: PPUSH
9255: CALL_OW 263
9259: PUSH
9260: LD_INT 2
9262: EQUAL
9263: IFFALSE 9314
// begin j := IsControledBy ( i ) ;
9265: LD_ADDR_VAR 0 7
9269: PUSH
9270: LD_VAR 0 6
9274: PPUSH
9275: CALL_OW 312
9279: ST_TO_ADDR
// if j then
9280: LD_VAR 0 7
9284: IFFALSE 9314
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9286: LD_ADDR_VAR 0 10
9290: PUSH
9291: LD_VAR 0 10
9295: PUSH
9296: LD_VAR 0 7
9300: PPUSH
9301: LD_INT 3
9303: PPUSH
9304: CALL_OW 259
9308: PUSH
9309: LD_INT 3
9311: MUL
9312: MUL
9313: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9314: LD_VAR 0 6
9318: PPUSH
9319: CALL_OW 264
9323: PUSH
9324: LD_INT 5
9326: PUSH
9327: LD_INT 6
9329: PUSH
9330: LD_INT 46
9332: PUSH
9333: LD_INT 44
9335: PUSH
9336: LD_INT 47
9338: PUSH
9339: LD_INT 45
9341: PUSH
9342: LD_INT 28
9344: PUSH
9345: LD_INT 7
9347: PUSH
9348: LD_INT 27
9350: PUSH
9351: LD_INT 29
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: IN
9366: IFFALSE 9386
9368: PUSH
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 52
9376: PPUSH
9377: CALL_OW 321
9381: PUSH
9382: LD_INT 2
9384: EQUAL
9385: AND
9386: IFFALSE 9403
// bpoints := bpoints * 1.2 ;
9388: LD_ADDR_VAR 0 10
9392: PUSH
9393: LD_VAR 0 10
9397: PUSH
9398: LD_REAL  1.20000000000000E+0000
9401: MUL
9402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9403: LD_VAR 0 6
9407: PPUSH
9408: CALL_OW 264
9412: PUSH
9413: LD_INT 6
9415: PUSH
9416: LD_INT 46
9418: PUSH
9419: LD_INT 47
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: IN
9427: IFFALSE 9444
// bpoints := bpoints * 1.2 ;
9429: LD_ADDR_VAR 0 10
9433: PUSH
9434: LD_VAR 0 10
9438: PUSH
9439: LD_REAL  1.20000000000000E+0000
9442: MUL
9443: ST_TO_ADDR
// end ; unit_building :
9444: GO 9458
9446: LD_INT 3
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9457
9454: POP
// ; end ;
9455: GO 9458
9457: POP
// for j = 1 to 3 do
9458: LD_ADDR_VAR 0 7
9462: PUSH
9463: DOUBLE
9464: LD_INT 1
9466: DEC
9467: ST_TO_ADDR
9468: LD_INT 3
9470: PUSH
9471: FOR_TO
9472: IFFALSE 9525
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9474: LD_ADDR_VAR 0 5
9478: PUSH
9479: LD_VAR 0 5
9483: PPUSH
9484: LD_VAR 0 7
9488: PPUSH
9489: LD_VAR 0 5
9493: PUSH
9494: LD_VAR 0 7
9498: ARRAY
9499: PUSH
9500: LD_VAR 0 9
9504: PUSH
9505: LD_VAR 0 7
9509: ARRAY
9510: PUSH
9511: LD_VAR 0 10
9515: MUL
9516: PLUS
9517: PPUSH
9518: CALL_OW 1
9522: ST_TO_ADDR
9523: GO 9471
9525: POP
9526: POP
// end ;
9527: GO 8000
9529: POP
9530: POP
// result := Replace ( result , 4 , tmp ) ;
9531: LD_ADDR_VAR 0 5
9535: PUSH
9536: LD_VAR 0 5
9540: PPUSH
9541: LD_INT 4
9543: PPUSH
9544: LD_VAR 0 8
9548: PPUSH
9549: CALL_OW 1
9553: ST_TO_ADDR
// end ;
9554: LD_VAR 0 5
9558: RET
// export function DangerAtRange ( unit , range ) ; begin
9559: LD_INT 0
9561: PPUSH
// if not unit then
9562: LD_VAR 0 1
9566: NOT
9567: IFFALSE 9571
// exit ;
9569: GO 9616
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 255
9585: PPUSH
9586: LD_VAR 0 1
9590: PPUSH
9591: CALL_OW 250
9595: PPUSH
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL_OW 251
9605: PPUSH
9606: LD_VAR 0 2
9610: PPUSH
9611: CALL 7850 0 4
9615: ST_TO_ADDR
// end ;
9616: LD_VAR 0 3
9620: RET
// export function DangerInArea ( side , area ) ; begin
9621: LD_INT 0
9623: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9624: LD_ADDR_VAR 0 3
9628: PUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: LD_INT 81
9636: PUSH
9637: LD_VAR 0 1
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PPUSH
9646: CALL_OW 70
9650: ST_TO_ADDR
// end ;
9651: LD_VAR 0 3
9655: RET
// export function IsExtension ( b ) ; begin
9656: LD_INT 0
9658: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9659: LD_ADDR_VAR 0 2
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: LD_INT 23
9671: PUSH
9672: LD_INT 20
9674: PUSH
9675: LD_INT 22
9677: PUSH
9678: LD_INT 17
9680: PUSH
9681: LD_INT 24
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 19
9689: PUSH
9690: LD_INT 16
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 18
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: IN
9711: ST_TO_ADDR
// end ;
9712: LD_VAR 0 2
9716: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9717: LD_INT 0
9719: PPUSH
9720: PPUSH
9721: PPUSH
// result := [ ] ;
9722: LD_ADDR_VAR 0 4
9726: PUSH
9727: EMPTY
9728: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9729: LD_ADDR_VAR 0 5
9733: PUSH
9734: LD_VAR 0 2
9738: PPUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 3
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PPUSH
9749: CALL_OW 70
9753: ST_TO_ADDR
// if not tmp then
9754: LD_VAR 0 5
9758: NOT
9759: IFFALSE 9763
// exit ;
9761: GO 9827
// if checkLink then
9763: LD_VAR 0 3
9767: IFFALSE 9817
// begin for i in tmp do
9769: LD_ADDR_VAR 0 6
9773: PUSH
9774: LD_VAR 0 5
9778: PUSH
9779: FOR_IN
9780: IFFALSE 9815
// if GetBase ( i ) <> base then
9782: LD_VAR 0 6
9786: PPUSH
9787: CALL_OW 274
9791: PUSH
9792: LD_VAR 0 1
9796: NONEQUAL
9797: IFFALSE 9813
// ComLinkToBase ( base , i ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_VAR 0 6
9808: PPUSH
9809: CALL_OW 169
9813: GO 9779
9815: POP
9816: POP
// end ; result := tmp ;
9817: LD_ADDR_VAR 0 4
9821: PUSH
9822: LD_VAR 0 5
9826: ST_TO_ADDR
// end ;
9827: LD_VAR 0 4
9831: RET
// export function ComComplete ( units , b ) ; var i ; begin
9832: LD_INT 0
9834: PPUSH
9835: PPUSH
// if not units then
9836: LD_VAR 0 1
9840: NOT
9841: IFFALSE 9845
// exit ;
9843: GO 9935
// for i in units do
9845: LD_ADDR_VAR 0 4
9849: PUSH
9850: LD_VAR 0 1
9854: PUSH
9855: FOR_IN
9856: IFFALSE 9933
// if BuildingStatus ( b ) = bs_build then
9858: LD_VAR 0 2
9862: PPUSH
9863: CALL_OW 461
9867: PUSH
9868: LD_INT 1
9870: EQUAL
9871: IFFALSE 9931
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9873: LD_VAR 0 4
9877: PPUSH
9878: LD_STRING h
9880: PUSH
9881: LD_VAR 0 2
9885: PPUSH
9886: CALL_OW 250
9890: PUSH
9891: LD_VAR 0 2
9895: PPUSH
9896: CALL_OW 251
9900: PUSH
9901: LD_VAR 0 2
9905: PUSH
9906: LD_INT 0
9908: PUSH
9909: LD_INT 0
9911: PUSH
9912: LD_INT 0
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: PPUSH
9927: CALL_OW 446
9931: GO 9855
9933: POP
9934: POP
// end ;
9935: LD_VAR 0 3
9939: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9940: LD_INT 0
9942: PPUSH
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
9947: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9948: LD_VAR 0 1
9952: NOT
9953: IFTRUE 9970
9955: PUSH
9956: LD_VAR 0 1
9960: PPUSH
9961: CALL_OW 263
9965: PUSH
9966: LD_INT 2
9968: NONEQUAL
9969: OR
9970: IFFALSE 9974
// exit ;
9972: GO 10290
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9974: LD_ADDR_VAR 0 6
9978: PUSH
9979: LD_INT 22
9981: PUSH
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 2
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 36
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 34
10011: PUSH
10012: LD_INT 31
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: ST_TO_ADDR
// if not tmp then
10033: LD_VAR 0 6
10037: NOT
10038: IFFALSE 10042
// exit ;
10040: GO 10290
// result := [ ] ;
10042: LD_ADDR_VAR 0 2
10046: PUSH
10047: EMPTY
10048: ST_TO_ADDR
// for i in tmp do
10049: LD_ADDR_VAR 0 3
10053: PUSH
10054: LD_VAR 0 6
10058: PUSH
10059: FOR_IN
10060: IFFALSE 10131
// begin t := UnitsInside ( i ) ;
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: CALL_OW 313
10076: ST_TO_ADDR
// if t then
10077: LD_VAR 0 4
10081: IFFALSE 10129
// for j in t do
10083: LD_ADDR_VAR 0 7
10087: PUSH
10088: LD_VAR 0 4
10092: PUSH
10093: FOR_IN
10094: IFFALSE 10127
// result := Replace ( result , result + 1 , j ) ;
10096: LD_ADDR_VAR 0 2
10100: PUSH
10101: LD_VAR 0 2
10105: PPUSH
10106: LD_VAR 0 2
10110: PUSH
10111: LD_INT 1
10113: PLUS
10114: PPUSH
10115: LD_VAR 0 7
10119: PPUSH
10120: CALL_OW 1
10124: ST_TO_ADDR
10125: GO 10093
10127: POP
10128: POP
// end ;
10129: GO 10059
10131: POP
10132: POP
// if not result then
10133: LD_VAR 0 2
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10290
// mech := result [ 1 ] ;
10142: LD_ADDR_VAR 0 5
10146: PUSH
10147: LD_VAR 0 2
10151: PUSH
10152: LD_INT 1
10154: ARRAY
10155: ST_TO_ADDR
// if result > 1 then
10156: LD_VAR 0 2
10160: PUSH
10161: LD_INT 1
10163: GREATER
10164: IFFALSE 10276
// begin for i = 2 to result do
10166: LD_ADDR_VAR 0 3
10170: PUSH
10171: DOUBLE
10172: LD_INT 2
10174: DEC
10175: ST_TO_ADDR
10176: LD_VAR 0 2
10180: PUSH
10181: FOR_TO
10182: IFFALSE 10274
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10184: LD_ADDR_VAR 0 4
10188: PUSH
10189: LD_VAR 0 2
10193: PUSH
10194: LD_VAR 0 3
10198: ARRAY
10199: PPUSH
10200: LD_INT 3
10202: PPUSH
10203: CALL_OW 259
10207: PUSH
10208: LD_VAR 0 2
10212: PUSH
10213: LD_VAR 0 3
10217: ARRAY
10218: PPUSH
10219: CALL_OW 432
10223: MINUS
10224: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10225: LD_VAR 0 4
10229: PUSH
10230: LD_VAR 0 5
10234: PPUSH
10235: LD_INT 3
10237: PPUSH
10238: CALL_OW 259
10242: PUSH
10243: LD_VAR 0 5
10247: PPUSH
10248: CALL_OW 432
10252: MINUS
10253: GREATEREQUAL
10254: IFFALSE 10272
// mech := result [ i ] ;
10256: LD_ADDR_VAR 0 5
10260: PUSH
10261: LD_VAR 0 2
10265: PUSH
10266: LD_VAR 0 3
10270: ARRAY
10271: ST_TO_ADDR
// end ;
10272: GO 10181
10274: POP
10275: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10276: LD_VAR 0 1
10280: PPUSH
10281: LD_VAR 0 5
10285: PPUSH
10286: CALL_OW 135
// end ;
10290: LD_VAR 0 2
10294: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10295: LD_INT 0
10297: PPUSH
10298: PPUSH
10299: PPUSH
10300: PPUSH
10301: PPUSH
10302: PPUSH
10303: PPUSH
10304: PPUSH
10305: PPUSH
10306: PPUSH
10307: PPUSH
10308: PPUSH
10309: PPUSH
// result := [ ] ;
10310: LD_ADDR_VAR 0 7
10314: PUSH
10315: EMPTY
10316: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10317: LD_VAR 0 1
10321: PPUSH
10322: CALL_OW 266
10326: PUSH
10327: LD_INT 0
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: IN
10337: NOT
10338: IFFALSE 10342
// exit ;
10340: GO 11982
// if name then
10342: LD_VAR 0 3
10346: IFFALSE 10362
// SetBName ( base_dep , name ) ;
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_VAR 0 3
10357: PPUSH
10358: CALL_OW 500
// base := GetBase ( base_dep ) ;
10362: LD_ADDR_VAR 0 15
10366: PUSH
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL_OW 274
10376: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10377: LD_ADDR_VAR 0 16
10381: PUSH
10382: LD_VAR 0 1
10386: PPUSH
10387: CALL_OW 255
10391: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10392: LD_ADDR_VAR 0 17
10396: PUSH
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 248
10406: ST_TO_ADDR
// if sources then
10407: LD_VAR 0 5
10411: IFFALSE 10458
// for i = 1 to 3 do
10413: LD_ADDR_VAR 0 8
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_INT 3
10425: PUSH
10426: FOR_TO
10427: IFFALSE 10456
// AddResourceType ( base , i , sources [ i ] ) ;
10429: LD_VAR 0 15
10433: PPUSH
10434: LD_VAR 0 8
10438: PPUSH
10439: LD_VAR 0 5
10443: PUSH
10444: LD_VAR 0 8
10448: ARRAY
10449: PPUSH
10450: CALL_OW 276
10454: GO 10426
10456: POP
10457: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10458: LD_ADDR_VAR 0 18
10462: PUSH
10463: LD_VAR 0 15
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: CALL 9717 0 3
10480: ST_TO_ADDR
// InitHc ;
10481: CALL_OW 19
// InitUc ;
10485: CALL_OW 18
// uc_side := side ;
10489: LD_ADDR_OWVAR 20
10493: PUSH
10494: LD_VAR 0 16
10498: ST_TO_ADDR
// uc_nation := nation ;
10499: LD_ADDR_OWVAR 21
10503: PUSH
10504: LD_VAR 0 17
10508: ST_TO_ADDR
// if buildings then
10509: LD_VAR 0 18
10513: IFFALSE 11841
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10515: LD_ADDR_VAR 0 19
10519: PUSH
10520: LD_VAR 0 18
10524: PPUSH
10525: LD_INT 2
10527: PUSH
10528: LD_INT 30
10530: PUSH
10531: LD_INT 29
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 30
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: PPUSH
10553: CALL_OW 72
10557: ST_TO_ADDR
// if tmp then
10558: LD_VAR 0 19
10562: IFFALSE 10610
// for i in tmp do
10564: LD_ADDR_VAR 0 8
10568: PUSH
10569: LD_VAR 0 19
10573: PUSH
10574: FOR_IN
10575: IFFALSE 10608
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10577: LD_VAR 0 8
10581: PPUSH
10582: CALL_OW 250
10586: PPUSH
10587: LD_VAR 0 8
10591: PPUSH
10592: CALL_OW 251
10596: PPUSH
10597: LD_VAR 0 16
10601: PPUSH
10602: CALL_OW 441
10606: GO 10574
10608: POP
10609: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10610: LD_VAR 0 18
10614: PPUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 32
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: LD_INT 33
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 72
10647: IFFALSE 10735
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10649: LD_ADDR_VAR 0 8
10653: PUSH
10654: LD_VAR 0 18
10658: PPUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 30
10664: PUSH
10665: LD_INT 32
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 30
10674: PUSH
10675: LD_INT 33
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PPUSH
10687: CALL_OW 72
10691: PUSH
10692: FOR_IN
10693: IFFALSE 10733
// begin if not GetBWeapon ( i ) then
10695: LD_VAR 0 8
10699: PPUSH
10700: CALL_OW 269
10704: NOT
10705: IFFALSE 10731
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10707: LD_VAR 0 8
10711: PPUSH
10712: LD_VAR 0 8
10716: PPUSH
10717: LD_VAR 0 2
10721: PPUSH
10722: CALL 11987 0 2
10726: PPUSH
10727: CALL_OW 431
// end ;
10731: GO 10692
10733: POP
10734: POP
// end ; for i = 1 to personel do
10735: LD_ADDR_VAR 0 8
10739: PUSH
10740: DOUBLE
10741: LD_INT 1
10743: DEC
10744: ST_TO_ADDR
10745: LD_VAR 0 6
10749: PUSH
10750: FOR_TO
10751: IFFALSE 11821
// begin if i > 4 then
10753: LD_VAR 0 8
10757: PUSH
10758: LD_INT 4
10760: GREATER
10761: IFFALSE 10765
// break ;
10763: GO 11821
// case i of 1 :
10765: LD_VAR 0 8
10769: PUSH
10770: LD_INT 1
10772: DOUBLE
10773: EQUAL
10774: IFTRUE 10778
10776: GO 10858
10778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10779: LD_ADDR_VAR 0 12
10783: PUSH
10784: LD_VAR 0 18
10788: PPUSH
10789: LD_INT 22
10791: PUSH
10792: LD_VAR 0 16
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 58
10803: PUSH
10804: EMPTY
10805: LIST
10806: PUSH
10807: LD_INT 2
10809: PUSH
10810: LD_INT 30
10812: PUSH
10813: LD_INT 32
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 30
10822: PUSH
10823: LD_INT 4
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 30
10832: PUSH
10833: LD_INT 5
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 72
10855: ST_TO_ADDR
10856: GO 11080
10858: LD_INT 2
10860: DOUBLE
10861: EQUAL
10862: IFTRUE 10866
10864: GO 10928
10866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10867: LD_ADDR_VAR 0 12
10871: PUSH
10872: LD_VAR 0 18
10876: PPUSH
10877: LD_INT 22
10879: PUSH
10880: LD_VAR 0 16
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 30
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 30
10904: PUSH
10905: LD_INT 1
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 72
10925: ST_TO_ADDR
10926: GO 11080
10928: LD_INT 3
10930: DOUBLE
10931: EQUAL
10932: IFTRUE 10936
10934: GO 10998
10936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10937: LD_ADDR_VAR 0 12
10941: PUSH
10942: LD_VAR 0 18
10946: PPUSH
10947: LD_INT 22
10949: PUSH
10950: LD_VAR 0 16
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 2
10961: PUSH
10962: LD_INT 30
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 30
10974: PUSH
10975: LD_INT 3
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL_OW 72
10995: ST_TO_ADDR
10996: GO 11080
10998: LD_INT 4
11000: DOUBLE
11001: EQUAL
11002: IFTRUE 11006
11004: GO 11079
11006: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11007: LD_ADDR_VAR 0 12
11011: PUSH
11012: LD_VAR 0 18
11016: PPUSH
11017: LD_INT 22
11019: PUSH
11020: LD_VAR 0 16
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 2
11031: PUSH
11032: LD_INT 30
11034: PUSH
11035: LD_INT 6
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 30
11044: PUSH
11045: LD_INT 7
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 30
11054: PUSH
11055: LD_INT 8
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 72
11076: ST_TO_ADDR
11077: GO 11080
11079: POP
// if i = 1 then
11080: LD_VAR 0 8
11084: PUSH
11085: LD_INT 1
11087: EQUAL
11088: IFFALSE 11199
// begin tmp := [ ] ;
11090: LD_ADDR_VAR 0 19
11094: PUSH
11095: EMPTY
11096: ST_TO_ADDR
// for j in f do
11097: LD_ADDR_VAR 0 9
11101: PUSH
11102: LD_VAR 0 12
11106: PUSH
11107: FOR_IN
11108: IFFALSE 11181
// if GetBType ( j ) = b_bunker then
11110: LD_VAR 0 9
11114: PPUSH
11115: CALL_OW 266
11119: PUSH
11120: LD_INT 32
11122: EQUAL
11123: IFFALSE 11150
// tmp := Insert ( tmp , 1 , j ) else
11125: LD_ADDR_VAR 0 19
11129: PUSH
11130: LD_VAR 0 19
11134: PPUSH
11135: LD_INT 1
11137: PPUSH
11138: LD_VAR 0 9
11142: PPUSH
11143: CALL_OW 2
11147: ST_TO_ADDR
11148: GO 11179
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11150: LD_ADDR_VAR 0 19
11154: PUSH
11155: LD_VAR 0 19
11159: PPUSH
11160: LD_VAR 0 19
11164: PUSH
11165: LD_INT 1
11167: PLUS
11168: PPUSH
11169: LD_VAR 0 9
11173: PPUSH
11174: CALL_OW 2
11178: ST_TO_ADDR
11179: GO 11107
11181: POP
11182: POP
// if tmp then
11183: LD_VAR 0 19
11187: IFFALSE 11199
// f := tmp ;
11189: LD_ADDR_VAR 0 12
11193: PUSH
11194: LD_VAR 0 19
11198: ST_TO_ADDR
// end ; x := personel [ i ] ;
11199: LD_ADDR_VAR 0 13
11203: PUSH
11204: LD_VAR 0 6
11208: PUSH
11209: LD_VAR 0 8
11213: ARRAY
11214: ST_TO_ADDR
// if x = - 1 then
11215: LD_VAR 0 13
11219: PUSH
11220: LD_INT 1
11222: NEG
11223: EQUAL
11224: IFFALSE 11435
// begin for j in f do
11226: LD_ADDR_VAR 0 9
11230: PUSH
11231: LD_VAR 0 12
11235: PUSH
11236: FOR_IN
11237: IFFALSE 11431
// repeat InitHc ;
11239: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11243: LD_VAR 0 9
11247: PPUSH
11248: CALL_OW 266
11252: PUSH
11253: LD_INT 5
11255: EQUAL
11256: IFFALSE 11326
// begin if UnitsInside ( j ) < 3 then
11258: LD_VAR 0 9
11262: PPUSH
11263: CALL_OW 313
11267: PUSH
11268: LD_INT 3
11270: LESS
11271: IFFALSE 11307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11273: LD_INT 0
11275: PPUSH
11276: LD_INT 5
11278: PUSH
11279: LD_INT 8
11281: PUSH
11282: LD_INT 9
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_VAR 0 17
11294: ARRAY
11295: PPUSH
11296: LD_VAR 0 4
11300: PPUSH
11301: CALL_OW 380
11305: GO 11324
// PrepareHuman ( false , i , skill ) ;
11307: LD_INT 0
11309: PPUSH
11310: LD_VAR 0 8
11314: PPUSH
11315: LD_VAR 0 4
11319: PPUSH
11320: CALL_OW 380
// end else
11324: GO 11343
// PrepareHuman ( false , i , skill ) ;
11326: LD_INT 0
11328: PPUSH
11329: LD_VAR 0 8
11333: PPUSH
11334: LD_VAR 0 4
11338: PPUSH
11339: CALL_OW 380
// un := CreateHuman ;
11343: LD_ADDR_VAR 0 14
11347: PUSH
11348: CALL_OW 44
11352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11353: LD_ADDR_VAR 0 7
11357: PUSH
11358: LD_VAR 0 7
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: LD_VAR 0 14
11370: PPUSH
11371: CALL_OW 2
11375: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11376: LD_VAR 0 14
11380: PPUSH
11381: LD_VAR 0 9
11385: PPUSH
11386: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11390: LD_VAR 0 9
11394: PPUSH
11395: CALL_OW 313
11399: PUSH
11400: LD_INT 6
11402: EQUAL
11403: IFTRUE 11427
11405: PUSH
11406: LD_VAR 0 9
11410: PPUSH
11411: CALL_OW 266
11415: PUSH
11416: LD_INT 32
11418: PUSH
11419: LD_INT 31
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: IN
11426: OR
11427: IFFALSE 11239
11429: GO 11236
11431: POP
11432: POP
// end else
11433: GO 11819
// for j = 1 to x do
11435: LD_ADDR_VAR 0 9
11439: PUSH
11440: DOUBLE
11441: LD_INT 1
11443: DEC
11444: ST_TO_ADDR
11445: LD_VAR 0 13
11449: PUSH
11450: FOR_TO
11451: IFFALSE 11817
// begin InitHc ;
11453: CALL_OW 19
// if not f then
11457: LD_VAR 0 12
11461: NOT
11462: IFFALSE 11551
// begin PrepareHuman ( false , i , skill ) ;
11464: LD_INT 0
11466: PPUSH
11467: LD_VAR 0 8
11471: PPUSH
11472: LD_VAR 0 4
11476: PPUSH
11477: CALL_OW 380
// un := CreateHuman ;
11481: LD_ADDR_VAR 0 14
11485: PUSH
11486: CALL_OW 44
11490: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11491: LD_ADDR_VAR 0 7
11495: PUSH
11496: LD_VAR 0 7
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_VAR 0 14
11508: PPUSH
11509: CALL_OW 2
11513: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11514: LD_VAR 0 14
11518: PPUSH
11519: LD_VAR 0 1
11523: PPUSH
11524: CALL_OW 250
11528: PPUSH
11529: LD_VAR 0 1
11533: PPUSH
11534: CALL_OW 251
11538: PPUSH
11539: LD_INT 10
11541: PPUSH
11542: LD_INT 0
11544: PPUSH
11545: CALL_OW 50
// continue ;
11549: GO 11450
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11551: LD_VAR 0 12
11555: PUSH
11556: LD_INT 1
11558: ARRAY
11559: PPUSH
11560: CALL_OW 313
11564: IFFALSE 11592
11566: PUSH
11567: LD_VAR 0 12
11571: PUSH
11572: LD_INT 1
11574: ARRAY
11575: PPUSH
11576: CALL_OW 266
11580: PUSH
11581: LD_INT 32
11583: PUSH
11584: LD_INT 31
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: IN
11591: AND
11592: IFTRUE 11613
11594: PUSH
11595: LD_VAR 0 12
11599: PUSH
11600: LD_INT 1
11602: ARRAY
11603: PPUSH
11604: CALL_OW 313
11608: PUSH
11609: LD_INT 6
11611: EQUAL
11612: OR
11613: IFFALSE 11633
// f := Delete ( f , 1 ) ;
11615: LD_ADDR_VAR 0 12
11619: PUSH
11620: LD_VAR 0 12
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 3
11632: ST_TO_ADDR
// if not f then
11633: LD_VAR 0 12
11637: NOT
11638: IFFALSE 11656
// begin x := x + 2 ;
11640: LD_ADDR_VAR 0 13
11644: PUSH
11645: LD_VAR 0 13
11649: PUSH
11650: LD_INT 2
11652: PLUS
11653: ST_TO_ADDR
// continue ;
11654: GO 11450
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11656: LD_VAR 0 12
11660: PUSH
11661: LD_INT 1
11663: ARRAY
11664: PPUSH
11665: CALL_OW 266
11669: PUSH
11670: LD_INT 5
11672: EQUAL
11673: IFFALSE 11747
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11675: LD_VAR 0 12
11679: PUSH
11680: LD_INT 1
11682: ARRAY
11683: PPUSH
11684: CALL_OW 313
11688: PUSH
11689: LD_INT 3
11691: LESS
11692: IFFALSE 11728
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11694: LD_INT 0
11696: PPUSH
11697: LD_INT 5
11699: PUSH
11700: LD_INT 8
11702: PUSH
11703: LD_INT 9
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: LD_VAR 0 17
11715: ARRAY
11716: PPUSH
11717: LD_VAR 0 4
11721: PPUSH
11722: CALL_OW 380
11726: GO 11745
// PrepareHuman ( false , i , skill ) ;
11728: LD_INT 0
11730: PPUSH
11731: LD_VAR 0 8
11735: PPUSH
11736: LD_VAR 0 4
11740: PPUSH
11741: CALL_OW 380
// end else
11745: GO 11764
// PrepareHuman ( false , i , skill ) ;
11747: LD_INT 0
11749: PPUSH
11750: LD_VAR 0 8
11754: PPUSH
11755: LD_VAR 0 4
11759: PPUSH
11760: CALL_OW 380
// un := CreateHuman ;
11764: LD_ADDR_VAR 0 14
11768: PUSH
11769: CALL_OW 44
11773: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11774: LD_ADDR_VAR 0 7
11778: PUSH
11779: LD_VAR 0 7
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: LD_VAR 0 14
11791: PPUSH
11792: CALL_OW 2
11796: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11797: LD_VAR 0 14
11801: PPUSH
11802: LD_VAR 0 12
11806: PUSH
11807: LD_INT 1
11809: ARRAY
11810: PPUSH
11811: CALL_OW 52
// end ;
11815: GO 11450
11817: POP
11818: POP
// end ;
11819: GO 10750
11821: POP
11822: POP
// result := result ^ buildings ;
11823: LD_ADDR_VAR 0 7
11827: PUSH
11828: LD_VAR 0 7
11832: PUSH
11833: LD_VAR 0 18
11837: ADD
11838: ST_TO_ADDR
// end else
11839: GO 11982
// begin for i = 1 to personel do
11841: LD_ADDR_VAR 0 8
11845: PUSH
11846: DOUBLE
11847: LD_INT 1
11849: DEC
11850: ST_TO_ADDR
11851: LD_VAR 0 6
11855: PUSH
11856: FOR_TO
11857: IFFALSE 11980
// begin if i > 4 then
11859: LD_VAR 0 8
11863: PUSH
11864: LD_INT 4
11866: GREATER
11867: IFFALSE 11871
// break ;
11869: GO 11980
// x := personel [ i ] ;
11871: LD_ADDR_VAR 0 13
11875: PUSH
11876: LD_VAR 0 6
11880: PUSH
11881: LD_VAR 0 8
11885: ARRAY
11886: ST_TO_ADDR
// if x = - 1 then
11887: LD_VAR 0 13
11891: PUSH
11892: LD_INT 1
11894: NEG
11895: EQUAL
11896: IFFALSE 11900
// continue ;
11898: GO 11856
// PrepareHuman ( false , i , skill ) ;
11900: LD_INT 0
11902: PPUSH
11903: LD_VAR 0 8
11907: PPUSH
11908: LD_VAR 0 4
11912: PPUSH
11913: CALL_OW 380
// un := CreateHuman ;
11917: LD_ADDR_VAR 0 14
11921: PUSH
11922: CALL_OW 44
11926: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11927: LD_VAR 0 14
11931: PPUSH
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 250
11941: PPUSH
11942: LD_VAR 0 1
11946: PPUSH
11947: CALL_OW 251
11951: PPUSH
11952: LD_INT 10
11954: PPUSH
11955: LD_INT 0
11957: PPUSH
11958: CALL_OW 50
// result := result ^ un ;
11962: LD_ADDR_VAR 0 7
11966: PUSH
11967: LD_VAR 0 7
11971: PUSH
11972: LD_VAR 0 14
11976: ADD
11977: ST_TO_ADDR
// end ;
11978: GO 11856
11980: POP
11981: POP
// end ; end ;
11982: LD_VAR 0 7
11986: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11987: LD_INT 0
11989: PPUSH
11990: PPUSH
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
11995: PPUSH
11996: PPUSH
11997: PPUSH
11998: PPUSH
11999: PPUSH
12000: PPUSH
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
// result := false ;
12005: LD_ADDR_VAR 0 3
12009: PUSH
12010: LD_INT 0
12012: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12013: LD_VAR 0 1
12017: NOT
12018: IFTRUE 12043
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 266
12030: PUSH
12031: LD_INT 32
12033: PUSH
12034: LD_INT 33
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: IN
12041: NOT
12042: OR
12043: IFFALSE 12047
// exit ;
12045: GO 13182
// nat := GetNation ( tower ) ;
12047: LD_ADDR_VAR 0 12
12051: PUSH
12052: LD_VAR 0 1
12056: PPUSH
12057: CALL_OW 248
12061: ST_TO_ADDR
// side := GetSide ( tower ) ;
12062: LD_ADDR_VAR 0 16
12066: PUSH
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 255
12076: ST_TO_ADDR
// x := GetX ( tower ) ;
12077: LD_ADDR_VAR 0 10
12081: PUSH
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 250
12091: ST_TO_ADDR
// y := GetY ( tower ) ;
12092: LD_ADDR_VAR 0 11
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 251
12106: ST_TO_ADDR
// if not x or not y then
12107: LD_VAR 0 10
12111: NOT
12112: IFTRUE 12121
12114: PUSH
12115: LD_VAR 0 11
12119: NOT
12120: OR
12121: IFFALSE 12125
// exit ;
12123: GO 13182
// weapon := 0 ;
12125: LD_ADDR_VAR 0 18
12129: PUSH
12130: LD_INT 0
12132: ST_TO_ADDR
// fac_list := [ ] ;
12133: LD_ADDR_VAR 0 17
12137: PUSH
12138: EMPTY
12139: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12140: LD_ADDR_VAR 0 6
12144: PUSH
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 274
12154: PPUSH
12155: LD_VAR 0 2
12159: PPUSH
12160: LD_INT 0
12162: PPUSH
12163: CALL 9717 0 3
12167: PPUSH
12168: LD_INT 30
12170: PUSH
12171: LD_INT 3
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PPUSH
12178: CALL_OW 72
12182: ST_TO_ADDR
// if not factories then
12183: LD_VAR 0 6
12187: NOT
12188: IFFALSE 12192
// exit ;
12190: GO 13182
// for i in factories do
12192: LD_ADDR_VAR 0 8
12196: PUSH
12197: LD_VAR 0 6
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12228
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12205: LD_ADDR_VAR 0 17
12209: PUSH
12210: LD_VAR 0 17
12214: PUSH
12215: LD_VAR 0 8
12219: PPUSH
12220: CALL_OW 478
12224: UNION
12225: ST_TO_ADDR
12226: GO 12202
12228: POP
12229: POP
// if not fac_list then
12230: LD_VAR 0 17
12234: NOT
12235: IFFALSE 12239
// exit ;
12237: GO 13182
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12239: LD_ADDR_VAR 0 5
12243: PUSH
12244: LD_INT 4
12246: PUSH
12247: LD_INT 5
12249: PUSH
12250: LD_INT 9
12252: PUSH
12253: LD_INT 10
12255: PUSH
12256: LD_INT 6
12258: PUSH
12259: LD_INT 7
12261: PUSH
12262: LD_INT 11
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 27
12276: PUSH
12277: LD_INT 28
12279: PUSH
12280: LD_INT 26
12282: PUSH
12283: LD_INT 30
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 43
12294: PUSH
12295: LD_INT 44
12297: PUSH
12298: LD_INT 46
12300: PUSH
12301: LD_INT 45
12303: PUSH
12304: LD_INT 47
12306: PUSH
12307: LD_INT 49
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_VAR 0 12
12327: ARRAY
12328: ST_TO_ADDR
// list := list isect fac_list ;
12329: LD_ADDR_VAR 0 5
12333: PUSH
12334: LD_VAR 0 5
12338: PUSH
12339: LD_VAR 0 17
12343: ISECT
12344: ST_TO_ADDR
// if not list then
12345: LD_VAR 0 5
12349: NOT
12350: IFFALSE 12354
// exit ;
12352: GO 13182
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12354: LD_VAR 0 12
12358: PUSH
12359: LD_INT 3
12361: EQUAL
12362: IFFALSE 12374
12364: PUSH
12365: LD_INT 49
12367: PUSH
12368: LD_VAR 0 5
12372: IN
12373: AND
12374: IFFALSE 12394
12376: PUSH
12377: LD_INT 31
12379: PPUSH
12380: LD_VAR 0 16
12384: PPUSH
12385: CALL_OW 321
12389: PUSH
12390: LD_INT 2
12392: EQUAL
12393: AND
12394: IFFALSE 12454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12396: LD_INT 22
12398: PUSH
12399: LD_VAR 0 16
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 35
12410: PUSH
12411: LD_INT 49
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 91
12420: PUSH
12421: LD_VAR 0 1
12425: PUSH
12426: LD_INT 10
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: PPUSH
12439: CALL_OW 69
12443: NOT
12444: IFFALSE 12454
// weapon := ru_time_lapser ;
12446: LD_ADDR_VAR 0 18
12450: PUSH
12451: LD_INT 49
12453: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12454: LD_VAR 0 12
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: IN
12469: IFFALSE 12493
12471: PUSH
12472: LD_INT 11
12474: PUSH
12475: LD_VAR 0 5
12479: IN
12480: IFTRUE 12492
12482: PUSH
12483: LD_INT 30
12485: PUSH
12486: LD_VAR 0 5
12490: IN
12491: OR
12492: AND
12493: IFFALSE 12513
12495: PUSH
12496: LD_INT 6
12498: PPUSH
12499: LD_VAR 0 16
12503: PPUSH
12504: CALL_OW 321
12508: PUSH
12509: LD_INT 2
12511: EQUAL
12512: AND
12513: IFFALSE 12680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12515: LD_INT 22
12517: PUSH
12518: LD_VAR 0 16
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: LD_INT 35
12532: PUSH
12533: LD_INT 11
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 35
12542: PUSH
12543: LD_INT 30
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 91
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 18
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: NOT
12581: IFFALSE 12657
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_VAR 0 16
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 2
12598: PUSH
12599: LD_INT 30
12601: PUSH
12602: LD_INT 32
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 30
12611: PUSH
12612: LD_INT 33
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 91
12626: PUSH
12627: LD_VAR 0 1
12631: PUSH
12632: LD_INT 12
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: EMPTY
12646: LIST
12647: PPUSH
12648: CALL_OW 69
12652: PUSH
12653: LD_INT 2
12655: GREATER
12656: AND
12657: IFFALSE 12680
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12659: LD_ADDR_VAR 0 18
12663: PUSH
12664: LD_INT 11
12666: PUSH
12667: LD_INT 30
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_VAR 0 12
12678: ARRAY
12679: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12680: LD_VAR 0 18
12684: NOT
12685: IFFALSE 12705
12687: PUSH
12688: LD_INT 40
12690: PPUSH
12691: LD_VAR 0 16
12695: PPUSH
12696: CALL_OW 321
12700: PUSH
12701: LD_INT 2
12703: EQUAL
12704: AND
12705: IFFALSE 12741
12707: PUSH
12708: LD_INT 7
12710: PUSH
12711: LD_VAR 0 5
12715: IN
12716: IFTRUE 12728
12718: PUSH
12719: LD_INT 28
12721: PUSH
12722: LD_VAR 0 5
12726: IN
12727: OR
12728: IFTRUE 12740
12730: PUSH
12731: LD_INT 45
12733: PUSH
12734: LD_VAR 0 5
12738: IN
12739: OR
12740: AND
12741: IFFALSE 12995
// begin hex := GetHexInfo ( x , y ) ;
12743: LD_ADDR_VAR 0 4
12747: PUSH
12748: LD_VAR 0 10
12752: PPUSH
12753: LD_VAR 0 11
12757: PPUSH
12758: CALL_OW 546
12762: ST_TO_ADDR
// if hex [ 1 ] then
12763: LD_VAR 0 4
12767: PUSH
12768: LD_INT 1
12770: ARRAY
12771: IFFALSE 12775
// exit ;
12773: GO 13182
// height := hex [ 2 ] ;
12775: LD_ADDR_VAR 0 15
12779: PUSH
12780: LD_VAR 0 4
12784: PUSH
12785: LD_INT 2
12787: ARRAY
12788: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12789: LD_ADDR_VAR 0 14
12793: PUSH
12794: LD_INT 0
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: LD_INT 3
12802: PUSH
12803: LD_INT 5
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: ST_TO_ADDR
// for i in tmp do
12812: LD_ADDR_VAR 0 8
12816: PUSH
12817: LD_VAR 0 14
12821: PUSH
12822: FOR_IN
12823: IFFALSE 12993
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12825: LD_ADDR_VAR 0 9
12829: PUSH
12830: LD_VAR 0 10
12834: PPUSH
12835: LD_VAR 0 8
12839: PPUSH
12840: LD_INT 5
12842: PPUSH
12843: CALL_OW 272
12847: PUSH
12848: LD_VAR 0 11
12852: PPUSH
12853: LD_VAR 0 8
12857: PPUSH
12858: LD_INT 5
12860: PPUSH
12861: CALL_OW 273
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12870: LD_VAR 0 9
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 9
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: CALL_OW 488
12892: IFFALSE 12991
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12894: LD_ADDR_VAR 0 4
12898: PUSH
12899: LD_VAR 0 9
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PPUSH
12908: LD_VAR 0 9
12912: PUSH
12913: LD_INT 2
12915: ARRAY
12916: PPUSH
12917: CALL_OW 546
12921: ST_TO_ADDR
// if hex [ 1 ] then
12922: LD_VAR 0 4
12926: PUSH
12927: LD_INT 1
12929: ARRAY
12930: IFFALSE 12934
// continue ;
12932: GO 12822
// h := hex [ 2 ] ;
12934: LD_ADDR_VAR 0 13
12938: PUSH
12939: LD_VAR 0 4
12943: PUSH
12944: LD_INT 2
12946: ARRAY
12947: ST_TO_ADDR
// if h + 7 < height then
12948: LD_VAR 0 13
12952: PUSH
12953: LD_INT 7
12955: PLUS
12956: PUSH
12957: LD_VAR 0 15
12961: LESS
12962: IFFALSE 12991
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12964: LD_ADDR_VAR 0 18
12968: PUSH
12969: LD_INT 7
12971: PUSH
12972: LD_INT 28
12974: PUSH
12975: LD_INT 45
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: PUSH
12983: LD_VAR 0 12
12987: ARRAY
12988: ST_TO_ADDR
// break ;
12989: GO 12993
// end ; end ; end ;
12991: GO 12822
12993: POP
12994: POP
// end ; if not weapon then
12995: LD_VAR 0 18
12999: NOT
13000: IFFALSE 13060
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13002: LD_ADDR_VAR 0 5
13006: PUSH
13007: LD_VAR 0 5
13011: PUSH
13012: LD_INT 11
13014: PUSH
13015: LD_INT 30
13017: PUSH
13018: LD_INT 49
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: DIFF
13026: ST_TO_ADDR
// if not list then
13027: LD_VAR 0 5
13031: NOT
13032: IFFALSE 13036
// exit ;
13034: GO 13182
// weapon := list [ rand ( 1 , list ) ] ;
13036: LD_ADDR_VAR 0 18
13040: PUSH
13041: LD_VAR 0 5
13045: PUSH
13046: LD_INT 1
13048: PPUSH
13049: LD_VAR 0 5
13053: PPUSH
13054: CALL_OW 12
13058: ARRAY
13059: ST_TO_ADDR
// end ; if weapon then
13060: LD_VAR 0 18
13064: IFFALSE 13182
// begin tmp := CostOfWeapon ( weapon ) ;
13066: LD_ADDR_VAR 0 14
13070: PUSH
13071: LD_VAR 0 18
13075: PPUSH
13076: CALL_OW 451
13080: ST_TO_ADDR
// j := GetBase ( tower ) ;
13081: LD_ADDR_VAR 0 9
13085: PUSH
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 274
13095: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13096: LD_VAR 0 9
13100: PPUSH
13101: LD_INT 1
13103: PPUSH
13104: CALL_OW 275
13108: PUSH
13109: LD_VAR 0 14
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: GREATEREQUAL
13118: IFFALSE 13144
13120: PUSH
13121: LD_VAR 0 9
13125: PPUSH
13126: LD_INT 2
13128: PPUSH
13129: CALL_OW 275
13133: PUSH
13134: LD_VAR 0 14
13138: PUSH
13139: LD_INT 2
13141: ARRAY
13142: GREATEREQUAL
13143: AND
13144: IFFALSE 13170
13146: PUSH
13147: LD_VAR 0 9
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: CALL_OW 275
13159: PUSH
13160: LD_VAR 0 14
13164: PUSH
13165: LD_INT 3
13167: ARRAY
13168: GREATEREQUAL
13169: AND
13170: IFFALSE 13182
// result := weapon ;
13172: LD_ADDR_VAR 0 3
13176: PUSH
13177: LD_VAR 0 18
13181: ST_TO_ADDR
// end ; end ;
13182: LD_VAR 0 3
13186: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13187: LD_INT 0
13189: PPUSH
13190: PPUSH
// result := true ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if array1 = array2 then
13199: LD_VAR 0 1
13203: PUSH
13204: LD_VAR 0 2
13208: EQUAL
13209: IFFALSE 13269
// begin for i = 1 to array1 do
13211: LD_ADDR_VAR 0 4
13215: PUSH
13216: DOUBLE
13217: LD_INT 1
13219: DEC
13220: ST_TO_ADDR
13221: LD_VAR 0 1
13225: PUSH
13226: FOR_TO
13227: IFFALSE 13265
// if array1 [ i ] <> array2 [ i ] then
13229: LD_VAR 0 1
13233: PUSH
13234: LD_VAR 0 4
13238: ARRAY
13239: PUSH
13240: LD_VAR 0 2
13244: PUSH
13245: LD_VAR 0 4
13249: ARRAY
13250: NONEQUAL
13251: IFFALSE 13263
// begin result := false ;
13253: LD_ADDR_VAR 0 3
13257: PUSH
13258: LD_INT 0
13260: ST_TO_ADDR
// break ;
13261: GO 13265
// end ;
13263: GO 13226
13265: POP
13266: POP
// end else
13267: GO 13277
// result := false ;
13269: LD_ADDR_VAR 0 3
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// end ;
13277: LD_VAR 0 3
13281: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
// if not array1 or not array2 then
13286: LD_VAR 0 1
13290: NOT
13291: IFTRUE 13300
13293: PUSH
13294: LD_VAR 0 2
13298: NOT
13299: OR
13300: IFFALSE 13304
// exit ;
13302: GO 13368
// result := true ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// for i = 1 to array1 do
13312: LD_ADDR_VAR 0 4
13316: PUSH
13317: DOUBLE
13318: LD_INT 1
13320: DEC
13321: ST_TO_ADDR
13322: LD_VAR 0 1
13326: PUSH
13327: FOR_TO
13328: IFFALSE 13366
// if array1 [ i ] <> array2 [ i ] then
13330: LD_VAR 0 1
13334: PUSH
13335: LD_VAR 0 4
13339: ARRAY
13340: PUSH
13341: LD_VAR 0 2
13345: PUSH
13346: LD_VAR 0 4
13350: ARRAY
13351: NONEQUAL
13352: IFFALSE 13364
// begin result := false ;
13354: LD_ADDR_VAR 0 3
13358: PUSH
13359: LD_INT 0
13361: ST_TO_ADDR
// break ;
13362: GO 13366
// end ;
13364: GO 13327
13366: POP
13367: POP
// end ;
13368: LD_VAR 0 3
13372: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13373: LD_INT 0
13375: PPUSH
13376: PPUSH
13377: PPUSH
// pom := GetBase ( fac ) ;
13378: LD_ADDR_VAR 0 5
13382: PUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: CALL_OW 274
13392: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13393: LD_ADDR_VAR 0 4
13397: PUSH
13398: LD_VAR 0 2
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 2
13411: PUSH
13412: LD_INT 2
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 2
13420: PUSH
13421: LD_INT 3
13423: ARRAY
13424: PPUSH
13425: LD_VAR 0 2
13429: PUSH
13430: LD_INT 4
13432: ARRAY
13433: PPUSH
13434: CALL_OW 449
13438: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13439: LD_ADDR_VAR 0 3
13443: PUSH
13444: LD_VAR 0 5
13448: PPUSH
13449: LD_INT 1
13451: PPUSH
13452: CALL_OW 275
13456: PUSH
13457: LD_VAR 0 4
13461: PUSH
13462: LD_INT 1
13464: ARRAY
13465: GREATEREQUAL
13466: IFFALSE 13492
13468: PUSH
13469: LD_VAR 0 5
13473: PPUSH
13474: LD_INT 2
13476: PPUSH
13477: CALL_OW 275
13481: PUSH
13482: LD_VAR 0 4
13486: PUSH
13487: LD_INT 2
13489: ARRAY
13490: GREATEREQUAL
13491: AND
13492: IFFALSE 13518
13494: PUSH
13495: LD_VAR 0 5
13499: PPUSH
13500: LD_INT 3
13502: PPUSH
13503: CALL_OW 275
13507: PUSH
13508: LD_VAR 0 4
13512: PUSH
13513: LD_INT 3
13515: ARRAY
13516: GREATEREQUAL
13517: AND
13518: ST_TO_ADDR
// end ;
13519: LD_VAR 0 3
13523: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
13528: PPUSH
13529: PPUSH
// pom := GetBase ( building ) ;
13530: LD_ADDR_VAR 0 3
13534: PUSH
13535: LD_VAR 0 1
13539: PPUSH
13540: CALL_OW 274
13544: ST_TO_ADDR
// if not pom then
13545: LD_VAR 0 3
13549: NOT
13550: IFFALSE 13554
// exit ;
13552: GO 13728
// btype := GetBType ( building ) ;
13554: LD_ADDR_VAR 0 5
13558: PUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 266
13568: ST_TO_ADDR
// if btype = b_armoury then
13569: LD_VAR 0 5
13573: PUSH
13574: LD_INT 4
13576: EQUAL
13577: IFFALSE 13587
// btype := b_barracks ;
13579: LD_ADDR_VAR 0 5
13583: PUSH
13584: LD_INT 5
13586: ST_TO_ADDR
// if btype = b_depot then
13587: LD_VAR 0 5
13591: PUSH
13592: LD_INT 0
13594: EQUAL
13595: IFFALSE 13605
// btype := b_warehouse ;
13597: LD_ADDR_VAR 0 5
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// if btype = b_workshop then
13605: LD_VAR 0 5
13609: PUSH
13610: LD_INT 2
13612: EQUAL
13613: IFFALSE 13623
// btype := b_factory ;
13615: LD_ADDR_VAR 0 5
13619: PUSH
13620: LD_INT 3
13622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13623: LD_ADDR_VAR 0 4
13627: PUSH
13628: LD_VAR 0 5
13632: PPUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 248
13642: PPUSH
13643: CALL_OW 450
13647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 1
13660: PPUSH
13661: CALL_OW 275
13665: PUSH
13666: LD_VAR 0 4
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: GREATEREQUAL
13675: IFFALSE 13701
13677: PUSH
13678: LD_VAR 0 3
13682: PPUSH
13683: LD_INT 2
13685: PPUSH
13686: CALL_OW 275
13690: PUSH
13691: LD_VAR 0 4
13695: PUSH
13696: LD_INT 2
13698: ARRAY
13699: GREATEREQUAL
13700: AND
13701: IFFALSE 13727
13703: PUSH
13704: LD_VAR 0 3
13708: PPUSH
13709: LD_INT 3
13711: PPUSH
13712: CALL_OW 275
13716: PUSH
13717: LD_VAR 0 4
13721: PUSH
13722: LD_INT 3
13724: ARRAY
13725: GREATEREQUAL
13726: AND
13727: ST_TO_ADDR
// end ;
13728: LD_VAR 0 2
13732: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13733: LD_INT 0
13735: PPUSH
13736: PPUSH
13737: PPUSH
// pom := GetBase ( building ) ;
13738: LD_ADDR_VAR 0 4
13742: PUSH
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL_OW 274
13752: ST_TO_ADDR
// if not pom then
13753: LD_VAR 0 4
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13867
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13762: LD_ADDR_VAR 0 5
13766: PUSH
13767: LD_VAR 0 2
13771: PPUSH
13772: LD_VAR 0 1
13776: PPUSH
13777: CALL_OW 248
13781: PPUSH
13782: CALL_OW 450
13786: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13787: LD_ADDR_VAR 0 3
13791: PUSH
13792: LD_VAR 0 4
13796: PPUSH
13797: LD_INT 1
13799: PPUSH
13800: CALL_OW 275
13804: PUSH
13805: LD_VAR 0 5
13809: PUSH
13810: LD_INT 1
13812: ARRAY
13813: GREATEREQUAL
13814: IFFALSE 13840
13816: PUSH
13817: LD_VAR 0 4
13821: PPUSH
13822: LD_INT 2
13824: PPUSH
13825: CALL_OW 275
13829: PUSH
13830: LD_VAR 0 5
13834: PUSH
13835: LD_INT 2
13837: ARRAY
13838: GREATEREQUAL
13839: AND
13840: IFFALSE 13866
13842: PUSH
13843: LD_VAR 0 4
13847: PPUSH
13848: LD_INT 3
13850: PPUSH
13851: CALL_OW 275
13855: PUSH
13856: LD_VAR 0 5
13860: PUSH
13861: LD_INT 3
13863: ARRAY
13864: GREATEREQUAL
13865: AND
13866: ST_TO_ADDR
// end ;
13867: LD_VAR 0 3
13871: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13872: LD_INT 0
13874: PPUSH
13875: PPUSH
13876: PPUSH
13877: PPUSH
13878: PPUSH
13879: PPUSH
13880: PPUSH
13881: PPUSH
13882: PPUSH
13883: PPUSH
13884: PPUSH
// result := false ;
13885: LD_ADDR_VAR 0 8
13889: PUSH
13890: LD_INT 0
13892: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13893: LD_VAR 0 5
13897: NOT
13898: IFTRUE 13907
13900: PUSH
13901: LD_VAR 0 1
13905: NOT
13906: OR
13907: IFTRUE 13916
13909: PUSH
13910: LD_VAR 0 2
13914: NOT
13915: OR
13916: IFTRUE 13925
13918: PUSH
13919: LD_VAR 0 3
13923: NOT
13924: OR
13925: IFFALSE 13929
// exit ;
13927: GO 14755
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13929: LD_ADDR_VAR 0 14
13933: PUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: LD_VAR 0 2
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: LD_VAR 0 4
13953: PPUSH
13954: LD_VAR 0 5
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PPUSH
13963: CALL_OW 248
13967: PPUSH
13968: LD_INT 0
13970: PPUSH
13971: CALL 16036 0 6
13975: ST_TO_ADDR
// if not hexes then
13976: LD_VAR 0 14
13980: NOT
13981: IFFALSE 13985
// exit ;
13983: GO 14755
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13985: LD_ADDR_VAR 0 17
13989: PUSH
13990: LD_VAR 0 5
13994: PPUSH
13995: LD_INT 22
13997: PUSH
13998: LD_VAR 0 13
14002: PPUSH
14003: CALL_OW 255
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 2
14014: PUSH
14015: LD_INT 30
14017: PUSH
14018: LD_INT 0
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 30
14027: PUSH
14028: LD_INT 1
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 72
14048: ST_TO_ADDR
// for i = 1 to hexes do
14049: LD_ADDR_VAR 0 9
14053: PUSH
14054: DOUBLE
14055: LD_INT 1
14057: DEC
14058: ST_TO_ADDR
14059: LD_VAR 0 14
14063: PUSH
14064: FOR_TO
14065: IFFALSE 14753
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 14
14076: PUSH
14077: LD_VAR 0 9
14081: ARRAY
14082: PUSH
14083: LD_INT 1
14085: ARRAY
14086: PPUSH
14087: LD_VAR 0 14
14091: PUSH
14092: LD_VAR 0 9
14096: ARRAY
14097: PUSH
14098: LD_INT 2
14100: ARRAY
14101: PPUSH
14102: CALL_OW 428
14106: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14107: LD_VAR 0 14
14111: PUSH
14112: LD_VAR 0 9
14116: ARRAY
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: LD_VAR 0 14
14126: PUSH
14127: LD_VAR 0 9
14131: ARRAY
14132: PUSH
14133: LD_INT 2
14135: ARRAY
14136: PPUSH
14137: CALL_OW 351
14141: IFTRUE 14180
14143: PUSH
14144: LD_VAR 0 14
14148: PUSH
14149: LD_VAR 0 9
14153: ARRAY
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: PPUSH
14159: LD_VAR 0 14
14163: PUSH
14164: LD_VAR 0 9
14168: ARRAY
14169: PUSH
14170: LD_INT 2
14172: ARRAY
14173: PPUSH
14174: CALL_OW 488
14178: NOT
14179: OR
14180: IFTRUE 14197
14182: PUSH
14183: LD_VAR 0 13
14187: PPUSH
14188: CALL_OW 247
14192: PUSH
14193: LD_INT 3
14195: EQUAL
14196: OR
14197: IFFALSE 14203
// exit ;
14199: POP
14200: POP
14201: GO 14755
// if not tmp then
14203: LD_VAR 0 13
14207: NOT
14208: IFFALSE 14212
// continue ;
14210: GO 14064
// result := true ;
14212: LD_ADDR_VAR 0 8
14216: PUSH
14217: LD_INT 1
14219: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14220: LD_VAR 0 6
14224: IFFALSE 14241
14226: PUSH
14227: LD_VAR 0 13
14231: PPUSH
14232: CALL_OW 247
14236: PUSH
14237: LD_INT 2
14239: EQUAL
14240: AND
14241: IFFALSE 14258
14243: PUSH
14244: LD_VAR 0 13
14248: PPUSH
14249: CALL_OW 263
14253: PUSH
14254: LD_INT 1
14256: EQUAL
14257: AND
14258: IFFALSE 14422
// begin if IsDrivenBy ( tmp ) then
14260: LD_VAR 0 13
14264: PPUSH
14265: CALL_OW 311
14269: IFFALSE 14273
// continue ;
14271: GO 14064
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14273: LD_VAR 0 6
14277: PPUSH
14278: LD_INT 3
14280: PUSH
14281: LD_INT 60
14283: PUSH
14284: EMPTY
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 3
14293: PUSH
14294: LD_INT 55
14296: PUSH
14297: EMPTY
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PPUSH
14308: CALL_OW 72
14312: IFFALSE 14420
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14314: LD_ADDR_VAR 0 18
14318: PUSH
14319: LD_VAR 0 6
14323: PPUSH
14324: LD_INT 3
14326: PUSH
14327: LD_INT 60
14329: PUSH
14330: EMPTY
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: LD_INT 55
14342: PUSH
14343: EMPTY
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL_OW 72
14358: PUSH
14359: LD_INT 1
14361: ARRAY
14362: ST_TO_ADDR
// if IsInUnit ( driver ) then
14363: LD_VAR 0 18
14367: PPUSH
14368: CALL_OW 310
14372: IFFALSE 14383
// ComExit ( driver ) ;
14374: LD_VAR 0 18
14378: PPUSH
14379: CALL 40036 0 1
// AddComEnterUnit ( driver , tmp ) ;
14383: LD_VAR 0 18
14387: PPUSH
14388: LD_VAR 0 13
14392: PPUSH
14393: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14397: LD_VAR 0 18
14401: PPUSH
14402: LD_VAR 0 7
14406: PPUSH
14407: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14411: LD_VAR 0 18
14415: PPUSH
14416: CALL_OW 181
// end ; continue ;
14420: GO 14064
// end ; if not cleaners or not tmp in cleaners then
14422: LD_VAR 0 6
14426: NOT
14427: IFTRUE 14442
14429: PUSH
14430: LD_VAR 0 13
14434: PUSH
14435: LD_VAR 0 6
14439: IN
14440: NOT
14441: OR
14442: IFFALSE 14751
// begin if dep then
14444: LD_VAR 0 17
14448: IFFALSE 14584
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14450: LD_ADDR_VAR 0 16
14454: PUSH
14455: LD_VAR 0 17
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: PPUSH
14464: CALL_OW 250
14468: PPUSH
14469: LD_VAR 0 17
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PPUSH
14478: CALL_OW 254
14482: PPUSH
14483: LD_INT 5
14485: PPUSH
14486: CALL_OW 272
14490: PUSH
14491: LD_VAR 0 17
14495: PUSH
14496: LD_INT 1
14498: ARRAY
14499: PPUSH
14500: CALL_OW 251
14504: PPUSH
14505: LD_VAR 0 17
14509: PUSH
14510: LD_INT 1
14512: ARRAY
14513: PPUSH
14514: CALL_OW 254
14518: PPUSH
14519: LD_INT 5
14521: PPUSH
14522: CALL_OW 273
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14531: LD_VAR 0 16
14535: PUSH
14536: LD_INT 1
14538: ARRAY
14539: PPUSH
14540: LD_VAR 0 16
14544: PUSH
14545: LD_INT 2
14547: ARRAY
14548: PPUSH
14549: CALL_OW 488
14553: IFFALSE 14584
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14555: LD_VAR 0 13
14559: PPUSH
14560: LD_VAR 0 16
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: LD_VAR 0 16
14573: PUSH
14574: LD_INT 2
14576: ARRAY
14577: PPUSH
14578: CALL_OW 111
// continue ;
14582: GO 14064
// end ; end ; r := GetDir ( tmp ) ;
14584: LD_ADDR_VAR 0 15
14588: PUSH
14589: LD_VAR 0 13
14593: PPUSH
14594: CALL_OW 254
14598: ST_TO_ADDR
// if r = 5 then
14599: LD_VAR 0 15
14603: PUSH
14604: LD_INT 5
14606: EQUAL
14607: IFFALSE 14617
// r := 0 ;
14609: LD_ADDR_VAR 0 15
14613: PUSH
14614: LD_INT 0
14616: ST_TO_ADDR
// for j = r to 5 do
14617: LD_ADDR_VAR 0 10
14621: PUSH
14622: DOUBLE
14623: LD_VAR 0 15
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 5
14631: PUSH
14632: FOR_TO
14633: IFFALSE 14749
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14635: LD_ADDR_VAR 0 11
14639: PUSH
14640: LD_VAR 0 13
14644: PPUSH
14645: CALL_OW 250
14649: PPUSH
14650: LD_VAR 0 10
14654: PPUSH
14655: LD_INT 2
14657: PPUSH
14658: CALL_OW 272
14662: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14663: LD_ADDR_VAR 0 12
14667: PUSH
14668: LD_VAR 0 13
14672: PPUSH
14673: CALL_OW 251
14677: PPUSH
14678: LD_VAR 0 10
14682: PPUSH
14683: LD_INT 2
14685: PPUSH
14686: CALL_OW 273
14690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14691: LD_VAR 0 11
14695: PPUSH
14696: LD_VAR 0 12
14700: PPUSH
14701: CALL_OW 488
14705: IFFALSE 14724
14707: PUSH
14708: LD_VAR 0 11
14712: PPUSH
14713: LD_VAR 0 12
14717: PPUSH
14718: CALL_OW 428
14722: NOT
14723: AND
14724: IFFALSE 14747
// begin ComMoveXY ( tmp , _x , _y ) ;
14726: LD_VAR 0 13
14730: PPUSH
14731: LD_VAR 0 11
14735: PPUSH
14736: LD_VAR 0 12
14740: PPUSH
14741: CALL_OW 111
// break ;
14745: GO 14749
// end ; end ;
14747: GO 14632
14749: POP
14750: POP
// end ; end ;
14751: GO 14064
14753: POP
14754: POP
// end ;
14755: LD_VAR 0 8
14759: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14760: LD_INT 0
14762: PPUSH
// result := true ;
14763: LD_ADDR_VAR 0 3
14767: PUSH
14768: LD_INT 1
14770: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14771: LD_VAR 0 2
14775: PUSH
14776: LD_INT 24
14778: DOUBLE
14779: EQUAL
14780: IFTRUE 14790
14782: LD_INT 33
14784: DOUBLE
14785: EQUAL
14786: IFTRUE 14790
14788: GO 14815
14790: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14791: LD_ADDR_VAR 0 3
14795: PUSH
14796: LD_INT 32
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 321
14808: PUSH
14809: LD_INT 2
14811: EQUAL
14812: ST_TO_ADDR
14813: GO 15131
14815: LD_INT 20
14817: DOUBLE
14818: EQUAL
14819: IFTRUE 14823
14821: GO 14848
14823: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 6
14831: PPUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: CALL_OW 321
14841: PUSH
14842: LD_INT 2
14844: EQUAL
14845: ST_TO_ADDR
14846: GO 15131
14848: LD_INT 22
14850: DOUBLE
14851: EQUAL
14852: IFTRUE 14862
14854: LD_INT 36
14856: DOUBLE
14857: EQUAL
14858: IFTRUE 14862
14860: GO 14887
14862: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14863: LD_ADDR_VAR 0 3
14867: PUSH
14868: LD_INT 15
14870: PPUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 321
14880: PUSH
14881: LD_INT 2
14883: EQUAL
14884: ST_TO_ADDR
14885: GO 15131
14887: LD_INT 30
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14920
14895: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14896: LD_ADDR_VAR 0 3
14900: PUSH
14901: LD_INT 20
14903: PPUSH
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 321
14913: PUSH
14914: LD_INT 2
14916: EQUAL
14917: ST_TO_ADDR
14918: GO 15131
14920: LD_INT 28
14922: DOUBLE
14923: EQUAL
14924: IFTRUE 14934
14926: LD_INT 21
14928: DOUBLE
14929: EQUAL
14930: IFTRUE 14934
14932: GO 14959
14934: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14935: LD_ADDR_VAR 0 3
14939: PUSH
14940: LD_INT 21
14942: PPUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 321
14952: PUSH
14953: LD_INT 2
14955: EQUAL
14956: ST_TO_ADDR
14957: GO 15131
14959: LD_INT 16
14961: DOUBLE
14962: EQUAL
14963: IFTRUE 14967
14965: GO 14992
14967: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14968: LD_ADDR_VAR 0 3
14972: PUSH
14973: LD_INT 84
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 321
14985: PUSH
14986: LD_INT 2
14988: EQUAL
14989: ST_TO_ADDR
14990: GO 15131
14992: LD_INT 19
14994: DOUBLE
14995: EQUAL
14996: IFTRUE 15006
14998: LD_INT 23
15000: DOUBLE
15001: EQUAL
15002: IFTRUE 15006
15004: GO 15031
15006: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15007: LD_ADDR_VAR 0 3
15011: PUSH
15012: LD_INT 83
15014: PPUSH
15015: LD_VAR 0 1
15019: PPUSH
15020: CALL_OW 321
15024: PUSH
15025: LD_INT 2
15027: EQUAL
15028: ST_TO_ADDR
15029: GO 15131
15031: LD_INT 17
15033: DOUBLE
15034: EQUAL
15035: IFTRUE 15039
15037: GO 15064
15039: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_INT 39
15047: PPUSH
15048: LD_VAR 0 1
15052: PPUSH
15053: CALL_OW 321
15057: PUSH
15058: LD_INT 2
15060: EQUAL
15061: ST_TO_ADDR
15062: GO 15131
15064: LD_INT 18
15066: DOUBLE
15067: EQUAL
15068: IFTRUE 15072
15070: GO 15097
15072: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 40
15080: PPUSH
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 321
15090: PUSH
15091: LD_INT 2
15093: EQUAL
15094: ST_TO_ADDR
15095: GO 15131
15097: LD_INT 27
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15130
15105: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15106: LD_ADDR_VAR 0 3
15110: PUSH
15111: LD_INT 35
15113: PPUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 321
15123: PUSH
15124: LD_INT 2
15126: EQUAL
15127: ST_TO_ADDR
15128: GO 15131
15130: POP
// end ;
15131: LD_VAR 0 3
15135: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
// result := false ;
15149: LD_ADDR_VAR 0 6
15153: PUSH
15154: LD_INT 0
15156: ST_TO_ADDR
// if btype = b_depot then
15157: LD_VAR 0 2
15161: PUSH
15162: LD_INT 0
15164: EQUAL
15165: IFFALSE 15177
// begin result := true ;
15167: LD_ADDR_VAR 0 6
15171: PUSH
15172: LD_INT 1
15174: ST_TO_ADDR
// exit ;
15175: GO 16031
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15177: LD_VAR 0 1
15181: NOT
15182: IFTRUE 15207
15184: PUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: CALL_OW 266
15194: PUSH
15195: LD_INT 0
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: IN
15205: NOT
15206: OR
15207: IFTRUE 15216
15209: PUSH
15210: LD_VAR 0 2
15214: NOT
15215: OR
15216: IFTRUE 15252
15218: PUSH
15219: LD_VAR 0 5
15223: PUSH
15224: LD_INT 0
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: LD_INT 2
15232: PUSH
15233: LD_INT 3
15235: PUSH
15236: LD_INT 4
15238: PUSH
15239: LD_INT 5
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: IN
15250: NOT
15251: OR
15252: IFTRUE 15271
15254: PUSH
15255: LD_VAR 0 3
15259: PPUSH
15260: LD_VAR 0 4
15264: PPUSH
15265: CALL_OW 488
15269: NOT
15270: OR
15271: IFFALSE 15275
// exit ;
15273: GO 16031
// side := GetSide ( depot ) ;
15275: LD_ADDR_VAR 0 9
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 255
15289: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15290: LD_VAR 0 9
15294: PPUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL 14760 0 2
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 16031
// pom := GetBase ( depot ) ;
15309: LD_ADDR_VAR 0 10
15313: PUSH
15314: LD_VAR 0 1
15318: PPUSH
15319: CALL_OW 274
15323: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15324: LD_ADDR_VAR 0 11
15328: PUSH
15329: LD_VAR 0 2
15333: PPUSH
15334: LD_VAR 0 1
15338: PPUSH
15339: CALL_OW 248
15343: PPUSH
15344: CALL_OW 450
15348: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15349: LD_VAR 0 10
15353: PPUSH
15354: LD_INT 1
15356: PPUSH
15357: CALL_OW 275
15361: PUSH
15362: LD_VAR 0 11
15366: PUSH
15367: LD_INT 1
15369: ARRAY
15370: GREATEREQUAL
15371: IFFALSE 15397
15373: PUSH
15374: LD_VAR 0 10
15378: PPUSH
15379: LD_INT 2
15381: PPUSH
15382: CALL_OW 275
15386: PUSH
15387: LD_VAR 0 11
15391: PUSH
15392: LD_INT 2
15394: ARRAY
15395: GREATEREQUAL
15396: AND
15397: IFFALSE 15423
15399: PUSH
15400: LD_VAR 0 10
15404: PPUSH
15405: LD_INT 3
15407: PPUSH
15408: CALL_OW 275
15412: PUSH
15413: LD_VAR 0 11
15417: PUSH
15418: LD_INT 3
15420: ARRAY
15421: GREATEREQUAL
15422: AND
15423: NOT
15424: IFFALSE 15428
// exit ;
15426: GO 16031
// if GetBType ( depot ) = b_depot then
15428: LD_VAR 0 1
15432: PPUSH
15433: CALL_OW 266
15437: PUSH
15438: LD_INT 0
15440: EQUAL
15441: IFFALSE 15453
// dist := 28 else
15443: LD_ADDR_VAR 0 14
15447: PUSH
15448: LD_INT 28
15450: ST_TO_ADDR
15451: GO 15461
// dist := 36 ;
15453: LD_ADDR_VAR 0 14
15457: PUSH
15458: LD_INT 36
15460: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15461: LD_VAR 0 1
15465: PPUSH
15466: LD_VAR 0 3
15470: PPUSH
15471: LD_VAR 0 4
15475: PPUSH
15476: CALL_OW 297
15480: PUSH
15481: LD_VAR 0 14
15485: GREATER
15486: IFFALSE 15490
// exit ;
15488: GO 16031
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15490: LD_ADDR_VAR 0 12
15494: PUSH
15495: LD_VAR 0 2
15499: PPUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_VAR 0 4
15509: PPUSH
15510: LD_VAR 0 5
15514: PPUSH
15515: LD_VAR 0 1
15519: PPUSH
15520: CALL_OW 248
15524: PPUSH
15525: LD_INT 0
15527: PPUSH
15528: CALL 16036 0 6
15532: ST_TO_ADDR
// if not hexes then
15533: LD_VAR 0 12
15537: NOT
15538: IFFALSE 15542
// exit ;
15540: GO 16031
// hex := GetHexInfo ( x , y ) ;
15542: LD_ADDR_VAR 0 15
15546: PUSH
15547: LD_VAR 0 3
15551: PPUSH
15552: LD_VAR 0 4
15556: PPUSH
15557: CALL_OW 546
15561: ST_TO_ADDR
// if hex [ 1 ] then
15562: LD_VAR 0 15
15566: PUSH
15567: LD_INT 1
15569: ARRAY
15570: IFFALSE 15574
// exit ;
15572: GO 16031
// height := hex [ 2 ] ;
15574: LD_ADDR_VAR 0 13
15578: PUSH
15579: LD_VAR 0 15
15583: PUSH
15584: LD_INT 2
15586: ARRAY
15587: ST_TO_ADDR
// for i = 1 to hexes do
15588: LD_ADDR_VAR 0 7
15592: PUSH
15593: DOUBLE
15594: LD_INT 1
15596: DEC
15597: ST_TO_ADDR
15598: LD_VAR 0 12
15602: PUSH
15603: FOR_TO
15604: IFFALSE 15948
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15606: LD_VAR 0 12
15610: PUSH
15611: LD_VAR 0 7
15615: ARRAY
15616: PUSH
15617: LD_INT 1
15619: ARRAY
15620: PPUSH
15621: LD_VAR 0 12
15625: PUSH
15626: LD_VAR 0 7
15630: ARRAY
15631: PUSH
15632: LD_INT 2
15634: ARRAY
15635: PPUSH
15636: CALL_OW 488
15640: NOT
15641: IFTRUE 15683
15643: PUSH
15644: LD_VAR 0 12
15648: PUSH
15649: LD_VAR 0 7
15653: ARRAY
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: LD_VAR 0 12
15663: PUSH
15664: LD_VAR 0 7
15668: ARRAY
15669: PUSH
15670: LD_INT 2
15672: ARRAY
15673: PPUSH
15674: CALL_OW 428
15678: PUSH
15679: LD_INT 0
15681: GREATER
15682: OR
15683: IFTRUE 15721
15685: PUSH
15686: LD_VAR 0 12
15690: PUSH
15691: LD_VAR 0 7
15695: ARRAY
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: PPUSH
15701: LD_VAR 0 12
15705: PUSH
15706: LD_VAR 0 7
15710: ARRAY
15711: PUSH
15712: LD_INT 2
15714: ARRAY
15715: PPUSH
15716: CALL_OW 351
15720: OR
15721: IFFALSE 15727
// exit ;
15723: POP
15724: POP
15725: GO 16031
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15727: LD_ADDR_VAR 0 8
15731: PUSH
15732: LD_VAR 0 12
15736: PUSH
15737: LD_VAR 0 7
15741: ARRAY
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: LD_VAR 0 12
15751: PUSH
15752: LD_VAR 0 7
15756: ARRAY
15757: PUSH
15758: LD_INT 2
15760: ARRAY
15761: PPUSH
15762: CALL_OW 546
15766: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15767: LD_VAR 0 8
15771: PUSH
15772: LD_INT 1
15774: ARRAY
15775: IFTRUE 15797
15777: PUSH
15778: LD_VAR 0 8
15782: PUSH
15783: LD_INT 2
15785: ARRAY
15786: PUSH
15787: LD_VAR 0 13
15791: PUSH
15792: LD_INT 2
15794: PLUS
15795: GREATER
15796: OR
15797: IFTRUE 15819
15799: PUSH
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 2
15807: ARRAY
15808: PUSH
15809: LD_VAR 0 13
15813: PUSH
15814: LD_INT 2
15816: MINUS
15817: LESS
15818: OR
15819: IFTRUE 15887
15821: PUSH
15822: LD_VAR 0 8
15826: PUSH
15827: LD_INT 3
15829: ARRAY
15830: PUSH
15831: LD_INT 0
15833: PUSH
15834: LD_INT 8
15836: PUSH
15837: LD_INT 9
15839: PUSH
15840: LD_INT 10
15842: PUSH
15843: LD_INT 11
15845: PUSH
15846: LD_INT 12
15848: PUSH
15849: LD_INT 13
15851: PUSH
15852: LD_INT 16
15854: PUSH
15855: LD_INT 17
15857: PUSH
15858: LD_INT 18
15860: PUSH
15861: LD_INT 19
15863: PUSH
15864: LD_INT 20
15866: PUSH
15867: LD_INT 21
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: IN
15885: NOT
15886: OR
15887: IFTRUE 15900
15889: PUSH
15890: LD_VAR 0 8
15894: PUSH
15895: LD_INT 5
15897: ARRAY
15898: NOT
15899: OR
15900: IFTRUE 15940
15902: PUSH
15903: LD_VAR 0 8
15907: PUSH
15908: LD_INT 6
15910: ARRAY
15911: PUSH
15912: LD_INT 1
15914: PUSH
15915: LD_INT 2
15917: PUSH
15918: LD_INT 7
15920: PUSH
15921: LD_INT 9
15923: PUSH
15924: LD_INT 10
15926: PUSH
15927: LD_INT 11
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: IN
15938: NOT
15939: OR
15940: IFFALSE 15946
// exit ;
15942: POP
15943: POP
15944: GO 16031
// end ;
15946: GO 15603
15948: POP
15949: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15950: LD_VAR 0 9
15954: PPUSH
15955: LD_VAR 0 3
15959: PPUSH
15960: LD_VAR 0 4
15964: PPUSH
15965: LD_INT 20
15967: PPUSH
15968: CALL 7850 0 4
15972: PUSH
15973: LD_INT 4
15975: ARRAY
15976: IFFALSE 15980
// exit ;
15978: GO 16031
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15980: LD_VAR 0 2
15984: PUSH
15985: LD_INT 29
15987: PUSH
15988: LD_INT 30
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: IN
15995: IFFALSE 16019
15997: PUSH
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_VAR 0 4
16007: PPUSH
16008: LD_VAR 0 9
16012: PPUSH
16013: CALL_OW 440
16017: NOT
16018: AND
16019: IFFALSE 16023
// exit ;
16021: GO 16031
// result := true ;
16023: LD_ADDR_VAR 0 6
16027: PUSH
16028: LD_INT 1
16030: ST_TO_ADDR
// end ;
16031: LD_VAR 0 6
16035: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16036: LD_INT 0
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
16074: PPUSH
16075: PPUSH
16076: PPUSH
16077: PPUSH
16078: PPUSH
16079: PPUSH
16080: PPUSH
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
16085: PPUSH
16086: PPUSH
16087: PPUSH
16088: PPUSH
16089: PPUSH
16090: PPUSH
16091: PPUSH
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
// result = [ ] ;
16096: LD_ADDR_VAR 0 7
16100: PUSH
16101: EMPTY
16102: ST_TO_ADDR
// temp_list = [ ] ;
16103: LD_ADDR_VAR 0 9
16107: PUSH
16108: EMPTY
16109: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16110: LD_VAR 0 4
16114: PUSH
16115: LD_INT 0
16117: PUSH
16118: LD_INT 1
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: LD_INT 3
16126: PUSH
16127: LD_INT 4
16129: PUSH
16130: LD_INT 5
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: IN
16141: NOT
16142: IFTRUE 16185
16144: PUSH
16145: LD_VAR 0 1
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: LD_INT 1
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: IN
16160: IFFALSE 16184
16162: PUSH
16163: LD_VAR 0 5
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: LD_INT 2
16173: PUSH
16174: LD_INT 3
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: IN
16182: NOT
16183: AND
16184: OR
16185: IFFALSE 16189
// exit ;
16187: GO 34588
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16189: LD_VAR 0 1
16193: PUSH
16194: LD_INT 6
16196: PUSH
16197: LD_INT 7
16199: PUSH
16200: LD_INT 8
16202: PUSH
16203: LD_INT 13
16205: PUSH
16206: LD_INT 12
16208: PUSH
16209: LD_INT 15
16211: PUSH
16212: LD_INT 11
16214: PUSH
16215: LD_INT 14
16217: PUSH
16218: LD_INT 10
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: IN
16232: IFFALSE 16242
// btype = b_lab ;
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_INT 6
16241: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16242: LD_VAR 0 6
16246: PUSH
16247: LD_INT 0
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: LD_INT 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: IN
16261: NOT
16262: IFTRUE 16330
16264: PUSH
16265: LD_VAR 0 1
16269: PUSH
16270: LD_INT 0
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: LD_INT 2
16278: PUSH
16279: LD_INT 3
16281: PUSH
16282: LD_INT 6
16284: PUSH
16285: LD_INT 36
16287: PUSH
16288: LD_INT 4
16290: PUSH
16291: LD_INT 5
16293: PUSH
16294: LD_INT 31
16296: PUSH
16297: LD_INT 32
16299: PUSH
16300: LD_INT 33
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: IN
16316: NOT
16317: IFFALSE 16329
16319: PUSH
16320: LD_VAR 0 6
16324: PUSH
16325: LD_INT 1
16327: EQUAL
16328: AND
16329: OR
16330: IFTRUE 16362
16332: PUSH
16333: LD_VAR 0 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: IN
16348: NOT
16349: IFFALSE 16361
16351: PUSH
16352: LD_VAR 0 6
16356: PUSH
16357: LD_INT 2
16359: EQUAL
16360: AND
16361: OR
16362: IFFALSE 16372
// mode = 0 ;
16364: LD_ADDR_VAR 0 6
16368: PUSH
16369: LD_INT 0
16371: ST_TO_ADDR
// case mode of 0 :
16372: LD_VAR 0 6
16376: PUSH
16377: LD_INT 0
16379: DOUBLE
16380: EQUAL
16381: IFTRUE 16385
16383: GO 27838
16385: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16386: LD_ADDR_VAR 0 11
16390: PUSH
16391: LD_INT 0
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 0
16403: PUSH
16404: LD_INT 1
16406: NEG
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 0
16434: PUSH
16435: LD_INT 1
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 1
16444: NEG
16445: PUSH
16446: LD_INT 0
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: LD_INT 1
16459: NEG
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 1
16467: NEG
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: LD_INT 2
16482: NEG
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: LD_INT 1
16493: NEG
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 0
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 1
16521: NEG
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: LD_INT 3
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 1
16552: NEG
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16579: LD_ADDR_VAR 0 12
16583: PUSH
16584: LD_INT 0
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 0
16596: PUSH
16597: LD_INT 1
16599: NEG
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: LD_INT 0
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: LD_INT 1
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 0
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 1
16637: NEG
16638: PUSH
16639: LD_INT 0
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 1
16648: NEG
16649: PUSH
16650: LD_INT 1
16652: NEG
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: LD_INT 1
16663: NEG
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 1
16691: NEG
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 2
16702: NEG
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: NEG
16714: PUSH
16715: LD_INT 1
16717: NEG
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 2
16725: NEG
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 3
16736: NEG
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 3
16747: NEG
16748: PUSH
16749: LD_INT 1
16751: NEG
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16775: LD_ADDR_VAR 0 13
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 0
16792: PUSH
16793: LD_INT 1
16795: NEG
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: LD_INT 0
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 1
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: LD_INT 1
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 1
16833: NEG
16834: PUSH
16835: LD_INT 0
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 1
16844: NEG
16845: PUSH
16846: LD_INT 1
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 1
16856: NEG
16857: PUSH
16858: LD_INT 2
16860: NEG
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 2
16868: PUSH
16869: LD_INT 1
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 2
16878: PUSH
16879: LD_INT 2
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: LD_INT 2
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: NEG
16899: PUSH
16900: LD_INT 1
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: NEG
16911: PUSH
16912: LD_INT 2
16914: NEG
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 2
16922: NEG
16923: PUSH
16924: LD_INT 3
16926: NEG
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 3
16934: NEG
16935: PUSH
16936: LD_INT 2
16938: NEG
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 3
16946: NEG
16947: PUSH
16948: LD_INT 3
16950: NEG
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16974: LD_ADDR_VAR 0 14
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: LD_INT 0
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: LD_INT 1
16994: NEG
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 1
17055: NEG
17056: PUSH
17057: LD_INT 2
17059: NEG
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 0
17067: PUSH
17068: LD_INT 2
17070: NEG
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: NEG
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: NEG
17121: PUSH
17122: LD_INT 3
17124: NEG
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 0
17132: PUSH
17133: LD_INT 3
17135: NEG
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: LD_INT 2
17146: NEG
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17170: LD_ADDR_VAR 0 15
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 0
17187: PUSH
17188: LD_INT 1
17190: NEG
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 1
17228: NEG
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: LD_INT 1
17243: NEG
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: LD_INT 1
17254: NEG
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: LD_INT 0
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 2
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: NEG
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 2
17293: NEG
17294: PUSH
17295: LD_INT 0
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: NEG
17305: PUSH
17306: LD_INT 1
17308: NEG
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 2
17316: PUSH
17317: LD_INT 1
17319: NEG
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 3
17327: PUSH
17328: LD_INT 0
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17363: LD_ADDR_VAR 0 16
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: LD_INT 1
17383: NEG
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: LD_INT 0
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 1
17421: NEG
17422: PUSH
17423: LD_INT 0
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 1
17432: NEG
17433: PUSH
17434: LD_INT 1
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: LD_INT 2
17448: NEG
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 2
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 2
17466: PUSH
17467: LD_INT 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 2
17486: NEG
17487: PUSH
17488: LD_INT 1
17490: NEG
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 2
17498: NEG
17499: PUSH
17500: LD_INT 2
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: LD_INT 2
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 3
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17556: LD_ADDR_VAR 0 17
17560: PUSH
17561: LD_INT 0
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 1
17614: NEG
17615: PUSH
17616: LD_INT 0
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 1
17625: NEG
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: NEG
17638: PUSH
17639: LD_INT 2
17641: NEG
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 0
17649: PUSH
17650: LD_INT 2
17652: NEG
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 1
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: PUSH
17672: LD_INT 0
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 2
17732: NEG
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: NEG
17744: PUSH
17745: LD_INT 1
17747: NEG
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 2
17755: NEG
17756: PUSH
17757: LD_INT 2
17759: NEG
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17786: LD_ADDR_VAR 0 18
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: PUSH
17815: LD_INT 0
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: NEG
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 1
17855: NEG
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 1
17867: NEG
17868: PUSH
17869: LD_INT 2
17871: NEG
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: LD_INT 2
17882: NEG
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 1
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 0
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 1
17951: NEG
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 2
17962: NEG
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 2
17973: NEG
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 2
17985: NEG
17986: PUSH
17987: LD_INT 2
17989: NEG
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18016: LD_ADDR_VAR 0 19
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: NEG
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 1
18097: NEG
18098: PUSH
18099: LD_INT 2
18101: NEG
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: LD_INT 2
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 2
18192: NEG
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: NEG
18204: PUSH
18205: LD_INT 1
18207: NEG
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 2
18215: NEG
18216: PUSH
18217: LD_INT 2
18219: NEG
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18246: LD_ADDR_VAR 0 20
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 1
18304: NEG
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: NEG
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 1
18327: NEG
18328: PUSH
18329: LD_INT 2
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 2
18342: NEG
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 1
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 1
18411: NEG
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 2
18422: NEG
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 2
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: NEG
18446: PUSH
18447: LD_INT 2
18449: NEG
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18476: LD_ADDR_VAR 0 21
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 1
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 0
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 1
18545: NEG
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: NEG
18558: PUSH
18559: LD_INT 2
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: LD_INT 2
18572: NEG
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 2
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: NEG
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: NEG
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 2
18675: NEG
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18706: LD_ADDR_VAR 0 22
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: NEG
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: LD_INT 2
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 2
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 2
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: NEG
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: NEG
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: NEG
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18936: LD_ADDR_VAR 0 23
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: LD_INT 2
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 1
19101: NEG
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: NEG
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: NEG
19136: PUSH
19137: LD_INT 2
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: LD_INT 3
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 3
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19216: LD_ADDR_VAR 0 24
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 1
19274: NEG
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 2
19312: NEG
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 2
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 2
19351: PUSH
19352: LD_INT 2
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: LD_INT 2
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 2
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 2
19392: NEG
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 2
19403: NEG
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: NEG
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: LD_INT 2
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 3
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 3
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19492: LD_ADDR_VAR 0 25
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: LD_INT 1
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 0
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: LD_INT 2
19577: NEG
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: LD_INT 2
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 1
19599: NEG
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 2
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 2
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: LD_INT 1
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 2
19668: NEG
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 2
19679: NEG
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 2
19691: NEG
19692: PUSH
19693: LD_INT 2
19695: NEG
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 3
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 3
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 3
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: LD_INT 3
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19766: LD_ADDR_VAR 0 26
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 0
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 0
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 2
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: NEG
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 2
19953: NEG
19954: PUSH
19955: LD_INT 1
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: LD_INT 2
19969: NEG
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: LD_INT 3
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: LD_INT 3
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20042: LD_ADDR_VAR 0 27
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: NEG
20101: PUSH
20102: LD_INT 0
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: LD_INT 1
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 1
20123: NEG
20124: PUSH
20125: LD_INT 2
20127: NEG
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: LD_INT 2
20138: NEG
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 1
20146: PUSH
20147: LD_INT 1
20149: NEG
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 2
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 2
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: NEG
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 2
20218: NEG
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 2
20264: NEG
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 3
20275: NEG
20276: PUSH
20277: LD_INT 1
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 3
20287: NEG
20288: PUSH
20289: LD_INT 2
20291: NEG
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20322: LD_ADDR_VAR 0 28
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: LD_INT 0
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: LD_INT 2
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 2
20521: NEG
20522: PUSH
20523: LD_INT 2
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 2
20533: NEG
20534: PUSH
20535: LD_INT 3
20537: NEG
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: LD_INT 3
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 3
20557: NEG
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 3
20569: NEG
20570: PUSH
20571: LD_INT 2
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20604: LD_ADDR_VAR 0 29
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: LD_INT 0
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: NEG
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: NEG
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 0
20697: PUSH
20698: LD_INT 2
20700: NEG
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: LD_INT 2
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: LD_INT 1
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 2
20782: NEG
20783: PUSH
20784: LD_INT 2
20786: NEG
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 2
20794: NEG
20795: PUSH
20796: LD_INT 3
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 2
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 3
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: LD_INT 3
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 3
20848: NEG
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20883: LD_ADDR_VAR 0 30
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: LD_INT 2
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: LD_INT 2
20979: NEG
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 2
21060: NEG
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: LD_INT 3
21076: NEG
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: LD_INT 2
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 2
21115: NEG
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 3
21126: NEG
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21161: LD_ADDR_VAR 0 31
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: LD_INT 2
21246: NEG
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 2
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 2
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 2
21326: NEG
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 2
21338: NEG
21339: PUSH
21340: LD_INT 2
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: LD_INT 3
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 3
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: LD_INT 3
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 3
21404: NEG
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21439: LD_ADDR_VAR 0 32
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: LD_INT 1
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 1
21508: NEG
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: LD_INT 2
21524: NEG
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: LD_INT 2
21535: NEG
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 2
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: LD_INT 1
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 2
21605: NEG
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: LD_INT 1
21620: NEG
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: LD_INT 3
21632: NEG
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: LD_INT 2
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 3
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: LD_INT 3
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 2
21671: NEG
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 3
21682: NEG
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21717: LD_ADDR_VAR 0 33
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: LD_INT 0
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 1
21786: NEG
21787: PUSH
21788: LD_INT 1
21790: NEG
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 1
21798: NEG
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: LD_INT 1
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 2
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: LD_INT 2
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: LD_INT 1
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: NEG
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: LD_INT 2
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: LD_INT 3
21911: NEG
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 3
21930: PUSH
21931: LD_INT 1
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: NEG
21962: PUSH
21963: LD_INT 2
21965: NEG
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21996: LD_ADDR_VAR 0 34
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: LD_INT 1
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: NEG
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: LD_INT 2
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: LD_INT 2
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: NEG
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: LD_INT 1
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: NEG
22176: PUSH
22177: LD_INT 2
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: NEG
22188: PUSH
22189: LD_INT 3
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 3
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 3
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 2
22230: NEG
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 3
22241: NEG
22242: PUSH
22243: LD_INT 1
22245: NEG
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22276: LD_ADDR_VAR 0 35
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 2
22367: NEG
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22388: LD_ADDR_VAR 0 36
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 0
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: LD_INT 0
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: LD_INT 2
22473: NEG
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22500: LD_ADDR_VAR 0 37
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: NEG
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22612: LD_ADDR_VAR 0 38
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: LD_INT 1
22632: NEG
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: NEG
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22724: LD_ADDR_VAR 0 39
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22836: LD_ADDR_VAR 0 40
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 0
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 1
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 0
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22948: LD_ADDR_VAR 0 41
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: LD_INT 1
22968: NEG
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: LD_INT 2
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 1
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 2
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 2
23103: NEG
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 2
23126: NEG
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 2
23138: NEG
23139: PUSH
23140: LD_INT 3
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 2
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 3
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 3
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 3
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: LD_INT 3
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 3
23222: NEG
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 3
23233: NEG
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 3
23245: NEG
23246: PUSH
23247: LD_INT 2
23249: NEG
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 3
23257: NEG
23258: PUSH
23259: LD_INT 3
23261: NEG
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23298: LD_ADDR_VAR 0 42
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 0
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: LD_INT 1
23371: NEG
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: LD_INT 2
23383: NEG
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 2
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 2
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: NEG
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 2
23476: NEG
23477: PUSH
23478: LD_INT 2
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: NEG
23489: PUSH
23490: LD_INT 3
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: NEG
23501: PUSH
23502: LD_INT 3
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: LD_INT 3
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 3
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 0
23574: PUSH
23575: LD_INT 3
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 1
23584: NEG
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 3
23595: NEG
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 3
23607: NEG
23608: PUSH
23609: LD_INT 3
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23648: LD_ADDR_VAR 0 43
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: LD_INT 2
23744: NEG
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: NEG
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 3
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: LD_INT 3
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 3
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 3
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 2
23933: NEG
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 3
23944: NEG
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 3
23955: NEG
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23996: LD_ADDR_VAR 0 44
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: NEG
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: LD_INT 2
24081: NEG
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: NEG
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 2
24162: NEG
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 2
24174: NEG
24175: PUSH
24176: LD_INT 2
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 2
24186: NEG
24187: PUSH
24188: LD_INT 3
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 3
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 3
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 3
24229: PUSH
24230: LD_INT 2
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: LD_INT 3
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: LD_INT 3
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 2
24259: NEG
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 3
24270: NEG
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 3
24281: NEG
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 3
24293: NEG
24294: PUSH
24295: LD_INT 2
24297: NEG
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 3
24305: NEG
24306: PUSH
24307: LD_INT 3
24309: NEG
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24346: LD_ADDR_VAR 0 45
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 2
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 2
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 1
24501: NEG
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 2
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: LD_INT 3
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: LD_INT 3
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 3
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 2
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 3
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 3
24592: PUSH
24593: LD_INT 3
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: LD_INT 3
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 3
24643: NEG
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 3
24655: NEG
24656: PUSH
24657: LD_INT 3
24659: NEG
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24696: LD_ADDR_VAR 0 46
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: LD_INT 3
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 3
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: LD_INT 2
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 3
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 3
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 2
24981: NEG
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 3
24992: NEG
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 3
25003: NEG
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25044: LD_ADDR_VAR 0 47
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: LD_INT 2
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 2
25171: NEG
25172: PUSH
25173: LD_INT 2
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25195: LD_ADDR_VAR 0 48
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: LD_INT 1
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: LD_INT 2
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 2
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25342: LD_ADDR_VAR 0 49
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: LD_INT 2
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25486: LD_ADDR_VAR 0 50
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: NEG
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: LD_INT 2
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 2
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25630: LD_ADDR_VAR 0 51
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25777: LD_ADDR_VAR 0 52
25781: PUSH
25782: LD_INT 0
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: LD_INT 1
25850: NEG
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: LD_INT 2
25862: NEG
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: LD_INT 2
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25928: LD_ADDR_VAR 0 53
25932: PUSH
25933: LD_INT 0
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: NEG
26010: PUSH
26011: LD_INT 2
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: LD_INT 2
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 2
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: NEG
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 2
26115: NEG
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: NEG
26128: PUSH
26129: LD_INT 2
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26158: LD_ADDR_VAR 0 54
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: LD_INT 2
26254: NEG
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: LD_INT 2
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: NEG
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 2
26345: NEG
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26388: LD_ADDR_VAR 0 55
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: LD_INT 2
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: LD_INT 2
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 2
26564: NEG
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: NEG
26588: PUSH
26589: LD_INT 2
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26618: LD_ADDR_VAR 0 56
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: LD_INT 2
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 2
26714: NEG
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: NEG
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26848: LD_ADDR_VAR 0 57
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: NEG
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27078: LD_ADDR_VAR 0 58
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 2
27254: NEG
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 2
27277: NEG
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27308: LD_ADDR_VAR 0 59
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27396: LD_ADDR_VAR 0 60
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27484: LD_ADDR_VAR 0 61
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27572: LD_ADDR_VAR 0 62
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27660: LD_ADDR_VAR 0 63
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: LD_INT 1
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27748: LD_ADDR_VAR 0 64
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// end ; 1 :
27836: GO 33733
27838: LD_INT 1
27840: DOUBLE
27841: EQUAL
27842: IFTRUE 27846
27844: GO 30469
27846: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27847: LD_ADDR_VAR 0 11
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: LD_INT 3
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 3
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27891: LD_ADDR_VAR 0 12
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 3
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 3
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27932: LD_ADDR_VAR 0 13
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 3
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: LD_INT 3
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27972: LD_ADDR_VAR 0 14
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 3
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28013: LD_ADDR_VAR 0 15
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 3
28031: NEG
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 3
28042: NEG
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28057: LD_ADDR_VAR 0 16
28061: PUSH
28062: LD_INT 2
28064: NEG
28065: PUSH
28066: LD_INT 3
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 3
28076: NEG
28077: PUSH
28078: LD_INT 2
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 3
28088: NEG
28089: PUSH
28090: LD_INT 3
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28103: LD_ADDR_VAR 0 17
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 3
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: LD_INT 3
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28147: LD_ADDR_VAR 0 18
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 3
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 3
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28188: LD_ADDR_VAR 0 19
28192: PUSH
28193: LD_INT 3
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: LD_INT 3
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: LD_INT 3
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28228: LD_ADDR_VAR 0 20
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 3
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28269: LD_ADDR_VAR 0 21
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 3
28287: NEG
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 3
28298: NEG
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28313: LD_ADDR_VAR 0 22
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: LD_INT 3
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: LD_INT 2
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 3
28344: NEG
28345: PUSH
28346: LD_INT 3
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28359: LD_ADDR_VAR 0 23
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 3
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: LD_INT 4
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 3
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28403: LD_ADDR_VAR 0 24
28407: PUSH
28408: LD_INT 3
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 3
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 4
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28444: LD_ADDR_VAR 0 25
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: LD_INT 3
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 4
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 3
28471: PUSH
28472: LD_INT 4
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28484: LD_ADDR_VAR 0 26
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 3
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: LD_INT 4
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: LD_INT 3
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28525: LD_ADDR_VAR 0 27
28529: PUSH
28530: LD_INT 3
28532: NEG
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 3
28543: NEG
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 4
28554: NEG
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28569: LD_ADDR_VAR 0 28
28573: PUSH
28574: LD_INT 3
28576: NEG
28577: PUSH
28578: LD_INT 3
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 3
28588: NEG
28589: PUSH
28590: LD_INT 4
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 4
28600: NEG
28601: PUSH
28602: LD_INT 3
28604: NEG
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28615: LD_ADDR_VAR 0 29
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: LD_INT 3
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 3
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 4
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: LD_INT 4
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 3
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 5
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: LD_INT 5
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: LD_INT 4
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: LD_INT 6
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: LD_INT 6
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 5
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28770: LD_ADDR_VAR 0 30
28774: PUSH
28775: LD_INT 2
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 3
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 3
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 4
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 4
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 4
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 5
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 5
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 5
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 6
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 6
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28913: LD_ADDR_VAR 0 31
28917: PUSH
28918: LD_INT 3
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 3
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 2
28940: PUSH
28941: LD_INT 3
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: LD_INT 3
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 4
28960: PUSH
28961: LD_INT 4
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 5
28980: PUSH
28981: LD_INT 4
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 5
28990: PUSH
28991: LD_INT 5
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: LD_INT 5
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 6
29010: PUSH
29011: LD_INT 5
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 6
29020: PUSH
29021: LD_INT 6
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 5
29030: PUSH
29031: LD_INT 6
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29052: LD_ADDR_VAR 0 32
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 3
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 3
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 4
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 4
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 5
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 5
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 4
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 6
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 6
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 5
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29195: LD_ADDR_VAR 0 33
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 3
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 3
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 3
29236: NEG
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 4
29247: NEG
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 4
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 4
29270: NEG
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 5
29281: NEG
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 5
29292: NEG
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 5
29304: NEG
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 6
29315: NEG
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 6
29326: NEG
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29350: LD_ADDR_VAR 0 34
29354: PUSH
29355: LD_INT 2
29357: NEG
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 3
29369: NEG
29370: PUSH
29371: LD_INT 2
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 3
29381: NEG
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 3
29393: NEG
29394: PUSH
29395: LD_INT 4
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 4
29405: NEG
29406: PUSH
29407: LD_INT 3
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 4
29417: NEG
29418: PUSH
29419: LD_INT 4
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 4
29429: NEG
29430: PUSH
29431: LD_INT 5
29433: NEG
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 5
29441: NEG
29442: PUSH
29443: LD_INT 4
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 5
29453: NEG
29454: PUSH
29455: LD_INT 5
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 5
29465: NEG
29466: PUSH
29467: LD_INT 6
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 6
29477: NEG
29478: PUSH
29479: LD_INT 5
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 6
29489: NEG
29490: PUSH
29491: LD_INT 6
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29513: LD_ADDR_VAR 0 41
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: PUSH
29533: LD_INT 3
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 2
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29557: LD_ADDR_VAR 0 42
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29598: LD_ADDR_VAR 0 43
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: LIST
29637: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29638: LD_ADDR_VAR 0 44
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: LD_INT 3
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29679: LD_ADDR_VAR 0 45
29683: PUSH
29684: LD_INT 2
29686: NEG
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: NEG
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29723: LD_ADDR_VAR 0 46
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 3
29754: NEG
29755: PUSH
29756: LD_INT 2
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29769: LD_ADDR_VAR 0 47
29773: PUSH
29774: LD_INT 2
29776: NEG
29777: PUSH
29778: LD_INT 3
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: LD_INT 3
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29802: LD_ADDR_VAR 0 48
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: LD_INT 2
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29833: LD_ADDR_VAR 0 49
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 3
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29862: LD_ADDR_VAR 0 50
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: LD_INT 3
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29891: LD_ADDR_VAR 0 51
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 2
29909: NEG
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29922: LD_ADDR_VAR 0 52
29926: PUSH
29927: LD_INT 3
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 3
29941: NEG
29942: PUSH
29943: LD_INT 2
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29955: LD_ADDR_VAR 0 53
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: LD_INT 3
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: LD_INT 3
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: LD_INT 2
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29999: LD_ADDR_VAR 0 54
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 3
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30040: LD_ADDR_VAR 0 55
30044: PUSH
30045: LD_INT 3
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30080: LD_ADDR_VAR 0 56
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 3
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 3
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30121: LD_ADDR_VAR 0 57
30125: PUSH
30126: LD_INT 2
30128: NEG
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 3
30139: NEG
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30165: LD_ADDR_VAR 0 58
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 3
30196: NEG
30197: PUSH
30198: LD_INT 3
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: LIST
30210: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30211: LD_ADDR_VAR 0 59
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 2
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: LIST
30254: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30255: LD_ADDR_VAR 0 60
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30296: LD_ADDR_VAR 0 61
30300: PUSH
30301: LD_INT 2
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 2
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30336: LD_ADDR_VAR 0 62
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30377: LD_ADDR_VAR 0 63
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: NEG
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30421: LD_ADDR_VAR 0 64
30425: PUSH
30426: LD_INT 1
30428: NEG
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 2
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// end ; 2 :
30467: GO 33733
30469: LD_INT 2
30471: DOUBLE
30472: EQUAL
30473: IFTRUE 30477
30475: GO 33732
30477: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30478: LD_ADDR_VAR 0 29
30482: PUSH
30483: LD_INT 4
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 4
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 3
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 3
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 2
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 4
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 4
30608: PUSH
30609: LD_INT 4
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 3
30618: PUSH
30619: LD_INT 4
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 3
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 4
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: LD_INT 4
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: LD_INT 4
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 3
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 4
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: PUSH
30699: LD_INT 5
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 5
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 4
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 5
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 2
30750: NEG
30751: PUSH
30752: LD_INT 3
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 3
30761: NEG
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 3
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 2
30784: NEG
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: NEG
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 3
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 4
30817: NEG
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 4
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 4
30840: NEG
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 4
30863: NEG
30864: PUSH
30865: LD_INT 4
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: LD_INT 5
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 3
30887: NEG
30888: PUSH
30889: LD_INT 4
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 3
30899: NEG
30900: PUSH
30901: LD_INT 3
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 4
30911: NEG
30912: PUSH
30913: LD_INT 3
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 5
30923: NEG
30924: PUSH
30925: LD_INT 4
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 5
30935: NEG
30936: PUSH
30937: LD_INT 5
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: NEG
30948: PUSH
30949: LD_INT 5
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 5
30959: NEG
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31016: LD_ADDR_VAR 0 30
31020: PUSH
31021: LD_INT 4
31023: PUSH
31024: LD_INT 4
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 4
31033: PUSH
31034: LD_INT 3
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 5
31043: PUSH
31044: LD_INT 4
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 5
31053: PUSH
31054: LD_INT 5
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 4
31063: PUSH
31064: LD_INT 5
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 3
31073: PUSH
31074: LD_INT 4
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 3
31083: PUSH
31084: LD_INT 3
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 5
31093: PUSH
31094: LD_INT 3
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 5
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: LD_INT 3
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 4
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 4
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: LD_INT 3
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 4
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 4
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: NEG
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 3
31240: NEG
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 4
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 5
31262: NEG
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 5
31273: NEG
31274: PUSH
31275: LD_INT 1
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 5
31285: NEG
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 3
31297: NEG
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: LD_INT 3
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 3
31320: NEG
31321: PUSH
31322: LD_INT 4
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: NEG
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 3
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 4
31368: NEG
31369: PUSH
31370: LD_INT 3
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 4
31380: NEG
31381: PUSH
31382: LD_INT 4
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: LD_INT 4
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 4
31404: NEG
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 4
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 5
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 4
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 3
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: LD_INT 3
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: LD_INT 4
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: LD_INT 5
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 3
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: LD_INT 5
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31563: LD_ADDR_VAR 0 31
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: LD_INT 4
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 4
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 5
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 5
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: LD_INT 4
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 3
31663: NEG
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: NEG
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 3
31708: NEG
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 4
31719: NEG
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 4
31730: NEG
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 4
31742: NEG
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 4
31765: NEG
31766: PUSH
31767: LD_INT 4
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 4
31777: NEG
31778: PUSH
31779: LD_INT 5
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 3
31789: NEG
31790: PUSH
31791: LD_INT 4
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 3
31801: NEG
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 4
31813: NEG
31814: PUSH
31815: LD_INT 3
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 5
31825: NEG
31826: PUSH
31827: LD_INT 4
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 5
31837: NEG
31838: PUSH
31839: LD_INT 5
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 3
31849: NEG
31850: PUSH
31851: LD_INT 5
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 5
31861: NEG
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 3
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 4
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: LD_INT 3
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 3
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: LD_INT 4
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 4
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 5
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 5
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 4
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 3
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 5
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32113: LD_ADDR_VAR 0 32
32117: PUSH
32118: LD_INT 4
32120: NEG
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 4
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 3
32154: NEG
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 4
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 5
32176: NEG
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 5
32187: NEG
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 5
32199: NEG
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 3
32222: NEG
32223: PUSH
32224: LD_INT 3
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 3
32234: NEG
32235: PUSH
32236: LD_INT 4
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 2
32246: NEG
32247: PUSH
32248: LD_INT 3
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: NEG
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 4
32282: NEG
32283: PUSH
32284: LD_INT 3
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 4
32294: NEG
32295: PUSH
32296: LD_INT 4
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: LD_INT 4
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 4
32318: NEG
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 4
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 5
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 4
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: LD_INT 3
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: LD_INT 4
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 5
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 3
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: LD_INT 5
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 3
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 3
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 4
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 4
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: LD_INT 2
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 4
32515: PUSH
32516: LD_INT 2
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 4
32525: PUSH
32526: LD_INT 4
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 4
32535: PUSH
32536: LD_INT 3
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 5
32545: PUSH
32546: LD_INT 4
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 5
32555: PUSH
32556: LD_INT 5
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 4
32565: PUSH
32566: LD_INT 5
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 3
32575: PUSH
32576: LD_INT 4
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 3
32585: PUSH
32586: LD_INT 3
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 5
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 3
32605: PUSH
32606: LD_INT 5
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32660: LD_ADDR_VAR 0 33
32664: PUSH
32665: LD_INT 4
32667: NEG
32668: PUSH
32669: LD_INT 4
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 4
32679: NEG
32680: PUSH
32681: LD_INT 5
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 3
32691: NEG
32692: PUSH
32693: LD_INT 4
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 3
32703: NEG
32704: PUSH
32705: LD_INT 3
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 4
32715: NEG
32716: PUSH
32717: LD_INT 3
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 5
32727: NEG
32728: PUSH
32729: LD_INT 4
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 5
32739: NEG
32740: PUSH
32741: LD_INT 5
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 3
32751: NEG
32752: PUSH
32753: LD_INT 5
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 5
32763: NEG
32764: PUSH
32765: LD_INT 3
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 3
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: LD_INT 4
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: LD_INT 4
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: LD_INT 4
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 4
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 4
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 5
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 5
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 4
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 3
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: LD_INT 2
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 3
32970: PUSH
32971: LD_INT 3
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 4
32990: PUSH
32991: LD_INT 3
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 4
33000: PUSH
33001: LD_INT 4
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 3
33010: PUSH
33011: LD_INT 4
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 3
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 4
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 5
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 5
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: LD_INT 4
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: LD_INT 5
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33198: LD_ADDR_VAR 0 34
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 4
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: LD_INT 5
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: LD_INT 4
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 3
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: LD_INT 4
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PUSH
33274: LD_INT 5
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 3
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: LD_INT 5
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 3
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 4
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 4
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: LD_INT 2
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 4
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: LD_INT 4
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 4
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: LD_INT 4
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 4
33440: PUSH
33441: LD_INT 5
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 3
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: LD_INT 5
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: LD_INT 2
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 3
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: LD_INT 4
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 4
33583: NEG
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: NEG
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 3
33606: NEG
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 3
33617: NEG
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 5
33639: NEG
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 5
33650: NEG
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 5
33662: NEG
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: ST_TO_ADDR
// end ; end ;
33730: GO 33733
33732: POP
// case btype of b_depot , b_warehouse :
33733: LD_VAR 0 1
33737: PUSH
33738: LD_INT 0
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33752
33744: LD_INT 1
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33953
33752: POP
// case nation of nation_american :
33753: LD_VAR 0 5
33757: PUSH
33758: LD_INT 1
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33766
33764: GO 33822
33766: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33767: LD_ADDR_VAR 0 9
33771: PUSH
33772: LD_VAR 0 11
33776: PUSH
33777: LD_VAR 0 12
33781: PUSH
33782: LD_VAR 0 13
33786: PUSH
33787: LD_VAR 0 14
33791: PUSH
33792: LD_VAR 0 15
33796: PUSH
33797: LD_VAR 0 16
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: PUSH
33810: LD_VAR 0 4
33814: PUSH
33815: LD_INT 1
33817: PLUS
33818: ARRAY
33819: ST_TO_ADDR
33820: GO 33951
33822: LD_INT 2
33824: DOUBLE
33825: EQUAL
33826: IFTRUE 33830
33828: GO 33886
33830: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33831: LD_ADDR_VAR 0 9
33835: PUSH
33836: LD_VAR 0 17
33840: PUSH
33841: LD_VAR 0 18
33845: PUSH
33846: LD_VAR 0 19
33850: PUSH
33851: LD_VAR 0 20
33855: PUSH
33856: LD_VAR 0 21
33860: PUSH
33861: LD_VAR 0 22
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: PUSH
33874: LD_VAR 0 4
33878: PUSH
33879: LD_INT 1
33881: PLUS
33882: ARRAY
33883: ST_TO_ADDR
33884: GO 33951
33886: LD_INT 3
33888: DOUBLE
33889: EQUAL
33890: IFTRUE 33894
33892: GO 33950
33894: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33895: LD_ADDR_VAR 0 9
33899: PUSH
33900: LD_VAR 0 23
33904: PUSH
33905: LD_VAR 0 24
33909: PUSH
33910: LD_VAR 0 25
33914: PUSH
33915: LD_VAR 0 26
33919: PUSH
33920: LD_VAR 0 27
33924: PUSH
33925: LD_VAR 0 28
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: PUSH
33938: LD_VAR 0 4
33942: PUSH
33943: LD_INT 1
33945: PLUS
33946: ARRAY
33947: ST_TO_ADDR
33948: GO 33951
33950: POP
33951: GO 34506
33953: LD_INT 2
33955: DOUBLE
33956: EQUAL
33957: IFTRUE 33967
33959: LD_INT 3
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 34023
33967: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33968: LD_ADDR_VAR 0 9
33972: PUSH
33973: LD_VAR 0 29
33977: PUSH
33978: LD_VAR 0 30
33982: PUSH
33983: LD_VAR 0 31
33987: PUSH
33988: LD_VAR 0 32
33992: PUSH
33993: LD_VAR 0 33
33997: PUSH
33998: LD_VAR 0 34
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: PUSH
34011: LD_VAR 0 4
34015: PUSH
34016: LD_INT 1
34018: PLUS
34019: ARRAY
34020: ST_TO_ADDR
34021: GO 34506
34023: LD_INT 16
34025: DOUBLE
34026: EQUAL
34027: IFTRUE 34085
34029: LD_INT 17
34031: DOUBLE
34032: EQUAL
34033: IFTRUE 34085
34035: LD_INT 18
34037: DOUBLE
34038: EQUAL
34039: IFTRUE 34085
34041: LD_INT 19
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34085
34047: LD_INT 22
34049: DOUBLE
34050: EQUAL
34051: IFTRUE 34085
34053: LD_INT 20
34055: DOUBLE
34056: EQUAL
34057: IFTRUE 34085
34059: LD_INT 21
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34085
34065: LD_INT 23
34067: DOUBLE
34068: EQUAL
34069: IFTRUE 34085
34071: LD_INT 24
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34085
34077: LD_INT 25
34079: DOUBLE
34080: EQUAL
34081: IFTRUE 34085
34083: GO 34141
34085: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34086: LD_ADDR_VAR 0 9
34090: PUSH
34091: LD_VAR 0 35
34095: PUSH
34096: LD_VAR 0 36
34100: PUSH
34101: LD_VAR 0 37
34105: PUSH
34106: LD_VAR 0 38
34110: PUSH
34111: LD_VAR 0 39
34115: PUSH
34116: LD_VAR 0 40
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: PUSH
34129: LD_VAR 0 4
34133: PUSH
34134: LD_INT 1
34136: PLUS
34137: ARRAY
34138: ST_TO_ADDR
34139: GO 34506
34141: LD_INT 6
34143: DOUBLE
34144: EQUAL
34145: IFTRUE 34197
34147: LD_INT 7
34149: DOUBLE
34150: EQUAL
34151: IFTRUE 34197
34153: LD_INT 8
34155: DOUBLE
34156: EQUAL
34157: IFTRUE 34197
34159: LD_INT 13
34161: DOUBLE
34162: EQUAL
34163: IFTRUE 34197
34165: LD_INT 12
34167: DOUBLE
34168: EQUAL
34169: IFTRUE 34197
34171: LD_INT 15
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34197
34177: LD_INT 11
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34197
34183: LD_INT 14
34185: DOUBLE
34186: EQUAL
34187: IFTRUE 34197
34189: LD_INT 10
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34253
34197: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34198: LD_ADDR_VAR 0 9
34202: PUSH
34203: LD_VAR 0 41
34207: PUSH
34208: LD_VAR 0 42
34212: PUSH
34213: LD_VAR 0 43
34217: PUSH
34218: LD_VAR 0 44
34222: PUSH
34223: LD_VAR 0 45
34227: PUSH
34228: LD_VAR 0 46
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: PUSH
34241: LD_VAR 0 4
34245: PUSH
34246: LD_INT 1
34248: PLUS
34249: ARRAY
34250: ST_TO_ADDR
34251: GO 34506
34253: LD_INT 36
34255: DOUBLE
34256: EQUAL
34257: IFTRUE 34261
34259: GO 34317
34261: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34262: LD_ADDR_VAR 0 9
34266: PUSH
34267: LD_VAR 0 47
34271: PUSH
34272: LD_VAR 0 48
34276: PUSH
34277: LD_VAR 0 49
34281: PUSH
34282: LD_VAR 0 50
34286: PUSH
34287: LD_VAR 0 51
34291: PUSH
34292: LD_VAR 0 52
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: PUSH
34305: LD_VAR 0 4
34309: PUSH
34310: LD_INT 1
34312: PLUS
34313: ARRAY
34314: ST_TO_ADDR
34315: GO 34506
34317: LD_INT 4
34319: DOUBLE
34320: EQUAL
34321: IFTRUE 34343
34323: LD_INT 5
34325: DOUBLE
34326: EQUAL
34327: IFTRUE 34343
34329: LD_INT 34
34331: DOUBLE
34332: EQUAL
34333: IFTRUE 34343
34335: LD_INT 37
34337: DOUBLE
34338: EQUAL
34339: IFTRUE 34343
34341: GO 34399
34343: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34344: LD_ADDR_VAR 0 9
34348: PUSH
34349: LD_VAR 0 53
34353: PUSH
34354: LD_VAR 0 54
34358: PUSH
34359: LD_VAR 0 55
34363: PUSH
34364: LD_VAR 0 56
34368: PUSH
34369: LD_VAR 0 57
34373: PUSH
34374: LD_VAR 0 58
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: PUSH
34387: LD_VAR 0 4
34391: PUSH
34392: LD_INT 1
34394: PLUS
34395: ARRAY
34396: ST_TO_ADDR
34397: GO 34506
34399: LD_INT 31
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34449
34405: LD_INT 32
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34449
34411: LD_INT 33
34413: DOUBLE
34414: EQUAL
34415: IFTRUE 34449
34417: LD_INT 27
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34449
34423: LD_INT 26
34425: DOUBLE
34426: EQUAL
34427: IFTRUE 34449
34429: LD_INT 28
34431: DOUBLE
34432: EQUAL
34433: IFTRUE 34449
34435: LD_INT 29
34437: DOUBLE
34438: EQUAL
34439: IFTRUE 34449
34441: LD_INT 30
34443: DOUBLE
34444: EQUAL
34445: IFTRUE 34449
34447: GO 34505
34449: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34450: LD_ADDR_VAR 0 9
34454: PUSH
34455: LD_VAR 0 59
34459: PUSH
34460: LD_VAR 0 60
34464: PUSH
34465: LD_VAR 0 61
34469: PUSH
34470: LD_VAR 0 62
34474: PUSH
34475: LD_VAR 0 63
34479: PUSH
34480: LD_VAR 0 64
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: PUSH
34493: LD_VAR 0 4
34497: PUSH
34498: LD_INT 1
34500: PLUS
34501: ARRAY
34502: ST_TO_ADDR
34503: GO 34506
34505: POP
// temp_list2 = [ ] ;
34506: LD_ADDR_VAR 0 10
34510: PUSH
34511: EMPTY
34512: ST_TO_ADDR
// for i in temp_list do
34513: LD_ADDR_VAR 0 8
34517: PUSH
34518: LD_VAR 0 9
34522: PUSH
34523: FOR_IN
34524: IFFALSE 34576
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34526: LD_ADDR_VAR 0 10
34530: PUSH
34531: LD_VAR 0 10
34535: PUSH
34536: LD_VAR 0 8
34540: PUSH
34541: LD_INT 1
34543: ARRAY
34544: PUSH
34545: LD_VAR 0 2
34549: PLUS
34550: PUSH
34551: LD_VAR 0 8
34555: PUSH
34556: LD_INT 2
34558: ARRAY
34559: PUSH
34560: LD_VAR 0 3
34564: PLUS
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: EMPTY
34571: LIST
34572: ADD
34573: ST_TO_ADDR
34574: GO 34523
34576: POP
34577: POP
// result = temp_list2 ;
34578: LD_ADDR_VAR 0 7
34582: PUSH
34583: LD_VAR 0 10
34587: ST_TO_ADDR
// end ;
34588: LD_VAR 0 7
34592: RET
// export function EnemyInRange ( unit , dist ) ; begin
34593: LD_INT 0
34595: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34596: LD_ADDR_VAR 0 3
34600: PUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: CALL_OW 255
34610: PPUSH
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 250
34620: PPUSH
34621: LD_VAR 0 1
34625: PPUSH
34626: CALL_OW 251
34630: PPUSH
34631: LD_VAR 0 2
34635: PPUSH
34636: CALL 7850 0 4
34640: PUSH
34641: LD_INT 4
34643: ARRAY
34644: ST_TO_ADDR
// end ;
34645: LD_VAR 0 3
34649: RET
// export function PlayerSeeMe ( unit ) ; begin
34650: LD_INT 0
34652: PPUSH
// result := See ( your_side , unit ) ;
34653: LD_ADDR_VAR 0 2
34657: PUSH
34658: LD_OWVAR 2
34662: PPUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 292
34672: ST_TO_ADDR
// end ;
34673: LD_VAR 0 2
34677: RET
// export function ReverseDir ( unit ) ; begin
34678: LD_INT 0
34680: PPUSH
// if not unit then
34681: LD_VAR 0 1
34685: NOT
34686: IFFALSE 34690
// exit ;
34688: GO 34713
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34690: LD_ADDR_VAR 0 2
34694: PUSH
34695: LD_VAR 0 1
34699: PPUSH
34700: CALL_OW 254
34704: PUSH
34705: LD_INT 3
34707: PLUS
34708: PUSH
34709: LD_INT 6
34711: MOD
34712: ST_TO_ADDR
// end ;
34713: LD_VAR 0 2
34717: RET
// export function ReverseArray ( array ) ; var i ; begin
34718: LD_INT 0
34720: PPUSH
34721: PPUSH
// if not array then
34722: LD_VAR 0 1
34726: NOT
34727: IFFALSE 34731
// exit ;
34729: GO 34786
// result := [ ] ;
34731: LD_ADDR_VAR 0 2
34735: PUSH
34736: EMPTY
34737: ST_TO_ADDR
// for i := array downto 1 do
34738: LD_ADDR_VAR 0 3
34742: PUSH
34743: DOUBLE
34744: LD_VAR 0 1
34748: INC
34749: ST_TO_ADDR
34750: LD_INT 1
34752: PUSH
34753: FOR_DOWNTO
34754: IFFALSE 34784
// result := Join ( result , array [ i ] ) ;
34756: LD_ADDR_VAR 0 2
34760: PUSH
34761: LD_VAR 0 2
34765: PPUSH
34766: LD_VAR 0 1
34770: PUSH
34771: LD_VAR 0 3
34775: ARRAY
34776: PPUSH
34777: CALL 39638 0 2
34781: ST_TO_ADDR
34782: GO 34753
34784: POP
34785: POP
// end ;
34786: LD_VAR 0 2
34790: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34791: LD_INT 0
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
// if not unit or not hexes then
34799: LD_VAR 0 1
34803: NOT
34804: IFTRUE 34813
34806: PUSH
34807: LD_VAR 0 2
34811: NOT
34812: OR
34813: IFFALSE 34817
// exit ;
34815: GO 34940
// dist := 9999 ;
34817: LD_ADDR_VAR 0 5
34821: PUSH
34822: LD_INT 9999
34824: ST_TO_ADDR
// for i = 1 to hexes do
34825: LD_ADDR_VAR 0 4
34829: PUSH
34830: DOUBLE
34831: LD_INT 1
34833: DEC
34834: ST_TO_ADDR
34835: LD_VAR 0 2
34839: PUSH
34840: FOR_TO
34841: IFFALSE 34928
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34843: LD_ADDR_VAR 0 6
34847: PUSH
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_VAR 0 2
34857: PUSH
34858: LD_VAR 0 4
34862: ARRAY
34863: PUSH
34864: LD_INT 1
34866: ARRAY
34867: PPUSH
34868: LD_VAR 0 2
34872: PUSH
34873: LD_VAR 0 4
34877: ARRAY
34878: PUSH
34879: LD_INT 2
34881: ARRAY
34882: PPUSH
34883: CALL_OW 297
34887: ST_TO_ADDR
// if tdist < dist then
34888: LD_VAR 0 6
34892: PUSH
34893: LD_VAR 0 5
34897: LESS
34898: IFFALSE 34926
// begin hex := hexes [ i ] ;
34900: LD_ADDR_VAR 0 8
34904: PUSH
34905: LD_VAR 0 2
34909: PUSH
34910: LD_VAR 0 4
34914: ARRAY
34915: ST_TO_ADDR
// dist := tdist ;
34916: LD_ADDR_VAR 0 5
34920: PUSH
34921: LD_VAR 0 6
34925: ST_TO_ADDR
// end ; end ;
34926: GO 34840
34928: POP
34929: POP
// result := hex ;
34930: LD_ADDR_VAR 0 3
34934: PUSH
34935: LD_VAR 0 8
34939: ST_TO_ADDR
// end ;
34940: LD_VAR 0 3
34944: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34945: LD_INT 0
34947: PPUSH
34948: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34949: LD_VAR 0 1
34953: NOT
34954: IFTRUE 34993
34956: PUSH
34957: LD_VAR 0 1
34961: PUSH
34962: LD_INT 21
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 23
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PPUSH
34986: CALL_OW 69
34990: IN
34991: NOT
34992: OR
34993: IFFALSE 34997
// exit ;
34995: GO 35044
// for i = 1 to 3 do
34997: LD_ADDR_VAR 0 3
35001: PUSH
35002: DOUBLE
35003: LD_INT 1
35005: DEC
35006: ST_TO_ADDR
35007: LD_INT 3
35009: PUSH
35010: FOR_TO
35011: IFFALSE 35042
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35013: LD_VAR 0 1
35017: PPUSH
35018: CALL_OW 250
35022: PPUSH
35023: LD_VAR 0 1
35027: PPUSH
35028: CALL_OW 251
35032: PPUSH
35033: LD_INT 1
35035: PPUSH
35036: CALL_OW 453
35040: GO 35010
35042: POP
35043: POP
// end ;
35044: LD_VAR 0 2
35048: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35049: LD_INT 0
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
// if not unit or not enemy_unit then
35057: LD_VAR 0 1
35061: NOT
35062: IFTRUE 35071
35064: PUSH
35065: LD_VAR 0 2
35069: NOT
35070: OR
35071: IFFALSE 35075
// exit ;
35073: GO 35556
// if GetLives ( i ) < 250 then
35075: LD_VAR 0 4
35079: PPUSH
35080: CALL_OW 256
35084: PUSH
35085: LD_INT 250
35087: LESS
35088: IFFALSE 35101
// begin ComAutodestruct ( i ) ;
35090: LD_VAR 0 4
35094: PPUSH
35095: CALL 34945 0 1
// exit ;
35099: GO 35556
// end ; x := GetX ( enemy_unit ) ;
35101: LD_ADDR_VAR 0 7
35105: PUSH
35106: LD_VAR 0 2
35110: PPUSH
35111: CALL_OW 250
35115: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35116: LD_ADDR_VAR 0 8
35120: PUSH
35121: LD_VAR 0 2
35125: PPUSH
35126: CALL_OW 251
35130: ST_TO_ADDR
// if not x or not y then
35131: LD_VAR 0 7
35135: NOT
35136: IFTRUE 35145
35138: PUSH
35139: LD_VAR 0 8
35143: NOT
35144: OR
35145: IFFALSE 35149
// exit ;
35147: GO 35556
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35149: LD_ADDR_VAR 0 6
35153: PUSH
35154: LD_VAR 0 7
35158: PPUSH
35159: LD_INT 0
35161: PPUSH
35162: LD_INT 4
35164: PPUSH
35165: CALL_OW 272
35169: PUSH
35170: LD_VAR 0 8
35174: PPUSH
35175: LD_INT 0
35177: PPUSH
35178: LD_INT 4
35180: PPUSH
35181: CALL_OW 273
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_VAR 0 7
35194: PPUSH
35195: LD_INT 1
35197: PPUSH
35198: LD_INT 4
35200: PPUSH
35201: CALL_OW 272
35205: PUSH
35206: LD_VAR 0 8
35210: PPUSH
35211: LD_INT 1
35213: PPUSH
35214: LD_INT 4
35216: PPUSH
35217: CALL_OW 273
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_VAR 0 7
35230: PPUSH
35231: LD_INT 2
35233: PPUSH
35234: LD_INT 4
35236: PPUSH
35237: CALL_OW 272
35241: PUSH
35242: LD_VAR 0 8
35246: PPUSH
35247: LD_INT 2
35249: PPUSH
35250: LD_INT 4
35252: PPUSH
35253: CALL_OW 273
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_VAR 0 7
35266: PPUSH
35267: LD_INT 3
35269: PPUSH
35270: LD_INT 4
35272: PPUSH
35273: CALL_OW 272
35277: PUSH
35278: LD_VAR 0 8
35282: PPUSH
35283: LD_INT 3
35285: PPUSH
35286: LD_INT 4
35288: PPUSH
35289: CALL_OW 273
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_VAR 0 7
35302: PPUSH
35303: LD_INT 4
35305: PPUSH
35306: LD_INT 4
35308: PPUSH
35309: CALL_OW 272
35313: PUSH
35314: LD_VAR 0 8
35318: PPUSH
35319: LD_INT 4
35321: PPUSH
35322: LD_INT 4
35324: PPUSH
35325: CALL_OW 273
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_VAR 0 7
35338: PPUSH
35339: LD_INT 5
35341: PPUSH
35342: LD_INT 4
35344: PPUSH
35345: CALL_OW 272
35349: PUSH
35350: LD_VAR 0 8
35354: PPUSH
35355: LD_INT 5
35357: PPUSH
35358: LD_INT 4
35360: PPUSH
35361: CALL_OW 273
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// for i = tmp downto 1 do
35378: LD_ADDR_VAR 0 4
35382: PUSH
35383: DOUBLE
35384: LD_VAR 0 6
35388: INC
35389: ST_TO_ADDR
35390: LD_INT 1
35392: PUSH
35393: FOR_DOWNTO
35394: IFFALSE 35497
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35396: LD_VAR 0 6
35400: PUSH
35401: LD_VAR 0 4
35405: ARRAY
35406: PUSH
35407: LD_INT 1
35409: ARRAY
35410: PPUSH
35411: LD_VAR 0 6
35415: PUSH
35416: LD_VAR 0 4
35420: ARRAY
35421: PUSH
35422: LD_INT 2
35424: ARRAY
35425: PPUSH
35426: CALL_OW 488
35430: NOT
35431: IFTRUE 35473
35433: PUSH
35434: LD_VAR 0 6
35438: PUSH
35439: LD_VAR 0 4
35443: ARRAY
35444: PUSH
35445: LD_INT 1
35447: ARRAY
35448: PPUSH
35449: LD_VAR 0 6
35453: PUSH
35454: LD_VAR 0 4
35458: ARRAY
35459: PUSH
35460: LD_INT 2
35462: ARRAY
35463: PPUSH
35464: CALL_OW 428
35468: PUSH
35469: LD_INT 0
35471: NONEQUAL
35472: OR
35473: IFFALSE 35495
// tmp := Delete ( tmp , i ) ;
35475: LD_ADDR_VAR 0 6
35479: PUSH
35480: LD_VAR 0 6
35484: PPUSH
35485: LD_VAR 0 4
35489: PPUSH
35490: CALL_OW 3
35494: ST_TO_ADDR
35495: GO 35393
35497: POP
35498: POP
// j := GetClosestHex ( unit , tmp ) ;
35499: LD_ADDR_VAR 0 5
35503: PUSH
35504: LD_VAR 0 1
35508: PPUSH
35509: LD_VAR 0 6
35513: PPUSH
35514: CALL 34791 0 2
35518: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35519: LD_VAR 0 1
35523: PPUSH
35524: LD_VAR 0 5
35528: PUSH
35529: LD_INT 1
35531: ARRAY
35532: PPUSH
35533: LD_VAR 0 5
35537: PUSH
35538: LD_INT 2
35540: ARRAY
35541: PPUSH
35542: CALL_OW 111
// result := j ;
35546: LD_ADDR_VAR 0 3
35550: PUSH
35551: LD_VAR 0 5
35555: ST_TO_ADDR
// end ;
35556: LD_VAR 0 3
35560: RET
// export function PrepareApemanSoldier ( ) ; begin
35561: LD_INT 0
35563: PPUSH
// uc_nation := 0 ;
35564: LD_ADDR_OWVAR 21
35568: PUSH
35569: LD_INT 0
35571: ST_TO_ADDR
// hc_sex := sex_male ;
35572: LD_ADDR_OWVAR 27
35576: PUSH
35577: LD_INT 1
35579: ST_TO_ADDR
// hc_name :=  ;
35580: LD_ADDR_OWVAR 26
35584: PUSH
35585: LD_STRING 
35587: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35588: LD_ADDR_OWVAR 28
35592: PUSH
35593: LD_INT 15
35595: ST_TO_ADDR
// hc_gallery :=  ;
35596: LD_ADDR_OWVAR 33
35600: PUSH
35601: LD_STRING 
35603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35604: LD_ADDR_OWVAR 31
35608: PUSH
35609: LD_INT 0
35611: PPUSH
35612: LD_INT 3
35614: PPUSH
35615: CALL_OW 12
35619: PUSH
35620: LD_INT 0
35622: PPUSH
35623: LD_INT 3
35625: PPUSH
35626: CALL_OW 12
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35643: LD_ADDR_OWVAR 29
35647: PUSH
35648: LD_INT 10
35650: PUSH
35651: LD_INT 12
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: ST_TO_ADDR
// end ;
35658: LD_VAR 0 1
35662: RET
// export function PrepareApemanEngineer ( ) ; begin
35663: LD_INT 0
35665: PPUSH
// uc_nation := 0 ;
35666: LD_ADDR_OWVAR 21
35670: PUSH
35671: LD_INT 0
35673: ST_TO_ADDR
// hc_sex := sex_male ;
35674: LD_ADDR_OWVAR 27
35678: PUSH
35679: LD_INT 1
35681: ST_TO_ADDR
// hc_name :=  ;
35682: LD_ADDR_OWVAR 26
35686: PUSH
35687: LD_STRING 
35689: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35690: LD_ADDR_OWVAR 28
35694: PUSH
35695: LD_INT 16
35697: ST_TO_ADDR
// hc_gallery :=  ;
35698: LD_ADDR_OWVAR 33
35702: PUSH
35703: LD_STRING 
35705: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35706: LD_ADDR_OWVAR 31
35710: PUSH
35711: LD_INT 0
35713: PPUSH
35714: LD_INT 3
35716: PPUSH
35717: CALL_OW 12
35721: PUSH
35722: LD_INT 0
35724: PPUSH
35725: LD_INT 3
35727: PPUSH
35728: CALL_OW 12
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35745: LD_ADDR_OWVAR 29
35749: PUSH
35750: LD_INT 10
35752: PUSH
35753: LD_INT 12
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: ST_TO_ADDR
// end ;
35760: LD_VAR 0 1
35764: RET
// export function PrepareApeman ( agressivity ) ; begin
35765: LD_INT 0
35767: PPUSH
// uc_side := 0 ;
35768: LD_ADDR_OWVAR 20
35772: PUSH
35773: LD_INT 0
35775: ST_TO_ADDR
// uc_nation := 0 ;
35776: LD_ADDR_OWVAR 21
35780: PUSH
35781: LD_INT 0
35783: ST_TO_ADDR
// hc_sex := sex_male ;
35784: LD_ADDR_OWVAR 27
35788: PUSH
35789: LD_INT 1
35791: ST_TO_ADDR
// hc_class := class_apeman ;
35792: LD_ADDR_OWVAR 28
35796: PUSH
35797: LD_INT 12
35799: ST_TO_ADDR
// hc_gallery :=  ;
35800: LD_ADDR_OWVAR 33
35804: PUSH
35805: LD_STRING 
35807: ST_TO_ADDR
// hc_name :=  ;
35808: LD_ADDR_OWVAR 26
35812: PUSH
35813: LD_STRING 
35815: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35816: LD_ADDR_OWVAR 29
35820: PUSH
35821: LD_INT 10
35823: PUSH
35824: LD_INT 12
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// if agressivity = 0 then
35831: LD_VAR 0 1
35835: PUSH
35836: LD_INT 0
35838: EQUAL
35839: IFFALSE 35851
// hc_agressivity := 0 else
35841: LD_ADDR_OWVAR 35
35845: PUSH
35846: LD_INT 0
35848: ST_TO_ADDR
35849: GO 35872
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35851: LD_ADDR_OWVAR 35
35855: PUSH
35856: LD_VAR 0 1
35860: NEG
35861: PPUSH
35862: LD_VAR 0 1
35866: PPUSH
35867: CALL_OW 12
35871: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35872: LD_ADDR_OWVAR 31
35876: PUSH
35877: LD_INT 0
35879: PPUSH
35880: LD_INT 3
35882: PPUSH
35883: CALL_OW 12
35887: PUSH
35888: LD_INT 0
35890: PPUSH
35891: LD_INT 3
35893: PPUSH
35894: CALL_OW 12
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
// end ;
35911: LD_VAR 0 2
35915: RET
// export function PrepareTiger ( agressivity ) ; begin
35916: LD_INT 0
35918: PPUSH
// uc_side := 0 ;
35919: LD_ADDR_OWVAR 20
35923: PUSH
35924: LD_INT 0
35926: ST_TO_ADDR
// uc_nation := 0 ;
35927: LD_ADDR_OWVAR 21
35931: PUSH
35932: LD_INT 0
35934: ST_TO_ADDR
// InitHc ;
35935: CALL_OW 19
// hc_class := class_tiger ;
35939: LD_ADDR_OWVAR 28
35943: PUSH
35944: LD_INT 14
35946: ST_TO_ADDR
// hc_gallery :=  ;
35947: LD_ADDR_OWVAR 33
35951: PUSH
35952: LD_STRING 
35954: ST_TO_ADDR
// hc_name :=  ;
35955: LD_ADDR_OWVAR 26
35959: PUSH
35960: LD_STRING 
35962: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35963: LD_ADDR_OWVAR 35
35967: PUSH
35968: LD_VAR 0 1
35972: NEG
35973: PPUSH
35974: LD_VAR 0 1
35978: PPUSH
35979: CALL_OW 12
35983: ST_TO_ADDR
// end ;
35984: LD_VAR 0 2
35988: RET
// export function PrepareEnchidna ( ) ; begin
35989: LD_INT 0
35991: PPUSH
// uc_side := 0 ;
35992: LD_ADDR_OWVAR 20
35996: PUSH
35997: LD_INT 0
35999: ST_TO_ADDR
// uc_nation := 0 ;
36000: LD_ADDR_OWVAR 21
36004: PUSH
36005: LD_INT 0
36007: ST_TO_ADDR
// InitHc ;
36008: CALL_OW 19
// hc_class := class_baggie ;
36012: LD_ADDR_OWVAR 28
36016: PUSH
36017: LD_INT 13
36019: ST_TO_ADDR
// hc_gallery :=  ;
36020: LD_ADDR_OWVAR 33
36024: PUSH
36025: LD_STRING 
36027: ST_TO_ADDR
// hc_name :=  ;
36028: LD_ADDR_OWVAR 26
36032: PUSH
36033: LD_STRING 
36035: ST_TO_ADDR
// end ;
36036: LD_VAR 0 1
36040: RET
// export function PrepareFrog ( ) ; begin
36041: LD_INT 0
36043: PPUSH
// uc_side := 0 ;
36044: LD_ADDR_OWVAR 20
36048: PUSH
36049: LD_INT 0
36051: ST_TO_ADDR
// uc_nation := 0 ;
36052: LD_ADDR_OWVAR 21
36056: PUSH
36057: LD_INT 0
36059: ST_TO_ADDR
// InitHc ;
36060: CALL_OW 19
// hc_class := class_frog ;
36064: LD_ADDR_OWVAR 28
36068: PUSH
36069: LD_INT 19
36071: ST_TO_ADDR
// hc_gallery :=  ;
36072: LD_ADDR_OWVAR 33
36076: PUSH
36077: LD_STRING 
36079: ST_TO_ADDR
// hc_name :=  ;
36080: LD_ADDR_OWVAR 26
36084: PUSH
36085: LD_STRING 
36087: ST_TO_ADDR
// end ;
36088: LD_VAR 0 1
36092: RET
// export function PrepareFish ( ) ; begin
36093: LD_INT 0
36095: PPUSH
// uc_side := 0 ;
36096: LD_ADDR_OWVAR 20
36100: PUSH
36101: LD_INT 0
36103: ST_TO_ADDR
// uc_nation := 0 ;
36104: LD_ADDR_OWVAR 21
36108: PUSH
36109: LD_INT 0
36111: ST_TO_ADDR
// InitHc ;
36112: CALL_OW 19
// hc_class := class_fish ;
36116: LD_ADDR_OWVAR 28
36120: PUSH
36121: LD_INT 20
36123: ST_TO_ADDR
// hc_gallery :=  ;
36124: LD_ADDR_OWVAR 33
36128: PUSH
36129: LD_STRING 
36131: ST_TO_ADDR
// hc_name :=  ;
36132: LD_ADDR_OWVAR 26
36136: PUSH
36137: LD_STRING 
36139: ST_TO_ADDR
// end ;
36140: LD_VAR 0 1
36144: RET
// export function PrepareBird ( ) ; begin
36145: LD_INT 0
36147: PPUSH
// uc_side := 0 ;
36148: LD_ADDR_OWVAR 20
36152: PUSH
36153: LD_INT 0
36155: ST_TO_ADDR
// uc_nation := 0 ;
36156: LD_ADDR_OWVAR 21
36160: PUSH
36161: LD_INT 0
36163: ST_TO_ADDR
// InitHc ;
36164: CALL_OW 19
// hc_class := class_phororhacos ;
36168: LD_ADDR_OWVAR 28
36172: PUSH
36173: LD_INT 18
36175: ST_TO_ADDR
// hc_gallery :=  ;
36176: LD_ADDR_OWVAR 33
36180: PUSH
36181: LD_STRING 
36183: ST_TO_ADDR
// hc_name :=  ;
36184: LD_ADDR_OWVAR 26
36188: PUSH
36189: LD_STRING 
36191: ST_TO_ADDR
// end ;
36192: LD_VAR 0 1
36196: RET
// export function PrepareHorse ( ) ; begin
36197: LD_INT 0
36199: PPUSH
// uc_side := 0 ;
36200: LD_ADDR_OWVAR 20
36204: PUSH
36205: LD_INT 0
36207: ST_TO_ADDR
// uc_nation := 0 ;
36208: LD_ADDR_OWVAR 21
36212: PUSH
36213: LD_INT 0
36215: ST_TO_ADDR
// InitHc ;
36216: CALL_OW 19
// hc_class := class_horse ;
36220: LD_ADDR_OWVAR 28
36224: PUSH
36225: LD_INT 21
36227: ST_TO_ADDR
// hc_gallery :=  ;
36228: LD_ADDR_OWVAR 33
36232: PUSH
36233: LD_STRING 
36235: ST_TO_ADDR
// hc_name :=  ;
36236: LD_ADDR_OWVAR 26
36240: PUSH
36241: LD_STRING 
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 1
36248: RET
// export function PrepareMastodont ( ) ; begin
36249: LD_INT 0
36251: PPUSH
// uc_side := 0 ;
36252: LD_ADDR_OWVAR 20
36256: PUSH
36257: LD_INT 0
36259: ST_TO_ADDR
// uc_nation := 0 ;
36260: LD_ADDR_OWVAR 21
36264: PUSH
36265: LD_INT 0
36267: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36268: LD_ADDR_OWVAR 37
36272: PUSH
36273: LD_INT 31
36275: ST_TO_ADDR
// vc_control := control_rider ;
36276: LD_ADDR_OWVAR 38
36280: PUSH
36281: LD_INT 4
36283: ST_TO_ADDR
// end ;
36284: LD_VAR 0 1
36288: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36289: LD_INT 0
36291: PPUSH
36292: PPUSH
36293: PPUSH
// uc_side = 0 ;
36294: LD_ADDR_OWVAR 20
36298: PUSH
36299: LD_INT 0
36301: ST_TO_ADDR
// uc_nation = 0 ;
36302: LD_ADDR_OWVAR 21
36306: PUSH
36307: LD_INT 0
36309: ST_TO_ADDR
// InitHc_All ( ) ;
36310: CALL_OW 584
// InitVc ;
36314: CALL_OW 20
// if mastodonts then
36318: LD_VAR 0 6
36322: IFFALSE 36389
// for i = 1 to mastodonts do
36324: LD_ADDR_VAR 0 11
36328: PUSH
36329: DOUBLE
36330: LD_INT 1
36332: DEC
36333: ST_TO_ADDR
36334: LD_VAR 0 6
36338: PUSH
36339: FOR_TO
36340: IFFALSE 36387
// begin vc_chassis := 31 ;
36342: LD_ADDR_OWVAR 37
36346: PUSH
36347: LD_INT 31
36349: ST_TO_ADDR
// vc_control := control_rider ;
36350: LD_ADDR_OWVAR 38
36354: PUSH
36355: LD_INT 4
36357: ST_TO_ADDR
// animal := CreateVehicle ;
36358: LD_ADDR_VAR 0 12
36362: PUSH
36363: CALL_OW 45
36367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36368: LD_VAR 0 12
36372: PPUSH
36373: LD_VAR 0 8
36377: PPUSH
36378: LD_INT 0
36380: PPUSH
36381: CALL 38531 0 3
// end ;
36385: GO 36339
36387: POP
36388: POP
// if horses then
36389: LD_VAR 0 5
36393: IFFALSE 36460
// for i = 1 to horses do
36395: LD_ADDR_VAR 0 11
36399: PUSH
36400: DOUBLE
36401: LD_INT 1
36403: DEC
36404: ST_TO_ADDR
36405: LD_VAR 0 5
36409: PUSH
36410: FOR_TO
36411: IFFALSE 36458
// begin hc_class := 21 ;
36413: LD_ADDR_OWVAR 28
36417: PUSH
36418: LD_INT 21
36420: ST_TO_ADDR
// hc_gallery :=  ;
36421: LD_ADDR_OWVAR 33
36425: PUSH
36426: LD_STRING 
36428: ST_TO_ADDR
// animal := CreateHuman ;
36429: LD_ADDR_VAR 0 12
36433: PUSH
36434: CALL_OW 44
36438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36439: LD_VAR 0 12
36443: PPUSH
36444: LD_VAR 0 8
36448: PPUSH
36449: LD_INT 0
36451: PPUSH
36452: CALL 38531 0 3
// end ;
36456: GO 36410
36458: POP
36459: POP
// if birds then
36460: LD_VAR 0 1
36464: IFFALSE 36531
// for i = 1 to birds do
36466: LD_ADDR_VAR 0 11
36470: PUSH
36471: DOUBLE
36472: LD_INT 1
36474: DEC
36475: ST_TO_ADDR
36476: LD_VAR 0 1
36480: PUSH
36481: FOR_TO
36482: IFFALSE 36529
// begin hc_class := 18 ;
36484: LD_ADDR_OWVAR 28
36488: PUSH
36489: LD_INT 18
36491: ST_TO_ADDR
// hc_gallery =  ;
36492: LD_ADDR_OWVAR 33
36496: PUSH
36497: LD_STRING 
36499: ST_TO_ADDR
// animal := CreateHuman ;
36500: LD_ADDR_VAR 0 12
36504: PUSH
36505: CALL_OW 44
36509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36510: LD_VAR 0 12
36514: PPUSH
36515: LD_VAR 0 8
36519: PPUSH
36520: LD_INT 0
36522: PPUSH
36523: CALL 38531 0 3
// end ;
36527: GO 36481
36529: POP
36530: POP
// if tigers then
36531: LD_VAR 0 2
36535: IFFALSE 36619
// for i = 1 to tigers do
36537: LD_ADDR_VAR 0 11
36541: PUSH
36542: DOUBLE
36543: LD_INT 1
36545: DEC
36546: ST_TO_ADDR
36547: LD_VAR 0 2
36551: PUSH
36552: FOR_TO
36553: IFFALSE 36617
// begin hc_class = class_tiger ;
36555: LD_ADDR_OWVAR 28
36559: PUSH
36560: LD_INT 14
36562: ST_TO_ADDR
// hc_gallery =  ;
36563: LD_ADDR_OWVAR 33
36567: PUSH
36568: LD_STRING 
36570: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36571: LD_ADDR_OWVAR 35
36575: PUSH
36576: LD_INT 7
36578: NEG
36579: PPUSH
36580: LD_INT 7
36582: PPUSH
36583: CALL_OW 12
36587: ST_TO_ADDR
// animal := CreateHuman ;
36588: LD_ADDR_VAR 0 12
36592: PUSH
36593: CALL_OW 44
36597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36598: LD_VAR 0 12
36602: PPUSH
36603: LD_VAR 0 8
36607: PPUSH
36608: LD_INT 0
36610: PPUSH
36611: CALL 38531 0 3
// end ;
36615: GO 36552
36617: POP
36618: POP
// if apemans then
36619: LD_VAR 0 3
36623: IFFALSE 36746
// for i = 1 to apemans do
36625: LD_ADDR_VAR 0 11
36629: PUSH
36630: DOUBLE
36631: LD_INT 1
36633: DEC
36634: ST_TO_ADDR
36635: LD_VAR 0 3
36639: PUSH
36640: FOR_TO
36641: IFFALSE 36744
// begin hc_class = class_apeman ;
36643: LD_ADDR_OWVAR 28
36647: PUSH
36648: LD_INT 12
36650: ST_TO_ADDR
// hc_gallery =  ;
36651: LD_ADDR_OWVAR 33
36655: PUSH
36656: LD_STRING 
36658: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36659: LD_ADDR_OWVAR 35
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PPUSH
36668: LD_INT 2
36670: PPUSH
36671: CALL_OW 12
36675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36676: LD_ADDR_OWVAR 31
36680: PUSH
36681: LD_INT 1
36683: PPUSH
36684: LD_INT 3
36686: PPUSH
36687: CALL_OW 12
36691: PUSH
36692: LD_INT 1
36694: PPUSH
36695: LD_INT 3
36697: PPUSH
36698: CALL_OW 12
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// animal := CreateHuman ;
36715: LD_ADDR_VAR 0 12
36719: PUSH
36720: CALL_OW 44
36724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36725: LD_VAR 0 12
36729: PPUSH
36730: LD_VAR 0 8
36734: PPUSH
36735: LD_INT 0
36737: PPUSH
36738: CALL 38531 0 3
// end ;
36742: GO 36640
36744: POP
36745: POP
// if enchidnas then
36746: LD_VAR 0 4
36750: IFFALSE 36817
// for i = 1 to enchidnas do
36752: LD_ADDR_VAR 0 11
36756: PUSH
36757: DOUBLE
36758: LD_INT 1
36760: DEC
36761: ST_TO_ADDR
36762: LD_VAR 0 4
36766: PUSH
36767: FOR_TO
36768: IFFALSE 36815
// begin hc_class = 13 ;
36770: LD_ADDR_OWVAR 28
36774: PUSH
36775: LD_INT 13
36777: ST_TO_ADDR
// hc_gallery =  ;
36778: LD_ADDR_OWVAR 33
36782: PUSH
36783: LD_STRING 
36785: ST_TO_ADDR
// animal := CreateHuman ;
36786: LD_ADDR_VAR 0 12
36790: PUSH
36791: CALL_OW 44
36795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36796: LD_VAR 0 12
36800: PPUSH
36801: LD_VAR 0 8
36805: PPUSH
36806: LD_INT 0
36808: PPUSH
36809: CALL 38531 0 3
// end ;
36813: GO 36767
36815: POP
36816: POP
// if fishes then
36817: LD_VAR 0 7
36821: IFFALSE 36888
// for i = 1 to fishes do
36823: LD_ADDR_VAR 0 11
36827: PUSH
36828: DOUBLE
36829: LD_INT 1
36831: DEC
36832: ST_TO_ADDR
36833: LD_VAR 0 7
36837: PUSH
36838: FOR_TO
36839: IFFALSE 36886
// begin hc_class = 20 ;
36841: LD_ADDR_OWVAR 28
36845: PUSH
36846: LD_INT 20
36848: ST_TO_ADDR
// hc_gallery =  ;
36849: LD_ADDR_OWVAR 33
36853: PUSH
36854: LD_STRING 
36856: ST_TO_ADDR
// animal := CreateHuman ;
36857: LD_ADDR_VAR 0 12
36861: PUSH
36862: CALL_OW 44
36866: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36867: LD_VAR 0 12
36871: PPUSH
36872: LD_VAR 0 9
36876: PPUSH
36877: LD_INT 0
36879: PPUSH
36880: CALL 38531 0 3
// end ;
36884: GO 36838
36886: POP
36887: POP
// end ;
36888: LD_VAR 0 10
36892: RET
// export function WantHeal ( sci , unit ) ; begin
36893: LD_INT 0
36895: PPUSH
// if GetTaskList ( sci ) > 0 then
36896: LD_VAR 0 1
36900: PPUSH
36901: CALL_OW 437
36905: PUSH
36906: LD_INT 0
36908: GREATER
36909: IFFALSE 36981
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36911: LD_VAR 0 1
36915: PPUSH
36916: CALL_OW 437
36920: PUSH
36921: LD_INT 1
36923: ARRAY
36924: PUSH
36925: LD_INT 1
36927: ARRAY
36928: PUSH
36929: LD_STRING l
36931: EQUAL
36932: IFFALSE 36959
36934: PUSH
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL_OW 437
36944: PUSH
36945: LD_INT 1
36947: ARRAY
36948: PUSH
36949: LD_INT 4
36951: ARRAY
36952: PUSH
36953: LD_VAR 0 2
36957: EQUAL
36958: AND
36959: IFFALSE 36971
// result := true else
36961: LD_ADDR_VAR 0 3
36965: PUSH
36966: LD_INT 1
36968: ST_TO_ADDR
36969: GO 36979
// result := false ;
36971: LD_ADDR_VAR 0 3
36975: PUSH
36976: LD_INT 0
36978: ST_TO_ADDR
// end else
36979: GO 36989
// result := false ;
36981: LD_ADDR_VAR 0 3
36985: PUSH
36986: LD_INT 0
36988: ST_TO_ADDR
// end ;
36989: LD_VAR 0 3
36993: RET
// export function HealTarget ( sci ) ; begin
36994: LD_INT 0
36996: PPUSH
// if not sci then
36997: LD_VAR 0 1
37001: NOT
37002: IFFALSE 37006
// exit ;
37004: GO 37071
// result := 0 ;
37006: LD_ADDR_VAR 0 2
37010: PUSH
37011: LD_INT 0
37013: ST_TO_ADDR
// if GetTaskList ( sci ) then
37014: LD_VAR 0 1
37018: PPUSH
37019: CALL_OW 437
37023: IFFALSE 37071
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL_OW 437
37034: PUSH
37035: LD_INT 1
37037: ARRAY
37038: PUSH
37039: LD_INT 1
37041: ARRAY
37042: PUSH
37043: LD_STRING l
37045: EQUAL
37046: IFFALSE 37071
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37048: LD_ADDR_VAR 0 2
37052: PUSH
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL_OW 437
37062: PUSH
37063: LD_INT 1
37065: ARRAY
37066: PUSH
37067: LD_INT 4
37069: ARRAY
37070: ST_TO_ADDR
// end ;
37071: LD_VAR 0 2
37075: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37076: LD_INT 0
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
// if not base_units then
37082: LD_VAR 0 1
37086: NOT
37087: IFFALSE 37091
// exit ;
37089: GO 37178
// result := false ;
37091: LD_ADDR_VAR 0 2
37095: PUSH
37096: LD_INT 0
37098: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37099: LD_ADDR_VAR 0 5
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_INT 21
37111: PUSH
37112: LD_INT 3
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PPUSH
37119: CALL_OW 72
37123: ST_TO_ADDR
// if not tmp then
37124: LD_VAR 0 5
37128: NOT
37129: IFFALSE 37133
// exit ;
37131: GO 37178
// for i in tmp do
37133: LD_ADDR_VAR 0 3
37137: PUSH
37138: LD_VAR 0 5
37142: PUSH
37143: FOR_IN
37144: IFFALSE 37176
// begin result := EnemyInRange ( i , 22 ) ;
37146: LD_ADDR_VAR 0 2
37150: PUSH
37151: LD_VAR 0 3
37155: PPUSH
37156: LD_INT 22
37158: PPUSH
37159: CALL 34593 0 2
37163: ST_TO_ADDR
// if result then
37164: LD_VAR 0 2
37168: IFFALSE 37174
// exit ;
37170: POP
37171: POP
37172: GO 37178
// end ;
37174: GO 37143
37176: POP
37177: POP
// end ;
37178: LD_VAR 0 2
37182: RET
// export function FilterByTag ( units , tag ) ; begin
37183: LD_INT 0
37185: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37186: LD_ADDR_VAR 0 3
37190: PUSH
37191: LD_VAR 0 1
37195: PPUSH
37196: LD_INT 120
37198: PUSH
37199: LD_VAR 0 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PPUSH
37208: CALL_OW 72
37212: ST_TO_ADDR
// end ;
37213: LD_VAR 0 3
37217: RET
// export function IsDriver ( un ) ; begin
37218: LD_INT 0
37220: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37221: LD_ADDR_VAR 0 2
37225: PUSH
37226: LD_VAR 0 1
37230: PUSH
37231: LD_INT 55
37233: PUSH
37234: EMPTY
37235: LIST
37236: PPUSH
37237: CALL_OW 69
37241: IN
37242: ST_TO_ADDR
// end ;
37243: LD_VAR 0 2
37247: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37248: LD_INT 0
37250: PPUSH
37251: PPUSH
// list := [ ] ;
37252: LD_ADDR_VAR 0 5
37256: PUSH
37257: EMPTY
37258: ST_TO_ADDR
// case d of 0 :
37259: LD_VAR 0 3
37263: PUSH
37264: LD_INT 0
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37272
37270: GO 37405
37272: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37273: LD_ADDR_VAR 0 5
37277: PUSH
37278: LD_VAR 0 1
37282: PUSH
37283: LD_INT 4
37285: MINUS
37286: PUSH
37287: LD_VAR 0 2
37291: PUSH
37292: LD_INT 4
37294: MINUS
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: PUSH
37304: LD_VAR 0 1
37308: PUSH
37309: LD_INT 3
37311: MINUS
37312: PUSH
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: PUSH
37326: LD_VAR 0 1
37330: PUSH
37331: LD_INT 4
37333: PLUS
37334: PUSH
37335: LD_VAR 0 2
37339: PUSH
37340: LD_INT 4
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: PUSH
37348: LD_VAR 0 1
37352: PUSH
37353: LD_INT 3
37355: PLUS
37356: PUSH
37357: LD_VAR 0 2
37361: PUSH
37362: LD_INT 3
37364: PLUS
37365: PUSH
37366: LD_INT 5
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: PUSH
37374: LD_VAR 0 1
37378: PUSH
37379: LD_VAR 0 2
37383: PUSH
37384: LD_INT 4
37386: PLUS
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: ST_TO_ADDR
// end ; 1 :
37403: GO 38103
37405: LD_INT 1
37407: DOUBLE
37408: EQUAL
37409: IFTRUE 37413
37411: GO 37546
37413: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37414: LD_ADDR_VAR 0 5
37418: PUSH
37419: LD_VAR 0 1
37423: PUSH
37424: LD_VAR 0 2
37428: PUSH
37429: LD_INT 4
37431: MINUS
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: LIST
37440: PUSH
37441: LD_VAR 0 1
37445: PUSH
37446: LD_INT 3
37448: MINUS
37449: PUSH
37450: LD_VAR 0 2
37454: PUSH
37455: LD_INT 3
37457: MINUS
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: PUSH
37467: LD_VAR 0 1
37471: PUSH
37472: LD_INT 4
37474: MINUS
37475: PUSH
37476: LD_VAR 0 2
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: LIST
37488: PUSH
37489: LD_VAR 0 1
37493: PUSH
37494: LD_VAR 0 2
37498: PUSH
37499: LD_INT 3
37501: PLUS
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: PUSH
37511: LD_VAR 0 1
37515: PUSH
37516: LD_INT 4
37518: PLUS
37519: PUSH
37520: LD_VAR 0 2
37524: PUSH
37525: LD_INT 4
37527: PLUS
37528: PUSH
37529: LD_INT 5
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// end ; 2 :
37544: GO 38103
37546: LD_INT 2
37548: DOUBLE
37549: EQUAL
37550: IFTRUE 37554
37552: GO 37683
37554: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37555: LD_ADDR_VAR 0 5
37559: PUSH
37560: LD_VAR 0 1
37564: PUSH
37565: LD_VAR 0 2
37569: PUSH
37570: LD_INT 3
37572: MINUS
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: PUSH
37582: LD_VAR 0 1
37586: PUSH
37587: LD_INT 4
37589: PLUS
37590: PUSH
37591: LD_VAR 0 2
37595: PUSH
37596: LD_INT 4
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: LIST
37603: PUSH
37604: LD_VAR 0 1
37608: PUSH
37609: LD_VAR 0 2
37613: PUSH
37614: LD_INT 4
37616: PLUS
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: PUSH
37626: LD_VAR 0 1
37630: PUSH
37631: LD_INT 3
37633: MINUS
37634: PUSH
37635: LD_VAR 0 2
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: PUSH
37648: LD_VAR 0 1
37652: PUSH
37653: LD_INT 4
37655: MINUS
37656: PUSH
37657: LD_VAR 0 2
37661: PUSH
37662: LD_INT 4
37664: MINUS
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: ST_TO_ADDR
// end ; 3 :
37681: GO 38103
37683: LD_INT 3
37685: DOUBLE
37686: EQUAL
37687: IFTRUE 37691
37689: GO 37824
37691: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37692: LD_ADDR_VAR 0 5
37696: PUSH
37697: LD_VAR 0 1
37701: PUSH
37702: LD_INT 3
37704: PLUS
37705: PUSH
37706: LD_VAR 0 2
37710: PUSH
37711: LD_INT 4
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: PUSH
37719: LD_VAR 0 1
37723: PUSH
37724: LD_INT 4
37726: PLUS
37727: PUSH
37728: LD_VAR 0 2
37732: PUSH
37733: LD_INT 4
37735: PLUS
37736: PUSH
37737: LD_INT 5
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: PUSH
37745: LD_VAR 0 1
37749: PUSH
37750: LD_INT 4
37752: MINUS
37753: PUSH
37754: LD_VAR 0 2
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: PUSH
37767: LD_VAR 0 1
37771: PUSH
37772: LD_VAR 0 2
37776: PUSH
37777: LD_INT 4
37779: MINUS
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: PUSH
37789: LD_VAR 0 1
37793: PUSH
37794: LD_INT 3
37796: MINUS
37797: PUSH
37798: LD_VAR 0 2
37802: PUSH
37803: LD_INT 3
37805: MINUS
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: ST_TO_ADDR
// end ; 4 :
37822: GO 38103
37824: LD_INT 4
37826: DOUBLE
37827: EQUAL
37828: IFTRUE 37832
37830: GO 37965
37832: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37833: LD_ADDR_VAR 0 5
37837: PUSH
37838: LD_VAR 0 1
37842: PUSH
37843: LD_VAR 0 2
37847: PUSH
37848: LD_INT 4
37850: PLUS
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: PUSH
37860: LD_VAR 0 1
37864: PUSH
37865: LD_INT 3
37867: PLUS
37868: PUSH
37869: LD_VAR 0 2
37873: PUSH
37874: LD_INT 3
37876: PLUS
37877: PUSH
37878: LD_INT 5
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: PUSH
37886: LD_VAR 0 1
37890: PUSH
37891: LD_INT 4
37893: PLUS
37894: PUSH
37895: LD_VAR 0 2
37899: PUSH
37900: LD_INT 4
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: PUSH
37908: LD_VAR 0 1
37912: PUSH
37913: LD_VAR 0 2
37917: PUSH
37918: LD_INT 3
37920: MINUS
37921: PUSH
37922: LD_INT 3
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: LD_VAR 0 1
37934: PUSH
37935: LD_INT 4
37937: MINUS
37938: PUSH
37939: LD_VAR 0 2
37943: PUSH
37944: LD_INT 4
37946: MINUS
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: ST_TO_ADDR
// end ; 5 :
37963: GO 38103
37965: LD_INT 5
37967: DOUBLE
37968: EQUAL
37969: IFTRUE 37973
37971: GO 38102
37973: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37974: LD_ADDR_VAR 0 5
37978: PUSH
37979: LD_VAR 0 1
37983: PUSH
37984: LD_INT 4
37986: MINUS
37987: PUSH
37988: LD_VAR 0 2
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: PUSH
38001: LD_VAR 0 1
38005: PUSH
38006: LD_VAR 0 2
38010: PUSH
38011: LD_INT 4
38013: MINUS
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: PUSH
38023: LD_VAR 0 1
38027: PUSH
38028: LD_INT 4
38030: PLUS
38031: PUSH
38032: LD_VAR 0 2
38036: PUSH
38037: LD_INT 4
38039: PLUS
38040: PUSH
38041: LD_INT 5
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: LIST
38048: PUSH
38049: LD_VAR 0 1
38053: PUSH
38054: LD_INT 3
38056: PLUS
38057: PUSH
38058: LD_VAR 0 2
38062: PUSH
38063: LD_INT 4
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: PUSH
38071: LD_VAR 0 1
38075: PUSH
38076: LD_VAR 0 2
38080: PUSH
38081: LD_INT 3
38083: PLUS
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: ST_TO_ADDR
// end ; end ;
38100: GO 38103
38102: POP
// result := list ;
38103: LD_ADDR_VAR 0 4
38107: PUSH
38108: LD_VAR 0 5
38112: ST_TO_ADDR
// end ;
38113: LD_VAR 0 4
38117: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38118: LD_INT 0
38120: PPUSH
38121: PPUSH
38122: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38123: LD_VAR 0 1
38127: NOT
38128: IFTRUE 38156
38130: PUSH
38131: LD_VAR 0 2
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 4
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: IN
38154: NOT
38155: OR
38156: IFFALSE 38160
// exit ;
38158: GO 38243
// tmp := [ ] ;
38160: LD_ADDR_VAR 0 5
38164: PUSH
38165: EMPTY
38166: ST_TO_ADDR
// for i in units do
38167: LD_ADDR_VAR 0 4
38171: PUSH
38172: LD_VAR 0 1
38176: PUSH
38177: FOR_IN
38178: IFFALSE 38212
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38180: LD_ADDR_VAR 0 5
38184: PUSH
38185: LD_VAR 0 5
38189: PPUSH
38190: LD_VAR 0 4
38194: PPUSH
38195: LD_VAR 0 2
38199: PPUSH
38200: CALL_OW 259
38204: PPUSH
38205: CALL 39638 0 2
38209: ST_TO_ADDR
38210: GO 38177
38212: POP
38213: POP
// if not tmp then
38214: LD_VAR 0 5
38218: NOT
38219: IFFALSE 38223
// exit ;
38221: GO 38243
// result := SortListByListDesc ( units , tmp ) ;
38223: LD_ADDR_VAR 0 3
38227: PUSH
38228: LD_VAR 0 1
38232: PPUSH
38233: LD_VAR 0 5
38237: PPUSH
38238: CALL_OW 77
38242: ST_TO_ADDR
// end ;
38243: LD_VAR 0 3
38247: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38248: LD_INT 0
38250: PPUSH
38251: PPUSH
38252: PPUSH
// result := false ;
38253: LD_ADDR_VAR 0 3
38257: PUSH
38258: LD_INT 0
38260: ST_TO_ADDR
// if not building then
38261: LD_VAR 0 2
38265: NOT
38266: IFFALSE 38270
// exit ;
38268: GO 38414
// x := GetX ( building ) ;
38270: LD_ADDR_VAR 0 4
38274: PUSH
38275: LD_VAR 0 2
38279: PPUSH
38280: CALL_OW 250
38284: ST_TO_ADDR
// y := GetY ( building ) ;
38285: LD_ADDR_VAR 0 5
38289: PUSH
38290: LD_VAR 0 2
38294: PPUSH
38295: CALL_OW 251
38299: ST_TO_ADDR
// if not x or not y then
38300: LD_VAR 0 4
38304: NOT
38305: IFTRUE 38314
38307: PUSH
38308: LD_VAR 0 5
38312: NOT
38313: OR
38314: IFFALSE 38318
// exit ;
38316: GO 38414
// if GetTaskList ( unit ) then
38318: LD_VAR 0 1
38322: PPUSH
38323: CALL_OW 437
38327: IFFALSE 38414
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38329: LD_STRING e
38331: PUSH
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 437
38341: PUSH
38342: LD_INT 1
38344: ARRAY
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: EQUAL
38350: IFFALSE 38377
38352: PUSH
38353: LD_VAR 0 4
38357: PUSH
38358: LD_VAR 0 1
38362: PPUSH
38363: CALL_OW 437
38367: PUSH
38368: LD_INT 1
38370: ARRAY
38371: PUSH
38372: LD_INT 2
38374: ARRAY
38375: EQUAL
38376: AND
38377: IFFALSE 38404
38379: PUSH
38380: LD_VAR 0 5
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: CALL_OW 437
38394: PUSH
38395: LD_INT 1
38397: ARRAY
38398: PUSH
38399: LD_INT 3
38401: ARRAY
38402: EQUAL
38403: AND
38404: IFFALSE 38414
// result := true end ;
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_INT 1
38413: ST_TO_ADDR
// end ;
38414: LD_VAR 0 3
38418: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38419: LD_INT 0
38421: PPUSH
// result := false ;
38422: LD_ADDR_VAR 0 4
38426: PUSH
38427: LD_INT 0
38429: ST_TO_ADDR
// if GetTaskList ( unit ) then
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 437
38439: IFFALSE 38526
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38441: LD_STRING M
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 437
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: PUSH
38458: LD_INT 1
38460: ARRAY
38461: EQUAL
38462: IFFALSE 38489
38464: PUSH
38465: LD_VAR 0 2
38469: PUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 437
38479: PUSH
38480: LD_INT 1
38482: ARRAY
38483: PUSH
38484: LD_INT 2
38486: ARRAY
38487: EQUAL
38488: AND
38489: IFFALSE 38516
38491: PUSH
38492: LD_VAR 0 3
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 437
38506: PUSH
38507: LD_INT 1
38509: ARRAY
38510: PUSH
38511: LD_INT 3
38513: ARRAY
38514: EQUAL
38515: AND
38516: IFFALSE 38526
// result := true ;
38518: LD_ADDR_VAR 0 4
38522: PUSH
38523: LD_INT 1
38525: ST_TO_ADDR
// end ; end ;
38526: LD_VAR 0 4
38530: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38531: LD_INT 0
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
// if not unit or not area then
38537: LD_VAR 0 1
38541: NOT
38542: IFTRUE 38551
38544: PUSH
38545: LD_VAR 0 2
38549: NOT
38550: OR
38551: IFFALSE 38555
// exit ;
38553: GO 38731
// tmp := AreaToList ( area , i ) ;
38555: LD_ADDR_VAR 0 6
38559: PUSH
38560: LD_VAR 0 2
38564: PPUSH
38565: LD_VAR 0 5
38569: PPUSH
38570: CALL_OW 517
38574: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: DOUBLE
38581: LD_INT 1
38583: DEC
38584: ST_TO_ADDR
38585: LD_VAR 0 6
38589: PUSH
38590: LD_INT 1
38592: ARRAY
38593: PUSH
38594: FOR_TO
38595: IFFALSE 38729
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38597: LD_ADDR_VAR 0 7
38601: PUSH
38602: LD_VAR 0 6
38606: PUSH
38607: LD_INT 1
38609: ARRAY
38610: PUSH
38611: LD_VAR 0 5
38615: ARRAY
38616: PUSH
38617: LD_VAR 0 6
38621: PUSH
38622: LD_INT 2
38624: ARRAY
38625: PUSH
38626: LD_VAR 0 5
38630: ARRAY
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38636: LD_INT 92
38638: PUSH
38639: LD_VAR 0 7
38643: PUSH
38644: LD_INT 1
38646: ARRAY
38647: PUSH
38648: LD_VAR 0 7
38652: PUSH
38653: LD_INT 2
38655: ARRAY
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 69
38670: PUSH
38671: LD_INT 0
38673: EQUAL
38674: IFFALSE 38727
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38676: LD_VAR 0 1
38680: PPUSH
38681: LD_VAR 0 7
38685: PUSH
38686: LD_INT 1
38688: ARRAY
38689: PPUSH
38690: LD_VAR 0 7
38694: PUSH
38695: LD_INT 2
38697: ARRAY
38698: PPUSH
38699: LD_VAR 0 3
38703: PPUSH
38704: CALL_OW 48
// result := IsPlaced ( unit ) ;
38708: LD_ADDR_VAR 0 4
38712: PUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 305
38722: ST_TO_ADDR
// exit ;
38723: POP
38724: POP
38725: GO 38731
// end ; end ;
38727: GO 38594
38729: POP
38730: POP
// end ;
38731: LD_VAR 0 4
38735: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38736: LD_INT 0
38738: PPUSH
38739: PPUSH
38740: PPUSH
// if not side or side > 8 then
38741: LD_VAR 0 1
38745: NOT
38746: IFTRUE 38758
38748: PUSH
38749: LD_VAR 0 1
38753: PUSH
38754: LD_INT 8
38756: GREATER
38757: OR
38758: IFFALSE 38762
// exit ;
38760: GO 38949
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38762: LD_ADDR_VAR 0 4
38766: PUSH
38767: LD_INT 22
38769: PUSH
38770: LD_VAR 0 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 21
38781: PUSH
38782: LD_INT 3
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PPUSH
38793: CALL_OW 69
38797: ST_TO_ADDR
// if not tmp then
38798: LD_VAR 0 4
38802: NOT
38803: IFFALSE 38807
// exit ;
38805: GO 38949
// enable_addtolog := true ;
38807: LD_ADDR_OWVAR 81
38811: PUSH
38812: LD_INT 1
38814: ST_TO_ADDR
// AddToLog ( [ ) ;
38815: LD_STRING [
38817: PPUSH
38818: CALL_OW 561
// for i in tmp do
38822: LD_ADDR_VAR 0 3
38826: PUSH
38827: LD_VAR 0 4
38831: PUSH
38832: FOR_IN
38833: IFFALSE 38940
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38835: LD_STRING [
38837: PUSH
38838: LD_VAR 0 3
38842: PPUSH
38843: CALL_OW 266
38847: STR
38848: PUSH
38849: LD_STRING , 
38851: STR
38852: PUSH
38853: LD_VAR 0 3
38857: PPUSH
38858: CALL_OW 250
38862: STR
38863: PUSH
38864: LD_STRING , 
38866: STR
38867: PUSH
38868: LD_VAR 0 3
38872: PPUSH
38873: CALL_OW 251
38877: STR
38878: PUSH
38879: LD_STRING , 
38881: STR
38882: PUSH
38883: LD_VAR 0 3
38887: PPUSH
38888: CALL_OW 254
38892: STR
38893: PUSH
38894: LD_STRING , 
38896: STR
38897: PUSH
38898: LD_VAR 0 3
38902: PPUSH
38903: LD_INT 1
38905: PPUSH
38906: CALL_OW 268
38910: STR
38911: PUSH
38912: LD_STRING , 
38914: STR
38915: PUSH
38916: LD_VAR 0 3
38920: PPUSH
38921: LD_INT 2
38923: PPUSH
38924: CALL_OW 268
38928: STR
38929: PUSH
38930: LD_STRING ],
38932: STR
38933: PPUSH
38934: CALL_OW 561
// end ;
38938: GO 38832
38940: POP
38941: POP
// AddToLog ( ]; ) ;
38942: LD_STRING ];
38944: PPUSH
38945: CALL_OW 561
// end ;
38949: LD_VAR 0 2
38953: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38954: LD_INT 0
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
// if not area or not rate or not max then
38961: LD_VAR 0 1
38965: NOT
38966: IFTRUE 38975
38968: PUSH
38969: LD_VAR 0 2
38973: NOT
38974: OR
38975: IFTRUE 38984
38977: PUSH
38978: LD_VAR 0 4
38982: NOT
38983: OR
38984: IFFALSE 38988
// exit ;
38986: GO 39177
// while 1 do
38988: LD_INT 1
38990: IFFALSE 39177
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38992: LD_ADDR_VAR 0 9
38996: PUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: LD_INT 1
39004: PPUSH
39005: CALL_OW 287
39009: PUSH
39010: LD_INT 10
39012: MUL
39013: ST_TO_ADDR
// r := rate / 10 ;
39014: LD_ADDR_VAR 0 7
39018: PUSH
39019: LD_VAR 0 2
39023: PUSH
39024: LD_INT 10
39026: DIVREAL
39027: ST_TO_ADDR
// time := 1 1$00 ;
39028: LD_ADDR_VAR 0 8
39032: PUSH
39033: LD_INT 2100
39035: ST_TO_ADDR
// if amount < min then
39036: LD_VAR 0 9
39040: PUSH
39041: LD_VAR 0 3
39045: LESS
39046: IFFALSE 39064
// r := r * 2 else
39048: LD_ADDR_VAR 0 7
39052: PUSH
39053: LD_VAR 0 7
39057: PUSH
39058: LD_INT 2
39060: MUL
39061: ST_TO_ADDR
39062: GO 39090
// if amount > max then
39064: LD_VAR 0 9
39068: PUSH
39069: LD_VAR 0 4
39073: GREATER
39074: IFFALSE 39090
// r := r / 2 ;
39076: LD_ADDR_VAR 0 7
39080: PUSH
39081: LD_VAR 0 7
39085: PUSH
39086: LD_INT 2
39088: DIVREAL
39089: ST_TO_ADDR
// time := time / r ;
39090: LD_ADDR_VAR 0 8
39094: PUSH
39095: LD_VAR 0 8
39099: PUSH
39100: LD_VAR 0 7
39104: DIVREAL
39105: ST_TO_ADDR
// if time < 0 then
39106: LD_VAR 0 8
39110: PUSH
39111: LD_INT 0
39113: LESS
39114: IFFALSE 39131
// time := time * - 1 ;
39116: LD_ADDR_VAR 0 8
39120: PUSH
39121: LD_VAR 0 8
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: MUL
39130: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39131: LD_VAR 0 8
39135: PUSH
39136: LD_INT 35
39138: PPUSH
39139: LD_INT 875
39141: PPUSH
39142: CALL_OW 12
39146: PLUS
39147: PPUSH
39148: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39152: LD_INT 1
39154: PPUSH
39155: LD_INT 5
39157: PPUSH
39158: CALL_OW 12
39162: PPUSH
39163: LD_VAR 0 1
39167: PPUSH
39168: LD_INT 1
39170: PPUSH
39171: CALL_OW 55
// end ;
39175: GO 38988
// end ;
39177: LD_VAR 0 5
39181: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39182: LD_INT 0
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
// if not turrets or not factories then
39192: LD_VAR 0 1
39196: NOT
39197: IFTRUE 39206
39199: PUSH
39200: LD_VAR 0 2
39204: NOT
39205: OR
39206: IFFALSE 39210
// exit ;
39208: GO 39517
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39210: LD_ADDR_VAR 0 10
39214: PUSH
39215: LD_INT 5
39217: PUSH
39218: LD_INT 6
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: PUSH
39228: LD_INT 4
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: LD_INT 5
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 24
39252: PUSH
39253: LD_INT 25
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 23
39262: PUSH
39263: LD_INT 27
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 42
39276: PUSH
39277: LD_INT 43
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 44
39286: PUSH
39287: LD_INT 46
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 45
39296: PUSH
39297: LD_INT 47
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
// result := [ ] ;
39314: LD_ADDR_VAR 0 3
39318: PUSH
39319: EMPTY
39320: ST_TO_ADDR
// for i in turrets do
39321: LD_ADDR_VAR 0 4
39325: PUSH
39326: LD_VAR 0 1
39330: PUSH
39331: FOR_IN
39332: IFFALSE 39515
// begin nat := GetNation ( i ) ;
39334: LD_ADDR_VAR 0 7
39338: PUSH
39339: LD_VAR 0 4
39343: PPUSH
39344: CALL_OW 248
39348: ST_TO_ADDR
// weapon := 0 ;
39349: LD_ADDR_VAR 0 8
39353: PUSH
39354: LD_INT 0
39356: ST_TO_ADDR
// if not nat then
39357: LD_VAR 0 7
39361: NOT
39362: IFFALSE 39366
// continue ;
39364: GO 39331
// for j in list [ nat ] do
39366: LD_ADDR_VAR 0 5
39370: PUSH
39371: LD_VAR 0 10
39375: PUSH
39376: LD_VAR 0 7
39380: ARRAY
39381: PUSH
39382: FOR_IN
39383: IFFALSE 39424
// if GetBWeapon ( i ) = j [ 1 ] then
39385: LD_VAR 0 4
39389: PPUSH
39390: CALL_OW 269
39394: PUSH
39395: LD_VAR 0 5
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: EQUAL
39404: IFFALSE 39422
// begin weapon := j [ 2 ] ;
39406: LD_ADDR_VAR 0 8
39410: PUSH
39411: LD_VAR 0 5
39415: PUSH
39416: LD_INT 2
39418: ARRAY
39419: ST_TO_ADDR
// break ;
39420: GO 39424
// end ;
39422: GO 39382
39424: POP
39425: POP
// if not weapon then
39426: LD_VAR 0 8
39430: NOT
39431: IFFALSE 39435
// continue ;
39433: GO 39331
// for k in factories do
39435: LD_ADDR_VAR 0 6
39439: PUSH
39440: LD_VAR 0 2
39444: PUSH
39445: FOR_IN
39446: IFFALSE 39511
// begin weapons := AvailableWeaponList ( k ) ;
39448: LD_ADDR_VAR 0 9
39452: PUSH
39453: LD_VAR 0 6
39457: PPUSH
39458: CALL_OW 478
39462: ST_TO_ADDR
// if not weapons then
39463: LD_VAR 0 9
39467: NOT
39468: IFFALSE 39472
// continue ;
39470: GO 39445
// if weapon in weapons then
39472: LD_VAR 0 8
39476: PUSH
39477: LD_VAR 0 9
39481: IN
39482: IFFALSE 39509
// begin result := [ i , weapon ] ;
39484: LD_ADDR_VAR 0 3
39488: PUSH
39489: LD_VAR 0 4
39493: PUSH
39494: LD_VAR 0 8
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: ST_TO_ADDR
// exit ;
39503: POP
39504: POP
39505: POP
39506: POP
39507: GO 39517
// end ; end ;
39509: GO 39445
39511: POP
39512: POP
// end ;
39513: GO 39331
39515: POP
39516: POP
// end ;
39517: LD_VAR 0 3
39521: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39522: LD_INT 0
39524: PPUSH
// if not side or side > 8 then
39525: LD_VAR 0 3
39529: NOT
39530: IFTRUE 39542
39532: PUSH
39533: LD_VAR 0 3
39537: PUSH
39538: LD_INT 8
39540: GREATER
39541: OR
39542: IFFALSE 39546
// exit ;
39544: GO 39605
// if not range then
39546: LD_VAR 0 4
39550: NOT
39551: IFFALSE 39562
// range := - 12 ;
39553: LD_ADDR_VAR 0 4
39557: PUSH
39558: LD_INT 12
39560: NEG
39561: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39562: LD_VAR 0 1
39566: PPUSH
39567: LD_VAR 0 2
39571: PPUSH
39572: LD_VAR 0 3
39576: PPUSH
39577: LD_VAR 0 4
39581: PPUSH
39582: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39586: LD_VAR 0 1
39590: PPUSH
39591: LD_VAR 0 2
39595: PPUSH
39596: LD_VAR 0 3
39600: PPUSH
39601: CALL_OW 331
// end ;
39605: LD_VAR 0 5
39609: RET
// export function Video ( mode ) ; begin
39610: LD_INT 0
39612: PPUSH
// ingame_video = mode ;
39613: LD_ADDR_OWVAR 52
39617: PUSH
39618: LD_VAR 0 1
39622: ST_TO_ADDR
// interface_hidden = mode ;
39623: LD_ADDR_OWVAR 54
39627: PUSH
39628: LD_VAR 0 1
39632: ST_TO_ADDR
// end ;
39633: LD_VAR 0 2
39637: RET
// export function Join ( array , element ) ; begin
39638: LD_INT 0
39640: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39641: LD_ADDR_VAR 0 3
39645: PUSH
39646: LD_VAR 0 1
39650: PPUSH
39651: LD_VAR 0 1
39655: PUSH
39656: LD_INT 1
39658: PLUS
39659: PPUSH
39660: LD_VAR 0 2
39664: PPUSH
39665: CALL_OW 1
39669: ST_TO_ADDR
// end ;
39670: LD_VAR 0 3
39674: RET
// export function JoinUnion ( array , element ) ; begin
39675: LD_INT 0
39677: PPUSH
// result := array union element ;
39678: LD_ADDR_VAR 0 3
39682: PUSH
39683: LD_VAR 0 1
39687: PUSH
39688: LD_VAR 0 2
39692: UNION
39693: ST_TO_ADDR
// end ;
39694: LD_VAR 0 3
39698: RET
// export function GetBehemoths ( side ) ; begin
39699: LD_INT 0
39701: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39702: LD_ADDR_VAR 0 2
39706: PUSH
39707: LD_INT 22
39709: PUSH
39710: LD_VAR 0 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 31
39721: PUSH
39722: LD_INT 25
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PPUSH
39733: CALL_OW 69
39737: ST_TO_ADDR
// end ;
39738: LD_VAR 0 2
39742: RET
// export function Shuffle ( array ) ; var i , index ; begin
39743: LD_INT 0
39745: PPUSH
39746: PPUSH
39747: PPUSH
// result := [ ] ;
39748: LD_ADDR_VAR 0 2
39752: PUSH
39753: EMPTY
39754: ST_TO_ADDR
// if not array then
39755: LD_VAR 0 1
39759: NOT
39760: IFFALSE 39764
// exit ;
39762: GO 39863
// Randomize ;
39764: CALL_OW 10
// for i = array downto 1 do
39768: LD_ADDR_VAR 0 3
39772: PUSH
39773: DOUBLE
39774: LD_VAR 0 1
39778: INC
39779: ST_TO_ADDR
39780: LD_INT 1
39782: PUSH
39783: FOR_DOWNTO
39784: IFFALSE 39861
// begin index := rand ( 1 , array ) ;
39786: LD_ADDR_VAR 0 4
39790: PUSH
39791: LD_INT 1
39793: PPUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 12
39803: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39804: LD_ADDR_VAR 0 2
39808: PUSH
39809: LD_VAR 0 2
39813: PPUSH
39814: LD_VAR 0 2
39818: PUSH
39819: LD_INT 1
39821: PLUS
39822: PPUSH
39823: LD_VAR 0 1
39827: PUSH
39828: LD_VAR 0 4
39832: ARRAY
39833: PPUSH
39834: CALL_OW 2
39838: ST_TO_ADDR
// array := Delete ( array , index ) ;
39839: LD_ADDR_VAR 0 1
39843: PUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: LD_VAR 0 4
39853: PPUSH
39854: CALL_OW 3
39858: ST_TO_ADDR
// end ;
39859: GO 39783
39861: POP
39862: POP
// end ;
39863: LD_VAR 0 2
39867: RET
// export function GetBaseMaterials ( base ) ; begin
39868: LD_INT 0
39870: PPUSH
// result := [ 0 , 0 , 0 ] ;
39871: LD_ADDR_VAR 0 2
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// if not base then
39890: LD_VAR 0 1
39894: NOT
39895: IFFALSE 39899
// exit ;
39897: GO 39948
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39899: LD_ADDR_VAR 0 2
39903: PUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: LD_INT 1
39911: PPUSH
39912: CALL_OW 275
39916: PUSH
39917: LD_VAR 0 1
39921: PPUSH
39922: LD_INT 2
39924: PPUSH
39925: CALL_OW 275
39929: PUSH
39930: LD_VAR 0 1
39934: PPUSH
39935: LD_INT 3
39937: PPUSH
39938: CALL_OW 275
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
// end ;
39948: LD_VAR 0 2
39952: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39953: LD_INT 0
39955: PPUSH
39956: PPUSH
// result := array ;
39957: LD_ADDR_VAR 0 3
39961: PUSH
39962: LD_VAR 0 1
39966: ST_TO_ADDR
// if size >= result then
39967: LD_VAR 0 2
39971: PUSH
39972: LD_VAR 0 3
39976: GREATEREQUAL
39977: IFFALSE 39981
// exit ;
39979: GO 40031
// if size then
39981: LD_VAR 0 2
39985: IFFALSE 40031
// for i := array downto size do
39987: LD_ADDR_VAR 0 4
39991: PUSH
39992: DOUBLE
39993: LD_VAR 0 1
39997: INC
39998: ST_TO_ADDR
39999: LD_VAR 0 2
40003: PUSH
40004: FOR_DOWNTO
40005: IFFALSE 40029
// result := Delete ( result , result ) ;
40007: LD_ADDR_VAR 0 3
40011: PUSH
40012: LD_VAR 0 3
40016: PPUSH
40017: LD_VAR 0 3
40021: PPUSH
40022: CALL_OW 3
40026: ST_TO_ADDR
40027: GO 40004
40029: POP
40030: POP
// end ;
40031: LD_VAR 0 3
40035: RET
// export function ComExit ( unit ) ; var tmp ; begin
40036: LD_INT 0
40038: PPUSH
40039: PPUSH
// if not IsInUnit ( unit ) then
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 310
40049: NOT
40050: IFFALSE 40054
// exit ;
40052: GO 40114
// tmp := IsInUnit ( unit ) ;
40054: LD_ADDR_VAR 0 3
40058: PUSH
40059: LD_VAR 0 1
40063: PPUSH
40064: CALL_OW 310
40068: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40069: LD_VAR 0 3
40073: PPUSH
40074: CALL_OW 247
40078: PUSH
40079: LD_INT 2
40081: EQUAL
40082: IFFALSE 40095
// ComExitVehicle ( unit ) else
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 121
40093: GO 40104
// ComExitBuilding ( unit ) ;
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 122
// result := tmp ;
40104: LD_ADDR_VAR 0 2
40108: PUSH
40109: LD_VAR 0 3
40113: ST_TO_ADDR
// end ;
40114: LD_VAR 0 2
40118: RET
// export function ComExitAll ( units ) ; var i ; begin
40119: LD_INT 0
40121: PPUSH
40122: PPUSH
// if not units then
40123: LD_VAR 0 1
40127: NOT
40128: IFFALSE 40132
// exit ;
40130: GO 40158
// for i in units do
40132: LD_ADDR_VAR 0 3
40136: PUSH
40137: LD_VAR 0 1
40141: PUSH
40142: FOR_IN
40143: IFFALSE 40156
// ComExit ( i ) ;
40145: LD_VAR 0 3
40149: PPUSH
40150: CALL 40036 0 1
40154: GO 40142
40156: POP
40157: POP
// end ;
40158: LD_VAR 0 2
40162: RET
// export function ResetHc ; begin
40163: LD_INT 0
40165: PPUSH
// InitHc ;
40166: CALL_OW 19
// hc_importance := 0 ;
40170: LD_ADDR_OWVAR 32
40174: PUSH
40175: LD_INT 0
40177: ST_TO_ADDR
// end ;
40178: LD_VAR 0 1
40182: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40183: LD_INT 0
40185: PPUSH
40186: PPUSH
40187: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40188: LD_ADDR_VAR 0 6
40192: PUSH
40193: LD_VAR 0 1
40197: PUSH
40198: LD_VAR 0 3
40202: PLUS
40203: PUSH
40204: LD_INT 2
40206: DIV
40207: ST_TO_ADDR
// if _x < 0 then
40208: LD_VAR 0 6
40212: PUSH
40213: LD_INT 0
40215: LESS
40216: IFFALSE 40233
// _x := _x * - 1 ;
40218: LD_ADDR_VAR 0 6
40222: PUSH
40223: LD_VAR 0 6
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: MUL
40232: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40233: LD_ADDR_VAR 0 7
40237: PUSH
40238: LD_VAR 0 2
40242: PUSH
40243: LD_VAR 0 4
40247: PLUS
40248: PUSH
40249: LD_INT 2
40251: DIV
40252: ST_TO_ADDR
// if _y < 0 then
40253: LD_VAR 0 7
40257: PUSH
40258: LD_INT 0
40260: LESS
40261: IFFALSE 40278
// _y := _y * - 1 ;
40263: LD_ADDR_VAR 0 7
40267: PUSH
40268: LD_VAR 0 7
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: MUL
40277: ST_TO_ADDR
// result := [ _x , _y ] ;
40278: LD_ADDR_VAR 0 5
40282: PUSH
40283: LD_VAR 0 6
40287: PUSH
40288: LD_VAR 0 7
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// end ;
40297: LD_VAR 0 5
40301: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40302: LD_INT 0
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
// task := GetTaskList ( unit ) ;
40308: LD_ADDR_VAR 0 7
40312: PUSH
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 437
40322: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40323: LD_VAR 0 7
40327: NOT
40328: IFFALSE 40347
40330: PUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: LD_VAR 0 2
40340: PPUSH
40341: CALL_OW 308
40345: NOT
40346: AND
40347: IFFALSE 40351
// exit ;
40349: GO 40469
// if IsInArea ( unit , area ) then
40351: LD_VAR 0 1
40355: PPUSH
40356: LD_VAR 0 2
40360: PPUSH
40361: CALL_OW 308
40365: IFFALSE 40383
// begin ComMoveToArea ( unit , goAway ) ;
40367: LD_VAR 0 1
40371: PPUSH
40372: LD_VAR 0 3
40376: PPUSH
40377: CALL_OW 113
// exit ;
40381: GO 40469
// end ; if task [ 1 ] [ 1 ] <> M then
40383: LD_VAR 0 7
40387: PUSH
40388: LD_INT 1
40390: ARRAY
40391: PUSH
40392: LD_INT 1
40394: ARRAY
40395: PUSH
40396: LD_STRING M
40398: NONEQUAL
40399: IFFALSE 40403
// exit ;
40401: GO 40469
// x := task [ 1 ] [ 2 ] ;
40403: LD_ADDR_VAR 0 5
40407: PUSH
40408: LD_VAR 0 7
40412: PUSH
40413: LD_INT 1
40415: ARRAY
40416: PUSH
40417: LD_INT 2
40419: ARRAY
40420: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40421: LD_ADDR_VAR 0 6
40425: PUSH
40426: LD_VAR 0 7
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: PUSH
40435: LD_INT 3
40437: ARRAY
40438: ST_TO_ADDR
// if InArea ( x , y , area ) then
40439: LD_VAR 0 5
40443: PPUSH
40444: LD_VAR 0 6
40448: PPUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: CALL_OW 309
40458: IFFALSE 40469
// ComStop ( unit ) ;
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 141
// end ;
40469: LD_VAR 0 4
40473: RET
// export function Abs ( value ) ; begin
40474: LD_INT 0
40476: PPUSH
// result := value ;
40477: LD_ADDR_VAR 0 2
40481: PUSH
40482: LD_VAR 0 1
40486: ST_TO_ADDR
// if value < 0 then
40487: LD_VAR 0 1
40491: PUSH
40492: LD_INT 0
40494: LESS
40495: IFFALSE 40512
// result := value * - 1 ;
40497: LD_ADDR_VAR 0 2
40501: PUSH
40502: LD_VAR 0 1
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: MUL
40511: ST_TO_ADDR
// end ;
40512: LD_VAR 0 2
40516: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40517: LD_INT 0
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
// if not unit or not building then
40527: LD_VAR 0 1
40531: NOT
40532: IFTRUE 40541
40534: PUSH
40535: LD_VAR 0 2
40539: NOT
40540: OR
40541: IFFALSE 40545
// exit ;
40543: GO 40773
// x := GetX ( building ) ;
40545: LD_ADDR_VAR 0 4
40549: PUSH
40550: LD_VAR 0 2
40554: PPUSH
40555: CALL_OW 250
40559: ST_TO_ADDR
// y := GetY ( building ) ;
40560: LD_ADDR_VAR 0 6
40564: PUSH
40565: LD_VAR 0 2
40569: PPUSH
40570: CALL_OW 251
40574: ST_TO_ADDR
// d := GetDir ( building ) ;
40575: LD_ADDR_VAR 0 8
40579: PUSH
40580: LD_VAR 0 2
40584: PPUSH
40585: CALL_OW 254
40589: ST_TO_ADDR
// r := 4 ;
40590: LD_ADDR_VAR 0 9
40594: PUSH
40595: LD_INT 4
40597: ST_TO_ADDR
// for i := 1 to 5 do
40598: LD_ADDR_VAR 0 10
40602: PUSH
40603: DOUBLE
40604: LD_INT 1
40606: DEC
40607: ST_TO_ADDR
40608: LD_INT 5
40610: PUSH
40611: FOR_TO
40612: IFFALSE 40771
// begin _x := ShiftX ( x , d , r + i ) ;
40614: LD_ADDR_VAR 0 5
40618: PUSH
40619: LD_VAR 0 4
40623: PPUSH
40624: LD_VAR 0 8
40628: PPUSH
40629: LD_VAR 0 9
40633: PUSH
40634: LD_VAR 0 10
40638: PLUS
40639: PPUSH
40640: CALL_OW 272
40644: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40645: LD_ADDR_VAR 0 7
40649: PUSH
40650: LD_VAR 0 6
40654: PPUSH
40655: LD_VAR 0 8
40659: PPUSH
40660: LD_VAR 0 9
40664: PUSH
40665: LD_VAR 0 10
40669: PLUS
40670: PPUSH
40671: CALL_OW 273
40675: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40676: LD_VAR 0 5
40680: PPUSH
40681: LD_VAR 0 7
40685: PPUSH
40686: CALL_OW 488
40690: IFFALSE 40725
40692: PUSH
40693: LD_VAR 0 5
40697: PPUSH
40698: LD_VAR 0 7
40702: PPUSH
40703: CALL_OW 428
40707: PPUSH
40708: CALL_OW 247
40712: PUSH
40713: LD_INT 3
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: IN
40723: NOT
40724: AND
40725: IFFALSE 40769
// begin ComMoveXY ( unit , _x , _y ) ;
40727: LD_VAR 0 1
40731: PPUSH
40732: LD_VAR 0 5
40736: PPUSH
40737: LD_VAR 0 7
40741: PPUSH
40742: CALL_OW 111
// result := [ _x , _y ] ;
40746: LD_ADDR_VAR 0 3
40750: PUSH
40751: LD_VAR 0 5
40755: PUSH
40756: LD_VAR 0 7
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: ST_TO_ADDR
// exit ;
40765: POP
40766: POP
40767: GO 40773
// end ; end ;
40769: GO 40611
40771: POP
40772: POP
// end ;
40773: LD_VAR 0 3
40777: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40778: LD_INT 0
40780: PPUSH
40781: PPUSH
40782: PPUSH
// result := 0 ;
40783: LD_ADDR_VAR 0 3
40787: PUSH
40788: LD_INT 0
40790: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40791: LD_VAR 0 1
40795: PUSH
40796: LD_INT 0
40798: LESS
40799: IFTRUE 40811
40801: PUSH
40802: LD_VAR 0 1
40806: PUSH
40807: LD_INT 8
40809: GREATER
40810: OR
40811: IFTRUE 40823
40813: PUSH
40814: LD_VAR 0 2
40818: PUSH
40819: LD_INT 0
40821: LESS
40822: OR
40823: IFTRUE 40835
40825: PUSH
40826: LD_VAR 0 2
40830: PUSH
40831: LD_INT 8
40833: GREATER
40834: OR
40835: IFFALSE 40839
// exit ;
40837: GO 40914
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40839: LD_ADDR_VAR 0 4
40843: PUSH
40844: LD_INT 22
40846: PUSH
40847: LD_VAR 0 2
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PPUSH
40856: CALL_OW 69
40860: PUSH
40861: FOR_IN
40862: IFFALSE 40912
// begin un := UnitShoot ( i ) ;
40864: LD_ADDR_VAR 0 5
40868: PUSH
40869: LD_VAR 0 4
40873: PPUSH
40874: CALL_OW 504
40878: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40879: LD_VAR 0 5
40883: PPUSH
40884: CALL_OW 255
40888: PUSH
40889: LD_VAR 0 1
40893: EQUAL
40894: IFFALSE 40910
// begin result := un ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 5
40905: ST_TO_ADDR
// exit ;
40906: POP
40907: POP
40908: GO 40914
// end ; end ;
40910: GO 40861
40912: POP
40913: POP
// end ;
40914: LD_VAR 0 3
40918: RET
// export function GetCargoBay ( units ) ; begin
40919: LD_INT 0
40921: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40922: LD_ADDR_VAR 0 2
40926: PUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: LD_INT 2
40934: PUSH
40935: LD_INT 34
40937: PUSH
40938: LD_INT 12
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 34
40947: PUSH
40948: LD_INT 51
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 34
40957: PUSH
40958: LD_INT 32
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 34
40967: PUSH
40968: LD_INT 89
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: PPUSH
40982: CALL_OW 72
40986: ST_TO_ADDR
// end ;
40987: LD_VAR 0 2
40991: RET
// export function Negate ( value ) ; begin
40992: LD_INT 0
40994: PPUSH
// result := not value ;
40995: LD_ADDR_VAR 0 2
40999: PUSH
41000: LD_VAR 0 1
41004: NOT
41005: ST_TO_ADDR
// end ;
41006: LD_VAR 0 2
41010: RET
// export function Inc ( value ) ; begin
41011: LD_INT 0
41013: PPUSH
// result := value + 1 ;
41014: LD_ADDR_VAR 0 2
41018: PUSH
41019: LD_VAR 0 1
41023: PUSH
41024: LD_INT 1
41026: PLUS
41027: ST_TO_ADDR
// end ;
41028: LD_VAR 0 2
41032: RET
// export function Dec ( value ) ; begin
41033: LD_INT 0
41035: PPUSH
// result := value - 1 ;
41036: LD_ADDR_VAR 0 2
41040: PUSH
41041: LD_VAR 0 1
41045: PUSH
41046: LD_INT 1
41048: MINUS
41049: ST_TO_ADDR
// end ;
41050: LD_VAR 0 2
41054: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41055: LD_INT 0
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
41064: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41065: LD_VAR 0 1
41069: PPUSH
41070: LD_VAR 0 2
41074: PPUSH
41075: CALL_OW 488
41079: NOT
41080: IFTRUE 41099
41082: PUSH
41083: LD_VAR 0 3
41087: PPUSH
41088: LD_VAR 0 4
41092: PPUSH
41093: CALL_OW 488
41097: NOT
41098: OR
41099: IFFALSE 41112
// begin result := - 1 ;
41101: LD_ADDR_VAR 0 5
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: ST_TO_ADDR
// exit ;
41110: GO 41347
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41112: LD_ADDR_VAR 0 12
41116: PUSH
41117: LD_VAR 0 1
41121: PPUSH
41122: LD_VAR 0 2
41126: PPUSH
41127: LD_VAR 0 3
41131: PPUSH
41132: LD_VAR 0 4
41136: PPUSH
41137: CALL 40183 0 4
41141: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41142: LD_ADDR_VAR 0 11
41146: PUSH
41147: LD_VAR 0 1
41151: PPUSH
41152: LD_VAR 0 2
41156: PPUSH
41157: LD_VAR 0 12
41161: PUSH
41162: LD_INT 1
41164: ARRAY
41165: PPUSH
41166: LD_VAR 0 12
41170: PUSH
41171: LD_INT 2
41173: ARRAY
41174: PPUSH
41175: CALL_OW 298
41179: ST_TO_ADDR
// distance := 9999 ;
41180: LD_ADDR_VAR 0 10
41184: PUSH
41185: LD_INT 9999
41187: ST_TO_ADDR
// for i := 0 to 5 do
41188: LD_ADDR_VAR 0 6
41192: PUSH
41193: DOUBLE
41194: LD_INT 0
41196: DEC
41197: ST_TO_ADDR
41198: LD_INT 5
41200: PUSH
41201: FOR_TO
41202: IFFALSE 41345
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41204: LD_ADDR_VAR 0 7
41208: PUSH
41209: LD_VAR 0 1
41213: PPUSH
41214: LD_VAR 0 6
41218: PPUSH
41219: LD_VAR 0 11
41223: PPUSH
41224: CALL_OW 272
41228: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41229: LD_ADDR_VAR 0 8
41233: PUSH
41234: LD_VAR 0 2
41238: PPUSH
41239: LD_VAR 0 6
41243: PPUSH
41244: LD_VAR 0 11
41248: PPUSH
41249: CALL_OW 273
41253: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41254: LD_VAR 0 7
41258: PPUSH
41259: LD_VAR 0 8
41263: PPUSH
41264: CALL_OW 488
41268: NOT
41269: IFFALSE 41273
// continue ;
41271: GO 41201
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41273: LD_ADDR_VAR 0 9
41277: PUSH
41278: LD_VAR 0 12
41282: PUSH
41283: LD_INT 1
41285: ARRAY
41286: PPUSH
41287: LD_VAR 0 12
41291: PUSH
41292: LD_INT 2
41294: ARRAY
41295: PPUSH
41296: LD_VAR 0 7
41300: PPUSH
41301: LD_VAR 0 8
41305: PPUSH
41306: CALL_OW 298
41310: ST_TO_ADDR
// if tmp < distance then
41311: LD_VAR 0 9
41315: PUSH
41316: LD_VAR 0 10
41320: LESS
41321: IFFALSE 41343
// begin result := i ;
41323: LD_ADDR_VAR 0 5
41327: PUSH
41328: LD_VAR 0 6
41332: ST_TO_ADDR
// distance := tmp ;
41333: LD_ADDR_VAR 0 10
41337: PUSH
41338: LD_VAR 0 9
41342: ST_TO_ADDR
// end ; end ;
41343: GO 41201
41345: POP
41346: POP
// end ;
41347: LD_VAR 0 5
41351: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41352: LD_INT 0
41354: PPUSH
41355: PPUSH
// if not driver or not IsInUnit ( driver ) then
41356: LD_VAR 0 1
41360: NOT
41361: IFTRUE 41375
41363: PUSH
41364: LD_VAR 0 1
41368: PPUSH
41369: CALL_OW 310
41373: NOT
41374: OR
41375: IFFALSE 41379
// exit ;
41377: GO 41469
// vehicle := IsInUnit ( driver ) ;
41379: LD_ADDR_VAR 0 3
41383: PUSH
41384: LD_VAR 0 1
41388: PPUSH
41389: CALL_OW 310
41393: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41394: LD_VAR 0 1
41398: PPUSH
41399: LD_STRING \
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: PUSH
41429: LD_STRING E
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_VAR 0 3
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PPUSH
41465: CALL_OW 446
// end ;
41469: LD_VAR 0 2
41473: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41474: LD_INT 0
41476: PPUSH
41477: PPUSH
// if not driver or not IsInUnit ( driver ) then
41478: LD_VAR 0 1
41482: NOT
41483: IFTRUE 41497
41485: PUSH
41486: LD_VAR 0 1
41490: PPUSH
41491: CALL_OW 310
41495: NOT
41496: OR
41497: IFFALSE 41501
// exit ;
41499: GO 41591
// vehicle := IsInUnit ( driver ) ;
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 1
41510: PPUSH
41511: CALL_OW 310
41515: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_STRING \
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: PUSH
41551: LD_STRING E
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_VAR 0 3
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PPUSH
41587: CALL_OW 447
// end ;
41591: LD_VAR 0 2
41595: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41596: LD_INT 0
41598: PPUSH
41599: PPUSH
41600: PPUSH
// tmp := [ ] ;
41601: LD_ADDR_VAR 0 5
41605: PUSH
41606: EMPTY
41607: ST_TO_ADDR
// for i in units do
41608: LD_ADDR_VAR 0 4
41612: PUSH
41613: LD_VAR 0 1
41617: PUSH
41618: FOR_IN
41619: IFFALSE 41657
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41621: LD_ADDR_VAR 0 5
41625: PUSH
41626: LD_VAR 0 5
41630: PPUSH
41631: LD_VAR 0 5
41635: PUSH
41636: LD_INT 1
41638: PLUS
41639: PPUSH
41640: LD_VAR 0 4
41644: PPUSH
41645: CALL_OW 256
41649: PPUSH
41650: CALL_OW 2
41654: ST_TO_ADDR
41655: GO 41618
41657: POP
41658: POP
// if not tmp then
41659: LD_VAR 0 5
41663: NOT
41664: IFFALSE 41668
// exit ;
41666: GO 41716
// if asc then
41668: LD_VAR 0 2
41672: IFFALSE 41696
// result := SortListByListAsc ( units , tmp ) else
41674: LD_ADDR_VAR 0 3
41678: PUSH
41679: LD_VAR 0 1
41683: PPUSH
41684: LD_VAR 0 5
41688: PPUSH
41689: CALL_OW 76
41693: ST_TO_ADDR
41694: GO 41716
// result := SortListByListDesc ( units , tmp ) ;
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_VAR 0 1
41705: PPUSH
41706: LD_VAR 0 5
41710: PPUSH
41711: CALL_OW 77
41715: ST_TO_ADDR
// end ;
41716: LD_VAR 0 3
41720: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41721: LD_INT 0
41723: PPUSH
41724: PPUSH
// task := GetTaskList ( mech ) ;
41725: LD_ADDR_VAR 0 4
41729: PUSH
41730: LD_VAR 0 1
41734: PPUSH
41735: CALL_OW 437
41739: ST_TO_ADDR
// if not task then
41740: LD_VAR 0 4
41744: NOT
41745: IFFALSE 41749
// exit ;
41747: GO 41793
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41749: LD_ADDR_VAR 0 3
41753: PUSH
41754: LD_VAR 0 4
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: PUSH
41763: LD_INT 1
41765: ARRAY
41766: PUSH
41767: LD_STRING r
41769: EQUAL
41770: IFFALSE 41792
41772: PUSH
41773: LD_VAR 0 4
41777: PUSH
41778: LD_INT 1
41780: ARRAY
41781: PUSH
41782: LD_INT 4
41784: ARRAY
41785: PUSH
41786: LD_VAR 0 2
41790: EQUAL
41791: AND
41792: ST_TO_ADDR
// end ;
41793: LD_VAR 0 3
41797: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41798: LD_INT 0
41800: PPUSH
// SetDir ( unit , d ) ;
41801: LD_VAR 0 1
41805: PPUSH
41806: LD_VAR 0 4
41810: PPUSH
41811: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41815: LD_ADDR_VAR 0 6
41819: PUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: LD_VAR 0 2
41829: PPUSH
41830: LD_VAR 0 3
41834: PPUSH
41835: LD_VAR 0 5
41839: PPUSH
41840: CALL_OW 48
41844: ST_TO_ADDR
// end ;
41845: LD_VAR 0 6
41849: RET
// export function ToNaturalNumber ( number ) ; begin
41850: LD_INT 0
41852: PPUSH
// result := number div 1 ;
41853: LD_ADDR_VAR 0 2
41857: PUSH
41858: LD_VAR 0 1
41862: PUSH
41863: LD_INT 1
41865: DIV
41866: ST_TO_ADDR
// if number < 0 then
41867: LD_VAR 0 1
41871: PUSH
41872: LD_INT 0
41874: LESS
41875: IFFALSE 41885
// result := 0 ;
41877: LD_ADDR_VAR 0 2
41881: PUSH
41882: LD_INT 0
41884: ST_TO_ADDR
// end ;
41885: LD_VAR 0 2
41889: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
41890: LD_INT 0
41892: PPUSH
41893: PPUSH
41894: PPUSH
// if not buildings then
41895: LD_VAR 0 1
41899: NOT
41900: IFFALSE 41904
// exit ;
41902: GO 42019
// tmp := [ ] ;
41904: LD_ADDR_VAR 0 5
41908: PUSH
41909: EMPTY
41910: ST_TO_ADDR
// for b in buildings do
41911: LD_ADDR_VAR 0 4
41915: PUSH
41916: LD_VAR 0 1
41920: PUSH
41921: FOR_IN
41922: IFFALSE 41960
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41924: LD_ADDR_VAR 0 5
41928: PUSH
41929: LD_VAR 0 5
41933: PPUSH
41934: LD_VAR 0 5
41938: PUSH
41939: LD_INT 1
41941: PLUS
41942: PPUSH
41943: LD_VAR 0 4
41947: PPUSH
41948: CALL_OW 266
41952: PPUSH
41953: CALL_OW 1
41957: ST_TO_ADDR
41958: GO 41921
41960: POP
41961: POP
// if not tmp then
41962: LD_VAR 0 5
41966: NOT
41967: IFFALSE 41971
// exit ;
41969: GO 42019
// if asc then
41971: LD_VAR 0 2
41975: IFFALSE 41999
// result := SortListByListAsc ( buildings , tmp ) else
41977: LD_ADDR_VAR 0 3
41981: PUSH
41982: LD_VAR 0 1
41986: PPUSH
41987: LD_VAR 0 5
41991: PPUSH
41992: CALL_OW 76
41996: ST_TO_ADDR
41997: GO 42019
// result := SortListByListDesc ( buildings , tmp ) ;
41999: LD_ADDR_VAR 0 3
42003: PUSH
42004: LD_VAR 0 1
42008: PPUSH
42009: LD_VAR 0 5
42013: PPUSH
42014: CALL_OW 77
42018: ST_TO_ADDR
// end ;
42019: LD_VAR 0 3
42023: RET
// export function SortByClass ( units , class ) ; var un ; begin
42024: LD_INT 0
42026: PPUSH
42027: PPUSH
// if not units or not class then
42028: LD_VAR 0 1
42032: NOT
42033: IFTRUE 42042
42035: PUSH
42036: LD_VAR 0 2
42040: NOT
42041: OR
42042: IFFALSE 42046
// exit ;
42044: GO 42141
// result := [ ] ;
42046: LD_ADDR_VAR 0 3
42050: PUSH
42051: EMPTY
42052: ST_TO_ADDR
// for un in units do
42053: LD_ADDR_VAR 0 4
42057: PUSH
42058: LD_VAR 0 1
42062: PUSH
42063: FOR_IN
42064: IFFALSE 42139
// if GetClass ( un ) = class then
42066: LD_VAR 0 4
42070: PPUSH
42071: CALL_OW 257
42075: PUSH
42076: LD_VAR 0 2
42080: EQUAL
42081: IFFALSE 42108
// result := Insert ( result , 1 , un ) else
42083: LD_ADDR_VAR 0 3
42087: PUSH
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_INT 1
42095: PPUSH
42096: LD_VAR 0 4
42100: PPUSH
42101: CALL_OW 2
42105: ST_TO_ADDR
42106: GO 42137
// result := Replace ( result , result + 1 , un ) ;
42108: LD_ADDR_VAR 0 3
42112: PUSH
42113: LD_VAR 0 3
42117: PPUSH
42118: LD_VAR 0 3
42122: PUSH
42123: LD_INT 1
42125: PLUS
42126: PPUSH
42127: LD_VAR 0 4
42131: PPUSH
42132: CALL_OW 1
42136: ST_TO_ADDR
42137: GO 42063
42139: POP
42140: POP
// end ;
42141: LD_VAR 0 3
42145: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42146: LD_INT 0
42148: PPUSH
42149: PPUSH
42150: PPUSH
42151: PPUSH
42152: PPUSH
42153: PPUSH
42154: PPUSH
// result := [ ] ;
42155: LD_ADDR_VAR 0 4
42159: PUSH
42160: EMPTY
42161: ST_TO_ADDR
// if x - r < 0 then
42162: LD_VAR 0 1
42166: PUSH
42167: LD_VAR 0 3
42171: MINUS
42172: PUSH
42173: LD_INT 0
42175: LESS
42176: IFFALSE 42188
// min_x := 0 else
42178: LD_ADDR_VAR 0 8
42182: PUSH
42183: LD_INT 0
42185: ST_TO_ADDR
42186: GO 42204
// min_x := x - r ;
42188: LD_ADDR_VAR 0 8
42192: PUSH
42193: LD_VAR 0 1
42197: PUSH
42198: LD_VAR 0 3
42202: MINUS
42203: ST_TO_ADDR
// if y - r < 0 then
42204: LD_VAR 0 2
42208: PUSH
42209: LD_VAR 0 3
42213: MINUS
42214: PUSH
42215: LD_INT 0
42217: LESS
42218: IFFALSE 42230
// min_y := 0 else
42220: LD_ADDR_VAR 0 7
42224: PUSH
42225: LD_INT 0
42227: ST_TO_ADDR
42228: GO 42246
// min_y := y - r ;
42230: LD_ADDR_VAR 0 7
42234: PUSH
42235: LD_VAR 0 2
42239: PUSH
42240: LD_VAR 0 3
42244: MINUS
42245: ST_TO_ADDR
// max_x := x + r ;
42246: LD_ADDR_VAR 0 9
42250: PUSH
42251: LD_VAR 0 1
42255: PUSH
42256: LD_VAR 0 3
42260: PLUS
42261: ST_TO_ADDR
// max_y := y + r ;
42262: LD_ADDR_VAR 0 10
42266: PUSH
42267: LD_VAR 0 2
42271: PUSH
42272: LD_VAR 0 3
42276: PLUS
42277: ST_TO_ADDR
// for _x = min_x to max_x do
42278: LD_ADDR_VAR 0 5
42282: PUSH
42283: DOUBLE
42284: LD_VAR 0 8
42288: DEC
42289: ST_TO_ADDR
42290: LD_VAR 0 9
42294: PUSH
42295: FOR_TO
42296: IFFALSE 42397
// for _y = min_y to max_y do
42298: LD_ADDR_VAR 0 6
42302: PUSH
42303: DOUBLE
42304: LD_VAR 0 7
42308: DEC
42309: ST_TO_ADDR
42310: LD_VAR 0 10
42314: PUSH
42315: FOR_TO
42316: IFFALSE 42393
// begin if not ValidHex ( _x , _y ) then
42318: LD_VAR 0 5
42322: PPUSH
42323: LD_VAR 0 6
42327: PPUSH
42328: CALL_OW 488
42332: NOT
42333: IFFALSE 42337
// continue ;
42335: GO 42315
// if GetResourceTypeXY ( _x , _y ) then
42337: LD_VAR 0 5
42341: PPUSH
42342: LD_VAR 0 6
42346: PPUSH
42347: CALL_OW 283
42351: IFFALSE 42391
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42353: LD_ADDR_VAR 0 4
42357: PUSH
42358: LD_VAR 0 4
42362: PPUSH
42363: LD_VAR 0 4
42367: PUSH
42368: LD_INT 1
42370: PLUS
42371: PPUSH
42372: LD_VAR 0 5
42376: PUSH
42377: LD_VAR 0 6
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PPUSH
42386: CALL_OW 1
42390: ST_TO_ADDR
// end ;
42391: GO 42315
42393: POP
42394: POP
42395: GO 42295
42397: POP
42398: POP
// end ;
42399: LD_VAR 0 4
42403: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42404: LD_INT 0
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
// if not units then
42414: LD_VAR 0 1
42418: NOT
42419: IFFALSE 42423
// exit ;
42421: GO 42955
// result := UnitFilter ( units , [ f_ok ] ) ;
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: LD_INT 50
42435: PUSH
42436: EMPTY
42437: LIST
42438: PPUSH
42439: CALL_OW 72
42443: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42444: LD_ADDR_VAR 0 8
42448: PUSH
42449: LD_VAR 0 1
42453: PUSH
42454: LD_INT 1
42456: ARRAY
42457: PPUSH
42458: CALL_OW 255
42462: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42463: LD_ADDR_VAR 0 10
42467: PUSH
42468: LD_INT 29
42470: PUSH
42471: LD_INT 91
42473: PUSH
42474: LD_INT 49
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: ST_TO_ADDR
// if not result then
42482: LD_VAR 0 3
42486: NOT
42487: IFFALSE 42491
// exit ;
42489: GO 42955
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42491: LD_ADDR_VAR 0 5
42495: PUSH
42496: LD_INT 81
42498: PUSH
42499: LD_VAR 0 8
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PPUSH
42508: CALL_OW 69
42512: ST_TO_ADDR
// for i in result do
42513: LD_ADDR_VAR 0 4
42517: PUSH
42518: LD_VAR 0 3
42522: PUSH
42523: FOR_IN
42524: IFFALSE 42953
// begin tag := GetTag ( i ) + 1 ;
42526: LD_ADDR_VAR 0 9
42530: PUSH
42531: LD_VAR 0 4
42535: PPUSH
42536: CALL_OW 110
42540: PUSH
42541: LD_INT 1
42543: PLUS
42544: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42545: LD_ADDR_VAR 0 7
42549: PUSH
42550: LD_VAR 0 4
42554: PPUSH
42555: CALL_OW 250
42559: PPUSH
42560: LD_VAR 0 4
42564: PPUSH
42565: CALL_OW 251
42569: PPUSH
42570: LD_INT 4
42572: PPUSH
42573: CALL 42146 0 3
42577: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42578: LD_VAR 0 4
42582: PPUSH
42583: CALL_OW 247
42587: PUSH
42588: LD_INT 2
42590: EQUAL
42591: IFFALSE 42603
42593: PUSH
42594: LD_VAR 0 7
42598: PUSH
42599: LD_INT 2
42601: GREATER
42602: AND
42603: IFFALSE 42623
42605: PUSH
42606: LD_VAR 0 4
42610: PPUSH
42611: CALL_OW 264
42615: PUSH
42616: LD_VAR 0 10
42620: IN
42621: NOT
42622: AND
42623: IFFALSE 42662
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42625: LD_VAR 0 4
42629: PPUSH
42630: LD_VAR 0 7
42634: PUSH
42635: LD_INT 1
42637: ARRAY
42638: PUSH
42639: LD_INT 1
42641: ARRAY
42642: PPUSH
42643: LD_VAR 0 7
42647: PUSH
42648: LD_INT 1
42650: ARRAY
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: PPUSH
42656: CALL_OW 116
42660: GO 42951
// if path > tag then
42662: LD_VAR 0 2
42666: PUSH
42667: LD_VAR 0 9
42671: GREATER
42672: IFFALSE 42880
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42674: LD_ADDR_VAR 0 6
42678: PUSH
42679: LD_VAR 0 5
42683: PPUSH
42684: LD_INT 91
42686: PUSH
42687: LD_VAR 0 4
42691: PUSH
42692: LD_INT 8
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: PPUSH
42700: CALL_OW 72
42704: ST_TO_ADDR
// if nearEnemy then
42705: LD_VAR 0 6
42709: IFFALSE 42778
// begin if GetWeapon ( i ) = ru_time_lapser then
42711: LD_VAR 0 4
42715: PPUSH
42716: CALL_OW 264
42720: PUSH
42721: LD_INT 49
42723: EQUAL
42724: IFFALSE 42752
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42726: LD_VAR 0 4
42730: PPUSH
42731: LD_VAR 0 6
42735: PPUSH
42736: LD_VAR 0 4
42740: PPUSH
42741: CALL_OW 74
42745: PPUSH
42746: CALL_OW 112
42750: GO 42776
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42752: LD_VAR 0 4
42756: PPUSH
42757: LD_VAR 0 6
42761: PPUSH
42762: LD_VAR 0 4
42766: PPUSH
42767: CALL_OW 74
42771: PPUSH
42772: CALL 44036 0 2
// end else
42776: GO 42878
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42778: LD_VAR 0 4
42782: PPUSH
42783: LD_VAR 0 2
42787: PUSH
42788: LD_VAR 0 9
42792: ARRAY
42793: PUSH
42794: LD_INT 1
42796: ARRAY
42797: PPUSH
42798: LD_VAR 0 2
42802: PUSH
42803: LD_VAR 0 9
42807: ARRAY
42808: PUSH
42809: LD_INT 2
42811: ARRAY
42812: PPUSH
42813: CALL_OW 297
42817: PUSH
42818: LD_INT 6
42820: GREATER
42821: IFFALSE 42864
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42823: LD_VAR 0 4
42827: PPUSH
42828: LD_VAR 0 2
42832: PUSH
42833: LD_VAR 0 9
42837: ARRAY
42838: PUSH
42839: LD_INT 1
42841: ARRAY
42842: PPUSH
42843: LD_VAR 0 2
42847: PUSH
42848: LD_VAR 0 9
42852: ARRAY
42853: PUSH
42854: LD_INT 2
42856: ARRAY
42857: PPUSH
42858: CALL_OW 114
42862: GO 42878
// SetTag ( i , tag ) ;
42864: LD_VAR 0 4
42868: PPUSH
42869: LD_VAR 0 9
42873: PPUSH
42874: CALL_OW 109
// end else
42878: GO 42951
// if enemy then
42880: LD_VAR 0 5
42884: IFFALSE 42951
// begin if GetWeapon ( i ) = ru_time_lapser then
42886: LD_VAR 0 4
42890: PPUSH
42891: CALL_OW 264
42895: PUSH
42896: LD_INT 49
42898: EQUAL
42899: IFFALSE 42927
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42901: LD_VAR 0 4
42905: PPUSH
42906: LD_VAR 0 5
42910: PPUSH
42911: LD_VAR 0 4
42915: PPUSH
42916: CALL_OW 74
42920: PPUSH
42921: CALL_OW 112
42925: GO 42951
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42927: LD_VAR 0 4
42931: PPUSH
42932: LD_VAR 0 5
42936: PPUSH
42937: LD_VAR 0 4
42941: PPUSH
42942: CALL_OW 74
42946: PPUSH
42947: CALL 44036 0 2
// end ; end ;
42951: GO 42523
42953: POP
42954: POP
// end ;
42955: LD_VAR 0 3
42959: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42960: LD_INT 0
42962: PPUSH
42963: PPUSH
42964: PPUSH
// if not unit or IsInUnit ( unit ) then
42965: LD_VAR 0 1
42969: NOT
42970: IFTRUE 42983
42972: PUSH
42973: LD_VAR 0 1
42977: PPUSH
42978: CALL_OW 310
42982: OR
42983: IFFALSE 42987
// exit ;
42985: GO 43078
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42987: LD_ADDR_VAR 0 4
42991: PUSH
42992: LD_VAR 0 1
42996: PPUSH
42997: CALL_OW 250
43001: PPUSH
43002: LD_VAR 0 2
43006: PPUSH
43007: LD_INT 1
43009: PPUSH
43010: CALL_OW 272
43014: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43015: LD_ADDR_VAR 0 5
43019: PUSH
43020: LD_VAR 0 1
43024: PPUSH
43025: CALL_OW 251
43029: PPUSH
43030: LD_VAR 0 2
43034: PPUSH
43035: LD_INT 1
43037: PPUSH
43038: CALL_OW 273
43042: ST_TO_ADDR
// if ValidHex ( x , y ) then
43043: LD_VAR 0 4
43047: PPUSH
43048: LD_VAR 0 5
43052: PPUSH
43053: CALL_OW 488
43057: IFFALSE 43078
// ComTurnXY ( unit , x , y ) ;
43059: LD_VAR 0 1
43063: PPUSH
43064: LD_VAR 0 4
43068: PPUSH
43069: LD_VAR 0 5
43073: PPUSH
43074: CALL_OW 118
// end ;
43078: LD_VAR 0 3
43082: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43083: LD_INT 0
43085: PPUSH
43086: PPUSH
// result := false ;
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_INT 0
43094: ST_TO_ADDR
// if not units then
43095: LD_VAR 0 2
43099: NOT
43100: IFFALSE 43104
// exit ;
43102: GO 43149
// for i in units do
43104: LD_ADDR_VAR 0 4
43108: PUSH
43109: LD_VAR 0 2
43113: PUSH
43114: FOR_IN
43115: IFFALSE 43147
// if See ( side , i ) then
43117: LD_VAR 0 1
43121: PPUSH
43122: LD_VAR 0 4
43126: PPUSH
43127: CALL_OW 292
43131: IFFALSE 43145
// begin result := true ;
43133: LD_ADDR_VAR 0 3
43137: PUSH
43138: LD_INT 1
43140: ST_TO_ADDR
// exit ;
43141: POP
43142: POP
43143: GO 43149
// end ;
43145: GO 43114
43147: POP
43148: POP
// end ;
43149: LD_VAR 0 3
43153: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43154: LD_INT 0
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
// if not unit or not points then
43160: LD_VAR 0 1
43164: NOT
43165: IFTRUE 43174
43167: PUSH
43168: LD_VAR 0 2
43172: NOT
43173: OR
43174: IFFALSE 43178
// exit ;
43176: GO 43268
// dist := 99999 ;
43178: LD_ADDR_VAR 0 5
43182: PUSH
43183: LD_INT 99999
43185: ST_TO_ADDR
// for i in points do
43186: LD_ADDR_VAR 0 4
43190: PUSH
43191: LD_VAR 0 2
43195: PUSH
43196: FOR_IN
43197: IFFALSE 43266
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43199: LD_ADDR_VAR 0 6
43203: PUSH
43204: LD_VAR 0 1
43208: PPUSH
43209: LD_VAR 0 4
43213: PUSH
43214: LD_INT 1
43216: ARRAY
43217: PPUSH
43218: LD_VAR 0 4
43222: PUSH
43223: LD_INT 2
43225: ARRAY
43226: PPUSH
43227: CALL_OW 297
43231: ST_TO_ADDR
// if tmpDist < dist then
43232: LD_VAR 0 6
43236: PUSH
43237: LD_VAR 0 5
43241: LESS
43242: IFFALSE 43264
// begin result := i ;
43244: LD_ADDR_VAR 0 3
43248: PUSH
43249: LD_VAR 0 4
43253: ST_TO_ADDR
// dist := tmpDist ;
43254: LD_ADDR_VAR 0 5
43258: PUSH
43259: LD_VAR 0 6
43263: ST_TO_ADDR
// end ; end ;
43264: GO 43196
43266: POP
43267: POP
// end ;
43268: LD_VAR 0 3
43272: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43273: LD_INT 0
43275: PPUSH
// uc_side := side ;
43276: LD_ADDR_OWVAR 20
43280: PUSH
43281: LD_VAR 0 1
43285: ST_TO_ADDR
// uc_nation := 3 ;
43286: LD_ADDR_OWVAR 21
43290: PUSH
43291: LD_INT 3
43293: ST_TO_ADDR
// vc_chassis := 25 ;
43294: LD_ADDR_OWVAR 37
43298: PUSH
43299: LD_INT 25
43301: ST_TO_ADDR
// vc_engine := engine_siberite ;
43302: LD_ADDR_OWVAR 39
43306: PUSH
43307: LD_INT 3
43309: ST_TO_ADDR
// vc_control := control_computer ;
43310: LD_ADDR_OWVAR 38
43314: PUSH
43315: LD_INT 3
43317: ST_TO_ADDR
// vc_weapon := 59 ;
43318: LD_ADDR_OWVAR 40
43322: PUSH
43323: LD_INT 59
43325: ST_TO_ADDR
// result := CreateVehicle ;
43326: LD_ADDR_VAR 0 5
43330: PUSH
43331: CALL_OW 45
43335: ST_TO_ADDR
// SetDir ( result , d ) ;
43336: LD_VAR 0 5
43340: PPUSH
43341: LD_VAR 0 4
43345: PPUSH
43346: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43350: LD_VAR 0 5
43354: PPUSH
43355: LD_VAR 0 2
43359: PPUSH
43360: LD_VAR 0 3
43364: PPUSH
43365: LD_INT 0
43367: PPUSH
43368: CALL_OW 48
// end ;
43372: LD_VAR 0 5
43376: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43377: LD_INT 0
43379: PPUSH
43380: PPUSH
43381: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43382: LD_ADDR_VAR 0 2
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43405: LD_VAR 0 1
43409: NOT
43410: IFTRUE 43443
43412: PUSH
43413: LD_VAR 0 1
43417: PPUSH
43418: CALL_OW 264
43422: PUSH
43423: LD_INT 12
43425: PUSH
43426: LD_INT 51
43428: PUSH
43429: LD_INT 32
43431: PUSH
43432: LD_INT 89
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: IN
43441: NOT
43442: OR
43443: IFFALSE 43447
// exit ;
43445: GO 43545
// for i := 1 to 3 do
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: DOUBLE
43453: LD_INT 1
43455: DEC
43456: ST_TO_ADDR
43457: LD_INT 3
43459: PUSH
43460: FOR_TO
43461: IFFALSE 43543
// begin tmp := GetCargo ( cargo , i ) ;
43463: LD_ADDR_VAR 0 4
43467: PUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: LD_VAR 0 3
43477: PPUSH
43478: CALL_OW 289
43482: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43483: LD_ADDR_VAR 0 2
43487: PUSH
43488: LD_VAR 0 2
43492: PPUSH
43493: LD_VAR 0 3
43497: PPUSH
43498: LD_VAR 0 4
43502: PPUSH
43503: CALL_OW 1
43507: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43508: LD_ADDR_VAR 0 2
43512: PUSH
43513: LD_VAR 0 2
43517: PPUSH
43518: LD_INT 4
43520: PPUSH
43521: LD_VAR 0 2
43525: PUSH
43526: LD_INT 4
43528: ARRAY
43529: PUSH
43530: LD_VAR 0 4
43534: PLUS
43535: PPUSH
43536: CALL_OW 1
43540: ST_TO_ADDR
// end ;
43541: GO 43460
43543: POP
43544: POP
// end ;
43545: LD_VAR 0 2
43549: RET
// export function Length ( array ) ; begin
43550: LD_INT 0
43552: PPUSH
// result := array + 0 ;
43553: LD_ADDR_VAR 0 2
43557: PUSH
43558: LD_VAR 0 1
43562: PUSH
43563: LD_INT 0
43565: PLUS
43566: ST_TO_ADDR
// end ;
43567: LD_VAR 0 2
43571: RET
// export function PrepareArray ( array ) ; begin
43572: LD_INT 0
43574: PPUSH
// result := array diff 0 ;
43575: LD_ADDR_VAR 0 2
43579: PUSH
43580: LD_VAR 0 1
43584: PUSH
43585: LD_INT 0
43587: DIFF
43588: ST_TO_ADDR
// if not result [ 1 ] then
43589: LD_VAR 0 2
43593: PUSH
43594: LD_INT 1
43596: ARRAY
43597: NOT
43598: IFFALSE 43618
// result := Delete ( result , 1 ) ;
43600: LD_ADDR_VAR 0 2
43604: PUSH
43605: LD_VAR 0 2
43609: PPUSH
43610: LD_INT 1
43612: PPUSH
43613: CALL_OW 3
43617: ST_TO_ADDR
// end ;
43618: LD_VAR 0 2
43622: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43623: LD_INT 0
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
// sibRocketRange := 25 ;
43629: LD_ADDR_VAR 0 6
43633: PUSH
43634: LD_INT 25
43636: ST_TO_ADDR
// result := false ;
43637: LD_ADDR_VAR 0 4
43641: PUSH
43642: LD_INT 0
43644: ST_TO_ADDR
// for i := 0 to 5 do
43645: LD_ADDR_VAR 0 5
43649: PUSH
43650: DOUBLE
43651: LD_INT 0
43653: DEC
43654: ST_TO_ADDR
43655: LD_INT 5
43657: PUSH
43658: FOR_TO
43659: IFFALSE 43726
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43661: LD_VAR 0 1
43665: PPUSH
43666: LD_VAR 0 5
43670: PPUSH
43671: LD_VAR 0 6
43675: PPUSH
43676: CALL_OW 272
43680: PPUSH
43681: LD_VAR 0 2
43685: PPUSH
43686: LD_VAR 0 5
43690: PPUSH
43691: LD_VAR 0 6
43695: PPUSH
43696: CALL_OW 273
43700: PPUSH
43701: LD_VAR 0 3
43705: PPUSH
43706: CALL_OW 309
43710: IFFALSE 43724
// begin result := true ;
43712: LD_ADDR_VAR 0 4
43716: PUSH
43717: LD_INT 1
43719: ST_TO_ADDR
// exit ;
43720: POP
43721: POP
43722: GO 43728
// end ;
43724: GO 43658
43726: POP
43727: POP
// end ;
43728: LD_VAR 0 4
43732: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43733: LD_INT 0
43735: PPUSH
43736: PPUSH
43737: PPUSH
// if btype = b_depot then
43738: LD_VAR 0 2
43742: PUSH
43743: LD_INT 0
43745: EQUAL
43746: IFFALSE 43758
// begin result := true ;
43748: LD_ADDR_VAR 0 3
43752: PUSH
43753: LD_INT 1
43755: ST_TO_ADDR
// exit ;
43756: GO 43878
// end ; pom := GetBase ( depot ) ;
43758: LD_ADDR_VAR 0 4
43762: PUSH
43763: LD_VAR 0 1
43767: PPUSH
43768: CALL_OW 274
43772: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43773: LD_ADDR_VAR 0 5
43777: PUSH
43778: LD_VAR 0 2
43782: PPUSH
43783: LD_VAR 0 1
43787: PPUSH
43788: CALL_OW 248
43792: PPUSH
43793: CALL_OW 450
43797: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_VAR 0 4
43807: PPUSH
43808: LD_INT 1
43810: PPUSH
43811: CALL_OW 275
43815: PUSH
43816: LD_VAR 0 5
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: GREATEREQUAL
43825: IFFALSE 43851
43827: PUSH
43828: LD_VAR 0 4
43832: PPUSH
43833: LD_INT 2
43835: PPUSH
43836: CALL_OW 275
43840: PUSH
43841: LD_VAR 0 5
43845: PUSH
43846: LD_INT 2
43848: ARRAY
43849: GREATEREQUAL
43850: AND
43851: IFFALSE 43877
43853: PUSH
43854: LD_VAR 0 4
43858: PPUSH
43859: LD_INT 3
43861: PPUSH
43862: CALL_OW 275
43866: PUSH
43867: LD_VAR 0 5
43871: PUSH
43872: LD_INT 3
43874: ARRAY
43875: GREATEREQUAL
43876: AND
43877: ST_TO_ADDR
// end ;
43878: LD_VAR 0 3
43882: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43883: LD_INT 0
43885: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43886: LD_VAR 0 1
43890: PPUSH
43891: LD_VAR 0 2
43895: PPUSH
43896: LD_INT 0
43898: PPUSH
43899: LD_INT 0
43901: PPUSH
43902: LD_INT 1
43904: PPUSH
43905: LD_INT 0
43907: PPUSH
43908: CALL_OW 587
// end ;
43912: LD_VAR 0 3
43916: RET
// export function CenterOnNow ( unit ) ; begin
43917: LD_INT 0
43919: PPUSH
// result := IsInUnit ( unit ) ;
43920: LD_ADDR_VAR 0 2
43924: PUSH
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 310
43934: ST_TO_ADDR
// if not result then
43935: LD_VAR 0 2
43939: NOT
43940: IFFALSE 43952
// result := unit ;
43942: LD_ADDR_VAR 0 2
43946: PUSH
43947: LD_VAR 0 1
43951: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43952: LD_VAR 0 1
43956: PPUSH
43957: CALL_OW 87
// end ;
43961: LD_VAR 0 2
43965: RET
// export function ComMoveHex ( unit , hex ) ; begin
43966: LD_INT 0
43968: PPUSH
// if not hex then
43969: LD_VAR 0 2
43973: NOT
43974: IFFALSE 43978
// exit ;
43976: GO 44031
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43978: LD_VAR 0 2
43982: PUSH
43983: LD_INT 1
43985: ARRAY
43986: PPUSH
43987: LD_VAR 0 2
43991: PUSH
43992: LD_INT 2
43994: ARRAY
43995: PPUSH
43996: CALL_OW 428
44000: IFFALSE 44004
// exit ;
44002: GO 44031
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44004: LD_VAR 0 1
44008: PPUSH
44009: LD_VAR 0 2
44013: PUSH
44014: LD_INT 1
44016: ARRAY
44017: PPUSH
44018: LD_VAR 0 2
44022: PUSH
44023: LD_INT 2
44025: ARRAY
44026: PPUSH
44027: CALL_OW 111
// end ;
44031: LD_VAR 0 3
44035: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44036: LD_INT 0
44038: PPUSH
44039: PPUSH
44040: PPUSH
// if not unit or not enemy then
44041: LD_VAR 0 1
44045: NOT
44046: IFTRUE 44055
44048: PUSH
44049: LD_VAR 0 2
44053: NOT
44054: OR
44055: IFFALSE 44059
// exit ;
44057: GO 44185
// x := GetX ( enemy ) ;
44059: LD_ADDR_VAR 0 4
44063: PUSH
44064: LD_VAR 0 2
44068: PPUSH
44069: CALL_OW 250
44073: ST_TO_ADDR
// y := GetY ( enemy ) ;
44074: LD_ADDR_VAR 0 5
44078: PUSH
44079: LD_VAR 0 2
44083: PPUSH
44084: CALL_OW 251
44088: ST_TO_ADDR
// if ValidHex ( x , y ) then
44089: LD_VAR 0 4
44093: PPUSH
44094: LD_VAR 0 5
44098: PPUSH
44099: CALL_OW 488
44103: IFFALSE 44185
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44105: LD_VAR 0 2
44109: PPUSH
44110: CALL_OW 247
44114: PUSH
44115: LD_INT 3
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: IN
44125: IFTRUE 44148
44127: PUSH
44128: LD_VAR 0 1
44132: PPUSH
44133: CALL_OW 255
44137: PPUSH
44138: LD_VAR 0 2
44142: PPUSH
44143: CALL_OW 292
44147: OR
44148: IFFALSE 44166
// ComAttackUnit ( unit , enemy ) else
44150: LD_VAR 0 1
44154: PPUSH
44155: LD_VAR 0 2
44159: PPUSH
44160: CALL_OW 115
44164: GO 44185
// ComAgressiveMove ( unit , x , y ) ;
44166: LD_VAR 0 1
44170: PPUSH
44171: LD_VAR 0 4
44175: PPUSH
44176: LD_VAR 0 5
44180: PPUSH
44181: CALL_OW 114
// end ;
44185: LD_VAR 0 3
44189: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44190: LD_INT 0
44192: PPUSH
44193: PPUSH
44194: PPUSH
// list := AreaToList ( area , 0 ) ;
44195: LD_ADDR_VAR 0 5
44199: PUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: LD_INT 0
44207: PPUSH
44208: CALL_OW 517
44212: ST_TO_ADDR
// if not list then
44213: LD_VAR 0 5
44217: NOT
44218: IFFALSE 44222
// exit ;
44220: GO 44352
// if all then
44222: LD_VAR 0 2
44226: IFFALSE 44314
// begin for i := 1 to list [ 1 ] do
44228: LD_ADDR_VAR 0 4
44232: PUSH
44233: DOUBLE
44234: LD_INT 1
44236: DEC
44237: ST_TO_ADDR
44238: LD_VAR 0 5
44242: PUSH
44243: LD_INT 1
44245: ARRAY
44246: PUSH
44247: FOR_TO
44248: IFFALSE 44310
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44250: LD_ADDR_VAR 0 3
44254: PUSH
44255: LD_VAR 0 3
44259: PPUSH
44260: LD_VAR 0 3
44264: PUSH
44265: LD_INT 1
44267: PLUS
44268: PPUSH
44269: LD_VAR 0 5
44273: PUSH
44274: LD_INT 1
44276: ARRAY
44277: PUSH
44278: LD_VAR 0 4
44282: ARRAY
44283: PUSH
44284: LD_VAR 0 5
44288: PUSH
44289: LD_INT 2
44291: ARRAY
44292: PUSH
44293: LD_VAR 0 4
44297: ARRAY
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PPUSH
44303: CALL_OW 1
44307: ST_TO_ADDR
44308: GO 44247
44310: POP
44311: POP
// exit ;
44312: GO 44352
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_VAR 0 5
44323: PUSH
44324: LD_INT 1
44326: ARRAY
44327: PUSH
44328: LD_INT 1
44330: ARRAY
44331: PUSH
44332: LD_VAR 0 5
44336: PUSH
44337: LD_INT 2
44339: ARRAY
44340: PUSH
44341: LD_INT 1
44343: ARRAY
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: ST_TO_ADDR
// end ;
44352: LD_VAR 0 3
44356: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44357: LD_INT 0
44359: PPUSH
44360: PPUSH
// list := AreaToList ( area , 0 ) ;
44361: LD_ADDR_VAR 0 4
44365: PUSH
44366: LD_VAR 0 1
44370: PPUSH
44371: LD_INT 0
44373: PPUSH
44374: CALL_OW 517
44378: ST_TO_ADDR
// if not list then
44379: LD_VAR 0 4
44383: NOT
44384: IFFALSE 44388
// exit ;
44386: GO 44429
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44388: LD_ADDR_VAR 0 3
44392: PUSH
44393: LD_VAR 0 4
44397: PUSH
44398: LD_INT 1
44400: ARRAY
44401: PUSH
44402: LD_INT 1
44404: ARRAY
44405: PUSH
44406: LD_VAR 0 4
44410: PUSH
44411: LD_INT 2
44413: ARRAY
44414: PUSH
44415: LD_INT 1
44417: ARRAY
44418: PUSH
44419: LD_VAR 0 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: LIST
44428: ST_TO_ADDR
// end ;
44429: LD_VAR 0 3
44433: RET
// export function First ( array ) ; begin
44434: LD_INT 0
44436: PPUSH
// if not array then
44437: LD_VAR 0 1
44441: NOT
44442: IFFALSE 44446
// exit ;
44444: GO 44460
// result := array [ 1 ] ;
44446: LD_ADDR_VAR 0 2
44450: PUSH
44451: LD_VAR 0 1
44455: PUSH
44456: LD_INT 1
44458: ARRAY
44459: ST_TO_ADDR
// end ;
44460: LD_VAR 0 2
44464: RET
// export function Last ( array ) ; begin
44465: LD_INT 0
44467: PPUSH
// if not array then
44468: LD_VAR 0 1
44472: NOT
44473: IFFALSE 44477
// exit ;
44475: GO 44493
// result := array [ array ] ;
44477: LD_ADDR_VAR 0 2
44481: PUSH
44482: LD_VAR 0 1
44486: PUSH
44487: LD_VAR 0 1
44491: ARRAY
44492: ST_TO_ADDR
// end ;
44493: LD_VAR 0 2
44497: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44498: LD_INT 0
44500: PPUSH
44501: PPUSH
// result := [ ] ;
44502: LD_ADDR_VAR 0 5
44506: PUSH
44507: EMPTY
44508: ST_TO_ADDR
// if not array then
44509: LD_VAR 0 1
44513: NOT
44514: IFFALSE 44518
// exit ;
44516: GO 44630
// for i := 1 to array do
44518: LD_ADDR_VAR 0 6
44522: PUSH
44523: DOUBLE
44524: LD_INT 1
44526: DEC
44527: ST_TO_ADDR
44528: LD_VAR 0 1
44532: PUSH
44533: FOR_TO
44534: IFFALSE 44628
// if array [ i ] [ index ] = value then
44536: LD_VAR 0 1
44540: PUSH
44541: LD_VAR 0 6
44545: ARRAY
44546: PUSH
44547: LD_VAR 0 2
44551: ARRAY
44552: PUSH
44553: LD_VAR 0 3
44557: EQUAL
44558: IFFALSE 44626
// begin if indexColumn then
44560: LD_VAR 0 4
44564: IFFALSE 44600
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44566: LD_ADDR_VAR 0 5
44570: PUSH
44571: LD_VAR 0 5
44575: PPUSH
44576: LD_VAR 0 1
44580: PUSH
44581: LD_VAR 0 6
44585: ARRAY
44586: PUSH
44587: LD_VAR 0 4
44591: ARRAY
44592: PPUSH
44593: CALL 39638 0 2
44597: ST_TO_ADDR
44598: GO 44626
// result := Join ( result , array [ i ] ) ;
44600: LD_ADDR_VAR 0 5
44604: PUSH
44605: LD_VAR 0 5
44609: PPUSH
44610: LD_VAR 0 1
44614: PUSH
44615: LD_VAR 0 6
44619: ARRAY
44620: PPUSH
44621: CALL 39638 0 2
44625: ST_TO_ADDR
// end ;
44626: GO 44533
44628: POP
44629: POP
// end ;
44630: LD_VAR 0 5
44634: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44635: LD_INT 0
44637: PPUSH
// if not vehicles or not parkingPoint then
44638: LD_VAR 0 1
44642: NOT
44643: IFTRUE 44652
44645: PUSH
44646: LD_VAR 0 2
44650: NOT
44651: OR
44652: IFFALSE 44656
// exit ;
44654: GO 44754
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44656: LD_ADDR_VAR 0 1
44660: PUSH
44661: LD_VAR 0 1
44665: PPUSH
44666: LD_INT 50
44668: PUSH
44669: EMPTY
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: LD_INT 92
44677: PUSH
44678: LD_VAR 0 2
44682: PUSH
44683: LD_INT 1
44685: ARRAY
44686: PUSH
44687: LD_VAR 0 2
44691: PUSH
44692: LD_INT 2
44694: ARRAY
44695: PUSH
44696: LD_INT 8
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PPUSH
44713: CALL_OW 72
44717: ST_TO_ADDR
// if not vehicles then
44718: LD_VAR 0 1
44722: NOT
44723: IFFALSE 44727
// exit ;
44725: GO 44754
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44727: LD_VAR 0 1
44731: PPUSH
44732: LD_VAR 0 2
44736: PUSH
44737: LD_INT 1
44739: ARRAY
44740: PPUSH
44741: LD_VAR 0 2
44745: PUSH
44746: LD_INT 2
44748: ARRAY
44749: PPUSH
44750: CALL_OW 111
// end ;
44754: LD_VAR 0 3
44758: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44759: LD_INT 0
44761: PPUSH
44762: PPUSH
44763: PPUSH
// if not side or not area then
44764: LD_VAR 0 1
44768: NOT
44769: IFTRUE 44778
44771: PUSH
44772: LD_VAR 0 2
44776: NOT
44777: OR
44778: IFFALSE 44782
// exit ;
44780: GO 44901
// tmp := AreaToList ( area , 0 ) ;
44782: LD_ADDR_VAR 0 5
44786: PUSH
44787: LD_VAR 0 2
44791: PPUSH
44792: LD_INT 0
44794: PPUSH
44795: CALL_OW 517
44799: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44800: LD_ADDR_VAR 0 4
44804: PUSH
44805: DOUBLE
44806: LD_INT 1
44808: DEC
44809: ST_TO_ADDR
44810: LD_VAR 0 5
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PUSH
44819: FOR_TO
44820: IFFALSE 44899
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44822: LD_VAR 0 5
44826: PUSH
44827: LD_INT 1
44829: ARRAY
44830: PUSH
44831: LD_VAR 0 4
44835: ARRAY
44836: PPUSH
44837: LD_VAR 0 5
44841: PUSH
44842: LD_INT 2
44844: ARRAY
44845: PUSH
44846: LD_VAR 0 4
44850: ARRAY
44851: PPUSH
44852: CALL_OW 351
44856: IFFALSE 44897
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44858: LD_VAR 0 5
44862: PUSH
44863: LD_INT 1
44865: ARRAY
44866: PUSH
44867: LD_VAR 0 4
44871: ARRAY
44872: PPUSH
44873: LD_VAR 0 5
44877: PUSH
44878: LD_INT 2
44880: ARRAY
44881: PUSH
44882: LD_VAR 0 4
44886: ARRAY
44887: PPUSH
44888: LD_VAR 0 1
44892: PPUSH
44893: CALL_OW 244
// end ;
44897: GO 44819
44899: POP
44900: POP
// end ;
44901: LD_VAR 0 3
44905: RET
// export function UniqueArray ( array ) ; var i ; begin
44906: LD_INT 0
44908: PPUSH
44909: PPUSH
// result := [ ] ;
44910: LD_ADDR_VAR 0 2
44914: PUSH
44915: EMPTY
44916: ST_TO_ADDR
// if not array then
44917: LD_VAR 0 1
44921: NOT
44922: IFFALSE 44926
// exit ;
44924: GO 44987
// for i := 1 to array do
44926: LD_ADDR_VAR 0 3
44930: PUSH
44931: DOUBLE
44932: LD_INT 1
44934: DEC
44935: ST_TO_ADDR
44936: LD_VAR 0 1
44940: PUSH
44941: FOR_TO
44942: IFFALSE 44985
// if not array [ i ] in result then
44944: LD_VAR 0 1
44948: PUSH
44949: LD_VAR 0 3
44953: ARRAY
44954: PUSH
44955: LD_VAR 0 2
44959: IN
44960: NOT
44961: IFFALSE 44983
// result := Join ( result , i ) ;
44963: LD_ADDR_VAR 0 2
44967: PUSH
44968: LD_VAR 0 2
44972: PPUSH
44973: LD_VAR 0 3
44977: PPUSH
44978: CALL 39638 0 2
44982: ST_TO_ADDR
44983: GO 44941
44985: POP
44986: POP
// end ;
44987: LD_VAR 0 2
44991: RET
