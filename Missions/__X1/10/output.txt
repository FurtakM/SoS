// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 695 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := false ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// SetBName ( ar_depot , kaba ) ;
  64: LD_INT 1
  66: PPUSH
  67: LD_STRING kaba
  69: PPUSH
  70: CALL_OW 500
// InitHC_All ( ) ;
  74: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  78: LD_ADDR_VAR 0 2
  82: PUSH
  83: LD_INT 22
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 32
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: PPUSH
 107: CALL_OW 69
 111: PUSH
 112: FOR_IN
 113: IFFALSE 178
// begin PrepareSoldier ( false , 6 ) ;
 115: LD_INT 0
 117: PPUSH
 118: LD_INT 6
 120: PPUSH
 121: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 125: CALL_OW 44
 129: PPUSH
 130: LD_VAR 0 2
 134: PPUSH
 135: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 139: LD_VAR 0 2
 143: PPUSH
 144: LD_INT 25
 146: PUSH
 147: LD_INT 27
 149: PUSH
 150: LD_INT 28
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_VAR 0 2
 162: PUSH
 163: LD_INT 3
 165: MOD
 166: PUSH
 167: LD_INT 1
 169: PLUS
 170: ARRAY
 171: PPUSH
 172: CALL_OW 431
// end ;
 176: GO 112
 178: POP
 179: POP
// PlaceWeaponTurret ( HexInfo ( 129 , 61 ) , ar_radar ) ;
 180: LD_INT 129
 182: PPUSH
 183: LD_INT 61
 185: PPUSH
 186: CALL_OW 428
 190: PPUSH
 191: LD_INT 30
 193: PPUSH
 194: CALL_OW 431
// PrepareSoldier ( sex_male , 3 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 3
 203: PPUSH
 204: CALL_OW 381
// omarSol := CreateHuman ;
 208: LD_ADDR_EXP 8
 212: PUSH
 213: CALL_OW 44
 217: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 218: LD_EXP 8
 222: PPUSH
 223: LD_INT 1
 225: PPUSH
 226: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 230: LD_ADDR_VAR 0 4
 234: PUSH
 235: LD_INT 143
 237: PPUSH
 238: LD_INT 51
 240: PPUSH
 241: CALL_OW 428
 245: ST_TO_ADDR
// for i := 1 to 2 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 2
 258: PUSH
 259: FOR_TO
 260: IFFALSE 288
// begin PrepareMechanic ( false , 3 ) ;
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 3
 267: PPUSH
 268: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 272: CALL_OW 44
 276: PPUSH
 277: LD_VAR 0 4
 281: PPUSH
 282: CALL_OW 52
// end ;
 286: GO 259
 288: POP
 289: POP
// for i := 1 to 2 do
 290: LD_ADDR_VAR 0 2
 294: PUSH
 295: DOUBLE
 296: LD_INT 1
 298: DEC
 299: ST_TO_ADDR
 300: LD_INT 2
 302: PUSH
 303: FOR_TO
 304: IFFALSE 330
// begin PrepareEngineer ( false , 2 ) ;
 306: LD_INT 0
 308: PPUSH
 309: LD_INT 2
 311: PPUSH
 312: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 316: CALL_OW 44
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 303
 330: POP
 331: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 332: CALL_OW 44
 336: PPUSH
 337: LD_INT 164
 339: PPUSH
 340: LD_INT 80
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 350: CALL_OW 44
 354: PPUSH
 355: LD_INT 166
 357: PPUSH
 358: LD_INT 84
 360: PPUSH
 361: LD_INT 0
 363: PPUSH
 364: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 368: LD_ADDR_VAR 0 2
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 2
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 8
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 451
// for j := 1 to 3 do
 405: LD_ADDR_VAR 0 5
 409: PUSH
 410: DOUBLE
 411: LD_INT 1
 413: DEC
 414: ST_TO_ADDR
 415: LD_INT 3
 417: PUSH
 418: FOR_TO
 419: IFFALSE 447
// begin PrepareScientist ( false , 3 ) ;
 421: LD_INT 0
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 2
 440: PPUSH
 441: CALL_OW 52
// end ;
 445: GO 418
 447: POP
 448: POP
 449: GO 402
 451: POP
 452: POP
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 3
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 1520 0 3
 476: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Kaia
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 1520 0 3
 500: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 501: LD_INT 14
 503: PPUSH
 504: LD_INT 3
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 27
 512: PPUSH
 513: LD_INT 100
 515: PPUSH
 516: CALL 6360 0 5
// heikeVehicle := CreateVehicle ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 530: LD_EXP 6
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 149
 549: PPUSH
 550: LD_INT 59
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 560: LD_EXP 3
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL_OW 52
// uc_side := 5 ;
 584: LD_ADDR_OWVAR 20
 588: PUSH
 589: LD_INT 5
 591: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_STRING Omar
 599: PPUSH
 600: CALL_OW 25
 604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 605: LD_INT 14
 607: PPUSH
 608: LD_INT 3
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 27
 616: PPUSH
 617: LD_INT 100
 619: PPUSH
 620: CALL 6360 0 5
// omarVehicle := CreateVehicle ;
 624: LD_ADDR_EXP 7
 628: PUSH
 629: CALL_OW 45
 633: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 634: LD_EXP 4
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 646: LD_EXP 7
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 658: LD_EXP 7
 662: PPUSH
 663: LD_INT 132
 665: PPUSH
 666: LD_INT 83
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 676: LD_EXP 4
 680: PPUSH
 681: LD_EXP 7
 685: PPUSH
 686: CALL_OW 52
// end ; end_of_file
 690: LD_VAR 0 1
 694: RET
// export function Action ; var i ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
// Video ( true ) ;
 699: LD_INT 1
 701: PPUSH
 702: CALL 39203 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: LD_INT 30
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: PUSH
 758: FOR_IN
 759: IFFALSE 778
// SetSpecResearch ( i , 1500 , false ) ;
 761: LD_VAR 0 2
 765: PPUSH
 766: LD_INT 1500
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 486
 776: GO 758
 778: POP
 779: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 780: LD_INT 1
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_INT 2
 788: PPUSH
 789: LD_INT 32963
 791: NEG
 792: PPUSH
 793: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 797: LD_EXP 4
 801: PPUSH
 802: LD_INT 150
 804: PPUSH
 805: LD_INT 72
 807: PPUSH
 808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 812: LD_INT 35
 814: PPUSH
 815: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 819: LD_INT 150
 821: PPUSH
 822: LD_INT 72
 824: PPUSH
 825: CALL_OW 428
 829: IFFALSE 812
// ComExitBuilding ( omarSol ) ;
 831: LD_EXP 8
 835: PPUSH
 836: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 840: LD_EXP 8
 844: PPUSH
 845: LD_INT 150
 847: PPUSH
 848: LD_INT 69
 850: PPUSH
 851: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 855: LD_EXP 8
 859: PPUSH
 860: LD_EXP 4
 864: PPUSH
 865: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 869: LD_EXP 8
 873: PPUSH
 874: LD_EXP 4
 878: PPUSH
 879: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 892: LD_EXP 4
 896: PPUSH
 897: LD_INT 152
 899: PPUSH
 900: LD_INT 70
 902: PPUSH
 903: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 907: LD_INT 35
 909: PPUSH
 910: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 914: LD_EXP 4
 918: PPUSH
 919: LD_EXP 8
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 3
 931: LESS
 932: IFFALSE 907
// ComTurnUnit ( Omar , omarSol ) ;
 934: LD_EXP 4
 938: PPUSH
 939: LD_EXP 8
 943: PPUSH
 944: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 948: LD_EXP 3
 952: PPUSH
 953: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 149
 964: PPUSH
 965: LD_INT 68
 967: PPUSH
 968: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 972: LD_EXP 3
 976: PPUSH
 977: LD_EXP 4
 981: PPUSH
 982: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 986: LD_EXP 4
 990: PPUSH
 991: LD_STRING DO-Intro-1
 993: PPUSH
 994: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 998: LD_EXP 8
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 120
// wait ( 0 0$0.3 ) ;
1010: LD_INT 10
1012: PPUSH
1013: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
1017: LD_EXP 3
1021: PPUSH
1022: LD_STRING DH-Intro-2
1024: PPUSH
1025: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1029: LD_EXP 4
1033: PPUSH
1034: LD_EXP 3
1038: PPUSH
1039: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_STRING DO-Intro-3
1050: PPUSH
1051: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 152
1062: PPUSH
1063: LD_INT 58
1065: PPUSH
1066: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_INT 154
1077: PPUSH
1078: LD_INT 60
1080: PPUSH
1081: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1085: LD_EXP 4
1089: PPUSH
1090: LD_EXP 3
1094: PPUSH
1095: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1099: LD_EXP 3
1103: PPUSH
1104: LD_EXP 4
1108: PPUSH
1109: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1113: LD_INT 35
1115: PPUSH
1116: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1120: LD_EXP 3
1124: PPUSH
1125: LD_INT 152
1127: PPUSH
1128: LD_INT 58
1130: PPUSH
1131: CALL_OW 307
1135: PUSH
1136: LD_EXP 4
1140: PPUSH
1141: LD_INT 154
1143: PPUSH
1144: LD_INT 60
1146: PPUSH
1147: CALL_OW 307
1151: AND
1152: IFFALSE 1113
// wait ( 0 0$0.3 ) ;
1154: LD_INT 10
1156: PPUSH
1157: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_STRING DO-Intro-4
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1173: LD_INT 18
1175: PPUSH
1176: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_STRING DH-Intro-5
1187: PPUSH
1188: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1192: LD_EXP 4
1196: PPUSH
1197: LD_STRING DO-Intro-6
1199: PPUSH
1200: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1204: LD_INT 10
1206: PPUSH
1207: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1211: LD_EXP 3
1215: PPUSH
1216: LD_STRING DH-Intro-7
1218: PPUSH
1219: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1223: LD_INT 7
1225: PPUSH
1226: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1230: LD_EXP 3
1234: PPUSH
1235: LD_STRING DH-Intro-8
1237: PPUSH
1238: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1242: LD_EXP 4
1246: PPUSH
1247: LD_STRING DO-Intro-9
1249: PPUSH
1250: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1254: LD_EXP 3
1258: PPUSH
1259: LD_STRING DH-Intro-10
1261: PPUSH
1262: CALL_OW 88
// if not Kaia then
1266: LD_EXP 5
1270: NOT
1271: IFFALSE 1287
// Say ( Heike , DH-Intro-11-Kaia ) else
1273: LD_EXP 3
1277: PPUSH
1278: LD_STRING DH-Intro-11-Kaia
1280: PPUSH
1281: CALL_OW 88
1285: GO 1299
// Say ( Heike , DH-Intro-11-Friends ) ;
1287: LD_EXP 3
1291: PPUSH
1292: LD_STRING DH-Intro-11-Friends
1294: PPUSH
1295: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1299: LD_EXP 4
1303: PPUSH
1304: LD_STRING DO-Intro-12
1306: PPUSH
1307: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1311: LD_EXP 3
1315: PPUSH
1316: LD_STRING DH-Intro-13
1318: PPUSH
1319: CALL_OW 88
// async ;
1323: ASYNC
// wait ( 0 0$0.2 ) ;
1324: LD_INT 7
1326: PPUSH
1327: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1331: LD_EXP 3
1335: PPUSH
1336: LD_EXP 6
1340: PPUSH
1341: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1345: LD_EXP 3
1349: PPUSH
1350: LD_INT 131
1352: PPUSH
1353: LD_INT 83
1355: PPUSH
1356: CALL_OW 171
// sync ;
1360: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1361: LD_EXP 4
1365: PPUSH
1366: LD_STRING DO-Intro-14
1368: PPUSH
1369: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1373: LD_EXP 4
1377: PPUSH
1378: LD_EXP 3
1382: PPUSH
1383: CALL_OW 112
// wait ( 0 0$2 ) ;
1387: LD_INT 70
1389: PPUSH
1390: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1394: LD_INT 1
1396: PPUSH
1397: LD_STRING %_cont
1399: PPUSH
1400: CALL_OW 340
// end ;
1404: LD_VAR 0 1
1408: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1409: LD_VAR 0 2
1413: PUSH
1414: LD_EXP 4
1418: EQUAL
1419: IFFALSE 1433
// SetClass ( Omar , class_desert_warior ) ;
1421: LD_EXP 4
1425: PPUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 336
// end ; end_of_file
1433: PPOPN 2
1435: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1436: LD_INT 0
1438: PPUSH
1439: PPUSH
// if exist_mode then
1440: LD_VAR 0 2
1444: IFFALSE 1490
// begin unit := CreateCharacter ( prefix & ident ) ;
1446: LD_ADDR_VAR 0 5
1450: PUSH
1451: LD_VAR 0 3
1455: PUSH
1456: LD_VAR 0 1
1460: STR
1461: PPUSH
1462: CALL_OW 34
1466: ST_TO_ADDR
// if unit then
1467: LD_VAR 0 5
1471: IFFALSE 1488
// DeleteCharacters ( prefix & ident ) ;
1473: LD_VAR 0 3
1477: PUSH
1478: LD_VAR 0 1
1482: STR
1483: PPUSH
1484: CALL_OW 40
// end else
1488: GO 1505
// unit := NewCharacter ( ident ) ;
1490: LD_ADDR_VAR 0 5
1494: PUSH
1495: LD_VAR 0 1
1499: PPUSH
1500: CALL_OW 25
1504: ST_TO_ADDR
// result := unit ;
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: LD_VAR 0 5
1514: ST_TO_ADDR
// end ;
1515: LD_VAR 0 4
1519: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1520: LD_INT 0
1522: PPUSH
1523: PPUSH
// if exist_mode then
1524: LD_VAR 0 2
1528: IFFALSE 1553
// unit := CreateCharacter ( prefix & ident ) else
1530: LD_ADDR_VAR 0 5
1534: PUSH
1535: LD_VAR 0 3
1539: PUSH
1540: LD_VAR 0 1
1544: STR
1545: PPUSH
1546: CALL_OW 34
1550: ST_TO_ADDR
1551: GO 1568
// unit := NewCharacter ( ident ) ;
1553: LD_ADDR_VAR 0 5
1557: PUSH
1558: LD_VAR 0 1
1562: PPUSH
1563: CALL_OW 25
1567: ST_TO_ADDR
// result := unit ;
1568: LD_ADDR_VAR 0 4
1572: PUSH
1573: LD_VAR 0 5
1577: ST_TO_ADDR
// end ;
1578: LD_VAR 0 4
1582: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1583: LD_INT 0
1585: PPUSH
1586: PPUSH
// if not side or not nation then
1587: LD_VAR 0 1
1591: NOT
1592: PUSH
1593: LD_VAR 0 2
1597: NOT
1598: OR
1599: IFFALSE 1603
// exit ;
1601: GO 2371
// case nation of nation_american :
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: DOUBLE
1611: EQUAL
1612: IFTRUE 1616
1614: GO 1830
1616: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1617: LD_ADDR_VAR 0 4
1621: PUSH
1622: LD_INT 35
1624: PUSH
1625: LD_INT 45
1627: PUSH
1628: LD_INT 46
1630: PUSH
1631: LD_INT 47
1633: PUSH
1634: LD_INT 82
1636: PUSH
1637: LD_INT 83
1639: PUSH
1640: LD_INT 84
1642: PUSH
1643: LD_INT 85
1645: PUSH
1646: LD_INT 86
1648: PUSH
1649: LD_INT 1
1651: PUSH
1652: LD_INT 2
1654: PUSH
1655: LD_INT 6
1657: PUSH
1658: LD_INT 15
1660: PUSH
1661: LD_INT 16
1663: PUSH
1664: LD_INT 7
1666: PUSH
1667: LD_INT 12
1669: PUSH
1670: LD_INT 13
1672: PUSH
1673: LD_INT 10
1675: PUSH
1676: LD_INT 14
1678: PUSH
1679: LD_INT 20
1681: PUSH
1682: LD_INT 21
1684: PUSH
1685: LD_INT 22
1687: PUSH
1688: LD_INT 25
1690: PUSH
1691: LD_INT 32
1693: PUSH
1694: LD_INT 27
1696: PUSH
1697: LD_INT 36
1699: PUSH
1700: LD_INT 69
1702: PUSH
1703: LD_INT 39
1705: PUSH
1706: LD_INT 34
1708: PUSH
1709: LD_INT 40
1711: PUSH
1712: LD_INT 48
1714: PUSH
1715: LD_INT 49
1717: PUSH
1718: LD_INT 50
1720: PUSH
1721: LD_INT 51
1723: PUSH
1724: LD_INT 52
1726: PUSH
1727: LD_INT 53
1729: PUSH
1730: LD_INT 54
1732: PUSH
1733: LD_INT 55
1735: PUSH
1736: LD_INT 56
1738: PUSH
1739: LD_INT 57
1741: PUSH
1742: LD_INT 58
1744: PUSH
1745: LD_INT 59
1747: PUSH
1748: LD_INT 60
1750: PUSH
1751: LD_INT 61
1753: PUSH
1754: LD_INT 62
1756: PUSH
1757: LD_INT 80
1759: PUSH
1760: LD_INT 82
1762: PUSH
1763: LD_INT 83
1765: PUSH
1766: LD_INT 84
1768: PUSH
1769: LD_INT 85
1771: PUSH
1772: LD_INT 86
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: ST_TO_ADDR
1828: GO 2295
1830: LD_INT 2
1832: DOUBLE
1833: EQUAL
1834: IFTRUE 1838
1836: GO 2064
1838: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_INT 35
1846: PUSH
1847: LD_INT 45
1849: PUSH
1850: LD_INT 46
1852: PUSH
1853: LD_INT 47
1855: PUSH
1856: LD_INT 82
1858: PUSH
1859: LD_INT 83
1861: PUSH
1862: LD_INT 84
1864: PUSH
1865: LD_INT 85
1867: PUSH
1868: LD_INT 87
1870: PUSH
1871: LD_INT 70
1873: PUSH
1874: LD_INT 1
1876: PUSH
1877: LD_INT 11
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 4
1885: PUSH
1886: LD_INT 5
1888: PUSH
1889: LD_INT 6
1891: PUSH
1892: LD_INT 15
1894: PUSH
1895: LD_INT 18
1897: PUSH
1898: LD_INT 7
1900: PUSH
1901: LD_INT 17
1903: PUSH
1904: LD_INT 8
1906: PUSH
1907: LD_INT 20
1909: PUSH
1910: LD_INT 21
1912: PUSH
1913: LD_INT 22
1915: PUSH
1916: LD_INT 72
1918: PUSH
1919: LD_INT 26
1921: PUSH
1922: LD_INT 69
1924: PUSH
1925: LD_INT 39
1927: PUSH
1928: LD_INT 40
1930: PUSH
1931: LD_INT 41
1933: PUSH
1934: LD_INT 42
1936: PUSH
1937: LD_INT 43
1939: PUSH
1940: LD_INT 48
1942: PUSH
1943: LD_INT 49
1945: PUSH
1946: LD_INT 50
1948: PUSH
1949: LD_INT 51
1951: PUSH
1952: LD_INT 52
1954: PUSH
1955: LD_INT 53
1957: PUSH
1958: LD_INT 54
1960: PUSH
1961: LD_INT 55
1963: PUSH
1964: LD_INT 56
1966: PUSH
1967: LD_INT 60
1969: PUSH
1970: LD_INT 61
1972: PUSH
1973: LD_INT 62
1975: PUSH
1976: LD_INT 66
1978: PUSH
1979: LD_INT 67
1981: PUSH
1982: LD_INT 68
1984: PUSH
1985: LD_INT 81
1987: PUSH
1988: LD_INT 82
1990: PUSH
1991: LD_INT 83
1993: PUSH
1994: LD_INT 84
1996: PUSH
1997: LD_INT 85
1999: PUSH
2000: LD_INT 87
2002: PUSH
2003: LD_INT 88
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: ST_TO_ADDR
2062: GO 2295
2064: LD_INT 3
2066: DOUBLE
2067: EQUAL
2068: IFTRUE 2072
2070: GO 2294
2072: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2073: LD_ADDR_VAR 0 4
2077: PUSH
2078: LD_INT 46
2080: PUSH
2081: LD_INT 47
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 2
2089: PUSH
2090: LD_INT 82
2092: PUSH
2093: LD_INT 83
2095: PUSH
2096: LD_INT 84
2098: PUSH
2099: LD_INT 85
2101: PUSH
2102: LD_INT 86
2104: PUSH
2105: LD_INT 11
2107: PUSH
2108: LD_INT 9
2110: PUSH
2111: LD_INT 20
2113: PUSH
2114: LD_INT 19
2116: PUSH
2117: LD_INT 21
2119: PUSH
2120: LD_INT 24
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 25
2128: PUSH
2129: LD_INT 28
2131: PUSH
2132: LD_INT 29
2134: PUSH
2135: LD_INT 30
2137: PUSH
2138: LD_INT 31
2140: PUSH
2141: LD_INT 37
2143: PUSH
2144: LD_INT 38
2146: PUSH
2147: LD_INT 32
2149: PUSH
2150: LD_INT 27
2152: PUSH
2153: LD_INT 33
2155: PUSH
2156: LD_INT 69
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 34
2164: PUSH
2165: LD_INT 40
2167: PUSH
2168: LD_INT 71
2170: PUSH
2171: LD_INT 23
2173: PUSH
2174: LD_INT 44
2176: PUSH
2177: LD_INT 48
2179: PUSH
2180: LD_INT 49
2182: PUSH
2183: LD_INT 50
2185: PUSH
2186: LD_INT 51
2188: PUSH
2189: LD_INT 52
2191: PUSH
2192: LD_INT 53
2194: PUSH
2195: LD_INT 54
2197: PUSH
2198: LD_INT 55
2200: PUSH
2201: LD_INT 56
2203: PUSH
2204: LD_INT 57
2206: PUSH
2207: LD_INT 58
2209: PUSH
2210: LD_INT 59
2212: PUSH
2213: LD_INT 63
2215: PUSH
2216: LD_INT 64
2218: PUSH
2219: LD_INT 65
2221: PUSH
2222: LD_INT 82
2224: PUSH
2225: LD_INT 83
2227: PUSH
2228: LD_INT 84
2230: PUSH
2231: LD_INT 85
2233: PUSH
2234: LD_INT 86
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: ST_TO_ADDR
2292: GO 2295
2294: POP
// if state > - 1 and state < 3 then
2295: LD_VAR 0 3
2299: PUSH
2300: LD_INT 1
2302: NEG
2303: GREATER
2304: PUSH
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 3
2312: LESS
2313: AND
2314: IFFALSE 2371
// for i in result do
2316: LD_ADDR_VAR 0 5
2320: PUSH
2321: LD_VAR 0 4
2325: PUSH
2326: FOR_IN
2327: IFFALSE 2369
// if GetTech ( i , side ) <> state then
2329: LD_VAR 0 5
2333: PPUSH
2334: LD_VAR 0 1
2338: PPUSH
2339: CALL_OW 321
2343: PUSH
2344: LD_VAR 0 3
2348: NONEQUAL
2349: IFFALSE 2367
// result := result diff i ;
2351: LD_ADDR_VAR 0 4
2355: PUSH
2356: LD_VAR 0 4
2360: PUSH
2361: LD_VAR 0 5
2365: DIFF
2366: ST_TO_ADDR
2367: GO 2326
2369: POP
2370: POP
// end ;
2371: LD_VAR 0 4
2375: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
// result := true ;
2381: LD_ADDR_VAR 0 3
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2389: LD_ADDR_VAR 0 5
2393: PUSH
2394: LD_VAR 0 2
2398: PPUSH
2399: CALL_OW 480
2403: ST_TO_ADDR
// if not tmp then
2404: LD_VAR 0 5
2408: NOT
2409: IFFALSE 2413
// exit ;
2411: GO 2462
// for i in tmp do
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: LD_VAR 0 5
2422: PUSH
2423: FOR_IN
2424: IFFALSE 2460
// if GetTech ( i , side ) <> state_researched then
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_VAR 0 1
2435: PPUSH
2436: CALL_OW 321
2440: PUSH
2441: LD_INT 2
2443: NONEQUAL
2444: IFFALSE 2458
// begin result := false ;
2446: LD_ADDR_VAR 0 3
2450: PUSH
2451: LD_INT 0
2453: ST_TO_ADDR
// exit ;
2454: POP
2455: POP
2456: GO 2462
// end ;
2458: GO 2423
2460: POP
2461: POP
// end ;
2462: LD_VAR 0 3
2466: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2467: LD_INT 0
2469: PPUSH
2470: PPUSH
2471: PPUSH
2472: PPUSH
2473: PPUSH
2474: PPUSH
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2482: LD_VAR 0 1
2486: NOT
2487: PUSH
2488: LD_VAR 0 1
2492: PPUSH
2493: CALL_OW 257
2497: PUSH
2498: LD_INT 9
2500: NONEQUAL
2501: OR
2502: IFFALSE 2506
// exit ;
2504: GO 3079
// side := GetSide ( unit ) ;
2506: LD_ADDR_VAR 0 9
2510: PUSH
2511: LD_VAR 0 1
2515: PPUSH
2516: CALL_OW 255
2520: ST_TO_ADDR
// tech_space := tech_spacanom ;
2521: LD_ADDR_VAR 0 12
2525: PUSH
2526: LD_INT 29
2528: ST_TO_ADDR
// tech_time := tech_taurad ;
2529: LD_ADDR_VAR 0 13
2533: PUSH
2534: LD_INT 28
2536: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2537: LD_ADDR_VAR 0 11
2541: PUSH
2542: LD_VAR 0 1
2546: PPUSH
2547: CALL_OW 310
2551: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2552: LD_VAR 0 11
2556: PPUSH
2557: CALL_OW 247
2561: PUSH
2562: LD_INT 2
2564: EQUAL
2565: IFFALSE 2569
// exit ;
2567: GO 3079
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2569: LD_ADDR_VAR 0 8
2573: PUSH
2574: LD_INT 81
2576: PUSH
2577: LD_VAR 0 9
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: LD_INT 21
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL_OW 69
2611: ST_TO_ADDR
// if not tmp then
2612: LD_VAR 0 8
2616: NOT
2617: IFFALSE 2621
// exit ;
2619: GO 3079
// if in_unit then
2621: LD_VAR 0 11
2625: IFFALSE 2649
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2627: LD_ADDR_VAR 0 10
2631: PUSH
2632: LD_VAR 0 8
2636: PPUSH
2637: LD_VAR 0 11
2641: PPUSH
2642: CALL_OW 74
2646: ST_TO_ADDR
2647: GO 2669
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2649: LD_ADDR_VAR 0 10
2653: PUSH
2654: LD_VAR 0 8
2658: PPUSH
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 74
2668: ST_TO_ADDR
// if not enemy then
2669: LD_VAR 0 10
2673: NOT
2674: IFFALSE 2678
// exit ;
2676: GO 3079
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2678: LD_VAR 0 11
2682: PUSH
2683: LD_VAR 0 11
2687: PPUSH
2688: LD_VAR 0 10
2692: PPUSH
2693: CALL_OW 296
2697: PUSH
2698: LD_INT 13
2700: GREATER
2701: AND
2702: PUSH
2703: LD_VAR 0 1
2707: PPUSH
2708: LD_VAR 0 10
2712: PPUSH
2713: CALL_OW 296
2717: PUSH
2718: LD_INT 12
2720: GREATER
2721: OR
2722: IFFALSE 2726
// exit ;
2724: GO 3079
// missile := [ 1 ] ;
2726: LD_ADDR_VAR 0 14
2730: PUSH
2731: LD_INT 1
2733: PUSH
2734: EMPTY
2735: LIST
2736: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2737: LD_VAR 0 9
2741: PPUSH
2742: LD_VAR 0 12
2746: PPUSH
2747: CALL_OW 325
2751: IFFALSE 2780
// missile := Replace ( missile , missile + 1 , 2 ) ;
2753: LD_ADDR_VAR 0 14
2757: PUSH
2758: LD_VAR 0 14
2762: PPUSH
2763: LD_VAR 0 14
2767: PUSH
2768: LD_INT 1
2770: PLUS
2771: PPUSH
2772: LD_INT 2
2774: PPUSH
2775: CALL_OW 1
2779: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2780: LD_VAR 0 9
2784: PPUSH
2785: LD_VAR 0 13
2789: PPUSH
2790: CALL_OW 325
2794: PUSH
2795: LD_VAR 0 10
2799: PPUSH
2800: CALL_OW 255
2804: PPUSH
2805: LD_VAR 0 13
2809: PPUSH
2810: CALL_OW 325
2814: NOT
2815: AND
2816: IFFALSE 2845
// missile := Replace ( missile , missile + 1 , 3 ) ;
2818: LD_ADDR_VAR 0 14
2822: PUSH
2823: LD_VAR 0 14
2827: PPUSH
2828: LD_VAR 0 14
2832: PUSH
2833: LD_INT 1
2835: PLUS
2836: PPUSH
2837: LD_INT 3
2839: PPUSH
2840: CALL_OW 1
2844: ST_TO_ADDR
// if missile < 2 then
2845: LD_VAR 0 14
2849: PUSH
2850: LD_INT 2
2852: LESS
2853: IFFALSE 2857
// exit ;
2855: GO 3079
// x := GetX ( enemy ) ;
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: LD_VAR 0 10
2866: PPUSH
2867: CALL_OW 250
2871: ST_TO_ADDR
// y := GetY ( enemy ) ;
2872: LD_ADDR_VAR 0 5
2876: PUSH
2877: LD_VAR 0 10
2881: PPUSH
2882: CALL_OW 251
2886: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2887: LD_ADDR_VAR 0 6
2891: PUSH
2892: LD_VAR 0 4
2896: PUSH
2897: LD_INT 1
2899: NEG
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: CALL_OW 12
2908: PLUS
2909: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2910: LD_ADDR_VAR 0 7
2914: PUSH
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 1
2922: NEG
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 12
2931: PLUS
2932: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2933: LD_VAR 0 6
2937: PPUSH
2938: LD_VAR 0 7
2942: PPUSH
2943: CALL_OW 488
2947: NOT
2948: IFFALSE 2970
// begin _x := x ;
2950: LD_ADDR_VAR 0 6
2954: PUSH
2955: LD_VAR 0 4
2959: ST_TO_ADDR
// _y := y ;
2960: LD_ADDR_VAR 0 7
2964: PUSH
2965: LD_VAR 0 5
2969: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: LD_INT 1
2977: PPUSH
2978: LD_VAR 0 14
2982: PPUSH
2983: CALL_OW 12
2987: ST_TO_ADDR
// case i of 1 :
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 1
2995: DOUBLE
2996: EQUAL
2997: IFTRUE 3001
2999: GO 3018
3001: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3002: LD_VAR 0 1
3006: PPUSH
3007: LD_VAR 0 10
3011: PPUSH
3012: CALL_OW 115
3016: GO 3079
3018: LD_INT 2
3020: DOUBLE
3021: EQUAL
3022: IFTRUE 3026
3024: GO 3048
3026: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3027: LD_VAR 0 1
3031: PPUSH
3032: LD_VAR 0 6
3036: PPUSH
3037: LD_VAR 0 7
3041: PPUSH
3042: CALL_OW 153
3046: GO 3079
3048: LD_INT 3
3050: DOUBLE
3051: EQUAL
3052: IFTRUE 3056
3054: GO 3078
3056: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_VAR 0 6
3066: PPUSH
3067: LD_VAR 0 7
3071: PPUSH
3072: CALL_OW 154
3076: GO 3079
3078: POP
// end ;
3079: LD_VAR 0 2
3083: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
// if not unit or not building then
3092: LD_VAR 0 1
3096: NOT
3097: PUSH
3098: LD_VAR 0 2
3102: NOT
3103: OR
3104: IFFALSE 3108
// exit ;
3106: GO 3266
// x := GetX ( building ) ;
3108: LD_ADDR_VAR 0 5
3112: PUSH
3113: LD_VAR 0 2
3117: PPUSH
3118: CALL_OW 250
3122: ST_TO_ADDR
// y := GetY ( building ) ;
3123: LD_ADDR_VAR 0 6
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 251
3137: ST_TO_ADDR
// for i = 0 to 5 do
3138: LD_ADDR_VAR 0 4
3142: PUSH
3143: DOUBLE
3144: LD_INT 0
3146: DEC
3147: ST_TO_ADDR
3148: LD_INT 5
3150: PUSH
3151: FOR_TO
3152: IFFALSE 3264
// begin _x := ShiftX ( x , i , 3 ) ;
3154: LD_ADDR_VAR 0 7
3158: PUSH
3159: LD_VAR 0 5
3163: PPUSH
3164: LD_VAR 0 4
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: CALL_OW 272
3176: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3177: LD_ADDR_VAR 0 8
3181: PUSH
3182: LD_VAR 0 6
3186: PPUSH
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: CALL_OW 273
3199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3200: LD_VAR 0 7
3204: PPUSH
3205: LD_VAR 0 8
3209: PPUSH
3210: CALL_OW 488
3214: NOT
3215: IFFALSE 3219
// continue ;
3217: GO 3151
// if HexInfo ( _x , _y ) = 0 then
3219: LD_VAR 0 7
3223: PPUSH
3224: LD_VAR 0 8
3228: PPUSH
3229: CALL_OW 428
3233: PUSH
3234: LD_INT 0
3236: EQUAL
3237: IFFALSE 3262
// begin ComMoveXY ( unit , _x , _y ) ;
3239: LD_VAR 0 1
3243: PPUSH
3244: LD_VAR 0 7
3248: PPUSH
3249: LD_VAR 0 8
3253: PPUSH
3254: CALL_OW 111
// exit ;
3258: POP
3259: POP
3260: GO 3266
// end ; end ;
3262: GO 3151
3264: POP
3265: POP
// end ;
3266: LD_VAR 0 3
3270: RET
// export function ScanBase ( side , base_area ) ; begin
3271: LD_INT 0
3273: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3274: LD_ADDR_VAR 0 3
3278: PUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_INT 81
3286: PUSH
3287: LD_VAR 0 1
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 70
3300: ST_TO_ADDR
// end ;
3301: LD_VAR 0 3
3305: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3306: LD_INT 0
3308: PPUSH
3309: PPUSH
3310: PPUSH
3311: PPUSH
// result := false ;
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// side := GetSide ( unit ) ;
3320: LD_ADDR_VAR 0 3
3324: PUSH
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 255
3334: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3335: LD_ADDR_VAR 0 4
3339: PUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 248
3349: ST_TO_ADDR
// case nat of 1 :
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: DOUBLE
3358: EQUAL
3359: IFTRUE 3363
3361: GO 3374
3363: POP
// tech := tech_lassight ; 2 :
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_INT 12
3371: ST_TO_ADDR
3372: GO 3413
3374: LD_INT 2
3376: DOUBLE
3377: EQUAL
3378: IFTRUE 3382
3380: GO 3393
3382: POP
// tech := tech_mortar ; 3 :
3383: LD_ADDR_VAR 0 5
3387: PUSH
3388: LD_INT 41
3390: ST_TO_ADDR
3391: GO 3413
3393: LD_INT 3
3395: DOUBLE
3396: EQUAL
3397: IFTRUE 3401
3399: GO 3412
3401: POP
// tech := tech_bazooka ; end ;
3402: LD_ADDR_VAR 0 5
3406: PUSH
3407: LD_INT 44
3409: ST_TO_ADDR
3410: GO 3413
3412: POP
// if Researched ( side , tech ) then
3413: LD_VAR 0 3
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: CALL_OW 325
3427: IFFALSE 3454
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3429: LD_ADDR_VAR 0 2
3433: PUSH
3434: LD_INT 5
3436: PUSH
3437: LD_INT 8
3439: PUSH
3440: LD_INT 9
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_VAR 0 4
3452: ARRAY
3453: ST_TO_ADDR
// end ;
3454: LD_VAR 0 2
3458: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3459: LD_INT 0
3461: PPUSH
3462: PPUSH
3463: PPUSH
// if not mines then
3464: LD_VAR 0 2
3468: NOT
3469: IFFALSE 3473
// exit ;
3471: GO 3617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3473: LD_ADDR_VAR 0 5
3477: PUSH
3478: LD_INT 81
3480: PUSH
3481: LD_VAR 0 1
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 3
3492: PUSH
3493: LD_INT 21
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// for i in mines do
3516: LD_ADDR_VAR 0 4
3520: PUSH
3521: LD_VAR 0 2
3525: PUSH
3526: FOR_IN
3527: IFFALSE 3615
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3529: LD_VAR 0 4
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 4
3542: PUSH
3543: LD_INT 2
3545: ARRAY
3546: PPUSH
3547: CALL_OW 458
3551: NOT
3552: IFFALSE 3556
// continue ;
3554: GO 3526
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3556: LD_VAR 0 4
3560: PUSH
3561: LD_INT 1
3563: ARRAY
3564: PPUSH
3565: LD_VAR 0 4
3569: PUSH
3570: LD_INT 2
3572: ARRAY
3573: PPUSH
3574: CALL_OW 428
3578: PUSH
3579: LD_VAR 0 5
3583: IN
3584: IFFALSE 3613
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3586: LD_VAR 0 4
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: LD_VAR 0 4
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 456
// end ;
3613: GO 3526
3615: POP
3616: POP
// end ;
3617: LD_VAR 0 3
3621: RET
// export function Count ( array ) ; begin
3622: LD_INT 0
3624: PPUSH
// result := array + 0 ;
3625: LD_ADDR_VAR 0 2
3629: PUSH
3630: LD_VAR 0 1
3634: PUSH
3635: LD_INT 0
3637: PLUS
3638: ST_TO_ADDR
// end ;
3639: LD_VAR 0 2
3643: RET
// export function IsEmpty ( building ) ; begin
3644: LD_INT 0
3646: PPUSH
// if not building then
3647: LD_VAR 0 1
3651: NOT
3652: IFFALSE 3656
// exit ;
3654: GO 3699
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3656: LD_ADDR_VAR 0 2
3660: PUSH
3661: LD_VAR 0 1
3665: PUSH
3666: LD_INT 22
3668: PUSH
3669: LD_VAR 0 1
3673: PPUSH
3674: CALL_OW 255
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 58
3685: PUSH
3686: EMPTY
3687: LIST
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PPUSH
3693: CALL_OW 69
3697: IN
3698: ST_TO_ADDR
// end ;
3699: LD_VAR 0 2
3703: RET
// export function IsNotFull ( building ) ; var places ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
// if not building then
3708: LD_VAR 0 1
3712: NOT
3713: IFFALSE 3717
// exit ;
3715: GO 3745
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3717: LD_ADDR_VAR 0 2
3721: PUSH
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 3
3729: PUSH
3730: LD_INT 62
3732: PUSH
3733: EMPTY
3734: LIST
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PPUSH
3740: CALL_OW 72
3744: ST_TO_ADDR
// end ;
3745: LD_VAR 0 2
3749: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3750: LD_INT 0
3752: PPUSH
3753: PPUSH
3754: PPUSH
3755: PPUSH
// tmp := [ ] ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: EMPTY
3762: ST_TO_ADDR
// list := [ ] ;
3763: LD_ADDR_VAR 0 5
3767: PUSH
3768: EMPTY
3769: ST_TO_ADDR
// for i = 16 to 25 do
3770: LD_ADDR_VAR 0 4
3774: PUSH
3775: DOUBLE
3776: LD_INT 16
3778: DEC
3779: ST_TO_ADDR
3780: LD_INT 25
3782: PUSH
3783: FOR_TO
3784: IFFALSE 3857
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3786: LD_ADDR_VAR 0 3
3790: PUSH
3791: LD_VAR 0 3
3795: PUSH
3796: LD_INT 22
3798: PUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 255
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 91
3815: PUSH
3816: LD_VAR 0 1
3820: PUSH
3821: LD_INT 6
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: PUSH
3829: LD_INT 30
3831: PUSH
3832: LD_VAR 0 4
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: PPUSH
3849: CALL_OW 69
3853: ADD
3854: ST_TO_ADDR
3855: GO 3783
3857: POP
3858: POP
// for i = 1 to tmp do
3859: LD_ADDR_VAR 0 4
3863: PUSH
3864: DOUBLE
3865: LD_INT 1
3867: DEC
3868: ST_TO_ADDR
3869: LD_VAR 0 3
3873: PUSH
3874: FOR_TO
3875: IFFALSE 3963
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3877: LD_ADDR_VAR 0 5
3881: PUSH
3882: LD_VAR 0 5
3886: PUSH
3887: LD_VAR 0 3
3891: PUSH
3892: LD_VAR 0 4
3896: ARRAY
3897: PPUSH
3898: CALL_OW 266
3902: PUSH
3903: LD_VAR 0 3
3907: PUSH
3908: LD_VAR 0 4
3912: ARRAY
3913: PPUSH
3914: CALL_OW 250
3918: PUSH
3919: LD_VAR 0 3
3923: PUSH
3924: LD_VAR 0 4
3928: ARRAY
3929: PPUSH
3930: CALL_OW 251
3934: PUSH
3935: LD_VAR 0 3
3939: PUSH
3940: LD_VAR 0 4
3944: ARRAY
3945: PPUSH
3946: CALL_OW 254
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: PUSH
3957: EMPTY
3958: LIST
3959: ADD
3960: ST_TO_ADDR
3961: GO 3874
3963: POP
3964: POP
// result := list ;
3965: LD_ADDR_VAR 0 2
3969: PUSH
3970: LD_VAR 0 5
3974: ST_TO_ADDR
// end ;
3975: LD_VAR 0 2
3979: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3980: LD_INT 0
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
3987: PPUSH
3988: PPUSH
// if not factory then
3989: LD_VAR 0 1
3993: NOT
3994: IFFALSE 3998
// exit ;
3996: GO 4591
// if control = control_apeman then
3998: LD_VAR 0 4
4002: PUSH
4003: LD_INT 5
4005: EQUAL
4006: IFFALSE 4115
// begin tmp := UnitsInside ( factory ) ;
4008: LD_ADDR_VAR 0 8
4012: PUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 313
4022: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4023: LD_VAR 0 8
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 12
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: NOT
4043: IFFALSE 4053
// control := control_manual ;
4045: LD_ADDR_VAR 0 4
4049: PUSH
4050: LD_INT 1
4052: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4053: LD_ADDR_VAR 0 8
4057: PUSH
4058: LD_VAR 0 1
4062: PPUSH
4063: CALL 3750 0 1
4067: ST_TO_ADDR
// if tmp then
4068: LD_VAR 0 8
4072: IFFALSE 4115
// begin for i in tmp do
4074: LD_ADDR_VAR 0 7
4078: PUSH
4079: LD_VAR 0 8
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4113
// if i [ 1 ] = b_ext_radio then
4087: LD_VAR 0 7
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 22
4098: EQUAL
4099: IFFALSE 4111
// begin control := control_remote ;
4101: LD_ADDR_VAR 0 4
4105: PUSH
4106: LD_INT 2
4108: ST_TO_ADDR
// break ;
4109: GO 4113
// end ;
4111: GO 4084
4113: POP
4114: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4115: LD_VAR 0 1
4119: PPUSH
4120: LD_VAR 0 2
4124: PPUSH
4125: LD_VAR 0 3
4129: PPUSH
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_VAR 0 5
4139: PPUSH
4140: CALL_OW 448
4144: IFFALSE 4179
// begin result := [ chassis , engine , control , weapon ] ;
4146: LD_ADDR_VAR 0 6
4150: PUSH
4151: LD_VAR 0 2
4155: PUSH
4156: LD_VAR 0 3
4160: PUSH
4161: LD_VAR 0 4
4165: PUSH
4166: LD_VAR 0 5
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: ST_TO_ADDR
// exit ;
4177: GO 4591
// end ; _chassis := AvailableChassisList ( factory ) ;
4179: LD_ADDR_VAR 0 9
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 475
4193: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4194: LD_ADDR_VAR 0 11
4198: PUSH
4199: LD_VAR 0 1
4203: PPUSH
4204: CALL_OW 476
4208: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4209: LD_ADDR_VAR 0 12
4213: PUSH
4214: LD_VAR 0 1
4218: PPUSH
4219: CALL_OW 477
4223: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4224: LD_ADDR_VAR 0 10
4228: PUSH
4229: LD_VAR 0 1
4233: PPUSH
4234: CALL_OW 478
4238: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4239: LD_VAR 0 9
4243: NOT
4244: PUSH
4245: LD_VAR 0 11
4249: NOT
4250: OR
4251: PUSH
4252: LD_VAR 0 12
4256: NOT
4257: OR
4258: PUSH
4259: LD_VAR 0 10
4263: NOT
4264: OR
4265: IFFALSE 4300
// begin result := [ chassis , engine , control , weapon ] ;
4267: LD_ADDR_VAR 0 6
4271: PUSH
4272: LD_VAR 0 2
4276: PUSH
4277: LD_VAR 0 3
4281: PUSH
4282: LD_VAR 0 4
4286: PUSH
4287: LD_VAR 0 5
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: ST_TO_ADDR
// exit ;
4298: GO 4591
// end ; if not chassis in _chassis then
4300: LD_VAR 0 2
4304: PUSH
4305: LD_VAR 0 9
4309: IN
4310: NOT
4311: IFFALSE 4337
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4313: LD_ADDR_VAR 0 2
4317: PUSH
4318: LD_VAR 0 9
4322: PUSH
4323: LD_INT 1
4325: PPUSH
4326: LD_VAR 0 9
4330: PPUSH
4331: CALL_OW 12
4335: ARRAY
4336: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_VAR 0 3
4346: PPUSH
4347: CALL 4596 0 2
4351: NOT
4352: IFFALSE 4411
// repeat engine := _engine [ 1 ] ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: LD_VAR 0 11
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4368: LD_ADDR_VAR 0 11
4372: PUSH
4373: LD_VAR 0 11
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL_OW 3
4385: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4386: LD_VAR 0 2
4390: PPUSH
4391: LD_VAR 0 3
4395: PPUSH
4396: CALL 4596 0 2
4400: PUSH
4401: LD_VAR 0 11
4405: PUSH
4406: EMPTY
4407: EQUAL
4408: OR
4409: IFFALSE 4354
// if not control in _control then
4411: LD_VAR 0 4
4415: PUSH
4416: LD_VAR 0 12
4420: IN
4421: NOT
4422: IFFALSE 4448
// control := _control [ rand ( 1 , _control ) ] ;
4424: LD_ADDR_VAR 0 4
4428: PUSH
4429: LD_VAR 0 12
4433: PUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_VAR 0 12
4441: PPUSH
4442: CALL_OW 12
4446: ARRAY
4447: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4448: LD_VAR 0 2
4452: PPUSH
4453: LD_VAR 0 5
4457: PPUSH
4458: CALL 4816 0 2
4462: NOT
4463: IFFALSE 4522
// repeat weapon := _weapon [ 1 ] ;
4465: LD_ADDR_VAR 0 5
4469: PUSH
4470: LD_VAR 0 10
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4479: LD_ADDR_VAR 0 10
4483: PUSH
4484: LD_VAR 0 10
4488: PPUSH
4489: LD_INT 1
4491: PPUSH
4492: CALL_OW 3
4496: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4497: LD_VAR 0 2
4501: PPUSH
4502: LD_VAR 0 5
4506: PPUSH
4507: CALL 4816 0 2
4511: PUSH
4512: LD_VAR 0 10
4516: PUSH
4517: EMPTY
4518: EQUAL
4519: OR
4520: IFFALSE 4465
// result := [ ] ;
4522: LD_ADDR_VAR 0 6
4526: PUSH
4527: EMPTY
4528: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4529: LD_VAR 0 1
4533: PPUSH
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 4
4548: PPUSH
4549: LD_VAR 0 5
4553: PPUSH
4554: CALL_OW 448
4558: IFFALSE 4591
// result := [ chassis , engine , control , weapon ] ;
4560: LD_ADDR_VAR 0 6
4564: PUSH
4565: LD_VAR 0 2
4569: PUSH
4570: LD_VAR 0 3
4574: PUSH
4575: LD_VAR 0 4
4579: PUSH
4580: LD_VAR 0 5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: ST_TO_ADDR
// end ;
4591: LD_VAR 0 6
4595: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4596: LD_INT 0
4598: PPUSH
// if not chassis or not engine then
4599: LD_VAR 0 1
4603: NOT
4604: PUSH
4605: LD_VAR 0 2
4609: NOT
4610: OR
4611: IFFALSE 4615
// exit ;
4613: GO 4811
// case engine of engine_solar :
4615: LD_VAR 0 2
4619: PUSH
4620: LD_INT 2
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4628
4626: GO 4666
4628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: LD_INT 11
4636: PUSH
4637: LD_INT 12
4639: PUSH
4640: LD_INT 13
4642: PUSH
4643: LD_INT 14
4645: PUSH
4646: LD_INT 1
4648: PUSH
4649: LD_INT 2
4651: PUSH
4652: LD_INT 3
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: ST_TO_ADDR
4664: GO 4795
4666: LD_INT 1
4668: DOUBLE
4669: EQUAL
4670: IFTRUE 4674
4672: GO 4736
4674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4675: LD_ADDR_VAR 0 3
4679: PUSH
4680: LD_INT 11
4682: PUSH
4683: LD_INT 12
4685: PUSH
4686: LD_INT 13
4688: PUSH
4689: LD_INT 14
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: LD_INT 2
4697: PUSH
4698: LD_INT 3
4700: PUSH
4701: LD_INT 4
4703: PUSH
4704: LD_INT 5
4706: PUSH
4707: LD_INT 21
4709: PUSH
4710: LD_INT 23
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 24
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: ST_TO_ADDR
4734: GO 4795
4736: LD_INT 3
4738: DOUBLE
4739: EQUAL
4740: IFTRUE 4744
4742: GO 4794
4744: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4745: LD_ADDR_VAR 0 3
4749: PUSH
4750: LD_INT 13
4752: PUSH
4753: LD_INT 14
4755: PUSH
4756: LD_INT 2
4758: PUSH
4759: LD_INT 3
4761: PUSH
4762: LD_INT 4
4764: PUSH
4765: LD_INT 5
4767: PUSH
4768: LD_INT 21
4770: PUSH
4771: LD_INT 22
4773: PUSH
4774: LD_INT 23
4776: PUSH
4777: LD_INT 24
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: ST_TO_ADDR
4792: GO 4795
4794: POP
// result := ( chassis in result ) ;
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_VAR 0 1
4804: PUSH
4805: LD_VAR 0 3
4809: IN
4810: ST_TO_ADDR
// end ;
4811: LD_VAR 0 3
4815: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4816: LD_INT 0
4818: PPUSH
// if not chassis or not weapon then
4819: LD_VAR 0 1
4823: NOT
4824: PUSH
4825: LD_VAR 0 2
4829: NOT
4830: OR
4831: IFFALSE 4835
// exit ;
4833: GO 5895
// case weapon of us_machine_gun :
4835: LD_VAR 0 2
4839: PUSH
4840: LD_INT 2
4842: DOUBLE
4843: EQUAL
4844: IFTRUE 4848
4846: GO 4878
4848: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4849: LD_ADDR_VAR 0 3
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: LD_INT 2
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 4
4865: PUSH
4866: LD_INT 5
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: ST_TO_ADDR
4876: GO 5879
4878: LD_INT 3
4880: DOUBLE
4881: EQUAL
4882: IFTRUE 4886
4884: GO 4916
4886: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4887: LD_ADDR_VAR 0 3
4891: PUSH
4892: LD_INT 1
4894: PUSH
4895: LD_INT 2
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: ST_TO_ADDR
4914: GO 5879
4916: LD_INT 11
4918: DOUBLE
4919: EQUAL
4920: IFTRUE 4924
4922: GO 4954
4924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: LD_INT 2
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 5
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: ST_TO_ADDR
4952: GO 5879
4954: LD_INT 4
4956: DOUBLE
4957: EQUAL
4958: IFTRUE 4962
4960: GO 4988
4962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: LD_INT 2
4970: PUSH
4971: LD_INT 3
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: ST_TO_ADDR
4986: GO 5879
4988: LD_INT 5
4990: DOUBLE
4991: EQUAL
4992: IFTRUE 4996
4994: GO 5022
4996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4997: LD_ADDR_VAR 0 3
5001: PUSH
5002: LD_INT 2
5004: PUSH
5005: LD_INT 3
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: ST_TO_ADDR
5020: GO 5879
5022: LD_INT 9
5024: DOUBLE
5025: EQUAL
5026: IFTRUE 5030
5028: GO 5056
5030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5031: LD_ADDR_VAR 0 3
5035: PUSH
5036: LD_INT 2
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: LD_INT 4
5044: PUSH
5045: LD_INT 5
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: ST_TO_ADDR
5054: GO 5879
5056: LD_INT 7
5058: DOUBLE
5059: EQUAL
5060: IFTRUE 5064
5062: GO 5090
5064: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5065: LD_ADDR_VAR 0 3
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: LD_INT 4
5078: PUSH
5079: LD_INT 5
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: ST_TO_ADDR
5088: GO 5879
5090: LD_INT 12
5092: DOUBLE
5093: EQUAL
5094: IFTRUE 5098
5096: GO 5124
5098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5099: LD_ADDR_VAR 0 3
5103: PUSH
5104: LD_INT 2
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: LD_INT 5
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: ST_TO_ADDR
5122: GO 5879
5124: LD_INT 13
5126: DOUBLE
5127: EQUAL
5128: IFTRUE 5132
5130: GO 5158
5132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_INT 2
5140: PUSH
5141: LD_INT 3
5143: PUSH
5144: LD_INT 4
5146: PUSH
5147: LD_INT 5
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: ST_TO_ADDR
5156: GO 5879
5158: LD_INT 14
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5166
5164: GO 5184
5166: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 4
5174: PUSH
5175: LD_INT 5
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: ST_TO_ADDR
5182: GO 5879
5184: LD_INT 6
5186: DOUBLE
5187: EQUAL
5188: IFTRUE 5192
5190: GO 5210
5192: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5193: LD_ADDR_VAR 0 3
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: LD_INT 5
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: ST_TO_ADDR
5208: GO 5879
5210: LD_INT 10
5212: DOUBLE
5213: EQUAL
5214: IFTRUE 5218
5216: GO 5236
5218: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5219: LD_ADDR_VAR 0 3
5223: PUSH
5224: LD_INT 4
5226: PUSH
5227: LD_INT 5
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: ST_TO_ADDR
5234: GO 5879
5236: LD_INT 22
5238: DOUBLE
5239: EQUAL
5240: IFTRUE 5244
5242: GO 5270
5244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_INT 11
5252: PUSH
5253: LD_INT 12
5255: PUSH
5256: LD_INT 13
5258: PUSH
5259: LD_INT 14
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: ST_TO_ADDR
5268: GO 5879
5270: LD_INT 23
5272: DOUBLE
5273: EQUAL
5274: IFTRUE 5278
5276: GO 5304
5278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: LD_INT 11
5286: PUSH
5287: LD_INT 12
5289: PUSH
5290: LD_INT 13
5292: PUSH
5293: LD_INT 14
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: ST_TO_ADDR
5302: GO 5879
5304: LD_INT 24
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5338
5312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_INT 11
5320: PUSH
5321: LD_INT 12
5323: PUSH
5324: LD_INT 13
5326: PUSH
5327: LD_INT 14
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: ST_TO_ADDR
5336: GO 5879
5338: LD_INT 30
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5346
5344: GO 5372
5346: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: LD_INT 11
5354: PUSH
5355: LD_INT 12
5357: PUSH
5358: LD_INT 13
5360: PUSH
5361: LD_INT 14
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: ST_TO_ADDR
5370: GO 5879
5372: LD_INT 25
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5398
5380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5381: LD_ADDR_VAR 0 3
5385: PUSH
5386: LD_INT 13
5388: PUSH
5389: LD_INT 14
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: ST_TO_ADDR
5396: GO 5879
5398: LD_INT 27
5400: DOUBLE
5401: EQUAL
5402: IFTRUE 5406
5404: GO 5424
5406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5407: LD_ADDR_VAR 0 3
5411: PUSH
5412: LD_INT 13
5414: PUSH
5415: LD_INT 14
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: ST_TO_ADDR
5422: GO 5879
5424: LD_INT 92
5426: DOUBLE
5427: EQUAL
5428: IFTRUE 5432
5430: GO 5458
5432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5433: LD_ADDR_VAR 0 3
5437: PUSH
5438: LD_INT 11
5440: PUSH
5441: LD_INT 12
5443: PUSH
5444: LD_INT 13
5446: PUSH
5447: LD_INT 14
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: ST_TO_ADDR
5456: GO 5879
5458: LD_INT 28
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5466
5464: GO 5484
5466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5467: LD_ADDR_VAR 0 3
5471: PUSH
5472: LD_INT 13
5474: PUSH
5475: LD_INT 14
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: ST_TO_ADDR
5482: GO 5879
5484: LD_INT 29
5486: DOUBLE
5487: EQUAL
5488: IFTRUE 5492
5490: GO 5510
5492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5493: LD_ADDR_VAR 0 3
5497: PUSH
5498: LD_INT 13
5500: PUSH
5501: LD_INT 14
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: ST_TO_ADDR
5508: GO 5879
5510: LD_INT 31
5512: DOUBLE
5513: EQUAL
5514: IFTRUE 5518
5516: GO 5536
5518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5519: LD_ADDR_VAR 0 3
5523: PUSH
5524: LD_INT 13
5526: PUSH
5527: LD_INT 14
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 5879
5536: LD_INT 26
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5562
5544: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: LD_INT 13
5552: PUSH
5553: LD_INT 14
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: ST_TO_ADDR
5560: GO 5879
5562: LD_INT 42
5564: DOUBLE
5565: EQUAL
5566: IFTRUE 5570
5568: GO 5596
5570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 23
5584: PUSH
5585: LD_INT 24
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: ST_TO_ADDR
5594: GO 5879
5596: LD_INT 43
5598: DOUBLE
5599: EQUAL
5600: IFTRUE 5604
5602: GO 5630
5604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5605: LD_ADDR_VAR 0 3
5609: PUSH
5610: LD_INT 21
5612: PUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 23
5618: PUSH
5619: LD_INT 24
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
5628: GO 5879
5630: LD_INT 44
5632: DOUBLE
5633: EQUAL
5634: IFTRUE 5638
5636: GO 5664
5638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5639: LD_ADDR_VAR 0 3
5643: PUSH
5644: LD_INT 21
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 23
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: ST_TO_ADDR
5662: GO 5879
5664: LD_INT 45
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5672
5670: GO 5698
5672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5673: LD_ADDR_VAR 0 3
5677: PUSH
5678: LD_INT 21
5680: PUSH
5681: LD_INT 22
5683: PUSH
5684: LD_INT 23
5686: PUSH
5687: LD_INT 24
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: ST_TO_ADDR
5696: GO 5879
5698: LD_INT 49
5700: DOUBLE
5701: EQUAL
5702: IFTRUE 5706
5704: GO 5732
5706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5707: LD_ADDR_VAR 0 3
5711: PUSH
5712: LD_INT 21
5714: PUSH
5715: LD_INT 22
5717: PUSH
5718: LD_INT 23
5720: PUSH
5721: LD_INT 24
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: ST_TO_ADDR
5730: GO 5879
5732: LD_INT 51
5734: DOUBLE
5735: EQUAL
5736: IFTRUE 5740
5738: GO 5766
5740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5741: LD_ADDR_VAR 0 3
5745: PUSH
5746: LD_INT 21
5748: PUSH
5749: LD_INT 22
5751: PUSH
5752: LD_INT 23
5754: PUSH
5755: LD_INT 24
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: ST_TO_ADDR
5764: GO 5879
5766: LD_INT 52
5768: DOUBLE
5769: EQUAL
5770: IFTRUE 5774
5772: GO 5800
5774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: LD_INT 21
5782: PUSH
5783: LD_INT 22
5785: PUSH
5786: LD_INT 23
5788: PUSH
5789: LD_INT 24
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: ST_TO_ADDR
5798: GO 5879
5800: LD_INT 53
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5808
5806: GO 5826
5808: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5809: LD_ADDR_VAR 0 3
5813: PUSH
5814: LD_INT 23
5816: PUSH
5817: LD_INT 24
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: ST_TO_ADDR
5824: GO 5879
5826: LD_INT 46
5828: DOUBLE
5829: EQUAL
5830: IFTRUE 5834
5832: GO 5852
5834: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5835: LD_ADDR_VAR 0 3
5839: PUSH
5840: LD_INT 23
5842: PUSH
5843: LD_INT 24
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: ST_TO_ADDR
5850: GO 5879
5852: LD_INT 47
5854: DOUBLE
5855: EQUAL
5856: IFTRUE 5860
5858: GO 5878
5860: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5861: LD_ADDR_VAR 0 3
5865: PUSH
5866: LD_INT 23
5868: PUSH
5869: LD_INT 24
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: ST_TO_ADDR
5876: GO 5879
5878: POP
// result := ( chassis in result ) ;
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_VAR 0 1
5888: PUSH
5889: LD_VAR 0 3
5893: IN
5894: ST_TO_ADDR
// end ;
5895: LD_VAR 0 3
5899: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5900: LD_INT 0
5902: PPUSH
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
// result := array ;
5909: LD_ADDR_VAR 0 5
5913: PUSH
5914: LD_VAR 0 1
5918: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5919: LD_VAR 0 1
5923: NOT
5924: PUSH
5925: LD_VAR 0 2
5929: NOT
5930: OR
5931: PUSH
5932: LD_VAR 0 3
5936: NOT
5937: OR
5938: PUSH
5939: LD_VAR 0 2
5943: PUSH
5944: LD_VAR 0 1
5948: GREATER
5949: OR
5950: PUSH
5951: LD_VAR 0 3
5955: PUSH
5956: LD_VAR 0 1
5960: GREATER
5961: OR
5962: IFFALSE 5966
// exit ;
5964: GO 6262
// if direction then
5966: LD_VAR 0 4
5970: IFFALSE 6034
// begin d := 1 ;
5972: LD_ADDR_VAR 0 9
5976: PUSH
5977: LD_INT 1
5979: ST_TO_ADDR
// if i_from > i_to then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 3
5989: GREATER
5990: IFFALSE 6016
// length := ( array - i_from ) + i_to else
5992: LD_ADDR_VAR 0 11
5996: PUSH
5997: LD_VAR 0 1
6001: PUSH
6002: LD_VAR 0 2
6006: MINUS
6007: PUSH
6008: LD_VAR 0 3
6012: PLUS
6013: ST_TO_ADDR
6014: GO 6032
// length := i_to - i_from ;
6016: LD_ADDR_VAR 0 11
6020: PUSH
6021: LD_VAR 0 3
6025: PUSH
6026: LD_VAR 0 2
6030: MINUS
6031: ST_TO_ADDR
// end else
6032: GO 6095
// begin d := - 1 ;
6034: LD_ADDR_VAR 0 9
6038: PUSH
6039: LD_INT 1
6041: NEG
6042: ST_TO_ADDR
// if i_from > i_to then
6043: LD_VAR 0 2
6047: PUSH
6048: LD_VAR 0 3
6052: GREATER
6053: IFFALSE 6073
// length := i_from - i_to else
6055: LD_ADDR_VAR 0 11
6059: PUSH
6060: LD_VAR 0 2
6064: PUSH
6065: LD_VAR 0 3
6069: MINUS
6070: ST_TO_ADDR
6071: GO 6095
// length := ( array - i_to ) + i_from ;
6073: LD_ADDR_VAR 0 11
6077: PUSH
6078: LD_VAR 0 1
6082: PUSH
6083: LD_VAR 0 3
6087: MINUS
6088: PUSH
6089: LD_VAR 0 2
6093: PLUS
6094: ST_TO_ADDR
// end ; if not length then
6095: LD_VAR 0 11
6099: NOT
6100: IFFALSE 6104
// exit ;
6102: GO 6262
// tmp := array ;
6104: LD_ADDR_VAR 0 10
6108: PUSH
6109: LD_VAR 0 1
6113: ST_TO_ADDR
// for i = 1 to length do
6114: LD_ADDR_VAR 0 6
6118: PUSH
6119: DOUBLE
6120: LD_INT 1
6122: DEC
6123: ST_TO_ADDR
6124: LD_VAR 0 11
6128: PUSH
6129: FOR_TO
6130: IFFALSE 6250
// begin for j = 1 to array do
6132: LD_ADDR_VAR 0 7
6136: PUSH
6137: DOUBLE
6138: LD_INT 1
6140: DEC
6141: ST_TO_ADDR
6142: LD_VAR 0 1
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6236
// begin k := j + d ;
6150: LD_ADDR_VAR 0 8
6154: PUSH
6155: LD_VAR 0 7
6159: PUSH
6160: LD_VAR 0 9
6164: PLUS
6165: ST_TO_ADDR
// if k > array then
6166: LD_VAR 0 8
6170: PUSH
6171: LD_VAR 0 1
6175: GREATER
6176: IFFALSE 6186
// k := 1 ;
6178: LD_ADDR_VAR 0 8
6182: PUSH
6183: LD_INT 1
6185: ST_TO_ADDR
// if not k then
6186: LD_VAR 0 8
6190: NOT
6191: IFFALSE 6203
// k := array ;
6193: LD_ADDR_VAR 0 8
6197: PUSH
6198: LD_VAR 0 1
6202: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6203: LD_ADDR_VAR 0 10
6207: PUSH
6208: LD_VAR 0 10
6212: PPUSH
6213: LD_VAR 0 8
6217: PPUSH
6218: LD_VAR 0 1
6222: PUSH
6223: LD_VAR 0 7
6227: ARRAY
6228: PPUSH
6229: CALL_OW 1
6233: ST_TO_ADDR
// end ;
6234: GO 6147
6236: POP
6237: POP
// array := tmp ;
6238: LD_ADDR_VAR 0 1
6242: PUSH
6243: LD_VAR 0 10
6247: ST_TO_ADDR
// end ;
6248: GO 6129
6250: POP
6251: POP
// result := array ;
6252: LD_ADDR_VAR 0 5
6256: PUSH
6257: LD_VAR 0 1
6261: ST_TO_ADDR
// end ;
6262: LD_VAR 0 5
6266: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6267: LD_INT 0
6269: PPUSH
6270: PPUSH
// result := 0 ;
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_INT 0
6278: ST_TO_ADDR
// if not array or not value in array then
6279: LD_VAR 0 1
6283: NOT
6284: PUSH
6285: LD_VAR 0 2
6289: PUSH
6290: LD_VAR 0 1
6294: IN
6295: NOT
6296: OR
6297: IFFALSE 6301
// exit ;
6299: GO 6355
// for i = 1 to array do
6301: LD_ADDR_VAR 0 4
6305: PUSH
6306: DOUBLE
6307: LD_INT 1
6309: DEC
6310: ST_TO_ADDR
6311: LD_VAR 0 1
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6353
// if value = array [ i ] then
6319: LD_VAR 0 2
6323: PUSH
6324: LD_VAR 0 1
6328: PUSH
6329: LD_VAR 0 4
6333: ARRAY
6334: EQUAL
6335: IFFALSE 6351
// begin result := i ;
6337: LD_ADDR_VAR 0 3
6341: PUSH
6342: LD_VAR 0 4
6346: ST_TO_ADDR
// exit ;
6347: POP
6348: POP
6349: GO 6355
// end ;
6351: GO 6316
6353: POP
6354: POP
// end ;
6355: LD_VAR 0 3
6359: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6360: LD_INT 0
6362: PPUSH
// vc_chassis := chassis ;
6363: LD_ADDR_OWVAR 37
6367: PUSH
6368: LD_VAR 0 1
6372: ST_TO_ADDR
// vc_engine := engine ;
6373: LD_ADDR_OWVAR 39
6377: PUSH
6378: LD_VAR 0 2
6382: ST_TO_ADDR
// vc_control := control ;
6383: LD_ADDR_OWVAR 38
6387: PUSH
6388: LD_VAR 0 3
6392: ST_TO_ADDR
// vc_weapon := weapon ;
6393: LD_ADDR_OWVAR 40
6397: PUSH
6398: LD_VAR 0 4
6402: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6403: LD_ADDR_OWVAR 41
6407: PUSH
6408: LD_VAR 0 5
6412: ST_TO_ADDR
// end ;
6413: LD_VAR 0 6
6417: RET
// export function WantPlant ( unit ) ; var task ; begin
6418: LD_INT 0
6420: PPUSH
6421: PPUSH
// result := false ;
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6430: LD_ADDR_VAR 0 3
6434: PUSH
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 437
6444: ST_TO_ADDR
// if task then
6445: LD_VAR 0 3
6449: IFFALSE 6477
// if task [ 1 ] [ 1 ] = p then
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 1
6458: ARRAY
6459: PUSH
6460: LD_INT 1
6462: ARRAY
6463: PUSH
6464: LD_STRING p
6466: EQUAL
6467: IFFALSE 6477
// result := true ;
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// end ;
6477: LD_VAR 0 2
6481: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6482: LD_INT 0
6484: PPUSH
6485: PPUSH
6486: PPUSH
6487: PPUSH
// if pos < 1 then
6488: LD_VAR 0 2
6492: PUSH
6493: LD_INT 1
6495: LESS
6496: IFFALSE 6500
// exit ;
6498: GO 6803
// if pos = 1 then
6500: LD_VAR 0 2
6504: PUSH
6505: LD_INT 1
6507: EQUAL
6508: IFFALSE 6541
// result := Replace ( arr , pos [ 1 ] , value ) else
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 1
6519: PPUSH
6520: LD_VAR 0 2
6524: PUSH
6525: LD_INT 1
6527: ARRAY
6528: PPUSH
6529: LD_VAR 0 3
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
6539: GO 6803
// begin tmp := arr ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 1
6550: ST_TO_ADDR
// s_arr := [ tmp ] ;
6551: LD_ADDR_VAR 0 7
6555: PUSH
6556: LD_VAR 0 6
6560: PUSH
6561: EMPTY
6562: LIST
6563: ST_TO_ADDR
// for i = 1 to pos - 1 do
6564: LD_ADDR_VAR 0 5
6568: PUSH
6569: DOUBLE
6570: LD_INT 1
6572: DEC
6573: ST_TO_ADDR
6574: LD_VAR 0 2
6578: PUSH
6579: LD_INT 1
6581: MINUS
6582: PUSH
6583: FOR_TO
6584: IFFALSE 6629
// begin tmp := tmp [ pos [ i ] ] ;
6586: LD_ADDR_VAR 0 6
6590: PUSH
6591: LD_VAR 0 6
6595: PUSH
6596: LD_VAR 0 2
6600: PUSH
6601: LD_VAR 0 5
6605: ARRAY
6606: ARRAY
6607: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6608: LD_ADDR_VAR 0 7
6612: PUSH
6613: LD_VAR 0 7
6617: PUSH
6618: LD_VAR 0 6
6622: PUSH
6623: EMPTY
6624: LIST
6625: ADD
6626: ST_TO_ADDR
// end ;
6627: GO 6583
6629: POP
6630: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6631: LD_ADDR_VAR 0 6
6635: PUSH
6636: LD_VAR 0 6
6640: PPUSH
6641: LD_VAR 0 2
6645: PUSH
6646: LD_VAR 0 2
6650: ARRAY
6651: PPUSH
6652: LD_VAR 0 3
6656: PPUSH
6657: CALL_OW 1
6661: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6662: LD_ADDR_VAR 0 7
6666: PUSH
6667: LD_VAR 0 7
6671: PPUSH
6672: LD_VAR 0 7
6676: PPUSH
6677: LD_VAR 0 6
6681: PPUSH
6682: CALL_OW 1
6686: ST_TO_ADDR
// for i = s_arr downto 2 do
6687: LD_ADDR_VAR 0 5
6691: PUSH
6692: DOUBLE
6693: LD_VAR 0 7
6697: INC
6698: ST_TO_ADDR
6699: LD_INT 2
6701: PUSH
6702: FOR_DOWNTO
6703: IFFALSE 6787
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6705: LD_ADDR_VAR 0 6
6709: PUSH
6710: LD_VAR 0 7
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: LD_INT 1
6722: MINUS
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 2
6729: PUSH
6730: LD_VAR 0 5
6734: PUSH
6735: LD_INT 1
6737: MINUS
6738: ARRAY
6739: PPUSH
6740: LD_VAR 0 7
6744: PUSH
6745: LD_VAR 0 5
6749: ARRAY
6750: PPUSH
6751: CALL_OW 1
6755: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6756: LD_ADDR_VAR 0 7
6760: PUSH
6761: LD_VAR 0 7
6765: PPUSH
6766: LD_VAR 0 5
6770: PUSH
6771: LD_INT 1
6773: MINUS
6774: PPUSH
6775: LD_VAR 0 6
6779: PPUSH
6780: CALL_OW 1
6784: ST_TO_ADDR
// end ;
6785: GO 6702
6787: POP
6788: POP
// result := s_arr [ 1 ] ;
6789: LD_ADDR_VAR 0 4
6793: PUSH
6794: LD_VAR 0 7
6798: PUSH
6799: LD_INT 1
6801: ARRAY
6802: ST_TO_ADDR
// end ; end ;
6803: LD_VAR 0 4
6807: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6808: LD_INT 0
6810: PPUSH
6811: PPUSH
// if not list then
6812: LD_VAR 0 1
6816: NOT
6817: IFFALSE 6821
// exit ;
6819: GO 6912
// i := list [ pos1 ] ;
6821: LD_ADDR_VAR 0 5
6825: PUSH
6826: LD_VAR 0 1
6830: PUSH
6831: LD_VAR 0 2
6835: ARRAY
6836: ST_TO_ADDR
// if not i then
6837: LD_VAR 0 5
6841: NOT
6842: IFFALSE 6846
// exit ;
6844: GO 6912
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6846: LD_ADDR_VAR 0 1
6850: PUSH
6851: LD_VAR 0 1
6855: PPUSH
6856: LD_VAR 0 2
6860: PPUSH
6861: LD_VAR 0 1
6865: PUSH
6866: LD_VAR 0 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 1
6876: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6877: LD_ADDR_VAR 0 1
6881: PUSH
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_VAR 0 3
6891: PPUSH
6892: LD_VAR 0 5
6896: PPUSH
6897: CALL_OW 1
6901: ST_TO_ADDR
// result := list ;
6902: LD_ADDR_VAR 0 4
6906: PUSH
6907: LD_VAR 0 1
6911: ST_TO_ADDR
// end ;
6912: LD_VAR 0 4
6916: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6917: LD_INT 0
6919: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6920: LD_ADDR_VAR 0 5
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 250
6934: PPUSH
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 251
6944: PPUSH
6945: LD_VAR 0 2
6949: PPUSH
6950: LD_VAR 0 3
6954: PPUSH
6955: LD_VAR 0 4
6959: PPUSH
6960: CALL 7338 0 5
6964: ST_TO_ADDR
// end ;
6965: LD_VAR 0 5
6969: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6970: LD_INT 0
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
// if not list or not unit then
6976: LD_VAR 0 2
6980: NOT
6981: PUSH
6982: LD_VAR 0 1
6986: NOT
6987: OR
6988: IFFALSE 6992
// exit ;
6990: GO 7333
// result := [ ] ;
6992: LD_ADDR_VAR 0 5
6996: PUSH
6997: EMPTY
6998: ST_TO_ADDR
// for i in list do
6999: LD_ADDR_VAR 0 6
7003: PUSH
7004: LD_VAR 0 2
7008: PUSH
7009: FOR_IN
7010: IFFALSE 7228
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7012: LD_ADDR_VAR 0 8
7016: PUSH
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_VAR 0 6
7026: PUSH
7027: LD_INT 1
7029: ARRAY
7030: PPUSH
7031: LD_VAR 0 6
7035: PUSH
7036: LD_INT 2
7038: ARRAY
7039: PPUSH
7040: CALL_OW 297
7044: ST_TO_ADDR
// if not Count ( result ) then
7045: LD_VAR 0 5
7049: PPUSH
7050: CALL 3622 0 1
7054: NOT
7055: IFFALSE 7088
// begin result := Join ( result , [ i , tmp ] ) ;
7057: LD_ADDR_VAR 0 5
7061: PUSH
7062: LD_VAR 0 5
7066: PPUSH
7067: LD_VAR 0 6
7071: PUSH
7072: LD_VAR 0 8
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL 39231 0 2
7085: ST_TO_ADDR
// continue ;
7086: GO 7009
// end ; if result [ result ] [ 2 ] <= tmp then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_VAR 0 5
7097: ARRAY
7098: PUSH
7099: LD_INT 2
7101: ARRAY
7102: PUSH
7103: LD_VAR 0 8
7107: LESSEQUAL
7108: IFFALSE 7141
// result := Join ( result , [ i , tmp ] ) else
7110: LD_ADDR_VAR 0 5
7114: PUSH
7115: LD_VAR 0 5
7119: PPUSH
7120: LD_VAR 0 6
7124: PUSH
7125: LD_VAR 0 8
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL 39231 0 2
7138: ST_TO_ADDR
7139: GO 7226
// begin for j := 1 to Count ( result ) do
7141: LD_ADDR_VAR 0 7
7145: PUSH
7146: DOUBLE
7147: LD_INT 1
7149: DEC
7150: ST_TO_ADDR
7151: LD_VAR 0 5
7155: PPUSH
7156: CALL 3622 0 1
7160: PUSH
7161: FOR_TO
7162: IFFALSE 7224
// begin if tmp < result [ j ] [ 2 ] then
7164: LD_VAR 0 8
7168: PUSH
7169: LD_VAR 0 5
7173: PUSH
7174: LD_VAR 0 7
7178: ARRAY
7179: PUSH
7180: LD_INT 2
7182: ARRAY
7183: LESS
7184: IFFALSE 7222
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7186: LD_ADDR_VAR 0 5
7190: PUSH
7191: LD_VAR 0 5
7195: PPUSH
7196: LD_VAR 0 7
7200: PPUSH
7201: LD_VAR 0 6
7205: PUSH
7206: LD_VAR 0 8
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 2
7219: ST_TO_ADDR
// break ;
7220: GO 7224
// end ; end ;
7222: GO 7161
7224: POP
7225: POP
// end ; end ;
7226: GO 7009
7228: POP
7229: POP
// if result and not asc then
7230: LD_VAR 0 5
7234: PUSH
7235: LD_VAR 0 3
7239: NOT
7240: AND
7241: IFFALSE 7258
// result := ReverseArray ( result ) ;
7243: LD_ADDR_VAR 0 5
7247: PUSH
7248: LD_VAR 0 5
7252: PPUSH
7253: CALL 34498 0 1
7257: ST_TO_ADDR
// tmp := [ ] ;
7258: LD_ADDR_VAR 0 8
7262: PUSH
7263: EMPTY
7264: ST_TO_ADDR
// if mode then
7265: LD_VAR 0 4
7269: IFFALSE 7333
// begin for i := 1 to result do
7271: LD_ADDR_VAR 0 6
7275: PUSH
7276: DOUBLE
7277: LD_INT 1
7279: DEC
7280: ST_TO_ADDR
7281: LD_VAR 0 5
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7321
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7289: LD_ADDR_VAR 0 8
7293: PUSH
7294: LD_VAR 0 8
7298: PPUSH
7299: LD_VAR 0 5
7303: PUSH
7304: LD_VAR 0 6
7308: ARRAY
7309: PUSH
7310: LD_INT 1
7312: ARRAY
7313: PPUSH
7314: CALL 39231 0 2
7318: ST_TO_ADDR
7319: GO 7286
7321: POP
7322: POP
// result := tmp ;
7323: LD_ADDR_VAR 0 5
7327: PUSH
7328: LD_VAR 0 8
7332: ST_TO_ADDR
// end ; end ;
7333: LD_VAR 0 5
7337: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7338: LD_INT 0
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
// if not list then
7344: LD_VAR 0 3
7348: NOT
7349: IFFALSE 7353
// exit ;
7351: GO 7741
// result := [ ] ;
7353: LD_ADDR_VAR 0 6
7357: PUSH
7358: EMPTY
7359: ST_TO_ADDR
// for i in list do
7360: LD_ADDR_VAR 0 7
7364: PUSH
7365: LD_VAR 0 3
7369: PUSH
7370: FOR_IN
7371: IFFALSE 7573
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7373: LD_ADDR_VAR 0 9
7377: PUSH
7378: LD_VAR 0 7
7382: PPUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: LD_VAR 0 2
7392: PPUSH
7393: CALL_OW 297
7397: ST_TO_ADDR
// if not result then
7398: LD_VAR 0 6
7402: NOT
7403: IFFALSE 7429
// result := [ [ i , tmp ] ] else
7405: LD_ADDR_VAR 0 6
7409: PUSH
7410: LD_VAR 0 7
7414: PUSH
7415: LD_VAR 0 9
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: ST_TO_ADDR
7427: GO 7571
// begin if result [ result ] [ 2 ] <= tmp then
7429: LD_VAR 0 6
7433: PUSH
7434: LD_VAR 0 6
7438: ARRAY
7439: PUSH
7440: LD_INT 2
7442: ARRAY
7443: PUSH
7444: LD_VAR 0 9
7448: LESSEQUAL
7449: IFFALSE 7491
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7451: LD_ADDR_VAR 0 6
7455: PUSH
7456: LD_VAR 0 6
7460: PPUSH
7461: LD_VAR 0 6
7465: PUSH
7466: LD_INT 1
7468: PLUS
7469: PPUSH
7470: LD_VAR 0 7
7474: PUSH
7475: LD_VAR 0 9
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 2
7488: ST_TO_ADDR
7489: GO 7571
// for j := 1 to result do
7491: LD_ADDR_VAR 0 8
7495: PUSH
7496: DOUBLE
7497: LD_INT 1
7499: DEC
7500: ST_TO_ADDR
7501: LD_VAR 0 6
7505: PUSH
7506: FOR_TO
7507: IFFALSE 7569
// begin if tmp < result [ j ] [ 2 ] then
7509: LD_VAR 0 9
7513: PUSH
7514: LD_VAR 0 6
7518: PUSH
7519: LD_VAR 0 8
7523: ARRAY
7524: PUSH
7525: LD_INT 2
7527: ARRAY
7528: LESS
7529: IFFALSE 7567
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7531: LD_ADDR_VAR 0 6
7535: PUSH
7536: LD_VAR 0 6
7540: PPUSH
7541: LD_VAR 0 8
7545: PPUSH
7546: LD_VAR 0 7
7550: PUSH
7551: LD_VAR 0 9
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 2
7564: ST_TO_ADDR
// break ;
7565: GO 7569
// end ; end ;
7567: GO 7506
7569: POP
7570: POP
// end ; end ;
7571: GO 7370
7573: POP
7574: POP
// if result and not asc then
7575: LD_VAR 0 6
7579: PUSH
7580: LD_VAR 0 4
7584: NOT
7585: AND
7586: IFFALSE 7661
// begin tmp := result ;
7588: LD_ADDR_VAR 0 9
7592: PUSH
7593: LD_VAR 0 6
7597: ST_TO_ADDR
// for i = tmp downto 1 do
7598: LD_ADDR_VAR 0 7
7602: PUSH
7603: DOUBLE
7604: LD_VAR 0 9
7608: INC
7609: ST_TO_ADDR
7610: LD_INT 1
7612: PUSH
7613: FOR_DOWNTO
7614: IFFALSE 7659
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7616: LD_ADDR_VAR 0 6
7620: PUSH
7621: LD_VAR 0 6
7625: PPUSH
7626: LD_VAR 0 9
7630: PUSH
7631: LD_VAR 0 7
7635: MINUS
7636: PUSH
7637: LD_INT 1
7639: PLUS
7640: PPUSH
7641: LD_VAR 0 9
7645: PUSH
7646: LD_VAR 0 7
7650: ARRAY
7651: PPUSH
7652: CALL_OW 1
7656: ST_TO_ADDR
7657: GO 7613
7659: POP
7660: POP
// end ; tmp := [ ] ;
7661: LD_ADDR_VAR 0 9
7665: PUSH
7666: EMPTY
7667: ST_TO_ADDR
// if mode then
7668: LD_VAR 0 5
7672: IFFALSE 7741
// begin for i = 1 to result do
7674: LD_ADDR_VAR 0 7
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_VAR 0 6
7688: PUSH
7689: FOR_TO
7690: IFFALSE 7729
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7692: LD_ADDR_VAR 0 9
7696: PUSH
7697: LD_VAR 0 9
7701: PPUSH
7702: LD_VAR 0 7
7706: PPUSH
7707: LD_VAR 0 6
7711: PUSH
7712: LD_VAR 0 7
7716: ARRAY
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PPUSH
7722: CALL_OW 1
7726: ST_TO_ADDR
7727: GO 7689
7729: POP
7730: POP
// result := tmp ;
7731: LD_ADDR_VAR 0 6
7735: PUSH
7736: LD_VAR 0 9
7740: ST_TO_ADDR
// end ; end ;
7741: LD_VAR 0 6
7745: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7746: LD_INT 0
7748: PPUSH
7749: PPUSH
7750: PPUSH
7751: PPUSH
7752: PPUSH
7753: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_INT 0
7761: PUSH
7762: LD_INT 0
7764: PUSH
7765: LD_INT 0
7767: PUSH
7768: EMPTY
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: ST_TO_ADDR
// if not x or not y then
7776: LD_VAR 0 2
7780: NOT
7781: PUSH
7782: LD_VAR 0 3
7786: NOT
7787: OR
7788: IFFALSE 7792
// exit ;
7790: GO 9442
// if not range then
7792: LD_VAR 0 4
7796: NOT
7797: IFFALSE 7807
// range := 10 ;
7799: LD_ADDR_VAR 0 4
7803: PUSH
7804: LD_INT 10
7806: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7807: LD_ADDR_VAR 0 8
7811: PUSH
7812: LD_INT 81
7814: PUSH
7815: LD_VAR 0 1
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 92
7826: PUSH
7827: LD_VAR 0 2
7831: PUSH
7832: LD_VAR 0 3
7836: PUSH
7837: LD_VAR 0 4
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 3
7850: PUSH
7851: LD_INT 21
7853: PUSH
7854: LD_INT 3
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: PPUSH
7870: CALL_OW 69
7874: ST_TO_ADDR
// if not tmp then
7875: LD_VAR 0 8
7879: NOT
7880: IFFALSE 7884
// exit ;
7882: GO 9442
// for i in tmp do
7884: LD_ADDR_VAR 0 6
7888: PUSH
7889: LD_VAR 0 8
7893: PUSH
7894: FOR_IN
7895: IFFALSE 9417
// begin points := [ 0 , 0 , 0 ] ;
7897: LD_ADDR_VAR 0 9
7901: PUSH
7902: LD_INT 0
7904: PUSH
7905: LD_INT 0
7907: PUSH
7908: LD_INT 0
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: ST_TO_ADDR
// bpoints := 1 ;
7916: LD_ADDR_VAR 0 10
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7924: LD_VAR 0 6
7928: PPUSH
7929: CALL_OW 247
7933: PUSH
7934: LD_INT 1
7936: DOUBLE
7937: EQUAL
7938: IFTRUE 7942
7940: GO 8520
7942: POP
// begin if GetClass ( i ) = 1 then
7943: LD_VAR 0 6
7947: PPUSH
7948: CALL_OW 257
7952: PUSH
7953: LD_INT 1
7955: EQUAL
7956: IFFALSE 7977
// points := [ 10 , 5 , 3 ] ;
7958: LD_ADDR_VAR 0 9
7962: PUSH
7963: LD_INT 10
7965: PUSH
7966: LD_INT 5
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7977: LD_VAR 0 6
7981: PPUSH
7982: CALL_OW 257
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: LD_INT 4
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: IN
8001: IFFALSE 8022
// points := [ 3 , 2 , 1 ] ;
8003: LD_ADDR_VAR 0 9
8007: PUSH
8008: LD_INT 3
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: LD_INT 1
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8022: LD_VAR 0 6
8026: PPUSH
8027: CALL_OW 257
8031: PUSH
8032: LD_INT 5
8034: EQUAL
8035: IFFALSE 8056
// points := [ 130 , 5 , 2 ] ;
8037: LD_ADDR_VAR 0 9
8041: PUSH
8042: LD_INT 130
8044: PUSH
8045: LD_INT 5
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8056: LD_VAR 0 6
8060: PPUSH
8061: CALL_OW 257
8065: PUSH
8066: LD_INT 8
8068: EQUAL
8069: IFFALSE 8090
// points := [ 35 , 35 , 30 ] ;
8071: LD_ADDR_VAR 0 9
8075: PUSH
8076: LD_INT 35
8078: PUSH
8079: LD_INT 35
8081: PUSH
8082: LD_INT 30
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8090: LD_VAR 0 6
8094: PPUSH
8095: CALL_OW 257
8099: PUSH
8100: LD_INT 9
8102: EQUAL
8103: IFFALSE 8124
// points := [ 20 , 55 , 40 ] ;
8105: LD_ADDR_VAR 0 9
8109: PUSH
8110: LD_INT 20
8112: PUSH
8113: LD_INT 55
8115: PUSH
8116: LD_INT 40
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8124: LD_VAR 0 6
8128: PPUSH
8129: CALL_OW 257
8133: PUSH
8134: LD_INT 12
8136: PUSH
8137: LD_INT 16
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: IFFALSE 8165
// points := [ 5 , 3 , 2 ] ;
8146: LD_ADDR_VAR 0 9
8150: PUSH
8151: LD_INT 5
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8165: LD_VAR 0 6
8169: PPUSH
8170: CALL_OW 257
8174: PUSH
8175: LD_INT 17
8177: EQUAL
8178: IFFALSE 8199
// points := [ 100 , 50 , 75 ] ;
8180: LD_ADDR_VAR 0 9
8184: PUSH
8185: LD_INT 100
8187: PUSH
8188: LD_INT 50
8190: PUSH
8191: LD_INT 75
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8199: LD_VAR 0 6
8203: PPUSH
8204: CALL_OW 257
8208: PUSH
8209: LD_INT 15
8211: EQUAL
8212: IFFALSE 8233
// points := [ 10 , 5 , 3 ] ;
8214: LD_ADDR_VAR 0 9
8218: PUSH
8219: LD_INT 10
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8233: LD_VAR 0 6
8237: PPUSH
8238: CALL_OW 257
8242: PUSH
8243: LD_INT 14
8245: EQUAL
8246: IFFALSE 8267
// points := [ 10 , 0 , 0 ] ;
8248: LD_ADDR_VAR 0 9
8252: PUSH
8253: LD_INT 10
8255: PUSH
8256: LD_INT 0
8258: PUSH
8259: LD_INT 0
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8267: LD_VAR 0 6
8271: PPUSH
8272: CALL_OW 257
8276: PUSH
8277: LD_INT 11
8279: EQUAL
8280: IFFALSE 8301
// points := [ 30 , 10 , 5 ] ;
8282: LD_ADDR_VAR 0 9
8286: PUSH
8287: LD_INT 30
8289: PUSH
8290: LD_INT 10
8292: PUSH
8293: LD_INT 5
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8301: LD_VAR 0 1
8305: PPUSH
8306: LD_INT 5
8308: PPUSH
8309: CALL_OW 321
8313: PUSH
8314: LD_INT 2
8316: EQUAL
8317: IFFALSE 8334
// bpoints := bpoints * 1.8 ;
8319: LD_ADDR_VAR 0 10
8323: PUSH
8324: LD_VAR 0 10
8328: PUSH
8329: LD_REAL  1.80000000000000E+0000
8332: MUL
8333: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 257
8343: PUSH
8344: LD_INT 1
8346: PUSH
8347: LD_INT 2
8349: PUSH
8350: LD_INT 3
8352: PUSH
8353: LD_INT 4
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: IN
8362: PUSH
8363: LD_VAR 0 1
8367: PPUSH
8368: LD_INT 51
8370: PPUSH
8371: CALL_OW 321
8375: PUSH
8376: LD_INT 2
8378: EQUAL
8379: AND
8380: IFFALSE 8397
// bpoints := bpoints * 1.2 ;
8382: LD_ADDR_VAR 0 10
8386: PUSH
8387: LD_VAR 0 10
8391: PUSH
8392: LD_REAL  1.20000000000000E+0000
8395: MUL
8396: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8397: LD_VAR 0 6
8401: PPUSH
8402: CALL_OW 257
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: LD_INT 7
8412: PUSH
8413: LD_INT 9
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: LIST
8420: IN
8421: PUSH
8422: LD_VAR 0 1
8426: PPUSH
8427: LD_INT 52
8429: PPUSH
8430: CALL_OW 321
8434: PUSH
8435: LD_INT 2
8437: EQUAL
8438: AND
8439: IFFALSE 8456
// bpoints := bpoints * 1.5 ;
8441: LD_ADDR_VAR 0 10
8445: PUSH
8446: LD_VAR 0 10
8450: PUSH
8451: LD_REAL  1.50000000000000E+0000
8454: MUL
8455: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8456: LD_VAR 0 1
8460: PPUSH
8461: LD_INT 66
8463: PPUSH
8464: CALL_OW 321
8468: PUSH
8469: LD_INT 2
8471: EQUAL
8472: IFFALSE 8489
// bpoints := bpoints * 1.1 ;
8474: LD_ADDR_VAR 0 10
8478: PUSH
8479: LD_VAR 0 10
8483: PUSH
8484: LD_REAL  1.10000000000000E+0000
8487: MUL
8488: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8489: LD_ADDR_VAR 0 10
8493: PUSH
8494: LD_VAR 0 10
8498: PUSH
8499: LD_VAR 0 6
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: CALL_OW 259
8511: PUSH
8512: LD_REAL  1.15000000000000E+0000
8515: MUL
8516: MUL
8517: ST_TO_ADDR
// end ; unit_vehicle :
8518: GO 9346
8520: LD_INT 2
8522: DOUBLE
8523: EQUAL
8524: IFTRUE 8528
8526: GO 9334
8528: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 264
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: LD_INT 42
8544: PUSH
8545: LD_INT 24
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: IN
8553: IFFALSE 8574
// points := [ 25 , 5 , 3 ] ;
8555: LD_ADDR_VAR 0 9
8559: PUSH
8560: LD_INT 25
8562: PUSH
8563: LD_INT 5
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8574: LD_VAR 0 6
8578: PPUSH
8579: CALL_OW 264
8583: PUSH
8584: LD_INT 4
8586: PUSH
8587: LD_INT 43
8589: PUSH
8590: LD_INT 25
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: LIST
8597: IN
8598: IFFALSE 8619
// points := [ 40 , 15 , 5 ] ;
8600: LD_ADDR_VAR 0 9
8604: PUSH
8605: LD_INT 40
8607: PUSH
8608: LD_INT 15
8610: PUSH
8611: LD_INT 5
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8619: LD_VAR 0 6
8623: PPUSH
8624: CALL_OW 264
8628: PUSH
8629: LD_INT 3
8631: PUSH
8632: LD_INT 23
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: IN
8639: IFFALSE 8660
// points := [ 7 , 25 , 8 ] ;
8641: LD_ADDR_VAR 0 9
8645: PUSH
8646: LD_INT 7
8648: PUSH
8649: LD_INT 25
8651: PUSH
8652: LD_INT 8
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8660: LD_VAR 0 6
8664: PPUSH
8665: CALL_OW 264
8669: PUSH
8670: LD_INT 5
8672: PUSH
8673: LD_INT 27
8675: PUSH
8676: LD_INT 44
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: IN
8684: IFFALSE 8705
// points := [ 14 , 50 , 16 ] ;
8686: LD_ADDR_VAR 0 9
8690: PUSH
8691: LD_INT 14
8693: PUSH
8694: LD_INT 50
8696: PUSH
8697: LD_INT 16
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8705: LD_VAR 0 6
8709: PPUSH
8710: CALL_OW 264
8714: PUSH
8715: LD_INT 6
8717: PUSH
8718: LD_INT 46
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: IN
8725: IFFALSE 8746
// points := [ 32 , 120 , 70 ] ;
8727: LD_ADDR_VAR 0 9
8731: PUSH
8732: LD_INT 32
8734: PUSH
8735: LD_INT 120
8737: PUSH
8738: LD_INT 70
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8746: LD_VAR 0 6
8750: PPUSH
8751: CALL_OW 264
8755: PUSH
8756: LD_INT 7
8758: PUSH
8759: LD_INT 28
8761: PUSH
8762: LD_INT 45
8764: PUSH
8765: LD_INT 92
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: IN
8774: IFFALSE 8795
// points := [ 35 , 20 , 45 ] ;
8776: LD_ADDR_VAR 0 9
8780: PUSH
8781: LD_INT 35
8783: PUSH
8784: LD_INT 20
8786: PUSH
8787: LD_INT 45
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: LIST
8794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8795: LD_VAR 0 6
8799: PPUSH
8800: CALL_OW 264
8804: PUSH
8805: LD_INT 47
8807: PUSH
8808: EMPTY
8809: LIST
8810: IN
8811: IFFALSE 8832
// points := [ 67 , 45 , 75 ] ;
8813: LD_ADDR_VAR 0 9
8817: PUSH
8818: LD_INT 67
8820: PUSH
8821: LD_INT 45
8823: PUSH
8824: LD_INT 75
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8832: LD_VAR 0 6
8836: PPUSH
8837: CALL_OW 264
8841: PUSH
8842: LD_INT 26
8844: PUSH
8845: EMPTY
8846: LIST
8847: IN
8848: IFFALSE 8869
// points := [ 120 , 30 , 80 ] ;
8850: LD_ADDR_VAR 0 9
8854: PUSH
8855: LD_INT 120
8857: PUSH
8858: LD_INT 30
8860: PUSH
8861: LD_INT 80
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8869: LD_VAR 0 6
8873: PPUSH
8874: CALL_OW 264
8878: PUSH
8879: LD_INT 22
8881: PUSH
8882: EMPTY
8883: LIST
8884: IN
8885: IFFALSE 8906
// points := [ 40 , 1 , 1 ] ;
8887: LD_ADDR_VAR 0 9
8891: PUSH
8892: LD_INT 40
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: LD_INT 1
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8906: LD_VAR 0 6
8910: PPUSH
8911: CALL_OW 264
8915: PUSH
8916: LD_INT 29
8918: PUSH
8919: EMPTY
8920: LIST
8921: IN
8922: IFFALSE 8943
// points := [ 70 , 200 , 400 ] ;
8924: LD_ADDR_VAR 0 9
8928: PUSH
8929: LD_INT 70
8931: PUSH
8932: LD_INT 200
8934: PUSH
8935: LD_INT 400
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8943: LD_VAR 0 6
8947: PPUSH
8948: CALL_OW 264
8952: PUSH
8953: LD_INT 14
8955: PUSH
8956: LD_INT 53
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: IN
8963: IFFALSE 8984
// points := [ 40 , 10 , 20 ] ;
8965: LD_ADDR_VAR 0 9
8969: PUSH
8970: LD_INT 40
8972: PUSH
8973: LD_INT 10
8975: PUSH
8976: LD_INT 20
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8984: LD_VAR 0 6
8988: PPUSH
8989: CALL_OW 264
8993: PUSH
8994: LD_INT 9
8996: PUSH
8997: EMPTY
8998: LIST
8999: IN
9000: IFFALSE 9021
// points := [ 5 , 70 , 20 ] ;
9002: LD_ADDR_VAR 0 9
9006: PUSH
9007: LD_INT 5
9009: PUSH
9010: LD_INT 70
9012: PUSH
9013: LD_INT 20
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9021: LD_VAR 0 6
9025: PPUSH
9026: CALL_OW 264
9030: PUSH
9031: LD_INT 10
9033: PUSH
9034: EMPTY
9035: LIST
9036: IN
9037: IFFALSE 9058
// points := [ 35 , 110 , 70 ] ;
9039: LD_ADDR_VAR 0 9
9043: PUSH
9044: LD_INT 35
9046: PUSH
9047: LD_INT 110
9049: PUSH
9050: LD_INT 70
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9058: LD_VAR 0 6
9062: PPUSH
9063: CALL_OW 265
9067: PUSH
9068: LD_INT 25
9070: EQUAL
9071: IFFALSE 9092
// points := [ 80 , 65 , 100 ] ;
9073: LD_ADDR_VAR 0 9
9077: PUSH
9078: LD_INT 80
9080: PUSH
9081: LD_INT 65
9083: PUSH
9084: LD_INT 100
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9092: LD_VAR 0 6
9096: PPUSH
9097: CALL_OW 263
9101: PUSH
9102: LD_INT 1
9104: EQUAL
9105: IFFALSE 9140
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9107: LD_ADDR_VAR 0 10
9111: PUSH
9112: LD_VAR 0 10
9116: PUSH
9117: LD_VAR 0 6
9121: PPUSH
9122: CALL_OW 311
9126: PPUSH
9127: LD_INT 3
9129: PPUSH
9130: CALL_OW 259
9134: PUSH
9135: LD_INT 4
9137: MUL
9138: MUL
9139: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9140: LD_VAR 0 6
9144: PPUSH
9145: CALL_OW 263
9149: PUSH
9150: LD_INT 2
9152: EQUAL
9153: IFFALSE 9204
// begin j := IsControledBy ( i ) ;
9155: LD_ADDR_VAR 0 7
9159: PUSH
9160: LD_VAR 0 6
9164: PPUSH
9165: CALL_OW 312
9169: ST_TO_ADDR
// if j then
9170: LD_VAR 0 7
9174: IFFALSE 9204
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9176: LD_ADDR_VAR 0 10
9180: PUSH
9181: LD_VAR 0 10
9185: PUSH
9186: LD_VAR 0 7
9190: PPUSH
9191: LD_INT 3
9193: PPUSH
9194: CALL_OW 259
9198: PUSH
9199: LD_INT 3
9201: MUL
9202: MUL
9203: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9204: LD_VAR 0 6
9208: PPUSH
9209: CALL_OW 264
9213: PUSH
9214: LD_INT 5
9216: PUSH
9217: LD_INT 6
9219: PUSH
9220: LD_INT 46
9222: PUSH
9223: LD_INT 44
9225: PUSH
9226: LD_INT 47
9228: PUSH
9229: LD_INT 45
9231: PUSH
9232: LD_INT 28
9234: PUSH
9235: LD_INT 7
9237: PUSH
9238: LD_INT 27
9240: PUSH
9241: LD_INT 29
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: IN
9256: PUSH
9257: LD_VAR 0 1
9261: PPUSH
9262: LD_INT 52
9264: PPUSH
9265: CALL_OW 321
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: AND
9274: IFFALSE 9291
// bpoints := bpoints * 1.2 ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_VAR 0 10
9285: PUSH
9286: LD_REAL  1.20000000000000E+0000
9289: MUL
9290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9291: LD_VAR 0 6
9295: PPUSH
9296: CALL_OW 264
9300: PUSH
9301: LD_INT 6
9303: PUSH
9304: LD_INT 46
9306: PUSH
9307: LD_INT 47
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: IN
9315: IFFALSE 9332
// bpoints := bpoints * 1.2 ;
9317: LD_ADDR_VAR 0 10
9321: PUSH
9322: LD_VAR 0 10
9326: PUSH
9327: LD_REAL  1.20000000000000E+0000
9330: MUL
9331: ST_TO_ADDR
// end ; unit_building :
9332: GO 9346
9334: LD_INT 3
9336: DOUBLE
9337: EQUAL
9338: IFTRUE 9342
9340: GO 9345
9342: POP
// ; end ;
9343: GO 9346
9345: POP
// for j = 1 to 3 do
9346: LD_ADDR_VAR 0 7
9350: PUSH
9351: DOUBLE
9352: LD_INT 1
9354: DEC
9355: ST_TO_ADDR
9356: LD_INT 3
9358: PUSH
9359: FOR_TO
9360: IFFALSE 9413
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9362: LD_ADDR_VAR 0 5
9366: PUSH
9367: LD_VAR 0 5
9371: PPUSH
9372: LD_VAR 0 7
9376: PPUSH
9377: LD_VAR 0 5
9381: PUSH
9382: LD_VAR 0 7
9386: ARRAY
9387: PUSH
9388: LD_VAR 0 9
9392: PUSH
9393: LD_VAR 0 7
9397: ARRAY
9398: PUSH
9399: LD_VAR 0 10
9403: MUL
9404: PLUS
9405: PPUSH
9406: CALL_OW 1
9410: ST_TO_ADDR
9411: GO 9359
9413: POP
9414: POP
// end ;
9415: GO 7894
9417: POP
9418: POP
// result := Replace ( result , 4 , tmp ) ;
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_VAR 0 5
9428: PPUSH
9429: LD_INT 4
9431: PPUSH
9432: LD_VAR 0 8
9436: PPUSH
9437: CALL_OW 1
9441: ST_TO_ADDR
// end ;
9442: LD_VAR 0 5
9446: RET
// export function DangerAtRange ( unit , range ) ; begin
9447: LD_INT 0
9449: PPUSH
// if not unit then
9450: LD_VAR 0 1
9454: NOT
9455: IFFALSE 9459
// exit ;
9457: GO 9504
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9459: LD_ADDR_VAR 0 3
9463: PUSH
9464: LD_VAR 0 1
9468: PPUSH
9469: CALL_OW 255
9473: PPUSH
9474: LD_VAR 0 1
9478: PPUSH
9479: CALL_OW 250
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 251
9493: PPUSH
9494: LD_VAR 0 2
9498: PPUSH
9499: CALL 7746 0 4
9503: ST_TO_ADDR
// end ;
9504: LD_VAR 0 3
9508: RET
// export function DangerInArea ( side , area ) ; begin
9509: LD_INT 0
9511: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9512: LD_ADDR_VAR 0 3
9516: PUSH
9517: LD_VAR 0 2
9521: PPUSH
9522: LD_INT 81
9524: PUSH
9525: LD_VAR 0 1
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 70
9538: ST_TO_ADDR
// end ;
9539: LD_VAR 0 3
9543: RET
// export function IsExtension ( b ) ; begin
9544: LD_INT 0
9546: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9547: LD_ADDR_VAR 0 2
9551: PUSH
9552: LD_VAR 0 1
9556: PUSH
9557: LD_INT 23
9559: PUSH
9560: LD_INT 20
9562: PUSH
9563: LD_INT 22
9565: PUSH
9566: LD_INT 17
9568: PUSH
9569: LD_INT 24
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 19
9577: PUSH
9578: LD_INT 16
9580: PUSH
9581: LD_INT 25
9583: PUSH
9584: LD_INT 18
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: IN
9599: ST_TO_ADDR
// end ;
9600: LD_VAR 0 2
9604: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9605: LD_INT 0
9607: PPUSH
9608: PPUSH
9609: PPUSH
// result := [ ] ;
9610: LD_ADDR_VAR 0 4
9614: PUSH
9615: EMPTY
9616: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9617: LD_ADDR_VAR 0 5
9621: PUSH
9622: LD_VAR 0 2
9626: PPUSH
9627: LD_INT 21
9629: PUSH
9630: LD_INT 3
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PPUSH
9637: CALL_OW 70
9641: ST_TO_ADDR
// if not tmp then
9642: LD_VAR 0 5
9646: NOT
9647: IFFALSE 9651
// exit ;
9649: GO 9715
// if checkLink then
9651: LD_VAR 0 3
9655: IFFALSE 9705
// begin for i in tmp do
9657: LD_ADDR_VAR 0 6
9661: PUSH
9662: LD_VAR 0 5
9666: PUSH
9667: FOR_IN
9668: IFFALSE 9703
// if GetBase ( i ) <> base then
9670: LD_VAR 0 6
9674: PPUSH
9675: CALL_OW 274
9679: PUSH
9680: LD_VAR 0 1
9684: NONEQUAL
9685: IFFALSE 9701
// ComLinkToBase ( base , i ) ;
9687: LD_VAR 0 1
9691: PPUSH
9692: LD_VAR 0 6
9696: PPUSH
9697: CALL_OW 169
9701: GO 9667
9703: POP
9704: POP
// end ; result := tmp ;
9705: LD_ADDR_VAR 0 4
9709: PUSH
9710: LD_VAR 0 5
9714: ST_TO_ADDR
// end ;
9715: LD_VAR 0 4
9719: RET
// export function ComComplete ( units , b ) ; var i ; begin
9720: LD_INT 0
9722: PPUSH
9723: PPUSH
// if not units then
9724: LD_VAR 0 1
9728: NOT
9729: IFFALSE 9733
// exit ;
9731: GO 9823
// for i in units do
9733: LD_ADDR_VAR 0 4
9737: PUSH
9738: LD_VAR 0 1
9742: PUSH
9743: FOR_IN
9744: IFFALSE 9821
// if BuildingStatus ( b ) = bs_build then
9746: LD_VAR 0 2
9750: PPUSH
9751: CALL_OW 461
9755: PUSH
9756: LD_INT 1
9758: EQUAL
9759: IFFALSE 9819
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9761: LD_VAR 0 4
9765: PPUSH
9766: LD_STRING h
9768: PUSH
9769: LD_VAR 0 2
9773: PPUSH
9774: CALL_OW 250
9778: PUSH
9779: LD_VAR 0 2
9783: PPUSH
9784: CALL_OW 251
9788: PUSH
9789: LD_VAR 0 2
9793: PUSH
9794: LD_INT 0
9796: PUSH
9797: LD_INT 0
9799: PUSH
9800: LD_INT 0
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: EMPTY
9813: LIST
9814: PPUSH
9815: CALL_OW 446
9819: GO 9743
9821: POP
9822: POP
// end ;
9823: LD_VAR 0 3
9827: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9828: LD_INT 0
9830: PPUSH
9831: PPUSH
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9836: LD_VAR 0 1
9840: NOT
9841: PUSH
9842: LD_VAR 0 1
9846: PPUSH
9847: CALL_OW 263
9851: PUSH
9852: LD_INT 2
9854: NONEQUAL
9855: OR
9856: IFFALSE 9860
// exit ;
9858: GO 10176
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9860: LD_ADDR_VAR 0 6
9864: PUSH
9865: LD_INT 22
9867: PUSH
9868: LD_VAR 0 1
9872: PPUSH
9873: CALL_OW 255
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 2
9884: PUSH
9885: LD_INT 30
9887: PUSH
9888: LD_INT 36
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 34
9897: PUSH
9898: LD_INT 31
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 69
9918: ST_TO_ADDR
// if not tmp then
9919: LD_VAR 0 6
9923: NOT
9924: IFFALSE 9928
// exit ;
9926: GO 10176
// result := [ ] ;
9928: LD_ADDR_VAR 0 2
9932: PUSH
9933: EMPTY
9934: ST_TO_ADDR
// for i in tmp do
9935: LD_ADDR_VAR 0 3
9939: PUSH
9940: LD_VAR 0 6
9944: PUSH
9945: FOR_IN
9946: IFFALSE 10017
// begin t := UnitsInside ( i ) ;
9948: LD_ADDR_VAR 0 4
9952: PUSH
9953: LD_VAR 0 3
9957: PPUSH
9958: CALL_OW 313
9962: ST_TO_ADDR
// if t then
9963: LD_VAR 0 4
9967: IFFALSE 10015
// for j in t do
9969: LD_ADDR_VAR 0 7
9973: PUSH
9974: LD_VAR 0 4
9978: PUSH
9979: FOR_IN
9980: IFFALSE 10013
// result := Replace ( result , result + 1 , j ) ;
9982: LD_ADDR_VAR 0 2
9986: PUSH
9987: LD_VAR 0 2
9991: PPUSH
9992: LD_VAR 0 2
9996: PUSH
9997: LD_INT 1
9999: PLUS
10000: PPUSH
10001: LD_VAR 0 7
10005: PPUSH
10006: CALL_OW 1
10010: ST_TO_ADDR
10011: GO 9979
10013: POP
10014: POP
// end ;
10015: GO 9945
10017: POP
10018: POP
// if not result then
10019: LD_VAR 0 2
10023: NOT
10024: IFFALSE 10028
// exit ;
10026: GO 10176
// mech := result [ 1 ] ;
10028: LD_ADDR_VAR 0 5
10032: PUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: ST_TO_ADDR
// if result > 1 then
10042: LD_VAR 0 2
10046: PUSH
10047: LD_INT 1
10049: GREATER
10050: IFFALSE 10162
// begin for i = 2 to result do
10052: LD_ADDR_VAR 0 3
10056: PUSH
10057: DOUBLE
10058: LD_INT 2
10060: DEC
10061: ST_TO_ADDR
10062: LD_VAR 0 2
10066: PUSH
10067: FOR_TO
10068: IFFALSE 10160
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10070: LD_ADDR_VAR 0 4
10074: PUSH
10075: LD_VAR 0 2
10079: PUSH
10080: LD_VAR 0 3
10084: ARRAY
10085: PPUSH
10086: LD_INT 3
10088: PPUSH
10089: CALL_OW 259
10093: PUSH
10094: LD_VAR 0 2
10098: PUSH
10099: LD_VAR 0 3
10103: ARRAY
10104: PPUSH
10105: CALL_OW 432
10109: MINUS
10110: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10111: LD_VAR 0 4
10115: PUSH
10116: LD_VAR 0 5
10120: PPUSH
10121: LD_INT 3
10123: PPUSH
10124: CALL_OW 259
10128: PUSH
10129: LD_VAR 0 5
10133: PPUSH
10134: CALL_OW 432
10138: MINUS
10139: GREATEREQUAL
10140: IFFALSE 10158
// mech := result [ i ] ;
10142: LD_ADDR_VAR 0 5
10146: PUSH
10147: LD_VAR 0 2
10151: PUSH
10152: LD_VAR 0 3
10156: ARRAY
10157: ST_TO_ADDR
// end ;
10158: GO 10067
10160: POP
10161: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10162: LD_VAR 0 1
10166: PPUSH
10167: LD_VAR 0 5
10171: PPUSH
10172: CALL_OW 135
// end ;
10176: LD_VAR 0 2
10180: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10181: LD_INT 0
10183: PPUSH
10184: PPUSH
10185: PPUSH
10186: PPUSH
10187: PPUSH
10188: PPUSH
10189: PPUSH
10190: PPUSH
10191: PPUSH
10192: PPUSH
10193: PPUSH
10194: PPUSH
10195: PPUSH
// result := [ ] ;
10196: LD_ADDR_VAR 0 7
10200: PUSH
10201: EMPTY
10202: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10203: LD_VAR 0 1
10207: PPUSH
10208: CALL_OW 266
10212: PUSH
10213: LD_INT 0
10215: PUSH
10216: LD_INT 1
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: IN
10223: NOT
10224: IFFALSE 10228
// exit ;
10226: GO 11862
// if name then
10228: LD_VAR 0 3
10232: IFFALSE 10248
// SetBName ( base_dep , name ) ;
10234: LD_VAR 0 1
10238: PPUSH
10239: LD_VAR 0 3
10243: PPUSH
10244: CALL_OW 500
// base := GetBase ( base_dep ) ;
10248: LD_ADDR_VAR 0 15
10252: PUSH
10253: LD_VAR 0 1
10257: PPUSH
10258: CALL_OW 274
10262: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10263: LD_ADDR_VAR 0 16
10267: PUSH
10268: LD_VAR 0 1
10272: PPUSH
10273: CALL_OW 255
10277: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10278: LD_ADDR_VAR 0 17
10282: PUSH
10283: LD_VAR 0 1
10287: PPUSH
10288: CALL_OW 248
10292: ST_TO_ADDR
// if sources then
10293: LD_VAR 0 5
10297: IFFALSE 10344
// for i = 1 to 3 do
10299: LD_ADDR_VAR 0 8
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 3
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10342
// AddResourceType ( base , i , sources [ i ] ) ;
10315: LD_VAR 0 15
10319: PPUSH
10320: LD_VAR 0 8
10324: PPUSH
10325: LD_VAR 0 5
10329: PUSH
10330: LD_VAR 0 8
10334: ARRAY
10335: PPUSH
10336: CALL_OW 276
10340: GO 10312
10342: POP
10343: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10344: LD_ADDR_VAR 0 18
10348: PUSH
10349: LD_VAR 0 15
10353: PPUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 1
10361: PPUSH
10362: CALL 9605 0 3
10366: ST_TO_ADDR
// InitHc ;
10367: CALL_OW 19
// InitUc ;
10371: CALL_OW 18
// uc_side := side ;
10375: LD_ADDR_OWVAR 20
10379: PUSH
10380: LD_VAR 0 16
10384: ST_TO_ADDR
// uc_nation := nation ;
10385: LD_ADDR_OWVAR 21
10389: PUSH
10390: LD_VAR 0 17
10394: ST_TO_ADDR
// if buildings then
10395: LD_VAR 0 18
10399: IFFALSE 11721
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10401: LD_ADDR_VAR 0 19
10405: PUSH
10406: LD_VAR 0 18
10410: PPUSH
10411: LD_INT 2
10413: PUSH
10414: LD_INT 30
10416: PUSH
10417: LD_INT 29
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 30
10426: PUSH
10427: LD_INT 30
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: LIST
10438: PPUSH
10439: CALL_OW 72
10443: ST_TO_ADDR
// if tmp then
10444: LD_VAR 0 19
10448: IFFALSE 10496
// for i in tmp do
10450: LD_ADDR_VAR 0 8
10454: PUSH
10455: LD_VAR 0 19
10459: PUSH
10460: FOR_IN
10461: IFFALSE 10494
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10463: LD_VAR 0 8
10467: PPUSH
10468: CALL_OW 250
10472: PPUSH
10473: LD_VAR 0 8
10477: PPUSH
10478: CALL_OW 251
10482: PPUSH
10483: LD_VAR 0 16
10487: PPUSH
10488: CALL_OW 441
10492: GO 10460
10494: POP
10495: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10496: LD_VAR 0 18
10500: PPUSH
10501: LD_INT 2
10503: PUSH
10504: LD_INT 30
10506: PUSH
10507: LD_INT 32
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 30
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: PPUSH
10529: CALL_OW 72
10533: IFFALSE 10621
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10535: LD_ADDR_VAR 0 8
10539: PUSH
10540: LD_VAR 0 18
10544: PPUSH
10545: LD_INT 2
10547: PUSH
10548: LD_INT 30
10550: PUSH
10551: LD_INT 32
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 30
10560: PUSH
10561: LD_INT 33
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: PPUSH
10573: CALL_OW 72
10577: PUSH
10578: FOR_IN
10579: IFFALSE 10619
// begin if not GetBWeapon ( i ) then
10581: LD_VAR 0 8
10585: PPUSH
10586: CALL_OW 269
10590: NOT
10591: IFFALSE 10617
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10593: LD_VAR 0 8
10597: PPUSH
10598: LD_VAR 0 8
10602: PPUSH
10603: LD_VAR 0 2
10607: PPUSH
10608: CALL 11867 0 2
10612: PPUSH
10613: CALL_OW 431
// end ;
10617: GO 10578
10619: POP
10620: POP
// end ; for i = 1 to personel do
10621: LD_ADDR_VAR 0 8
10625: PUSH
10626: DOUBLE
10627: LD_INT 1
10629: DEC
10630: ST_TO_ADDR
10631: LD_VAR 0 6
10635: PUSH
10636: FOR_TO
10637: IFFALSE 11701
// begin if i > 4 then
10639: LD_VAR 0 8
10643: PUSH
10644: LD_INT 4
10646: GREATER
10647: IFFALSE 10651
// break ;
10649: GO 11701
// case i of 1 :
10651: LD_VAR 0 8
10655: PUSH
10656: LD_INT 1
10658: DOUBLE
10659: EQUAL
10660: IFTRUE 10664
10662: GO 10744
10664: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10665: LD_ADDR_VAR 0 12
10669: PUSH
10670: LD_VAR 0 18
10674: PPUSH
10675: LD_INT 22
10677: PUSH
10678: LD_VAR 0 16
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 58
10689: PUSH
10690: EMPTY
10691: LIST
10692: PUSH
10693: LD_INT 2
10695: PUSH
10696: LD_INT 30
10698: PUSH
10699: LD_INT 32
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 30
10708: PUSH
10709: LD_INT 4
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 30
10718: PUSH
10719: LD_INT 5
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: PPUSH
10737: CALL_OW 72
10741: ST_TO_ADDR
10742: GO 10966
10744: LD_INT 2
10746: DOUBLE
10747: EQUAL
10748: IFTRUE 10752
10750: GO 10814
10752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10753: LD_ADDR_VAR 0 12
10757: PUSH
10758: LD_VAR 0 18
10762: PPUSH
10763: LD_INT 22
10765: PUSH
10766: LD_VAR 0 16
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: LD_INT 30
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 30
10790: PUSH
10791: LD_INT 1
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 72
10811: ST_TO_ADDR
10812: GO 10966
10814: LD_INT 3
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10884
10822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10823: LD_ADDR_VAR 0 12
10827: PUSH
10828: LD_VAR 0 18
10832: PPUSH
10833: LD_INT 22
10835: PUSH
10836: LD_VAR 0 16
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 2
10847: PUSH
10848: LD_INT 30
10850: PUSH
10851: LD_INT 2
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 30
10860: PUSH
10861: LD_INT 3
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 72
10881: ST_TO_ADDR
10882: GO 10966
10884: LD_INT 4
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 10965
10892: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10893: LD_ADDR_VAR 0 12
10897: PUSH
10898: LD_VAR 0 18
10902: PPUSH
10903: LD_INT 22
10905: PUSH
10906: LD_VAR 0 16
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 2
10917: PUSH
10918: LD_INT 30
10920: PUSH
10921: LD_INT 6
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 30
10930: PUSH
10931: LD_INT 7
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 30
10940: PUSH
10941: LD_INT 8
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 72
10962: ST_TO_ADDR
10963: GO 10966
10965: POP
// if i = 1 then
10966: LD_VAR 0 8
10970: PUSH
10971: LD_INT 1
10973: EQUAL
10974: IFFALSE 11085
// begin tmp := [ ] ;
10976: LD_ADDR_VAR 0 19
10980: PUSH
10981: EMPTY
10982: ST_TO_ADDR
// for j in f do
10983: LD_ADDR_VAR 0 9
10987: PUSH
10988: LD_VAR 0 12
10992: PUSH
10993: FOR_IN
10994: IFFALSE 11067
// if GetBType ( j ) = b_bunker then
10996: LD_VAR 0 9
11000: PPUSH
11001: CALL_OW 266
11005: PUSH
11006: LD_INT 32
11008: EQUAL
11009: IFFALSE 11036
// tmp := Insert ( tmp , 1 , j ) else
11011: LD_ADDR_VAR 0 19
11015: PUSH
11016: LD_VAR 0 19
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: LD_VAR 0 9
11028: PPUSH
11029: CALL_OW 2
11033: ST_TO_ADDR
11034: GO 11065
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11036: LD_ADDR_VAR 0 19
11040: PUSH
11041: LD_VAR 0 19
11045: PPUSH
11046: LD_VAR 0 19
11050: PUSH
11051: LD_INT 1
11053: PLUS
11054: PPUSH
11055: LD_VAR 0 9
11059: PPUSH
11060: CALL_OW 2
11064: ST_TO_ADDR
11065: GO 10993
11067: POP
11068: POP
// if tmp then
11069: LD_VAR 0 19
11073: IFFALSE 11085
// f := tmp ;
11075: LD_ADDR_VAR 0 12
11079: PUSH
11080: LD_VAR 0 19
11084: ST_TO_ADDR
// end ; x := personel [ i ] ;
11085: LD_ADDR_VAR 0 13
11089: PUSH
11090: LD_VAR 0 6
11094: PUSH
11095: LD_VAR 0 8
11099: ARRAY
11100: ST_TO_ADDR
// if x = - 1 then
11101: LD_VAR 0 13
11105: PUSH
11106: LD_INT 1
11108: NEG
11109: EQUAL
11110: IFFALSE 11319
// begin for j in f do
11112: LD_ADDR_VAR 0 9
11116: PUSH
11117: LD_VAR 0 12
11121: PUSH
11122: FOR_IN
11123: IFFALSE 11315
// repeat InitHc ;
11125: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11129: LD_VAR 0 9
11133: PPUSH
11134: CALL_OW 266
11138: PUSH
11139: LD_INT 5
11141: EQUAL
11142: IFFALSE 11212
// begin if UnitsInside ( j ) < 3 then
11144: LD_VAR 0 9
11148: PPUSH
11149: CALL_OW 313
11153: PUSH
11154: LD_INT 3
11156: LESS
11157: IFFALSE 11193
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11159: LD_INT 0
11161: PPUSH
11162: LD_INT 5
11164: PUSH
11165: LD_INT 8
11167: PUSH
11168: LD_INT 9
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: LD_VAR 0 17
11180: ARRAY
11181: PPUSH
11182: LD_VAR 0 4
11186: PPUSH
11187: CALL_OW 380
11191: GO 11210
// PrepareHuman ( false , i , skill ) ;
11193: LD_INT 0
11195: PPUSH
11196: LD_VAR 0 8
11200: PPUSH
11201: LD_VAR 0 4
11205: PPUSH
11206: CALL_OW 380
// end else
11210: GO 11229
// PrepareHuman ( false , i , skill ) ;
11212: LD_INT 0
11214: PPUSH
11215: LD_VAR 0 8
11219: PPUSH
11220: LD_VAR 0 4
11224: PPUSH
11225: CALL_OW 380
// un := CreateHuman ;
11229: LD_ADDR_VAR 0 14
11233: PUSH
11234: CALL_OW 44
11238: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11239: LD_ADDR_VAR 0 7
11243: PUSH
11244: LD_VAR 0 7
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: LD_VAR 0 14
11256: PPUSH
11257: CALL_OW 2
11261: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11262: LD_VAR 0 14
11266: PPUSH
11267: LD_VAR 0 9
11271: PPUSH
11272: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11276: LD_VAR 0 9
11280: PPUSH
11281: CALL_OW 313
11285: PUSH
11286: LD_INT 6
11288: EQUAL
11289: PUSH
11290: LD_VAR 0 9
11294: PPUSH
11295: CALL_OW 266
11299: PUSH
11300: LD_INT 32
11302: PUSH
11303: LD_INT 31
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: IN
11310: OR
11311: IFFALSE 11125
11313: GO 11122
11315: POP
11316: POP
// end else
11317: GO 11699
// for j = 1 to x do
11319: LD_ADDR_VAR 0 9
11323: PUSH
11324: DOUBLE
11325: LD_INT 1
11327: DEC
11328: ST_TO_ADDR
11329: LD_VAR 0 13
11333: PUSH
11334: FOR_TO
11335: IFFALSE 11697
// begin InitHc ;
11337: CALL_OW 19
// if not f then
11341: LD_VAR 0 12
11345: NOT
11346: IFFALSE 11435
// begin PrepareHuman ( false , i , skill ) ;
11348: LD_INT 0
11350: PPUSH
11351: LD_VAR 0 8
11355: PPUSH
11356: LD_VAR 0 4
11360: PPUSH
11361: CALL_OW 380
// un := CreateHuman ;
11365: LD_ADDR_VAR 0 14
11369: PUSH
11370: CALL_OW 44
11374: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11375: LD_ADDR_VAR 0 7
11379: PUSH
11380: LD_VAR 0 7
11384: PPUSH
11385: LD_INT 1
11387: PPUSH
11388: LD_VAR 0 14
11392: PPUSH
11393: CALL_OW 2
11397: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11398: LD_VAR 0 14
11402: PPUSH
11403: LD_VAR 0 1
11407: PPUSH
11408: CALL_OW 250
11412: PPUSH
11413: LD_VAR 0 1
11417: PPUSH
11418: CALL_OW 251
11422: PPUSH
11423: LD_INT 10
11425: PPUSH
11426: LD_INT 0
11428: PPUSH
11429: CALL_OW 50
// continue ;
11433: GO 11334
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11435: LD_VAR 0 12
11439: PUSH
11440: LD_INT 1
11442: ARRAY
11443: PPUSH
11444: CALL_OW 313
11448: PUSH
11449: LD_VAR 0 12
11453: PUSH
11454: LD_INT 1
11456: ARRAY
11457: PPUSH
11458: CALL_OW 266
11462: PUSH
11463: LD_INT 32
11465: PUSH
11466: LD_INT 31
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: IN
11473: AND
11474: PUSH
11475: LD_VAR 0 12
11479: PUSH
11480: LD_INT 1
11482: ARRAY
11483: PPUSH
11484: CALL_OW 313
11488: PUSH
11489: LD_INT 6
11491: EQUAL
11492: OR
11493: IFFALSE 11513
// f := Delete ( f , 1 ) ;
11495: LD_ADDR_VAR 0 12
11499: PUSH
11500: LD_VAR 0 12
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 3
11512: ST_TO_ADDR
// if not f then
11513: LD_VAR 0 12
11517: NOT
11518: IFFALSE 11536
// begin x := x + 2 ;
11520: LD_ADDR_VAR 0 13
11524: PUSH
11525: LD_VAR 0 13
11529: PUSH
11530: LD_INT 2
11532: PLUS
11533: ST_TO_ADDR
// continue ;
11534: GO 11334
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11536: LD_VAR 0 12
11540: PUSH
11541: LD_INT 1
11543: ARRAY
11544: PPUSH
11545: CALL_OW 266
11549: PUSH
11550: LD_INT 5
11552: EQUAL
11553: IFFALSE 11627
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11555: LD_VAR 0 12
11559: PUSH
11560: LD_INT 1
11562: ARRAY
11563: PPUSH
11564: CALL_OW 313
11568: PUSH
11569: LD_INT 3
11571: LESS
11572: IFFALSE 11608
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11574: LD_INT 0
11576: PPUSH
11577: LD_INT 5
11579: PUSH
11580: LD_INT 8
11582: PUSH
11583: LD_INT 9
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: LD_VAR 0 17
11595: ARRAY
11596: PPUSH
11597: LD_VAR 0 4
11601: PPUSH
11602: CALL_OW 380
11606: GO 11625
// PrepareHuman ( false , i , skill ) ;
11608: LD_INT 0
11610: PPUSH
11611: LD_VAR 0 8
11615: PPUSH
11616: LD_VAR 0 4
11620: PPUSH
11621: CALL_OW 380
// end else
11625: GO 11644
// PrepareHuman ( false , i , skill ) ;
11627: LD_INT 0
11629: PPUSH
11630: LD_VAR 0 8
11634: PPUSH
11635: LD_VAR 0 4
11639: PPUSH
11640: CALL_OW 380
// un := CreateHuman ;
11644: LD_ADDR_VAR 0 14
11648: PUSH
11649: CALL_OW 44
11653: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11654: LD_ADDR_VAR 0 7
11658: PUSH
11659: LD_VAR 0 7
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: LD_VAR 0 14
11671: PPUSH
11672: CALL_OW 2
11676: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11677: LD_VAR 0 14
11681: PPUSH
11682: LD_VAR 0 12
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: CALL_OW 52
// end ;
11695: GO 11334
11697: POP
11698: POP
// end ;
11699: GO 10636
11701: POP
11702: POP
// result := result ^ buildings ;
11703: LD_ADDR_VAR 0 7
11707: PUSH
11708: LD_VAR 0 7
11712: PUSH
11713: LD_VAR 0 18
11717: ADD
11718: ST_TO_ADDR
// end else
11719: GO 11862
// begin for i = 1 to personel do
11721: LD_ADDR_VAR 0 8
11725: PUSH
11726: DOUBLE
11727: LD_INT 1
11729: DEC
11730: ST_TO_ADDR
11731: LD_VAR 0 6
11735: PUSH
11736: FOR_TO
11737: IFFALSE 11860
// begin if i > 4 then
11739: LD_VAR 0 8
11743: PUSH
11744: LD_INT 4
11746: GREATER
11747: IFFALSE 11751
// break ;
11749: GO 11860
// x := personel [ i ] ;
11751: LD_ADDR_VAR 0 13
11755: PUSH
11756: LD_VAR 0 6
11760: PUSH
11761: LD_VAR 0 8
11765: ARRAY
11766: ST_TO_ADDR
// if x = - 1 then
11767: LD_VAR 0 13
11771: PUSH
11772: LD_INT 1
11774: NEG
11775: EQUAL
11776: IFFALSE 11780
// continue ;
11778: GO 11736
// PrepareHuman ( false , i , skill ) ;
11780: LD_INT 0
11782: PPUSH
11783: LD_VAR 0 8
11787: PPUSH
11788: LD_VAR 0 4
11792: PPUSH
11793: CALL_OW 380
// un := CreateHuman ;
11797: LD_ADDR_VAR 0 14
11801: PUSH
11802: CALL_OW 44
11806: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11807: LD_VAR 0 14
11811: PPUSH
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 250
11821: PPUSH
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 251
11831: PPUSH
11832: LD_INT 10
11834: PPUSH
11835: LD_INT 0
11837: PPUSH
11838: CALL_OW 50
// result := result ^ un ;
11842: LD_ADDR_VAR 0 7
11846: PUSH
11847: LD_VAR 0 7
11851: PUSH
11852: LD_VAR 0 14
11856: ADD
11857: ST_TO_ADDR
// end ;
11858: GO 11736
11860: POP
11861: POP
// end ; end ;
11862: LD_VAR 0 7
11866: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11867: LD_INT 0
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
11884: PPUSH
// result := false ;
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11893: LD_VAR 0 1
11897: NOT
11898: PUSH
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 266
11908: PUSH
11909: LD_INT 32
11911: PUSH
11912: LD_INT 33
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: IN
11919: NOT
11920: OR
11921: IFFALSE 11925
// exit ;
11923: GO 13034
// nat := GetNation ( tower ) ;
11925: LD_ADDR_VAR 0 12
11929: PUSH
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 248
11939: ST_TO_ADDR
// side := GetSide ( tower ) ;
11940: LD_ADDR_VAR 0 16
11944: PUSH
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL_OW 255
11954: ST_TO_ADDR
// x := GetX ( tower ) ;
11955: LD_ADDR_VAR 0 10
11959: PUSH
11960: LD_VAR 0 1
11964: PPUSH
11965: CALL_OW 250
11969: ST_TO_ADDR
// y := GetY ( tower ) ;
11970: LD_ADDR_VAR 0 11
11974: PUSH
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 251
11984: ST_TO_ADDR
// if not x or not y then
11985: LD_VAR 0 10
11989: NOT
11990: PUSH
11991: LD_VAR 0 11
11995: NOT
11996: OR
11997: IFFALSE 12001
// exit ;
11999: GO 13034
// weapon := 0 ;
12001: LD_ADDR_VAR 0 18
12005: PUSH
12006: LD_INT 0
12008: ST_TO_ADDR
// fac_list := [ ] ;
12009: LD_ADDR_VAR 0 17
12013: PUSH
12014: EMPTY
12015: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12016: LD_ADDR_VAR 0 6
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 274
12030: PPUSH
12031: LD_VAR 0 2
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL 9605 0 3
12043: PPUSH
12044: LD_INT 30
12046: PUSH
12047: LD_INT 3
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 72
12058: ST_TO_ADDR
// if not factories then
12059: LD_VAR 0 6
12063: NOT
12064: IFFALSE 12068
// exit ;
12066: GO 13034
// for i in factories do
12068: LD_ADDR_VAR 0 8
12072: PUSH
12073: LD_VAR 0 6
12077: PUSH
12078: FOR_IN
12079: IFFALSE 12104
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12081: LD_ADDR_VAR 0 17
12085: PUSH
12086: LD_VAR 0 17
12090: PUSH
12091: LD_VAR 0 8
12095: PPUSH
12096: CALL_OW 478
12100: UNION
12101: ST_TO_ADDR
12102: GO 12078
12104: POP
12105: POP
// if not fac_list then
12106: LD_VAR 0 17
12110: NOT
12111: IFFALSE 12115
// exit ;
12113: GO 13034
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12115: LD_ADDR_VAR 0 5
12119: PUSH
12120: LD_INT 4
12122: PUSH
12123: LD_INT 5
12125: PUSH
12126: LD_INT 9
12128: PUSH
12129: LD_INT 10
12131: PUSH
12132: LD_INT 6
12134: PUSH
12135: LD_INT 7
12137: PUSH
12138: LD_INT 11
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 27
12152: PUSH
12153: LD_INT 28
12155: PUSH
12156: LD_INT 26
12158: PUSH
12159: LD_INT 30
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 43
12170: PUSH
12171: LD_INT 44
12173: PUSH
12174: LD_INT 46
12176: PUSH
12177: LD_INT 45
12179: PUSH
12180: LD_INT 47
12182: PUSH
12183: LD_INT 49
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: PUSH
12199: LD_VAR 0 12
12203: ARRAY
12204: ST_TO_ADDR
// list := list isect fac_list ;
12205: LD_ADDR_VAR 0 5
12209: PUSH
12210: LD_VAR 0 5
12214: PUSH
12215: LD_VAR 0 17
12219: ISECT
12220: ST_TO_ADDR
// if not list then
12221: LD_VAR 0 5
12225: NOT
12226: IFFALSE 12230
// exit ;
12228: GO 13034
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12230: LD_VAR 0 12
12234: PUSH
12235: LD_INT 3
12237: EQUAL
12238: PUSH
12239: LD_INT 49
12241: PUSH
12242: LD_VAR 0 5
12246: IN
12247: AND
12248: PUSH
12249: LD_INT 31
12251: PPUSH
12252: LD_VAR 0 16
12256: PPUSH
12257: CALL_OW 321
12261: PUSH
12262: LD_INT 2
12264: EQUAL
12265: AND
12266: IFFALSE 12326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12268: LD_INT 22
12270: PUSH
12271: LD_VAR 0 16
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 35
12282: PUSH
12283: LD_INT 49
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 91
12292: PUSH
12293: LD_VAR 0 1
12297: PUSH
12298: LD_INT 10
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: PPUSH
12311: CALL_OW 69
12315: NOT
12316: IFFALSE 12326
// weapon := ru_time_lapser ;
12318: LD_ADDR_VAR 0 18
12322: PUSH
12323: LD_INT 49
12325: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12326: LD_VAR 0 12
12330: PUSH
12331: LD_INT 1
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: IN
12341: PUSH
12342: LD_INT 11
12344: PUSH
12345: LD_VAR 0 5
12349: IN
12350: PUSH
12351: LD_INT 30
12353: PUSH
12354: LD_VAR 0 5
12358: IN
12359: OR
12360: AND
12361: PUSH
12362: LD_INT 6
12364: PPUSH
12365: LD_VAR 0 16
12369: PPUSH
12370: CALL_OW 321
12374: PUSH
12375: LD_INT 2
12377: EQUAL
12378: AND
12379: IFFALSE 12544
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12381: LD_INT 22
12383: PUSH
12384: LD_VAR 0 16
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 2
12395: PUSH
12396: LD_INT 35
12398: PUSH
12399: LD_INT 11
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 35
12408: PUSH
12409: LD_INT 30
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 91
12423: PUSH
12424: LD_VAR 0 1
12428: PUSH
12429: LD_INT 18
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: PPUSH
12442: CALL_OW 69
12446: NOT
12447: PUSH
12448: LD_INT 22
12450: PUSH
12451: LD_VAR 0 16
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 2
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 32
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 30
12475: PUSH
12476: LD_INT 33
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 91
12490: PUSH
12491: LD_VAR 0 1
12495: PUSH
12496: LD_INT 12
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: PUSH
12517: LD_INT 2
12519: GREATER
12520: AND
12521: IFFALSE 12544
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12523: LD_ADDR_VAR 0 18
12527: PUSH
12528: LD_INT 11
12530: PUSH
12531: LD_INT 30
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_VAR 0 12
12542: ARRAY
12543: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12544: LD_VAR 0 18
12548: NOT
12549: PUSH
12550: LD_INT 40
12552: PPUSH
12553: LD_VAR 0 16
12557: PPUSH
12558: CALL_OW 321
12562: PUSH
12563: LD_INT 2
12565: EQUAL
12566: AND
12567: PUSH
12568: LD_INT 7
12570: PUSH
12571: LD_VAR 0 5
12575: IN
12576: PUSH
12577: LD_INT 28
12579: PUSH
12580: LD_VAR 0 5
12584: IN
12585: OR
12586: PUSH
12587: LD_INT 45
12589: PUSH
12590: LD_VAR 0 5
12594: IN
12595: OR
12596: AND
12597: IFFALSE 12851
// begin hex := GetHexInfo ( x , y ) ;
12599: LD_ADDR_VAR 0 4
12603: PUSH
12604: LD_VAR 0 10
12608: PPUSH
12609: LD_VAR 0 11
12613: PPUSH
12614: CALL_OW 546
12618: ST_TO_ADDR
// if hex [ 1 ] then
12619: LD_VAR 0 4
12623: PUSH
12624: LD_INT 1
12626: ARRAY
12627: IFFALSE 12631
// exit ;
12629: GO 13034
// height := hex [ 2 ] ;
12631: LD_ADDR_VAR 0 15
12635: PUSH
12636: LD_VAR 0 4
12640: PUSH
12641: LD_INT 2
12643: ARRAY
12644: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12645: LD_ADDR_VAR 0 14
12649: PUSH
12650: LD_INT 0
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 5
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: ST_TO_ADDR
// for i in tmp do
12668: LD_ADDR_VAR 0 8
12672: PUSH
12673: LD_VAR 0 14
12677: PUSH
12678: FOR_IN
12679: IFFALSE 12849
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12681: LD_ADDR_VAR 0 9
12685: PUSH
12686: LD_VAR 0 10
12690: PPUSH
12691: LD_VAR 0 8
12695: PPUSH
12696: LD_INT 5
12698: PPUSH
12699: CALL_OW 272
12703: PUSH
12704: LD_VAR 0 11
12708: PPUSH
12709: LD_VAR 0 8
12713: PPUSH
12714: LD_INT 5
12716: PPUSH
12717: CALL_OW 273
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12726: LD_VAR 0 9
12730: PUSH
12731: LD_INT 1
12733: ARRAY
12734: PPUSH
12735: LD_VAR 0 9
12739: PUSH
12740: LD_INT 2
12742: ARRAY
12743: PPUSH
12744: CALL_OW 488
12748: IFFALSE 12847
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12750: LD_ADDR_VAR 0 4
12754: PUSH
12755: LD_VAR 0 9
12759: PUSH
12760: LD_INT 1
12762: ARRAY
12763: PPUSH
12764: LD_VAR 0 9
12768: PUSH
12769: LD_INT 2
12771: ARRAY
12772: PPUSH
12773: CALL_OW 546
12777: ST_TO_ADDR
// if hex [ 1 ] then
12778: LD_VAR 0 4
12782: PUSH
12783: LD_INT 1
12785: ARRAY
12786: IFFALSE 12790
// continue ;
12788: GO 12678
// h := hex [ 2 ] ;
12790: LD_ADDR_VAR 0 13
12794: PUSH
12795: LD_VAR 0 4
12799: PUSH
12800: LD_INT 2
12802: ARRAY
12803: ST_TO_ADDR
// if h + 7 < height then
12804: LD_VAR 0 13
12808: PUSH
12809: LD_INT 7
12811: PLUS
12812: PUSH
12813: LD_VAR 0 15
12817: LESS
12818: IFFALSE 12847
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12820: LD_ADDR_VAR 0 18
12824: PUSH
12825: LD_INT 7
12827: PUSH
12828: LD_INT 28
12830: PUSH
12831: LD_INT 45
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: PUSH
12839: LD_VAR 0 12
12843: ARRAY
12844: ST_TO_ADDR
// break ;
12845: GO 12849
// end ; end ; end ;
12847: GO 12678
12849: POP
12850: POP
// end ; if not weapon then
12851: LD_VAR 0 18
12855: NOT
12856: IFFALSE 12916
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12858: LD_ADDR_VAR 0 5
12862: PUSH
12863: LD_VAR 0 5
12867: PUSH
12868: LD_INT 11
12870: PUSH
12871: LD_INT 30
12873: PUSH
12874: LD_INT 49
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: DIFF
12882: ST_TO_ADDR
// if not list then
12883: LD_VAR 0 5
12887: NOT
12888: IFFALSE 12892
// exit ;
12890: GO 13034
// weapon := list [ rand ( 1 , list ) ] ;
12892: LD_ADDR_VAR 0 18
12896: PUSH
12897: LD_VAR 0 5
12901: PUSH
12902: LD_INT 1
12904: PPUSH
12905: LD_VAR 0 5
12909: PPUSH
12910: CALL_OW 12
12914: ARRAY
12915: ST_TO_ADDR
// end ; if weapon then
12916: LD_VAR 0 18
12920: IFFALSE 13034
// begin tmp := CostOfWeapon ( weapon ) ;
12922: LD_ADDR_VAR 0 14
12926: PUSH
12927: LD_VAR 0 18
12931: PPUSH
12932: CALL_OW 451
12936: ST_TO_ADDR
// j := GetBase ( tower ) ;
12937: LD_ADDR_VAR 0 9
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 274
12951: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12952: LD_VAR 0 9
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: CALL_OW 275
12964: PUSH
12965: LD_VAR 0 14
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: GREATEREQUAL
12974: PUSH
12975: LD_VAR 0 9
12979: PPUSH
12980: LD_INT 2
12982: PPUSH
12983: CALL_OW 275
12987: PUSH
12988: LD_VAR 0 14
12992: PUSH
12993: LD_INT 2
12995: ARRAY
12996: GREATEREQUAL
12997: AND
12998: PUSH
12999: LD_VAR 0 9
13003: PPUSH
13004: LD_INT 3
13006: PPUSH
13007: CALL_OW 275
13011: PUSH
13012: LD_VAR 0 14
13016: PUSH
13017: LD_INT 3
13019: ARRAY
13020: GREATEREQUAL
13021: AND
13022: IFFALSE 13034
// result := weapon ;
13024: LD_ADDR_VAR 0 3
13028: PUSH
13029: LD_VAR 0 18
13033: ST_TO_ADDR
// end ; end ;
13034: LD_VAR 0 3
13038: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13039: LD_INT 0
13041: PPUSH
13042: PPUSH
// result := true ;
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: LD_INT 1
13050: ST_TO_ADDR
// if array1 = array2 then
13051: LD_VAR 0 1
13055: PUSH
13056: LD_VAR 0 2
13060: EQUAL
13061: IFFALSE 13121
// begin for i = 1 to array1 do
13063: LD_ADDR_VAR 0 4
13067: PUSH
13068: DOUBLE
13069: LD_INT 1
13071: DEC
13072: ST_TO_ADDR
13073: LD_VAR 0 1
13077: PUSH
13078: FOR_TO
13079: IFFALSE 13117
// if array1 [ i ] <> array2 [ i ] then
13081: LD_VAR 0 1
13085: PUSH
13086: LD_VAR 0 4
13090: ARRAY
13091: PUSH
13092: LD_VAR 0 2
13096: PUSH
13097: LD_VAR 0 4
13101: ARRAY
13102: NONEQUAL
13103: IFFALSE 13115
// begin result := false ;
13105: LD_ADDR_VAR 0 3
13109: PUSH
13110: LD_INT 0
13112: ST_TO_ADDR
// break ;
13113: GO 13117
// end ;
13115: GO 13078
13117: POP
13118: POP
// end else
13119: GO 13129
// result := false ;
13121: LD_ADDR_VAR 0 3
13125: PUSH
13126: LD_INT 0
13128: ST_TO_ADDR
// end ;
13129: LD_VAR 0 3
13133: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13134: LD_INT 0
13136: PPUSH
13137: PPUSH
// if not array1 or not array2 then
13138: LD_VAR 0 1
13142: NOT
13143: PUSH
13144: LD_VAR 0 2
13148: NOT
13149: OR
13150: IFFALSE 13154
// exit ;
13152: GO 13218
// result := true ;
13154: LD_ADDR_VAR 0 3
13158: PUSH
13159: LD_INT 1
13161: ST_TO_ADDR
// for i = 1 to array1 do
13162: LD_ADDR_VAR 0 4
13166: PUSH
13167: DOUBLE
13168: LD_INT 1
13170: DEC
13171: ST_TO_ADDR
13172: LD_VAR 0 1
13176: PUSH
13177: FOR_TO
13178: IFFALSE 13216
// if array1 [ i ] <> array2 [ i ] then
13180: LD_VAR 0 1
13184: PUSH
13185: LD_VAR 0 4
13189: ARRAY
13190: PUSH
13191: LD_VAR 0 2
13195: PUSH
13196: LD_VAR 0 4
13200: ARRAY
13201: NONEQUAL
13202: IFFALSE 13214
// begin result := false ;
13204: LD_ADDR_VAR 0 3
13208: PUSH
13209: LD_INT 0
13211: ST_TO_ADDR
// break ;
13212: GO 13216
// end ;
13214: GO 13177
13216: POP
13217: POP
// end ;
13218: LD_VAR 0 3
13222: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
13227: PPUSH
// pom := GetBase ( fac ) ;
13228: LD_ADDR_VAR 0 5
13232: PUSH
13233: LD_VAR 0 1
13237: PPUSH
13238: CALL_OW 274
13242: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13243: LD_ADDR_VAR 0 4
13247: PUSH
13248: LD_VAR 0 2
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: LD_VAR 0 2
13261: PUSH
13262: LD_INT 2
13264: ARRAY
13265: PPUSH
13266: LD_VAR 0 2
13270: PUSH
13271: LD_INT 3
13273: ARRAY
13274: PPUSH
13275: LD_VAR 0 2
13279: PUSH
13280: LD_INT 4
13282: ARRAY
13283: PPUSH
13284: CALL_OW 449
13288: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_VAR 0 5
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: CALL_OW 275
13306: PUSH
13307: LD_VAR 0 4
13311: PUSH
13312: LD_INT 1
13314: ARRAY
13315: GREATEREQUAL
13316: PUSH
13317: LD_VAR 0 5
13321: PPUSH
13322: LD_INT 2
13324: PPUSH
13325: CALL_OW 275
13329: PUSH
13330: LD_VAR 0 4
13334: PUSH
13335: LD_INT 2
13337: ARRAY
13338: GREATEREQUAL
13339: AND
13340: PUSH
13341: LD_VAR 0 5
13345: PPUSH
13346: LD_INT 3
13348: PPUSH
13349: CALL_OW 275
13353: PUSH
13354: LD_VAR 0 4
13358: PUSH
13359: LD_INT 3
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: ST_TO_ADDR
// end ;
13365: LD_VAR 0 3
13369: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13370: LD_INT 0
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
// pom := GetBase ( building ) ;
13376: LD_ADDR_VAR 0 3
13380: PUSH
13381: LD_VAR 0 1
13385: PPUSH
13386: CALL_OW 274
13390: ST_TO_ADDR
// if not pom then
13391: LD_VAR 0 3
13395: NOT
13396: IFFALSE 13400
// exit ;
13398: GO 13570
// btype := GetBType ( building ) ;
13400: LD_ADDR_VAR 0 5
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 266
13414: ST_TO_ADDR
// if btype = b_armoury then
13415: LD_VAR 0 5
13419: PUSH
13420: LD_INT 4
13422: EQUAL
13423: IFFALSE 13433
// btype := b_barracks ;
13425: LD_ADDR_VAR 0 5
13429: PUSH
13430: LD_INT 5
13432: ST_TO_ADDR
// if btype = b_depot then
13433: LD_VAR 0 5
13437: PUSH
13438: LD_INT 0
13440: EQUAL
13441: IFFALSE 13451
// btype := b_warehouse ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: LD_INT 1
13450: ST_TO_ADDR
// if btype = b_workshop then
13451: LD_VAR 0 5
13455: PUSH
13456: LD_INT 2
13458: EQUAL
13459: IFFALSE 13469
// btype := b_factory ;
13461: LD_ADDR_VAR 0 5
13465: PUSH
13466: LD_INT 3
13468: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13469: LD_ADDR_VAR 0 4
13473: PUSH
13474: LD_VAR 0 5
13478: PPUSH
13479: LD_VAR 0 1
13483: PPUSH
13484: CALL_OW 248
13488: PPUSH
13489: CALL_OW 450
13493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13494: LD_ADDR_VAR 0 2
13498: PUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 275
13511: PUSH
13512: LD_VAR 0 4
13516: PUSH
13517: LD_INT 1
13519: ARRAY
13520: GREATEREQUAL
13521: PUSH
13522: LD_VAR 0 3
13526: PPUSH
13527: LD_INT 2
13529: PPUSH
13530: CALL_OW 275
13534: PUSH
13535: LD_VAR 0 4
13539: PUSH
13540: LD_INT 2
13542: ARRAY
13543: GREATEREQUAL
13544: AND
13545: PUSH
13546: LD_VAR 0 3
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: CALL_OW 275
13558: PUSH
13559: LD_VAR 0 4
13563: PUSH
13564: LD_INT 3
13566: ARRAY
13567: GREATEREQUAL
13568: AND
13569: ST_TO_ADDR
// end ;
13570: LD_VAR 0 2
13574: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13575: LD_INT 0
13577: PPUSH
13578: PPUSH
13579: PPUSH
// pom := GetBase ( building ) ;
13580: LD_ADDR_VAR 0 4
13584: PUSH
13585: LD_VAR 0 1
13589: PPUSH
13590: CALL_OW 274
13594: ST_TO_ADDR
// if not pom then
13595: LD_VAR 0 4
13599: NOT
13600: IFFALSE 13604
// exit ;
13602: GO 13705
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13604: LD_ADDR_VAR 0 5
13608: PUSH
13609: LD_VAR 0 2
13613: PPUSH
13614: LD_VAR 0 1
13618: PPUSH
13619: CALL_OW 248
13623: PPUSH
13624: CALL_OW 450
13628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13629: LD_ADDR_VAR 0 3
13633: PUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: LD_INT 1
13641: PPUSH
13642: CALL_OW 275
13646: PUSH
13647: LD_VAR 0 5
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: GREATEREQUAL
13656: PUSH
13657: LD_VAR 0 4
13661: PPUSH
13662: LD_INT 2
13664: PPUSH
13665: CALL_OW 275
13669: PUSH
13670: LD_VAR 0 5
13674: PUSH
13675: LD_INT 2
13677: ARRAY
13678: GREATEREQUAL
13679: AND
13680: PUSH
13681: LD_VAR 0 4
13685: PPUSH
13686: LD_INT 3
13688: PPUSH
13689: CALL_OW 275
13693: PUSH
13694: LD_VAR 0 5
13698: PUSH
13699: LD_INT 3
13701: ARRAY
13702: GREATEREQUAL
13703: AND
13704: ST_TO_ADDR
// end ;
13705: LD_VAR 0 3
13709: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13710: LD_INT 0
13712: PPUSH
13713: PPUSH
13714: PPUSH
13715: PPUSH
13716: PPUSH
13717: PPUSH
13718: PPUSH
13719: PPUSH
13720: PPUSH
13721: PPUSH
13722: PPUSH
// result := false ;
13723: LD_ADDR_VAR 0 8
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13731: LD_VAR 0 5
13735: NOT
13736: PUSH
13737: LD_VAR 0 1
13741: NOT
13742: OR
13743: PUSH
13744: LD_VAR 0 2
13748: NOT
13749: OR
13750: PUSH
13751: LD_VAR 0 3
13755: NOT
13756: OR
13757: IFFALSE 13761
// exit ;
13759: GO 14575
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13761: LD_ADDR_VAR 0 14
13765: PUSH
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_VAR 0 2
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: LD_VAR 0 4
13785: PPUSH
13786: LD_VAR 0 5
13790: PUSH
13791: LD_INT 1
13793: ARRAY
13794: PPUSH
13795: CALL_OW 248
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: CALL 15828 0 6
13807: ST_TO_ADDR
// if not hexes then
13808: LD_VAR 0 14
13812: NOT
13813: IFFALSE 13817
// exit ;
13815: GO 14575
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13817: LD_ADDR_VAR 0 17
13821: PUSH
13822: LD_VAR 0 5
13826: PPUSH
13827: LD_INT 22
13829: PUSH
13830: LD_VAR 0 13
13834: PPUSH
13835: CALL_OW 255
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 2
13846: PUSH
13847: LD_INT 30
13849: PUSH
13850: LD_INT 0
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 30
13859: PUSH
13860: LD_INT 1
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PPUSH
13876: CALL_OW 72
13880: ST_TO_ADDR
// for i = 1 to hexes do
13881: LD_ADDR_VAR 0 9
13885: PUSH
13886: DOUBLE
13887: LD_INT 1
13889: DEC
13890: ST_TO_ADDR
13891: LD_VAR 0 14
13895: PUSH
13896: FOR_TO
13897: IFFALSE 14573
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13899: LD_ADDR_VAR 0 13
13903: PUSH
13904: LD_VAR 0 14
13908: PUSH
13909: LD_VAR 0 9
13913: ARRAY
13914: PUSH
13915: LD_INT 1
13917: ARRAY
13918: PPUSH
13919: LD_VAR 0 14
13923: PUSH
13924: LD_VAR 0 9
13928: ARRAY
13929: PUSH
13930: LD_INT 2
13932: ARRAY
13933: PPUSH
13934: CALL_OW 428
13938: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13939: LD_VAR 0 14
13943: PUSH
13944: LD_VAR 0 9
13948: ARRAY
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: PPUSH
13954: LD_VAR 0 14
13958: PUSH
13959: LD_VAR 0 9
13963: ARRAY
13964: PUSH
13965: LD_INT 2
13967: ARRAY
13968: PPUSH
13969: CALL_OW 351
13973: PUSH
13974: LD_VAR 0 14
13978: PUSH
13979: LD_VAR 0 9
13983: ARRAY
13984: PUSH
13985: LD_INT 1
13987: ARRAY
13988: PPUSH
13989: LD_VAR 0 14
13993: PUSH
13994: LD_VAR 0 9
13998: ARRAY
13999: PUSH
14000: LD_INT 2
14002: ARRAY
14003: PPUSH
14004: CALL_OW 488
14008: NOT
14009: OR
14010: PUSH
14011: LD_VAR 0 13
14015: PPUSH
14016: CALL_OW 247
14020: PUSH
14021: LD_INT 3
14023: EQUAL
14024: OR
14025: IFFALSE 14031
// exit ;
14027: POP
14028: POP
14029: GO 14575
// if not tmp then
14031: LD_VAR 0 13
14035: NOT
14036: IFFALSE 14040
// continue ;
14038: GO 13896
// result := true ;
14040: LD_ADDR_VAR 0 8
14044: PUSH
14045: LD_INT 1
14047: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14048: LD_VAR 0 6
14052: PUSH
14053: LD_VAR 0 13
14057: PPUSH
14058: CALL_OW 247
14062: PUSH
14063: LD_INT 2
14065: EQUAL
14066: AND
14067: PUSH
14068: LD_VAR 0 13
14072: PPUSH
14073: CALL_OW 263
14077: PUSH
14078: LD_INT 1
14080: EQUAL
14081: AND
14082: IFFALSE 14246
// begin if IsDrivenBy ( tmp ) then
14084: LD_VAR 0 13
14088: PPUSH
14089: CALL_OW 311
14093: IFFALSE 14097
// continue ;
14095: GO 13896
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14097: LD_VAR 0 6
14101: PPUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 60
14107: PUSH
14108: EMPTY
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 3
14117: PUSH
14118: LD_INT 55
14120: PUSH
14121: EMPTY
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 72
14136: IFFALSE 14244
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14138: LD_ADDR_VAR 0 18
14142: PUSH
14143: LD_VAR 0 6
14147: PPUSH
14148: LD_INT 3
14150: PUSH
14151: LD_INT 60
14153: PUSH
14154: EMPTY
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 3
14163: PUSH
14164: LD_INT 55
14166: PUSH
14167: EMPTY
14168: LIST
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 72
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: ST_TO_ADDR
// if IsInUnit ( driver ) then
14187: LD_VAR 0 18
14191: PPUSH
14192: CALL_OW 310
14196: IFFALSE 14207
// ComExit ( driver ) ;
14198: LD_VAR 0 18
14202: PPUSH
14203: CALL 39629 0 1
// AddComEnterUnit ( driver , tmp ) ;
14207: LD_VAR 0 18
14211: PPUSH
14212: LD_VAR 0 13
14216: PPUSH
14217: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14221: LD_VAR 0 18
14225: PPUSH
14226: LD_VAR 0 7
14230: PPUSH
14231: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14235: LD_VAR 0 18
14239: PPUSH
14240: CALL_OW 181
// end ; continue ;
14244: GO 13896
// end ; if not cleaners or not tmp in cleaners then
14246: LD_VAR 0 6
14250: NOT
14251: PUSH
14252: LD_VAR 0 13
14256: PUSH
14257: LD_VAR 0 6
14261: IN
14262: NOT
14263: OR
14264: IFFALSE 14571
// begin if dep then
14266: LD_VAR 0 17
14270: IFFALSE 14406
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14272: LD_ADDR_VAR 0 16
14276: PUSH
14277: LD_VAR 0 17
14281: PUSH
14282: LD_INT 1
14284: ARRAY
14285: PPUSH
14286: CALL_OW 250
14290: PPUSH
14291: LD_VAR 0 17
14295: PUSH
14296: LD_INT 1
14298: ARRAY
14299: PPUSH
14300: CALL_OW 254
14304: PPUSH
14305: LD_INT 5
14307: PPUSH
14308: CALL_OW 272
14312: PUSH
14313: LD_VAR 0 17
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: PPUSH
14322: CALL_OW 251
14326: PPUSH
14327: LD_VAR 0 17
14331: PUSH
14332: LD_INT 1
14334: ARRAY
14335: PPUSH
14336: CALL_OW 254
14340: PPUSH
14341: LD_INT 5
14343: PPUSH
14344: CALL_OW 273
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14353: LD_VAR 0 16
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PPUSH
14362: LD_VAR 0 16
14366: PUSH
14367: LD_INT 2
14369: ARRAY
14370: PPUSH
14371: CALL_OW 488
14375: IFFALSE 14406
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14377: LD_VAR 0 13
14381: PPUSH
14382: LD_VAR 0 16
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: PPUSH
14391: LD_VAR 0 16
14395: PUSH
14396: LD_INT 2
14398: ARRAY
14399: PPUSH
14400: CALL_OW 111
// continue ;
14404: GO 13896
// end ; end ; r := GetDir ( tmp ) ;
14406: LD_ADDR_VAR 0 15
14410: PUSH
14411: LD_VAR 0 13
14415: PPUSH
14416: CALL_OW 254
14420: ST_TO_ADDR
// if r = 5 then
14421: LD_VAR 0 15
14425: PUSH
14426: LD_INT 5
14428: EQUAL
14429: IFFALSE 14439
// r := 0 ;
14431: LD_ADDR_VAR 0 15
14435: PUSH
14436: LD_INT 0
14438: ST_TO_ADDR
// for j = r to 5 do
14439: LD_ADDR_VAR 0 10
14443: PUSH
14444: DOUBLE
14445: LD_VAR 0 15
14449: DEC
14450: ST_TO_ADDR
14451: LD_INT 5
14453: PUSH
14454: FOR_TO
14455: IFFALSE 14569
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14457: LD_ADDR_VAR 0 11
14461: PUSH
14462: LD_VAR 0 13
14466: PPUSH
14467: CALL_OW 250
14471: PPUSH
14472: LD_VAR 0 10
14476: PPUSH
14477: LD_INT 2
14479: PPUSH
14480: CALL_OW 272
14484: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14485: LD_ADDR_VAR 0 12
14489: PUSH
14490: LD_VAR 0 13
14494: PPUSH
14495: CALL_OW 251
14499: PPUSH
14500: LD_VAR 0 10
14504: PPUSH
14505: LD_INT 2
14507: PPUSH
14508: CALL_OW 273
14512: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14513: LD_VAR 0 11
14517: PPUSH
14518: LD_VAR 0 12
14522: PPUSH
14523: CALL_OW 488
14527: PUSH
14528: LD_VAR 0 11
14532: PPUSH
14533: LD_VAR 0 12
14537: PPUSH
14538: CALL_OW 428
14542: NOT
14543: AND
14544: IFFALSE 14567
// begin ComMoveXY ( tmp , _x , _y ) ;
14546: LD_VAR 0 13
14550: PPUSH
14551: LD_VAR 0 11
14555: PPUSH
14556: LD_VAR 0 12
14560: PPUSH
14561: CALL_OW 111
// break ;
14565: GO 14569
// end ; end ;
14567: GO 14454
14569: POP
14570: POP
// end ; end ;
14571: GO 13896
14573: POP
14574: POP
// end ;
14575: LD_VAR 0 8
14579: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14580: LD_INT 0
14582: PPUSH
// result := true ;
14583: LD_ADDR_VAR 0 3
14587: PUSH
14588: LD_INT 1
14590: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14591: LD_VAR 0 2
14595: PUSH
14596: LD_INT 24
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14610
14602: LD_INT 33
14604: DOUBLE
14605: EQUAL
14606: IFTRUE 14610
14608: GO 14635
14610: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_INT 32
14618: PPUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: CALL_OW 321
14628: PUSH
14629: LD_INT 2
14631: EQUAL
14632: ST_TO_ADDR
14633: GO 14951
14635: LD_INT 20
14637: DOUBLE
14638: EQUAL
14639: IFTRUE 14643
14641: GO 14668
14643: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_INT 6
14651: PPUSH
14652: LD_VAR 0 1
14656: PPUSH
14657: CALL_OW 321
14661: PUSH
14662: LD_INT 2
14664: EQUAL
14665: ST_TO_ADDR
14666: GO 14951
14668: LD_INT 22
14670: DOUBLE
14671: EQUAL
14672: IFTRUE 14682
14674: LD_INT 36
14676: DOUBLE
14677: EQUAL
14678: IFTRUE 14682
14680: GO 14707
14682: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14683: LD_ADDR_VAR 0 3
14687: PUSH
14688: LD_INT 15
14690: PPUSH
14691: LD_VAR 0 1
14695: PPUSH
14696: CALL_OW 321
14700: PUSH
14701: LD_INT 2
14703: EQUAL
14704: ST_TO_ADDR
14705: GO 14951
14707: LD_INT 30
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14740
14715: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_INT 20
14723: PPUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 321
14733: PUSH
14734: LD_INT 2
14736: EQUAL
14737: ST_TO_ADDR
14738: GO 14951
14740: LD_INT 28
14742: DOUBLE
14743: EQUAL
14744: IFTRUE 14754
14746: LD_INT 21
14748: DOUBLE
14749: EQUAL
14750: IFTRUE 14754
14752: GO 14779
14754: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: LD_INT 21
14762: PPUSH
14763: LD_VAR 0 1
14767: PPUSH
14768: CALL_OW 321
14772: PUSH
14773: LD_INT 2
14775: EQUAL
14776: ST_TO_ADDR
14777: GO 14951
14779: LD_INT 16
14781: DOUBLE
14782: EQUAL
14783: IFTRUE 14787
14785: GO 14812
14787: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14788: LD_ADDR_VAR 0 3
14792: PUSH
14793: LD_INT 84
14795: PPUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 321
14805: PUSH
14806: LD_INT 2
14808: EQUAL
14809: ST_TO_ADDR
14810: GO 14951
14812: LD_INT 19
14814: DOUBLE
14815: EQUAL
14816: IFTRUE 14826
14818: LD_INT 23
14820: DOUBLE
14821: EQUAL
14822: IFTRUE 14826
14824: GO 14851
14826: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14827: LD_ADDR_VAR 0 3
14831: PUSH
14832: LD_INT 83
14834: PPUSH
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 321
14844: PUSH
14845: LD_INT 2
14847: EQUAL
14848: ST_TO_ADDR
14849: GO 14951
14851: LD_INT 17
14853: DOUBLE
14854: EQUAL
14855: IFTRUE 14859
14857: GO 14884
14859: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_INT 39
14867: PPUSH
14868: LD_VAR 0 1
14872: PPUSH
14873: CALL_OW 321
14877: PUSH
14878: LD_INT 2
14880: EQUAL
14881: ST_TO_ADDR
14882: GO 14951
14884: LD_INT 18
14886: DOUBLE
14887: EQUAL
14888: IFTRUE 14892
14890: GO 14917
14892: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: LD_INT 40
14900: PPUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 321
14910: PUSH
14911: LD_INT 2
14913: EQUAL
14914: ST_TO_ADDR
14915: GO 14951
14917: LD_INT 27
14919: DOUBLE
14920: EQUAL
14921: IFTRUE 14925
14923: GO 14950
14925: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14926: LD_ADDR_VAR 0 3
14930: PUSH
14931: LD_INT 35
14933: PPUSH
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 321
14943: PUSH
14944: LD_INT 2
14946: EQUAL
14947: ST_TO_ADDR
14948: GO 14951
14950: POP
// end ;
14951: LD_VAR 0 3
14955: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14956: LD_INT 0
14958: PPUSH
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
// result := false ;
14969: LD_ADDR_VAR 0 6
14973: PUSH
14974: LD_INT 0
14976: ST_TO_ADDR
// if btype = b_depot then
14977: LD_VAR 0 2
14981: PUSH
14982: LD_INT 0
14984: EQUAL
14985: IFFALSE 14997
// begin result := true ;
14987: LD_ADDR_VAR 0 6
14991: PUSH
14992: LD_INT 1
14994: ST_TO_ADDR
// exit ;
14995: GO 15823
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14997: LD_VAR 0 1
15001: NOT
15002: PUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 266
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: IN
15023: NOT
15024: OR
15025: PUSH
15026: LD_VAR 0 2
15030: NOT
15031: OR
15032: PUSH
15033: LD_VAR 0 5
15037: PUSH
15038: LD_INT 0
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: LD_INT 2
15046: PUSH
15047: LD_INT 3
15049: PUSH
15050: LD_INT 4
15052: PUSH
15053: LD_INT 5
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: IN
15064: NOT
15065: OR
15066: PUSH
15067: LD_VAR 0 3
15071: PPUSH
15072: LD_VAR 0 4
15076: PPUSH
15077: CALL_OW 488
15081: NOT
15082: OR
15083: IFFALSE 15087
// exit ;
15085: GO 15823
// side := GetSide ( depot ) ;
15087: LD_ADDR_VAR 0 9
15091: PUSH
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL_OW 255
15101: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15102: LD_VAR 0 9
15106: PPUSH
15107: LD_VAR 0 2
15111: PPUSH
15112: CALL 14580 0 2
15116: NOT
15117: IFFALSE 15121
// exit ;
15119: GO 15823
// pom := GetBase ( depot ) ;
15121: LD_ADDR_VAR 0 10
15125: PUSH
15126: LD_VAR 0 1
15130: PPUSH
15131: CALL_OW 274
15135: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15136: LD_ADDR_VAR 0 11
15140: PUSH
15141: LD_VAR 0 2
15145: PPUSH
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 248
15155: PPUSH
15156: CALL_OW 450
15160: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15161: LD_VAR 0 10
15165: PPUSH
15166: LD_INT 1
15168: PPUSH
15169: CALL_OW 275
15173: PUSH
15174: LD_VAR 0 11
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: GREATEREQUAL
15183: PUSH
15184: LD_VAR 0 10
15188: PPUSH
15189: LD_INT 2
15191: PPUSH
15192: CALL_OW 275
15196: PUSH
15197: LD_VAR 0 11
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: GREATEREQUAL
15206: AND
15207: PUSH
15208: LD_VAR 0 10
15212: PPUSH
15213: LD_INT 3
15215: PPUSH
15216: CALL_OW 275
15220: PUSH
15221: LD_VAR 0 11
15225: PUSH
15226: LD_INT 3
15228: ARRAY
15229: GREATEREQUAL
15230: AND
15231: NOT
15232: IFFALSE 15236
// exit ;
15234: GO 15823
// if GetBType ( depot ) = b_depot then
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 266
15245: PUSH
15246: LD_INT 0
15248: EQUAL
15249: IFFALSE 15261
// dist := 28 else
15251: LD_ADDR_VAR 0 14
15255: PUSH
15256: LD_INT 28
15258: ST_TO_ADDR
15259: GO 15269
// dist := 36 ;
15261: LD_ADDR_VAR 0 14
15265: PUSH
15266: LD_INT 36
15268: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15269: LD_VAR 0 1
15273: PPUSH
15274: LD_VAR 0 3
15278: PPUSH
15279: LD_VAR 0 4
15283: PPUSH
15284: CALL_OW 297
15288: PUSH
15289: LD_VAR 0 14
15293: GREATER
15294: IFFALSE 15298
// exit ;
15296: GO 15823
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15298: LD_ADDR_VAR 0 12
15302: PUSH
15303: LD_VAR 0 2
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_VAR 0 4
15317: PPUSH
15318: LD_VAR 0 5
15322: PPUSH
15323: LD_VAR 0 1
15327: PPUSH
15328: CALL_OW 248
15332: PPUSH
15333: LD_INT 0
15335: PPUSH
15336: CALL 15828 0 6
15340: ST_TO_ADDR
// if not hexes then
15341: LD_VAR 0 12
15345: NOT
15346: IFFALSE 15350
// exit ;
15348: GO 15823
// hex := GetHexInfo ( x , y ) ;
15350: LD_ADDR_VAR 0 15
15354: PUSH
15355: LD_VAR 0 3
15359: PPUSH
15360: LD_VAR 0 4
15364: PPUSH
15365: CALL_OW 546
15369: ST_TO_ADDR
// if hex [ 1 ] then
15370: LD_VAR 0 15
15374: PUSH
15375: LD_INT 1
15377: ARRAY
15378: IFFALSE 15382
// exit ;
15380: GO 15823
// height := hex [ 2 ] ;
15382: LD_ADDR_VAR 0 13
15386: PUSH
15387: LD_VAR 0 15
15391: PUSH
15392: LD_INT 2
15394: ARRAY
15395: ST_TO_ADDR
// for i = 1 to hexes do
15396: LD_ADDR_VAR 0 7
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_VAR 0 12
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15742
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15414: LD_VAR 0 12
15418: PUSH
15419: LD_VAR 0 7
15423: ARRAY
15424: PUSH
15425: LD_INT 1
15427: ARRAY
15428: PPUSH
15429: LD_VAR 0 12
15433: PUSH
15434: LD_VAR 0 7
15438: ARRAY
15439: PUSH
15440: LD_INT 2
15442: ARRAY
15443: PPUSH
15444: CALL_OW 488
15448: NOT
15449: PUSH
15450: LD_VAR 0 12
15454: PUSH
15455: LD_VAR 0 7
15459: ARRAY
15460: PUSH
15461: LD_INT 1
15463: ARRAY
15464: PPUSH
15465: LD_VAR 0 12
15469: PUSH
15470: LD_VAR 0 7
15474: ARRAY
15475: PUSH
15476: LD_INT 2
15478: ARRAY
15479: PPUSH
15480: CALL_OW 428
15484: PUSH
15485: LD_INT 0
15487: GREATER
15488: OR
15489: PUSH
15490: LD_VAR 0 12
15494: PUSH
15495: LD_VAR 0 7
15499: ARRAY
15500: PUSH
15501: LD_INT 1
15503: ARRAY
15504: PPUSH
15505: LD_VAR 0 12
15509: PUSH
15510: LD_VAR 0 7
15514: ARRAY
15515: PUSH
15516: LD_INT 2
15518: ARRAY
15519: PPUSH
15520: CALL_OW 351
15524: OR
15525: IFFALSE 15531
// exit ;
15527: POP
15528: POP
15529: GO 15823
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15531: LD_ADDR_VAR 0 8
15535: PUSH
15536: LD_VAR 0 12
15540: PUSH
15541: LD_VAR 0 7
15545: ARRAY
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: LD_VAR 0 12
15555: PUSH
15556: LD_VAR 0 7
15560: ARRAY
15561: PUSH
15562: LD_INT 2
15564: ARRAY
15565: PPUSH
15566: CALL_OW 546
15570: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15571: LD_VAR 0 8
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PUSH
15580: LD_VAR 0 8
15584: PUSH
15585: LD_INT 2
15587: ARRAY
15588: PUSH
15589: LD_VAR 0 13
15593: PUSH
15594: LD_INT 2
15596: PLUS
15597: GREATER
15598: OR
15599: PUSH
15600: LD_VAR 0 8
15604: PUSH
15605: LD_INT 2
15607: ARRAY
15608: PUSH
15609: LD_VAR 0 13
15613: PUSH
15614: LD_INT 2
15616: MINUS
15617: LESS
15618: OR
15619: PUSH
15620: LD_VAR 0 8
15624: PUSH
15625: LD_INT 3
15627: ARRAY
15628: PUSH
15629: LD_INT 0
15631: PUSH
15632: LD_INT 8
15634: PUSH
15635: LD_INT 9
15637: PUSH
15638: LD_INT 10
15640: PUSH
15641: LD_INT 11
15643: PUSH
15644: LD_INT 12
15646: PUSH
15647: LD_INT 13
15649: PUSH
15650: LD_INT 16
15652: PUSH
15653: LD_INT 17
15655: PUSH
15656: LD_INT 18
15658: PUSH
15659: LD_INT 19
15661: PUSH
15662: LD_INT 20
15664: PUSH
15665: LD_INT 21
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: IN
15683: NOT
15684: OR
15685: PUSH
15686: LD_VAR 0 8
15690: PUSH
15691: LD_INT 5
15693: ARRAY
15694: NOT
15695: OR
15696: PUSH
15697: LD_VAR 0 8
15701: PUSH
15702: LD_INT 6
15704: ARRAY
15705: PUSH
15706: LD_INT 1
15708: PUSH
15709: LD_INT 2
15711: PUSH
15712: LD_INT 7
15714: PUSH
15715: LD_INT 9
15717: PUSH
15718: LD_INT 10
15720: PUSH
15721: LD_INT 11
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: IN
15732: NOT
15733: OR
15734: IFFALSE 15740
// exit ;
15736: POP
15737: POP
15738: GO 15823
// end ;
15740: GO 15411
15742: POP
15743: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15744: LD_VAR 0 9
15748: PPUSH
15749: LD_VAR 0 3
15753: PPUSH
15754: LD_VAR 0 4
15758: PPUSH
15759: LD_INT 20
15761: PPUSH
15762: CALL 7746 0 4
15766: PUSH
15767: LD_INT 4
15769: ARRAY
15770: IFFALSE 15774
// exit ;
15772: GO 15823
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15774: LD_VAR 0 2
15778: PUSH
15779: LD_INT 29
15781: PUSH
15782: LD_INT 30
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: IN
15789: PUSH
15790: LD_VAR 0 3
15794: PPUSH
15795: LD_VAR 0 4
15799: PPUSH
15800: LD_VAR 0 9
15804: PPUSH
15805: CALL_OW 440
15809: NOT
15810: AND
15811: IFFALSE 15815
// exit ;
15813: GO 15823
// result := true ;
15815: LD_ADDR_VAR 0 6
15819: PUSH
15820: LD_INT 1
15822: ST_TO_ADDR
// end ;
15823: LD_VAR 0 6
15827: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15828: LD_INT 0
15830: PPUSH
15831: PPUSH
15832: PPUSH
15833: PPUSH
15834: PPUSH
15835: PPUSH
15836: PPUSH
15837: PPUSH
15838: PPUSH
15839: PPUSH
15840: PPUSH
15841: PPUSH
15842: PPUSH
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
15851: PPUSH
15852: PPUSH
15853: PPUSH
15854: PPUSH
15855: PPUSH
15856: PPUSH
15857: PPUSH
15858: PPUSH
15859: PPUSH
15860: PPUSH
15861: PPUSH
15862: PPUSH
15863: PPUSH
15864: PPUSH
15865: PPUSH
15866: PPUSH
15867: PPUSH
15868: PPUSH
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
15879: PPUSH
15880: PPUSH
15881: PPUSH
15882: PPUSH
15883: PPUSH
15884: PPUSH
15885: PPUSH
15886: PPUSH
15887: PPUSH
// result = [ ] ;
15888: LD_ADDR_VAR 0 7
15892: PUSH
15893: EMPTY
15894: ST_TO_ADDR
// temp_list = [ ] ;
15895: LD_ADDR_VAR 0 9
15899: PUSH
15900: EMPTY
15901: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15902: LD_VAR 0 4
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: LD_INT 4
15921: PUSH
15922: LD_INT 5
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: IN
15933: NOT
15934: PUSH
15935: LD_VAR 0 1
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: IN
15950: PUSH
15951: LD_VAR 0 5
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: LD_INT 2
15961: PUSH
15962: LD_INT 3
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: LIST
15969: IN
15970: NOT
15971: AND
15972: OR
15973: IFFALSE 15977
// exit ;
15975: GO 34368
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15977: LD_VAR 0 1
15981: PUSH
15982: LD_INT 6
15984: PUSH
15985: LD_INT 7
15987: PUSH
15988: LD_INT 8
15990: PUSH
15991: LD_INT 13
15993: PUSH
15994: LD_INT 12
15996: PUSH
15997: LD_INT 15
15999: PUSH
16000: LD_INT 11
16002: PUSH
16003: LD_INT 14
16005: PUSH
16006: LD_INT 10
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: IN
16020: IFFALSE 16030
// btype = b_lab ;
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_INT 6
16029: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16030: LD_VAR 0 6
16034: PUSH
16035: LD_INT 0
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: IN
16049: NOT
16050: PUSH
16051: LD_VAR 0 1
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: LD_INT 1
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: LD_INT 3
16067: PUSH
16068: LD_INT 6
16070: PUSH
16071: LD_INT 36
16073: PUSH
16074: LD_INT 4
16076: PUSH
16077: LD_INT 5
16079: PUSH
16080: LD_INT 31
16082: PUSH
16083: LD_INT 32
16085: PUSH
16086: LD_INT 33
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: IN
16102: NOT
16103: PUSH
16104: LD_VAR 0 6
16108: PUSH
16109: LD_INT 1
16111: EQUAL
16112: AND
16113: OR
16114: PUSH
16115: LD_VAR 0 1
16119: PUSH
16120: LD_INT 2
16122: PUSH
16123: LD_INT 3
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: IN
16130: NOT
16131: PUSH
16132: LD_VAR 0 6
16136: PUSH
16137: LD_INT 2
16139: EQUAL
16140: AND
16141: OR
16142: IFFALSE 16152
// mode = 0 ;
16144: LD_ADDR_VAR 0 6
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// case mode of 0 :
16152: LD_VAR 0 6
16156: PUSH
16157: LD_INT 0
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 27618
16165: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16166: LD_ADDR_VAR 0 11
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: LD_INT 1
16186: NEG
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: LD_INT 0
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: LD_INT 1
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 1
16224: NEG
16225: PUSH
16226: LD_INT 0
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 1
16235: NEG
16236: PUSH
16237: LD_INT 1
16239: NEG
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 1
16247: NEG
16248: PUSH
16249: LD_INT 2
16251: NEG
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 0
16259: PUSH
16260: LD_INT 2
16262: NEG
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 1
16270: PUSH
16271: LD_INT 1
16273: NEG
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 1
16301: NEG
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: LD_INT 3
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 0
16322: PUSH
16323: LD_INT 3
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 1
16332: NEG
16333: PUSH
16334: LD_INT 2
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16359: LD_ADDR_VAR 0 12
16363: PUSH
16364: LD_INT 0
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: LD_INT 1
16379: NEG
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: LD_INT 1
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: LD_INT 0
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 1
16428: NEG
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 1
16443: NEG
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 2
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: NEG
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: NEG
16483: PUSH
16484: LD_INT 0
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 2
16493: NEG
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 2
16505: NEG
16506: PUSH
16507: LD_INT 1
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 3
16516: NEG
16517: PUSH
16518: LD_INT 0
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 3
16527: NEG
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16555: LD_ADDR_VAR 0 13
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: LD_INT 1
16575: NEG
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 1
16583: PUSH
16584: LD_INT 0
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 0
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 1
16613: NEG
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 1
16624: NEG
16625: PUSH
16626: LD_INT 1
16628: NEG
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 1
16636: NEG
16637: PUSH
16638: LD_INT 2
16640: NEG
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 2
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 2
16678: NEG
16679: PUSH
16680: LD_INT 1
16682: NEG
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 2
16690: NEG
16691: PUSH
16692: LD_INT 2
16694: NEG
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 2
16702: NEG
16703: PUSH
16704: LD_INT 3
16706: NEG
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 3
16714: NEG
16715: PUSH
16716: LD_INT 2
16718: NEG
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 3
16726: NEG
16727: PUSH
16728: LD_INT 3
16730: NEG
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16754: LD_ADDR_VAR 0 14
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: LD_INT 0
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 0
16771: PUSH
16772: LD_INT 1
16774: NEG
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 1
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 1
16812: NEG
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: NEG
16824: PUSH
16825: LD_INT 1
16827: NEG
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 1
16835: NEG
16836: PUSH
16837: LD_INT 2
16839: NEG
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 0
16847: PUSH
16848: LD_INT 2
16850: NEG
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 1
16889: NEG
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 1
16900: NEG
16901: PUSH
16902: LD_INT 3
16904: NEG
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 0
16912: PUSH
16913: LD_INT 3
16915: NEG
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 2
16926: NEG
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16950: LD_ADDR_VAR 0 15
16954: PUSH
16955: LD_INT 0
16957: PUSH
16958: LD_INT 0
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 0
16967: PUSH
16968: LD_INT 1
16970: NEG
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 1
17008: NEG
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 1
17019: NEG
17020: PUSH
17021: LD_INT 1
17023: NEG
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 1
17031: PUSH
17032: LD_INT 1
17034: NEG
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: LD_INT 1
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 2
17073: NEG
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: NEG
17085: PUSH
17086: LD_INT 1
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: LD_INT 1
17099: NEG
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 3
17107: PUSH
17108: LD_INT 0
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17143: LD_ADDR_VAR 0 16
17147: PUSH
17148: LD_INT 0
17150: PUSH
17151: LD_INT 0
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: LD_INT 1
17163: NEG
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: LD_INT 0
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 1
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 0
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 1
17201: NEG
17202: PUSH
17203: LD_INT 0
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: NEG
17213: PUSH
17214: LD_INT 1
17216: NEG
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: NEG
17225: PUSH
17226: LD_INT 2
17228: NEG
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 2
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: LD_INT 2
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 2
17266: NEG
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: NEG
17279: PUSH
17280: LD_INT 2
17282: NEG
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 3
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 3
17300: PUSH
17301: LD_INT 3
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 2
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17336: LD_ADDR_VAR 0 17
17340: PUSH
17341: LD_INT 0
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: LD_INT 1
17356: NEG
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 0
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 1
17394: NEG
17395: PUSH
17396: LD_INT 0
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 1
17405: NEG
17406: PUSH
17407: LD_INT 1
17409: NEG
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: LD_INT 2
17421: NEG
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 0
17429: PUSH
17430: LD_INT 2
17432: NEG
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 2
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: LD_INT 2
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 1
17501: NEG
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 2
17523: NEG
17524: PUSH
17525: LD_INT 1
17527: NEG
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 2
17535: NEG
17536: PUSH
17537: LD_INT 2
17539: NEG
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17566: LD_ADDR_VAR 0 18
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: LD_INT 1
17586: NEG
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: LD_INT 1
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 1
17624: NEG
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 1
17635: NEG
17636: PUSH
17637: LD_INT 1
17639: NEG
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: LD_INT 2
17651: NEG
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: LD_INT 2
17662: NEG
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 1
17731: NEG
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 2
17742: NEG
17743: PUSH
17744: LD_INT 0
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 2
17753: NEG
17754: PUSH
17755: LD_INT 1
17757: NEG
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 2
17765: NEG
17766: PUSH
17767: LD_INT 2
17769: NEG
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17796: LD_ADDR_VAR 0 19
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 1
17816: NEG
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: NEG
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: PUSH
17867: LD_INT 1
17869: NEG
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 2
17881: NEG
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: LD_INT 2
17892: NEG
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 1
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 0
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: NEG
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: NEG
17973: PUSH
17974: LD_INT 0
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: NEG
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 2
17995: NEG
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18026: LD_ADDR_VAR 0 20
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: NEG
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: LD_INT 1
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: LD_INT 2
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: LD_INT 2
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 2
18202: NEG
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 2
18213: NEG
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 2
18225: NEG
18226: PUSH
18227: LD_INT 2
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18256: LD_ADDR_VAR 0 21
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 1
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 0
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: NEG
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 2
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 2
18432: NEG
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 2
18443: NEG
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: LD_INT 2
18459: NEG
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18486: LD_ADDR_VAR 0 22
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: NEG
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 1
18567: NEG
18568: PUSH
18569: LD_INT 2
18571: NEG
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: LD_INT 2
18582: NEG
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: LD_INT 1
18593: NEG
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 2
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 2
18662: NEG
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 2
18673: NEG
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 2
18685: NEG
18686: PUSH
18687: LD_INT 2
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18716: LD_ADDR_VAR 0 23
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 2
18801: NEG
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: LD_INT 1
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 2
18892: NEG
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: NEG
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 2
18915: NEG
18916: PUSH
18917: LD_INT 2
18919: NEG
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 3
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: LD_INT 3
18943: NEG
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 1
18951: PUSH
18952: LD_INT 2
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18996: LD_ADDR_VAR 0 24
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 1
19065: NEG
19066: PUSH
19067: LD_INT 1
19069: NEG
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: LD_INT 2
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 2
19111: PUSH
19112: LD_INT 0
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: NEG
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: LD_INT 1
19187: NEG
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 2
19195: NEG
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 2
19210: NEG
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 3
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19272: LD_ADDR_VAR 0 25
19276: PUSH
19277: LD_INT 0
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 0
19289: PUSH
19290: LD_INT 1
19292: NEG
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: LD_INT 0
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: LD_INT 1
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 1
19341: NEG
19342: PUSH
19343: LD_INT 1
19345: NEG
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 2
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 2
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: NEG
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 2
19448: NEG
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 2
19459: NEG
19460: PUSH
19461: LD_INT 1
19463: NEG
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: LD_INT 2
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 3
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 3
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19546: LD_ADDR_VAR 0 26
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: LD_INT 1
19566: NEG
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: NEG
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 2
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: LD_INT 2
19642: NEG
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 2
19661: PUSH
19662: LD_INT 0
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: NEG
19723: PUSH
19724: LD_INT 0
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: NEG
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: NEG
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 3
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: LD_INT 3
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 1
19777: NEG
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19822: LD_ADDR_VAR 0 27
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 0
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: LD_INT 1
19842: NEG
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: LD_INT 0
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: LD_INT 1
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: NEG
19904: PUSH
19905: LD_INT 2
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: LD_INT 2
19918: NEG
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: NEG
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 2
20021: NEG
20022: PUSH
20023: LD_INT 2
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 2
20044: NEG
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 3
20055: NEG
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 3
20067: NEG
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20102: LD_ADDR_VAR 0 28
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: LD_INT 1
20122: NEG
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: NEG
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: LD_INT 2
20187: NEG
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 0
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: PUSH
20218: LD_INT 0
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: NEG
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 1
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 2
20301: NEG
20302: PUSH
20303: LD_INT 2
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 2
20313: NEG
20314: PUSH
20315: LD_INT 3
20317: NEG
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: LD_INT 3
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 3
20337: NEG
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 3
20349: NEG
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20384: LD_ADDR_VAR 0 29
20388: PUSH
20389: LD_INT 0
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 1
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: LD_INT 1
20457: NEG
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 2
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 2
20550: NEG
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: NEG
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: NEG
20575: PUSH
20576: LD_INT 3
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 3
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 3
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: NEG
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 3
20628: NEG
20629: PUSH
20630: LD_INT 2
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20663: LD_ADDR_VAR 0 30
20667: PUSH
20668: LD_INT 0
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: LD_INT 2
20759: NEG
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: PUSH
20768: LD_INT 1
20770: NEG
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 1
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 2
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: NEG
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: LD_INT 3
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: LD_INT 3
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: NEG
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 3
20906: NEG
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20941: LD_ADDR_VAR 0 31
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 2
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 2
21106: NEG
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 2
21118: NEG
21119: PUSH
21120: LD_INT 2
21122: NEG
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: NEG
21131: PUSH
21132: LD_INT 3
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 3
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 3
21184: NEG
21185: PUSH
21186: LD_INT 2
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21219: LD_ADDR_VAR 0 32
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: LD_INT 1
21239: NEG
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: NEG
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 0
21312: PUSH
21313: LD_INT 2
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 2
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 2
21385: NEG
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 2
21396: NEG
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PUSH
21410: LD_INT 3
21412: NEG
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: LD_INT 2
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 2
21441: PUSH
21442: LD_INT 3
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 3
21462: NEG
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21497: LD_ADDR_VAR 0 33
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 0
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: LD_INT 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: NEG
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: NEG
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: NEG
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: NEG
21676: PUSH
21677: LD_INT 2
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 2
21687: NEG
21688: PUSH
21689: LD_INT 3
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 3
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: LD_INT 3
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 3
21741: NEG
21742: PUSH
21743: LD_INT 2
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21776: LD_ADDR_VAR 0 34
21780: PUSH
21781: LD_INT 0
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 1
21845: NEG
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: LD_INT 2
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 0
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 2
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: LD_INT 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 1
21921: NEG
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 2
21932: NEG
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 2
21943: NEG
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: NEG
21956: PUSH
21957: LD_INT 2
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: LD_INT 3
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 2
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 3
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 3
22021: NEG
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22056: LD_ADDR_VAR 0 35
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: LD_INT 1
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 0
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 2
22147: NEG
22148: PUSH
22149: LD_INT 1
22151: NEG
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22168: LD_ADDR_VAR 0 36
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 1
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 2
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: LD_INT 2
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22280: LD_ADDR_VAR 0 37
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: NEG
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22392: LD_ADDR_VAR 0 38
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 2
22483: NEG
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22504: LD_ADDR_VAR 0 39
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22616: LD_ADDR_VAR 0 40
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: LD_INT 1
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: NEG
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22728: LD_ADDR_VAR 0 41
22732: PUSH
22733: LD_INT 0
22735: PUSH
22736: LD_INT 0
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: LD_INT 0
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: LD_INT 2
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 2
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 2
22883: NEG
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: NEG
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: NEG
22919: PUSH
22920: LD_INT 3
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 3
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 3
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 2
22991: NEG
22992: PUSH
22993: LD_INT 1
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 3
23002: NEG
23003: PUSH
23004: LD_INT 0
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 3
23013: NEG
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 3
23025: NEG
23026: PUSH
23027: LD_INT 2
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 3
23037: NEG
23038: PUSH
23039: LD_INT 3
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23078: LD_ADDR_VAR 0 42
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: LD_INT 1
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: LD_INT 2
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: LD_INT 2
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 2
23256: NEG
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 2
23268: NEG
23269: PUSH
23270: LD_INT 3
23272: NEG
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 3
23284: NEG
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: LD_INT 3
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 2
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 3
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 3
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 3
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: LD_INT 3
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: LD_INT 2
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 3
23375: NEG
23376: PUSH
23377: LD_INT 2
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 3
23387: NEG
23388: PUSH
23389: LD_INT 3
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23428: LD_ADDR_VAR 0 43
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: LD_INT 2
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: LD_INT 2
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: LD_INT 1
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: LD_INT 3
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: LD_INT 3
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: LD_INT 2
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 2
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 3
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 3
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 2
23713: NEG
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 3
23724: NEG
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 3
23735: NEG
23736: PUSH
23737: LD_INT 1
23739: NEG
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23776: LD_ADDR_VAR 0 44
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: NEG
23858: PUSH
23859: LD_INT 2
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 2
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: NEG
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 2
23942: NEG
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 2
23954: NEG
23955: PUSH
23956: LD_INT 2
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: NEG
23967: PUSH
23968: LD_INT 3
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 2
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 3
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 3
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 3
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: LD_INT 3
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: LD_INT 3
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 2
24039: NEG
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 3
24050: NEG
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 3
24061: NEG
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 3
24073: NEG
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 3
24085: NEG
24086: PUSH
24087: LD_INT 3
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24126: LD_ADDR_VAR 0 45
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 2
24222: NEG
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: NEG
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: NEG
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: LD_INT 3
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: LD_INT 3
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: LD_INT 3
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: LD_INT 2
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 3
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 2
24382: PUSH
24383: LD_INT 3
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: LD_INT 3
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: LD_INT 3
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: LD_INT 2
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 3
24423: NEG
24424: PUSH
24425: LD_INT 2
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 3
24435: NEG
24436: PUSH
24437: LD_INT 3
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24476: LD_ADDR_VAR 0 46
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 1
24496: NEG
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: LD_INT 2
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 2
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: NEG
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: LD_INT 1
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: LD_INT 3
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 3
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 3
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: LD_INT 3
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: NEG
24751: PUSH
24752: LD_INT 2
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 2
24761: NEG
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 3
24772: NEG
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 3
24783: NEG
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24824: LD_ADDR_VAR 0 47
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: NEG
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 2
24951: NEG
24952: PUSH
24953: LD_INT 2
24955: NEG
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24975: LD_ADDR_VAR 0 48
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25122: LD_ADDR_VAR 0 49
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: LD_INT 2
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25266: LD_ADDR_VAR 0 50
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: LD_INT 1
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: LD_INT 2
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25410: LD_ADDR_VAR 0 51
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: NEG
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25557: LD_ADDR_VAR 0 52
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: NEG
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25708: LD_ADDR_VAR 0 53
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: LD_INT 1
25781: NEG
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 2
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 1
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: NEG
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 2
25895: NEG
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: NEG
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25938: LD_ADDR_VAR 0 54
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 1
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 1
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: LD_INT 2
26034: NEG
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: LD_INT 2
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 2
26114: NEG
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 2
26125: NEG
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: LD_INT 2
26141: NEG
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26168: LD_ADDR_VAR 0 55
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 1
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 2
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: LD_INT 2
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: LD_INT 2
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 2
26367: NEG
26368: PUSH
26369: LD_INT 2
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26398: LD_ADDR_VAR 0 56
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 2
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: LD_INT 2
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 2
26574: NEG
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: NEG
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 2
26597: NEG
26598: PUSH
26599: LD_INT 2
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26628: LD_ADDR_VAR 0 57
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: LD_INT 2
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: NEG
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 2
26827: NEG
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26858: LD_ADDR_VAR 0 58
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: LD_INT 2
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 2
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: NEG
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: NEG
27046: PUSH
27047: LD_INT 1
27049: NEG
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: LD_INT 2
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27088: LD_ADDR_VAR 0 59
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27176: LD_ADDR_VAR 0 60
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 1
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27264: LD_ADDR_VAR 0 61
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: NEG
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27352: LD_ADDR_VAR 0 62
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27440: LD_ADDR_VAR 0 63
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27528: LD_ADDR_VAR 0 64
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// end ; 1 :
27616: GO 33513
27618: LD_INT 1
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 30249
27626: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27627: LD_ADDR_VAR 0 11
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: LD_INT 3
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: LD_INT 3
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 2
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27671: LD_ADDR_VAR 0 12
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 3
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 3
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27712: LD_ADDR_VAR 0 13
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 3
27729: PUSH
27730: LD_INT 3
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 2
27739: PUSH
27740: LD_INT 3
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27752: LD_ADDR_VAR 0 14
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 3
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27793: LD_ADDR_VAR 0 15
27797: PUSH
27798: LD_INT 2
27800: NEG
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: NEG
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 3
27822: NEG
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: LIST
27836: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27837: LD_ADDR_VAR 0 16
27841: PUSH
27842: LD_INT 2
27844: NEG
27845: PUSH
27846: LD_INT 3
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 3
27856: NEG
27857: PUSH
27858: LD_INT 2
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 3
27868: NEG
27869: PUSH
27870: LD_INT 3
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27883: LD_ADDR_VAR 0 17
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: LD_INT 3
27894: NEG
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: LD_INT 3
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: LIST
27926: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27927: LD_ADDR_VAR 0 18
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 3
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27968: LD_ADDR_VAR 0 19
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 3
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28008: LD_ADDR_VAR 0 20
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28049: LD_ADDR_VAR 0 21
28053: PUSH
28054: LD_INT 2
28056: NEG
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 3
28067: NEG
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 3
28078: NEG
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28093: LD_ADDR_VAR 0 22
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: LD_INT 3
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 3
28112: NEG
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 3
28124: NEG
28125: PUSH
28126: LD_INT 3
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28139: LD_ADDR_VAR 0 23
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: LD_INT 3
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: LD_INT 4
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 3
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28183: LD_ADDR_VAR 0 24
28187: PUSH
28188: LD_INT 3
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 3
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 4
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: LIST
28223: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28224: LD_ADDR_VAR 0 25
28228: PUSH
28229: LD_INT 3
28231: PUSH
28232: LD_INT 3
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 4
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 3
28251: PUSH
28252: LD_INT 4
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28264: LD_ADDR_VAR 0 26
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 3
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: LD_INT 4
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: NEG
28292: PUSH
28293: LD_INT 3
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28305: LD_ADDR_VAR 0 27
28309: PUSH
28310: LD_INT 3
28312: NEG
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 3
28323: NEG
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 4
28334: NEG
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28349: LD_ADDR_VAR 0 28
28353: PUSH
28354: LD_INT 3
28356: NEG
28357: PUSH
28358: LD_INT 3
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 3
28368: NEG
28369: PUSH
28370: LD_INT 4
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 4
28380: NEG
28381: PUSH
28382: LD_INT 3
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28395: LD_ADDR_VAR 0 29
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 3
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 3
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: LD_INT 4
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: LD_INT 4
28451: NEG
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 3
28462: NEG
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 5
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 5
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 4
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: LD_INT 6
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 6
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 5
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28550: LD_ADDR_VAR 0 30
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 3
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 3
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 4
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 4
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 4
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 5
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 5
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 5
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 6
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 6
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28693: LD_ADDR_VAR 0 31
28697: PUSH
28698: LD_INT 3
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 3
28710: PUSH
28711: LD_INT 3
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: LD_INT 3
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 4
28730: PUSH
28731: LD_INT 3
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 4
28740: PUSH
28741: LD_INT 4
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 3
28750: PUSH
28751: LD_INT 4
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 5
28760: PUSH
28761: LD_INT 4
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 5
28770: PUSH
28771: LD_INT 5
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 4
28780: PUSH
28781: LD_INT 5
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 6
28790: PUSH
28791: LD_INT 5
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 6
28800: PUSH
28801: LD_INT 6
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 5
28810: PUSH
28811: LD_INT 6
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28832: LD_ADDR_VAR 0 32
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: LD_INT 3
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 3
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 4
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: LD_INT 4
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: LD_INT 5
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 5
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: LD_INT 4
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 6
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 6
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 5
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28975: LD_ADDR_VAR 0 33
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 3
28993: NEG
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 3
29004: NEG
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 3
29016: NEG
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 4
29027: NEG
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 4
29038: NEG
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 4
29050: NEG
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 5
29061: NEG
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 5
29072: NEG
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 5
29084: NEG
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 6
29095: NEG
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 6
29106: NEG
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29130: LD_ADDR_VAR 0 34
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: LD_INT 2
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: NEG
29162: PUSH
29163: LD_INT 3
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 3
29173: NEG
29174: PUSH
29175: LD_INT 4
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 4
29185: NEG
29186: PUSH
29187: LD_INT 3
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 4
29197: NEG
29198: PUSH
29199: LD_INT 4
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 4
29209: NEG
29210: PUSH
29211: LD_INT 5
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 5
29221: NEG
29222: PUSH
29223: LD_INT 4
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 5
29233: NEG
29234: PUSH
29235: LD_INT 5
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 5
29245: NEG
29246: PUSH
29247: LD_INT 6
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 6
29257: NEG
29258: PUSH
29259: LD_INT 5
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 6
29269: NEG
29270: PUSH
29271: LD_INT 6
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29293: LD_ADDR_VAR 0 41
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 2
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29337: LD_ADDR_VAR 0 42
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29378: LD_ADDR_VAR 0 43
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 3
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29418: LD_ADDR_VAR 0 44
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29459: LD_ADDR_VAR 0 45
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29503: LD_ADDR_VAR 0 46
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: LD_INT 2
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: LD_INT 3
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: LD_INT 2
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29549: LD_ADDR_VAR 0 47
29553: PUSH
29554: LD_INT 2
29556: NEG
29557: PUSH
29558: LD_INT 3
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: LD_INT 3
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29582: LD_ADDR_VAR 0 48
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29613: LD_ADDR_VAR 0 49
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 3
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29642: LD_ADDR_VAR 0 50
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: LD_INT 3
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29671: LD_ADDR_VAR 0 51
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: NEG
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29702: LD_ADDR_VAR 0 52
29706: PUSH
29707: LD_INT 3
29709: NEG
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 3
29721: NEG
29722: PUSH
29723: LD_INT 2
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29735: LD_ADDR_VAR 0 53
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29779: LD_ADDR_VAR 0 54
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29820: LD_ADDR_VAR 0 55
29824: PUSH
29825: LD_INT 3
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 3
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 3
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29860: LD_ADDR_VAR 0 56
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29901: LD_ADDR_VAR 0 57
29905: PUSH
29906: LD_INT 2
29908: NEG
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 3
29919: NEG
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 3
29930: NEG
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29945: LD_ADDR_VAR 0 58
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: LD_INT 3
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 3
29976: NEG
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29991: LD_ADDR_VAR 0 59
29995: PUSH
29996: LD_INT 1
29998: NEG
29999: PUSH
30000: LD_INT 2
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 2
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30035: LD_ADDR_VAR 0 60
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 2
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30076: LD_ADDR_VAR 0 61
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30116: LD_ADDR_VAR 0 62
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: NEG
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30157: LD_ADDR_VAR 0 63
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30201: LD_ADDR_VAR 0 64
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: LD_INT 2
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: NEG
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: ST_TO_ADDR
// end ; 2 :
30247: GO 33513
30249: LD_INT 2
30251: DOUBLE
30252: EQUAL
30253: IFTRUE 30257
30255: GO 33512
30257: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30258: LD_ADDR_VAR 0 29
30262: PUSH
30263: LD_INT 4
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 5
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 5
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 4
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: LD_INT 2
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 5
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 3
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 3
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 4
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 4
30388: PUSH
30389: LD_INT 4
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: LD_INT 4
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 4
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 4
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: LD_INT 4
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 4
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: LD_INT 5
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: LD_INT 5
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: LD_INT 4
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: LD_INT 5
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: NEG
30531: PUSH
30532: LD_INT 3
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: NEG
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: NEG
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 2
30575: NEG
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 4
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 4
30620: NEG
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 4
30643: NEG
30644: PUSH
30645: LD_INT 4
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 4
30655: NEG
30656: PUSH
30657: LD_INT 5
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: LD_INT 4
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: LD_INT 3
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 4
30691: NEG
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 5
30703: NEG
30704: PUSH
30705: LD_INT 4
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 5
30715: NEG
30716: PUSH
30717: LD_INT 5
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 5
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 5
30739: NEG
30740: PUSH
30741: LD_INT 3
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30796: LD_ADDR_VAR 0 30
30800: PUSH
30801: LD_INT 4
30803: PUSH
30804: LD_INT 4
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 4
30813: PUSH
30814: LD_INT 3
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: LD_INT 4
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 5
30833: PUSH
30834: LD_INT 5
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 4
30843: PUSH
30844: LD_INT 5
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: LD_INT 3
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 5
30873: PUSH
30874: LD_INT 3
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 5
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 4
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 4
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 2
30965: PUSH
30966: LD_INT 4
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 4
30997: NEG
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 4
31031: NEG
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 5
31042: NEG
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 5
31053: NEG
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 5
31065: NEG
31066: PUSH
31067: LD_INT 2
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 3
31088: NEG
31089: PUSH
31090: LD_INT 3
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 3
31100: NEG
31101: PUSH
31102: LD_INT 4
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: LD_INT 3
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 4
31148: NEG
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 4
31160: NEG
31161: PUSH
31162: LD_INT 4
31164: NEG
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 2
31172: NEG
31173: PUSH
31174: LD_INT 4
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 4
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 4
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 5
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 4
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 3
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: NEG
31252: PUSH
31253: LD_INT 4
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 5
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: LD_INT 5
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31343: LD_ADDR_VAR 0 31
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 3
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 4
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 5
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 4
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 5
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: NEG
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 4
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 4
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 4
31522: NEG
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: LD_INT 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 4
31545: NEG
31546: PUSH
31547: LD_INT 4
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 4
31557: NEG
31558: PUSH
31559: LD_INT 5
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: LD_INT 4
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 3
31581: NEG
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 4
31593: NEG
31594: PUSH
31595: LD_INT 3
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 5
31605: NEG
31606: PUSH
31607: LD_INT 4
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 5
31617: NEG
31618: PUSH
31619: LD_INT 5
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: LD_INT 5
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 5
31641: NEG
31642: PUSH
31643: LD_INT 3
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: LD_INT 3
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 4
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: LD_INT 3
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 4
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: LD_INT 4
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 4
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 4
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 5
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 5
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 4
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 5
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31893: LD_ADDR_VAR 0 32
31897: PUSH
31898: LD_INT 4
31900: NEG
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 4
31911: NEG
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: NEG
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 4
31945: NEG
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 5
31956: NEG
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 5
31967: NEG
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 5
31979: NEG
31980: PUSH
31981: LD_INT 2
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: NEG
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 3
32002: NEG
32003: PUSH
32004: LD_INT 3
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 3
32014: NEG
32015: PUSH
32016: LD_INT 4
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: LD_INT 3
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 2
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 3
32050: NEG
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 4
32062: NEG
32063: PUSH
32064: LD_INT 3
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 4
32074: NEG
32075: PUSH
32076: LD_INT 4
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: LD_INT 4
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 4
32098: NEG
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 4
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 5
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: LD_INT 4
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 3
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 4
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 5
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: LD_INT 5
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 4
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 4
32295: PUSH
32296: LD_INT 2
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 4
32305: PUSH
32306: LD_INT 4
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 5
32335: PUSH
32336: LD_INT 5
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 4
32345: PUSH
32346: LD_INT 5
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: LD_INT 3
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 5
32375: PUSH
32376: LD_INT 3
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: LD_INT 5
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32440: LD_ADDR_VAR 0 33
32444: PUSH
32445: LD_INT 4
32447: NEG
32448: PUSH
32449: LD_INT 4
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 4
32459: NEG
32460: PUSH
32461: LD_INT 5
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: NEG
32472: PUSH
32473: LD_INT 4
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: LD_INT 3
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 4
32495: NEG
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 5
32507: NEG
32508: PUSH
32509: LD_INT 4
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 5
32519: NEG
32520: PUSH
32521: LD_INT 5
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 3
32531: NEG
32532: PUSH
32533: LD_INT 5
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 5
32543: NEG
32544: PUSH
32545: LD_INT 3
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: LD_INT 4
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 3
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: LD_INT 4
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: LD_INT 4
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 4
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 4
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 5
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 5
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 4
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 3
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 5
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 3
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 3
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 4
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 4
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 4
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 5
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 4
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: LD_INT 5
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: NEG
32923: PUSH
32924: LD_INT 3
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32978: LD_ADDR_VAR 0 34
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 4
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 5
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: LD_INT 4
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: LD_INT 3
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 3
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 4
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: LD_INT 5
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 3
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: NEG
33076: PUSH
33077: LD_INT 5
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 4
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 4
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 4
33180: PUSH
33181: LD_INT 4
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 4
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: LD_INT 4
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 5
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 4
33220: PUSH
33221: LD_INT 5
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: LD_INT 4
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 5
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: LD_INT 3
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 4
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 4
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 4
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 4
33363: NEG
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 4
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 3
33386: NEG
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 3
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 4
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 5
33419: NEG
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 5
33430: NEG
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 5
33442: NEG
33443: PUSH
33444: LD_INT 2
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 3
33454: NEG
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: ST_TO_ADDR
// end ; end ;
33510: GO 33513
33512: POP
// case btype of b_depot , b_warehouse :
33513: LD_VAR 0 1
33517: PUSH
33518: LD_INT 0
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33532
33524: LD_INT 1
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33733
33532: POP
// case nation of nation_american :
33533: LD_VAR 0 5
33537: PUSH
33538: LD_INT 1
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33546
33544: GO 33602
33546: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33547: LD_ADDR_VAR 0 9
33551: PUSH
33552: LD_VAR 0 11
33556: PUSH
33557: LD_VAR 0 12
33561: PUSH
33562: LD_VAR 0 13
33566: PUSH
33567: LD_VAR 0 14
33571: PUSH
33572: LD_VAR 0 15
33576: PUSH
33577: LD_VAR 0 16
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: PUSH
33590: LD_VAR 0 4
33594: PUSH
33595: LD_INT 1
33597: PLUS
33598: ARRAY
33599: ST_TO_ADDR
33600: GO 33731
33602: LD_INT 2
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33666
33610: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33611: LD_ADDR_VAR 0 9
33615: PUSH
33616: LD_VAR 0 17
33620: PUSH
33621: LD_VAR 0 18
33625: PUSH
33626: LD_VAR 0 19
33630: PUSH
33631: LD_VAR 0 20
33635: PUSH
33636: LD_VAR 0 21
33640: PUSH
33641: LD_VAR 0 22
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: PUSH
33654: LD_VAR 0 4
33658: PUSH
33659: LD_INT 1
33661: PLUS
33662: ARRAY
33663: ST_TO_ADDR
33664: GO 33731
33666: LD_INT 3
33668: DOUBLE
33669: EQUAL
33670: IFTRUE 33674
33672: GO 33730
33674: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33675: LD_ADDR_VAR 0 9
33679: PUSH
33680: LD_VAR 0 23
33684: PUSH
33685: LD_VAR 0 24
33689: PUSH
33690: LD_VAR 0 25
33694: PUSH
33695: LD_VAR 0 26
33699: PUSH
33700: LD_VAR 0 27
33704: PUSH
33705: LD_VAR 0 28
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: PUSH
33718: LD_VAR 0 4
33722: PUSH
33723: LD_INT 1
33725: PLUS
33726: ARRAY
33727: ST_TO_ADDR
33728: GO 33731
33730: POP
33731: GO 34286
33733: LD_INT 2
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33747
33739: LD_INT 3
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33803
33747: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33748: LD_ADDR_VAR 0 9
33752: PUSH
33753: LD_VAR 0 29
33757: PUSH
33758: LD_VAR 0 30
33762: PUSH
33763: LD_VAR 0 31
33767: PUSH
33768: LD_VAR 0 32
33772: PUSH
33773: LD_VAR 0 33
33777: PUSH
33778: LD_VAR 0 34
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: PUSH
33791: LD_VAR 0 4
33795: PUSH
33796: LD_INT 1
33798: PLUS
33799: ARRAY
33800: ST_TO_ADDR
33801: GO 34286
33803: LD_INT 16
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33865
33809: LD_INT 17
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33865
33815: LD_INT 18
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33865
33821: LD_INT 19
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33865
33827: LD_INT 22
33829: DOUBLE
33830: EQUAL
33831: IFTRUE 33865
33833: LD_INT 20
33835: DOUBLE
33836: EQUAL
33837: IFTRUE 33865
33839: LD_INT 21
33841: DOUBLE
33842: EQUAL
33843: IFTRUE 33865
33845: LD_INT 23
33847: DOUBLE
33848: EQUAL
33849: IFTRUE 33865
33851: LD_INT 24
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33865
33857: LD_INT 25
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33865
33863: GO 33921
33865: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33866: LD_ADDR_VAR 0 9
33870: PUSH
33871: LD_VAR 0 35
33875: PUSH
33876: LD_VAR 0 36
33880: PUSH
33881: LD_VAR 0 37
33885: PUSH
33886: LD_VAR 0 38
33890: PUSH
33891: LD_VAR 0 39
33895: PUSH
33896: LD_VAR 0 40
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: PUSH
33909: LD_VAR 0 4
33913: PUSH
33914: LD_INT 1
33916: PLUS
33917: ARRAY
33918: ST_TO_ADDR
33919: GO 34286
33921: LD_INT 6
33923: DOUBLE
33924: EQUAL
33925: IFTRUE 33977
33927: LD_INT 7
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33977
33933: LD_INT 8
33935: DOUBLE
33936: EQUAL
33937: IFTRUE 33977
33939: LD_INT 13
33941: DOUBLE
33942: EQUAL
33943: IFTRUE 33977
33945: LD_INT 12
33947: DOUBLE
33948: EQUAL
33949: IFTRUE 33977
33951: LD_INT 15
33953: DOUBLE
33954: EQUAL
33955: IFTRUE 33977
33957: LD_INT 11
33959: DOUBLE
33960: EQUAL
33961: IFTRUE 33977
33963: LD_INT 14
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33977
33969: LD_INT 10
33971: DOUBLE
33972: EQUAL
33973: IFTRUE 33977
33975: GO 34033
33977: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33978: LD_ADDR_VAR 0 9
33982: PUSH
33983: LD_VAR 0 41
33987: PUSH
33988: LD_VAR 0 42
33992: PUSH
33993: LD_VAR 0 43
33997: PUSH
33998: LD_VAR 0 44
34002: PUSH
34003: LD_VAR 0 45
34007: PUSH
34008: LD_VAR 0 46
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: PUSH
34021: LD_VAR 0 4
34025: PUSH
34026: LD_INT 1
34028: PLUS
34029: ARRAY
34030: ST_TO_ADDR
34031: GO 34286
34033: LD_INT 36
34035: DOUBLE
34036: EQUAL
34037: IFTRUE 34041
34039: GO 34097
34041: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34042: LD_ADDR_VAR 0 9
34046: PUSH
34047: LD_VAR 0 47
34051: PUSH
34052: LD_VAR 0 48
34056: PUSH
34057: LD_VAR 0 49
34061: PUSH
34062: LD_VAR 0 50
34066: PUSH
34067: LD_VAR 0 51
34071: PUSH
34072: LD_VAR 0 52
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: PUSH
34085: LD_VAR 0 4
34089: PUSH
34090: LD_INT 1
34092: PLUS
34093: ARRAY
34094: ST_TO_ADDR
34095: GO 34286
34097: LD_INT 4
34099: DOUBLE
34100: EQUAL
34101: IFTRUE 34123
34103: LD_INT 5
34105: DOUBLE
34106: EQUAL
34107: IFTRUE 34123
34109: LD_INT 34
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34123
34115: LD_INT 37
34117: DOUBLE
34118: EQUAL
34119: IFTRUE 34123
34121: GO 34179
34123: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34124: LD_ADDR_VAR 0 9
34128: PUSH
34129: LD_VAR 0 53
34133: PUSH
34134: LD_VAR 0 54
34138: PUSH
34139: LD_VAR 0 55
34143: PUSH
34144: LD_VAR 0 56
34148: PUSH
34149: LD_VAR 0 57
34153: PUSH
34154: LD_VAR 0 58
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: PUSH
34167: LD_VAR 0 4
34171: PUSH
34172: LD_INT 1
34174: PLUS
34175: ARRAY
34176: ST_TO_ADDR
34177: GO 34286
34179: LD_INT 31
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34229
34185: LD_INT 32
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34229
34191: LD_INT 33
34193: DOUBLE
34194: EQUAL
34195: IFTRUE 34229
34197: LD_INT 27
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34229
34203: LD_INT 26
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34229
34209: LD_INT 28
34211: DOUBLE
34212: EQUAL
34213: IFTRUE 34229
34215: LD_INT 29
34217: DOUBLE
34218: EQUAL
34219: IFTRUE 34229
34221: LD_INT 30
34223: DOUBLE
34224: EQUAL
34225: IFTRUE 34229
34227: GO 34285
34229: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34230: LD_ADDR_VAR 0 9
34234: PUSH
34235: LD_VAR 0 59
34239: PUSH
34240: LD_VAR 0 60
34244: PUSH
34245: LD_VAR 0 61
34249: PUSH
34250: LD_VAR 0 62
34254: PUSH
34255: LD_VAR 0 63
34259: PUSH
34260: LD_VAR 0 64
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: PUSH
34273: LD_VAR 0 4
34277: PUSH
34278: LD_INT 1
34280: PLUS
34281: ARRAY
34282: ST_TO_ADDR
34283: GO 34286
34285: POP
// temp_list2 = [ ] ;
34286: LD_ADDR_VAR 0 10
34290: PUSH
34291: EMPTY
34292: ST_TO_ADDR
// for i in temp_list do
34293: LD_ADDR_VAR 0 8
34297: PUSH
34298: LD_VAR 0 9
34302: PUSH
34303: FOR_IN
34304: IFFALSE 34356
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34306: LD_ADDR_VAR 0 10
34310: PUSH
34311: LD_VAR 0 10
34315: PUSH
34316: LD_VAR 0 8
34320: PUSH
34321: LD_INT 1
34323: ARRAY
34324: PUSH
34325: LD_VAR 0 2
34329: PLUS
34330: PUSH
34331: LD_VAR 0 8
34335: PUSH
34336: LD_INT 2
34338: ARRAY
34339: PUSH
34340: LD_VAR 0 3
34344: PLUS
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: EMPTY
34351: LIST
34352: ADD
34353: ST_TO_ADDR
34354: GO 34303
34356: POP
34357: POP
// result = temp_list2 ;
34358: LD_ADDR_VAR 0 7
34362: PUSH
34363: LD_VAR 0 10
34367: ST_TO_ADDR
// end ;
34368: LD_VAR 0 7
34372: RET
// export function EnemyInRange ( unit , dist ) ; begin
34373: LD_INT 0
34375: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34376: LD_ADDR_VAR 0 3
34380: PUSH
34381: LD_VAR 0 1
34385: PPUSH
34386: CALL_OW 255
34390: PPUSH
34391: LD_VAR 0 1
34395: PPUSH
34396: CALL_OW 250
34400: PPUSH
34401: LD_VAR 0 1
34405: PPUSH
34406: CALL_OW 251
34410: PPUSH
34411: LD_VAR 0 2
34415: PPUSH
34416: CALL 7746 0 4
34420: PUSH
34421: LD_INT 4
34423: ARRAY
34424: ST_TO_ADDR
// end ;
34425: LD_VAR 0 3
34429: RET
// export function PlayerSeeMe ( unit ) ; begin
34430: LD_INT 0
34432: PPUSH
// result := See ( your_side , unit ) ;
34433: LD_ADDR_VAR 0 2
34437: PUSH
34438: LD_OWVAR 2
34442: PPUSH
34443: LD_VAR 0 1
34447: PPUSH
34448: CALL_OW 292
34452: ST_TO_ADDR
// end ;
34453: LD_VAR 0 2
34457: RET
// export function ReverseDir ( unit ) ; begin
34458: LD_INT 0
34460: PPUSH
// if not unit then
34461: LD_VAR 0 1
34465: NOT
34466: IFFALSE 34470
// exit ;
34468: GO 34493
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34470: LD_ADDR_VAR 0 2
34474: PUSH
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 254
34484: PUSH
34485: LD_INT 3
34487: PLUS
34488: PUSH
34489: LD_INT 6
34491: MOD
34492: ST_TO_ADDR
// end ;
34493: LD_VAR 0 2
34497: RET
// export function ReverseArray ( array ) ; var i ; begin
34498: LD_INT 0
34500: PPUSH
34501: PPUSH
// if not array then
34502: LD_VAR 0 1
34506: NOT
34507: IFFALSE 34511
// exit ;
34509: GO 34566
// result := [ ] ;
34511: LD_ADDR_VAR 0 2
34515: PUSH
34516: EMPTY
34517: ST_TO_ADDR
// for i := array downto 1 do
34518: LD_ADDR_VAR 0 3
34522: PUSH
34523: DOUBLE
34524: LD_VAR 0 1
34528: INC
34529: ST_TO_ADDR
34530: LD_INT 1
34532: PUSH
34533: FOR_DOWNTO
34534: IFFALSE 34564
// result := Join ( result , array [ i ] ) ;
34536: LD_ADDR_VAR 0 2
34540: PUSH
34541: LD_VAR 0 2
34545: PPUSH
34546: LD_VAR 0 1
34550: PUSH
34551: LD_VAR 0 3
34555: ARRAY
34556: PPUSH
34557: CALL 39231 0 2
34561: ST_TO_ADDR
34562: GO 34533
34564: POP
34565: POP
// end ;
34566: LD_VAR 0 2
34570: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34571: LD_INT 0
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
34577: PPUSH
34578: PPUSH
// if not unit or not hexes then
34579: LD_VAR 0 1
34583: NOT
34584: PUSH
34585: LD_VAR 0 2
34589: NOT
34590: OR
34591: IFFALSE 34595
// exit ;
34593: GO 34718
// dist := 9999 ;
34595: LD_ADDR_VAR 0 5
34599: PUSH
34600: LD_INT 9999
34602: ST_TO_ADDR
// for i = 1 to hexes do
34603: LD_ADDR_VAR 0 4
34607: PUSH
34608: DOUBLE
34609: LD_INT 1
34611: DEC
34612: ST_TO_ADDR
34613: LD_VAR 0 2
34617: PUSH
34618: FOR_TO
34619: IFFALSE 34706
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34621: LD_ADDR_VAR 0 6
34625: PUSH
34626: LD_VAR 0 1
34630: PPUSH
34631: LD_VAR 0 2
34635: PUSH
34636: LD_VAR 0 4
34640: ARRAY
34641: PUSH
34642: LD_INT 1
34644: ARRAY
34645: PPUSH
34646: LD_VAR 0 2
34650: PUSH
34651: LD_VAR 0 4
34655: ARRAY
34656: PUSH
34657: LD_INT 2
34659: ARRAY
34660: PPUSH
34661: CALL_OW 297
34665: ST_TO_ADDR
// if tdist < dist then
34666: LD_VAR 0 6
34670: PUSH
34671: LD_VAR 0 5
34675: LESS
34676: IFFALSE 34704
// begin hex := hexes [ i ] ;
34678: LD_ADDR_VAR 0 8
34682: PUSH
34683: LD_VAR 0 2
34687: PUSH
34688: LD_VAR 0 4
34692: ARRAY
34693: ST_TO_ADDR
// dist := tdist ;
34694: LD_ADDR_VAR 0 5
34698: PUSH
34699: LD_VAR 0 6
34703: ST_TO_ADDR
// end ; end ;
34704: GO 34618
34706: POP
34707: POP
// result := hex ;
34708: LD_ADDR_VAR 0 3
34712: PUSH
34713: LD_VAR 0 8
34717: ST_TO_ADDR
// end ;
34718: LD_VAR 0 3
34722: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34723: LD_INT 0
34725: PPUSH
34726: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34727: LD_VAR 0 1
34731: NOT
34732: PUSH
34733: LD_VAR 0 1
34737: PUSH
34738: LD_INT 21
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 23
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PPUSH
34762: CALL_OW 69
34766: IN
34767: NOT
34768: OR
34769: IFFALSE 34773
// exit ;
34771: GO 34820
// for i = 1 to 3 do
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: DOUBLE
34779: LD_INT 1
34781: DEC
34782: ST_TO_ADDR
34783: LD_INT 3
34785: PUSH
34786: FOR_TO
34787: IFFALSE 34818
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34789: LD_VAR 0 1
34793: PPUSH
34794: CALL_OW 250
34798: PPUSH
34799: LD_VAR 0 1
34803: PPUSH
34804: CALL_OW 251
34808: PPUSH
34809: LD_INT 1
34811: PPUSH
34812: CALL_OW 453
34816: GO 34786
34818: POP
34819: POP
// end ;
34820: LD_VAR 0 2
34824: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34825: LD_INT 0
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
// if not unit or not enemy_unit then
34833: LD_VAR 0 1
34837: NOT
34838: PUSH
34839: LD_VAR 0 2
34843: NOT
34844: OR
34845: IFFALSE 34849
// exit ;
34847: GO 35316
// if GetLives ( i ) < 250 then
34849: LD_VAR 0 4
34853: PPUSH
34854: CALL_OW 256
34858: PUSH
34859: LD_INT 250
34861: LESS
34862: IFFALSE 34875
// begin ComAutodestruct ( i ) ;
34864: LD_VAR 0 4
34868: PPUSH
34869: CALL 34723 0 1
// exit ;
34873: GO 35316
// end ; x := GetX ( enemy_unit ) ;
34875: LD_ADDR_VAR 0 7
34879: PUSH
34880: LD_VAR 0 2
34884: PPUSH
34885: CALL_OW 250
34889: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34890: LD_ADDR_VAR 0 8
34894: PUSH
34895: LD_VAR 0 2
34899: PPUSH
34900: CALL_OW 251
34904: ST_TO_ADDR
// if not x or not y then
34905: LD_VAR 0 7
34909: NOT
34910: PUSH
34911: LD_VAR 0 8
34915: NOT
34916: OR
34917: IFFALSE 34921
// exit ;
34919: GO 35316
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34921: LD_ADDR_VAR 0 6
34925: PUSH
34926: LD_VAR 0 7
34930: PPUSH
34931: LD_INT 0
34933: PPUSH
34934: LD_INT 4
34936: PPUSH
34937: CALL_OW 272
34941: PUSH
34942: LD_VAR 0 8
34946: PPUSH
34947: LD_INT 0
34949: PPUSH
34950: LD_INT 4
34952: PPUSH
34953: CALL_OW 273
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_VAR 0 7
34966: PPUSH
34967: LD_INT 1
34969: PPUSH
34970: LD_INT 4
34972: PPUSH
34973: CALL_OW 272
34977: PUSH
34978: LD_VAR 0 8
34982: PPUSH
34983: LD_INT 1
34985: PPUSH
34986: LD_INT 4
34988: PPUSH
34989: CALL_OW 273
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_VAR 0 7
35002: PPUSH
35003: LD_INT 2
35005: PPUSH
35006: LD_INT 4
35008: PPUSH
35009: CALL_OW 272
35013: PUSH
35014: LD_VAR 0 8
35018: PPUSH
35019: LD_INT 2
35021: PPUSH
35022: LD_INT 4
35024: PPUSH
35025: CALL_OW 273
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_VAR 0 7
35038: PPUSH
35039: LD_INT 3
35041: PPUSH
35042: LD_INT 4
35044: PPUSH
35045: CALL_OW 272
35049: PUSH
35050: LD_VAR 0 8
35054: PPUSH
35055: LD_INT 3
35057: PPUSH
35058: LD_INT 4
35060: PPUSH
35061: CALL_OW 273
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_VAR 0 7
35074: PPUSH
35075: LD_INT 4
35077: PPUSH
35078: LD_INT 4
35080: PPUSH
35081: CALL_OW 272
35085: PUSH
35086: LD_VAR 0 8
35090: PPUSH
35091: LD_INT 4
35093: PPUSH
35094: LD_INT 4
35096: PPUSH
35097: CALL_OW 273
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_VAR 0 7
35110: PPUSH
35111: LD_INT 5
35113: PPUSH
35114: LD_INT 4
35116: PPUSH
35117: CALL_OW 272
35121: PUSH
35122: LD_VAR 0 8
35126: PPUSH
35127: LD_INT 5
35129: PPUSH
35130: LD_INT 4
35132: PPUSH
35133: CALL_OW 273
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
// for i = tmp downto 1 do
35150: LD_ADDR_VAR 0 4
35154: PUSH
35155: DOUBLE
35156: LD_VAR 0 6
35160: INC
35161: ST_TO_ADDR
35162: LD_INT 1
35164: PUSH
35165: FOR_DOWNTO
35166: IFFALSE 35267
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35168: LD_VAR 0 6
35172: PUSH
35173: LD_VAR 0 4
35177: ARRAY
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: PPUSH
35183: LD_VAR 0 6
35187: PUSH
35188: LD_VAR 0 4
35192: ARRAY
35193: PUSH
35194: LD_INT 2
35196: ARRAY
35197: PPUSH
35198: CALL_OW 488
35202: NOT
35203: PUSH
35204: LD_VAR 0 6
35208: PUSH
35209: LD_VAR 0 4
35213: ARRAY
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PPUSH
35219: LD_VAR 0 6
35223: PUSH
35224: LD_VAR 0 4
35228: ARRAY
35229: PUSH
35230: LD_INT 2
35232: ARRAY
35233: PPUSH
35234: CALL_OW 428
35238: PUSH
35239: LD_INT 0
35241: NONEQUAL
35242: OR
35243: IFFALSE 35265
// tmp := Delete ( tmp , i ) ;
35245: LD_ADDR_VAR 0 6
35249: PUSH
35250: LD_VAR 0 6
35254: PPUSH
35255: LD_VAR 0 4
35259: PPUSH
35260: CALL_OW 3
35264: ST_TO_ADDR
35265: GO 35165
35267: POP
35268: POP
// j := GetClosestHex ( unit , tmp ) ;
35269: LD_ADDR_VAR 0 5
35273: PUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: LD_VAR 0 6
35283: PPUSH
35284: CALL 34571 0 2
35288: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35289: LD_VAR 0 1
35293: PPUSH
35294: LD_VAR 0 5
35298: PUSH
35299: LD_INT 1
35301: ARRAY
35302: PPUSH
35303: LD_VAR 0 5
35307: PUSH
35308: LD_INT 2
35310: ARRAY
35311: PPUSH
35312: CALL_OW 111
// end ;
35316: LD_VAR 0 3
35320: RET
// export function PrepareApemanSoldier ( ) ; begin
35321: LD_INT 0
35323: PPUSH
// uc_nation := 0 ;
35324: LD_ADDR_OWVAR 21
35328: PUSH
35329: LD_INT 0
35331: ST_TO_ADDR
// hc_sex := sex_male ;
35332: LD_ADDR_OWVAR 27
35336: PUSH
35337: LD_INT 1
35339: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35340: LD_ADDR_OWVAR 28
35344: PUSH
35345: LD_INT 15
35347: ST_TO_ADDR
// hc_gallery :=  ;
35348: LD_ADDR_OWVAR 33
35352: PUSH
35353: LD_STRING 
35355: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35356: LD_ADDR_OWVAR 31
35360: PUSH
35361: LD_INT 0
35363: PPUSH
35364: LD_INT 3
35366: PPUSH
35367: CALL_OW 12
35371: PUSH
35372: LD_INT 0
35374: PPUSH
35375: LD_INT 3
35377: PPUSH
35378: CALL_OW 12
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: ST_TO_ADDR
// end ;
35395: LD_VAR 0 1
35399: RET
// export function PrepareApemanEngineer ( ) ; begin
35400: LD_INT 0
35402: PPUSH
// uc_nation := 0 ;
35403: LD_ADDR_OWVAR 21
35407: PUSH
35408: LD_INT 0
35410: ST_TO_ADDR
// hc_sex := sex_male ;
35411: LD_ADDR_OWVAR 27
35415: PUSH
35416: LD_INT 1
35418: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35419: LD_ADDR_OWVAR 28
35423: PUSH
35424: LD_INT 16
35426: ST_TO_ADDR
// hc_gallery :=  ;
35427: LD_ADDR_OWVAR 33
35431: PUSH
35432: LD_STRING 
35434: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35435: LD_ADDR_OWVAR 31
35439: PUSH
35440: LD_INT 0
35442: PPUSH
35443: LD_INT 3
35445: PPUSH
35446: CALL_OW 12
35450: PUSH
35451: LD_INT 0
35453: PPUSH
35454: LD_INT 3
35456: PPUSH
35457: CALL_OW 12
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 1
35478: RET
// export function PrepareApeman ( agressivity ) ; begin
35479: LD_INT 0
35481: PPUSH
// uc_side := 0 ;
35482: LD_ADDR_OWVAR 20
35486: PUSH
35487: LD_INT 0
35489: ST_TO_ADDR
// uc_nation := 0 ;
35490: LD_ADDR_OWVAR 21
35494: PUSH
35495: LD_INT 0
35497: ST_TO_ADDR
// hc_sex := sex_male ;
35498: LD_ADDR_OWVAR 27
35502: PUSH
35503: LD_INT 1
35505: ST_TO_ADDR
// hc_class := class_apeman ;
35506: LD_ADDR_OWVAR 28
35510: PUSH
35511: LD_INT 12
35513: ST_TO_ADDR
// hc_gallery :=  ;
35514: LD_ADDR_OWVAR 33
35518: PUSH
35519: LD_STRING 
35521: ST_TO_ADDR
// if agressivity = 0 then
35522: LD_VAR 0 1
35526: PUSH
35527: LD_INT 0
35529: EQUAL
35530: IFFALSE 35542
// hc_agressivity := 0 else
35532: LD_ADDR_OWVAR 35
35536: PUSH
35537: LD_INT 0
35539: ST_TO_ADDR
35540: GO 35563
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35542: LD_ADDR_OWVAR 35
35546: PUSH
35547: LD_VAR 0 1
35551: NEG
35552: PPUSH
35553: LD_VAR 0 1
35557: PPUSH
35558: CALL_OW 12
35562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35563: LD_ADDR_OWVAR 31
35567: PUSH
35568: LD_INT 0
35570: PPUSH
35571: LD_INT 3
35573: PPUSH
35574: CALL_OW 12
35578: PUSH
35579: LD_INT 0
35581: PPUSH
35582: LD_INT 3
35584: PPUSH
35585: CALL_OW 12
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
// end ;
35602: LD_VAR 0 2
35606: RET
// export function PrepareTiger ( agressivity ) ; begin
35607: LD_INT 0
35609: PPUSH
// uc_side := 0 ;
35610: LD_ADDR_OWVAR 20
35614: PUSH
35615: LD_INT 0
35617: ST_TO_ADDR
// uc_nation := 0 ;
35618: LD_ADDR_OWVAR 21
35622: PUSH
35623: LD_INT 0
35625: ST_TO_ADDR
// hc_class := class_tiger ;
35626: LD_ADDR_OWVAR 28
35630: PUSH
35631: LD_INT 14
35633: ST_TO_ADDR
// hc_gallery :=  ;
35634: LD_ADDR_OWVAR 33
35638: PUSH
35639: LD_STRING 
35641: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35642: LD_ADDR_OWVAR 35
35646: PUSH
35647: LD_VAR 0 1
35651: NEG
35652: PPUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 12
35662: ST_TO_ADDR
// end ;
35663: LD_VAR 0 2
35667: RET
// export function PrepareEnchidna ( ) ; begin
35668: LD_INT 0
35670: PPUSH
// uc_side := 0 ;
35671: LD_ADDR_OWVAR 20
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// uc_nation := 0 ;
35679: LD_ADDR_OWVAR 21
35683: PUSH
35684: LD_INT 0
35686: ST_TO_ADDR
// hc_class := class_baggie ;
35687: LD_ADDR_OWVAR 28
35691: PUSH
35692: LD_INT 13
35694: ST_TO_ADDR
// hc_gallery :=  ;
35695: LD_ADDR_OWVAR 33
35699: PUSH
35700: LD_STRING 
35702: ST_TO_ADDR
// end ;
35703: LD_VAR 0 1
35707: RET
// export function PrepareFrog ( ) ; begin
35708: LD_INT 0
35710: PPUSH
// uc_side := 0 ;
35711: LD_ADDR_OWVAR 20
35715: PUSH
35716: LD_INT 0
35718: ST_TO_ADDR
// uc_nation := 0 ;
35719: LD_ADDR_OWVAR 21
35723: PUSH
35724: LD_INT 0
35726: ST_TO_ADDR
// hc_class := class_frog ;
35727: LD_ADDR_OWVAR 28
35731: PUSH
35732: LD_INT 19
35734: ST_TO_ADDR
// hc_gallery :=  ;
35735: LD_ADDR_OWVAR 33
35739: PUSH
35740: LD_STRING 
35742: ST_TO_ADDR
// end ;
35743: LD_VAR 0 1
35747: RET
// export function PrepareFish ( ) ; begin
35748: LD_INT 0
35750: PPUSH
// uc_side := 0 ;
35751: LD_ADDR_OWVAR 20
35755: PUSH
35756: LD_INT 0
35758: ST_TO_ADDR
// uc_nation := 0 ;
35759: LD_ADDR_OWVAR 21
35763: PUSH
35764: LD_INT 0
35766: ST_TO_ADDR
// hc_class := class_fish ;
35767: LD_ADDR_OWVAR 28
35771: PUSH
35772: LD_INT 20
35774: ST_TO_ADDR
// hc_gallery :=  ;
35775: LD_ADDR_OWVAR 33
35779: PUSH
35780: LD_STRING 
35782: ST_TO_ADDR
// end ;
35783: LD_VAR 0 1
35787: RET
// export function PrepareBird ( ) ; begin
35788: LD_INT 0
35790: PPUSH
// uc_side := 0 ;
35791: LD_ADDR_OWVAR 20
35795: PUSH
35796: LD_INT 0
35798: ST_TO_ADDR
// uc_nation := 0 ;
35799: LD_ADDR_OWVAR 21
35803: PUSH
35804: LD_INT 0
35806: ST_TO_ADDR
// hc_class := class_phororhacos ;
35807: LD_ADDR_OWVAR 28
35811: PUSH
35812: LD_INT 18
35814: ST_TO_ADDR
// hc_gallery :=  ;
35815: LD_ADDR_OWVAR 33
35819: PUSH
35820: LD_STRING 
35822: ST_TO_ADDR
// end ;
35823: LD_VAR 0 1
35827: RET
// export function PrepareHorse ( ) ; begin
35828: LD_INT 0
35830: PPUSH
// uc_side := 0 ;
35831: LD_ADDR_OWVAR 20
35835: PUSH
35836: LD_INT 0
35838: ST_TO_ADDR
// uc_nation := 0 ;
35839: LD_ADDR_OWVAR 21
35843: PUSH
35844: LD_INT 0
35846: ST_TO_ADDR
// hc_class := class_horse ;
35847: LD_ADDR_OWVAR 28
35851: PUSH
35852: LD_INT 21
35854: ST_TO_ADDR
// hc_gallery :=  ;
35855: LD_ADDR_OWVAR 33
35859: PUSH
35860: LD_STRING 
35862: ST_TO_ADDR
// end ;
35863: LD_VAR 0 1
35867: RET
// export function PrepareMastodont ( ) ; begin
35868: LD_INT 0
35870: PPUSH
// uc_side := 0 ;
35871: LD_ADDR_OWVAR 20
35875: PUSH
35876: LD_INT 0
35878: ST_TO_ADDR
// uc_nation := 0 ;
35879: LD_ADDR_OWVAR 21
35883: PUSH
35884: LD_INT 0
35886: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35887: LD_ADDR_OWVAR 37
35891: PUSH
35892: LD_INT 31
35894: ST_TO_ADDR
// vc_control := control_rider ;
35895: LD_ADDR_OWVAR 38
35899: PUSH
35900: LD_INT 4
35902: ST_TO_ADDR
// end ;
35903: LD_VAR 0 1
35907: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35908: LD_INT 0
35910: PPUSH
35911: PPUSH
35912: PPUSH
// uc_side = 0 ;
35913: LD_ADDR_OWVAR 20
35917: PUSH
35918: LD_INT 0
35920: ST_TO_ADDR
// uc_nation = 0 ;
35921: LD_ADDR_OWVAR 21
35925: PUSH
35926: LD_INT 0
35928: ST_TO_ADDR
// InitHc_All ( ) ;
35929: CALL_OW 584
// InitVc ;
35933: CALL_OW 20
// if mastodonts then
35937: LD_VAR 0 6
35941: IFFALSE 36008
// for i = 1 to mastodonts do
35943: LD_ADDR_VAR 0 11
35947: PUSH
35948: DOUBLE
35949: LD_INT 1
35951: DEC
35952: ST_TO_ADDR
35953: LD_VAR 0 6
35957: PUSH
35958: FOR_TO
35959: IFFALSE 36006
// begin vc_chassis := 31 ;
35961: LD_ADDR_OWVAR 37
35965: PUSH
35966: LD_INT 31
35968: ST_TO_ADDR
// vc_control := control_rider ;
35969: LD_ADDR_OWVAR 38
35973: PUSH
35974: LD_INT 4
35976: ST_TO_ADDR
// animal := CreateVehicle ;
35977: LD_ADDR_VAR 0 12
35981: PUSH
35982: CALL_OW 45
35986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35987: LD_VAR 0 12
35991: PPUSH
35992: LD_VAR 0 8
35996: PPUSH
35997: LD_INT 0
35999: PPUSH
36000: CALL 38136 0 3
// end ;
36004: GO 35958
36006: POP
36007: POP
// if horses then
36008: LD_VAR 0 5
36012: IFFALSE 36079
// for i = 1 to horses do
36014: LD_ADDR_VAR 0 11
36018: PUSH
36019: DOUBLE
36020: LD_INT 1
36022: DEC
36023: ST_TO_ADDR
36024: LD_VAR 0 5
36028: PUSH
36029: FOR_TO
36030: IFFALSE 36077
// begin hc_class := 21 ;
36032: LD_ADDR_OWVAR 28
36036: PUSH
36037: LD_INT 21
36039: ST_TO_ADDR
// hc_gallery :=  ;
36040: LD_ADDR_OWVAR 33
36044: PUSH
36045: LD_STRING 
36047: ST_TO_ADDR
// animal := CreateHuman ;
36048: LD_ADDR_VAR 0 12
36052: PUSH
36053: CALL_OW 44
36057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36058: LD_VAR 0 12
36062: PPUSH
36063: LD_VAR 0 8
36067: PPUSH
36068: LD_INT 0
36070: PPUSH
36071: CALL 38136 0 3
// end ;
36075: GO 36029
36077: POP
36078: POP
// if birds then
36079: LD_VAR 0 1
36083: IFFALSE 36150
// for i = 1 to birds do
36085: LD_ADDR_VAR 0 11
36089: PUSH
36090: DOUBLE
36091: LD_INT 1
36093: DEC
36094: ST_TO_ADDR
36095: LD_VAR 0 1
36099: PUSH
36100: FOR_TO
36101: IFFALSE 36148
// begin hc_class := 18 ;
36103: LD_ADDR_OWVAR 28
36107: PUSH
36108: LD_INT 18
36110: ST_TO_ADDR
// hc_gallery =  ;
36111: LD_ADDR_OWVAR 33
36115: PUSH
36116: LD_STRING 
36118: ST_TO_ADDR
// animal := CreateHuman ;
36119: LD_ADDR_VAR 0 12
36123: PUSH
36124: CALL_OW 44
36128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36129: LD_VAR 0 12
36133: PPUSH
36134: LD_VAR 0 8
36138: PPUSH
36139: LD_INT 0
36141: PPUSH
36142: CALL 38136 0 3
// end ;
36146: GO 36100
36148: POP
36149: POP
// if tigers then
36150: LD_VAR 0 2
36154: IFFALSE 36238
// for i = 1 to tigers do
36156: LD_ADDR_VAR 0 11
36160: PUSH
36161: DOUBLE
36162: LD_INT 1
36164: DEC
36165: ST_TO_ADDR
36166: LD_VAR 0 2
36170: PUSH
36171: FOR_TO
36172: IFFALSE 36236
// begin hc_class = class_tiger ;
36174: LD_ADDR_OWVAR 28
36178: PUSH
36179: LD_INT 14
36181: ST_TO_ADDR
// hc_gallery =  ;
36182: LD_ADDR_OWVAR 33
36186: PUSH
36187: LD_STRING 
36189: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36190: LD_ADDR_OWVAR 35
36194: PUSH
36195: LD_INT 7
36197: NEG
36198: PPUSH
36199: LD_INT 7
36201: PPUSH
36202: CALL_OW 12
36206: ST_TO_ADDR
// animal := CreateHuman ;
36207: LD_ADDR_VAR 0 12
36211: PUSH
36212: CALL_OW 44
36216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36217: LD_VAR 0 12
36221: PPUSH
36222: LD_VAR 0 8
36226: PPUSH
36227: LD_INT 0
36229: PPUSH
36230: CALL 38136 0 3
// end ;
36234: GO 36171
36236: POP
36237: POP
// if apemans then
36238: LD_VAR 0 3
36242: IFFALSE 36365
// for i = 1 to apemans do
36244: LD_ADDR_VAR 0 11
36248: PUSH
36249: DOUBLE
36250: LD_INT 1
36252: DEC
36253: ST_TO_ADDR
36254: LD_VAR 0 3
36258: PUSH
36259: FOR_TO
36260: IFFALSE 36363
// begin hc_class = class_apeman ;
36262: LD_ADDR_OWVAR 28
36266: PUSH
36267: LD_INT 12
36269: ST_TO_ADDR
// hc_gallery =  ;
36270: LD_ADDR_OWVAR 33
36274: PUSH
36275: LD_STRING 
36277: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36278: LD_ADDR_OWVAR 35
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PPUSH
36287: LD_INT 2
36289: PPUSH
36290: CALL_OW 12
36294: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36295: LD_ADDR_OWVAR 31
36299: PUSH
36300: LD_INT 1
36302: PPUSH
36303: LD_INT 3
36305: PPUSH
36306: CALL_OW 12
36310: PUSH
36311: LD_INT 1
36313: PPUSH
36314: LD_INT 3
36316: PPUSH
36317: CALL_OW 12
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: ST_TO_ADDR
// animal := CreateHuman ;
36334: LD_ADDR_VAR 0 12
36338: PUSH
36339: CALL_OW 44
36343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36344: LD_VAR 0 12
36348: PPUSH
36349: LD_VAR 0 8
36353: PPUSH
36354: LD_INT 0
36356: PPUSH
36357: CALL 38136 0 3
// end ;
36361: GO 36259
36363: POP
36364: POP
// if enchidnas then
36365: LD_VAR 0 4
36369: IFFALSE 36436
// for i = 1 to enchidnas do
36371: LD_ADDR_VAR 0 11
36375: PUSH
36376: DOUBLE
36377: LD_INT 1
36379: DEC
36380: ST_TO_ADDR
36381: LD_VAR 0 4
36385: PUSH
36386: FOR_TO
36387: IFFALSE 36434
// begin hc_class = 13 ;
36389: LD_ADDR_OWVAR 28
36393: PUSH
36394: LD_INT 13
36396: ST_TO_ADDR
// hc_gallery =  ;
36397: LD_ADDR_OWVAR 33
36401: PUSH
36402: LD_STRING 
36404: ST_TO_ADDR
// animal := CreateHuman ;
36405: LD_ADDR_VAR 0 12
36409: PUSH
36410: CALL_OW 44
36414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36415: LD_VAR 0 12
36419: PPUSH
36420: LD_VAR 0 8
36424: PPUSH
36425: LD_INT 0
36427: PPUSH
36428: CALL 38136 0 3
// end ;
36432: GO 36386
36434: POP
36435: POP
// if fishes then
36436: LD_VAR 0 7
36440: IFFALSE 36507
// for i = 1 to fishes do
36442: LD_ADDR_VAR 0 11
36446: PUSH
36447: DOUBLE
36448: LD_INT 1
36450: DEC
36451: ST_TO_ADDR
36452: LD_VAR 0 7
36456: PUSH
36457: FOR_TO
36458: IFFALSE 36505
// begin hc_class = 20 ;
36460: LD_ADDR_OWVAR 28
36464: PUSH
36465: LD_INT 20
36467: ST_TO_ADDR
// hc_gallery =  ;
36468: LD_ADDR_OWVAR 33
36472: PUSH
36473: LD_STRING 
36475: ST_TO_ADDR
// animal := CreateHuman ;
36476: LD_ADDR_VAR 0 12
36480: PUSH
36481: CALL_OW 44
36485: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36486: LD_VAR 0 12
36490: PPUSH
36491: LD_VAR 0 9
36495: PPUSH
36496: LD_INT 0
36498: PPUSH
36499: CALL 38136 0 3
// end ;
36503: GO 36457
36505: POP
36506: POP
// end ;
36507: LD_VAR 0 10
36511: RET
// export function WantHeal ( sci , unit ) ; begin
36512: LD_INT 0
36514: PPUSH
// if GetTaskList ( sci ) > 0 then
36515: LD_VAR 0 1
36519: PPUSH
36520: CALL_OW 437
36524: PUSH
36525: LD_INT 0
36527: GREATER
36528: IFFALSE 36598
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36530: LD_VAR 0 1
36534: PPUSH
36535: CALL_OW 437
36539: PUSH
36540: LD_INT 1
36542: ARRAY
36543: PUSH
36544: LD_INT 1
36546: ARRAY
36547: PUSH
36548: LD_STRING l
36550: EQUAL
36551: PUSH
36552: LD_VAR 0 1
36556: PPUSH
36557: CALL_OW 437
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PUSH
36566: LD_INT 4
36568: ARRAY
36569: PUSH
36570: LD_VAR 0 2
36574: EQUAL
36575: AND
36576: IFFALSE 36588
// result := true else
36578: LD_ADDR_VAR 0 3
36582: PUSH
36583: LD_INT 1
36585: ST_TO_ADDR
36586: GO 36596
// result := false ;
36588: LD_ADDR_VAR 0 3
36592: PUSH
36593: LD_INT 0
36595: ST_TO_ADDR
// end else
36596: GO 36606
// result := false ;
36598: LD_ADDR_VAR 0 3
36602: PUSH
36603: LD_INT 0
36605: ST_TO_ADDR
// end ;
36606: LD_VAR 0 3
36610: RET
// export function HealTarget ( sci ) ; begin
36611: LD_INT 0
36613: PPUSH
// if not sci then
36614: LD_VAR 0 1
36618: NOT
36619: IFFALSE 36623
// exit ;
36621: GO 36688
// result := 0 ;
36623: LD_ADDR_VAR 0 2
36627: PUSH
36628: LD_INT 0
36630: ST_TO_ADDR
// if GetTaskList ( sci ) then
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 437
36640: IFFALSE 36688
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 437
36651: PUSH
36652: LD_INT 1
36654: ARRAY
36655: PUSH
36656: LD_INT 1
36658: ARRAY
36659: PUSH
36660: LD_STRING l
36662: EQUAL
36663: IFFALSE 36688
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36665: LD_ADDR_VAR 0 2
36669: PUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: CALL_OW 437
36679: PUSH
36680: LD_INT 1
36682: ARRAY
36683: PUSH
36684: LD_INT 4
36686: ARRAY
36687: ST_TO_ADDR
// end ;
36688: LD_VAR 0 2
36692: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
// if not base_units then
36699: LD_VAR 0 1
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36795
// result := false ;
36708: LD_ADDR_VAR 0 2
36712: PUSH
36713: LD_INT 0
36715: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: LD_INT 21
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PPUSH
36736: CALL_OW 72
36740: ST_TO_ADDR
// if not tmp then
36741: LD_VAR 0 5
36745: NOT
36746: IFFALSE 36750
// exit ;
36748: GO 36795
// for i in tmp do
36750: LD_ADDR_VAR 0 3
36754: PUSH
36755: LD_VAR 0 5
36759: PUSH
36760: FOR_IN
36761: IFFALSE 36793
// begin result := EnemyInRange ( i , 22 ) ;
36763: LD_ADDR_VAR 0 2
36767: PUSH
36768: LD_VAR 0 3
36772: PPUSH
36773: LD_INT 22
36775: PPUSH
36776: CALL 34373 0 2
36780: ST_TO_ADDR
// if result then
36781: LD_VAR 0 2
36785: IFFALSE 36791
// exit ;
36787: POP
36788: POP
36789: GO 36795
// end ;
36791: GO 36760
36793: POP
36794: POP
// end ;
36795: LD_VAR 0 2
36799: RET
// export function FilterByTag ( units , tag ) ; begin
36800: LD_INT 0
36802: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36803: LD_ADDR_VAR 0 3
36807: PUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: LD_INT 120
36815: PUSH
36816: LD_VAR 0 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PPUSH
36825: CALL_OW 72
36829: ST_TO_ADDR
// end ;
36830: LD_VAR 0 3
36834: RET
// export function IsDriver ( un ) ; begin
36835: LD_INT 0
36837: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36838: LD_ADDR_VAR 0 2
36842: PUSH
36843: LD_VAR 0 1
36847: PUSH
36848: LD_INT 55
36850: PUSH
36851: EMPTY
36852: LIST
36853: PPUSH
36854: CALL_OW 69
36858: IN
36859: ST_TO_ADDR
// end ;
36860: LD_VAR 0 2
36864: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36865: LD_INT 0
36867: PPUSH
36868: PPUSH
// list := [ ] ;
36869: LD_ADDR_VAR 0 5
36873: PUSH
36874: EMPTY
36875: ST_TO_ADDR
// case d of 0 :
36876: LD_VAR 0 3
36880: PUSH
36881: LD_INT 0
36883: DOUBLE
36884: EQUAL
36885: IFTRUE 36889
36887: GO 37022
36889: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36890: LD_ADDR_VAR 0 5
36894: PUSH
36895: LD_VAR 0 1
36899: PUSH
36900: LD_INT 4
36902: MINUS
36903: PUSH
36904: LD_VAR 0 2
36908: PUSH
36909: LD_INT 4
36911: MINUS
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: PUSH
36921: LD_VAR 0 1
36925: PUSH
36926: LD_INT 3
36928: MINUS
36929: PUSH
36930: LD_VAR 0 2
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: PUSH
36943: LD_VAR 0 1
36947: PUSH
36948: LD_INT 4
36950: PLUS
36951: PUSH
36952: LD_VAR 0 2
36956: PUSH
36957: LD_INT 4
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: PUSH
36965: LD_VAR 0 1
36969: PUSH
36970: LD_INT 3
36972: PLUS
36973: PUSH
36974: LD_VAR 0 2
36978: PUSH
36979: LD_INT 3
36981: PLUS
36982: PUSH
36983: LD_INT 5
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: PUSH
36991: LD_VAR 0 1
36995: PUSH
36996: LD_VAR 0 2
37000: PUSH
37001: LD_INT 4
37003: PLUS
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// end ; 1 :
37020: GO 37720
37022: LD_INT 1
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37030
37028: GO 37163
37030: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37031: LD_ADDR_VAR 0 5
37035: PUSH
37036: LD_VAR 0 1
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_INT 4
37048: MINUS
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: PUSH
37058: LD_VAR 0 1
37062: PUSH
37063: LD_INT 3
37065: MINUS
37066: PUSH
37067: LD_VAR 0 2
37071: PUSH
37072: LD_INT 3
37074: MINUS
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: PUSH
37084: LD_VAR 0 1
37088: PUSH
37089: LD_INT 4
37091: MINUS
37092: PUSH
37093: LD_VAR 0 2
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: PUSH
37106: LD_VAR 0 1
37110: PUSH
37111: LD_VAR 0 2
37115: PUSH
37116: LD_INT 3
37118: PLUS
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: PUSH
37128: LD_VAR 0 1
37132: PUSH
37133: LD_INT 4
37135: PLUS
37136: PUSH
37137: LD_VAR 0 2
37141: PUSH
37142: LD_INT 4
37144: PLUS
37145: PUSH
37146: LD_INT 5
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
// end ; 2 :
37161: GO 37720
37163: LD_INT 2
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37300
37171: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37172: LD_ADDR_VAR 0 5
37176: PUSH
37177: LD_VAR 0 1
37181: PUSH
37182: LD_VAR 0 2
37186: PUSH
37187: LD_INT 3
37189: MINUS
37190: PUSH
37191: LD_INT 3
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: PUSH
37199: LD_VAR 0 1
37203: PUSH
37204: LD_INT 4
37206: PLUS
37207: PUSH
37208: LD_VAR 0 2
37212: PUSH
37213: LD_INT 4
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: PUSH
37221: LD_VAR 0 1
37225: PUSH
37226: LD_VAR 0 2
37230: PUSH
37231: LD_INT 4
37233: PLUS
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: LD_VAR 0 1
37247: PUSH
37248: LD_INT 3
37250: MINUS
37251: PUSH
37252: LD_VAR 0 2
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: PUSH
37265: LD_VAR 0 1
37269: PUSH
37270: LD_INT 4
37272: MINUS
37273: PUSH
37274: LD_VAR 0 2
37278: PUSH
37279: LD_INT 4
37281: MINUS
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// end ; 3 :
37298: GO 37720
37300: LD_INT 3
37302: DOUBLE
37303: EQUAL
37304: IFTRUE 37308
37306: GO 37441
37308: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37309: LD_ADDR_VAR 0 5
37313: PUSH
37314: LD_VAR 0 1
37318: PUSH
37319: LD_INT 3
37321: PLUS
37322: PUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_INT 4
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: PUSH
37336: LD_VAR 0 1
37340: PUSH
37341: LD_INT 4
37343: PLUS
37344: PUSH
37345: LD_VAR 0 2
37349: PUSH
37350: LD_INT 4
37352: PLUS
37353: PUSH
37354: LD_INT 5
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: PUSH
37362: LD_VAR 0 1
37366: PUSH
37367: LD_INT 4
37369: MINUS
37370: PUSH
37371: LD_VAR 0 2
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: PUSH
37384: LD_VAR 0 1
37388: PUSH
37389: LD_VAR 0 2
37393: PUSH
37394: LD_INT 4
37396: MINUS
37397: PUSH
37398: LD_INT 3
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: PUSH
37406: LD_VAR 0 1
37410: PUSH
37411: LD_INT 3
37413: MINUS
37414: PUSH
37415: LD_VAR 0 2
37419: PUSH
37420: LD_INT 3
37422: MINUS
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: ST_TO_ADDR
// end ; 4 :
37439: GO 37720
37441: LD_INT 4
37443: DOUBLE
37444: EQUAL
37445: IFTRUE 37449
37447: GO 37582
37449: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37450: LD_ADDR_VAR 0 5
37454: PUSH
37455: LD_VAR 0 1
37459: PUSH
37460: LD_VAR 0 2
37464: PUSH
37465: LD_INT 4
37467: PLUS
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: PUSH
37477: LD_VAR 0 1
37481: PUSH
37482: LD_INT 3
37484: PLUS
37485: PUSH
37486: LD_VAR 0 2
37490: PUSH
37491: LD_INT 3
37493: PLUS
37494: PUSH
37495: LD_INT 5
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: PUSH
37503: LD_VAR 0 1
37507: PUSH
37508: LD_INT 4
37510: PLUS
37511: PUSH
37512: LD_VAR 0 2
37516: PUSH
37517: LD_INT 4
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: PUSH
37525: LD_VAR 0 1
37529: PUSH
37530: LD_VAR 0 2
37534: PUSH
37535: LD_INT 3
37537: MINUS
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: PUSH
37547: LD_VAR 0 1
37551: PUSH
37552: LD_INT 4
37554: MINUS
37555: PUSH
37556: LD_VAR 0 2
37560: PUSH
37561: LD_INT 4
37563: MINUS
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// end ; 5 :
37580: GO 37720
37582: LD_INT 5
37584: DOUBLE
37585: EQUAL
37586: IFTRUE 37590
37588: GO 37719
37590: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37591: LD_ADDR_VAR 0 5
37595: PUSH
37596: LD_VAR 0 1
37600: PUSH
37601: LD_INT 4
37603: MINUS
37604: PUSH
37605: LD_VAR 0 2
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: PUSH
37618: LD_VAR 0 1
37622: PUSH
37623: LD_VAR 0 2
37627: PUSH
37628: LD_INT 4
37630: MINUS
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: PUSH
37640: LD_VAR 0 1
37644: PUSH
37645: LD_INT 4
37647: PLUS
37648: PUSH
37649: LD_VAR 0 2
37653: PUSH
37654: LD_INT 4
37656: PLUS
37657: PUSH
37658: LD_INT 5
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: PUSH
37666: LD_VAR 0 1
37670: PUSH
37671: LD_INT 3
37673: PLUS
37674: PUSH
37675: LD_VAR 0 2
37679: PUSH
37680: LD_INT 4
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: LD_VAR 0 1
37692: PUSH
37693: LD_VAR 0 2
37697: PUSH
37698: LD_INT 3
37700: PLUS
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
// end ; end ;
37717: GO 37720
37719: POP
// result := list ;
37720: LD_ADDR_VAR 0 4
37724: PUSH
37725: LD_VAR 0 5
37729: ST_TO_ADDR
// end ;
37730: LD_VAR 0 4
37734: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37735: LD_INT 0
37737: PPUSH
37738: PPUSH
37739: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37740: LD_VAR 0 1
37744: NOT
37745: PUSH
37746: LD_VAR 0 2
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: LD_INT 4
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: IN
37769: NOT
37770: OR
37771: IFFALSE 37775
// exit ;
37773: GO 37858
// tmp := [ ] ;
37775: LD_ADDR_VAR 0 5
37779: PUSH
37780: EMPTY
37781: ST_TO_ADDR
// for i in units do
37782: LD_ADDR_VAR 0 4
37786: PUSH
37787: LD_VAR 0 1
37791: PUSH
37792: FOR_IN
37793: IFFALSE 37827
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37795: LD_ADDR_VAR 0 5
37799: PUSH
37800: LD_VAR 0 5
37804: PPUSH
37805: LD_VAR 0 4
37809: PPUSH
37810: LD_VAR 0 2
37814: PPUSH
37815: CALL_OW 259
37819: PPUSH
37820: CALL 39231 0 2
37824: ST_TO_ADDR
37825: GO 37792
37827: POP
37828: POP
// if not tmp then
37829: LD_VAR 0 5
37833: NOT
37834: IFFALSE 37838
// exit ;
37836: GO 37858
// result := SortListByListDesc ( units , tmp ) ;
37838: LD_ADDR_VAR 0 3
37842: PUSH
37843: LD_VAR 0 1
37847: PPUSH
37848: LD_VAR 0 5
37852: PPUSH
37853: CALL_OW 77
37857: ST_TO_ADDR
// end ;
37858: LD_VAR 0 3
37862: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37863: LD_INT 0
37865: PPUSH
37866: PPUSH
37867: PPUSH
// result := false ;
37868: LD_ADDR_VAR 0 3
37872: PUSH
37873: LD_INT 0
37875: ST_TO_ADDR
// if not building then
37876: LD_VAR 0 2
37880: NOT
37881: IFFALSE 37885
// exit ;
37883: GO 38023
// x := GetX ( building ) ;
37885: LD_ADDR_VAR 0 4
37889: PUSH
37890: LD_VAR 0 2
37894: PPUSH
37895: CALL_OW 250
37899: ST_TO_ADDR
// y := GetY ( building ) ;
37900: LD_ADDR_VAR 0 5
37904: PUSH
37905: LD_VAR 0 2
37909: PPUSH
37910: CALL_OW 251
37914: ST_TO_ADDR
// if not x or not y then
37915: LD_VAR 0 4
37919: NOT
37920: PUSH
37921: LD_VAR 0 5
37925: NOT
37926: OR
37927: IFFALSE 37931
// exit ;
37929: GO 38023
// if GetTaskList ( unit ) then
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 437
37940: IFFALSE 38023
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37942: LD_STRING e
37944: PUSH
37945: LD_VAR 0 1
37949: PPUSH
37950: CALL_OW 437
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: EQUAL
37963: PUSH
37964: LD_VAR 0 4
37968: PUSH
37969: LD_VAR 0 1
37973: PPUSH
37974: CALL_OW 437
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: PUSH
37983: LD_INT 2
37985: ARRAY
37986: EQUAL
37987: AND
37988: PUSH
37989: LD_VAR 0 5
37993: PUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 437
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PUSH
38008: LD_INT 3
38010: ARRAY
38011: EQUAL
38012: AND
38013: IFFALSE 38023
// result := true end ;
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_INT 1
38022: ST_TO_ADDR
// end ;
38023: LD_VAR 0 3
38027: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38028: LD_INT 0
38030: PPUSH
// result := false ;
38031: LD_ADDR_VAR 0 4
38035: PUSH
38036: LD_INT 0
38038: ST_TO_ADDR
// if GetTaskList ( unit ) then
38039: LD_VAR 0 1
38043: PPUSH
38044: CALL_OW 437
38048: IFFALSE 38131
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38050: LD_STRING M
38052: PUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 437
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: PUSH
38067: LD_INT 1
38069: ARRAY
38070: EQUAL
38071: PUSH
38072: LD_VAR 0 2
38076: PUSH
38077: LD_VAR 0 1
38081: PPUSH
38082: CALL_OW 437
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: PUSH
38091: LD_INT 2
38093: ARRAY
38094: EQUAL
38095: AND
38096: PUSH
38097: LD_VAR 0 3
38101: PUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 437
38111: PUSH
38112: LD_INT 1
38114: ARRAY
38115: PUSH
38116: LD_INT 3
38118: ARRAY
38119: EQUAL
38120: AND
38121: IFFALSE 38131
// result := true ;
38123: LD_ADDR_VAR 0 4
38127: PUSH
38128: LD_INT 1
38130: ST_TO_ADDR
// end ; end ;
38131: LD_VAR 0 4
38135: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38136: LD_INT 0
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
// if not unit or not area then
38142: LD_VAR 0 1
38146: NOT
38147: PUSH
38148: LD_VAR 0 2
38152: NOT
38153: OR
38154: IFFALSE 38158
// exit ;
38156: GO 38334
// tmp := AreaToList ( area , i ) ;
38158: LD_ADDR_VAR 0 6
38162: PUSH
38163: LD_VAR 0 2
38167: PPUSH
38168: LD_VAR 0 5
38172: PPUSH
38173: CALL_OW 517
38177: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38178: LD_ADDR_VAR 0 5
38182: PUSH
38183: DOUBLE
38184: LD_INT 1
38186: DEC
38187: ST_TO_ADDR
38188: LD_VAR 0 6
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: PUSH
38197: FOR_TO
38198: IFFALSE 38332
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38200: LD_ADDR_VAR 0 7
38204: PUSH
38205: LD_VAR 0 6
38209: PUSH
38210: LD_INT 1
38212: ARRAY
38213: PUSH
38214: LD_VAR 0 5
38218: ARRAY
38219: PUSH
38220: LD_VAR 0 6
38224: PUSH
38225: LD_INT 2
38227: ARRAY
38228: PUSH
38229: LD_VAR 0 5
38233: ARRAY
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38239: LD_INT 92
38241: PUSH
38242: LD_VAR 0 7
38246: PUSH
38247: LD_INT 1
38249: ARRAY
38250: PUSH
38251: LD_VAR 0 7
38255: PUSH
38256: LD_INT 2
38258: ARRAY
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: PPUSH
38269: CALL_OW 69
38273: PUSH
38274: LD_INT 0
38276: EQUAL
38277: IFFALSE 38330
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38279: LD_VAR 0 1
38283: PPUSH
38284: LD_VAR 0 7
38288: PUSH
38289: LD_INT 1
38291: ARRAY
38292: PPUSH
38293: LD_VAR 0 7
38297: PUSH
38298: LD_INT 2
38300: ARRAY
38301: PPUSH
38302: LD_VAR 0 3
38306: PPUSH
38307: CALL_OW 48
// result := IsPlaced ( unit ) ;
38311: LD_ADDR_VAR 0 4
38315: PUSH
38316: LD_VAR 0 1
38320: PPUSH
38321: CALL_OW 305
38325: ST_TO_ADDR
// exit ;
38326: POP
38327: POP
38328: GO 38334
// end ; end ;
38330: GO 38197
38332: POP
38333: POP
// end ;
38334: LD_VAR 0 4
38338: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38339: LD_INT 0
38341: PPUSH
38342: PPUSH
38343: PPUSH
// if not side or side > 8 then
38344: LD_VAR 0 1
38348: NOT
38349: PUSH
38350: LD_VAR 0 1
38354: PUSH
38355: LD_INT 8
38357: GREATER
38358: OR
38359: IFFALSE 38363
// exit ;
38361: GO 38550
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38363: LD_ADDR_VAR 0 4
38367: PUSH
38368: LD_INT 22
38370: PUSH
38371: LD_VAR 0 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 21
38382: PUSH
38383: LD_INT 3
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PPUSH
38394: CALL_OW 69
38398: ST_TO_ADDR
// if not tmp then
38399: LD_VAR 0 4
38403: NOT
38404: IFFALSE 38408
// exit ;
38406: GO 38550
// enable_addtolog := true ;
38408: LD_ADDR_OWVAR 81
38412: PUSH
38413: LD_INT 1
38415: ST_TO_ADDR
// AddToLog ( [ ) ;
38416: LD_STRING [
38418: PPUSH
38419: CALL_OW 561
// for i in tmp do
38423: LD_ADDR_VAR 0 3
38427: PUSH
38428: LD_VAR 0 4
38432: PUSH
38433: FOR_IN
38434: IFFALSE 38541
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38436: LD_STRING [
38438: PUSH
38439: LD_VAR 0 3
38443: PPUSH
38444: CALL_OW 266
38448: STR
38449: PUSH
38450: LD_STRING , 
38452: STR
38453: PUSH
38454: LD_VAR 0 3
38458: PPUSH
38459: CALL_OW 250
38463: STR
38464: PUSH
38465: LD_STRING , 
38467: STR
38468: PUSH
38469: LD_VAR 0 3
38473: PPUSH
38474: CALL_OW 251
38478: STR
38479: PUSH
38480: LD_STRING , 
38482: STR
38483: PUSH
38484: LD_VAR 0 3
38488: PPUSH
38489: CALL_OW 254
38493: STR
38494: PUSH
38495: LD_STRING , 
38497: STR
38498: PUSH
38499: LD_VAR 0 3
38503: PPUSH
38504: LD_INT 1
38506: PPUSH
38507: CALL_OW 268
38511: STR
38512: PUSH
38513: LD_STRING , 
38515: STR
38516: PUSH
38517: LD_VAR 0 3
38521: PPUSH
38522: LD_INT 2
38524: PPUSH
38525: CALL_OW 268
38529: STR
38530: PUSH
38531: LD_STRING ],
38533: STR
38534: PPUSH
38535: CALL_OW 561
// end ;
38539: GO 38433
38541: POP
38542: POP
// AddToLog ( ]; ) ;
38543: LD_STRING ];
38545: PPUSH
38546: CALL_OW 561
// end ;
38550: LD_VAR 0 2
38554: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38555: LD_INT 0
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
// if not area or not rate or not max then
38562: LD_VAR 0 1
38566: NOT
38567: PUSH
38568: LD_VAR 0 2
38572: NOT
38573: OR
38574: PUSH
38575: LD_VAR 0 4
38579: NOT
38580: OR
38581: IFFALSE 38585
// exit ;
38583: GO 38774
// while 1 do
38585: LD_INT 1
38587: IFFALSE 38774
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38589: LD_ADDR_VAR 0 9
38593: PUSH
38594: LD_VAR 0 1
38598: PPUSH
38599: LD_INT 1
38601: PPUSH
38602: CALL_OW 287
38606: PUSH
38607: LD_INT 10
38609: MUL
38610: ST_TO_ADDR
// r := rate / 10 ;
38611: LD_ADDR_VAR 0 7
38615: PUSH
38616: LD_VAR 0 2
38620: PUSH
38621: LD_INT 10
38623: DIVREAL
38624: ST_TO_ADDR
// time := 1 1$00 ;
38625: LD_ADDR_VAR 0 8
38629: PUSH
38630: LD_INT 2100
38632: ST_TO_ADDR
// if amount < min then
38633: LD_VAR 0 9
38637: PUSH
38638: LD_VAR 0 3
38642: LESS
38643: IFFALSE 38661
// r := r * 2 else
38645: LD_ADDR_VAR 0 7
38649: PUSH
38650: LD_VAR 0 7
38654: PUSH
38655: LD_INT 2
38657: MUL
38658: ST_TO_ADDR
38659: GO 38687
// if amount > max then
38661: LD_VAR 0 9
38665: PUSH
38666: LD_VAR 0 4
38670: GREATER
38671: IFFALSE 38687
// r := r / 2 ;
38673: LD_ADDR_VAR 0 7
38677: PUSH
38678: LD_VAR 0 7
38682: PUSH
38683: LD_INT 2
38685: DIVREAL
38686: ST_TO_ADDR
// time := time / r ;
38687: LD_ADDR_VAR 0 8
38691: PUSH
38692: LD_VAR 0 8
38696: PUSH
38697: LD_VAR 0 7
38701: DIVREAL
38702: ST_TO_ADDR
// if time < 0 then
38703: LD_VAR 0 8
38707: PUSH
38708: LD_INT 0
38710: LESS
38711: IFFALSE 38728
// time := time * - 1 ;
38713: LD_ADDR_VAR 0 8
38717: PUSH
38718: LD_VAR 0 8
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: MUL
38727: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38728: LD_VAR 0 8
38732: PUSH
38733: LD_INT 35
38735: PPUSH
38736: LD_INT 875
38738: PPUSH
38739: CALL_OW 12
38743: PLUS
38744: PPUSH
38745: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38749: LD_INT 1
38751: PPUSH
38752: LD_INT 5
38754: PPUSH
38755: CALL_OW 12
38759: PPUSH
38760: LD_VAR 0 1
38764: PPUSH
38765: LD_INT 1
38767: PPUSH
38768: CALL_OW 55
// end ;
38772: GO 38585
// end ;
38774: LD_VAR 0 5
38778: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38779: LD_INT 0
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
// if not turrets or not factories then
38789: LD_VAR 0 1
38793: NOT
38794: PUSH
38795: LD_VAR 0 2
38799: NOT
38800: OR
38801: IFFALSE 38805
// exit ;
38803: GO 39112
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38805: LD_ADDR_VAR 0 10
38809: PUSH
38810: LD_INT 5
38812: PUSH
38813: LD_INT 6
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: LD_INT 4
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 5
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 24
38847: PUSH
38848: LD_INT 25
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 23
38857: PUSH
38858: LD_INT 27
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 42
38871: PUSH
38872: LD_INT 43
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 44
38881: PUSH
38882: LD_INT 46
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 45
38891: PUSH
38892: LD_INT 47
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// result := [ ] ;
38909: LD_ADDR_VAR 0 3
38913: PUSH
38914: EMPTY
38915: ST_TO_ADDR
// for i in turrets do
38916: LD_ADDR_VAR 0 4
38920: PUSH
38921: LD_VAR 0 1
38925: PUSH
38926: FOR_IN
38927: IFFALSE 39110
// begin nat := GetNation ( i ) ;
38929: LD_ADDR_VAR 0 7
38933: PUSH
38934: LD_VAR 0 4
38938: PPUSH
38939: CALL_OW 248
38943: ST_TO_ADDR
// weapon := 0 ;
38944: LD_ADDR_VAR 0 8
38948: PUSH
38949: LD_INT 0
38951: ST_TO_ADDR
// if not nat then
38952: LD_VAR 0 7
38956: NOT
38957: IFFALSE 38961
// continue ;
38959: GO 38926
// for j in list [ nat ] do
38961: LD_ADDR_VAR 0 5
38965: PUSH
38966: LD_VAR 0 10
38970: PUSH
38971: LD_VAR 0 7
38975: ARRAY
38976: PUSH
38977: FOR_IN
38978: IFFALSE 39019
// if GetBWeapon ( i ) = j [ 1 ] then
38980: LD_VAR 0 4
38984: PPUSH
38985: CALL_OW 269
38989: PUSH
38990: LD_VAR 0 5
38994: PUSH
38995: LD_INT 1
38997: ARRAY
38998: EQUAL
38999: IFFALSE 39017
// begin weapon := j [ 2 ] ;
39001: LD_ADDR_VAR 0 8
39005: PUSH
39006: LD_VAR 0 5
39010: PUSH
39011: LD_INT 2
39013: ARRAY
39014: ST_TO_ADDR
// break ;
39015: GO 39019
// end ;
39017: GO 38977
39019: POP
39020: POP
// if not weapon then
39021: LD_VAR 0 8
39025: NOT
39026: IFFALSE 39030
// continue ;
39028: GO 38926
// for k in factories do
39030: LD_ADDR_VAR 0 6
39034: PUSH
39035: LD_VAR 0 2
39039: PUSH
39040: FOR_IN
39041: IFFALSE 39106
// begin weapons := AvailableWeaponList ( k ) ;
39043: LD_ADDR_VAR 0 9
39047: PUSH
39048: LD_VAR 0 6
39052: PPUSH
39053: CALL_OW 478
39057: ST_TO_ADDR
// if not weapons then
39058: LD_VAR 0 9
39062: NOT
39063: IFFALSE 39067
// continue ;
39065: GO 39040
// if weapon in weapons then
39067: LD_VAR 0 8
39071: PUSH
39072: LD_VAR 0 9
39076: IN
39077: IFFALSE 39104
// begin result := [ i , weapon ] ;
39079: LD_ADDR_VAR 0 3
39083: PUSH
39084: LD_VAR 0 4
39088: PUSH
39089: LD_VAR 0 8
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: ST_TO_ADDR
// exit ;
39098: POP
39099: POP
39100: POP
39101: POP
39102: GO 39112
// end ; end ;
39104: GO 39040
39106: POP
39107: POP
// end ;
39108: GO 38926
39110: POP
39111: POP
// end ;
39112: LD_VAR 0 3
39116: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39117: LD_INT 0
39119: PPUSH
// if not side or side > 8 then
39120: LD_VAR 0 3
39124: NOT
39125: PUSH
39126: LD_VAR 0 3
39130: PUSH
39131: LD_INT 8
39133: GREATER
39134: OR
39135: IFFALSE 39139
// exit ;
39137: GO 39198
// if not range then
39139: LD_VAR 0 4
39143: NOT
39144: IFFALSE 39155
// range := - 12 ;
39146: LD_ADDR_VAR 0 4
39150: PUSH
39151: LD_INT 12
39153: NEG
39154: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39155: LD_VAR 0 1
39159: PPUSH
39160: LD_VAR 0 2
39164: PPUSH
39165: LD_VAR 0 3
39169: PPUSH
39170: LD_VAR 0 4
39174: PPUSH
39175: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39179: LD_VAR 0 1
39183: PPUSH
39184: LD_VAR 0 2
39188: PPUSH
39189: LD_VAR 0 3
39193: PPUSH
39194: CALL_OW 331
// end ;
39198: LD_VAR 0 5
39202: RET
// export function Video ( mode ) ; begin
39203: LD_INT 0
39205: PPUSH
// ingame_video = mode ;
39206: LD_ADDR_OWVAR 52
39210: PUSH
39211: LD_VAR 0 1
39215: ST_TO_ADDR
// interface_hidden = mode ;
39216: LD_ADDR_OWVAR 54
39220: PUSH
39221: LD_VAR 0 1
39225: ST_TO_ADDR
// end ;
39226: LD_VAR 0 2
39230: RET
// export function Join ( array , element ) ; begin
39231: LD_INT 0
39233: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39234: LD_ADDR_VAR 0 3
39238: PUSH
39239: LD_VAR 0 1
39243: PPUSH
39244: LD_VAR 0 1
39248: PUSH
39249: LD_INT 1
39251: PLUS
39252: PPUSH
39253: LD_VAR 0 2
39257: PPUSH
39258: CALL_OW 1
39262: ST_TO_ADDR
// end ;
39263: LD_VAR 0 3
39267: RET
// export function JoinUnion ( array , element ) ; begin
39268: LD_INT 0
39270: PPUSH
// result := array union element ;
39271: LD_ADDR_VAR 0 3
39275: PUSH
39276: LD_VAR 0 1
39280: PUSH
39281: LD_VAR 0 2
39285: UNION
39286: ST_TO_ADDR
// end ;
39287: LD_VAR 0 3
39291: RET
// export function GetBehemoths ( side ) ; begin
39292: LD_INT 0
39294: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39295: LD_ADDR_VAR 0 2
39299: PUSH
39300: LD_INT 22
39302: PUSH
39303: LD_VAR 0 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 31
39314: PUSH
39315: LD_INT 25
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PPUSH
39326: CALL_OW 69
39330: ST_TO_ADDR
// end ;
39331: LD_VAR 0 2
39335: RET
// export function Shuffle ( array ) ; var i , index ; begin
39336: LD_INT 0
39338: PPUSH
39339: PPUSH
39340: PPUSH
// result := [ ] ;
39341: LD_ADDR_VAR 0 2
39345: PUSH
39346: EMPTY
39347: ST_TO_ADDR
// if not array then
39348: LD_VAR 0 1
39352: NOT
39353: IFFALSE 39357
// exit ;
39355: GO 39456
// Randomize ;
39357: CALL_OW 10
// for i = array downto 1 do
39361: LD_ADDR_VAR 0 3
39365: PUSH
39366: DOUBLE
39367: LD_VAR 0 1
39371: INC
39372: ST_TO_ADDR
39373: LD_INT 1
39375: PUSH
39376: FOR_DOWNTO
39377: IFFALSE 39454
// begin index := rand ( 1 , array ) ;
39379: LD_ADDR_VAR 0 4
39383: PUSH
39384: LD_INT 1
39386: PPUSH
39387: LD_VAR 0 1
39391: PPUSH
39392: CALL_OW 12
39396: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39397: LD_ADDR_VAR 0 2
39401: PUSH
39402: LD_VAR 0 2
39406: PPUSH
39407: LD_VAR 0 2
39411: PUSH
39412: LD_INT 1
39414: PLUS
39415: PPUSH
39416: LD_VAR 0 1
39420: PUSH
39421: LD_VAR 0 4
39425: ARRAY
39426: PPUSH
39427: CALL_OW 2
39431: ST_TO_ADDR
// array := Delete ( array , index ) ;
39432: LD_ADDR_VAR 0 1
39436: PUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: LD_VAR 0 4
39446: PPUSH
39447: CALL_OW 3
39451: ST_TO_ADDR
// end ;
39452: GO 39376
39454: POP
39455: POP
// end ;
39456: LD_VAR 0 2
39460: RET
// export function GetBaseMaterials ( base ) ; begin
39461: LD_INT 0
39463: PPUSH
// result := [ 0 , 0 , 0 ] ;
39464: LD_ADDR_VAR 0 2
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: ST_TO_ADDR
// if not base then
39483: LD_VAR 0 1
39487: NOT
39488: IFFALSE 39492
// exit ;
39490: GO 39541
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39492: LD_ADDR_VAR 0 2
39496: PUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: LD_INT 1
39504: PPUSH
39505: CALL_OW 275
39509: PUSH
39510: LD_VAR 0 1
39514: PPUSH
39515: LD_INT 2
39517: PPUSH
39518: CALL_OW 275
39522: PUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_INT 3
39530: PPUSH
39531: CALL_OW 275
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: ST_TO_ADDR
// end ;
39541: LD_VAR 0 2
39545: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39546: LD_INT 0
39548: PPUSH
39549: PPUSH
// result := array ;
39550: LD_ADDR_VAR 0 3
39554: PUSH
39555: LD_VAR 0 1
39559: ST_TO_ADDR
// if size >= result then
39560: LD_VAR 0 2
39564: PUSH
39565: LD_VAR 0 3
39569: GREATEREQUAL
39570: IFFALSE 39574
// exit ;
39572: GO 39624
// if size then
39574: LD_VAR 0 2
39578: IFFALSE 39624
// for i := array downto size do
39580: LD_ADDR_VAR 0 4
39584: PUSH
39585: DOUBLE
39586: LD_VAR 0 1
39590: INC
39591: ST_TO_ADDR
39592: LD_VAR 0 2
39596: PUSH
39597: FOR_DOWNTO
39598: IFFALSE 39622
// result := Delete ( result , result ) ;
39600: LD_ADDR_VAR 0 3
39604: PUSH
39605: LD_VAR 0 3
39609: PPUSH
39610: LD_VAR 0 3
39614: PPUSH
39615: CALL_OW 3
39619: ST_TO_ADDR
39620: GO 39597
39622: POP
39623: POP
// end ;
39624: LD_VAR 0 3
39628: RET
// export function ComExit ( unit ) ; var tmp ; begin
39629: LD_INT 0
39631: PPUSH
39632: PPUSH
// if not IsInUnit ( unit ) then
39633: LD_VAR 0 1
39637: PPUSH
39638: CALL_OW 310
39642: NOT
39643: IFFALSE 39647
// exit ;
39645: GO 39707
// tmp := IsInUnit ( unit ) ;
39647: LD_ADDR_VAR 0 3
39651: PUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 310
39661: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39662: LD_VAR 0 3
39666: PPUSH
39667: CALL_OW 247
39671: PUSH
39672: LD_INT 2
39674: EQUAL
39675: IFFALSE 39688
// ComExitVehicle ( unit ) else
39677: LD_VAR 0 1
39681: PPUSH
39682: CALL_OW 121
39686: GO 39697
// ComExitBuilding ( unit ) ;
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 122
// result := tmp ;
39697: LD_ADDR_VAR 0 2
39701: PUSH
39702: LD_VAR 0 3
39706: ST_TO_ADDR
// end ;
39707: LD_VAR 0 2
39711: RET
// export function ComExitAll ( units ) ; var i ; begin
39712: LD_INT 0
39714: PPUSH
39715: PPUSH
// if not units then
39716: LD_VAR 0 1
39720: NOT
39721: IFFALSE 39725
// exit ;
39723: GO 39751
// for i in units do
39725: LD_ADDR_VAR 0 3
39729: PUSH
39730: LD_VAR 0 1
39734: PUSH
39735: FOR_IN
39736: IFFALSE 39749
// ComExit ( i ) ;
39738: LD_VAR 0 3
39742: PPUSH
39743: CALL 39629 0 1
39747: GO 39735
39749: POP
39750: POP
// end ;
39751: LD_VAR 0 2
39755: RET
// export function ResetHc ; begin
39756: LD_INT 0
39758: PPUSH
// InitHc ;
39759: CALL_OW 19
// hc_importance := 0 ;
39763: LD_ADDR_OWVAR 32
39767: PUSH
39768: LD_INT 0
39770: ST_TO_ADDR
// end ;
39771: LD_VAR 0 1
39775: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39776: LD_INT 0
39778: PPUSH
39779: PPUSH
39780: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39781: LD_ADDR_VAR 0 6
39785: PUSH
39786: LD_VAR 0 1
39790: PUSH
39791: LD_VAR 0 3
39795: PLUS
39796: PUSH
39797: LD_INT 2
39799: DIV
39800: ST_TO_ADDR
// if _x < 0 then
39801: LD_VAR 0 6
39805: PUSH
39806: LD_INT 0
39808: LESS
39809: IFFALSE 39826
// _x := _x * - 1 ;
39811: LD_ADDR_VAR 0 6
39815: PUSH
39816: LD_VAR 0 6
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: MUL
39825: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39826: LD_ADDR_VAR 0 7
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: LD_VAR 0 4
39840: PLUS
39841: PUSH
39842: LD_INT 2
39844: DIV
39845: ST_TO_ADDR
// if _y < 0 then
39846: LD_VAR 0 7
39850: PUSH
39851: LD_INT 0
39853: LESS
39854: IFFALSE 39871
// _y := _y * - 1 ;
39856: LD_ADDR_VAR 0 7
39860: PUSH
39861: LD_VAR 0 7
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: MUL
39870: ST_TO_ADDR
// result := [ _x , _y ] ;
39871: LD_ADDR_VAR 0 5
39875: PUSH
39876: LD_VAR 0 6
39880: PUSH
39881: LD_VAR 0 7
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// end ;
39890: LD_VAR 0 5
39894: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39895: LD_INT 0
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
// task := GetTaskList ( unit ) ;
39901: LD_ADDR_VAR 0 7
39905: PUSH
39906: LD_VAR 0 1
39910: PPUSH
39911: CALL_OW 437
39915: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39916: LD_VAR 0 7
39920: NOT
39921: PUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: LD_VAR 0 2
39931: PPUSH
39932: CALL_OW 308
39936: NOT
39937: AND
39938: IFFALSE 39942
// exit ;
39940: GO 40060
// if IsInArea ( unit , area ) then
39942: LD_VAR 0 1
39946: PPUSH
39947: LD_VAR 0 2
39951: PPUSH
39952: CALL_OW 308
39956: IFFALSE 39974
// begin ComMoveToArea ( unit , goAway ) ;
39958: LD_VAR 0 1
39962: PPUSH
39963: LD_VAR 0 3
39967: PPUSH
39968: CALL_OW 113
// exit ;
39972: GO 40060
// end ; if task [ 1 ] [ 1 ] <> M then
39974: LD_VAR 0 7
39978: PUSH
39979: LD_INT 1
39981: ARRAY
39982: PUSH
39983: LD_INT 1
39985: ARRAY
39986: PUSH
39987: LD_STRING M
39989: NONEQUAL
39990: IFFALSE 39994
// exit ;
39992: GO 40060
// x := task [ 1 ] [ 2 ] ;
39994: LD_ADDR_VAR 0 5
39998: PUSH
39999: LD_VAR 0 7
40003: PUSH
40004: LD_INT 1
40006: ARRAY
40007: PUSH
40008: LD_INT 2
40010: ARRAY
40011: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40012: LD_ADDR_VAR 0 6
40016: PUSH
40017: LD_VAR 0 7
40021: PUSH
40022: LD_INT 1
40024: ARRAY
40025: PUSH
40026: LD_INT 3
40028: ARRAY
40029: ST_TO_ADDR
// if InArea ( x , y , area ) then
40030: LD_VAR 0 5
40034: PPUSH
40035: LD_VAR 0 6
40039: PPUSH
40040: LD_VAR 0 2
40044: PPUSH
40045: CALL_OW 309
40049: IFFALSE 40060
// ComStop ( unit ) ;
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 141
// end ;
40060: LD_VAR 0 4
40064: RET
// export function Abs ( value ) ; begin
40065: LD_INT 0
40067: PPUSH
// result := value ;
40068: LD_ADDR_VAR 0 2
40072: PUSH
40073: LD_VAR 0 1
40077: ST_TO_ADDR
// if value < 0 then
40078: LD_VAR 0 1
40082: PUSH
40083: LD_INT 0
40085: LESS
40086: IFFALSE 40103
// result := value * - 1 ;
40088: LD_ADDR_VAR 0 2
40092: PUSH
40093: LD_VAR 0 1
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: MUL
40102: ST_TO_ADDR
// end ;
40103: LD_VAR 0 2
40107: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40108: LD_INT 0
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
// if not unit or not building then
40118: LD_VAR 0 1
40122: NOT
40123: PUSH
40124: LD_VAR 0 2
40128: NOT
40129: OR
40130: IFFALSE 40134
// exit ;
40132: GO 40360
// x := GetX ( building ) ;
40134: LD_ADDR_VAR 0 4
40138: PUSH
40139: LD_VAR 0 2
40143: PPUSH
40144: CALL_OW 250
40148: ST_TO_ADDR
// y := GetY ( building ) ;
40149: LD_ADDR_VAR 0 6
40153: PUSH
40154: LD_VAR 0 2
40158: PPUSH
40159: CALL_OW 251
40163: ST_TO_ADDR
// d := GetDir ( building ) ;
40164: LD_ADDR_VAR 0 8
40168: PUSH
40169: LD_VAR 0 2
40173: PPUSH
40174: CALL_OW 254
40178: ST_TO_ADDR
// r := 4 ;
40179: LD_ADDR_VAR 0 9
40183: PUSH
40184: LD_INT 4
40186: ST_TO_ADDR
// for i := 1 to 5 do
40187: LD_ADDR_VAR 0 10
40191: PUSH
40192: DOUBLE
40193: LD_INT 1
40195: DEC
40196: ST_TO_ADDR
40197: LD_INT 5
40199: PUSH
40200: FOR_TO
40201: IFFALSE 40358
// begin _x := ShiftX ( x , d , r + i ) ;
40203: LD_ADDR_VAR 0 5
40207: PUSH
40208: LD_VAR 0 4
40212: PPUSH
40213: LD_VAR 0 8
40217: PPUSH
40218: LD_VAR 0 9
40222: PUSH
40223: LD_VAR 0 10
40227: PLUS
40228: PPUSH
40229: CALL_OW 272
40233: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40234: LD_ADDR_VAR 0 7
40238: PUSH
40239: LD_VAR 0 6
40243: PPUSH
40244: LD_VAR 0 8
40248: PPUSH
40249: LD_VAR 0 9
40253: PUSH
40254: LD_VAR 0 10
40258: PLUS
40259: PPUSH
40260: CALL_OW 273
40264: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40265: LD_VAR 0 5
40269: PPUSH
40270: LD_VAR 0 7
40274: PPUSH
40275: CALL_OW 488
40279: PUSH
40280: LD_VAR 0 5
40284: PPUSH
40285: LD_VAR 0 7
40289: PPUSH
40290: CALL_OW 428
40294: PPUSH
40295: CALL_OW 247
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: IN
40310: NOT
40311: AND
40312: IFFALSE 40356
// begin ComMoveXY ( unit , _x , _y ) ;
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_VAR 0 5
40323: PPUSH
40324: LD_VAR 0 7
40328: PPUSH
40329: CALL_OW 111
// result := [ _x , _y ] ;
40333: LD_ADDR_VAR 0 3
40337: PUSH
40338: LD_VAR 0 5
40342: PUSH
40343: LD_VAR 0 7
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: ST_TO_ADDR
// exit ;
40352: POP
40353: POP
40354: GO 40360
// end ; end ;
40356: GO 40200
40358: POP
40359: POP
// end ;
40360: LD_VAR 0 3
40364: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40365: LD_INT 0
40367: PPUSH
40368: PPUSH
40369: PPUSH
// result := 0 ;
40370: LD_ADDR_VAR 0 3
40374: PUSH
40375: LD_INT 0
40377: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40378: LD_VAR 0 1
40382: PUSH
40383: LD_INT 0
40385: LESS
40386: PUSH
40387: LD_VAR 0 1
40391: PUSH
40392: LD_INT 8
40394: GREATER
40395: OR
40396: PUSH
40397: LD_VAR 0 2
40401: PUSH
40402: LD_INT 0
40404: LESS
40405: OR
40406: PUSH
40407: LD_VAR 0 2
40411: PUSH
40412: LD_INT 8
40414: GREATER
40415: OR
40416: IFFALSE 40420
// exit ;
40418: GO 40495
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40420: LD_ADDR_VAR 0 4
40424: PUSH
40425: LD_INT 22
40427: PUSH
40428: LD_VAR 0 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PPUSH
40437: CALL_OW 69
40441: PUSH
40442: FOR_IN
40443: IFFALSE 40493
// begin un := UnitShoot ( i ) ;
40445: LD_ADDR_VAR 0 5
40449: PUSH
40450: LD_VAR 0 4
40454: PPUSH
40455: CALL_OW 504
40459: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40460: LD_VAR 0 5
40464: PPUSH
40465: CALL_OW 255
40469: PUSH
40470: LD_VAR 0 1
40474: EQUAL
40475: IFFALSE 40491
// begin result := un ;
40477: LD_ADDR_VAR 0 3
40481: PUSH
40482: LD_VAR 0 5
40486: ST_TO_ADDR
// exit ;
40487: POP
40488: POP
40489: GO 40495
// end ; end ;
40491: GO 40442
40493: POP
40494: POP
// end ;
40495: LD_VAR 0 3
40499: RET
// export function GetCargoBay ( units ) ; begin
40500: LD_INT 0
40502: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40503: LD_ADDR_VAR 0 2
40507: PUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 34
40518: PUSH
40519: LD_INT 12
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 34
40528: PUSH
40529: LD_INT 51
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 34
40538: PUSH
40539: LD_INT 32
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 34
40548: PUSH
40549: LD_INT 89
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 72
40567: ST_TO_ADDR
// end ;
40568: LD_VAR 0 2
40572: RET
// export function Negate ( value ) ; begin
40573: LD_INT 0
40575: PPUSH
// result := not value ;
40576: LD_ADDR_VAR 0 2
40580: PUSH
40581: LD_VAR 0 1
40585: NOT
40586: ST_TO_ADDR
// end ;
40587: LD_VAR 0 2
40591: RET
// export function Inc ( value ) ; begin
40592: LD_INT 0
40594: PPUSH
// result := value + 1 ;
40595: LD_ADDR_VAR 0 2
40599: PUSH
40600: LD_VAR 0 1
40604: PUSH
40605: LD_INT 1
40607: PLUS
40608: ST_TO_ADDR
// end ;
40609: LD_VAR 0 2
40613: RET
// export function Dec ( value ) ; begin
40614: LD_INT 0
40616: PPUSH
// result := value - 1 ;
40617: LD_ADDR_VAR 0 2
40621: PUSH
40622: LD_VAR 0 1
40626: PUSH
40627: LD_INT 1
40629: MINUS
40630: ST_TO_ADDR
// end ;
40631: LD_VAR 0 2
40635: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40636: LD_INT 0
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40646: LD_VAR 0 1
40650: PPUSH
40651: LD_VAR 0 2
40655: PPUSH
40656: CALL_OW 488
40660: NOT
40661: PUSH
40662: LD_VAR 0 3
40666: PPUSH
40667: LD_VAR 0 4
40671: PPUSH
40672: CALL_OW 488
40676: NOT
40677: OR
40678: IFFALSE 40691
// begin result := - 1 ;
40680: LD_ADDR_VAR 0 5
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: ST_TO_ADDR
// exit ;
40689: GO 40926
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40691: LD_ADDR_VAR 0 12
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: LD_VAR 0 2
40705: PPUSH
40706: LD_VAR 0 3
40710: PPUSH
40711: LD_VAR 0 4
40715: PPUSH
40716: CALL 39776 0 4
40720: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40721: LD_ADDR_VAR 0 11
40725: PUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: LD_VAR 0 2
40735: PPUSH
40736: LD_VAR 0 12
40740: PUSH
40741: LD_INT 1
40743: ARRAY
40744: PPUSH
40745: LD_VAR 0 12
40749: PUSH
40750: LD_INT 2
40752: ARRAY
40753: PPUSH
40754: CALL_OW 298
40758: ST_TO_ADDR
// distance := 9999 ;
40759: LD_ADDR_VAR 0 10
40763: PUSH
40764: LD_INT 9999
40766: ST_TO_ADDR
// for i := 0 to 5 do
40767: LD_ADDR_VAR 0 6
40771: PUSH
40772: DOUBLE
40773: LD_INT 0
40775: DEC
40776: ST_TO_ADDR
40777: LD_INT 5
40779: PUSH
40780: FOR_TO
40781: IFFALSE 40924
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40783: LD_ADDR_VAR 0 7
40787: PUSH
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_VAR 0 6
40797: PPUSH
40798: LD_VAR 0 11
40802: PPUSH
40803: CALL_OW 272
40807: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40808: LD_ADDR_VAR 0 8
40812: PUSH
40813: LD_VAR 0 2
40817: PPUSH
40818: LD_VAR 0 6
40822: PPUSH
40823: LD_VAR 0 11
40827: PPUSH
40828: CALL_OW 273
40832: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40833: LD_VAR 0 7
40837: PPUSH
40838: LD_VAR 0 8
40842: PPUSH
40843: CALL_OW 488
40847: NOT
40848: IFFALSE 40852
// continue ;
40850: GO 40780
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40852: LD_ADDR_VAR 0 9
40856: PUSH
40857: LD_VAR 0 12
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PPUSH
40866: LD_VAR 0 12
40870: PUSH
40871: LD_INT 2
40873: ARRAY
40874: PPUSH
40875: LD_VAR 0 7
40879: PPUSH
40880: LD_VAR 0 8
40884: PPUSH
40885: CALL_OW 298
40889: ST_TO_ADDR
// if tmp < distance then
40890: LD_VAR 0 9
40894: PUSH
40895: LD_VAR 0 10
40899: LESS
40900: IFFALSE 40922
// begin result := i ;
40902: LD_ADDR_VAR 0 5
40906: PUSH
40907: LD_VAR 0 6
40911: ST_TO_ADDR
// distance := tmp ;
40912: LD_ADDR_VAR 0 10
40916: PUSH
40917: LD_VAR 0 9
40921: ST_TO_ADDR
// end ; end ;
40922: GO 40780
40924: POP
40925: POP
// end ;
40926: LD_VAR 0 5
40930: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40931: LD_INT 0
40933: PPUSH
40934: PPUSH
// if not driver or not IsInUnit ( driver ) then
40935: LD_VAR 0 1
40939: NOT
40940: PUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 310
40950: NOT
40951: OR
40952: IFFALSE 40956
// exit ;
40954: GO 41046
// vehicle := IsInUnit ( driver ) ;
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_VAR 0 1
40965: PPUSH
40966: CALL_OW 310
40970: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40971: LD_VAR 0 1
40975: PPUSH
40976: LD_STRING \
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: PUSH
41006: LD_STRING E
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_VAR 0 3
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PPUSH
41042: CALL_OW 446
// end ;
41046: LD_VAR 0 2
41050: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41051: LD_INT 0
41053: PPUSH
41054: PPUSH
// if not driver or not IsInUnit ( driver ) then
41055: LD_VAR 0 1
41059: NOT
41060: PUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 310
41070: NOT
41071: OR
41072: IFFALSE 41076
// exit ;
41074: GO 41166
// vehicle := IsInUnit ( driver ) ;
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: CALL_OW 310
41090: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41091: LD_VAR 0 1
41095: PPUSH
41096: LD_STRING \
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: PUSH
41126: LD_STRING E
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_VAR 0 3
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PPUSH
41162: CALL_OW 447
// end ;
41166: LD_VAR 0 2
41170: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41171: LD_INT 0
41173: PPUSH
41174: PPUSH
41175: PPUSH
// tmp := [ ] ;
41176: LD_ADDR_VAR 0 5
41180: PUSH
41181: EMPTY
41182: ST_TO_ADDR
// for i in units do
41183: LD_ADDR_VAR 0 4
41187: PUSH
41188: LD_VAR 0 1
41192: PUSH
41193: FOR_IN
41194: IFFALSE 41232
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41196: LD_ADDR_VAR 0 5
41200: PUSH
41201: LD_VAR 0 5
41205: PPUSH
41206: LD_VAR 0 5
41210: PUSH
41211: LD_INT 1
41213: PLUS
41214: PPUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: CALL_OW 256
41224: PPUSH
41225: CALL_OW 2
41229: ST_TO_ADDR
41230: GO 41193
41232: POP
41233: POP
// if not tmp then
41234: LD_VAR 0 5
41238: NOT
41239: IFFALSE 41243
// exit ;
41241: GO 41291
// if asc then
41243: LD_VAR 0 2
41247: IFFALSE 41271
// result := SortListByListAsc ( units , tmp ) else
41249: LD_ADDR_VAR 0 3
41253: PUSH
41254: LD_VAR 0 1
41258: PPUSH
41259: LD_VAR 0 5
41263: PPUSH
41264: CALL_OW 76
41268: ST_TO_ADDR
41269: GO 41291
// result := SortListByListDesc ( units , tmp ) ;
41271: LD_ADDR_VAR 0 3
41275: PUSH
41276: LD_VAR 0 1
41280: PPUSH
41281: LD_VAR 0 5
41285: PPUSH
41286: CALL_OW 77
41290: ST_TO_ADDR
// end ;
41291: LD_VAR 0 3
41295: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41296: LD_INT 0
41298: PPUSH
41299: PPUSH
// task := GetTaskList ( mech ) ;
41300: LD_ADDR_VAR 0 4
41304: PUSH
41305: LD_VAR 0 1
41309: PPUSH
41310: CALL_OW 437
41314: ST_TO_ADDR
// if not task then
41315: LD_VAR 0 4
41319: NOT
41320: IFFALSE 41324
// exit ;
41322: GO 41366
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41324: LD_ADDR_VAR 0 3
41328: PUSH
41329: LD_VAR 0 4
41333: PUSH
41334: LD_INT 1
41336: ARRAY
41337: PUSH
41338: LD_INT 1
41340: ARRAY
41341: PUSH
41342: LD_STRING r
41344: EQUAL
41345: PUSH
41346: LD_VAR 0 4
41350: PUSH
41351: LD_INT 1
41353: ARRAY
41354: PUSH
41355: LD_INT 4
41357: ARRAY
41358: PUSH
41359: LD_VAR 0 2
41363: EQUAL
41364: AND
41365: ST_TO_ADDR
// end ;
41366: LD_VAR 0 3
41370: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41371: LD_INT 0
41373: PPUSH
// SetDir ( unit , d ) ;
41374: LD_VAR 0 1
41378: PPUSH
41379: LD_VAR 0 4
41383: PPUSH
41384: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41388: LD_ADDR_VAR 0 6
41392: PUSH
41393: LD_VAR 0 1
41397: PPUSH
41398: LD_VAR 0 2
41402: PPUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: LD_VAR 0 5
41412: PPUSH
41413: CALL_OW 48
41417: ST_TO_ADDR
// end ;
41418: LD_VAR 0 6
41422: RET
// export function ToNaturalNumber ( number ) ; begin
41423: LD_INT 0
41425: PPUSH
// result := number div 1 ;
41426: LD_ADDR_VAR 0 2
41430: PUSH
41431: LD_VAR 0 1
41435: PUSH
41436: LD_INT 1
41438: DIV
41439: ST_TO_ADDR
// if number < 0 then
41440: LD_VAR 0 1
41444: PUSH
41445: LD_INT 0
41447: LESS
41448: IFFALSE 41458
// result := 0 ;
41450: LD_ADDR_VAR 0 2
41454: PUSH
41455: LD_INT 0
41457: ST_TO_ADDR
// end ;
41458: LD_VAR 0 2
41462: RET
// export function SortByClass ( units , class ) ; var un ; begin
41463: LD_INT 0
41465: PPUSH
41466: PPUSH
// if not units or not class then
41467: LD_VAR 0 1
41471: NOT
41472: PUSH
41473: LD_VAR 0 2
41477: NOT
41478: OR
41479: IFFALSE 41483
// exit ;
41481: GO 41578
// result := [ ] ;
41483: LD_ADDR_VAR 0 3
41487: PUSH
41488: EMPTY
41489: ST_TO_ADDR
// for un in units do
41490: LD_ADDR_VAR 0 4
41494: PUSH
41495: LD_VAR 0 1
41499: PUSH
41500: FOR_IN
41501: IFFALSE 41576
// if GetClass ( un ) = class then
41503: LD_VAR 0 4
41507: PPUSH
41508: CALL_OW 257
41512: PUSH
41513: LD_VAR 0 2
41517: EQUAL
41518: IFFALSE 41545
// result := Insert ( result , 1 , un ) else
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_VAR 0 3
41529: PPUSH
41530: LD_INT 1
41532: PPUSH
41533: LD_VAR 0 4
41537: PPUSH
41538: CALL_OW 2
41542: ST_TO_ADDR
41543: GO 41574
// result := Replace ( result , result + 1 , un ) ;
41545: LD_ADDR_VAR 0 3
41549: PUSH
41550: LD_VAR 0 3
41554: PPUSH
41555: LD_VAR 0 3
41559: PUSH
41560: LD_INT 1
41562: PLUS
41563: PPUSH
41564: LD_VAR 0 4
41568: PPUSH
41569: CALL_OW 1
41573: ST_TO_ADDR
41574: GO 41500
41576: POP
41577: POP
// end ;
41578: LD_VAR 0 3
41582: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41583: LD_INT 0
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
// result := [ ] ;
41592: LD_ADDR_VAR 0 4
41596: PUSH
41597: EMPTY
41598: ST_TO_ADDR
// if x - r < 0 then
41599: LD_VAR 0 1
41603: PUSH
41604: LD_VAR 0 3
41608: MINUS
41609: PUSH
41610: LD_INT 0
41612: LESS
41613: IFFALSE 41625
// min_x := 0 else
41615: LD_ADDR_VAR 0 8
41619: PUSH
41620: LD_INT 0
41622: ST_TO_ADDR
41623: GO 41641
// min_x := x - r ;
41625: LD_ADDR_VAR 0 8
41629: PUSH
41630: LD_VAR 0 1
41634: PUSH
41635: LD_VAR 0 3
41639: MINUS
41640: ST_TO_ADDR
// if y - r < 0 then
41641: LD_VAR 0 2
41645: PUSH
41646: LD_VAR 0 3
41650: MINUS
41651: PUSH
41652: LD_INT 0
41654: LESS
41655: IFFALSE 41667
// min_y := 0 else
41657: LD_ADDR_VAR 0 7
41661: PUSH
41662: LD_INT 0
41664: ST_TO_ADDR
41665: GO 41683
// min_y := y - r ;
41667: LD_ADDR_VAR 0 7
41671: PUSH
41672: LD_VAR 0 2
41676: PUSH
41677: LD_VAR 0 3
41681: MINUS
41682: ST_TO_ADDR
// max_x := x + r ;
41683: LD_ADDR_VAR 0 9
41687: PUSH
41688: LD_VAR 0 1
41692: PUSH
41693: LD_VAR 0 3
41697: PLUS
41698: ST_TO_ADDR
// max_y := y + r ;
41699: LD_ADDR_VAR 0 10
41703: PUSH
41704: LD_VAR 0 2
41708: PUSH
41709: LD_VAR 0 3
41713: PLUS
41714: ST_TO_ADDR
// for _x = min_x to max_x do
41715: LD_ADDR_VAR 0 5
41719: PUSH
41720: DOUBLE
41721: LD_VAR 0 8
41725: DEC
41726: ST_TO_ADDR
41727: LD_VAR 0 9
41731: PUSH
41732: FOR_TO
41733: IFFALSE 41834
// for _y = min_y to max_y do
41735: LD_ADDR_VAR 0 6
41739: PUSH
41740: DOUBLE
41741: LD_VAR 0 7
41745: DEC
41746: ST_TO_ADDR
41747: LD_VAR 0 10
41751: PUSH
41752: FOR_TO
41753: IFFALSE 41830
// begin if not ValidHex ( _x , _y ) then
41755: LD_VAR 0 5
41759: PPUSH
41760: LD_VAR 0 6
41764: PPUSH
41765: CALL_OW 488
41769: NOT
41770: IFFALSE 41774
// continue ;
41772: GO 41752
// if GetResourceTypeXY ( _x , _y ) then
41774: LD_VAR 0 5
41778: PPUSH
41779: LD_VAR 0 6
41783: PPUSH
41784: CALL_OW 283
41788: IFFALSE 41828
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41790: LD_ADDR_VAR 0 4
41794: PUSH
41795: LD_VAR 0 4
41799: PPUSH
41800: LD_VAR 0 4
41804: PUSH
41805: LD_INT 1
41807: PLUS
41808: PPUSH
41809: LD_VAR 0 5
41813: PUSH
41814: LD_VAR 0 6
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PPUSH
41823: CALL_OW 1
41827: ST_TO_ADDR
// end ;
41828: GO 41752
41830: POP
41831: POP
41832: GO 41732
41834: POP
41835: POP
// end ;
41836: LD_VAR 0 4
41840: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41841: LD_INT 0
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
// if not units then
41851: LD_VAR 0 1
41855: NOT
41856: IFFALSE 41860
// exit ;
41858: GO 42388
// result := UnitFilter ( units , [ f_ok ] ) ;
41860: LD_ADDR_VAR 0 3
41864: PUSH
41865: LD_VAR 0 1
41869: PPUSH
41870: LD_INT 50
41872: PUSH
41873: EMPTY
41874: LIST
41875: PPUSH
41876: CALL_OW 72
41880: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41881: LD_ADDR_VAR 0 8
41885: PUSH
41886: LD_VAR 0 1
41890: PUSH
41891: LD_INT 1
41893: ARRAY
41894: PPUSH
41895: CALL_OW 255
41899: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41900: LD_ADDR_VAR 0 10
41904: PUSH
41905: LD_INT 29
41907: PUSH
41908: LD_INT 91
41910: PUSH
41911: LD_INT 49
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: ST_TO_ADDR
// if not result then
41919: LD_VAR 0 3
41923: NOT
41924: IFFALSE 41928
// exit ;
41926: GO 42388
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41928: LD_ADDR_VAR 0 5
41932: PUSH
41933: LD_INT 81
41935: PUSH
41936: LD_VAR 0 8
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PPUSH
41945: CALL_OW 69
41949: ST_TO_ADDR
// for i in result do
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_VAR 0 3
41959: PUSH
41960: FOR_IN
41961: IFFALSE 42386
// begin tag := GetTag ( i ) + 1 ;
41963: LD_ADDR_VAR 0 9
41967: PUSH
41968: LD_VAR 0 4
41972: PPUSH
41973: CALL_OW 110
41977: PUSH
41978: LD_INT 1
41980: PLUS
41981: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41982: LD_ADDR_VAR 0 7
41986: PUSH
41987: LD_VAR 0 4
41991: PPUSH
41992: CALL_OW 250
41996: PPUSH
41997: LD_VAR 0 4
42001: PPUSH
42002: CALL_OW 251
42006: PPUSH
42007: LD_INT 4
42009: PPUSH
42010: CALL 41583 0 3
42014: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42015: LD_VAR 0 4
42019: PPUSH
42020: CALL_OW 247
42024: PUSH
42025: LD_INT 2
42027: EQUAL
42028: PUSH
42029: LD_VAR 0 7
42033: PUSH
42034: LD_INT 2
42036: GREATER
42037: AND
42038: PUSH
42039: LD_VAR 0 4
42043: PPUSH
42044: CALL_OW 264
42048: PUSH
42049: LD_VAR 0 10
42053: IN
42054: NOT
42055: AND
42056: IFFALSE 42095
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42058: LD_VAR 0 4
42062: PPUSH
42063: LD_VAR 0 7
42067: PUSH
42068: LD_INT 1
42070: ARRAY
42071: PUSH
42072: LD_INT 1
42074: ARRAY
42075: PPUSH
42076: LD_VAR 0 7
42080: PUSH
42081: LD_INT 1
42083: ARRAY
42084: PUSH
42085: LD_INT 2
42087: ARRAY
42088: PPUSH
42089: CALL_OW 116
42093: GO 42384
// if path > tag then
42095: LD_VAR 0 2
42099: PUSH
42100: LD_VAR 0 9
42104: GREATER
42105: IFFALSE 42313
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42107: LD_ADDR_VAR 0 6
42111: PUSH
42112: LD_VAR 0 5
42116: PPUSH
42117: LD_INT 91
42119: PUSH
42120: LD_VAR 0 4
42124: PUSH
42125: LD_INT 8
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: PPUSH
42133: CALL_OW 72
42137: ST_TO_ADDR
// if nearEnemy then
42138: LD_VAR 0 6
42142: IFFALSE 42211
// begin if GetWeapon ( i ) = ru_time_lapser then
42144: LD_VAR 0 4
42148: PPUSH
42149: CALL_OW 264
42153: PUSH
42154: LD_INT 49
42156: EQUAL
42157: IFFALSE 42185
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42159: LD_VAR 0 4
42163: PPUSH
42164: LD_VAR 0 6
42168: PPUSH
42169: LD_VAR 0 4
42173: PPUSH
42174: CALL_OW 74
42178: PPUSH
42179: CALL_OW 112
42183: GO 42209
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42185: LD_VAR 0 4
42189: PPUSH
42190: LD_VAR 0 6
42194: PPUSH
42195: LD_VAR 0 4
42199: PPUSH
42200: CALL_OW 74
42204: PPUSH
42205: CALL 43459 0 2
// end else
42209: GO 42311
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42211: LD_VAR 0 4
42215: PPUSH
42216: LD_VAR 0 2
42220: PUSH
42221: LD_VAR 0 9
42225: ARRAY
42226: PUSH
42227: LD_INT 1
42229: ARRAY
42230: PPUSH
42231: LD_VAR 0 2
42235: PUSH
42236: LD_VAR 0 9
42240: ARRAY
42241: PUSH
42242: LD_INT 2
42244: ARRAY
42245: PPUSH
42246: CALL_OW 297
42250: PUSH
42251: LD_INT 6
42253: GREATER
42254: IFFALSE 42297
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42256: LD_VAR 0 4
42260: PPUSH
42261: LD_VAR 0 2
42265: PUSH
42266: LD_VAR 0 9
42270: ARRAY
42271: PUSH
42272: LD_INT 1
42274: ARRAY
42275: PPUSH
42276: LD_VAR 0 2
42280: PUSH
42281: LD_VAR 0 9
42285: ARRAY
42286: PUSH
42287: LD_INT 2
42289: ARRAY
42290: PPUSH
42291: CALL_OW 114
42295: GO 42311
// SetTag ( i , tag ) ;
42297: LD_VAR 0 4
42301: PPUSH
42302: LD_VAR 0 9
42306: PPUSH
42307: CALL_OW 109
// end else
42311: GO 42384
// if enemy then
42313: LD_VAR 0 5
42317: IFFALSE 42384
// begin if GetWeapon ( i ) = ru_time_lapser then
42319: LD_VAR 0 4
42323: PPUSH
42324: CALL_OW 264
42328: PUSH
42329: LD_INT 49
42331: EQUAL
42332: IFFALSE 42360
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42334: LD_VAR 0 4
42338: PPUSH
42339: LD_VAR 0 5
42343: PPUSH
42344: LD_VAR 0 4
42348: PPUSH
42349: CALL_OW 74
42353: PPUSH
42354: CALL_OW 112
42358: GO 42384
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42360: LD_VAR 0 4
42364: PPUSH
42365: LD_VAR 0 5
42369: PPUSH
42370: LD_VAR 0 4
42374: PPUSH
42375: CALL_OW 74
42379: PPUSH
42380: CALL 43459 0 2
// end ; end ;
42384: GO 41960
42386: POP
42387: POP
// end ;
42388: LD_VAR 0 3
42392: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42393: LD_INT 0
42395: PPUSH
42396: PPUSH
42397: PPUSH
// if not unit or IsInUnit ( unit ) then
42398: LD_VAR 0 1
42402: NOT
42403: PUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 310
42413: OR
42414: IFFALSE 42418
// exit ;
42416: GO 42509
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42418: LD_ADDR_VAR 0 4
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 250
42432: PPUSH
42433: LD_VAR 0 2
42437: PPUSH
42438: LD_INT 1
42440: PPUSH
42441: CALL_OW 272
42445: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42446: LD_ADDR_VAR 0 5
42450: PUSH
42451: LD_VAR 0 1
42455: PPUSH
42456: CALL_OW 251
42460: PPUSH
42461: LD_VAR 0 2
42465: PPUSH
42466: LD_INT 1
42468: PPUSH
42469: CALL_OW 273
42473: ST_TO_ADDR
// if ValidHex ( x , y ) then
42474: LD_VAR 0 4
42478: PPUSH
42479: LD_VAR 0 5
42483: PPUSH
42484: CALL_OW 488
42488: IFFALSE 42509
// ComTurnXY ( unit , x , y ) ;
42490: LD_VAR 0 1
42494: PPUSH
42495: LD_VAR 0 4
42499: PPUSH
42500: LD_VAR 0 5
42504: PPUSH
42505: CALL_OW 118
// end ;
42509: LD_VAR 0 3
42513: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42514: LD_INT 0
42516: PPUSH
42517: PPUSH
// result := false ;
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_INT 0
42525: ST_TO_ADDR
// if not units then
42526: LD_VAR 0 2
42530: NOT
42531: IFFALSE 42535
// exit ;
42533: GO 42580
// for i in units do
42535: LD_ADDR_VAR 0 4
42539: PUSH
42540: LD_VAR 0 2
42544: PUSH
42545: FOR_IN
42546: IFFALSE 42578
// if See ( side , i ) then
42548: LD_VAR 0 1
42552: PPUSH
42553: LD_VAR 0 4
42557: PPUSH
42558: CALL_OW 292
42562: IFFALSE 42576
// begin result := true ;
42564: LD_ADDR_VAR 0 3
42568: PUSH
42569: LD_INT 1
42571: ST_TO_ADDR
// exit ;
42572: POP
42573: POP
42574: GO 42580
// end ;
42576: GO 42545
42578: POP
42579: POP
// end ;
42580: LD_VAR 0 3
42584: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42585: LD_INT 0
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
// if not unit or not points then
42591: LD_VAR 0 1
42595: NOT
42596: PUSH
42597: LD_VAR 0 2
42601: NOT
42602: OR
42603: IFFALSE 42607
// exit ;
42605: GO 42697
// dist := 99999 ;
42607: LD_ADDR_VAR 0 5
42611: PUSH
42612: LD_INT 99999
42614: ST_TO_ADDR
// for i in points do
42615: LD_ADDR_VAR 0 4
42619: PUSH
42620: LD_VAR 0 2
42624: PUSH
42625: FOR_IN
42626: IFFALSE 42695
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42628: LD_ADDR_VAR 0 6
42632: PUSH
42633: LD_VAR 0 1
42637: PPUSH
42638: LD_VAR 0 4
42642: PUSH
42643: LD_INT 1
42645: ARRAY
42646: PPUSH
42647: LD_VAR 0 4
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: PPUSH
42656: CALL_OW 297
42660: ST_TO_ADDR
// if tmpDist < dist then
42661: LD_VAR 0 6
42665: PUSH
42666: LD_VAR 0 5
42670: LESS
42671: IFFALSE 42693
// begin result := i ;
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_VAR 0 4
42682: ST_TO_ADDR
// dist := tmpDist ;
42683: LD_ADDR_VAR 0 5
42687: PUSH
42688: LD_VAR 0 6
42692: ST_TO_ADDR
// end ; end ;
42693: GO 42625
42695: POP
42696: POP
// end ;
42697: LD_VAR 0 3
42701: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42702: LD_INT 0
42704: PPUSH
// uc_side := side ;
42705: LD_ADDR_OWVAR 20
42709: PUSH
42710: LD_VAR 0 1
42714: ST_TO_ADDR
// uc_nation := 3 ;
42715: LD_ADDR_OWVAR 21
42719: PUSH
42720: LD_INT 3
42722: ST_TO_ADDR
// vc_chassis := 25 ;
42723: LD_ADDR_OWVAR 37
42727: PUSH
42728: LD_INT 25
42730: ST_TO_ADDR
// vc_engine := engine_siberite ;
42731: LD_ADDR_OWVAR 39
42735: PUSH
42736: LD_INT 3
42738: ST_TO_ADDR
// vc_control := control_computer ;
42739: LD_ADDR_OWVAR 38
42743: PUSH
42744: LD_INT 3
42746: ST_TO_ADDR
// vc_weapon := 59 ;
42747: LD_ADDR_OWVAR 40
42751: PUSH
42752: LD_INT 59
42754: ST_TO_ADDR
// result := CreateVehicle ;
42755: LD_ADDR_VAR 0 5
42759: PUSH
42760: CALL_OW 45
42764: ST_TO_ADDR
// SetDir ( result , d ) ;
42765: LD_VAR 0 5
42769: PPUSH
42770: LD_VAR 0 4
42774: PPUSH
42775: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42779: LD_VAR 0 5
42783: PPUSH
42784: LD_VAR 0 2
42788: PPUSH
42789: LD_VAR 0 3
42793: PPUSH
42794: LD_INT 0
42796: PPUSH
42797: CALL_OW 48
// end ;
42801: LD_VAR 0 5
42805: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42806: LD_INT 0
42808: PPUSH
42809: PPUSH
42810: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42811: LD_ADDR_VAR 0 2
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42834: LD_VAR 0 1
42838: NOT
42839: PUSH
42840: LD_VAR 0 1
42844: PPUSH
42845: CALL_OW 264
42849: PUSH
42850: LD_INT 12
42852: PUSH
42853: LD_INT 51
42855: PUSH
42856: LD_INT 32
42858: PUSH
42859: LD_INT 89
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: IN
42868: NOT
42869: OR
42870: IFFALSE 42874
// exit ;
42872: GO 42972
// for i := 1 to 3 do
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: DOUBLE
42880: LD_INT 1
42882: DEC
42883: ST_TO_ADDR
42884: LD_INT 3
42886: PUSH
42887: FOR_TO
42888: IFFALSE 42970
// begin tmp := GetCargo ( cargo , i ) ;
42890: LD_ADDR_VAR 0 4
42894: PUSH
42895: LD_VAR 0 1
42899: PPUSH
42900: LD_VAR 0 3
42904: PPUSH
42905: CALL_OW 289
42909: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42910: LD_ADDR_VAR 0 2
42914: PUSH
42915: LD_VAR 0 2
42919: PPUSH
42920: LD_VAR 0 3
42924: PPUSH
42925: LD_VAR 0 4
42929: PPUSH
42930: CALL_OW 1
42934: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42935: LD_ADDR_VAR 0 2
42939: PUSH
42940: LD_VAR 0 2
42944: PPUSH
42945: LD_INT 4
42947: PPUSH
42948: LD_VAR 0 2
42952: PUSH
42953: LD_INT 4
42955: ARRAY
42956: PUSH
42957: LD_VAR 0 4
42961: PLUS
42962: PPUSH
42963: CALL_OW 1
42967: ST_TO_ADDR
// end ;
42968: GO 42887
42970: POP
42971: POP
// end ;
42972: LD_VAR 0 2
42976: RET
// export function Length ( array ) ; begin
42977: LD_INT 0
42979: PPUSH
// result := array + 0 ;
42980: LD_ADDR_VAR 0 2
42984: PUSH
42985: LD_VAR 0 1
42989: PUSH
42990: LD_INT 0
42992: PLUS
42993: ST_TO_ADDR
// end ;
42994: LD_VAR 0 2
42998: RET
// export function PrepareArray ( array ) ; begin
42999: LD_INT 0
43001: PPUSH
// result := array diff 0 ;
43002: LD_ADDR_VAR 0 2
43006: PUSH
43007: LD_VAR 0 1
43011: PUSH
43012: LD_INT 0
43014: DIFF
43015: ST_TO_ADDR
// if not result [ 1 ] then
43016: LD_VAR 0 2
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: NOT
43025: IFFALSE 43045
// result := Delete ( result , 1 ) ;
43027: LD_ADDR_VAR 0 2
43031: PUSH
43032: LD_VAR 0 2
43036: PPUSH
43037: LD_INT 1
43039: PPUSH
43040: CALL_OW 3
43044: ST_TO_ADDR
// end ;
43045: LD_VAR 0 2
43049: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43050: LD_INT 0
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
// sibRocketRange := 25 ;
43056: LD_ADDR_VAR 0 6
43060: PUSH
43061: LD_INT 25
43063: ST_TO_ADDR
// result := false ;
43064: LD_ADDR_VAR 0 4
43068: PUSH
43069: LD_INT 0
43071: ST_TO_ADDR
// for i := 0 to 5 do
43072: LD_ADDR_VAR 0 5
43076: PUSH
43077: DOUBLE
43078: LD_INT 0
43080: DEC
43081: ST_TO_ADDR
43082: LD_INT 5
43084: PUSH
43085: FOR_TO
43086: IFFALSE 43153
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43088: LD_VAR 0 1
43092: PPUSH
43093: LD_VAR 0 5
43097: PPUSH
43098: LD_VAR 0 6
43102: PPUSH
43103: CALL_OW 272
43107: PPUSH
43108: LD_VAR 0 2
43112: PPUSH
43113: LD_VAR 0 5
43117: PPUSH
43118: LD_VAR 0 6
43122: PPUSH
43123: CALL_OW 273
43127: PPUSH
43128: LD_VAR 0 3
43132: PPUSH
43133: CALL_OW 309
43137: IFFALSE 43151
// begin result := true ;
43139: LD_ADDR_VAR 0 4
43143: PUSH
43144: LD_INT 1
43146: ST_TO_ADDR
// exit ;
43147: POP
43148: POP
43149: GO 43155
// end ;
43151: GO 43085
43153: POP
43154: POP
// end ;
43155: LD_VAR 0 4
43159: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43160: LD_INT 0
43162: PPUSH
43163: PPUSH
43164: PPUSH
// if btype = b_depot then
43165: LD_VAR 0 2
43169: PUSH
43170: LD_INT 0
43172: EQUAL
43173: IFFALSE 43185
// begin result := true ;
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_INT 1
43182: ST_TO_ADDR
// exit ;
43183: GO 43301
// end ; pom := GetBase ( depot ) ;
43185: LD_ADDR_VAR 0 4
43189: PUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 274
43199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43200: LD_ADDR_VAR 0 5
43204: PUSH
43205: LD_VAR 0 2
43209: PPUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 248
43219: PPUSH
43220: CALL_OW 450
43224: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_VAR 0 4
43234: PPUSH
43235: LD_INT 1
43237: PPUSH
43238: CALL_OW 275
43242: PUSH
43243: LD_VAR 0 5
43247: PUSH
43248: LD_INT 1
43250: ARRAY
43251: GREATEREQUAL
43252: PUSH
43253: LD_VAR 0 4
43257: PPUSH
43258: LD_INT 2
43260: PPUSH
43261: CALL_OW 275
43265: PUSH
43266: LD_VAR 0 5
43270: PUSH
43271: LD_INT 2
43273: ARRAY
43274: GREATEREQUAL
43275: AND
43276: PUSH
43277: LD_VAR 0 4
43281: PPUSH
43282: LD_INT 3
43284: PPUSH
43285: CALL_OW 275
43289: PUSH
43290: LD_VAR 0 5
43294: PUSH
43295: LD_INT 3
43297: ARRAY
43298: GREATEREQUAL
43299: AND
43300: ST_TO_ADDR
// end ;
43301: LD_VAR 0 3
43305: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43306: LD_INT 0
43308: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43309: LD_VAR 0 1
43313: PPUSH
43314: LD_VAR 0 2
43318: PPUSH
43319: LD_INT 0
43321: PPUSH
43322: LD_INT 0
43324: PPUSH
43325: LD_INT 1
43327: PPUSH
43328: LD_INT 0
43330: PPUSH
43331: CALL_OW 587
// end ;
43335: LD_VAR 0 3
43339: RET
// export function CenterOnNow ( unit ) ; begin
43340: LD_INT 0
43342: PPUSH
// result := IsInUnit ( unit ) ;
43343: LD_ADDR_VAR 0 2
43347: PUSH
43348: LD_VAR 0 1
43352: PPUSH
43353: CALL_OW 310
43357: ST_TO_ADDR
// if not result then
43358: LD_VAR 0 2
43362: NOT
43363: IFFALSE 43375
// result := unit ;
43365: LD_ADDR_VAR 0 2
43369: PUSH
43370: LD_VAR 0 1
43374: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43375: LD_VAR 0 1
43379: PPUSH
43380: CALL_OW 87
// end ;
43384: LD_VAR 0 2
43388: RET
// export function ComMoveHex ( unit , hex ) ; begin
43389: LD_INT 0
43391: PPUSH
// if not hex then
43392: LD_VAR 0 2
43396: NOT
43397: IFFALSE 43401
// exit ;
43399: GO 43454
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43401: LD_VAR 0 2
43405: PUSH
43406: LD_INT 1
43408: ARRAY
43409: PPUSH
43410: LD_VAR 0 2
43414: PUSH
43415: LD_INT 2
43417: ARRAY
43418: PPUSH
43419: CALL_OW 428
43423: IFFALSE 43427
// exit ;
43425: GO 43454
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43427: LD_VAR 0 1
43431: PPUSH
43432: LD_VAR 0 2
43436: PUSH
43437: LD_INT 1
43439: ARRAY
43440: PPUSH
43441: LD_VAR 0 2
43445: PUSH
43446: LD_INT 2
43448: ARRAY
43449: PPUSH
43450: CALL_OW 111
// end ;
43454: LD_VAR 0 3
43458: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43459: LD_INT 0
43461: PPUSH
43462: PPUSH
43463: PPUSH
// if not unit or not enemy then
43464: LD_VAR 0 1
43468: NOT
43469: PUSH
43470: LD_VAR 0 2
43474: NOT
43475: OR
43476: IFFALSE 43480
// exit ;
43478: GO 43604
// x := GetX ( enemy ) ;
43480: LD_ADDR_VAR 0 4
43484: PUSH
43485: LD_VAR 0 2
43489: PPUSH
43490: CALL_OW 250
43494: ST_TO_ADDR
// y := GetY ( enemy ) ;
43495: LD_ADDR_VAR 0 5
43499: PUSH
43500: LD_VAR 0 2
43504: PPUSH
43505: CALL_OW 251
43509: ST_TO_ADDR
// if ValidHex ( x , y ) then
43510: LD_VAR 0 4
43514: PPUSH
43515: LD_VAR 0 5
43519: PPUSH
43520: CALL_OW 488
43524: IFFALSE 43604
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43526: LD_VAR 0 2
43530: PPUSH
43531: CALL_OW 247
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: IN
43546: PUSH
43547: LD_VAR 0 1
43551: PPUSH
43552: CALL_OW 255
43556: PPUSH
43557: LD_VAR 0 2
43561: PPUSH
43562: CALL_OW 292
43566: OR
43567: IFFALSE 43585
// ComAttackUnit ( unit , enemy ) else
43569: LD_VAR 0 1
43573: PPUSH
43574: LD_VAR 0 2
43578: PPUSH
43579: CALL_OW 115
43583: GO 43604
// ComAgressiveMove ( unit , x , y ) ;
43585: LD_VAR 0 1
43589: PPUSH
43590: LD_VAR 0 4
43594: PPUSH
43595: LD_VAR 0 5
43599: PPUSH
43600: CALL_OW 114
// end ;
43604: LD_VAR 0 3
43608: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43609: LD_INT 0
43611: PPUSH
43612: PPUSH
43613: PPUSH
// list := AreaToList ( area , 0 ) ;
43614: LD_ADDR_VAR 0 5
43618: PUSH
43619: LD_VAR 0 1
43623: PPUSH
43624: LD_INT 0
43626: PPUSH
43627: CALL_OW 517
43631: ST_TO_ADDR
// if not list then
43632: LD_VAR 0 5
43636: NOT
43637: IFFALSE 43641
// exit ;
43639: GO 43771
// if all then
43641: LD_VAR 0 2
43645: IFFALSE 43733
// begin for i := 1 to list [ 1 ] do
43647: LD_ADDR_VAR 0 4
43651: PUSH
43652: DOUBLE
43653: LD_INT 1
43655: DEC
43656: ST_TO_ADDR
43657: LD_VAR 0 5
43661: PUSH
43662: LD_INT 1
43664: ARRAY
43665: PUSH
43666: FOR_TO
43667: IFFALSE 43729
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: LD_VAR 0 3
43678: PPUSH
43679: LD_VAR 0 3
43683: PUSH
43684: LD_INT 1
43686: PLUS
43687: PPUSH
43688: LD_VAR 0 5
43692: PUSH
43693: LD_INT 1
43695: ARRAY
43696: PUSH
43697: LD_VAR 0 4
43701: ARRAY
43702: PUSH
43703: LD_VAR 0 5
43707: PUSH
43708: LD_INT 2
43710: ARRAY
43711: PUSH
43712: LD_VAR 0 4
43716: ARRAY
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PPUSH
43722: CALL_OW 1
43726: ST_TO_ADDR
43727: GO 43666
43729: POP
43730: POP
// exit ;
43731: GO 43771
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43733: LD_ADDR_VAR 0 3
43737: PUSH
43738: LD_VAR 0 5
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PUSH
43747: LD_INT 1
43749: ARRAY
43750: PUSH
43751: LD_VAR 0 5
43755: PUSH
43756: LD_INT 2
43758: ARRAY
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: EMPTY
43769: LIST
43770: ST_TO_ADDR
// end ;
43771: LD_VAR 0 3
43775: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43776: LD_INT 0
43778: PPUSH
43779: PPUSH
// list := AreaToList ( area , 0 ) ;
43780: LD_ADDR_VAR 0 4
43784: PUSH
43785: LD_VAR 0 1
43789: PPUSH
43790: LD_INT 0
43792: PPUSH
43793: CALL_OW 517
43797: ST_TO_ADDR
// if not list then
43798: LD_VAR 0 4
43802: NOT
43803: IFFALSE 43807
// exit ;
43805: GO 43848
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_VAR 0 4
43816: PUSH
43817: LD_INT 1
43819: ARRAY
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: PUSH
43825: LD_VAR 0 4
43829: PUSH
43830: LD_INT 2
43832: ARRAY
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PUSH
43838: LD_VAR 0 2
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// end ;
43848: LD_VAR 0 3
43852: RET
// export function First ( array ) ; begin
43853: LD_INT 0
43855: PPUSH
// if not array then
43856: LD_VAR 0 1
43860: NOT
43861: IFFALSE 43865
// exit ;
43863: GO 43879
// result := array [ 1 ] ;
43865: LD_ADDR_VAR 0 2
43869: PUSH
43870: LD_VAR 0 1
43874: PUSH
43875: LD_INT 1
43877: ARRAY
43878: ST_TO_ADDR
// end ;
43879: LD_VAR 0 2
43883: RET
// export function Last ( array ) ; begin
43884: LD_INT 0
43886: PPUSH
// if not array then
43887: LD_VAR 0 1
43891: NOT
43892: IFFALSE 43896
// exit ;
43894: GO 43912
// result := array [ array ] ;
43896: LD_ADDR_VAR 0 2
43900: PUSH
43901: LD_VAR 0 1
43905: PUSH
43906: LD_VAR 0 1
43910: ARRAY
43911: ST_TO_ADDR
// end ;
43912: LD_VAR 0 2
43916: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43917: LD_INT 0
43919: PPUSH
43920: PPUSH
// result := [ ] ;
43921: LD_ADDR_VAR 0 5
43925: PUSH
43926: EMPTY
43927: ST_TO_ADDR
// if not array then
43928: LD_VAR 0 1
43932: NOT
43933: IFFALSE 43937
// exit ;
43935: GO 44049
// for i := 1 to array do
43937: LD_ADDR_VAR 0 6
43941: PUSH
43942: DOUBLE
43943: LD_INT 1
43945: DEC
43946: ST_TO_ADDR
43947: LD_VAR 0 1
43951: PUSH
43952: FOR_TO
43953: IFFALSE 44047
// if array [ i ] [ index ] = value then
43955: LD_VAR 0 1
43959: PUSH
43960: LD_VAR 0 6
43964: ARRAY
43965: PUSH
43966: LD_VAR 0 2
43970: ARRAY
43971: PUSH
43972: LD_VAR 0 3
43976: EQUAL
43977: IFFALSE 44045
// begin if indexColumn then
43979: LD_VAR 0 4
43983: IFFALSE 44019
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43985: LD_ADDR_VAR 0 5
43989: PUSH
43990: LD_VAR 0 5
43994: PPUSH
43995: LD_VAR 0 1
43999: PUSH
44000: LD_VAR 0 6
44004: ARRAY
44005: PUSH
44006: LD_VAR 0 4
44010: ARRAY
44011: PPUSH
44012: CALL 39231 0 2
44016: ST_TO_ADDR
44017: GO 44045
// result := Join ( result , array [ i ] ) ;
44019: LD_ADDR_VAR 0 5
44023: PUSH
44024: LD_VAR 0 5
44028: PPUSH
44029: LD_VAR 0 1
44033: PUSH
44034: LD_VAR 0 6
44038: ARRAY
44039: PPUSH
44040: CALL 39231 0 2
44044: ST_TO_ADDR
// end ;
44045: GO 43952
44047: POP
44048: POP
// end ;
44049: LD_VAR 0 5
44053: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44054: LD_INT 0
44056: PPUSH
// if not vehicles or not parkingPoint then
44057: LD_VAR 0 1
44061: NOT
44062: PUSH
44063: LD_VAR 0 2
44067: NOT
44068: OR
44069: IFFALSE 44073
// exit ;
44071: GO 44171
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44073: LD_ADDR_VAR 0 1
44077: PUSH
44078: LD_VAR 0 1
44082: PPUSH
44083: LD_INT 50
44085: PUSH
44086: EMPTY
44087: LIST
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 92
44094: PUSH
44095: LD_VAR 0 2
44099: PUSH
44100: LD_INT 1
44102: ARRAY
44103: PUSH
44104: LD_VAR 0 2
44108: PUSH
44109: LD_INT 2
44111: ARRAY
44112: PUSH
44113: LD_INT 8
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PPUSH
44130: CALL_OW 72
44134: ST_TO_ADDR
// if not vehicles then
44135: LD_VAR 0 1
44139: NOT
44140: IFFALSE 44144
// exit ;
44142: GO 44171
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44144: LD_VAR 0 1
44148: PPUSH
44149: LD_VAR 0 2
44153: PUSH
44154: LD_INT 1
44156: ARRAY
44157: PPUSH
44158: LD_VAR 0 2
44162: PUSH
44163: LD_INT 2
44165: ARRAY
44166: PPUSH
44167: CALL_OW 111
// end ;
44171: LD_VAR 0 3
44175: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44176: LD_INT 0
44178: PPUSH
44179: PPUSH
44180: PPUSH
// if not side or not area then
44181: LD_VAR 0 1
44185: NOT
44186: PUSH
44187: LD_VAR 0 2
44191: NOT
44192: OR
44193: IFFALSE 44197
// exit ;
44195: GO 44316
// tmp := AreaToList ( area , 0 ) ;
44197: LD_ADDR_VAR 0 5
44201: PUSH
44202: LD_VAR 0 2
44206: PPUSH
44207: LD_INT 0
44209: PPUSH
44210: CALL_OW 517
44214: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44215: LD_ADDR_VAR 0 4
44219: PUSH
44220: DOUBLE
44221: LD_INT 1
44223: DEC
44224: ST_TO_ADDR
44225: LD_VAR 0 5
44229: PUSH
44230: LD_INT 1
44232: ARRAY
44233: PUSH
44234: FOR_TO
44235: IFFALSE 44314
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44237: LD_VAR 0 5
44241: PUSH
44242: LD_INT 1
44244: ARRAY
44245: PUSH
44246: LD_VAR 0 4
44250: ARRAY
44251: PPUSH
44252: LD_VAR 0 5
44256: PUSH
44257: LD_INT 2
44259: ARRAY
44260: PUSH
44261: LD_VAR 0 4
44265: ARRAY
44266: PPUSH
44267: CALL_OW 351
44271: IFFALSE 44312
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44273: LD_VAR 0 5
44277: PUSH
44278: LD_INT 1
44280: ARRAY
44281: PUSH
44282: LD_VAR 0 4
44286: ARRAY
44287: PPUSH
44288: LD_VAR 0 5
44292: PUSH
44293: LD_INT 2
44295: ARRAY
44296: PUSH
44297: LD_VAR 0 4
44301: ARRAY
44302: PPUSH
44303: LD_VAR 0 1
44307: PPUSH
44308: CALL_OW 244
// end ;
44312: GO 44234
44314: POP
44315: POP
// end ;
44316: LD_VAR 0 3
44320: RET
