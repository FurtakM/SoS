// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 695 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := false ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// SetBName ( ar_depot , kaba ) ;
  64: LD_INT 1
  66: PPUSH
  67: LD_STRING kaba
  69: PPUSH
  70: CALL_OW 500
// InitHC_All ( ) ;
  74: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  78: LD_ADDR_VAR 0 2
  82: PUSH
  83: LD_INT 22
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 32
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: PPUSH
 107: CALL_OW 69
 111: PUSH
 112: FOR_IN
 113: IFFALSE 178
// begin PrepareSoldier ( false , 6 ) ;
 115: LD_INT 0
 117: PPUSH
 118: LD_INT 6
 120: PPUSH
 121: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 125: CALL_OW 44
 129: PPUSH
 130: LD_VAR 0 2
 134: PPUSH
 135: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 139: LD_VAR 0 2
 143: PPUSH
 144: LD_INT 25
 146: PUSH
 147: LD_INT 27
 149: PUSH
 150: LD_INT 28
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_VAR 0 2
 162: PUSH
 163: LD_INT 3
 165: MOD
 166: PUSH
 167: LD_INT 1
 169: PLUS
 170: ARRAY
 171: PPUSH
 172: CALL_OW 431
// end ;
 176: GO 112
 178: POP
 179: POP
// PlaceWeaponTurret ( HexInfo ( 129 , 61 ) , ar_radar ) ;
 180: LD_INT 129
 182: PPUSH
 183: LD_INT 61
 185: PPUSH
 186: CALL_OW 428
 190: PPUSH
 191: LD_INT 30
 193: PPUSH
 194: CALL_OW 431
// PrepareSoldier ( sex_male , 3 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 3
 203: PPUSH
 204: CALL_OW 381
// omarSol := CreateHuman ;
 208: LD_ADDR_EXP 8
 212: PUSH
 213: CALL_OW 44
 217: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 218: LD_EXP 8
 222: PPUSH
 223: LD_INT 1
 225: PPUSH
 226: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 230: LD_ADDR_VAR 0 4
 234: PUSH
 235: LD_INT 143
 237: PPUSH
 238: LD_INT 51
 240: PPUSH
 241: CALL_OW 428
 245: ST_TO_ADDR
// for i := 1 to 2 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 2
 258: PUSH
 259: FOR_TO
 260: IFFALSE 288
// begin PrepareMechanic ( false , 3 ) ;
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 3
 267: PPUSH
 268: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 272: CALL_OW 44
 276: PPUSH
 277: LD_VAR 0 4
 281: PPUSH
 282: CALL_OW 52
// end ;
 286: GO 259
 288: POP
 289: POP
// for i := 1 to 2 do
 290: LD_ADDR_VAR 0 2
 294: PUSH
 295: DOUBLE
 296: LD_INT 1
 298: DEC
 299: ST_TO_ADDR
 300: LD_INT 2
 302: PUSH
 303: FOR_TO
 304: IFFALSE 330
// begin PrepareEngineer ( false , 2 ) ;
 306: LD_INT 0
 308: PPUSH
 309: LD_INT 2
 311: PPUSH
 312: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 316: CALL_OW 44
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 303
 330: POP
 331: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 332: CALL_OW 44
 336: PPUSH
 337: LD_INT 164
 339: PPUSH
 340: LD_INT 80
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 350: CALL_OW 44
 354: PPUSH
 355: LD_INT 166
 357: PPUSH
 358: LD_INT 84
 360: PPUSH
 361: LD_INT 0
 363: PPUSH
 364: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 368: LD_ADDR_VAR 0 2
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 2
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 8
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 451
// for j := 1 to 3 do
 405: LD_ADDR_VAR 0 5
 409: PUSH
 410: DOUBLE
 411: LD_INT 1
 413: DEC
 414: ST_TO_ADDR
 415: LD_INT 3
 417: PUSH
 418: FOR_TO
 419: IFFALSE 447
// begin PrepareScientist ( false , 3 ) ;
 421: LD_INT 0
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 2
 440: PPUSH
 441: CALL_OW 52
// end ;
 445: GO 418
 447: POP
 448: POP
 449: GO 402
 451: POP
 452: POP
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 3
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 1522 0 3
 476: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Kaia
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 1522 0 3
 500: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 501: LD_INT 14
 503: PPUSH
 504: LD_INT 3
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 27
 512: PPUSH
 513: LD_INT 100
 515: PPUSH
 516: CALL 6424 0 5
// heikeVehicle := CreateVehicle ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 530: LD_EXP 6
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 149
 549: PPUSH
 550: LD_INT 59
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 560: LD_EXP 3
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL_OW 52
// uc_side := 5 ;
 584: LD_ADDR_OWVAR 20
 588: PUSH
 589: LD_INT 5
 591: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_STRING Omar
 599: PPUSH
 600: CALL_OW 25
 604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 605: LD_INT 14
 607: PPUSH
 608: LD_INT 3
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 27
 616: PPUSH
 617: LD_INT 100
 619: PPUSH
 620: CALL 6424 0 5
// omarVehicle := CreateVehicle ;
 624: LD_ADDR_EXP 7
 628: PUSH
 629: CALL_OW 45
 633: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 634: LD_EXP 4
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 646: LD_EXP 7
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 658: LD_EXP 7
 662: PPUSH
 663: LD_INT 132
 665: PPUSH
 666: LD_INT 83
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 676: LD_EXP 4
 680: PPUSH
 681: LD_EXP 7
 685: PPUSH
 686: CALL_OW 52
// end ; end_of_file
 690: LD_VAR 0 1
 694: RET
// export function Action ; var i ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
// Video ( true ) ;
 699: LD_INT 1
 701: PPUSH
 702: CALL 39566 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: LD_INT 30
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: PUSH
 758: FOR_IN
 759: IFFALSE 778
// SetSpecResearch ( i , 1500 , false ) ;
 761: LD_VAR 0 2
 765: PPUSH
 766: LD_INT 1500
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 486
 776: GO 758
 778: POP
 779: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 780: LD_INT 1
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_INT 2
 788: PPUSH
 789: LD_INT 32963
 791: NEG
 792: PPUSH
 793: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 797: LD_EXP 4
 801: PPUSH
 802: LD_INT 150
 804: PPUSH
 805: LD_INT 72
 807: PPUSH
 808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 812: LD_INT 35
 814: PPUSH
 815: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 819: LD_INT 150
 821: PPUSH
 822: LD_INT 72
 824: PPUSH
 825: CALL_OW 428
 829: IFFALSE 812
// ComExitBuilding ( omarSol ) ;
 831: LD_EXP 8
 835: PPUSH
 836: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 840: LD_EXP 8
 844: PPUSH
 845: LD_INT 150
 847: PPUSH
 848: LD_INT 69
 850: PPUSH
 851: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 855: LD_EXP 8
 859: PPUSH
 860: LD_EXP 4
 864: PPUSH
 865: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 869: LD_EXP 8
 873: PPUSH
 874: LD_EXP 4
 878: PPUSH
 879: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 892: LD_EXP 4
 896: PPUSH
 897: LD_INT 152
 899: PPUSH
 900: LD_INT 70
 902: PPUSH
 903: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 907: LD_INT 35
 909: PPUSH
 910: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 914: LD_EXP 4
 918: PPUSH
 919: LD_EXP 8
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 3
 931: LESS
 932: IFFALSE 907
// ComTurnUnit ( Omar , omarSol ) ;
 934: LD_EXP 4
 938: PPUSH
 939: LD_EXP 8
 943: PPUSH
 944: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 948: LD_EXP 3
 952: PPUSH
 953: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 149
 964: PPUSH
 965: LD_INT 68
 967: PPUSH
 968: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 972: LD_EXP 3
 976: PPUSH
 977: LD_EXP 4
 981: PPUSH
 982: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 986: LD_EXP 4
 990: PPUSH
 991: LD_STRING DO-Intro-1
 993: PPUSH
 994: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 998: LD_EXP 8
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 120
// wait ( 0 0$0.3 ) ;
1010: LD_INT 10
1012: PPUSH
1013: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
1017: LD_EXP 3
1021: PPUSH
1022: LD_STRING DH-Intro-2
1024: PPUSH
1025: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1029: LD_EXP 4
1033: PPUSH
1034: LD_EXP 3
1038: PPUSH
1039: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_STRING DO-Intro-3
1050: PPUSH
1051: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 152
1062: PPUSH
1063: LD_INT 58
1065: PPUSH
1066: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_INT 154
1077: PPUSH
1078: LD_INT 60
1080: PPUSH
1081: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1085: LD_EXP 4
1089: PPUSH
1090: LD_EXP 3
1094: PPUSH
1095: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1099: LD_EXP 3
1103: PPUSH
1104: LD_EXP 4
1108: PPUSH
1109: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1113: LD_INT 35
1115: PPUSH
1116: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1120: LD_EXP 3
1124: PPUSH
1125: LD_INT 152
1127: PPUSH
1128: LD_INT 58
1130: PPUSH
1131: CALL_OW 307
1135: IFFALSE 1154
1137: PUSH
1138: LD_EXP 4
1142: PPUSH
1143: LD_INT 154
1145: PPUSH
1146: LD_INT 60
1148: PPUSH
1149: CALL_OW 307
1153: AND
1154: IFFALSE 1113
// wait ( 0 0$0.3 ) ;
1156: LD_INT 10
1158: PPUSH
1159: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1163: LD_EXP 4
1167: PPUSH
1168: LD_STRING DO-Intro-4
1170: PPUSH
1171: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1175: LD_INT 18
1177: PPUSH
1178: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1182: LD_EXP 3
1186: PPUSH
1187: LD_STRING DH-Intro-5
1189: PPUSH
1190: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1194: LD_EXP 4
1198: PPUSH
1199: LD_STRING DO-Intro-6
1201: PPUSH
1202: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1206: LD_INT 10
1208: PPUSH
1209: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1213: LD_EXP 3
1217: PPUSH
1218: LD_STRING DH-Intro-7
1220: PPUSH
1221: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1225: LD_INT 7
1227: PPUSH
1228: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1232: LD_EXP 3
1236: PPUSH
1237: LD_STRING DH-Intro-8
1239: PPUSH
1240: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1244: LD_EXP 4
1248: PPUSH
1249: LD_STRING DO-Intro-9
1251: PPUSH
1252: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1256: LD_EXP 3
1260: PPUSH
1261: LD_STRING DH-Intro-10
1263: PPUSH
1264: CALL_OW 88
// if not Kaia then
1268: LD_EXP 5
1272: NOT
1273: IFFALSE 1289
// Say ( Heike , DH-Intro-11-Kaia ) else
1275: LD_EXP 3
1279: PPUSH
1280: LD_STRING DH-Intro-11-Kaia
1282: PPUSH
1283: CALL_OW 88
1287: GO 1301
// Say ( Heike , DH-Intro-11-Friends ) ;
1289: LD_EXP 3
1293: PPUSH
1294: LD_STRING DH-Intro-11-Friends
1296: PPUSH
1297: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1301: LD_EXP 4
1305: PPUSH
1306: LD_STRING DO-Intro-12
1308: PPUSH
1309: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1313: LD_EXP 3
1317: PPUSH
1318: LD_STRING DH-Intro-13
1320: PPUSH
1321: CALL_OW 88
// async ;
1325: ASYNC
// wait ( 0 0$0.2 ) ;
1326: LD_INT 7
1328: PPUSH
1329: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1333: LD_EXP 3
1337: PPUSH
1338: LD_EXP 6
1342: PPUSH
1343: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1347: LD_EXP 3
1351: PPUSH
1352: LD_INT 131
1354: PPUSH
1355: LD_INT 83
1357: PPUSH
1358: CALL_OW 171
// sync ;
1362: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1363: LD_EXP 4
1367: PPUSH
1368: LD_STRING DO-Intro-14
1370: PPUSH
1371: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1375: LD_EXP 4
1379: PPUSH
1380: LD_EXP 3
1384: PPUSH
1385: CALL_OW 112
// wait ( 0 0$2 ) ;
1389: LD_INT 70
1391: PPUSH
1392: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1396: LD_INT 1
1398: PPUSH
1399: LD_STRING %_cont
1401: PPUSH
1402: CALL_OW 340
// end ;
1406: LD_VAR 0 1
1410: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1411: LD_VAR 0 2
1415: PUSH
1416: LD_EXP 4
1420: EQUAL
1421: IFFALSE 1435
// SetClass ( Omar , class_desert_warior ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 11
1430: PPUSH
1431: CALL_OW 336
// end ; end_of_file
1435: PPOPN 2
1437: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1438: LD_INT 0
1440: PPUSH
1441: PPUSH
// if exist_mode then
1442: LD_VAR 0 2
1446: IFFALSE 1492
// begin unit := CreateCharacter ( prefix & ident ) ;
1448: LD_ADDR_VAR 0 5
1452: PUSH
1453: LD_VAR 0 3
1457: PUSH
1458: LD_VAR 0 1
1462: STR
1463: PPUSH
1464: CALL_OW 34
1468: ST_TO_ADDR
// if unit then
1469: LD_VAR 0 5
1473: IFFALSE 1490
// DeleteCharacters ( prefix & ident ) ;
1475: LD_VAR 0 3
1479: PUSH
1480: LD_VAR 0 1
1484: STR
1485: PPUSH
1486: CALL_OW 40
// end else
1490: GO 1507
// unit := NewCharacter ( ident ) ;
1492: LD_ADDR_VAR 0 5
1496: PUSH
1497: LD_VAR 0 1
1501: PPUSH
1502: CALL_OW 25
1506: ST_TO_ADDR
// result := unit ;
1507: LD_ADDR_VAR 0 4
1511: PUSH
1512: LD_VAR 0 5
1516: ST_TO_ADDR
// end ;
1517: LD_VAR 0 4
1521: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1522: LD_INT 0
1524: PPUSH
1525: PPUSH
// if exist_mode then
1526: LD_VAR 0 2
1530: IFFALSE 1555
// unit := CreateCharacter ( prefix & ident ) else
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_VAR 0 3
1541: PUSH
1542: LD_VAR 0 1
1546: STR
1547: PPUSH
1548: CALL_OW 34
1552: ST_TO_ADDR
1553: GO 1570
// unit := NewCharacter ( ident ) ;
1555: LD_ADDR_VAR 0 5
1559: PUSH
1560: LD_VAR 0 1
1564: PPUSH
1565: CALL_OW 25
1569: ST_TO_ADDR
// result := unit ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_VAR 0 5
1579: ST_TO_ADDR
// end ;
1580: LD_VAR 0 4
1584: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1585: LD_INT 0
1587: PPUSH
1588: PPUSH
// if not side or not nation then
1589: LD_VAR 0 1
1593: NOT
1594: IFTRUE 1603
1596: PUSH
1597: LD_VAR 0 2
1601: NOT
1602: OR
1603: IFFALSE 1607
// exit ;
1605: GO 2401
// case nation of nation_american :
1607: LD_VAR 0 2
1611: PUSH
1612: LD_INT 1
1614: DOUBLE
1615: EQUAL
1616: IFTRUE 1620
1618: GO 1842
1620: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: LD_INT 35
1628: PUSH
1629: LD_INT 45
1631: PUSH
1632: LD_INT 46
1634: PUSH
1635: LD_INT 47
1637: PUSH
1638: LD_INT 82
1640: PUSH
1641: LD_INT 83
1643: PUSH
1644: LD_INT 84
1646: PUSH
1647: LD_INT 85
1649: PUSH
1650: LD_INT 86
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: LD_INT 2
1658: PUSH
1659: LD_INT 6
1661: PUSH
1662: LD_INT 15
1664: PUSH
1665: LD_INT 16
1667: PUSH
1668: LD_INT 7
1670: PUSH
1671: LD_INT 12
1673: PUSH
1674: LD_INT 13
1676: PUSH
1677: LD_INT 10
1679: PUSH
1680: LD_INT 14
1682: PUSH
1683: LD_INT 20
1685: PUSH
1686: LD_INT 21
1688: PUSH
1689: LD_INT 22
1691: PUSH
1692: LD_INT 25
1694: PUSH
1695: LD_INT 32
1697: PUSH
1698: LD_INT 27
1700: PUSH
1701: LD_INT 36
1703: PUSH
1704: LD_INT 69
1706: PUSH
1707: LD_INT 39
1709: PUSH
1710: LD_INT 34
1712: PUSH
1713: LD_INT 40
1715: PUSH
1716: LD_INT 48
1718: PUSH
1719: LD_INT 49
1721: PUSH
1722: LD_INT 50
1724: PUSH
1725: LD_INT 51
1727: PUSH
1728: LD_INT 52
1730: PUSH
1731: LD_INT 53
1733: PUSH
1734: LD_INT 54
1736: PUSH
1737: LD_INT 55
1739: PUSH
1740: LD_INT 56
1742: PUSH
1743: LD_INT 57
1745: PUSH
1746: LD_INT 58
1748: PUSH
1749: LD_INT 59
1751: PUSH
1752: LD_INT 60
1754: PUSH
1755: LD_INT 61
1757: PUSH
1758: LD_INT 62
1760: PUSH
1761: LD_INT 80
1763: PUSH
1764: LD_INT 82
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 84
1772: PUSH
1773: LD_INT 85
1775: PUSH
1776: LD_INT 86
1778: PUSH
1779: LD_INT 90
1781: PUSH
1782: LD_INT 93
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: ST_TO_ADDR
1840: GO 2323
1842: LD_INT 2
1844: DOUBLE
1845: EQUAL
1846: IFTRUE 1850
1848: GO 2084
1850: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
1851: LD_ADDR_VAR 0 4
1855: PUSH
1856: LD_INT 35
1858: PUSH
1859: LD_INT 45
1861: PUSH
1862: LD_INT 46
1864: PUSH
1865: LD_INT 47
1867: PUSH
1868: LD_INT 82
1870: PUSH
1871: LD_INT 83
1873: PUSH
1874: LD_INT 84
1876: PUSH
1877: LD_INT 85
1879: PUSH
1880: LD_INT 87
1882: PUSH
1883: LD_INT 70
1885: PUSH
1886: LD_INT 1
1888: PUSH
1889: LD_INT 11
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: LD_INT 4
1897: PUSH
1898: LD_INT 5
1900: PUSH
1901: LD_INT 6
1903: PUSH
1904: LD_INT 15
1906: PUSH
1907: LD_INT 18
1909: PUSH
1910: LD_INT 7
1912: PUSH
1913: LD_INT 17
1915: PUSH
1916: LD_INT 8
1918: PUSH
1919: LD_INT 20
1921: PUSH
1922: LD_INT 21
1924: PUSH
1925: LD_INT 22
1927: PUSH
1928: LD_INT 72
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 69
1936: PUSH
1937: LD_INT 39
1939: PUSH
1940: LD_INT 40
1942: PUSH
1943: LD_INT 41
1945: PUSH
1946: LD_INT 42
1948: PUSH
1949: LD_INT 43
1951: PUSH
1952: LD_INT 48
1954: PUSH
1955: LD_INT 49
1957: PUSH
1958: LD_INT 50
1960: PUSH
1961: LD_INT 51
1963: PUSH
1964: LD_INT 52
1966: PUSH
1967: LD_INT 53
1969: PUSH
1970: LD_INT 54
1972: PUSH
1973: LD_INT 55
1975: PUSH
1976: LD_INT 56
1978: PUSH
1979: LD_INT 60
1981: PUSH
1982: LD_INT 61
1984: PUSH
1985: LD_INT 62
1987: PUSH
1988: LD_INT 66
1990: PUSH
1991: LD_INT 67
1993: PUSH
1994: LD_INT 68
1996: PUSH
1997: LD_INT 81
1999: PUSH
2000: LD_INT 82
2002: PUSH
2003: LD_INT 83
2005: PUSH
2006: LD_INT 84
2008: PUSH
2009: LD_INT 85
2011: PUSH
2012: LD_INT 87
2014: PUSH
2015: LD_INT 88
2017: PUSH
2018: LD_INT 92
2020: PUSH
2021: LD_INT 94
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: ST_TO_ADDR
2082: GO 2323
2084: LD_INT 3
2086: DOUBLE
2087: EQUAL
2088: IFTRUE 2092
2090: GO 2322
2092: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2093: LD_ADDR_VAR 0 4
2097: PUSH
2098: LD_INT 46
2100: PUSH
2101: LD_INT 47
2103: PUSH
2104: LD_INT 1
2106: PUSH
2107: LD_INT 2
2109: PUSH
2110: LD_INT 82
2112: PUSH
2113: LD_INT 83
2115: PUSH
2116: LD_INT 84
2118: PUSH
2119: LD_INT 85
2121: PUSH
2122: LD_INT 86
2124: PUSH
2125: LD_INT 11
2127: PUSH
2128: LD_INT 9
2130: PUSH
2131: LD_INT 20
2133: PUSH
2134: LD_INT 19
2136: PUSH
2137: LD_INT 21
2139: PUSH
2140: LD_INT 24
2142: PUSH
2143: LD_INT 22
2145: PUSH
2146: LD_INT 25
2148: PUSH
2149: LD_INT 28
2151: PUSH
2152: LD_INT 29
2154: PUSH
2155: LD_INT 30
2157: PUSH
2158: LD_INT 31
2160: PUSH
2161: LD_INT 37
2163: PUSH
2164: LD_INT 38
2166: PUSH
2167: LD_INT 32
2169: PUSH
2170: LD_INT 27
2172: PUSH
2173: LD_INT 33
2175: PUSH
2176: LD_INT 69
2178: PUSH
2179: LD_INT 39
2181: PUSH
2182: LD_INT 34
2184: PUSH
2185: LD_INT 40
2187: PUSH
2188: LD_INT 71
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 44
2196: PUSH
2197: LD_INT 48
2199: PUSH
2200: LD_INT 49
2202: PUSH
2203: LD_INT 50
2205: PUSH
2206: LD_INT 51
2208: PUSH
2209: LD_INT 52
2211: PUSH
2212: LD_INT 53
2214: PUSH
2215: LD_INT 54
2217: PUSH
2218: LD_INT 55
2220: PUSH
2221: LD_INT 56
2223: PUSH
2224: LD_INT 57
2226: PUSH
2227: LD_INT 58
2229: PUSH
2230: LD_INT 59
2232: PUSH
2233: LD_INT 63
2235: PUSH
2236: LD_INT 64
2238: PUSH
2239: LD_INT 65
2241: PUSH
2242: LD_INT 82
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 84
2250: PUSH
2251: LD_INT 85
2253: PUSH
2254: LD_INT 86
2256: PUSH
2257: LD_INT 89
2259: PUSH
2260: LD_INT 91
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: ST_TO_ADDR
2320: GO 2323
2322: POP
// if state > - 1 and state < 3 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 1
2330: NEG
2331: GREATER
2332: IFFALSE 2344
2334: PUSH
2335: LD_VAR 0 3
2339: PUSH
2340: LD_INT 3
2342: LESS
2343: AND
2344: IFFALSE 2401
// for i in result do
2346: LD_ADDR_VAR 0 5
2350: PUSH
2351: LD_VAR 0 4
2355: PUSH
2356: FOR_IN
2357: IFFALSE 2399
// if GetTech ( i , side ) <> state then
2359: LD_VAR 0 5
2363: PPUSH
2364: LD_VAR 0 1
2368: PPUSH
2369: CALL_OW 321
2373: PUSH
2374: LD_VAR 0 3
2378: NONEQUAL
2379: IFFALSE 2397
// result := result diff i ;
2381: LD_ADDR_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: PUSH
2391: LD_VAR 0 5
2395: DIFF
2396: ST_TO_ADDR
2397: GO 2356
2399: POP
2400: POP
// end ;
2401: LD_VAR 0 4
2405: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2406: LD_INT 0
2408: PPUSH
2409: PPUSH
2410: PPUSH
// result := true ;
2411: LD_ADDR_VAR 0 3
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2419: LD_ADDR_VAR 0 5
2423: PUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 480
2433: ST_TO_ADDR
// if not tmp then
2434: LD_VAR 0 5
2438: NOT
2439: IFFALSE 2443
// exit ;
2441: GO 2492
// for i in tmp do
2443: LD_ADDR_VAR 0 4
2447: PUSH
2448: LD_VAR 0 5
2452: PUSH
2453: FOR_IN
2454: IFFALSE 2490
// if GetTech ( i , side ) <> state_researched then
2456: LD_VAR 0 4
2460: PPUSH
2461: LD_VAR 0 1
2465: PPUSH
2466: CALL_OW 321
2470: PUSH
2471: LD_INT 2
2473: NONEQUAL
2474: IFFALSE 2488
// begin result := false ;
2476: LD_ADDR_VAR 0 3
2480: PUSH
2481: LD_INT 0
2483: ST_TO_ADDR
// exit ;
2484: POP
2485: POP
2486: GO 2492
// end ;
2488: GO 2453
2490: POP
2491: POP
// end ;
2492: LD_VAR 0 3
2496: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2497: LD_INT 0
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
2505: PPUSH
2506: PPUSH
2507: PPUSH
2508: PPUSH
2509: PPUSH
2510: PPUSH
2511: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2512: LD_VAR 0 1
2516: NOT
2517: IFTRUE 2534
2519: PUSH
2520: LD_VAR 0 1
2524: PPUSH
2525: CALL_OW 257
2529: PUSH
2530: LD_INT 9
2532: NONEQUAL
2533: OR
2534: IFFALSE 2538
// exit ;
2536: GO 3117
// side := GetSide ( unit ) ;
2538: LD_ADDR_VAR 0 9
2542: PUSH
2543: LD_VAR 0 1
2547: PPUSH
2548: CALL_OW 255
2552: ST_TO_ADDR
// tech_space := tech_spacanom ;
2553: LD_ADDR_VAR 0 12
2557: PUSH
2558: LD_INT 29
2560: ST_TO_ADDR
// tech_time := tech_taurad ;
2561: LD_ADDR_VAR 0 13
2565: PUSH
2566: LD_INT 28
2568: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2569: LD_ADDR_VAR 0 11
2573: PUSH
2574: LD_VAR 0 1
2578: PPUSH
2579: CALL_OW 310
2583: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2584: LD_VAR 0 11
2588: PPUSH
2589: CALL_OW 247
2593: PUSH
2594: LD_INT 2
2596: EQUAL
2597: IFFALSE 2601
// exit ;
2599: GO 3117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2601: LD_ADDR_VAR 0 8
2605: PUSH
2606: LD_INT 81
2608: PUSH
2609: LD_VAR 0 9
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 3
2620: PUSH
2621: LD_INT 21
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: ST_TO_ADDR
// if not tmp then
2644: LD_VAR 0 8
2648: NOT
2649: IFFALSE 2653
// exit ;
2651: GO 3117
// if in_unit then
2653: LD_VAR 0 11
2657: IFFALSE 2681
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2659: LD_ADDR_VAR 0 10
2663: PUSH
2664: LD_VAR 0 8
2668: PPUSH
2669: LD_VAR 0 11
2673: PPUSH
2674: CALL_OW 74
2678: ST_TO_ADDR
2679: GO 2701
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2681: LD_ADDR_VAR 0 10
2685: PUSH
2686: LD_VAR 0 8
2690: PPUSH
2691: LD_VAR 0 1
2695: PPUSH
2696: CALL_OW 74
2700: ST_TO_ADDR
// if not enemy then
2701: LD_VAR 0 10
2705: NOT
2706: IFFALSE 2710
// exit ;
2708: GO 3117
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2710: LD_VAR 0 11
2714: IFFALSE 2736
2716: PUSH
2717: LD_VAR 0 11
2721: PPUSH
2722: LD_VAR 0 10
2726: PPUSH
2727: CALL_OW 296
2731: PUSH
2732: LD_INT 13
2734: GREATER
2735: AND
2736: IFTRUE 2758
2738: PUSH
2739: LD_VAR 0 1
2743: PPUSH
2744: LD_VAR 0 10
2748: PPUSH
2749: CALL_OW 296
2753: PUSH
2754: LD_INT 12
2756: GREATER
2757: OR
2758: IFFALSE 2762
// exit ;
2760: GO 3117
// missile := [ 1 ] ;
2762: LD_ADDR_VAR 0 14
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: EMPTY
2771: LIST
2772: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2773: LD_VAR 0 9
2777: PPUSH
2778: LD_VAR 0 12
2782: PPUSH
2783: CALL_OW 325
2787: IFFALSE 2816
// missile := Replace ( missile , missile + 1 , 2 ) ;
2789: LD_ADDR_VAR 0 14
2793: PUSH
2794: LD_VAR 0 14
2798: PPUSH
2799: LD_VAR 0 14
2803: PUSH
2804: LD_INT 1
2806: PLUS
2807: PPUSH
2808: LD_INT 2
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2816: LD_VAR 0 9
2820: PPUSH
2821: LD_VAR 0 13
2825: PPUSH
2826: CALL_OW 325
2830: IFFALSE 2854
2832: PUSH
2833: LD_VAR 0 10
2837: PPUSH
2838: CALL_OW 255
2842: PPUSH
2843: LD_VAR 0 13
2847: PPUSH
2848: CALL_OW 325
2852: NOT
2853: AND
2854: IFFALSE 2883
// missile := Replace ( missile , missile + 1 , 3 ) ;
2856: LD_ADDR_VAR 0 14
2860: PUSH
2861: LD_VAR 0 14
2865: PPUSH
2866: LD_VAR 0 14
2870: PUSH
2871: LD_INT 1
2873: PLUS
2874: PPUSH
2875: LD_INT 3
2877: PPUSH
2878: CALL_OW 1
2882: ST_TO_ADDR
// if missile < 2 then
2883: LD_VAR 0 14
2887: PUSH
2888: LD_INT 2
2890: LESS
2891: IFFALSE 2895
// exit ;
2893: GO 3117
// x := GetX ( enemy ) ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: LD_VAR 0 10
2904: PPUSH
2905: CALL_OW 250
2909: ST_TO_ADDR
// y := GetY ( enemy ) ;
2910: LD_ADDR_VAR 0 5
2914: PUSH
2915: LD_VAR 0 10
2919: PPUSH
2920: CALL_OW 251
2924: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2925: LD_ADDR_VAR 0 6
2929: PUSH
2930: LD_VAR 0 4
2934: PUSH
2935: LD_INT 1
2937: NEG
2938: PPUSH
2939: LD_INT 1
2941: PPUSH
2942: CALL_OW 12
2946: PLUS
2947: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2948: LD_ADDR_VAR 0 7
2952: PUSH
2953: LD_VAR 0 5
2957: PUSH
2958: LD_INT 1
2960: NEG
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: CALL_OW 12
2969: PLUS
2970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2971: LD_VAR 0 6
2975: PPUSH
2976: LD_VAR 0 7
2980: PPUSH
2981: CALL_OW 488
2985: NOT
2986: IFFALSE 3008
// begin _x := x ;
2988: LD_ADDR_VAR 0 6
2992: PUSH
2993: LD_VAR 0 4
2997: ST_TO_ADDR
// _y := y ;
2998: LD_ADDR_VAR 0 7
3002: PUSH
3003: LD_VAR 0 5
3007: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3008: LD_ADDR_VAR 0 3
3012: PUSH
3013: LD_INT 1
3015: PPUSH
3016: LD_VAR 0 14
3020: PPUSH
3021: CALL_OW 12
3025: ST_TO_ADDR
// case i of 1 :
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 1
3033: DOUBLE
3034: EQUAL
3035: IFTRUE 3039
3037: GO 3056
3039: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3040: LD_VAR 0 1
3044: PPUSH
3045: LD_VAR 0 10
3049: PPUSH
3050: CALL_OW 115
3054: GO 3117
3056: LD_INT 2
3058: DOUBLE
3059: EQUAL
3060: IFTRUE 3064
3062: GO 3086
3064: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3065: LD_VAR 0 1
3069: PPUSH
3070: LD_VAR 0 6
3074: PPUSH
3075: LD_VAR 0 7
3079: PPUSH
3080: CALL_OW 153
3084: GO 3117
3086: LD_INT 3
3088: DOUBLE
3089: EQUAL
3090: IFTRUE 3094
3092: GO 3116
3094: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3095: LD_VAR 0 1
3099: PPUSH
3100: LD_VAR 0 6
3104: PPUSH
3105: LD_VAR 0 7
3109: PPUSH
3110: CALL_OW 154
3114: GO 3117
3116: POP
// end ;
3117: LD_VAR 0 2
3121: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
// if not unit or not building then
3130: LD_VAR 0 1
3134: NOT
3135: IFTRUE 3144
3137: PUSH
3138: LD_VAR 0 2
3142: NOT
3143: OR
3144: IFFALSE 3148
// exit ;
3146: GO 3306
// x := GetX ( building ) ;
3148: LD_ADDR_VAR 0 5
3152: PUSH
3153: LD_VAR 0 2
3157: PPUSH
3158: CALL_OW 250
3162: ST_TO_ADDR
// y := GetY ( building ) ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 2
3172: PPUSH
3173: CALL_OW 251
3177: ST_TO_ADDR
// for i := 0 to 5 do
3178: LD_ADDR_VAR 0 4
3182: PUSH
3183: DOUBLE
3184: LD_INT 0
3186: DEC
3187: ST_TO_ADDR
3188: LD_INT 5
3190: PUSH
3191: FOR_TO
3192: IFFALSE 3304
// begin _x := ShiftX ( x , i , 3 ) ;
3194: LD_ADDR_VAR 0 7
3198: PUSH
3199: LD_VAR 0 5
3203: PPUSH
3204: LD_VAR 0 4
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: CALL_OW 272
3216: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3217: LD_ADDR_VAR 0 8
3221: PUSH
3222: LD_VAR 0 6
3226: PPUSH
3227: LD_VAR 0 4
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: CALL_OW 273
3239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3240: LD_VAR 0 7
3244: PPUSH
3245: LD_VAR 0 8
3249: PPUSH
3250: CALL_OW 488
3254: NOT
3255: IFFALSE 3259
// continue ;
3257: GO 3191
// if HexInfo ( _x , _y ) = 0 then
3259: LD_VAR 0 7
3263: PPUSH
3264: LD_VAR 0 8
3268: PPUSH
3269: CALL_OW 428
3273: PUSH
3274: LD_INT 0
3276: EQUAL
3277: IFFALSE 3302
// begin ComMoveXY ( unit , _x , _y ) ;
3279: LD_VAR 0 1
3283: PPUSH
3284: LD_VAR 0 7
3288: PPUSH
3289: LD_VAR 0 8
3293: PPUSH
3294: CALL_OW 111
// exit ;
3298: POP
3299: POP
3300: GO 3306
// end ; end ;
3302: GO 3191
3304: POP
3305: POP
// end ;
3306: LD_VAR 0 3
3310: RET
// export function ScanBase ( side , base_area ) ; begin
3311: LD_INT 0
3313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_INT 81
3326: PUSH
3327: LD_VAR 0 1
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 70
3340: ST_TO_ADDR
// end ;
3341: LD_VAR 0 3
3345: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3346: LD_INT 0
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
// result := false ;
3352: LD_ADDR_VAR 0 2
3356: PUSH
3357: LD_INT 0
3359: ST_TO_ADDR
// side := GetSide ( unit ) ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: LD_VAR 0 1
3369: PPUSH
3370: CALL_OW 255
3374: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 248
3389: ST_TO_ADDR
// case nat of 1 :
3390: LD_VAR 0 4
3394: PUSH
3395: LD_INT 1
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3403
3401: GO 3414
3403: POP
// tech := tech_lassight ; 2 :
3404: LD_ADDR_VAR 0 5
3408: PUSH
3409: LD_INT 12
3411: ST_TO_ADDR
3412: GO 3453
3414: LD_INT 2
3416: DOUBLE
3417: EQUAL
3418: IFTRUE 3422
3420: GO 3433
3422: POP
// tech := tech_mortar ; 3 :
3423: LD_ADDR_VAR 0 5
3427: PUSH
3428: LD_INT 41
3430: ST_TO_ADDR
3431: GO 3453
3433: LD_INT 3
3435: DOUBLE
3436: EQUAL
3437: IFTRUE 3441
3439: GO 3452
3441: POP
// tech := tech_bazooka ; end ;
3442: LD_ADDR_VAR 0 5
3446: PUSH
3447: LD_INT 44
3449: ST_TO_ADDR
3450: GO 3453
3452: POP
// if Researched ( side , tech ) then
3453: LD_VAR 0 3
3457: PPUSH
3458: LD_VAR 0 5
3462: PPUSH
3463: CALL_OW 325
3467: IFFALSE 3494
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3469: LD_ADDR_VAR 0 2
3473: PUSH
3474: LD_INT 5
3476: PUSH
3477: LD_INT 8
3479: PUSH
3480: LD_INT 9
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: PUSH
3488: LD_VAR 0 4
3492: ARRAY
3493: ST_TO_ADDR
// end ;
3494: LD_VAR 0 2
3498: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3499: LD_INT 0
3501: PPUSH
3502: PPUSH
3503: PPUSH
// if not mines then
3504: LD_VAR 0 2
3508: NOT
3509: IFFALSE 3513
// exit ;
3511: GO 3657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3513: LD_ADDR_VAR 0 5
3517: PUSH
3518: LD_INT 81
3520: PUSH
3521: LD_VAR 0 1
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 3
3532: PUSH
3533: LD_INT 21
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PPUSH
3551: CALL_OW 69
3555: ST_TO_ADDR
// for i in mines do
3556: LD_ADDR_VAR 0 4
3560: PUSH
3561: LD_VAR 0 2
3565: PUSH
3566: FOR_IN
3567: IFFALSE 3655
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3569: LD_VAR 0 4
3573: PUSH
3574: LD_INT 1
3576: ARRAY
3577: PPUSH
3578: LD_VAR 0 4
3582: PUSH
3583: LD_INT 2
3585: ARRAY
3586: PPUSH
3587: CALL_OW 458
3591: NOT
3592: IFFALSE 3596
// continue ;
3594: GO 3566
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 4
3609: PUSH
3610: LD_INT 2
3612: ARRAY
3613: PPUSH
3614: CALL_OW 428
3618: PUSH
3619: LD_VAR 0 5
3623: IN
3624: IFFALSE 3653
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3626: LD_VAR 0 4
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 4
3639: PUSH
3640: LD_INT 2
3642: ARRAY
3643: PPUSH
3644: LD_VAR 0 1
3648: PPUSH
3649: CALL_OW 456
// end ;
3653: GO 3566
3655: POP
3656: POP
// end ;
3657: LD_VAR 0 3
3661: RET
// export function Count ( array ) ; begin
3662: LD_INT 0
3664: PPUSH
// result := array + 0 ;
3665: LD_ADDR_VAR 0 2
3669: PUSH
3670: LD_VAR 0 1
3674: PUSH
3675: LD_INT 0
3677: PLUS
3678: ST_TO_ADDR
// end ;
3679: LD_VAR 0 2
3683: RET
// export function IsEmpty ( building ) ; begin
3684: LD_INT 0
3686: PPUSH
// if not building then
3687: LD_VAR 0 1
3691: NOT
3692: IFFALSE 3696
// exit ;
3694: GO 3739
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: LD_VAR 0 1
3705: PUSH
3706: LD_INT 22
3708: PUSH
3709: LD_VAR 0 1
3713: PPUSH
3714: CALL_OW 255
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 58
3725: PUSH
3726: EMPTY
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PPUSH
3733: CALL_OW 69
3737: IN
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 2
3743: RET
// export function IsNotFull ( building ) ; var places ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
// if not building then
3748: LD_VAR 0 1
3752: NOT
3753: IFFALSE 3757
// exit ;
3755: GO 3785
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 3
3769: PUSH
3770: LD_INT 62
3772: PUSH
3773: EMPTY
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 72
3784: ST_TO_ADDR
// end ;
3785: LD_VAR 0 2
3789: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3790: LD_INT 0
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
// tmp := [ ] ;
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: EMPTY
3802: ST_TO_ADDR
// list := [ ] ;
3803: LD_ADDR_VAR 0 5
3807: PUSH
3808: EMPTY
3809: ST_TO_ADDR
// for i = 16 to 25 do
3810: LD_ADDR_VAR 0 4
3814: PUSH
3815: DOUBLE
3816: LD_INT 16
3818: DEC
3819: ST_TO_ADDR
3820: LD_INT 25
3822: PUSH
3823: FOR_TO
3824: IFFALSE 3897
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: LD_VAR 0 3
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_VAR 0 1
3843: PPUSH
3844: CALL_OW 255
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 91
3855: PUSH
3856: LD_VAR 0 1
3860: PUSH
3861: LD_INT 6
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 30
3871: PUSH
3872: LD_VAR 0 4
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: ADD
3894: ST_TO_ADDR
3895: GO 3823
3897: POP
3898: POP
// for i = 1 to tmp do
3899: LD_ADDR_VAR 0 4
3903: PUSH
3904: DOUBLE
3905: LD_INT 1
3907: DEC
3908: ST_TO_ADDR
3909: LD_VAR 0 3
3913: PUSH
3914: FOR_TO
3915: IFFALSE 4003
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3917: LD_ADDR_VAR 0 5
3921: PUSH
3922: LD_VAR 0 5
3926: PUSH
3927: LD_VAR 0 3
3931: PUSH
3932: LD_VAR 0 4
3936: ARRAY
3937: PPUSH
3938: CALL_OW 266
3942: PUSH
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 4
3952: ARRAY
3953: PPUSH
3954: CALL_OW 250
3958: PUSH
3959: LD_VAR 0 3
3963: PUSH
3964: LD_VAR 0 4
3968: ARRAY
3969: PPUSH
3970: CALL_OW 251
3974: PUSH
3975: LD_VAR 0 3
3979: PUSH
3980: LD_VAR 0 4
3984: ARRAY
3985: PPUSH
3986: CALL_OW 254
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: PUSH
3997: EMPTY
3998: LIST
3999: ADD
4000: ST_TO_ADDR
4001: GO 3914
4003: POP
4004: POP
// result := list ;
4005: LD_ADDR_VAR 0 2
4009: PUSH
4010: LD_VAR 0 5
4014: ST_TO_ADDR
// end ;
4015: LD_VAR 0 2
4019: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4020: LD_INT 0
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// if not factory then
4029: LD_VAR 0 1
4033: NOT
4034: IFFALSE 4038
// exit ;
4036: GO 4641
// if control = control_apeman then
4038: LD_VAR 0 4
4042: PUSH
4043: LD_INT 5
4045: EQUAL
4046: IFFALSE 4155
// begin tmp := UnitsInside ( factory ) ;
4048: LD_ADDR_VAR 0 8
4052: PUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: CALL_OW 313
4062: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4063: LD_VAR 0 8
4067: PPUSH
4068: LD_INT 25
4070: PUSH
4071: LD_INT 12
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PPUSH
4078: CALL_OW 72
4082: NOT
4083: IFFALSE 4093
// control := control_manual ;
4085: LD_ADDR_VAR 0 4
4089: PUSH
4090: LD_INT 1
4092: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4093: LD_ADDR_VAR 0 8
4097: PUSH
4098: LD_VAR 0 1
4102: PPUSH
4103: CALL 3790 0 1
4107: ST_TO_ADDR
// if tmp then
4108: LD_VAR 0 8
4112: IFFALSE 4155
// begin for i in tmp do
4114: LD_ADDR_VAR 0 7
4118: PUSH
4119: LD_VAR 0 8
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4153
// if i [ 1 ] = b_ext_radio then
4127: LD_VAR 0 7
4131: PUSH
4132: LD_INT 1
4134: ARRAY
4135: PUSH
4136: LD_INT 22
4138: EQUAL
4139: IFFALSE 4151
// begin control := control_remote ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_INT 2
4148: ST_TO_ADDR
// break ;
4149: GO 4153
// end ;
4151: GO 4124
4153: POP
4154: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4155: LD_VAR 0 1
4159: PPUSH
4160: LD_VAR 0 2
4164: PPUSH
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_VAR 0 5
4179: PPUSH
4180: CALL_OW 448
4184: IFFALSE 4219
// begin result := [ chassis , engine , control , weapon ] ;
4186: LD_ADDR_VAR 0 6
4190: PUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_VAR 0 3
4200: PUSH
4201: LD_VAR 0 4
4205: PUSH
4206: LD_VAR 0 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: ST_TO_ADDR
// exit ;
4217: GO 4641
// end ; _chassis := AvailableChassisList ( factory ) ;
4219: LD_ADDR_VAR 0 9
4223: PUSH
4224: LD_VAR 0 1
4228: PPUSH
4229: CALL_OW 475
4233: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4234: LD_ADDR_VAR 0 11
4238: PUSH
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 476
4248: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4249: LD_ADDR_VAR 0 12
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 477
4263: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4264: LD_ADDR_VAR 0 10
4268: PUSH
4269: LD_VAR 0 1
4273: PPUSH
4274: CALL_OW 478
4278: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4279: LD_VAR 0 9
4283: NOT
4284: IFTRUE 4293
4286: PUSH
4287: LD_VAR 0 11
4291: NOT
4292: OR
4293: IFTRUE 4302
4295: PUSH
4296: LD_VAR 0 12
4300: NOT
4301: OR
4302: IFTRUE 4311
4304: PUSH
4305: LD_VAR 0 10
4309: NOT
4310: OR
4311: IFFALSE 4346
// begin result := [ chassis , engine , control , weapon ] ;
4313: LD_ADDR_VAR 0 6
4317: PUSH
4318: LD_VAR 0 2
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_VAR 0 5
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: ST_TO_ADDR
// exit ;
4344: GO 4641
// end ; if not chassis in _chassis then
4346: LD_VAR 0 2
4350: PUSH
4351: LD_VAR 0 9
4355: IN
4356: NOT
4357: IFFALSE 4383
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4359: LD_ADDR_VAR 0 2
4363: PUSH
4364: LD_VAR 0 9
4368: PUSH
4369: LD_INT 1
4371: PPUSH
4372: LD_VAR 0 9
4376: PPUSH
4377: CALL_OW 12
4381: ARRAY
4382: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4383: LD_VAR 0 2
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL 4646 0 2
4397: NOT
4398: IFFALSE 4459
// repeat engine := _engine [ 1 ] ;
4400: LD_ADDR_VAR 0 3
4404: PUSH
4405: LD_VAR 0 11
4409: PUSH
4410: LD_INT 1
4412: ARRAY
4413: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4414: LD_ADDR_VAR 0 11
4418: PUSH
4419: LD_VAR 0 11
4423: PPUSH
4424: LD_INT 1
4426: PPUSH
4427: CALL_OW 3
4431: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4432: LD_VAR 0 2
4436: PPUSH
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL 4646 0 2
4446: IFTRUE 4457
4448: PUSH
4449: LD_VAR 0 11
4453: PUSH
4454: EMPTY
4455: EQUAL
4456: OR
4457: IFFALSE 4400
// if not control in _control then
4459: LD_VAR 0 4
4463: PUSH
4464: LD_VAR 0 12
4468: IN
4469: NOT
4470: IFFALSE 4496
// control := _control [ rand ( 1 , _control ) ] ;
4472: LD_ADDR_VAR 0 4
4476: PUSH
4477: LD_VAR 0 12
4481: PUSH
4482: LD_INT 1
4484: PPUSH
4485: LD_VAR 0 12
4489: PPUSH
4490: CALL_OW 12
4494: ARRAY
4495: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4496: LD_VAR 0 2
4500: PPUSH
4501: LD_VAR 0 5
4505: PPUSH
4506: CALL 4868 0 2
4510: NOT
4511: IFFALSE 4572
// repeat weapon := _weapon [ 1 ] ;
4513: LD_ADDR_VAR 0 5
4517: PUSH
4518: LD_VAR 0 10
4522: PUSH
4523: LD_INT 1
4525: ARRAY
4526: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4527: LD_ADDR_VAR 0 10
4531: PUSH
4532: LD_VAR 0 10
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 3
4544: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4545: LD_VAR 0 2
4549: PPUSH
4550: LD_VAR 0 5
4554: PPUSH
4555: CALL 4868 0 2
4559: IFTRUE 4570
4561: PUSH
4562: LD_VAR 0 10
4566: PUSH
4567: EMPTY
4568: EQUAL
4569: OR
4570: IFFALSE 4513
// result := [ ] ;
4572: LD_ADDR_VAR 0 6
4576: PUSH
4577: EMPTY
4578: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4579: LD_VAR 0 1
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: LD_VAR 0 3
4593: PPUSH
4594: LD_VAR 0 4
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL_OW 448
4608: IFFALSE 4641
// result := [ chassis , engine , control , weapon ] ;
4610: LD_ADDR_VAR 0 6
4614: PUSH
4615: LD_VAR 0 2
4619: PUSH
4620: LD_VAR 0 3
4624: PUSH
4625: LD_VAR 0 4
4629: PUSH
4630: LD_VAR 0 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: ST_TO_ADDR
// end ;
4641: LD_VAR 0 6
4645: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4646: LD_INT 0
4648: PPUSH
// if not chassis or not engine then
4649: LD_VAR 0 1
4653: NOT
4654: IFTRUE 4663
4656: PUSH
4657: LD_VAR 0 2
4661: NOT
4662: OR
4663: IFFALSE 4667
// exit ;
4665: GO 4863
// case engine of engine_solar :
4667: LD_VAR 0 2
4671: PUSH
4672: LD_INT 2
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4680
4678: GO 4718
4680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4681: LD_ADDR_VAR 0 3
4685: PUSH
4686: LD_INT 11
4688: PUSH
4689: LD_INT 12
4691: PUSH
4692: LD_INT 13
4694: PUSH
4695: LD_INT 14
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: LD_INT 2
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: ST_TO_ADDR
4716: GO 4847
4718: LD_INT 1
4720: DOUBLE
4721: EQUAL
4722: IFTRUE 4726
4724: GO 4788
4726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4727: LD_ADDR_VAR 0 3
4731: PUSH
4732: LD_INT 11
4734: PUSH
4735: LD_INT 12
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 14
4743: PUSH
4744: LD_INT 1
4746: PUSH
4747: LD_INT 2
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 4
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 23
4764: PUSH
4765: LD_INT 22
4767: PUSH
4768: LD_INT 24
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: ST_TO_ADDR
4786: GO 4847
4788: LD_INT 3
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4846
4796: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_INT 13
4804: PUSH
4805: LD_INT 14
4807: PUSH
4808: LD_INT 2
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: LD_INT 4
4816: PUSH
4817: LD_INT 5
4819: PUSH
4820: LD_INT 21
4822: PUSH
4823: LD_INT 22
4825: PUSH
4826: LD_INT 23
4828: PUSH
4829: LD_INT 24
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: ST_TO_ADDR
4844: GO 4847
4846: POP
// result := ( chassis in result ) ;
4847: LD_ADDR_VAR 0 3
4851: PUSH
4852: LD_VAR 0 1
4856: PUSH
4857: LD_VAR 0 3
4861: IN
4862: ST_TO_ADDR
// end ;
4863: LD_VAR 0 3
4867: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4868: LD_INT 0
4870: PPUSH
// if not chassis or not weapon then
4871: LD_VAR 0 1
4875: NOT
4876: IFTRUE 4885
4878: PUSH
4879: LD_VAR 0 2
4883: NOT
4884: OR
4885: IFFALSE 4889
// exit ;
4887: GO 5949
// case weapon of us_machine_gun :
4889: LD_VAR 0 2
4893: PUSH
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4932
4902: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: LD_INT 4
4919: PUSH
4920: LD_INT 5
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: ST_TO_ADDR
4930: GO 5933
4932: LD_INT 3
4934: DOUBLE
4935: EQUAL
4936: IFTRUE 4940
4938: GO 4970
4940: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: LD_INT 1
4948: PUSH
4949: LD_INT 2
4951: PUSH
4952: LD_INT 3
4954: PUSH
4955: LD_INT 4
4957: PUSH
4958: LD_INT 5
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: ST_TO_ADDR
4968: GO 5933
4970: LD_INT 11
4972: DOUBLE
4973: EQUAL
4974: IFTRUE 4978
4976: GO 5008
4978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4979: LD_ADDR_VAR 0 3
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: LD_INT 2
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: LD_INT 4
4995: PUSH
4996: LD_INT 5
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: ST_TO_ADDR
5006: GO 5933
5008: LD_INT 4
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5016
5014: GO 5042
5016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5017: LD_ADDR_VAR 0 3
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: LD_INT 4
5030: PUSH
5031: LD_INT 5
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
5040: GO 5933
5042: LD_INT 5
5044: DOUBLE
5045: EQUAL
5046: IFTRUE 5050
5048: GO 5076
5050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 3
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: LD_INT 5
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: ST_TO_ADDR
5074: GO 5933
5076: LD_INT 9
5078: DOUBLE
5079: EQUAL
5080: IFTRUE 5084
5082: GO 5110
5084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_INT 2
5092: PUSH
5093: LD_INT 3
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: LD_INT 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: ST_TO_ADDR
5108: GO 5933
5110: LD_INT 7
5112: DOUBLE
5113: EQUAL
5114: IFTRUE 5118
5116: GO 5144
5118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 3
5129: PUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: ST_TO_ADDR
5142: GO 5933
5144: LD_INT 12
5146: DOUBLE
5147: EQUAL
5148: IFTRUE 5152
5150: GO 5178
5152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5153: LD_ADDR_VAR 0 3
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 3
5163: PUSH
5164: LD_INT 4
5166: PUSH
5167: LD_INT 5
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: ST_TO_ADDR
5176: GO 5933
5178: LD_INT 13
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5212
5186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5187: LD_ADDR_VAR 0 3
5191: PUSH
5192: LD_INT 2
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: LD_INT 5
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: ST_TO_ADDR
5210: GO 5933
5212: LD_INT 14
5214: DOUBLE
5215: EQUAL
5216: IFTRUE 5220
5218: GO 5238
5220: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5221: LD_ADDR_VAR 0 3
5225: PUSH
5226: LD_INT 4
5228: PUSH
5229: LD_INT 5
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: ST_TO_ADDR
5236: GO 5933
5238: LD_INT 6
5240: DOUBLE
5241: EQUAL
5242: IFTRUE 5246
5244: GO 5264
5246: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5247: LD_ADDR_VAR 0 3
5251: PUSH
5252: LD_INT 4
5254: PUSH
5255: LD_INT 5
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: ST_TO_ADDR
5262: GO 5933
5264: LD_INT 10
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5290
5272: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5273: LD_ADDR_VAR 0 3
5277: PUSH
5278: LD_INT 4
5280: PUSH
5281: LD_INT 5
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: ST_TO_ADDR
5288: GO 5933
5290: LD_INT 22
5292: DOUBLE
5293: EQUAL
5294: IFTRUE 5298
5296: GO 5324
5298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5299: LD_ADDR_VAR 0 3
5303: PUSH
5304: LD_INT 11
5306: PUSH
5307: LD_INT 12
5309: PUSH
5310: LD_INT 13
5312: PUSH
5313: LD_INT 14
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: ST_TO_ADDR
5322: GO 5933
5324: LD_INT 23
5326: DOUBLE
5327: EQUAL
5328: IFTRUE 5332
5330: GO 5358
5332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: LD_INT 11
5340: PUSH
5341: LD_INT 12
5343: PUSH
5344: LD_INT 13
5346: PUSH
5347: LD_INT 14
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: ST_TO_ADDR
5356: GO 5933
5358: LD_INT 24
5360: DOUBLE
5361: EQUAL
5362: IFTRUE 5366
5364: GO 5392
5366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: LD_INT 11
5374: PUSH
5375: LD_INT 12
5377: PUSH
5378: LD_INT 13
5380: PUSH
5381: LD_INT 14
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: ST_TO_ADDR
5390: GO 5933
5392: LD_INT 30
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5426
5400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5401: LD_ADDR_VAR 0 3
5405: PUSH
5406: LD_INT 11
5408: PUSH
5409: LD_INT 12
5411: PUSH
5412: LD_INT 13
5414: PUSH
5415: LD_INT 14
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 5933
5426: LD_INT 25
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5452
5434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_INT 13
5442: PUSH
5443: LD_INT 14
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: ST_TO_ADDR
5450: GO 5933
5452: LD_INT 27
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5460
5458: GO 5478
5460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5461: LD_ADDR_VAR 0 3
5465: PUSH
5466: LD_INT 13
5468: PUSH
5469: LD_INT 14
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: ST_TO_ADDR
5476: GO 5933
5478: LD_INT 92
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5512
5486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: LD_INT 11
5494: PUSH
5495: LD_INT 12
5497: PUSH
5498: LD_INT 13
5500: PUSH
5501: LD_INT 14
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: ST_TO_ADDR
5510: GO 5933
5512: LD_INT 28
5514: DOUBLE
5515: EQUAL
5516: IFTRUE 5520
5518: GO 5538
5520: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 13
5528: PUSH
5529: LD_INT 14
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: ST_TO_ADDR
5536: GO 5933
5538: LD_INT 29
5540: DOUBLE
5541: EQUAL
5542: IFTRUE 5546
5544: GO 5564
5546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5547: LD_ADDR_VAR 0 3
5551: PUSH
5552: LD_INT 13
5554: PUSH
5555: LD_INT 14
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: ST_TO_ADDR
5562: GO 5933
5564: LD_INT 31
5566: DOUBLE
5567: EQUAL
5568: IFTRUE 5572
5570: GO 5590
5572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5573: LD_ADDR_VAR 0 3
5577: PUSH
5578: LD_INT 13
5580: PUSH
5581: LD_INT 14
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: ST_TO_ADDR
5588: GO 5933
5590: LD_INT 26
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5598
5596: GO 5616
5598: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 13
5606: PUSH
5607: LD_INT 14
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: ST_TO_ADDR
5614: GO 5933
5616: LD_INT 42
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5624
5622: GO 5650
5624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_INT 21
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_INT 23
5638: PUSH
5639: LD_INT 24
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: ST_TO_ADDR
5648: GO 5933
5650: LD_INT 43
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5658
5656: GO 5684
5658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5659: LD_ADDR_VAR 0 3
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 22
5669: PUSH
5670: LD_INT 23
5672: PUSH
5673: LD_INT 24
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: ST_TO_ADDR
5682: GO 5933
5684: LD_INT 44
5686: DOUBLE
5687: EQUAL
5688: IFTRUE 5692
5690: GO 5718
5692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_INT 21
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 24
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: ST_TO_ADDR
5716: GO 5933
5718: LD_INT 45
5720: DOUBLE
5721: EQUAL
5722: IFTRUE 5726
5724: GO 5752
5726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5727: LD_ADDR_VAR 0 3
5731: PUSH
5732: LD_INT 21
5734: PUSH
5735: LD_INT 22
5737: PUSH
5738: LD_INT 23
5740: PUSH
5741: LD_INT 24
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: ST_TO_ADDR
5750: GO 5933
5752: LD_INT 49
5754: DOUBLE
5755: EQUAL
5756: IFTRUE 5760
5758: GO 5786
5760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5761: LD_ADDR_VAR 0 3
5765: PUSH
5766: LD_INT 21
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 23
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: ST_TO_ADDR
5784: GO 5933
5786: LD_INT 51
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5820
5794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_INT 21
5802: PUSH
5803: LD_INT 22
5805: PUSH
5806: LD_INT 23
5808: PUSH
5809: LD_INT 24
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: ST_TO_ADDR
5818: GO 5933
5820: LD_INT 52
5822: DOUBLE
5823: EQUAL
5824: IFTRUE 5828
5826: GO 5854
5828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_INT 21
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 23
5842: PUSH
5843: LD_INT 24
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: ST_TO_ADDR
5852: GO 5933
5854: LD_INT 53
5856: DOUBLE
5857: EQUAL
5858: IFTRUE 5862
5860: GO 5880
5862: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: LD_INT 23
5870: PUSH
5871: LD_INT 24
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: ST_TO_ADDR
5878: GO 5933
5880: LD_INT 46
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5906
5888: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5889: LD_ADDR_VAR 0 3
5893: PUSH
5894: LD_INT 23
5896: PUSH
5897: LD_INT 24
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: ST_TO_ADDR
5904: GO 5933
5906: LD_INT 47
5908: DOUBLE
5909: EQUAL
5910: IFTRUE 5914
5912: GO 5932
5914: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5915: LD_ADDR_VAR 0 3
5919: PUSH
5920: LD_INT 23
5922: PUSH
5923: LD_INT 24
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: ST_TO_ADDR
5930: GO 5933
5932: POP
// result := ( chassis in result ) ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_VAR 0 1
5942: PUSH
5943: LD_VAR 0 3
5947: IN
5948: ST_TO_ADDR
// end ;
5949: LD_VAR 0 3
5953: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// result := array ;
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: LD_VAR 0 1
5972: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5973: LD_VAR 0 1
5977: NOT
5978: IFTRUE 5987
5980: PUSH
5981: LD_VAR 0 2
5985: NOT
5986: OR
5987: IFTRUE 5996
5989: PUSH
5990: LD_VAR 0 3
5994: NOT
5995: OR
5996: IFTRUE 6010
5998: PUSH
5999: LD_VAR 0 2
6003: PUSH
6004: LD_VAR 0 1
6008: GREATER
6009: OR
6010: IFTRUE 6024
6012: PUSH
6013: LD_VAR 0 3
6017: PUSH
6018: LD_VAR 0 1
6022: GREATER
6023: OR
6024: IFFALSE 6028
// exit ;
6026: GO 6324
// if direction then
6028: LD_VAR 0 4
6032: IFFALSE 6096
// begin d := 1 ;
6034: LD_ADDR_VAR 0 9
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// if i_from > i_to then
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 3
6051: GREATER
6052: IFFALSE 6078
// length := ( array - i_from ) + i_to else
6054: LD_ADDR_VAR 0 11
6058: PUSH
6059: LD_VAR 0 1
6063: PUSH
6064: LD_VAR 0 2
6068: MINUS
6069: PUSH
6070: LD_VAR 0 3
6074: PLUS
6075: ST_TO_ADDR
6076: GO 6094
// length := i_to - i_from ;
6078: LD_ADDR_VAR 0 11
6082: PUSH
6083: LD_VAR 0 3
6087: PUSH
6088: LD_VAR 0 2
6092: MINUS
6093: ST_TO_ADDR
// end else
6094: GO 6157
// begin d := - 1 ;
6096: LD_ADDR_VAR 0 9
6100: PUSH
6101: LD_INT 1
6103: NEG
6104: ST_TO_ADDR
// if i_from > i_to then
6105: LD_VAR 0 2
6109: PUSH
6110: LD_VAR 0 3
6114: GREATER
6115: IFFALSE 6135
// length := i_from - i_to else
6117: LD_ADDR_VAR 0 11
6121: PUSH
6122: LD_VAR 0 2
6126: PUSH
6127: LD_VAR 0 3
6131: MINUS
6132: ST_TO_ADDR
6133: GO 6157
// length := ( array - i_to ) + i_from ;
6135: LD_ADDR_VAR 0 11
6139: PUSH
6140: LD_VAR 0 1
6144: PUSH
6145: LD_VAR 0 3
6149: MINUS
6150: PUSH
6151: LD_VAR 0 2
6155: PLUS
6156: ST_TO_ADDR
// end ; if not length then
6157: LD_VAR 0 11
6161: NOT
6162: IFFALSE 6166
// exit ;
6164: GO 6324
// tmp := array ;
6166: LD_ADDR_VAR 0 10
6170: PUSH
6171: LD_VAR 0 1
6175: ST_TO_ADDR
// for i = 1 to length do
6176: LD_ADDR_VAR 0 6
6180: PUSH
6181: DOUBLE
6182: LD_INT 1
6184: DEC
6185: ST_TO_ADDR
6186: LD_VAR 0 11
6190: PUSH
6191: FOR_TO
6192: IFFALSE 6312
// begin for j = 1 to array do
6194: LD_ADDR_VAR 0 7
6198: PUSH
6199: DOUBLE
6200: LD_INT 1
6202: DEC
6203: ST_TO_ADDR
6204: LD_VAR 0 1
6208: PUSH
6209: FOR_TO
6210: IFFALSE 6298
// begin k := j + d ;
6212: LD_ADDR_VAR 0 8
6216: PUSH
6217: LD_VAR 0 7
6221: PUSH
6222: LD_VAR 0 9
6226: PLUS
6227: ST_TO_ADDR
// if k > array then
6228: LD_VAR 0 8
6232: PUSH
6233: LD_VAR 0 1
6237: GREATER
6238: IFFALSE 6248
// k := 1 ;
6240: LD_ADDR_VAR 0 8
6244: PUSH
6245: LD_INT 1
6247: ST_TO_ADDR
// if not k then
6248: LD_VAR 0 8
6252: NOT
6253: IFFALSE 6265
// k := array ;
6255: LD_ADDR_VAR 0 8
6259: PUSH
6260: LD_VAR 0 1
6264: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6265: LD_ADDR_VAR 0 10
6269: PUSH
6270: LD_VAR 0 10
6274: PPUSH
6275: LD_VAR 0 8
6279: PPUSH
6280: LD_VAR 0 1
6284: PUSH
6285: LD_VAR 0 7
6289: ARRAY
6290: PPUSH
6291: CALL_OW 1
6295: ST_TO_ADDR
// end ;
6296: GO 6209
6298: POP
6299: POP
// array := tmp ;
6300: LD_ADDR_VAR 0 1
6304: PUSH
6305: LD_VAR 0 10
6309: ST_TO_ADDR
// end ;
6310: GO 6191
6312: POP
6313: POP
// result := array ;
6314: LD_ADDR_VAR 0 5
6318: PUSH
6319: LD_VAR 0 1
6323: ST_TO_ADDR
// end ;
6324: LD_VAR 0 5
6328: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6329: LD_INT 0
6331: PPUSH
6332: PPUSH
// result := 0 ;
6333: LD_ADDR_VAR 0 3
6337: PUSH
6338: LD_INT 0
6340: ST_TO_ADDR
// if not array or not value in array then
6341: LD_VAR 0 1
6345: NOT
6346: IFTRUE 6361
6348: PUSH
6349: LD_VAR 0 2
6353: PUSH
6354: LD_VAR 0 1
6358: IN
6359: NOT
6360: OR
6361: IFFALSE 6365
// exit ;
6363: GO 6419
// for i = 1 to array do
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: DOUBLE
6371: LD_INT 1
6373: DEC
6374: ST_TO_ADDR
6375: LD_VAR 0 1
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6417
// if value = array [ i ] then
6383: LD_VAR 0 2
6387: PUSH
6388: LD_VAR 0 1
6392: PUSH
6393: LD_VAR 0 4
6397: ARRAY
6398: EQUAL
6399: IFFALSE 6415
// begin result := i ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_VAR 0 4
6410: ST_TO_ADDR
// exit ;
6411: POP
6412: POP
6413: GO 6419
// end ;
6415: GO 6380
6417: POP
6418: POP
// end ;
6419: LD_VAR 0 3
6423: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6424: LD_INT 0
6426: PPUSH
// vc_chassis := chassis ;
6427: LD_ADDR_OWVAR 37
6431: PUSH
6432: LD_VAR 0 1
6436: ST_TO_ADDR
// vc_engine := engine ;
6437: LD_ADDR_OWVAR 39
6441: PUSH
6442: LD_VAR 0 2
6446: ST_TO_ADDR
// vc_control := control ;
6447: LD_ADDR_OWVAR 38
6451: PUSH
6452: LD_VAR 0 3
6456: ST_TO_ADDR
// vc_weapon := weapon ;
6457: LD_ADDR_OWVAR 40
6461: PUSH
6462: LD_VAR 0 4
6466: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6467: LD_ADDR_OWVAR 41
6471: PUSH
6472: LD_VAR 0 5
6476: ST_TO_ADDR
// end ;
6477: LD_VAR 0 6
6481: RET
// export function WantPlant ( unit ) ; var task ; begin
6482: LD_INT 0
6484: PPUSH
6485: PPUSH
// result := false ;
6486: LD_ADDR_VAR 0 2
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: LD_VAR 0 1
6503: PPUSH
6504: CALL_OW 437
6508: ST_TO_ADDR
// if task then
6509: LD_VAR 0 3
6513: IFFALSE 6541
// if task [ 1 ] [ 1 ] = p then
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 1
6522: ARRAY
6523: PUSH
6524: LD_INT 1
6526: ARRAY
6527: PUSH
6528: LD_STRING p
6530: EQUAL
6531: IFFALSE 6541
// result := true ;
6533: LD_ADDR_VAR 0 2
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// end ;
6541: LD_VAR 0 2
6545: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6546: LD_INT 0
6548: PPUSH
6549: PPUSH
6550: PPUSH
6551: PPUSH
// if pos < 1 then
6552: LD_VAR 0 2
6556: PUSH
6557: LD_INT 1
6559: LESS
6560: IFFALSE 6564
// exit ;
6562: GO 6867
// if pos = 1 then
6564: LD_VAR 0 2
6568: PUSH
6569: LD_INT 1
6571: EQUAL
6572: IFFALSE 6605
// result := Replace ( arr , pos [ 1 ] , value ) else
6574: LD_ADDR_VAR 0 4
6578: PUSH
6579: LD_VAR 0 1
6583: PPUSH
6584: LD_VAR 0 2
6588: PUSH
6589: LD_INT 1
6591: ARRAY
6592: PPUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 1
6602: ST_TO_ADDR
6603: GO 6867
// begin tmp := arr ;
6605: LD_ADDR_VAR 0 6
6609: PUSH
6610: LD_VAR 0 1
6614: ST_TO_ADDR
// s_arr := [ tmp ] ;
6615: LD_ADDR_VAR 0 7
6619: PUSH
6620: LD_VAR 0 6
6624: PUSH
6625: EMPTY
6626: LIST
6627: ST_TO_ADDR
// for i = 1 to pos - 1 do
6628: LD_ADDR_VAR 0 5
6632: PUSH
6633: DOUBLE
6634: LD_INT 1
6636: DEC
6637: ST_TO_ADDR
6638: LD_VAR 0 2
6642: PUSH
6643: LD_INT 1
6645: MINUS
6646: PUSH
6647: FOR_TO
6648: IFFALSE 6693
// begin tmp := tmp [ pos [ i ] ] ;
6650: LD_ADDR_VAR 0 6
6654: PUSH
6655: LD_VAR 0 6
6659: PUSH
6660: LD_VAR 0 2
6664: PUSH
6665: LD_VAR 0 5
6669: ARRAY
6670: ARRAY
6671: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6672: LD_ADDR_VAR 0 7
6676: PUSH
6677: LD_VAR 0 7
6681: PUSH
6682: LD_VAR 0 6
6686: PUSH
6687: EMPTY
6688: LIST
6689: ADD
6690: ST_TO_ADDR
// end ;
6691: GO 6647
6693: POP
6694: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: LD_VAR 0 6
6704: PPUSH
6705: LD_VAR 0 2
6709: PUSH
6710: LD_VAR 0 2
6714: ARRAY
6715: PPUSH
6716: LD_VAR 0 3
6720: PPUSH
6721: CALL_OW 1
6725: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6726: LD_ADDR_VAR 0 7
6730: PUSH
6731: LD_VAR 0 7
6735: PPUSH
6736: LD_VAR 0 7
6740: PPUSH
6741: LD_VAR 0 6
6745: PPUSH
6746: CALL_OW 1
6750: ST_TO_ADDR
// for i = s_arr downto 2 do
6751: LD_ADDR_VAR 0 5
6755: PUSH
6756: DOUBLE
6757: LD_VAR 0 7
6761: INC
6762: ST_TO_ADDR
6763: LD_INT 2
6765: PUSH
6766: FOR_DOWNTO
6767: IFFALSE 6851
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6769: LD_ADDR_VAR 0 6
6773: PUSH
6774: LD_VAR 0 7
6778: PUSH
6779: LD_VAR 0 5
6783: PUSH
6784: LD_INT 1
6786: MINUS
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 2
6793: PUSH
6794: LD_VAR 0 5
6798: PUSH
6799: LD_INT 1
6801: MINUS
6802: ARRAY
6803: PPUSH
6804: LD_VAR 0 7
6808: PUSH
6809: LD_VAR 0 5
6813: ARRAY
6814: PPUSH
6815: CALL_OW 1
6819: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6820: LD_ADDR_VAR 0 7
6824: PUSH
6825: LD_VAR 0 7
6829: PPUSH
6830: LD_VAR 0 5
6834: PUSH
6835: LD_INT 1
6837: MINUS
6838: PPUSH
6839: LD_VAR 0 6
6843: PPUSH
6844: CALL_OW 1
6848: ST_TO_ADDR
// end ;
6849: GO 6766
6851: POP
6852: POP
// result := s_arr [ 1 ] ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: LD_VAR 0 7
6862: PUSH
6863: LD_INT 1
6865: ARRAY
6866: ST_TO_ADDR
// end ; end ;
6867: LD_VAR 0 4
6871: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6872: LD_INT 0
6874: PPUSH
6875: PPUSH
// if not list then
6876: LD_VAR 0 1
6880: NOT
6881: IFFALSE 6885
// exit ;
6883: GO 6976
// i := list [ pos1 ] ;
6885: LD_ADDR_VAR 0 5
6889: PUSH
6890: LD_VAR 0 1
6894: PUSH
6895: LD_VAR 0 2
6899: ARRAY
6900: ST_TO_ADDR
// if not i then
6901: LD_VAR 0 5
6905: NOT
6906: IFFALSE 6910
// exit ;
6908: GO 6976
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6910: LD_ADDR_VAR 0 1
6914: PUSH
6915: LD_VAR 0 1
6919: PPUSH
6920: LD_VAR 0 2
6924: PPUSH
6925: LD_VAR 0 1
6929: PUSH
6930: LD_VAR 0 3
6934: ARRAY
6935: PPUSH
6936: CALL_OW 1
6940: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_VAR 0 1
6950: PPUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_VAR 0 5
6960: PPUSH
6961: CALL_OW 1
6965: ST_TO_ADDR
// result := list ;
6966: LD_ADDR_VAR 0 4
6970: PUSH
6971: LD_VAR 0 1
6975: ST_TO_ADDR
// end ;
6976: LD_VAR 0 4
6980: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6981: LD_INT 0
6983: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6984: LD_ADDR_VAR 0 5
6988: PUSH
6989: LD_VAR 0 1
6993: PPUSH
6994: CALL_OW 250
6998: PPUSH
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 251
7008: PPUSH
7009: LD_VAR 0 2
7013: PPUSH
7014: LD_VAR 0 3
7018: PPUSH
7019: LD_VAR 0 4
7023: PPUSH
7024: CALL 7406 0 5
7028: ST_TO_ADDR
// end ;
7029: LD_VAR 0 5
7033: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7034: LD_INT 0
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// if not list or not unit then
7040: LD_VAR 0 2
7044: NOT
7045: IFTRUE 7054
7047: PUSH
7048: LD_VAR 0 1
7052: NOT
7053: OR
7054: IFFALSE 7058
// exit ;
7056: GO 7401
// result := [ ] ;
7058: LD_ADDR_VAR 0 5
7062: PUSH
7063: EMPTY
7064: ST_TO_ADDR
// for i in list do
7065: LD_ADDR_VAR 0 6
7069: PUSH
7070: LD_VAR 0 2
7074: PUSH
7075: FOR_IN
7076: IFFALSE 7294
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7078: LD_ADDR_VAR 0 8
7082: PUSH
7083: LD_VAR 0 1
7087: PPUSH
7088: LD_VAR 0 6
7092: PUSH
7093: LD_INT 1
7095: ARRAY
7096: PPUSH
7097: LD_VAR 0 6
7101: PUSH
7102: LD_INT 2
7104: ARRAY
7105: PPUSH
7106: CALL_OW 297
7110: ST_TO_ADDR
// if not Count ( result ) then
7111: LD_VAR 0 5
7115: PPUSH
7116: CALL 3662 0 1
7120: NOT
7121: IFFALSE 7154
// begin result := Join ( result , [ i , tmp ] ) ;
7123: LD_ADDR_VAR 0 5
7127: PUSH
7128: LD_VAR 0 5
7132: PPUSH
7133: LD_VAR 0 6
7137: PUSH
7138: LD_VAR 0 8
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL 39594 0 2
7151: ST_TO_ADDR
// continue ;
7152: GO 7075
// end ; if result [ result ] [ 2 ] <= tmp then
7154: LD_VAR 0 5
7158: PUSH
7159: LD_VAR 0 5
7163: ARRAY
7164: PUSH
7165: LD_INT 2
7167: ARRAY
7168: PUSH
7169: LD_VAR 0 8
7173: LESSEQUAL
7174: IFFALSE 7207
// result := Join ( result , [ i , tmp ] ) else
7176: LD_ADDR_VAR 0 5
7180: PUSH
7181: LD_VAR 0 5
7185: PPUSH
7186: LD_VAR 0 6
7190: PUSH
7191: LD_VAR 0 8
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PPUSH
7200: CALL 39594 0 2
7204: ST_TO_ADDR
7205: GO 7292
// begin for j := 1 to Count ( result ) do
7207: LD_ADDR_VAR 0 7
7211: PUSH
7212: DOUBLE
7213: LD_INT 1
7215: DEC
7216: ST_TO_ADDR
7217: LD_VAR 0 5
7221: PPUSH
7222: CALL 3662 0 1
7226: PUSH
7227: FOR_TO
7228: IFFALSE 7290
// begin if tmp < result [ j ] [ 2 ] then
7230: LD_VAR 0 8
7234: PUSH
7235: LD_VAR 0 5
7239: PUSH
7240: LD_VAR 0 7
7244: ARRAY
7245: PUSH
7246: LD_INT 2
7248: ARRAY
7249: LESS
7250: IFFALSE 7288
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7252: LD_ADDR_VAR 0 5
7256: PUSH
7257: LD_VAR 0 5
7261: PPUSH
7262: LD_VAR 0 7
7266: PPUSH
7267: LD_VAR 0 6
7271: PUSH
7272: LD_VAR 0 8
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 2
7285: ST_TO_ADDR
// break ;
7286: GO 7290
// end ; end ;
7288: GO 7227
7290: POP
7291: POP
// end ; end ;
7292: GO 7075
7294: POP
7295: POP
// if result and not asc then
7296: LD_VAR 0 5
7300: IFFALSE 7309
7302: PUSH
7303: LD_VAR 0 3
7307: NOT
7308: AND
7309: IFFALSE 7326
// result := ReverseArray ( result ) ;
7311: LD_ADDR_VAR 0 5
7315: PUSH
7316: LD_VAR 0 5
7320: PPUSH
7321: CALL 34684 0 1
7325: ST_TO_ADDR
// tmp := [ ] ;
7326: LD_ADDR_VAR 0 8
7330: PUSH
7331: EMPTY
7332: ST_TO_ADDR
// if mode then
7333: LD_VAR 0 4
7337: IFFALSE 7401
// begin for i := 1 to result do
7339: LD_ADDR_VAR 0 6
7343: PUSH
7344: DOUBLE
7345: LD_INT 1
7347: DEC
7348: ST_TO_ADDR
7349: LD_VAR 0 5
7353: PUSH
7354: FOR_TO
7355: IFFALSE 7389
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7357: LD_ADDR_VAR 0 8
7361: PUSH
7362: LD_VAR 0 8
7366: PPUSH
7367: LD_VAR 0 5
7371: PUSH
7372: LD_VAR 0 6
7376: ARRAY
7377: PUSH
7378: LD_INT 1
7380: ARRAY
7381: PPUSH
7382: CALL 39594 0 2
7386: ST_TO_ADDR
7387: GO 7354
7389: POP
7390: POP
// result := tmp ;
7391: LD_ADDR_VAR 0 5
7395: PUSH
7396: LD_VAR 0 8
7400: ST_TO_ADDR
// end ; end ;
7401: LD_VAR 0 5
7405: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7406: LD_INT 0
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
// if not list then
7412: LD_VAR 0 3
7416: NOT
7417: IFFALSE 7421
// exit ;
7419: GO 7811
// result := [ ] ;
7421: LD_ADDR_VAR 0 6
7425: PUSH
7426: EMPTY
7427: ST_TO_ADDR
// for i in list do
7428: LD_ADDR_VAR 0 7
7432: PUSH
7433: LD_VAR 0 3
7437: PUSH
7438: FOR_IN
7439: IFFALSE 7641
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7441: LD_ADDR_VAR 0 9
7445: PUSH
7446: LD_VAR 0 7
7450: PPUSH
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_VAR 0 2
7460: PPUSH
7461: CALL_OW 297
7465: ST_TO_ADDR
// if not result then
7466: LD_VAR 0 6
7470: NOT
7471: IFFALSE 7497
// result := [ [ i , tmp ] ] else
7473: LD_ADDR_VAR 0 6
7477: PUSH
7478: LD_VAR 0 7
7482: PUSH
7483: LD_VAR 0 9
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: EMPTY
7493: LIST
7494: ST_TO_ADDR
7495: GO 7639
// begin if result [ result ] [ 2 ] <= tmp then
7497: LD_VAR 0 6
7501: PUSH
7502: LD_VAR 0 6
7506: ARRAY
7507: PUSH
7508: LD_INT 2
7510: ARRAY
7511: PUSH
7512: LD_VAR 0 9
7516: LESSEQUAL
7517: IFFALSE 7559
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7519: LD_ADDR_VAR 0 6
7523: PUSH
7524: LD_VAR 0 6
7528: PPUSH
7529: LD_VAR 0 6
7533: PUSH
7534: LD_INT 1
7536: PLUS
7537: PPUSH
7538: LD_VAR 0 7
7542: PUSH
7543: LD_VAR 0 9
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 2
7556: ST_TO_ADDR
7557: GO 7639
// for j := 1 to result do
7559: LD_ADDR_VAR 0 8
7563: PUSH
7564: DOUBLE
7565: LD_INT 1
7567: DEC
7568: ST_TO_ADDR
7569: LD_VAR 0 6
7573: PUSH
7574: FOR_TO
7575: IFFALSE 7637
// begin if tmp < result [ j ] [ 2 ] then
7577: LD_VAR 0 9
7581: PUSH
7582: LD_VAR 0 6
7586: PUSH
7587: LD_VAR 0 8
7591: ARRAY
7592: PUSH
7593: LD_INT 2
7595: ARRAY
7596: LESS
7597: IFFALSE 7635
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7599: LD_ADDR_VAR 0 6
7603: PUSH
7604: LD_VAR 0 6
7608: PPUSH
7609: LD_VAR 0 8
7613: PPUSH
7614: LD_VAR 0 7
7618: PUSH
7619: LD_VAR 0 9
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 2
7632: ST_TO_ADDR
// break ;
7633: GO 7637
// end ; end ;
7635: GO 7574
7637: POP
7638: POP
// end ; end ;
7639: GO 7438
7641: POP
7642: POP
// if result and not asc then
7643: LD_VAR 0 6
7647: IFFALSE 7656
7649: PUSH
7650: LD_VAR 0 4
7654: NOT
7655: AND
7656: IFFALSE 7731
// begin tmp := result ;
7658: LD_ADDR_VAR 0 9
7662: PUSH
7663: LD_VAR 0 6
7667: ST_TO_ADDR
// for i = tmp downto 1 do
7668: LD_ADDR_VAR 0 7
7672: PUSH
7673: DOUBLE
7674: LD_VAR 0 9
7678: INC
7679: ST_TO_ADDR
7680: LD_INT 1
7682: PUSH
7683: FOR_DOWNTO
7684: IFFALSE 7729
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7686: LD_ADDR_VAR 0 6
7690: PUSH
7691: LD_VAR 0 6
7695: PPUSH
7696: LD_VAR 0 9
7700: PUSH
7701: LD_VAR 0 7
7705: MINUS
7706: PUSH
7707: LD_INT 1
7709: PLUS
7710: PPUSH
7711: LD_VAR 0 9
7715: PUSH
7716: LD_VAR 0 7
7720: ARRAY
7721: PPUSH
7722: CALL_OW 1
7726: ST_TO_ADDR
7727: GO 7683
7729: POP
7730: POP
// end ; tmp := [ ] ;
7731: LD_ADDR_VAR 0 9
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// if mode then
7738: LD_VAR 0 5
7742: IFFALSE 7811
// begin for i = 1 to result do
7744: LD_ADDR_VAR 0 7
7748: PUSH
7749: DOUBLE
7750: LD_INT 1
7752: DEC
7753: ST_TO_ADDR
7754: LD_VAR 0 6
7758: PUSH
7759: FOR_TO
7760: IFFALSE 7799
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7762: LD_ADDR_VAR 0 9
7766: PUSH
7767: LD_VAR 0 9
7771: PPUSH
7772: LD_VAR 0 7
7776: PPUSH
7777: LD_VAR 0 6
7781: PUSH
7782: LD_VAR 0 7
7786: ARRAY
7787: PUSH
7788: LD_INT 1
7790: ARRAY
7791: PPUSH
7792: CALL_OW 1
7796: ST_TO_ADDR
7797: GO 7759
7799: POP
7800: POP
// result := tmp ;
7801: LD_ADDR_VAR 0 6
7805: PUSH
7806: LD_VAR 0 9
7810: ST_TO_ADDR
// end ; end ;
7811: LD_VAR 0 6
7815: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7816: LD_INT 0
7818: PPUSH
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
7823: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_INT 0
7831: PUSH
7832: LD_INT 0
7834: PUSH
7835: LD_INT 0
7837: PUSH
7838: EMPTY
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: ST_TO_ADDR
// if not x or not y then
7846: LD_VAR 0 2
7850: NOT
7851: IFTRUE 7860
7853: PUSH
7854: LD_VAR 0 3
7858: NOT
7859: OR
7860: IFFALSE 7864
// exit ;
7862: GO 9520
// if not range then
7864: LD_VAR 0 4
7868: NOT
7869: IFFALSE 7879
// range := 10 ;
7871: LD_ADDR_VAR 0 4
7875: PUSH
7876: LD_INT 10
7878: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7879: LD_ADDR_VAR 0 8
7883: PUSH
7884: LD_INT 81
7886: PUSH
7887: LD_VAR 0 1
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 92
7898: PUSH
7899: LD_VAR 0 2
7903: PUSH
7904: LD_VAR 0 3
7908: PUSH
7909: LD_VAR 0 4
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 3
7922: PUSH
7923: LD_INT 21
7925: PUSH
7926: LD_INT 3
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: ST_TO_ADDR
// if not tmp then
7947: LD_VAR 0 8
7951: NOT
7952: IFFALSE 7956
// exit ;
7954: GO 9520
// for i in tmp do
7956: LD_ADDR_VAR 0 6
7960: PUSH
7961: LD_VAR 0 8
7965: PUSH
7966: FOR_IN
7967: IFFALSE 9495
// begin points := [ 0 , 0 , 0 ] ;
7969: LD_ADDR_VAR 0 9
7973: PUSH
7974: LD_INT 0
7976: PUSH
7977: LD_INT 0
7979: PUSH
7980: LD_INT 0
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// bpoints := 1 ;
7988: LD_ADDR_VAR 0 10
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7996: LD_VAR 0 6
8000: PPUSH
8001: CALL_OW 247
8005: PUSH
8006: LD_INT 1
8008: DOUBLE
8009: EQUAL
8010: IFTRUE 8014
8012: GO 8596
8014: POP
// begin if GetClass ( i ) = 1 then
8015: LD_VAR 0 6
8019: PPUSH
8020: CALL_OW 257
8024: PUSH
8025: LD_INT 1
8027: EQUAL
8028: IFFALSE 8049
// points := [ 10 , 5 , 3 ] ;
8030: LD_ADDR_VAR 0 9
8034: PUSH
8035: LD_INT 10
8037: PUSH
8038: LD_INT 5
8040: PUSH
8041: LD_INT 3
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8049: LD_VAR 0 6
8053: PPUSH
8054: CALL_OW 257
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 3
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: IN
8073: IFFALSE 8094
// points := [ 3 , 2 , 1 ] ;
8075: LD_ADDR_VAR 0 9
8079: PUSH
8080: LD_INT 3
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: LD_INT 1
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 257
8103: PUSH
8104: LD_INT 5
8106: EQUAL
8107: IFFALSE 8128
// points := [ 130 , 5 , 2 ] ;
8109: LD_ADDR_VAR 0 9
8113: PUSH
8114: LD_INT 130
8116: PUSH
8117: LD_INT 5
8119: PUSH
8120: LD_INT 2
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8128: LD_VAR 0 6
8132: PPUSH
8133: CALL_OW 257
8137: PUSH
8138: LD_INT 8
8140: EQUAL
8141: IFFALSE 8162
// points := [ 35 , 35 , 30 ] ;
8143: LD_ADDR_VAR 0 9
8147: PUSH
8148: LD_INT 35
8150: PUSH
8151: LD_INT 35
8153: PUSH
8154: LD_INT 30
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8162: LD_VAR 0 6
8166: PPUSH
8167: CALL_OW 257
8171: PUSH
8172: LD_INT 9
8174: EQUAL
8175: IFFALSE 8196
// points := [ 20 , 55 , 40 ] ;
8177: LD_ADDR_VAR 0 9
8181: PUSH
8182: LD_INT 20
8184: PUSH
8185: LD_INT 55
8187: PUSH
8188: LD_INT 40
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8196: LD_VAR 0 6
8200: PPUSH
8201: CALL_OW 257
8205: PUSH
8206: LD_INT 12
8208: PUSH
8209: LD_INT 16
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: IN
8216: IFFALSE 8237
// points := [ 5 , 3 , 2 ] ;
8218: LD_ADDR_VAR 0 9
8222: PUSH
8223: LD_INT 5
8225: PUSH
8226: LD_INT 3
8228: PUSH
8229: LD_INT 2
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8237: LD_VAR 0 6
8241: PPUSH
8242: CALL_OW 257
8246: PUSH
8247: LD_INT 17
8249: EQUAL
8250: IFFALSE 8271
// points := [ 100 , 50 , 75 ] ;
8252: LD_ADDR_VAR 0 9
8256: PUSH
8257: LD_INT 100
8259: PUSH
8260: LD_INT 50
8262: PUSH
8263: LD_INT 75
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8271: LD_VAR 0 6
8275: PPUSH
8276: CALL_OW 257
8280: PUSH
8281: LD_INT 15
8283: EQUAL
8284: IFFALSE 8305
// points := [ 10 , 5 , 3 ] ;
8286: LD_ADDR_VAR 0 9
8290: PUSH
8291: LD_INT 10
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: LD_INT 3
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8305: LD_VAR 0 6
8309: PPUSH
8310: CALL_OW 257
8314: PUSH
8315: LD_INT 14
8317: EQUAL
8318: IFFALSE 8339
// points := [ 10 , 0 , 0 ] ;
8320: LD_ADDR_VAR 0 9
8324: PUSH
8325: LD_INT 10
8327: PUSH
8328: LD_INT 0
8330: PUSH
8331: LD_INT 0
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8339: LD_VAR 0 6
8343: PPUSH
8344: CALL_OW 257
8348: PUSH
8349: LD_INT 11
8351: EQUAL
8352: IFFALSE 8373
// points := [ 30 , 10 , 5 ] ;
8354: LD_ADDR_VAR 0 9
8358: PUSH
8359: LD_INT 30
8361: PUSH
8362: LD_INT 10
8364: PUSH
8365: LD_INT 5
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8373: LD_VAR 0 1
8377: PPUSH
8378: LD_INT 5
8380: PPUSH
8381: CALL_OW 321
8385: PUSH
8386: LD_INT 2
8388: EQUAL
8389: IFFALSE 8406
// bpoints := bpoints * 1.8 ;
8391: LD_ADDR_VAR 0 10
8395: PUSH
8396: LD_VAR 0 10
8400: PUSH
8401: LD_REAL  1.80000000000000E+0000
8404: MUL
8405: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 257
8415: PUSH
8416: LD_INT 1
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: LD_INT 3
8424: PUSH
8425: LD_INT 4
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: IN
8434: IFFALSE 8454
8436: PUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_INT 51
8444: PPUSH
8445: CALL_OW 321
8449: PUSH
8450: LD_INT 2
8452: EQUAL
8453: AND
8454: IFFALSE 8471
// bpoints := bpoints * 1.2 ;
8456: LD_ADDR_VAR 0 10
8460: PUSH
8461: LD_VAR 0 10
8465: PUSH
8466: LD_REAL  1.20000000000000E+0000
8469: MUL
8470: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8471: LD_VAR 0 6
8475: PPUSH
8476: CALL_OW 257
8480: PUSH
8481: LD_INT 5
8483: PUSH
8484: LD_INT 7
8486: PUSH
8487: LD_INT 9
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: IN
8495: IFFALSE 8515
8497: PUSH
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_INT 52
8505: PPUSH
8506: CALL_OW 321
8510: PUSH
8511: LD_INT 2
8513: EQUAL
8514: AND
8515: IFFALSE 8532
// bpoints := bpoints * 1.5 ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: LD_VAR 0 10
8526: PUSH
8527: LD_REAL  1.50000000000000E+0000
8530: MUL
8531: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_INT 66
8539: PPUSH
8540: CALL_OW 321
8544: PUSH
8545: LD_INT 2
8547: EQUAL
8548: IFFALSE 8565
// bpoints := bpoints * 1.1 ;
8550: LD_ADDR_VAR 0 10
8554: PUSH
8555: LD_VAR 0 10
8559: PUSH
8560: LD_REAL  1.10000000000000E+0000
8563: MUL
8564: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8565: LD_ADDR_VAR 0 10
8569: PUSH
8570: LD_VAR 0 10
8574: PUSH
8575: LD_VAR 0 6
8579: PPUSH
8580: LD_INT 1
8582: PPUSH
8583: CALL_OW 259
8587: PUSH
8588: LD_REAL  1.15000000000000E+0000
8591: MUL
8592: MUL
8593: ST_TO_ADDR
// end ; unit_vehicle :
8594: GO 9424
8596: LD_INT 2
8598: DOUBLE
8599: EQUAL
8600: IFTRUE 8604
8602: GO 9412
8604: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8605: LD_VAR 0 6
8609: PPUSH
8610: CALL_OW 264
8614: PUSH
8615: LD_INT 2
8617: PUSH
8618: LD_INT 42
8620: PUSH
8621: LD_INT 24
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: IN
8629: IFFALSE 8650
// points := [ 25 , 5 , 3 ] ;
8631: LD_ADDR_VAR 0 9
8635: PUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 5
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8650: LD_VAR 0 6
8654: PPUSH
8655: CALL_OW 264
8659: PUSH
8660: LD_INT 4
8662: PUSH
8663: LD_INT 43
8665: PUSH
8666: LD_INT 25
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: IN
8674: IFFALSE 8695
// points := [ 40 , 15 , 5 ] ;
8676: LD_ADDR_VAR 0 9
8680: PUSH
8681: LD_INT 40
8683: PUSH
8684: LD_INT 15
8686: PUSH
8687: LD_INT 5
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8695: LD_VAR 0 6
8699: PPUSH
8700: CALL_OW 264
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: LD_INT 23
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: IN
8715: IFFALSE 8736
// points := [ 7 , 25 , 8 ] ;
8717: LD_ADDR_VAR 0 9
8721: PUSH
8722: LD_INT 7
8724: PUSH
8725: LD_INT 25
8727: PUSH
8728: LD_INT 8
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8736: LD_VAR 0 6
8740: PPUSH
8741: CALL_OW 264
8745: PUSH
8746: LD_INT 5
8748: PUSH
8749: LD_INT 27
8751: PUSH
8752: LD_INT 44
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: IN
8760: IFFALSE 8781
// points := [ 14 , 50 , 16 ] ;
8762: LD_ADDR_VAR 0 9
8766: PUSH
8767: LD_INT 14
8769: PUSH
8770: LD_INT 50
8772: PUSH
8773: LD_INT 16
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8781: LD_VAR 0 6
8785: PPUSH
8786: CALL_OW 264
8790: PUSH
8791: LD_INT 6
8793: PUSH
8794: LD_INT 46
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: IN
8801: IFFALSE 8822
// points := [ 32 , 120 , 70 ] ;
8803: LD_ADDR_VAR 0 9
8807: PUSH
8808: LD_INT 32
8810: PUSH
8811: LD_INT 120
8813: PUSH
8814: LD_INT 70
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8822: LD_VAR 0 6
8826: PPUSH
8827: CALL_OW 264
8831: PUSH
8832: LD_INT 7
8834: PUSH
8835: LD_INT 28
8837: PUSH
8838: LD_INT 45
8840: PUSH
8841: LD_INT 92
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: IN
8850: IFFALSE 8871
// points := [ 35 , 20 , 45 ] ;
8852: LD_ADDR_VAR 0 9
8856: PUSH
8857: LD_INT 35
8859: PUSH
8860: LD_INT 20
8862: PUSH
8863: LD_INT 45
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: LIST
8870: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8871: LD_VAR 0 6
8875: PPUSH
8876: CALL_OW 264
8880: PUSH
8881: LD_INT 47
8883: PUSH
8884: EMPTY
8885: LIST
8886: IN
8887: IFFALSE 8908
// points := [ 67 , 45 , 75 ] ;
8889: LD_ADDR_VAR 0 9
8893: PUSH
8894: LD_INT 67
8896: PUSH
8897: LD_INT 45
8899: PUSH
8900: LD_INT 75
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8908: LD_VAR 0 6
8912: PPUSH
8913: CALL_OW 264
8917: PUSH
8918: LD_INT 26
8920: PUSH
8921: EMPTY
8922: LIST
8923: IN
8924: IFFALSE 8945
// points := [ 120 , 30 , 80 ] ;
8926: LD_ADDR_VAR 0 9
8930: PUSH
8931: LD_INT 120
8933: PUSH
8934: LD_INT 30
8936: PUSH
8937: LD_INT 80
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8945: LD_VAR 0 6
8949: PPUSH
8950: CALL_OW 264
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: EMPTY
8959: LIST
8960: IN
8961: IFFALSE 8982
// points := [ 40 , 1 , 1 ] ;
8963: LD_ADDR_VAR 0 9
8967: PUSH
8968: LD_INT 40
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: LD_INT 1
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8982: LD_VAR 0 6
8986: PPUSH
8987: CALL_OW 264
8991: PUSH
8992: LD_INT 29
8994: PUSH
8995: EMPTY
8996: LIST
8997: IN
8998: IFFALSE 9019
// points := [ 70 , 200 , 400 ] ;
9000: LD_ADDR_VAR 0 9
9004: PUSH
9005: LD_INT 70
9007: PUSH
9008: LD_INT 200
9010: PUSH
9011: LD_INT 400
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9019: LD_VAR 0 6
9023: PPUSH
9024: CALL_OW 264
9028: PUSH
9029: LD_INT 14
9031: PUSH
9032: LD_INT 53
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: IN
9039: IFFALSE 9060
// points := [ 40 , 10 , 20 ] ;
9041: LD_ADDR_VAR 0 9
9045: PUSH
9046: LD_INT 40
9048: PUSH
9049: LD_INT 10
9051: PUSH
9052: LD_INT 20
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9060: LD_VAR 0 6
9064: PPUSH
9065: CALL_OW 264
9069: PUSH
9070: LD_INT 9
9072: PUSH
9073: EMPTY
9074: LIST
9075: IN
9076: IFFALSE 9097
// points := [ 5 , 70 , 20 ] ;
9078: LD_ADDR_VAR 0 9
9082: PUSH
9083: LD_INT 5
9085: PUSH
9086: LD_INT 70
9088: PUSH
9089: LD_INT 20
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9097: LD_VAR 0 6
9101: PPUSH
9102: CALL_OW 264
9106: PUSH
9107: LD_INT 10
9109: PUSH
9110: EMPTY
9111: LIST
9112: IN
9113: IFFALSE 9134
// points := [ 35 , 110 , 70 ] ;
9115: LD_ADDR_VAR 0 9
9119: PUSH
9120: LD_INT 35
9122: PUSH
9123: LD_INT 110
9125: PUSH
9126: LD_INT 70
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9134: LD_VAR 0 6
9138: PPUSH
9139: CALL_OW 265
9143: PUSH
9144: LD_INT 25
9146: EQUAL
9147: IFFALSE 9168
// points := [ 80 , 65 , 100 ] ;
9149: LD_ADDR_VAR 0 9
9153: PUSH
9154: LD_INT 80
9156: PUSH
9157: LD_INT 65
9159: PUSH
9160: LD_INT 100
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9168: LD_VAR 0 6
9172: PPUSH
9173: CALL_OW 263
9177: PUSH
9178: LD_INT 1
9180: EQUAL
9181: IFFALSE 9216
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9183: LD_ADDR_VAR 0 10
9187: PUSH
9188: LD_VAR 0 10
9192: PUSH
9193: LD_VAR 0 6
9197: PPUSH
9198: CALL_OW 311
9202: PPUSH
9203: LD_INT 3
9205: PPUSH
9206: CALL_OW 259
9210: PUSH
9211: LD_INT 4
9213: MUL
9214: MUL
9215: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9216: LD_VAR 0 6
9220: PPUSH
9221: CALL_OW 263
9225: PUSH
9226: LD_INT 2
9228: EQUAL
9229: IFFALSE 9280
// begin j := IsControledBy ( i ) ;
9231: LD_ADDR_VAR 0 7
9235: PUSH
9236: LD_VAR 0 6
9240: PPUSH
9241: CALL_OW 312
9245: ST_TO_ADDR
// if j then
9246: LD_VAR 0 7
9250: IFFALSE 9280
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9252: LD_ADDR_VAR 0 10
9256: PUSH
9257: LD_VAR 0 10
9261: PUSH
9262: LD_VAR 0 7
9266: PPUSH
9267: LD_INT 3
9269: PPUSH
9270: CALL_OW 259
9274: PUSH
9275: LD_INT 3
9277: MUL
9278: MUL
9279: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9280: LD_VAR 0 6
9284: PPUSH
9285: CALL_OW 264
9289: PUSH
9290: LD_INT 5
9292: PUSH
9293: LD_INT 6
9295: PUSH
9296: LD_INT 46
9298: PUSH
9299: LD_INT 44
9301: PUSH
9302: LD_INT 47
9304: PUSH
9305: LD_INT 45
9307: PUSH
9308: LD_INT 28
9310: PUSH
9311: LD_INT 7
9313: PUSH
9314: LD_INT 27
9316: PUSH
9317: LD_INT 29
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: IN
9332: IFFALSE 9352
9334: PUSH
9335: LD_VAR 0 1
9339: PPUSH
9340: LD_INT 52
9342: PPUSH
9343: CALL_OW 321
9347: PUSH
9348: LD_INT 2
9350: EQUAL
9351: AND
9352: IFFALSE 9369
// bpoints := bpoints * 1.2 ;
9354: LD_ADDR_VAR 0 10
9358: PUSH
9359: LD_VAR 0 10
9363: PUSH
9364: LD_REAL  1.20000000000000E+0000
9367: MUL
9368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9369: LD_VAR 0 6
9373: PPUSH
9374: CALL_OW 264
9378: PUSH
9379: LD_INT 6
9381: PUSH
9382: LD_INT 46
9384: PUSH
9385: LD_INT 47
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: IN
9393: IFFALSE 9410
// bpoints := bpoints * 1.2 ;
9395: LD_ADDR_VAR 0 10
9399: PUSH
9400: LD_VAR 0 10
9404: PUSH
9405: LD_REAL  1.20000000000000E+0000
9408: MUL
9409: ST_TO_ADDR
// end ; unit_building :
9410: GO 9424
9412: LD_INT 3
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9423
9420: POP
// ; end ;
9421: GO 9424
9423: POP
// for j = 1 to 3 do
9424: LD_ADDR_VAR 0 7
9428: PUSH
9429: DOUBLE
9430: LD_INT 1
9432: DEC
9433: ST_TO_ADDR
9434: LD_INT 3
9436: PUSH
9437: FOR_TO
9438: IFFALSE 9491
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9440: LD_ADDR_VAR 0 5
9444: PUSH
9445: LD_VAR 0 5
9449: PPUSH
9450: LD_VAR 0 7
9454: PPUSH
9455: LD_VAR 0 5
9459: PUSH
9460: LD_VAR 0 7
9464: ARRAY
9465: PUSH
9466: LD_VAR 0 9
9470: PUSH
9471: LD_VAR 0 7
9475: ARRAY
9476: PUSH
9477: LD_VAR 0 10
9481: MUL
9482: PLUS
9483: PPUSH
9484: CALL_OW 1
9488: ST_TO_ADDR
9489: GO 9437
9491: POP
9492: POP
// end ;
9493: GO 7966
9495: POP
9496: POP
// result := Replace ( result , 4 , tmp ) ;
9497: LD_ADDR_VAR 0 5
9501: PUSH
9502: LD_VAR 0 5
9506: PPUSH
9507: LD_INT 4
9509: PPUSH
9510: LD_VAR 0 8
9514: PPUSH
9515: CALL_OW 1
9519: ST_TO_ADDR
// end ;
9520: LD_VAR 0 5
9524: RET
// export function DangerAtRange ( unit , range ) ; begin
9525: LD_INT 0
9527: PPUSH
// if not unit then
9528: LD_VAR 0 1
9532: NOT
9533: IFFALSE 9537
// exit ;
9535: GO 9582
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9537: LD_ADDR_VAR 0 3
9541: PUSH
9542: LD_VAR 0 1
9546: PPUSH
9547: CALL_OW 255
9551: PPUSH
9552: LD_VAR 0 1
9556: PPUSH
9557: CALL_OW 250
9561: PPUSH
9562: LD_VAR 0 1
9566: PPUSH
9567: CALL_OW 251
9571: PPUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL 7816 0 4
9581: ST_TO_ADDR
// end ;
9582: LD_VAR 0 3
9586: RET
// export function DangerInArea ( side , area ) ; begin
9587: LD_INT 0
9589: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: LD_VAR 0 2
9599: PPUSH
9600: LD_INT 81
9602: PUSH
9603: LD_VAR 0 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 70
9616: ST_TO_ADDR
// end ;
9617: LD_VAR 0 3
9621: RET
// export function IsExtension ( b ) ; begin
9622: LD_INT 0
9624: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: LD_VAR 0 1
9634: PUSH
9635: LD_INT 23
9637: PUSH
9638: LD_INT 20
9640: PUSH
9641: LD_INT 22
9643: PUSH
9644: LD_INT 17
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 21
9652: PUSH
9653: LD_INT 19
9655: PUSH
9656: LD_INT 16
9658: PUSH
9659: LD_INT 25
9661: PUSH
9662: LD_INT 18
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: IN
9677: ST_TO_ADDR
// end ;
9678: LD_VAR 0 2
9682: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9683: LD_INT 0
9685: PPUSH
9686: PPUSH
9687: PPUSH
// result := [ ] ;
9688: LD_ADDR_VAR 0 4
9692: PUSH
9693: EMPTY
9694: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9695: LD_ADDR_VAR 0 5
9699: PUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: LD_INT 21
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 70
9719: ST_TO_ADDR
// if not tmp then
9720: LD_VAR 0 5
9724: NOT
9725: IFFALSE 9729
// exit ;
9727: GO 9793
// if checkLink then
9729: LD_VAR 0 3
9733: IFFALSE 9783
// begin for i in tmp do
9735: LD_ADDR_VAR 0 6
9739: PUSH
9740: LD_VAR 0 5
9744: PUSH
9745: FOR_IN
9746: IFFALSE 9781
// if GetBase ( i ) <> base then
9748: LD_VAR 0 6
9752: PPUSH
9753: CALL_OW 274
9757: PUSH
9758: LD_VAR 0 1
9762: NONEQUAL
9763: IFFALSE 9779
// ComLinkToBase ( base , i ) ;
9765: LD_VAR 0 1
9769: PPUSH
9770: LD_VAR 0 6
9774: PPUSH
9775: CALL_OW 169
9779: GO 9745
9781: POP
9782: POP
// end ; result := tmp ;
9783: LD_ADDR_VAR 0 4
9787: PUSH
9788: LD_VAR 0 5
9792: ST_TO_ADDR
// end ;
9793: LD_VAR 0 4
9797: RET
// export function ComComplete ( units , b ) ; var i ; begin
9798: LD_INT 0
9800: PPUSH
9801: PPUSH
// if not units then
9802: LD_VAR 0 1
9806: NOT
9807: IFFALSE 9811
// exit ;
9809: GO 9901
// for i in units do
9811: LD_ADDR_VAR 0 4
9815: PUSH
9816: LD_VAR 0 1
9820: PUSH
9821: FOR_IN
9822: IFFALSE 9899
// if BuildingStatus ( b ) = bs_build then
9824: LD_VAR 0 2
9828: PPUSH
9829: CALL_OW 461
9833: PUSH
9834: LD_INT 1
9836: EQUAL
9837: IFFALSE 9897
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9839: LD_VAR 0 4
9843: PPUSH
9844: LD_STRING h
9846: PUSH
9847: LD_VAR 0 2
9851: PPUSH
9852: CALL_OW 250
9856: PUSH
9857: LD_VAR 0 2
9861: PPUSH
9862: CALL_OW 251
9866: PUSH
9867: LD_VAR 0 2
9871: PUSH
9872: LD_INT 0
9874: PUSH
9875: LD_INT 0
9877: PUSH
9878: LD_INT 0
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: PPUSH
9893: CALL_OW 446
9897: GO 9821
9899: POP
9900: POP
// end ;
9901: LD_VAR 0 3
9905: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9906: LD_INT 0
9908: PPUSH
9909: PPUSH
9910: PPUSH
9911: PPUSH
9912: PPUSH
9913: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9914: LD_VAR 0 1
9918: NOT
9919: IFTRUE 9936
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 263
9931: PUSH
9932: LD_INT 2
9934: NONEQUAL
9935: OR
9936: IFFALSE 9940
// exit ;
9938: GO 10256
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9940: LD_ADDR_VAR 0 6
9944: PUSH
9945: LD_INT 22
9947: PUSH
9948: LD_VAR 0 1
9952: PPUSH
9953: CALL_OW 255
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 30
9967: PUSH
9968: LD_INT 36
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 34
9977: PUSH
9978: LD_INT 31
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PPUSH
9994: CALL_OW 69
9998: ST_TO_ADDR
// if not tmp then
9999: LD_VAR 0 6
10003: NOT
10004: IFFALSE 10008
// exit ;
10006: GO 10256
// result := [ ] ;
10008: LD_ADDR_VAR 0 2
10012: PUSH
10013: EMPTY
10014: ST_TO_ADDR
// for i in tmp do
10015: LD_ADDR_VAR 0 3
10019: PUSH
10020: LD_VAR 0 6
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10097
// begin t := UnitsInside ( i ) ;
10028: LD_ADDR_VAR 0 4
10032: PUSH
10033: LD_VAR 0 3
10037: PPUSH
10038: CALL_OW 313
10042: ST_TO_ADDR
// if t then
10043: LD_VAR 0 4
10047: IFFALSE 10095
// for j in t do
10049: LD_ADDR_VAR 0 7
10053: PUSH
10054: LD_VAR 0 4
10058: PUSH
10059: FOR_IN
10060: IFFALSE 10093
// result := Replace ( result , result + 1 , j ) ;
10062: LD_ADDR_VAR 0 2
10066: PUSH
10067: LD_VAR 0 2
10071: PPUSH
10072: LD_VAR 0 2
10076: PUSH
10077: LD_INT 1
10079: PLUS
10080: PPUSH
10081: LD_VAR 0 7
10085: PPUSH
10086: CALL_OW 1
10090: ST_TO_ADDR
10091: GO 10059
10093: POP
10094: POP
// end ;
10095: GO 10025
10097: POP
10098: POP
// if not result then
10099: LD_VAR 0 2
10103: NOT
10104: IFFALSE 10108
// exit ;
10106: GO 10256
// mech := result [ 1 ] ;
10108: LD_ADDR_VAR 0 5
10112: PUSH
10113: LD_VAR 0 2
10117: PUSH
10118: LD_INT 1
10120: ARRAY
10121: ST_TO_ADDR
// if result > 1 then
10122: LD_VAR 0 2
10126: PUSH
10127: LD_INT 1
10129: GREATER
10130: IFFALSE 10242
// begin for i = 2 to result do
10132: LD_ADDR_VAR 0 3
10136: PUSH
10137: DOUBLE
10138: LD_INT 2
10140: DEC
10141: ST_TO_ADDR
10142: LD_VAR 0 2
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10240
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10150: LD_ADDR_VAR 0 4
10154: PUSH
10155: LD_VAR 0 2
10159: PUSH
10160: LD_VAR 0 3
10164: ARRAY
10165: PPUSH
10166: LD_INT 3
10168: PPUSH
10169: CALL_OW 259
10173: PUSH
10174: LD_VAR 0 2
10178: PUSH
10179: LD_VAR 0 3
10183: ARRAY
10184: PPUSH
10185: CALL_OW 432
10189: MINUS
10190: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10191: LD_VAR 0 4
10195: PUSH
10196: LD_VAR 0 5
10200: PPUSH
10201: LD_INT 3
10203: PPUSH
10204: CALL_OW 259
10208: PUSH
10209: LD_VAR 0 5
10213: PPUSH
10214: CALL_OW 432
10218: MINUS
10219: GREATEREQUAL
10220: IFFALSE 10238
// mech := result [ i ] ;
10222: LD_ADDR_VAR 0 5
10226: PUSH
10227: LD_VAR 0 2
10231: PUSH
10232: LD_VAR 0 3
10236: ARRAY
10237: ST_TO_ADDR
// end ;
10238: GO 10147
10240: POP
10241: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10242: LD_VAR 0 1
10246: PPUSH
10247: LD_VAR 0 5
10251: PPUSH
10252: CALL_OW 135
// end ;
10256: LD_VAR 0 2
10260: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10261: LD_INT 0
10263: PPUSH
10264: PPUSH
10265: PPUSH
10266: PPUSH
10267: PPUSH
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
10274: PPUSH
10275: PPUSH
// result := [ ] ;
10276: LD_ADDR_VAR 0 7
10280: PUSH
10281: EMPTY
10282: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10283: LD_VAR 0 1
10287: PPUSH
10288: CALL_OW 266
10292: PUSH
10293: LD_INT 0
10295: PUSH
10296: LD_INT 1
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: IN
10303: NOT
10304: IFFALSE 10308
// exit ;
10306: GO 11948
// if name then
10308: LD_VAR 0 3
10312: IFFALSE 10328
// SetBName ( base_dep , name ) ;
10314: LD_VAR 0 1
10318: PPUSH
10319: LD_VAR 0 3
10323: PPUSH
10324: CALL_OW 500
// base := GetBase ( base_dep ) ;
10328: LD_ADDR_VAR 0 15
10332: PUSH
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 274
10342: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10343: LD_ADDR_VAR 0 16
10347: PUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: CALL_OW 255
10357: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10358: LD_ADDR_VAR 0 17
10362: PUSH
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 248
10372: ST_TO_ADDR
// if sources then
10373: LD_VAR 0 5
10377: IFFALSE 10424
// for i = 1 to 3 do
10379: LD_ADDR_VAR 0 8
10383: PUSH
10384: DOUBLE
10385: LD_INT 1
10387: DEC
10388: ST_TO_ADDR
10389: LD_INT 3
10391: PUSH
10392: FOR_TO
10393: IFFALSE 10422
// AddResourceType ( base , i , sources [ i ] ) ;
10395: LD_VAR 0 15
10399: PPUSH
10400: LD_VAR 0 8
10404: PPUSH
10405: LD_VAR 0 5
10409: PUSH
10410: LD_VAR 0 8
10414: ARRAY
10415: PPUSH
10416: CALL_OW 276
10420: GO 10392
10422: POP
10423: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10424: LD_ADDR_VAR 0 18
10428: PUSH
10429: LD_VAR 0 15
10433: PPUSH
10434: LD_VAR 0 2
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: CALL 9683 0 3
10446: ST_TO_ADDR
// InitHc ;
10447: CALL_OW 19
// InitUc ;
10451: CALL_OW 18
// uc_side := side ;
10455: LD_ADDR_OWVAR 20
10459: PUSH
10460: LD_VAR 0 16
10464: ST_TO_ADDR
// uc_nation := nation ;
10465: LD_ADDR_OWVAR 21
10469: PUSH
10470: LD_VAR 0 17
10474: ST_TO_ADDR
// if buildings then
10475: LD_VAR 0 18
10479: IFFALSE 11807
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10481: LD_ADDR_VAR 0 19
10485: PUSH
10486: LD_VAR 0 18
10490: PPUSH
10491: LD_INT 2
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: LD_INT 29
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 30
10506: PUSH
10507: LD_INT 30
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 72
10523: ST_TO_ADDR
// if tmp then
10524: LD_VAR 0 19
10528: IFFALSE 10576
// for i in tmp do
10530: LD_ADDR_VAR 0 8
10534: PUSH
10535: LD_VAR 0 19
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10574
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10543: LD_VAR 0 8
10547: PPUSH
10548: CALL_OW 250
10552: PPUSH
10553: LD_VAR 0 8
10557: PPUSH
10558: CALL_OW 251
10562: PPUSH
10563: LD_VAR 0 16
10567: PPUSH
10568: CALL_OW 441
10572: GO 10540
10574: POP
10575: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10576: LD_VAR 0 18
10580: PPUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 30
10586: PUSH
10587: LD_INT 32
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 33
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 72
10613: IFFALSE 10701
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10615: LD_ADDR_VAR 0 8
10619: PUSH
10620: LD_VAR 0 18
10624: PPUSH
10625: LD_INT 2
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: LD_INT 32
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 30
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: PUSH
10658: FOR_IN
10659: IFFALSE 10699
// begin if not GetBWeapon ( i ) then
10661: LD_VAR 0 8
10665: PPUSH
10666: CALL_OW 269
10670: NOT
10671: IFFALSE 10697
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10673: LD_VAR 0 8
10677: PPUSH
10678: LD_VAR 0 8
10682: PPUSH
10683: LD_VAR 0 2
10687: PPUSH
10688: CALL 11953 0 2
10692: PPUSH
10693: CALL_OW 431
// end ;
10697: GO 10658
10699: POP
10700: POP
// end ; for i = 1 to personel do
10701: LD_ADDR_VAR 0 8
10705: PUSH
10706: DOUBLE
10707: LD_INT 1
10709: DEC
10710: ST_TO_ADDR
10711: LD_VAR 0 6
10715: PUSH
10716: FOR_TO
10717: IFFALSE 11787
// begin if i > 4 then
10719: LD_VAR 0 8
10723: PUSH
10724: LD_INT 4
10726: GREATER
10727: IFFALSE 10731
// break ;
10729: GO 11787
// case i of 1 :
10731: LD_VAR 0 8
10735: PUSH
10736: LD_INT 1
10738: DOUBLE
10739: EQUAL
10740: IFTRUE 10744
10742: GO 10824
10744: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10745: LD_ADDR_VAR 0 12
10749: PUSH
10750: LD_VAR 0 18
10754: PPUSH
10755: LD_INT 22
10757: PUSH
10758: LD_VAR 0 16
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 58
10769: PUSH
10770: EMPTY
10771: LIST
10772: PUSH
10773: LD_INT 2
10775: PUSH
10776: LD_INT 30
10778: PUSH
10779: LD_INT 32
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 30
10788: PUSH
10789: LD_INT 4
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 30
10798: PUSH
10799: LD_INT 5
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 72
10821: ST_TO_ADDR
10822: GO 11046
10824: LD_INT 2
10826: DOUBLE
10827: EQUAL
10828: IFTRUE 10832
10830: GO 10894
10832: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10833: LD_ADDR_VAR 0 12
10837: PUSH
10838: LD_VAR 0 18
10842: PPUSH
10843: LD_INT 22
10845: PUSH
10846: LD_VAR 0 16
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 2
10857: PUSH
10858: LD_INT 30
10860: PUSH
10861: LD_INT 0
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 30
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 72
10891: ST_TO_ADDR
10892: GO 11046
10894: LD_INT 3
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 10964
10902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10903: LD_ADDR_VAR 0 12
10907: PUSH
10908: LD_VAR 0 18
10912: PPUSH
10913: LD_INT 22
10915: PUSH
10916: LD_VAR 0 16
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: LD_INT 30
10930: PUSH
10931: LD_INT 2
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 30
10940: PUSH
10941: LD_INT 3
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PPUSH
10957: CALL_OW 72
10961: ST_TO_ADDR
10962: GO 11046
10964: LD_INT 4
10966: DOUBLE
10967: EQUAL
10968: IFTRUE 10972
10970: GO 11045
10972: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10973: LD_ADDR_VAR 0 12
10977: PUSH
10978: LD_VAR 0 18
10982: PPUSH
10983: LD_INT 22
10985: PUSH
10986: LD_VAR 0 16
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 2
10997: PUSH
10998: LD_INT 30
11000: PUSH
11001: LD_INT 6
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 30
11010: PUSH
11011: LD_INT 7
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 30
11020: PUSH
11021: LD_INT 8
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 72
11042: ST_TO_ADDR
11043: GO 11046
11045: POP
// if i = 1 then
11046: LD_VAR 0 8
11050: PUSH
11051: LD_INT 1
11053: EQUAL
11054: IFFALSE 11165
// begin tmp := [ ] ;
11056: LD_ADDR_VAR 0 19
11060: PUSH
11061: EMPTY
11062: ST_TO_ADDR
// for j in f do
11063: LD_ADDR_VAR 0 9
11067: PUSH
11068: LD_VAR 0 12
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11147
// if GetBType ( j ) = b_bunker then
11076: LD_VAR 0 9
11080: PPUSH
11081: CALL_OW 266
11085: PUSH
11086: LD_INT 32
11088: EQUAL
11089: IFFALSE 11116
// tmp := Insert ( tmp , 1 , j ) else
11091: LD_ADDR_VAR 0 19
11095: PUSH
11096: LD_VAR 0 19
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_VAR 0 9
11108: PPUSH
11109: CALL_OW 2
11113: ST_TO_ADDR
11114: GO 11145
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11116: LD_ADDR_VAR 0 19
11120: PUSH
11121: LD_VAR 0 19
11125: PPUSH
11126: LD_VAR 0 19
11130: PUSH
11131: LD_INT 1
11133: PLUS
11134: PPUSH
11135: LD_VAR 0 9
11139: PPUSH
11140: CALL_OW 2
11144: ST_TO_ADDR
11145: GO 11073
11147: POP
11148: POP
// if tmp then
11149: LD_VAR 0 19
11153: IFFALSE 11165
// f := tmp ;
11155: LD_ADDR_VAR 0 12
11159: PUSH
11160: LD_VAR 0 19
11164: ST_TO_ADDR
// end ; x := personel [ i ] ;
11165: LD_ADDR_VAR 0 13
11169: PUSH
11170: LD_VAR 0 6
11174: PUSH
11175: LD_VAR 0 8
11179: ARRAY
11180: ST_TO_ADDR
// if x = - 1 then
11181: LD_VAR 0 13
11185: PUSH
11186: LD_INT 1
11188: NEG
11189: EQUAL
11190: IFFALSE 11401
// begin for j in f do
11192: LD_ADDR_VAR 0 9
11196: PUSH
11197: LD_VAR 0 12
11201: PUSH
11202: FOR_IN
11203: IFFALSE 11397
// repeat InitHc ;
11205: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11209: LD_VAR 0 9
11213: PPUSH
11214: CALL_OW 266
11218: PUSH
11219: LD_INT 5
11221: EQUAL
11222: IFFALSE 11292
// begin if UnitsInside ( j ) < 3 then
11224: LD_VAR 0 9
11228: PPUSH
11229: CALL_OW 313
11233: PUSH
11234: LD_INT 3
11236: LESS
11237: IFFALSE 11273
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11239: LD_INT 0
11241: PPUSH
11242: LD_INT 5
11244: PUSH
11245: LD_INT 8
11247: PUSH
11248: LD_INT 9
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: PUSH
11256: LD_VAR 0 17
11260: ARRAY
11261: PPUSH
11262: LD_VAR 0 4
11266: PPUSH
11267: CALL_OW 380
11271: GO 11290
// PrepareHuman ( false , i , skill ) ;
11273: LD_INT 0
11275: PPUSH
11276: LD_VAR 0 8
11280: PPUSH
11281: LD_VAR 0 4
11285: PPUSH
11286: CALL_OW 380
// end else
11290: GO 11309
// PrepareHuman ( false , i , skill ) ;
11292: LD_INT 0
11294: PPUSH
11295: LD_VAR 0 8
11299: PPUSH
11300: LD_VAR 0 4
11304: PPUSH
11305: CALL_OW 380
// un := CreateHuman ;
11309: LD_ADDR_VAR 0 14
11313: PUSH
11314: CALL_OW 44
11318: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11319: LD_ADDR_VAR 0 7
11323: PUSH
11324: LD_VAR 0 7
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: LD_VAR 0 14
11336: PPUSH
11337: CALL_OW 2
11341: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11342: LD_VAR 0 14
11346: PPUSH
11347: LD_VAR 0 9
11351: PPUSH
11352: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11356: LD_VAR 0 9
11360: PPUSH
11361: CALL_OW 313
11365: PUSH
11366: LD_INT 6
11368: EQUAL
11369: IFTRUE 11393
11371: PUSH
11372: LD_VAR 0 9
11376: PPUSH
11377: CALL_OW 266
11381: PUSH
11382: LD_INT 32
11384: PUSH
11385: LD_INT 31
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: IN
11392: OR
11393: IFFALSE 11205
11395: GO 11202
11397: POP
11398: POP
// end else
11399: GO 11785
// for j = 1 to x do
11401: LD_ADDR_VAR 0 9
11405: PUSH
11406: DOUBLE
11407: LD_INT 1
11409: DEC
11410: ST_TO_ADDR
11411: LD_VAR 0 13
11415: PUSH
11416: FOR_TO
11417: IFFALSE 11783
// begin InitHc ;
11419: CALL_OW 19
// if not f then
11423: LD_VAR 0 12
11427: NOT
11428: IFFALSE 11517
// begin PrepareHuman ( false , i , skill ) ;
11430: LD_INT 0
11432: PPUSH
11433: LD_VAR 0 8
11437: PPUSH
11438: LD_VAR 0 4
11442: PPUSH
11443: CALL_OW 380
// un := CreateHuman ;
11447: LD_ADDR_VAR 0 14
11451: PUSH
11452: CALL_OW 44
11456: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11457: LD_ADDR_VAR 0 7
11461: PUSH
11462: LD_VAR 0 7
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: LD_VAR 0 14
11474: PPUSH
11475: CALL_OW 2
11479: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11480: LD_VAR 0 14
11484: PPUSH
11485: LD_VAR 0 1
11489: PPUSH
11490: CALL_OW 250
11494: PPUSH
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 251
11504: PPUSH
11505: LD_INT 10
11507: PPUSH
11508: LD_INT 0
11510: PPUSH
11511: CALL_OW 50
// continue ;
11515: GO 11416
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11517: LD_VAR 0 12
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PPUSH
11526: CALL_OW 313
11530: IFFALSE 11558
11532: PUSH
11533: LD_VAR 0 12
11537: PUSH
11538: LD_INT 1
11540: ARRAY
11541: PPUSH
11542: CALL_OW 266
11546: PUSH
11547: LD_INT 32
11549: PUSH
11550: LD_INT 31
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: IN
11557: AND
11558: IFTRUE 11579
11560: PUSH
11561: LD_VAR 0 12
11565: PUSH
11566: LD_INT 1
11568: ARRAY
11569: PPUSH
11570: CALL_OW 313
11574: PUSH
11575: LD_INT 6
11577: EQUAL
11578: OR
11579: IFFALSE 11599
// f := Delete ( f , 1 ) ;
11581: LD_ADDR_VAR 0 12
11585: PUSH
11586: LD_VAR 0 12
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL_OW 3
11598: ST_TO_ADDR
// if not f then
11599: LD_VAR 0 12
11603: NOT
11604: IFFALSE 11622
// begin x := x + 2 ;
11606: LD_ADDR_VAR 0 13
11610: PUSH
11611: LD_VAR 0 13
11615: PUSH
11616: LD_INT 2
11618: PLUS
11619: ST_TO_ADDR
// continue ;
11620: GO 11416
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11622: LD_VAR 0 12
11626: PUSH
11627: LD_INT 1
11629: ARRAY
11630: PPUSH
11631: CALL_OW 266
11635: PUSH
11636: LD_INT 5
11638: EQUAL
11639: IFFALSE 11713
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11641: LD_VAR 0 12
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PPUSH
11650: CALL_OW 313
11654: PUSH
11655: LD_INT 3
11657: LESS
11658: IFFALSE 11694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11660: LD_INT 0
11662: PPUSH
11663: LD_INT 5
11665: PUSH
11666: LD_INT 8
11668: PUSH
11669: LD_INT 9
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_VAR 0 17
11681: ARRAY
11682: PPUSH
11683: LD_VAR 0 4
11687: PPUSH
11688: CALL_OW 380
11692: GO 11711
// PrepareHuman ( false , i , skill ) ;
11694: LD_INT 0
11696: PPUSH
11697: LD_VAR 0 8
11701: PPUSH
11702: LD_VAR 0 4
11706: PPUSH
11707: CALL_OW 380
// end else
11711: GO 11730
// PrepareHuman ( false , i , skill ) ;
11713: LD_INT 0
11715: PPUSH
11716: LD_VAR 0 8
11720: PPUSH
11721: LD_VAR 0 4
11725: PPUSH
11726: CALL_OW 380
// un := CreateHuman ;
11730: LD_ADDR_VAR 0 14
11734: PUSH
11735: CALL_OW 44
11739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11740: LD_ADDR_VAR 0 7
11744: PUSH
11745: LD_VAR 0 7
11749: PPUSH
11750: LD_INT 1
11752: PPUSH
11753: LD_VAR 0 14
11757: PPUSH
11758: CALL_OW 2
11762: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11763: LD_VAR 0 14
11767: PPUSH
11768: LD_VAR 0 12
11772: PUSH
11773: LD_INT 1
11775: ARRAY
11776: PPUSH
11777: CALL_OW 52
// end ;
11781: GO 11416
11783: POP
11784: POP
// end ;
11785: GO 10716
11787: POP
11788: POP
// result := result ^ buildings ;
11789: LD_ADDR_VAR 0 7
11793: PUSH
11794: LD_VAR 0 7
11798: PUSH
11799: LD_VAR 0 18
11803: ADD
11804: ST_TO_ADDR
// end else
11805: GO 11948
// begin for i = 1 to personel do
11807: LD_ADDR_VAR 0 8
11811: PUSH
11812: DOUBLE
11813: LD_INT 1
11815: DEC
11816: ST_TO_ADDR
11817: LD_VAR 0 6
11821: PUSH
11822: FOR_TO
11823: IFFALSE 11946
// begin if i > 4 then
11825: LD_VAR 0 8
11829: PUSH
11830: LD_INT 4
11832: GREATER
11833: IFFALSE 11837
// break ;
11835: GO 11946
// x := personel [ i ] ;
11837: LD_ADDR_VAR 0 13
11841: PUSH
11842: LD_VAR 0 6
11846: PUSH
11847: LD_VAR 0 8
11851: ARRAY
11852: ST_TO_ADDR
// if x = - 1 then
11853: LD_VAR 0 13
11857: PUSH
11858: LD_INT 1
11860: NEG
11861: EQUAL
11862: IFFALSE 11866
// continue ;
11864: GO 11822
// PrepareHuman ( false , i , skill ) ;
11866: LD_INT 0
11868: PPUSH
11869: LD_VAR 0 8
11873: PPUSH
11874: LD_VAR 0 4
11878: PPUSH
11879: CALL_OW 380
// un := CreateHuman ;
11883: LD_ADDR_VAR 0 14
11887: PUSH
11888: CALL_OW 44
11892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11893: LD_VAR 0 14
11897: PPUSH
11898: LD_VAR 0 1
11902: PPUSH
11903: CALL_OW 250
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: CALL_OW 251
11917: PPUSH
11918: LD_INT 10
11920: PPUSH
11921: LD_INT 0
11923: PPUSH
11924: CALL_OW 50
// result := result ^ un ;
11928: LD_ADDR_VAR 0 7
11932: PUSH
11933: LD_VAR 0 7
11937: PUSH
11938: LD_VAR 0 14
11942: ADD
11943: ST_TO_ADDR
// end ;
11944: GO 11822
11946: POP
11947: POP
// end ; end ;
11948: LD_VAR 0 7
11952: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11953: LD_INT 0
11955: PPUSH
11956: PPUSH
11957: PPUSH
11958: PPUSH
11959: PPUSH
11960: PPUSH
11961: PPUSH
11962: PPUSH
11963: PPUSH
11964: PPUSH
11965: PPUSH
11966: PPUSH
11967: PPUSH
11968: PPUSH
11969: PPUSH
11970: PPUSH
// result := false ;
11971: LD_ADDR_VAR 0 3
11975: PUSH
11976: LD_INT 0
11978: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11979: LD_VAR 0 1
11983: NOT
11984: IFTRUE 12009
11986: PUSH
11987: LD_VAR 0 1
11991: PPUSH
11992: CALL_OW 266
11996: PUSH
11997: LD_INT 32
11999: PUSH
12000: LD_INT 33
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: IN
12007: NOT
12008: OR
12009: IFFALSE 12013
// exit ;
12011: GO 13148
// nat := GetNation ( tower ) ;
12013: LD_ADDR_VAR 0 12
12017: PUSH
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 248
12027: ST_TO_ADDR
// side := GetSide ( tower ) ;
12028: LD_ADDR_VAR 0 16
12032: PUSH
12033: LD_VAR 0 1
12037: PPUSH
12038: CALL_OW 255
12042: ST_TO_ADDR
// x := GetX ( tower ) ;
12043: LD_ADDR_VAR 0 10
12047: PUSH
12048: LD_VAR 0 1
12052: PPUSH
12053: CALL_OW 250
12057: ST_TO_ADDR
// y := GetY ( tower ) ;
12058: LD_ADDR_VAR 0 11
12062: PUSH
12063: LD_VAR 0 1
12067: PPUSH
12068: CALL_OW 251
12072: ST_TO_ADDR
// if not x or not y then
12073: LD_VAR 0 10
12077: NOT
12078: IFTRUE 12087
12080: PUSH
12081: LD_VAR 0 11
12085: NOT
12086: OR
12087: IFFALSE 12091
// exit ;
12089: GO 13148
// weapon := 0 ;
12091: LD_ADDR_VAR 0 18
12095: PUSH
12096: LD_INT 0
12098: ST_TO_ADDR
// fac_list := [ ] ;
12099: LD_ADDR_VAR 0 17
12103: PUSH
12104: EMPTY
12105: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12106: LD_ADDR_VAR 0 6
12110: PUSH
12111: LD_VAR 0 1
12115: PPUSH
12116: CALL_OW 274
12120: PPUSH
12121: LD_VAR 0 2
12125: PPUSH
12126: LD_INT 0
12128: PPUSH
12129: CALL 9683 0 3
12133: PPUSH
12134: LD_INT 30
12136: PUSH
12137: LD_INT 3
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PPUSH
12144: CALL_OW 72
12148: ST_TO_ADDR
// if not factories then
12149: LD_VAR 0 6
12153: NOT
12154: IFFALSE 12158
// exit ;
12156: GO 13148
// for i in factories do
12158: LD_ADDR_VAR 0 8
12162: PUSH
12163: LD_VAR 0 6
12167: PUSH
12168: FOR_IN
12169: IFFALSE 12194
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12171: LD_ADDR_VAR 0 17
12175: PUSH
12176: LD_VAR 0 17
12180: PUSH
12181: LD_VAR 0 8
12185: PPUSH
12186: CALL_OW 478
12190: UNION
12191: ST_TO_ADDR
12192: GO 12168
12194: POP
12195: POP
// if not fac_list then
12196: LD_VAR 0 17
12200: NOT
12201: IFFALSE 12205
// exit ;
12203: GO 13148
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12205: LD_ADDR_VAR 0 5
12209: PUSH
12210: LD_INT 4
12212: PUSH
12213: LD_INT 5
12215: PUSH
12216: LD_INT 9
12218: PUSH
12219: LD_INT 10
12221: PUSH
12222: LD_INT 6
12224: PUSH
12225: LD_INT 7
12227: PUSH
12228: LD_INT 11
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 27
12242: PUSH
12243: LD_INT 28
12245: PUSH
12246: LD_INT 26
12248: PUSH
12249: LD_INT 30
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 43
12260: PUSH
12261: LD_INT 44
12263: PUSH
12264: LD_INT 46
12266: PUSH
12267: LD_INT 45
12269: PUSH
12270: LD_INT 47
12272: PUSH
12273: LD_INT 49
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: PUSH
12289: LD_VAR 0 12
12293: ARRAY
12294: ST_TO_ADDR
// list := list isect fac_list ;
12295: LD_ADDR_VAR 0 5
12299: PUSH
12300: LD_VAR 0 5
12304: PUSH
12305: LD_VAR 0 17
12309: ISECT
12310: ST_TO_ADDR
// if not list then
12311: LD_VAR 0 5
12315: NOT
12316: IFFALSE 12320
// exit ;
12318: GO 13148
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12320: LD_VAR 0 12
12324: PUSH
12325: LD_INT 3
12327: EQUAL
12328: IFFALSE 12340
12330: PUSH
12331: LD_INT 49
12333: PUSH
12334: LD_VAR 0 5
12338: IN
12339: AND
12340: IFFALSE 12360
12342: PUSH
12343: LD_INT 31
12345: PPUSH
12346: LD_VAR 0 16
12350: PPUSH
12351: CALL_OW 321
12355: PUSH
12356: LD_INT 2
12358: EQUAL
12359: AND
12360: IFFALSE 12420
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12362: LD_INT 22
12364: PUSH
12365: LD_VAR 0 16
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 35
12376: PUSH
12377: LD_INT 49
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 91
12386: PUSH
12387: LD_VAR 0 1
12391: PUSH
12392: LD_INT 10
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 69
12409: NOT
12410: IFFALSE 12420
// weapon := ru_time_lapser ;
12412: LD_ADDR_VAR 0 18
12416: PUSH
12417: LD_INT 49
12419: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12420: LD_VAR 0 12
12424: PUSH
12425: LD_INT 1
12427: PUSH
12428: LD_INT 2
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: IN
12435: IFFALSE 12459
12437: PUSH
12438: LD_INT 11
12440: PUSH
12441: LD_VAR 0 5
12445: IN
12446: IFTRUE 12458
12448: PUSH
12449: LD_INT 30
12451: PUSH
12452: LD_VAR 0 5
12456: IN
12457: OR
12458: AND
12459: IFFALSE 12479
12461: PUSH
12462: LD_INT 6
12464: PPUSH
12465: LD_VAR 0 16
12469: PPUSH
12470: CALL_OW 321
12474: PUSH
12475: LD_INT 2
12477: EQUAL
12478: AND
12479: IFFALSE 12646
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12481: LD_INT 22
12483: PUSH
12484: LD_VAR 0 16
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 2
12495: PUSH
12496: LD_INT 35
12498: PUSH
12499: LD_INT 11
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 35
12508: PUSH
12509: LD_INT 30
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 91
12523: PUSH
12524: LD_VAR 0 1
12528: PUSH
12529: LD_INT 18
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 69
12546: NOT
12547: IFFALSE 12623
12549: PUSH
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 16
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 2
12564: PUSH
12565: LD_INT 30
12567: PUSH
12568: LD_INT 32
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 30
12577: PUSH
12578: LD_INT 33
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 91
12592: PUSH
12593: LD_VAR 0 1
12597: PUSH
12598: LD_INT 12
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: PPUSH
12614: CALL_OW 69
12618: PUSH
12619: LD_INT 2
12621: GREATER
12622: AND
12623: IFFALSE 12646
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12625: LD_ADDR_VAR 0 18
12629: PUSH
12630: LD_INT 11
12632: PUSH
12633: LD_INT 30
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_VAR 0 12
12644: ARRAY
12645: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12646: LD_VAR 0 18
12650: NOT
12651: IFFALSE 12671
12653: PUSH
12654: LD_INT 40
12656: PPUSH
12657: LD_VAR 0 16
12661: PPUSH
12662: CALL_OW 321
12666: PUSH
12667: LD_INT 2
12669: EQUAL
12670: AND
12671: IFFALSE 12707
12673: PUSH
12674: LD_INT 7
12676: PUSH
12677: LD_VAR 0 5
12681: IN
12682: IFTRUE 12694
12684: PUSH
12685: LD_INT 28
12687: PUSH
12688: LD_VAR 0 5
12692: IN
12693: OR
12694: IFTRUE 12706
12696: PUSH
12697: LD_INT 45
12699: PUSH
12700: LD_VAR 0 5
12704: IN
12705: OR
12706: AND
12707: IFFALSE 12961
// begin hex := GetHexInfo ( x , y ) ;
12709: LD_ADDR_VAR 0 4
12713: PUSH
12714: LD_VAR 0 10
12718: PPUSH
12719: LD_VAR 0 11
12723: PPUSH
12724: CALL_OW 546
12728: ST_TO_ADDR
// if hex [ 1 ] then
12729: LD_VAR 0 4
12733: PUSH
12734: LD_INT 1
12736: ARRAY
12737: IFFALSE 12741
// exit ;
12739: GO 13148
// height := hex [ 2 ] ;
12741: LD_ADDR_VAR 0 15
12745: PUSH
12746: LD_VAR 0 4
12750: PUSH
12751: LD_INT 2
12753: ARRAY
12754: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12755: LD_ADDR_VAR 0 14
12759: PUSH
12760: LD_INT 0
12762: PUSH
12763: LD_INT 2
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: LD_INT 5
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: ST_TO_ADDR
// for i in tmp do
12778: LD_ADDR_VAR 0 8
12782: PUSH
12783: LD_VAR 0 14
12787: PUSH
12788: FOR_IN
12789: IFFALSE 12959
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12791: LD_ADDR_VAR 0 9
12795: PUSH
12796: LD_VAR 0 10
12800: PPUSH
12801: LD_VAR 0 8
12805: PPUSH
12806: LD_INT 5
12808: PPUSH
12809: CALL_OW 272
12813: PUSH
12814: LD_VAR 0 11
12818: PPUSH
12819: LD_VAR 0 8
12823: PPUSH
12824: LD_INT 5
12826: PPUSH
12827: CALL_OW 273
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12836: LD_VAR 0 9
12840: PUSH
12841: LD_INT 1
12843: ARRAY
12844: PPUSH
12845: LD_VAR 0 9
12849: PUSH
12850: LD_INT 2
12852: ARRAY
12853: PPUSH
12854: CALL_OW 488
12858: IFFALSE 12957
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12860: LD_ADDR_VAR 0 4
12864: PUSH
12865: LD_VAR 0 9
12869: PUSH
12870: LD_INT 1
12872: ARRAY
12873: PPUSH
12874: LD_VAR 0 9
12878: PUSH
12879: LD_INT 2
12881: ARRAY
12882: PPUSH
12883: CALL_OW 546
12887: ST_TO_ADDR
// if hex [ 1 ] then
12888: LD_VAR 0 4
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: IFFALSE 12900
// continue ;
12898: GO 12788
// h := hex [ 2 ] ;
12900: LD_ADDR_VAR 0 13
12904: PUSH
12905: LD_VAR 0 4
12909: PUSH
12910: LD_INT 2
12912: ARRAY
12913: ST_TO_ADDR
// if h + 7 < height then
12914: LD_VAR 0 13
12918: PUSH
12919: LD_INT 7
12921: PLUS
12922: PUSH
12923: LD_VAR 0 15
12927: LESS
12928: IFFALSE 12957
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12930: LD_ADDR_VAR 0 18
12934: PUSH
12935: LD_INT 7
12937: PUSH
12938: LD_INT 28
12940: PUSH
12941: LD_INT 45
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: PUSH
12949: LD_VAR 0 12
12953: ARRAY
12954: ST_TO_ADDR
// break ;
12955: GO 12959
// end ; end ; end ;
12957: GO 12788
12959: POP
12960: POP
// end ; if not weapon then
12961: LD_VAR 0 18
12965: NOT
12966: IFFALSE 13026
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12968: LD_ADDR_VAR 0 5
12972: PUSH
12973: LD_VAR 0 5
12977: PUSH
12978: LD_INT 11
12980: PUSH
12981: LD_INT 30
12983: PUSH
12984: LD_INT 49
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: LIST
12991: DIFF
12992: ST_TO_ADDR
// if not list then
12993: LD_VAR 0 5
12997: NOT
12998: IFFALSE 13002
// exit ;
13000: GO 13148
// weapon := list [ rand ( 1 , list ) ] ;
13002: LD_ADDR_VAR 0 18
13006: PUSH
13007: LD_VAR 0 5
13011: PUSH
13012: LD_INT 1
13014: PPUSH
13015: LD_VAR 0 5
13019: PPUSH
13020: CALL_OW 12
13024: ARRAY
13025: ST_TO_ADDR
// end ; if weapon then
13026: LD_VAR 0 18
13030: IFFALSE 13148
// begin tmp := CostOfWeapon ( weapon ) ;
13032: LD_ADDR_VAR 0 14
13036: PUSH
13037: LD_VAR 0 18
13041: PPUSH
13042: CALL_OW 451
13046: ST_TO_ADDR
// j := GetBase ( tower ) ;
13047: LD_ADDR_VAR 0 9
13051: PUSH
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 274
13061: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13062: LD_VAR 0 9
13066: PPUSH
13067: LD_INT 1
13069: PPUSH
13070: CALL_OW 275
13074: PUSH
13075: LD_VAR 0 14
13079: PUSH
13080: LD_INT 1
13082: ARRAY
13083: GREATEREQUAL
13084: IFFALSE 13110
13086: PUSH
13087: LD_VAR 0 9
13091: PPUSH
13092: LD_INT 2
13094: PPUSH
13095: CALL_OW 275
13099: PUSH
13100: LD_VAR 0 14
13104: PUSH
13105: LD_INT 2
13107: ARRAY
13108: GREATEREQUAL
13109: AND
13110: IFFALSE 13136
13112: PUSH
13113: LD_VAR 0 9
13117: PPUSH
13118: LD_INT 3
13120: PPUSH
13121: CALL_OW 275
13125: PUSH
13126: LD_VAR 0 14
13130: PUSH
13131: LD_INT 3
13133: ARRAY
13134: GREATEREQUAL
13135: AND
13136: IFFALSE 13148
// result := weapon ;
13138: LD_ADDR_VAR 0 3
13142: PUSH
13143: LD_VAR 0 18
13147: ST_TO_ADDR
// end ; end ;
13148: LD_VAR 0 3
13152: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13153: LD_INT 0
13155: PPUSH
13156: PPUSH
// result := true ;
13157: LD_ADDR_VAR 0 3
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// if array1 = array2 then
13165: LD_VAR 0 1
13169: PUSH
13170: LD_VAR 0 2
13174: EQUAL
13175: IFFALSE 13235
// begin for i = 1 to array1 do
13177: LD_ADDR_VAR 0 4
13181: PUSH
13182: DOUBLE
13183: LD_INT 1
13185: DEC
13186: ST_TO_ADDR
13187: LD_VAR 0 1
13191: PUSH
13192: FOR_TO
13193: IFFALSE 13231
// if array1 [ i ] <> array2 [ i ] then
13195: LD_VAR 0 1
13199: PUSH
13200: LD_VAR 0 4
13204: ARRAY
13205: PUSH
13206: LD_VAR 0 2
13210: PUSH
13211: LD_VAR 0 4
13215: ARRAY
13216: NONEQUAL
13217: IFFALSE 13229
// begin result := false ;
13219: LD_ADDR_VAR 0 3
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// break ;
13227: GO 13231
// end ;
13229: GO 13192
13231: POP
13232: POP
// end else
13233: GO 13243
// result := false ;
13235: LD_ADDR_VAR 0 3
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// end ;
13243: LD_VAR 0 3
13247: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
// if not array1 or not array2 then
13252: LD_VAR 0 1
13256: NOT
13257: IFTRUE 13266
13259: PUSH
13260: LD_VAR 0 2
13264: NOT
13265: OR
13266: IFFALSE 13270
// exit ;
13268: GO 13334
// result := true ;
13270: LD_ADDR_VAR 0 3
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// for i = 1 to array1 do
13278: LD_ADDR_VAR 0 4
13282: PUSH
13283: DOUBLE
13284: LD_INT 1
13286: DEC
13287: ST_TO_ADDR
13288: LD_VAR 0 1
13292: PUSH
13293: FOR_TO
13294: IFFALSE 13332
// if array1 [ i ] <> array2 [ i ] then
13296: LD_VAR 0 1
13300: PUSH
13301: LD_VAR 0 4
13305: ARRAY
13306: PUSH
13307: LD_VAR 0 2
13311: PUSH
13312: LD_VAR 0 4
13316: ARRAY
13317: NONEQUAL
13318: IFFALSE 13330
// begin result := false ;
13320: LD_ADDR_VAR 0 3
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// break ;
13328: GO 13332
// end ;
13330: GO 13293
13332: POP
13333: POP
// end ;
13334: LD_VAR 0 3
13338: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13339: LD_INT 0
13341: PPUSH
13342: PPUSH
13343: PPUSH
// pom := GetBase ( fac ) ;
13344: LD_ADDR_VAR 0 5
13348: PUSH
13349: LD_VAR 0 1
13353: PPUSH
13354: CALL_OW 274
13358: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13359: LD_ADDR_VAR 0 4
13363: PUSH
13364: LD_VAR 0 2
13368: PUSH
13369: LD_INT 1
13371: ARRAY
13372: PPUSH
13373: LD_VAR 0 2
13377: PUSH
13378: LD_INT 2
13380: ARRAY
13381: PPUSH
13382: LD_VAR 0 2
13386: PUSH
13387: LD_INT 3
13389: ARRAY
13390: PPUSH
13391: LD_VAR 0 2
13395: PUSH
13396: LD_INT 4
13398: ARRAY
13399: PPUSH
13400: CALL_OW 449
13404: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13405: LD_ADDR_VAR 0 3
13409: PUSH
13410: LD_VAR 0 5
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: CALL_OW 275
13422: PUSH
13423: LD_VAR 0 4
13427: PUSH
13428: LD_INT 1
13430: ARRAY
13431: GREATEREQUAL
13432: IFFALSE 13458
13434: PUSH
13435: LD_VAR 0 5
13439: PPUSH
13440: LD_INT 2
13442: PPUSH
13443: CALL_OW 275
13447: PUSH
13448: LD_VAR 0 4
13452: PUSH
13453: LD_INT 2
13455: ARRAY
13456: GREATEREQUAL
13457: AND
13458: IFFALSE 13484
13460: PUSH
13461: LD_VAR 0 5
13465: PPUSH
13466: LD_INT 3
13468: PPUSH
13469: CALL_OW 275
13473: PUSH
13474: LD_VAR 0 4
13478: PUSH
13479: LD_INT 3
13481: ARRAY
13482: GREATEREQUAL
13483: AND
13484: ST_TO_ADDR
// end ;
13485: LD_VAR 0 3
13489: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13490: LD_INT 0
13492: PPUSH
13493: PPUSH
13494: PPUSH
13495: PPUSH
// pom := GetBase ( building ) ;
13496: LD_ADDR_VAR 0 3
13500: PUSH
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 274
13510: ST_TO_ADDR
// if not pom then
13511: LD_VAR 0 3
13515: NOT
13516: IFFALSE 13520
// exit ;
13518: GO 13694
// btype := GetBType ( building ) ;
13520: LD_ADDR_VAR 0 5
13524: PUSH
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 266
13534: ST_TO_ADDR
// if btype = b_armoury then
13535: LD_VAR 0 5
13539: PUSH
13540: LD_INT 4
13542: EQUAL
13543: IFFALSE 13553
// btype := b_barracks ;
13545: LD_ADDR_VAR 0 5
13549: PUSH
13550: LD_INT 5
13552: ST_TO_ADDR
// if btype = b_depot then
13553: LD_VAR 0 5
13557: PUSH
13558: LD_INT 0
13560: EQUAL
13561: IFFALSE 13571
// btype := b_warehouse ;
13563: LD_ADDR_VAR 0 5
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// if btype = b_workshop then
13571: LD_VAR 0 5
13575: PUSH
13576: LD_INT 2
13578: EQUAL
13579: IFFALSE 13589
// btype := b_factory ;
13581: LD_ADDR_VAR 0 5
13585: PUSH
13586: LD_INT 3
13588: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13589: LD_ADDR_VAR 0 4
13593: PUSH
13594: LD_VAR 0 5
13598: PPUSH
13599: LD_VAR 0 1
13603: PPUSH
13604: CALL_OW 248
13608: PPUSH
13609: CALL_OW 450
13613: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13614: LD_ADDR_VAR 0 2
13618: PUSH
13619: LD_VAR 0 3
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 275
13631: PUSH
13632: LD_VAR 0 4
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: GREATEREQUAL
13641: IFFALSE 13667
13643: PUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: LD_INT 2
13651: PPUSH
13652: CALL_OW 275
13656: PUSH
13657: LD_VAR 0 4
13661: PUSH
13662: LD_INT 2
13664: ARRAY
13665: GREATEREQUAL
13666: AND
13667: IFFALSE 13693
13669: PUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 3
13677: PPUSH
13678: CALL_OW 275
13682: PUSH
13683: LD_VAR 0 4
13687: PUSH
13688: LD_INT 3
13690: ARRAY
13691: GREATEREQUAL
13692: AND
13693: ST_TO_ADDR
// end ;
13694: LD_VAR 0 2
13698: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13699: LD_INT 0
13701: PPUSH
13702: PPUSH
13703: PPUSH
// pom := GetBase ( building ) ;
13704: LD_ADDR_VAR 0 4
13708: PUSH
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 274
13718: ST_TO_ADDR
// if not pom then
13719: LD_VAR 0 4
13723: NOT
13724: IFFALSE 13728
// exit ;
13726: GO 13833
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13728: LD_ADDR_VAR 0 5
13732: PUSH
13733: LD_VAR 0 2
13737: PPUSH
13738: LD_VAR 0 1
13742: PPUSH
13743: CALL_OW 248
13747: PPUSH
13748: CALL_OW 450
13752: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13753: LD_ADDR_VAR 0 3
13757: PUSH
13758: LD_VAR 0 4
13762: PPUSH
13763: LD_INT 1
13765: PPUSH
13766: CALL_OW 275
13770: PUSH
13771: LD_VAR 0 5
13775: PUSH
13776: LD_INT 1
13778: ARRAY
13779: GREATEREQUAL
13780: IFFALSE 13806
13782: PUSH
13783: LD_VAR 0 4
13787: PPUSH
13788: LD_INT 2
13790: PPUSH
13791: CALL_OW 275
13795: PUSH
13796: LD_VAR 0 5
13800: PUSH
13801: LD_INT 2
13803: ARRAY
13804: GREATEREQUAL
13805: AND
13806: IFFALSE 13832
13808: PUSH
13809: LD_VAR 0 4
13813: PPUSH
13814: LD_INT 3
13816: PPUSH
13817: CALL_OW 275
13821: PUSH
13822: LD_VAR 0 5
13826: PUSH
13827: LD_INT 3
13829: ARRAY
13830: GREATEREQUAL
13831: AND
13832: ST_TO_ADDR
// end ;
13833: LD_VAR 0 3
13837: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13838: LD_INT 0
13840: PPUSH
13841: PPUSH
13842: PPUSH
13843: PPUSH
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
// result := false ;
13851: LD_ADDR_VAR 0 8
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13859: LD_VAR 0 5
13863: NOT
13864: IFTRUE 13873
13866: PUSH
13867: LD_VAR 0 1
13871: NOT
13872: OR
13873: IFTRUE 13882
13875: PUSH
13876: LD_VAR 0 2
13880: NOT
13881: OR
13882: IFTRUE 13891
13884: PUSH
13885: LD_VAR 0 3
13889: NOT
13890: OR
13891: IFFALSE 13895
// exit ;
13893: GO 14721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13895: LD_ADDR_VAR 0 14
13899: PUSH
13900: LD_VAR 0 1
13904: PPUSH
13905: LD_VAR 0 2
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_VAR 0 4
13919: PPUSH
13920: LD_VAR 0 5
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PPUSH
13929: CALL_OW 248
13933: PPUSH
13934: LD_INT 0
13936: PPUSH
13937: CALL 16002 0 6
13941: ST_TO_ADDR
// if not hexes then
13942: LD_VAR 0 14
13946: NOT
13947: IFFALSE 13951
// exit ;
13949: GO 14721
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_VAR 0 5
13960: PPUSH
13961: LD_INT 22
13963: PUSH
13964: LD_VAR 0 13
13968: PPUSH
13969: CALL_OW 255
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 2
13980: PUSH
13981: LD_INT 30
13983: PUSH
13984: LD_INT 0
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 30
13993: PUSH
13994: LD_INT 1
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 72
14014: ST_TO_ADDR
// for i = 1 to hexes do
14015: LD_ADDR_VAR 0 9
14019: PUSH
14020: DOUBLE
14021: LD_INT 1
14023: DEC
14024: ST_TO_ADDR
14025: LD_VAR 0 14
14029: PUSH
14030: FOR_TO
14031: IFFALSE 14719
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14033: LD_ADDR_VAR 0 13
14037: PUSH
14038: LD_VAR 0 14
14042: PUSH
14043: LD_VAR 0 9
14047: ARRAY
14048: PUSH
14049: LD_INT 1
14051: ARRAY
14052: PPUSH
14053: LD_VAR 0 14
14057: PUSH
14058: LD_VAR 0 9
14062: ARRAY
14063: PUSH
14064: LD_INT 2
14066: ARRAY
14067: PPUSH
14068: CALL_OW 428
14072: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14073: LD_VAR 0 14
14077: PUSH
14078: LD_VAR 0 9
14082: ARRAY
14083: PUSH
14084: LD_INT 1
14086: ARRAY
14087: PPUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_VAR 0 9
14097: ARRAY
14098: PUSH
14099: LD_INT 2
14101: ARRAY
14102: PPUSH
14103: CALL_OW 351
14107: IFTRUE 14146
14109: PUSH
14110: LD_VAR 0 14
14114: PUSH
14115: LD_VAR 0 9
14119: ARRAY
14120: PUSH
14121: LD_INT 1
14123: ARRAY
14124: PPUSH
14125: LD_VAR 0 14
14129: PUSH
14130: LD_VAR 0 9
14134: ARRAY
14135: PUSH
14136: LD_INT 2
14138: ARRAY
14139: PPUSH
14140: CALL_OW 488
14144: NOT
14145: OR
14146: IFTRUE 14163
14148: PUSH
14149: LD_VAR 0 13
14153: PPUSH
14154: CALL_OW 247
14158: PUSH
14159: LD_INT 3
14161: EQUAL
14162: OR
14163: IFFALSE 14169
// exit ;
14165: POP
14166: POP
14167: GO 14721
// if not tmp then
14169: LD_VAR 0 13
14173: NOT
14174: IFFALSE 14178
// continue ;
14176: GO 14030
// result := true ;
14178: LD_ADDR_VAR 0 8
14182: PUSH
14183: LD_INT 1
14185: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14186: LD_VAR 0 6
14190: IFFALSE 14207
14192: PUSH
14193: LD_VAR 0 13
14197: PPUSH
14198: CALL_OW 247
14202: PUSH
14203: LD_INT 2
14205: EQUAL
14206: AND
14207: IFFALSE 14224
14209: PUSH
14210: LD_VAR 0 13
14214: PPUSH
14215: CALL_OW 263
14219: PUSH
14220: LD_INT 1
14222: EQUAL
14223: AND
14224: IFFALSE 14388
// begin if IsDrivenBy ( tmp ) then
14226: LD_VAR 0 13
14230: PPUSH
14231: CALL_OW 311
14235: IFFALSE 14239
// continue ;
14237: GO 14030
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14239: LD_VAR 0 6
14243: PPUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 60
14249: PUSH
14250: EMPTY
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: LD_INT 55
14262: PUSH
14263: EMPTY
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 72
14278: IFFALSE 14386
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14280: LD_ADDR_VAR 0 18
14284: PUSH
14285: LD_VAR 0 6
14289: PPUSH
14290: LD_INT 3
14292: PUSH
14293: LD_INT 60
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 55
14308: PUSH
14309: EMPTY
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 72
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: ST_TO_ADDR
// if IsInUnit ( driver ) then
14329: LD_VAR 0 18
14333: PPUSH
14334: CALL_OW 310
14338: IFFALSE 14349
// ComExit ( driver ) ;
14340: LD_VAR 0 18
14344: PPUSH
14345: CALL 39992 0 1
// AddComEnterUnit ( driver , tmp ) ;
14349: LD_VAR 0 18
14353: PPUSH
14354: LD_VAR 0 13
14358: PPUSH
14359: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14363: LD_VAR 0 18
14367: PPUSH
14368: LD_VAR 0 7
14372: PPUSH
14373: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14377: LD_VAR 0 18
14381: PPUSH
14382: CALL_OW 181
// end ; continue ;
14386: GO 14030
// end ; if not cleaners or not tmp in cleaners then
14388: LD_VAR 0 6
14392: NOT
14393: IFTRUE 14408
14395: PUSH
14396: LD_VAR 0 13
14400: PUSH
14401: LD_VAR 0 6
14405: IN
14406: NOT
14407: OR
14408: IFFALSE 14717
// begin if dep then
14410: LD_VAR 0 17
14414: IFFALSE 14550
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14416: LD_ADDR_VAR 0 16
14420: PUSH
14421: LD_VAR 0 17
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: CALL_OW 250
14434: PPUSH
14435: LD_VAR 0 17
14439: PUSH
14440: LD_INT 1
14442: ARRAY
14443: PPUSH
14444: CALL_OW 254
14448: PPUSH
14449: LD_INT 5
14451: PPUSH
14452: CALL_OW 272
14456: PUSH
14457: LD_VAR 0 17
14461: PUSH
14462: LD_INT 1
14464: ARRAY
14465: PPUSH
14466: CALL_OW 251
14470: PPUSH
14471: LD_VAR 0 17
14475: PUSH
14476: LD_INT 1
14478: ARRAY
14479: PPUSH
14480: CALL_OW 254
14484: PPUSH
14485: LD_INT 5
14487: PPUSH
14488: CALL_OW 273
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14497: LD_VAR 0 16
14501: PUSH
14502: LD_INT 1
14504: ARRAY
14505: PPUSH
14506: LD_VAR 0 16
14510: PUSH
14511: LD_INT 2
14513: ARRAY
14514: PPUSH
14515: CALL_OW 488
14519: IFFALSE 14550
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14521: LD_VAR 0 13
14525: PPUSH
14526: LD_VAR 0 16
14530: PUSH
14531: LD_INT 1
14533: ARRAY
14534: PPUSH
14535: LD_VAR 0 16
14539: PUSH
14540: LD_INT 2
14542: ARRAY
14543: PPUSH
14544: CALL_OW 111
// continue ;
14548: GO 14030
// end ; end ; r := GetDir ( tmp ) ;
14550: LD_ADDR_VAR 0 15
14554: PUSH
14555: LD_VAR 0 13
14559: PPUSH
14560: CALL_OW 254
14564: ST_TO_ADDR
// if r = 5 then
14565: LD_VAR 0 15
14569: PUSH
14570: LD_INT 5
14572: EQUAL
14573: IFFALSE 14583
// r := 0 ;
14575: LD_ADDR_VAR 0 15
14579: PUSH
14580: LD_INT 0
14582: ST_TO_ADDR
// for j = r to 5 do
14583: LD_ADDR_VAR 0 10
14587: PUSH
14588: DOUBLE
14589: LD_VAR 0 15
14593: DEC
14594: ST_TO_ADDR
14595: LD_INT 5
14597: PUSH
14598: FOR_TO
14599: IFFALSE 14715
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14601: LD_ADDR_VAR 0 11
14605: PUSH
14606: LD_VAR 0 13
14610: PPUSH
14611: CALL_OW 250
14615: PPUSH
14616: LD_VAR 0 10
14620: PPUSH
14621: LD_INT 2
14623: PPUSH
14624: CALL_OW 272
14628: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14629: LD_ADDR_VAR 0 12
14633: PUSH
14634: LD_VAR 0 13
14638: PPUSH
14639: CALL_OW 251
14643: PPUSH
14644: LD_VAR 0 10
14648: PPUSH
14649: LD_INT 2
14651: PPUSH
14652: CALL_OW 273
14656: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14657: LD_VAR 0 11
14661: PPUSH
14662: LD_VAR 0 12
14666: PPUSH
14667: CALL_OW 488
14671: IFFALSE 14690
14673: PUSH
14674: LD_VAR 0 11
14678: PPUSH
14679: LD_VAR 0 12
14683: PPUSH
14684: CALL_OW 428
14688: NOT
14689: AND
14690: IFFALSE 14713
// begin ComMoveXY ( tmp , _x , _y ) ;
14692: LD_VAR 0 13
14696: PPUSH
14697: LD_VAR 0 11
14701: PPUSH
14702: LD_VAR 0 12
14706: PPUSH
14707: CALL_OW 111
// break ;
14711: GO 14715
// end ; end ;
14713: GO 14598
14715: POP
14716: POP
// end ; end ;
14717: GO 14030
14719: POP
14720: POP
// end ;
14721: LD_VAR 0 8
14725: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14726: LD_INT 0
14728: PPUSH
// result := true ;
14729: LD_ADDR_VAR 0 3
14733: PUSH
14734: LD_INT 1
14736: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14737: LD_VAR 0 2
14741: PUSH
14742: LD_INT 24
14744: DOUBLE
14745: EQUAL
14746: IFTRUE 14756
14748: LD_INT 33
14750: DOUBLE
14751: EQUAL
14752: IFTRUE 14756
14754: GO 14781
14756: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14757: LD_ADDR_VAR 0 3
14761: PUSH
14762: LD_INT 32
14764: PPUSH
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 321
14774: PUSH
14775: LD_INT 2
14777: EQUAL
14778: ST_TO_ADDR
14779: GO 15097
14781: LD_INT 20
14783: DOUBLE
14784: EQUAL
14785: IFTRUE 14789
14787: GO 14814
14789: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_INT 6
14797: PPUSH
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 321
14807: PUSH
14808: LD_INT 2
14810: EQUAL
14811: ST_TO_ADDR
14812: GO 15097
14814: LD_INT 22
14816: DOUBLE
14817: EQUAL
14818: IFTRUE 14828
14820: LD_INT 36
14822: DOUBLE
14823: EQUAL
14824: IFTRUE 14828
14826: GO 14853
14828: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14829: LD_ADDR_VAR 0 3
14833: PUSH
14834: LD_INT 15
14836: PPUSH
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 321
14846: PUSH
14847: LD_INT 2
14849: EQUAL
14850: ST_TO_ADDR
14851: GO 15097
14853: LD_INT 30
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 14886
14861: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 20
14869: PPUSH
14870: LD_VAR 0 1
14874: PPUSH
14875: CALL_OW 321
14879: PUSH
14880: LD_INT 2
14882: EQUAL
14883: ST_TO_ADDR
14884: GO 15097
14886: LD_INT 28
14888: DOUBLE
14889: EQUAL
14890: IFTRUE 14900
14892: LD_INT 21
14894: DOUBLE
14895: EQUAL
14896: IFTRUE 14900
14898: GO 14925
14900: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: LD_INT 21
14908: PPUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 321
14918: PUSH
14919: LD_INT 2
14921: EQUAL
14922: ST_TO_ADDR
14923: GO 15097
14925: LD_INT 16
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 14958
14933: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14934: LD_ADDR_VAR 0 3
14938: PUSH
14939: LD_INT 84
14941: PPUSH
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 321
14951: PUSH
14952: LD_INT 2
14954: EQUAL
14955: ST_TO_ADDR
14956: GO 15097
14958: LD_INT 19
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14972
14964: LD_INT 23
14966: DOUBLE
14967: EQUAL
14968: IFTRUE 14972
14970: GO 14997
14972: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14973: LD_ADDR_VAR 0 3
14977: PUSH
14978: LD_INT 83
14980: PPUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 321
14990: PUSH
14991: LD_INT 2
14993: EQUAL
14994: ST_TO_ADDR
14995: GO 15097
14997: LD_INT 17
14999: DOUBLE
15000: EQUAL
15001: IFTRUE 15005
15003: GO 15030
15005: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15006: LD_ADDR_VAR 0 3
15010: PUSH
15011: LD_INT 39
15013: PPUSH
15014: LD_VAR 0 1
15018: PPUSH
15019: CALL_OW 321
15023: PUSH
15024: LD_INT 2
15026: EQUAL
15027: ST_TO_ADDR
15028: GO 15097
15030: LD_INT 18
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15063
15038: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15039: LD_ADDR_VAR 0 3
15043: PUSH
15044: LD_INT 40
15046: PPUSH
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 321
15056: PUSH
15057: LD_INT 2
15059: EQUAL
15060: ST_TO_ADDR
15061: GO 15097
15063: LD_INT 27
15065: DOUBLE
15066: EQUAL
15067: IFTRUE 15071
15069: GO 15096
15071: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15072: LD_ADDR_VAR 0 3
15076: PUSH
15077: LD_INT 35
15079: PPUSH
15080: LD_VAR 0 1
15084: PPUSH
15085: CALL_OW 321
15089: PUSH
15090: LD_INT 2
15092: EQUAL
15093: ST_TO_ADDR
15094: GO 15097
15096: POP
// end ;
15097: LD_VAR 0 3
15101: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15102: LD_INT 0
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
// result := false ;
15115: LD_ADDR_VAR 0 6
15119: PUSH
15120: LD_INT 0
15122: ST_TO_ADDR
// if btype = b_depot then
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 0
15130: EQUAL
15131: IFFALSE 15143
// begin result := true ;
15133: LD_ADDR_VAR 0 6
15137: PUSH
15138: LD_INT 1
15140: ST_TO_ADDR
// exit ;
15141: GO 15997
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15143: LD_VAR 0 1
15147: NOT
15148: IFTRUE 15173
15150: PUSH
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 266
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: IN
15171: NOT
15172: OR
15173: IFTRUE 15182
15175: PUSH
15176: LD_VAR 0 2
15180: NOT
15181: OR
15182: IFTRUE 15218
15184: PUSH
15185: LD_VAR 0 5
15189: PUSH
15190: LD_INT 0
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 3
15201: PUSH
15202: LD_INT 4
15204: PUSH
15205: LD_INT 5
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: IN
15216: NOT
15217: OR
15218: IFTRUE 15237
15220: PUSH
15221: LD_VAR 0 3
15225: PPUSH
15226: LD_VAR 0 4
15230: PPUSH
15231: CALL_OW 488
15235: NOT
15236: OR
15237: IFFALSE 15241
// exit ;
15239: GO 15997
// side := GetSide ( depot ) ;
15241: LD_ADDR_VAR 0 9
15245: PUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 255
15255: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15256: LD_VAR 0 9
15260: PPUSH
15261: LD_VAR 0 2
15265: PPUSH
15266: CALL 14726 0 2
15270: NOT
15271: IFFALSE 15275
// exit ;
15273: GO 15997
// pom := GetBase ( depot ) ;
15275: LD_ADDR_VAR 0 10
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 274
15289: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15290: LD_ADDR_VAR 0 11
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: LD_VAR 0 1
15304: PPUSH
15305: CALL_OW 248
15309: PPUSH
15310: CALL_OW 450
15314: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15315: LD_VAR 0 10
15319: PPUSH
15320: LD_INT 1
15322: PPUSH
15323: CALL_OW 275
15327: PUSH
15328: LD_VAR 0 11
15332: PUSH
15333: LD_INT 1
15335: ARRAY
15336: GREATEREQUAL
15337: IFFALSE 15363
15339: PUSH
15340: LD_VAR 0 10
15344: PPUSH
15345: LD_INT 2
15347: PPUSH
15348: CALL_OW 275
15352: PUSH
15353: LD_VAR 0 11
15357: PUSH
15358: LD_INT 2
15360: ARRAY
15361: GREATEREQUAL
15362: AND
15363: IFFALSE 15389
15365: PUSH
15366: LD_VAR 0 10
15370: PPUSH
15371: LD_INT 3
15373: PPUSH
15374: CALL_OW 275
15378: PUSH
15379: LD_VAR 0 11
15383: PUSH
15384: LD_INT 3
15386: ARRAY
15387: GREATEREQUAL
15388: AND
15389: NOT
15390: IFFALSE 15394
// exit ;
15392: GO 15997
// if GetBType ( depot ) = b_depot then
15394: LD_VAR 0 1
15398: PPUSH
15399: CALL_OW 266
15403: PUSH
15404: LD_INT 0
15406: EQUAL
15407: IFFALSE 15419
// dist := 28 else
15409: LD_ADDR_VAR 0 14
15413: PUSH
15414: LD_INT 28
15416: ST_TO_ADDR
15417: GO 15427
// dist := 36 ;
15419: LD_ADDR_VAR 0 14
15423: PUSH
15424: LD_INT 36
15426: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_VAR 0 4
15441: PPUSH
15442: CALL_OW 297
15446: PUSH
15447: LD_VAR 0 14
15451: GREATER
15452: IFFALSE 15456
// exit ;
15454: GO 15997
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15456: LD_ADDR_VAR 0 12
15460: PUSH
15461: LD_VAR 0 2
15465: PPUSH
15466: LD_VAR 0 3
15470: PPUSH
15471: LD_VAR 0 4
15475: PPUSH
15476: LD_VAR 0 5
15480: PPUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 248
15490: PPUSH
15491: LD_INT 0
15493: PPUSH
15494: CALL 16002 0 6
15498: ST_TO_ADDR
// if not hexes then
15499: LD_VAR 0 12
15503: NOT
15504: IFFALSE 15508
// exit ;
15506: GO 15997
// hex := GetHexInfo ( x , y ) ;
15508: LD_ADDR_VAR 0 15
15512: PUSH
15513: LD_VAR 0 3
15517: PPUSH
15518: LD_VAR 0 4
15522: PPUSH
15523: CALL_OW 546
15527: ST_TO_ADDR
// if hex [ 1 ] then
15528: LD_VAR 0 15
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: IFFALSE 15540
// exit ;
15538: GO 15997
// height := hex [ 2 ] ;
15540: LD_ADDR_VAR 0 13
15544: PUSH
15545: LD_VAR 0 15
15549: PUSH
15550: LD_INT 2
15552: ARRAY
15553: ST_TO_ADDR
// for i = 1 to hexes do
15554: LD_ADDR_VAR 0 7
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_VAR 0 12
15568: PUSH
15569: FOR_TO
15570: IFFALSE 15914
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15572: LD_VAR 0 12
15576: PUSH
15577: LD_VAR 0 7
15581: ARRAY
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: PPUSH
15587: LD_VAR 0 12
15591: PUSH
15592: LD_VAR 0 7
15596: ARRAY
15597: PUSH
15598: LD_INT 2
15600: ARRAY
15601: PPUSH
15602: CALL_OW 488
15606: NOT
15607: IFTRUE 15649
15609: PUSH
15610: LD_VAR 0 12
15614: PUSH
15615: LD_VAR 0 7
15619: ARRAY
15620: PUSH
15621: LD_INT 1
15623: ARRAY
15624: PPUSH
15625: LD_VAR 0 12
15629: PUSH
15630: LD_VAR 0 7
15634: ARRAY
15635: PUSH
15636: LD_INT 2
15638: ARRAY
15639: PPUSH
15640: CALL_OW 428
15644: PUSH
15645: LD_INT 0
15647: GREATER
15648: OR
15649: IFTRUE 15687
15651: PUSH
15652: LD_VAR 0 12
15656: PUSH
15657: LD_VAR 0 7
15661: ARRAY
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: LD_VAR 0 12
15671: PUSH
15672: LD_VAR 0 7
15676: ARRAY
15677: PUSH
15678: LD_INT 2
15680: ARRAY
15681: PPUSH
15682: CALL_OW 351
15686: OR
15687: IFFALSE 15693
// exit ;
15689: POP
15690: POP
15691: GO 15997
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15693: LD_ADDR_VAR 0 8
15697: PUSH
15698: LD_VAR 0 12
15702: PUSH
15703: LD_VAR 0 7
15707: ARRAY
15708: PUSH
15709: LD_INT 1
15711: ARRAY
15712: PPUSH
15713: LD_VAR 0 12
15717: PUSH
15718: LD_VAR 0 7
15722: ARRAY
15723: PUSH
15724: LD_INT 2
15726: ARRAY
15727: PPUSH
15728: CALL_OW 546
15732: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15733: LD_VAR 0 8
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: IFTRUE 15763
15743: PUSH
15744: LD_VAR 0 8
15748: PUSH
15749: LD_INT 2
15751: ARRAY
15752: PUSH
15753: LD_VAR 0 13
15757: PUSH
15758: LD_INT 2
15760: PLUS
15761: GREATER
15762: OR
15763: IFTRUE 15785
15765: PUSH
15766: LD_VAR 0 8
15770: PUSH
15771: LD_INT 2
15773: ARRAY
15774: PUSH
15775: LD_VAR 0 13
15779: PUSH
15780: LD_INT 2
15782: MINUS
15783: LESS
15784: OR
15785: IFTRUE 15853
15787: PUSH
15788: LD_VAR 0 8
15792: PUSH
15793: LD_INT 3
15795: ARRAY
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: LD_INT 8
15802: PUSH
15803: LD_INT 9
15805: PUSH
15806: LD_INT 10
15808: PUSH
15809: LD_INT 11
15811: PUSH
15812: LD_INT 12
15814: PUSH
15815: LD_INT 13
15817: PUSH
15818: LD_INT 16
15820: PUSH
15821: LD_INT 17
15823: PUSH
15824: LD_INT 18
15826: PUSH
15827: LD_INT 19
15829: PUSH
15830: LD_INT 20
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: IN
15851: NOT
15852: OR
15853: IFTRUE 15866
15855: PUSH
15856: LD_VAR 0 8
15860: PUSH
15861: LD_INT 5
15863: ARRAY
15864: NOT
15865: OR
15866: IFTRUE 15906
15868: PUSH
15869: LD_VAR 0 8
15873: PUSH
15874: LD_INT 6
15876: ARRAY
15877: PUSH
15878: LD_INT 1
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: LD_INT 7
15886: PUSH
15887: LD_INT 9
15889: PUSH
15890: LD_INT 10
15892: PUSH
15893: LD_INT 11
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: IN
15904: NOT
15905: OR
15906: IFFALSE 15912
// exit ;
15908: POP
15909: POP
15910: GO 15997
// end ;
15912: GO 15569
15914: POP
15915: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15916: LD_VAR 0 9
15920: PPUSH
15921: LD_VAR 0 3
15925: PPUSH
15926: LD_VAR 0 4
15930: PPUSH
15931: LD_INT 20
15933: PPUSH
15934: CALL 7816 0 4
15938: PUSH
15939: LD_INT 4
15941: ARRAY
15942: IFFALSE 15946
// exit ;
15944: GO 15997
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15946: LD_VAR 0 2
15950: PUSH
15951: LD_INT 29
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: IN
15961: IFFALSE 15985
15963: PUSH
15964: LD_VAR 0 3
15968: PPUSH
15969: LD_VAR 0 4
15973: PPUSH
15974: LD_VAR 0 9
15978: PPUSH
15979: CALL_OW 440
15983: NOT
15984: AND
15985: IFFALSE 15989
// exit ;
15987: GO 15997
// result := true ;
15989: LD_ADDR_VAR 0 6
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// end ;
15997: LD_VAR 0 6
16001: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16002: LD_INT 0
16004: PPUSH
16005: PPUSH
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
16012: PPUSH
16013: PPUSH
16014: PPUSH
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
16021: PPUSH
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
16028: PPUSH
16029: PPUSH
16030: PPUSH
16031: PPUSH
16032: PPUSH
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
// result = [ ] ;
16062: LD_ADDR_VAR 0 7
16066: PUSH
16067: EMPTY
16068: ST_TO_ADDR
// temp_list = [ ] ;
16069: LD_ADDR_VAR 0 9
16073: PUSH
16074: EMPTY
16075: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16076: LD_VAR 0 4
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: LD_INT 2
16089: PUSH
16090: LD_INT 3
16092: PUSH
16093: LD_INT 4
16095: PUSH
16096: LD_INT 5
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: IN
16107: NOT
16108: IFTRUE 16151
16110: PUSH
16111: LD_VAR 0 1
16115: PUSH
16116: LD_INT 0
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: IN
16126: IFFALSE 16150
16128: PUSH
16129: LD_VAR 0 5
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: LD_INT 2
16139: PUSH
16140: LD_INT 3
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: IN
16148: NOT
16149: AND
16150: OR
16151: IFFALSE 16155
// exit ;
16153: GO 34554
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16155: LD_VAR 0 1
16159: PUSH
16160: LD_INT 6
16162: PUSH
16163: LD_INT 7
16165: PUSH
16166: LD_INT 8
16168: PUSH
16169: LD_INT 13
16171: PUSH
16172: LD_INT 12
16174: PUSH
16175: LD_INT 15
16177: PUSH
16178: LD_INT 11
16180: PUSH
16181: LD_INT 14
16183: PUSH
16184: LD_INT 10
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: IN
16198: IFFALSE 16208
// btype = b_lab ;
16200: LD_ADDR_VAR 0 1
16204: PUSH
16205: LD_INT 6
16207: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16208: LD_VAR 0 6
16212: PUSH
16213: LD_INT 0
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: LIST
16226: IN
16227: NOT
16228: IFTRUE 16296
16230: PUSH
16231: LD_VAR 0 1
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: LD_INT 6
16250: PUSH
16251: LD_INT 36
16253: PUSH
16254: LD_INT 4
16256: PUSH
16257: LD_INT 5
16259: PUSH
16260: LD_INT 31
16262: PUSH
16263: LD_INT 32
16265: PUSH
16266: LD_INT 33
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: IN
16282: NOT
16283: IFFALSE 16295
16285: PUSH
16286: LD_VAR 0 6
16290: PUSH
16291: LD_INT 1
16293: EQUAL
16294: AND
16295: OR
16296: IFTRUE 16328
16298: PUSH
16299: LD_VAR 0 1
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: IN
16314: NOT
16315: IFFALSE 16327
16317: PUSH
16318: LD_VAR 0 6
16322: PUSH
16323: LD_INT 2
16325: EQUAL
16326: AND
16327: OR
16328: IFFALSE 16338
// mode = 0 ;
16330: LD_ADDR_VAR 0 6
16334: PUSH
16335: LD_INT 0
16337: ST_TO_ADDR
// case mode of 0 :
16338: LD_VAR 0 6
16342: PUSH
16343: LD_INT 0
16345: DOUBLE
16346: EQUAL
16347: IFTRUE 16351
16349: GO 27804
16351: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16352: LD_ADDR_VAR 0 11
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: LD_INT 1
16372: NEG
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 1
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 0
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 1
16410: NEG
16411: PUSH
16412: LD_INT 0
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: NEG
16422: PUSH
16423: LD_INT 1
16425: NEG
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: NEG
16434: PUSH
16435: LD_INT 2
16437: NEG
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 2
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: LD_INT 1
16459: NEG
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 1
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 0
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 1
16487: NEG
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: LD_INT 3
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: LD_INT 3
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16545: LD_ADDR_VAR 0 12
16549: PUSH
16550: LD_INT 0
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 1
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 0
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 1
16603: NEG
16604: PUSH
16605: LD_INT 0
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PUSH
16616: LD_INT 1
16618: NEG
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: LD_INT 1
16629: NEG
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 2
16637: PUSH
16638: LD_INT 0
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: NEG
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 2
16668: NEG
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 2
16679: NEG
16680: PUSH
16681: LD_INT 1
16683: NEG
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 2
16691: NEG
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 3
16702: NEG
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 3
16713: NEG
16714: PUSH
16715: LD_INT 1
16717: NEG
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16741: LD_ADDR_VAR 0 13
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: LD_INT 1
16761: NEG
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: PUSH
16770: LD_INT 0
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 1
16779: PUSH
16780: LD_INT 1
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 0
16789: PUSH
16790: LD_INT 1
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 1
16799: NEG
16800: PUSH
16801: LD_INT 0
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 1
16810: NEG
16811: PUSH
16812: LD_INT 1
16814: NEG
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 1
16822: NEG
16823: PUSH
16824: LD_INT 2
16826: NEG
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 1
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: LD_INT 2
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 2
16864: NEG
16865: PUSH
16866: LD_INT 1
16868: NEG
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 2
16876: NEG
16877: PUSH
16878: LD_INT 2
16880: NEG
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 2
16888: NEG
16889: PUSH
16890: LD_INT 3
16892: NEG
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 3
16900: NEG
16901: PUSH
16902: LD_INT 2
16904: NEG
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 3
16912: NEG
16913: PUSH
16914: LD_INT 3
16916: NEG
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16940: LD_ADDR_VAR 0 14
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 0
16957: PUSH
16958: LD_INT 1
16960: NEG
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 1
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 0
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 1
16998: NEG
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 1
17009: NEG
17010: PUSH
17011: LD_INT 1
17013: NEG
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 1
17021: NEG
17022: PUSH
17023: LD_INT 2
17025: NEG
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 2
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 1
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 1
17055: PUSH
17056: LD_INT 2
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 1
17075: NEG
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 1
17086: NEG
17087: PUSH
17088: LD_INT 3
17090: NEG
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 0
17098: PUSH
17099: LD_INT 3
17101: NEG
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: LD_INT 2
17112: NEG
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17136: LD_ADDR_VAR 0 15
17140: PUSH
17141: LD_INT 0
17143: PUSH
17144: LD_INT 0
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 0
17153: PUSH
17154: LD_INT 1
17156: NEG
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 1
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 1
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 0
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 1
17194: NEG
17195: PUSH
17196: LD_INT 0
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 1
17205: NEG
17206: PUSH
17207: LD_INT 1
17209: NEG
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: LD_INT 1
17220: NEG
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: LD_INT 1
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 1
17248: NEG
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 2
17259: NEG
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: NEG
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 2
17282: PUSH
17283: LD_INT 1
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: LD_INT 0
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 3
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17329: LD_ADDR_VAR 0 16
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: LD_INT 0
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: LD_INT 1
17349: NEG
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 0
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 1
17387: NEG
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 1
17398: NEG
17399: PUSH
17400: LD_INT 1
17402: NEG
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 1
17410: NEG
17411: PUSH
17412: LD_INT 2
17414: NEG
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 2
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 2
17432: PUSH
17433: LD_INT 2
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 2
17452: NEG
17453: PUSH
17454: LD_INT 1
17456: NEG
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 2
17464: NEG
17465: PUSH
17466: LD_INT 2
17468: NEG
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 3
17486: PUSH
17487: LD_INT 3
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17522: LD_ADDR_VAR 0 17
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 0
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 1
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 1
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 0
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 1
17580: NEG
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 1
17591: NEG
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: NEG
17604: PUSH
17605: LD_INT 2
17607: NEG
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 0
17615: PUSH
17616: LD_INT 2
17618: NEG
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 2
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: LD_INT 2
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: NEG
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 2
17698: NEG
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 2
17709: NEG
17710: PUSH
17711: LD_INT 1
17713: NEG
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 2
17721: NEG
17722: PUSH
17723: LD_INT 2
17725: NEG
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17752: LD_ADDR_VAR 0 18
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 1
17821: NEG
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 2
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 2
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: NEG
17940: PUSH
17941: LD_INT 1
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 2
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17982: LD_ADDR_VAR 0 19
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 1
18040: NEG
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: LD_INT 2
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 2
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 2
18158: NEG
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: NEG
18170: PUSH
18171: LD_INT 1
18173: NEG
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 2
18181: NEG
18182: PUSH
18183: LD_INT 2
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18212: LD_ADDR_VAR 0 20
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: NEG
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: NEG
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: LD_INT 2
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: LD_INT 2
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: LD_INT 1
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 2
18388: NEG
18389: PUSH
18390: LD_INT 0
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 2
18399: NEG
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: LD_INT 2
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18442: LD_ADDR_VAR 0 21
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: NEG
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 2
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: NEG
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: NEG
18630: PUSH
18631: LD_INT 1
18633: NEG
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: NEG
18642: PUSH
18643: LD_INT 2
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18672: LD_ADDR_VAR 0 22
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 0
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: NEG
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: NEG
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: NEG
18754: PUSH
18755: LD_INT 2
18757: NEG
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 2
18768: NEG
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 2
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 2
18848: NEG
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: NEG
18872: PUSH
18873: LD_INT 2
18875: NEG
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18902: LD_ADDR_VAR 0 23
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: LD_INT 0
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 1
18960: NEG
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: NEG
18984: PUSH
18985: LD_INT 2
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: LD_INT 2
18998: NEG
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: NEG
19102: PUSH
19103: LD_INT 2
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: NEG
19114: PUSH
19115: LD_INT 3
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: LD_INT 3
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: LD_INT 2
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19182: LD_ADDR_VAR 0 24
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: LD_INT 1
19202: NEG
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: LD_INT 0
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: NEG
19252: PUSH
19253: LD_INT 1
19255: NEG
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 2
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 2
19358: NEG
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 2
19381: NEG
19382: PUSH
19383: LD_INT 2
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 2
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 3
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 3
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19458: LD_ADDR_VAR 0 25
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: LD_INT 2
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: NEG
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 2
19657: NEG
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 3
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: LD_INT 3
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: LD_INT 3
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19732: LD_ADDR_VAR 0 26
19736: PUSH
19737: LD_INT 0
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 0
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 2
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 2
19908: NEG
19909: PUSH
19910: LD_INT 0
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 2
19919: NEG
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: NEG
19932: PUSH
19933: LD_INT 2
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 3
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20008: LD_ADDR_VAR 0 27
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 0
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: NEG
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: NEG
20090: PUSH
20091: LD_INT 2
20093: NEG
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: LD_INT 2
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: LD_INT 1
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 1
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: LD_INT 1
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 2
20184: NEG
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: LD_INT 1
20199: NEG
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: LD_INT 2
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 2
20230: NEG
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 3
20241: NEG
20242: PUSH
20243: LD_INT 1
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 3
20253: NEG
20254: PUSH
20255: LD_INT 2
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20288: LD_ADDR_VAR 0 28
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: NEG
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 2
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 2
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 3
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: LD_INT 3
20515: NEG
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 3
20523: NEG
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 3
20535: NEG
20536: PUSH
20537: LD_INT 2
20539: NEG
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20570: LD_ADDR_VAR 0 29
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: LD_INT 0
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 1
20651: NEG
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: NEG
20761: PUSH
20762: LD_INT 3
20764: NEG
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 3
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: LD_INT 3
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 1
20803: NEG
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 3
20814: NEG
20815: PUSH
20816: LD_INT 2
20818: NEG
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20849: LD_ADDR_VAR 0 30
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: NEG
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: PUSH
20932: LD_INT 2
20934: NEG
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 2
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: NEG
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: LD_INT 3
21042: NEG
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 3
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: LD_INT 3
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: NEG
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 3
21092: NEG
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21127: LD_ADDR_VAR 0 31
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: NEG
21186: PUSH
21187: LD_INT 0
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: LD_INT 2
21212: NEG
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 2
21316: NEG
21317: PUSH
21318: LD_INT 3
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 3
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: LD_INT 3
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 3
21370: NEG
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21405: LD_ADDR_VAR 0 32
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: LD_INT 1
21425: NEG
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 0
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: LD_INT 2
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: LD_INT 1
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 2
21571: NEG
21572: PUSH
21573: LD_INT 0
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: LD_INT 3
21598: NEG
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 1
21606: PUSH
21607: LD_INT 2
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 2
21637: NEG
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 3
21648: NEG
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21683: LD_ADDR_VAR 0 33
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 2
21861: NEG
21862: PUSH
21863: LD_INT 2
21865: NEG
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: LD_INT 3
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: LD_INT 3
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: LD_INT 2
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 3
21927: NEG
21928: PUSH
21929: LD_INT 2
21931: NEG
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21962: LD_ADDR_VAR 0 34
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 1
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: LD_INT 2
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 2
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 2
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: NEG
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 2
22129: NEG
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 2
22141: NEG
22142: PUSH
22143: LD_INT 2
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 3
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 3
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 3
22207: NEG
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22242: LD_ADDR_VAR 0 35
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 0
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: LD_INT 1
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22354: LD_ADDR_VAR 0 36
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: NEG
22436: PUSH
22437: LD_INT 2
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22466: LD_ADDR_VAR 0 37
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22578: LD_ADDR_VAR 0 38
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 1
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22690: LD_ADDR_VAR 0 39
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: LD_INT 0
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: PUSH
22729: LD_INT 1
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 0
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: LD_INT 0
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: LD_INT 2
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 2
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22802: LD_ADDR_VAR 0 40
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22914: LD_ADDR_VAR 0 41
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: LD_INT 1
22934: NEG
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: LD_INT 2
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 2
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: LD_INT 0
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 2
23092: NEG
23093: PUSH
23094: LD_INT 2
23096: NEG
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 2
23104: NEG
23105: PUSH
23106: LD_INT 3
23108: NEG
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 3
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 3
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: LD_INT 2
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 3
23157: PUSH
23158: LD_INT 3
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 2
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: NEG
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 3
23188: NEG
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 3
23199: NEG
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 3
23211: NEG
23212: PUSH
23213: LD_INT 2
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 3
23223: NEG
23224: PUSH
23225: LD_INT 3
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23264: LD_ADDR_VAR 0 42
23268: PUSH
23269: LD_INT 0
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: NEG
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: NEG
23346: PUSH
23347: LD_INT 2
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 1
23371: NEG
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 2
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 2
23430: NEG
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 2
23442: NEG
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: LD_INT 3
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: LD_INT 3
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: LD_INT 3
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 3
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 3
23561: NEG
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 3
23573: NEG
23574: PUSH
23575: LD_INT 3
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23614: LD_ADDR_VAR 0 43
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 0
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: LD_INT 2
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 2
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 2
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: LD_INT 3
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 3
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 2
23829: NEG
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 3
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: LD_INT 3
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 3
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 2
23899: NEG
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 3
23910: NEG
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 3
23921: NEG
23922: PUSH
23923: LD_INT 1
23925: NEG
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23962: LD_ADDR_VAR 0 44
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 1
24020: NEG
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: LD_INT 1
24035: NEG
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 1
24043: NEG
24044: PUSH
24045: LD_INT 2
24047: NEG
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 2
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: NEG
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: NEG
24153: PUSH
24154: LD_INT 3
24156: NEG
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: LD_INT 1
24167: NEG
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 3
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 3
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: LD_INT 3
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: NEG
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 3
24236: NEG
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 3
24247: NEG
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 3
24259: NEG
24260: PUSH
24261: LD_INT 2
24263: NEG
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 3
24271: NEG
24272: PUSH
24273: LD_INT 3
24275: NEG
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24312: LD_ADDR_VAR 0 45
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 1
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 2
24408: NEG
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: LD_INT 1
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 2
24478: NEG
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 2
24490: NEG
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: NEG
24503: PUSH
24504: LD_INT 3
24506: NEG
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 3
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: LD_INT 3
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 3
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 3
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: LD_INT 3
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: LD_INT 3
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: LD_INT 3
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 3
24609: NEG
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: LD_INT 3
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24662: LD_ADDR_VAR 0 46
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: NEG
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: LD_INT 2
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 2
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 2
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 2
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 2
24828: NEG
24829: PUSH
24830: LD_INT 0
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 2
24839: NEG
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: LD_INT 3
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: LD_INT 3
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 3
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 3
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: LD_INT 3
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 2
24947: NEG
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 3
24958: NEG
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 3
24969: NEG
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25010: LD_ADDR_VAR 0 47
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: LD_INT 2
25095: NEG
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: LD_INT 2
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 2
25125: NEG
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25161: LD_ADDR_VAR 0 48
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 2
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 1
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25308: LD_ADDR_VAR 0 49
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: LD_INT 2
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25452: LD_ADDR_VAR 0 50
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: NEG
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: LD_INT 1
25525: NEG
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25596: LD_ADDR_VAR 0 51
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: NEG
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: LD_INT 2
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: NEG
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25743: LD_ADDR_VAR 0 52
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: LD_INT 0
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 0
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 2
25858: NEG
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: NEG
25871: PUSH
25872: LD_INT 2
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25894: LD_ADDR_VAR 0 53
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26124: LD_ADDR_VAR 0 54
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 2
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26354: LD_ADDR_VAR 0 55
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26584: LD_ADDR_VAR 0 56
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: NEG
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 2
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26814: LD_ADDR_VAR 0 57
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 2
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27044: LD_ADDR_VAR 0 58
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 2
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27274: LD_ADDR_VAR 0 59
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27362: LD_ADDR_VAR 0 60
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27450: LD_ADDR_VAR 0 61
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27538: LD_ADDR_VAR 0 62
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27626: LD_ADDR_VAR 0 63
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: NEG
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27714: LD_ADDR_VAR 0 64
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: NEG
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// end ; 1 :
27802: GO 33699
27804: LD_INT 1
27806: DOUBLE
27807: EQUAL
27808: IFTRUE 27812
27810: GO 30435
27812: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27813: LD_ADDR_VAR 0 11
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: LD_INT 3
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: LD_INT 3
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: LD_INT 2
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27857: LD_ADDR_VAR 0 12
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 3
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 3
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27898: LD_ADDR_VAR 0 13
27902: PUSH
27903: LD_INT 3
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 3
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27938: LD_ADDR_VAR 0 14
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27979: LD_ADDR_VAR 0 15
27983: PUSH
27984: LD_INT 2
27986: NEG
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 3
27997: NEG
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 3
28008: NEG
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28023: LD_ADDR_VAR 0 16
28027: PUSH
28028: LD_INT 2
28030: NEG
28031: PUSH
28032: LD_INT 3
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 3
28042: NEG
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 3
28054: NEG
28055: PUSH
28056: LD_INT 3
28058: NEG
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28069: LD_ADDR_VAR 0 17
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: LD_INT 3
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 3
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: LD_INT 2
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28113: LD_ADDR_VAR 0 18
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 3
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28154: LD_ADDR_VAR 0 19
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 3
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28194: LD_ADDR_VAR 0 20
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28235: LD_ADDR_VAR 0 21
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 3
28253: NEG
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 3
28264: NEG
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28279: LD_ADDR_VAR 0 22
28283: PUSH
28284: LD_INT 2
28286: NEG
28287: PUSH
28288: LD_INT 3
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 3
28298: NEG
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 3
28310: NEG
28311: PUSH
28312: LD_INT 3
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28325: LD_ADDR_VAR 0 23
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 3
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 4
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: LD_INT 3
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28369: LD_ADDR_VAR 0 24
28373: PUSH
28374: LD_INT 3
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 3
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 4
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28410: LD_ADDR_VAR 0 25
28414: PUSH
28415: LD_INT 3
28417: PUSH
28418: LD_INT 3
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 4
28427: PUSH
28428: LD_INT 3
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 3
28437: PUSH
28438: LD_INT 4
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28450: LD_ADDR_VAR 0 26
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 3
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: LD_INT 4
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 3
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28491: LD_ADDR_VAR 0 27
28495: PUSH
28496: LD_INT 3
28498: NEG
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 3
28509: NEG
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 4
28520: NEG
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28535: LD_ADDR_VAR 0 28
28539: PUSH
28540: LD_INT 3
28542: NEG
28543: PUSH
28544: LD_INT 3
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 3
28554: NEG
28555: PUSH
28556: LD_INT 4
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 4
28566: NEG
28567: PUSH
28568: LD_INT 3
28570: NEG
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28581: LD_ADDR_VAR 0 29
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: LD_INT 3
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 3
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 2
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: LD_INT 4
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 4
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: LD_INT 3
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 5
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: LD_INT 5
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 4
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 6
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: LD_INT 6
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: LD_INT 5
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28736: LD_ADDR_VAR 0 30
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 3
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 3
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 3
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 4
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 4
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 4
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 5
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 5
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 5
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 6
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 6
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28879: LD_ADDR_VAR 0 31
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: LD_INT 2
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: PUSH
28897: LD_INT 3
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 4
28916: PUSH
28917: LD_INT 3
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 4
28926: PUSH
28927: LD_INT 4
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 3
28936: PUSH
28937: LD_INT 4
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 5
28946: PUSH
28947: LD_INT 4
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 5
28956: PUSH
28957: LD_INT 5
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 4
28966: PUSH
28967: LD_INT 5
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 6
28976: PUSH
28977: LD_INT 5
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 6
28986: PUSH
28987: LD_INT 6
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 5
28996: PUSH
28997: LD_INT 6
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29018: LD_ADDR_VAR 0 32
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 4
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 4
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 3
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: LD_INT 5
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 5
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: LD_INT 4
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: LD_INT 6
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: LD_INT 6
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 1
29138: NEG
29139: PUSH
29140: LD_INT 5
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29161: LD_ADDR_VAR 0 33
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 3
29179: NEG
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 3
29190: NEG
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 3
29202: NEG
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 4
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 4
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 4
29236: NEG
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 5
29247: NEG
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 5
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 5
29270: NEG
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 6
29281: NEG
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 6
29292: NEG
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29316: LD_ADDR_VAR 0 34
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 3
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 3
29335: NEG
29336: PUSH
29337: LD_INT 2
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 3
29347: NEG
29348: PUSH
29349: LD_INT 3
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 3
29359: NEG
29360: PUSH
29361: LD_INT 4
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 4
29371: NEG
29372: PUSH
29373: LD_INT 3
29375: NEG
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 4
29383: NEG
29384: PUSH
29385: LD_INT 4
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 4
29395: NEG
29396: PUSH
29397: LD_INT 5
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 5
29407: NEG
29408: PUSH
29409: LD_INT 4
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 5
29419: NEG
29420: PUSH
29421: LD_INT 5
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 5
29431: NEG
29432: PUSH
29433: LD_INT 6
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 6
29443: NEG
29444: PUSH
29445: LD_INT 5
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 6
29455: NEG
29456: PUSH
29457: LD_INT 6
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29479: LD_ADDR_VAR 0 41
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 3
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: LD_INT 2
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29523: LD_ADDR_VAR 0 42
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29564: LD_ADDR_VAR 0 43
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 3
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29604: LD_ADDR_VAR 0 44
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29645: LD_ADDR_VAR 0 45
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 2
29663: NEG
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 3
29674: NEG
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29689: LD_ADDR_VAR 0 46
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 2
29708: NEG
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29735: LD_ADDR_VAR 0 47
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 3
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29768: LD_ADDR_VAR 0 48
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 2
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29799: LD_ADDR_VAR 0 49
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 3
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29828: LD_ADDR_VAR 0 50
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: LD_INT 3
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: LD_INT 3
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29857: LD_ADDR_VAR 0 51
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 2
29875: NEG
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29888: LD_ADDR_VAR 0 52
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 3
29907: NEG
29908: PUSH
29909: LD_INT 2
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29921: LD_ADDR_VAR 0 53
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: LIST
29964: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29965: LD_ADDR_VAR 0 54
29969: PUSH
29970: LD_INT 2
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30006: LD_ADDR_VAR 0 55
30010: PUSH
30011: LD_INT 3
30013: PUSH
30014: LD_INT 2
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 3
30023: PUSH
30024: LD_INT 3
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30046: LD_ADDR_VAR 0 56
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 3
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30087: LD_ADDR_VAR 0 57
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 3
30105: NEG
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 3
30116: NEG
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: LIST
30130: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30131: LD_ADDR_VAR 0 58
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: LD_INT 3
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: NEG
30163: PUSH
30164: LD_INT 3
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30177: LD_ADDR_VAR 0 59
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30221: LD_ADDR_VAR 0 60
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 2
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30262: LD_ADDR_VAR 0 61
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30302: LD_ADDR_VAR 0 62
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: LD_INT 2
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30343: LD_ADDR_VAR 0 63
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30387: LD_ADDR_VAR 0 64
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: LD_INT 2
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: ST_TO_ADDR
// end ; 2 :
30433: GO 33699
30435: LD_INT 2
30437: DOUBLE
30438: EQUAL
30439: IFTRUE 30443
30441: GO 33698
30443: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30444: LD_ADDR_VAR 0 29
30448: PUSH
30449: LD_INT 4
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 4
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 5
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 4
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: LD_INT 3
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 4
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 4
30574: PUSH
30575: LD_INT 4
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 3
30584: PUSH
30585: LD_INT 4
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: LD_INT 4
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 4
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: LD_INT 3
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 4
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 5
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 5
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 4
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 5
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 2
30750: NEG
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 3
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 4
30794: NEG
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 4
30806: NEG
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 2
30818: NEG
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 4
30829: NEG
30830: PUSH
30831: LD_INT 4
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: LD_INT 5
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: NEG
30854: PUSH
30855: LD_INT 4
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: NEG
30866: PUSH
30867: LD_INT 3
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 4
30877: NEG
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 5
30889: NEG
30890: PUSH
30891: LD_INT 4
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 5
30901: NEG
30902: PUSH
30903: LD_INT 5
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: NEG
30914: PUSH
30915: LD_INT 5
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 5
30925: NEG
30926: PUSH
30927: LD_INT 3
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30982: LD_ADDR_VAR 0 30
30986: PUSH
30987: LD_INT 4
30989: PUSH
30990: LD_INT 4
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 4
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 5
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 5
31019: PUSH
31020: LD_INT 5
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 4
31029: PUSH
31030: LD_INT 5
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: LD_INT 4
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 3
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 5
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: LD_INT 5
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 2
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: LD_INT 3
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 4
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: LD_INT 4
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: LD_INT 3
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: LD_INT 2
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 4
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 2
31161: NEG
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 4
31172: NEG
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 4
31183: NEG
31184: PUSH
31185: LD_INT 1
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 3
31195: NEG
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 3
31206: NEG
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 4
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 5
31228: NEG
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 5
31239: NEG
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 5
31251: NEG
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: NEG
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 3
31286: NEG
31287: PUSH
31288: LD_INT 4
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: NEG
31299: PUSH
31300: LD_INT 3
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: LD_INT 2
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 3
31322: NEG
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 4
31334: NEG
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 4
31346: NEG
31347: PUSH
31348: LD_INT 4
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: LD_INT 4
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 4
31370: NEG
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 4
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: LD_INT 5
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 4
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: LD_INT 3
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: LD_INT 3
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 4
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: LD_INT 5
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: LD_INT 3
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: NEG
31473: PUSH
31474: LD_INT 5
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31529: LD_ADDR_VAR 0 31
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: LD_INT 4
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: LD_INT 4
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 4
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: LD_INT 3
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: LD_INT 5
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 3
31640: NEG
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: NEG
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 4
31685: NEG
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 4
31696: NEG
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 4
31708: NEG
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 4
31731: NEG
31732: PUSH
31733: LD_INT 4
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 4
31743: NEG
31744: PUSH
31745: LD_INT 5
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 4
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 4
31779: NEG
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 5
31791: NEG
31792: PUSH
31793: LD_INT 4
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 5
31803: NEG
31804: PUSH
31805: LD_INT 5
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: LD_INT 5
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 5
31827: NEG
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 4
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 3
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: NEG
31895: PUSH
31896: LD_INT 3
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: LD_INT 4
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: NEG
31930: PUSH
31931: LD_INT 4
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 5
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 5
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 4
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 3
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 5
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32079: LD_ADDR_VAR 0 32
32083: PUSH
32084: LD_INT 4
32086: NEG
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 4
32097: NEG
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: NEG
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: NEG
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 4
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 5
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 5
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 5
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 3
32177: NEG
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: NEG
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 3
32200: NEG
32201: PUSH
32202: LD_INT 4
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 2
32212: NEG
32213: PUSH
32214: LD_INT 3
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 3
32236: NEG
32237: PUSH
32238: LD_INT 2
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 4
32248: NEG
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 4
32260: NEG
32261: PUSH
32262: LD_INT 4
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: LD_INT 4
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 4
32284: NEG
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: LD_INT 4
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 5
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: LD_INT 4
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 3
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: NEG
32352: PUSH
32353: LD_INT 4
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 5
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: LD_INT 3
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: LD_INT 5
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 4
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 4
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 4
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 4
32491: PUSH
32492: LD_INT 4
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 4
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 5
32511: PUSH
32512: LD_INT 4
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 5
32521: PUSH
32522: LD_INT 5
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 4
32531: PUSH
32532: LD_INT 5
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: LD_INT 4
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: PUSH
32552: LD_INT 3
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 5
32561: PUSH
32562: LD_INT 3
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 3
32571: PUSH
32572: LD_INT 5
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32626: LD_ADDR_VAR 0 33
32630: PUSH
32631: LD_INT 4
32633: NEG
32634: PUSH
32635: LD_INT 4
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 4
32645: NEG
32646: PUSH
32647: LD_INT 5
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: LD_INT 4
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 3
32669: NEG
32670: PUSH
32671: LD_INT 3
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 4
32681: NEG
32682: PUSH
32683: LD_INT 3
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 5
32693: NEG
32694: PUSH
32695: LD_INT 4
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 5
32705: NEG
32706: PUSH
32707: LD_INT 5
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 3
32717: NEG
32718: PUSH
32719: LD_INT 5
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 5
32729: NEG
32730: PUSH
32731: LD_INT 3
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 3
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 4
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: LD_INT 3
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 2
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: LD_INT 4
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: LD_INT 4
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 4
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 5
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 5
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 4
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 3
32915: PUSH
32916: LD_INT 2
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 5
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 4
32966: PUSH
32967: LD_INT 4
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 3
32976: PUSH
32977: LD_INT 4
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 4
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 4
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 4
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 3
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: LD_INT 4
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 5
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 4
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: LD_INT 3
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33164: LD_ADDR_VAR 0 34
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: LD_INT 4
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 5
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: LD_INT 4
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 4
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: LD_INT 5
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: LD_INT 3
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: LD_INT 5
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 3
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 4
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 4
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 3
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: LD_INT 2
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 4
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: LD_INT 4
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 4
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 5
33386: PUSH
33387: LD_INT 4
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 5
33396: PUSH
33397: LD_INT 5
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 4
33406: PUSH
33407: LD_INT 5
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 3
33416: PUSH
33417: LD_INT 4
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 3
33426: PUSH
33427: LD_INT 3
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: LD_INT 3
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: LD_INT 5
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 4
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 4
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 4
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: LD_INT 2
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 4
33549: NEG
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 4
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 3
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 3
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: NEG
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 5
33605: NEG
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 5
33616: NEG
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 5
33628: NEG
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 3
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// end ; end ;
33696: GO 33699
33698: POP
// case btype of b_depot , b_warehouse :
33699: LD_VAR 0 1
33703: PUSH
33704: LD_INT 0
33706: DOUBLE
33707: EQUAL
33708: IFTRUE 33718
33710: LD_INT 1
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33919
33718: POP
// case nation of nation_american :
33719: LD_VAR 0 5
33723: PUSH
33724: LD_INT 1
33726: DOUBLE
33727: EQUAL
33728: IFTRUE 33732
33730: GO 33788
33732: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33733: LD_ADDR_VAR 0 9
33737: PUSH
33738: LD_VAR 0 11
33742: PUSH
33743: LD_VAR 0 12
33747: PUSH
33748: LD_VAR 0 13
33752: PUSH
33753: LD_VAR 0 14
33757: PUSH
33758: LD_VAR 0 15
33762: PUSH
33763: LD_VAR 0 16
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: PUSH
33776: LD_VAR 0 4
33780: PUSH
33781: LD_INT 1
33783: PLUS
33784: ARRAY
33785: ST_TO_ADDR
33786: GO 33917
33788: LD_INT 2
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33796
33794: GO 33852
33796: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33797: LD_ADDR_VAR 0 9
33801: PUSH
33802: LD_VAR 0 17
33806: PUSH
33807: LD_VAR 0 18
33811: PUSH
33812: LD_VAR 0 19
33816: PUSH
33817: LD_VAR 0 20
33821: PUSH
33822: LD_VAR 0 21
33826: PUSH
33827: LD_VAR 0 22
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: PUSH
33840: LD_VAR 0 4
33844: PUSH
33845: LD_INT 1
33847: PLUS
33848: ARRAY
33849: ST_TO_ADDR
33850: GO 33917
33852: LD_INT 3
33854: DOUBLE
33855: EQUAL
33856: IFTRUE 33860
33858: GO 33916
33860: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33861: LD_ADDR_VAR 0 9
33865: PUSH
33866: LD_VAR 0 23
33870: PUSH
33871: LD_VAR 0 24
33875: PUSH
33876: LD_VAR 0 25
33880: PUSH
33881: LD_VAR 0 26
33885: PUSH
33886: LD_VAR 0 27
33890: PUSH
33891: LD_VAR 0 28
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: PUSH
33904: LD_VAR 0 4
33908: PUSH
33909: LD_INT 1
33911: PLUS
33912: ARRAY
33913: ST_TO_ADDR
33914: GO 33917
33916: POP
33917: GO 34472
33919: LD_INT 2
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33933
33925: LD_INT 3
33927: DOUBLE
33928: EQUAL
33929: IFTRUE 33933
33931: GO 33989
33933: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33934: LD_ADDR_VAR 0 9
33938: PUSH
33939: LD_VAR 0 29
33943: PUSH
33944: LD_VAR 0 30
33948: PUSH
33949: LD_VAR 0 31
33953: PUSH
33954: LD_VAR 0 32
33958: PUSH
33959: LD_VAR 0 33
33963: PUSH
33964: LD_VAR 0 34
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: PUSH
33977: LD_VAR 0 4
33981: PUSH
33982: LD_INT 1
33984: PLUS
33985: ARRAY
33986: ST_TO_ADDR
33987: GO 34472
33989: LD_INT 16
33991: DOUBLE
33992: EQUAL
33993: IFTRUE 34051
33995: LD_INT 17
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34051
34001: LD_INT 18
34003: DOUBLE
34004: EQUAL
34005: IFTRUE 34051
34007: LD_INT 19
34009: DOUBLE
34010: EQUAL
34011: IFTRUE 34051
34013: LD_INT 22
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34051
34019: LD_INT 20
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34051
34025: LD_INT 21
34027: DOUBLE
34028: EQUAL
34029: IFTRUE 34051
34031: LD_INT 23
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34051
34037: LD_INT 24
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34051
34043: LD_INT 25
34045: DOUBLE
34046: EQUAL
34047: IFTRUE 34051
34049: GO 34107
34051: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34052: LD_ADDR_VAR 0 9
34056: PUSH
34057: LD_VAR 0 35
34061: PUSH
34062: LD_VAR 0 36
34066: PUSH
34067: LD_VAR 0 37
34071: PUSH
34072: LD_VAR 0 38
34076: PUSH
34077: LD_VAR 0 39
34081: PUSH
34082: LD_VAR 0 40
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: PUSH
34095: LD_VAR 0 4
34099: PUSH
34100: LD_INT 1
34102: PLUS
34103: ARRAY
34104: ST_TO_ADDR
34105: GO 34472
34107: LD_INT 6
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34163
34113: LD_INT 7
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34163
34119: LD_INT 8
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34163
34125: LD_INT 13
34127: DOUBLE
34128: EQUAL
34129: IFTRUE 34163
34131: LD_INT 12
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34163
34137: LD_INT 15
34139: DOUBLE
34140: EQUAL
34141: IFTRUE 34163
34143: LD_INT 11
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34163
34149: LD_INT 14
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34163
34155: LD_INT 10
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34219
34163: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34164: LD_ADDR_VAR 0 9
34168: PUSH
34169: LD_VAR 0 41
34173: PUSH
34174: LD_VAR 0 42
34178: PUSH
34179: LD_VAR 0 43
34183: PUSH
34184: LD_VAR 0 44
34188: PUSH
34189: LD_VAR 0 45
34193: PUSH
34194: LD_VAR 0 46
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: PUSH
34207: LD_VAR 0 4
34211: PUSH
34212: LD_INT 1
34214: PLUS
34215: ARRAY
34216: ST_TO_ADDR
34217: GO 34472
34219: LD_INT 36
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34283
34227: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34228: LD_ADDR_VAR 0 9
34232: PUSH
34233: LD_VAR 0 47
34237: PUSH
34238: LD_VAR 0 48
34242: PUSH
34243: LD_VAR 0 49
34247: PUSH
34248: LD_VAR 0 50
34252: PUSH
34253: LD_VAR 0 51
34257: PUSH
34258: LD_VAR 0 52
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: PUSH
34271: LD_VAR 0 4
34275: PUSH
34276: LD_INT 1
34278: PLUS
34279: ARRAY
34280: ST_TO_ADDR
34281: GO 34472
34283: LD_INT 4
34285: DOUBLE
34286: EQUAL
34287: IFTRUE 34309
34289: LD_INT 5
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34309
34295: LD_INT 34
34297: DOUBLE
34298: EQUAL
34299: IFTRUE 34309
34301: LD_INT 37
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34309
34307: GO 34365
34309: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34310: LD_ADDR_VAR 0 9
34314: PUSH
34315: LD_VAR 0 53
34319: PUSH
34320: LD_VAR 0 54
34324: PUSH
34325: LD_VAR 0 55
34329: PUSH
34330: LD_VAR 0 56
34334: PUSH
34335: LD_VAR 0 57
34339: PUSH
34340: LD_VAR 0 58
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: PUSH
34353: LD_VAR 0 4
34357: PUSH
34358: LD_INT 1
34360: PLUS
34361: ARRAY
34362: ST_TO_ADDR
34363: GO 34472
34365: LD_INT 31
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34415
34371: LD_INT 32
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34415
34377: LD_INT 33
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34415
34383: LD_INT 27
34385: DOUBLE
34386: EQUAL
34387: IFTRUE 34415
34389: LD_INT 26
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34415
34395: LD_INT 28
34397: DOUBLE
34398: EQUAL
34399: IFTRUE 34415
34401: LD_INT 29
34403: DOUBLE
34404: EQUAL
34405: IFTRUE 34415
34407: LD_INT 30
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 34471
34415: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34416: LD_ADDR_VAR 0 9
34420: PUSH
34421: LD_VAR 0 59
34425: PUSH
34426: LD_VAR 0 60
34430: PUSH
34431: LD_VAR 0 61
34435: PUSH
34436: LD_VAR 0 62
34440: PUSH
34441: LD_VAR 0 63
34445: PUSH
34446: LD_VAR 0 64
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: PUSH
34459: LD_VAR 0 4
34463: PUSH
34464: LD_INT 1
34466: PLUS
34467: ARRAY
34468: ST_TO_ADDR
34469: GO 34472
34471: POP
// temp_list2 = [ ] ;
34472: LD_ADDR_VAR 0 10
34476: PUSH
34477: EMPTY
34478: ST_TO_ADDR
// for i in temp_list do
34479: LD_ADDR_VAR 0 8
34483: PUSH
34484: LD_VAR 0 9
34488: PUSH
34489: FOR_IN
34490: IFFALSE 34542
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34492: LD_ADDR_VAR 0 10
34496: PUSH
34497: LD_VAR 0 10
34501: PUSH
34502: LD_VAR 0 8
34506: PUSH
34507: LD_INT 1
34509: ARRAY
34510: PUSH
34511: LD_VAR 0 2
34515: PLUS
34516: PUSH
34517: LD_VAR 0 8
34521: PUSH
34522: LD_INT 2
34524: ARRAY
34525: PUSH
34526: LD_VAR 0 3
34530: PLUS
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: ADD
34539: ST_TO_ADDR
34540: GO 34489
34542: POP
34543: POP
// result = temp_list2 ;
34544: LD_ADDR_VAR 0 7
34548: PUSH
34549: LD_VAR 0 10
34553: ST_TO_ADDR
// end ;
34554: LD_VAR 0 7
34558: RET
// export function EnemyInRange ( unit , dist ) ; begin
34559: LD_INT 0
34561: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: LD_VAR 0 1
34571: PPUSH
34572: CALL_OW 255
34576: PPUSH
34577: LD_VAR 0 1
34581: PPUSH
34582: CALL_OW 250
34586: PPUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: CALL_OW 251
34596: PPUSH
34597: LD_VAR 0 2
34601: PPUSH
34602: CALL 7816 0 4
34606: PUSH
34607: LD_INT 4
34609: ARRAY
34610: ST_TO_ADDR
// end ;
34611: LD_VAR 0 3
34615: RET
// export function PlayerSeeMe ( unit ) ; begin
34616: LD_INT 0
34618: PPUSH
// result := See ( your_side , unit ) ;
34619: LD_ADDR_VAR 0 2
34623: PUSH
34624: LD_OWVAR 2
34628: PPUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 292
34638: ST_TO_ADDR
// end ;
34639: LD_VAR 0 2
34643: RET
// export function ReverseDir ( unit ) ; begin
34644: LD_INT 0
34646: PPUSH
// if not unit then
34647: LD_VAR 0 1
34651: NOT
34652: IFFALSE 34656
// exit ;
34654: GO 34679
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34656: LD_ADDR_VAR 0 2
34660: PUSH
34661: LD_VAR 0 1
34665: PPUSH
34666: CALL_OW 254
34670: PUSH
34671: LD_INT 3
34673: PLUS
34674: PUSH
34675: LD_INT 6
34677: MOD
34678: ST_TO_ADDR
// end ;
34679: LD_VAR 0 2
34683: RET
// export function ReverseArray ( array ) ; var i ; begin
34684: LD_INT 0
34686: PPUSH
34687: PPUSH
// if not array then
34688: LD_VAR 0 1
34692: NOT
34693: IFFALSE 34697
// exit ;
34695: GO 34752
// result := [ ] ;
34697: LD_ADDR_VAR 0 2
34701: PUSH
34702: EMPTY
34703: ST_TO_ADDR
// for i := array downto 1 do
34704: LD_ADDR_VAR 0 3
34708: PUSH
34709: DOUBLE
34710: LD_VAR 0 1
34714: INC
34715: ST_TO_ADDR
34716: LD_INT 1
34718: PUSH
34719: FOR_DOWNTO
34720: IFFALSE 34750
// result := Join ( result , array [ i ] ) ;
34722: LD_ADDR_VAR 0 2
34726: PUSH
34727: LD_VAR 0 2
34731: PPUSH
34732: LD_VAR 0 1
34736: PUSH
34737: LD_VAR 0 3
34741: ARRAY
34742: PPUSH
34743: CALL 39594 0 2
34747: ST_TO_ADDR
34748: GO 34719
34750: POP
34751: POP
// end ;
34752: LD_VAR 0 2
34756: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34757: LD_INT 0
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
34764: PPUSH
// if not unit or not hexes then
34765: LD_VAR 0 1
34769: NOT
34770: IFTRUE 34779
34772: PUSH
34773: LD_VAR 0 2
34777: NOT
34778: OR
34779: IFFALSE 34783
// exit ;
34781: GO 34906
// dist := 9999 ;
34783: LD_ADDR_VAR 0 5
34787: PUSH
34788: LD_INT 9999
34790: ST_TO_ADDR
// for i = 1 to hexes do
34791: LD_ADDR_VAR 0 4
34795: PUSH
34796: DOUBLE
34797: LD_INT 1
34799: DEC
34800: ST_TO_ADDR
34801: LD_VAR 0 2
34805: PUSH
34806: FOR_TO
34807: IFFALSE 34894
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34809: LD_ADDR_VAR 0 6
34813: PUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: LD_VAR 0 2
34823: PUSH
34824: LD_VAR 0 4
34828: ARRAY
34829: PUSH
34830: LD_INT 1
34832: ARRAY
34833: PPUSH
34834: LD_VAR 0 2
34838: PUSH
34839: LD_VAR 0 4
34843: ARRAY
34844: PUSH
34845: LD_INT 2
34847: ARRAY
34848: PPUSH
34849: CALL_OW 297
34853: ST_TO_ADDR
// if tdist < dist then
34854: LD_VAR 0 6
34858: PUSH
34859: LD_VAR 0 5
34863: LESS
34864: IFFALSE 34892
// begin hex := hexes [ i ] ;
34866: LD_ADDR_VAR 0 8
34870: PUSH
34871: LD_VAR 0 2
34875: PUSH
34876: LD_VAR 0 4
34880: ARRAY
34881: ST_TO_ADDR
// dist := tdist ;
34882: LD_ADDR_VAR 0 5
34886: PUSH
34887: LD_VAR 0 6
34891: ST_TO_ADDR
// end ; end ;
34892: GO 34806
34894: POP
34895: POP
// result := hex ;
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_VAR 0 8
34905: ST_TO_ADDR
// end ;
34906: LD_VAR 0 3
34910: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34911: LD_INT 0
34913: PPUSH
34914: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34915: LD_VAR 0 1
34919: NOT
34920: IFTRUE 34959
34922: PUSH
34923: LD_VAR 0 1
34927: PUSH
34928: LD_INT 21
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 23
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PPUSH
34952: CALL_OW 69
34956: IN
34957: NOT
34958: OR
34959: IFFALSE 34963
// exit ;
34961: GO 35010
// for i = 1 to 3 do
34963: LD_ADDR_VAR 0 3
34967: PUSH
34968: DOUBLE
34969: LD_INT 1
34971: DEC
34972: ST_TO_ADDR
34973: LD_INT 3
34975: PUSH
34976: FOR_TO
34977: IFFALSE 35008
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL_OW 250
34988: PPUSH
34989: LD_VAR 0 1
34993: PPUSH
34994: CALL_OW 251
34998: PPUSH
34999: LD_INT 1
35001: PPUSH
35002: CALL_OW 453
35006: GO 34976
35008: POP
35009: POP
// end ;
35010: LD_VAR 0 2
35014: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35015: LD_INT 0
35017: PPUSH
35018: PPUSH
35019: PPUSH
35020: PPUSH
35021: PPUSH
35022: PPUSH
// if not unit or not enemy_unit then
35023: LD_VAR 0 1
35027: NOT
35028: IFTRUE 35037
35030: PUSH
35031: LD_VAR 0 2
35035: NOT
35036: OR
35037: IFFALSE 35041
// exit ;
35039: GO 35512
// if GetLives ( i ) < 250 then
35041: LD_VAR 0 4
35045: PPUSH
35046: CALL_OW 256
35050: PUSH
35051: LD_INT 250
35053: LESS
35054: IFFALSE 35067
// begin ComAutodestruct ( i ) ;
35056: LD_VAR 0 4
35060: PPUSH
35061: CALL 34911 0 1
// exit ;
35065: GO 35512
// end ; x := GetX ( enemy_unit ) ;
35067: LD_ADDR_VAR 0 7
35071: PUSH
35072: LD_VAR 0 2
35076: PPUSH
35077: CALL_OW 250
35081: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35082: LD_ADDR_VAR 0 8
35086: PUSH
35087: LD_VAR 0 2
35091: PPUSH
35092: CALL_OW 251
35096: ST_TO_ADDR
// if not x or not y then
35097: LD_VAR 0 7
35101: NOT
35102: IFTRUE 35111
35104: PUSH
35105: LD_VAR 0 8
35109: NOT
35110: OR
35111: IFFALSE 35115
// exit ;
35113: GO 35512
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35115: LD_ADDR_VAR 0 6
35119: PUSH
35120: LD_VAR 0 7
35124: PPUSH
35125: LD_INT 0
35127: PPUSH
35128: LD_INT 4
35130: PPUSH
35131: CALL_OW 272
35135: PUSH
35136: LD_VAR 0 8
35140: PPUSH
35141: LD_INT 0
35143: PPUSH
35144: LD_INT 4
35146: PPUSH
35147: CALL_OW 273
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_VAR 0 7
35160: PPUSH
35161: LD_INT 1
35163: PPUSH
35164: LD_INT 4
35166: PPUSH
35167: CALL_OW 272
35171: PUSH
35172: LD_VAR 0 8
35176: PPUSH
35177: LD_INT 1
35179: PPUSH
35180: LD_INT 4
35182: PPUSH
35183: CALL_OW 273
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_VAR 0 7
35196: PPUSH
35197: LD_INT 2
35199: PPUSH
35200: LD_INT 4
35202: PPUSH
35203: CALL_OW 272
35207: PUSH
35208: LD_VAR 0 8
35212: PPUSH
35213: LD_INT 2
35215: PPUSH
35216: LD_INT 4
35218: PPUSH
35219: CALL_OW 273
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_VAR 0 7
35232: PPUSH
35233: LD_INT 3
35235: PPUSH
35236: LD_INT 4
35238: PPUSH
35239: CALL_OW 272
35243: PUSH
35244: LD_VAR 0 8
35248: PPUSH
35249: LD_INT 3
35251: PPUSH
35252: LD_INT 4
35254: PPUSH
35255: CALL_OW 273
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_VAR 0 7
35268: PPUSH
35269: LD_INT 4
35271: PPUSH
35272: LD_INT 4
35274: PPUSH
35275: CALL_OW 272
35279: PUSH
35280: LD_VAR 0 8
35284: PPUSH
35285: LD_INT 4
35287: PPUSH
35288: LD_INT 4
35290: PPUSH
35291: CALL_OW 273
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_VAR 0 7
35304: PPUSH
35305: LD_INT 5
35307: PPUSH
35308: LD_INT 4
35310: PPUSH
35311: CALL_OW 272
35315: PUSH
35316: LD_VAR 0 8
35320: PPUSH
35321: LD_INT 5
35323: PPUSH
35324: LD_INT 4
35326: PPUSH
35327: CALL_OW 273
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// for i = tmp downto 1 do
35344: LD_ADDR_VAR 0 4
35348: PUSH
35349: DOUBLE
35350: LD_VAR 0 6
35354: INC
35355: ST_TO_ADDR
35356: LD_INT 1
35358: PUSH
35359: FOR_DOWNTO
35360: IFFALSE 35463
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35362: LD_VAR 0 6
35366: PUSH
35367: LD_VAR 0 4
35371: ARRAY
35372: PUSH
35373: LD_INT 1
35375: ARRAY
35376: PPUSH
35377: LD_VAR 0 6
35381: PUSH
35382: LD_VAR 0 4
35386: ARRAY
35387: PUSH
35388: LD_INT 2
35390: ARRAY
35391: PPUSH
35392: CALL_OW 488
35396: NOT
35397: IFTRUE 35439
35399: PUSH
35400: LD_VAR 0 6
35404: PUSH
35405: LD_VAR 0 4
35409: ARRAY
35410: PUSH
35411: LD_INT 1
35413: ARRAY
35414: PPUSH
35415: LD_VAR 0 6
35419: PUSH
35420: LD_VAR 0 4
35424: ARRAY
35425: PUSH
35426: LD_INT 2
35428: ARRAY
35429: PPUSH
35430: CALL_OW 428
35434: PUSH
35435: LD_INT 0
35437: NONEQUAL
35438: OR
35439: IFFALSE 35461
// tmp := Delete ( tmp , i ) ;
35441: LD_ADDR_VAR 0 6
35445: PUSH
35446: LD_VAR 0 6
35450: PPUSH
35451: LD_VAR 0 4
35455: PPUSH
35456: CALL_OW 3
35460: ST_TO_ADDR
35461: GO 35359
35463: POP
35464: POP
// j := GetClosestHex ( unit , tmp ) ;
35465: LD_ADDR_VAR 0 5
35469: PUSH
35470: LD_VAR 0 1
35474: PPUSH
35475: LD_VAR 0 6
35479: PPUSH
35480: CALL 34757 0 2
35484: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35485: LD_VAR 0 1
35489: PPUSH
35490: LD_VAR 0 5
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: LD_VAR 0 5
35503: PUSH
35504: LD_INT 2
35506: ARRAY
35507: PPUSH
35508: CALL_OW 111
// end ;
35512: LD_VAR 0 3
35516: RET
// export function PrepareApemanSoldier ( ) ; begin
35517: LD_INT 0
35519: PPUSH
// uc_nation := 0 ;
35520: LD_ADDR_OWVAR 21
35524: PUSH
35525: LD_INT 0
35527: ST_TO_ADDR
// hc_sex := sex_male ;
35528: LD_ADDR_OWVAR 27
35532: PUSH
35533: LD_INT 1
35535: ST_TO_ADDR
// hc_name :=  ;
35536: LD_ADDR_OWVAR 26
35540: PUSH
35541: LD_STRING 
35543: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35544: LD_ADDR_OWVAR 28
35548: PUSH
35549: LD_INT 15
35551: ST_TO_ADDR
// hc_gallery :=  ;
35552: LD_ADDR_OWVAR 33
35556: PUSH
35557: LD_STRING 
35559: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35560: LD_ADDR_OWVAR 31
35564: PUSH
35565: LD_INT 0
35567: PPUSH
35568: LD_INT 3
35570: PPUSH
35571: CALL_OW 12
35575: PUSH
35576: LD_INT 0
35578: PPUSH
35579: LD_INT 3
35581: PPUSH
35582: CALL_OW 12
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35599: LD_ADDR_OWVAR 29
35603: PUSH
35604: LD_INT 12
35606: PUSH
35607: LD_INT 12
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: ST_TO_ADDR
// end ;
35614: LD_VAR 0 1
35618: RET
// export function PrepareApemanEngineer ( ) ; begin
35619: LD_INT 0
35621: PPUSH
// uc_nation := 0 ;
35622: LD_ADDR_OWVAR 21
35626: PUSH
35627: LD_INT 0
35629: ST_TO_ADDR
// hc_sex := sex_male ;
35630: LD_ADDR_OWVAR 27
35634: PUSH
35635: LD_INT 1
35637: ST_TO_ADDR
// hc_name :=  ;
35638: LD_ADDR_OWVAR 26
35642: PUSH
35643: LD_STRING 
35645: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35646: LD_ADDR_OWVAR 28
35650: PUSH
35651: LD_INT 16
35653: ST_TO_ADDR
// hc_gallery :=  ;
35654: LD_ADDR_OWVAR 33
35658: PUSH
35659: LD_STRING 
35661: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35662: LD_ADDR_OWVAR 31
35666: PUSH
35667: LD_INT 0
35669: PPUSH
35670: LD_INT 3
35672: PPUSH
35673: CALL_OW 12
35677: PUSH
35678: LD_INT 0
35680: PPUSH
35681: LD_INT 3
35683: PPUSH
35684: CALL_OW 12
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35701: LD_ADDR_OWVAR 29
35705: PUSH
35706: LD_INT 12
35708: PUSH
35709: LD_INT 12
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// end ;
35716: LD_VAR 0 1
35720: RET
// export function PrepareApeman ( agressivity ) ; begin
35721: LD_INT 0
35723: PPUSH
// uc_side := 0 ;
35724: LD_ADDR_OWVAR 20
35728: PUSH
35729: LD_INT 0
35731: ST_TO_ADDR
// uc_nation := 0 ;
35732: LD_ADDR_OWVAR 21
35736: PUSH
35737: LD_INT 0
35739: ST_TO_ADDR
// hc_sex := sex_male ;
35740: LD_ADDR_OWVAR 27
35744: PUSH
35745: LD_INT 1
35747: ST_TO_ADDR
// hc_class := class_apeman ;
35748: LD_ADDR_OWVAR 28
35752: PUSH
35753: LD_INT 12
35755: ST_TO_ADDR
// hc_gallery :=  ;
35756: LD_ADDR_OWVAR 33
35760: PUSH
35761: LD_STRING 
35763: ST_TO_ADDR
// hc_name :=  ;
35764: LD_ADDR_OWVAR 26
35768: PUSH
35769: LD_STRING 
35771: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35772: LD_ADDR_OWVAR 29
35776: PUSH
35777: LD_INT 12
35779: PUSH
35780: LD_INT 12
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: ST_TO_ADDR
// if agressivity = 0 then
35787: LD_VAR 0 1
35791: PUSH
35792: LD_INT 0
35794: EQUAL
35795: IFFALSE 35807
// hc_agressivity := 0 else
35797: LD_ADDR_OWVAR 35
35801: PUSH
35802: LD_INT 0
35804: ST_TO_ADDR
35805: GO 35828
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35807: LD_ADDR_OWVAR 35
35811: PUSH
35812: LD_VAR 0 1
35816: NEG
35817: PPUSH
35818: LD_VAR 0 1
35822: PPUSH
35823: CALL_OW 12
35827: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35828: LD_ADDR_OWVAR 31
35832: PUSH
35833: LD_INT 0
35835: PPUSH
35836: LD_INT 3
35838: PPUSH
35839: CALL_OW 12
35843: PUSH
35844: LD_INT 0
35846: PPUSH
35847: LD_INT 3
35849: PPUSH
35850: CALL_OW 12
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// end ;
35867: LD_VAR 0 2
35871: RET
// export function PrepareTiger ( agressivity ) ; begin
35872: LD_INT 0
35874: PPUSH
// uc_side := 0 ;
35875: LD_ADDR_OWVAR 20
35879: PUSH
35880: LD_INT 0
35882: ST_TO_ADDR
// uc_nation := 0 ;
35883: LD_ADDR_OWVAR 21
35887: PUSH
35888: LD_INT 0
35890: ST_TO_ADDR
// InitHc ;
35891: CALL_OW 19
// hc_class := class_tiger ;
35895: LD_ADDR_OWVAR 28
35899: PUSH
35900: LD_INT 14
35902: ST_TO_ADDR
// hc_gallery :=  ;
35903: LD_ADDR_OWVAR 33
35907: PUSH
35908: LD_STRING 
35910: ST_TO_ADDR
// hc_name :=  ;
35911: LD_ADDR_OWVAR 26
35915: PUSH
35916: LD_STRING 
35918: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35919: LD_ADDR_OWVAR 35
35923: PUSH
35924: LD_VAR 0 1
35928: NEG
35929: PPUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 12
35939: ST_TO_ADDR
// end ;
35940: LD_VAR 0 2
35944: RET
// export function PrepareEnchidna ( ) ; begin
35945: LD_INT 0
35947: PPUSH
// uc_side := 0 ;
35948: LD_ADDR_OWVAR 20
35952: PUSH
35953: LD_INT 0
35955: ST_TO_ADDR
// uc_nation := 0 ;
35956: LD_ADDR_OWVAR 21
35960: PUSH
35961: LD_INT 0
35963: ST_TO_ADDR
// InitHc ;
35964: CALL_OW 19
// hc_class := class_baggie ;
35968: LD_ADDR_OWVAR 28
35972: PUSH
35973: LD_INT 13
35975: ST_TO_ADDR
// hc_gallery :=  ;
35976: LD_ADDR_OWVAR 33
35980: PUSH
35981: LD_STRING 
35983: ST_TO_ADDR
// hc_name :=  ;
35984: LD_ADDR_OWVAR 26
35988: PUSH
35989: LD_STRING 
35991: ST_TO_ADDR
// end ;
35992: LD_VAR 0 1
35996: RET
// export function PrepareFrog ( ) ; begin
35997: LD_INT 0
35999: PPUSH
// uc_side := 0 ;
36000: LD_ADDR_OWVAR 20
36004: PUSH
36005: LD_INT 0
36007: ST_TO_ADDR
// uc_nation := 0 ;
36008: LD_ADDR_OWVAR 21
36012: PUSH
36013: LD_INT 0
36015: ST_TO_ADDR
// InitHc ;
36016: CALL_OW 19
// hc_class := class_frog ;
36020: LD_ADDR_OWVAR 28
36024: PUSH
36025: LD_INT 19
36027: ST_TO_ADDR
// hc_gallery :=  ;
36028: LD_ADDR_OWVAR 33
36032: PUSH
36033: LD_STRING 
36035: ST_TO_ADDR
// hc_name :=  ;
36036: LD_ADDR_OWVAR 26
36040: PUSH
36041: LD_STRING 
36043: ST_TO_ADDR
// end ;
36044: LD_VAR 0 1
36048: RET
// export function PrepareFish ( ) ; begin
36049: LD_INT 0
36051: PPUSH
// uc_side := 0 ;
36052: LD_ADDR_OWVAR 20
36056: PUSH
36057: LD_INT 0
36059: ST_TO_ADDR
// uc_nation := 0 ;
36060: LD_ADDR_OWVAR 21
36064: PUSH
36065: LD_INT 0
36067: ST_TO_ADDR
// InitHc ;
36068: CALL_OW 19
// hc_class := class_fish ;
36072: LD_ADDR_OWVAR 28
36076: PUSH
36077: LD_INT 20
36079: ST_TO_ADDR
// hc_gallery :=  ;
36080: LD_ADDR_OWVAR 33
36084: PUSH
36085: LD_STRING 
36087: ST_TO_ADDR
// hc_name :=  ;
36088: LD_ADDR_OWVAR 26
36092: PUSH
36093: LD_STRING 
36095: ST_TO_ADDR
// end ;
36096: LD_VAR 0 1
36100: RET
// export function PrepareBird ( ) ; begin
36101: LD_INT 0
36103: PPUSH
// uc_side := 0 ;
36104: LD_ADDR_OWVAR 20
36108: PUSH
36109: LD_INT 0
36111: ST_TO_ADDR
// uc_nation := 0 ;
36112: LD_ADDR_OWVAR 21
36116: PUSH
36117: LD_INT 0
36119: ST_TO_ADDR
// InitHc ;
36120: CALL_OW 19
// hc_class := class_phororhacos ;
36124: LD_ADDR_OWVAR 28
36128: PUSH
36129: LD_INT 18
36131: ST_TO_ADDR
// hc_gallery :=  ;
36132: LD_ADDR_OWVAR 33
36136: PUSH
36137: LD_STRING 
36139: ST_TO_ADDR
// hc_name :=  ;
36140: LD_ADDR_OWVAR 26
36144: PUSH
36145: LD_STRING 
36147: ST_TO_ADDR
// end ;
36148: LD_VAR 0 1
36152: RET
// export function PrepareHorse ( ) ; begin
36153: LD_INT 0
36155: PPUSH
// uc_side := 0 ;
36156: LD_ADDR_OWVAR 20
36160: PUSH
36161: LD_INT 0
36163: ST_TO_ADDR
// uc_nation := 0 ;
36164: LD_ADDR_OWVAR 21
36168: PUSH
36169: LD_INT 0
36171: ST_TO_ADDR
// InitHc ;
36172: CALL_OW 19
// hc_class := class_horse ;
36176: LD_ADDR_OWVAR 28
36180: PUSH
36181: LD_INT 21
36183: ST_TO_ADDR
// hc_gallery :=  ;
36184: LD_ADDR_OWVAR 33
36188: PUSH
36189: LD_STRING 
36191: ST_TO_ADDR
// hc_name :=  ;
36192: LD_ADDR_OWVAR 26
36196: PUSH
36197: LD_STRING 
36199: ST_TO_ADDR
// end ;
36200: LD_VAR 0 1
36204: RET
// export function PrepareMastodont ( ) ; begin
36205: LD_INT 0
36207: PPUSH
// uc_side := 0 ;
36208: LD_ADDR_OWVAR 20
36212: PUSH
36213: LD_INT 0
36215: ST_TO_ADDR
// uc_nation := 0 ;
36216: LD_ADDR_OWVAR 21
36220: PUSH
36221: LD_INT 0
36223: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36224: LD_ADDR_OWVAR 37
36228: PUSH
36229: LD_INT 31
36231: ST_TO_ADDR
// vc_control := control_rider ;
36232: LD_ADDR_OWVAR 38
36236: PUSH
36237: LD_INT 4
36239: ST_TO_ADDR
// end ;
36240: LD_VAR 0 1
36244: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36245: LD_INT 0
36247: PPUSH
36248: PPUSH
36249: PPUSH
// uc_side = 0 ;
36250: LD_ADDR_OWVAR 20
36254: PUSH
36255: LD_INT 0
36257: ST_TO_ADDR
// uc_nation = 0 ;
36258: LD_ADDR_OWVAR 21
36262: PUSH
36263: LD_INT 0
36265: ST_TO_ADDR
// InitHc_All ( ) ;
36266: CALL_OW 584
// InitVc ;
36270: CALL_OW 20
// if mastodonts then
36274: LD_VAR 0 6
36278: IFFALSE 36345
// for i = 1 to mastodonts do
36280: LD_ADDR_VAR 0 11
36284: PUSH
36285: DOUBLE
36286: LD_INT 1
36288: DEC
36289: ST_TO_ADDR
36290: LD_VAR 0 6
36294: PUSH
36295: FOR_TO
36296: IFFALSE 36343
// begin vc_chassis := 31 ;
36298: LD_ADDR_OWVAR 37
36302: PUSH
36303: LD_INT 31
36305: ST_TO_ADDR
// vc_control := control_rider ;
36306: LD_ADDR_OWVAR 38
36310: PUSH
36311: LD_INT 4
36313: ST_TO_ADDR
// animal := CreateVehicle ;
36314: LD_ADDR_VAR 0 12
36318: PUSH
36319: CALL_OW 45
36323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36324: LD_VAR 0 12
36328: PPUSH
36329: LD_VAR 0 8
36333: PPUSH
36334: LD_INT 0
36336: PPUSH
36337: CALL 38487 0 3
// end ;
36341: GO 36295
36343: POP
36344: POP
// if horses then
36345: LD_VAR 0 5
36349: IFFALSE 36416
// for i = 1 to horses do
36351: LD_ADDR_VAR 0 11
36355: PUSH
36356: DOUBLE
36357: LD_INT 1
36359: DEC
36360: ST_TO_ADDR
36361: LD_VAR 0 5
36365: PUSH
36366: FOR_TO
36367: IFFALSE 36414
// begin hc_class := 21 ;
36369: LD_ADDR_OWVAR 28
36373: PUSH
36374: LD_INT 21
36376: ST_TO_ADDR
// hc_gallery :=  ;
36377: LD_ADDR_OWVAR 33
36381: PUSH
36382: LD_STRING 
36384: ST_TO_ADDR
// animal := CreateHuman ;
36385: LD_ADDR_VAR 0 12
36389: PUSH
36390: CALL_OW 44
36394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36395: LD_VAR 0 12
36399: PPUSH
36400: LD_VAR 0 8
36404: PPUSH
36405: LD_INT 0
36407: PPUSH
36408: CALL 38487 0 3
// end ;
36412: GO 36366
36414: POP
36415: POP
// if birds then
36416: LD_VAR 0 1
36420: IFFALSE 36487
// for i = 1 to birds do
36422: LD_ADDR_VAR 0 11
36426: PUSH
36427: DOUBLE
36428: LD_INT 1
36430: DEC
36431: ST_TO_ADDR
36432: LD_VAR 0 1
36436: PUSH
36437: FOR_TO
36438: IFFALSE 36485
// begin hc_class := 18 ;
36440: LD_ADDR_OWVAR 28
36444: PUSH
36445: LD_INT 18
36447: ST_TO_ADDR
// hc_gallery =  ;
36448: LD_ADDR_OWVAR 33
36452: PUSH
36453: LD_STRING 
36455: ST_TO_ADDR
// animal := CreateHuman ;
36456: LD_ADDR_VAR 0 12
36460: PUSH
36461: CALL_OW 44
36465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36466: LD_VAR 0 12
36470: PPUSH
36471: LD_VAR 0 8
36475: PPUSH
36476: LD_INT 0
36478: PPUSH
36479: CALL 38487 0 3
// end ;
36483: GO 36437
36485: POP
36486: POP
// if tigers then
36487: LD_VAR 0 2
36491: IFFALSE 36575
// for i = 1 to tigers do
36493: LD_ADDR_VAR 0 11
36497: PUSH
36498: DOUBLE
36499: LD_INT 1
36501: DEC
36502: ST_TO_ADDR
36503: LD_VAR 0 2
36507: PUSH
36508: FOR_TO
36509: IFFALSE 36573
// begin hc_class = class_tiger ;
36511: LD_ADDR_OWVAR 28
36515: PUSH
36516: LD_INT 14
36518: ST_TO_ADDR
// hc_gallery =  ;
36519: LD_ADDR_OWVAR 33
36523: PUSH
36524: LD_STRING 
36526: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36527: LD_ADDR_OWVAR 35
36531: PUSH
36532: LD_INT 7
36534: NEG
36535: PPUSH
36536: LD_INT 7
36538: PPUSH
36539: CALL_OW 12
36543: ST_TO_ADDR
// animal := CreateHuman ;
36544: LD_ADDR_VAR 0 12
36548: PUSH
36549: CALL_OW 44
36553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36554: LD_VAR 0 12
36558: PPUSH
36559: LD_VAR 0 8
36563: PPUSH
36564: LD_INT 0
36566: PPUSH
36567: CALL 38487 0 3
// end ;
36571: GO 36508
36573: POP
36574: POP
// if apemans then
36575: LD_VAR 0 3
36579: IFFALSE 36702
// for i = 1 to apemans do
36581: LD_ADDR_VAR 0 11
36585: PUSH
36586: DOUBLE
36587: LD_INT 1
36589: DEC
36590: ST_TO_ADDR
36591: LD_VAR 0 3
36595: PUSH
36596: FOR_TO
36597: IFFALSE 36700
// begin hc_class = class_apeman ;
36599: LD_ADDR_OWVAR 28
36603: PUSH
36604: LD_INT 12
36606: ST_TO_ADDR
// hc_gallery =  ;
36607: LD_ADDR_OWVAR 33
36611: PUSH
36612: LD_STRING 
36614: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36615: LD_ADDR_OWVAR 35
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PPUSH
36624: LD_INT 2
36626: PPUSH
36627: CALL_OW 12
36631: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36632: LD_ADDR_OWVAR 31
36636: PUSH
36637: LD_INT 1
36639: PPUSH
36640: LD_INT 3
36642: PPUSH
36643: CALL_OW 12
36647: PUSH
36648: LD_INT 1
36650: PPUSH
36651: LD_INT 3
36653: PPUSH
36654: CALL_OW 12
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: ST_TO_ADDR
// animal := CreateHuman ;
36671: LD_ADDR_VAR 0 12
36675: PUSH
36676: CALL_OW 44
36680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36681: LD_VAR 0 12
36685: PPUSH
36686: LD_VAR 0 8
36690: PPUSH
36691: LD_INT 0
36693: PPUSH
36694: CALL 38487 0 3
// end ;
36698: GO 36596
36700: POP
36701: POP
// if enchidnas then
36702: LD_VAR 0 4
36706: IFFALSE 36773
// for i = 1 to enchidnas do
36708: LD_ADDR_VAR 0 11
36712: PUSH
36713: DOUBLE
36714: LD_INT 1
36716: DEC
36717: ST_TO_ADDR
36718: LD_VAR 0 4
36722: PUSH
36723: FOR_TO
36724: IFFALSE 36771
// begin hc_class = 13 ;
36726: LD_ADDR_OWVAR 28
36730: PUSH
36731: LD_INT 13
36733: ST_TO_ADDR
// hc_gallery =  ;
36734: LD_ADDR_OWVAR 33
36738: PUSH
36739: LD_STRING 
36741: ST_TO_ADDR
// animal := CreateHuman ;
36742: LD_ADDR_VAR 0 12
36746: PUSH
36747: CALL_OW 44
36751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36752: LD_VAR 0 12
36756: PPUSH
36757: LD_VAR 0 8
36761: PPUSH
36762: LD_INT 0
36764: PPUSH
36765: CALL 38487 0 3
// end ;
36769: GO 36723
36771: POP
36772: POP
// if fishes then
36773: LD_VAR 0 7
36777: IFFALSE 36844
// for i = 1 to fishes do
36779: LD_ADDR_VAR 0 11
36783: PUSH
36784: DOUBLE
36785: LD_INT 1
36787: DEC
36788: ST_TO_ADDR
36789: LD_VAR 0 7
36793: PUSH
36794: FOR_TO
36795: IFFALSE 36842
// begin hc_class = 20 ;
36797: LD_ADDR_OWVAR 28
36801: PUSH
36802: LD_INT 20
36804: ST_TO_ADDR
// hc_gallery =  ;
36805: LD_ADDR_OWVAR 33
36809: PUSH
36810: LD_STRING 
36812: ST_TO_ADDR
// animal := CreateHuman ;
36813: LD_ADDR_VAR 0 12
36817: PUSH
36818: CALL_OW 44
36822: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36823: LD_VAR 0 12
36827: PPUSH
36828: LD_VAR 0 9
36832: PPUSH
36833: LD_INT 0
36835: PPUSH
36836: CALL 38487 0 3
// end ;
36840: GO 36794
36842: POP
36843: POP
// end ;
36844: LD_VAR 0 10
36848: RET
// export function WantHeal ( sci , unit ) ; begin
36849: LD_INT 0
36851: PPUSH
// if GetTaskList ( sci ) > 0 then
36852: LD_VAR 0 1
36856: PPUSH
36857: CALL_OW 437
36861: PUSH
36862: LD_INT 0
36864: GREATER
36865: IFFALSE 36937
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 437
36876: PUSH
36877: LD_INT 1
36879: ARRAY
36880: PUSH
36881: LD_INT 1
36883: ARRAY
36884: PUSH
36885: LD_STRING l
36887: EQUAL
36888: IFFALSE 36915
36890: PUSH
36891: LD_VAR 0 1
36895: PPUSH
36896: CALL_OW 437
36900: PUSH
36901: LD_INT 1
36903: ARRAY
36904: PUSH
36905: LD_INT 4
36907: ARRAY
36908: PUSH
36909: LD_VAR 0 2
36913: EQUAL
36914: AND
36915: IFFALSE 36927
// result := true else
36917: LD_ADDR_VAR 0 3
36921: PUSH
36922: LD_INT 1
36924: ST_TO_ADDR
36925: GO 36935
// result := false ;
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 0
36934: ST_TO_ADDR
// end else
36935: GO 36945
// result := false ;
36937: LD_ADDR_VAR 0 3
36941: PUSH
36942: LD_INT 0
36944: ST_TO_ADDR
// end ;
36945: LD_VAR 0 3
36949: RET
// export function HealTarget ( sci ) ; begin
36950: LD_INT 0
36952: PPUSH
// if not sci then
36953: LD_VAR 0 1
36957: NOT
36958: IFFALSE 36962
// exit ;
36960: GO 37027
// result := 0 ;
36962: LD_ADDR_VAR 0 2
36966: PUSH
36967: LD_INT 0
36969: ST_TO_ADDR
// if GetTaskList ( sci ) then
36970: LD_VAR 0 1
36974: PPUSH
36975: CALL_OW 437
36979: IFFALSE 37027
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 437
36990: PUSH
36991: LD_INT 1
36993: ARRAY
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: PUSH
36999: LD_STRING l
37001: EQUAL
37002: IFFALSE 37027
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37004: LD_ADDR_VAR 0 2
37008: PUSH
37009: LD_VAR 0 1
37013: PPUSH
37014: CALL_OW 437
37018: PUSH
37019: LD_INT 1
37021: ARRAY
37022: PUSH
37023: LD_INT 4
37025: ARRAY
37026: ST_TO_ADDR
// end ;
37027: LD_VAR 0 2
37031: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37032: LD_INT 0
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
// if not base_units then
37038: LD_VAR 0 1
37042: NOT
37043: IFFALSE 37047
// exit ;
37045: GO 37134
// result := false ;
37047: LD_ADDR_VAR 0 2
37051: PUSH
37052: LD_INT 0
37054: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_VAR 0 1
37064: PPUSH
37065: LD_INT 21
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PPUSH
37075: CALL_OW 72
37079: ST_TO_ADDR
// if not tmp then
37080: LD_VAR 0 5
37084: NOT
37085: IFFALSE 37089
// exit ;
37087: GO 37134
// for i in tmp do
37089: LD_ADDR_VAR 0 3
37093: PUSH
37094: LD_VAR 0 5
37098: PUSH
37099: FOR_IN
37100: IFFALSE 37132
// begin result := EnemyInRange ( i , 22 ) ;
37102: LD_ADDR_VAR 0 2
37106: PUSH
37107: LD_VAR 0 3
37111: PPUSH
37112: LD_INT 22
37114: PPUSH
37115: CALL 34559 0 2
37119: ST_TO_ADDR
// if result then
37120: LD_VAR 0 2
37124: IFFALSE 37130
// exit ;
37126: POP
37127: POP
37128: GO 37134
// end ;
37130: GO 37099
37132: POP
37133: POP
// end ;
37134: LD_VAR 0 2
37138: RET
// export function FilterByTag ( units , tag ) ; begin
37139: LD_INT 0
37141: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: LD_INT 120
37154: PUSH
37155: LD_VAR 0 2
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PPUSH
37164: CALL_OW 72
37168: ST_TO_ADDR
// end ;
37169: LD_VAR 0 3
37173: RET
// export function IsDriver ( un ) ; begin
37174: LD_INT 0
37176: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37177: LD_ADDR_VAR 0 2
37181: PUSH
37182: LD_VAR 0 1
37186: PUSH
37187: LD_INT 55
37189: PUSH
37190: EMPTY
37191: LIST
37192: PPUSH
37193: CALL_OW 69
37197: IN
37198: ST_TO_ADDR
// end ;
37199: LD_VAR 0 2
37203: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37204: LD_INT 0
37206: PPUSH
37207: PPUSH
// list := [ ] ;
37208: LD_ADDR_VAR 0 5
37212: PUSH
37213: EMPTY
37214: ST_TO_ADDR
// case d of 0 :
37215: LD_VAR 0 3
37219: PUSH
37220: LD_INT 0
37222: DOUBLE
37223: EQUAL
37224: IFTRUE 37228
37226: GO 37361
37228: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37229: LD_ADDR_VAR 0 5
37233: PUSH
37234: LD_VAR 0 1
37238: PUSH
37239: LD_INT 4
37241: MINUS
37242: PUSH
37243: LD_VAR 0 2
37247: PUSH
37248: LD_INT 4
37250: MINUS
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: PUSH
37260: LD_VAR 0 1
37264: PUSH
37265: LD_INT 3
37267: MINUS
37268: PUSH
37269: LD_VAR 0 2
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: LD_VAR 0 1
37286: PUSH
37287: LD_INT 4
37289: PLUS
37290: PUSH
37291: LD_VAR 0 2
37295: PUSH
37296: LD_INT 4
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: PUSH
37304: LD_VAR 0 1
37308: PUSH
37309: LD_INT 3
37311: PLUS
37312: PUSH
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 3
37320: PLUS
37321: PUSH
37322: LD_INT 5
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: PUSH
37330: LD_VAR 0 1
37334: PUSH
37335: LD_VAR 0 2
37339: PUSH
37340: LD_INT 4
37342: PLUS
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: ST_TO_ADDR
// end ; 1 :
37359: GO 38059
37361: LD_INT 1
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37502
37369: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37370: LD_ADDR_VAR 0 5
37374: PUSH
37375: LD_VAR 0 1
37379: PUSH
37380: LD_VAR 0 2
37384: PUSH
37385: LD_INT 4
37387: MINUS
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: PUSH
37397: LD_VAR 0 1
37401: PUSH
37402: LD_INT 3
37404: MINUS
37405: PUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_INT 3
37413: MINUS
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: LD_INT 4
37430: MINUS
37431: PUSH
37432: LD_VAR 0 2
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: PUSH
37445: LD_VAR 0 1
37449: PUSH
37450: LD_VAR 0 2
37454: PUSH
37455: LD_INT 3
37457: PLUS
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: PUSH
37467: LD_VAR 0 1
37471: PUSH
37472: LD_INT 4
37474: PLUS
37475: PUSH
37476: LD_VAR 0 2
37480: PUSH
37481: LD_INT 4
37483: PLUS
37484: PUSH
37485: LD_INT 5
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: ST_TO_ADDR
// end ; 2 :
37500: GO 38059
37502: LD_INT 2
37504: DOUBLE
37505: EQUAL
37506: IFTRUE 37510
37508: GO 37639
37510: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37511: LD_ADDR_VAR 0 5
37515: PUSH
37516: LD_VAR 0 1
37520: PUSH
37521: LD_VAR 0 2
37525: PUSH
37526: LD_INT 3
37528: MINUS
37529: PUSH
37530: LD_INT 3
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: PUSH
37538: LD_VAR 0 1
37542: PUSH
37543: LD_INT 4
37545: PLUS
37546: PUSH
37547: LD_VAR 0 2
37551: PUSH
37552: LD_INT 4
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: PUSH
37560: LD_VAR 0 1
37564: PUSH
37565: LD_VAR 0 2
37569: PUSH
37570: LD_INT 4
37572: PLUS
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: PUSH
37582: LD_VAR 0 1
37586: PUSH
37587: LD_INT 3
37589: MINUS
37590: PUSH
37591: LD_VAR 0 2
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: LIST
37603: PUSH
37604: LD_VAR 0 1
37608: PUSH
37609: LD_INT 4
37611: MINUS
37612: PUSH
37613: LD_VAR 0 2
37617: PUSH
37618: LD_INT 4
37620: MINUS
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
// end ; 3 :
37637: GO 38059
37639: LD_INT 3
37641: DOUBLE
37642: EQUAL
37643: IFTRUE 37647
37645: GO 37780
37647: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37648: LD_ADDR_VAR 0 5
37652: PUSH
37653: LD_VAR 0 1
37657: PUSH
37658: LD_INT 3
37660: PLUS
37661: PUSH
37662: LD_VAR 0 2
37666: PUSH
37667: LD_INT 4
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: PUSH
37675: LD_VAR 0 1
37679: PUSH
37680: LD_INT 4
37682: PLUS
37683: PUSH
37684: LD_VAR 0 2
37688: PUSH
37689: LD_INT 4
37691: PLUS
37692: PUSH
37693: LD_INT 5
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: PUSH
37701: LD_VAR 0 1
37705: PUSH
37706: LD_INT 4
37708: MINUS
37709: PUSH
37710: LD_VAR 0 2
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: PUSH
37723: LD_VAR 0 1
37727: PUSH
37728: LD_VAR 0 2
37732: PUSH
37733: LD_INT 4
37735: MINUS
37736: PUSH
37737: LD_INT 3
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: PUSH
37745: LD_VAR 0 1
37749: PUSH
37750: LD_INT 3
37752: MINUS
37753: PUSH
37754: LD_VAR 0 2
37758: PUSH
37759: LD_INT 3
37761: MINUS
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: ST_TO_ADDR
// end ; 4 :
37778: GO 38059
37780: LD_INT 4
37782: DOUBLE
37783: EQUAL
37784: IFTRUE 37788
37786: GO 37921
37788: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37789: LD_ADDR_VAR 0 5
37793: PUSH
37794: LD_VAR 0 1
37798: PUSH
37799: LD_VAR 0 2
37803: PUSH
37804: LD_INT 4
37806: PLUS
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: PUSH
37816: LD_VAR 0 1
37820: PUSH
37821: LD_INT 3
37823: PLUS
37824: PUSH
37825: LD_VAR 0 2
37829: PUSH
37830: LD_INT 3
37832: PLUS
37833: PUSH
37834: LD_INT 5
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: PUSH
37842: LD_VAR 0 1
37846: PUSH
37847: LD_INT 4
37849: PLUS
37850: PUSH
37851: LD_VAR 0 2
37855: PUSH
37856: LD_INT 4
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: PUSH
37864: LD_VAR 0 1
37868: PUSH
37869: LD_VAR 0 2
37873: PUSH
37874: LD_INT 3
37876: MINUS
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: PUSH
37886: LD_VAR 0 1
37890: PUSH
37891: LD_INT 4
37893: MINUS
37894: PUSH
37895: LD_VAR 0 2
37899: PUSH
37900: LD_INT 4
37902: MINUS
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// end ; 5 :
37919: GO 38059
37921: LD_INT 5
37923: DOUBLE
37924: EQUAL
37925: IFTRUE 37929
37927: GO 38058
37929: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_VAR 0 1
37939: PUSH
37940: LD_INT 4
37942: MINUS
37943: PUSH
37944: LD_VAR 0 2
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: PUSH
37957: LD_VAR 0 1
37961: PUSH
37962: LD_VAR 0 2
37966: PUSH
37967: LD_INT 4
37969: MINUS
37970: PUSH
37971: LD_INT 3
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: LIST
37978: PUSH
37979: LD_VAR 0 1
37983: PUSH
37984: LD_INT 4
37986: PLUS
37987: PUSH
37988: LD_VAR 0 2
37992: PUSH
37993: LD_INT 4
37995: PLUS
37996: PUSH
37997: LD_INT 5
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: PUSH
38005: LD_VAR 0 1
38009: PUSH
38010: LD_INT 3
38012: PLUS
38013: PUSH
38014: LD_VAR 0 2
38018: PUSH
38019: LD_INT 4
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: PUSH
38027: LD_VAR 0 1
38031: PUSH
38032: LD_VAR 0 2
38036: PUSH
38037: LD_INT 3
38039: PLUS
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: LIST
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// end ; end ;
38056: GO 38059
38058: POP
// result := list ;
38059: LD_ADDR_VAR 0 4
38063: PUSH
38064: LD_VAR 0 5
38068: ST_TO_ADDR
// end ;
38069: LD_VAR 0 4
38073: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38074: LD_INT 0
38076: PPUSH
38077: PPUSH
38078: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38079: LD_VAR 0 1
38083: NOT
38084: IFTRUE 38112
38086: PUSH
38087: LD_VAR 0 2
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: LD_INT 3
38100: PUSH
38101: LD_INT 4
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: IN
38110: NOT
38111: OR
38112: IFFALSE 38116
// exit ;
38114: GO 38199
// tmp := [ ] ;
38116: LD_ADDR_VAR 0 5
38120: PUSH
38121: EMPTY
38122: ST_TO_ADDR
// for i in units do
38123: LD_ADDR_VAR 0 4
38127: PUSH
38128: LD_VAR 0 1
38132: PUSH
38133: FOR_IN
38134: IFFALSE 38168
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38136: LD_ADDR_VAR 0 5
38140: PUSH
38141: LD_VAR 0 5
38145: PPUSH
38146: LD_VAR 0 4
38150: PPUSH
38151: LD_VAR 0 2
38155: PPUSH
38156: CALL_OW 259
38160: PPUSH
38161: CALL 39594 0 2
38165: ST_TO_ADDR
38166: GO 38133
38168: POP
38169: POP
// if not tmp then
38170: LD_VAR 0 5
38174: NOT
38175: IFFALSE 38179
// exit ;
38177: GO 38199
// result := SortListByListDesc ( units , tmp ) ;
38179: LD_ADDR_VAR 0 3
38183: PUSH
38184: LD_VAR 0 1
38188: PPUSH
38189: LD_VAR 0 5
38193: PPUSH
38194: CALL_OW 77
38198: ST_TO_ADDR
// end ;
38199: LD_VAR 0 3
38203: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38204: LD_INT 0
38206: PPUSH
38207: PPUSH
38208: PPUSH
// result := false ;
38209: LD_ADDR_VAR 0 3
38213: PUSH
38214: LD_INT 0
38216: ST_TO_ADDR
// if not building then
38217: LD_VAR 0 2
38221: NOT
38222: IFFALSE 38226
// exit ;
38224: GO 38370
// x := GetX ( building ) ;
38226: LD_ADDR_VAR 0 4
38230: PUSH
38231: LD_VAR 0 2
38235: PPUSH
38236: CALL_OW 250
38240: ST_TO_ADDR
// y := GetY ( building ) ;
38241: LD_ADDR_VAR 0 5
38245: PUSH
38246: LD_VAR 0 2
38250: PPUSH
38251: CALL_OW 251
38255: ST_TO_ADDR
// if not x or not y then
38256: LD_VAR 0 4
38260: NOT
38261: IFTRUE 38270
38263: PUSH
38264: LD_VAR 0 5
38268: NOT
38269: OR
38270: IFFALSE 38274
// exit ;
38272: GO 38370
// if GetTaskList ( unit ) then
38274: LD_VAR 0 1
38278: PPUSH
38279: CALL_OW 437
38283: IFFALSE 38370
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38285: LD_STRING e
38287: PUSH
38288: LD_VAR 0 1
38292: PPUSH
38293: CALL_OW 437
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: EQUAL
38306: IFFALSE 38333
38308: PUSH
38309: LD_VAR 0 4
38313: PUSH
38314: LD_VAR 0 1
38318: PPUSH
38319: CALL_OW 437
38323: PUSH
38324: LD_INT 1
38326: ARRAY
38327: PUSH
38328: LD_INT 2
38330: ARRAY
38331: EQUAL
38332: AND
38333: IFFALSE 38360
38335: PUSH
38336: LD_VAR 0 5
38340: PUSH
38341: LD_VAR 0 1
38345: PPUSH
38346: CALL_OW 437
38350: PUSH
38351: LD_INT 1
38353: ARRAY
38354: PUSH
38355: LD_INT 3
38357: ARRAY
38358: EQUAL
38359: AND
38360: IFFALSE 38370
// result := true end ;
38362: LD_ADDR_VAR 0 3
38366: PUSH
38367: LD_INT 1
38369: ST_TO_ADDR
// end ;
38370: LD_VAR 0 3
38374: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38375: LD_INT 0
38377: PPUSH
// result := false ;
38378: LD_ADDR_VAR 0 4
38382: PUSH
38383: LD_INT 0
38385: ST_TO_ADDR
// if GetTaskList ( unit ) then
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 437
38395: IFFALSE 38482
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38397: LD_STRING M
38399: PUSH
38400: LD_VAR 0 1
38404: PPUSH
38405: CALL_OW 437
38409: PUSH
38410: LD_INT 1
38412: ARRAY
38413: PUSH
38414: LD_INT 1
38416: ARRAY
38417: EQUAL
38418: IFFALSE 38445
38420: PUSH
38421: LD_VAR 0 2
38425: PUSH
38426: LD_VAR 0 1
38430: PPUSH
38431: CALL_OW 437
38435: PUSH
38436: LD_INT 1
38438: ARRAY
38439: PUSH
38440: LD_INT 2
38442: ARRAY
38443: EQUAL
38444: AND
38445: IFFALSE 38472
38447: PUSH
38448: LD_VAR 0 3
38452: PUSH
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 437
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: PUSH
38467: LD_INT 3
38469: ARRAY
38470: EQUAL
38471: AND
38472: IFFALSE 38482
// result := true ;
38474: LD_ADDR_VAR 0 4
38478: PUSH
38479: LD_INT 1
38481: ST_TO_ADDR
// end ; end ;
38482: LD_VAR 0 4
38486: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38487: LD_INT 0
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
// if not unit or not area then
38493: LD_VAR 0 1
38497: NOT
38498: IFTRUE 38507
38500: PUSH
38501: LD_VAR 0 2
38505: NOT
38506: OR
38507: IFFALSE 38511
// exit ;
38509: GO 38687
// tmp := AreaToList ( area , i ) ;
38511: LD_ADDR_VAR 0 6
38515: PUSH
38516: LD_VAR 0 2
38520: PPUSH
38521: LD_VAR 0 5
38525: PPUSH
38526: CALL_OW 517
38530: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: DOUBLE
38537: LD_INT 1
38539: DEC
38540: ST_TO_ADDR
38541: LD_VAR 0 6
38545: PUSH
38546: LD_INT 1
38548: ARRAY
38549: PUSH
38550: FOR_TO
38551: IFFALSE 38685
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38553: LD_ADDR_VAR 0 7
38557: PUSH
38558: LD_VAR 0 6
38562: PUSH
38563: LD_INT 1
38565: ARRAY
38566: PUSH
38567: LD_VAR 0 5
38571: ARRAY
38572: PUSH
38573: LD_VAR 0 6
38577: PUSH
38578: LD_INT 2
38580: ARRAY
38581: PUSH
38582: LD_VAR 0 5
38586: ARRAY
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38592: LD_INT 92
38594: PUSH
38595: LD_VAR 0 7
38599: PUSH
38600: LD_INT 1
38602: ARRAY
38603: PUSH
38604: LD_VAR 0 7
38608: PUSH
38609: LD_INT 2
38611: ARRAY
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: PPUSH
38622: CALL_OW 69
38626: PUSH
38627: LD_INT 0
38629: EQUAL
38630: IFFALSE 38683
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_VAR 0 7
38641: PUSH
38642: LD_INT 1
38644: ARRAY
38645: PPUSH
38646: LD_VAR 0 7
38650: PUSH
38651: LD_INT 2
38653: ARRAY
38654: PPUSH
38655: LD_VAR 0 3
38659: PPUSH
38660: CALL_OW 48
// result := IsPlaced ( unit ) ;
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: LD_VAR 0 1
38673: PPUSH
38674: CALL_OW 305
38678: ST_TO_ADDR
// exit ;
38679: POP
38680: POP
38681: GO 38687
// end ; end ;
38683: GO 38550
38685: POP
38686: POP
// end ;
38687: LD_VAR 0 4
38691: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38692: LD_INT 0
38694: PPUSH
38695: PPUSH
38696: PPUSH
// if not side or side > 8 then
38697: LD_VAR 0 1
38701: NOT
38702: IFTRUE 38714
38704: PUSH
38705: LD_VAR 0 1
38709: PUSH
38710: LD_INT 8
38712: GREATER
38713: OR
38714: IFFALSE 38718
// exit ;
38716: GO 38905
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38718: LD_ADDR_VAR 0 4
38722: PUSH
38723: LD_INT 22
38725: PUSH
38726: LD_VAR 0 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 21
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PPUSH
38749: CALL_OW 69
38753: ST_TO_ADDR
// if not tmp then
38754: LD_VAR 0 4
38758: NOT
38759: IFFALSE 38763
// exit ;
38761: GO 38905
// enable_addtolog := true ;
38763: LD_ADDR_OWVAR 81
38767: PUSH
38768: LD_INT 1
38770: ST_TO_ADDR
// AddToLog ( [ ) ;
38771: LD_STRING [
38773: PPUSH
38774: CALL_OW 561
// for i in tmp do
38778: LD_ADDR_VAR 0 3
38782: PUSH
38783: LD_VAR 0 4
38787: PUSH
38788: FOR_IN
38789: IFFALSE 38896
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38791: LD_STRING [
38793: PUSH
38794: LD_VAR 0 3
38798: PPUSH
38799: CALL_OW 266
38803: STR
38804: PUSH
38805: LD_STRING , 
38807: STR
38808: PUSH
38809: LD_VAR 0 3
38813: PPUSH
38814: CALL_OW 250
38818: STR
38819: PUSH
38820: LD_STRING , 
38822: STR
38823: PUSH
38824: LD_VAR 0 3
38828: PPUSH
38829: CALL_OW 251
38833: STR
38834: PUSH
38835: LD_STRING , 
38837: STR
38838: PUSH
38839: LD_VAR 0 3
38843: PPUSH
38844: CALL_OW 254
38848: STR
38849: PUSH
38850: LD_STRING , 
38852: STR
38853: PUSH
38854: LD_VAR 0 3
38858: PPUSH
38859: LD_INT 1
38861: PPUSH
38862: CALL_OW 268
38866: STR
38867: PUSH
38868: LD_STRING , 
38870: STR
38871: PUSH
38872: LD_VAR 0 3
38876: PPUSH
38877: LD_INT 2
38879: PPUSH
38880: CALL_OW 268
38884: STR
38885: PUSH
38886: LD_STRING ],
38888: STR
38889: PPUSH
38890: CALL_OW 561
// end ;
38894: GO 38788
38896: POP
38897: POP
// AddToLog ( ]; ) ;
38898: LD_STRING ];
38900: PPUSH
38901: CALL_OW 561
// end ;
38905: LD_VAR 0 2
38909: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38910: LD_INT 0
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
// if not area or not rate or not max then
38917: LD_VAR 0 1
38921: NOT
38922: IFTRUE 38931
38924: PUSH
38925: LD_VAR 0 2
38929: NOT
38930: OR
38931: IFTRUE 38940
38933: PUSH
38934: LD_VAR 0 4
38938: NOT
38939: OR
38940: IFFALSE 38944
// exit ;
38942: GO 39133
// while 1 do
38944: LD_INT 1
38946: IFFALSE 39133
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38948: LD_ADDR_VAR 0 9
38952: PUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: LD_INT 1
38960: PPUSH
38961: CALL_OW 287
38965: PUSH
38966: LD_INT 10
38968: MUL
38969: ST_TO_ADDR
// r := rate / 10 ;
38970: LD_ADDR_VAR 0 7
38974: PUSH
38975: LD_VAR 0 2
38979: PUSH
38980: LD_INT 10
38982: DIVREAL
38983: ST_TO_ADDR
// time := 1 1$00 ;
38984: LD_ADDR_VAR 0 8
38988: PUSH
38989: LD_INT 2100
38991: ST_TO_ADDR
// if amount < min then
38992: LD_VAR 0 9
38996: PUSH
38997: LD_VAR 0 3
39001: LESS
39002: IFFALSE 39020
// r := r * 2 else
39004: LD_ADDR_VAR 0 7
39008: PUSH
39009: LD_VAR 0 7
39013: PUSH
39014: LD_INT 2
39016: MUL
39017: ST_TO_ADDR
39018: GO 39046
// if amount > max then
39020: LD_VAR 0 9
39024: PUSH
39025: LD_VAR 0 4
39029: GREATER
39030: IFFALSE 39046
// r := r / 2 ;
39032: LD_ADDR_VAR 0 7
39036: PUSH
39037: LD_VAR 0 7
39041: PUSH
39042: LD_INT 2
39044: DIVREAL
39045: ST_TO_ADDR
// time := time / r ;
39046: LD_ADDR_VAR 0 8
39050: PUSH
39051: LD_VAR 0 8
39055: PUSH
39056: LD_VAR 0 7
39060: DIVREAL
39061: ST_TO_ADDR
// if time < 0 then
39062: LD_VAR 0 8
39066: PUSH
39067: LD_INT 0
39069: LESS
39070: IFFALSE 39087
// time := time * - 1 ;
39072: LD_ADDR_VAR 0 8
39076: PUSH
39077: LD_VAR 0 8
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: MUL
39086: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39087: LD_VAR 0 8
39091: PUSH
39092: LD_INT 35
39094: PPUSH
39095: LD_INT 875
39097: PPUSH
39098: CALL_OW 12
39102: PLUS
39103: PPUSH
39104: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39108: LD_INT 1
39110: PPUSH
39111: LD_INT 5
39113: PPUSH
39114: CALL_OW 12
39118: PPUSH
39119: LD_VAR 0 1
39123: PPUSH
39124: LD_INT 1
39126: PPUSH
39127: CALL_OW 55
// end ;
39131: GO 38944
// end ;
39133: LD_VAR 0 5
39137: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39138: LD_INT 0
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
// if not turrets or not factories then
39148: LD_VAR 0 1
39152: NOT
39153: IFTRUE 39162
39155: PUSH
39156: LD_VAR 0 2
39160: NOT
39161: OR
39162: IFFALSE 39166
// exit ;
39164: GO 39473
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39166: LD_ADDR_VAR 0 10
39170: PUSH
39171: LD_INT 5
39173: PUSH
39174: LD_INT 6
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 4
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 24
39208: PUSH
39209: LD_INT 25
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 23
39218: PUSH
39219: LD_INT 27
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 42
39232: PUSH
39233: LD_INT 43
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 44
39242: PUSH
39243: LD_INT 46
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 45
39252: PUSH
39253: LD_INT 47
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// result := [ ] ;
39270: LD_ADDR_VAR 0 3
39274: PUSH
39275: EMPTY
39276: ST_TO_ADDR
// for i in turrets do
39277: LD_ADDR_VAR 0 4
39281: PUSH
39282: LD_VAR 0 1
39286: PUSH
39287: FOR_IN
39288: IFFALSE 39471
// begin nat := GetNation ( i ) ;
39290: LD_ADDR_VAR 0 7
39294: PUSH
39295: LD_VAR 0 4
39299: PPUSH
39300: CALL_OW 248
39304: ST_TO_ADDR
// weapon := 0 ;
39305: LD_ADDR_VAR 0 8
39309: PUSH
39310: LD_INT 0
39312: ST_TO_ADDR
// if not nat then
39313: LD_VAR 0 7
39317: NOT
39318: IFFALSE 39322
// continue ;
39320: GO 39287
// for j in list [ nat ] do
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 10
39331: PUSH
39332: LD_VAR 0 7
39336: ARRAY
39337: PUSH
39338: FOR_IN
39339: IFFALSE 39380
// if GetBWeapon ( i ) = j [ 1 ] then
39341: LD_VAR 0 4
39345: PPUSH
39346: CALL_OW 269
39350: PUSH
39351: LD_VAR 0 5
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: EQUAL
39360: IFFALSE 39378
// begin weapon := j [ 2 ] ;
39362: LD_ADDR_VAR 0 8
39366: PUSH
39367: LD_VAR 0 5
39371: PUSH
39372: LD_INT 2
39374: ARRAY
39375: ST_TO_ADDR
// break ;
39376: GO 39380
// end ;
39378: GO 39338
39380: POP
39381: POP
// if not weapon then
39382: LD_VAR 0 8
39386: NOT
39387: IFFALSE 39391
// continue ;
39389: GO 39287
// for k in factories do
39391: LD_ADDR_VAR 0 6
39395: PUSH
39396: LD_VAR 0 2
39400: PUSH
39401: FOR_IN
39402: IFFALSE 39467
// begin weapons := AvailableWeaponList ( k ) ;
39404: LD_ADDR_VAR 0 9
39408: PUSH
39409: LD_VAR 0 6
39413: PPUSH
39414: CALL_OW 478
39418: ST_TO_ADDR
// if not weapons then
39419: LD_VAR 0 9
39423: NOT
39424: IFFALSE 39428
// continue ;
39426: GO 39401
// if weapon in weapons then
39428: LD_VAR 0 8
39432: PUSH
39433: LD_VAR 0 9
39437: IN
39438: IFFALSE 39465
// begin result := [ i , weapon ] ;
39440: LD_ADDR_VAR 0 3
39444: PUSH
39445: LD_VAR 0 4
39449: PUSH
39450: LD_VAR 0 8
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: ST_TO_ADDR
// exit ;
39459: POP
39460: POP
39461: POP
39462: POP
39463: GO 39473
// end ; end ;
39465: GO 39401
39467: POP
39468: POP
// end ;
39469: GO 39287
39471: POP
39472: POP
// end ;
39473: LD_VAR 0 3
39477: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39478: LD_INT 0
39480: PPUSH
// if not side or side > 8 then
39481: LD_VAR 0 3
39485: NOT
39486: IFTRUE 39498
39488: PUSH
39489: LD_VAR 0 3
39493: PUSH
39494: LD_INT 8
39496: GREATER
39497: OR
39498: IFFALSE 39502
// exit ;
39500: GO 39561
// if not range then
39502: LD_VAR 0 4
39506: NOT
39507: IFFALSE 39518
// range := - 12 ;
39509: LD_ADDR_VAR 0 4
39513: PUSH
39514: LD_INT 12
39516: NEG
39517: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39518: LD_VAR 0 1
39522: PPUSH
39523: LD_VAR 0 2
39527: PPUSH
39528: LD_VAR 0 3
39532: PPUSH
39533: LD_VAR 0 4
39537: PPUSH
39538: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39542: LD_VAR 0 1
39546: PPUSH
39547: LD_VAR 0 2
39551: PPUSH
39552: LD_VAR 0 3
39556: PPUSH
39557: CALL_OW 331
// end ;
39561: LD_VAR 0 5
39565: RET
// export function Video ( mode ) ; begin
39566: LD_INT 0
39568: PPUSH
// ingame_video = mode ;
39569: LD_ADDR_OWVAR 52
39573: PUSH
39574: LD_VAR 0 1
39578: ST_TO_ADDR
// interface_hidden = mode ;
39579: LD_ADDR_OWVAR 54
39583: PUSH
39584: LD_VAR 0 1
39588: ST_TO_ADDR
// end ;
39589: LD_VAR 0 2
39593: RET
// export function Join ( array , element ) ; begin
39594: LD_INT 0
39596: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_VAR 0 1
39606: PPUSH
39607: LD_VAR 0 1
39611: PUSH
39612: LD_INT 1
39614: PLUS
39615: PPUSH
39616: LD_VAR 0 2
39620: PPUSH
39621: CALL_OW 1
39625: ST_TO_ADDR
// end ;
39626: LD_VAR 0 3
39630: RET
// export function JoinUnion ( array , element ) ; begin
39631: LD_INT 0
39633: PPUSH
// result := array union element ;
39634: LD_ADDR_VAR 0 3
39638: PUSH
39639: LD_VAR 0 1
39643: PUSH
39644: LD_VAR 0 2
39648: UNION
39649: ST_TO_ADDR
// end ;
39650: LD_VAR 0 3
39654: RET
// export function GetBehemoths ( side ) ; begin
39655: LD_INT 0
39657: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39658: LD_ADDR_VAR 0 2
39662: PUSH
39663: LD_INT 22
39665: PUSH
39666: LD_VAR 0 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 31
39677: PUSH
39678: LD_INT 25
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PPUSH
39689: CALL_OW 69
39693: ST_TO_ADDR
// end ;
39694: LD_VAR 0 2
39698: RET
// export function Shuffle ( array ) ; var i , index ; begin
39699: LD_INT 0
39701: PPUSH
39702: PPUSH
39703: PPUSH
// result := [ ] ;
39704: LD_ADDR_VAR 0 2
39708: PUSH
39709: EMPTY
39710: ST_TO_ADDR
// if not array then
39711: LD_VAR 0 1
39715: NOT
39716: IFFALSE 39720
// exit ;
39718: GO 39819
// Randomize ;
39720: CALL_OW 10
// for i = array downto 1 do
39724: LD_ADDR_VAR 0 3
39728: PUSH
39729: DOUBLE
39730: LD_VAR 0 1
39734: INC
39735: ST_TO_ADDR
39736: LD_INT 1
39738: PUSH
39739: FOR_DOWNTO
39740: IFFALSE 39817
// begin index := rand ( 1 , array ) ;
39742: LD_ADDR_VAR 0 4
39746: PUSH
39747: LD_INT 1
39749: PPUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL_OW 12
39759: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39760: LD_ADDR_VAR 0 2
39764: PUSH
39765: LD_VAR 0 2
39769: PPUSH
39770: LD_VAR 0 2
39774: PUSH
39775: LD_INT 1
39777: PLUS
39778: PPUSH
39779: LD_VAR 0 1
39783: PUSH
39784: LD_VAR 0 4
39788: ARRAY
39789: PPUSH
39790: CALL_OW 2
39794: ST_TO_ADDR
// array := Delete ( array , index ) ;
39795: LD_ADDR_VAR 0 1
39799: PUSH
39800: LD_VAR 0 1
39804: PPUSH
39805: LD_VAR 0 4
39809: PPUSH
39810: CALL_OW 3
39814: ST_TO_ADDR
// end ;
39815: GO 39739
39817: POP
39818: POP
// end ;
39819: LD_VAR 0 2
39823: RET
// export function GetBaseMaterials ( base ) ; begin
39824: LD_INT 0
39826: PPUSH
// result := [ 0 , 0 , 0 ] ;
39827: LD_ADDR_VAR 0 2
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: ST_TO_ADDR
// if not base then
39846: LD_VAR 0 1
39850: NOT
39851: IFFALSE 39855
// exit ;
39853: GO 39904
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39855: LD_ADDR_VAR 0 2
39859: PUSH
39860: LD_VAR 0 1
39864: PPUSH
39865: LD_INT 1
39867: PPUSH
39868: CALL_OW 275
39872: PUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: LD_INT 2
39880: PPUSH
39881: CALL_OW 275
39885: PUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: LD_INT 3
39893: PPUSH
39894: CALL_OW 275
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: LIST
39903: ST_TO_ADDR
// end ;
39904: LD_VAR 0 2
39908: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39909: LD_INT 0
39911: PPUSH
39912: PPUSH
// result := array ;
39913: LD_ADDR_VAR 0 3
39917: PUSH
39918: LD_VAR 0 1
39922: ST_TO_ADDR
// if size >= result then
39923: LD_VAR 0 2
39927: PUSH
39928: LD_VAR 0 3
39932: GREATEREQUAL
39933: IFFALSE 39937
// exit ;
39935: GO 39987
// if size then
39937: LD_VAR 0 2
39941: IFFALSE 39987
// for i := array downto size do
39943: LD_ADDR_VAR 0 4
39947: PUSH
39948: DOUBLE
39949: LD_VAR 0 1
39953: INC
39954: ST_TO_ADDR
39955: LD_VAR 0 2
39959: PUSH
39960: FOR_DOWNTO
39961: IFFALSE 39985
// result := Delete ( result , result ) ;
39963: LD_ADDR_VAR 0 3
39967: PUSH
39968: LD_VAR 0 3
39972: PPUSH
39973: LD_VAR 0 3
39977: PPUSH
39978: CALL_OW 3
39982: ST_TO_ADDR
39983: GO 39960
39985: POP
39986: POP
// end ;
39987: LD_VAR 0 3
39991: RET
// export function ComExit ( unit ) ; var tmp ; begin
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
// if not IsInUnit ( unit ) then
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 310
40005: NOT
40006: IFFALSE 40010
// exit ;
40008: GO 40070
// tmp := IsInUnit ( unit ) ;
40010: LD_ADDR_VAR 0 3
40014: PUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 310
40024: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40025: LD_VAR 0 3
40029: PPUSH
40030: CALL_OW 247
40034: PUSH
40035: LD_INT 2
40037: EQUAL
40038: IFFALSE 40051
// ComExitVehicle ( unit ) else
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 121
40049: GO 40060
// ComExitBuilding ( unit ) ;
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 122
// result := tmp ;
40060: LD_ADDR_VAR 0 2
40064: PUSH
40065: LD_VAR 0 3
40069: ST_TO_ADDR
// end ;
40070: LD_VAR 0 2
40074: RET
// export function ComExitAll ( units ) ; var i ; begin
40075: LD_INT 0
40077: PPUSH
40078: PPUSH
// if not units then
40079: LD_VAR 0 1
40083: NOT
40084: IFFALSE 40088
// exit ;
40086: GO 40114
// for i in units do
40088: LD_ADDR_VAR 0 3
40092: PUSH
40093: LD_VAR 0 1
40097: PUSH
40098: FOR_IN
40099: IFFALSE 40112
// ComExit ( i ) ;
40101: LD_VAR 0 3
40105: PPUSH
40106: CALL 39992 0 1
40110: GO 40098
40112: POP
40113: POP
// end ;
40114: LD_VAR 0 2
40118: RET
// export function ResetHc ; begin
40119: LD_INT 0
40121: PPUSH
// InitHc ;
40122: CALL_OW 19
// hc_importance := 0 ;
40126: LD_ADDR_OWVAR 32
40130: PUSH
40131: LD_INT 0
40133: ST_TO_ADDR
// end ;
40134: LD_VAR 0 1
40138: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
40143: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40144: LD_ADDR_VAR 0 6
40148: PUSH
40149: LD_VAR 0 1
40153: PUSH
40154: LD_VAR 0 3
40158: PLUS
40159: PUSH
40160: LD_INT 2
40162: DIV
40163: ST_TO_ADDR
// if _x < 0 then
40164: LD_VAR 0 6
40168: PUSH
40169: LD_INT 0
40171: LESS
40172: IFFALSE 40189
// _x := _x * - 1 ;
40174: LD_ADDR_VAR 0 6
40178: PUSH
40179: LD_VAR 0 6
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: MUL
40188: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40189: LD_ADDR_VAR 0 7
40193: PUSH
40194: LD_VAR 0 2
40198: PUSH
40199: LD_VAR 0 4
40203: PLUS
40204: PUSH
40205: LD_INT 2
40207: DIV
40208: ST_TO_ADDR
// if _y < 0 then
40209: LD_VAR 0 7
40213: PUSH
40214: LD_INT 0
40216: LESS
40217: IFFALSE 40234
// _y := _y * - 1 ;
40219: LD_ADDR_VAR 0 7
40223: PUSH
40224: LD_VAR 0 7
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: MUL
40233: ST_TO_ADDR
// result := [ _x , _y ] ;
40234: LD_ADDR_VAR 0 5
40238: PUSH
40239: LD_VAR 0 6
40243: PUSH
40244: LD_VAR 0 7
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// end ;
40253: LD_VAR 0 5
40257: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40258: LD_INT 0
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
// task := GetTaskList ( unit ) ;
40264: LD_ADDR_VAR 0 7
40268: PUSH
40269: LD_VAR 0 1
40273: PPUSH
40274: CALL_OW 437
40278: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40279: LD_VAR 0 7
40283: NOT
40284: IFFALSE 40303
40286: PUSH
40287: LD_VAR 0 1
40291: PPUSH
40292: LD_VAR 0 2
40296: PPUSH
40297: CALL_OW 308
40301: NOT
40302: AND
40303: IFFALSE 40307
// exit ;
40305: GO 40425
// if IsInArea ( unit , area ) then
40307: LD_VAR 0 1
40311: PPUSH
40312: LD_VAR 0 2
40316: PPUSH
40317: CALL_OW 308
40321: IFFALSE 40339
// begin ComMoveToArea ( unit , goAway ) ;
40323: LD_VAR 0 1
40327: PPUSH
40328: LD_VAR 0 3
40332: PPUSH
40333: CALL_OW 113
// exit ;
40337: GO 40425
// end ; if task [ 1 ] [ 1 ] <> M then
40339: LD_VAR 0 7
40343: PUSH
40344: LD_INT 1
40346: ARRAY
40347: PUSH
40348: LD_INT 1
40350: ARRAY
40351: PUSH
40352: LD_STRING M
40354: NONEQUAL
40355: IFFALSE 40359
// exit ;
40357: GO 40425
// x := task [ 1 ] [ 2 ] ;
40359: LD_ADDR_VAR 0 5
40363: PUSH
40364: LD_VAR 0 7
40368: PUSH
40369: LD_INT 1
40371: ARRAY
40372: PUSH
40373: LD_INT 2
40375: ARRAY
40376: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40377: LD_ADDR_VAR 0 6
40381: PUSH
40382: LD_VAR 0 7
40386: PUSH
40387: LD_INT 1
40389: ARRAY
40390: PUSH
40391: LD_INT 3
40393: ARRAY
40394: ST_TO_ADDR
// if InArea ( x , y , area ) then
40395: LD_VAR 0 5
40399: PPUSH
40400: LD_VAR 0 6
40404: PPUSH
40405: LD_VAR 0 2
40409: PPUSH
40410: CALL_OW 309
40414: IFFALSE 40425
// ComStop ( unit ) ;
40416: LD_VAR 0 1
40420: PPUSH
40421: CALL_OW 141
// end ;
40425: LD_VAR 0 4
40429: RET
// export function Abs ( value ) ; begin
40430: LD_INT 0
40432: PPUSH
// result := value ;
40433: LD_ADDR_VAR 0 2
40437: PUSH
40438: LD_VAR 0 1
40442: ST_TO_ADDR
// if value < 0 then
40443: LD_VAR 0 1
40447: PUSH
40448: LD_INT 0
40450: LESS
40451: IFFALSE 40468
// result := value * - 1 ;
40453: LD_ADDR_VAR 0 2
40457: PUSH
40458: LD_VAR 0 1
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: MUL
40467: ST_TO_ADDR
// end ;
40468: LD_VAR 0 2
40472: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40473: LD_INT 0
40475: PPUSH
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
40480: PPUSH
40481: PPUSH
40482: PPUSH
// if not unit or not building then
40483: LD_VAR 0 1
40487: NOT
40488: IFTRUE 40497
40490: PUSH
40491: LD_VAR 0 2
40495: NOT
40496: OR
40497: IFFALSE 40501
// exit ;
40499: GO 40729
// x := GetX ( building ) ;
40501: LD_ADDR_VAR 0 4
40505: PUSH
40506: LD_VAR 0 2
40510: PPUSH
40511: CALL_OW 250
40515: ST_TO_ADDR
// y := GetY ( building ) ;
40516: LD_ADDR_VAR 0 6
40520: PUSH
40521: LD_VAR 0 2
40525: PPUSH
40526: CALL_OW 251
40530: ST_TO_ADDR
// d := GetDir ( building ) ;
40531: LD_ADDR_VAR 0 8
40535: PUSH
40536: LD_VAR 0 2
40540: PPUSH
40541: CALL_OW 254
40545: ST_TO_ADDR
// r := 4 ;
40546: LD_ADDR_VAR 0 9
40550: PUSH
40551: LD_INT 4
40553: ST_TO_ADDR
// for i := 1 to 5 do
40554: LD_ADDR_VAR 0 10
40558: PUSH
40559: DOUBLE
40560: LD_INT 1
40562: DEC
40563: ST_TO_ADDR
40564: LD_INT 5
40566: PUSH
40567: FOR_TO
40568: IFFALSE 40727
// begin _x := ShiftX ( x , d , r + i ) ;
40570: LD_ADDR_VAR 0 5
40574: PUSH
40575: LD_VAR 0 4
40579: PPUSH
40580: LD_VAR 0 8
40584: PPUSH
40585: LD_VAR 0 9
40589: PUSH
40590: LD_VAR 0 10
40594: PLUS
40595: PPUSH
40596: CALL_OW 272
40600: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40601: LD_ADDR_VAR 0 7
40605: PUSH
40606: LD_VAR 0 6
40610: PPUSH
40611: LD_VAR 0 8
40615: PPUSH
40616: LD_VAR 0 9
40620: PUSH
40621: LD_VAR 0 10
40625: PLUS
40626: PPUSH
40627: CALL_OW 273
40631: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40632: LD_VAR 0 5
40636: PPUSH
40637: LD_VAR 0 7
40641: PPUSH
40642: CALL_OW 488
40646: IFFALSE 40681
40648: PUSH
40649: LD_VAR 0 5
40653: PPUSH
40654: LD_VAR 0 7
40658: PPUSH
40659: CALL_OW 428
40663: PPUSH
40664: CALL_OW 247
40668: PUSH
40669: LD_INT 3
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: IN
40679: NOT
40680: AND
40681: IFFALSE 40725
// begin ComMoveXY ( unit , _x , _y ) ;
40683: LD_VAR 0 1
40687: PPUSH
40688: LD_VAR 0 5
40692: PPUSH
40693: LD_VAR 0 7
40697: PPUSH
40698: CALL_OW 111
// result := [ _x , _y ] ;
40702: LD_ADDR_VAR 0 3
40706: PUSH
40707: LD_VAR 0 5
40711: PUSH
40712: LD_VAR 0 7
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: ST_TO_ADDR
// exit ;
40721: POP
40722: POP
40723: GO 40729
// end ; end ;
40725: GO 40567
40727: POP
40728: POP
// end ;
40729: LD_VAR 0 3
40733: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40734: LD_INT 0
40736: PPUSH
40737: PPUSH
40738: PPUSH
// result := 0 ;
40739: LD_ADDR_VAR 0 3
40743: PUSH
40744: LD_INT 0
40746: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40747: LD_VAR 0 1
40751: PUSH
40752: LD_INT 0
40754: LESS
40755: IFTRUE 40767
40757: PUSH
40758: LD_VAR 0 1
40762: PUSH
40763: LD_INT 8
40765: GREATER
40766: OR
40767: IFTRUE 40779
40769: PUSH
40770: LD_VAR 0 2
40774: PUSH
40775: LD_INT 0
40777: LESS
40778: OR
40779: IFTRUE 40791
40781: PUSH
40782: LD_VAR 0 2
40786: PUSH
40787: LD_INT 8
40789: GREATER
40790: OR
40791: IFFALSE 40795
// exit ;
40793: GO 40870
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40795: LD_ADDR_VAR 0 4
40799: PUSH
40800: LD_INT 22
40802: PUSH
40803: LD_VAR 0 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PPUSH
40812: CALL_OW 69
40816: PUSH
40817: FOR_IN
40818: IFFALSE 40868
// begin un := UnitShoot ( i ) ;
40820: LD_ADDR_VAR 0 5
40824: PUSH
40825: LD_VAR 0 4
40829: PPUSH
40830: CALL_OW 504
40834: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40835: LD_VAR 0 5
40839: PPUSH
40840: CALL_OW 255
40844: PUSH
40845: LD_VAR 0 1
40849: EQUAL
40850: IFFALSE 40866
// begin result := un ;
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_VAR 0 5
40861: ST_TO_ADDR
// exit ;
40862: POP
40863: POP
40864: GO 40870
// end ; end ;
40866: GO 40817
40868: POP
40869: POP
// end ;
40870: LD_VAR 0 3
40874: RET
// export function GetCargoBay ( units ) ; begin
40875: LD_INT 0
40877: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40878: LD_ADDR_VAR 0 2
40882: PUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: LD_INT 2
40890: PUSH
40891: LD_INT 34
40893: PUSH
40894: LD_INT 12
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 34
40903: PUSH
40904: LD_INT 51
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 34
40913: PUSH
40914: LD_INT 32
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 34
40923: PUSH
40924: LD_INT 89
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: PPUSH
40938: CALL_OW 72
40942: ST_TO_ADDR
// end ;
40943: LD_VAR 0 2
40947: RET
// export function Negate ( value ) ; begin
40948: LD_INT 0
40950: PPUSH
// result := not value ;
40951: LD_ADDR_VAR 0 2
40955: PUSH
40956: LD_VAR 0 1
40960: NOT
40961: ST_TO_ADDR
// end ;
40962: LD_VAR 0 2
40966: RET
// export function Inc ( value ) ; begin
40967: LD_INT 0
40969: PPUSH
// result := value + 1 ;
40970: LD_ADDR_VAR 0 2
40974: PUSH
40975: LD_VAR 0 1
40979: PUSH
40980: LD_INT 1
40982: PLUS
40983: ST_TO_ADDR
// end ;
40984: LD_VAR 0 2
40988: RET
// export function Dec ( value ) ; begin
40989: LD_INT 0
40991: PPUSH
// result := value - 1 ;
40992: LD_ADDR_VAR 0 2
40996: PUSH
40997: LD_VAR 0 1
41001: PUSH
41002: LD_INT 1
41004: MINUS
41005: ST_TO_ADDR
// end ;
41006: LD_VAR 0 2
41010: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41011: LD_INT 0
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41021: LD_VAR 0 1
41025: PPUSH
41026: LD_VAR 0 2
41030: PPUSH
41031: CALL_OW 488
41035: NOT
41036: IFTRUE 41055
41038: PUSH
41039: LD_VAR 0 3
41043: PPUSH
41044: LD_VAR 0 4
41048: PPUSH
41049: CALL_OW 488
41053: NOT
41054: OR
41055: IFFALSE 41068
// begin result := - 1 ;
41057: LD_ADDR_VAR 0 5
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: ST_TO_ADDR
// exit ;
41066: GO 41303
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41068: LD_ADDR_VAR 0 12
41072: PUSH
41073: LD_VAR 0 1
41077: PPUSH
41078: LD_VAR 0 2
41082: PPUSH
41083: LD_VAR 0 3
41087: PPUSH
41088: LD_VAR 0 4
41092: PPUSH
41093: CALL 40139 0 4
41097: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41098: LD_ADDR_VAR 0 11
41102: PUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: LD_VAR 0 2
41112: PPUSH
41113: LD_VAR 0 12
41117: PUSH
41118: LD_INT 1
41120: ARRAY
41121: PPUSH
41122: LD_VAR 0 12
41126: PUSH
41127: LD_INT 2
41129: ARRAY
41130: PPUSH
41131: CALL_OW 298
41135: ST_TO_ADDR
// distance := 9999 ;
41136: LD_ADDR_VAR 0 10
41140: PUSH
41141: LD_INT 9999
41143: ST_TO_ADDR
// for i := 0 to 5 do
41144: LD_ADDR_VAR 0 6
41148: PUSH
41149: DOUBLE
41150: LD_INT 0
41152: DEC
41153: ST_TO_ADDR
41154: LD_INT 5
41156: PUSH
41157: FOR_TO
41158: IFFALSE 41301
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41160: LD_ADDR_VAR 0 7
41164: PUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 6
41174: PPUSH
41175: LD_VAR 0 11
41179: PPUSH
41180: CALL_OW 272
41184: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41185: LD_ADDR_VAR 0 8
41189: PUSH
41190: LD_VAR 0 2
41194: PPUSH
41195: LD_VAR 0 6
41199: PPUSH
41200: LD_VAR 0 11
41204: PPUSH
41205: CALL_OW 273
41209: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41210: LD_VAR 0 7
41214: PPUSH
41215: LD_VAR 0 8
41219: PPUSH
41220: CALL_OW 488
41224: NOT
41225: IFFALSE 41229
// continue ;
41227: GO 41157
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41229: LD_ADDR_VAR 0 9
41233: PUSH
41234: LD_VAR 0 12
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: PPUSH
41243: LD_VAR 0 12
41247: PUSH
41248: LD_INT 2
41250: ARRAY
41251: PPUSH
41252: LD_VAR 0 7
41256: PPUSH
41257: LD_VAR 0 8
41261: PPUSH
41262: CALL_OW 298
41266: ST_TO_ADDR
// if tmp < distance then
41267: LD_VAR 0 9
41271: PUSH
41272: LD_VAR 0 10
41276: LESS
41277: IFFALSE 41299
// begin result := i ;
41279: LD_ADDR_VAR 0 5
41283: PUSH
41284: LD_VAR 0 6
41288: ST_TO_ADDR
// distance := tmp ;
41289: LD_ADDR_VAR 0 10
41293: PUSH
41294: LD_VAR 0 9
41298: ST_TO_ADDR
// end ; end ;
41299: GO 41157
41301: POP
41302: POP
// end ;
41303: LD_VAR 0 5
41307: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41308: LD_INT 0
41310: PPUSH
41311: PPUSH
// if not driver or not IsInUnit ( driver ) then
41312: LD_VAR 0 1
41316: NOT
41317: IFTRUE 41331
41319: PUSH
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL_OW 310
41329: NOT
41330: OR
41331: IFFALSE 41335
// exit ;
41333: GO 41425
// vehicle := IsInUnit ( driver ) ;
41335: LD_ADDR_VAR 0 3
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 310
41349: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41350: LD_VAR 0 1
41354: PPUSH
41355: LD_STRING \
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: PUSH
41385: LD_STRING E
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_VAR 0 3
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PPUSH
41421: CALL_OW 446
// end ;
41425: LD_VAR 0 2
41429: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41430: LD_INT 0
41432: PPUSH
41433: PPUSH
// if not driver or not IsInUnit ( driver ) then
41434: LD_VAR 0 1
41438: NOT
41439: IFTRUE 41453
41441: PUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 310
41451: NOT
41452: OR
41453: IFFALSE 41457
// exit ;
41455: GO 41547
// vehicle := IsInUnit ( driver ) ;
41457: LD_ADDR_VAR 0 3
41461: PUSH
41462: LD_VAR 0 1
41466: PPUSH
41467: CALL_OW 310
41471: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41472: LD_VAR 0 1
41476: PPUSH
41477: LD_STRING \
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: PUSH
41507: LD_STRING E
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_VAR 0 3
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PPUSH
41543: CALL_OW 447
// end ;
41547: LD_VAR 0 2
41551: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41552: LD_INT 0
41554: PPUSH
41555: PPUSH
41556: PPUSH
// tmp := [ ] ;
41557: LD_ADDR_VAR 0 5
41561: PUSH
41562: EMPTY
41563: ST_TO_ADDR
// for i in units do
41564: LD_ADDR_VAR 0 4
41568: PUSH
41569: LD_VAR 0 1
41573: PUSH
41574: FOR_IN
41575: IFFALSE 41613
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41577: LD_ADDR_VAR 0 5
41581: PUSH
41582: LD_VAR 0 5
41586: PPUSH
41587: LD_VAR 0 5
41591: PUSH
41592: LD_INT 1
41594: PLUS
41595: PPUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: CALL_OW 256
41605: PPUSH
41606: CALL_OW 2
41610: ST_TO_ADDR
41611: GO 41574
41613: POP
41614: POP
// if not tmp then
41615: LD_VAR 0 5
41619: NOT
41620: IFFALSE 41624
// exit ;
41622: GO 41672
// if asc then
41624: LD_VAR 0 2
41628: IFFALSE 41652
// result := SortListByListAsc ( units , tmp ) else
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_VAR 0 1
41639: PPUSH
41640: LD_VAR 0 5
41644: PPUSH
41645: CALL_OW 76
41649: ST_TO_ADDR
41650: GO 41672
// result := SortListByListDesc ( units , tmp ) ;
41652: LD_ADDR_VAR 0 3
41656: PUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: LD_VAR 0 5
41666: PPUSH
41667: CALL_OW 77
41671: ST_TO_ADDR
// end ;
41672: LD_VAR 0 3
41676: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41677: LD_INT 0
41679: PPUSH
41680: PPUSH
// task := GetTaskList ( mech ) ;
41681: LD_ADDR_VAR 0 4
41685: PUSH
41686: LD_VAR 0 1
41690: PPUSH
41691: CALL_OW 437
41695: ST_TO_ADDR
// if not task then
41696: LD_VAR 0 4
41700: NOT
41701: IFFALSE 41705
// exit ;
41703: GO 41749
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_VAR 0 4
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PUSH
41719: LD_INT 1
41721: ARRAY
41722: PUSH
41723: LD_STRING r
41725: EQUAL
41726: IFFALSE 41748
41728: PUSH
41729: LD_VAR 0 4
41733: PUSH
41734: LD_INT 1
41736: ARRAY
41737: PUSH
41738: LD_INT 4
41740: ARRAY
41741: PUSH
41742: LD_VAR 0 2
41746: EQUAL
41747: AND
41748: ST_TO_ADDR
// end ;
41749: LD_VAR 0 3
41753: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41754: LD_INT 0
41756: PPUSH
// SetDir ( unit , d ) ;
41757: LD_VAR 0 1
41761: PPUSH
41762: LD_VAR 0 4
41766: PPUSH
41767: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41771: LD_ADDR_VAR 0 6
41775: PUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: LD_VAR 0 2
41785: PPUSH
41786: LD_VAR 0 3
41790: PPUSH
41791: LD_VAR 0 5
41795: PPUSH
41796: CALL_OW 48
41800: ST_TO_ADDR
// end ;
41801: LD_VAR 0 6
41805: RET
// export function ToNaturalNumber ( number ) ; begin
41806: LD_INT 0
41808: PPUSH
// result := number div 1 ;
41809: LD_ADDR_VAR 0 2
41813: PUSH
41814: LD_VAR 0 1
41818: PUSH
41819: LD_INT 1
41821: DIV
41822: ST_TO_ADDR
// if number < 0 then
41823: LD_VAR 0 1
41827: PUSH
41828: LD_INT 0
41830: LESS
41831: IFFALSE 41841
// result := 0 ;
41833: LD_ADDR_VAR 0 2
41837: PUSH
41838: LD_INT 0
41840: ST_TO_ADDR
// end ;
41841: LD_VAR 0 2
41845: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
41846: LD_INT 0
41848: PPUSH
41849: PPUSH
41850: PPUSH
// if not buildings then
41851: LD_VAR 0 1
41855: NOT
41856: IFFALSE 41860
// exit ;
41858: GO 41975
// tmp := [ ] ;
41860: LD_ADDR_VAR 0 5
41864: PUSH
41865: EMPTY
41866: ST_TO_ADDR
// for b in buildings do
41867: LD_ADDR_VAR 0 4
41871: PUSH
41872: LD_VAR 0 1
41876: PUSH
41877: FOR_IN
41878: IFFALSE 41916
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41880: LD_ADDR_VAR 0 5
41884: PUSH
41885: LD_VAR 0 5
41889: PPUSH
41890: LD_VAR 0 5
41894: PUSH
41895: LD_INT 1
41897: PLUS
41898: PPUSH
41899: LD_VAR 0 4
41903: PPUSH
41904: CALL_OW 266
41908: PPUSH
41909: CALL_OW 1
41913: ST_TO_ADDR
41914: GO 41877
41916: POP
41917: POP
// if not tmp then
41918: LD_VAR 0 5
41922: NOT
41923: IFFALSE 41927
// exit ;
41925: GO 41975
// if asc then
41927: LD_VAR 0 2
41931: IFFALSE 41955
// result := SortListByListAsc ( buildings , tmp ) else
41933: LD_ADDR_VAR 0 3
41937: PUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: LD_VAR 0 5
41947: PPUSH
41948: CALL_OW 76
41952: ST_TO_ADDR
41953: GO 41975
// result := SortListByListDesc ( buildings , tmp ) ;
41955: LD_ADDR_VAR 0 3
41959: PUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: LD_VAR 0 5
41969: PPUSH
41970: CALL_OW 77
41974: ST_TO_ADDR
// end ;
41975: LD_VAR 0 3
41979: RET
// export function SortByClass ( units , class ) ; var un ; begin
41980: LD_INT 0
41982: PPUSH
41983: PPUSH
// if not units or not class then
41984: LD_VAR 0 1
41988: NOT
41989: IFTRUE 41998
41991: PUSH
41992: LD_VAR 0 2
41996: NOT
41997: OR
41998: IFFALSE 42002
// exit ;
42000: GO 42097
// result := [ ] ;
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: EMPTY
42008: ST_TO_ADDR
// for un in units do
42009: LD_ADDR_VAR 0 4
42013: PUSH
42014: LD_VAR 0 1
42018: PUSH
42019: FOR_IN
42020: IFFALSE 42095
// if GetClass ( un ) = class then
42022: LD_VAR 0 4
42026: PPUSH
42027: CALL_OW 257
42031: PUSH
42032: LD_VAR 0 2
42036: EQUAL
42037: IFFALSE 42064
// result := Insert ( result , 1 , un ) else
42039: LD_ADDR_VAR 0 3
42043: PUSH
42044: LD_VAR 0 3
42048: PPUSH
42049: LD_INT 1
42051: PPUSH
42052: LD_VAR 0 4
42056: PPUSH
42057: CALL_OW 2
42061: ST_TO_ADDR
42062: GO 42093
// result := Replace ( result , result + 1 , un ) ;
42064: LD_ADDR_VAR 0 3
42068: PUSH
42069: LD_VAR 0 3
42073: PPUSH
42074: LD_VAR 0 3
42078: PUSH
42079: LD_INT 1
42081: PLUS
42082: PPUSH
42083: LD_VAR 0 4
42087: PPUSH
42088: CALL_OW 1
42092: ST_TO_ADDR
42093: GO 42019
42095: POP
42096: POP
// end ;
42097: LD_VAR 0 3
42101: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42102: LD_INT 0
42104: PPUSH
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
// result := [ ] ;
42111: LD_ADDR_VAR 0 4
42115: PUSH
42116: EMPTY
42117: ST_TO_ADDR
// if x - r < 0 then
42118: LD_VAR 0 1
42122: PUSH
42123: LD_VAR 0 3
42127: MINUS
42128: PUSH
42129: LD_INT 0
42131: LESS
42132: IFFALSE 42144
// min_x := 0 else
42134: LD_ADDR_VAR 0 8
42138: PUSH
42139: LD_INT 0
42141: ST_TO_ADDR
42142: GO 42160
// min_x := x - r ;
42144: LD_ADDR_VAR 0 8
42148: PUSH
42149: LD_VAR 0 1
42153: PUSH
42154: LD_VAR 0 3
42158: MINUS
42159: ST_TO_ADDR
// if y - r < 0 then
42160: LD_VAR 0 2
42164: PUSH
42165: LD_VAR 0 3
42169: MINUS
42170: PUSH
42171: LD_INT 0
42173: LESS
42174: IFFALSE 42186
// min_y := 0 else
42176: LD_ADDR_VAR 0 7
42180: PUSH
42181: LD_INT 0
42183: ST_TO_ADDR
42184: GO 42202
// min_y := y - r ;
42186: LD_ADDR_VAR 0 7
42190: PUSH
42191: LD_VAR 0 2
42195: PUSH
42196: LD_VAR 0 3
42200: MINUS
42201: ST_TO_ADDR
// max_x := x + r ;
42202: LD_ADDR_VAR 0 9
42206: PUSH
42207: LD_VAR 0 1
42211: PUSH
42212: LD_VAR 0 3
42216: PLUS
42217: ST_TO_ADDR
// max_y := y + r ;
42218: LD_ADDR_VAR 0 10
42222: PUSH
42223: LD_VAR 0 2
42227: PUSH
42228: LD_VAR 0 3
42232: PLUS
42233: ST_TO_ADDR
// for _x = min_x to max_x do
42234: LD_ADDR_VAR 0 5
42238: PUSH
42239: DOUBLE
42240: LD_VAR 0 8
42244: DEC
42245: ST_TO_ADDR
42246: LD_VAR 0 9
42250: PUSH
42251: FOR_TO
42252: IFFALSE 42353
// for _y = min_y to max_y do
42254: LD_ADDR_VAR 0 6
42258: PUSH
42259: DOUBLE
42260: LD_VAR 0 7
42264: DEC
42265: ST_TO_ADDR
42266: LD_VAR 0 10
42270: PUSH
42271: FOR_TO
42272: IFFALSE 42349
// begin if not ValidHex ( _x , _y ) then
42274: LD_VAR 0 5
42278: PPUSH
42279: LD_VAR 0 6
42283: PPUSH
42284: CALL_OW 488
42288: NOT
42289: IFFALSE 42293
// continue ;
42291: GO 42271
// if GetResourceTypeXY ( _x , _y ) then
42293: LD_VAR 0 5
42297: PPUSH
42298: LD_VAR 0 6
42302: PPUSH
42303: CALL_OW 283
42307: IFFALSE 42347
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42309: LD_ADDR_VAR 0 4
42313: PUSH
42314: LD_VAR 0 4
42318: PPUSH
42319: LD_VAR 0 4
42323: PUSH
42324: LD_INT 1
42326: PLUS
42327: PPUSH
42328: LD_VAR 0 5
42332: PUSH
42333: LD_VAR 0 6
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PPUSH
42342: CALL_OW 1
42346: ST_TO_ADDR
// end ;
42347: GO 42271
42349: POP
42350: POP
42351: GO 42251
42353: POP
42354: POP
// end ;
42355: LD_VAR 0 4
42359: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42360: LD_INT 0
42362: PPUSH
42363: PPUSH
42364: PPUSH
42365: PPUSH
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
// if not units then
42370: LD_VAR 0 1
42374: NOT
42375: IFFALSE 42379
// exit ;
42377: GO 42911
// result := UnitFilter ( units , [ f_ok ] ) ;
42379: LD_ADDR_VAR 0 3
42383: PUSH
42384: LD_VAR 0 1
42388: PPUSH
42389: LD_INT 50
42391: PUSH
42392: EMPTY
42393: LIST
42394: PPUSH
42395: CALL_OW 72
42399: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42400: LD_ADDR_VAR 0 8
42404: PUSH
42405: LD_VAR 0 1
42409: PUSH
42410: LD_INT 1
42412: ARRAY
42413: PPUSH
42414: CALL_OW 255
42418: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42419: LD_ADDR_VAR 0 10
42423: PUSH
42424: LD_INT 29
42426: PUSH
42427: LD_INT 91
42429: PUSH
42430: LD_INT 49
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
// if not result then
42438: LD_VAR 0 3
42442: NOT
42443: IFFALSE 42447
// exit ;
42445: GO 42911
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42447: LD_ADDR_VAR 0 5
42451: PUSH
42452: LD_INT 81
42454: PUSH
42455: LD_VAR 0 8
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PPUSH
42464: CALL_OW 69
42468: ST_TO_ADDR
// for i in result do
42469: LD_ADDR_VAR 0 4
42473: PUSH
42474: LD_VAR 0 3
42478: PUSH
42479: FOR_IN
42480: IFFALSE 42909
// begin tag := GetTag ( i ) + 1 ;
42482: LD_ADDR_VAR 0 9
42486: PUSH
42487: LD_VAR 0 4
42491: PPUSH
42492: CALL_OW 110
42496: PUSH
42497: LD_INT 1
42499: PLUS
42500: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42501: LD_ADDR_VAR 0 7
42505: PUSH
42506: LD_VAR 0 4
42510: PPUSH
42511: CALL_OW 250
42515: PPUSH
42516: LD_VAR 0 4
42520: PPUSH
42521: CALL_OW 251
42525: PPUSH
42526: LD_INT 4
42528: PPUSH
42529: CALL 42102 0 3
42533: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42534: LD_VAR 0 4
42538: PPUSH
42539: CALL_OW 247
42543: PUSH
42544: LD_INT 2
42546: EQUAL
42547: IFFALSE 42559
42549: PUSH
42550: LD_VAR 0 7
42554: PUSH
42555: LD_INT 2
42557: GREATER
42558: AND
42559: IFFALSE 42579
42561: PUSH
42562: LD_VAR 0 4
42566: PPUSH
42567: CALL_OW 264
42571: PUSH
42572: LD_VAR 0 10
42576: IN
42577: NOT
42578: AND
42579: IFFALSE 42618
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42581: LD_VAR 0 4
42585: PPUSH
42586: LD_VAR 0 7
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PUSH
42595: LD_INT 1
42597: ARRAY
42598: PPUSH
42599: LD_VAR 0 7
42603: PUSH
42604: LD_INT 1
42606: ARRAY
42607: PUSH
42608: LD_INT 2
42610: ARRAY
42611: PPUSH
42612: CALL_OW 116
42616: GO 42907
// if path > tag then
42618: LD_VAR 0 2
42622: PUSH
42623: LD_VAR 0 9
42627: GREATER
42628: IFFALSE 42836
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42630: LD_ADDR_VAR 0 6
42634: PUSH
42635: LD_VAR 0 5
42639: PPUSH
42640: LD_INT 91
42642: PUSH
42643: LD_VAR 0 4
42647: PUSH
42648: LD_INT 8
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: PPUSH
42656: CALL_OW 72
42660: ST_TO_ADDR
// if nearEnemy then
42661: LD_VAR 0 6
42665: IFFALSE 42734
// begin if GetWeapon ( i ) = ru_time_lapser then
42667: LD_VAR 0 4
42671: PPUSH
42672: CALL_OW 264
42676: PUSH
42677: LD_INT 49
42679: EQUAL
42680: IFFALSE 42708
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42682: LD_VAR 0 4
42686: PPUSH
42687: LD_VAR 0 6
42691: PPUSH
42692: LD_VAR 0 4
42696: PPUSH
42697: CALL_OW 74
42701: PPUSH
42702: CALL_OW 112
42706: GO 42732
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42708: LD_VAR 0 4
42712: PPUSH
42713: LD_VAR 0 6
42717: PPUSH
42718: LD_VAR 0 4
42722: PPUSH
42723: CALL_OW 74
42727: PPUSH
42728: CALL 43992 0 2
// end else
42732: GO 42834
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42734: LD_VAR 0 4
42738: PPUSH
42739: LD_VAR 0 2
42743: PUSH
42744: LD_VAR 0 9
42748: ARRAY
42749: PUSH
42750: LD_INT 1
42752: ARRAY
42753: PPUSH
42754: LD_VAR 0 2
42758: PUSH
42759: LD_VAR 0 9
42763: ARRAY
42764: PUSH
42765: LD_INT 2
42767: ARRAY
42768: PPUSH
42769: CALL_OW 297
42773: PUSH
42774: LD_INT 6
42776: GREATER
42777: IFFALSE 42820
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42779: LD_VAR 0 4
42783: PPUSH
42784: LD_VAR 0 2
42788: PUSH
42789: LD_VAR 0 9
42793: ARRAY
42794: PUSH
42795: LD_INT 1
42797: ARRAY
42798: PPUSH
42799: LD_VAR 0 2
42803: PUSH
42804: LD_VAR 0 9
42808: ARRAY
42809: PUSH
42810: LD_INT 2
42812: ARRAY
42813: PPUSH
42814: CALL_OW 114
42818: GO 42834
// SetTag ( i , tag ) ;
42820: LD_VAR 0 4
42824: PPUSH
42825: LD_VAR 0 9
42829: PPUSH
42830: CALL_OW 109
// end else
42834: GO 42907
// if enemy then
42836: LD_VAR 0 5
42840: IFFALSE 42907
// begin if GetWeapon ( i ) = ru_time_lapser then
42842: LD_VAR 0 4
42846: PPUSH
42847: CALL_OW 264
42851: PUSH
42852: LD_INT 49
42854: EQUAL
42855: IFFALSE 42883
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42857: LD_VAR 0 4
42861: PPUSH
42862: LD_VAR 0 5
42866: PPUSH
42867: LD_VAR 0 4
42871: PPUSH
42872: CALL_OW 74
42876: PPUSH
42877: CALL_OW 112
42881: GO 42907
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42883: LD_VAR 0 4
42887: PPUSH
42888: LD_VAR 0 5
42892: PPUSH
42893: LD_VAR 0 4
42897: PPUSH
42898: CALL_OW 74
42902: PPUSH
42903: CALL 43992 0 2
// end ; end ;
42907: GO 42479
42909: POP
42910: POP
// end ;
42911: LD_VAR 0 3
42915: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42916: LD_INT 0
42918: PPUSH
42919: PPUSH
42920: PPUSH
// if not unit or IsInUnit ( unit ) then
42921: LD_VAR 0 1
42925: NOT
42926: IFTRUE 42939
42928: PUSH
42929: LD_VAR 0 1
42933: PPUSH
42934: CALL_OW 310
42938: OR
42939: IFFALSE 42943
// exit ;
42941: GO 43034
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42943: LD_ADDR_VAR 0 4
42947: PUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: CALL_OW 250
42957: PPUSH
42958: LD_VAR 0 2
42962: PPUSH
42963: LD_INT 1
42965: PPUSH
42966: CALL_OW 272
42970: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42971: LD_ADDR_VAR 0 5
42975: PUSH
42976: LD_VAR 0 1
42980: PPUSH
42981: CALL_OW 251
42985: PPUSH
42986: LD_VAR 0 2
42990: PPUSH
42991: LD_INT 1
42993: PPUSH
42994: CALL_OW 273
42998: ST_TO_ADDR
// if ValidHex ( x , y ) then
42999: LD_VAR 0 4
43003: PPUSH
43004: LD_VAR 0 5
43008: PPUSH
43009: CALL_OW 488
43013: IFFALSE 43034
// ComTurnXY ( unit , x , y ) ;
43015: LD_VAR 0 1
43019: PPUSH
43020: LD_VAR 0 4
43024: PPUSH
43025: LD_VAR 0 5
43029: PPUSH
43030: CALL_OW 118
// end ;
43034: LD_VAR 0 3
43038: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43039: LD_INT 0
43041: PPUSH
43042: PPUSH
// result := false ;
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: LD_INT 0
43050: ST_TO_ADDR
// if not units then
43051: LD_VAR 0 2
43055: NOT
43056: IFFALSE 43060
// exit ;
43058: GO 43105
// for i in units do
43060: LD_ADDR_VAR 0 4
43064: PUSH
43065: LD_VAR 0 2
43069: PUSH
43070: FOR_IN
43071: IFFALSE 43103
// if See ( side , i ) then
43073: LD_VAR 0 1
43077: PPUSH
43078: LD_VAR 0 4
43082: PPUSH
43083: CALL_OW 292
43087: IFFALSE 43101
// begin result := true ;
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 1
43096: ST_TO_ADDR
// exit ;
43097: POP
43098: POP
43099: GO 43105
// end ;
43101: GO 43070
43103: POP
43104: POP
// end ;
43105: LD_VAR 0 3
43109: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43110: LD_INT 0
43112: PPUSH
43113: PPUSH
43114: PPUSH
43115: PPUSH
// if not unit or not points then
43116: LD_VAR 0 1
43120: NOT
43121: IFTRUE 43130
43123: PUSH
43124: LD_VAR 0 2
43128: NOT
43129: OR
43130: IFFALSE 43134
// exit ;
43132: GO 43224
// dist := 99999 ;
43134: LD_ADDR_VAR 0 5
43138: PUSH
43139: LD_INT 99999
43141: ST_TO_ADDR
// for i in points do
43142: LD_ADDR_VAR 0 4
43146: PUSH
43147: LD_VAR 0 2
43151: PUSH
43152: FOR_IN
43153: IFFALSE 43222
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43155: LD_ADDR_VAR 0 6
43159: PUSH
43160: LD_VAR 0 1
43164: PPUSH
43165: LD_VAR 0 4
43169: PUSH
43170: LD_INT 1
43172: ARRAY
43173: PPUSH
43174: LD_VAR 0 4
43178: PUSH
43179: LD_INT 2
43181: ARRAY
43182: PPUSH
43183: CALL_OW 297
43187: ST_TO_ADDR
// if tmpDist < dist then
43188: LD_VAR 0 6
43192: PUSH
43193: LD_VAR 0 5
43197: LESS
43198: IFFALSE 43220
// begin result := i ;
43200: LD_ADDR_VAR 0 3
43204: PUSH
43205: LD_VAR 0 4
43209: ST_TO_ADDR
// dist := tmpDist ;
43210: LD_ADDR_VAR 0 5
43214: PUSH
43215: LD_VAR 0 6
43219: ST_TO_ADDR
// end ; end ;
43220: GO 43152
43222: POP
43223: POP
// end ;
43224: LD_VAR 0 3
43228: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43229: LD_INT 0
43231: PPUSH
// uc_side := side ;
43232: LD_ADDR_OWVAR 20
43236: PUSH
43237: LD_VAR 0 1
43241: ST_TO_ADDR
// uc_nation := 3 ;
43242: LD_ADDR_OWVAR 21
43246: PUSH
43247: LD_INT 3
43249: ST_TO_ADDR
// vc_chassis := 25 ;
43250: LD_ADDR_OWVAR 37
43254: PUSH
43255: LD_INT 25
43257: ST_TO_ADDR
// vc_engine := engine_siberite ;
43258: LD_ADDR_OWVAR 39
43262: PUSH
43263: LD_INT 3
43265: ST_TO_ADDR
// vc_control := control_computer ;
43266: LD_ADDR_OWVAR 38
43270: PUSH
43271: LD_INT 3
43273: ST_TO_ADDR
// vc_weapon := 59 ;
43274: LD_ADDR_OWVAR 40
43278: PUSH
43279: LD_INT 59
43281: ST_TO_ADDR
// result := CreateVehicle ;
43282: LD_ADDR_VAR 0 5
43286: PUSH
43287: CALL_OW 45
43291: ST_TO_ADDR
// SetDir ( result , d ) ;
43292: LD_VAR 0 5
43296: PPUSH
43297: LD_VAR 0 4
43301: PPUSH
43302: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43306: LD_VAR 0 5
43310: PPUSH
43311: LD_VAR 0 2
43315: PPUSH
43316: LD_VAR 0 3
43320: PPUSH
43321: LD_INT 0
43323: PPUSH
43324: CALL_OW 48
// end ;
43328: LD_VAR 0 5
43332: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43333: LD_INT 0
43335: PPUSH
43336: PPUSH
43337: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43338: LD_ADDR_VAR 0 2
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43361: LD_VAR 0 1
43365: NOT
43366: IFTRUE 43399
43368: PUSH
43369: LD_VAR 0 1
43373: PPUSH
43374: CALL_OW 264
43378: PUSH
43379: LD_INT 12
43381: PUSH
43382: LD_INT 51
43384: PUSH
43385: LD_INT 32
43387: PUSH
43388: LD_INT 89
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: IN
43397: NOT
43398: OR
43399: IFFALSE 43403
// exit ;
43401: GO 43501
// for i := 1 to 3 do
43403: LD_ADDR_VAR 0 3
43407: PUSH
43408: DOUBLE
43409: LD_INT 1
43411: DEC
43412: ST_TO_ADDR
43413: LD_INT 3
43415: PUSH
43416: FOR_TO
43417: IFFALSE 43499
// begin tmp := GetCargo ( cargo , i ) ;
43419: LD_ADDR_VAR 0 4
43423: PUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: LD_VAR 0 3
43433: PPUSH
43434: CALL_OW 289
43438: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43439: LD_ADDR_VAR 0 2
43443: PUSH
43444: LD_VAR 0 2
43448: PPUSH
43449: LD_VAR 0 3
43453: PPUSH
43454: LD_VAR 0 4
43458: PPUSH
43459: CALL_OW 1
43463: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43464: LD_ADDR_VAR 0 2
43468: PUSH
43469: LD_VAR 0 2
43473: PPUSH
43474: LD_INT 4
43476: PPUSH
43477: LD_VAR 0 2
43481: PUSH
43482: LD_INT 4
43484: ARRAY
43485: PUSH
43486: LD_VAR 0 4
43490: PLUS
43491: PPUSH
43492: CALL_OW 1
43496: ST_TO_ADDR
// end ;
43497: GO 43416
43499: POP
43500: POP
// end ;
43501: LD_VAR 0 2
43505: RET
// export function Length ( array ) ; begin
43506: LD_INT 0
43508: PPUSH
// result := array + 0 ;
43509: LD_ADDR_VAR 0 2
43513: PUSH
43514: LD_VAR 0 1
43518: PUSH
43519: LD_INT 0
43521: PLUS
43522: ST_TO_ADDR
// end ;
43523: LD_VAR 0 2
43527: RET
// export function PrepareArray ( array ) ; begin
43528: LD_INT 0
43530: PPUSH
// result := array diff 0 ;
43531: LD_ADDR_VAR 0 2
43535: PUSH
43536: LD_VAR 0 1
43540: PUSH
43541: LD_INT 0
43543: DIFF
43544: ST_TO_ADDR
// if not result [ 1 ] then
43545: LD_VAR 0 2
43549: PUSH
43550: LD_INT 1
43552: ARRAY
43553: NOT
43554: IFFALSE 43574
// result := Delete ( result , 1 ) ;
43556: LD_ADDR_VAR 0 2
43560: PUSH
43561: LD_VAR 0 2
43565: PPUSH
43566: LD_INT 1
43568: PPUSH
43569: CALL_OW 3
43573: ST_TO_ADDR
// end ;
43574: LD_VAR 0 2
43578: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43579: LD_INT 0
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
// sibRocketRange := 25 ;
43585: LD_ADDR_VAR 0 6
43589: PUSH
43590: LD_INT 25
43592: ST_TO_ADDR
// result := false ;
43593: LD_ADDR_VAR 0 4
43597: PUSH
43598: LD_INT 0
43600: ST_TO_ADDR
// for i := 0 to 5 do
43601: LD_ADDR_VAR 0 5
43605: PUSH
43606: DOUBLE
43607: LD_INT 0
43609: DEC
43610: ST_TO_ADDR
43611: LD_INT 5
43613: PUSH
43614: FOR_TO
43615: IFFALSE 43682
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43617: LD_VAR 0 1
43621: PPUSH
43622: LD_VAR 0 5
43626: PPUSH
43627: LD_VAR 0 6
43631: PPUSH
43632: CALL_OW 272
43636: PPUSH
43637: LD_VAR 0 2
43641: PPUSH
43642: LD_VAR 0 5
43646: PPUSH
43647: LD_VAR 0 6
43651: PPUSH
43652: CALL_OW 273
43656: PPUSH
43657: LD_VAR 0 3
43661: PPUSH
43662: CALL_OW 309
43666: IFFALSE 43680
// begin result := true ;
43668: LD_ADDR_VAR 0 4
43672: PUSH
43673: LD_INT 1
43675: ST_TO_ADDR
// exit ;
43676: POP
43677: POP
43678: GO 43684
// end ;
43680: GO 43614
43682: POP
43683: POP
// end ;
43684: LD_VAR 0 4
43688: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43689: LD_INT 0
43691: PPUSH
43692: PPUSH
43693: PPUSH
// if btype = b_depot then
43694: LD_VAR 0 2
43698: PUSH
43699: LD_INT 0
43701: EQUAL
43702: IFFALSE 43714
// begin result := true ;
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_INT 1
43711: ST_TO_ADDR
// exit ;
43712: GO 43834
// end ; pom := GetBase ( depot ) ;
43714: LD_ADDR_VAR 0 4
43718: PUSH
43719: LD_VAR 0 1
43723: PPUSH
43724: CALL_OW 274
43728: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43729: LD_ADDR_VAR 0 5
43733: PUSH
43734: LD_VAR 0 2
43738: PPUSH
43739: LD_VAR 0 1
43743: PPUSH
43744: CALL_OW 248
43748: PPUSH
43749: CALL_OW 450
43753: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43754: LD_ADDR_VAR 0 3
43758: PUSH
43759: LD_VAR 0 4
43763: PPUSH
43764: LD_INT 1
43766: PPUSH
43767: CALL_OW 275
43771: PUSH
43772: LD_VAR 0 5
43776: PUSH
43777: LD_INT 1
43779: ARRAY
43780: GREATEREQUAL
43781: IFFALSE 43807
43783: PUSH
43784: LD_VAR 0 4
43788: PPUSH
43789: LD_INT 2
43791: PPUSH
43792: CALL_OW 275
43796: PUSH
43797: LD_VAR 0 5
43801: PUSH
43802: LD_INT 2
43804: ARRAY
43805: GREATEREQUAL
43806: AND
43807: IFFALSE 43833
43809: PUSH
43810: LD_VAR 0 4
43814: PPUSH
43815: LD_INT 3
43817: PPUSH
43818: CALL_OW 275
43822: PUSH
43823: LD_VAR 0 5
43827: PUSH
43828: LD_INT 3
43830: ARRAY
43831: GREATEREQUAL
43832: AND
43833: ST_TO_ADDR
// end ;
43834: LD_VAR 0 3
43838: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43839: LD_INT 0
43841: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43842: LD_VAR 0 1
43846: PPUSH
43847: LD_VAR 0 2
43851: PPUSH
43852: LD_INT 0
43854: PPUSH
43855: LD_INT 0
43857: PPUSH
43858: LD_INT 1
43860: PPUSH
43861: LD_INT 0
43863: PPUSH
43864: CALL_OW 587
// end ;
43868: LD_VAR 0 3
43872: RET
// export function CenterOnNow ( unit ) ; begin
43873: LD_INT 0
43875: PPUSH
// result := IsInUnit ( unit ) ;
43876: LD_ADDR_VAR 0 2
43880: PUSH
43881: LD_VAR 0 1
43885: PPUSH
43886: CALL_OW 310
43890: ST_TO_ADDR
// if not result then
43891: LD_VAR 0 2
43895: NOT
43896: IFFALSE 43908
// result := unit ;
43898: LD_ADDR_VAR 0 2
43902: PUSH
43903: LD_VAR 0 1
43907: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43908: LD_VAR 0 1
43912: PPUSH
43913: CALL_OW 87
// end ;
43917: LD_VAR 0 2
43921: RET
// export function ComMoveHex ( unit , hex ) ; begin
43922: LD_INT 0
43924: PPUSH
// if not hex then
43925: LD_VAR 0 2
43929: NOT
43930: IFFALSE 43934
// exit ;
43932: GO 43987
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43934: LD_VAR 0 2
43938: PUSH
43939: LD_INT 1
43941: ARRAY
43942: PPUSH
43943: LD_VAR 0 2
43947: PUSH
43948: LD_INT 2
43950: ARRAY
43951: PPUSH
43952: CALL_OW 428
43956: IFFALSE 43960
// exit ;
43958: GO 43987
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43960: LD_VAR 0 1
43964: PPUSH
43965: LD_VAR 0 2
43969: PUSH
43970: LD_INT 1
43972: ARRAY
43973: PPUSH
43974: LD_VAR 0 2
43978: PUSH
43979: LD_INT 2
43981: ARRAY
43982: PPUSH
43983: CALL_OW 111
// end ;
43987: LD_VAR 0 3
43991: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43992: LD_INT 0
43994: PPUSH
43995: PPUSH
43996: PPUSH
// if not unit or not enemy then
43997: LD_VAR 0 1
44001: NOT
44002: IFTRUE 44011
44004: PUSH
44005: LD_VAR 0 2
44009: NOT
44010: OR
44011: IFFALSE 44015
// exit ;
44013: GO 44141
// x := GetX ( enemy ) ;
44015: LD_ADDR_VAR 0 4
44019: PUSH
44020: LD_VAR 0 2
44024: PPUSH
44025: CALL_OW 250
44029: ST_TO_ADDR
// y := GetY ( enemy ) ;
44030: LD_ADDR_VAR 0 5
44034: PUSH
44035: LD_VAR 0 2
44039: PPUSH
44040: CALL_OW 251
44044: ST_TO_ADDR
// if ValidHex ( x , y ) then
44045: LD_VAR 0 4
44049: PPUSH
44050: LD_VAR 0 5
44054: PPUSH
44055: CALL_OW 488
44059: IFFALSE 44141
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44061: LD_VAR 0 2
44065: PPUSH
44066: CALL_OW 247
44070: PUSH
44071: LD_INT 3
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: IN
44081: IFTRUE 44104
44083: PUSH
44084: LD_VAR 0 1
44088: PPUSH
44089: CALL_OW 255
44093: PPUSH
44094: LD_VAR 0 2
44098: PPUSH
44099: CALL_OW 292
44103: OR
44104: IFFALSE 44122
// ComAttackUnit ( unit , enemy ) else
44106: LD_VAR 0 1
44110: PPUSH
44111: LD_VAR 0 2
44115: PPUSH
44116: CALL_OW 115
44120: GO 44141
// ComAgressiveMove ( unit , x , y ) ;
44122: LD_VAR 0 1
44126: PPUSH
44127: LD_VAR 0 4
44131: PPUSH
44132: LD_VAR 0 5
44136: PPUSH
44137: CALL_OW 114
// end ;
44141: LD_VAR 0 3
44145: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44146: LD_INT 0
44148: PPUSH
44149: PPUSH
44150: PPUSH
// list := AreaToList ( area , 0 ) ;
44151: LD_ADDR_VAR 0 5
44155: PUSH
44156: LD_VAR 0 1
44160: PPUSH
44161: LD_INT 0
44163: PPUSH
44164: CALL_OW 517
44168: ST_TO_ADDR
// if not list then
44169: LD_VAR 0 5
44173: NOT
44174: IFFALSE 44178
// exit ;
44176: GO 44308
// if all then
44178: LD_VAR 0 2
44182: IFFALSE 44270
// begin for i := 1 to list [ 1 ] do
44184: LD_ADDR_VAR 0 4
44188: PUSH
44189: DOUBLE
44190: LD_INT 1
44192: DEC
44193: ST_TO_ADDR
44194: LD_VAR 0 5
44198: PUSH
44199: LD_INT 1
44201: ARRAY
44202: PUSH
44203: FOR_TO
44204: IFFALSE 44266
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44206: LD_ADDR_VAR 0 3
44210: PUSH
44211: LD_VAR 0 3
44215: PPUSH
44216: LD_VAR 0 3
44220: PUSH
44221: LD_INT 1
44223: PLUS
44224: PPUSH
44225: LD_VAR 0 5
44229: PUSH
44230: LD_INT 1
44232: ARRAY
44233: PUSH
44234: LD_VAR 0 4
44238: ARRAY
44239: PUSH
44240: LD_VAR 0 5
44244: PUSH
44245: LD_INT 2
44247: ARRAY
44248: PUSH
44249: LD_VAR 0 4
44253: ARRAY
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PPUSH
44259: CALL_OW 1
44263: ST_TO_ADDR
44264: GO 44203
44266: POP
44267: POP
// exit ;
44268: GO 44308
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44270: LD_ADDR_VAR 0 3
44274: PUSH
44275: LD_VAR 0 5
44279: PUSH
44280: LD_INT 1
44282: ARRAY
44283: PUSH
44284: LD_INT 1
44286: ARRAY
44287: PUSH
44288: LD_VAR 0 5
44292: PUSH
44293: LD_INT 2
44295: ARRAY
44296: PUSH
44297: LD_INT 1
44299: ARRAY
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: ST_TO_ADDR
// end ;
44308: LD_VAR 0 3
44312: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44313: LD_INT 0
44315: PPUSH
44316: PPUSH
// list := AreaToList ( area , 0 ) ;
44317: LD_ADDR_VAR 0 4
44321: PUSH
44322: LD_VAR 0 1
44326: PPUSH
44327: LD_INT 0
44329: PPUSH
44330: CALL_OW 517
44334: ST_TO_ADDR
// if not list then
44335: LD_VAR 0 4
44339: NOT
44340: IFFALSE 44344
// exit ;
44342: GO 44385
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44344: LD_ADDR_VAR 0 3
44348: PUSH
44349: LD_VAR 0 4
44353: PUSH
44354: LD_INT 1
44356: ARRAY
44357: PUSH
44358: LD_INT 1
44360: ARRAY
44361: PUSH
44362: LD_VAR 0 4
44366: PUSH
44367: LD_INT 2
44369: ARRAY
44370: PUSH
44371: LD_INT 1
44373: ARRAY
44374: PUSH
44375: LD_VAR 0 2
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// end ;
44385: LD_VAR 0 3
44389: RET
// export function First ( array ) ; begin
44390: LD_INT 0
44392: PPUSH
// if not array then
44393: LD_VAR 0 1
44397: NOT
44398: IFFALSE 44402
// exit ;
44400: GO 44416
// result := array [ 1 ] ;
44402: LD_ADDR_VAR 0 2
44406: PUSH
44407: LD_VAR 0 1
44411: PUSH
44412: LD_INT 1
44414: ARRAY
44415: ST_TO_ADDR
// end ;
44416: LD_VAR 0 2
44420: RET
// export function Last ( array ) ; begin
44421: LD_INT 0
44423: PPUSH
// if not array then
44424: LD_VAR 0 1
44428: NOT
44429: IFFALSE 44433
// exit ;
44431: GO 44449
// result := array [ array ] ;
44433: LD_ADDR_VAR 0 2
44437: PUSH
44438: LD_VAR 0 1
44442: PUSH
44443: LD_VAR 0 1
44447: ARRAY
44448: ST_TO_ADDR
// end ;
44449: LD_VAR 0 2
44453: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44454: LD_INT 0
44456: PPUSH
44457: PPUSH
// result := [ ] ;
44458: LD_ADDR_VAR 0 5
44462: PUSH
44463: EMPTY
44464: ST_TO_ADDR
// if not array then
44465: LD_VAR 0 1
44469: NOT
44470: IFFALSE 44474
// exit ;
44472: GO 44586
// for i := 1 to array do
44474: LD_ADDR_VAR 0 6
44478: PUSH
44479: DOUBLE
44480: LD_INT 1
44482: DEC
44483: ST_TO_ADDR
44484: LD_VAR 0 1
44488: PUSH
44489: FOR_TO
44490: IFFALSE 44584
// if array [ i ] [ index ] = value then
44492: LD_VAR 0 1
44496: PUSH
44497: LD_VAR 0 6
44501: ARRAY
44502: PUSH
44503: LD_VAR 0 2
44507: ARRAY
44508: PUSH
44509: LD_VAR 0 3
44513: EQUAL
44514: IFFALSE 44582
// begin if indexColumn then
44516: LD_VAR 0 4
44520: IFFALSE 44556
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44522: LD_ADDR_VAR 0 5
44526: PUSH
44527: LD_VAR 0 5
44531: PPUSH
44532: LD_VAR 0 1
44536: PUSH
44537: LD_VAR 0 6
44541: ARRAY
44542: PUSH
44543: LD_VAR 0 4
44547: ARRAY
44548: PPUSH
44549: CALL 39594 0 2
44553: ST_TO_ADDR
44554: GO 44582
// result := Join ( result , array [ i ] ) ;
44556: LD_ADDR_VAR 0 5
44560: PUSH
44561: LD_VAR 0 5
44565: PPUSH
44566: LD_VAR 0 1
44570: PUSH
44571: LD_VAR 0 6
44575: ARRAY
44576: PPUSH
44577: CALL 39594 0 2
44581: ST_TO_ADDR
// end ;
44582: GO 44489
44584: POP
44585: POP
// end ;
44586: LD_VAR 0 5
44590: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44591: LD_INT 0
44593: PPUSH
// if not vehicles or not parkingPoint then
44594: LD_VAR 0 1
44598: NOT
44599: IFTRUE 44608
44601: PUSH
44602: LD_VAR 0 2
44606: NOT
44607: OR
44608: IFFALSE 44612
// exit ;
44610: GO 44710
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44612: LD_ADDR_VAR 0 1
44616: PUSH
44617: LD_VAR 0 1
44621: PPUSH
44622: LD_INT 50
44624: PUSH
44625: EMPTY
44626: LIST
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: LD_INT 92
44633: PUSH
44634: LD_VAR 0 2
44638: PUSH
44639: LD_INT 1
44641: ARRAY
44642: PUSH
44643: LD_VAR 0 2
44647: PUSH
44648: LD_INT 2
44650: ARRAY
44651: PUSH
44652: LD_INT 8
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PPUSH
44669: CALL_OW 72
44673: ST_TO_ADDR
// if not vehicles then
44674: LD_VAR 0 1
44678: NOT
44679: IFFALSE 44683
// exit ;
44681: GO 44710
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44683: LD_VAR 0 1
44687: PPUSH
44688: LD_VAR 0 2
44692: PUSH
44693: LD_INT 1
44695: ARRAY
44696: PPUSH
44697: LD_VAR 0 2
44701: PUSH
44702: LD_INT 2
44704: ARRAY
44705: PPUSH
44706: CALL_OW 111
// end ;
44710: LD_VAR 0 3
44714: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44715: LD_INT 0
44717: PPUSH
44718: PPUSH
44719: PPUSH
// if not side or not area then
44720: LD_VAR 0 1
44724: NOT
44725: IFTRUE 44734
44727: PUSH
44728: LD_VAR 0 2
44732: NOT
44733: OR
44734: IFFALSE 44738
// exit ;
44736: GO 44857
// tmp := AreaToList ( area , 0 ) ;
44738: LD_ADDR_VAR 0 5
44742: PUSH
44743: LD_VAR 0 2
44747: PPUSH
44748: LD_INT 0
44750: PPUSH
44751: CALL_OW 517
44755: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44756: LD_ADDR_VAR 0 4
44760: PUSH
44761: DOUBLE
44762: LD_INT 1
44764: DEC
44765: ST_TO_ADDR
44766: LD_VAR 0 5
44770: PUSH
44771: LD_INT 1
44773: ARRAY
44774: PUSH
44775: FOR_TO
44776: IFFALSE 44855
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44778: LD_VAR 0 5
44782: PUSH
44783: LD_INT 1
44785: ARRAY
44786: PUSH
44787: LD_VAR 0 4
44791: ARRAY
44792: PPUSH
44793: LD_VAR 0 5
44797: PUSH
44798: LD_INT 2
44800: ARRAY
44801: PUSH
44802: LD_VAR 0 4
44806: ARRAY
44807: PPUSH
44808: CALL_OW 351
44812: IFFALSE 44853
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44814: LD_VAR 0 5
44818: PUSH
44819: LD_INT 1
44821: ARRAY
44822: PUSH
44823: LD_VAR 0 4
44827: ARRAY
44828: PPUSH
44829: LD_VAR 0 5
44833: PUSH
44834: LD_INT 2
44836: ARRAY
44837: PUSH
44838: LD_VAR 0 4
44842: ARRAY
44843: PPUSH
44844: LD_VAR 0 1
44848: PPUSH
44849: CALL_OW 244
// end ;
44853: GO 44775
44855: POP
44856: POP
// end ;
44857: LD_VAR 0 3
44861: RET
// export function UniqueArray ( array ) ; var i ; begin
44862: LD_INT 0
44864: PPUSH
44865: PPUSH
// result := [ ] ;
44866: LD_ADDR_VAR 0 2
44870: PUSH
44871: EMPTY
44872: ST_TO_ADDR
// if not array then
44873: LD_VAR 0 1
44877: NOT
44878: IFFALSE 44882
// exit ;
44880: GO 44943
// for i := 1 to array do
44882: LD_ADDR_VAR 0 3
44886: PUSH
44887: DOUBLE
44888: LD_INT 1
44890: DEC
44891: ST_TO_ADDR
44892: LD_VAR 0 1
44896: PUSH
44897: FOR_TO
44898: IFFALSE 44941
// if not array [ i ] in result then
44900: LD_VAR 0 1
44904: PUSH
44905: LD_VAR 0 3
44909: ARRAY
44910: PUSH
44911: LD_VAR 0 2
44915: IN
44916: NOT
44917: IFFALSE 44939
// result := Join ( result , i ) ;
44919: LD_ADDR_VAR 0 2
44923: PUSH
44924: LD_VAR 0 2
44928: PPUSH
44929: LD_VAR 0 3
44933: PPUSH
44934: CALL 39594 0 2
44938: ST_TO_ADDR
44939: GO 44897
44941: POP
44942: POP
// end ;
44943: LD_VAR 0 2
44947: RET
