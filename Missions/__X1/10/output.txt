// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 9 0 0
// end ;
   8: END
// export debug , prefix ; function Init ; begin
   9: LD_INT 0
  11: PPUSH
// debug := true ;
  12: LD_ADDR_EXP 1
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// prefix := 09_ ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_STRING 09_
  27: ST_TO_ADDR
// end ; end_of_file
  28: LD_VAR 0 1
  32: RET
// export Heike , Omar , Kaia ; export function PrepareArabian ; begin
  33: LD_INT 0
  35: PPUSH
// uc_side := 2 ;
  36: LD_ADDR_OWVAR 20
  40: PUSH
  41: LD_INT 2
  43: ST_TO_ADDR
// uc_nation := nation_arabian ;
  44: LD_ADDR_OWVAR 21
  48: PUSH
  49: LD_INT 2
  51: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING Heike
  59: PPUSH
  60: LD_EXP 1
  64: NOT
  65: PPUSH
  66: LD_EXP 2
  70: PPUSH
  71: CALL 126 0 3
  75: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_STRING Kaia
  83: PPUSH
  84: LD_EXP 1
  88: NOT
  89: PPUSH
  90: LD_EXP 2
  94: PPUSH
  95: CALL 126 0 3
  99: ST_TO_ADDR
// uc_side := 5 ;
 100: LD_ADDR_OWVAR 20
 104: PUSH
 105: LD_INT 5
 107: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_STRING Omar
 115: PPUSH
 116: CALL_OW 25
 120: ST_TO_ADDR
// end ; end_of_file
 121: LD_VAR 0 1
 125: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 126: LD_INT 0
 128: PPUSH
 129: PPUSH
// if exist_mode then
 130: LD_VAR 0 2
 134: IFFALSE 159
// unit := CreateCharacter ( prefix & ident ) else
 136: LD_ADDR_VAR 0 5
 140: PUSH
 141: LD_VAR 0 3
 145: PUSH
 146: LD_VAR 0 1
 150: STR
 151: PPUSH
 152: CALL_OW 34
 156: ST_TO_ADDR
 157: GO 174
// unit := NewCharacter ( ident ) ;
 159: LD_ADDR_VAR 0 5
 163: PUSH
 164: LD_VAR 0 1
 168: PPUSH
 169: CALL_OW 25
 173: ST_TO_ADDR
// result := unit ;
 174: LD_ADDR_VAR 0 4
 178: PUSH
 179: LD_VAR 0 5
 183: ST_TO_ADDR
// end ;
 184: LD_VAR 0 4
 188: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 189: LD_INT 0
 191: PPUSH
 192: PPUSH
// if not side or not nation then
 193: LD_VAR 0 1
 197: NOT
 198: PUSH
 199: LD_VAR 0 2
 203: NOT
 204: OR
 205: IFFALSE 209
// exit ;
 207: GO 977
// case nation of nation_american :
 209: LD_VAR 0 2
 213: PUSH
 214: LD_INT 1
 216: DOUBLE
 217: EQUAL
 218: IFTRUE 222
 220: GO 436
 222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 223: LD_ADDR_VAR 0 4
 227: PUSH
 228: LD_INT 35
 230: PUSH
 231: LD_INT 45
 233: PUSH
 234: LD_INT 46
 236: PUSH
 237: LD_INT 47
 239: PUSH
 240: LD_INT 82
 242: PUSH
 243: LD_INT 83
 245: PUSH
 246: LD_INT 84
 248: PUSH
 249: LD_INT 85
 251: PUSH
 252: LD_INT 86
 254: PUSH
 255: LD_INT 1
 257: PUSH
 258: LD_INT 2
 260: PUSH
 261: LD_INT 6
 263: PUSH
 264: LD_INT 15
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 7
 272: PUSH
 273: LD_INT 12
 275: PUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 10
 281: PUSH
 282: LD_INT 14
 284: PUSH
 285: LD_INT 20
 287: PUSH
 288: LD_INT 21
 290: PUSH
 291: LD_INT 22
 293: PUSH
 294: LD_INT 25
 296: PUSH
 297: LD_INT 32
 299: PUSH
 300: LD_INT 27
 302: PUSH
 303: LD_INT 36
 305: PUSH
 306: LD_INT 69
 308: PUSH
 309: LD_INT 39
 311: PUSH
 312: LD_INT 34
 314: PUSH
 315: LD_INT 40
 317: PUSH
 318: LD_INT 48
 320: PUSH
 321: LD_INT 49
 323: PUSH
 324: LD_INT 50
 326: PUSH
 327: LD_INT 51
 329: PUSH
 330: LD_INT 52
 332: PUSH
 333: LD_INT 53
 335: PUSH
 336: LD_INT 54
 338: PUSH
 339: LD_INT 55
 341: PUSH
 342: LD_INT 56
 344: PUSH
 345: LD_INT 57
 347: PUSH
 348: LD_INT 58
 350: PUSH
 351: LD_INT 59
 353: PUSH
 354: LD_INT 60
 356: PUSH
 357: LD_INT 61
 359: PUSH
 360: LD_INT 62
 362: PUSH
 363: LD_INT 80
 365: PUSH
 366: LD_INT 82
 368: PUSH
 369: LD_INT 83
 371: PUSH
 372: LD_INT 84
 374: PUSH
 375: LD_INT 85
 377: PUSH
 378: LD_INT 86
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: ST_TO_ADDR
 434: GO 901
 436: LD_INT 2
 438: DOUBLE
 439: EQUAL
 440: IFTRUE 444
 442: GO 670
 444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_INT 35
 452: PUSH
 453: LD_INT 45
 455: PUSH
 456: LD_INT 46
 458: PUSH
 459: LD_INT 47
 461: PUSH
 462: LD_INT 82
 464: PUSH
 465: LD_INT 83
 467: PUSH
 468: LD_INT 84
 470: PUSH
 471: LD_INT 85
 473: PUSH
 474: LD_INT 87
 476: PUSH
 477: LD_INT 70
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: LD_INT 11
 485: PUSH
 486: LD_INT 3
 488: PUSH
 489: LD_INT 4
 491: PUSH
 492: LD_INT 5
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 15
 500: PUSH
 501: LD_INT 18
 503: PUSH
 504: LD_INT 7
 506: PUSH
 507: LD_INT 17
 509: PUSH
 510: LD_INT 8
 512: PUSH
 513: LD_INT 20
 515: PUSH
 516: LD_INT 21
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 72
 524: PUSH
 525: LD_INT 26
 527: PUSH
 528: LD_INT 69
 530: PUSH
 531: LD_INT 39
 533: PUSH
 534: LD_INT 40
 536: PUSH
 537: LD_INT 41
 539: PUSH
 540: LD_INT 42
 542: PUSH
 543: LD_INT 43
 545: PUSH
 546: LD_INT 48
 548: PUSH
 549: LD_INT 49
 551: PUSH
 552: LD_INT 50
 554: PUSH
 555: LD_INT 51
 557: PUSH
 558: LD_INT 52
 560: PUSH
 561: LD_INT 53
 563: PUSH
 564: LD_INT 54
 566: PUSH
 567: LD_INT 55
 569: PUSH
 570: LD_INT 56
 572: PUSH
 573: LD_INT 60
 575: PUSH
 576: LD_INT 61
 578: PUSH
 579: LD_INT 62
 581: PUSH
 582: LD_INT 66
 584: PUSH
 585: LD_INT 67
 587: PUSH
 588: LD_INT 68
 590: PUSH
 591: LD_INT 81
 593: PUSH
 594: LD_INT 82
 596: PUSH
 597: LD_INT 83
 599: PUSH
 600: LD_INT 84
 602: PUSH
 603: LD_INT 85
 605: PUSH
 606: LD_INT 87
 608: PUSH
 609: LD_INT 88
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: ST_TO_ADDR
 668: GO 901
 670: LD_INT 3
 672: DOUBLE
 673: EQUAL
 674: IFTRUE 678
 676: GO 900
 678: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 679: LD_ADDR_VAR 0 4
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 47
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 82
 698: PUSH
 699: LD_INT 83
 701: PUSH
 702: LD_INT 84
 704: PUSH
 705: LD_INT 85
 707: PUSH
 708: LD_INT 86
 710: PUSH
 711: LD_INT 11
 713: PUSH
 714: LD_INT 9
 716: PUSH
 717: LD_INT 20
 719: PUSH
 720: LD_INT 19
 722: PUSH
 723: LD_INT 21
 725: PUSH
 726: LD_INT 24
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 25
 734: PUSH
 735: LD_INT 28
 737: PUSH
 738: LD_INT 29
 740: PUSH
 741: LD_INT 30
 743: PUSH
 744: LD_INT 31
 746: PUSH
 747: LD_INT 37
 749: PUSH
 750: LD_INT 38
 752: PUSH
 753: LD_INT 32
 755: PUSH
 756: LD_INT 27
 758: PUSH
 759: LD_INT 33
 761: PUSH
 762: LD_INT 69
 764: PUSH
 765: LD_INT 39
 767: PUSH
 768: LD_INT 34
 770: PUSH
 771: LD_INT 40
 773: PUSH
 774: LD_INT 71
 776: PUSH
 777: LD_INT 23
 779: PUSH
 780: LD_INT 44
 782: PUSH
 783: LD_INT 48
 785: PUSH
 786: LD_INT 49
 788: PUSH
 789: LD_INT 50
 791: PUSH
 792: LD_INT 51
 794: PUSH
 795: LD_INT 52
 797: PUSH
 798: LD_INT 53
 800: PUSH
 801: LD_INT 54
 803: PUSH
 804: LD_INT 55
 806: PUSH
 807: LD_INT 56
 809: PUSH
 810: LD_INT 57
 812: PUSH
 813: LD_INT 58
 815: PUSH
 816: LD_INT 59
 818: PUSH
 819: LD_INT 63
 821: PUSH
 822: LD_INT 64
 824: PUSH
 825: LD_INT 65
 827: PUSH
 828: LD_INT 82
 830: PUSH
 831: LD_INT 83
 833: PUSH
 834: LD_INT 84
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: LD_INT 86
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: ST_TO_ADDR
 898: GO 901
 900: POP
// if state > - 1 and state < 3 then
 901: LD_VAR 0 3
 905: PUSH
 906: LD_INT 1
 908: NEG
 909: GREATER
 910: PUSH
 911: LD_VAR 0 3
 915: PUSH
 916: LD_INT 3
 918: LESS
 919: AND
 920: IFFALSE 977
// for i in result do
 922: LD_ADDR_VAR 0 5
 926: PUSH
 927: LD_VAR 0 4
 931: PUSH
 932: FOR_IN
 933: IFFALSE 975
// if GetTech ( i , side ) <> state then
 935: LD_VAR 0 5
 939: PPUSH
 940: LD_VAR 0 1
 944: PPUSH
 945: CALL_OW 321
 949: PUSH
 950: LD_VAR 0 3
 954: NONEQUAL
 955: IFFALSE 973
// result := result diff i ;
 957: LD_ADDR_VAR 0 4
 961: PUSH
 962: LD_VAR 0 4
 966: PUSH
 967: LD_VAR 0 5
 971: DIFF
 972: ST_TO_ADDR
 973: GO 932
 975: POP
 976: POP
// end ;
 977: LD_VAR 0 4
 981: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
 982: LD_INT 0
 984: PPUSH
 985: PPUSH
 986: PPUSH
// result := true ;
 987: LD_ADDR_VAR 0 3
 991: PUSH
 992: LD_INT 1
 994: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL_OW 480
1009: ST_TO_ADDR
// if not tmp then
1010: LD_VAR 0 5
1014: NOT
1015: IFFALSE 1019
// exit ;
1017: GO 1068
// for i in tmp do
1019: LD_ADDR_VAR 0 4
1023: PUSH
1024: LD_VAR 0 5
1028: PUSH
1029: FOR_IN
1030: IFFALSE 1066
// if GetTech ( i , side ) <> state_researched then
1032: LD_VAR 0 4
1036: PPUSH
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 321
1046: PUSH
1047: LD_INT 2
1049: NONEQUAL
1050: IFFALSE 1064
// begin result := false ;
1052: LD_ADDR_VAR 0 3
1056: PUSH
1057: LD_INT 0
1059: ST_TO_ADDR
// exit ;
1060: POP
1061: POP
1062: GO 1068
// end ;
1064: GO 1029
1066: POP
1067: POP
// end ;
1068: LD_VAR 0 3
1072: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1073: LD_INT 0
1075: PPUSH
1076: PPUSH
1077: PPUSH
1078: PPUSH
1079: PPUSH
1080: PPUSH
1081: PPUSH
1082: PPUSH
1083: PPUSH
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1088: LD_VAR 0 1
1092: NOT
1093: PUSH
1094: LD_VAR 0 1
1098: PPUSH
1099: CALL_OW 257
1103: PUSH
1104: LD_INT 9
1106: NONEQUAL
1107: OR
1108: IFFALSE 1112
// exit ;
1110: GO 1685
// side := GetSide ( unit ) ;
1112: LD_ADDR_VAR 0 9
1116: PUSH
1117: LD_VAR 0 1
1121: PPUSH
1122: CALL_OW 255
1126: ST_TO_ADDR
// tech_space := tech_spacanom ;
1127: LD_ADDR_VAR 0 12
1131: PUSH
1132: LD_INT 29
1134: ST_TO_ADDR
// tech_time := tech_taurad ;
1135: LD_ADDR_VAR 0 13
1139: PUSH
1140: LD_INT 28
1142: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1143: LD_ADDR_VAR 0 11
1147: PUSH
1148: LD_VAR 0 1
1152: PPUSH
1153: CALL_OW 310
1157: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1158: LD_VAR 0 11
1162: PPUSH
1163: CALL_OW 247
1167: PUSH
1168: LD_INT 2
1170: EQUAL
1171: IFFALSE 1175
// exit ;
1173: GO 1685
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1175: LD_ADDR_VAR 0 8
1179: PUSH
1180: LD_INT 81
1182: PUSH
1183: LD_VAR 0 9
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: LD_INT 21
1197: PUSH
1198: LD_INT 3
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PPUSH
1213: CALL_OW 69
1217: ST_TO_ADDR
// if not tmp then
1218: LD_VAR 0 8
1222: NOT
1223: IFFALSE 1227
// exit ;
1225: GO 1685
// if in_unit then
1227: LD_VAR 0 11
1231: IFFALSE 1255
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1233: LD_ADDR_VAR 0 10
1237: PUSH
1238: LD_VAR 0 8
1242: PPUSH
1243: LD_VAR 0 11
1247: PPUSH
1248: CALL_OW 74
1252: ST_TO_ADDR
1253: GO 1275
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1255: LD_ADDR_VAR 0 10
1259: PUSH
1260: LD_VAR 0 8
1264: PPUSH
1265: LD_VAR 0 1
1269: PPUSH
1270: CALL_OW 74
1274: ST_TO_ADDR
// if not enemy then
1275: LD_VAR 0 10
1279: NOT
1280: IFFALSE 1284
// exit ;
1282: GO 1685
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1284: LD_VAR 0 11
1288: PUSH
1289: LD_VAR 0 11
1293: PPUSH
1294: LD_VAR 0 10
1298: PPUSH
1299: CALL_OW 296
1303: PUSH
1304: LD_INT 13
1306: GREATER
1307: AND
1308: PUSH
1309: LD_VAR 0 1
1313: PPUSH
1314: LD_VAR 0 10
1318: PPUSH
1319: CALL_OW 296
1323: PUSH
1324: LD_INT 12
1326: GREATER
1327: OR
1328: IFFALSE 1332
// exit ;
1330: GO 1685
// missile := [ 1 ] ;
1332: LD_ADDR_VAR 0 14
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: EMPTY
1341: LIST
1342: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1343: LD_VAR 0 9
1347: PPUSH
1348: LD_VAR 0 12
1352: PPUSH
1353: CALL_OW 325
1357: IFFALSE 1386
// missile := Replace ( missile , missile + 1 , 2 ) ;
1359: LD_ADDR_VAR 0 14
1363: PUSH
1364: LD_VAR 0 14
1368: PPUSH
1369: LD_VAR 0 14
1373: PUSH
1374: LD_INT 1
1376: PLUS
1377: PPUSH
1378: LD_INT 2
1380: PPUSH
1381: CALL_OW 1
1385: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1386: LD_VAR 0 9
1390: PPUSH
1391: LD_VAR 0 13
1395: PPUSH
1396: CALL_OW 325
1400: PUSH
1401: LD_VAR 0 10
1405: PPUSH
1406: CALL_OW 255
1410: PPUSH
1411: LD_VAR 0 13
1415: PPUSH
1416: CALL_OW 325
1420: NOT
1421: AND
1422: IFFALSE 1451
// missile := Replace ( missile , missile + 1 , 3 ) ;
1424: LD_ADDR_VAR 0 14
1428: PUSH
1429: LD_VAR 0 14
1433: PPUSH
1434: LD_VAR 0 14
1438: PUSH
1439: LD_INT 1
1441: PLUS
1442: PPUSH
1443: LD_INT 3
1445: PPUSH
1446: CALL_OW 1
1450: ST_TO_ADDR
// if missile < 2 then
1451: LD_VAR 0 14
1455: PUSH
1456: LD_INT 2
1458: LESS
1459: IFFALSE 1463
// exit ;
1461: GO 1685
// x := GetX ( enemy ) ;
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_VAR 0 10
1472: PPUSH
1473: CALL_OW 250
1477: ST_TO_ADDR
// y := GetY ( enemy ) ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_VAR 0 10
1487: PPUSH
1488: CALL_OW 251
1492: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1493: LD_ADDR_VAR 0 6
1497: PUSH
1498: LD_VAR 0 4
1502: PUSH
1503: LD_INT 1
1505: NEG
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: CALL_OW 12
1514: PLUS
1515: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1516: LD_ADDR_VAR 0 7
1520: PUSH
1521: LD_VAR 0 5
1525: PUSH
1526: LD_INT 1
1528: NEG
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: CALL_OW 12
1537: PLUS
1538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1539: LD_VAR 0 6
1543: PPUSH
1544: LD_VAR 0 7
1548: PPUSH
1549: CALL_OW 488
1553: NOT
1554: IFFALSE 1576
// begin _x := x ;
1556: LD_ADDR_VAR 0 6
1560: PUSH
1561: LD_VAR 0 4
1565: ST_TO_ADDR
// _y := y ;
1566: LD_ADDR_VAR 0 7
1570: PUSH
1571: LD_VAR 0 5
1575: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1576: LD_ADDR_VAR 0 3
1580: PUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_VAR 0 14
1588: PPUSH
1589: CALL_OW 12
1593: ST_TO_ADDR
// case i of 1 :
1594: LD_VAR 0 3
1598: PUSH
1599: LD_INT 1
1601: DOUBLE
1602: EQUAL
1603: IFTRUE 1607
1605: GO 1624
1607: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1608: LD_VAR 0 1
1612: PPUSH
1613: LD_VAR 0 10
1617: PPUSH
1618: CALL_OW 115
1622: GO 1685
1624: LD_INT 2
1626: DOUBLE
1627: EQUAL
1628: IFTRUE 1632
1630: GO 1654
1632: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1633: LD_VAR 0 1
1637: PPUSH
1638: LD_VAR 0 6
1642: PPUSH
1643: LD_VAR 0 7
1647: PPUSH
1648: CALL_OW 153
1652: GO 1685
1654: LD_INT 3
1656: DOUBLE
1657: EQUAL
1658: IFTRUE 1662
1660: GO 1684
1662: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1663: LD_VAR 0 1
1667: PPUSH
1668: LD_VAR 0 6
1672: PPUSH
1673: LD_VAR 0 7
1677: PPUSH
1678: CALL_OW 154
1682: GO 1685
1684: POP
// end ;
1685: LD_VAR 0 2
1689: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1690: LD_INT 0
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
// if not unit or not building then
1698: LD_VAR 0 1
1702: NOT
1703: PUSH
1704: LD_VAR 0 2
1708: NOT
1709: OR
1710: IFFALSE 1714
// exit ;
1712: GO 1872
// x := GetX ( building ) ;
1714: LD_ADDR_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: PPUSH
1724: CALL_OW 250
1728: ST_TO_ADDR
// y := GetY ( building ) ;
1729: LD_ADDR_VAR 0 6
1733: PUSH
1734: LD_VAR 0 2
1738: PPUSH
1739: CALL_OW 251
1743: ST_TO_ADDR
// for i = 0 to 5 do
1744: LD_ADDR_VAR 0 4
1748: PUSH
1749: DOUBLE
1750: LD_INT 0
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1870
// begin _x := ShiftX ( x , i , 3 ) ;
1760: LD_ADDR_VAR 0 7
1764: PUSH
1765: LD_VAR 0 5
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: LD_INT 3
1777: PPUSH
1778: CALL_OW 272
1782: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1783: LD_ADDR_VAR 0 8
1787: PUSH
1788: LD_VAR 0 6
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: CALL_OW 273
1805: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1806: LD_VAR 0 7
1810: PPUSH
1811: LD_VAR 0 8
1815: PPUSH
1816: CALL_OW 488
1820: NOT
1821: IFFALSE 1825
// continue ;
1823: GO 1757
// if HexInfo ( _x , _y ) = 0 then
1825: LD_VAR 0 7
1829: PPUSH
1830: LD_VAR 0 8
1834: PPUSH
1835: CALL_OW 428
1839: PUSH
1840: LD_INT 0
1842: EQUAL
1843: IFFALSE 1868
// begin ComMoveXY ( unit , _x , _y ) ;
1845: LD_VAR 0 1
1849: PPUSH
1850: LD_VAR 0 7
1854: PPUSH
1855: LD_VAR 0 8
1859: PPUSH
1860: CALL_OW 111
// exit ;
1864: POP
1865: POP
1866: GO 1872
// end ; end ;
1868: GO 1757
1870: POP
1871: POP
// end ;
1872: LD_VAR 0 3
1876: RET
// export function ScanBase ( side , base_area ) ; begin
1877: LD_INT 0
1879: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1880: LD_ADDR_VAR 0 3
1884: PUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_INT 81
1892: PUSH
1893: LD_VAR 0 1
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PPUSH
1902: CALL_OW 70
1906: ST_TO_ADDR
// end ;
1907: LD_VAR 0 3
1911: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1912: LD_INT 0
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
// result := false ;
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_INT 0
1925: ST_TO_ADDR
// side := GetSide ( unit ) ;
1926: LD_ADDR_VAR 0 3
1930: PUSH
1931: LD_VAR 0 1
1935: PPUSH
1936: CALL_OW 255
1940: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1941: LD_ADDR_VAR 0 4
1945: PUSH
1946: LD_VAR 0 1
1950: PPUSH
1951: CALL_OW 248
1955: ST_TO_ADDR
// case nat of 1 :
1956: LD_VAR 0 4
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 1980
1969: POP
// tech := tech_lassight ; 2 :
1970: LD_ADDR_VAR 0 5
1974: PUSH
1975: LD_INT 12
1977: ST_TO_ADDR
1978: GO 2019
1980: LD_INT 2
1982: DOUBLE
1983: EQUAL
1984: IFTRUE 1988
1986: GO 1999
1988: POP
// tech := tech_mortar ; 3 :
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_INT 41
1996: ST_TO_ADDR
1997: GO 2019
1999: LD_INT 3
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2018
2007: POP
// tech := tech_bazooka ; end ;
2008: LD_ADDR_VAR 0 5
2012: PUSH
2013: LD_INT 44
2015: ST_TO_ADDR
2016: GO 2019
2018: POP
// if Researched ( side , tech ) then
2019: LD_VAR 0 3
2023: PPUSH
2024: LD_VAR 0 5
2028: PPUSH
2029: CALL_OW 325
2033: IFFALSE 2060
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 8
2045: PUSH
2046: LD_INT 9
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_VAR 0 4
2058: ARRAY
2059: ST_TO_ADDR
// end ;
2060: LD_VAR 0 2
2064: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2065: LD_INT 0
2067: PPUSH
2068: PPUSH
2069: PPUSH
// if not mines then
2070: LD_VAR 0 2
2074: NOT
2075: IFFALSE 2079
// exit ;
2077: GO 2223
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2079: LD_ADDR_VAR 0 5
2083: PUSH
2084: LD_INT 81
2086: PUSH
2087: LD_VAR 0 1
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 3
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PPUSH
2117: CALL_OW 69
2121: ST_TO_ADDR
// for i in mines do
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_VAR 0 2
2131: PUSH
2132: FOR_IN
2133: IFFALSE 2221
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2135: LD_VAR 0 4
2139: PUSH
2140: LD_INT 1
2142: ARRAY
2143: PPUSH
2144: LD_VAR 0 4
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PPUSH
2153: CALL_OW 458
2157: NOT
2158: IFFALSE 2162
// continue ;
2160: GO 2132
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2162: LD_VAR 0 4
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: LD_VAR 0 4
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: PPUSH
2180: CALL_OW 428
2184: PUSH
2185: LD_VAR 0 5
2189: IN
2190: IFFALSE 2219
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2192: LD_VAR 0 4
2196: PUSH
2197: LD_INT 1
2199: ARRAY
2200: PPUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 2
2208: ARRAY
2209: PPUSH
2210: LD_VAR 0 1
2214: PPUSH
2215: CALL_OW 456
// end ;
2219: GO 2132
2221: POP
2222: POP
// end ;
2223: LD_VAR 0 3
2227: RET
// export function Count ( array ) ; begin
2228: LD_INT 0
2230: PPUSH
// result := array + 0 ;
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_INT 0
2243: PLUS
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 2
2249: RET
// export function IsEmpty ( building ) ; begin
2250: LD_INT 0
2252: PPUSH
// if not building then
2253: LD_VAR 0 1
2257: NOT
2258: IFFALSE 2262
// exit ;
2260: GO 2305
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2262: LD_ADDR_VAR 0 2
2266: PUSH
2267: LD_VAR 0 1
2271: PUSH
2272: LD_INT 22
2274: PUSH
2275: LD_VAR 0 1
2279: PPUSH
2280: CALL_OW 255
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 58
2291: PUSH
2292: EMPTY
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PPUSH
2299: CALL_OW 69
2303: IN
2304: ST_TO_ADDR
// end ;
2305: LD_VAR 0 2
2309: RET
// export function IsNotFull ( building ) ; var places ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
// if not building then
2314: LD_VAR 0 1
2318: NOT
2319: IFFALSE 2323
// exit ;
2321: GO 2351
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2323: LD_ADDR_VAR 0 2
2327: PUSH
2328: LD_VAR 0 1
2332: PPUSH
2333: LD_INT 3
2335: PUSH
2336: LD_INT 62
2338: PUSH
2339: EMPTY
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PPUSH
2346: CALL_OW 72
2350: ST_TO_ADDR
// end ;
2351: LD_VAR 0 2
2355: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2356: LD_INT 0
2358: PPUSH
2359: PPUSH
2360: PPUSH
2361: PPUSH
// tmp := [ ] ;
2362: LD_ADDR_VAR 0 3
2366: PUSH
2367: EMPTY
2368: ST_TO_ADDR
// list := [ ] ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: EMPTY
2375: ST_TO_ADDR
// for i = 16 to 25 do
2376: LD_ADDR_VAR 0 4
2380: PUSH
2381: DOUBLE
2382: LD_INT 16
2384: DEC
2385: ST_TO_ADDR
2386: LD_INT 25
2388: PUSH
2389: FOR_TO
2390: IFFALSE 2463
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2392: LD_ADDR_VAR 0 3
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 22
2404: PUSH
2405: LD_VAR 0 1
2409: PPUSH
2410: CALL_OW 255
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 91
2421: PUSH
2422: LD_VAR 0 1
2426: PUSH
2427: LD_INT 6
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 30
2437: PUSH
2438: LD_VAR 0 4
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: PPUSH
2455: CALL_OW 69
2459: ADD
2460: ST_TO_ADDR
2461: GO 2389
2463: POP
2464: POP
// for i = 1 to tmp do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: DOUBLE
2471: LD_INT 1
2473: DEC
2474: ST_TO_ADDR
2475: LD_VAR 0 3
2479: PUSH
2480: FOR_TO
2481: IFFALSE 2569
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_VAR 0 5
2492: PUSH
2493: LD_VAR 0 3
2497: PUSH
2498: LD_VAR 0 4
2502: ARRAY
2503: PPUSH
2504: CALL_OW 266
2508: PUSH
2509: LD_VAR 0 3
2513: PUSH
2514: LD_VAR 0 4
2518: ARRAY
2519: PPUSH
2520: CALL_OW 250
2524: PUSH
2525: LD_VAR 0 3
2529: PUSH
2530: LD_VAR 0 4
2534: ARRAY
2535: PPUSH
2536: CALL_OW 251
2540: PUSH
2541: LD_VAR 0 3
2545: PUSH
2546: LD_VAR 0 4
2550: ARRAY
2551: PPUSH
2552: CALL_OW 254
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: ADD
2566: ST_TO_ADDR
2567: GO 2480
2569: POP
2570: POP
// result := list ;
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: LD_VAR 0 5
2580: ST_TO_ADDR
// end ;
2581: LD_VAR 0 2
2585: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2586: LD_INT 0
2588: PPUSH
2589: PPUSH
2590: PPUSH
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
// if not factory then
2595: LD_VAR 0 1
2599: NOT
2600: IFFALSE 2604
// exit ;
2602: GO 3197
// if control = control_apeman then
2604: LD_VAR 0 4
2608: PUSH
2609: LD_INT 5
2611: EQUAL
2612: IFFALSE 2721
// begin tmp := UnitsInside ( factory ) ;
2614: LD_ADDR_VAR 0 8
2618: PUSH
2619: LD_VAR 0 1
2623: PPUSH
2624: CALL_OW 313
2628: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2629: LD_VAR 0 8
2633: PPUSH
2634: LD_INT 25
2636: PUSH
2637: LD_INT 12
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 72
2648: NOT
2649: IFFALSE 2659
// control := control_manual ;
2651: LD_ADDR_VAR 0 4
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2659: LD_ADDR_VAR 0 8
2663: PUSH
2664: LD_VAR 0 1
2668: PPUSH
2669: CALL 2356 0 1
2673: ST_TO_ADDR
// if tmp then
2674: LD_VAR 0 8
2678: IFFALSE 2721
// begin for i in tmp do
2680: LD_ADDR_VAR 0 7
2684: PUSH
2685: LD_VAR 0 8
2689: PUSH
2690: FOR_IN
2691: IFFALSE 2719
// if i [ 1 ] = b_ext_radio then
2693: LD_VAR 0 7
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PUSH
2702: LD_INT 22
2704: EQUAL
2705: IFFALSE 2717
// begin control := control_remote ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_INT 2
2714: ST_TO_ADDR
// break ;
2715: GO 2719
// end ;
2717: GO 2690
2719: POP
2720: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: LD_VAR 0 3
2735: PPUSH
2736: LD_VAR 0 4
2740: PPUSH
2741: LD_VAR 0 5
2745: PPUSH
2746: CALL_OW 448
2750: IFFALSE 2785
// begin result := [ chassis , engine , control , weapon ] ;
2752: LD_ADDR_VAR 0 6
2756: PUSH
2757: LD_VAR 0 2
2761: PUSH
2762: LD_VAR 0 3
2766: PUSH
2767: LD_VAR 0 4
2771: PUSH
2772: LD_VAR 0 5
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: ST_TO_ADDR
// exit ;
2783: GO 3197
// end ; _chassis := AvailableChassisList ( factory ) ;
2785: LD_ADDR_VAR 0 9
2789: PUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: CALL_OW 475
2799: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2800: LD_ADDR_VAR 0 11
2804: PUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL_OW 476
2814: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2815: LD_ADDR_VAR 0 12
2819: PUSH
2820: LD_VAR 0 1
2824: PPUSH
2825: CALL_OW 477
2829: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2830: LD_ADDR_VAR 0 10
2834: PUSH
2835: LD_VAR 0 1
2839: PPUSH
2840: CALL_OW 478
2844: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2845: LD_VAR 0 9
2849: NOT
2850: PUSH
2851: LD_VAR 0 11
2855: NOT
2856: OR
2857: PUSH
2858: LD_VAR 0 12
2862: NOT
2863: OR
2864: PUSH
2865: LD_VAR 0 10
2869: NOT
2870: OR
2871: IFFALSE 2906
// begin result := [ chassis , engine , control , weapon ] ;
2873: LD_ADDR_VAR 0 6
2877: PUSH
2878: LD_VAR 0 2
2882: PUSH
2883: LD_VAR 0 3
2887: PUSH
2888: LD_VAR 0 4
2892: PUSH
2893: LD_VAR 0 5
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: ST_TO_ADDR
// exit ;
2904: GO 3197
// end ; if not chassis in _chassis then
2906: LD_VAR 0 2
2910: PUSH
2911: LD_VAR 0 9
2915: IN
2916: NOT
2917: IFFALSE 2943
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: LD_VAR 0 9
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_VAR 0 9
2936: PPUSH
2937: CALL_OW 12
2941: ARRAY
2942: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
2943: LD_VAR 0 2
2947: PPUSH
2948: LD_VAR 0 3
2952: PPUSH
2953: CALL 3202 0 2
2957: NOT
2958: IFFALSE 3017
// repeat engine := _engine [ 1 ] ;
2960: LD_ADDR_VAR 0 3
2964: PUSH
2965: LD_VAR 0 11
2969: PUSH
2970: LD_INT 1
2972: ARRAY
2973: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
2974: LD_ADDR_VAR 0 11
2978: PUSH
2979: LD_VAR 0 11
2983: PPUSH
2984: LD_INT 1
2986: PPUSH
2987: CALL_OW 3
2991: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
2992: LD_VAR 0 2
2996: PPUSH
2997: LD_VAR 0 3
3001: PPUSH
3002: CALL 3202 0 2
3006: PUSH
3007: LD_VAR 0 11
3011: PUSH
3012: EMPTY
3013: EQUAL
3014: OR
3015: IFFALSE 2960
// if not control in _control then
3017: LD_VAR 0 4
3021: PUSH
3022: LD_VAR 0 12
3026: IN
3027: NOT
3028: IFFALSE 3054
// control := _control [ rand ( 1 , _control ) ] ;
3030: LD_ADDR_VAR 0 4
3034: PUSH
3035: LD_VAR 0 12
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_VAR 0 12
3047: PPUSH
3048: CALL_OW 12
3052: ARRAY
3053: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3054: LD_VAR 0 2
3058: PPUSH
3059: LD_VAR 0 5
3063: PPUSH
3064: CALL 3422 0 2
3068: NOT
3069: IFFALSE 3128
// repeat weapon := _weapon [ 1 ] ;
3071: LD_ADDR_VAR 0 5
3075: PUSH
3076: LD_VAR 0 10
3080: PUSH
3081: LD_INT 1
3083: ARRAY
3084: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3085: LD_ADDR_VAR 0 10
3089: PUSH
3090: LD_VAR 0 10
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 3
3102: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_VAR 0 5
3112: PPUSH
3113: CALL 3422 0 2
3117: PUSH
3118: LD_VAR 0 10
3122: PUSH
3123: EMPTY
3124: EQUAL
3125: OR
3126: IFFALSE 3071
// result := [ ] ;
3128: LD_ADDR_VAR 0 6
3132: PUSH
3133: EMPTY
3134: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3135: LD_VAR 0 1
3139: PPUSH
3140: LD_VAR 0 2
3144: PPUSH
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: LD_VAR 0 5
3159: PPUSH
3160: CALL_OW 448
3164: IFFALSE 3197
// result := [ chassis , engine , control , weapon ] ;
3166: LD_ADDR_VAR 0 6
3170: PUSH
3171: LD_VAR 0 2
3175: PUSH
3176: LD_VAR 0 3
3180: PUSH
3181: LD_VAR 0 4
3185: PUSH
3186: LD_VAR 0 5
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: ST_TO_ADDR
// end ;
3197: LD_VAR 0 6
3201: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3202: LD_INT 0
3204: PPUSH
// if not chassis or not engine then
3205: LD_VAR 0 1
3209: NOT
3210: PUSH
3211: LD_VAR 0 2
3215: NOT
3216: OR
3217: IFFALSE 3221
// exit ;
3219: GO 3417
// case engine of engine_solar :
3221: LD_VAR 0 2
3225: PUSH
3226: LD_INT 2
3228: DOUBLE
3229: EQUAL
3230: IFTRUE 3234
3232: GO 3272
3234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 11
3242: PUSH
3243: LD_INT 12
3245: PUSH
3246: LD_INT 13
3248: PUSH
3249: LD_INT 14
3251: PUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 2
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: ST_TO_ADDR
3270: GO 3401
3272: LD_INT 1
3274: DOUBLE
3275: EQUAL
3276: IFTRUE 3280
3278: GO 3342
3280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3281: LD_ADDR_VAR 0 3
3285: PUSH
3286: LD_INT 11
3288: PUSH
3289: LD_INT 12
3291: PUSH
3292: LD_INT 13
3294: PUSH
3295: LD_INT 14
3297: PUSH
3298: LD_INT 1
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: LD_INT 5
3312: PUSH
3313: LD_INT 21
3315: PUSH
3316: LD_INT 23
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 24
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: ST_TO_ADDR
3340: GO 3401
3342: LD_INT 3
3344: DOUBLE
3345: EQUAL
3346: IFTRUE 3350
3348: GO 3400
3350: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3351: LD_ADDR_VAR 0 3
3355: PUSH
3356: LD_INT 13
3358: PUSH
3359: LD_INT 14
3361: PUSH
3362: LD_INT 2
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: LD_INT 4
3370: PUSH
3371: LD_INT 5
3373: PUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_INT 23
3382: PUSH
3383: LD_INT 24
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: ST_TO_ADDR
3398: GO 3401
3400: POP
// result := ( chassis in result ) ;
3401: LD_ADDR_VAR 0 3
3405: PUSH
3406: LD_VAR 0 1
3410: PUSH
3411: LD_VAR 0 3
3415: IN
3416: ST_TO_ADDR
// end ;
3417: LD_VAR 0 3
3421: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3422: LD_INT 0
3424: PPUSH
// if not chassis or not weapon then
3425: LD_VAR 0 1
3429: NOT
3430: PUSH
3431: LD_VAR 0 2
3435: NOT
3436: OR
3437: IFFALSE 3441
// exit ;
3439: GO 4501
// case weapon of us_machine_gun :
3441: LD_VAR 0 2
3445: PUSH
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3484
3454: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_INT 1
3462: PUSH
3463: LD_INT 2
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: LD_INT 4
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: ST_TO_ADDR
3482: GO 4485
3484: LD_INT 3
3486: DOUBLE
3487: EQUAL
3488: IFTRUE 3492
3490: GO 3522
3492: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3493: LD_ADDR_VAR 0 3
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: LD_INT 2
3503: PUSH
3504: LD_INT 3
3506: PUSH
3507: LD_INT 4
3509: PUSH
3510: LD_INT 5
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: ST_TO_ADDR
3520: GO 4485
3522: LD_INT 11
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3560
3530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3531: LD_ADDR_VAR 0 3
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: LD_INT 4
3547: PUSH
3548: LD_INT 5
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: ST_TO_ADDR
3558: GO 4485
3560: LD_INT 4
3562: DOUBLE
3563: EQUAL
3564: IFTRUE 3568
3566: GO 3594
3568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3569: LD_ADDR_VAR 0 3
3573: PUSH
3574: LD_INT 2
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 4
3582: PUSH
3583: LD_INT 5
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: ST_TO_ADDR
3592: GO 4485
3594: LD_INT 5
3596: DOUBLE
3597: EQUAL
3598: IFTRUE 3602
3600: GO 3628
3602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: LD_INT 5
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: ST_TO_ADDR
3626: GO 4485
3628: LD_INT 9
3630: DOUBLE
3631: EQUAL
3632: IFTRUE 3636
3634: GO 3662
3636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3637: LD_ADDR_VAR 0 3
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: LD_INT 4
3650: PUSH
3651: LD_INT 5
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: ST_TO_ADDR
3660: GO 4485
3662: LD_INT 7
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3696
3670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: LD_INT 5
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: ST_TO_ADDR
3694: GO 4485
3696: LD_INT 12
3698: DOUBLE
3699: EQUAL
3700: IFTRUE 3704
3702: GO 3730
3704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: LD_INT 4
3718: PUSH
3719: LD_INT 5
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: ST_TO_ADDR
3728: GO 4485
3730: LD_INT 13
3732: DOUBLE
3733: EQUAL
3734: IFTRUE 3738
3736: GO 3764
3738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3739: LD_ADDR_VAR 0 3
3743: PUSH
3744: LD_INT 2
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 4
3752: PUSH
3753: LD_INT 5
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: ST_TO_ADDR
3762: GO 4485
3764: LD_INT 14
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3790
3772: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: LD_INT 5
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: ST_TO_ADDR
3788: GO 4485
3790: LD_INT 6
3792: DOUBLE
3793: EQUAL
3794: IFTRUE 3798
3796: GO 3816
3798: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3799: LD_ADDR_VAR 0 3
3803: PUSH
3804: LD_INT 4
3806: PUSH
3807: LD_INT 5
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: ST_TO_ADDR
3814: GO 4485
3816: LD_INT 10
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3842
3824: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: ST_TO_ADDR
3840: GO 4485
3842: LD_INT 22
3844: DOUBLE
3845: EQUAL
3846: IFTRUE 3850
3848: GO 3876
3850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: LD_INT 11
3858: PUSH
3859: LD_INT 12
3861: PUSH
3862: LD_INT 13
3864: PUSH
3865: LD_INT 14
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: ST_TO_ADDR
3874: GO 4485
3876: LD_INT 23
3878: DOUBLE
3879: EQUAL
3880: IFTRUE 3884
3882: GO 3910
3884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
3885: LD_ADDR_VAR 0 3
3889: PUSH
3890: LD_INT 11
3892: PUSH
3893: LD_INT 12
3895: PUSH
3896: LD_INT 13
3898: PUSH
3899: LD_INT 14
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: ST_TO_ADDR
3908: GO 4485
3910: LD_INT 24
3912: DOUBLE
3913: EQUAL
3914: IFTRUE 3918
3916: GO 3944
3918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
3919: LD_ADDR_VAR 0 3
3923: PUSH
3924: LD_INT 11
3926: PUSH
3927: LD_INT 12
3929: PUSH
3930: LD_INT 13
3932: PUSH
3933: LD_INT 14
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: ST_TO_ADDR
3942: GO 4485
3944: LD_INT 30
3946: DOUBLE
3947: EQUAL
3948: IFTRUE 3952
3950: GO 3978
3952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: LD_INT 11
3960: PUSH
3961: LD_INT 12
3963: PUSH
3964: LD_INT 13
3966: PUSH
3967: LD_INT 14
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: ST_TO_ADDR
3976: GO 4485
3978: LD_INT 25
3980: DOUBLE
3981: EQUAL
3982: IFTRUE 3986
3984: GO 4004
3986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: LD_INT 13
3994: PUSH
3995: LD_INT 14
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: ST_TO_ADDR
4002: GO 4485
4004: LD_INT 27
4006: DOUBLE
4007: EQUAL
4008: IFTRUE 4012
4010: GO 4030
4012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 13
4020: PUSH
4021: LD_INT 14
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: ST_TO_ADDR
4028: GO 4485
4030: LD_INT 92
4032: DOUBLE
4033: EQUAL
4034: IFTRUE 4038
4036: GO 4064
4038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4039: LD_ADDR_VAR 0 3
4043: PUSH
4044: LD_INT 11
4046: PUSH
4047: LD_INT 12
4049: PUSH
4050: LD_INT 13
4052: PUSH
4053: LD_INT 14
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: ST_TO_ADDR
4062: GO 4485
4064: LD_INT 28
4066: DOUBLE
4067: EQUAL
4068: IFTRUE 4072
4070: GO 4090
4072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4073: LD_ADDR_VAR 0 3
4077: PUSH
4078: LD_INT 13
4080: PUSH
4081: LD_INT 14
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: ST_TO_ADDR
4088: GO 4485
4090: LD_INT 29
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4116
4098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4099: LD_ADDR_VAR 0 3
4103: PUSH
4104: LD_INT 13
4106: PUSH
4107: LD_INT 14
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: ST_TO_ADDR
4114: GO 4485
4116: LD_INT 31
4118: DOUBLE
4119: EQUAL
4120: IFTRUE 4124
4122: GO 4142
4124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4125: LD_ADDR_VAR 0 3
4129: PUSH
4130: LD_INT 13
4132: PUSH
4133: LD_INT 14
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: ST_TO_ADDR
4140: GO 4485
4142: LD_INT 26
4144: DOUBLE
4145: EQUAL
4146: IFTRUE 4150
4148: GO 4168
4150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4151: LD_ADDR_VAR 0 3
4155: PUSH
4156: LD_INT 13
4158: PUSH
4159: LD_INT 14
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
4166: GO 4485
4168: LD_INT 42
4170: DOUBLE
4171: EQUAL
4172: IFTRUE 4176
4174: GO 4202
4176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: LD_INT 21
4184: PUSH
4185: LD_INT 22
4187: PUSH
4188: LD_INT 23
4190: PUSH
4191: LD_INT 24
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: ST_TO_ADDR
4200: GO 4485
4202: LD_INT 43
4204: DOUBLE
4205: EQUAL
4206: IFTRUE 4210
4208: GO 4236
4210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4211: LD_ADDR_VAR 0 3
4215: PUSH
4216: LD_INT 21
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_INT 23
4224: PUSH
4225: LD_INT 24
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: ST_TO_ADDR
4234: GO 4485
4236: LD_INT 44
4238: DOUBLE
4239: EQUAL
4240: IFTRUE 4244
4242: GO 4270
4244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4245: LD_ADDR_VAR 0 3
4249: PUSH
4250: LD_INT 21
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 23
4258: PUSH
4259: LD_INT 24
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: ST_TO_ADDR
4268: GO 4485
4270: LD_INT 45
4272: DOUBLE
4273: EQUAL
4274: IFTRUE 4278
4276: GO 4304
4278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4279: LD_ADDR_VAR 0 3
4283: PUSH
4284: LD_INT 21
4286: PUSH
4287: LD_INT 22
4289: PUSH
4290: LD_INT 23
4292: PUSH
4293: LD_INT 24
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: ST_TO_ADDR
4302: GO 4485
4304: LD_INT 49
4306: DOUBLE
4307: EQUAL
4308: IFTRUE 4312
4310: GO 4338
4312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4313: LD_ADDR_VAR 0 3
4317: PUSH
4318: LD_INT 21
4320: PUSH
4321: LD_INT 22
4323: PUSH
4324: LD_INT 23
4326: PUSH
4327: LD_INT 24
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: ST_TO_ADDR
4336: GO 4485
4338: LD_INT 51
4340: DOUBLE
4341: EQUAL
4342: IFTRUE 4346
4344: GO 4372
4346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_INT 21
4354: PUSH
4355: LD_INT 22
4357: PUSH
4358: LD_INT 23
4360: PUSH
4361: LD_INT 24
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: ST_TO_ADDR
4370: GO 4485
4372: LD_INT 52
4374: DOUBLE
4375: EQUAL
4376: IFTRUE 4380
4378: GO 4406
4380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4381: LD_ADDR_VAR 0 3
4385: PUSH
4386: LD_INT 21
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 23
4394: PUSH
4395: LD_INT 24
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: ST_TO_ADDR
4404: GO 4485
4406: LD_INT 53
4408: DOUBLE
4409: EQUAL
4410: IFTRUE 4414
4412: GO 4432
4414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 23
4422: PUSH
4423: LD_INT 24
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: ST_TO_ADDR
4430: GO 4485
4432: LD_INT 46
4434: DOUBLE
4435: EQUAL
4436: IFTRUE 4440
4438: GO 4458
4440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4441: LD_ADDR_VAR 0 3
4445: PUSH
4446: LD_INT 23
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: ST_TO_ADDR
4456: GO 4485
4458: LD_INT 47
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4484
4466: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: LD_INT 23
4474: PUSH
4475: LD_INT 24
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: ST_TO_ADDR
4482: GO 4485
4484: POP
// result := ( chassis in result ) ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_VAR 0 1
4494: PUSH
4495: LD_VAR 0 3
4499: IN
4500: ST_TO_ADDR
// end ;
4501: LD_VAR 0 3
4505: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
4514: PPUSH
// result := array ;
4515: LD_ADDR_VAR 0 5
4519: PUSH
4520: LD_VAR 0 1
4524: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4525: LD_VAR 0 1
4529: NOT
4530: PUSH
4531: LD_VAR 0 2
4535: NOT
4536: OR
4537: PUSH
4538: LD_VAR 0 3
4542: NOT
4543: OR
4544: PUSH
4545: LD_VAR 0 2
4549: PUSH
4550: LD_VAR 0 1
4554: GREATER
4555: OR
4556: PUSH
4557: LD_VAR 0 3
4561: PUSH
4562: LD_VAR 0 1
4566: GREATER
4567: OR
4568: IFFALSE 4572
// exit ;
4570: GO 4868
// if direction then
4572: LD_VAR 0 4
4576: IFFALSE 4640
// begin d := 1 ;
4578: LD_ADDR_VAR 0 9
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// if i_from > i_to then
4586: LD_VAR 0 2
4590: PUSH
4591: LD_VAR 0 3
4595: GREATER
4596: IFFALSE 4622
// length := ( array - i_from ) + i_to else
4598: LD_ADDR_VAR 0 11
4602: PUSH
4603: LD_VAR 0 1
4607: PUSH
4608: LD_VAR 0 2
4612: MINUS
4613: PUSH
4614: LD_VAR 0 3
4618: PLUS
4619: ST_TO_ADDR
4620: GO 4638
// length := i_to - i_from ;
4622: LD_ADDR_VAR 0 11
4626: PUSH
4627: LD_VAR 0 3
4631: PUSH
4632: LD_VAR 0 2
4636: MINUS
4637: ST_TO_ADDR
// end else
4638: GO 4701
// begin d := - 1 ;
4640: LD_ADDR_VAR 0 9
4644: PUSH
4645: LD_INT 1
4647: NEG
4648: ST_TO_ADDR
// if i_from > i_to then
4649: LD_VAR 0 2
4653: PUSH
4654: LD_VAR 0 3
4658: GREATER
4659: IFFALSE 4679
// length := i_from - i_to else
4661: LD_ADDR_VAR 0 11
4665: PUSH
4666: LD_VAR 0 2
4670: PUSH
4671: LD_VAR 0 3
4675: MINUS
4676: ST_TO_ADDR
4677: GO 4701
// length := ( array - i_to ) + i_from ;
4679: LD_ADDR_VAR 0 11
4683: PUSH
4684: LD_VAR 0 1
4688: PUSH
4689: LD_VAR 0 3
4693: MINUS
4694: PUSH
4695: LD_VAR 0 2
4699: PLUS
4700: ST_TO_ADDR
// end ; if not length then
4701: LD_VAR 0 11
4705: NOT
4706: IFFALSE 4710
// exit ;
4708: GO 4868
// tmp := array ;
4710: LD_ADDR_VAR 0 10
4714: PUSH
4715: LD_VAR 0 1
4719: ST_TO_ADDR
// for i = 1 to length do
4720: LD_ADDR_VAR 0 6
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_VAR 0 11
4734: PUSH
4735: FOR_TO
4736: IFFALSE 4856
// begin for j = 1 to array do
4738: LD_ADDR_VAR 0 7
4742: PUSH
4743: DOUBLE
4744: LD_INT 1
4746: DEC
4747: ST_TO_ADDR
4748: LD_VAR 0 1
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4842
// begin k := j + d ;
4756: LD_ADDR_VAR 0 8
4760: PUSH
4761: LD_VAR 0 7
4765: PUSH
4766: LD_VAR 0 9
4770: PLUS
4771: ST_TO_ADDR
// if k > array then
4772: LD_VAR 0 8
4776: PUSH
4777: LD_VAR 0 1
4781: GREATER
4782: IFFALSE 4792
// k := 1 ;
4784: LD_ADDR_VAR 0 8
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// if not k then
4792: LD_VAR 0 8
4796: NOT
4797: IFFALSE 4809
// k := array ;
4799: LD_ADDR_VAR 0 8
4803: PUSH
4804: LD_VAR 0 1
4808: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4809: LD_ADDR_VAR 0 10
4813: PUSH
4814: LD_VAR 0 10
4818: PPUSH
4819: LD_VAR 0 8
4823: PPUSH
4824: LD_VAR 0 1
4828: PUSH
4829: LD_VAR 0 7
4833: ARRAY
4834: PPUSH
4835: CALL_OW 1
4839: ST_TO_ADDR
// end ;
4840: GO 4753
4842: POP
4843: POP
// array := tmp ;
4844: LD_ADDR_VAR 0 1
4848: PUSH
4849: LD_VAR 0 10
4853: ST_TO_ADDR
// end ;
4854: GO 4735
4856: POP
4857: POP
// result := array ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_VAR 0 1
4867: ST_TO_ADDR
// end ;
4868: LD_VAR 0 5
4872: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4873: LD_INT 0
4875: PPUSH
4876: PPUSH
// result := 0 ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: LD_INT 0
4884: ST_TO_ADDR
// if not array or not value in array then
4885: LD_VAR 0 1
4889: NOT
4890: PUSH
4891: LD_VAR 0 2
4895: PUSH
4896: LD_VAR 0 1
4900: IN
4901: NOT
4902: OR
4903: IFFALSE 4907
// exit ;
4905: GO 4961
// for i = 1 to array do
4907: LD_ADDR_VAR 0 4
4911: PUSH
4912: DOUBLE
4913: LD_INT 1
4915: DEC
4916: ST_TO_ADDR
4917: LD_VAR 0 1
4921: PUSH
4922: FOR_TO
4923: IFFALSE 4959
// if value = array [ i ] then
4925: LD_VAR 0 2
4929: PUSH
4930: LD_VAR 0 1
4934: PUSH
4935: LD_VAR 0 4
4939: ARRAY
4940: EQUAL
4941: IFFALSE 4957
// begin result := i ;
4943: LD_ADDR_VAR 0 3
4947: PUSH
4948: LD_VAR 0 4
4952: ST_TO_ADDR
// exit ;
4953: POP
4954: POP
4955: GO 4961
// end ;
4957: GO 4922
4959: POP
4960: POP
// end ;
4961: LD_VAR 0 3
4965: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
4966: LD_INT 0
4968: PPUSH
// vc_chassis := chassis ;
4969: LD_ADDR_OWVAR 37
4973: PUSH
4974: LD_VAR 0 1
4978: ST_TO_ADDR
// vc_engine := engine ;
4979: LD_ADDR_OWVAR 39
4983: PUSH
4984: LD_VAR 0 2
4988: ST_TO_ADDR
// vc_control := control ;
4989: LD_ADDR_OWVAR 38
4993: PUSH
4994: LD_VAR 0 3
4998: ST_TO_ADDR
// vc_weapon := weapon ;
4999: LD_ADDR_OWVAR 40
5003: PUSH
5004: LD_VAR 0 4
5008: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5009: LD_ADDR_OWVAR 41
5013: PUSH
5014: LD_VAR 0 5
5018: ST_TO_ADDR
// end ;
5019: LD_VAR 0 6
5023: RET
// export function WantPlant ( unit ) ; var task ; begin
5024: LD_INT 0
5026: PPUSH
5027: PPUSH
// result := false ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_INT 0
5035: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_VAR 0 1
5045: PPUSH
5046: CALL_OW 437
5050: ST_TO_ADDR
// if task then
5051: LD_VAR 0 3
5055: IFFALSE 5083
// if task [ 1 ] [ 1 ] = p then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PUSH
5066: LD_INT 1
5068: ARRAY
5069: PUSH
5070: LD_STRING p
5072: EQUAL
5073: IFFALSE 5083
// result := true ;
5075: LD_ADDR_VAR 0 2
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// end ;
5083: LD_VAR 0 2
5087: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
5092: PPUSH
5093: PPUSH
// if pos < 1 then
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 1
5101: LESS
5102: IFFALSE 5106
// exit ;
5104: GO 5409
// if pos = 1 then
5106: LD_VAR 0 2
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: IFFALSE 5147
// result := Replace ( arr , pos [ 1 ] , value ) else
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: LD_VAR 0 1
5125: PPUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: ARRAY
5134: PPUSH
5135: LD_VAR 0 3
5139: PPUSH
5140: CALL_OW 1
5144: ST_TO_ADDR
5145: GO 5409
// begin tmp := arr ;
5147: LD_ADDR_VAR 0 6
5151: PUSH
5152: LD_VAR 0 1
5156: ST_TO_ADDR
// s_arr := [ tmp ] ;
5157: LD_ADDR_VAR 0 7
5161: PUSH
5162: LD_VAR 0 6
5166: PUSH
5167: EMPTY
5168: LIST
5169: ST_TO_ADDR
// for i = 1 to pos - 1 do
5170: LD_ADDR_VAR 0 5
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 1
5187: MINUS
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5235
// begin tmp := tmp [ pos [ i ] ] ;
5192: LD_ADDR_VAR 0 6
5196: PUSH
5197: LD_VAR 0 6
5201: PUSH
5202: LD_VAR 0 2
5206: PUSH
5207: LD_VAR 0 5
5211: ARRAY
5212: ARRAY
5213: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5214: LD_ADDR_VAR 0 7
5218: PUSH
5219: LD_VAR 0 7
5223: PUSH
5224: LD_VAR 0 6
5228: PUSH
5229: EMPTY
5230: LIST
5231: ADD
5232: ST_TO_ADDR
// end ;
5233: GO 5189
5235: POP
5236: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5237: LD_ADDR_VAR 0 6
5241: PUSH
5242: LD_VAR 0 6
5246: PPUSH
5247: LD_VAR 0 2
5251: PUSH
5252: LD_VAR 0 2
5256: ARRAY
5257: PPUSH
5258: LD_VAR 0 3
5262: PPUSH
5263: CALL_OW 1
5267: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5268: LD_ADDR_VAR 0 7
5272: PUSH
5273: LD_VAR 0 7
5277: PPUSH
5278: LD_VAR 0 7
5282: PPUSH
5283: LD_VAR 0 6
5287: PPUSH
5288: CALL_OW 1
5292: ST_TO_ADDR
// for i = s_arr downto 2 do
5293: LD_ADDR_VAR 0 5
5297: PUSH
5298: DOUBLE
5299: LD_VAR 0 7
5303: INC
5304: ST_TO_ADDR
5305: LD_INT 2
5307: PUSH
5308: FOR_DOWNTO
5309: IFFALSE 5393
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5311: LD_ADDR_VAR 0 6
5315: PUSH
5316: LD_VAR 0 7
5320: PUSH
5321: LD_VAR 0 5
5325: PUSH
5326: LD_INT 1
5328: MINUS
5329: ARRAY
5330: PPUSH
5331: LD_VAR 0 2
5335: PUSH
5336: LD_VAR 0 5
5340: PUSH
5341: LD_INT 1
5343: MINUS
5344: ARRAY
5345: PPUSH
5346: LD_VAR 0 7
5350: PUSH
5351: LD_VAR 0 5
5355: ARRAY
5356: PPUSH
5357: CALL_OW 1
5361: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5362: LD_ADDR_VAR 0 7
5366: PUSH
5367: LD_VAR 0 7
5371: PPUSH
5372: LD_VAR 0 5
5376: PUSH
5377: LD_INT 1
5379: MINUS
5380: PPUSH
5381: LD_VAR 0 6
5385: PPUSH
5386: CALL_OW 1
5390: ST_TO_ADDR
// end ;
5391: GO 5308
5393: POP
5394: POP
// result := s_arr [ 1 ] ;
5395: LD_ADDR_VAR 0 4
5399: PUSH
5400: LD_VAR 0 7
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: ST_TO_ADDR
// end ; end ;
5409: LD_VAR 0 4
5413: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5414: LD_INT 0
5416: PPUSH
5417: PPUSH
// if not list then
5418: LD_VAR 0 1
5422: NOT
5423: IFFALSE 5427
// exit ;
5425: GO 5518
// i := list [ pos1 ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_VAR 0 1
5436: PUSH
5437: LD_VAR 0 2
5441: ARRAY
5442: ST_TO_ADDR
// if not i then
5443: LD_VAR 0 5
5447: NOT
5448: IFFALSE 5452
// exit ;
5450: GO 5518
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: LD_VAR 0 1
5461: PPUSH
5462: LD_VAR 0 2
5466: PPUSH
5467: LD_VAR 0 1
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: CALL_OW 1
5482: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5483: LD_ADDR_VAR 0 1
5487: PUSH
5488: LD_VAR 0 1
5492: PPUSH
5493: LD_VAR 0 3
5497: PPUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: CALL_OW 1
5507: ST_TO_ADDR
// result := list ;
5508: LD_ADDR_VAR 0 4
5512: PUSH
5513: LD_VAR 0 1
5517: ST_TO_ADDR
// end ;
5518: LD_VAR 0 4
5522: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5523: LD_INT 0
5525: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5526: LD_ADDR_VAR 0 5
5530: PUSH
5531: LD_VAR 0 1
5535: PPUSH
5536: CALL_OW 250
5540: PPUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 251
5550: PPUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: LD_VAR 0 3
5560: PPUSH
5561: LD_VAR 0 4
5565: PPUSH
5566: CALL 5576 0 5
5570: ST_TO_ADDR
// end ;
5571: LD_VAR 0 5
5575: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5576: LD_INT 0
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
// if not list then
5582: LD_VAR 0 3
5586: NOT
5587: IFFALSE 5591
// exit ;
5589: GO 5979
// result := [ ] ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: EMPTY
5597: ST_TO_ADDR
// for i in list do
5598: LD_ADDR_VAR 0 7
5602: PUSH
5603: LD_VAR 0 3
5607: PUSH
5608: FOR_IN
5609: IFFALSE 5811
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5611: LD_ADDR_VAR 0 9
5615: PUSH
5616: LD_VAR 0 7
5620: PPUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL_OW 297
5635: ST_TO_ADDR
// if not result then
5636: LD_VAR 0 6
5640: NOT
5641: IFFALSE 5667
// result := [ [ i , tmp ] ] else
5643: LD_ADDR_VAR 0 6
5647: PUSH
5648: LD_VAR 0 7
5652: PUSH
5653: LD_VAR 0 9
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: EMPTY
5663: LIST
5664: ST_TO_ADDR
5665: GO 5809
// begin if result [ result ] [ 2 ] < tmp then
5667: LD_VAR 0 6
5671: PUSH
5672: LD_VAR 0 6
5676: ARRAY
5677: PUSH
5678: LD_INT 2
5680: ARRAY
5681: PUSH
5682: LD_VAR 0 9
5686: LESS
5687: IFFALSE 5729
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_VAR 0 6
5698: PPUSH
5699: LD_VAR 0 6
5703: PUSH
5704: LD_INT 1
5706: PLUS
5707: PPUSH
5708: LD_VAR 0 7
5712: PUSH
5713: LD_VAR 0 9
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PPUSH
5722: CALL_OW 2
5726: ST_TO_ADDR
5727: GO 5809
// for j = 1 to result do
5729: LD_ADDR_VAR 0 8
5733: PUSH
5734: DOUBLE
5735: LD_INT 1
5737: DEC
5738: ST_TO_ADDR
5739: LD_VAR 0 6
5743: PUSH
5744: FOR_TO
5745: IFFALSE 5807
// begin if tmp < result [ j ] [ 2 ] then
5747: LD_VAR 0 9
5751: PUSH
5752: LD_VAR 0 6
5756: PUSH
5757: LD_VAR 0 8
5761: ARRAY
5762: PUSH
5763: LD_INT 2
5765: ARRAY
5766: LESS
5767: IFFALSE 5805
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5769: LD_ADDR_VAR 0 6
5773: PUSH
5774: LD_VAR 0 6
5778: PPUSH
5779: LD_VAR 0 8
5783: PPUSH
5784: LD_VAR 0 7
5788: PUSH
5789: LD_VAR 0 9
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 2
5802: ST_TO_ADDR
// break ;
5803: GO 5807
// end ; end ;
5805: GO 5744
5807: POP
5808: POP
// end ; end ;
5809: GO 5608
5811: POP
5812: POP
// if result and not asc then
5813: LD_VAR 0 6
5817: PUSH
5818: LD_VAR 0 4
5822: NOT
5823: AND
5824: IFFALSE 5899
// begin tmp := result ;
5826: LD_ADDR_VAR 0 9
5830: PUSH
5831: LD_VAR 0 6
5835: ST_TO_ADDR
// for i = tmp downto 1 do
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: DOUBLE
5842: LD_VAR 0 9
5846: INC
5847: ST_TO_ADDR
5848: LD_INT 1
5850: PUSH
5851: FOR_DOWNTO
5852: IFFALSE 5897
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 6
5863: PPUSH
5864: LD_VAR 0 9
5868: PUSH
5869: LD_VAR 0 7
5873: MINUS
5874: PUSH
5875: LD_INT 1
5877: PLUS
5878: PPUSH
5879: LD_VAR 0 9
5883: PUSH
5884: LD_VAR 0 7
5888: ARRAY
5889: PPUSH
5890: CALL_OW 1
5894: ST_TO_ADDR
5895: GO 5851
5897: POP
5898: POP
// end ; tmp := [ ] ;
5899: LD_ADDR_VAR 0 9
5903: PUSH
5904: EMPTY
5905: ST_TO_ADDR
// if mode then
5906: LD_VAR 0 5
5910: IFFALSE 5979
// begin for i = 1 to result do
5912: LD_ADDR_VAR 0 7
5916: PUSH
5917: DOUBLE
5918: LD_INT 1
5920: DEC
5921: ST_TO_ADDR
5922: LD_VAR 0 6
5926: PUSH
5927: FOR_TO
5928: IFFALSE 5967
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
5930: LD_ADDR_VAR 0 9
5934: PUSH
5935: LD_VAR 0 9
5939: PPUSH
5940: LD_VAR 0 7
5944: PPUSH
5945: LD_VAR 0 6
5949: PUSH
5950: LD_VAR 0 7
5954: ARRAY
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 1
5964: ST_TO_ADDR
5965: GO 5927
5967: POP
5968: POP
// result := tmp ;
5969: LD_ADDR_VAR 0 6
5973: PUSH
5974: LD_VAR 0 9
5978: ST_TO_ADDR
// end ; end ;
5979: LD_VAR 0 6
5983: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
5992: LD_ADDR_VAR 0 5
5996: PUSH
5997: LD_INT 0
5999: PUSH
6000: LD_INT 0
6002: PUSH
6003: LD_INT 0
6005: PUSH
6006: EMPTY
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: ST_TO_ADDR
// if not x or not y then
6014: LD_VAR 0 2
6018: NOT
6019: PUSH
6020: LD_VAR 0 3
6024: NOT
6025: OR
6026: IFFALSE 6030
// exit ;
6028: GO 7680
// if not range then
6030: LD_VAR 0 4
6034: NOT
6035: IFFALSE 6045
// range := 10 ;
6037: LD_ADDR_VAR 0 4
6041: PUSH
6042: LD_INT 10
6044: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6045: LD_ADDR_VAR 0 8
6049: PUSH
6050: LD_INT 81
6052: PUSH
6053: LD_VAR 0 1
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 92
6064: PUSH
6065: LD_VAR 0 2
6069: PUSH
6070: LD_VAR 0 3
6074: PUSH
6075: LD_VAR 0 4
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: LD_INT 21
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: PPUSH
6108: CALL_OW 69
6112: ST_TO_ADDR
// if not tmp then
6113: LD_VAR 0 8
6117: NOT
6118: IFFALSE 6122
// exit ;
6120: GO 7680
// for i in tmp do
6122: LD_ADDR_VAR 0 6
6126: PUSH
6127: LD_VAR 0 8
6131: PUSH
6132: FOR_IN
6133: IFFALSE 7655
// begin points := [ 0 , 0 , 0 ] ;
6135: LD_ADDR_VAR 0 9
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
// bpoints := 1 ;
6154: LD_ADDR_VAR 0 10
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6162: LD_VAR 0 6
6166: PPUSH
6167: CALL_OW 247
6171: PUSH
6172: LD_INT 1
6174: DOUBLE
6175: EQUAL
6176: IFTRUE 6180
6178: GO 6758
6180: POP
// begin if GetClass ( i ) = 1 then
6181: LD_VAR 0 6
6185: PPUSH
6186: CALL_OW 257
6190: PUSH
6191: LD_INT 1
6193: EQUAL
6194: IFFALSE 6215
// points := [ 10 , 5 , 3 ] ;
6196: LD_ADDR_VAR 0 9
6200: PUSH
6201: LD_INT 10
6203: PUSH
6204: LD_INT 5
6206: PUSH
6207: LD_INT 3
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6215: LD_VAR 0 6
6219: PPUSH
6220: CALL_OW 257
6224: PUSH
6225: LD_INT 2
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: IN
6239: IFFALSE 6260
// points := [ 3 , 2 , 1 ] ;
6241: LD_ADDR_VAR 0 9
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 1
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6260: LD_VAR 0 6
6264: PPUSH
6265: CALL_OW 257
6269: PUSH
6270: LD_INT 5
6272: EQUAL
6273: IFFALSE 6294
// points := [ 130 , 5 , 2 ] ;
6275: LD_ADDR_VAR 0 9
6279: PUSH
6280: LD_INT 130
6282: PUSH
6283: LD_INT 5
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6294: LD_VAR 0 6
6298: PPUSH
6299: CALL_OW 257
6303: PUSH
6304: LD_INT 8
6306: EQUAL
6307: IFFALSE 6328
// points := [ 35 , 35 , 30 ] ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_INT 35
6316: PUSH
6317: LD_INT 35
6319: PUSH
6320: LD_INT 30
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6328: LD_VAR 0 6
6332: PPUSH
6333: CALL_OW 257
6337: PUSH
6338: LD_INT 9
6340: EQUAL
6341: IFFALSE 6362
// points := [ 20 , 55 , 40 ] ;
6343: LD_ADDR_VAR 0 9
6347: PUSH
6348: LD_INT 20
6350: PUSH
6351: LD_INT 55
6353: PUSH
6354: LD_INT 40
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6362: LD_VAR 0 6
6366: PPUSH
6367: CALL_OW 257
6371: PUSH
6372: LD_INT 12
6374: PUSH
6375: LD_INT 16
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: IN
6382: IFFALSE 6403
// points := [ 5 , 3 , 2 ] ;
6384: LD_ADDR_VAR 0 9
6388: PUSH
6389: LD_INT 5
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6403: LD_VAR 0 6
6407: PPUSH
6408: CALL_OW 257
6412: PUSH
6413: LD_INT 17
6415: EQUAL
6416: IFFALSE 6437
// points := [ 100 , 50 , 75 ] ;
6418: LD_ADDR_VAR 0 9
6422: PUSH
6423: LD_INT 100
6425: PUSH
6426: LD_INT 50
6428: PUSH
6429: LD_INT 75
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6437: LD_VAR 0 6
6441: PPUSH
6442: CALL_OW 257
6446: PUSH
6447: LD_INT 15
6449: EQUAL
6450: IFFALSE 6471
// points := [ 10 , 5 , 3 ] ;
6452: LD_ADDR_VAR 0 9
6456: PUSH
6457: LD_INT 10
6459: PUSH
6460: LD_INT 5
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6471: LD_VAR 0 6
6475: PPUSH
6476: CALL_OW 257
6480: PUSH
6481: LD_INT 14
6483: EQUAL
6484: IFFALSE 6505
// points := [ 10 , 0 , 0 ] ;
6486: LD_ADDR_VAR 0 9
6490: PUSH
6491: LD_INT 10
6493: PUSH
6494: LD_INT 0
6496: PUSH
6497: LD_INT 0
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6505: LD_VAR 0 6
6509: PPUSH
6510: CALL_OW 257
6514: PUSH
6515: LD_INT 11
6517: EQUAL
6518: IFFALSE 6539
// points := [ 30 , 10 , 5 ] ;
6520: LD_ADDR_VAR 0 9
6524: PUSH
6525: LD_INT 30
6527: PUSH
6528: LD_INT 10
6530: PUSH
6531: LD_INT 5
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6539: LD_VAR 0 1
6543: PPUSH
6544: LD_INT 5
6546: PPUSH
6547: CALL_OW 321
6551: PUSH
6552: LD_INT 2
6554: EQUAL
6555: IFFALSE 6572
// bpoints := bpoints * 1.8 ;
6557: LD_ADDR_VAR 0 10
6561: PUSH
6562: LD_VAR 0 10
6566: PUSH
6567: LD_REAL  1.80000000000000E+0000
6570: MUL
6571: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6572: LD_VAR 0 6
6576: PPUSH
6577: CALL_OW 257
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: LD_INT 3
6590: PUSH
6591: LD_INT 4
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: IN
6600: PUSH
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_INT 51
6608: PPUSH
6609: CALL_OW 321
6613: PUSH
6614: LD_INT 2
6616: EQUAL
6617: AND
6618: IFFALSE 6635
// bpoints := bpoints * 1.2 ;
6620: LD_ADDR_VAR 0 10
6624: PUSH
6625: LD_VAR 0 10
6629: PUSH
6630: LD_REAL  1.20000000000000E+0000
6633: MUL
6634: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6635: LD_VAR 0 6
6639: PPUSH
6640: CALL_OW 257
6644: PUSH
6645: LD_INT 5
6647: PUSH
6648: LD_INT 7
6650: PUSH
6651: LD_INT 9
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: IN
6659: PUSH
6660: LD_VAR 0 1
6664: PPUSH
6665: LD_INT 52
6667: PPUSH
6668: CALL_OW 321
6672: PUSH
6673: LD_INT 2
6675: EQUAL
6676: AND
6677: IFFALSE 6694
// bpoints := bpoints * 1.5 ;
6679: LD_ADDR_VAR 0 10
6683: PUSH
6684: LD_VAR 0 10
6688: PUSH
6689: LD_REAL  1.50000000000000E+0000
6692: MUL
6693: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6694: LD_VAR 0 1
6698: PPUSH
6699: LD_INT 66
6701: PPUSH
6702: CALL_OW 321
6706: PUSH
6707: LD_INT 2
6709: EQUAL
6710: IFFALSE 6727
// bpoints := bpoints * 1.1 ;
6712: LD_ADDR_VAR 0 10
6716: PUSH
6717: LD_VAR 0 10
6721: PUSH
6722: LD_REAL  1.10000000000000E+0000
6725: MUL
6726: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6727: LD_ADDR_VAR 0 10
6731: PUSH
6732: LD_VAR 0 10
6736: PUSH
6737: LD_VAR 0 6
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 259
6749: PUSH
6750: LD_REAL  1.15000000000000E+0000
6753: MUL
6754: MUL
6755: ST_TO_ADDR
// end ; unit_vehicle :
6756: GO 7584
6758: LD_INT 2
6760: DOUBLE
6761: EQUAL
6762: IFTRUE 6766
6764: GO 7572
6766: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6767: LD_VAR 0 6
6771: PPUSH
6772: CALL_OW 264
6776: PUSH
6777: LD_INT 2
6779: PUSH
6780: LD_INT 42
6782: PUSH
6783: LD_INT 24
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: IN
6791: IFFALSE 6812
// points := [ 25 , 5 , 3 ] ;
6793: LD_ADDR_VAR 0 9
6797: PUSH
6798: LD_INT 25
6800: PUSH
6801: LD_INT 5
6803: PUSH
6804: LD_INT 3
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6812: LD_VAR 0 6
6816: PPUSH
6817: CALL_OW 264
6821: PUSH
6822: LD_INT 4
6824: PUSH
6825: LD_INT 43
6827: PUSH
6828: LD_INT 25
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: IN
6836: IFFALSE 6857
// points := [ 40 , 15 , 5 ] ;
6838: LD_ADDR_VAR 0 9
6842: PUSH
6843: LD_INT 40
6845: PUSH
6846: LD_INT 15
6848: PUSH
6849: LD_INT 5
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6857: LD_VAR 0 6
6861: PPUSH
6862: CALL_OW 264
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: LD_INT 23
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: IN
6877: IFFALSE 6898
// points := [ 7 , 25 , 8 ] ;
6879: LD_ADDR_VAR 0 9
6883: PUSH
6884: LD_INT 7
6886: PUSH
6887: LD_INT 25
6889: PUSH
6890: LD_INT 8
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
6898: LD_VAR 0 6
6902: PPUSH
6903: CALL_OW 264
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 27
6913: PUSH
6914: LD_INT 44
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: IN
6922: IFFALSE 6943
// points := [ 14 , 50 , 16 ] ;
6924: LD_ADDR_VAR 0 9
6928: PUSH
6929: LD_INT 14
6931: PUSH
6932: LD_INT 50
6934: PUSH
6935: LD_INT 16
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
6943: LD_VAR 0 6
6947: PPUSH
6948: CALL_OW 264
6952: PUSH
6953: LD_INT 6
6955: PUSH
6956: LD_INT 46
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: IN
6963: IFFALSE 6984
// points := [ 32 , 120 , 70 ] ;
6965: LD_ADDR_VAR 0 9
6969: PUSH
6970: LD_INT 32
6972: PUSH
6973: LD_INT 120
6975: PUSH
6976: LD_INT 70
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
6984: LD_VAR 0 6
6988: PPUSH
6989: CALL_OW 264
6993: PUSH
6994: LD_INT 7
6996: PUSH
6997: LD_INT 28
6999: PUSH
7000: LD_INT 45
7002: PUSH
7003: LD_INT 92
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: IN
7012: IFFALSE 7033
// points := [ 35 , 20 , 45 ] ;
7014: LD_ADDR_VAR 0 9
7018: PUSH
7019: LD_INT 35
7021: PUSH
7022: LD_INT 20
7024: PUSH
7025: LD_INT 45
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7033: LD_VAR 0 6
7037: PPUSH
7038: CALL_OW 264
7042: PUSH
7043: LD_INT 47
7045: PUSH
7046: EMPTY
7047: LIST
7048: IN
7049: IFFALSE 7070
// points := [ 67 , 45 , 75 ] ;
7051: LD_ADDR_VAR 0 9
7055: PUSH
7056: LD_INT 67
7058: PUSH
7059: LD_INT 45
7061: PUSH
7062: LD_INT 75
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7070: LD_VAR 0 6
7074: PPUSH
7075: CALL_OW 264
7079: PUSH
7080: LD_INT 26
7082: PUSH
7083: EMPTY
7084: LIST
7085: IN
7086: IFFALSE 7107
// points := [ 120 , 30 , 80 ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: LD_INT 120
7095: PUSH
7096: LD_INT 30
7098: PUSH
7099: LD_INT 80
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7107: LD_VAR 0 6
7111: PPUSH
7112: CALL_OW 264
7116: PUSH
7117: LD_INT 22
7119: PUSH
7120: EMPTY
7121: LIST
7122: IN
7123: IFFALSE 7144
// points := [ 40 , 1 , 1 ] ;
7125: LD_ADDR_VAR 0 9
7129: PUSH
7130: LD_INT 40
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: LD_INT 1
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7144: LD_VAR 0 6
7148: PPUSH
7149: CALL_OW 264
7153: PUSH
7154: LD_INT 29
7156: PUSH
7157: EMPTY
7158: LIST
7159: IN
7160: IFFALSE 7181
// points := [ 70 , 200 , 400 ] ;
7162: LD_ADDR_VAR 0 9
7166: PUSH
7167: LD_INT 70
7169: PUSH
7170: LD_INT 200
7172: PUSH
7173: LD_INT 400
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7181: LD_VAR 0 6
7185: PPUSH
7186: CALL_OW 264
7190: PUSH
7191: LD_INT 14
7193: PUSH
7194: LD_INT 53
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: IN
7201: IFFALSE 7222
// points := [ 40 , 10 , 20 ] ;
7203: LD_ADDR_VAR 0 9
7207: PUSH
7208: LD_INT 40
7210: PUSH
7211: LD_INT 10
7213: PUSH
7214: LD_INT 20
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7222: LD_VAR 0 6
7226: PPUSH
7227: CALL_OW 264
7231: PUSH
7232: LD_INT 9
7234: PUSH
7235: EMPTY
7236: LIST
7237: IN
7238: IFFALSE 7259
// points := [ 5 , 70 , 20 ] ;
7240: LD_ADDR_VAR 0 9
7244: PUSH
7245: LD_INT 5
7247: PUSH
7248: LD_INT 70
7250: PUSH
7251: LD_INT 20
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7259: LD_VAR 0 6
7263: PPUSH
7264: CALL_OW 264
7268: PUSH
7269: LD_INT 10
7271: PUSH
7272: EMPTY
7273: LIST
7274: IN
7275: IFFALSE 7296
// points := [ 35 , 110 , 70 ] ;
7277: LD_ADDR_VAR 0 9
7281: PUSH
7282: LD_INT 35
7284: PUSH
7285: LD_INT 110
7287: PUSH
7288: LD_INT 70
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7296: LD_VAR 0 6
7300: PPUSH
7301: CALL_OW 265
7305: PUSH
7306: LD_INT 25
7308: EQUAL
7309: IFFALSE 7330
// points := [ 80 , 65 , 100 ] ;
7311: LD_ADDR_VAR 0 9
7315: PUSH
7316: LD_INT 80
7318: PUSH
7319: LD_INT 65
7321: PUSH
7322: LD_INT 100
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7330: LD_VAR 0 6
7334: PPUSH
7335: CALL_OW 263
7339: PUSH
7340: LD_INT 1
7342: EQUAL
7343: IFFALSE 7378
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7345: LD_ADDR_VAR 0 10
7349: PUSH
7350: LD_VAR 0 10
7354: PUSH
7355: LD_VAR 0 6
7359: PPUSH
7360: CALL_OW 311
7364: PPUSH
7365: LD_INT 3
7367: PPUSH
7368: CALL_OW 259
7372: PUSH
7373: LD_INT 4
7375: MUL
7376: MUL
7377: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7378: LD_VAR 0 6
7382: PPUSH
7383: CALL_OW 263
7387: PUSH
7388: LD_INT 2
7390: EQUAL
7391: IFFALSE 7442
// begin j := IsControledBy ( i ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_VAR 0 6
7402: PPUSH
7403: CALL_OW 312
7407: ST_TO_ADDR
// if j then
7408: LD_VAR 0 7
7412: IFFALSE 7442
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7414: LD_ADDR_VAR 0 10
7418: PUSH
7419: LD_VAR 0 10
7423: PUSH
7424: LD_VAR 0 7
7428: PPUSH
7429: LD_INT 3
7431: PPUSH
7432: CALL_OW 259
7436: PUSH
7437: LD_INT 3
7439: MUL
7440: MUL
7441: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7442: LD_VAR 0 6
7446: PPUSH
7447: CALL_OW 264
7451: PUSH
7452: LD_INT 5
7454: PUSH
7455: LD_INT 6
7457: PUSH
7458: LD_INT 46
7460: PUSH
7461: LD_INT 44
7463: PUSH
7464: LD_INT 47
7466: PUSH
7467: LD_INT 45
7469: PUSH
7470: LD_INT 28
7472: PUSH
7473: LD_INT 7
7475: PUSH
7476: LD_INT 27
7478: PUSH
7479: LD_INT 29
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: IN
7494: PUSH
7495: LD_VAR 0 1
7499: PPUSH
7500: LD_INT 52
7502: PPUSH
7503: CALL_OW 321
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: AND
7512: IFFALSE 7529
// bpoints := bpoints * 1.2 ;
7514: LD_ADDR_VAR 0 10
7518: PUSH
7519: LD_VAR 0 10
7523: PUSH
7524: LD_REAL  1.20000000000000E+0000
7527: MUL
7528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7529: LD_VAR 0 6
7533: PPUSH
7534: CALL_OW 264
7538: PUSH
7539: LD_INT 6
7541: PUSH
7542: LD_INT 46
7544: PUSH
7545: LD_INT 47
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: IN
7553: IFFALSE 7570
// bpoints := bpoints * 1.2 ;
7555: LD_ADDR_VAR 0 10
7559: PUSH
7560: LD_VAR 0 10
7564: PUSH
7565: LD_REAL  1.20000000000000E+0000
7568: MUL
7569: ST_TO_ADDR
// end ; unit_building :
7570: GO 7584
7572: LD_INT 3
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7583
7580: POP
// ; end ;
7581: GO 7584
7583: POP
// for j = 1 to 3 do
7584: LD_ADDR_VAR 0 7
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_INT 3
7596: PUSH
7597: FOR_TO
7598: IFFALSE 7651
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7600: LD_ADDR_VAR 0 5
7604: PUSH
7605: LD_VAR 0 5
7609: PPUSH
7610: LD_VAR 0 7
7614: PPUSH
7615: LD_VAR 0 5
7619: PUSH
7620: LD_VAR 0 7
7624: ARRAY
7625: PUSH
7626: LD_VAR 0 9
7630: PUSH
7631: LD_VAR 0 7
7635: ARRAY
7636: PUSH
7637: LD_VAR 0 10
7641: MUL
7642: PLUS
7643: PPUSH
7644: CALL_OW 1
7648: ST_TO_ADDR
7649: GO 7597
7651: POP
7652: POP
// end ;
7653: GO 6132
7655: POP
7656: POP
// result := Replace ( result , 4 , tmp ) ;
7657: LD_ADDR_VAR 0 5
7661: PUSH
7662: LD_VAR 0 5
7666: PPUSH
7667: LD_INT 4
7669: PPUSH
7670: LD_VAR 0 8
7674: PPUSH
7675: CALL_OW 1
7679: ST_TO_ADDR
// end ;
7680: LD_VAR 0 5
7684: RET
// export function DangerAtRange ( unit , range ) ; begin
7685: LD_INT 0
7687: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: LD_VAR 0 1
7697: PPUSH
7698: CALL_OW 255
7702: PPUSH
7703: LD_VAR 0 1
7707: PPUSH
7708: CALL_OW 250
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 251
7722: PPUSH
7723: LD_VAR 0 2
7727: PPUSH
7728: CALL 5984 0 4
7732: ST_TO_ADDR
// end ;
7733: LD_VAR 0 3
7737: RET
// export function DangerInArea ( side , area ) ; begin
7738: LD_INT 0
7740: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7741: LD_ADDR_VAR 0 3
7745: PUSH
7746: LD_VAR 0 2
7750: PPUSH
7751: LD_INT 81
7753: PUSH
7754: LD_VAR 0 1
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PPUSH
7763: CALL_OW 70
7767: ST_TO_ADDR
// end ;
7768: LD_VAR 0 3
7772: RET
// export function IsExtension ( b ) ; begin
7773: LD_INT 0
7775: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7776: LD_ADDR_VAR 0 2
7780: PUSH
7781: LD_VAR 0 1
7785: PUSH
7786: LD_INT 23
7788: PUSH
7789: LD_INT 20
7791: PUSH
7792: LD_INT 22
7794: PUSH
7795: LD_INT 17
7797: PUSH
7798: LD_INT 24
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 19
7806: PUSH
7807: LD_INT 16
7809: PUSH
7810: LD_INT 25
7812: PUSH
7813: LD_INT 18
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: IN
7828: ST_TO_ADDR
// end ;
7829: LD_VAR 0 2
7833: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7834: LD_INT 0
7836: PPUSH
7837: PPUSH
7838: PPUSH
// result := [ ] ;
7839: LD_ADDR_VAR 0 4
7843: PUSH
7844: EMPTY
7845: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7846: LD_ADDR_VAR 0 5
7850: PUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: LD_INT 21
7858: PUSH
7859: LD_INT 3
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 70
7870: ST_TO_ADDR
// if not tmp then
7871: LD_VAR 0 5
7875: NOT
7876: IFFALSE 7880
// exit ;
7878: GO 7944
// if checkLink then
7880: LD_VAR 0 3
7884: IFFALSE 7934
// begin for i in tmp do
7886: LD_ADDR_VAR 0 6
7890: PUSH
7891: LD_VAR 0 5
7895: PUSH
7896: FOR_IN
7897: IFFALSE 7932
// if GetBase ( i ) <> base then
7899: LD_VAR 0 6
7903: PPUSH
7904: CALL_OW 274
7908: PUSH
7909: LD_VAR 0 1
7913: NONEQUAL
7914: IFFALSE 7930
// ComLinkToBase ( base , i ) ;
7916: LD_VAR 0 1
7920: PPUSH
7921: LD_VAR 0 6
7925: PPUSH
7926: CALL_OW 169
7930: GO 7896
7932: POP
7933: POP
// end ; result := tmp ;
7934: LD_ADDR_VAR 0 4
7938: PUSH
7939: LD_VAR 0 5
7943: ST_TO_ADDR
// end ;
7944: LD_VAR 0 4
7948: RET
// export function ComComplete ( units , b ) ; var i ; begin
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
// if not units then
7953: LD_VAR 0 1
7957: NOT
7958: IFFALSE 7962
// exit ;
7960: GO 8052
// for i in units do
7962: LD_ADDR_VAR 0 4
7966: PUSH
7967: LD_VAR 0 1
7971: PUSH
7972: FOR_IN
7973: IFFALSE 8050
// if BuildingStatus ( b ) = bs_build then
7975: LD_VAR 0 2
7979: PPUSH
7980: CALL_OW 461
7984: PUSH
7985: LD_INT 1
7987: EQUAL
7988: IFFALSE 8048
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
7990: LD_VAR 0 4
7994: PPUSH
7995: LD_STRING h
7997: PUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: CALL_OW 250
8007: PUSH
8008: LD_VAR 0 2
8012: PPUSH
8013: CALL_OW 251
8017: PUSH
8018: LD_VAR 0 2
8022: PUSH
8023: LD_INT 0
8025: PUSH
8026: LD_INT 0
8028: PUSH
8029: LD_INT 0
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: PUSH
8041: EMPTY
8042: LIST
8043: PPUSH
8044: CALL_OW 446
8048: GO 7972
8050: POP
8051: POP
// end ;
8052: LD_VAR 0 3
8056: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8057: LD_INT 0
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
8064: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8065: LD_VAR 0 1
8069: NOT
8070: PUSH
8071: LD_VAR 0 1
8075: PPUSH
8076: CALL_OW 263
8080: PUSH
8081: LD_INT 2
8083: NONEQUAL
8084: OR
8085: IFFALSE 8089
// exit ;
8087: GO 8405
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8089: LD_ADDR_VAR 0 6
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 30
8116: PUSH
8117: LD_INT 36
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 34
8126: PUSH
8127: LD_INT 31
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 69
8147: ST_TO_ADDR
// if not tmp then
8148: LD_VAR 0 6
8152: NOT
8153: IFFALSE 8157
// exit ;
8155: GO 8405
// result := [ ] ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: EMPTY
8163: ST_TO_ADDR
// for i in tmp do
8164: LD_ADDR_VAR 0 3
8168: PUSH
8169: LD_VAR 0 6
8173: PUSH
8174: FOR_IN
8175: IFFALSE 8246
// begin t := UnitsInside ( i ) ;
8177: LD_ADDR_VAR 0 4
8181: PUSH
8182: LD_VAR 0 3
8186: PPUSH
8187: CALL_OW 313
8191: ST_TO_ADDR
// if t then
8192: LD_VAR 0 4
8196: IFFALSE 8244
// for j in t do
8198: LD_ADDR_VAR 0 7
8202: PUSH
8203: LD_VAR 0 4
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8242
// result := Replace ( result , result + 1 , j ) ;
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_VAR 0 2
8220: PPUSH
8221: LD_VAR 0 2
8225: PUSH
8226: LD_INT 1
8228: PLUS
8229: PPUSH
8230: LD_VAR 0 7
8234: PPUSH
8235: CALL_OW 1
8239: ST_TO_ADDR
8240: GO 8208
8242: POP
8243: POP
// end ;
8244: GO 8174
8246: POP
8247: POP
// if not result then
8248: LD_VAR 0 2
8252: NOT
8253: IFFALSE 8257
// exit ;
8255: GO 8405
// mech := result [ 1 ] ;
8257: LD_ADDR_VAR 0 5
8261: PUSH
8262: LD_VAR 0 2
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: ST_TO_ADDR
// if result > 1 then
8271: LD_VAR 0 2
8275: PUSH
8276: LD_INT 1
8278: GREATER
8279: IFFALSE 8391
// begin for i = 2 to result do
8281: LD_ADDR_VAR 0 3
8285: PUSH
8286: DOUBLE
8287: LD_INT 2
8289: DEC
8290: ST_TO_ADDR
8291: LD_VAR 0 2
8295: PUSH
8296: FOR_TO
8297: IFFALSE 8389
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8299: LD_ADDR_VAR 0 4
8303: PUSH
8304: LD_VAR 0 2
8308: PUSH
8309: LD_VAR 0 3
8313: ARRAY
8314: PPUSH
8315: LD_INT 3
8317: PPUSH
8318: CALL_OW 259
8322: PUSH
8323: LD_VAR 0 2
8327: PUSH
8328: LD_VAR 0 3
8332: ARRAY
8333: PPUSH
8334: CALL_OW 432
8338: MINUS
8339: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8340: LD_VAR 0 4
8344: PUSH
8345: LD_VAR 0 5
8349: PPUSH
8350: LD_INT 3
8352: PPUSH
8353: CALL_OW 259
8357: PUSH
8358: LD_VAR 0 5
8362: PPUSH
8363: CALL_OW 432
8367: MINUS
8368: GREATEREQUAL
8369: IFFALSE 8387
// mech := result [ i ] ;
8371: LD_ADDR_VAR 0 5
8375: PUSH
8376: LD_VAR 0 2
8380: PUSH
8381: LD_VAR 0 3
8385: ARRAY
8386: ST_TO_ADDR
// end ;
8387: GO 8296
8389: POP
8390: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 5
8400: PPUSH
8401: CALL_OW 135
// end ;
8405: LD_VAR 0 2
8409: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
8414: PPUSH
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
8419: PPUSH
8420: PPUSH
8421: PPUSH
8422: PPUSH
8423: PPUSH
8424: PPUSH
// result := [ ] ;
8425: LD_ADDR_VAR 0 7
8429: PUSH
8430: EMPTY
8431: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 266
8441: PUSH
8442: LD_INT 0
8444: PUSH
8445: LD_INT 1
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: IN
8452: NOT
8453: IFFALSE 8457
// exit ;
8455: GO 10091
// if name then
8457: LD_VAR 0 3
8461: IFFALSE 8477
// SetBName ( base_dep , name ) ;
8463: LD_VAR 0 1
8467: PPUSH
8468: LD_VAR 0 3
8472: PPUSH
8473: CALL_OW 500
// base := GetBase ( base_dep ) ;
8477: LD_ADDR_VAR 0 15
8481: PUSH
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 274
8491: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8492: LD_ADDR_VAR 0 16
8496: PUSH
8497: LD_VAR 0 1
8501: PPUSH
8502: CALL_OW 255
8506: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8507: LD_ADDR_VAR 0 17
8511: PUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 248
8521: ST_TO_ADDR
// if sources then
8522: LD_VAR 0 5
8526: IFFALSE 8573
// for i = 1 to 3 do
8528: LD_ADDR_VAR 0 8
8532: PUSH
8533: DOUBLE
8534: LD_INT 1
8536: DEC
8537: ST_TO_ADDR
8538: LD_INT 3
8540: PUSH
8541: FOR_TO
8542: IFFALSE 8571
// AddResourceType ( base , i , sources [ i ] ) ;
8544: LD_VAR 0 15
8548: PPUSH
8549: LD_VAR 0 8
8553: PPUSH
8554: LD_VAR 0 5
8558: PUSH
8559: LD_VAR 0 8
8563: ARRAY
8564: PPUSH
8565: CALL_OW 276
8569: GO 8541
8571: POP
8572: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8573: LD_ADDR_VAR 0 18
8577: PUSH
8578: LD_VAR 0 15
8582: PPUSH
8583: LD_VAR 0 2
8587: PPUSH
8588: LD_INT 1
8590: PPUSH
8591: CALL 7834 0 3
8595: ST_TO_ADDR
// InitHc ;
8596: CALL_OW 19
// InitUc ;
8600: CALL_OW 18
// uc_side := side ;
8604: LD_ADDR_OWVAR 20
8608: PUSH
8609: LD_VAR 0 16
8613: ST_TO_ADDR
// uc_nation := nation ;
8614: LD_ADDR_OWVAR 21
8618: PUSH
8619: LD_VAR 0 17
8623: ST_TO_ADDR
// if buildings then
8624: LD_VAR 0 18
8628: IFFALSE 9950
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8630: LD_ADDR_VAR 0 19
8634: PUSH
8635: LD_VAR 0 18
8639: PPUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 30
8645: PUSH
8646: LD_INT 29
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 30
8655: PUSH
8656: LD_INT 30
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 72
8672: ST_TO_ADDR
// if tmp then
8673: LD_VAR 0 19
8677: IFFALSE 8725
// for i in tmp do
8679: LD_ADDR_VAR 0 8
8683: PUSH
8684: LD_VAR 0 19
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8723
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8692: LD_VAR 0 8
8696: PPUSH
8697: CALL_OW 250
8701: PPUSH
8702: LD_VAR 0 8
8706: PPUSH
8707: CALL_OW 251
8711: PPUSH
8712: LD_VAR 0 16
8716: PPUSH
8717: CALL_OW 441
8721: GO 8689
8723: POP
8724: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8725: LD_VAR 0 18
8729: PPUSH
8730: LD_INT 2
8732: PUSH
8733: LD_INT 30
8735: PUSH
8736: LD_INT 32
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 30
8745: PUSH
8746: LD_INT 33
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 72
8762: IFFALSE 8850
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8764: LD_ADDR_VAR 0 8
8768: PUSH
8769: LD_VAR 0 18
8773: PPUSH
8774: LD_INT 2
8776: PUSH
8777: LD_INT 30
8779: PUSH
8780: LD_INT 32
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: LD_INT 30
8789: PUSH
8790: LD_INT 33
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PPUSH
8802: CALL_OW 72
8806: PUSH
8807: FOR_IN
8808: IFFALSE 8848
// begin if not GetBWeapon ( i ) then
8810: LD_VAR 0 8
8814: PPUSH
8815: CALL_OW 269
8819: NOT
8820: IFFALSE 8846
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8822: LD_VAR 0 8
8826: PPUSH
8827: LD_VAR 0 8
8831: PPUSH
8832: LD_VAR 0 2
8836: PPUSH
8837: CALL 10096 0 2
8841: PPUSH
8842: CALL_OW 431
// end ;
8846: GO 8807
8848: POP
8849: POP
// end ; for i = 1 to personel do
8850: LD_ADDR_VAR 0 8
8854: PUSH
8855: DOUBLE
8856: LD_INT 1
8858: DEC
8859: ST_TO_ADDR
8860: LD_VAR 0 6
8864: PUSH
8865: FOR_TO
8866: IFFALSE 9930
// begin if i > 4 then
8868: LD_VAR 0 8
8872: PUSH
8873: LD_INT 4
8875: GREATER
8876: IFFALSE 8880
// break ;
8878: GO 9930
// case i of 1 :
8880: LD_VAR 0 8
8884: PUSH
8885: LD_INT 1
8887: DOUBLE
8888: EQUAL
8889: IFTRUE 8893
8891: GO 8973
8893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
8894: LD_ADDR_VAR 0 12
8898: PUSH
8899: LD_VAR 0 18
8903: PPUSH
8904: LD_INT 22
8906: PUSH
8907: LD_VAR 0 16
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 58
8918: PUSH
8919: EMPTY
8920: LIST
8921: PUSH
8922: LD_INT 2
8924: PUSH
8925: LD_INT 30
8927: PUSH
8928: LD_INT 32
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PUSH
8935: LD_INT 30
8937: PUSH
8938: LD_INT 4
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 30
8947: PUSH
8948: LD_INT 5
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 72
8970: ST_TO_ADDR
8971: GO 9195
8973: LD_INT 2
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 9043
8981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
8982: LD_ADDR_VAR 0 12
8986: PUSH
8987: LD_VAR 0 18
8991: PPUSH
8992: LD_INT 22
8994: PUSH
8995: LD_VAR 0 16
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: LD_INT 30
9009: PUSH
9010: LD_INT 0
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 30
9019: PUSH
9020: LD_INT 1
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PPUSH
9036: CALL_OW 72
9040: ST_TO_ADDR
9041: GO 9195
9043: LD_INT 3
9045: DOUBLE
9046: EQUAL
9047: IFTRUE 9051
9049: GO 9113
9051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9052: LD_ADDR_VAR 0 12
9056: PUSH
9057: LD_VAR 0 18
9061: PPUSH
9062: LD_INT 22
9064: PUSH
9065: LD_VAR 0 16
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: LD_INT 30
9079: PUSH
9080: LD_INT 2
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 30
9089: PUSH
9090: LD_INT 3
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PPUSH
9106: CALL_OW 72
9110: ST_TO_ADDR
9111: GO 9195
9113: LD_INT 4
9115: DOUBLE
9116: EQUAL
9117: IFTRUE 9121
9119: GO 9194
9121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9122: LD_ADDR_VAR 0 12
9126: PUSH
9127: LD_VAR 0 18
9131: PPUSH
9132: LD_INT 22
9134: PUSH
9135: LD_VAR 0 16
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 2
9146: PUSH
9147: LD_INT 30
9149: PUSH
9150: LD_INT 6
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: LD_INT 30
9159: PUSH
9160: LD_INT 7
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PUSH
9167: LD_INT 30
9169: PUSH
9170: LD_INT 8
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 72
9191: ST_TO_ADDR
9192: GO 9195
9194: POP
// if i = 1 then
9195: LD_VAR 0 8
9199: PUSH
9200: LD_INT 1
9202: EQUAL
9203: IFFALSE 9314
// begin tmp := [ ] ;
9205: LD_ADDR_VAR 0 19
9209: PUSH
9210: EMPTY
9211: ST_TO_ADDR
// for j in f do
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: LD_VAR 0 12
9221: PUSH
9222: FOR_IN
9223: IFFALSE 9296
// if GetBType ( j ) = b_bunker then
9225: LD_VAR 0 9
9229: PPUSH
9230: CALL_OW 266
9234: PUSH
9235: LD_INT 32
9237: EQUAL
9238: IFFALSE 9265
// tmp := Insert ( tmp , 1 , j ) else
9240: LD_ADDR_VAR 0 19
9244: PUSH
9245: LD_VAR 0 19
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_VAR 0 9
9257: PPUSH
9258: CALL_OW 2
9262: ST_TO_ADDR
9263: GO 9294
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9265: LD_ADDR_VAR 0 19
9269: PUSH
9270: LD_VAR 0 19
9274: PPUSH
9275: LD_VAR 0 19
9279: PUSH
9280: LD_INT 1
9282: PLUS
9283: PPUSH
9284: LD_VAR 0 9
9288: PPUSH
9289: CALL_OW 2
9293: ST_TO_ADDR
9294: GO 9222
9296: POP
9297: POP
// if tmp then
9298: LD_VAR 0 19
9302: IFFALSE 9314
// f := tmp ;
9304: LD_ADDR_VAR 0 12
9308: PUSH
9309: LD_VAR 0 19
9313: ST_TO_ADDR
// end ; x := personel [ i ] ;
9314: LD_ADDR_VAR 0 13
9318: PUSH
9319: LD_VAR 0 6
9323: PUSH
9324: LD_VAR 0 8
9328: ARRAY
9329: ST_TO_ADDR
// if x = - 1 then
9330: LD_VAR 0 13
9334: PUSH
9335: LD_INT 1
9337: NEG
9338: EQUAL
9339: IFFALSE 9548
// begin for j in f do
9341: LD_ADDR_VAR 0 9
9345: PUSH
9346: LD_VAR 0 12
9350: PUSH
9351: FOR_IN
9352: IFFALSE 9544
// repeat InitHc ;
9354: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9358: LD_VAR 0 9
9362: PPUSH
9363: CALL_OW 266
9367: PUSH
9368: LD_INT 5
9370: EQUAL
9371: IFFALSE 9441
// begin if UnitsInside ( j ) < 3 then
9373: LD_VAR 0 9
9377: PPUSH
9378: CALL_OW 313
9382: PUSH
9383: LD_INT 3
9385: LESS
9386: IFFALSE 9422
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9388: LD_INT 0
9390: PPUSH
9391: LD_INT 5
9393: PUSH
9394: LD_INT 8
9396: PUSH
9397: LD_INT 9
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_VAR 0 17
9409: ARRAY
9410: PPUSH
9411: LD_VAR 0 4
9415: PPUSH
9416: CALL_OW 380
9420: GO 9439
// PrepareHuman ( false , i , skill ) ;
9422: LD_INT 0
9424: PPUSH
9425: LD_VAR 0 8
9429: PPUSH
9430: LD_VAR 0 4
9434: PPUSH
9435: CALL_OW 380
// end else
9439: GO 9458
// PrepareHuman ( false , i , skill ) ;
9441: LD_INT 0
9443: PPUSH
9444: LD_VAR 0 8
9448: PPUSH
9449: LD_VAR 0 4
9453: PPUSH
9454: CALL_OW 380
// un := CreateHuman ;
9458: LD_ADDR_VAR 0 14
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9468: LD_ADDR_VAR 0 7
9472: PUSH
9473: LD_VAR 0 7
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: LD_VAR 0 14
9485: PPUSH
9486: CALL_OW 2
9490: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9491: LD_VAR 0 14
9495: PPUSH
9496: LD_VAR 0 9
9500: PPUSH
9501: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9505: LD_VAR 0 9
9509: PPUSH
9510: CALL_OW 313
9514: PUSH
9515: LD_INT 6
9517: EQUAL
9518: PUSH
9519: LD_VAR 0 9
9523: PPUSH
9524: CALL_OW 266
9528: PUSH
9529: LD_INT 32
9531: PUSH
9532: LD_INT 31
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: IN
9539: OR
9540: IFFALSE 9354
9542: GO 9351
9544: POP
9545: POP
// end else
9546: GO 9928
// for j = 1 to x do
9548: LD_ADDR_VAR 0 9
9552: PUSH
9553: DOUBLE
9554: LD_INT 1
9556: DEC
9557: ST_TO_ADDR
9558: LD_VAR 0 13
9562: PUSH
9563: FOR_TO
9564: IFFALSE 9926
// begin InitHc ;
9566: CALL_OW 19
// if not f then
9570: LD_VAR 0 12
9574: NOT
9575: IFFALSE 9664
// begin PrepareHuman ( false , i , skill ) ;
9577: LD_INT 0
9579: PPUSH
9580: LD_VAR 0 8
9584: PPUSH
9585: LD_VAR 0 4
9589: PPUSH
9590: CALL_OW 380
// un := CreateHuman ;
9594: LD_ADDR_VAR 0 14
9598: PUSH
9599: CALL_OW 44
9603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9604: LD_ADDR_VAR 0 7
9608: PUSH
9609: LD_VAR 0 7
9613: PPUSH
9614: LD_INT 1
9616: PPUSH
9617: LD_VAR 0 14
9621: PPUSH
9622: CALL_OW 2
9626: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9627: LD_VAR 0 14
9631: PPUSH
9632: LD_VAR 0 1
9636: PPUSH
9637: CALL_OW 250
9641: PPUSH
9642: LD_VAR 0 1
9646: PPUSH
9647: CALL_OW 251
9651: PPUSH
9652: LD_INT 10
9654: PPUSH
9655: LD_INT 0
9657: PPUSH
9658: CALL_OW 50
// continue ;
9662: GO 9563
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9664: LD_VAR 0 12
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PPUSH
9673: CALL_OW 313
9677: PUSH
9678: LD_VAR 0 12
9682: PUSH
9683: LD_INT 1
9685: ARRAY
9686: PPUSH
9687: CALL_OW 266
9691: PUSH
9692: LD_INT 32
9694: PUSH
9695: LD_INT 31
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: IN
9702: AND
9703: PUSH
9704: LD_VAR 0 12
9708: PUSH
9709: LD_INT 1
9711: ARRAY
9712: PPUSH
9713: CALL_OW 313
9717: PUSH
9718: LD_INT 6
9720: EQUAL
9721: OR
9722: IFFALSE 9742
// f := Delete ( f , 1 ) ;
9724: LD_ADDR_VAR 0 12
9728: PUSH
9729: LD_VAR 0 12
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 3
9741: ST_TO_ADDR
// if not f then
9742: LD_VAR 0 12
9746: NOT
9747: IFFALSE 9765
// begin x := x + 2 ;
9749: LD_ADDR_VAR 0 13
9753: PUSH
9754: LD_VAR 0 13
9758: PUSH
9759: LD_INT 2
9761: PLUS
9762: ST_TO_ADDR
// continue ;
9763: GO 9563
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9765: LD_VAR 0 12
9769: PUSH
9770: LD_INT 1
9772: ARRAY
9773: PPUSH
9774: CALL_OW 266
9778: PUSH
9779: LD_INT 5
9781: EQUAL
9782: IFFALSE 9856
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9784: LD_VAR 0 12
9788: PUSH
9789: LD_INT 1
9791: ARRAY
9792: PPUSH
9793: CALL_OW 313
9797: PUSH
9798: LD_INT 3
9800: LESS
9801: IFFALSE 9837
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9803: LD_INT 0
9805: PPUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 8
9811: PUSH
9812: LD_INT 9
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: LD_VAR 0 17
9824: ARRAY
9825: PPUSH
9826: LD_VAR 0 4
9830: PPUSH
9831: CALL_OW 380
9835: GO 9854
// PrepareHuman ( false , i , skill ) ;
9837: LD_INT 0
9839: PPUSH
9840: LD_VAR 0 8
9844: PPUSH
9845: LD_VAR 0 4
9849: PPUSH
9850: CALL_OW 380
// end else
9854: GO 9873
// PrepareHuman ( false , i , skill ) ;
9856: LD_INT 0
9858: PPUSH
9859: LD_VAR 0 8
9863: PPUSH
9864: LD_VAR 0 4
9868: PPUSH
9869: CALL_OW 380
// un := CreateHuman ;
9873: LD_ADDR_VAR 0 14
9877: PUSH
9878: CALL_OW 44
9882: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9883: LD_ADDR_VAR 0 7
9887: PUSH
9888: LD_VAR 0 7
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: LD_VAR 0 14
9900: PPUSH
9901: CALL_OW 2
9905: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
9906: LD_VAR 0 14
9910: PPUSH
9911: LD_VAR 0 12
9915: PUSH
9916: LD_INT 1
9918: ARRAY
9919: PPUSH
9920: CALL_OW 52
// end ;
9924: GO 9563
9926: POP
9927: POP
// end ;
9928: GO 8865
9930: POP
9931: POP
// result := result ^ buildings ;
9932: LD_ADDR_VAR 0 7
9936: PUSH
9937: LD_VAR 0 7
9941: PUSH
9942: LD_VAR 0 18
9946: ADD
9947: ST_TO_ADDR
// end else
9948: GO 10091
// begin for i = 1 to personel do
9950: LD_ADDR_VAR 0 8
9954: PUSH
9955: DOUBLE
9956: LD_INT 1
9958: DEC
9959: ST_TO_ADDR
9960: LD_VAR 0 6
9964: PUSH
9965: FOR_TO
9966: IFFALSE 10089
// begin if i > 4 then
9968: LD_VAR 0 8
9972: PUSH
9973: LD_INT 4
9975: GREATER
9976: IFFALSE 9980
// break ;
9978: GO 10089
// x := personel [ i ] ;
9980: LD_ADDR_VAR 0 13
9984: PUSH
9985: LD_VAR 0 6
9989: PUSH
9990: LD_VAR 0 8
9994: ARRAY
9995: ST_TO_ADDR
// if x = - 1 then
9996: LD_VAR 0 13
10000: PUSH
10001: LD_INT 1
10003: NEG
10004: EQUAL
10005: IFFALSE 10009
// continue ;
10007: GO 9965
// PrepareHuman ( false , i , skill ) ;
10009: LD_INT 0
10011: PPUSH
10012: LD_VAR 0 8
10016: PPUSH
10017: LD_VAR 0 4
10021: PPUSH
10022: CALL_OW 380
// un := CreateHuman ;
10026: LD_ADDR_VAR 0 14
10030: PUSH
10031: CALL_OW 44
10035: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10036: LD_VAR 0 14
10040: PPUSH
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 250
10050: PPUSH
10051: LD_VAR 0 1
10055: PPUSH
10056: CALL_OW 251
10060: PPUSH
10061: LD_INT 10
10063: PPUSH
10064: LD_INT 0
10066: PPUSH
10067: CALL_OW 50
// result := result ^ un ;
10071: LD_ADDR_VAR 0 7
10075: PUSH
10076: LD_VAR 0 7
10080: PUSH
10081: LD_VAR 0 14
10085: ADD
10086: ST_TO_ADDR
// end ;
10087: GO 9965
10089: POP
10090: POP
// end ; end ;
10091: LD_VAR 0 7
10095: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10096: LD_INT 0
10098: PPUSH
10099: PPUSH
10100: PPUSH
10101: PPUSH
10102: PPUSH
10103: PPUSH
10104: PPUSH
10105: PPUSH
10106: PPUSH
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
10113: PPUSH
// result := false ;
10114: LD_ADDR_VAR 0 3
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10122: LD_VAR 0 1
10126: NOT
10127: PUSH
10128: LD_VAR 0 1
10132: PPUSH
10133: CALL_OW 266
10137: PUSH
10138: LD_INT 32
10140: PUSH
10141: LD_INT 33
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: IN
10148: NOT
10149: OR
10150: IFFALSE 10154
// exit ;
10152: GO 11263
// nat := GetNation ( tower ) ;
10154: LD_ADDR_VAR 0 12
10158: PUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: CALL_OW 248
10168: ST_TO_ADDR
// side := GetSide ( tower ) ;
10169: LD_ADDR_VAR 0 16
10173: PUSH
10174: LD_VAR 0 1
10178: PPUSH
10179: CALL_OW 255
10183: ST_TO_ADDR
// x := GetX ( tower ) ;
10184: LD_ADDR_VAR 0 10
10188: PUSH
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 250
10198: ST_TO_ADDR
// y := GetY ( tower ) ;
10199: LD_ADDR_VAR 0 11
10203: PUSH
10204: LD_VAR 0 1
10208: PPUSH
10209: CALL_OW 251
10213: ST_TO_ADDR
// if not x or not y then
10214: LD_VAR 0 10
10218: NOT
10219: PUSH
10220: LD_VAR 0 11
10224: NOT
10225: OR
10226: IFFALSE 10230
// exit ;
10228: GO 11263
// weapon := 0 ;
10230: LD_ADDR_VAR 0 18
10234: PUSH
10235: LD_INT 0
10237: ST_TO_ADDR
// fac_list := [ ] ;
10238: LD_ADDR_VAR 0 17
10242: PUSH
10243: EMPTY
10244: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10245: LD_ADDR_VAR 0 6
10249: PUSH
10250: LD_VAR 0 1
10254: PPUSH
10255: CALL_OW 274
10259: PPUSH
10260: LD_VAR 0 2
10264: PPUSH
10265: LD_INT 0
10267: PPUSH
10268: CALL 7834 0 3
10272: PPUSH
10273: LD_INT 30
10275: PUSH
10276: LD_INT 3
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 72
10287: ST_TO_ADDR
// if not factories then
10288: LD_VAR 0 6
10292: NOT
10293: IFFALSE 10297
// exit ;
10295: GO 11263
// for i in factories do
10297: LD_ADDR_VAR 0 8
10301: PUSH
10302: LD_VAR 0 6
10306: PUSH
10307: FOR_IN
10308: IFFALSE 10333
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10310: LD_ADDR_VAR 0 17
10314: PUSH
10315: LD_VAR 0 17
10319: PUSH
10320: LD_VAR 0 8
10324: PPUSH
10325: CALL_OW 478
10329: UNION
10330: ST_TO_ADDR
10331: GO 10307
10333: POP
10334: POP
// if not fac_list then
10335: LD_VAR 0 17
10339: NOT
10340: IFFALSE 10344
// exit ;
10342: GO 11263
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10344: LD_ADDR_VAR 0 5
10348: PUSH
10349: LD_INT 4
10351: PUSH
10352: LD_INT 5
10354: PUSH
10355: LD_INT 9
10357: PUSH
10358: LD_INT 10
10360: PUSH
10361: LD_INT 6
10363: PUSH
10364: LD_INT 7
10366: PUSH
10367: LD_INT 11
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 27
10381: PUSH
10382: LD_INT 28
10384: PUSH
10385: LD_INT 26
10387: PUSH
10388: LD_INT 30
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 43
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: LD_INT 46
10405: PUSH
10406: LD_INT 45
10408: PUSH
10409: LD_INT 47
10411: PUSH
10412: LD_INT 49
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: LD_VAR 0 12
10432: ARRAY
10433: ST_TO_ADDR
// list := list isect fac_list ;
10434: LD_ADDR_VAR 0 5
10438: PUSH
10439: LD_VAR 0 5
10443: PUSH
10444: LD_VAR 0 17
10448: ISECT
10449: ST_TO_ADDR
// if not list then
10450: LD_VAR 0 5
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 11263
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10459: LD_VAR 0 12
10463: PUSH
10464: LD_INT 3
10466: EQUAL
10467: PUSH
10468: LD_INT 49
10470: PUSH
10471: LD_VAR 0 5
10475: IN
10476: AND
10477: PUSH
10478: LD_INT 31
10480: PPUSH
10481: LD_VAR 0 16
10485: PPUSH
10486: CALL_OW 321
10490: PUSH
10491: LD_INT 2
10493: EQUAL
10494: AND
10495: IFFALSE 10555
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10497: LD_INT 22
10499: PUSH
10500: LD_VAR 0 16
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 35
10511: PUSH
10512: LD_INT 49
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 91
10521: PUSH
10522: LD_VAR 0 1
10526: PUSH
10527: LD_INT 10
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: NOT
10545: IFFALSE 10555
// weapon := ru_time_lapser ;
10547: LD_ADDR_VAR 0 18
10551: PUSH
10552: LD_INT 49
10554: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10555: LD_VAR 0 12
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: LD_INT 2
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: IN
10570: PUSH
10571: LD_INT 11
10573: PUSH
10574: LD_VAR 0 5
10578: IN
10579: PUSH
10580: LD_INT 30
10582: PUSH
10583: LD_VAR 0 5
10587: IN
10588: OR
10589: AND
10590: PUSH
10591: LD_INT 6
10593: PPUSH
10594: LD_VAR 0 16
10598: PPUSH
10599: CALL_OW 321
10603: PUSH
10604: LD_INT 2
10606: EQUAL
10607: AND
10608: IFFALSE 10773
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10610: LD_INT 22
10612: PUSH
10613: LD_VAR 0 16
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: LD_INT 35
10627: PUSH
10628: LD_INT 11
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 35
10637: PUSH
10638: LD_INT 30
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 91
10652: PUSH
10653: LD_VAR 0 1
10657: PUSH
10658: LD_INT 18
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: PPUSH
10671: CALL_OW 69
10675: NOT
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_VAR 0 16
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 30
10694: PUSH
10695: LD_INT 32
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 30
10704: PUSH
10705: LD_INT 33
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 91
10719: PUSH
10720: LD_VAR 0 1
10724: PUSH
10725: LD_INT 12
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PUSH
10746: LD_INT 2
10748: GREATER
10749: AND
10750: IFFALSE 10773
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10752: LD_ADDR_VAR 0 18
10756: PUSH
10757: LD_INT 11
10759: PUSH
10760: LD_INT 30
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_VAR 0 12
10771: ARRAY
10772: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10773: LD_VAR 0 18
10777: NOT
10778: PUSH
10779: LD_INT 40
10781: PPUSH
10782: LD_VAR 0 16
10786: PPUSH
10787: CALL_OW 321
10791: PUSH
10792: LD_INT 2
10794: EQUAL
10795: AND
10796: PUSH
10797: LD_INT 7
10799: PUSH
10800: LD_VAR 0 5
10804: IN
10805: PUSH
10806: LD_INT 28
10808: PUSH
10809: LD_VAR 0 5
10813: IN
10814: OR
10815: PUSH
10816: LD_INT 45
10818: PUSH
10819: LD_VAR 0 5
10823: IN
10824: OR
10825: AND
10826: IFFALSE 11080
// begin hex := GetHexInfo ( x , y ) ;
10828: LD_ADDR_VAR 0 4
10832: PUSH
10833: LD_VAR 0 10
10837: PPUSH
10838: LD_VAR 0 11
10842: PPUSH
10843: CALL_OW 546
10847: ST_TO_ADDR
// if hex [ 1 ] then
10848: LD_VAR 0 4
10852: PUSH
10853: LD_INT 1
10855: ARRAY
10856: IFFALSE 10860
// exit ;
10858: GO 11263
// height := hex [ 2 ] ;
10860: LD_ADDR_VAR 0 15
10864: PUSH
10865: LD_VAR 0 4
10869: PUSH
10870: LD_INT 2
10872: ARRAY
10873: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
10874: LD_ADDR_VAR 0 14
10878: PUSH
10879: LD_INT 0
10881: PUSH
10882: LD_INT 2
10884: PUSH
10885: LD_INT 3
10887: PUSH
10888: LD_INT 5
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: ST_TO_ADDR
// for i in tmp do
10897: LD_ADDR_VAR 0 8
10901: PUSH
10902: LD_VAR 0 14
10906: PUSH
10907: FOR_IN
10908: IFFALSE 11078
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
10910: LD_ADDR_VAR 0 9
10914: PUSH
10915: LD_VAR 0 10
10919: PPUSH
10920: LD_VAR 0 8
10924: PPUSH
10925: LD_INT 5
10927: PPUSH
10928: CALL_OW 272
10932: PUSH
10933: LD_VAR 0 11
10937: PPUSH
10938: LD_VAR 0 8
10942: PPUSH
10943: LD_INT 5
10945: PPUSH
10946: CALL_OW 273
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
10955: LD_VAR 0 9
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: PPUSH
10964: LD_VAR 0 9
10968: PUSH
10969: LD_INT 2
10971: ARRAY
10972: PPUSH
10973: CALL_OW 488
10977: IFFALSE 11076
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
10979: LD_ADDR_VAR 0 4
10983: PUSH
10984: LD_VAR 0 9
10988: PUSH
10989: LD_INT 1
10991: ARRAY
10992: PPUSH
10993: LD_VAR 0 9
10997: PUSH
10998: LD_INT 2
11000: ARRAY
11001: PPUSH
11002: CALL_OW 546
11006: ST_TO_ADDR
// if hex [ 1 ] then
11007: LD_VAR 0 4
11011: PUSH
11012: LD_INT 1
11014: ARRAY
11015: IFFALSE 11019
// continue ;
11017: GO 10907
// h := hex [ 2 ] ;
11019: LD_ADDR_VAR 0 13
11023: PUSH
11024: LD_VAR 0 4
11028: PUSH
11029: LD_INT 2
11031: ARRAY
11032: ST_TO_ADDR
// if h + 7 < height then
11033: LD_VAR 0 13
11037: PUSH
11038: LD_INT 7
11040: PLUS
11041: PUSH
11042: LD_VAR 0 15
11046: LESS
11047: IFFALSE 11076
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11049: LD_ADDR_VAR 0 18
11053: PUSH
11054: LD_INT 7
11056: PUSH
11057: LD_INT 28
11059: PUSH
11060: LD_INT 45
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: PUSH
11068: LD_VAR 0 12
11072: ARRAY
11073: ST_TO_ADDR
// break ;
11074: GO 11078
// end ; end ; end ;
11076: GO 10907
11078: POP
11079: POP
// end ; if not weapon then
11080: LD_VAR 0 18
11084: NOT
11085: IFFALSE 11145
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11087: LD_ADDR_VAR 0 5
11091: PUSH
11092: LD_VAR 0 5
11096: PUSH
11097: LD_INT 11
11099: PUSH
11100: LD_INT 30
11102: PUSH
11103: LD_INT 49
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: DIFF
11111: ST_TO_ADDR
// if not list then
11112: LD_VAR 0 5
11116: NOT
11117: IFFALSE 11121
// exit ;
11119: GO 11263
// weapon := list [ rand ( 1 , list ) ] ;
11121: LD_ADDR_VAR 0 18
11125: PUSH
11126: LD_VAR 0 5
11130: PUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_VAR 0 5
11138: PPUSH
11139: CALL_OW 12
11143: ARRAY
11144: ST_TO_ADDR
// end ; if weapon then
11145: LD_VAR 0 18
11149: IFFALSE 11263
// begin tmp := CostOfWeapon ( weapon ) ;
11151: LD_ADDR_VAR 0 14
11155: PUSH
11156: LD_VAR 0 18
11160: PPUSH
11161: CALL_OW 451
11165: ST_TO_ADDR
// j := GetBase ( tower ) ;
11166: LD_ADDR_VAR 0 9
11170: PUSH
11171: LD_VAR 0 1
11175: PPUSH
11176: CALL_OW 274
11180: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11181: LD_VAR 0 9
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: CALL_OW 275
11193: PUSH
11194: LD_VAR 0 14
11198: PUSH
11199: LD_INT 1
11201: ARRAY
11202: GREATEREQUAL
11203: PUSH
11204: LD_VAR 0 9
11208: PPUSH
11209: LD_INT 2
11211: PPUSH
11212: CALL_OW 275
11216: PUSH
11217: LD_VAR 0 14
11221: PUSH
11222: LD_INT 2
11224: ARRAY
11225: GREATEREQUAL
11226: AND
11227: PUSH
11228: LD_VAR 0 9
11232: PPUSH
11233: LD_INT 3
11235: PPUSH
11236: CALL_OW 275
11240: PUSH
11241: LD_VAR 0 14
11245: PUSH
11246: LD_INT 3
11248: ARRAY
11249: GREATEREQUAL
11250: AND
11251: IFFALSE 11263
// result := weapon ;
11253: LD_ADDR_VAR 0 3
11257: PUSH
11258: LD_VAR 0 18
11262: ST_TO_ADDR
// end ; end ;
11263: LD_VAR 0 3
11267: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11268: LD_INT 0
11270: PPUSH
11271: PPUSH
// result := true ;
11272: LD_ADDR_VAR 0 3
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// if array1 = array2 then
11280: LD_VAR 0 1
11284: PUSH
11285: LD_VAR 0 2
11289: EQUAL
11290: IFFALSE 11350
// begin for i = 1 to array1 do
11292: LD_ADDR_VAR 0 4
11296: PUSH
11297: DOUBLE
11298: LD_INT 1
11300: DEC
11301: ST_TO_ADDR
11302: LD_VAR 0 1
11306: PUSH
11307: FOR_TO
11308: IFFALSE 11346
// if array1 [ i ] <> array2 [ i ] then
11310: LD_VAR 0 1
11314: PUSH
11315: LD_VAR 0 4
11319: ARRAY
11320: PUSH
11321: LD_VAR 0 2
11325: PUSH
11326: LD_VAR 0 4
11330: ARRAY
11331: NONEQUAL
11332: IFFALSE 11344
// begin result := false ;
11334: LD_ADDR_VAR 0 3
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// break ;
11342: GO 11346
// end ;
11344: GO 11307
11346: POP
11347: POP
// end else
11348: GO 11358
// result := false ;
11350: LD_ADDR_VAR 0 3
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// end ;
11358: LD_VAR 0 3
11362: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
// if not array1 or not array2 then
11367: LD_VAR 0 1
11371: NOT
11372: PUSH
11373: LD_VAR 0 2
11377: NOT
11378: OR
11379: IFFALSE 11383
// exit ;
11381: GO 11447
// result := true ;
11383: LD_ADDR_VAR 0 3
11387: PUSH
11388: LD_INT 1
11390: ST_TO_ADDR
// for i = 1 to array1 do
11391: LD_ADDR_VAR 0 4
11395: PUSH
11396: DOUBLE
11397: LD_INT 1
11399: DEC
11400: ST_TO_ADDR
11401: LD_VAR 0 1
11405: PUSH
11406: FOR_TO
11407: IFFALSE 11445
// if array1 [ i ] <> array2 [ i ] then
11409: LD_VAR 0 1
11413: PUSH
11414: LD_VAR 0 4
11418: ARRAY
11419: PUSH
11420: LD_VAR 0 2
11424: PUSH
11425: LD_VAR 0 4
11429: ARRAY
11430: NONEQUAL
11431: IFFALSE 11443
// begin result := false ;
11433: LD_ADDR_VAR 0 3
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// break ;
11441: GO 11445
// end ;
11443: GO 11406
11445: POP
11446: POP
// end ;
11447: LD_VAR 0 3
11451: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11452: LD_INT 0
11454: PPUSH
11455: PPUSH
11456: PPUSH
// pom := GetBase ( fac ) ;
11457: LD_ADDR_VAR 0 5
11461: PUSH
11462: LD_VAR 0 1
11466: PPUSH
11467: CALL_OW 274
11471: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11472: LD_ADDR_VAR 0 4
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: LD_INT 1
11484: ARRAY
11485: PPUSH
11486: LD_VAR 0 2
11490: PUSH
11491: LD_INT 2
11493: ARRAY
11494: PPUSH
11495: LD_VAR 0 2
11499: PUSH
11500: LD_INT 3
11502: ARRAY
11503: PPUSH
11504: LD_VAR 0 2
11508: PUSH
11509: LD_INT 4
11511: ARRAY
11512: PPUSH
11513: CALL_OW 449
11517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11518: LD_ADDR_VAR 0 3
11522: PUSH
11523: LD_VAR 0 5
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 275
11535: PUSH
11536: LD_VAR 0 4
11540: PUSH
11541: LD_INT 1
11543: ARRAY
11544: GREATEREQUAL
11545: PUSH
11546: LD_VAR 0 5
11550: PPUSH
11551: LD_INT 2
11553: PPUSH
11554: CALL_OW 275
11558: PUSH
11559: LD_VAR 0 4
11563: PUSH
11564: LD_INT 2
11566: ARRAY
11567: GREATEREQUAL
11568: AND
11569: PUSH
11570: LD_VAR 0 5
11574: PPUSH
11575: LD_INT 3
11577: PPUSH
11578: CALL_OW 275
11582: PUSH
11583: LD_VAR 0 4
11587: PUSH
11588: LD_INT 3
11590: ARRAY
11591: GREATEREQUAL
11592: AND
11593: ST_TO_ADDR
// end ;
11594: LD_VAR 0 3
11598: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11599: LD_INT 0
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
// pom := GetBase ( building ) ;
11605: LD_ADDR_VAR 0 3
11609: PUSH
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 274
11619: ST_TO_ADDR
// if not pom then
11620: LD_VAR 0 3
11624: NOT
11625: IFFALSE 11629
// exit ;
11627: GO 11799
// btype := GetBType ( building ) ;
11629: LD_ADDR_VAR 0 5
11633: PUSH
11634: LD_VAR 0 1
11638: PPUSH
11639: CALL_OW 266
11643: ST_TO_ADDR
// if btype = b_armoury then
11644: LD_VAR 0 5
11648: PUSH
11649: LD_INT 4
11651: EQUAL
11652: IFFALSE 11662
// btype := b_barracks ;
11654: LD_ADDR_VAR 0 5
11658: PUSH
11659: LD_INT 5
11661: ST_TO_ADDR
// if btype = b_depot then
11662: LD_VAR 0 5
11666: PUSH
11667: LD_INT 0
11669: EQUAL
11670: IFFALSE 11680
// btype := b_warehouse ;
11672: LD_ADDR_VAR 0 5
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// if btype = b_workshop then
11680: LD_VAR 0 5
11684: PUSH
11685: LD_INT 2
11687: EQUAL
11688: IFFALSE 11698
// btype := b_factory ;
11690: LD_ADDR_VAR 0 5
11694: PUSH
11695: LD_INT 3
11697: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11698: LD_ADDR_VAR 0 4
11702: PUSH
11703: LD_VAR 0 5
11707: PPUSH
11708: LD_VAR 0 1
11712: PPUSH
11713: CALL_OW 248
11717: PPUSH
11718: CALL_OW 450
11722: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 275
11740: PUSH
11741: LD_VAR 0 4
11745: PUSH
11746: LD_INT 1
11748: ARRAY
11749: GREATEREQUAL
11750: PUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 275
11763: PUSH
11764: LD_VAR 0 4
11768: PUSH
11769: LD_INT 2
11771: ARRAY
11772: GREATEREQUAL
11773: AND
11774: PUSH
11775: LD_VAR 0 3
11779: PPUSH
11780: LD_INT 3
11782: PPUSH
11783: CALL_OW 275
11787: PUSH
11788: LD_VAR 0 4
11792: PUSH
11793: LD_INT 3
11795: ARRAY
11796: GREATEREQUAL
11797: AND
11798: ST_TO_ADDR
// end ;
11799: LD_VAR 0 2
11803: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11804: LD_INT 0
11806: PPUSH
11807: PPUSH
11808: PPUSH
// pom := GetBase ( building ) ;
11809: LD_ADDR_VAR 0 4
11813: PUSH
11814: LD_VAR 0 1
11818: PPUSH
11819: CALL_OW 274
11823: ST_TO_ADDR
// if not pom then
11824: LD_VAR 0 4
11828: NOT
11829: IFFALSE 11833
// exit ;
11831: GO 11934
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_VAR 0 2
11842: PPUSH
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 248
11852: PPUSH
11853: CALL_OW 450
11857: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11858: LD_ADDR_VAR 0 3
11862: PUSH
11863: LD_VAR 0 4
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 275
11875: PUSH
11876: LD_VAR 0 5
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: GREATEREQUAL
11885: PUSH
11886: LD_VAR 0 4
11890: PPUSH
11891: LD_INT 2
11893: PPUSH
11894: CALL_OW 275
11898: PUSH
11899: LD_VAR 0 5
11903: PUSH
11904: LD_INT 2
11906: ARRAY
11907: GREATEREQUAL
11908: AND
11909: PUSH
11910: LD_VAR 0 4
11914: PPUSH
11915: LD_INT 3
11917: PPUSH
11918: CALL_OW 275
11922: PUSH
11923: LD_VAR 0 5
11927: PUSH
11928: LD_INT 3
11930: ARRAY
11931: GREATEREQUAL
11932: AND
11933: ST_TO_ADDR
// end ;
11934: LD_VAR 0 3
11938: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
11939: LD_INT 0
11941: PPUSH
11942: PPUSH
11943: PPUSH
11944: PPUSH
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
11951: PPUSH
// result := false ;
11952: LD_ADDR_VAR 0 8
11956: PUSH
11957: LD_INT 0
11959: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
11960: LD_VAR 0 5
11964: NOT
11965: PUSH
11966: LD_VAR 0 1
11970: NOT
11971: OR
11972: PUSH
11973: LD_VAR 0 2
11977: NOT
11978: OR
11979: PUSH
11980: LD_VAR 0 3
11984: NOT
11985: OR
11986: IFFALSE 11990
// exit ;
11988: GO 12804
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
11990: LD_ADDR_VAR 0 14
11994: PUSH
11995: LD_VAR 0 1
11999: PPUSH
12000: LD_VAR 0 2
12004: PPUSH
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_VAR 0 4
12014: PPUSH
12015: LD_VAR 0 5
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PPUSH
12024: CALL_OW 248
12028: PPUSH
12029: LD_INT 0
12031: PPUSH
12032: CALL 14037 0 6
12036: ST_TO_ADDR
// if not hexes then
12037: LD_VAR 0 14
12041: NOT
12042: IFFALSE 12046
// exit ;
12044: GO 12804
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12046: LD_ADDR_VAR 0 17
12050: PUSH
12051: LD_VAR 0 5
12055: PPUSH
12056: LD_INT 22
12058: PUSH
12059: LD_VAR 0 13
12063: PPUSH
12064: CALL_OW 255
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 2
12075: PUSH
12076: LD_INT 30
12078: PUSH
12079: LD_INT 0
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 30
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 72
12109: ST_TO_ADDR
// for i = 1 to hexes do
12110: LD_ADDR_VAR 0 9
12114: PUSH
12115: DOUBLE
12116: LD_INT 1
12118: DEC
12119: ST_TO_ADDR
12120: LD_VAR 0 14
12124: PUSH
12125: FOR_TO
12126: IFFALSE 12802
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12128: LD_ADDR_VAR 0 13
12132: PUSH
12133: LD_VAR 0 14
12137: PUSH
12138: LD_VAR 0 9
12142: ARRAY
12143: PUSH
12144: LD_INT 1
12146: ARRAY
12147: PPUSH
12148: LD_VAR 0 14
12152: PUSH
12153: LD_VAR 0 9
12157: ARRAY
12158: PUSH
12159: LD_INT 2
12161: ARRAY
12162: PPUSH
12163: CALL_OW 428
12167: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12168: LD_VAR 0 14
12172: PUSH
12173: LD_VAR 0 9
12177: ARRAY
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 14
12187: PUSH
12188: LD_VAR 0 9
12192: ARRAY
12193: PUSH
12194: LD_INT 2
12196: ARRAY
12197: PPUSH
12198: CALL_OW 351
12202: PUSH
12203: LD_VAR 0 14
12207: PUSH
12208: LD_VAR 0 9
12212: ARRAY
12213: PUSH
12214: LD_INT 1
12216: ARRAY
12217: PPUSH
12218: LD_VAR 0 14
12222: PUSH
12223: LD_VAR 0 9
12227: ARRAY
12228: PUSH
12229: LD_INT 2
12231: ARRAY
12232: PPUSH
12233: CALL_OW 488
12237: NOT
12238: OR
12239: PUSH
12240: LD_VAR 0 13
12244: PPUSH
12245: CALL_OW 247
12249: PUSH
12250: LD_INT 3
12252: EQUAL
12253: OR
12254: IFFALSE 12260
// exit ;
12256: POP
12257: POP
12258: GO 12804
// if not tmp then
12260: LD_VAR 0 13
12264: NOT
12265: IFFALSE 12269
// continue ;
12267: GO 12125
// result := true ;
12269: LD_ADDR_VAR 0 8
12273: PUSH
12274: LD_INT 1
12276: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12277: LD_VAR 0 6
12281: PUSH
12282: LD_VAR 0 13
12286: PPUSH
12287: CALL_OW 247
12291: PUSH
12292: LD_INT 2
12294: EQUAL
12295: AND
12296: PUSH
12297: LD_VAR 0 13
12301: PPUSH
12302: CALL_OW 263
12306: PUSH
12307: LD_INT 1
12309: EQUAL
12310: AND
12311: IFFALSE 12475
// begin if IsDrivenBy ( tmp ) then
12313: LD_VAR 0 13
12317: PPUSH
12318: CALL_OW 311
12322: IFFALSE 12326
// continue ;
12324: GO 12125
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12326: LD_VAR 0 6
12330: PPUSH
12331: LD_INT 3
12333: PUSH
12334: LD_INT 60
12336: PUSH
12337: EMPTY
12338: LIST
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 55
12349: PUSH
12350: EMPTY
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: IFFALSE 12473
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12367: LD_ADDR_VAR 0 18
12371: PUSH
12372: LD_VAR 0 6
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 3
12392: PUSH
12393: LD_INT 55
12395: PUSH
12396: EMPTY
12397: LIST
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 72
12411: PUSH
12412: LD_INT 1
12414: ARRAY
12415: ST_TO_ADDR
// if IsInUnit ( driver ) then
12416: LD_VAR 0 18
12420: PPUSH
12421: CALL_OW 310
12425: IFFALSE 12436
// ComExit ( driver ) ;
12427: LD_VAR 0 18
12431: PPUSH
12432: CALL 37816 0 1
// AddComEnterUnit ( driver , tmp ) ;
12436: LD_VAR 0 18
12440: PPUSH
12441: LD_VAR 0 13
12445: PPUSH
12446: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12450: LD_VAR 0 18
12454: PPUSH
12455: LD_VAR 0 7
12459: PPUSH
12460: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12464: LD_VAR 0 18
12468: PPUSH
12469: CALL_OW 181
// end ; continue ;
12473: GO 12125
// end ; if not cleaners or not tmp in cleaners then
12475: LD_VAR 0 6
12479: NOT
12480: PUSH
12481: LD_VAR 0 13
12485: PUSH
12486: LD_VAR 0 6
12490: IN
12491: NOT
12492: OR
12493: IFFALSE 12800
// begin if dep then
12495: LD_VAR 0 17
12499: IFFALSE 12635
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12501: LD_ADDR_VAR 0 16
12505: PUSH
12506: LD_VAR 0 17
12510: PUSH
12511: LD_INT 1
12513: ARRAY
12514: PPUSH
12515: CALL_OW 250
12519: PPUSH
12520: LD_VAR 0 17
12524: PUSH
12525: LD_INT 1
12527: ARRAY
12528: PPUSH
12529: CALL_OW 254
12533: PPUSH
12534: LD_INT 5
12536: PPUSH
12537: CALL_OW 272
12541: PUSH
12542: LD_VAR 0 17
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: PPUSH
12551: CALL_OW 251
12555: PPUSH
12556: LD_VAR 0 17
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PPUSH
12565: CALL_OW 254
12569: PPUSH
12570: LD_INT 5
12572: PPUSH
12573: CALL_OW 273
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12582: LD_VAR 0 16
12586: PUSH
12587: LD_INT 1
12589: ARRAY
12590: PPUSH
12591: LD_VAR 0 16
12595: PUSH
12596: LD_INT 2
12598: ARRAY
12599: PPUSH
12600: CALL_OW 488
12604: IFFALSE 12635
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12606: LD_VAR 0 13
12610: PPUSH
12611: LD_VAR 0 16
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_VAR 0 16
12624: PUSH
12625: LD_INT 2
12627: ARRAY
12628: PPUSH
12629: CALL_OW 111
// continue ;
12633: GO 12125
// end ; end ; r := GetDir ( tmp ) ;
12635: LD_ADDR_VAR 0 15
12639: PUSH
12640: LD_VAR 0 13
12644: PPUSH
12645: CALL_OW 254
12649: ST_TO_ADDR
// if r = 5 then
12650: LD_VAR 0 15
12654: PUSH
12655: LD_INT 5
12657: EQUAL
12658: IFFALSE 12668
// r := 0 ;
12660: LD_ADDR_VAR 0 15
12664: PUSH
12665: LD_INT 0
12667: ST_TO_ADDR
// for j = r to 5 do
12668: LD_ADDR_VAR 0 10
12672: PUSH
12673: DOUBLE
12674: LD_VAR 0 15
12678: DEC
12679: ST_TO_ADDR
12680: LD_INT 5
12682: PUSH
12683: FOR_TO
12684: IFFALSE 12798
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12686: LD_ADDR_VAR 0 11
12690: PUSH
12691: LD_VAR 0 13
12695: PPUSH
12696: CALL_OW 250
12700: PPUSH
12701: LD_VAR 0 10
12705: PPUSH
12706: LD_INT 2
12708: PPUSH
12709: CALL_OW 272
12713: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12714: LD_ADDR_VAR 0 12
12718: PUSH
12719: LD_VAR 0 13
12723: PPUSH
12724: CALL_OW 251
12728: PPUSH
12729: LD_VAR 0 10
12733: PPUSH
12734: LD_INT 2
12736: PPUSH
12737: CALL_OW 273
12741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12742: LD_VAR 0 11
12746: PPUSH
12747: LD_VAR 0 12
12751: PPUSH
12752: CALL_OW 488
12756: PUSH
12757: LD_VAR 0 11
12761: PPUSH
12762: LD_VAR 0 12
12766: PPUSH
12767: CALL_OW 428
12771: NOT
12772: AND
12773: IFFALSE 12796
// begin ComMoveXY ( tmp , _x , _y ) ;
12775: LD_VAR 0 13
12779: PPUSH
12780: LD_VAR 0 11
12784: PPUSH
12785: LD_VAR 0 12
12789: PPUSH
12790: CALL_OW 111
// break ;
12794: GO 12798
// end ; end ;
12796: GO 12683
12798: POP
12799: POP
// end ; end ;
12800: GO 12125
12802: POP
12803: POP
// end ;
12804: LD_VAR 0 8
12808: RET
// export function BuildingTechInvented ( side , btype ) ; begin
12809: LD_INT 0
12811: PPUSH
// result := true ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
12820: LD_VAR 0 2
12824: PUSH
12825: LD_INT 24
12827: DOUBLE
12828: EQUAL
12829: IFTRUE 12839
12831: LD_INT 33
12833: DOUBLE
12834: EQUAL
12835: IFTRUE 12839
12837: GO 12864
12839: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
12840: LD_ADDR_VAR 0 3
12844: PUSH
12845: LD_INT 32
12847: PPUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: CALL_OW 321
12857: PUSH
12858: LD_INT 2
12860: EQUAL
12861: ST_TO_ADDR
12862: GO 13180
12864: LD_INT 20
12866: DOUBLE
12867: EQUAL
12868: IFTRUE 12872
12870: GO 12897
12872: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
12873: LD_ADDR_VAR 0 3
12877: PUSH
12878: LD_INT 6
12880: PPUSH
12881: LD_VAR 0 1
12885: PPUSH
12886: CALL_OW 321
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: ST_TO_ADDR
12895: GO 13180
12897: LD_INT 22
12899: DOUBLE
12900: EQUAL
12901: IFTRUE 12911
12903: LD_INT 36
12905: DOUBLE
12906: EQUAL
12907: IFTRUE 12911
12909: GO 12936
12911: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
12912: LD_ADDR_VAR 0 3
12916: PUSH
12917: LD_INT 15
12919: PPUSH
12920: LD_VAR 0 1
12924: PPUSH
12925: CALL_OW 321
12929: PUSH
12930: LD_INT 2
12932: EQUAL
12933: ST_TO_ADDR
12934: GO 13180
12936: LD_INT 30
12938: DOUBLE
12939: EQUAL
12940: IFTRUE 12944
12942: GO 12969
12944: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
12945: LD_ADDR_VAR 0 3
12949: PUSH
12950: LD_INT 20
12952: PPUSH
12953: LD_VAR 0 1
12957: PPUSH
12958: CALL_OW 321
12962: PUSH
12963: LD_INT 2
12965: EQUAL
12966: ST_TO_ADDR
12967: GO 13180
12969: LD_INT 28
12971: DOUBLE
12972: EQUAL
12973: IFTRUE 12983
12975: LD_INT 21
12977: DOUBLE
12978: EQUAL
12979: IFTRUE 12983
12981: GO 13008
12983: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
12984: LD_ADDR_VAR 0 3
12988: PUSH
12989: LD_INT 21
12991: PPUSH
12992: LD_VAR 0 1
12996: PPUSH
12997: CALL_OW 321
13001: PUSH
13002: LD_INT 2
13004: EQUAL
13005: ST_TO_ADDR
13006: GO 13180
13008: LD_INT 16
13010: DOUBLE
13011: EQUAL
13012: IFTRUE 13016
13014: GO 13041
13016: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13017: LD_ADDR_VAR 0 3
13021: PUSH
13022: LD_INT 84
13024: PPUSH
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 321
13034: PUSH
13035: LD_INT 2
13037: EQUAL
13038: ST_TO_ADDR
13039: GO 13180
13041: LD_INT 19
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13055
13047: LD_INT 23
13049: DOUBLE
13050: EQUAL
13051: IFTRUE 13055
13053: GO 13080
13055: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: LD_INT 83
13063: PPUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 321
13073: PUSH
13074: LD_INT 2
13076: EQUAL
13077: ST_TO_ADDR
13078: GO 13180
13080: LD_INT 17
13082: DOUBLE
13083: EQUAL
13084: IFTRUE 13088
13086: GO 13113
13088: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13089: LD_ADDR_VAR 0 3
13093: PUSH
13094: LD_INT 39
13096: PPUSH
13097: LD_VAR 0 1
13101: PPUSH
13102: CALL_OW 321
13106: PUSH
13107: LD_INT 2
13109: EQUAL
13110: ST_TO_ADDR
13111: GO 13180
13113: LD_INT 18
13115: DOUBLE
13116: EQUAL
13117: IFTRUE 13121
13119: GO 13146
13121: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13122: LD_ADDR_VAR 0 3
13126: PUSH
13127: LD_INT 40
13129: PPUSH
13130: LD_VAR 0 1
13134: PPUSH
13135: CALL_OW 321
13139: PUSH
13140: LD_INT 2
13142: EQUAL
13143: ST_TO_ADDR
13144: GO 13180
13146: LD_INT 27
13148: DOUBLE
13149: EQUAL
13150: IFTRUE 13154
13152: GO 13179
13154: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13155: LD_ADDR_VAR 0 3
13159: PUSH
13160: LD_INT 35
13162: PPUSH
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 321
13172: PUSH
13173: LD_INT 2
13175: EQUAL
13176: ST_TO_ADDR
13177: GO 13180
13179: POP
// end ;
13180: LD_VAR 0 3
13184: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13185: LD_INT 0
13187: PPUSH
13188: PPUSH
13189: PPUSH
13190: PPUSH
13191: PPUSH
13192: PPUSH
13193: PPUSH
13194: PPUSH
13195: PPUSH
13196: PPUSH
13197: PPUSH
// result := false ;
13198: LD_ADDR_VAR 0 6
13202: PUSH
13203: LD_INT 0
13205: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13206: LD_VAR 0 1
13210: NOT
13211: PUSH
13212: LD_VAR 0 1
13216: PPUSH
13217: CALL_OW 266
13221: PUSH
13222: LD_INT 0
13224: PUSH
13225: LD_INT 1
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: IN
13232: NOT
13233: OR
13234: PUSH
13235: LD_VAR 0 2
13239: NOT
13240: OR
13241: PUSH
13242: LD_VAR 0 5
13246: PUSH
13247: LD_INT 0
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 3
13258: PUSH
13259: LD_INT 4
13261: PUSH
13262: LD_INT 5
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: IN
13273: NOT
13274: OR
13275: PUSH
13276: LD_VAR 0 3
13280: PPUSH
13281: LD_VAR 0 4
13285: PPUSH
13286: CALL_OW 488
13290: NOT
13291: OR
13292: IFFALSE 13296
// exit ;
13294: GO 14032
// side := GetSide ( depot ) ;
13296: LD_ADDR_VAR 0 9
13300: PUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 255
13310: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13311: LD_VAR 0 9
13315: PPUSH
13316: LD_VAR 0 2
13320: PPUSH
13321: CALL 12809 0 2
13325: NOT
13326: IFFALSE 13330
// exit ;
13328: GO 14032
// pom := GetBase ( depot ) ;
13330: LD_ADDR_VAR 0 10
13334: PUSH
13335: LD_VAR 0 1
13339: PPUSH
13340: CALL_OW 274
13344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13345: LD_ADDR_VAR 0 11
13349: PUSH
13350: LD_VAR 0 2
13354: PPUSH
13355: LD_VAR 0 1
13359: PPUSH
13360: CALL_OW 248
13364: PPUSH
13365: CALL_OW 450
13369: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13370: LD_VAR 0 10
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 275
13382: PUSH
13383: LD_VAR 0 11
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: GREATEREQUAL
13392: PUSH
13393: LD_VAR 0 10
13397: PPUSH
13398: LD_INT 2
13400: PPUSH
13401: CALL_OW 275
13405: PUSH
13406: LD_VAR 0 11
13410: PUSH
13411: LD_INT 2
13413: ARRAY
13414: GREATEREQUAL
13415: AND
13416: PUSH
13417: LD_VAR 0 10
13421: PPUSH
13422: LD_INT 3
13424: PPUSH
13425: CALL_OW 275
13429: PUSH
13430: LD_VAR 0 11
13434: PUSH
13435: LD_INT 3
13437: ARRAY
13438: GREATEREQUAL
13439: AND
13440: NOT
13441: IFFALSE 13445
// exit ;
13443: GO 14032
// if GetBType ( depot ) = b_depot then
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 266
13454: PUSH
13455: LD_INT 0
13457: EQUAL
13458: IFFALSE 13470
// dist := 28 else
13460: LD_ADDR_VAR 0 14
13464: PUSH
13465: LD_INT 28
13467: ST_TO_ADDR
13468: GO 13478
// dist := 36 ;
13470: LD_ADDR_VAR 0 14
13474: PUSH
13475: LD_INT 36
13477: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13478: LD_VAR 0 1
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_VAR 0 4
13492: PPUSH
13493: CALL_OW 297
13497: PUSH
13498: LD_VAR 0 14
13502: GREATER
13503: IFFALSE 13507
// exit ;
13505: GO 14032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13507: LD_ADDR_VAR 0 12
13511: PUSH
13512: LD_VAR 0 2
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_VAR 0 4
13526: PPUSH
13527: LD_VAR 0 5
13531: PPUSH
13532: LD_VAR 0 1
13536: PPUSH
13537: CALL_OW 248
13541: PPUSH
13542: LD_INT 0
13544: PPUSH
13545: CALL 14037 0 6
13549: ST_TO_ADDR
// if not hexes then
13550: LD_VAR 0 12
13554: NOT
13555: IFFALSE 13559
// exit ;
13557: GO 14032
// hex := GetHexInfo ( x , y ) ;
13559: LD_ADDR_VAR 0 15
13563: PUSH
13564: LD_VAR 0 3
13568: PPUSH
13569: LD_VAR 0 4
13573: PPUSH
13574: CALL_OW 546
13578: ST_TO_ADDR
// if hex [ 1 ] then
13579: LD_VAR 0 15
13583: PUSH
13584: LD_INT 1
13586: ARRAY
13587: IFFALSE 13591
// exit ;
13589: GO 14032
// height := hex [ 2 ] ;
13591: LD_ADDR_VAR 0 13
13595: PUSH
13596: LD_VAR 0 15
13600: PUSH
13601: LD_INT 2
13603: ARRAY
13604: ST_TO_ADDR
// for i = 1 to hexes do
13605: LD_ADDR_VAR 0 7
13609: PUSH
13610: DOUBLE
13611: LD_INT 1
13613: DEC
13614: ST_TO_ADDR
13615: LD_VAR 0 12
13619: PUSH
13620: FOR_TO
13621: IFFALSE 13951
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13623: LD_VAR 0 12
13627: PUSH
13628: LD_VAR 0 7
13632: ARRAY
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PPUSH
13638: LD_VAR 0 12
13642: PUSH
13643: LD_VAR 0 7
13647: ARRAY
13648: PUSH
13649: LD_INT 2
13651: ARRAY
13652: PPUSH
13653: CALL_OW 488
13657: NOT
13658: PUSH
13659: LD_VAR 0 12
13663: PUSH
13664: LD_VAR 0 7
13668: ARRAY
13669: PUSH
13670: LD_INT 1
13672: ARRAY
13673: PPUSH
13674: LD_VAR 0 12
13678: PUSH
13679: LD_VAR 0 7
13683: ARRAY
13684: PUSH
13685: LD_INT 2
13687: ARRAY
13688: PPUSH
13689: CALL_OW 428
13693: PUSH
13694: LD_INT 0
13696: GREATER
13697: OR
13698: PUSH
13699: LD_VAR 0 12
13703: PUSH
13704: LD_VAR 0 7
13708: ARRAY
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 12
13718: PUSH
13719: LD_VAR 0 7
13723: ARRAY
13724: PUSH
13725: LD_INT 2
13727: ARRAY
13728: PPUSH
13729: CALL_OW 351
13733: OR
13734: IFFALSE 13740
// exit ;
13736: POP
13737: POP
13738: GO 14032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13740: LD_ADDR_VAR 0 8
13744: PUSH
13745: LD_VAR 0 12
13749: PUSH
13750: LD_VAR 0 7
13754: ARRAY
13755: PUSH
13756: LD_INT 1
13758: ARRAY
13759: PPUSH
13760: LD_VAR 0 12
13764: PUSH
13765: LD_VAR 0 7
13769: ARRAY
13770: PUSH
13771: LD_INT 2
13773: ARRAY
13774: PPUSH
13775: CALL_OW 546
13779: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13780: LD_VAR 0 8
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PUSH
13789: LD_VAR 0 8
13793: PUSH
13794: LD_INT 2
13796: ARRAY
13797: PUSH
13798: LD_VAR 0 13
13802: PUSH
13803: LD_INT 2
13805: PLUS
13806: GREATER
13807: OR
13808: PUSH
13809: LD_VAR 0 8
13813: PUSH
13814: LD_INT 2
13816: ARRAY
13817: PUSH
13818: LD_VAR 0 13
13822: PUSH
13823: LD_INT 2
13825: MINUS
13826: LESS
13827: OR
13828: PUSH
13829: LD_VAR 0 8
13833: PUSH
13834: LD_INT 3
13836: ARRAY
13837: PUSH
13838: LD_INT 0
13840: PUSH
13841: LD_INT 8
13843: PUSH
13844: LD_INT 9
13846: PUSH
13847: LD_INT 10
13849: PUSH
13850: LD_INT 11
13852: PUSH
13853: LD_INT 12
13855: PUSH
13856: LD_INT 13
13858: PUSH
13859: LD_INT 16
13861: PUSH
13862: LD_INT 17
13864: PUSH
13865: LD_INT 18
13867: PUSH
13868: LD_INT 19
13870: PUSH
13871: LD_INT 20
13873: PUSH
13874: LD_INT 21
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: IN
13892: NOT
13893: OR
13894: PUSH
13895: LD_VAR 0 8
13899: PUSH
13900: LD_INT 5
13902: ARRAY
13903: NOT
13904: OR
13905: PUSH
13906: LD_VAR 0 8
13910: PUSH
13911: LD_INT 6
13913: ARRAY
13914: PUSH
13915: LD_INT 1
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: LD_INT 7
13923: PUSH
13924: LD_INT 9
13926: PUSH
13927: LD_INT 10
13929: PUSH
13930: LD_INT 11
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: IN
13941: NOT
13942: OR
13943: IFFALSE 13949
// exit ;
13945: POP
13946: POP
13947: GO 14032
// end ;
13949: GO 13620
13951: POP
13952: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13953: LD_VAR 0 9
13957: PPUSH
13958: LD_VAR 0 3
13962: PPUSH
13963: LD_VAR 0 4
13967: PPUSH
13968: LD_INT 20
13970: PPUSH
13971: CALL 5984 0 4
13975: PUSH
13976: LD_INT 4
13978: ARRAY
13979: IFFALSE 13983
// exit ;
13981: GO 14032
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13983: LD_VAR 0 2
13987: PUSH
13988: LD_INT 29
13990: PUSH
13991: LD_INT 30
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: PUSH
13999: LD_VAR 0 3
14003: PPUSH
14004: LD_VAR 0 4
14008: PPUSH
14009: LD_VAR 0 9
14013: PPUSH
14014: CALL_OW 440
14018: NOT
14019: AND
14020: IFFALSE 14024
// exit ;
14022: GO 14032
// result := true ;
14024: LD_ADDR_VAR 0 6
14028: PUSH
14029: LD_INT 1
14031: ST_TO_ADDR
// end ;
14032: LD_VAR 0 6
14036: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14037: LD_INT 0
14039: PPUSH
14040: PPUSH
14041: PPUSH
14042: PPUSH
14043: PPUSH
14044: PPUSH
14045: PPUSH
14046: PPUSH
14047: PPUSH
14048: PPUSH
14049: PPUSH
14050: PPUSH
14051: PPUSH
14052: PPUSH
14053: PPUSH
14054: PPUSH
14055: PPUSH
14056: PPUSH
14057: PPUSH
14058: PPUSH
14059: PPUSH
14060: PPUSH
14061: PPUSH
14062: PPUSH
14063: PPUSH
14064: PPUSH
14065: PPUSH
14066: PPUSH
14067: PPUSH
14068: PPUSH
14069: PPUSH
14070: PPUSH
14071: PPUSH
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
14076: PPUSH
14077: PPUSH
14078: PPUSH
14079: PPUSH
14080: PPUSH
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
14087: PPUSH
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
// result = [ ] ;
14097: LD_ADDR_VAR 0 7
14101: PUSH
14102: EMPTY
14103: ST_TO_ADDR
// temp_list = [ ] ;
14104: LD_ADDR_VAR 0 9
14108: PUSH
14109: EMPTY
14110: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14111: LD_VAR 0 4
14115: PUSH
14116: LD_INT 0
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: LD_INT 3
14127: PUSH
14128: LD_INT 4
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: IN
14142: NOT
14143: PUSH
14144: LD_VAR 0 1
14148: PUSH
14149: LD_INT 0
14151: PUSH
14152: LD_INT 1
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: IN
14159: PUSH
14160: LD_VAR 0 5
14164: PUSH
14165: LD_INT 1
14167: PUSH
14168: LD_INT 2
14170: PUSH
14171: LD_INT 3
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: IN
14179: NOT
14180: AND
14181: OR
14182: IFFALSE 14186
// exit ;
14184: GO 32577
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14186: LD_VAR 0 1
14190: PUSH
14191: LD_INT 6
14193: PUSH
14194: LD_INT 7
14196: PUSH
14197: LD_INT 8
14199: PUSH
14200: LD_INT 13
14202: PUSH
14203: LD_INT 12
14205: PUSH
14206: LD_INT 15
14208: PUSH
14209: LD_INT 11
14211: PUSH
14212: LD_INT 14
14214: PUSH
14215: LD_INT 10
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: IN
14229: IFFALSE 14239
// btype = b_lab ;
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: LD_INT 6
14238: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14239: LD_VAR 0 6
14243: PUSH
14244: LD_INT 0
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: IN
14258: NOT
14259: PUSH
14260: LD_VAR 0 1
14264: PUSH
14265: LD_INT 0
14267: PUSH
14268: LD_INT 1
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: LD_INT 3
14276: PUSH
14277: LD_INT 6
14279: PUSH
14280: LD_INT 36
14282: PUSH
14283: LD_INT 4
14285: PUSH
14286: LD_INT 5
14288: PUSH
14289: LD_INT 31
14291: PUSH
14292: LD_INT 32
14294: PUSH
14295: LD_INT 33
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: IN
14311: NOT
14312: PUSH
14313: LD_VAR 0 6
14317: PUSH
14318: LD_INT 1
14320: EQUAL
14321: AND
14322: OR
14323: PUSH
14324: LD_VAR 0 1
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 3
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: IN
14339: NOT
14340: PUSH
14341: LD_VAR 0 6
14345: PUSH
14346: LD_INT 2
14348: EQUAL
14349: AND
14350: OR
14351: IFFALSE 14361
// mode = 0 ;
14353: LD_ADDR_VAR 0 6
14357: PUSH
14358: LD_INT 0
14360: ST_TO_ADDR
// case mode of 0 :
14361: LD_VAR 0 6
14365: PUSH
14366: LD_INT 0
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 25827
14374: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14375: LD_ADDR_VAR 0 11
14379: PUSH
14380: LD_INT 0
14382: PUSH
14383: LD_INT 0
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 0
14392: PUSH
14393: LD_INT 1
14395: NEG
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 1
14403: PUSH
14404: LD_INT 0
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 0
14423: PUSH
14424: LD_INT 1
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 1
14433: NEG
14434: PUSH
14435: LD_INT 0
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 1
14444: NEG
14445: PUSH
14446: LD_INT 1
14448: NEG
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 1
14456: NEG
14457: PUSH
14458: LD_INT 2
14460: NEG
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 0
14468: PUSH
14469: LD_INT 2
14471: NEG
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 1
14479: PUSH
14480: LD_INT 1
14482: NEG
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 1
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 0
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 1
14510: NEG
14511: PUSH
14512: LD_INT 1
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 1
14521: PUSH
14522: LD_INT 3
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 0
14531: PUSH
14532: LD_INT 3
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 1
14541: NEG
14542: PUSH
14543: LD_INT 2
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14568: LD_ADDR_VAR 0 12
14572: PUSH
14573: LD_INT 0
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 0
14585: PUSH
14586: LD_INT 1
14588: NEG
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 1
14596: PUSH
14597: LD_INT 0
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 1
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 0
14616: PUSH
14617: LD_INT 1
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 1
14626: NEG
14627: PUSH
14628: LD_INT 0
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 1
14637: NEG
14638: PUSH
14639: LD_INT 1
14641: NEG
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 1
14649: PUSH
14650: LD_INT 1
14652: NEG
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 2
14660: PUSH
14661: LD_INT 0
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 2
14670: PUSH
14671: LD_INT 1
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 1
14680: NEG
14681: PUSH
14682: LD_INT 1
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 2
14691: NEG
14692: PUSH
14693: LD_INT 0
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 2
14702: NEG
14703: PUSH
14704: LD_INT 1
14706: NEG
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 2
14714: NEG
14715: PUSH
14716: LD_INT 1
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 3
14725: NEG
14726: PUSH
14727: LD_INT 0
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 3
14736: NEG
14737: PUSH
14738: LD_INT 1
14740: NEG
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14764: LD_ADDR_VAR 0 13
14768: PUSH
14769: LD_INT 0
14771: PUSH
14772: LD_INT 0
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 0
14781: PUSH
14782: LD_INT 1
14784: NEG
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: LD_INT 0
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 1
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 0
14812: PUSH
14813: LD_INT 1
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 1
14822: NEG
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 1
14833: NEG
14834: PUSH
14835: LD_INT 1
14837: NEG
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 1
14845: NEG
14846: PUSH
14847: LD_INT 2
14849: NEG
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 2
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: LD_INT 2
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 2
14887: NEG
14888: PUSH
14889: LD_INT 1
14891: NEG
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 2
14899: NEG
14900: PUSH
14901: LD_INT 2
14903: NEG
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 2
14911: NEG
14912: PUSH
14913: LD_INT 3
14915: NEG
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 3
14923: NEG
14924: PUSH
14925: LD_INT 2
14927: NEG
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 3
14935: NEG
14936: PUSH
14937: LD_INT 3
14939: NEG
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14963: LD_ADDR_VAR 0 14
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 0
14980: PUSH
14981: LD_INT 1
14983: NEG
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: LD_INT 0
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 0
15011: PUSH
15012: LD_INT 1
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 1
15021: NEG
15022: PUSH
15023: LD_INT 0
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 1
15032: NEG
15033: PUSH
15034: LD_INT 1
15036: NEG
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 1
15044: NEG
15045: PUSH
15046: LD_INT 2
15048: NEG
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 0
15056: PUSH
15057: LD_INT 2
15059: NEG
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: LD_INT 1
15067: PUSH
15068: LD_INT 1
15070: NEG
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 0
15088: PUSH
15089: LD_INT 2
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 1
15098: NEG
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 1
15109: NEG
15110: PUSH
15111: LD_INT 3
15113: NEG
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 0
15121: PUSH
15122: LD_INT 3
15124: NEG
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 1
15132: PUSH
15133: LD_INT 2
15135: NEG
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15159: LD_ADDR_VAR 0 15
15163: PUSH
15164: LD_INT 0
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 1
15179: NEG
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 1
15187: PUSH
15188: LD_INT 0
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 1
15217: NEG
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 1
15228: NEG
15229: PUSH
15230: LD_INT 1
15232: NEG
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: LD_INT 1
15243: NEG
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 2
15251: PUSH
15252: LD_INT 0
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: LD_INT 1
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 1
15271: NEG
15272: PUSH
15273: LD_INT 1
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 2
15282: NEG
15283: PUSH
15284: LD_INT 0
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 2
15293: NEG
15294: PUSH
15295: LD_INT 1
15297: NEG
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: LD_INT 1
15308: NEG
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: LD_INT 0
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 3
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15352: LD_ADDR_VAR 0 16
15356: PUSH
15357: LD_INT 0
15359: PUSH
15360: LD_INT 0
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 0
15369: PUSH
15370: LD_INT 1
15372: NEG
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 1
15380: PUSH
15381: LD_INT 0
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: LD_INT 1
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 1
15410: NEG
15411: PUSH
15412: LD_INT 0
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 1
15421: NEG
15422: PUSH
15423: LD_INT 1
15425: NEG
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 1
15433: NEG
15434: PUSH
15435: LD_INT 2
15437: NEG
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 2
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 1
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 2
15475: NEG
15476: PUSH
15477: LD_INT 1
15479: NEG
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 2
15487: NEG
15488: PUSH
15489: LD_INT 2
15491: NEG
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 3
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: LD_INT 3
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 2
15519: PUSH
15520: LD_INT 3
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15545: LD_ADDR_VAR 0 17
15549: PUSH
15550: LD_INT 0
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 0
15562: PUSH
15563: LD_INT 1
15565: NEG
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 1
15583: PUSH
15584: LD_INT 1
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 0
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 1
15603: NEG
15604: PUSH
15605: LD_INT 0
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 1
15614: NEG
15615: PUSH
15616: LD_INT 1
15618: NEG
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 1
15626: NEG
15627: PUSH
15628: LD_INT 2
15630: NEG
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 0
15638: PUSH
15639: LD_INT 2
15641: NEG
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 1
15649: PUSH
15650: LD_INT 1
15652: NEG
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: LD_INT 0
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 2
15680: PUSH
15681: LD_INT 2
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 0
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: NEG
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 2
15721: NEG
15722: PUSH
15723: LD_INT 0
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 2
15732: NEG
15733: PUSH
15734: LD_INT 1
15736: NEG
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 2
15744: NEG
15745: PUSH
15746: LD_INT 2
15748: NEG
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15775: LD_ADDR_VAR 0 18
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: LD_INT 0
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 0
15792: PUSH
15793: LD_INT 1
15795: NEG
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 1
15803: PUSH
15804: LD_INT 0
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 1
15833: NEG
15834: PUSH
15835: LD_INT 0
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: LD_INT 1
15848: NEG
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 1
15856: NEG
15857: PUSH
15858: LD_INT 2
15860: NEG
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 0
15868: PUSH
15869: LD_INT 2
15871: NEG
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 1
15879: PUSH
15880: LD_INT 1
15882: NEG
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 0
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 1
15940: NEG
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 2
15951: NEG
15952: PUSH
15953: LD_INT 0
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 2
15962: NEG
15963: PUSH
15964: LD_INT 1
15966: NEG
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 2
15974: NEG
15975: PUSH
15976: LD_INT 2
15978: NEG
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16005: LD_ADDR_VAR 0 19
16009: PUSH
16010: LD_INT 0
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 0
16022: PUSH
16023: LD_INT 1
16025: NEG
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: LD_INT 0
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 0
16053: PUSH
16054: LD_INT 1
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: LD_INT 0
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 1
16074: NEG
16075: PUSH
16076: LD_INT 1
16078: NEG
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 1
16086: NEG
16087: PUSH
16088: LD_INT 2
16090: NEG
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 0
16098: PUSH
16099: LD_INT 2
16101: NEG
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: LD_INT 1
16112: NEG
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: LD_INT 2
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: LD_INT 2
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 1
16170: NEG
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 2
16181: NEG
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 2
16192: NEG
16193: PUSH
16194: LD_INT 1
16196: NEG
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 2
16204: NEG
16205: PUSH
16206: LD_INT 2
16208: NEG
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16235: LD_ADDR_VAR 0 20
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 0
16252: PUSH
16253: LD_INT 1
16255: NEG
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 1
16263: PUSH
16264: LD_INT 0
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 1
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 0
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 1
16293: NEG
16294: PUSH
16295: LD_INT 0
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: LD_INT 1
16308: NEG
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: NEG
16317: PUSH
16318: LD_INT 2
16320: NEG
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: LD_INT 2
16331: NEG
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 2
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 2
16360: PUSH
16361: LD_INT 1
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 2
16370: PUSH
16371: LD_INT 2
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: LD_INT 2
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 1
16400: NEG
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 2
16411: NEG
16412: PUSH
16413: LD_INT 0
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 2
16422: NEG
16423: PUSH
16424: LD_INT 1
16426: NEG
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 2
16434: NEG
16435: PUSH
16436: LD_INT 2
16438: NEG
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16465: LD_ADDR_VAR 0 21
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 0
16482: PUSH
16483: LD_INT 1
16485: NEG
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: LD_INT 0
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: LD_INT 1
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 0
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 1
16523: NEG
16524: PUSH
16525: LD_INT 0
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: NEG
16535: PUSH
16536: LD_INT 1
16538: NEG
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 1
16546: NEG
16547: PUSH
16548: LD_INT 2
16550: NEG
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: LD_INT 2
16561: NEG
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 1
16572: NEG
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 2
16600: PUSH
16601: LD_INT 2
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 1
16630: NEG
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 2
16641: NEG
16642: PUSH
16643: LD_INT 0
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 2
16652: NEG
16653: PUSH
16654: LD_INT 1
16656: NEG
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 2
16664: NEG
16665: PUSH
16666: LD_INT 2
16668: NEG
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16695: LD_ADDR_VAR 0 22
16699: PUSH
16700: LD_INT 0
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 0
16712: PUSH
16713: LD_INT 1
16715: NEG
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: LD_INT 0
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 1
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: LD_INT 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 1
16753: NEG
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 1
16764: NEG
16765: PUSH
16766: LD_INT 1
16768: NEG
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 1
16776: NEG
16777: PUSH
16778: LD_INT 2
16780: NEG
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 0
16788: PUSH
16789: LD_INT 2
16791: NEG
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 1
16799: PUSH
16800: LD_INT 1
16802: NEG
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 2
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 2
16820: PUSH
16821: LD_INT 1
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 2
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 1
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: LD_INT 2
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 1
16860: NEG
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 2
16871: NEG
16872: PUSH
16873: LD_INT 0
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 2
16882: NEG
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 2
16894: NEG
16895: PUSH
16896: LD_INT 2
16898: NEG
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16925: LD_ADDR_VAR 0 23
16929: PUSH
16930: LD_INT 0
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 0
16942: PUSH
16943: LD_INT 1
16945: NEG
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: LD_INT 0
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 1
16963: PUSH
16964: LD_INT 1
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 1
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: NEG
16995: PUSH
16996: LD_INT 1
16998: NEG
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 1
17006: NEG
17007: PUSH
17008: LD_INT 2
17010: NEG
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: LD_INT 2
17021: NEG
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 1
17090: NEG
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: NEG
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 2
17112: NEG
17113: PUSH
17114: LD_INT 1
17116: NEG
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 2
17124: NEG
17125: PUSH
17126: LD_INT 2
17128: NEG
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 2
17136: NEG
17137: PUSH
17138: LD_INT 3
17140: NEG
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 1
17148: NEG
17149: PUSH
17150: LD_INT 3
17152: NEG
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: LD_INT 2
17163: NEG
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 1
17174: NEG
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17205: LD_ADDR_VAR 0 24
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: LD_INT 0
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: LD_INT 1
17225: NEG
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: LD_INT 0
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 0
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 0
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: LD_INT 1
17278: NEG
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 1
17286: NEG
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: LD_INT 2
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: LD_INT 1
17312: NEG
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 2
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: LD_INT 2
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 2
17381: NEG
17382: PUSH
17383: LD_INT 0
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 2
17392: NEG
17393: PUSH
17394: LD_INT 1
17396: NEG
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 2
17404: NEG
17405: PUSH
17406: LD_INT 2
17408: NEG
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 1
17416: PUSH
17417: LD_INT 2
17419: NEG
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 1
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 3
17438: PUSH
17439: LD_INT 1
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 3
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17481: LD_ADDR_VAR 0 25
17485: PUSH
17486: LD_INT 0
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 0
17498: PUSH
17499: LD_INT 1
17501: NEG
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 1
17519: PUSH
17520: LD_INT 1
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: LD_INT 1
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 1
17539: NEG
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 1
17550: NEG
17551: PUSH
17552: LD_INT 1
17554: NEG
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: NEG
17563: PUSH
17564: LD_INT 2
17566: NEG
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 2
17577: NEG
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: LD_INT 1
17588: NEG
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 2
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 2
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 2
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 2
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 1
17646: NEG
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 2
17657: NEG
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 2
17680: NEG
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 3
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: LD_INT 2
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 3
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: LD_INT 3
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17755: LD_ADDR_VAR 0 26
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 1
17775: NEG
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: LD_INT 0
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 1
17813: NEG
17814: PUSH
17815: LD_INT 0
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PUSH
17826: LD_INT 1
17828: NEG
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: NEG
17837: PUSH
17838: LD_INT 2
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: LD_INT 2
17851: NEG
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: LD_INT 1
17862: NEG
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 0
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 2
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: LD_INT 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: LD_INT 2
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: LD_INT 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 1
17920: NEG
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 2
17931: NEG
17932: PUSH
17933: LD_INT 0
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: NEG
17943: PUSH
17944: LD_INT 1
17946: NEG
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 2
17954: NEG
17955: PUSH
17956: LD_INT 2
17958: NEG
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: LD_INT 3
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: LD_INT 3
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 2
17997: NEG
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18031: LD_ADDR_VAR 0 27
18035: PUSH
18036: LD_INT 0
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 0
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 0
18079: PUSH
18080: LD_INT 1
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: LD_INT 2
18116: NEG
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: LD_INT 2
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: LD_INT 1
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 2
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 2
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 1
18196: NEG
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 2
18207: NEG
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: NEG
18219: PUSH
18220: LD_INT 1
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 2
18230: NEG
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: NEG
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 2
18253: NEG
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 3
18264: NEG
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 3
18276: NEG
18277: PUSH
18278: LD_INT 2
18280: NEG
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18311: LD_ADDR_VAR 0 28
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 0
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: LD_INT 2
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 2
18407: NEG
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 2
18487: NEG
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 2
18498: NEG
18499: PUSH
18500: LD_INT 1
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 2
18510: NEG
18511: PUSH
18512: LD_INT 2
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 2
18522: NEG
18523: PUSH
18524: LD_INT 3
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: LD_INT 3
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 3
18546: NEG
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 3
18558: NEG
18559: PUSH
18560: LD_INT 2
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18593: LD_ADDR_VAR 0 29
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: LD_INT 1
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: NEG
18663: PUSH
18664: LD_INT 1
18666: NEG
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 2
18678: NEG
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: LD_INT 2
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 2
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 2
18771: NEG
18772: PUSH
18773: LD_INT 2
18775: NEG
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 2
18783: NEG
18784: PUSH
18785: LD_INT 3
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 3
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: NEG
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 3
18837: NEG
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18872: LD_ADDR_VAR 0 30
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: NEG
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: NEG
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 2
19049: NEG
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: LD_INT 3
19065: NEG
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: LD_INT 2
19076: NEG
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 3
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: LD_INT 3
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 2
19104: NEG
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 3
19115: NEG
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19150: LD_ADDR_VAR 0 31
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: LD_INT 2
19235: NEG
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 2
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: LD_INT 2
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: LD_INT 2
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 2
19315: NEG
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: NEG
19328: PUSH
19329: LD_INT 2
19331: NEG
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: NEG
19340: PUSH
19341: LD_INT 3
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 2
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 3
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: LD_INT 3
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: NEG
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 3
19393: NEG
19394: PUSH
19395: LD_INT 2
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19428: LD_ADDR_VAR 0 32
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 0
19445: PUSH
19446: LD_INT 1
19448: NEG
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 1
19509: NEG
19510: PUSH
19511: LD_INT 2
19513: NEG
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 2
19524: NEG
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: LD_INT 3
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 3
19640: PUSH
19641: LD_INT 2
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: LD_INT 3
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: NEG
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 3
19671: NEG
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19706: LD_ADDR_VAR 0 33
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 1
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: LD_INT 2
19791: NEG
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 1
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: NEG
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: NEG
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: NEG
19897: PUSH
19898: LD_INT 3
19900: NEG
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 2
19908: PUSH
19909: LD_INT 1
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 3
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 3
19950: NEG
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19985: LD_ADDR_VAR 0 34
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: NEG
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 1
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 2
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 2
20141: NEG
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 2
20164: NEG
20165: PUSH
20166: LD_INT 2
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: NEG
20177: PUSH
20178: LD_INT 3
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 3
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 3
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: NEG
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 3
20230: NEG
20231: PUSH
20232: LD_INT 1
20234: NEG
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20265: LD_ADDR_VAR 0 35
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: LD_INT 1
20285: NEG
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: LD_INT 1
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 2
20356: NEG
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20377: LD_ADDR_VAR 0 36
20381: PUSH
20382: LD_INT 0
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: LD_INT 1
20450: NEG
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20489: LD_ADDR_VAR 0 37
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: LD_INT 1
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20601: LD_ADDR_VAR 0 38
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: LD_INT 0
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 2
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 2
20692: NEG
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20713: LD_ADDR_VAR 0 39
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 0
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: LD_INT 1
20786: NEG
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: LD_INT 2
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20825: LD_ADDR_VAR 0 40
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20937: LD_ADDR_VAR 0 41
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 0
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: NEG
21019: PUSH
21020: LD_INT 2
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 2
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: LD_INT 2
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 2
21092: NEG
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: NEG
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 2
21115: NEG
21116: PUSH
21117: LD_INT 2
21119: NEG
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 2
21127: NEG
21128: PUSH
21129: LD_INT 3
21131: NEG
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 3
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 3
21170: PUSH
21171: LD_INT 2
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 3
21180: PUSH
21181: LD_INT 3
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: LD_INT 3
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 3
21211: NEG
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 3
21222: NEG
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 3
21234: NEG
21235: PUSH
21236: LD_INT 2
21238: NEG
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 3
21246: NEG
21247: PUSH
21248: LD_INT 3
21250: NEG
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21287: LD_ADDR_VAR 0 42
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: LD_INT 1
21307: NEG
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: LD_INT 2
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 2
21383: NEG
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 1
21394: NEG
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 2
21412: PUSH
21413: LD_INT 2
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: NEG
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 2
21465: NEG
21466: PUSH
21467: LD_INT 2
21469: NEG
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 2
21477: NEG
21478: PUSH
21479: LD_INT 3
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 3
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 3
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 2
21515: NEG
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 3
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 3
21533: PUSH
21534: LD_INT 3
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 3
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: LD_INT 3
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: LD_INT 3
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 3
21584: NEG
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 3
21596: NEG
21597: PUSH
21598: LD_INT 3
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21637: LD_ADDR_VAR 0 43
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: NEG
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 2
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 2
21803: NEG
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 2
21814: NEG
21815: PUSH
21816: LD_INT 1
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: LD_INT 3
21830: NEG
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 3
21871: PUSH
21872: LD_INT 0
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 3
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: LD_INT 3
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 3
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 2
21922: NEG
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 3
21933: NEG
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 3
21944: NEG
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21985: LD_ADDR_VAR 0 44
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: LD_INT 1
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: LD_INT 2
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: NEG
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: NEG
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: NEG
22176: PUSH
22177: LD_INT 3
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 3
22218: PUSH
22219: LD_INT 2
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 3
22228: PUSH
22229: LD_INT 3
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 2
22238: PUSH
22239: LD_INT 3
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 2
22248: NEG
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 3
22259: NEG
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 3
22270: NEG
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 3
22282: NEG
22283: PUSH
22284: LD_INT 2
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 3
22294: NEG
22295: PUSH
22296: LD_INT 3
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22335: LD_ADDR_VAR 0 45
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: LD_INT 1
22355: NEG
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 2
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: NEG
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 2
22513: NEG
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 2
22525: NEG
22526: PUSH
22527: LD_INT 3
22529: NEG
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: LD_INT 3
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 3
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 3
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 3
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: LD_INT 3
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: LD_INT 3
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 3
22632: NEG
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 3
22644: NEG
22645: PUSH
22646: LD_INT 3
22648: NEG
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22685: LD_ADDR_VAR 0 46
22689: PUSH
22690: LD_INT 0
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 1
22766: NEG
22767: PUSH
22768: LD_INT 2
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 2
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 1
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 1
22874: NEG
22875: PUSH
22876: LD_INT 3
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 3
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 2
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 1
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 3
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: LD_INT 3
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: LD_INT 3
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 3
22981: NEG
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 3
22992: NEG
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23033: LD_ADDR_VAR 0 47
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: LD_INT 2
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 2
23148: NEG
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: LD_INT 2
23164: NEG
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23184: LD_ADDR_VAR 0 48
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 1
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23331: LD_ADDR_VAR 0 49
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23475: LD_ADDR_VAR 0 50
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 2
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23619: LD_ADDR_VAR 0 51
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 2
23731: NEG
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: NEG
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23766: LD_ADDR_VAR 0 52
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: LD_INT 2
23851: NEG
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: NEG
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 2
23893: NEG
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23917: LD_ADDR_VAR 0 53
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 2
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 2
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 2
24093: NEG
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 2
24116: NEG
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24147: LD_ADDR_VAR 0 54
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: LD_INT 1
24167: NEG
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 2
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: LD_INT 2
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: LD_INT 2
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: NEG
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 2
24346: NEG
24347: PUSH
24348: LD_INT 2
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24377: LD_ADDR_VAR 0 55
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 2
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: LD_INT 0
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24607: LD_ADDR_VAR 0 56
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: LD_INT 1
24627: NEG
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 2
24692: NEG
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: LD_INT 2
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 2
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 2
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 2
24783: NEG
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: NEG
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 2
24806: NEG
24807: PUSH
24808: LD_INT 2
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24837: LD_ADDR_VAR 0 57
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: LD_INT 1
24857: NEG
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 1
24895: NEG
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: LD_INT 2
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: LD_INT 2
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 2
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: NEG
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 2
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: NEG
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25067: LD_ADDR_VAR 0 58
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 0
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: LD_INT 0
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: LD_INT 1
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: NEG
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: NEG
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: NEG
25267: PUSH
25268: LD_INT 2
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25297: LD_ADDR_VAR 0 59
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25385: LD_ADDR_VAR 0 60
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25473: LD_ADDR_VAR 0 61
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25561: LD_ADDR_VAR 0 62
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25649: LD_ADDR_VAR 0 63
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: NEG
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25737: LD_ADDR_VAR 0 64
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// end ; 1 :
25825: GO 31722
25827: LD_INT 1
25829: DOUBLE
25830: EQUAL
25831: IFTRUE 25835
25833: GO 28458
25835: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25836: LD_ADDR_VAR 0 11
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: LD_INT 3
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 3
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: LD_INT 2
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25880: LD_ADDR_VAR 0 12
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25921: LD_ADDR_VAR 0 13
25925: PUSH
25926: LD_INT 3
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 3
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25961: LD_ADDR_VAR 0 14
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26002: LD_ADDR_VAR 0 15
26006: PUSH
26007: LD_INT 2
26009: NEG
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 3
26020: NEG
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 3
26031: NEG
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26046: LD_ADDR_VAR 0 16
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: LD_INT 3
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 3
26065: NEG
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 3
26077: NEG
26078: PUSH
26079: LD_INT 3
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26092: LD_ADDR_VAR 0 17
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 3
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 3
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 2
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26136: LD_ADDR_VAR 0 18
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 3
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 3
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26177: LD_ADDR_VAR 0 19
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 3
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: LD_INT 3
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26217: LD_ADDR_VAR 0 20
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 3
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 3
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26258: LD_ADDR_VAR 0 21
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 3
26276: NEG
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 3
26287: NEG
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26302: LD_ADDR_VAR 0 22
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: LD_INT 3
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 3
26321: NEG
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 3
26333: NEG
26334: PUSH
26335: LD_INT 3
26337: NEG
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26348: LD_ADDR_VAR 0 23
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 3
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: LD_INT 4
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 3
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26392: LD_ADDR_VAR 0 24
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 4
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: LIST
26432: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26433: LD_ADDR_VAR 0 25
26437: PUSH
26438: LD_INT 3
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 4
26450: PUSH
26451: LD_INT 3
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: LD_INT 4
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26473: LD_ADDR_VAR 0 26
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: LD_INT 4
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 3
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: LIST
26513: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26514: LD_ADDR_VAR 0 27
26518: PUSH
26519: LD_INT 3
26521: NEG
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 3
26532: NEG
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 4
26543: NEG
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26558: LD_ADDR_VAR 0 28
26562: PUSH
26563: LD_INT 3
26565: NEG
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 3
26577: NEG
26578: PUSH
26579: LD_INT 4
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 4
26589: NEG
26590: PUSH
26591: LD_INT 3
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26604: LD_ADDR_VAR 0 29
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: LD_INT 3
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 3
26626: NEG
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 4
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 4
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: LD_INT 3
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: LD_INT 5
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 5
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 4
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: LD_INT 6
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 6
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 5
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26759: LD_ADDR_VAR 0 30
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 3
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 3
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 4
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 4
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 4
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 5
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 5
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 5
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 6
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 6
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26902: LD_ADDR_VAR 0 31
26906: PUSH
26907: LD_INT 3
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: LD_INT 3
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 3
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 4
26939: PUSH
26940: LD_INT 3
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 4
26949: PUSH
26950: LD_INT 4
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: LD_INT 4
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 5
26969: PUSH
26970: LD_INT 4
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 5
26979: PUSH
26980: LD_INT 5
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 4
26989: PUSH
26990: LD_INT 5
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 6
26999: PUSH
27000: LD_INT 5
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 6
27009: PUSH
27010: LD_INT 6
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 5
27019: PUSH
27020: LD_INT 6
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27041: LD_ADDR_VAR 0 32
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 3
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 4
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: LD_INT 4
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: LD_INT 3
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: LD_INT 5
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 0
27120: PUSH
27121: LD_INT 5
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: LD_INT 4
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 6
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 6
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 5
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27184: LD_ADDR_VAR 0 33
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 3
27202: NEG
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 3
27213: NEG
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 3
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 4
27236: NEG
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 4
27247: NEG
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 4
27259: NEG
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 5
27270: NEG
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 5
27281: NEG
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 5
27293: NEG
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 6
27304: NEG
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 6
27315: NEG
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27339: LD_ADDR_VAR 0 34
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: LD_INT 3
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 3
27358: NEG
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 3
27370: NEG
27371: PUSH
27372: LD_INT 3
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 3
27382: NEG
27383: PUSH
27384: LD_INT 4
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 4
27394: NEG
27395: PUSH
27396: LD_INT 3
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 4
27406: NEG
27407: PUSH
27408: LD_INT 4
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 4
27418: NEG
27419: PUSH
27420: LD_INT 5
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 5
27430: NEG
27431: PUSH
27432: LD_INT 4
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 5
27442: NEG
27443: PUSH
27444: LD_INT 5
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 5
27454: NEG
27455: PUSH
27456: LD_INT 6
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 6
27466: NEG
27467: PUSH
27468: LD_INT 5
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 6
27478: NEG
27479: PUSH
27480: LD_INT 6
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27502: LD_ADDR_VAR 0 41
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: LD_INT 2
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 3
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27546: LD_ADDR_VAR 0 42
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27587: LD_ADDR_VAR 0 43
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27627: LD_ADDR_VAR 0 44
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 3
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27668: LD_ADDR_VAR 0 45
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 3
27697: NEG
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27712: LD_ADDR_VAR 0 46
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: LD_INT 2
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: NEG
27732: PUSH
27733: LD_INT 3
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 3
27743: NEG
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: LIST
27757: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27758: LD_ADDR_VAR 0 47
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: LD_INT 3
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 3
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27791: LD_ADDR_VAR 0 48
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 2
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27822: LD_ADDR_VAR 0 49
27826: PUSH
27827: LD_INT 3
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 3
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27851: LD_ADDR_VAR 0 50
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27880: LD_ADDR_VAR 0 51
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27911: LD_ADDR_VAR 0 52
27915: PUSH
27916: LD_INT 3
27918: NEG
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 3
27930: NEG
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27944: LD_ADDR_VAR 0 53
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: LD_INT 3
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: LD_INT 3
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: LD_INT 2
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27988: LD_ADDR_VAR 0 54
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 1
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 3
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 3
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28029: LD_ADDR_VAR 0 55
28033: PUSH
28034: LD_INT 3
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 3
28046: PUSH
28047: LD_INT 3
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 3
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28069: LD_ADDR_VAR 0 56
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 3
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 3
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28110: LD_ADDR_VAR 0 57
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 3
28128: NEG
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 3
28139: NEG
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28154: LD_ADDR_VAR 0 58
28158: PUSH
28159: LD_INT 2
28161: NEG
28162: PUSH
28163: LD_INT 3
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 3
28173: NEG
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 3
28185: NEG
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28200: LD_ADDR_VAR 0 59
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28244: LD_ADDR_VAR 0 60
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 2
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28285: LD_ADDR_VAR 0 61
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28325: LD_ADDR_VAR 0 62
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28366: LD_ADDR_VAR 0 63
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 2
28384: NEG
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 2
28395: NEG
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28410: LD_ADDR_VAR 0 64
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 2
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: LD_INT 1
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: NEG
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: ST_TO_ADDR
// end ; 2 :
28456: GO 31722
28458: LD_INT 2
28460: DOUBLE
28461: EQUAL
28462: IFTRUE 28466
28464: GO 31721
28466: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28467: LD_ADDR_VAR 0 29
28471: PUSH
28472: LD_INT 4
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 4
28484: PUSH
28485: LD_INT 1
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 5
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 5
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 4
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 5
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 4
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 4
28597: PUSH
28598: LD_INT 4
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 4
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 4
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: LD_INT 4
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 4
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 4
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 5
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 5
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 4
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 3
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 5
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 3
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 2
28773: NEG
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: NEG
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: NEG
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 4
28806: NEG
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 4
28817: NEG
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 4
28829: NEG
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 2
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 4
28852: NEG
28853: PUSH
28854: LD_INT 4
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 4
28864: NEG
28865: PUSH
28866: LD_INT 5
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 3
28876: NEG
28877: PUSH
28878: LD_INT 4
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 3
28888: NEG
28889: PUSH
28890: LD_INT 3
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 4
28900: NEG
28901: PUSH
28902: LD_INT 3
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 5
28912: NEG
28913: PUSH
28914: LD_INT 4
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 5
28924: NEG
28925: PUSH
28926: LD_INT 5
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 3
28936: NEG
28937: PUSH
28938: LD_INT 5
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 5
28948: NEG
28949: PUSH
28950: LD_INT 3
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29005: LD_ADDR_VAR 0 30
29009: PUSH
29010: LD_INT 4
29012: PUSH
29013: LD_INT 4
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 4
29022: PUSH
29023: LD_INT 3
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 5
29032: PUSH
29033: LD_INT 4
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 5
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 4
29052: PUSH
29053: LD_INT 5
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 3
29062: PUSH
29063: LD_INT 4
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: PUSH
29073: LD_INT 3
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 5
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 3
29092: PUSH
29093: LD_INT 5
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 4
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 4
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 4
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 4
29195: NEG
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 4
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: NEG
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 3
29229: NEG
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 4
29240: NEG
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 5
29251: NEG
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 5
29262: NEG
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 5
29274: NEG
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 3
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 3
29297: NEG
29298: PUSH
29299: LD_INT 3
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 3
29309: NEG
29310: PUSH
29311: LD_INT 4
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: LD_INT 3
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: NEG
29334: PUSH
29335: LD_INT 2
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 3
29345: NEG
29346: PUSH
29347: LD_INT 2
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 4
29357: NEG
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 4
29369: NEG
29370: PUSH
29371: LD_INT 4
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: LD_INT 4
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 4
29393: NEG
29394: PUSH
29395: LD_INT 2
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: LD_INT 4
29408: NEG
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: LD_INT 5
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 4
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: LD_INT 3
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 3
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 4
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: LD_INT 5
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 2
29484: PUSH
29485: LD_INT 3
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 2
29495: NEG
29496: PUSH
29497: LD_INT 5
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29552: LD_ADDR_VAR 0 31
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 4
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 4
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: LD_INT 5
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: LD_INT 5
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: LD_INT 4
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 5
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: LD_INT 3
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 3
29652: NEG
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 4
29708: NEG
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 4
29719: NEG
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 4
29731: NEG
29732: PUSH
29733: LD_INT 2
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: LD_INT 2
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 4
29754: NEG
29755: PUSH
29756: LD_INT 4
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 4
29766: NEG
29767: PUSH
29768: LD_INT 5
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: LD_INT 4
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: LD_INT 3
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 4
29802: NEG
29803: PUSH
29804: LD_INT 3
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 5
29814: NEG
29815: PUSH
29816: LD_INT 4
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 5
29826: NEG
29827: PUSH
29828: LD_INT 5
29830: NEG
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 3
29838: NEG
29839: PUSH
29840: LD_INT 5
29842: NEG
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 5
29850: NEG
29851: PUSH
29852: LD_INT 3
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: LD_INT 3
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: LD_INT 4
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 3
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 2
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 3
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 4
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: LD_INT 4
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 4
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 4
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 5
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 5
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: LD_INT 2
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 5
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30102: LD_ADDR_VAR 0 32
30106: PUSH
30107: LD_INT 4
30109: NEG
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 4
30120: NEG
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 3
30132: NEG
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 3
30143: NEG
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 4
30154: NEG
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 5
30165: NEG
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 5
30176: NEG
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 5
30188: NEG
30189: PUSH
30190: LD_INT 2
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 3
30200: NEG
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 3
30211: NEG
30212: PUSH
30213: LD_INT 3
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 3
30223: NEG
30224: PUSH
30225: LD_INT 4
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 2
30235: NEG
30236: PUSH
30237: LD_INT 3
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 2
30247: NEG
30248: PUSH
30249: LD_INT 2
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 3
30259: NEG
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 4
30271: NEG
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 4
30283: NEG
30284: PUSH
30285: LD_INT 4
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 2
30295: NEG
30296: PUSH
30297: LD_INT 4
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 4
30307: NEG
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: LD_INT 4
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: LD_INT 5
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: LD_INT 4
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 3
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 4
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: LD_INT 5
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 5
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 4
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: LD_INT 2
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 4
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 4
30514: PUSH
30515: LD_INT 4
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 4
30524: PUSH
30525: LD_INT 3
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: LD_INT 4
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: LD_INT 5
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 4
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: LD_INT 4
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 3
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 5
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 3
30594: PUSH
30595: LD_INT 5
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30649: LD_ADDR_VAR 0 33
30653: PUSH
30654: LD_INT 4
30656: NEG
30657: PUSH
30658: LD_INT 4
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 4
30668: NEG
30669: PUSH
30670: LD_INT 5
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 3
30680: NEG
30681: PUSH
30682: LD_INT 4
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 3
30692: NEG
30693: PUSH
30694: LD_INT 3
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 4
30704: NEG
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 5
30716: NEG
30717: PUSH
30718: LD_INT 4
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 5
30728: NEG
30729: PUSH
30730: LD_INT 5
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 3
30740: NEG
30741: PUSH
30742: LD_INT 5
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 5
30752: NEG
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: LD_INT 3
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: LD_INT 4
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: LD_INT 3
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 2
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 2
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: NEG
30820: PUSH
30821: LD_INT 3
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: LD_INT 4
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: LD_INT 2
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: NEG
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 4
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 4
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 5
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 4
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 3
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 5
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 3
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 4
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 4
30989: PUSH
30990: LD_INT 4
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: PUSH
31000: LD_INT 4
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 3
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 4
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: LD_INT 4
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 4
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: LD_INT 4
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 5
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 5
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 4
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 5
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31187: LD_ADDR_VAR 0 34
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 4
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 5
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 3
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 4
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: LD_INT 5
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: LD_INT 5
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 3
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 3
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 4
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 4
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 3
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 4
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 4
31389: PUSH
31390: LD_INT 4
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 4
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 5
31409: PUSH
31410: LD_INT 4
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 5
31419: PUSH
31420: LD_INT 5
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: LD_INT 5
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: LD_INT 4
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 3
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 5
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: LD_INT 5
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 3
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: LD_INT 3
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 4
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 4
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: LD_INT 3
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: LD_INT 4
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 4
31572: NEG
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 4
31583: NEG
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 3
31595: NEG
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 3
31606: NEG
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 4
31617: NEG
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 5
31628: NEG
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 5
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 5
31651: NEG
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 3
31663: NEG
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: ST_TO_ADDR
// end ; end ;
31719: GO 31722
31721: POP
// case btype of b_depot , b_warehouse :
31722: LD_VAR 0 1
31726: PUSH
31727: LD_INT 0
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31741
31733: LD_INT 1
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 31942
31741: POP
// case nation of nation_american :
31742: LD_VAR 0 5
31746: PUSH
31747: LD_INT 1
31749: DOUBLE
31750: EQUAL
31751: IFTRUE 31755
31753: GO 31811
31755: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31756: LD_ADDR_VAR 0 9
31760: PUSH
31761: LD_VAR 0 11
31765: PUSH
31766: LD_VAR 0 12
31770: PUSH
31771: LD_VAR 0 13
31775: PUSH
31776: LD_VAR 0 14
31780: PUSH
31781: LD_VAR 0 15
31785: PUSH
31786: LD_VAR 0 16
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: PUSH
31799: LD_VAR 0 4
31803: PUSH
31804: LD_INT 1
31806: PLUS
31807: ARRAY
31808: ST_TO_ADDR
31809: GO 31940
31811: LD_INT 2
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31819
31817: GO 31875
31819: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31820: LD_ADDR_VAR 0 9
31824: PUSH
31825: LD_VAR 0 17
31829: PUSH
31830: LD_VAR 0 18
31834: PUSH
31835: LD_VAR 0 19
31839: PUSH
31840: LD_VAR 0 20
31844: PUSH
31845: LD_VAR 0 21
31849: PUSH
31850: LD_VAR 0 22
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: PUSH
31863: LD_VAR 0 4
31867: PUSH
31868: LD_INT 1
31870: PLUS
31871: ARRAY
31872: ST_TO_ADDR
31873: GO 31940
31875: LD_INT 3
31877: DOUBLE
31878: EQUAL
31879: IFTRUE 31883
31881: GO 31939
31883: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31884: LD_ADDR_VAR 0 9
31888: PUSH
31889: LD_VAR 0 23
31893: PUSH
31894: LD_VAR 0 24
31898: PUSH
31899: LD_VAR 0 25
31903: PUSH
31904: LD_VAR 0 26
31908: PUSH
31909: LD_VAR 0 27
31913: PUSH
31914: LD_VAR 0 28
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: PUSH
31927: LD_VAR 0 4
31931: PUSH
31932: LD_INT 1
31934: PLUS
31935: ARRAY
31936: ST_TO_ADDR
31937: GO 31940
31939: POP
31940: GO 32495
31942: LD_INT 2
31944: DOUBLE
31945: EQUAL
31946: IFTRUE 31956
31948: LD_INT 3
31950: DOUBLE
31951: EQUAL
31952: IFTRUE 31956
31954: GO 32012
31956: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31957: LD_ADDR_VAR 0 9
31961: PUSH
31962: LD_VAR 0 29
31966: PUSH
31967: LD_VAR 0 30
31971: PUSH
31972: LD_VAR 0 31
31976: PUSH
31977: LD_VAR 0 32
31981: PUSH
31982: LD_VAR 0 33
31986: PUSH
31987: LD_VAR 0 34
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: PUSH
32000: LD_VAR 0 4
32004: PUSH
32005: LD_INT 1
32007: PLUS
32008: ARRAY
32009: ST_TO_ADDR
32010: GO 32495
32012: LD_INT 16
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32074
32018: LD_INT 17
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32074
32024: LD_INT 18
32026: DOUBLE
32027: EQUAL
32028: IFTRUE 32074
32030: LD_INT 19
32032: DOUBLE
32033: EQUAL
32034: IFTRUE 32074
32036: LD_INT 22
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32074
32042: LD_INT 20
32044: DOUBLE
32045: EQUAL
32046: IFTRUE 32074
32048: LD_INT 21
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32074
32054: LD_INT 23
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32074
32060: LD_INT 24
32062: DOUBLE
32063: EQUAL
32064: IFTRUE 32074
32066: LD_INT 25
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32130
32074: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32075: LD_ADDR_VAR 0 9
32079: PUSH
32080: LD_VAR 0 35
32084: PUSH
32085: LD_VAR 0 36
32089: PUSH
32090: LD_VAR 0 37
32094: PUSH
32095: LD_VAR 0 38
32099: PUSH
32100: LD_VAR 0 39
32104: PUSH
32105: LD_VAR 0 40
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: PUSH
32118: LD_VAR 0 4
32122: PUSH
32123: LD_INT 1
32125: PLUS
32126: ARRAY
32127: ST_TO_ADDR
32128: GO 32495
32130: LD_INT 6
32132: DOUBLE
32133: EQUAL
32134: IFTRUE 32186
32136: LD_INT 7
32138: DOUBLE
32139: EQUAL
32140: IFTRUE 32186
32142: LD_INT 8
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32186
32148: LD_INT 13
32150: DOUBLE
32151: EQUAL
32152: IFTRUE 32186
32154: LD_INT 12
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32186
32160: LD_INT 15
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32186
32166: LD_INT 11
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32186
32172: LD_INT 14
32174: DOUBLE
32175: EQUAL
32176: IFTRUE 32186
32178: LD_INT 10
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32242
32186: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32187: LD_ADDR_VAR 0 9
32191: PUSH
32192: LD_VAR 0 41
32196: PUSH
32197: LD_VAR 0 42
32201: PUSH
32202: LD_VAR 0 43
32206: PUSH
32207: LD_VAR 0 44
32211: PUSH
32212: LD_VAR 0 45
32216: PUSH
32217: LD_VAR 0 46
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: PUSH
32230: LD_VAR 0 4
32234: PUSH
32235: LD_INT 1
32237: PLUS
32238: ARRAY
32239: ST_TO_ADDR
32240: GO 32495
32242: LD_INT 36
32244: DOUBLE
32245: EQUAL
32246: IFTRUE 32250
32248: GO 32306
32250: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32251: LD_ADDR_VAR 0 9
32255: PUSH
32256: LD_VAR 0 47
32260: PUSH
32261: LD_VAR 0 48
32265: PUSH
32266: LD_VAR 0 49
32270: PUSH
32271: LD_VAR 0 50
32275: PUSH
32276: LD_VAR 0 51
32280: PUSH
32281: LD_VAR 0 52
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: PUSH
32294: LD_VAR 0 4
32298: PUSH
32299: LD_INT 1
32301: PLUS
32302: ARRAY
32303: ST_TO_ADDR
32304: GO 32495
32306: LD_INT 4
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32332
32312: LD_INT 5
32314: DOUBLE
32315: EQUAL
32316: IFTRUE 32332
32318: LD_INT 34
32320: DOUBLE
32321: EQUAL
32322: IFTRUE 32332
32324: LD_INT 37
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32388
32332: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32333: LD_ADDR_VAR 0 9
32337: PUSH
32338: LD_VAR 0 53
32342: PUSH
32343: LD_VAR 0 54
32347: PUSH
32348: LD_VAR 0 55
32352: PUSH
32353: LD_VAR 0 56
32357: PUSH
32358: LD_VAR 0 57
32362: PUSH
32363: LD_VAR 0 58
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: PUSH
32376: LD_VAR 0 4
32380: PUSH
32381: LD_INT 1
32383: PLUS
32384: ARRAY
32385: ST_TO_ADDR
32386: GO 32495
32388: LD_INT 31
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32438
32394: LD_INT 32
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32438
32400: LD_INT 33
32402: DOUBLE
32403: EQUAL
32404: IFTRUE 32438
32406: LD_INT 27
32408: DOUBLE
32409: EQUAL
32410: IFTRUE 32438
32412: LD_INT 26
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32438
32418: LD_INT 28
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32438
32424: LD_INT 29
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32438
32430: LD_INT 30
32432: DOUBLE
32433: EQUAL
32434: IFTRUE 32438
32436: GO 32494
32438: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32439: LD_ADDR_VAR 0 9
32443: PUSH
32444: LD_VAR 0 59
32448: PUSH
32449: LD_VAR 0 60
32453: PUSH
32454: LD_VAR 0 61
32458: PUSH
32459: LD_VAR 0 62
32463: PUSH
32464: LD_VAR 0 63
32468: PUSH
32469: LD_VAR 0 64
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: PUSH
32482: LD_VAR 0 4
32486: PUSH
32487: LD_INT 1
32489: PLUS
32490: ARRAY
32491: ST_TO_ADDR
32492: GO 32495
32494: POP
// temp_list2 = [ ] ;
32495: LD_ADDR_VAR 0 10
32499: PUSH
32500: EMPTY
32501: ST_TO_ADDR
// for i in temp_list do
32502: LD_ADDR_VAR 0 8
32506: PUSH
32507: LD_VAR 0 9
32511: PUSH
32512: FOR_IN
32513: IFFALSE 32565
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32515: LD_ADDR_VAR 0 10
32519: PUSH
32520: LD_VAR 0 10
32524: PUSH
32525: LD_VAR 0 8
32529: PUSH
32530: LD_INT 1
32532: ARRAY
32533: PUSH
32534: LD_VAR 0 2
32538: PLUS
32539: PUSH
32540: LD_VAR 0 8
32544: PUSH
32545: LD_INT 2
32547: ARRAY
32548: PUSH
32549: LD_VAR 0 3
32553: PLUS
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: EMPTY
32560: LIST
32561: ADD
32562: ST_TO_ADDR
32563: GO 32512
32565: POP
32566: POP
// result = temp_list2 ;
32567: LD_ADDR_VAR 0 7
32571: PUSH
32572: LD_VAR 0 10
32576: ST_TO_ADDR
// end ;
32577: LD_VAR 0 7
32581: RET
// export function EnemyInRange ( unit , dist ) ; begin
32582: LD_INT 0
32584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: CALL_OW 255
32599: PPUSH
32600: LD_VAR 0 1
32604: PPUSH
32605: CALL_OW 250
32609: PPUSH
32610: LD_VAR 0 1
32614: PPUSH
32615: CALL_OW 251
32619: PPUSH
32620: LD_VAR 0 2
32624: PPUSH
32625: CALL 5984 0 4
32629: PUSH
32630: LD_INT 4
32632: ARRAY
32633: ST_TO_ADDR
// end ;
32634: LD_VAR 0 3
32638: RET
// export function PlayerSeeMe ( unit ) ; begin
32639: LD_INT 0
32641: PPUSH
// result := See ( your_side , unit ) ;
32642: LD_ADDR_VAR 0 2
32646: PUSH
32647: LD_OWVAR 2
32651: PPUSH
32652: LD_VAR 0 1
32656: PPUSH
32657: CALL_OW 292
32661: ST_TO_ADDR
// end ;
32662: LD_VAR 0 2
32666: RET
// export function ReverseDir ( unit ) ; begin
32667: LD_INT 0
32669: PPUSH
// if not unit then
32670: LD_VAR 0 1
32674: NOT
32675: IFFALSE 32679
// exit ;
32677: GO 32702
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32679: LD_ADDR_VAR 0 2
32683: PUSH
32684: LD_VAR 0 1
32688: PPUSH
32689: CALL_OW 254
32693: PUSH
32694: LD_INT 3
32696: PLUS
32697: PUSH
32698: LD_INT 6
32700: MOD
32701: ST_TO_ADDR
// end ;
32702: LD_VAR 0 2
32706: RET
// export function ReverseArray ( array ) ; var i ; begin
32707: LD_INT 0
32709: PPUSH
32710: PPUSH
// if not array then
32711: LD_VAR 0 1
32715: NOT
32716: IFFALSE 32720
// exit ;
32718: GO 32775
// result := [ ] ;
32720: LD_ADDR_VAR 0 2
32724: PUSH
32725: EMPTY
32726: ST_TO_ADDR
// for i := array downto 1 do
32727: LD_ADDR_VAR 0 3
32731: PUSH
32732: DOUBLE
32733: LD_VAR 0 1
32737: INC
32738: ST_TO_ADDR
32739: LD_INT 1
32741: PUSH
32742: FOR_DOWNTO
32743: IFFALSE 32773
// result := Join ( result , array [ i ] ) ;
32745: LD_ADDR_VAR 0 2
32749: PUSH
32750: LD_VAR 0 2
32754: PPUSH
32755: LD_VAR 0 1
32759: PUSH
32760: LD_VAR 0 3
32764: ARRAY
32765: PPUSH
32766: CALL 37418 0 2
32770: ST_TO_ADDR
32771: GO 32742
32773: POP
32774: POP
// end ;
32775: LD_VAR 0 2
32779: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
32780: LD_INT 0
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
32786: PPUSH
32787: PPUSH
// if not unit or not hexes then
32788: LD_VAR 0 1
32792: NOT
32793: PUSH
32794: LD_VAR 0 2
32798: NOT
32799: OR
32800: IFFALSE 32804
// exit ;
32802: GO 32927
// dist := 9999 ;
32804: LD_ADDR_VAR 0 5
32808: PUSH
32809: LD_INT 9999
32811: ST_TO_ADDR
// for i = 1 to hexes do
32812: LD_ADDR_VAR 0 4
32816: PUSH
32817: DOUBLE
32818: LD_INT 1
32820: DEC
32821: ST_TO_ADDR
32822: LD_VAR 0 2
32826: PUSH
32827: FOR_TO
32828: IFFALSE 32915
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32830: LD_ADDR_VAR 0 6
32834: PUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: LD_VAR 0 2
32844: PUSH
32845: LD_VAR 0 4
32849: ARRAY
32850: PUSH
32851: LD_INT 1
32853: ARRAY
32854: PPUSH
32855: LD_VAR 0 2
32859: PUSH
32860: LD_VAR 0 4
32864: ARRAY
32865: PUSH
32866: LD_INT 2
32868: ARRAY
32869: PPUSH
32870: CALL_OW 297
32874: ST_TO_ADDR
// if tdist < dist then
32875: LD_VAR 0 6
32879: PUSH
32880: LD_VAR 0 5
32884: LESS
32885: IFFALSE 32913
// begin hex := hexes [ i ] ;
32887: LD_ADDR_VAR 0 8
32891: PUSH
32892: LD_VAR 0 2
32896: PUSH
32897: LD_VAR 0 4
32901: ARRAY
32902: ST_TO_ADDR
// dist := tdist ;
32903: LD_ADDR_VAR 0 5
32907: PUSH
32908: LD_VAR 0 6
32912: ST_TO_ADDR
// end ; end ;
32913: GO 32827
32915: POP
32916: POP
// result := hex ;
32917: LD_ADDR_VAR 0 3
32921: PUSH
32922: LD_VAR 0 8
32926: ST_TO_ADDR
// end ;
32927: LD_VAR 0 3
32931: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32932: LD_INT 0
32934: PPUSH
32935: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32936: LD_VAR 0 1
32940: NOT
32941: PUSH
32942: LD_VAR 0 1
32946: PUSH
32947: LD_INT 21
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 23
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PPUSH
32971: CALL_OW 69
32975: IN
32976: NOT
32977: OR
32978: IFFALSE 32982
// exit ;
32980: GO 33029
// for i = 1 to 3 do
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: DOUBLE
32988: LD_INT 1
32990: DEC
32991: ST_TO_ADDR
32992: LD_INT 3
32994: PUSH
32995: FOR_TO
32996: IFFALSE 33027
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32998: LD_VAR 0 1
33002: PPUSH
33003: CALL_OW 250
33007: PPUSH
33008: LD_VAR 0 1
33012: PPUSH
33013: CALL_OW 251
33017: PPUSH
33018: LD_INT 1
33020: PPUSH
33021: CALL_OW 453
33025: GO 32995
33027: POP
33028: POP
// end ;
33029: LD_VAR 0 2
33033: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33034: LD_INT 0
33036: PPUSH
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33042: LD_VAR 0 1
33046: NOT
33047: PUSH
33048: LD_VAR 0 2
33052: NOT
33053: OR
33054: PUSH
33055: LD_VAR 0 1
33059: PPUSH
33060: CALL_OW 314
33064: OR
33065: IFFALSE 33069
// exit ;
33067: GO 33536
// if GetLives ( i ) < 250 then
33069: LD_VAR 0 4
33073: PPUSH
33074: CALL_OW 256
33078: PUSH
33079: LD_INT 250
33081: LESS
33082: IFFALSE 33095
// begin ComAutodestruct ( i ) ;
33084: LD_VAR 0 4
33088: PPUSH
33089: CALL 32932 0 1
// exit ;
33093: GO 33536
// end ; x := GetX ( enemy_unit ) ;
33095: LD_ADDR_VAR 0 7
33099: PUSH
33100: LD_VAR 0 2
33104: PPUSH
33105: CALL_OW 250
33109: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33110: LD_ADDR_VAR 0 8
33114: PUSH
33115: LD_VAR 0 2
33119: PPUSH
33120: CALL_OW 251
33124: ST_TO_ADDR
// if not x or not y then
33125: LD_VAR 0 7
33129: NOT
33130: PUSH
33131: LD_VAR 0 8
33135: NOT
33136: OR
33137: IFFALSE 33141
// exit ;
33139: GO 33536
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33141: LD_ADDR_VAR 0 6
33145: PUSH
33146: LD_VAR 0 7
33150: PPUSH
33151: LD_INT 0
33153: PPUSH
33154: LD_INT 4
33156: PPUSH
33157: CALL_OW 272
33161: PUSH
33162: LD_VAR 0 8
33166: PPUSH
33167: LD_INT 0
33169: PPUSH
33170: LD_INT 4
33172: PPUSH
33173: CALL_OW 273
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_VAR 0 7
33186: PPUSH
33187: LD_INT 1
33189: PPUSH
33190: LD_INT 4
33192: PPUSH
33193: CALL_OW 272
33197: PUSH
33198: LD_VAR 0 8
33202: PPUSH
33203: LD_INT 1
33205: PPUSH
33206: LD_INT 4
33208: PPUSH
33209: CALL_OW 273
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_VAR 0 7
33222: PPUSH
33223: LD_INT 2
33225: PPUSH
33226: LD_INT 4
33228: PPUSH
33229: CALL_OW 272
33233: PUSH
33234: LD_VAR 0 8
33238: PPUSH
33239: LD_INT 2
33241: PPUSH
33242: LD_INT 4
33244: PPUSH
33245: CALL_OW 273
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_VAR 0 7
33258: PPUSH
33259: LD_INT 3
33261: PPUSH
33262: LD_INT 4
33264: PPUSH
33265: CALL_OW 272
33269: PUSH
33270: LD_VAR 0 8
33274: PPUSH
33275: LD_INT 3
33277: PPUSH
33278: LD_INT 4
33280: PPUSH
33281: CALL_OW 273
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_VAR 0 7
33294: PPUSH
33295: LD_INT 4
33297: PPUSH
33298: LD_INT 4
33300: PPUSH
33301: CALL_OW 272
33305: PUSH
33306: LD_VAR 0 8
33310: PPUSH
33311: LD_INT 4
33313: PPUSH
33314: LD_INT 4
33316: PPUSH
33317: CALL_OW 273
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_VAR 0 7
33330: PPUSH
33331: LD_INT 5
33333: PPUSH
33334: LD_INT 4
33336: PPUSH
33337: CALL_OW 272
33341: PUSH
33342: LD_VAR 0 8
33346: PPUSH
33347: LD_INT 5
33349: PPUSH
33350: LD_INT 4
33352: PPUSH
33353: CALL_OW 273
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: ST_TO_ADDR
// for i = tmp downto 1 do
33370: LD_ADDR_VAR 0 4
33374: PUSH
33375: DOUBLE
33376: LD_VAR 0 6
33380: INC
33381: ST_TO_ADDR
33382: LD_INT 1
33384: PUSH
33385: FOR_DOWNTO
33386: IFFALSE 33487
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33388: LD_VAR 0 6
33392: PUSH
33393: LD_VAR 0 4
33397: ARRAY
33398: PUSH
33399: LD_INT 1
33401: ARRAY
33402: PPUSH
33403: LD_VAR 0 6
33407: PUSH
33408: LD_VAR 0 4
33412: ARRAY
33413: PUSH
33414: LD_INT 2
33416: ARRAY
33417: PPUSH
33418: CALL_OW 488
33422: NOT
33423: PUSH
33424: LD_VAR 0 6
33428: PUSH
33429: LD_VAR 0 4
33433: ARRAY
33434: PUSH
33435: LD_INT 1
33437: ARRAY
33438: PPUSH
33439: LD_VAR 0 6
33443: PUSH
33444: LD_VAR 0 4
33448: ARRAY
33449: PUSH
33450: LD_INT 2
33452: ARRAY
33453: PPUSH
33454: CALL_OW 428
33458: PUSH
33459: LD_INT 0
33461: NONEQUAL
33462: OR
33463: IFFALSE 33485
// tmp := Delete ( tmp , i ) ;
33465: LD_ADDR_VAR 0 6
33469: PUSH
33470: LD_VAR 0 6
33474: PPUSH
33475: LD_VAR 0 4
33479: PPUSH
33480: CALL_OW 3
33484: ST_TO_ADDR
33485: GO 33385
33487: POP
33488: POP
// j := GetClosestHex ( unit , tmp ) ;
33489: LD_ADDR_VAR 0 5
33493: PUSH
33494: LD_VAR 0 1
33498: PPUSH
33499: LD_VAR 0 6
33503: PPUSH
33504: CALL 32780 0 2
33508: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33509: LD_VAR 0 1
33513: PPUSH
33514: LD_VAR 0 5
33518: PUSH
33519: LD_INT 1
33521: ARRAY
33522: PPUSH
33523: LD_VAR 0 5
33527: PUSH
33528: LD_INT 2
33530: ARRAY
33531: PPUSH
33532: CALL_OW 111
// end ;
33536: LD_VAR 0 3
33540: RET
// export function PrepareApemanSoldier ( ) ; begin
33541: LD_INT 0
33543: PPUSH
// uc_nation := 0 ;
33544: LD_ADDR_OWVAR 21
33548: PUSH
33549: LD_INT 0
33551: ST_TO_ADDR
// hc_sex := sex_male ;
33552: LD_ADDR_OWVAR 27
33556: PUSH
33557: LD_INT 1
33559: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33560: LD_ADDR_OWVAR 28
33564: PUSH
33565: LD_INT 15
33567: ST_TO_ADDR
// hc_gallery :=  ;
33568: LD_ADDR_OWVAR 33
33572: PUSH
33573: LD_STRING 
33575: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33576: LD_ADDR_OWVAR 31
33580: PUSH
33581: LD_INT 0
33583: PPUSH
33584: LD_INT 3
33586: PPUSH
33587: CALL_OW 12
33591: PUSH
33592: LD_INT 0
33594: PPUSH
33595: LD_INT 3
33597: PPUSH
33598: CALL_OW 12
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: ST_TO_ADDR
// end ;
33615: LD_VAR 0 1
33619: RET
// export function PrepareApemanEngineer ( ) ; begin
33620: LD_INT 0
33622: PPUSH
// uc_nation := 0 ;
33623: LD_ADDR_OWVAR 21
33627: PUSH
33628: LD_INT 0
33630: ST_TO_ADDR
// hc_sex := sex_male ;
33631: LD_ADDR_OWVAR 27
33635: PUSH
33636: LD_INT 1
33638: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33639: LD_ADDR_OWVAR 28
33643: PUSH
33644: LD_INT 16
33646: ST_TO_ADDR
// hc_gallery :=  ;
33647: LD_ADDR_OWVAR 33
33651: PUSH
33652: LD_STRING 
33654: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33655: LD_ADDR_OWVAR 31
33659: PUSH
33660: LD_INT 0
33662: PPUSH
33663: LD_INT 3
33665: PPUSH
33666: CALL_OW 12
33670: PUSH
33671: LD_INT 0
33673: PPUSH
33674: LD_INT 3
33676: PPUSH
33677: CALL_OW 12
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: ST_TO_ADDR
// end ;
33694: LD_VAR 0 1
33698: RET
// export function PrepareApeman ( agressivity ) ; begin
33699: LD_INT 0
33701: PPUSH
// uc_side := 0 ;
33702: LD_ADDR_OWVAR 20
33706: PUSH
33707: LD_INT 0
33709: ST_TO_ADDR
// uc_nation := 0 ;
33710: LD_ADDR_OWVAR 21
33714: PUSH
33715: LD_INT 0
33717: ST_TO_ADDR
// hc_sex := sex_male ;
33718: LD_ADDR_OWVAR 27
33722: PUSH
33723: LD_INT 1
33725: ST_TO_ADDR
// hc_class := class_apeman ;
33726: LD_ADDR_OWVAR 28
33730: PUSH
33731: LD_INT 12
33733: ST_TO_ADDR
// hc_gallery :=  ;
33734: LD_ADDR_OWVAR 33
33738: PUSH
33739: LD_STRING 
33741: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33742: LD_ADDR_OWVAR 35
33746: PUSH
33747: LD_VAR 0 1
33751: NEG
33752: PPUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 12
33762: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33763: LD_ADDR_OWVAR 31
33767: PUSH
33768: LD_INT 0
33770: PPUSH
33771: LD_INT 3
33773: PPUSH
33774: CALL_OW 12
33778: PUSH
33779: LD_INT 0
33781: PPUSH
33782: LD_INT 3
33784: PPUSH
33785: CALL_OW 12
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// end ;
33802: LD_VAR 0 2
33806: RET
// export function PrepareTiger ( agressivity ) ; begin
33807: LD_INT 0
33809: PPUSH
// uc_side := 0 ;
33810: LD_ADDR_OWVAR 20
33814: PUSH
33815: LD_INT 0
33817: ST_TO_ADDR
// uc_nation := 0 ;
33818: LD_ADDR_OWVAR 21
33822: PUSH
33823: LD_INT 0
33825: ST_TO_ADDR
// hc_class := class_tiger ;
33826: LD_ADDR_OWVAR 28
33830: PUSH
33831: LD_INT 14
33833: ST_TO_ADDR
// hc_gallery :=  ;
33834: LD_ADDR_OWVAR 33
33838: PUSH
33839: LD_STRING 
33841: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33842: LD_ADDR_OWVAR 35
33846: PUSH
33847: LD_VAR 0 1
33851: NEG
33852: PPUSH
33853: LD_VAR 0 1
33857: PPUSH
33858: CALL_OW 12
33862: ST_TO_ADDR
// end ;
33863: LD_VAR 0 2
33867: RET
// export function PrepareEnchidna ( ) ; begin
33868: LD_INT 0
33870: PPUSH
// uc_side := 0 ;
33871: LD_ADDR_OWVAR 20
33875: PUSH
33876: LD_INT 0
33878: ST_TO_ADDR
// uc_nation := 0 ;
33879: LD_ADDR_OWVAR 21
33883: PUSH
33884: LD_INT 0
33886: ST_TO_ADDR
// hc_class := class_baggie ;
33887: LD_ADDR_OWVAR 28
33891: PUSH
33892: LD_INT 13
33894: ST_TO_ADDR
// hc_gallery :=  ;
33895: LD_ADDR_OWVAR 33
33899: PUSH
33900: LD_STRING 
33902: ST_TO_ADDR
// end ;
33903: LD_VAR 0 1
33907: RET
// export function PrepareFrog ( ) ; begin
33908: LD_INT 0
33910: PPUSH
// uc_side := 0 ;
33911: LD_ADDR_OWVAR 20
33915: PUSH
33916: LD_INT 0
33918: ST_TO_ADDR
// uc_nation := 0 ;
33919: LD_ADDR_OWVAR 21
33923: PUSH
33924: LD_INT 0
33926: ST_TO_ADDR
// hc_class := class_frog ;
33927: LD_ADDR_OWVAR 28
33931: PUSH
33932: LD_INT 19
33934: ST_TO_ADDR
// hc_gallery :=  ;
33935: LD_ADDR_OWVAR 33
33939: PUSH
33940: LD_STRING 
33942: ST_TO_ADDR
// end ;
33943: LD_VAR 0 1
33947: RET
// export function PrepareFish ( ) ; begin
33948: LD_INT 0
33950: PPUSH
// uc_side := 0 ;
33951: LD_ADDR_OWVAR 20
33955: PUSH
33956: LD_INT 0
33958: ST_TO_ADDR
// uc_nation := 0 ;
33959: LD_ADDR_OWVAR 21
33963: PUSH
33964: LD_INT 0
33966: ST_TO_ADDR
// hc_class := class_fish ;
33967: LD_ADDR_OWVAR 28
33971: PUSH
33972: LD_INT 20
33974: ST_TO_ADDR
// hc_gallery :=  ;
33975: LD_ADDR_OWVAR 33
33979: PUSH
33980: LD_STRING 
33982: ST_TO_ADDR
// end ;
33983: LD_VAR 0 1
33987: RET
// export function PrepareBird ( ) ; begin
33988: LD_INT 0
33990: PPUSH
// uc_side := 0 ;
33991: LD_ADDR_OWVAR 20
33995: PUSH
33996: LD_INT 0
33998: ST_TO_ADDR
// uc_nation := 0 ;
33999: LD_ADDR_OWVAR 21
34003: PUSH
34004: LD_INT 0
34006: ST_TO_ADDR
// hc_class := class_phororhacos ;
34007: LD_ADDR_OWVAR 28
34011: PUSH
34012: LD_INT 18
34014: ST_TO_ADDR
// hc_gallery :=  ;
34015: LD_ADDR_OWVAR 33
34019: PUSH
34020: LD_STRING 
34022: ST_TO_ADDR
// end ;
34023: LD_VAR 0 1
34027: RET
// export function PrepareHorse ( ) ; begin
34028: LD_INT 0
34030: PPUSH
// uc_side := 0 ;
34031: LD_ADDR_OWVAR 20
34035: PUSH
34036: LD_INT 0
34038: ST_TO_ADDR
// uc_nation := 0 ;
34039: LD_ADDR_OWVAR 21
34043: PUSH
34044: LD_INT 0
34046: ST_TO_ADDR
// hc_class := class_horse ;
34047: LD_ADDR_OWVAR 28
34051: PUSH
34052: LD_INT 21
34054: ST_TO_ADDR
// hc_gallery :=  ;
34055: LD_ADDR_OWVAR 33
34059: PUSH
34060: LD_STRING 
34062: ST_TO_ADDR
// end ;
34063: LD_VAR 0 1
34067: RET
// export function PrepareMastodont ( ) ; begin
34068: LD_INT 0
34070: PPUSH
// uc_side := 0 ;
34071: LD_ADDR_OWVAR 20
34075: PUSH
34076: LD_INT 0
34078: ST_TO_ADDR
// uc_nation := 0 ;
34079: LD_ADDR_OWVAR 21
34083: PUSH
34084: LD_INT 0
34086: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34087: LD_ADDR_OWVAR 37
34091: PUSH
34092: LD_INT 31
34094: ST_TO_ADDR
// vc_control := control_rider ;
34095: LD_ADDR_OWVAR 38
34099: PUSH
34100: LD_INT 4
34102: ST_TO_ADDR
// end ;
34103: LD_VAR 0 1
34107: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34108: LD_INT 0
34110: PPUSH
34111: PPUSH
34112: PPUSH
// uc_side = 0 ;
34113: LD_ADDR_OWVAR 20
34117: PUSH
34118: LD_INT 0
34120: ST_TO_ADDR
// uc_nation = 0 ;
34121: LD_ADDR_OWVAR 21
34125: PUSH
34126: LD_INT 0
34128: ST_TO_ADDR
// InitHc_All ( ) ;
34129: CALL_OW 584
// InitVc ;
34133: CALL_OW 20
// if mastodonts then
34137: LD_VAR 0 6
34141: IFFALSE 34208
// for i = 1 to mastodonts do
34143: LD_ADDR_VAR 0 11
34147: PUSH
34148: DOUBLE
34149: LD_INT 1
34151: DEC
34152: ST_TO_ADDR
34153: LD_VAR 0 6
34157: PUSH
34158: FOR_TO
34159: IFFALSE 34206
// begin vc_chassis := 31 ;
34161: LD_ADDR_OWVAR 37
34165: PUSH
34166: LD_INT 31
34168: ST_TO_ADDR
// vc_control := control_rider ;
34169: LD_ADDR_OWVAR 38
34173: PUSH
34174: LD_INT 4
34176: ST_TO_ADDR
// animal := CreateVehicle ;
34177: LD_ADDR_VAR 0 12
34181: PUSH
34182: CALL_OW 45
34186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34187: LD_VAR 0 12
34191: PPUSH
34192: LD_VAR 0 8
34196: PPUSH
34197: LD_INT 0
34199: PPUSH
34200: CALL 36336 0 3
// end ;
34204: GO 34158
34206: POP
34207: POP
// if horses then
34208: LD_VAR 0 5
34212: IFFALSE 34279
// for i = 1 to horses do
34214: LD_ADDR_VAR 0 11
34218: PUSH
34219: DOUBLE
34220: LD_INT 1
34222: DEC
34223: ST_TO_ADDR
34224: LD_VAR 0 5
34228: PUSH
34229: FOR_TO
34230: IFFALSE 34277
// begin hc_class := 21 ;
34232: LD_ADDR_OWVAR 28
34236: PUSH
34237: LD_INT 21
34239: ST_TO_ADDR
// hc_gallery :=  ;
34240: LD_ADDR_OWVAR 33
34244: PUSH
34245: LD_STRING 
34247: ST_TO_ADDR
// animal := CreateHuman ;
34248: LD_ADDR_VAR 0 12
34252: PUSH
34253: CALL_OW 44
34257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34258: LD_VAR 0 12
34262: PPUSH
34263: LD_VAR 0 8
34267: PPUSH
34268: LD_INT 0
34270: PPUSH
34271: CALL 36336 0 3
// end ;
34275: GO 34229
34277: POP
34278: POP
// if birds then
34279: LD_VAR 0 1
34283: IFFALSE 34350
// for i = 1 to birds do
34285: LD_ADDR_VAR 0 11
34289: PUSH
34290: DOUBLE
34291: LD_INT 1
34293: DEC
34294: ST_TO_ADDR
34295: LD_VAR 0 1
34299: PUSH
34300: FOR_TO
34301: IFFALSE 34348
// begin hc_class = 18 ;
34303: LD_ADDR_OWVAR 28
34307: PUSH
34308: LD_INT 18
34310: ST_TO_ADDR
// hc_gallery =  ;
34311: LD_ADDR_OWVAR 33
34315: PUSH
34316: LD_STRING 
34318: ST_TO_ADDR
// animal := CreateHuman ;
34319: LD_ADDR_VAR 0 12
34323: PUSH
34324: CALL_OW 44
34328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34329: LD_VAR 0 12
34333: PPUSH
34334: LD_VAR 0 8
34338: PPUSH
34339: LD_INT 0
34341: PPUSH
34342: CALL 36336 0 3
// end ;
34346: GO 34300
34348: POP
34349: POP
// if tigers then
34350: LD_VAR 0 2
34354: IFFALSE 34438
// for i = 1 to tigers do
34356: LD_ADDR_VAR 0 11
34360: PUSH
34361: DOUBLE
34362: LD_INT 1
34364: DEC
34365: ST_TO_ADDR
34366: LD_VAR 0 2
34370: PUSH
34371: FOR_TO
34372: IFFALSE 34436
// begin hc_class = class_tiger ;
34374: LD_ADDR_OWVAR 28
34378: PUSH
34379: LD_INT 14
34381: ST_TO_ADDR
// hc_gallery =  ;
34382: LD_ADDR_OWVAR 33
34386: PUSH
34387: LD_STRING 
34389: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34390: LD_ADDR_OWVAR 35
34394: PUSH
34395: LD_INT 7
34397: NEG
34398: PPUSH
34399: LD_INT 7
34401: PPUSH
34402: CALL_OW 12
34406: ST_TO_ADDR
// animal := CreateHuman ;
34407: LD_ADDR_VAR 0 12
34411: PUSH
34412: CALL_OW 44
34416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34417: LD_VAR 0 12
34421: PPUSH
34422: LD_VAR 0 8
34426: PPUSH
34427: LD_INT 0
34429: PPUSH
34430: CALL 36336 0 3
// end ;
34434: GO 34371
34436: POP
34437: POP
// if apemans then
34438: LD_VAR 0 3
34442: IFFALSE 34565
// for i = 1 to apemans do
34444: LD_ADDR_VAR 0 11
34448: PUSH
34449: DOUBLE
34450: LD_INT 1
34452: DEC
34453: ST_TO_ADDR
34454: LD_VAR 0 3
34458: PUSH
34459: FOR_TO
34460: IFFALSE 34563
// begin hc_class = class_apeman ;
34462: LD_ADDR_OWVAR 28
34466: PUSH
34467: LD_INT 12
34469: ST_TO_ADDR
// hc_gallery =  ;
34470: LD_ADDR_OWVAR 33
34474: PUSH
34475: LD_STRING 
34477: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34478: LD_ADDR_OWVAR 35
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PPUSH
34487: LD_INT 2
34489: PPUSH
34490: CALL_OW 12
34494: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34495: LD_ADDR_OWVAR 31
34499: PUSH
34500: LD_INT 1
34502: PPUSH
34503: LD_INT 3
34505: PPUSH
34506: CALL_OW 12
34510: PUSH
34511: LD_INT 1
34513: PPUSH
34514: LD_INT 3
34516: PPUSH
34517: CALL_OW 12
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// animal := CreateHuman ;
34534: LD_ADDR_VAR 0 12
34538: PUSH
34539: CALL_OW 44
34543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34544: LD_VAR 0 12
34548: PPUSH
34549: LD_VAR 0 8
34553: PPUSH
34554: LD_INT 0
34556: PPUSH
34557: CALL 36336 0 3
// end ;
34561: GO 34459
34563: POP
34564: POP
// if enchidnas then
34565: LD_VAR 0 4
34569: IFFALSE 34636
// for i = 1 to enchidnas do
34571: LD_ADDR_VAR 0 11
34575: PUSH
34576: DOUBLE
34577: LD_INT 1
34579: DEC
34580: ST_TO_ADDR
34581: LD_VAR 0 4
34585: PUSH
34586: FOR_TO
34587: IFFALSE 34634
// begin hc_class = 13 ;
34589: LD_ADDR_OWVAR 28
34593: PUSH
34594: LD_INT 13
34596: ST_TO_ADDR
// hc_gallery =  ;
34597: LD_ADDR_OWVAR 33
34601: PUSH
34602: LD_STRING 
34604: ST_TO_ADDR
// animal := CreateHuman ;
34605: LD_ADDR_VAR 0 12
34609: PUSH
34610: CALL_OW 44
34614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34615: LD_VAR 0 12
34619: PPUSH
34620: LD_VAR 0 8
34624: PPUSH
34625: LD_INT 0
34627: PPUSH
34628: CALL 36336 0 3
// end ;
34632: GO 34586
34634: POP
34635: POP
// if fishes then
34636: LD_VAR 0 7
34640: IFFALSE 34707
// for i = 1 to fishes do
34642: LD_ADDR_VAR 0 11
34646: PUSH
34647: DOUBLE
34648: LD_INT 1
34650: DEC
34651: ST_TO_ADDR
34652: LD_VAR 0 7
34656: PUSH
34657: FOR_TO
34658: IFFALSE 34705
// begin hc_class = 20 ;
34660: LD_ADDR_OWVAR 28
34664: PUSH
34665: LD_INT 20
34667: ST_TO_ADDR
// hc_gallery =  ;
34668: LD_ADDR_OWVAR 33
34672: PUSH
34673: LD_STRING 
34675: ST_TO_ADDR
// animal := CreateHuman ;
34676: LD_ADDR_VAR 0 12
34680: PUSH
34681: CALL_OW 44
34685: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34686: LD_VAR 0 12
34690: PPUSH
34691: LD_VAR 0 9
34695: PPUSH
34696: LD_INT 0
34698: PPUSH
34699: CALL 36336 0 3
// end ;
34703: GO 34657
34705: POP
34706: POP
// end ;
34707: LD_VAR 0 10
34711: RET
// export function WantHeal ( sci , unit ) ; begin
34712: LD_INT 0
34714: PPUSH
// if GetTaskList ( sci ) > 0 then
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 437
34724: PUSH
34725: LD_INT 0
34727: GREATER
34728: IFFALSE 34798
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34730: LD_VAR 0 1
34734: PPUSH
34735: CALL_OW 437
34739: PUSH
34740: LD_INT 1
34742: ARRAY
34743: PUSH
34744: LD_INT 1
34746: ARRAY
34747: PUSH
34748: LD_STRING l
34750: EQUAL
34751: PUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: CALL_OW 437
34761: PUSH
34762: LD_INT 1
34764: ARRAY
34765: PUSH
34766: LD_INT 4
34768: ARRAY
34769: PUSH
34770: LD_VAR 0 2
34774: EQUAL
34775: AND
34776: IFFALSE 34788
// result := true else
34778: LD_ADDR_VAR 0 3
34782: PUSH
34783: LD_INT 1
34785: ST_TO_ADDR
34786: GO 34796
// result := false ;
34788: LD_ADDR_VAR 0 3
34792: PUSH
34793: LD_INT 0
34795: ST_TO_ADDR
// end else
34796: GO 34806
// result := false ;
34798: LD_ADDR_VAR 0 3
34802: PUSH
34803: LD_INT 0
34805: ST_TO_ADDR
// end ;
34806: LD_VAR 0 3
34810: RET
// export function HealTarget ( sci ) ; begin
34811: LD_INT 0
34813: PPUSH
// if not sci then
34814: LD_VAR 0 1
34818: NOT
34819: IFFALSE 34823
// exit ;
34821: GO 34888
// result := 0 ;
34823: LD_ADDR_VAR 0 2
34827: PUSH
34828: LD_INT 0
34830: ST_TO_ADDR
// if GetTaskList ( sci ) then
34831: LD_VAR 0 1
34835: PPUSH
34836: CALL_OW 437
34840: IFFALSE 34888
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34842: LD_VAR 0 1
34846: PPUSH
34847: CALL_OW 437
34851: PUSH
34852: LD_INT 1
34854: ARRAY
34855: PUSH
34856: LD_INT 1
34858: ARRAY
34859: PUSH
34860: LD_STRING l
34862: EQUAL
34863: IFFALSE 34888
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34865: LD_ADDR_VAR 0 2
34869: PUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 437
34879: PUSH
34880: LD_INT 1
34882: ARRAY
34883: PUSH
34884: LD_INT 4
34886: ARRAY
34887: ST_TO_ADDR
// end ;
34888: LD_VAR 0 2
34892: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34893: LD_INT 0
34895: PPUSH
34896: PPUSH
34897: PPUSH
34898: PPUSH
// if not base_units then
34899: LD_VAR 0 1
34903: NOT
34904: IFFALSE 34908
// exit ;
34906: GO 34995
// result := false ;
34908: LD_ADDR_VAR 0 2
34912: PUSH
34913: LD_INT 0
34915: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34916: LD_ADDR_VAR 0 5
34920: PUSH
34921: LD_VAR 0 1
34925: PPUSH
34926: LD_INT 21
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PPUSH
34936: CALL_OW 72
34940: ST_TO_ADDR
// if not tmp then
34941: LD_VAR 0 5
34945: NOT
34946: IFFALSE 34950
// exit ;
34948: GO 34995
// for i in tmp do
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_VAR 0 5
34959: PUSH
34960: FOR_IN
34961: IFFALSE 34993
// begin result := EnemyInRange ( i , 22 ) ;
34963: LD_ADDR_VAR 0 2
34967: PUSH
34968: LD_VAR 0 3
34972: PPUSH
34973: LD_INT 22
34975: PPUSH
34976: CALL 32582 0 2
34980: ST_TO_ADDR
// if result then
34981: LD_VAR 0 2
34985: IFFALSE 34991
// exit ;
34987: POP
34988: POP
34989: GO 34995
// end ;
34991: GO 34960
34993: POP
34994: POP
// end ;
34995: LD_VAR 0 2
34999: RET
// export function FilterByTag ( units , tag ) ; begin
35000: LD_INT 0
35002: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_VAR 0 1
35012: PPUSH
35013: LD_INT 120
35015: PUSH
35016: LD_VAR 0 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PPUSH
35025: CALL_OW 72
35029: ST_TO_ADDR
// end ;
35030: LD_VAR 0 3
35034: RET
// export function IsDriver ( un ) ; begin
35035: LD_INT 0
35037: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35038: LD_ADDR_VAR 0 2
35042: PUSH
35043: LD_VAR 0 1
35047: PUSH
35048: LD_INT 55
35050: PUSH
35051: EMPTY
35052: LIST
35053: PPUSH
35054: CALL_OW 69
35058: IN
35059: ST_TO_ADDR
// end ;
35060: LD_VAR 0 2
35064: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35065: LD_INT 0
35067: PPUSH
35068: PPUSH
// list := [ ] ;
35069: LD_ADDR_VAR 0 5
35073: PUSH
35074: EMPTY
35075: ST_TO_ADDR
// case d of 0 :
35076: LD_VAR 0 3
35080: PUSH
35081: LD_INT 0
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 35222
35089: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35090: LD_ADDR_VAR 0 5
35094: PUSH
35095: LD_VAR 0 1
35099: PUSH
35100: LD_INT 4
35102: MINUS
35103: PUSH
35104: LD_VAR 0 2
35108: PUSH
35109: LD_INT 4
35111: MINUS
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: PUSH
35121: LD_VAR 0 1
35125: PUSH
35126: LD_INT 3
35128: MINUS
35129: PUSH
35130: LD_VAR 0 2
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: LIST
35142: PUSH
35143: LD_VAR 0 1
35147: PUSH
35148: LD_INT 4
35150: PLUS
35151: PUSH
35152: LD_VAR 0 2
35156: PUSH
35157: LD_INT 4
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: PUSH
35165: LD_VAR 0 1
35169: PUSH
35170: LD_INT 3
35172: PLUS
35173: PUSH
35174: LD_VAR 0 2
35178: PUSH
35179: LD_INT 3
35181: PLUS
35182: PUSH
35183: LD_INT 5
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: PUSH
35191: LD_VAR 0 1
35195: PUSH
35196: LD_VAR 0 2
35200: PUSH
35201: LD_INT 4
35203: PLUS
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: ST_TO_ADDR
// end ; 1 :
35220: GO 35920
35222: LD_INT 1
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35230
35228: GO 35363
35230: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35231: LD_ADDR_VAR 0 5
35235: PUSH
35236: LD_VAR 0 1
35240: PUSH
35241: LD_VAR 0 2
35245: PUSH
35246: LD_INT 4
35248: MINUS
35249: PUSH
35250: LD_INT 3
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: PUSH
35258: LD_VAR 0 1
35262: PUSH
35263: LD_INT 3
35265: MINUS
35266: PUSH
35267: LD_VAR 0 2
35271: PUSH
35272: LD_INT 3
35274: MINUS
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: PUSH
35284: LD_VAR 0 1
35288: PUSH
35289: LD_INT 4
35291: MINUS
35292: PUSH
35293: LD_VAR 0 2
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: PUSH
35306: LD_VAR 0 1
35310: PUSH
35311: LD_VAR 0 2
35315: PUSH
35316: LD_INT 3
35318: PLUS
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: PUSH
35328: LD_VAR 0 1
35332: PUSH
35333: LD_INT 4
35335: PLUS
35336: PUSH
35337: LD_VAR 0 2
35341: PUSH
35342: LD_INT 4
35344: PLUS
35345: PUSH
35346: LD_INT 5
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// end ; 2 :
35361: GO 35920
35363: LD_INT 2
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35500
35371: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35372: LD_ADDR_VAR 0 5
35376: PUSH
35377: LD_VAR 0 1
35381: PUSH
35382: LD_VAR 0 2
35386: PUSH
35387: LD_INT 3
35389: MINUS
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: PUSH
35399: LD_VAR 0 1
35403: PUSH
35404: LD_INT 4
35406: PLUS
35407: PUSH
35408: LD_VAR 0 2
35412: PUSH
35413: LD_INT 4
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: PUSH
35421: LD_VAR 0 1
35425: PUSH
35426: LD_VAR 0 2
35430: PUSH
35431: LD_INT 4
35433: PLUS
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: LIST
35442: PUSH
35443: LD_VAR 0 1
35447: PUSH
35448: LD_INT 3
35450: MINUS
35451: PUSH
35452: LD_VAR 0 2
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: PUSH
35465: LD_VAR 0 1
35469: PUSH
35470: LD_INT 4
35472: MINUS
35473: PUSH
35474: LD_VAR 0 2
35478: PUSH
35479: LD_INT 4
35481: MINUS
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: ST_TO_ADDR
// end ; 3 :
35498: GO 35920
35500: LD_INT 3
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35641
35508: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35509: LD_ADDR_VAR 0 5
35513: PUSH
35514: LD_VAR 0 1
35518: PUSH
35519: LD_INT 3
35521: PLUS
35522: PUSH
35523: LD_VAR 0 2
35527: PUSH
35528: LD_INT 4
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: PUSH
35536: LD_VAR 0 1
35540: PUSH
35541: LD_INT 4
35543: PLUS
35544: PUSH
35545: LD_VAR 0 2
35549: PUSH
35550: LD_INT 4
35552: PLUS
35553: PUSH
35554: LD_INT 5
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: PUSH
35562: LD_VAR 0 1
35566: PUSH
35567: LD_INT 4
35569: MINUS
35570: PUSH
35571: LD_VAR 0 2
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: PUSH
35584: LD_VAR 0 1
35588: PUSH
35589: LD_VAR 0 2
35593: PUSH
35594: LD_INT 4
35596: MINUS
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: PUSH
35606: LD_VAR 0 1
35610: PUSH
35611: LD_INT 3
35613: MINUS
35614: PUSH
35615: LD_VAR 0 2
35619: PUSH
35620: LD_INT 3
35622: MINUS
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: ST_TO_ADDR
// end ; 4 :
35639: GO 35920
35641: LD_INT 4
35643: DOUBLE
35644: EQUAL
35645: IFTRUE 35649
35647: GO 35782
35649: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35650: LD_ADDR_VAR 0 5
35654: PUSH
35655: LD_VAR 0 1
35659: PUSH
35660: LD_VAR 0 2
35664: PUSH
35665: LD_INT 4
35667: PLUS
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: PUSH
35677: LD_VAR 0 1
35681: PUSH
35682: LD_INT 3
35684: PLUS
35685: PUSH
35686: LD_VAR 0 2
35690: PUSH
35691: LD_INT 3
35693: PLUS
35694: PUSH
35695: LD_INT 5
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: PUSH
35703: LD_VAR 0 1
35707: PUSH
35708: LD_INT 4
35710: PLUS
35711: PUSH
35712: LD_VAR 0 2
35716: PUSH
35717: LD_INT 4
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: PUSH
35725: LD_VAR 0 1
35729: PUSH
35730: LD_VAR 0 2
35734: PUSH
35735: LD_INT 3
35737: MINUS
35738: PUSH
35739: LD_INT 3
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: PUSH
35747: LD_VAR 0 1
35751: PUSH
35752: LD_INT 4
35754: MINUS
35755: PUSH
35756: LD_VAR 0 2
35760: PUSH
35761: LD_INT 4
35763: MINUS
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
// end ; 5 :
35780: GO 35920
35782: LD_INT 5
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35790
35788: GO 35919
35790: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35791: LD_ADDR_VAR 0 5
35795: PUSH
35796: LD_VAR 0 1
35800: PUSH
35801: LD_INT 4
35803: MINUS
35804: PUSH
35805: LD_VAR 0 2
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: LD_VAR 0 1
35822: PUSH
35823: LD_VAR 0 2
35827: PUSH
35828: LD_INT 4
35830: MINUS
35831: PUSH
35832: LD_INT 3
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: PUSH
35840: LD_VAR 0 1
35844: PUSH
35845: LD_INT 4
35847: PLUS
35848: PUSH
35849: LD_VAR 0 2
35853: PUSH
35854: LD_INT 4
35856: PLUS
35857: PUSH
35858: LD_INT 5
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: PUSH
35866: LD_VAR 0 1
35870: PUSH
35871: LD_INT 3
35873: PLUS
35874: PUSH
35875: LD_VAR 0 2
35879: PUSH
35880: LD_INT 4
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: PUSH
35888: LD_VAR 0 1
35892: PUSH
35893: LD_VAR 0 2
35897: PUSH
35898: LD_INT 3
35900: PLUS
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: ST_TO_ADDR
// end ; end ;
35917: GO 35920
35919: POP
// result := list ;
35920: LD_ADDR_VAR 0 4
35924: PUSH
35925: LD_VAR 0 5
35929: ST_TO_ADDR
// end ;
35930: LD_VAR 0 4
35934: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35935: LD_INT 0
35937: PPUSH
35938: PPUSH
35939: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35940: LD_VAR 0 1
35944: NOT
35945: PUSH
35946: LD_VAR 0 2
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 2
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 4
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: IN
35969: NOT
35970: OR
35971: IFFALSE 35975
// exit ;
35973: GO 36058
// tmp := [ ] ;
35975: LD_ADDR_VAR 0 5
35979: PUSH
35980: EMPTY
35981: ST_TO_ADDR
// for i in units do
35982: LD_ADDR_VAR 0 4
35986: PUSH
35987: LD_VAR 0 1
35991: PUSH
35992: FOR_IN
35993: IFFALSE 36027
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
35995: LD_ADDR_VAR 0 5
35999: PUSH
36000: LD_VAR 0 5
36004: PPUSH
36005: LD_VAR 0 4
36009: PPUSH
36010: LD_VAR 0 2
36014: PPUSH
36015: CALL_OW 259
36019: PPUSH
36020: CALL 37418 0 2
36024: ST_TO_ADDR
36025: GO 35992
36027: POP
36028: POP
// if not tmp then
36029: LD_VAR 0 5
36033: NOT
36034: IFFALSE 36038
// exit ;
36036: GO 36058
// result := SortListByListDesc ( units , tmp ) ;
36038: LD_ADDR_VAR 0 3
36042: PUSH
36043: LD_VAR 0 1
36047: PPUSH
36048: LD_VAR 0 5
36052: PPUSH
36053: CALL_OW 77
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 3
36062: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
// result := false ;
36068: LD_ADDR_VAR 0 3
36072: PUSH
36073: LD_INT 0
36075: ST_TO_ADDR
// if not building then
36076: LD_VAR 0 2
36080: NOT
36081: IFFALSE 36085
// exit ;
36083: GO 36223
// x := GetX ( building ) ;
36085: LD_ADDR_VAR 0 4
36089: PUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: CALL_OW 250
36099: ST_TO_ADDR
// y := GetY ( building ) ;
36100: LD_ADDR_VAR 0 5
36104: PUSH
36105: LD_VAR 0 2
36109: PPUSH
36110: CALL_OW 251
36114: ST_TO_ADDR
// if not x or not y then
36115: LD_VAR 0 4
36119: NOT
36120: PUSH
36121: LD_VAR 0 5
36125: NOT
36126: OR
36127: IFFALSE 36131
// exit ;
36129: GO 36223
// if GetTaskList ( unit ) then
36131: LD_VAR 0 1
36135: PPUSH
36136: CALL_OW 437
36140: IFFALSE 36223
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36142: LD_STRING e
36144: PUSH
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 437
36154: PUSH
36155: LD_INT 1
36157: ARRAY
36158: PUSH
36159: LD_INT 1
36161: ARRAY
36162: EQUAL
36163: PUSH
36164: LD_VAR 0 4
36168: PUSH
36169: LD_VAR 0 1
36173: PPUSH
36174: CALL_OW 437
36178: PUSH
36179: LD_INT 1
36181: ARRAY
36182: PUSH
36183: LD_INT 2
36185: ARRAY
36186: EQUAL
36187: AND
36188: PUSH
36189: LD_VAR 0 5
36193: PUSH
36194: LD_VAR 0 1
36198: PPUSH
36199: CALL_OW 437
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: PUSH
36208: LD_INT 3
36210: ARRAY
36211: EQUAL
36212: AND
36213: IFFALSE 36223
// result := true end ;
36215: LD_ADDR_VAR 0 3
36219: PUSH
36220: LD_INT 1
36222: ST_TO_ADDR
// end ;
36223: LD_VAR 0 3
36227: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36228: LD_INT 0
36230: PPUSH
// result := false ;
36231: LD_ADDR_VAR 0 4
36235: PUSH
36236: LD_INT 0
36238: ST_TO_ADDR
// if GetTaskList ( unit ) then
36239: LD_VAR 0 1
36243: PPUSH
36244: CALL_OW 437
36248: IFFALSE 36331
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36250: LD_STRING M
36252: PUSH
36253: LD_VAR 0 1
36257: PPUSH
36258: CALL_OW 437
36262: PUSH
36263: LD_INT 1
36265: ARRAY
36266: PUSH
36267: LD_INT 1
36269: ARRAY
36270: EQUAL
36271: PUSH
36272: LD_VAR 0 2
36276: PUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 437
36286: PUSH
36287: LD_INT 1
36289: ARRAY
36290: PUSH
36291: LD_INT 2
36293: ARRAY
36294: EQUAL
36295: AND
36296: PUSH
36297: LD_VAR 0 3
36301: PUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 437
36311: PUSH
36312: LD_INT 1
36314: ARRAY
36315: PUSH
36316: LD_INT 3
36318: ARRAY
36319: EQUAL
36320: AND
36321: IFFALSE 36331
// result := true ;
36323: LD_ADDR_VAR 0 4
36327: PUSH
36328: LD_INT 1
36330: ST_TO_ADDR
// end ; end ;
36331: LD_VAR 0 4
36335: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36336: LD_INT 0
36338: PPUSH
36339: PPUSH
36340: PPUSH
36341: PPUSH
// if not unit or not area then
36342: LD_VAR 0 1
36346: NOT
36347: PUSH
36348: LD_VAR 0 2
36352: NOT
36353: OR
36354: IFFALSE 36358
// exit ;
36356: GO 36521
// tmp := AreaToList ( area , i ) ;
36358: LD_ADDR_VAR 0 6
36362: PUSH
36363: LD_VAR 0 2
36367: PPUSH
36368: LD_VAR 0 5
36372: PPUSH
36373: CALL_OW 517
36377: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36378: LD_ADDR_VAR 0 5
36382: PUSH
36383: DOUBLE
36384: LD_INT 1
36386: DEC
36387: ST_TO_ADDR
36388: LD_VAR 0 6
36392: PUSH
36393: LD_INT 1
36395: ARRAY
36396: PUSH
36397: FOR_TO
36398: IFFALSE 36519
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36400: LD_ADDR_VAR 0 7
36404: PUSH
36405: LD_VAR 0 6
36409: PUSH
36410: LD_INT 1
36412: ARRAY
36413: PUSH
36414: LD_VAR 0 5
36418: ARRAY
36419: PUSH
36420: LD_VAR 0 6
36424: PUSH
36425: LD_INT 2
36427: ARRAY
36428: PUSH
36429: LD_VAR 0 5
36433: ARRAY
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36439: LD_INT 92
36441: PUSH
36442: LD_VAR 0 7
36446: PUSH
36447: LD_INT 1
36449: ARRAY
36450: PUSH
36451: LD_VAR 0 7
36455: PUSH
36456: LD_INT 2
36458: ARRAY
36459: PUSH
36460: LD_INT 3
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: PPUSH
36469: CALL_OW 69
36473: PUSH
36474: LD_INT 0
36476: EQUAL
36477: IFFALSE 36517
// begin PlaceUnitArea ( unit , area , mode ) ;
36479: LD_VAR 0 1
36483: PPUSH
36484: LD_VAR 0 2
36488: PPUSH
36489: LD_VAR 0 3
36493: PPUSH
36494: CALL_OW 49
// result := IsPlaced ( unit ) ;
36498: LD_ADDR_VAR 0 4
36502: PUSH
36503: LD_VAR 0 1
36507: PPUSH
36508: CALL_OW 305
36512: ST_TO_ADDR
// exit ;
36513: POP
36514: POP
36515: GO 36521
// end ; end ;
36517: GO 36397
36519: POP
36520: POP
// end ;
36521: LD_VAR 0 4
36525: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36526: LD_INT 0
36528: PPUSH
36529: PPUSH
36530: PPUSH
// if not side or side > 8 then
36531: LD_VAR 0 1
36535: NOT
36536: PUSH
36537: LD_VAR 0 1
36541: PUSH
36542: LD_INT 8
36544: GREATER
36545: OR
36546: IFFALSE 36550
// exit ;
36548: GO 36737
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36550: LD_ADDR_VAR 0 4
36554: PUSH
36555: LD_INT 22
36557: PUSH
36558: LD_VAR 0 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 21
36569: PUSH
36570: LD_INT 3
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL_OW 69
36585: ST_TO_ADDR
// if not tmp then
36586: LD_VAR 0 4
36590: NOT
36591: IFFALSE 36595
// exit ;
36593: GO 36737
// enable_addtolog := true ;
36595: LD_ADDR_OWVAR 81
36599: PUSH
36600: LD_INT 1
36602: ST_TO_ADDR
// AddToLog ( [ ) ;
36603: LD_STRING [
36605: PPUSH
36606: CALL_OW 561
// for i in tmp do
36610: LD_ADDR_VAR 0 3
36614: PUSH
36615: LD_VAR 0 4
36619: PUSH
36620: FOR_IN
36621: IFFALSE 36728
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36623: LD_STRING [
36625: PUSH
36626: LD_VAR 0 3
36630: PPUSH
36631: CALL_OW 266
36635: STR
36636: PUSH
36637: LD_STRING , 
36639: STR
36640: PUSH
36641: LD_VAR 0 3
36645: PPUSH
36646: CALL_OW 250
36650: STR
36651: PUSH
36652: LD_STRING , 
36654: STR
36655: PUSH
36656: LD_VAR 0 3
36660: PPUSH
36661: CALL_OW 251
36665: STR
36666: PUSH
36667: LD_STRING , 
36669: STR
36670: PUSH
36671: LD_VAR 0 3
36675: PPUSH
36676: CALL_OW 254
36680: STR
36681: PUSH
36682: LD_STRING , 
36684: STR
36685: PUSH
36686: LD_VAR 0 3
36690: PPUSH
36691: LD_INT 1
36693: PPUSH
36694: CALL_OW 268
36698: STR
36699: PUSH
36700: LD_STRING , 
36702: STR
36703: PUSH
36704: LD_VAR 0 3
36708: PPUSH
36709: LD_INT 2
36711: PPUSH
36712: CALL_OW 268
36716: STR
36717: PUSH
36718: LD_STRING ],
36720: STR
36721: PPUSH
36722: CALL_OW 561
// end ;
36726: GO 36620
36728: POP
36729: POP
// AddToLog ( ]; ) ;
36730: LD_STRING ];
36732: PPUSH
36733: CALL_OW 561
// end ;
36737: LD_VAR 0 2
36741: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36742: LD_INT 0
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
// if not area or not rate or not max then
36749: LD_VAR 0 1
36753: NOT
36754: PUSH
36755: LD_VAR 0 2
36759: NOT
36760: OR
36761: PUSH
36762: LD_VAR 0 4
36766: NOT
36767: OR
36768: IFFALSE 36772
// exit ;
36770: GO 36961
// while 1 do
36772: LD_INT 1
36774: IFFALSE 36961
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36776: LD_ADDR_VAR 0 9
36780: PUSH
36781: LD_VAR 0 1
36785: PPUSH
36786: LD_INT 1
36788: PPUSH
36789: CALL_OW 287
36793: PUSH
36794: LD_INT 10
36796: MUL
36797: ST_TO_ADDR
// r := rate / 10 ;
36798: LD_ADDR_VAR 0 7
36802: PUSH
36803: LD_VAR 0 2
36807: PUSH
36808: LD_INT 10
36810: DIVREAL
36811: ST_TO_ADDR
// time := 1 1$00 ;
36812: LD_ADDR_VAR 0 8
36816: PUSH
36817: LD_INT 2100
36819: ST_TO_ADDR
// if amount < min then
36820: LD_VAR 0 9
36824: PUSH
36825: LD_VAR 0 3
36829: LESS
36830: IFFALSE 36848
// r := r * 2 else
36832: LD_ADDR_VAR 0 7
36836: PUSH
36837: LD_VAR 0 7
36841: PUSH
36842: LD_INT 2
36844: MUL
36845: ST_TO_ADDR
36846: GO 36874
// if amount > max then
36848: LD_VAR 0 9
36852: PUSH
36853: LD_VAR 0 4
36857: GREATER
36858: IFFALSE 36874
// r := r / 2 ;
36860: LD_ADDR_VAR 0 7
36864: PUSH
36865: LD_VAR 0 7
36869: PUSH
36870: LD_INT 2
36872: DIVREAL
36873: ST_TO_ADDR
// time := time / r ;
36874: LD_ADDR_VAR 0 8
36878: PUSH
36879: LD_VAR 0 8
36883: PUSH
36884: LD_VAR 0 7
36888: DIVREAL
36889: ST_TO_ADDR
// if time < 0 then
36890: LD_VAR 0 8
36894: PUSH
36895: LD_INT 0
36897: LESS
36898: IFFALSE 36915
// time := time * - 1 ;
36900: LD_ADDR_VAR 0 8
36904: PUSH
36905: LD_VAR 0 8
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: MUL
36914: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
36915: LD_VAR 0 8
36919: PUSH
36920: LD_INT 35
36922: PPUSH
36923: LD_INT 875
36925: PPUSH
36926: CALL_OW 12
36930: PLUS
36931: PPUSH
36932: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36936: LD_INT 1
36938: PPUSH
36939: LD_INT 5
36941: PPUSH
36942: CALL_OW 12
36946: PPUSH
36947: LD_VAR 0 1
36951: PPUSH
36952: LD_INT 1
36954: PPUSH
36955: CALL_OW 55
// end ;
36959: GO 36772
// end ;
36961: LD_VAR 0 5
36965: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36966: LD_INT 0
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
// if not turrets or not factories then
36976: LD_VAR 0 1
36980: NOT
36981: PUSH
36982: LD_VAR 0 2
36986: NOT
36987: OR
36988: IFFALSE 36992
// exit ;
36990: GO 37299
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36992: LD_ADDR_VAR 0 10
36996: PUSH
36997: LD_INT 5
36999: PUSH
37000: LD_INT 6
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: LD_INT 4
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: LD_INT 5
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 24
37034: PUSH
37035: LD_INT 25
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 23
37044: PUSH
37045: LD_INT 27
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 42
37058: PUSH
37059: LD_INT 43
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 44
37068: PUSH
37069: LD_INT 46
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 45
37078: PUSH
37079: LD_INT 47
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// result := [ ] ;
37096: LD_ADDR_VAR 0 3
37100: PUSH
37101: EMPTY
37102: ST_TO_ADDR
// for i in turrets do
37103: LD_ADDR_VAR 0 4
37107: PUSH
37108: LD_VAR 0 1
37112: PUSH
37113: FOR_IN
37114: IFFALSE 37297
// begin nat := GetNation ( i ) ;
37116: LD_ADDR_VAR 0 7
37120: PUSH
37121: LD_VAR 0 4
37125: PPUSH
37126: CALL_OW 248
37130: ST_TO_ADDR
// weapon := 0 ;
37131: LD_ADDR_VAR 0 8
37135: PUSH
37136: LD_INT 0
37138: ST_TO_ADDR
// if not nat then
37139: LD_VAR 0 7
37143: NOT
37144: IFFALSE 37148
// continue ;
37146: GO 37113
// for j in list [ nat ] do
37148: LD_ADDR_VAR 0 5
37152: PUSH
37153: LD_VAR 0 10
37157: PUSH
37158: LD_VAR 0 7
37162: ARRAY
37163: PUSH
37164: FOR_IN
37165: IFFALSE 37206
// if GetBWeapon ( i ) = j [ 1 ] then
37167: LD_VAR 0 4
37171: PPUSH
37172: CALL_OW 269
37176: PUSH
37177: LD_VAR 0 5
37181: PUSH
37182: LD_INT 1
37184: ARRAY
37185: EQUAL
37186: IFFALSE 37204
// begin weapon := j [ 2 ] ;
37188: LD_ADDR_VAR 0 8
37192: PUSH
37193: LD_VAR 0 5
37197: PUSH
37198: LD_INT 2
37200: ARRAY
37201: ST_TO_ADDR
// break ;
37202: GO 37206
// end ;
37204: GO 37164
37206: POP
37207: POP
// if not weapon then
37208: LD_VAR 0 8
37212: NOT
37213: IFFALSE 37217
// continue ;
37215: GO 37113
// for k in factories do
37217: LD_ADDR_VAR 0 6
37221: PUSH
37222: LD_VAR 0 2
37226: PUSH
37227: FOR_IN
37228: IFFALSE 37293
// begin weapons := AvailableWeaponList ( k ) ;
37230: LD_ADDR_VAR 0 9
37234: PUSH
37235: LD_VAR 0 6
37239: PPUSH
37240: CALL_OW 478
37244: ST_TO_ADDR
// if not weapons then
37245: LD_VAR 0 9
37249: NOT
37250: IFFALSE 37254
// continue ;
37252: GO 37227
// if weapon in weapons then
37254: LD_VAR 0 8
37258: PUSH
37259: LD_VAR 0 9
37263: IN
37264: IFFALSE 37291
// begin result := [ i , weapon ] ;
37266: LD_ADDR_VAR 0 3
37270: PUSH
37271: LD_VAR 0 4
37275: PUSH
37276: LD_VAR 0 8
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: ST_TO_ADDR
// exit ;
37285: POP
37286: POP
37287: POP
37288: POP
37289: GO 37299
// end ; end ;
37291: GO 37227
37293: POP
37294: POP
// end ;
37295: GO 37113
37297: POP
37298: POP
// end ;
37299: LD_VAR 0 3
37303: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37304: LD_INT 0
37306: PPUSH
// if not side or side > 8 then
37307: LD_VAR 0 3
37311: NOT
37312: PUSH
37313: LD_VAR 0 3
37317: PUSH
37318: LD_INT 8
37320: GREATER
37321: OR
37322: IFFALSE 37326
// exit ;
37324: GO 37385
// if not range then
37326: LD_VAR 0 4
37330: NOT
37331: IFFALSE 37342
// range := - 12 ;
37333: LD_ADDR_VAR 0 4
37337: PUSH
37338: LD_INT 12
37340: NEG
37341: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37342: LD_VAR 0 1
37346: PPUSH
37347: LD_VAR 0 2
37351: PPUSH
37352: LD_VAR 0 3
37356: PPUSH
37357: LD_VAR 0 4
37361: PPUSH
37362: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37366: LD_VAR 0 1
37370: PPUSH
37371: LD_VAR 0 2
37375: PPUSH
37376: LD_VAR 0 3
37380: PPUSH
37381: CALL_OW 331
// end ;
37385: LD_VAR 0 5
37389: RET
// export function Video ( mode ) ; begin
37390: LD_INT 0
37392: PPUSH
// ingame_video = mode ;
37393: LD_ADDR_OWVAR 52
37397: PUSH
37398: LD_VAR 0 1
37402: ST_TO_ADDR
// interface_hidden = mode ;
37403: LD_ADDR_OWVAR 54
37407: PUSH
37408: LD_VAR 0 1
37412: ST_TO_ADDR
// end ;
37413: LD_VAR 0 2
37417: RET
// export function Join ( array , element ) ; begin
37418: LD_INT 0
37420: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: LD_VAR 0 1
37435: PUSH
37436: LD_INT 1
37438: PLUS
37439: PPUSH
37440: LD_VAR 0 2
37444: PPUSH
37445: CALL_OW 1
37449: ST_TO_ADDR
// end ;
37450: LD_VAR 0 3
37454: RET
// export function JoinUnion ( array , element ) ; begin
37455: LD_INT 0
37457: PPUSH
// result := array union element ;
37458: LD_ADDR_VAR 0 3
37462: PUSH
37463: LD_VAR 0 1
37467: PUSH
37468: LD_VAR 0 2
37472: UNION
37473: ST_TO_ADDR
// end ;
37474: LD_VAR 0 3
37478: RET
// export function GetBehemoths ( side ) ; begin
37479: LD_INT 0
37481: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37482: LD_ADDR_VAR 0 2
37486: PUSH
37487: LD_INT 22
37489: PUSH
37490: LD_VAR 0 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 31
37501: PUSH
37502: LD_INT 25
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PPUSH
37513: CALL_OW 69
37517: ST_TO_ADDR
// end ;
37518: LD_VAR 0 2
37522: RET
// export function Shuffle ( array ) ; var i , index ; begin
37523: LD_INT 0
37525: PPUSH
37526: PPUSH
37527: PPUSH
// result := [ ] ;
37528: LD_ADDR_VAR 0 2
37532: PUSH
37533: EMPTY
37534: ST_TO_ADDR
// if not array then
37535: LD_VAR 0 1
37539: NOT
37540: IFFALSE 37544
// exit ;
37542: GO 37643
// Randomize ;
37544: CALL_OW 10
// for i = array downto 1 do
37548: LD_ADDR_VAR 0 3
37552: PUSH
37553: DOUBLE
37554: LD_VAR 0 1
37558: INC
37559: ST_TO_ADDR
37560: LD_INT 1
37562: PUSH
37563: FOR_DOWNTO
37564: IFFALSE 37641
// begin index := rand ( 1 , array ) ;
37566: LD_ADDR_VAR 0 4
37570: PUSH
37571: LD_INT 1
37573: PPUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: CALL_OW 12
37583: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37584: LD_ADDR_VAR 0 2
37588: PUSH
37589: LD_VAR 0 2
37593: PPUSH
37594: LD_VAR 0 2
37598: PUSH
37599: LD_INT 1
37601: PLUS
37602: PPUSH
37603: LD_VAR 0 1
37607: PUSH
37608: LD_VAR 0 4
37612: ARRAY
37613: PPUSH
37614: CALL_OW 2
37618: ST_TO_ADDR
// array := Delete ( array , index ) ;
37619: LD_ADDR_VAR 0 1
37623: PUSH
37624: LD_VAR 0 1
37628: PPUSH
37629: LD_VAR 0 4
37633: PPUSH
37634: CALL_OW 3
37638: ST_TO_ADDR
// end ;
37639: GO 37563
37641: POP
37642: POP
// end ;
37643: LD_VAR 0 2
37647: RET
// export function GetBaseMaterials ( base ) ; begin
37648: LD_INT 0
37650: PPUSH
// result := [ 0 , 0 , 0 ] ;
37651: LD_ADDR_VAR 0 2
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: ST_TO_ADDR
// if not base then
37670: LD_VAR 0 1
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 37728
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: LD_INT 1
37691: PPUSH
37692: CALL_OW 275
37696: PUSH
37697: LD_VAR 0 1
37701: PPUSH
37702: LD_INT 2
37704: PPUSH
37705: CALL_OW 275
37709: PUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: LD_INT 3
37717: PPUSH
37718: CALL_OW 275
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// end ;
37728: LD_VAR 0 2
37732: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37733: LD_INT 0
37735: PPUSH
37736: PPUSH
// result := array ;
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_VAR 0 1
37746: ST_TO_ADDR
// if size >= result then
37747: LD_VAR 0 2
37751: PUSH
37752: LD_VAR 0 3
37756: GREATEREQUAL
37757: IFFALSE 37761
// exit ;
37759: GO 37811
// if size then
37761: LD_VAR 0 2
37765: IFFALSE 37811
// for i := array downto size do
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: DOUBLE
37773: LD_VAR 0 1
37777: INC
37778: ST_TO_ADDR
37779: LD_VAR 0 2
37783: PUSH
37784: FOR_DOWNTO
37785: IFFALSE 37809
// result := Delete ( result , result ) ;
37787: LD_ADDR_VAR 0 3
37791: PUSH
37792: LD_VAR 0 3
37796: PPUSH
37797: LD_VAR 0 3
37801: PPUSH
37802: CALL_OW 3
37806: ST_TO_ADDR
37807: GO 37784
37809: POP
37810: POP
// end ;
37811: LD_VAR 0 3
37815: RET
// export function ComExit ( unit ) ; var tmp ; begin
37816: LD_INT 0
37818: PPUSH
37819: PPUSH
// if not IsInUnit ( unit ) then
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL_OW 310
37829: NOT
37830: IFFALSE 37834
// exit ;
37832: GO 37894
// tmp := IsInUnit ( unit ) ;
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 310
37848: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37849: LD_VAR 0 3
37853: PPUSH
37854: CALL_OW 247
37858: PUSH
37859: LD_INT 2
37861: EQUAL
37862: IFFALSE 37875
// ComExitVehicle ( unit ) else
37864: LD_VAR 0 1
37868: PPUSH
37869: CALL_OW 121
37873: GO 37884
// ComExitBuilding ( unit ) ;
37875: LD_VAR 0 1
37879: PPUSH
37880: CALL_OW 122
// result := tmp ;
37884: LD_ADDR_VAR 0 2
37888: PUSH
37889: LD_VAR 0 3
37893: ST_TO_ADDR
// end ;
37894: LD_VAR 0 2
37898: RET
// export function ComExitAll ( units ) ; var i ; begin
37899: LD_INT 0
37901: PPUSH
37902: PPUSH
// if not units then
37903: LD_VAR 0 1
37907: NOT
37908: IFFALSE 37912
// exit ;
37910: GO 37938
// for i in units do
37912: LD_ADDR_VAR 0 3
37916: PUSH
37917: LD_VAR 0 1
37921: PUSH
37922: FOR_IN
37923: IFFALSE 37936
// ComExit ( i ) ;
37925: LD_VAR 0 3
37929: PPUSH
37930: CALL 37816 0 1
37934: GO 37922
37936: POP
37937: POP
// end ;
37938: LD_VAR 0 2
37942: RET
// export function ResetHc ; begin
37943: LD_INT 0
37945: PPUSH
// InitHc ;
37946: CALL_OW 19
// hc_importance := 0 ;
37950: LD_ADDR_OWVAR 32
37954: PUSH
37955: LD_INT 0
37957: ST_TO_ADDR
// end ;
37958: LD_VAR 0 1
37962: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37963: LD_INT 0
37965: PPUSH
37966: PPUSH
37967: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37968: LD_ADDR_VAR 0 6
37972: PUSH
37973: LD_VAR 0 1
37977: PUSH
37978: LD_VAR 0 3
37982: PLUS
37983: PUSH
37984: LD_INT 2
37986: DIV
37987: ST_TO_ADDR
// if _x < 0 then
37988: LD_VAR 0 6
37992: PUSH
37993: LD_INT 0
37995: LESS
37996: IFFALSE 38013
// _x := _x * - 1 ;
37998: LD_ADDR_VAR 0 6
38002: PUSH
38003: LD_VAR 0 6
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: MUL
38012: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38013: LD_ADDR_VAR 0 7
38017: PUSH
38018: LD_VAR 0 2
38022: PUSH
38023: LD_VAR 0 4
38027: PLUS
38028: PUSH
38029: LD_INT 2
38031: DIV
38032: ST_TO_ADDR
// if _y < 0 then
38033: LD_VAR 0 7
38037: PUSH
38038: LD_INT 0
38040: LESS
38041: IFFALSE 38058
// _y := _y * - 1 ;
38043: LD_ADDR_VAR 0 7
38047: PUSH
38048: LD_VAR 0 7
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: MUL
38057: ST_TO_ADDR
// result := [ _x , _y ] ;
38058: LD_ADDR_VAR 0 5
38062: PUSH
38063: LD_VAR 0 6
38067: PUSH
38068: LD_VAR 0 7
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: ST_TO_ADDR
// end ;
38077: LD_VAR 0 5
38081: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38082: LD_INT 0
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
// task := GetTaskList ( unit ) ;
38088: LD_ADDR_VAR 0 7
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 437
38102: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38103: LD_VAR 0 7
38107: NOT
38108: PUSH
38109: LD_VAR 0 1
38113: PPUSH
38114: LD_VAR 0 2
38118: PPUSH
38119: CALL_OW 308
38123: NOT
38124: AND
38125: IFFALSE 38129
// exit ;
38127: GO 38247
// if IsInArea ( unit , area ) then
38129: LD_VAR 0 1
38133: PPUSH
38134: LD_VAR 0 2
38138: PPUSH
38139: CALL_OW 308
38143: IFFALSE 38161
// begin ComMoveToArea ( unit , goAway ) ;
38145: LD_VAR 0 1
38149: PPUSH
38150: LD_VAR 0 3
38154: PPUSH
38155: CALL_OW 113
// exit ;
38159: GO 38247
// end ; if task [ 1 ] [ 1 ] <> M then
38161: LD_VAR 0 7
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: PUSH
38174: LD_STRING M
38176: NONEQUAL
38177: IFFALSE 38181
// exit ;
38179: GO 38247
// x := task [ 1 ] [ 2 ] ;
38181: LD_ADDR_VAR 0 5
38185: PUSH
38186: LD_VAR 0 7
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: PUSH
38195: LD_INT 2
38197: ARRAY
38198: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38199: LD_ADDR_VAR 0 6
38203: PUSH
38204: LD_VAR 0 7
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: PUSH
38213: LD_INT 3
38215: ARRAY
38216: ST_TO_ADDR
// if InArea ( x , y , area ) then
38217: LD_VAR 0 5
38221: PPUSH
38222: LD_VAR 0 6
38226: PPUSH
38227: LD_VAR 0 2
38231: PPUSH
38232: CALL_OW 309
38236: IFFALSE 38247
// ComStop ( unit ) ;
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 141
// end ;
38247: LD_VAR 0 4
38251: RET
// export function Abs ( value ) ; begin
38252: LD_INT 0
38254: PPUSH
// result := value ;
38255: LD_ADDR_VAR 0 2
38259: PUSH
38260: LD_VAR 0 1
38264: ST_TO_ADDR
// if value < 0 then
38265: LD_VAR 0 1
38269: PUSH
38270: LD_INT 0
38272: LESS
38273: IFFALSE 38290
// result := value * - 1 ;
38275: LD_ADDR_VAR 0 2
38279: PUSH
38280: LD_VAR 0 1
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: MUL
38289: ST_TO_ADDR
// end ;
38290: LD_VAR 0 2
38294: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38295: LD_INT 0
38297: PPUSH
38298: PPUSH
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
// if not unit or not building then
38305: LD_VAR 0 1
38309: NOT
38310: PUSH
38311: LD_VAR 0 2
38315: NOT
38316: OR
38317: IFFALSE 38321
// exit ;
38319: GO 38547
// x := GetX ( building ) ;
38321: LD_ADDR_VAR 0 4
38325: PUSH
38326: LD_VAR 0 2
38330: PPUSH
38331: CALL_OW 250
38335: ST_TO_ADDR
// y := GetY ( building ) ;
38336: LD_ADDR_VAR 0 6
38340: PUSH
38341: LD_VAR 0 2
38345: PPUSH
38346: CALL_OW 251
38350: ST_TO_ADDR
// d := GetDir ( building ) ;
38351: LD_ADDR_VAR 0 8
38355: PUSH
38356: LD_VAR 0 2
38360: PPUSH
38361: CALL_OW 254
38365: ST_TO_ADDR
// r := 4 ;
38366: LD_ADDR_VAR 0 9
38370: PUSH
38371: LD_INT 4
38373: ST_TO_ADDR
// for i := 1 to 5 do
38374: LD_ADDR_VAR 0 10
38378: PUSH
38379: DOUBLE
38380: LD_INT 1
38382: DEC
38383: ST_TO_ADDR
38384: LD_INT 5
38386: PUSH
38387: FOR_TO
38388: IFFALSE 38545
// begin _x := ShiftX ( x , d , r + i ) ;
38390: LD_ADDR_VAR 0 5
38394: PUSH
38395: LD_VAR 0 4
38399: PPUSH
38400: LD_VAR 0 8
38404: PPUSH
38405: LD_VAR 0 9
38409: PUSH
38410: LD_VAR 0 10
38414: PLUS
38415: PPUSH
38416: CALL_OW 272
38420: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38421: LD_ADDR_VAR 0 7
38425: PUSH
38426: LD_VAR 0 6
38430: PPUSH
38431: LD_VAR 0 8
38435: PPUSH
38436: LD_VAR 0 9
38440: PUSH
38441: LD_VAR 0 10
38445: PLUS
38446: PPUSH
38447: CALL_OW 273
38451: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38452: LD_VAR 0 5
38456: PPUSH
38457: LD_VAR 0 7
38461: PPUSH
38462: CALL_OW 488
38466: PUSH
38467: LD_VAR 0 5
38471: PPUSH
38472: LD_VAR 0 7
38476: PPUSH
38477: CALL_OW 428
38481: PPUSH
38482: CALL_OW 247
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: IN
38497: NOT
38498: AND
38499: IFFALSE 38543
// begin ComMoveXY ( unit , _x , _y ) ;
38501: LD_VAR 0 1
38505: PPUSH
38506: LD_VAR 0 5
38510: PPUSH
38511: LD_VAR 0 7
38515: PPUSH
38516: CALL_OW 111
// result := [ _x , _y ] ;
38520: LD_ADDR_VAR 0 3
38524: PUSH
38525: LD_VAR 0 5
38529: PUSH
38530: LD_VAR 0 7
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// exit ;
38539: POP
38540: POP
38541: GO 38547
// end ; end ;
38543: GO 38387
38545: POP
38546: POP
// end ;
38547: LD_VAR 0 3
38551: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38552: LD_INT 0
38554: PPUSH
38555: PPUSH
38556: PPUSH
// result := 0 ;
38557: LD_ADDR_VAR 0 3
38561: PUSH
38562: LD_INT 0
38564: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38565: LD_VAR 0 1
38569: PUSH
38570: LD_INT 0
38572: LESS
38573: PUSH
38574: LD_VAR 0 1
38578: PUSH
38579: LD_INT 8
38581: GREATER
38582: OR
38583: PUSH
38584: LD_VAR 0 2
38588: PUSH
38589: LD_INT 0
38591: LESS
38592: OR
38593: PUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_INT 8
38601: GREATER
38602: OR
38603: IFFALSE 38607
// exit ;
38605: GO 38682
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38607: LD_ADDR_VAR 0 4
38611: PUSH
38612: LD_INT 22
38614: PUSH
38615: LD_VAR 0 2
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PPUSH
38624: CALL_OW 69
38628: PUSH
38629: FOR_IN
38630: IFFALSE 38680
// begin un := UnitShoot ( i ) ;
38632: LD_ADDR_VAR 0 5
38636: PUSH
38637: LD_VAR 0 4
38641: PPUSH
38642: CALL_OW 504
38646: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38647: LD_VAR 0 5
38651: PPUSH
38652: CALL_OW 255
38656: PUSH
38657: LD_VAR 0 1
38661: EQUAL
38662: IFFALSE 38678
// begin result := un ;
38664: LD_ADDR_VAR 0 3
38668: PUSH
38669: LD_VAR 0 5
38673: ST_TO_ADDR
// exit ;
38674: POP
38675: POP
38676: GO 38682
// end ; end ;
38678: GO 38629
38680: POP
38681: POP
// end ;
38682: LD_VAR 0 3
38686: RET
// export function GetCargoBay ( units ) ; begin
38687: LD_INT 0
38689: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38690: LD_ADDR_VAR 0 2
38694: PUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: LD_INT 2
38702: PUSH
38703: LD_INT 34
38705: PUSH
38706: LD_INT 12
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 34
38715: PUSH
38716: LD_INT 51
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 34
38725: PUSH
38726: LD_INT 32
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 34
38735: PUSH
38736: LD_INT 89
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: PPUSH
38750: CALL_OW 72
38754: ST_TO_ADDR
// end ;
38755: LD_VAR 0 2
38759: RET
// export function Negate ( value ) ; begin
38760: LD_INT 0
38762: PPUSH
// result := not value ;
38763: LD_ADDR_VAR 0 2
38767: PUSH
38768: LD_VAR 0 1
38772: NOT
38773: ST_TO_ADDR
// end ;
38774: LD_VAR 0 2
38778: RET
// export function Inc ( value ) ; begin
38779: LD_INT 0
38781: PPUSH
// result := value + 1 ;
38782: LD_ADDR_VAR 0 2
38786: PUSH
38787: LD_VAR 0 1
38791: PUSH
38792: LD_INT 1
38794: PLUS
38795: ST_TO_ADDR
// end ;
38796: LD_VAR 0 2
38800: RET
// export function Dec ( value ) ; begin
38801: LD_INT 0
38803: PPUSH
// result := value - 1 ;
38804: LD_ADDR_VAR 0 2
38808: PUSH
38809: LD_VAR 0 1
38813: PUSH
38814: LD_INT 1
38816: MINUS
38817: ST_TO_ADDR
// end ;
38818: LD_VAR 0 2
38822: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38823: LD_INT 0
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38833: LD_VAR 0 1
38837: PPUSH
38838: LD_VAR 0 2
38842: PPUSH
38843: CALL_OW 488
38847: NOT
38848: PUSH
38849: LD_VAR 0 3
38853: PPUSH
38854: LD_VAR 0 4
38858: PPUSH
38859: CALL_OW 488
38863: NOT
38864: OR
38865: IFFALSE 38878
// begin result := - 1 ;
38867: LD_ADDR_VAR 0 5
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: ST_TO_ADDR
// exit ;
38876: GO 39113
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
38878: LD_ADDR_VAR 0 12
38882: PUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: LD_VAR 0 2
38892: PPUSH
38893: LD_VAR 0 3
38897: PPUSH
38898: LD_VAR 0 4
38902: PPUSH
38903: CALL 37963 0 4
38907: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
38908: LD_ADDR_VAR 0 11
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: LD_VAR 0 2
38922: PPUSH
38923: LD_VAR 0 12
38927: PUSH
38928: LD_INT 1
38930: ARRAY
38931: PPUSH
38932: LD_VAR 0 12
38936: PUSH
38937: LD_INT 2
38939: ARRAY
38940: PPUSH
38941: CALL_OW 298
38945: ST_TO_ADDR
// distance := 9999 ;
38946: LD_ADDR_VAR 0 10
38950: PUSH
38951: LD_INT 9999
38953: ST_TO_ADDR
// for i := 0 to 5 do
38954: LD_ADDR_VAR 0 6
38958: PUSH
38959: DOUBLE
38960: LD_INT 0
38962: DEC
38963: ST_TO_ADDR
38964: LD_INT 5
38966: PUSH
38967: FOR_TO
38968: IFFALSE 39111
// begin _x := ShiftX ( x1 , i , centerDist ) ;
38970: LD_ADDR_VAR 0 7
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_VAR 0 6
38984: PPUSH
38985: LD_VAR 0 11
38989: PPUSH
38990: CALL_OW 272
38994: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
38995: LD_ADDR_VAR 0 8
38999: PUSH
39000: LD_VAR 0 2
39004: PPUSH
39005: LD_VAR 0 6
39009: PPUSH
39010: LD_VAR 0 11
39014: PPUSH
39015: CALL_OW 273
39019: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39020: LD_VAR 0 7
39024: PPUSH
39025: LD_VAR 0 8
39029: PPUSH
39030: CALL_OW 488
39034: NOT
39035: IFFALSE 39039
// continue ;
39037: GO 38967
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39039: LD_ADDR_VAR 0 9
39043: PUSH
39044: LD_VAR 0 12
39048: PUSH
39049: LD_INT 1
39051: ARRAY
39052: PPUSH
39053: LD_VAR 0 12
39057: PUSH
39058: LD_INT 2
39060: ARRAY
39061: PPUSH
39062: LD_VAR 0 7
39066: PPUSH
39067: LD_VAR 0 8
39071: PPUSH
39072: CALL_OW 298
39076: ST_TO_ADDR
// if tmp < distance then
39077: LD_VAR 0 9
39081: PUSH
39082: LD_VAR 0 10
39086: LESS
39087: IFFALSE 39109
// begin result := i ;
39089: LD_ADDR_VAR 0 5
39093: PUSH
39094: LD_VAR 0 6
39098: ST_TO_ADDR
// distance := tmp ;
39099: LD_ADDR_VAR 0 10
39103: PUSH
39104: LD_VAR 0 9
39108: ST_TO_ADDR
// end ; end ;
39109: GO 38967
39111: POP
39112: POP
// end ;
39113: LD_VAR 0 5
39117: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
// if not driver or not IsInUnit ( driver ) then
39122: LD_VAR 0 1
39126: NOT
39127: PUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 310
39137: NOT
39138: OR
39139: IFFALSE 39143
// exit ;
39141: GO 39233
// vehicle := IsInUnit ( driver ) ;
39143: LD_ADDR_VAR 0 3
39147: PUSH
39148: LD_VAR 0 1
39152: PPUSH
39153: CALL_OW 310
39157: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39158: LD_VAR 0 1
39162: PPUSH
39163: LD_STRING \
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: PUSH
39193: LD_STRING E
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_VAR 0 3
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PPUSH
39229: CALL_OW 446
// end ;
39233: LD_VAR 0 2
39237: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39238: LD_INT 0
39240: PPUSH
39241: PPUSH
// if not driver or not IsInUnit ( driver ) then
39242: LD_VAR 0 1
39246: NOT
39247: PUSH
39248: LD_VAR 0 1
39252: PPUSH
39253: CALL_OW 310
39257: NOT
39258: OR
39259: IFFALSE 39263
// exit ;
39261: GO 39353
// vehicle := IsInUnit ( driver ) ;
39263: LD_ADDR_VAR 0 3
39267: PUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: CALL_OW 310
39277: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39278: LD_VAR 0 1
39282: PPUSH
39283: LD_STRING \
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: PUSH
39313: LD_STRING E
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_VAR 0 3
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PPUSH
39349: CALL_OW 447
// end ;
39353: LD_VAR 0 2
39357: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39358: LD_INT 0
39360: PPUSH
39361: PPUSH
39362: PPUSH
// tmp := [ ] ;
39363: LD_ADDR_VAR 0 5
39367: PUSH
39368: EMPTY
39369: ST_TO_ADDR
// for i in units do
39370: LD_ADDR_VAR 0 4
39374: PUSH
39375: LD_VAR 0 1
39379: PUSH
39380: FOR_IN
39381: IFFALSE 39419
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39383: LD_ADDR_VAR 0 5
39387: PUSH
39388: LD_VAR 0 5
39392: PPUSH
39393: LD_VAR 0 5
39397: PUSH
39398: LD_INT 1
39400: PLUS
39401: PPUSH
39402: LD_VAR 0 4
39406: PPUSH
39407: CALL_OW 256
39411: PPUSH
39412: CALL_OW 2
39416: ST_TO_ADDR
39417: GO 39380
39419: POP
39420: POP
// if not tmp then
39421: LD_VAR 0 5
39425: NOT
39426: IFFALSE 39430
// exit ;
39428: GO 39478
// if asc then
39430: LD_VAR 0 2
39434: IFFALSE 39458
// result := SortListByListAsc ( units , tmp ) else
39436: LD_ADDR_VAR 0 3
39440: PUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: LD_VAR 0 5
39450: PPUSH
39451: CALL_OW 76
39455: ST_TO_ADDR
39456: GO 39478
// result := SortListByListDesc ( units , tmp ) ;
39458: LD_ADDR_VAR 0 3
39462: PUSH
39463: LD_VAR 0 1
39467: PPUSH
39468: LD_VAR 0 5
39472: PPUSH
39473: CALL_OW 77
39477: ST_TO_ADDR
// end ;
39478: LD_VAR 0 3
39482: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39483: LD_INT 0
39485: PPUSH
39486: PPUSH
// task := GetTaskList ( mech ) ;
39487: LD_ADDR_VAR 0 4
39491: PUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 437
39501: ST_TO_ADDR
// if not task then
39502: LD_VAR 0 4
39506: NOT
39507: IFFALSE 39511
// exit ;
39509: GO 39553
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39511: LD_ADDR_VAR 0 3
39515: PUSH
39516: LD_VAR 0 4
39520: PUSH
39521: LD_INT 1
39523: ARRAY
39524: PUSH
39525: LD_INT 1
39527: ARRAY
39528: PUSH
39529: LD_STRING r
39531: EQUAL
39532: PUSH
39533: LD_VAR 0 4
39537: PUSH
39538: LD_INT 1
39540: ARRAY
39541: PUSH
39542: LD_INT 4
39544: ARRAY
39545: PUSH
39546: LD_VAR 0 2
39550: EQUAL
39551: AND
39552: ST_TO_ADDR
// end ;
39553: LD_VAR 0 3
39557: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39558: LD_INT 0
39560: PPUSH
// SetDir ( unit , d ) ;
39561: LD_VAR 0 1
39565: PPUSH
39566: LD_VAR 0 4
39570: PPUSH
39571: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39575: LD_VAR 0 1
39579: PPUSH
39580: LD_VAR 0 2
39584: PPUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: LD_VAR 0 5
39594: PPUSH
39595: CALL_OW 48
// end ;
39599: LD_VAR 0 6
39603: RET
// export function ToNaturalNumber ( number ) ; begin
39604: LD_INT 0
39606: PPUSH
// result := number div 1 ;
39607: LD_ADDR_VAR 0 2
39611: PUSH
39612: LD_VAR 0 1
39616: PUSH
39617: LD_INT 1
39619: DIV
39620: ST_TO_ADDR
// if number < 0 then
39621: LD_VAR 0 1
39625: PUSH
39626: LD_INT 0
39628: LESS
39629: IFFALSE 39639
// result := 0 ;
39631: LD_ADDR_VAR 0 2
39635: PUSH
39636: LD_INT 0
39638: ST_TO_ADDR
// end ;
39639: LD_VAR 0 2
39643: RET
// export function SortByClass ( units , class ) ; var un ; begin
39644: LD_INT 0
39646: PPUSH
39647: PPUSH
// if not units or not class then
39648: LD_VAR 0 1
39652: NOT
39653: PUSH
39654: LD_VAR 0 2
39658: NOT
39659: OR
39660: IFFALSE 39664
// exit ;
39662: GO 39759
// result := [ ] ;
39664: LD_ADDR_VAR 0 3
39668: PUSH
39669: EMPTY
39670: ST_TO_ADDR
// for un in units do
39671: LD_ADDR_VAR 0 4
39675: PUSH
39676: LD_VAR 0 1
39680: PUSH
39681: FOR_IN
39682: IFFALSE 39757
// if GetClass ( un ) = class then
39684: LD_VAR 0 4
39688: PPUSH
39689: CALL_OW 257
39693: PUSH
39694: LD_VAR 0 2
39698: EQUAL
39699: IFFALSE 39726
// result := Insert ( result , 1 , un ) else
39701: LD_ADDR_VAR 0 3
39705: PUSH
39706: LD_VAR 0 3
39710: PPUSH
39711: LD_INT 1
39713: PPUSH
39714: LD_VAR 0 4
39718: PPUSH
39719: CALL_OW 2
39723: ST_TO_ADDR
39724: GO 39755
// result := Replace ( result , result + 1 , un ) ;
39726: LD_ADDR_VAR 0 3
39730: PUSH
39731: LD_VAR 0 3
39735: PPUSH
39736: LD_VAR 0 3
39740: PUSH
39741: LD_INT 1
39743: PLUS
39744: PPUSH
39745: LD_VAR 0 4
39749: PPUSH
39750: CALL_OW 1
39754: ST_TO_ADDR
39755: GO 39681
39757: POP
39758: POP
// end ;
39759: LD_VAR 0 3
39763: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39764: LD_INT 0
39766: PPUSH
39767: PPUSH
39768: PPUSH
39769: PPUSH
39770: PPUSH
39771: PPUSH
39772: PPUSH
// result := [ ] ;
39773: LD_ADDR_VAR 0 4
39777: PUSH
39778: EMPTY
39779: ST_TO_ADDR
// if x - r < 0 then
39780: LD_VAR 0 1
39784: PUSH
39785: LD_VAR 0 3
39789: MINUS
39790: PUSH
39791: LD_INT 0
39793: LESS
39794: IFFALSE 39806
// min_x := 0 else
39796: LD_ADDR_VAR 0 8
39800: PUSH
39801: LD_INT 0
39803: ST_TO_ADDR
39804: GO 39822
// min_x := x - r ;
39806: LD_ADDR_VAR 0 8
39810: PUSH
39811: LD_VAR 0 1
39815: PUSH
39816: LD_VAR 0 3
39820: MINUS
39821: ST_TO_ADDR
// if y - r < 0 then
39822: LD_VAR 0 2
39826: PUSH
39827: LD_VAR 0 3
39831: MINUS
39832: PUSH
39833: LD_INT 0
39835: LESS
39836: IFFALSE 39848
// min_y := 0 else
39838: LD_ADDR_VAR 0 7
39842: PUSH
39843: LD_INT 0
39845: ST_TO_ADDR
39846: GO 39864
// min_y := y - r ;
39848: LD_ADDR_VAR 0 7
39852: PUSH
39853: LD_VAR 0 2
39857: PUSH
39858: LD_VAR 0 3
39862: MINUS
39863: ST_TO_ADDR
// max_x := x + r ;
39864: LD_ADDR_VAR 0 9
39868: PUSH
39869: LD_VAR 0 1
39873: PUSH
39874: LD_VAR 0 3
39878: PLUS
39879: ST_TO_ADDR
// max_y := y + r ;
39880: LD_ADDR_VAR 0 10
39884: PUSH
39885: LD_VAR 0 2
39889: PUSH
39890: LD_VAR 0 3
39894: PLUS
39895: ST_TO_ADDR
// for _x = min_x to max_x do
39896: LD_ADDR_VAR 0 5
39900: PUSH
39901: DOUBLE
39902: LD_VAR 0 8
39906: DEC
39907: ST_TO_ADDR
39908: LD_VAR 0 9
39912: PUSH
39913: FOR_TO
39914: IFFALSE 40015
// for _y = min_y to max_y do
39916: LD_ADDR_VAR 0 6
39920: PUSH
39921: DOUBLE
39922: LD_VAR 0 7
39926: DEC
39927: ST_TO_ADDR
39928: LD_VAR 0 10
39932: PUSH
39933: FOR_TO
39934: IFFALSE 40011
// begin if not ValidHex ( _x , _y ) then
39936: LD_VAR 0 5
39940: PPUSH
39941: LD_VAR 0 6
39945: PPUSH
39946: CALL_OW 488
39950: NOT
39951: IFFALSE 39955
// continue ;
39953: GO 39933
// if GetResourceTypeXY ( _x , _y ) then
39955: LD_VAR 0 5
39959: PPUSH
39960: LD_VAR 0 6
39964: PPUSH
39965: CALL_OW 283
39969: IFFALSE 40009
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
39971: LD_ADDR_VAR 0 4
39975: PUSH
39976: LD_VAR 0 4
39980: PPUSH
39981: LD_VAR 0 4
39985: PUSH
39986: LD_INT 1
39988: PLUS
39989: PPUSH
39990: LD_VAR 0 5
39994: PUSH
39995: LD_VAR 0 6
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PPUSH
40004: CALL_OW 1
40008: ST_TO_ADDR
// end ;
40009: GO 39933
40011: POP
40012: POP
40013: GO 39913
40015: POP
40016: POP
// end ;
40017: LD_VAR 0 4
40021: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40022: LD_INT 0
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
40030: PPUSH
40031: PPUSH
// if not units then
40032: LD_VAR 0 1
40036: NOT
40037: IFFALSE 40041
// exit ;
40039: GO 40565
// result := UnitFilter ( units , [ f_ok ] ) ;
40041: LD_ADDR_VAR 0 3
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: LD_INT 50
40053: PUSH
40054: EMPTY
40055: LIST
40056: PPUSH
40057: CALL_OW 72
40061: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40062: LD_ADDR_VAR 0 8
40066: PUSH
40067: LD_VAR 0 1
40071: PUSH
40072: LD_INT 1
40074: ARRAY
40075: PPUSH
40076: CALL_OW 255
40080: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40081: LD_ADDR_VAR 0 10
40085: PUSH
40086: LD_INT 29
40088: PUSH
40089: LD_INT 91
40091: PUSH
40092: LD_INT 49
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: ST_TO_ADDR
// if not result then
40100: LD_VAR 0 3
40104: NOT
40105: IFFALSE 40109
// exit ;
40107: GO 40565
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40109: LD_ADDR_VAR 0 5
40113: PUSH
40114: LD_INT 81
40116: PUSH
40117: LD_VAR 0 8
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PPUSH
40126: CALL_OW 69
40130: ST_TO_ADDR
// for i in result do
40131: LD_ADDR_VAR 0 4
40135: PUSH
40136: LD_VAR 0 3
40140: PUSH
40141: FOR_IN
40142: IFFALSE 40563
// begin tag := GetTag ( i ) + 1 ;
40144: LD_ADDR_VAR 0 9
40148: PUSH
40149: LD_VAR 0 4
40153: PPUSH
40154: CALL_OW 110
40158: PUSH
40159: LD_INT 1
40161: PLUS
40162: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40163: LD_ADDR_VAR 0 7
40167: PUSH
40168: LD_VAR 0 4
40172: PPUSH
40173: CALL_OW 250
40177: PPUSH
40178: LD_VAR 0 4
40182: PPUSH
40183: CALL_OW 251
40187: PPUSH
40188: LD_INT 6
40190: PPUSH
40191: CALL 39764 0 3
40195: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40196: LD_VAR 0 4
40200: PPUSH
40201: CALL_OW 247
40205: PUSH
40206: LD_INT 2
40208: EQUAL
40209: PUSH
40210: LD_VAR 0 7
40214: AND
40215: PUSH
40216: LD_VAR 0 4
40220: PPUSH
40221: CALL_OW 264
40225: PUSH
40226: LD_VAR 0 10
40230: IN
40231: NOT
40232: AND
40233: IFFALSE 40272
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40235: LD_VAR 0 4
40239: PPUSH
40240: LD_VAR 0 7
40244: PUSH
40245: LD_INT 1
40247: ARRAY
40248: PUSH
40249: LD_INT 1
40251: ARRAY
40252: PPUSH
40253: LD_VAR 0 7
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PUSH
40262: LD_INT 2
40264: ARRAY
40265: PPUSH
40266: CALL_OW 116
40270: GO 40561
// if path > tag then
40272: LD_VAR 0 2
40276: PUSH
40277: LD_VAR 0 9
40281: GREATER
40282: IFFALSE 40490
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40284: LD_ADDR_VAR 0 6
40288: PUSH
40289: LD_VAR 0 5
40293: PPUSH
40294: LD_INT 91
40296: PUSH
40297: LD_VAR 0 4
40301: PUSH
40302: LD_INT 8
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: PPUSH
40310: CALL_OW 72
40314: ST_TO_ADDR
// if nearEnemy then
40315: LD_VAR 0 6
40319: IFFALSE 40388
// begin if GetWeapon ( i ) = ru_time_lapser then
40321: LD_VAR 0 4
40325: PPUSH
40326: CALL_OW 264
40330: PUSH
40331: LD_INT 49
40333: EQUAL
40334: IFFALSE 40362
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40336: LD_VAR 0 4
40340: PPUSH
40341: LD_VAR 0 6
40345: PPUSH
40346: LD_VAR 0 4
40350: PPUSH
40351: CALL_OW 74
40355: PPUSH
40356: CALL_OW 112
40360: GO 40386
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40362: LD_VAR 0 4
40366: PPUSH
40367: LD_VAR 0 6
40371: PPUSH
40372: LD_VAR 0 4
40376: PPUSH
40377: CALL_OW 74
40381: PPUSH
40382: CALL_OW 115
// end else
40386: GO 40488
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40388: LD_VAR 0 4
40392: PPUSH
40393: LD_VAR 0 2
40397: PUSH
40398: LD_VAR 0 9
40402: ARRAY
40403: PUSH
40404: LD_INT 1
40406: ARRAY
40407: PPUSH
40408: LD_VAR 0 2
40412: PUSH
40413: LD_VAR 0 9
40417: ARRAY
40418: PUSH
40419: LD_INT 2
40421: ARRAY
40422: PPUSH
40423: CALL_OW 297
40427: PUSH
40428: LD_INT 6
40430: GREATER
40431: IFFALSE 40474
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40433: LD_VAR 0 4
40437: PPUSH
40438: LD_VAR 0 2
40442: PUSH
40443: LD_VAR 0 9
40447: ARRAY
40448: PUSH
40449: LD_INT 1
40451: ARRAY
40452: PPUSH
40453: LD_VAR 0 2
40457: PUSH
40458: LD_VAR 0 9
40462: ARRAY
40463: PUSH
40464: LD_INT 2
40466: ARRAY
40467: PPUSH
40468: CALL_OW 114
40472: GO 40488
// SetTag ( i , tag ) ;
40474: LD_VAR 0 4
40478: PPUSH
40479: LD_VAR 0 9
40483: PPUSH
40484: CALL_OW 109
// end else
40488: GO 40561
// if enemy then
40490: LD_VAR 0 5
40494: IFFALSE 40561
// begin if GetWeapon ( i ) = ru_time_lapser then
40496: LD_VAR 0 4
40500: PPUSH
40501: CALL_OW 264
40505: PUSH
40506: LD_INT 49
40508: EQUAL
40509: IFFALSE 40537
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40511: LD_VAR 0 4
40515: PPUSH
40516: LD_VAR 0 5
40520: PPUSH
40521: LD_VAR 0 4
40525: PPUSH
40526: CALL_OW 74
40530: PPUSH
40531: CALL_OW 112
40535: GO 40561
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40537: LD_VAR 0 4
40541: PPUSH
40542: LD_VAR 0 5
40546: PPUSH
40547: LD_VAR 0 4
40551: PPUSH
40552: CALL_OW 74
40556: PPUSH
40557: CALL_OW 115
// end ; end ;
40561: GO 40141
40563: POP
40564: POP
// end ;
40565: LD_VAR 0 3
40569: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40570: LD_INT 0
40572: PPUSH
40573: PPUSH
40574: PPUSH
// if not unit or IsInUnit ( unit ) then
40575: LD_VAR 0 1
40579: NOT
40580: PUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: CALL_OW 310
40590: OR
40591: IFFALSE 40595
// exit ;
40593: GO 40686
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40595: LD_ADDR_VAR 0 4
40599: PUSH
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 250
40609: PPUSH
40610: LD_VAR 0 2
40614: PPUSH
40615: LD_INT 1
40617: PPUSH
40618: CALL_OW 272
40622: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40623: LD_ADDR_VAR 0 5
40627: PUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: CALL_OW 251
40637: PPUSH
40638: LD_VAR 0 2
40642: PPUSH
40643: LD_INT 1
40645: PPUSH
40646: CALL_OW 273
40650: ST_TO_ADDR
// if ValidHex ( x , y ) then
40651: LD_VAR 0 4
40655: PPUSH
40656: LD_VAR 0 5
40660: PPUSH
40661: CALL_OW 488
40665: IFFALSE 40686
// ComTurnXY ( unit , x , y ) ;
40667: LD_VAR 0 1
40671: PPUSH
40672: LD_VAR 0 4
40676: PPUSH
40677: LD_VAR 0 5
40681: PPUSH
40682: CALL_OW 118
// end ;
40686: LD_VAR 0 3
40690: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40691: LD_INT 0
40693: PPUSH
40694: PPUSH
// result := false ;
40695: LD_ADDR_VAR 0 3
40699: PUSH
40700: LD_INT 0
40702: ST_TO_ADDR
// if not units then
40703: LD_VAR 0 2
40707: NOT
40708: IFFALSE 40712
// exit ;
40710: GO 40757
// for i in units do
40712: LD_ADDR_VAR 0 4
40716: PUSH
40717: LD_VAR 0 2
40721: PUSH
40722: FOR_IN
40723: IFFALSE 40755
// if See ( side , i ) then
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_VAR 0 4
40734: PPUSH
40735: CALL_OW 292
40739: IFFALSE 40753
// begin result := true ;
40741: LD_ADDR_VAR 0 3
40745: PUSH
40746: LD_INT 1
40748: ST_TO_ADDR
// exit ;
40749: POP
40750: POP
40751: GO 40757
// end ;
40753: GO 40722
40755: POP
40756: POP
// end ;
40757: LD_VAR 0 3
40761: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40762: LD_INT 0
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
// if not unit or not points then
40768: LD_VAR 0 1
40772: NOT
40773: PUSH
40774: LD_VAR 0 2
40778: NOT
40779: OR
40780: IFFALSE 40784
// exit ;
40782: GO 40874
// dist := 99999 ;
40784: LD_ADDR_VAR 0 5
40788: PUSH
40789: LD_INT 99999
40791: ST_TO_ADDR
// for i in points do
40792: LD_ADDR_VAR 0 4
40796: PUSH
40797: LD_VAR 0 2
40801: PUSH
40802: FOR_IN
40803: IFFALSE 40872
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40805: LD_ADDR_VAR 0 6
40809: PUSH
40810: LD_VAR 0 1
40814: PPUSH
40815: LD_VAR 0 4
40819: PUSH
40820: LD_INT 1
40822: ARRAY
40823: PPUSH
40824: LD_VAR 0 4
40828: PUSH
40829: LD_INT 2
40831: ARRAY
40832: PPUSH
40833: CALL_OW 297
40837: ST_TO_ADDR
// if tmpDist < dist then
40838: LD_VAR 0 6
40842: PUSH
40843: LD_VAR 0 5
40847: LESS
40848: IFFALSE 40870
// begin result := i ;
40850: LD_ADDR_VAR 0 3
40854: PUSH
40855: LD_VAR 0 4
40859: ST_TO_ADDR
// dist := tmpDist ;
40860: LD_ADDR_VAR 0 5
40864: PUSH
40865: LD_VAR 0 6
40869: ST_TO_ADDR
// end ; end ;
40870: GO 40802
40872: POP
40873: POP
// end ;
40874: LD_VAR 0 3
40878: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
40879: LD_INT 0
40881: PPUSH
// uc_side := side ;
40882: LD_ADDR_OWVAR 20
40886: PUSH
40887: LD_VAR 0 1
40891: ST_TO_ADDR
// uc_nation := 3 ;
40892: LD_ADDR_OWVAR 21
40896: PUSH
40897: LD_INT 3
40899: ST_TO_ADDR
// vc_chassis := 25 ;
40900: LD_ADDR_OWVAR 37
40904: PUSH
40905: LD_INT 25
40907: ST_TO_ADDR
// vc_engine := engine_siberite ;
40908: LD_ADDR_OWVAR 39
40912: PUSH
40913: LD_INT 3
40915: ST_TO_ADDR
// vc_control := control_computer ;
40916: LD_ADDR_OWVAR 38
40920: PUSH
40921: LD_INT 3
40923: ST_TO_ADDR
// vc_weapon := 59 ;
40924: LD_ADDR_OWVAR 40
40928: PUSH
40929: LD_INT 59
40931: ST_TO_ADDR
// result := CreateVehicle ;
40932: LD_ADDR_VAR 0 5
40936: PUSH
40937: CALL_OW 45
40941: ST_TO_ADDR
// SetDir ( result , d ) ;
40942: LD_VAR 0 5
40946: PPUSH
40947: LD_VAR 0 4
40951: PPUSH
40952: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
40956: LD_VAR 0 5
40960: PPUSH
40961: LD_VAR 0 2
40965: PPUSH
40966: LD_VAR 0 3
40970: PPUSH
40971: LD_INT 0
40973: PPUSH
40974: CALL_OW 48
// end ;
40978: LD_VAR 0 5
40982: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
40983: LD_INT 0
40985: PPUSH
40986: PPUSH
40987: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
40988: LD_ADDR_VAR 0 2
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41011: LD_VAR 0 1
41015: NOT
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 264
41026: PUSH
41027: LD_INT 12
41029: PUSH
41030: LD_INT 51
41032: PUSH
41033: LD_INT 32
41035: PUSH
41036: LD_INT 89
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: IN
41045: NOT
41046: OR
41047: IFFALSE 41051
// exit ;
41049: GO 41149
// for i := 1 to 3 do
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: DOUBLE
41057: LD_INT 1
41059: DEC
41060: ST_TO_ADDR
41061: LD_INT 3
41063: PUSH
41064: FOR_TO
41065: IFFALSE 41147
// begin tmp := GetCargo ( cargo , i ) ;
41067: LD_ADDR_VAR 0 4
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: LD_VAR 0 3
41081: PPUSH
41082: CALL_OW 289
41086: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41087: LD_ADDR_VAR 0 2
41091: PUSH
41092: LD_VAR 0 2
41096: PPUSH
41097: LD_VAR 0 3
41101: PPUSH
41102: LD_VAR 0 4
41106: PPUSH
41107: CALL_OW 1
41111: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41112: LD_ADDR_VAR 0 2
41116: PUSH
41117: LD_VAR 0 2
41121: PPUSH
41122: LD_INT 4
41124: PPUSH
41125: LD_VAR 0 2
41129: PUSH
41130: LD_INT 4
41132: ARRAY
41133: PUSH
41134: LD_VAR 0 4
41138: PLUS
41139: PPUSH
41140: CALL_OW 1
41144: ST_TO_ADDR
// end ;
41145: GO 41064
41147: POP
41148: POP
// end ;
41149: LD_VAR 0 2
41153: RET
// export function Length ( array ) ; begin
41154: LD_INT 0
41156: PPUSH
// result := array + 0 ;
41157: LD_ADDR_VAR 0 2
41161: PUSH
41162: LD_VAR 0 1
41166: PUSH
41167: LD_INT 0
41169: PLUS
41170: ST_TO_ADDR
// end ;
41171: LD_VAR 0 2
41175: RET
// export function PrepareArray ( array ) ; begin
41176: LD_INT 0
41178: PPUSH
// result := array diff 0 ;
41179: LD_ADDR_VAR 0 2
41183: PUSH
41184: LD_VAR 0 1
41188: PUSH
41189: LD_INT 0
41191: DIFF
41192: ST_TO_ADDR
// if not result [ 1 ] then
41193: LD_VAR 0 2
41197: PUSH
41198: LD_INT 1
41200: ARRAY
41201: NOT
41202: IFFALSE 41222
// result := Delete ( result , 1 ) ;
41204: LD_ADDR_VAR 0 2
41208: PUSH
41209: LD_VAR 0 2
41213: PPUSH
41214: LD_INT 1
41216: PPUSH
41217: CALL_OW 3
41221: ST_TO_ADDR
// end ;
41222: LD_VAR 0 2
41226: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41227: LD_INT 0
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
// sibRocketRange := 25 ;
41233: LD_ADDR_VAR 0 6
41237: PUSH
41238: LD_INT 25
41240: ST_TO_ADDR
// result := false ;
41241: LD_ADDR_VAR 0 4
41245: PUSH
41246: LD_INT 0
41248: ST_TO_ADDR
// for i := 0 to 5 do
41249: LD_ADDR_VAR 0 5
41253: PUSH
41254: DOUBLE
41255: LD_INT 0
41257: DEC
41258: ST_TO_ADDR
41259: LD_INT 5
41261: PUSH
41262: FOR_TO
41263: IFFALSE 41330
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41265: LD_VAR 0 1
41269: PPUSH
41270: LD_VAR 0 5
41274: PPUSH
41275: LD_VAR 0 6
41279: PPUSH
41280: CALL_OW 272
41284: PPUSH
41285: LD_VAR 0 2
41289: PPUSH
41290: LD_VAR 0 5
41294: PPUSH
41295: LD_VAR 0 6
41299: PPUSH
41300: CALL_OW 273
41304: PPUSH
41305: LD_VAR 0 3
41309: PPUSH
41310: CALL_OW 309
41314: IFFALSE 41328
// begin result := true ;
41316: LD_ADDR_VAR 0 4
41320: PUSH
41321: LD_INT 1
41323: ST_TO_ADDR
// exit ;
41324: POP
41325: POP
41326: GO 41332
// end ;
41328: GO 41262
41330: POP
41331: POP
// end ;
41332: LD_VAR 0 4
41336: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41337: LD_INT 0
41339: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41340: LD_VAR 0 1
41344: PPUSH
41345: LD_VAR 0 2
41349: PPUSH
41350: LD_INT 0
41352: PPUSH
41353: LD_INT 0
41355: PPUSH
41356: LD_INT 1
41358: PPUSH
41359: LD_INT 0
41361: PPUSH
41362: CALL_OW 587
// end ;
41366: LD_VAR 0 3
41370: RET
// export function CenterOnNow ( unit ) ; begin
41371: LD_INT 0
41373: PPUSH
// result := IsInUnit ( unit ) ;
41374: LD_ADDR_VAR 0 2
41378: PUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: CALL_OW 310
41388: ST_TO_ADDR
// if not result then
41389: LD_VAR 0 2
41393: NOT
41394: IFFALSE 41406
// result := unit ;
41396: LD_ADDR_VAR 0 2
41400: PUSH
41401: LD_VAR 0 1
41405: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41406: LD_VAR 0 1
41410: PPUSH
41411: CALL_OW 87
// end ;
41415: LD_VAR 0 2
41419: RET
