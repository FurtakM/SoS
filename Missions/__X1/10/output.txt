// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 695 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := false ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// SetBName ( ar_depot , kaba ) ;
  64: LD_INT 1
  66: PPUSH
  67: LD_STRING kaba
  69: PPUSH
  70: CALL_OW 500
// InitHC_All ( ) ;
  74: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  78: LD_ADDR_VAR 0 2
  82: PUSH
  83: LD_INT 22
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 32
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: PPUSH
 107: CALL_OW 69
 111: PUSH
 112: FOR_IN
 113: IFFALSE 178
// begin PrepareSoldier ( false , 6 ) ;
 115: LD_INT 0
 117: PPUSH
 118: LD_INT 6
 120: PPUSH
 121: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 125: CALL_OW 44
 129: PPUSH
 130: LD_VAR 0 2
 134: PPUSH
 135: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 139: LD_VAR 0 2
 143: PPUSH
 144: LD_INT 25
 146: PUSH
 147: LD_INT 27
 149: PUSH
 150: LD_INT 28
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_VAR 0 2
 162: PUSH
 163: LD_INT 3
 165: MOD
 166: PUSH
 167: LD_INT 1
 169: PLUS
 170: ARRAY
 171: PPUSH
 172: CALL_OW 431
// end ;
 176: GO 112
 178: POP
 179: POP
// PlaceWeaponTurret ( HexInfo ( 129 , 61 ) , ar_radar ) ;
 180: LD_INT 129
 182: PPUSH
 183: LD_INT 61
 185: PPUSH
 186: CALL_OW 428
 190: PPUSH
 191: LD_INT 30
 193: PPUSH
 194: CALL_OW 431
// PrepareSoldier ( sex_male , 3 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 3
 203: PPUSH
 204: CALL_OW 381
// omarSol := CreateHuman ;
 208: LD_ADDR_EXP 8
 212: PUSH
 213: CALL_OW 44
 217: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 218: LD_EXP 8
 222: PPUSH
 223: LD_INT 1
 225: PPUSH
 226: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 230: LD_ADDR_VAR 0 4
 234: PUSH
 235: LD_INT 143
 237: PPUSH
 238: LD_INT 51
 240: PPUSH
 241: CALL_OW 428
 245: ST_TO_ADDR
// for i := 1 to 2 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 2
 258: PUSH
 259: FOR_TO
 260: IFFALSE 288
// begin PrepareMechanic ( false , 3 ) ;
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 3
 267: PPUSH
 268: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 272: CALL_OW 44
 276: PPUSH
 277: LD_VAR 0 4
 281: PPUSH
 282: CALL_OW 52
// end ;
 286: GO 259
 288: POP
 289: POP
// for i := 1 to 2 do
 290: LD_ADDR_VAR 0 2
 294: PUSH
 295: DOUBLE
 296: LD_INT 1
 298: DEC
 299: ST_TO_ADDR
 300: LD_INT 2
 302: PUSH
 303: FOR_TO
 304: IFFALSE 330
// begin PrepareEngineer ( false , 2 ) ;
 306: LD_INT 0
 308: PPUSH
 309: LD_INT 2
 311: PPUSH
 312: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 316: CALL_OW 44
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 303
 330: POP
 331: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 332: CALL_OW 44
 336: PPUSH
 337: LD_INT 164
 339: PPUSH
 340: LD_INT 80
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 350: CALL_OW 44
 354: PPUSH
 355: LD_INT 166
 357: PPUSH
 358: LD_INT 84
 360: PPUSH
 361: LD_INT 0
 363: PPUSH
 364: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 368: LD_ADDR_VAR 0 2
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 2
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 8
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 451
// for j := 1 to 3 do
 405: LD_ADDR_VAR 0 5
 409: PUSH
 410: DOUBLE
 411: LD_INT 1
 413: DEC
 414: ST_TO_ADDR
 415: LD_INT 3
 417: PUSH
 418: FOR_TO
 419: IFFALSE 447
// begin PrepareScientist ( false , 3 ) ;
 421: LD_INT 0
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 2
 440: PPUSH
 441: CALL_OW 52
// end ;
 445: GO 418
 447: POP
 448: POP
 449: GO 402
 451: POP
 452: POP
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 3
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 1436 0 3
 476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Kaia
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 1436 0 3
 500: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 501: LD_INT 14
 503: PPUSH
 504: LD_INT 3
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 27
 512: PPUSH
 513: LD_INT 100
 515: PPUSH
 516: CALL 6297 0 5
// heikeVehicle := CreateVehicle ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 530: LD_EXP 6
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 149
 549: PPUSH
 550: LD_INT 59
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 560: LD_EXP 3
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL_OW 52
// uc_side := 5 ;
 584: LD_ADDR_OWVAR 20
 588: PUSH
 589: LD_INT 5
 591: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_STRING Omar
 599: PPUSH
 600: CALL_OW 25
 604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 605: LD_INT 14
 607: PPUSH
 608: LD_INT 3
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 27
 616: PPUSH
 617: LD_INT 100
 619: PPUSH
 620: CALL 6297 0 5
// omarVehicle := CreateVehicle ;
 624: LD_ADDR_EXP 7
 628: PUSH
 629: CALL_OW 45
 633: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 634: LD_EXP 4
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 646: LD_EXP 7
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 658: LD_EXP 7
 662: PPUSH
 663: LD_INT 132
 665: PPUSH
 666: LD_INT 83
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 676: LD_EXP 4
 680: PPUSH
 681: LD_EXP 7
 685: PPUSH
 686: CALL_OW 52
// end ; end_of_file
 690: LD_VAR 0 1
 694: RET
// export function Action ; var i ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
// Video ( true ) ;
 699: LD_INT 1
 701: PPUSH
 702: CALL 39140 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: LD_INT 30
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: PUSH
 758: FOR_IN
 759: IFFALSE 778
// SetSpecResearch ( i , 1500 , false ) ;
 761: LD_VAR 0 2
 765: PPUSH
 766: LD_INT 1500
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 486
 776: GO 758
 778: POP
 779: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 780: LD_INT 1
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_INT 2
 788: PPUSH
 789: LD_INT 32963
 791: NEG
 792: PPUSH
 793: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 797: LD_EXP 4
 801: PPUSH
 802: LD_INT 150
 804: PPUSH
 805: LD_INT 72
 807: PPUSH
 808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 812: LD_INT 35
 814: PPUSH
 815: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 819: LD_INT 150
 821: PPUSH
 822: LD_INT 72
 824: PPUSH
 825: CALL_OW 428
 829: IFFALSE 812
// ComExitBuilding ( omarSol ) ;
 831: LD_EXP 8
 835: PPUSH
 836: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 840: LD_EXP 8
 844: PPUSH
 845: LD_INT 150
 847: PPUSH
 848: LD_INT 69
 850: PPUSH
 851: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 855: LD_EXP 8
 859: PPUSH
 860: LD_EXP 4
 864: PPUSH
 865: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 869: LD_EXP 8
 873: PPUSH
 874: LD_EXP 4
 878: PPUSH
 879: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 892: LD_EXP 4
 896: PPUSH
 897: LD_INT 152
 899: PPUSH
 900: LD_INT 70
 902: PPUSH
 903: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 907: LD_INT 35
 909: PPUSH
 910: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 914: LD_EXP 4
 918: PPUSH
 919: LD_EXP 8
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 3
 931: LESS
 932: IFFALSE 907
// ComTurnUnit ( Omar , omarSol ) ;
 934: LD_EXP 4
 938: PPUSH
 939: LD_EXP 8
 943: PPUSH
 944: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 948: LD_EXP 3
 952: PPUSH
 953: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 149
 964: PPUSH
 965: LD_INT 68
 967: PPUSH
 968: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 972: LD_EXP 3
 976: PPUSH
 977: LD_EXP 4
 981: PPUSH
 982: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 986: LD_EXP 4
 990: PPUSH
 991: LD_STRING DO-Intro-1
 993: PPUSH
 994: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 998: LD_EXP 8
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 120
// wait ( 0 0$0.3 ) ;
1010: LD_INT 10
1012: PPUSH
1013: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
1017: LD_EXP 3
1021: PPUSH
1022: LD_STRING DH-Intro-2
1024: PPUSH
1025: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1029: LD_EXP 4
1033: PPUSH
1034: LD_EXP 3
1038: PPUSH
1039: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_STRING DO-Intro-3
1050: PPUSH
1051: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 152
1062: PPUSH
1063: LD_INT 58
1065: PPUSH
1066: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_INT 154
1077: PPUSH
1078: LD_INT 60
1080: PPUSH
1081: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1085: LD_EXP 4
1089: PPUSH
1090: LD_EXP 3
1094: PPUSH
1095: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1099: LD_EXP 3
1103: PPUSH
1104: LD_EXP 4
1108: PPUSH
1109: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1113: LD_INT 35
1115: PPUSH
1116: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1120: LD_EXP 3
1124: PPUSH
1125: LD_INT 152
1127: PPUSH
1128: LD_INT 58
1130: PPUSH
1131: CALL_OW 307
1135: PUSH
1136: LD_EXP 4
1140: PPUSH
1141: LD_INT 154
1143: PPUSH
1144: LD_INT 60
1146: PPUSH
1147: CALL_OW 307
1151: AND
1152: IFFALSE 1113
// wait ( 0 0$0.3 ) ;
1154: LD_INT 10
1156: PPUSH
1157: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_STRING DO-Intro-4
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1173: LD_INT 18
1175: PPUSH
1176: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_STRING DH-Intro-5
1187: PPUSH
1188: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1192: LD_EXP 4
1196: PPUSH
1197: LD_STRING DO-Intro-6
1199: PPUSH
1200: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1204: LD_INT 10
1206: PPUSH
1207: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1211: LD_EXP 3
1215: PPUSH
1216: LD_STRING DH-Intro-7
1218: PPUSH
1219: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1223: LD_INT 7
1225: PPUSH
1226: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1230: LD_EXP 3
1234: PPUSH
1235: LD_STRING DH-Intro-8
1237: PPUSH
1238: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1242: LD_EXP 4
1246: PPUSH
1247: LD_STRING DO-Intro-9
1249: PPUSH
1250: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1254: LD_EXP 3
1258: PPUSH
1259: LD_STRING DH-Intro-10
1261: PPUSH
1262: CALL_OW 88
// if not Kaia then
1266: LD_EXP 5
1270: NOT
1271: IFFALSE 1287
// Say ( Heike , DH-Intro-11-Kaia ) else
1273: LD_EXP 3
1277: PPUSH
1278: LD_STRING DH-Intro-11-Kaia
1280: PPUSH
1281: CALL_OW 88
1285: GO 1299
// Say ( Heike , DH-Intro-11-Friends ) ;
1287: LD_EXP 3
1291: PPUSH
1292: LD_STRING DH-Intro-11-Friends
1294: PPUSH
1295: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1299: LD_EXP 4
1303: PPUSH
1304: LD_STRING DO-Intro-12
1306: PPUSH
1307: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1311: LD_EXP 3
1315: PPUSH
1316: LD_STRING DH-Intro-13
1318: PPUSH
1319: CALL_OW 88
// async ;
1323: ASYNC
// wait ( 0 0$0.2 ) ;
1324: LD_INT 7
1326: PPUSH
1327: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1331: LD_EXP 3
1335: PPUSH
1336: LD_EXP 6
1340: PPUSH
1341: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1345: LD_EXP 3
1349: PPUSH
1350: LD_INT 131
1352: PPUSH
1353: LD_INT 83
1355: PPUSH
1356: CALL_OW 171
// sync ;
1360: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1361: LD_EXP 4
1365: PPUSH
1366: LD_STRING DO-Intro-14
1368: PPUSH
1369: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1373: LD_EXP 4
1377: PPUSH
1378: LD_EXP 3
1382: PPUSH
1383: CALL_OW 112
// wait ( 0 0$2 ) ;
1387: LD_INT 70
1389: PPUSH
1390: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1394: LD_INT 1
1396: PPUSH
1397: LD_STRING %_cont
1399: PPUSH
1400: CALL_OW 340
// end ;
1404: LD_VAR 0 1
1408: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1409: LD_VAR 0 2
1413: PUSH
1414: LD_EXP 4
1418: EQUAL
1419: IFFALSE 1433
// SetClass ( Omar , class_desert_warior ) ;
1421: LD_EXP 4
1425: PPUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 336
// end ; end_of_file
1433: PPOPN 2
1435: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1436: LD_INT 0
1438: PPUSH
1439: PPUSH
// if exist_mode then
1440: LD_VAR 0 2
1444: IFFALSE 1490
// begin unit := CreateCharacter ( prefix & ident ) ;
1446: LD_ADDR_VAR 0 5
1450: PUSH
1451: LD_VAR 0 3
1455: PUSH
1456: LD_VAR 0 1
1460: STR
1461: PPUSH
1462: CALL_OW 34
1466: ST_TO_ADDR
// if unit then
1467: LD_VAR 0 5
1471: IFFALSE 1488
// DeleteCharacters ( prefix & ident ) ;
1473: LD_VAR 0 3
1477: PUSH
1478: LD_VAR 0 1
1482: STR
1483: PPUSH
1484: CALL_OW 40
// end else
1488: GO 1505
// unit := NewCharacter ( ident ) ;
1490: LD_ADDR_VAR 0 5
1494: PUSH
1495: LD_VAR 0 1
1499: PPUSH
1500: CALL_OW 25
1504: ST_TO_ADDR
// result := unit ;
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: LD_VAR 0 5
1514: ST_TO_ADDR
// end ;
1515: LD_VAR 0 4
1519: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1520: LD_INT 0
1522: PPUSH
1523: PPUSH
// if not side or not nation then
1524: LD_VAR 0 1
1528: NOT
1529: PUSH
1530: LD_VAR 0 2
1534: NOT
1535: OR
1536: IFFALSE 1540
// exit ;
1538: GO 2308
// case nation of nation_american :
1540: LD_VAR 0 2
1544: PUSH
1545: LD_INT 1
1547: DOUBLE
1548: EQUAL
1549: IFTRUE 1553
1551: GO 1767
1553: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1554: LD_ADDR_VAR 0 4
1558: PUSH
1559: LD_INT 35
1561: PUSH
1562: LD_INT 45
1564: PUSH
1565: LD_INT 46
1567: PUSH
1568: LD_INT 47
1570: PUSH
1571: LD_INT 82
1573: PUSH
1574: LD_INT 83
1576: PUSH
1577: LD_INT 84
1579: PUSH
1580: LD_INT 85
1582: PUSH
1583: LD_INT 86
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 15
1597: PUSH
1598: LD_INT 16
1600: PUSH
1601: LD_INT 7
1603: PUSH
1604: LD_INT 12
1606: PUSH
1607: LD_INT 13
1609: PUSH
1610: LD_INT 10
1612: PUSH
1613: LD_INT 14
1615: PUSH
1616: LD_INT 20
1618: PUSH
1619: LD_INT 21
1621: PUSH
1622: LD_INT 22
1624: PUSH
1625: LD_INT 25
1627: PUSH
1628: LD_INT 32
1630: PUSH
1631: LD_INT 27
1633: PUSH
1634: LD_INT 36
1636: PUSH
1637: LD_INT 69
1639: PUSH
1640: LD_INT 39
1642: PUSH
1643: LD_INT 34
1645: PUSH
1646: LD_INT 40
1648: PUSH
1649: LD_INT 48
1651: PUSH
1652: LD_INT 49
1654: PUSH
1655: LD_INT 50
1657: PUSH
1658: LD_INT 51
1660: PUSH
1661: LD_INT 52
1663: PUSH
1664: LD_INT 53
1666: PUSH
1667: LD_INT 54
1669: PUSH
1670: LD_INT 55
1672: PUSH
1673: LD_INT 56
1675: PUSH
1676: LD_INT 57
1678: PUSH
1679: LD_INT 58
1681: PUSH
1682: LD_INT 59
1684: PUSH
1685: LD_INT 60
1687: PUSH
1688: LD_INT 61
1690: PUSH
1691: LD_INT 62
1693: PUSH
1694: LD_INT 80
1696: PUSH
1697: LD_INT 82
1699: PUSH
1700: LD_INT 83
1702: PUSH
1703: LD_INT 84
1705: PUSH
1706: LD_INT 85
1708: PUSH
1709: LD_INT 86
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: ST_TO_ADDR
1765: GO 2232
1767: LD_INT 2
1769: DOUBLE
1770: EQUAL
1771: IFTRUE 1775
1773: GO 2001
1775: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1776: LD_ADDR_VAR 0 4
1780: PUSH
1781: LD_INT 35
1783: PUSH
1784: LD_INT 45
1786: PUSH
1787: LD_INT 46
1789: PUSH
1790: LD_INT 47
1792: PUSH
1793: LD_INT 82
1795: PUSH
1796: LD_INT 83
1798: PUSH
1799: LD_INT 84
1801: PUSH
1802: LD_INT 85
1804: PUSH
1805: LD_INT 87
1807: PUSH
1808: LD_INT 70
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_INT 11
1816: PUSH
1817: LD_INT 3
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: LD_INT 5
1825: PUSH
1826: LD_INT 6
1828: PUSH
1829: LD_INT 15
1831: PUSH
1832: LD_INT 18
1834: PUSH
1835: LD_INT 7
1837: PUSH
1838: LD_INT 17
1840: PUSH
1841: LD_INT 8
1843: PUSH
1844: LD_INT 20
1846: PUSH
1847: LD_INT 21
1849: PUSH
1850: LD_INT 22
1852: PUSH
1853: LD_INT 72
1855: PUSH
1856: LD_INT 26
1858: PUSH
1859: LD_INT 69
1861: PUSH
1862: LD_INT 39
1864: PUSH
1865: LD_INT 40
1867: PUSH
1868: LD_INT 41
1870: PUSH
1871: LD_INT 42
1873: PUSH
1874: LD_INT 43
1876: PUSH
1877: LD_INT 48
1879: PUSH
1880: LD_INT 49
1882: PUSH
1883: LD_INT 50
1885: PUSH
1886: LD_INT 51
1888: PUSH
1889: LD_INT 52
1891: PUSH
1892: LD_INT 53
1894: PUSH
1895: LD_INT 54
1897: PUSH
1898: LD_INT 55
1900: PUSH
1901: LD_INT 56
1903: PUSH
1904: LD_INT 60
1906: PUSH
1907: LD_INT 61
1909: PUSH
1910: LD_INT 62
1912: PUSH
1913: LD_INT 66
1915: PUSH
1916: LD_INT 67
1918: PUSH
1919: LD_INT 68
1921: PUSH
1922: LD_INT 81
1924: PUSH
1925: LD_INT 82
1927: PUSH
1928: LD_INT 83
1930: PUSH
1931: LD_INT 84
1933: PUSH
1934: LD_INT 85
1936: PUSH
1937: LD_INT 87
1939: PUSH
1940: LD_INT 88
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: ST_TO_ADDR
1999: GO 2232
2001: LD_INT 3
2003: DOUBLE
2004: EQUAL
2005: IFTRUE 2009
2007: GO 2231
2009: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2010: LD_ADDR_VAR 0 4
2014: PUSH
2015: LD_INT 46
2017: PUSH
2018: LD_INT 47
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: LD_INT 82
2029: PUSH
2030: LD_INT 83
2032: PUSH
2033: LD_INT 84
2035: PUSH
2036: LD_INT 85
2038: PUSH
2039: LD_INT 86
2041: PUSH
2042: LD_INT 11
2044: PUSH
2045: LD_INT 9
2047: PUSH
2048: LD_INT 20
2050: PUSH
2051: LD_INT 19
2053: PUSH
2054: LD_INT 21
2056: PUSH
2057: LD_INT 24
2059: PUSH
2060: LD_INT 22
2062: PUSH
2063: LD_INT 25
2065: PUSH
2066: LD_INT 28
2068: PUSH
2069: LD_INT 29
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: LD_INT 37
2080: PUSH
2081: LD_INT 38
2083: PUSH
2084: LD_INT 32
2086: PUSH
2087: LD_INT 27
2089: PUSH
2090: LD_INT 33
2092: PUSH
2093: LD_INT 69
2095: PUSH
2096: LD_INT 39
2098: PUSH
2099: LD_INT 34
2101: PUSH
2102: LD_INT 40
2104: PUSH
2105: LD_INT 71
2107: PUSH
2108: LD_INT 23
2110: PUSH
2111: LD_INT 44
2113: PUSH
2114: LD_INT 48
2116: PUSH
2117: LD_INT 49
2119: PUSH
2120: LD_INT 50
2122: PUSH
2123: LD_INT 51
2125: PUSH
2126: LD_INT 52
2128: PUSH
2129: LD_INT 53
2131: PUSH
2132: LD_INT 54
2134: PUSH
2135: LD_INT 55
2137: PUSH
2138: LD_INT 56
2140: PUSH
2141: LD_INT 57
2143: PUSH
2144: LD_INT 58
2146: PUSH
2147: LD_INT 59
2149: PUSH
2150: LD_INT 63
2152: PUSH
2153: LD_INT 64
2155: PUSH
2156: LD_INT 65
2158: PUSH
2159: LD_INT 82
2161: PUSH
2162: LD_INT 83
2164: PUSH
2165: LD_INT 84
2167: PUSH
2168: LD_INT 85
2170: PUSH
2171: LD_INT 86
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
2229: GO 2232
2231: POP
// if state > - 1 and state < 3 then
2232: LD_VAR 0 3
2236: PUSH
2237: LD_INT 1
2239: NEG
2240: GREATER
2241: PUSH
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 3
2249: LESS
2250: AND
2251: IFFALSE 2308
// for i in result do
2253: LD_ADDR_VAR 0 5
2257: PUSH
2258: LD_VAR 0 4
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2306
// if GetTech ( i , side ) <> state then
2266: LD_VAR 0 5
2270: PPUSH
2271: LD_VAR 0 1
2275: PPUSH
2276: CALL_OW 321
2280: PUSH
2281: LD_VAR 0 3
2285: NONEQUAL
2286: IFFALSE 2304
// result := result diff i ;
2288: LD_ADDR_VAR 0 4
2292: PUSH
2293: LD_VAR 0 4
2297: PUSH
2298: LD_VAR 0 5
2302: DIFF
2303: ST_TO_ADDR
2304: GO 2263
2306: POP
2307: POP
// end ;
2308: LD_VAR 0 4
2312: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2313: LD_INT 0
2315: PPUSH
2316: PPUSH
2317: PPUSH
// result := true ;
2318: LD_ADDR_VAR 0 3
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2326: LD_ADDR_VAR 0 5
2330: PUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL_OW 480
2340: ST_TO_ADDR
// if not tmp then
2341: LD_VAR 0 5
2345: NOT
2346: IFFALSE 2350
// exit ;
2348: GO 2399
// for i in tmp do
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_VAR 0 5
2359: PUSH
2360: FOR_IN
2361: IFFALSE 2397
// if GetTech ( i , side ) <> state_researched then
2363: LD_VAR 0 4
2367: PPUSH
2368: LD_VAR 0 1
2372: PPUSH
2373: CALL_OW 321
2377: PUSH
2378: LD_INT 2
2380: NONEQUAL
2381: IFFALSE 2395
// begin result := false ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_INT 0
2390: ST_TO_ADDR
// exit ;
2391: POP
2392: POP
2393: GO 2399
// end ;
2395: GO 2360
2397: POP
2398: POP
// end ;
2399: LD_VAR 0 3
2403: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2404: LD_INT 0
2406: PPUSH
2407: PPUSH
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2419: LD_VAR 0 1
2423: NOT
2424: PUSH
2425: LD_VAR 0 1
2429: PPUSH
2430: CALL_OW 257
2434: PUSH
2435: LD_INT 9
2437: NONEQUAL
2438: OR
2439: IFFALSE 2443
// exit ;
2441: GO 3016
// side := GetSide ( unit ) ;
2443: LD_ADDR_VAR 0 9
2447: PUSH
2448: LD_VAR 0 1
2452: PPUSH
2453: CALL_OW 255
2457: ST_TO_ADDR
// tech_space := tech_spacanom ;
2458: LD_ADDR_VAR 0 12
2462: PUSH
2463: LD_INT 29
2465: ST_TO_ADDR
// tech_time := tech_taurad ;
2466: LD_ADDR_VAR 0 13
2470: PUSH
2471: LD_INT 28
2473: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2474: LD_ADDR_VAR 0 11
2478: PUSH
2479: LD_VAR 0 1
2483: PPUSH
2484: CALL_OW 310
2488: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2489: LD_VAR 0 11
2493: PPUSH
2494: CALL_OW 247
2498: PUSH
2499: LD_INT 2
2501: EQUAL
2502: IFFALSE 2506
// exit ;
2504: GO 3016
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2506: LD_ADDR_VAR 0 8
2510: PUSH
2511: LD_INT 81
2513: PUSH
2514: LD_VAR 0 9
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 3
2525: PUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PPUSH
2544: CALL_OW 69
2548: ST_TO_ADDR
// if not tmp then
2549: LD_VAR 0 8
2553: NOT
2554: IFFALSE 2558
// exit ;
2556: GO 3016
// if in_unit then
2558: LD_VAR 0 11
2562: IFFALSE 2586
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2564: LD_ADDR_VAR 0 10
2568: PUSH
2569: LD_VAR 0 8
2573: PPUSH
2574: LD_VAR 0 11
2578: PPUSH
2579: CALL_OW 74
2583: ST_TO_ADDR
2584: GO 2606
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2586: LD_ADDR_VAR 0 10
2590: PUSH
2591: LD_VAR 0 8
2595: PPUSH
2596: LD_VAR 0 1
2600: PPUSH
2601: CALL_OW 74
2605: ST_TO_ADDR
// if not enemy then
2606: LD_VAR 0 10
2610: NOT
2611: IFFALSE 2615
// exit ;
2613: GO 3016
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2615: LD_VAR 0 11
2619: PUSH
2620: LD_VAR 0 11
2624: PPUSH
2625: LD_VAR 0 10
2629: PPUSH
2630: CALL_OW 296
2634: PUSH
2635: LD_INT 13
2637: GREATER
2638: AND
2639: PUSH
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_VAR 0 10
2649: PPUSH
2650: CALL_OW 296
2654: PUSH
2655: LD_INT 12
2657: GREATER
2658: OR
2659: IFFALSE 2663
// exit ;
2661: GO 3016
// missile := [ 1 ] ;
2663: LD_ADDR_VAR 0 14
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2674: LD_VAR 0 9
2678: PPUSH
2679: LD_VAR 0 12
2683: PPUSH
2684: CALL_OW 325
2688: IFFALSE 2717
// missile := Replace ( missile , missile + 1 , 2 ) ;
2690: LD_ADDR_VAR 0 14
2694: PUSH
2695: LD_VAR 0 14
2699: PPUSH
2700: LD_VAR 0 14
2704: PUSH
2705: LD_INT 1
2707: PLUS
2708: PPUSH
2709: LD_INT 2
2711: PPUSH
2712: CALL_OW 1
2716: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2717: LD_VAR 0 9
2721: PPUSH
2722: LD_VAR 0 13
2726: PPUSH
2727: CALL_OW 325
2731: PUSH
2732: LD_VAR 0 10
2736: PPUSH
2737: CALL_OW 255
2741: PPUSH
2742: LD_VAR 0 13
2746: PPUSH
2747: CALL_OW 325
2751: NOT
2752: AND
2753: IFFALSE 2782
// missile := Replace ( missile , missile + 1 , 3 ) ;
2755: LD_ADDR_VAR 0 14
2759: PUSH
2760: LD_VAR 0 14
2764: PPUSH
2765: LD_VAR 0 14
2769: PUSH
2770: LD_INT 1
2772: PLUS
2773: PPUSH
2774: LD_INT 3
2776: PPUSH
2777: CALL_OW 1
2781: ST_TO_ADDR
// if missile < 2 then
2782: LD_VAR 0 14
2786: PUSH
2787: LD_INT 2
2789: LESS
2790: IFFALSE 2794
// exit ;
2792: GO 3016
// x := GetX ( enemy ) ;
2794: LD_ADDR_VAR 0 4
2798: PUSH
2799: LD_VAR 0 10
2803: PPUSH
2804: CALL_OW 250
2808: ST_TO_ADDR
// y := GetY ( enemy ) ;
2809: LD_ADDR_VAR 0 5
2813: PUSH
2814: LD_VAR 0 10
2818: PPUSH
2819: CALL_OW 251
2823: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2824: LD_ADDR_VAR 0 6
2828: PUSH
2829: LD_VAR 0 4
2833: PUSH
2834: LD_INT 1
2836: NEG
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: CALL_OW 12
2845: PLUS
2846: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2847: LD_ADDR_VAR 0 7
2851: PUSH
2852: LD_VAR 0 5
2856: PUSH
2857: LD_INT 1
2859: NEG
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL_OW 12
2868: PLUS
2869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2870: LD_VAR 0 6
2874: PPUSH
2875: LD_VAR 0 7
2879: PPUSH
2880: CALL_OW 488
2884: NOT
2885: IFFALSE 2907
// begin _x := x ;
2887: LD_ADDR_VAR 0 6
2891: PUSH
2892: LD_VAR 0 4
2896: ST_TO_ADDR
// _y := y ;
2897: LD_ADDR_VAR 0 7
2901: PUSH
2902: LD_VAR 0 5
2906: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2907: LD_ADDR_VAR 0 3
2911: PUSH
2912: LD_INT 1
2914: PPUSH
2915: LD_VAR 0 14
2919: PPUSH
2920: CALL_OW 12
2924: ST_TO_ADDR
// case i of 1 :
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 1
2932: DOUBLE
2933: EQUAL
2934: IFTRUE 2938
2936: GO 2955
2938: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2939: LD_VAR 0 1
2943: PPUSH
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 115
2953: GO 3016
2955: LD_INT 2
2957: DOUBLE
2958: EQUAL
2959: IFTRUE 2963
2961: GO 2985
2963: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2964: LD_VAR 0 1
2968: PPUSH
2969: LD_VAR 0 6
2973: PPUSH
2974: LD_VAR 0 7
2978: PPUSH
2979: CALL_OW 153
2983: GO 3016
2985: LD_INT 3
2987: DOUBLE
2988: EQUAL
2989: IFTRUE 2993
2991: GO 3015
2993: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2994: LD_VAR 0 1
2998: PPUSH
2999: LD_VAR 0 6
3003: PPUSH
3004: LD_VAR 0 7
3008: PPUSH
3009: CALL_OW 154
3013: GO 3016
3015: POP
// end ;
3016: LD_VAR 0 2
3020: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3021: LD_INT 0
3023: PPUSH
3024: PPUSH
3025: PPUSH
3026: PPUSH
3027: PPUSH
3028: PPUSH
// if not unit or not building then
3029: LD_VAR 0 1
3033: NOT
3034: PUSH
3035: LD_VAR 0 2
3039: NOT
3040: OR
3041: IFFALSE 3045
// exit ;
3043: GO 3203
// x := GetX ( building ) ;
3045: LD_ADDR_VAR 0 5
3049: PUSH
3050: LD_VAR 0 2
3054: PPUSH
3055: CALL_OW 250
3059: ST_TO_ADDR
// y := GetY ( building ) ;
3060: LD_ADDR_VAR 0 6
3064: PUSH
3065: LD_VAR 0 2
3069: PPUSH
3070: CALL_OW 251
3074: ST_TO_ADDR
// for i = 0 to 5 do
3075: LD_ADDR_VAR 0 4
3079: PUSH
3080: DOUBLE
3081: LD_INT 0
3083: DEC
3084: ST_TO_ADDR
3085: LD_INT 5
3087: PUSH
3088: FOR_TO
3089: IFFALSE 3201
// begin _x := ShiftX ( x , i , 3 ) ;
3091: LD_ADDR_VAR 0 7
3095: PUSH
3096: LD_VAR 0 5
3100: PPUSH
3101: LD_VAR 0 4
3105: PPUSH
3106: LD_INT 3
3108: PPUSH
3109: CALL_OW 272
3113: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3114: LD_ADDR_VAR 0 8
3118: PUSH
3119: LD_VAR 0 6
3123: PPUSH
3124: LD_VAR 0 4
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 273
3136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3137: LD_VAR 0 7
3141: PPUSH
3142: LD_VAR 0 8
3146: PPUSH
3147: CALL_OW 488
3151: NOT
3152: IFFALSE 3156
// continue ;
3154: GO 3088
// if HexInfo ( _x , _y ) = 0 then
3156: LD_VAR 0 7
3160: PPUSH
3161: LD_VAR 0 8
3165: PPUSH
3166: CALL_OW 428
3170: PUSH
3171: LD_INT 0
3173: EQUAL
3174: IFFALSE 3199
// begin ComMoveXY ( unit , _x , _y ) ;
3176: LD_VAR 0 1
3180: PPUSH
3181: LD_VAR 0 7
3185: PPUSH
3186: LD_VAR 0 8
3190: PPUSH
3191: CALL_OW 111
// exit ;
3195: POP
3196: POP
3197: GO 3203
// end ; end ;
3199: GO 3088
3201: POP
3202: POP
// end ;
3203: LD_VAR 0 3
3207: RET
// export function ScanBase ( side , base_area ) ; begin
3208: LD_INT 0
3210: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: LD_INT 81
3223: PUSH
3224: LD_VAR 0 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 70
3237: ST_TO_ADDR
// end ;
3238: LD_VAR 0 3
3242: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3243: LD_INT 0
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
// result := false ;
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 0
3256: ST_TO_ADDR
// side := GetSide ( unit ) ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_VAR 0 1
3266: PPUSH
3267: CALL_OW 255
3271: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3272: LD_ADDR_VAR 0 4
3276: PUSH
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL_OW 248
3286: ST_TO_ADDR
// case nat of 1 :
3287: LD_VAR 0 4
3291: PUSH
3292: LD_INT 1
3294: DOUBLE
3295: EQUAL
3296: IFTRUE 3300
3298: GO 3311
3300: POP
// tech := tech_lassight ; 2 :
3301: LD_ADDR_VAR 0 5
3305: PUSH
3306: LD_INT 12
3308: ST_TO_ADDR
3309: GO 3350
3311: LD_INT 2
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3330
3319: POP
// tech := tech_mortar ; 3 :
3320: LD_ADDR_VAR 0 5
3324: PUSH
3325: LD_INT 41
3327: ST_TO_ADDR
3328: GO 3350
3330: LD_INT 3
3332: DOUBLE
3333: EQUAL
3334: IFTRUE 3338
3336: GO 3349
3338: POP
// tech := tech_bazooka ; end ;
3339: LD_ADDR_VAR 0 5
3343: PUSH
3344: LD_INT 44
3346: ST_TO_ADDR
3347: GO 3350
3349: POP
// if Researched ( side , tech ) then
3350: LD_VAR 0 3
3354: PPUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: CALL_OW 325
3364: IFFALSE 3391
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_INT 5
3373: PUSH
3374: LD_INT 8
3376: PUSH
3377: LD_INT 9
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: PUSH
3385: LD_VAR 0 4
3389: ARRAY
3390: ST_TO_ADDR
// end ;
3391: LD_VAR 0 2
3395: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3396: LD_INT 0
3398: PPUSH
3399: PPUSH
3400: PPUSH
// if not mines then
3401: LD_VAR 0 2
3405: NOT
3406: IFFALSE 3410
// exit ;
3408: GO 3554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3410: LD_ADDR_VAR 0 5
3414: PUSH
3415: LD_INT 81
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 3
3429: PUSH
3430: LD_INT 21
3432: PUSH
3433: LD_INT 3
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 69
3452: ST_TO_ADDR
// for i in mines do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: LD_VAR 0 2
3462: PUSH
3463: FOR_IN
3464: IFFALSE 3552
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3466: LD_VAR 0 4
3470: PUSH
3471: LD_INT 1
3473: ARRAY
3474: PPUSH
3475: LD_VAR 0 4
3479: PUSH
3480: LD_INT 2
3482: ARRAY
3483: PPUSH
3484: CALL_OW 458
3488: NOT
3489: IFFALSE 3493
// continue ;
3491: GO 3463
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3493: LD_VAR 0 4
3497: PUSH
3498: LD_INT 1
3500: ARRAY
3501: PPUSH
3502: LD_VAR 0 4
3506: PUSH
3507: LD_INT 2
3509: ARRAY
3510: PPUSH
3511: CALL_OW 428
3515: PUSH
3516: LD_VAR 0 5
3520: IN
3521: IFFALSE 3550
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3523: LD_VAR 0 4
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: PPUSH
3532: LD_VAR 0 4
3536: PUSH
3537: LD_INT 2
3539: ARRAY
3540: PPUSH
3541: LD_VAR 0 1
3545: PPUSH
3546: CALL_OW 456
// end ;
3550: GO 3463
3552: POP
3553: POP
// end ;
3554: LD_VAR 0 3
3558: RET
// export function Count ( array ) ; begin
3559: LD_INT 0
3561: PPUSH
// result := array + 0 ;
3562: LD_ADDR_VAR 0 2
3566: PUSH
3567: LD_VAR 0 1
3571: PUSH
3572: LD_INT 0
3574: PLUS
3575: ST_TO_ADDR
// end ;
3576: LD_VAR 0 2
3580: RET
// export function IsEmpty ( building ) ; begin
3581: LD_INT 0
3583: PPUSH
// if not building then
3584: LD_VAR 0 1
3588: NOT
3589: IFFALSE 3593
// exit ;
3591: GO 3636
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 22
3605: PUSH
3606: LD_VAR 0 1
3610: PPUSH
3611: CALL_OW 255
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 58
3622: PUSH
3623: EMPTY
3624: LIST
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PPUSH
3630: CALL_OW 69
3634: IN
3635: ST_TO_ADDR
// end ;
3636: LD_VAR 0 2
3640: RET
// export function IsNotFull ( building ) ; var places ; begin
3641: LD_INT 0
3643: PPUSH
3644: PPUSH
// if not building then
3645: LD_VAR 0 1
3649: NOT
3650: IFFALSE 3654
// exit ;
3652: GO 3682
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: LD_INT 3
3666: PUSH
3667: LD_INT 62
3669: PUSH
3670: EMPTY
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PPUSH
3677: CALL_OW 72
3681: ST_TO_ADDR
// end ;
3682: LD_VAR 0 2
3686: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3687: LD_INT 0
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
// tmp := [ ] ;
3693: LD_ADDR_VAR 0 3
3697: PUSH
3698: EMPTY
3699: ST_TO_ADDR
// list := [ ] ;
3700: LD_ADDR_VAR 0 5
3704: PUSH
3705: EMPTY
3706: ST_TO_ADDR
// for i = 16 to 25 do
3707: LD_ADDR_VAR 0 4
3711: PUSH
3712: DOUBLE
3713: LD_INT 16
3715: DEC
3716: ST_TO_ADDR
3717: LD_INT 25
3719: PUSH
3720: FOR_TO
3721: IFFALSE 3794
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3723: LD_ADDR_VAR 0 3
3727: PUSH
3728: LD_VAR 0 3
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 255
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 91
3752: PUSH
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 6
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_INT 30
3768: PUSH
3769: LD_VAR 0 4
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: EMPTY
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: ADD
3791: ST_TO_ADDR
3792: GO 3720
3794: POP
3795: POP
// for i = 1 to tmp do
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 3
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3900
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3814: LD_ADDR_VAR 0 5
3818: PUSH
3819: LD_VAR 0 5
3823: PUSH
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 4
3833: ARRAY
3834: PPUSH
3835: CALL_OW 266
3839: PUSH
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 4
3849: ARRAY
3850: PPUSH
3851: CALL_OW 250
3855: PUSH
3856: LD_VAR 0 3
3860: PUSH
3861: LD_VAR 0 4
3865: ARRAY
3866: PPUSH
3867: CALL_OW 251
3871: PUSH
3872: LD_VAR 0 3
3876: PUSH
3877: LD_VAR 0 4
3881: ARRAY
3882: PPUSH
3883: CALL_OW 254
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: ADD
3897: ST_TO_ADDR
3898: GO 3811
3900: POP
3901: POP
// result := list ;
3902: LD_ADDR_VAR 0 2
3906: PUSH
3907: LD_VAR 0 5
3911: ST_TO_ADDR
// end ;
3912: LD_VAR 0 2
3916: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3917: LD_INT 0
3919: PPUSH
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
3924: PPUSH
3925: PPUSH
// if not factory then
3926: LD_VAR 0 1
3930: NOT
3931: IFFALSE 3935
// exit ;
3933: GO 4528
// if control = control_apeman then
3935: LD_VAR 0 4
3939: PUSH
3940: LD_INT 5
3942: EQUAL
3943: IFFALSE 4052
// begin tmp := UnitsInside ( factory ) ;
3945: LD_ADDR_VAR 0 8
3949: PUSH
3950: LD_VAR 0 1
3954: PPUSH
3955: CALL_OW 313
3959: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3960: LD_VAR 0 8
3964: PPUSH
3965: LD_INT 25
3967: PUSH
3968: LD_INT 12
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: NOT
3980: IFFALSE 3990
// control := control_manual ;
3982: LD_ADDR_VAR 0 4
3986: PUSH
3987: LD_INT 1
3989: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3990: LD_ADDR_VAR 0 8
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL 3687 0 1
4004: ST_TO_ADDR
// if tmp then
4005: LD_VAR 0 8
4009: IFFALSE 4052
// begin for i in tmp do
4011: LD_ADDR_VAR 0 7
4015: PUSH
4016: LD_VAR 0 8
4020: PUSH
4021: FOR_IN
4022: IFFALSE 4050
// if i [ 1 ] = b_ext_radio then
4024: LD_VAR 0 7
4028: PUSH
4029: LD_INT 1
4031: ARRAY
4032: PUSH
4033: LD_INT 22
4035: EQUAL
4036: IFFALSE 4048
// begin control := control_remote ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 2
4045: ST_TO_ADDR
// break ;
4046: GO 4050
// end ;
4048: GO 4021
4050: POP
4051: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4052: LD_VAR 0 1
4056: PPUSH
4057: LD_VAR 0 2
4061: PPUSH
4062: LD_VAR 0 3
4066: PPUSH
4067: LD_VAR 0 4
4071: PPUSH
4072: LD_VAR 0 5
4076: PPUSH
4077: CALL_OW 448
4081: IFFALSE 4116
// begin result := [ chassis , engine , control , weapon ] ;
4083: LD_ADDR_VAR 0 6
4087: PUSH
4088: LD_VAR 0 2
4092: PUSH
4093: LD_VAR 0 3
4097: PUSH
4098: LD_VAR 0 4
4102: PUSH
4103: LD_VAR 0 5
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: ST_TO_ADDR
// exit ;
4114: GO 4528
// end ; _chassis := AvailableChassisList ( factory ) ;
4116: LD_ADDR_VAR 0 9
4120: PUSH
4121: LD_VAR 0 1
4125: PPUSH
4126: CALL_OW 475
4130: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4131: LD_ADDR_VAR 0 11
4135: PUSH
4136: LD_VAR 0 1
4140: PPUSH
4141: CALL_OW 476
4145: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4146: LD_ADDR_VAR 0 12
4150: PUSH
4151: LD_VAR 0 1
4155: PPUSH
4156: CALL_OW 477
4160: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4161: LD_ADDR_VAR 0 10
4165: PUSH
4166: LD_VAR 0 1
4170: PPUSH
4171: CALL_OW 478
4175: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4176: LD_VAR 0 9
4180: NOT
4181: PUSH
4182: LD_VAR 0 11
4186: NOT
4187: OR
4188: PUSH
4189: LD_VAR 0 12
4193: NOT
4194: OR
4195: PUSH
4196: LD_VAR 0 10
4200: NOT
4201: OR
4202: IFFALSE 4237
// begin result := [ chassis , engine , control , weapon ] ;
4204: LD_ADDR_VAR 0 6
4208: PUSH
4209: LD_VAR 0 2
4213: PUSH
4214: LD_VAR 0 3
4218: PUSH
4219: LD_VAR 0 4
4223: PUSH
4224: LD_VAR 0 5
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: ST_TO_ADDR
// exit ;
4235: GO 4528
// end ; if not chassis in _chassis then
4237: LD_VAR 0 2
4241: PUSH
4242: LD_VAR 0 9
4246: IN
4247: NOT
4248: IFFALSE 4274
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 9
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_VAR 0 9
4267: PPUSH
4268: CALL_OW 12
4272: ARRAY
4273: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4274: LD_VAR 0 2
4278: PPUSH
4279: LD_VAR 0 3
4283: PPUSH
4284: CALL 4533 0 2
4288: NOT
4289: IFFALSE 4348
// repeat engine := _engine [ 1 ] ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: LD_VAR 0 11
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4305: LD_ADDR_VAR 0 11
4309: PUSH
4310: LD_VAR 0 11
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 3
4322: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4323: LD_VAR 0 2
4327: PPUSH
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL 4533 0 2
4337: PUSH
4338: LD_VAR 0 11
4342: PUSH
4343: EMPTY
4344: EQUAL
4345: OR
4346: IFFALSE 4291
// if not control in _control then
4348: LD_VAR 0 4
4352: PUSH
4353: LD_VAR 0 12
4357: IN
4358: NOT
4359: IFFALSE 4385
// control := _control [ rand ( 1 , _control ) ] ;
4361: LD_ADDR_VAR 0 4
4365: PUSH
4366: LD_VAR 0 12
4370: PUSH
4371: LD_INT 1
4373: PPUSH
4374: LD_VAR 0 12
4378: PPUSH
4379: CALL_OW 12
4383: ARRAY
4384: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4385: LD_VAR 0 2
4389: PPUSH
4390: LD_VAR 0 5
4394: PPUSH
4395: CALL 4753 0 2
4399: NOT
4400: IFFALSE 4459
// repeat weapon := _weapon [ 1 ] ;
4402: LD_ADDR_VAR 0 5
4406: PUSH
4407: LD_VAR 0 10
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4416: LD_ADDR_VAR 0 10
4420: PUSH
4421: LD_VAR 0 10
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: CALL_OW 3
4433: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4434: LD_VAR 0 2
4438: PPUSH
4439: LD_VAR 0 5
4443: PPUSH
4444: CALL 4753 0 2
4448: PUSH
4449: LD_VAR 0 10
4453: PUSH
4454: EMPTY
4455: EQUAL
4456: OR
4457: IFFALSE 4402
// result := [ ] ;
4459: LD_ADDR_VAR 0 6
4463: PUSH
4464: EMPTY
4465: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_VAR 0 2
4475: PPUSH
4476: LD_VAR 0 3
4480: PPUSH
4481: LD_VAR 0 4
4485: PPUSH
4486: LD_VAR 0 5
4490: PPUSH
4491: CALL_OW 448
4495: IFFALSE 4528
// result := [ chassis , engine , control , weapon ] ;
4497: LD_ADDR_VAR 0 6
4501: PUSH
4502: LD_VAR 0 2
4506: PUSH
4507: LD_VAR 0 3
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: LD_VAR 0 5
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// end ;
4528: LD_VAR 0 6
4532: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4533: LD_INT 0
4535: PPUSH
// if not chassis or not engine then
4536: LD_VAR 0 1
4540: NOT
4541: PUSH
4542: LD_VAR 0 2
4546: NOT
4547: OR
4548: IFFALSE 4552
// exit ;
4550: GO 4748
// case engine of engine_solar :
4552: LD_VAR 0 2
4556: PUSH
4557: LD_INT 2
4559: DOUBLE
4560: EQUAL
4561: IFTRUE 4565
4563: GO 4603
4565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: LD_INT 11
4573: PUSH
4574: LD_INT 12
4576: PUSH
4577: LD_INT 13
4579: PUSH
4580: LD_INT 14
4582: PUSH
4583: LD_INT 1
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: LD_INT 3
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: ST_TO_ADDR
4601: GO 4732
4603: LD_INT 1
4605: DOUBLE
4606: EQUAL
4607: IFTRUE 4611
4609: GO 4673
4611: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4612: LD_ADDR_VAR 0 3
4616: PUSH
4617: LD_INT 11
4619: PUSH
4620: LD_INT 12
4622: PUSH
4623: LD_INT 13
4625: PUSH
4626: LD_INT 14
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: LD_INT 2
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: LD_INT 21
4646: PUSH
4647: LD_INT 23
4649: PUSH
4650: LD_INT 22
4652: PUSH
4653: LD_INT 24
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: ST_TO_ADDR
4671: GO 4732
4673: LD_INT 3
4675: DOUBLE
4676: EQUAL
4677: IFTRUE 4681
4679: GO 4731
4681: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 13
4689: PUSH
4690: LD_INT 14
4692: PUSH
4693: LD_INT 2
4695: PUSH
4696: LD_INT 3
4698: PUSH
4699: LD_INT 4
4701: PUSH
4702: LD_INT 5
4704: PUSH
4705: LD_INT 21
4707: PUSH
4708: LD_INT 22
4710: PUSH
4711: LD_INT 23
4713: PUSH
4714: LD_INT 24
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: ST_TO_ADDR
4729: GO 4732
4731: POP
// result := ( chassis in result ) ;
4732: LD_ADDR_VAR 0 3
4736: PUSH
4737: LD_VAR 0 1
4741: PUSH
4742: LD_VAR 0 3
4746: IN
4747: ST_TO_ADDR
// end ;
4748: LD_VAR 0 3
4752: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4753: LD_INT 0
4755: PPUSH
// if not chassis or not weapon then
4756: LD_VAR 0 1
4760: NOT
4761: PUSH
4762: LD_VAR 0 2
4766: NOT
4767: OR
4768: IFFALSE 4772
// exit ;
4770: GO 5832
// case weapon of us_machine_gun :
4772: LD_VAR 0 2
4776: PUSH
4777: LD_INT 2
4779: DOUBLE
4780: EQUAL
4781: IFTRUE 4785
4783: GO 4815
4785: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4786: LD_ADDR_VAR 0 3
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: LD_INT 3
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: ST_TO_ADDR
4813: GO 5816
4815: LD_INT 3
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4823
4821: GO 4853
4823: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: LD_INT 2
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: LD_INT 4
4840: PUSH
4841: LD_INT 5
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: ST_TO_ADDR
4851: GO 5816
4853: LD_INT 11
4855: DOUBLE
4856: EQUAL
4857: IFTRUE 4861
4859: GO 4891
4861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4862: LD_ADDR_VAR 0 3
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: LD_INT 3
4875: PUSH
4876: LD_INT 4
4878: PUSH
4879: LD_INT 5
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
4889: GO 5816
4891: LD_INT 4
4893: DOUBLE
4894: EQUAL
4895: IFTRUE 4899
4897: GO 4925
4899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4900: LD_ADDR_VAR 0 3
4904: PUSH
4905: LD_INT 2
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: LD_INT 4
4913: PUSH
4914: LD_INT 5
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: ST_TO_ADDR
4923: GO 5816
4925: LD_INT 5
4927: DOUBLE
4928: EQUAL
4929: IFTRUE 4933
4931: GO 4959
4933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: LD_INT 2
4941: PUSH
4942: LD_INT 3
4944: PUSH
4945: LD_INT 4
4947: PUSH
4948: LD_INT 5
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: ST_TO_ADDR
4957: GO 5816
4959: LD_INT 9
4961: DOUBLE
4962: EQUAL
4963: IFTRUE 4967
4965: GO 4993
4967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4968: LD_ADDR_VAR 0 3
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: ST_TO_ADDR
4991: GO 5816
4993: LD_INT 7
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5001
4999: GO 5027
5001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 2
5009: PUSH
5010: LD_INT 3
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: LD_INT 5
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: ST_TO_ADDR
5025: GO 5816
5027: LD_INT 12
5029: DOUBLE
5030: EQUAL
5031: IFTRUE 5035
5033: GO 5061
5035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_INT 2
5043: PUSH
5044: LD_INT 3
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: LD_INT 5
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: ST_TO_ADDR
5059: GO 5816
5061: LD_INT 13
5063: DOUBLE
5064: EQUAL
5065: IFTRUE 5069
5067: GO 5095
5069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5070: LD_ADDR_VAR 0 3
5074: PUSH
5075: LD_INT 2
5077: PUSH
5078: LD_INT 3
5080: PUSH
5081: LD_INT 4
5083: PUSH
5084: LD_INT 5
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: ST_TO_ADDR
5093: GO 5816
5095: LD_INT 14
5097: DOUBLE
5098: EQUAL
5099: IFTRUE 5103
5101: GO 5121
5103: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5104: LD_ADDR_VAR 0 3
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: LD_INT 5
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: ST_TO_ADDR
5119: GO 5816
5121: LD_INT 6
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5129
5127: GO 5147
5129: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5130: LD_ADDR_VAR 0 3
5134: PUSH
5135: LD_INT 4
5137: PUSH
5138: LD_INT 5
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: ST_TO_ADDR
5145: GO 5816
5147: LD_INT 10
5149: DOUBLE
5150: EQUAL
5151: IFTRUE 5155
5153: GO 5173
5155: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5156: LD_ADDR_VAR 0 3
5160: PUSH
5161: LD_INT 4
5163: PUSH
5164: LD_INT 5
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: ST_TO_ADDR
5171: GO 5816
5173: LD_INT 22
5175: DOUBLE
5176: EQUAL
5177: IFTRUE 5181
5179: GO 5207
5181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5182: LD_ADDR_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: PUSH
5190: LD_INT 12
5192: PUSH
5193: LD_INT 13
5195: PUSH
5196: LD_INT 14
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
5205: GO 5816
5207: LD_INT 23
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5241
5215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: LD_INT 11
5223: PUSH
5224: LD_INT 12
5226: PUSH
5227: LD_INT 13
5229: PUSH
5230: LD_INT 14
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: ST_TO_ADDR
5239: GO 5816
5241: LD_INT 24
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5275
5249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5250: LD_ADDR_VAR 0 3
5254: PUSH
5255: LD_INT 11
5257: PUSH
5258: LD_INT 12
5260: PUSH
5261: LD_INT 13
5263: PUSH
5264: LD_INT 14
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: ST_TO_ADDR
5273: GO 5816
5275: LD_INT 30
5277: DOUBLE
5278: EQUAL
5279: IFTRUE 5283
5281: GO 5309
5283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5284: LD_ADDR_VAR 0 3
5288: PUSH
5289: LD_INT 11
5291: PUSH
5292: LD_INT 12
5294: PUSH
5295: LD_INT 13
5297: PUSH
5298: LD_INT 14
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
5307: GO 5816
5309: LD_INT 25
5311: DOUBLE
5312: EQUAL
5313: IFTRUE 5317
5315: GO 5335
5317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5318: LD_ADDR_VAR 0 3
5322: PUSH
5323: LD_INT 13
5325: PUSH
5326: LD_INT 14
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: ST_TO_ADDR
5333: GO 5816
5335: LD_INT 27
5337: DOUBLE
5338: EQUAL
5339: IFTRUE 5343
5341: GO 5361
5343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_INT 13
5351: PUSH
5352: LD_INT 14
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: ST_TO_ADDR
5359: GO 5816
5361: LD_INT 92
5363: DOUBLE
5364: EQUAL
5365: IFTRUE 5369
5367: GO 5395
5369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_INT 11
5377: PUSH
5378: LD_INT 12
5380: PUSH
5381: LD_INT 13
5383: PUSH
5384: LD_INT 14
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: ST_TO_ADDR
5393: GO 5816
5395: LD_INT 28
5397: DOUBLE
5398: EQUAL
5399: IFTRUE 5403
5401: GO 5421
5403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_INT 13
5411: PUSH
5412: LD_INT 14
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: ST_TO_ADDR
5419: GO 5816
5421: LD_INT 29
5423: DOUBLE
5424: EQUAL
5425: IFTRUE 5429
5427: GO 5447
5429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5430: LD_ADDR_VAR 0 3
5434: PUSH
5435: LD_INT 13
5437: PUSH
5438: LD_INT 14
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: ST_TO_ADDR
5445: GO 5816
5447: LD_INT 31
5449: DOUBLE
5450: EQUAL
5451: IFTRUE 5455
5453: GO 5473
5455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5456: LD_ADDR_VAR 0 3
5460: PUSH
5461: LD_INT 13
5463: PUSH
5464: LD_INT 14
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: ST_TO_ADDR
5471: GO 5816
5473: LD_INT 26
5475: DOUBLE
5476: EQUAL
5477: IFTRUE 5481
5479: GO 5499
5481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5482: LD_ADDR_VAR 0 3
5486: PUSH
5487: LD_INT 13
5489: PUSH
5490: LD_INT 14
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: ST_TO_ADDR
5497: GO 5816
5499: LD_INT 42
5501: DOUBLE
5502: EQUAL
5503: IFTRUE 5507
5505: GO 5533
5507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5508: LD_ADDR_VAR 0 3
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 22
5518: PUSH
5519: LD_INT 23
5521: PUSH
5522: LD_INT 24
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: ST_TO_ADDR
5531: GO 5816
5533: LD_INT 43
5535: DOUBLE
5536: EQUAL
5537: IFTRUE 5541
5539: GO 5567
5541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5542: LD_ADDR_VAR 0 3
5546: PUSH
5547: LD_INT 21
5549: PUSH
5550: LD_INT 22
5552: PUSH
5553: LD_INT 23
5555: PUSH
5556: LD_INT 24
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: ST_TO_ADDR
5565: GO 5816
5567: LD_INT 44
5569: DOUBLE
5570: EQUAL
5571: IFTRUE 5575
5573: GO 5601
5575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5576: LD_ADDR_VAR 0 3
5580: PUSH
5581: LD_INT 21
5583: PUSH
5584: LD_INT 22
5586: PUSH
5587: LD_INT 23
5589: PUSH
5590: LD_INT 24
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: ST_TO_ADDR
5599: GO 5816
5601: LD_INT 45
5603: DOUBLE
5604: EQUAL
5605: IFTRUE 5609
5607: GO 5635
5609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5610: LD_ADDR_VAR 0 3
5614: PUSH
5615: LD_INT 21
5617: PUSH
5618: LD_INT 22
5620: PUSH
5621: LD_INT 23
5623: PUSH
5624: LD_INT 24
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: ST_TO_ADDR
5633: GO 5816
5635: LD_INT 49
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5643
5641: GO 5669
5643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5644: LD_ADDR_VAR 0 3
5648: PUSH
5649: LD_INT 21
5651: PUSH
5652: LD_INT 22
5654: PUSH
5655: LD_INT 23
5657: PUSH
5658: LD_INT 24
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: ST_TO_ADDR
5667: GO 5816
5669: LD_INT 51
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5703
5677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: LD_INT 21
5685: PUSH
5686: LD_INT 22
5688: PUSH
5689: LD_INT 23
5691: PUSH
5692: LD_INT 24
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: ST_TO_ADDR
5701: GO 5816
5703: LD_INT 52
5705: DOUBLE
5706: EQUAL
5707: IFTRUE 5711
5709: GO 5737
5711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 23
5725: PUSH
5726: LD_INT 24
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: ST_TO_ADDR
5735: GO 5816
5737: LD_INT 53
5739: DOUBLE
5740: EQUAL
5741: IFTRUE 5745
5743: GO 5763
5745: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5746: LD_ADDR_VAR 0 3
5750: PUSH
5751: LD_INT 23
5753: PUSH
5754: LD_INT 24
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: ST_TO_ADDR
5761: GO 5816
5763: LD_INT 46
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5771
5769: GO 5789
5771: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5772: LD_ADDR_VAR 0 3
5776: PUSH
5777: LD_INT 23
5779: PUSH
5780: LD_INT 24
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: ST_TO_ADDR
5787: GO 5816
5789: LD_INT 47
5791: DOUBLE
5792: EQUAL
5793: IFTRUE 5797
5795: GO 5815
5797: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5798: LD_ADDR_VAR 0 3
5802: PUSH
5803: LD_INT 23
5805: PUSH
5806: LD_INT 24
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: ST_TO_ADDR
5813: GO 5816
5815: POP
// result := ( chassis in result ) ;
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: LD_VAR 0 1
5825: PUSH
5826: LD_VAR 0 3
5830: IN
5831: ST_TO_ADDR
// end ;
5832: LD_VAR 0 3
5836: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
// result := array ;
5846: LD_ADDR_VAR 0 5
5850: PUSH
5851: LD_VAR 0 1
5855: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5856: LD_VAR 0 1
5860: NOT
5861: PUSH
5862: LD_VAR 0 2
5866: NOT
5867: OR
5868: PUSH
5869: LD_VAR 0 3
5873: NOT
5874: OR
5875: PUSH
5876: LD_VAR 0 2
5880: PUSH
5881: LD_VAR 0 1
5885: GREATER
5886: OR
5887: PUSH
5888: LD_VAR 0 3
5892: PUSH
5893: LD_VAR 0 1
5897: GREATER
5898: OR
5899: IFFALSE 5903
// exit ;
5901: GO 6199
// if direction then
5903: LD_VAR 0 4
5907: IFFALSE 5971
// begin d := 1 ;
5909: LD_ADDR_VAR 0 9
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// if i_from > i_to then
5917: LD_VAR 0 2
5921: PUSH
5922: LD_VAR 0 3
5926: GREATER
5927: IFFALSE 5953
// length := ( array - i_from ) + i_to else
5929: LD_ADDR_VAR 0 11
5933: PUSH
5934: LD_VAR 0 1
5938: PUSH
5939: LD_VAR 0 2
5943: MINUS
5944: PUSH
5945: LD_VAR 0 3
5949: PLUS
5950: ST_TO_ADDR
5951: GO 5969
// length := i_to - i_from ;
5953: LD_ADDR_VAR 0 11
5957: PUSH
5958: LD_VAR 0 3
5962: PUSH
5963: LD_VAR 0 2
5967: MINUS
5968: ST_TO_ADDR
// end else
5969: GO 6032
// begin d := - 1 ;
5971: LD_ADDR_VAR 0 9
5975: PUSH
5976: LD_INT 1
5978: NEG
5979: ST_TO_ADDR
// if i_from > i_to then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 3
5989: GREATER
5990: IFFALSE 6010
// length := i_from - i_to else
5992: LD_ADDR_VAR 0 11
5996: PUSH
5997: LD_VAR 0 2
6001: PUSH
6002: LD_VAR 0 3
6006: MINUS
6007: ST_TO_ADDR
6008: GO 6032
// length := ( array - i_to ) + i_from ;
6010: LD_ADDR_VAR 0 11
6014: PUSH
6015: LD_VAR 0 1
6019: PUSH
6020: LD_VAR 0 3
6024: MINUS
6025: PUSH
6026: LD_VAR 0 2
6030: PLUS
6031: ST_TO_ADDR
// end ; if not length then
6032: LD_VAR 0 11
6036: NOT
6037: IFFALSE 6041
// exit ;
6039: GO 6199
// tmp := array ;
6041: LD_ADDR_VAR 0 10
6045: PUSH
6046: LD_VAR 0 1
6050: ST_TO_ADDR
// for i = 1 to length do
6051: LD_ADDR_VAR 0 6
6055: PUSH
6056: DOUBLE
6057: LD_INT 1
6059: DEC
6060: ST_TO_ADDR
6061: LD_VAR 0 11
6065: PUSH
6066: FOR_TO
6067: IFFALSE 6187
// begin for j = 1 to array do
6069: LD_ADDR_VAR 0 7
6073: PUSH
6074: DOUBLE
6075: LD_INT 1
6077: DEC
6078: ST_TO_ADDR
6079: LD_VAR 0 1
6083: PUSH
6084: FOR_TO
6085: IFFALSE 6173
// begin k := j + d ;
6087: LD_ADDR_VAR 0 8
6091: PUSH
6092: LD_VAR 0 7
6096: PUSH
6097: LD_VAR 0 9
6101: PLUS
6102: ST_TO_ADDR
// if k > array then
6103: LD_VAR 0 8
6107: PUSH
6108: LD_VAR 0 1
6112: GREATER
6113: IFFALSE 6123
// k := 1 ;
6115: LD_ADDR_VAR 0 8
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// if not k then
6123: LD_VAR 0 8
6127: NOT
6128: IFFALSE 6140
// k := array ;
6130: LD_ADDR_VAR 0 8
6134: PUSH
6135: LD_VAR 0 1
6139: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6140: LD_ADDR_VAR 0 10
6144: PUSH
6145: LD_VAR 0 10
6149: PPUSH
6150: LD_VAR 0 8
6154: PPUSH
6155: LD_VAR 0 1
6159: PUSH
6160: LD_VAR 0 7
6164: ARRAY
6165: PPUSH
6166: CALL_OW 1
6170: ST_TO_ADDR
// end ;
6171: GO 6084
6173: POP
6174: POP
// array := tmp ;
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_VAR 0 10
6184: ST_TO_ADDR
// end ;
6185: GO 6066
6187: POP
6188: POP
// result := array ;
6189: LD_ADDR_VAR 0 5
6193: PUSH
6194: LD_VAR 0 1
6198: ST_TO_ADDR
// end ;
6199: LD_VAR 0 5
6203: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
// result := 0 ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// if not array or not value in array then
6216: LD_VAR 0 1
6220: NOT
6221: PUSH
6222: LD_VAR 0 2
6226: PUSH
6227: LD_VAR 0 1
6231: IN
6232: NOT
6233: OR
6234: IFFALSE 6238
// exit ;
6236: GO 6292
// for i = 1 to array do
6238: LD_ADDR_VAR 0 4
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 1
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6290
// if value = array [ i ] then
6256: LD_VAR 0 2
6260: PUSH
6261: LD_VAR 0 1
6265: PUSH
6266: LD_VAR 0 4
6270: ARRAY
6271: EQUAL
6272: IFFALSE 6288
// begin result := i ;
6274: LD_ADDR_VAR 0 3
6278: PUSH
6279: LD_VAR 0 4
6283: ST_TO_ADDR
// exit ;
6284: POP
6285: POP
6286: GO 6292
// end ;
6288: GO 6253
6290: POP
6291: POP
// end ;
6292: LD_VAR 0 3
6296: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6297: LD_INT 0
6299: PPUSH
// vc_chassis := chassis ;
6300: LD_ADDR_OWVAR 37
6304: PUSH
6305: LD_VAR 0 1
6309: ST_TO_ADDR
// vc_engine := engine ;
6310: LD_ADDR_OWVAR 39
6314: PUSH
6315: LD_VAR 0 2
6319: ST_TO_ADDR
// vc_control := control ;
6320: LD_ADDR_OWVAR 38
6324: PUSH
6325: LD_VAR 0 3
6329: ST_TO_ADDR
// vc_weapon := weapon ;
6330: LD_ADDR_OWVAR 40
6334: PUSH
6335: LD_VAR 0 4
6339: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6340: LD_ADDR_OWVAR 41
6344: PUSH
6345: LD_VAR 0 5
6349: ST_TO_ADDR
// end ;
6350: LD_VAR 0 6
6354: RET
// export function WantPlant ( unit ) ; var task ; begin
6355: LD_INT 0
6357: PPUSH
6358: PPUSH
// result := false ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_INT 0
6366: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_VAR 0 1
6376: PPUSH
6377: CALL_OW 437
6381: ST_TO_ADDR
// if task then
6382: LD_VAR 0 3
6386: IFFALSE 6414
// if task [ 1 ] [ 1 ] = p then
6388: LD_VAR 0 3
6392: PUSH
6393: LD_INT 1
6395: ARRAY
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PUSH
6401: LD_STRING p
6403: EQUAL
6404: IFFALSE 6414
// result := true ;
6406: LD_ADDR_VAR 0 2
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// end ;
6414: LD_VAR 0 2
6418: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6419: LD_INT 0
6421: PPUSH
6422: PPUSH
6423: PPUSH
6424: PPUSH
// if pos < 1 then
6425: LD_VAR 0 2
6429: PUSH
6430: LD_INT 1
6432: LESS
6433: IFFALSE 6437
// exit ;
6435: GO 6740
// if pos = 1 then
6437: LD_VAR 0 2
6441: PUSH
6442: LD_INT 1
6444: EQUAL
6445: IFFALSE 6478
// result := Replace ( arr , pos [ 1 ] , value ) else
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 1
6464: ARRAY
6465: PPUSH
6466: LD_VAR 0 3
6470: PPUSH
6471: CALL_OW 1
6475: ST_TO_ADDR
6476: GO 6740
// begin tmp := arr ;
6478: LD_ADDR_VAR 0 6
6482: PUSH
6483: LD_VAR 0 1
6487: ST_TO_ADDR
// s_arr := [ tmp ] ;
6488: LD_ADDR_VAR 0 7
6492: PUSH
6493: LD_VAR 0 6
6497: PUSH
6498: EMPTY
6499: LIST
6500: ST_TO_ADDR
// for i = 1 to pos - 1 do
6501: LD_ADDR_VAR 0 5
6505: PUSH
6506: DOUBLE
6507: LD_INT 1
6509: DEC
6510: ST_TO_ADDR
6511: LD_VAR 0 2
6515: PUSH
6516: LD_INT 1
6518: MINUS
6519: PUSH
6520: FOR_TO
6521: IFFALSE 6566
// begin tmp := tmp [ pos [ i ] ] ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_VAR 0 6
6532: PUSH
6533: LD_VAR 0 2
6537: PUSH
6538: LD_VAR 0 5
6542: ARRAY
6543: ARRAY
6544: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6545: LD_ADDR_VAR 0 7
6549: PUSH
6550: LD_VAR 0 7
6554: PUSH
6555: LD_VAR 0 6
6559: PUSH
6560: EMPTY
6561: LIST
6562: ADD
6563: ST_TO_ADDR
// end ;
6564: GO 6520
6566: POP
6567: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6568: LD_ADDR_VAR 0 6
6572: PUSH
6573: LD_VAR 0 6
6577: PPUSH
6578: LD_VAR 0 2
6582: PUSH
6583: LD_VAR 0 2
6587: ARRAY
6588: PPUSH
6589: LD_VAR 0 3
6593: PPUSH
6594: CALL_OW 1
6598: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_VAR 0 7
6608: PPUSH
6609: LD_VAR 0 7
6613: PPUSH
6614: LD_VAR 0 6
6618: PPUSH
6619: CALL_OW 1
6623: ST_TO_ADDR
// for i = s_arr downto 2 do
6624: LD_ADDR_VAR 0 5
6628: PUSH
6629: DOUBLE
6630: LD_VAR 0 7
6634: INC
6635: ST_TO_ADDR
6636: LD_INT 2
6638: PUSH
6639: FOR_DOWNTO
6640: IFFALSE 6724
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_VAR 0 7
6651: PUSH
6652: LD_VAR 0 5
6656: PUSH
6657: LD_INT 1
6659: MINUS
6660: ARRAY
6661: PPUSH
6662: LD_VAR 0 2
6666: PUSH
6667: LD_VAR 0 5
6671: PUSH
6672: LD_INT 1
6674: MINUS
6675: ARRAY
6676: PPUSH
6677: LD_VAR 0 7
6681: PUSH
6682: LD_VAR 0 5
6686: ARRAY
6687: PPUSH
6688: CALL_OW 1
6692: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6693: LD_ADDR_VAR 0 7
6697: PUSH
6698: LD_VAR 0 7
6702: PPUSH
6703: LD_VAR 0 5
6707: PUSH
6708: LD_INT 1
6710: MINUS
6711: PPUSH
6712: LD_VAR 0 6
6716: PPUSH
6717: CALL_OW 1
6721: ST_TO_ADDR
// end ;
6722: GO 6639
6724: POP
6725: POP
// result := s_arr [ 1 ] ;
6726: LD_ADDR_VAR 0 4
6730: PUSH
6731: LD_VAR 0 7
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: ST_TO_ADDR
// end ; end ;
6740: LD_VAR 0 4
6744: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// if not list then
6749: LD_VAR 0 1
6753: NOT
6754: IFFALSE 6758
// exit ;
6756: GO 6849
// i := list [ pos1 ] ;
6758: LD_ADDR_VAR 0 5
6762: PUSH
6763: LD_VAR 0 1
6767: PUSH
6768: LD_VAR 0 2
6772: ARRAY
6773: ST_TO_ADDR
// if not i then
6774: LD_VAR 0 5
6778: NOT
6779: IFFALSE 6783
// exit ;
6781: GO 6849
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6783: LD_ADDR_VAR 0 1
6787: PUSH
6788: LD_VAR 0 1
6792: PPUSH
6793: LD_VAR 0 2
6797: PPUSH
6798: LD_VAR 0 1
6802: PUSH
6803: LD_VAR 0 3
6807: ARRAY
6808: PPUSH
6809: CALL_OW 1
6813: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6814: LD_ADDR_VAR 0 1
6818: PUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 3
6828: PPUSH
6829: LD_VAR 0 5
6833: PPUSH
6834: CALL_OW 1
6838: ST_TO_ADDR
// result := list ;
6839: LD_ADDR_VAR 0 4
6843: PUSH
6844: LD_VAR 0 1
6848: ST_TO_ADDR
// end ;
6849: LD_VAR 0 4
6853: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6854: LD_INT 0
6856: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6857: LD_ADDR_VAR 0 5
6861: PUSH
6862: LD_VAR 0 1
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 251
6881: PPUSH
6882: LD_VAR 0 2
6886: PPUSH
6887: LD_VAR 0 3
6891: PPUSH
6892: LD_VAR 0 4
6896: PPUSH
6897: CALL 7275 0 5
6901: ST_TO_ADDR
// end ;
6902: LD_VAR 0 5
6906: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6907: LD_INT 0
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// if not list or not unit then
6913: LD_VAR 0 2
6917: NOT
6918: PUSH
6919: LD_VAR 0 1
6923: NOT
6924: OR
6925: IFFALSE 6929
// exit ;
6927: GO 7270
// result := [ ] ;
6929: LD_ADDR_VAR 0 5
6933: PUSH
6934: EMPTY
6935: ST_TO_ADDR
// for i in list do
6936: LD_ADDR_VAR 0 6
6940: PUSH
6941: LD_VAR 0 2
6945: PUSH
6946: FOR_IN
6947: IFFALSE 7165
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6949: LD_ADDR_VAR 0 8
6953: PUSH
6954: LD_VAR 0 1
6958: PPUSH
6959: LD_VAR 0 6
6963: PUSH
6964: LD_INT 1
6966: ARRAY
6967: PPUSH
6968: LD_VAR 0 6
6972: PUSH
6973: LD_INT 2
6975: ARRAY
6976: PPUSH
6977: CALL_OW 297
6981: ST_TO_ADDR
// if not Count ( result ) then
6982: LD_VAR 0 5
6986: PPUSH
6987: CALL 3559 0 1
6991: NOT
6992: IFFALSE 7025
// begin result := Join ( result , [ i , tmp ] ) ;
6994: LD_ADDR_VAR 0 5
6998: PUSH
6999: LD_VAR 0 5
7003: PPUSH
7004: LD_VAR 0 6
7008: PUSH
7009: LD_VAR 0 8
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PPUSH
7018: CALL 39168 0 2
7022: ST_TO_ADDR
// continue ;
7023: GO 6946
// end ; if result [ result ] [ 2 ] <= tmp then
7025: LD_VAR 0 5
7029: PUSH
7030: LD_VAR 0 5
7034: ARRAY
7035: PUSH
7036: LD_INT 2
7038: ARRAY
7039: PUSH
7040: LD_VAR 0 8
7044: LESSEQUAL
7045: IFFALSE 7078
// result := Join ( result , [ i , tmp ] ) else
7047: LD_ADDR_VAR 0 5
7051: PUSH
7052: LD_VAR 0 5
7056: PPUSH
7057: LD_VAR 0 6
7061: PUSH
7062: LD_VAR 0 8
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 39168 0 2
7075: ST_TO_ADDR
7076: GO 7163
// begin for j := 1 to Count ( result ) do
7078: LD_ADDR_VAR 0 7
7082: PUSH
7083: DOUBLE
7084: LD_INT 1
7086: DEC
7087: ST_TO_ADDR
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL 3559 0 1
7097: PUSH
7098: FOR_TO
7099: IFFALSE 7161
// begin if tmp < result [ j ] [ 2 ] then
7101: LD_VAR 0 8
7105: PUSH
7106: LD_VAR 0 5
7110: PUSH
7111: LD_VAR 0 7
7115: ARRAY
7116: PUSH
7117: LD_INT 2
7119: ARRAY
7120: LESS
7121: IFFALSE 7159
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7123: LD_ADDR_VAR 0 5
7127: PUSH
7128: LD_VAR 0 5
7132: PPUSH
7133: LD_VAR 0 7
7137: PPUSH
7138: LD_VAR 0 6
7142: PUSH
7143: LD_VAR 0 8
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PPUSH
7152: CALL_OW 2
7156: ST_TO_ADDR
// break ;
7157: GO 7161
// end ; end ;
7159: GO 7098
7161: POP
7162: POP
// end ; end ;
7163: GO 6946
7165: POP
7166: POP
// if result and not asc then
7167: LD_VAR 0 5
7171: PUSH
7172: LD_VAR 0 3
7176: NOT
7177: AND
7178: IFFALSE 7195
// result := ReverseArray ( result ) ;
7180: LD_ADDR_VAR 0 5
7184: PUSH
7185: LD_VAR 0 5
7189: PPUSH
7190: CALL 34435 0 1
7194: ST_TO_ADDR
// tmp := [ ] ;
7195: LD_ADDR_VAR 0 8
7199: PUSH
7200: EMPTY
7201: ST_TO_ADDR
// if mode then
7202: LD_VAR 0 4
7206: IFFALSE 7270
// begin for i := 1 to result do
7208: LD_ADDR_VAR 0 6
7212: PUSH
7213: DOUBLE
7214: LD_INT 1
7216: DEC
7217: ST_TO_ADDR
7218: LD_VAR 0 5
7222: PUSH
7223: FOR_TO
7224: IFFALSE 7258
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7226: LD_ADDR_VAR 0 8
7230: PUSH
7231: LD_VAR 0 8
7235: PPUSH
7236: LD_VAR 0 5
7240: PUSH
7241: LD_VAR 0 6
7245: ARRAY
7246: PUSH
7247: LD_INT 1
7249: ARRAY
7250: PPUSH
7251: CALL 39168 0 2
7255: ST_TO_ADDR
7256: GO 7223
7258: POP
7259: POP
// result := tmp ;
7260: LD_ADDR_VAR 0 5
7264: PUSH
7265: LD_VAR 0 8
7269: ST_TO_ADDR
// end ; end ;
7270: LD_VAR 0 5
7274: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
// if not list then
7281: LD_VAR 0 3
7285: NOT
7286: IFFALSE 7290
// exit ;
7288: GO 7678
// result := [ ] ;
7290: LD_ADDR_VAR 0 6
7294: PUSH
7295: EMPTY
7296: ST_TO_ADDR
// for i in list do
7297: LD_ADDR_VAR 0 7
7301: PUSH
7302: LD_VAR 0 3
7306: PUSH
7307: FOR_IN
7308: IFFALSE 7510
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7310: LD_ADDR_VAR 0 9
7314: PUSH
7315: LD_VAR 0 7
7319: PPUSH
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_VAR 0 2
7329: PPUSH
7330: CALL_OW 297
7334: ST_TO_ADDR
// if not result then
7335: LD_VAR 0 6
7339: NOT
7340: IFFALSE 7366
// result := [ [ i , tmp ] ] else
7342: LD_ADDR_VAR 0 6
7346: PUSH
7347: LD_VAR 0 7
7351: PUSH
7352: LD_VAR 0 9
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: ST_TO_ADDR
7364: GO 7508
// begin if result [ result ] [ 2 ] <= tmp then
7366: LD_VAR 0 6
7370: PUSH
7371: LD_VAR 0 6
7375: ARRAY
7376: PUSH
7377: LD_INT 2
7379: ARRAY
7380: PUSH
7381: LD_VAR 0 9
7385: LESSEQUAL
7386: IFFALSE 7428
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7388: LD_ADDR_VAR 0 6
7392: PUSH
7393: LD_VAR 0 6
7397: PPUSH
7398: LD_VAR 0 6
7402: PUSH
7403: LD_INT 1
7405: PLUS
7406: PPUSH
7407: LD_VAR 0 7
7411: PUSH
7412: LD_VAR 0 9
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PPUSH
7421: CALL_OW 2
7425: ST_TO_ADDR
7426: GO 7508
// for j := 1 to result do
7428: LD_ADDR_VAR 0 8
7432: PUSH
7433: DOUBLE
7434: LD_INT 1
7436: DEC
7437: ST_TO_ADDR
7438: LD_VAR 0 6
7442: PUSH
7443: FOR_TO
7444: IFFALSE 7506
// begin if tmp < result [ j ] [ 2 ] then
7446: LD_VAR 0 9
7450: PUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_VAR 0 8
7460: ARRAY
7461: PUSH
7462: LD_INT 2
7464: ARRAY
7465: LESS
7466: IFFALSE 7504
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7468: LD_ADDR_VAR 0 6
7472: PUSH
7473: LD_VAR 0 6
7477: PPUSH
7478: LD_VAR 0 8
7482: PPUSH
7483: LD_VAR 0 7
7487: PUSH
7488: LD_VAR 0 9
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PPUSH
7497: CALL_OW 2
7501: ST_TO_ADDR
// break ;
7502: GO 7506
// end ; end ;
7504: GO 7443
7506: POP
7507: POP
// end ; end ;
7508: GO 7307
7510: POP
7511: POP
// if result and not asc then
7512: LD_VAR 0 6
7516: PUSH
7517: LD_VAR 0 4
7521: NOT
7522: AND
7523: IFFALSE 7598
// begin tmp := result ;
7525: LD_ADDR_VAR 0 9
7529: PUSH
7530: LD_VAR 0 6
7534: ST_TO_ADDR
// for i = tmp downto 1 do
7535: LD_ADDR_VAR 0 7
7539: PUSH
7540: DOUBLE
7541: LD_VAR 0 9
7545: INC
7546: ST_TO_ADDR
7547: LD_INT 1
7549: PUSH
7550: FOR_DOWNTO
7551: IFFALSE 7596
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7553: LD_ADDR_VAR 0 6
7557: PUSH
7558: LD_VAR 0 6
7562: PPUSH
7563: LD_VAR 0 9
7567: PUSH
7568: LD_VAR 0 7
7572: MINUS
7573: PUSH
7574: LD_INT 1
7576: PLUS
7577: PPUSH
7578: LD_VAR 0 9
7582: PUSH
7583: LD_VAR 0 7
7587: ARRAY
7588: PPUSH
7589: CALL_OW 1
7593: ST_TO_ADDR
7594: GO 7550
7596: POP
7597: POP
// end ; tmp := [ ] ;
7598: LD_ADDR_VAR 0 9
7602: PUSH
7603: EMPTY
7604: ST_TO_ADDR
// if mode then
7605: LD_VAR 0 5
7609: IFFALSE 7678
// begin for i = 1 to result do
7611: LD_ADDR_VAR 0 7
7615: PUSH
7616: DOUBLE
7617: LD_INT 1
7619: DEC
7620: ST_TO_ADDR
7621: LD_VAR 0 6
7625: PUSH
7626: FOR_TO
7627: IFFALSE 7666
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7629: LD_ADDR_VAR 0 9
7633: PUSH
7634: LD_VAR 0 9
7638: PPUSH
7639: LD_VAR 0 7
7643: PPUSH
7644: LD_VAR 0 6
7648: PUSH
7649: LD_VAR 0 7
7653: ARRAY
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: CALL_OW 1
7663: ST_TO_ADDR
7664: GO 7626
7666: POP
7667: POP
// result := tmp ;
7668: LD_ADDR_VAR 0 6
7672: PUSH
7673: LD_VAR 0 9
7677: ST_TO_ADDR
// end ; end ;
7678: LD_VAR 0 6
7682: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7683: LD_INT 0
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7691: LD_ADDR_VAR 0 5
7695: PUSH
7696: LD_INT 0
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: LD_INT 0
7704: PUSH
7705: EMPTY
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// if not x or not y then
7713: LD_VAR 0 2
7717: NOT
7718: PUSH
7719: LD_VAR 0 3
7723: NOT
7724: OR
7725: IFFALSE 7729
// exit ;
7727: GO 9379
// if not range then
7729: LD_VAR 0 4
7733: NOT
7734: IFFALSE 7744
// range := 10 ;
7736: LD_ADDR_VAR 0 4
7740: PUSH
7741: LD_INT 10
7743: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7744: LD_ADDR_VAR 0 8
7748: PUSH
7749: LD_INT 81
7751: PUSH
7752: LD_VAR 0 1
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 92
7763: PUSH
7764: LD_VAR 0 2
7768: PUSH
7769: LD_VAR 0 3
7773: PUSH
7774: LD_VAR 0 4
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 21
7790: PUSH
7791: LD_INT 3
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: ST_TO_ADDR
// if not tmp then
7812: LD_VAR 0 8
7816: NOT
7817: IFFALSE 7821
// exit ;
7819: GO 9379
// for i in tmp do
7821: LD_ADDR_VAR 0 6
7825: PUSH
7826: LD_VAR 0 8
7830: PUSH
7831: FOR_IN
7832: IFFALSE 9354
// begin points := [ 0 , 0 , 0 ] ;
7834: LD_ADDR_VAR 0 9
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: LD_INT 0
7844: PUSH
7845: LD_INT 0
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: ST_TO_ADDR
// bpoints := 1 ;
7853: LD_ADDR_VAR 0 10
7857: PUSH
7858: LD_INT 1
7860: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7861: LD_VAR 0 6
7865: PPUSH
7866: CALL_OW 247
7870: PUSH
7871: LD_INT 1
7873: DOUBLE
7874: EQUAL
7875: IFTRUE 7879
7877: GO 8457
7879: POP
// begin if GetClass ( i ) = 1 then
7880: LD_VAR 0 6
7884: PPUSH
7885: CALL_OW 257
7889: PUSH
7890: LD_INT 1
7892: EQUAL
7893: IFFALSE 7914
// points := [ 10 , 5 , 3 ] ;
7895: LD_ADDR_VAR 0 9
7899: PUSH
7900: LD_INT 10
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: LD_INT 3
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7914: LD_VAR 0 6
7918: PPUSH
7919: CALL_OW 257
7923: PUSH
7924: LD_INT 2
7926: PUSH
7927: LD_INT 3
7929: PUSH
7930: LD_INT 4
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: IN
7938: IFFALSE 7959
// points := [ 3 , 2 , 1 ] ;
7940: LD_ADDR_VAR 0 9
7944: PUSH
7945: LD_INT 3
7947: PUSH
7948: LD_INT 2
7950: PUSH
7951: LD_INT 1
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7959: LD_VAR 0 6
7963: PPUSH
7964: CALL_OW 257
7968: PUSH
7969: LD_INT 5
7971: EQUAL
7972: IFFALSE 7993
// points := [ 130 , 5 , 2 ] ;
7974: LD_ADDR_VAR 0 9
7978: PUSH
7979: LD_INT 130
7981: PUSH
7982: LD_INT 5
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7993: LD_VAR 0 6
7997: PPUSH
7998: CALL_OW 257
8002: PUSH
8003: LD_INT 8
8005: EQUAL
8006: IFFALSE 8027
// points := [ 35 , 35 , 30 ] ;
8008: LD_ADDR_VAR 0 9
8012: PUSH
8013: LD_INT 35
8015: PUSH
8016: LD_INT 35
8018: PUSH
8019: LD_INT 30
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8027: LD_VAR 0 6
8031: PPUSH
8032: CALL_OW 257
8036: PUSH
8037: LD_INT 9
8039: EQUAL
8040: IFFALSE 8061
// points := [ 20 , 55 , 40 ] ;
8042: LD_ADDR_VAR 0 9
8046: PUSH
8047: LD_INT 20
8049: PUSH
8050: LD_INT 55
8052: PUSH
8053: LD_INT 40
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8061: LD_VAR 0 6
8065: PPUSH
8066: CALL_OW 257
8070: PUSH
8071: LD_INT 12
8073: PUSH
8074: LD_INT 16
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: IN
8081: IFFALSE 8102
// points := [ 5 , 3 , 2 ] ;
8083: LD_ADDR_VAR 0 9
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: LD_INT 3
8093: PUSH
8094: LD_INT 2
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8102: LD_VAR 0 6
8106: PPUSH
8107: CALL_OW 257
8111: PUSH
8112: LD_INT 17
8114: EQUAL
8115: IFFALSE 8136
// points := [ 100 , 50 , 75 ] ;
8117: LD_ADDR_VAR 0 9
8121: PUSH
8122: LD_INT 100
8124: PUSH
8125: LD_INT 50
8127: PUSH
8128: LD_INT 75
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8136: LD_VAR 0 6
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 15
8148: EQUAL
8149: IFFALSE 8170
// points := [ 10 , 5 , 3 ] ;
8151: LD_ADDR_VAR 0 9
8155: PUSH
8156: LD_INT 10
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: LD_INT 3
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8170: LD_VAR 0 6
8174: PPUSH
8175: CALL_OW 257
8179: PUSH
8180: LD_INT 14
8182: EQUAL
8183: IFFALSE 8204
// points := [ 10 , 0 , 0 ] ;
8185: LD_ADDR_VAR 0 9
8189: PUSH
8190: LD_INT 10
8192: PUSH
8193: LD_INT 0
8195: PUSH
8196: LD_INT 0
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8204: LD_VAR 0 6
8208: PPUSH
8209: CALL_OW 257
8213: PUSH
8214: LD_INT 11
8216: EQUAL
8217: IFFALSE 8238
// points := [ 30 , 10 , 5 ] ;
8219: LD_ADDR_VAR 0 9
8223: PUSH
8224: LD_INT 30
8226: PUSH
8227: LD_INT 10
8229: PUSH
8230: LD_INT 5
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8238: LD_VAR 0 1
8242: PPUSH
8243: LD_INT 5
8245: PPUSH
8246: CALL_OW 321
8250: PUSH
8251: LD_INT 2
8253: EQUAL
8254: IFFALSE 8271
// bpoints := bpoints * 1.8 ;
8256: LD_ADDR_VAR 0 10
8260: PUSH
8261: LD_VAR 0 10
8265: PUSH
8266: LD_REAL  1.80000000000000E+0000
8269: MUL
8270: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8271: LD_VAR 0 6
8275: PPUSH
8276: CALL_OW 257
8280: PUSH
8281: LD_INT 1
8283: PUSH
8284: LD_INT 2
8286: PUSH
8287: LD_INT 3
8289: PUSH
8290: LD_INT 4
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: IN
8299: PUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: LD_INT 51
8307: PPUSH
8308: CALL_OW 321
8312: PUSH
8313: LD_INT 2
8315: EQUAL
8316: AND
8317: IFFALSE 8334
// bpoints := bpoints * 1.2 ;
8319: LD_ADDR_VAR 0 10
8323: PUSH
8324: LD_VAR 0 10
8328: PUSH
8329: LD_REAL  1.20000000000000E+0000
8332: MUL
8333: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 257
8343: PUSH
8344: LD_INT 5
8346: PUSH
8347: LD_INT 7
8349: PUSH
8350: LD_INT 9
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: IN
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: LD_INT 52
8366: PPUSH
8367: CALL_OW 321
8371: PUSH
8372: LD_INT 2
8374: EQUAL
8375: AND
8376: IFFALSE 8393
// bpoints := bpoints * 1.5 ;
8378: LD_ADDR_VAR 0 10
8382: PUSH
8383: LD_VAR 0 10
8387: PUSH
8388: LD_REAL  1.50000000000000E+0000
8391: MUL
8392: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8393: LD_VAR 0 1
8397: PPUSH
8398: LD_INT 66
8400: PPUSH
8401: CALL_OW 321
8405: PUSH
8406: LD_INT 2
8408: EQUAL
8409: IFFALSE 8426
// bpoints := bpoints * 1.1 ;
8411: LD_ADDR_VAR 0 10
8415: PUSH
8416: LD_VAR 0 10
8420: PUSH
8421: LD_REAL  1.10000000000000E+0000
8424: MUL
8425: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8426: LD_ADDR_VAR 0 10
8430: PUSH
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 6
8440: PPUSH
8441: LD_INT 1
8443: PPUSH
8444: CALL_OW 259
8448: PUSH
8449: LD_REAL  1.15000000000000E+0000
8452: MUL
8453: MUL
8454: ST_TO_ADDR
// end ; unit_vehicle :
8455: GO 9283
8457: LD_INT 2
8459: DOUBLE
8460: EQUAL
8461: IFTRUE 8465
8463: GO 9271
8465: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8466: LD_VAR 0 6
8470: PPUSH
8471: CALL_OW 264
8475: PUSH
8476: LD_INT 2
8478: PUSH
8479: LD_INT 42
8481: PUSH
8482: LD_INT 24
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: IN
8490: IFFALSE 8511
// points := [ 25 , 5 , 3 ] ;
8492: LD_ADDR_VAR 0 9
8496: PUSH
8497: LD_INT 25
8499: PUSH
8500: LD_INT 5
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8511: LD_VAR 0 6
8515: PPUSH
8516: CALL_OW 264
8520: PUSH
8521: LD_INT 4
8523: PUSH
8524: LD_INT 43
8526: PUSH
8527: LD_INT 25
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: IN
8535: IFFALSE 8556
// points := [ 40 , 15 , 5 ] ;
8537: LD_ADDR_VAR 0 9
8541: PUSH
8542: LD_INT 40
8544: PUSH
8545: LD_INT 15
8547: PUSH
8548: LD_INT 5
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8556: LD_VAR 0 6
8560: PPUSH
8561: CALL_OW 264
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: LD_INT 23
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: IN
8576: IFFALSE 8597
// points := [ 7 , 25 , 8 ] ;
8578: LD_ADDR_VAR 0 9
8582: PUSH
8583: LD_INT 7
8585: PUSH
8586: LD_INT 25
8588: PUSH
8589: LD_INT 8
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8597: LD_VAR 0 6
8601: PPUSH
8602: CALL_OW 264
8606: PUSH
8607: LD_INT 5
8609: PUSH
8610: LD_INT 27
8612: PUSH
8613: LD_INT 44
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: IN
8621: IFFALSE 8642
// points := [ 14 , 50 , 16 ] ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_INT 14
8630: PUSH
8631: LD_INT 50
8633: PUSH
8634: LD_INT 16
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8642: LD_VAR 0 6
8646: PPUSH
8647: CALL_OW 264
8651: PUSH
8652: LD_INT 6
8654: PUSH
8655: LD_INT 46
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: IN
8662: IFFALSE 8683
// points := [ 32 , 120 , 70 ] ;
8664: LD_ADDR_VAR 0 9
8668: PUSH
8669: LD_INT 32
8671: PUSH
8672: LD_INT 120
8674: PUSH
8675: LD_INT 70
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 264
8692: PUSH
8693: LD_INT 7
8695: PUSH
8696: LD_INT 28
8698: PUSH
8699: LD_INT 45
8701: PUSH
8702: LD_INT 92
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: IN
8711: IFFALSE 8732
// points := [ 35 , 20 , 45 ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 35
8720: PUSH
8721: LD_INT 20
8723: PUSH
8724: LD_INT 45
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8732: LD_VAR 0 6
8736: PPUSH
8737: CALL_OW 264
8741: PUSH
8742: LD_INT 47
8744: PUSH
8745: EMPTY
8746: LIST
8747: IN
8748: IFFALSE 8769
// points := [ 67 , 45 , 75 ] ;
8750: LD_ADDR_VAR 0 9
8754: PUSH
8755: LD_INT 67
8757: PUSH
8758: LD_INT 45
8760: PUSH
8761: LD_INT 75
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8769: LD_VAR 0 6
8773: PPUSH
8774: CALL_OW 264
8778: PUSH
8779: LD_INT 26
8781: PUSH
8782: EMPTY
8783: LIST
8784: IN
8785: IFFALSE 8806
// points := [ 120 , 30 , 80 ] ;
8787: LD_ADDR_VAR 0 9
8791: PUSH
8792: LD_INT 120
8794: PUSH
8795: LD_INT 30
8797: PUSH
8798: LD_INT 80
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 264
8815: PUSH
8816: LD_INT 22
8818: PUSH
8819: EMPTY
8820: LIST
8821: IN
8822: IFFALSE 8843
// points := [ 40 , 1 , 1 ] ;
8824: LD_ADDR_VAR 0 9
8828: PUSH
8829: LD_INT 40
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: LD_INT 1
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8843: LD_VAR 0 6
8847: PPUSH
8848: CALL_OW 264
8852: PUSH
8853: LD_INT 29
8855: PUSH
8856: EMPTY
8857: LIST
8858: IN
8859: IFFALSE 8880
// points := [ 70 , 200 , 400 ] ;
8861: LD_ADDR_VAR 0 9
8865: PUSH
8866: LD_INT 70
8868: PUSH
8869: LD_INT 200
8871: PUSH
8872: LD_INT 400
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8880: LD_VAR 0 6
8884: PPUSH
8885: CALL_OW 264
8889: PUSH
8890: LD_INT 14
8892: PUSH
8893: LD_INT 53
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: IN
8900: IFFALSE 8921
// points := [ 40 , 10 , 20 ] ;
8902: LD_ADDR_VAR 0 9
8906: PUSH
8907: LD_INT 40
8909: PUSH
8910: LD_INT 10
8912: PUSH
8913: LD_INT 20
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 264
8930: PUSH
8931: LD_INT 9
8933: PUSH
8934: EMPTY
8935: LIST
8936: IN
8937: IFFALSE 8958
// points := [ 5 , 70 , 20 ] ;
8939: LD_ADDR_VAR 0 9
8943: PUSH
8944: LD_INT 5
8946: PUSH
8947: LD_INT 70
8949: PUSH
8950: LD_INT 20
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8958: LD_VAR 0 6
8962: PPUSH
8963: CALL_OW 264
8967: PUSH
8968: LD_INT 10
8970: PUSH
8971: EMPTY
8972: LIST
8973: IN
8974: IFFALSE 8995
// points := [ 35 , 110 , 70 ] ;
8976: LD_ADDR_VAR 0 9
8980: PUSH
8981: LD_INT 35
8983: PUSH
8984: LD_INT 110
8986: PUSH
8987: LD_INT 70
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: LIST
8994: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8995: LD_VAR 0 6
8999: PPUSH
9000: CALL_OW 265
9004: PUSH
9005: LD_INT 25
9007: EQUAL
9008: IFFALSE 9029
// points := [ 80 , 65 , 100 ] ;
9010: LD_ADDR_VAR 0 9
9014: PUSH
9015: LD_INT 80
9017: PUSH
9018: LD_INT 65
9020: PUSH
9021: LD_INT 100
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9029: LD_VAR 0 6
9033: PPUSH
9034: CALL_OW 263
9038: PUSH
9039: LD_INT 1
9041: EQUAL
9042: IFFALSE 9077
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9044: LD_ADDR_VAR 0 10
9048: PUSH
9049: LD_VAR 0 10
9053: PUSH
9054: LD_VAR 0 6
9058: PPUSH
9059: CALL_OW 311
9063: PPUSH
9064: LD_INT 3
9066: PPUSH
9067: CALL_OW 259
9071: PUSH
9072: LD_INT 4
9074: MUL
9075: MUL
9076: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9077: LD_VAR 0 6
9081: PPUSH
9082: CALL_OW 263
9086: PUSH
9087: LD_INT 2
9089: EQUAL
9090: IFFALSE 9141
// begin j := IsControledBy ( i ) ;
9092: LD_ADDR_VAR 0 7
9096: PUSH
9097: LD_VAR 0 6
9101: PPUSH
9102: CALL_OW 312
9106: ST_TO_ADDR
// if j then
9107: LD_VAR 0 7
9111: IFFALSE 9141
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9113: LD_ADDR_VAR 0 10
9117: PUSH
9118: LD_VAR 0 10
9122: PUSH
9123: LD_VAR 0 7
9127: PPUSH
9128: LD_INT 3
9130: PPUSH
9131: CALL_OW 259
9135: PUSH
9136: LD_INT 3
9138: MUL
9139: MUL
9140: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9141: LD_VAR 0 6
9145: PPUSH
9146: CALL_OW 264
9150: PUSH
9151: LD_INT 5
9153: PUSH
9154: LD_INT 6
9156: PUSH
9157: LD_INT 46
9159: PUSH
9160: LD_INT 44
9162: PUSH
9163: LD_INT 47
9165: PUSH
9166: LD_INT 45
9168: PUSH
9169: LD_INT 28
9171: PUSH
9172: LD_INT 7
9174: PUSH
9175: LD_INT 27
9177: PUSH
9178: LD_INT 29
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: IN
9193: PUSH
9194: LD_VAR 0 1
9198: PPUSH
9199: LD_INT 52
9201: PPUSH
9202: CALL_OW 321
9206: PUSH
9207: LD_INT 2
9209: EQUAL
9210: AND
9211: IFFALSE 9228
// bpoints := bpoints * 1.2 ;
9213: LD_ADDR_VAR 0 10
9217: PUSH
9218: LD_VAR 0 10
9222: PUSH
9223: LD_REAL  1.20000000000000E+0000
9226: MUL
9227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9228: LD_VAR 0 6
9232: PPUSH
9233: CALL_OW 264
9237: PUSH
9238: LD_INT 6
9240: PUSH
9241: LD_INT 46
9243: PUSH
9244: LD_INT 47
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: IN
9252: IFFALSE 9269
// bpoints := bpoints * 1.2 ;
9254: LD_ADDR_VAR 0 10
9258: PUSH
9259: LD_VAR 0 10
9263: PUSH
9264: LD_REAL  1.20000000000000E+0000
9267: MUL
9268: ST_TO_ADDR
// end ; unit_building :
9269: GO 9283
9271: LD_INT 3
9273: DOUBLE
9274: EQUAL
9275: IFTRUE 9279
9277: GO 9282
9279: POP
// ; end ;
9280: GO 9283
9282: POP
// for j = 1 to 3 do
9283: LD_ADDR_VAR 0 7
9287: PUSH
9288: DOUBLE
9289: LD_INT 1
9291: DEC
9292: ST_TO_ADDR
9293: LD_INT 3
9295: PUSH
9296: FOR_TO
9297: IFFALSE 9350
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9299: LD_ADDR_VAR 0 5
9303: PUSH
9304: LD_VAR 0 5
9308: PPUSH
9309: LD_VAR 0 7
9313: PPUSH
9314: LD_VAR 0 5
9318: PUSH
9319: LD_VAR 0 7
9323: ARRAY
9324: PUSH
9325: LD_VAR 0 9
9329: PUSH
9330: LD_VAR 0 7
9334: ARRAY
9335: PUSH
9336: LD_VAR 0 10
9340: MUL
9341: PLUS
9342: PPUSH
9343: CALL_OW 1
9347: ST_TO_ADDR
9348: GO 9296
9350: POP
9351: POP
// end ;
9352: GO 7831
9354: POP
9355: POP
// result := Replace ( result , 4 , tmp ) ;
9356: LD_ADDR_VAR 0 5
9360: PUSH
9361: LD_VAR 0 5
9365: PPUSH
9366: LD_INT 4
9368: PPUSH
9369: LD_VAR 0 8
9373: PPUSH
9374: CALL_OW 1
9378: ST_TO_ADDR
// end ;
9379: LD_VAR 0 5
9383: RET
// export function DangerAtRange ( unit , range ) ; begin
9384: LD_INT 0
9386: PPUSH
// if not unit then
9387: LD_VAR 0 1
9391: NOT
9392: IFFALSE 9396
// exit ;
9394: GO 9441
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9396: LD_ADDR_VAR 0 3
9400: PUSH
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL_OW 255
9410: PPUSH
9411: LD_VAR 0 1
9415: PPUSH
9416: CALL_OW 250
9420: PPUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 251
9430: PPUSH
9431: LD_VAR 0 2
9435: PPUSH
9436: CALL 7683 0 4
9440: ST_TO_ADDR
// end ;
9441: LD_VAR 0 3
9445: RET
// export function DangerInArea ( side , area ) ; begin
9446: LD_INT 0
9448: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9449: LD_ADDR_VAR 0 3
9453: PUSH
9454: LD_VAR 0 2
9458: PPUSH
9459: LD_INT 81
9461: PUSH
9462: LD_VAR 0 1
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PPUSH
9471: CALL_OW 70
9475: ST_TO_ADDR
// end ;
9476: LD_VAR 0 3
9480: RET
// export function IsExtension ( b ) ; begin
9481: LD_INT 0
9483: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9484: LD_ADDR_VAR 0 2
9488: PUSH
9489: LD_VAR 0 1
9493: PUSH
9494: LD_INT 23
9496: PUSH
9497: LD_INT 20
9499: PUSH
9500: LD_INT 22
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: LD_INT 24
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 19
9514: PUSH
9515: LD_INT 16
9517: PUSH
9518: LD_INT 25
9520: PUSH
9521: LD_INT 18
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: IN
9536: ST_TO_ADDR
// end ;
9537: LD_VAR 0 2
9541: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
// result := [ ] ;
9547: LD_ADDR_VAR 0 4
9551: PUSH
9552: EMPTY
9553: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9554: LD_ADDR_VAR 0 5
9558: PUSH
9559: LD_VAR 0 2
9563: PPUSH
9564: LD_INT 21
9566: PUSH
9567: LD_INT 3
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PPUSH
9574: CALL_OW 70
9578: ST_TO_ADDR
// if not tmp then
9579: LD_VAR 0 5
9583: NOT
9584: IFFALSE 9588
// exit ;
9586: GO 9652
// if checkLink then
9588: LD_VAR 0 3
9592: IFFALSE 9642
// begin for i in tmp do
9594: LD_ADDR_VAR 0 6
9598: PUSH
9599: LD_VAR 0 5
9603: PUSH
9604: FOR_IN
9605: IFFALSE 9640
// if GetBase ( i ) <> base then
9607: LD_VAR 0 6
9611: PPUSH
9612: CALL_OW 274
9616: PUSH
9617: LD_VAR 0 1
9621: NONEQUAL
9622: IFFALSE 9638
// ComLinkToBase ( base , i ) ;
9624: LD_VAR 0 1
9628: PPUSH
9629: LD_VAR 0 6
9633: PPUSH
9634: CALL_OW 169
9638: GO 9604
9640: POP
9641: POP
// end ; result := tmp ;
9642: LD_ADDR_VAR 0 4
9646: PUSH
9647: LD_VAR 0 5
9651: ST_TO_ADDR
// end ;
9652: LD_VAR 0 4
9656: RET
// export function ComComplete ( units , b ) ; var i ; begin
9657: LD_INT 0
9659: PPUSH
9660: PPUSH
// if not units then
9661: LD_VAR 0 1
9665: NOT
9666: IFFALSE 9670
// exit ;
9668: GO 9760
// for i in units do
9670: LD_ADDR_VAR 0 4
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: FOR_IN
9681: IFFALSE 9758
// if BuildingStatus ( b ) = bs_build then
9683: LD_VAR 0 2
9687: PPUSH
9688: CALL_OW 461
9692: PUSH
9693: LD_INT 1
9695: EQUAL
9696: IFFALSE 9756
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9698: LD_VAR 0 4
9702: PPUSH
9703: LD_STRING h
9705: PUSH
9706: LD_VAR 0 2
9710: PPUSH
9711: CALL_OW 250
9715: PUSH
9716: LD_VAR 0 2
9720: PPUSH
9721: CALL_OW 251
9725: PUSH
9726: LD_VAR 0 2
9730: PUSH
9731: LD_INT 0
9733: PUSH
9734: LD_INT 0
9736: PUSH
9737: LD_INT 0
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: PPUSH
9752: CALL_OW 446
9756: GO 9680
9758: POP
9759: POP
// end ;
9760: LD_VAR 0 3
9764: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9765: LD_INT 0
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9773: LD_VAR 0 1
9777: NOT
9778: PUSH
9779: LD_VAR 0 1
9783: PPUSH
9784: CALL_OW 263
9788: PUSH
9789: LD_INT 2
9791: NONEQUAL
9792: OR
9793: IFFALSE 9797
// exit ;
9795: GO 10113
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9797: LD_ADDR_VAR 0 6
9801: PUSH
9802: LD_INT 22
9804: PUSH
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 255
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: LD_INT 30
9824: PUSH
9825: LD_INT 36
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 34
9834: PUSH
9835: LD_INT 31
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 69
9855: ST_TO_ADDR
// if not tmp then
9856: LD_VAR 0 6
9860: NOT
9861: IFFALSE 9865
// exit ;
9863: GO 10113
// result := [ ] ;
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: EMPTY
9871: ST_TO_ADDR
// for i in tmp do
9872: LD_ADDR_VAR 0 3
9876: PUSH
9877: LD_VAR 0 6
9881: PUSH
9882: FOR_IN
9883: IFFALSE 9954
// begin t := UnitsInside ( i ) ;
9885: LD_ADDR_VAR 0 4
9889: PUSH
9890: LD_VAR 0 3
9894: PPUSH
9895: CALL_OW 313
9899: ST_TO_ADDR
// if t then
9900: LD_VAR 0 4
9904: IFFALSE 9952
// for j in t do
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_VAR 0 4
9915: PUSH
9916: FOR_IN
9917: IFFALSE 9950
// result := Replace ( result , result + 1 , j ) ;
9919: LD_ADDR_VAR 0 2
9923: PUSH
9924: LD_VAR 0 2
9928: PPUSH
9929: LD_VAR 0 2
9933: PUSH
9934: LD_INT 1
9936: PLUS
9937: PPUSH
9938: LD_VAR 0 7
9942: PPUSH
9943: CALL_OW 1
9947: ST_TO_ADDR
9948: GO 9916
9950: POP
9951: POP
// end ;
9952: GO 9882
9954: POP
9955: POP
// if not result then
9956: LD_VAR 0 2
9960: NOT
9961: IFFALSE 9965
// exit ;
9963: GO 10113
// mech := result [ 1 ] ;
9965: LD_ADDR_VAR 0 5
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: LD_INT 1
9977: ARRAY
9978: ST_TO_ADDR
// if result > 1 then
9979: LD_VAR 0 2
9983: PUSH
9984: LD_INT 1
9986: GREATER
9987: IFFALSE 10099
// begin for i = 2 to result do
9989: LD_ADDR_VAR 0 3
9993: PUSH
9994: DOUBLE
9995: LD_INT 2
9997: DEC
9998: ST_TO_ADDR
9999: LD_VAR 0 2
10003: PUSH
10004: FOR_TO
10005: IFFALSE 10097
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10007: LD_ADDR_VAR 0 4
10011: PUSH
10012: LD_VAR 0 2
10016: PUSH
10017: LD_VAR 0 3
10021: ARRAY
10022: PPUSH
10023: LD_INT 3
10025: PPUSH
10026: CALL_OW 259
10030: PUSH
10031: LD_VAR 0 2
10035: PUSH
10036: LD_VAR 0 3
10040: ARRAY
10041: PPUSH
10042: CALL_OW 432
10046: MINUS
10047: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10048: LD_VAR 0 4
10052: PUSH
10053: LD_VAR 0 5
10057: PPUSH
10058: LD_INT 3
10060: PPUSH
10061: CALL_OW 259
10065: PUSH
10066: LD_VAR 0 5
10070: PPUSH
10071: CALL_OW 432
10075: MINUS
10076: GREATEREQUAL
10077: IFFALSE 10095
// mech := result [ i ] ;
10079: LD_ADDR_VAR 0 5
10083: PUSH
10084: LD_VAR 0 2
10088: PUSH
10089: LD_VAR 0 3
10093: ARRAY
10094: ST_TO_ADDR
// end ;
10095: GO 10004
10097: POP
10098: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10099: LD_VAR 0 1
10103: PPUSH
10104: LD_VAR 0 5
10108: PPUSH
10109: CALL_OW 135
// end ;
10113: LD_VAR 0 2
10117: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10118: LD_INT 0
10120: PPUSH
10121: PPUSH
10122: PPUSH
10123: PPUSH
10124: PPUSH
10125: PPUSH
10126: PPUSH
10127: PPUSH
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
10132: PPUSH
// result := [ ] ;
10133: LD_ADDR_VAR 0 7
10137: PUSH
10138: EMPTY
10139: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL_OW 266
10149: PUSH
10150: LD_INT 0
10152: PUSH
10153: LD_INT 1
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: IN
10160: NOT
10161: IFFALSE 10165
// exit ;
10163: GO 11799
// if name then
10165: LD_VAR 0 3
10169: IFFALSE 10185
// SetBName ( base_dep , name ) ;
10171: LD_VAR 0 1
10175: PPUSH
10176: LD_VAR 0 3
10180: PPUSH
10181: CALL_OW 500
// base := GetBase ( base_dep ) ;
10185: LD_ADDR_VAR 0 15
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: CALL_OW 274
10199: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10200: LD_ADDR_VAR 0 16
10204: PUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 255
10214: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10215: LD_ADDR_VAR 0 17
10219: PUSH
10220: LD_VAR 0 1
10224: PPUSH
10225: CALL_OW 248
10229: ST_TO_ADDR
// if sources then
10230: LD_VAR 0 5
10234: IFFALSE 10281
// for i = 1 to 3 do
10236: LD_ADDR_VAR 0 8
10240: PUSH
10241: DOUBLE
10242: LD_INT 1
10244: DEC
10245: ST_TO_ADDR
10246: LD_INT 3
10248: PUSH
10249: FOR_TO
10250: IFFALSE 10279
// AddResourceType ( base , i , sources [ i ] ) ;
10252: LD_VAR 0 15
10256: PPUSH
10257: LD_VAR 0 8
10261: PPUSH
10262: LD_VAR 0 5
10266: PUSH
10267: LD_VAR 0 8
10271: ARRAY
10272: PPUSH
10273: CALL_OW 276
10277: GO 10249
10279: POP
10280: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10281: LD_ADDR_VAR 0 18
10285: PUSH
10286: LD_VAR 0 15
10290: PPUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL 9542 0 3
10303: ST_TO_ADDR
// InitHc ;
10304: CALL_OW 19
// InitUc ;
10308: CALL_OW 18
// uc_side := side ;
10312: LD_ADDR_OWVAR 20
10316: PUSH
10317: LD_VAR 0 16
10321: ST_TO_ADDR
// uc_nation := nation ;
10322: LD_ADDR_OWVAR 21
10326: PUSH
10327: LD_VAR 0 17
10331: ST_TO_ADDR
// if buildings then
10332: LD_VAR 0 18
10336: IFFALSE 11658
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10338: LD_ADDR_VAR 0 19
10342: PUSH
10343: LD_VAR 0 18
10347: PPUSH
10348: LD_INT 2
10350: PUSH
10351: LD_INT 30
10353: PUSH
10354: LD_INT 29
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 30
10363: PUSH
10364: LD_INT 30
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 72
10380: ST_TO_ADDR
// if tmp then
10381: LD_VAR 0 19
10385: IFFALSE 10433
// for i in tmp do
10387: LD_ADDR_VAR 0 8
10391: PUSH
10392: LD_VAR 0 19
10396: PUSH
10397: FOR_IN
10398: IFFALSE 10431
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10400: LD_VAR 0 8
10404: PPUSH
10405: CALL_OW 250
10409: PPUSH
10410: LD_VAR 0 8
10414: PPUSH
10415: CALL_OW 251
10419: PPUSH
10420: LD_VAR 0 16
10424: PPUSH
10425: CALL_OW 441
10429: GO 10397
10431: POP
10432: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10433: LD_VAR 0 18
10437: PPUSH
10438: LD_INT 2
10440: PUSH
10441: LD_INT 30
10443: PUSH
10444: LD_INT 32
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 30
10453: PUSH
10454: LD_INT 33
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 72
10470: IFFALSE 10558
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10472: LD_ADDR_VAR 0 8
10476: PUSH
10477: LD_VAR 0 18
10481: PPUSH
10482: LD_INT 2
10484: PUSH
10485: LD_INT 30
10487: PUSH
10488: LD_INT 32
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 30
10497: PUSH
10498: LD_INT 33
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: PPUSH
10510: CALL_OW 72
10514: PUSH
10515: FOR_IN
10516: IFFALSE 10556
// begin if not GetBWeapon ( i ) then
10518: LD_VAR 0 8
10522: PPUSH
10523: CALL_OW 269
10527: NOT
10528: IFFALSE 10554
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10530: LD_VAR 0 8
10534: PPUSH
10535: LD_VAR 0 8
10539: PPUSH
10540: LD_VAR 0 2
10544: PPUSH
10545: CALL 11804 0 2
10549: PPUSH
10550: CALL_OW 431
// end ;
10554: GO 10515
10556: POP
10557: POP
// end ; for i = 1 to personel do
10558: LD_ADDR_VAR 0 8
10562: PUSH
10563: DOUBLE
10564: LD_INT 1
10566: DEC
10567: ST_TO_ADDR
10568: LD_VAR 0 6
10572: PUSH
10573: FOR_TO
10574: IFFALSE 11638
// begin if i > 4 then
10576: LD_VAR 0 8
10580: PUSH
10581: LD_INT 4
10583: GREATER
10584: IFFALSE 10588
// break ;
10586: GO 11638
// case i of 1 :
10588: LD_VAR 0 8
10592: PUSH
10593: LD_INT 1
10595: DOUBLE
10596: EQUAL
10597: IFTRUE 10601
10599: GO 10681
10601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10602: LD_ADDR_VAR 0 12
10606: PUSH
10607: LD_VAR 0 18
10611: PPUSH
10612: LD_INT 22
10614: PUSH
10615: LD_VAR 0 16
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 58
10626: PUSH
10627: EMPTY
10628: LIST
10629: PUSH
10630: LD_INT 2
10632: PUSH
10633: LD_INT 30
10635: PUSH
10636: LD_INT 32
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 30
10645: PUSH
10646: LD_INT 4
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 30
10655: PUSH
10656: LD_INT 5
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 72
10678: ST_TO_ADDR
10679: GO 10903
10681: LD_INT 2
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10751
10689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10690: LD_ADDR_VAR 0 12
10694: PUSH
10695: LD_VAR 0 18
10699: PPUSH
10700: LD_INT 22
10702: PUSH
10703: LD_VAR 0 16
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: LD_INT 30
10717: PUSH
10718: LD_INT 0
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 30
10727: PUSH
10728: LD_INT 1
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PPUSH
10744: CALL_OW 72
10748: ST_TO_ADDR
10749: GO 10903
10751: LD_INT 3
10753: DOUBLE
10754: EQUAL
10755: IFTRUE 10759
10757: GO 10821
10759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10760: LD_ADDR_VAR 0 12
10764: PUSH
10765: LD_VAR 0 18
10769: PPUSH
10770: LD_INT 22
10772: PUSH
10773: LD_VAR 0 16
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 2
10784: PUSH
10785: LD_INT 30
10787: PUSH
10788: LD_INT 2
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 3
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 72
10818: ST_TO_ADDR
10819: GO 10903
10821: LD_INT 4
10823: DOUBLE
10824: EQUAL
10825: IFTRUE 10829
10827: GO 10902
10829: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10830: LD_ADDR_VAR 0 12
10834: PUSH
10835: LD_VAR 0 18
10839: PPUSH
10840: LD_INT 22
10842: PUSH
10843: LD_VAR 0 16
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: LD_INT 30
10857: PUSH
10858: LD_INT 6
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 30
10867: PUSH
10868: LD_INT 7
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 30
10877: PUSH
10878: LD_INT 8
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 72
10899: ST_TO_ADDR
10900: GO 10903
10902: POP
// if i = 1 then
10903: LD_VAR 0 8
10907: PUSH
10908: LD_INT 1
10910: EQUAL
10911: IFFALSE 11022
// begin tmp := [ ] ;
10913: LD_ADDR_VAR 0 19
10917: PUSH
10918: EMPTY
10919: ST_TO_ADDR
// for j in f do
10920: LD_ADDR_VAR 0 9
10924: PUSH
10925: LD_VAR 0 12
10929: PUSH
10930: FOR_IN
10931: IFFALSE 11004
// if GetBType ( j ) = b_bunker then
10933: LD_VAR 0 9
10937: PPUSH
10938: CALL_OW 266
10942: PUSH
10943: LD_INT 32
10945: EQUAL
10946: IFFALSE 10973
// tmp := Insert ( tmp , 1 , j ) else
10948: LD_ADDR_VAR 0 19
10952: PUSH
10953: LD_VAR 0 19
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: LD_VAR 0 9
10965: PPUSH
10966: CALL_OW 2
10970: ST_TO_ADDR
10971: GO 11002
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10973: LD_ADDR_VAR 0 19
10977: PUSH
10978: LD_VAR 0 19
10982: PPUSH
10983: LD_VAR 0 19
10987: PUSH
10988: LD_INT 1
10990: PLUS
10991: PPUSH
10992: LD_VAR 0 9
10996: PPUSH
10997: CALL_OW 2
11001: ST_TO_ADDR
11002: GO 10930
11004: POP
11005: POP
// if tmp then
11006: LD_VAR 0 19
11010: IFFALSE 11022
// f := tmp ;
11012: LD_ADDR_VAR 0 12
11016: PUSH
11017: LD_VAR 0 19
11021: ST_TO_ADDR
// end ; x := personel [ i ] ;
11022: LD_ADDR_VAR 0 13
11026: PUSH
11027: LD_VAR 0 6
11031: PUSH
11032: LD_VAR 0 8
11036: ARRAY
11037: ST_TO_ADDR
// if x = - 1 then
11038: LD_VAR 0 13
11042: PUSH
11043: LD_INT 1
11045: NEG
11046: EQUAL
11047: IFFALSE 11256
// begin for j in f do
11049: LD_ADDR_VAR 0 9
11053: PUSH
11054: LD_VAR 0 12
11058: PUSH
11059: FOR_IN
11060: IFFALSE 11252
// repeat InitHc ;
11062: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11066: LD_VAR 0 9
11070: PPUSH
11071: CALL_OW 266
11075: PUSH
11076: LD_INT 5
11078: EQUAL
11079: IFFALSE 11149
// begin if UnitsInside ( j ) < 3 then
11081: LD_VAR 0 9
11085: PPUSH
11086: CALL_OW 313
11090: PUSH
11091: LD_INT 3
11093: LESS
11094: IFFALSE 11130
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11096: LD_INT 0
11098: PPUSH
11099: LD_INT 5
11101: PUSH
11102: LD_INT 8
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: LD_VAR 0 17
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 4
11123: PPUSH
11124: CALL_OW 380
11128: GO 11147
// PrepareHuman ( false , i , skill ) ;
11130: LD_INT 0
11132: PPUSH
11133: LD_VAR 0 8
11137: PPUSH
11138: LD_VAR 0 4
11142: PPUSH
11143: CALL_OW 380
// end else
11147: GO 11166
// PrepareHuman ( false , i , skill ) ;
11149: LD_INT 0
11151: PPUSH
11152: LD_VAR 0 8
11156: PPUSH
11157: LD_VAR 0 4
11161: PPUSH
11162: CALL_OW 380
// un := CreateHuman ;
11166: LD_ADDR_VAR 0 14
11170: PUSH
11171: CALL_OW 44
11175: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11176: LD_ADDR_VAR 0 7
11180: PUSH
11181: LD_VAR 0 7
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: LD_VAR 0 14
11193: PPUSH
11194: CALL_OW 2
11198: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11199: LD_VAR 0 14
11203: PPUSH
11204: LD_VAR 0 9
11208: PPUSH
11209: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11213: LD_VAR 0 9
11217: PPUSH
11218: CALL_OW 313
11222: PUSH
11223: LD_INT 6
11225: EQUAL
11226: PUSH
11227: LD_VAR 0 9
11231: PPUSH
11232: CALL_OW 266
11236: PUSH
11237: LD_INT 32
11239: PUSH
11240: LD_INT 31
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: IN
11247: OR
11248: IFFALSE 11062
11250: GO 11059
11252: POP
11253: POP
// end else
11254: GO 11636
// for j = 1 to x do
11256: LD_ADDR_VAR 0 9
11260: PUSH
11261: DOUBLE
11262: LD_INT 1
11264: DEC
11265: ST_TO_ADDR
11266: LD_VAR 0 13
11270: PUSH
11271: FOR_TO
11272: IFFALSE 11634
// begin InitHc ;
11274: CALL_OW 19
// if not f then
11278: LD_VAR 0 12
11282: NOT
11283: IFFALSE 11372
// begin PrepareHuman ( false , i , skill ) ;
11285: LD_INT 0
11287: PPUSH
11288: LD_VAR 0 8
11292: PPUSH
11293: LD_VAR 0 4
11297: PPUSH
11298: CALL_OW 380
// un := CreateHuman ;
11302: LD_ADDR_VAR 0 14
11306: PUSH
11307: CALL_OW 44
11311: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11312: LD_ADDR_VAR 0 7
11316: PUSH
11317: LD_VAR 0 7
11321: PPUSH
11322: LD_INT 1
11324: PPUSH
11325: LD_VAR 0 14
11329: PPUSH
11330: CALL_OW 2
11334: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11335: LD_VAR 0 14
11339: PPUSH
11340: LD_VAR 0 1
11344: PPUSH
11345: CALL_OW 250
11349: PPUSH
11350: LD_VAR 0 1
11354: PPUSH
11355: CALL_OW 251
11359: PPUSH
11360: LD_INT 10
11362: PPUSH
11363: LD_INT 0
11365: PPUSH
11366: CALL_OW 50
// continue ;
11370: GO 11271
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11372: LD_VAR 0 12
11376: PUSH
11377: LD_INT 1
11379: ARRAY
11380: PPUSH
11381: CALL_OW 313
11385: PUSH
11386: LD_VAR 0 12
11390: PUSH
11391: LD_INT 1
11393: ARRAY
11394: PPUSH
11395: CALL_OW 266
11399: PUSH
11400: LD_INT 32
11402: PUSH
11403: LD_INT 31
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: IN
11410: AND
11411: PUSH
11412: LD_VAR 0 12
11416: PUSH
11417: LD_INT 1
11419: ARRAY
11420: PPUSH
11421: CALL_OW 313
11425: PUSH
11426: LD_INT 6
11428: EQUAL
11429: OR
11430: IFFALSE 11450
// f := Delete ( f , 1 ) ;
11432: LD_ADDR_VAR 0 12
11436: PUSH
11437: LD_VAR 0 12
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 3
11449: ST_TO_ADDR
// if not f then
11450: LD_VAR 0 12
11454: NOT
11455: IFFALSE 11473
// begin x := x + 2 ;
11457: LD_ADDR_VAR 0 13
11461: PUSH
11462: LD_VAR 0 13
11466: PUSH
11467: LD_INT 2
11469: PLUS
11470: ST_TO_ADDR
// continue ;
11471: GO 11271
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11473: LD_VAR 0 12
11477: PUSH
11478: LD_INT 1
11480: ARRAY
11481: PPUSH
11482: CALL_OW 266
11486: PUSH
11487: LD_INT 5
11489: EQUAL
11490: IFFALSE 11564
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11492: LD_VAR 0 12
11496: PUSH
11497: LD_INT 1
11499: ARRAY
11500: PPUSH
11501: CALL_OW 313
11505: PUSH
11506: LD_INT 3
11508: LESS
11509: IFFALSE 11545
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11511: LD_INT 0
11513: PPUSH
11514: LD_INT 5
11516: PUSH
11517: LD_INT 8
11519: PUSH
11520: LD_INT 9
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_VAR 0 17
11532: ARRAY
11533: PPUSH
11534: LD_VAR 0 4
11538: PPUSH
11539: CALL_OW 380
11543: GO 11562
// PrepareHuman ( false , i , skill ) ;
11545: LD_INT 0
11547: PPUSH
11548: LD_VAR 0 8
11552: PPUSH
11553: LD_VAR 0 4
11557: PPUSH
11558: CALL_OW 380
// end else
11562: GO 11581
// PrepareHuman ( false , i , skill ) ;
11564: LD_INT 0
11566: PPUSH
11567: LD_VAR 0 8
11571: PPUSH
11572: LD_VAR 0 4
11576: PPUSH
11577: CALL_OW 380
// un := CreateHuman ;
11581: LD_ADDR_VAR 0 14
11585: PUSH
11586: CALL_OW 44
11590: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11591: LD_ADDR_VAR 0 7
11595: PUSH
11596: LD_VAR 0 7
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: LD_VAR 0 14
11608: PPUSH
11609: CALL_OW 2
11613: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11614: LD_VAR 0 14
11618: PPUSH
11619: LD_VAR 0 12
11623: PUSH
11624: LD_INT 1
11626: ARRAY
11627: PPUSH
11628: CALL_OW 52
// end ;
11632: GO 11271
11634: POP
11635: POP
// end ;
11636: GO 10573
11638: POP
11639: POP
// result := result ^ buildings ;
11640: LD_ADDR_VAR 0 7
11644: PUSH
11645: LD_VAR 0 7
11649: PUSH
11650: LD_VAR 0 18
11654: ADD
11655: ST_TO_ADDR
// end else
11656: GO 11799
// begin for i = 1 to personel do
11658: LD_ADDR_VAR 0 8
11662: PUSH
11663: DOUBLE
11664: LD_INT 1
11666: DEC
11667: ST_TO_ADDR
11668: LD_VAR 0 6
11672: PUSH
11673: FOR_TO
11674: IFFALSE 11797
// begin if i > 4 then
11676: LD_VAR 0 8
11680: PUSH
11681: LD_INT 4
11683: GREATER
11684: IFFALSE 11688
// break ;
11686: GO 11797
// x := personel [ i ] ;
11688: LD_ADDR_VAR 0 13
11692: PUSH
11693: LD_VAR 0 6
11697: PUSH
11698: LD_VAR 0 8
11702: ARRAY
11703: ST_TO_ADDR
// if x = - 1 then
11704: LD_VAR 0 13
11708: PUSH
11709: LD_INT 1
11711: NEG
11712: EQUAL
11713: IFFALSE 11717
// continue ;
11715: GO 11673
// PrepareHuman ( false , i , skill ) ;
11717: LD_INT 0
11719: PPUSH
11720: LD_VAR 0 8
11724: PPUSH
11725: LD_VAR 0 4
11729: PPUSH
11730: CALL_OW 380
// un := CreateHuman ;
11734: LD_ADDR_VAR 0 14
11738: PUSH
11739: CALL_OW 44
11743: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11744: LD_VAR 0 14
11748: PPUSH
11749: LD_VAR 0 1
11753: PPUSH
11754: CALL_OW 250
11758: PPUSH
11759: LD_VAR 0 1
11763: PPUSH
11764: CALL_OW 251
11768: PPUSH
11769: LD_INT 10
11771: PPUSH
11772: LD_INT 0
11774: PPUSH
11775: CALL_OW 50
// result := result ^ un ;
11779: LD_ADDR_VAR 0 7
11783: PUSH
11784: LD_VAR 0 7
11788: PUSH
11789: LD_VAR 0 14
11793: ADD
11794: ST_TO_ADDR
// end ;
11795: GO 11673
11797: POP
11798: POP
// end ; end ;
11799: LD_VAR 0 7
11803: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11804: LD_INT 0
11806: PPUSH
11807: PPUSH
11808: PPUSH
11809: PPUSH
11810: PPUSH
11811: PPUSH
11812: PPUSH
11813: PPUSH
11814: PPUSH
11815: PPUSH
11816: PPUSH
11817: PPUSH
11818: PPUSH
11819: PPUSH
11820: PPUSH
11821: PPUSH
// result := false ;
11822: LD_ADDR_VAR 0 3
11826: PUSH
11827: LD_INT 0
11829: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11830: LD_VAR 0 1
11834: NOT
11835: PUSH
11836: LD_VAR 0 1
11840: PPUSH
11841: CALL_OW 266
11845: PUSH
11846: LD_INT 32
11848: PUSH
11849: LD_INT 33
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: IN
11856: NOT
11857: OR
11858: IFFALSE 11862
// exit ;
11860: GO 12971
// nat := GetNation ( tower ) ;
11862: LD_ADDR_VAR 0 12
11866: PUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 248
11876: ST_TO_ADDR
// side := GetSide ( tower ) ;
11877: LD_ADDR_VAR 0 16
11881: PUSH
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 255
11891: ST_TO_ADDR
// x := GetX ( tower ) ;
11892: LD_ADDR_VAR 0 10
11896: PUSH
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 250
11906: ST_TO_ADDR
// y := GetY ( tower ) ;
11907: LD_ADDR_VAR 0 11
11911: PUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: CALL_OW 251
11921: ST_TO_ADDR
// if not x or not y then
11922: LD_VAR 0 10
11926: NOT
11927: PUSH
11928: LD_VAR 0 11
11932: NOT
11933: OR
11934: IFFALSE 11938
// exit ;
11936: GO 12971
// weapon := 0 ;
11938: LD_ADDR_VAR 0 18
11942: PUSH
11943: LD_INT 0
11945: ST_TO_ADDR
// fac_list := [ ] ;
11946: LD_ADDR_VAR 0 17
11950: PUSH
11951: EMPTY
11952: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11953: LD_ADDR_VAR 0 6
11957: PUSH
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL_OW 274
11967: PPUSH
11968: LD_VAR 0 2
11972: PPUSH
11973: LD_INT 0
11975: PPUSH
11976: CALL 9542 0 3
11980: PPUSH
11981: LD_INT 30
11983: PUSH
11984: LD_INT 3
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 72
11995: ST_TO_ADDR
// if not factories then
11996: LD_VAR 0 6
12000: NOT
12001: IFFALSE 12005
// exit ;
12003: GO 12971
// for i in factories do
12005: LD_ADDR_VAR 0 8
12009: PUSH
12010: LD_VAR 0 6
12014: PUSH
12015: FOR_IN
12016: IFFALSE 12041
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12018: LD_ADDR_VAR 0 17
12022: PUSH
12023: LD_VAR 0 17
12027: PUSH
12028: LD_VAR 0 8
12032: PPUSH
12033: CALL_OW 478
12037: UNION
12038: ST_TO_ADDR
12039: GO 12015
12041: POP
12042: POP
// if not fac_list then
12043: LD_VAR 0 17
12047: NOT
12048: IFFALSE 12052
// exit ;
12050: GO 12971
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12052: LD_ADDR_VAR 0 5
12056: PUSH
12057: LD_INT 4
12059: PUSH
12060: LD_INT 5
12062: PUSH
12063: LD_INT 9
12065: PUSH
12066: LD_INT 10
12068: PUSH
12069: LD_INT 6
12071: PUSH
12072: LD_INT 7
12074: PUSH
12075: LD_INT 11
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 27
12089: PUSH
12090: LD_INT 28
12092: PUSH
12093: LD_INT 26
12095: PUSH
12096: LD_INT 30
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 43
12107: PUSH
12108: LD_INT 44
12110: PUSH
12111: LD_INT 46
12113: PUSH
12114: LD_INT 45
12116: PUSH
12117: LD_INT 47
12119: PUSH
12120: LD_INT 49
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: LD_VAR 0 12
12140: ARRAY
12141: ST_TO_ADDR
// list := list isect fac_list ;
12142: LD_ADDR_VAR 0 5
12146: PUSH
12147: LD_VAR 0 5
12151: PUSH
12152: LD_VAR 0 17
12156: ISECT
12157: ST_TO_ADDR
// if not list then
12158: LD_VAR 0 5
12162: NOT
12163: IFFALSE 12167
// exit ;
12165: GO 12971
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12167: LD_VAR 0 12
12171: PUSH
12172: LD_INT 3
12174: EQUAL
12175: PUSH
12176: LD_INT 49
12178: PUSH
12179: LD_VAR 0 5
12183: IN
12184: AND
12185: PUSH
12186: LD_INT 31
12188: PPUSH
12189: LD_VAR 0 16
12193: PPUSH
12194: CALL_OW 321
12198: PUSH
12199: LD_INT 2
12201: EQUAL
12202: AND
12203: IFFALSE 12263
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12205: LD_INT 22
12207: PUSH
12208: LD_VAR 0 16
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 35
12219: PUSH
12220: LD_INT 49
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 91
12229: PUSH
12230: LD_VAR 0 1
12234: PUSH
12235: LD_INT 10
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: PPUSH
12248: CALL_OW 69
12252: NOT
12253: IFFALSE 12263
// weapon := ru_time_lapser ;
12255: LD_ADDR_VAR 0 18
12259: PUSH
12260: LD_INT 49
12262: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12263: LD_VAR 0 12
12267: PUSH
12268: LD_INT 1
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: IN
12278: PUSH
12279: LD_INT 11
12281: PUSH
12282: LD_VAR 0 5
12286: IN
12287: PUSH
12288: LD_INT 30
12290: PUSH
12291: LD_VAR 0 5
12295: IN
12296: OR
12297: AND
12298: PUSH
12299: LD_INT 6
12301: PPUSH
12302: LD_VAR 0 16
12306: PPUSH
12307: CALL_OW 321
12311: PUSH
12312: LD_INT 2
12314: EQUAL
12315: AND
12316: IFFALSE 12481
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12318: LD_INT 22
12320: PUSH
12321: LD_VAR 0 16
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: LD_INT 35
12335: PUSH
12336: LD_INT 11
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 35
12345: PUSH
12346: LD_INT 30
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 91
12360: PUSH
12361: LD_VAR 0 1
12365: PUSH
12366: LD_INT 18
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 69
12383: NOT
12384: PUSH
12385: LD_INT 22
12387: PUSH
12388: LD_VAR 0 16
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 30
12402: PUSH
12403: LD_INT 32
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 33
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 91
12427: PUSH
12428: LD_VAR 0 1
12432: PUSH
12433: LD_INT 12
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: PPUSH
12449: CALL_OW 69
12453: PUSH
12454: LD_INT 2
12456: GREATER
12457: AND
12458: IFFALSE 12481
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12460: LD_ADDR_VAR 0 18
12464: PUSH
12465: LD_INT 11
12467: PUSH
12468: LD_INT 30
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_VAR 0 12
12479: ARRAY
12480: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12481: LD_VAR 0 18
12485: NOT
12486: PUSH
12487: LD_INT 40
12489: PPUSH
12490: LD_VAR 0 16
12494: PPUSH
12495: CALL_OW 321
12499: PUSH
12500: LD_INT 2
12502: EQUAL
12503: AND
12504: PUSH
12505: LD_INT 7
12507: PUSH
12508: LD_VAR 0 5
12512: IN
12513: PUSH
12514: LD_INT 28
12516: PUSH
12517: LD_VAR 0 5
12521: IN
12522: OR
12523: PUSH
12524: LD_INT 45
12526: PUSH
12527: LD_VAR 0 5
12531: IN
12532: OR
12533: AND
12534: IFFALSE 12788
// begin hex := GetHexInfo ( x , y ) ;
12536: LD_ADDR_VAR 0 4
12540: PUSH
12541: LD_VAR 0 10
12545: PPUSH
12546: LD_VAR 0 11
12550: PPUSH
12551: CALL_OW 546
12555: ST_TO_ADDR
// if hex [ 1 ] then
12556: LD_VAR 0 4
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: IFFALSE 12568
// exit ;
12566: GO 12971
// height := hex [ 2 ] ;
12568: LD_ADDR_VAR 0 15
12572: PUSH
12573: LD_VAR 0 4
12577: PUSH
12578: LD_INT 2
12580: ARRAY
12581: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12582: LD_ADDR_VAR 0 14
12586: PUSH
12587: LD_INT 0
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: LD_INT 3
12595: PUSH
12596: LD_INT 5
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: ST_TO_ADDR
// for i in tmp do
12605: LD_ADDR_VAR 0 8
12609: PUSH
12610: LD_VAR 0 14
12614: PUSH
12615: FOR_IN
12616: IFFALSE 12786
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12618: LD_ADDR_VAR 0 9
12622: PUSH
12623: LD_VAR 0 10
12627: PPUSH
12628: LD_VAR 0 8
12632: PPUSH
12633: LD_INT 5
12635: PPUSH
12636: CALL_OW 272
12640: PUSH
12641: LD_VAR 0 11
12645: PPUSH
12646: LD_VAR 0 8
12650: PPUSH
12651: LD_INT 5
12653: PPUSH
12654: CALL_OW 273
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12663: LD_VAR 0 9
12667: PUSH
12668: LD_INT 1
12670: ARRAY
12671: PPUSH
12672: LD_VAR 0 9
12676: PUSH
12677: LD_INT 2
12679: ARRAY
12680: PPUSH
12681: CALL_OW 488
12685: IFFALSE 12784
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12687: LD_ADDR_VAR 0 4
12691: PUSH
12692: LD_VAR 0 9
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PPUSH
12701: LD_VAR 0 9
12705: PUSH
12706: LD_INT 2
12708: ARRAY
12709: PPUSH
12710: CALL_OW 546
12714: ST_TO_ADDR
// if hex [ 1 ] then
12715: LD_VAR 0 4
12719: PUSH
12720: LD_INT 1
12722: ARRAY
12723: IFFALSE 12727
// continue ;
12725: GO 12615
// h := hex [ 2 ] ;
12727: LD_ADDR_VAR 0 13
12731: PUSH
12732: LD_VAR 0 4
12736: PUSH
12737: LD_INT 2
12739: ARRAY
12740: ST_TO_ADDR
// if h + 7 < height then
12741: LD_VAR 0 13
12745: PUSH
12746: LD_INT 7
12748: PLUS
12749: PUSH
12750: LD_VAR 0 15
12754: LESS
12755: IFFALSE 12784
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12757: LD_ADDR_VAR 0 18
12761: PUSH
12762: LD_INT 7
12764: PUSH
12765: LD_INT 28
12767: PUSH
12768: LD_INT 45
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: PUSH
12776: LD_VAR 0 12
12780: ARRAY
12781: ST_TO_ADDR
// break ;
12782: GO 12786
// end ; end ; end ;
12784: GO 12615
12786: POP
12787: POP
// end ; if not weapon then
12788: LD_VAR 0 18
12792: NOT
12793: IFFALSE 12853
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12795: LD_ADDR_VAR 0 5
12799: PUSH
12800: LD_VAR 0 5
12804: PUSH
12805: LD_INT 11
12807: PUSH
12808: LD_INT 30
12810: PUSH
12811: LD_INT 49
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: DIFF
12819: ST_TO_ADDR
// if not list then
12820: LD_VAR 0 5
12824: NOT
12825: IFFALSE 12829
// exit ;
12827: GO 12971
// weapon := list [ rand ( 1 , list ) ] ;
12829: LD_ADDR_VAR 0 18
12833: PUSH
12834: LD_VAR 0 5
12838: PUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_VAR 0 5
12846: PPUSH
12847: CALL_OW 12
12851: ARRAY
12852: ST_TO_ADDR
// end ; if weapon then
12853: LD_VAR 0 18
12857: IFFALSE 12971
// begin tmp := CostOfWeapon ( weapon ) ;
12859: LD_ADDR_VAR 0 14
12863: PUSH
12864: LD_VAR 0 18
12868: PPUSH
12869: CALL_OW 451
12873: ST_TO_ADDR
// j := GetBase ( tower ) ;
12874: LD_ADDR_VAR 0 9
12878: PUSH
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 274
12888: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12889: LD_VAR 0 9
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 275
12901: PUSH
12902: LD_VAR 0 14
12906: PUSH
12907: LD_INT 1
12909: ARRAY
12910: GREATEREQUAL
12911: PUSH
12912: LD_VAR 0 9
12916: PPUSH
12917: LD_INT 2
12919: PPUSH
12920: CALL_OW 275
12924: PUSH
12925: LD_VAR 0 14
12929: PUSH
12930: LD_INT 2
12932: ARRAY
12933: GREATEREQUAL
12934: AND
12935: PUSH
12936: LD_VAR 0 9
12940: PPUSH
12941: LD_INT 3
12943: PPUSH
12944: CALL_OW 275
12948: PUSH
12949: LD_VAR 0 14
12953: PUSH
12954: LD_INT 3
12956: ARRAY
12957: GREATEREQUAL
12958: AND
12959: IFFALSE 12971
// result := weapon ;
12961: LD_ADDR_VAR 0 3
12965: PUSH
12966: LD_VAR 0 18
12970: ST_TO_ADDR
// end ; end ;
12971: LD_VAR 0 3
12975: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12976: LD_INT 0
12978: PPUSH
12979: PPUSH
// result := true ;
12980: LD_ADDR_VAR 0 3
12984: PUSH
12985: LD_INT 1
12987: ST_TO_ADDR
// if array1 = array2 then
12988: LD_VAR 0 1
12992: PUSH
12993: LD_VAR 0 2
12997: EQUAL
12998: IFFALSE 13058
// begin for i = 1 to array1 do
13000: LD_ADDR_VAR 0 4
13004: PUSH
13005: DOUBLE
13006: LD_INT 1
13008: DEC
13009: ST_TO_ADDR
13010: LD_VAR 0 1
13014: PUSH
13015: FOR_TO
13016: IFFALSE 13054
// if array1 [ i ] <> array2 [ i ] then
13018: LD_VAR 0 1
13022: PUSH
13023: LD_VAR 0 4
13027: ARRAY
13028: PUSH
13029: LD_VAR 0 2
13033: PUSH
13034: LD_VAR 0 4
13038: ARRAY
13039: NONEQUAL
13040: IFFALSE 13052
// begin result := false ;
13042: LD_ADDR_VAR 0 3
13046: PUSH
13047: LD_INT 0
13049: ST_TO_ADDR
// break ;
13050: GO 13054
// end ;
13052: GO 13015
13054: POP
13055: POP
// end else
13056: GO 13066
// result := false ;
13058: LD_ADDR_VAR 0 3
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// end ;
13066: LD_VAR 0 3
13070: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13071: LD_INT 0
13073: PPUSH
13074: PPUSH
// if not array1 or not array2 then
13075: LD_VAR 0 1
13079: NOT
13080: PUSH
13081: LD_VAR 0 2
13085: NOT
13086: OR
13087: IFFALSE 13091
// exit ;
13089: GO 13155
// result := true ;
13091: LD_ADDR_VAR 0 3
13095: PUSH
13096: LD_INT 1
13098: ST_TO_ADDR
// for i = 1 to array1 do
13099: LD_ADDR_VAR 0 4
13103: PUSH
13104: DOUBLE
13105: LD_INT 1
13107: DEC
13108: ST_TO_ADDR
13109: LD_VAR 0 1
13113: PUSH
13114: FOR_TO
13115: IFFALSE 13153
// if array1 [ i ] <> array2 [ i ] then
13117: LD_VAR 0 1
13121: PUSH
13122: LD_VAR 0 4
13126: ARRAY
13127: PUSH
13128: LD_VAR 0 2
13132: PUSH
13133: LD_VAR 0 4
13137: ARRAY
13138: NONEQUAL
13139: IFFALSE 13151
// begin result := false ;
13141: LD_ADDR_VAR 0 3
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// break ;
13149: GO 13153
// end ;
13151: GO 13114
13153: POP
13154: POP
// end ;
13155: LD_VAR 0 3
13159: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13160: LD_INT 0
13162: PPUSH
13163: PPUSH
13164: PPUSH
// pom := GetBase ( fac ) ;
13165: LD_ADDR_VAR 0 5
13169: PUSH
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 274
13179: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13180: LD_ADDR_VAR 0 4
13184: PUSH
13185: LD_VAR 0 2
13189: PUSH
13190: LD_INT 1
13192: ARRAY
13193: PPUSH
13194: LD_VAR 0 2
13198: PUSH
13199: LD_INT 2
13201: ARRAY
13202: PPUSH
13203: LD_VAR 0 2
13207: PUSH
13208: LD_INT 3
13210: ARRAY
13211: PPUSH
13212: LD_VAR 0 2
13216: PUSH
13217: LD_INT 4
13219: ARRAY
13220: PPUSH
13221: CALL_OW 449
13225: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13226: LD_ADDR_VAR 0 3
13230: PUSH
13231: LD_VAR 0 5
13235: PPUSH
13236: LD_INT 1
13238: PPUSH
13239: CALL_OW 275
13243: PUSH
13244: LD_VAR 0 4
13248: PUSH
13249: LD_INT 1
13251: ARRAY
13252: GREATEREQUAL
13253: PUSH
13254: LD_VAR 0 5
13258: PPUSH
13259: LD_INT 2
13261: PPUSH
13262: CALL_OW 275
13266: PUSH
13267: LD_VAR 0 4
13271: PUSH
13272: LD_INT 2
13274: ARRAY
13275: GREATEREQUAL
13276: AND
13277: PUSH
13278: LD_VAR 0 5
13282: PPUSH
13283: LD_INT 3
13285: PPUSH
13286: CALL_OW 275
13290: PUSH
13291: LD_VAR 0 4
13295: PUSH
13296: LD_INT 3
13298: ARRAY
13299: GREATEREQUAL
13300: AND
13301: ST_TO_ADDR
// end ;
13302: LD_VAR 0 3
13306: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13307: LD_INT 0
13309: PPUSH
13310: PPUSH
13311: PPUSH
13312: PPUSH
// pom := GetBase ( building ) ;
13313: LD_ADDR_VAR 0 3
13317: PUSH
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL_OW 274
13327: ST_TO_ADDR
// if not pom then
13328: LD_VAR 0 3
13332: NOT
13333: IFFALSE 13337
// exit ;
13335: GO 13507
// btype := GetBType ( building ) ;
13337: LD_ADDR_VAR 0 5
13341: PUSH
13342: LD_VAR 0 1
13346: PPUSH
13347: CALL_OW 266
13351: ST_TO_ADDR
// if btype = b_armoury then
13352: LD_VAR 0 5
13356: PUSH
13357: LD_INT 4
13359: EQUAL
13360: IFFALSE 13370
// btype := b_barracks ;
13362: LD_ADDR_VAR 0 5
13366: PUSH
13367: LD_INT 5
13369: ST_TO_ADDR
// if btype = b_depot then
13370: LD_VAR 0 5
13374: PUSH
13375: LD_INT 0
13377: EQUAL
13378: IFFALSE 13388
// btype := b_warehouse ;
13380: LD_ADDR_VAR 0 5
13384: PUSH
13385: LD_INT 1
13387: ST_TO_ADDR
// if btype = b_workshop then
13388: LD_VAR 0 5
13392: PUSH
13393: LD_INT 2
13395: EQUAL
13396: IFFALSE 13406
// btype := b_factory ;
13398: LD_ADDR_VAR 0 5
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13406: LD_ADDR_VAR 0 4
13410: PUSH
13411: LD_VAR 0 5
13415: PPUSH
13416: LD_VAR 0 1
13420: PPUSH
13421: CALL_OW 248
13425: PPUSH
13426: CALL_OW 450
13430: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13431: LD_ADDR_VAR 0 2
13435: PUSH
13436: LD_VAR 0 3
13440: PPUSH
13441: LD_INT 1
13443: PPUSH
13444: CALL_OW 275
13448: PUSH
13449: LD_VAR 0 4
13453: PUSH
13454: LD_INT 1
13456: ARRAY
13457: GREATEREQUAL
13458: PUSH
13459: LD_VAR 0 3
13463: PPUSH
13464: LD_INT 2
13466: PPUSH
13467: CALL_OW 275
13471: PUSH
13472: LD_VAR 0 4
13476: PUSH
13477: LD_INT 2
13479: ARRAY
13480: GREATEREQUAL
13481: AND
13482: PUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_INT 3
13490: PPUSH
13491: CALL_OW 275
13495: PUSH
13496: LD_VAR 0 4
13500: PUSH
13501: LD_INT 3
13503: ARRAY
13504: GREATEREQUAL
13505: AND
13506: ST_TO_ADDR
// end ;
13507: LD_VAR 0 2
13511: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13512: LD_INT 0
13514: PPUSH
13515: PPUSH
13516: PPUSH
// pom := GetBase ( building ) ;
13517: LD_ADDR_VAR 0 4
13521: PUSH
13522: LD_VAR 0 1
13526: PPUSH
13527: CALL_OW 274
13531: ST_TO_ADDR
// if not pom then
13532: LD_VAR 0 4
13536: NOT
13537: IFFALSE 13541
// exit ;
13539: GO 13642
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13541: LD_ADDR_VAR 0 5
13545: PUSH
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_VAR 0 1
13555: PPUSH
13556: CALL_OW 248
13560: PPUSH
13561: CALL_OW 450
13565: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: LD_VAR 0 4
13575: PPUSH
13576: LD_INT 1
13578: PPUSH
13579: CALL_OW 275
13583: PUSH
13584: LD_VAR 0 5
13588: PUSH
13589: LD_INT 1
13591: ARRAY
13592: GREATEREQUAL
13593: PUSH
13594: LD_VAR 0 4
13598: PPUSH
13599: LD_INT 2
13601: PPUSH
13602: CALL_OW 275
13606: PUSH
13607: LD_VAR 0 5
13611: PUSH
13612: LD_INT 2
13614: ARRAY
13615: GREATEREQUAL
13616: AND
13617: PUSH
13618: LD_VAR 0 4
13622: PPUSH
13623: LD_INT 3
13625: PPUSH
13626: CALL_OW 275
13630: PUSH
13631: LD_VAR 0 5
13635: PUSH
13636: LD_INT 3
13638: ARRAY
13639: GREATEREQUAL
13640: AND
13641: ST_TO_ADDR
// end ;
13642: LD_VAR 0 3
13646: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13647: LD_INT 0
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
13654: PPUSH
13655: PPUSH
13656: PPUSH
13657: PPUSH
13658: PPUSH
13659: PPUSH
// result := false ;
13660: LD_ADDR_VAR 0 8
13664: PUSH
13665: LD_INT 0
13667: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13668: LD_VAR 0 5
13672: NOT
13673: PUSH
13674: LD_VAR 0 1
13678: NOT
13679: OR
13680: PUSH
13681: LD_VAR 0 2
13685: NOT
13686: OR
13687: PUSH
13688: LD_VAR 0 3
13692: NOT
13693: OR
13694: IFFALSE 13698
// exit ;
13696: GO 14512
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13698: LD_ADDR_VAR 0 14
13702: PUSH
13703: LD_VAR 0 1
13707: PPUSH
13708: LD_VAR 0 2
13712: PPUSH
13713: LD_VAR 0 3
13717: PPUSH
13718: LD_VAR 0 4
13722: PPUSH
13723: LD_VAR 0 5
13727: PUSH
13728: LD_INT 1
13730: ARRAY
13731: PPUSH
13732: CALL_OW 248
13736: PPUSH
13737: LD_INT 0
13739: PPUSH
13740: CALL 15765 0 6
13744: ST_TO_ADDR
// if not hexes then
13745: LD_VAR 0 14
13749: NOT
13750: IFFALSE 13754
// exit ;
13752: GO 14512
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13754: LD_ADDR_VAR 0 17
13758: PUSH
13759: LD_VAR 0 5
13763: PPUSH
13764: LD_INT 22
13766: PUSH
13767: LD_VAR 0 13
13771: PPUSH
13772: CALL_OW 255
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: LD_INT 30
13786: PUSH
13787: LD_INT 0
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 72
13817: ST_TO_ADDR
// for i = 1 to hexes do
13818: LD_ADDR_VAR 0 9
13822: PUSH
13823: DOUBLE
13824: LD_INT 1
13826: DEC
13827: ST_TO_ADDR
13828: LD_VAR 0 14
13832: PUSH
13833: FOR_TO
13834: IFFALSE 14510
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13836: LD_ADDR_VAR 0 13
13840: PUSH
13841: LD_VAR 0 14
13845: PUSH
13846: LD_VAR 0 9
13850: ARRAY
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: LD_VAR 0 14
13860: PUSH
13861: LD_VAR 0 9
13865: ARRAY
13866: PUSH
13867: LD_INT 2
13869: ARRAY
13870: PPUSH
13871: CALL_OW 428
13875: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13876: LD_VAR 0 14
13880: PUSH
13881: LD_VAR 0 9
13885: ARRAY
13886: PUSH
13887: LD_INT 1
13889: ARRAY
13890: PPUSH
13891: LD_VAR 0 14
13895: PUSH
13896: LD_VAR 0 9
13900: ARRAY
13901: PUSH
13902: LD_INT 2
13904: ARRAY
13905: PPUSH
13906: CALL_OW 351
13910: PUSH
13911: LD_VAR 0 14
13915: PUSH
13916: LD_VAR 0 9
13920: ARRAY
13921: PUSH
13922: LD_INT 1
13924: ARRAY
13925: PPUSH
13926: LD_VAR 0 14
13930: PUSH
13931: LD_VAR 0 9
13935: ARRAY
13936: PUSH
13937: LD_INT 2
13939: ARRAY
13940: PPUSH
13941: CALL_OW 488
13945: NOT
13946: OR
13947: PUSH
13948: LD_VAR 0 13
13952: PPUSH
13953: CALL_OW 247
13957: PUSH
13958: LD_INT 3
13960: EQUAL
13961: OR
13962: IFFALSE 13968
// exit ;
13964: POP
13965: POP
13966: GO 14512
// if not tmp then
13968: LD_VAR 0 13
13972: NOT
13973: IFFALSE 13977
// continue ;
13975: GO 13833
// result := true ;
13977: LD_ADDR_VAR 0 8
13981: PUSH
13982: LD_INT 1
13984: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13985: LD_VAR 0 6
13989: PUSH
13990: LD_VAR 0 13
13994: PPUSH
13995: CALL_OW 247
13999: PUSH
14000: LD_INT 2
14002: EQUAL
14003: AND
14004: PUSH
14005: LD_VAR 0 13
14009: PPUSH
14010: CALL_OW 263
14014: PUSH
14015: LD_INT 1
14017: EQUAL
14018: AND
14019: IFFALSE 14183
// begin if IsDrivenBy ( tmp ) then
14021: LD_VAR 0 13
14025: PPUSH
14026: CALL_OW 311
14030: IFFALSE 14034
// continue ;
14032: GO 13833
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14034: LD_VAR 0 6
14038: PPUSH
14039: LD_INT 3
14041: PUSH
14042: LD_INT 60
14044: PUSH
14045: EMPTY
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: LD_INT 55
14057: PUSH
14058: EMPTY
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PPUSH
14069: CALL_OW 72
14073: IFFALSE 14181
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14075: LD_ADDR_VAR 0 18
14079: PUSH
14080: LD_VAR 0 6
14084: PPUSH
14085: LD_INT 3
14087: PUSH
14088: LD_INT 60
14090: PUSH
14091: EMPTY
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 3
14100: PUSH
14101: LD_INT 55
14103: PUSH
14104: EMPTY
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 72
14119: PUSH
14120: LD_INT 1
14122: ARRAY
14123: ST_TO_ADDR
// if IsInUnit ( driver ) then
14124: LD_VAR 0 18
14128: PPUSH
14129: CALL_OW 310
14133: IFFALSE 14144
// ComExit ( driver ) ;
14135: LD_VAR 0 18
14139: PPUSH
14140: CALL 39566 0 1
// AddComEnterUnit ( driver , tmp ) ;
14144: LD_VAR 0 18
14148: PPUSH
14149: LD_VAR 0 13
14153: PPUSH
14154: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14158: LD_VAR 0 18
14162: PPUSH
14163: LD_VAR 0 7
14167: PPUSH
14168: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14172: LD_VAR 0 18
14176: PPUSH
14177: CALL_OW 181
// end ; continue ;
14181: GO 13833
// end ; if not cleaners or not tmp in cleaners then
14183: LD_VAR 0 6
14187: NOT
14188: PUSH
14189: LD_VAR 0 13
14193: PUSH
14194: LD_VAR 0 6
14198: IN
14199: NOT
14200: OR
14201: IFFALSE 14508
// begin if dep then
14203: LD_VAR 0 17
14207: IFFALSE 14343
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14209: LD_ADDR_VAR 0 16
14213: PUSH
14214: LD_VAR 0 17
14218: PUSH
14219: LD_INT 1
14221: ARRAY
14222: PPUSH
14223: CALL_OW 250
14227: PPUSH
14228: LD_VAR 0 17
14232: PUSH
14233: LD_INT 1
14235: ARRAY
14236: PPUSH
14237: CALL_OW 254
14241: PPUSH
14242: LD_INT 5
14244: PPUSH
14245: CALL_OW 272
14249: PUSH
14250: LD_VAR 0 17
14254: PUSH
14255: LD_INT 1
14257: ARRAY
14258: PPUSH
14259: CALL_OW 251
14263: PPUSH
14264: LD_VAR 0 17
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: CALL_OW 254
14277: PPUSH
14278: LD_INT 5
14280: PPUSH
14281: CALL_OW 273
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14290: LD_VAR 0 16
14294: PUSH
14295: LD_INT 1
14297: ARRAY
14298: PPUSH
14299: LD_VAR 0 16
14303: PUSH
14304: LD_INT 2
14306: ARRAY
14307: PPUSH
14308: CALL_OW 488
14312: IFFALSE 14343
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14314: LD_VAR 0 13
14318: PPUSH
14319: LD_VAR 0 16
14323: PUSH
14324: LD_INT 1
14326: ARRAY
14327: PPUSH
14328: LD_VAR 0 16
14332: PUSH
14333: LD_INT 2
14335: ARRAY
14336: PPUSH
14337: CALL_OW 111
// continue ;
14341: GO 13833
// end ; end ; r := GetDir ( tmp ) ;
14343: LD_ADDR_VAR 0 15
14347: PUSH
14348: LD_VAR 0 13
14352: PPUSH
14353: CALL_OW 254
14357: ST_TO_ADDR
// if r = 5 then
14358: LD_VAR 0 15
14362: PUSH
14363: LD_INT 5
14365: EQUAL
14366: IFFALSE 14376
// r := 0 ;
14368: LD_ADDR_VAR 0 15
14372: PUSH
14373: LD_INT 0
14375: ST_TO_ADDR
// for j = r to 5 do
14376: LD_ADDR_VAR 0 10
14380: PUSH
14381: DOUBLE
14382: LD_VAR 0 15
14386: DEC
14387: ST_TO_ADDR
14388: LD_INT 5
14390: PUSH
14391: FOR_TO
14392: IFFALSE 14506
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14394: LD_ADDR_VAR 0 11
14398: PUSH
14399: LD_VAR 0 13
14403: PPUSH
14404: CALL_OW 250
14408: PPUSH
14409: LD_VAR 0 10
14413: PPUSH
14414: LD_INT 2
14416: PPUSH
14417: CALL_OW 272
14421: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14422: LD_ADDR_VAR 0 12
14426: PUSH
14427: LD_VAR 0 13
14431: PPUSH
14432: CALL_OW 251
14436: PPUSH
14437: LD_VAR 0 10
14441: PPUSH
14442: LD_INT 2
14444: PPUSH
14445: CALL_OW 273
14449: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14450: LD_VAR 0 11
14454: PPUSH
14455: LD_VAR 0 12
14459: PPUSH
14460: CALL_OW 488
14464: PUSH
14465: LD_VAR 0 11
14469: PPUSH
14470: LD_VAR 0 12
14474: PPUSH
14475: CALL_OW 428
14479: NOT
14480: AND
14481: IFFALSE 14504
// begin ComMoveXY ( tmp , _x , _y ) ;
14483: LD_VAR 0 13
14487: PPUSH
14488: LD_VAR 0 11
14492: PPUSH
14493: LD_VAR 0 12
14497: PPUSH
14498: CALL_OW 111
// break ;
14502: GO 14506
// end ; end ;
14504: GO 14391
14506: POP
14507: POP
// end ; end ;
14508: GO 13833
14510: POP
14511: POP
// end ;
14512: LD_VAR 0 8
14516: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14517: LD_INT 0
14519: PPUSH
// result := true ;
14520: LD_ADDR_VAR 0 3
14524: PUSH
14525: LD_INT 1
14527: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14528: LD_VAR 0 2
14532: PUSH
14533: LD_INT 24
14535: DOUBLE
14536: EQUAL
14537: IFTRUE 14547
14539: LD_INT 33
14541: DOUBLE
14542: EQUAL
14543: IFTRUE 14547
14545: GO 14572
14547: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14548: LD_ADDR_VAR 0 3
14552: PUSH
14553: LD_INT 32
14555: PPUSH
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 321
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: ST_TO_ADDR
14570: GO 14888
14572: LD_INT 20
14574: DOUBLE
14575: EQUAL
14576: IFTRUE 14580
14578: GO 14605
14580: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: LD_INT 6
14588: PPUSH
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 321
14598: PUSH
14599: LD_INT 2
14601: EQUAL
14602: ST_TO_ADDR
14603: GO 14888
14605: LD_INT 22
14607: DOUBLE
14608: EQUAL
14609: IFTRUE 14619
14611: LD_INT 36
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14644
14619: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14620: LD_ADDR_VAR 0 3
14624: PUSH
14625: LD_INT 15
14627: PPUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 321
14637: PUSH
14638: LD_INT 2
14640: EQUAL
14641: ST_TO_ADDR
14642: GO 14888
14644: LD_INT 30
14646: DOUBLE
14647: EQUAL
14648: IFTRUE 14652
14650: GO 14677
14652: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14653: LD_ADDR_VAR 0 3
14657: PUSH
14658: LD_INT 20
14660: PPUSH
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL_OW 321
14670: PUSH
14671: LD_INT 2
14673: EQUAL
14674: ST_TO_ADDR
14675: GO 14888
14677: LD_INT 28
14679: DOUBLE
14680: EQUAL
14681: IFTRUE 14691
14683: LD_INT 21
14685: DOUBLE
14686: EQUAL
14687: IFTRUE 14691
14689: GO 14716
14691: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14692: LD_ADDR_VAR 0 3
14696: PUSH
14697: LD_INT 21
14699: PPUSH
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 321
14709: PUSH
14710: LD_INT 2
14712: EQUAL
14713: ST_TO_ADDR
14714: GO 14888
14716: LD_INT 16
14718: DOUBLE
14719: EQUAL
14720: IFTRUE 14724
14722: GO 14749
14724: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14725: LD_ADDR_VAR 0 3
14729: PUSH
14730: LD_INT 84
14732: PPUSH
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 321
14742: PUSH
14743: LD_INT 2
14745: EQUAL
14746: ST_TO_ADDR
14747: GO 14888
14749: LD_INT 19
14751: DOUBLE
14752: EQUAL
14753: IFTRUE 14763
14755: LD_INT 23
14757: DOUBLE
14758: EQUAL
14759: IFTRUE 14763
14761: GO 14788
14763: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14764: LD_ADDR_VAR 0 3
14768: PUSH
14769: LD_INT 83
14771: PPUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 321
14781: PUSH
14782: LD_INT 2
14784: EQUAL
14785: ST_TO_ADDR
14786: GO 14888
14788: LD_INT 17
14790: DOUBLE
14791: EQUAL
14792: IFTRUE 14796
14794: GO 14821
14796: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: LD_INT 39
14804: PPUSH
14805: LD_VAR 0 1
14809: PPUSH
14810: CALL_OW 321
14814: PUSH
14815: LD_INT 2
14817: EQUAL
14818: ST_TO_ADDR
14819: GO 14888
14821: LD_INT 18
14823: DOUBLE
14824: EQUAL
14825: IFTRUE 14829
14827: GO 14854
14829: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14830: LD_ADDR_VAR 0 3
14834: PUSH
14835: LD_INT 40
14837: PPUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 321
14847: PUSH
14848: LD_INT 2
14850: EQUAL
14851: ST_TO_ADDR
14852: GO 14888
14854: LD_INT 27
14856: DOUBLE
14857: EQUAL
14858: IFTRUE 14862
14860: GO 14887
14862: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14863: LD_ADDR_VAR 0 3
14867: PUSH
14868: LD_INT 35
14870: PPUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 321
14880: PUSH
14881: LD_INT 2
14883: EQUAL
14884: ST_TO_ADDR
14885: GO 14888
14887: POP
// end ;
14888: LD_VAR 0 3
14892: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14893: LD_INT 0
14895: PPUSH
14896: PPUSH
14897: PPUSH
14898: PPUSH
14899: PPUSH
14900: PPUSH
14901: PPUSH
14902: PPUSH
14903: PPUSH
14904: PPUSH
14905: PPUSH
// result := false ;
14906: LD_ADDR_VAR 0 6
14910: PUSH
14911: LD_INT 0
14913: ST_TO_ADDR
// if btype = b_depot then
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 0
14921: EQUAL
14922: IFFALSE 14934
// begin result := true ;
14924: LD_ADDR_VAR 0 6
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// exit ;
14932: GO 15760
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14934: LD_VAR 0 1
14938: NOT
14939: PUSH
14940: LD_VAR 0 1
14944: PPUSH
14945: CALL_OW 266
14949: PUSH
14950: LD_INT 0
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: IN
14960: NOT
14961: OR
14962: PUSH
14963: LD_VAR 0 2
14967: NOT
14968: OR
14969: PUSH
14970: LD_VAR 0 5
14974: PUSH
14975: LD_INT 0
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 3
14986: PUSH
14987: LD_INT 4
14989: PUSH
14990: LD_INT 5
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: IN
15001: NOT
15002: OR
15003: PUSH
15004: LD_VAR 0 3
15008: PPUSH
15009: LD_VAR 0 4
15013: PPUSH
15014: CALL_OW 488
15018: NOT
15019: OR
15020: IFFALSE 15024
// exit ;
15022: GO 15760
// side := GetSide ( depot ) ;
15024: LD_ADDR_VAR 0 9
15028: PUSH
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 255
15038: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15039: LD_VAR 0 9
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 14517 0 2
15053: NOT
15054: IFFALSE 15058
// exit ;
15056: GO 15760
// pom := GetBase ( depot ) ;
15058: LD_ADDR_VAR 0 10
15062: PUSH
15063: LD_VAR 0 1
15067: PPUSH
15068: CALL_OW 274
15072: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15073: LD_ADDR_VAR 0 11
15077: PUSH
15078: LD_VAR 0 2
15082: PPUSH
15083: LD_VAR 0 1
15087: PPUSH
15088: CALL_OW 248
15092: PPUSH
15093: CALL_OW 450
15097: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15098: LD_VAR 0 10
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 275
15110: PUSH
15111: LD_VAR 0 11
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: GREATEREQUAL
15120: PUSH
15121: LD_VAR 0 10
15125: PPUSH
15126: LD_INT 2
15128: PPUSH
15129: CALL_OW 275
15133: PUSH
15134: LD_VAR 0 11
15138: PUSH
15139: LD_INT 2
15141: ARRAY
15142: GREATEREQUAL
15143: AND
15144: PUSH
15145: LD_VAR 0 10
15149: PPUSH
15150: LD_INT 3
15152: PPUSH
15153: CALL_OW 275
15157: PUSH
15158: LD_VAR 0 11
15162: PUSH
15163: LD_INT 3
15165: ARRAY
15166: GREATEREQUAL
15167: AND
15168: NOT
15169: IFFALSE 15173
// exit ;
15171: GO 15760
// if GetBType ( depot ) = b_depot then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 266
15182: PUSH
15183: LD_INT 0
15185: EQUAL
15186: IFFALSE 15198
// dist := 28 else
15188: LD_ADDR_VAR 0 14
15192: PUSH
15193: LD_INT 28
15195: ST_TO_ADDR
15196: GO 15206
// dist := 36 ;
15198: LD_ADDR_VAR 0 14
15202: PUSH
15203: LD_INT 36
15205: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15206: LD_VAR 0 1
15210: PPUSH
15211: LD_VAR 0 3
15215: PPUSH
15216: LD_VAR 0 4
15220: PPUSH
15221: CALL_OW 297
15225: PUSH
15226: LD_VAR 0 14
15230: GREATER
15231: IFFALSE 15235
// exit ;
15233: GO 15760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15235: LD_ADDR_VAR 0 12
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: LD_VAR 0 3
15249: PPUSH
15250: LD_VAR 0 4
15254: PPUSH
15255: LD_VAR 0 5
15259: PPUSH
15260: LD_VAR 0 1
15264: PPUSH
15265: CALL_OW 248
15269: PPUSH
15270: LD_INT 0
15272: PPUSH
15273: CALL 15765 0 6
15277: ST_TO_ADDR
// if not hexes then
15278: LD_VAR 0 12
15282: NOT
15283: IFFALSE 15287
// exit ;
15285: GO 15760
// hex := GetHexInfo ( x , y ) ;
15287: LD_ADDR_VAR 0 15
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: LD_VAR 0 4
15301: PPUSH
15302: CALL_OW 546
15306: ST_TO_ADDR
// if hex [ 1 ] then
15307: LD_VAR 0 15
15311: PUSH
15312: LD_INT 1
15314: ARRAY
15315: IFFALSE 15319
// exit ;
15317: GO 15760
// height := hex [ 2 ] ;
15319: LD_ADDR_VAR 0 13
15323: PUSH
15324: LD_VAR 0 15
15328: PUSH
15329: LD_INT 2
15331: ARRAY
15332: ST_TO_ADDR
// for i = 1 to hexes do
15333: LD_ADDR_VAR 0 7
15337: PUSH
15338: DOUBLE
15339: LD_INT 1
15341: DEC
15342: ST_TO_ADDR
15343: LD_VAR 0 12
15347: PUSH
15348: FOR_TO
15349: IFFALSE 15679
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15351: LD_VAR 0 12
15355: PUSH
15356: LD_VAR 0 7
15360: ARRAY
15361: PUSH
15362: LD_INT 1
15364: ARRAY
15365: PPUSH
15366: LD_VAR 0 12
15370: PUSH
15371: LD_VAR 0 7
15375: ARRAY
15376: PUSH
15377: LD_INT 2
15379: ARRAY
15380: PPUSH
15381: CALL_OW 488
15385: NOT
15386: PUSH
15387: LD_VAR 0 12
15391: PUSH
15392: LD_VAR 0 7
15396: ARRAY
15397: PUSH
15398: LD_INT 1
15400: ARRAY
15401: PPUSH
15402: LD_VAR 0 12
15406: PUSH
15407: LD_VAR 0 7
15411: ARRAY
15412: PUSH
15413: LD_INT 2
15415: ARRAY
15416: PPUSH
15417: CALL_OW 428
15421: PUSH
15422: LD_INT 0
15424: GREATER
15425: OR
15426: PUSH
15427: LD_VAR 0 12
15431: PUSH
15432: LD_VAR 0 7
15436: ARRAY
15437: PUSH
15438: LD_INT 1
15440: ARRAY
15441: PPUSH
15442: LD_VAR 0 12
15446: PUSH
15447: LD_VAR 0 7
15451: ARRAY
15452: PUSH
15453: LD_INT 2
15455: ARRAY
15456: PPUSH
15457: CALL_OW 351
15461: OR
15462: IFFALSE 15468
// exit ;
15464: POP
15465: POP
15466: GO 15760
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15468: LD_ADDR_VAR 0 8
15472: PUSH
15473: LD_VAR 0 12
15477: PUSH
15478: LD_VAR 0 7
15482: ARRAY
15483: PUSH
15484: LD_INT 1
15486: ARRAY
15487: PPUSH
15488: LD_VAR 0 12
15492: PUSH
15493: LD_VAR 0 7
15497: ARRAY
15498: PUSH
15499: LD_INT 2
15501: ARRAY
15502: PPUSH
15503: CALL_OW 546
15507: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15508: LD_VAR 0 8
15512: PUSH
15513: LD_INT 1
15515: ARRAY
15516: PUSH
15517: LD_VAR 0 8
15521: PUSH
15522: LD_INT 2
15524: ARRAY
15525: PUSH
15526: LD_VAR 0 13
15530: PUSH
15531: LD_INT 2
15533: PLUS
15534: GREATER
15535: OR
15536: PUSH
15537: LD_VAR 0 8
15541: PUSH
15542: LD_INT 2
15544: ARRAY
15545: PUSH
15546: LD_VAR 0 13
15550: PUSH
15551: LD_INT 2
15553: MINUS
15554: LESS
15555: OR
15556: PUSH
15557: LD_VAR 0 8
15561: PUSH
15562: LD_INT 3
15564: ARRAY
15565: PUSH
15566: LD_INT 0
15568: PUSH
15569: LD_INT 8
15571: PUSH
15572: LD_INT 9
15574: PUSH
15575: LD_INT 10
15577: PUSH
15578: LD_INT 11
15580: PUSH
15581: LD_INT 12
15583: PUSH
15584: LD_INT 13
15586: PUSH
15587: LD_INT 16
15589: PUSH
15590: LD_INT 17
15592: PUSH
15593: LD_INT 18
15595: PUSH
15596: LD_INT 19
15598: PUSH
15599: LD_INT 20
15601: PUSH
15602: LD_INT 21
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: IN
15620: NOT
15621: OR
15622: PUSH
15623: LD_VAR 0 8
15627: PUSH
15628: LD_INT 5
15630: ARRAY
15631: NOT
15632: OR
15633: PUSH
15634: LD_VAR 0 8
15638: PUSH
15639: LD_INT 6
15641: ARRAY
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: LD_INT 2
15648: PUSH
15649: LD_INT 7
15651: PUSH
15652: LD_INT 9
15654: PUSH
15655: LD_INT 10
15657: PUSH
15658: LD_INT 11
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: IN
15669: NOT
15670: OR
15671: IFFALSE 15677
// exit ;
15673: POP
15674: POP
15675: GO 15760
// end ;
15677: GO 15348
15679: POP
15680: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15681: LD_VAR 0 9
15685: PPUSH
15686: LD_VAR 0 3
15690: PPUSH
15691: LD_VAR 0 4
15695: PPUSH
15696: LD_INT 20
15698: PPUSH
15699: CALL 7683 0 4
15703: PUSH
15704: LD_INT 4
15706: ARRAY
15707: IFFALSE 15711
// exit ;
15709: GO 15760
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15711: LD_VAR 0 2
15715: PUSH
15716: LD_INT 29
15718: PUSH
15719: LD_INT 30
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: IN
15726: PUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_VAR 0 4
15736: PPUSH
15737: LD_VAR 0 9
15741: PPUSH
15742: CALL_OW 440
15746: NOT
15747: AND
15748: IFFALSE 15752
// exit ;
15750: GO 15760
// result := true ;
15752: LD_ADDR_VAR 0 6
15756: PUSH
15757: LD_INT 1
15759: ST_TO_ADDR
// end ;
15760: LD_VAR 0 6
15764: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
15772: PPUSH
15773: PPUSH
15774: PPUSH
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
15784: PPUSH
15785: PPUSH
15786: PPUSH
15787: PPUSH
15788: PPUSH
15789: PPUSH
15790: PPUSH
15791: PPUSH
15792: PPUSH
15793: PPUSH
15794: PPUSH
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
15800: PPUSH
15801: PPUSH
15802: PPUSH
15803: PPUSH
15804: PPUSH
15805: PPUSH
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
15811: PPUSH
15812: PPUSH
15813: PPUSH
15814: PPUSH
15815: PPUSH
15816: PPUSH
15817: PPUSH
15818: PPUSH
15819: PPUSH
15820: PPUSH
15821: PPUSH
15822: PPUSH
15823: PPUSH
15824: PPUSH
// result = [ ] ;
15825: LD_ADDR_VAR 0 7
15829: PUSH
15830: EMPTY
15831: ST_TO_ADDR
// temp_list = [ ] ;
15832: LD_ADDR_VAR 0 9
15836: PUSH
15837: EMPTY
15838: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15839: LD_VAR 0 4
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: LD_INT 1
15849: PUSH
15850: LD_INT 2
15852: PUSH
15853: LD_INT 3
15855: PUSH
15856: LD_INT 4
15858: PUSH
15859: LD_INT 5
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: IN
15870: NOT
15871: PUSH
15872: LD_VAR 0 1
15876: PUSH
15877: LD_INT 0
15879: PUSH
15880: LD_INT 1
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: IN
15887: PUSH
15888: LD_VAR 0 5
15892: PUSH
15893: LD_INT 1
15895: PUSH
15896: LD_INT 2
15898: PUSH
15899: LD_INT 3
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: LIST
15906: IN
15907: NOT
15908: AND
15909: OR
15910: IFFALSE 15914
// exit ;
15912: GO 34305
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15914: LD_VAR 0 1
15918: PUSH
15919: LD_INT 6
15921: PUSH
15922: LD_INT 7
15924: PUSH
15925: LD_INT 8
15927: PUSH
15928: LD_INT 13
15930: PUSH
15931: LD_INT 12
15933: PUSH
15934: LD_INT 15
15936: PUSH
15937: LD_INT 11
15939: PUSH
15940: LD_INT 14
15942: PUSH
15943: LD_INT 10
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: IN
15957: IFFALSE 15967
// btype = b_lab ;
15959: LD_ADDR_VAR 0 1
15963: PUSH
15964: LD_INT 6
15966: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15967: LD_VAR 0 6
15971: PUSH
15972: LD_INT 0
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: IN
15986: NOT
15987: PUSH
15988: LD_VAR 0 1
15992: PUSH
15993: LD_INT 0
15995: PUSH
15996: LD_INT 1
15998: PUSH
15999: LD_INT 2
16001: PUSH
16002: LD_INT 3
16004: PUSH
16005: LD_INT 6
16007: PUSH
16008: LD_INT 36
16010: PUSH
16011: LD_INT 4
16013: PUSH
16014: LD_INT 5
16016: PUSH
16017: LD_INT 31
16019: PUSH
16020: LD_INT 32
16022: PUSH
16023: LD_INT 33
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: IN
16039: NOT
16040: PUSH
16041: LD_VAR 0 6
16045: PUSH
16046: LD_INT 1
16048: EQUAL
16049: AND
16050: OR
16051: PUSH
16052: LD_VAR 0 1
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: LD_INT 3
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: IN
16067: NOT
16068: PUSH
16069: LD_VAR 0 6
16073: PUSH
16074: LD_INT 2
16076: EQUAL
16077: AND
16078: OR
16079: IFFALSE 16089
// mode = 0 ;
16081: LD_ADDR_VAR 0 6
16085: PUSH
16086: LD_INT 0
16088: ST_TO_ADDR
// case mode of 0 :
16089: LD_VAR 0 6
16093: PUSH
16094: LD_INT 0
16096: DOUBLE
16097: EQUAL
16098: IFTRUE 16102
16100: GO 27555
16102: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16103: LD_ADDR_VAR 0 11
16107: PUSH
16108: LD_INT 0
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 0
16120: PUSH
16121: LD_INT 1
16123: NEG
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: LD_INT 0
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 0
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 1
16161: NEG
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: LD_INT 1
16176: NEG
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 1
16184: NEG
16185: PUSH
16186: LD_INT 2
16188: NEG
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 0
16196: PUSH
16197: LD_INT 2
16199: NEG
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: LD_INT 1
16210: NEG
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 0
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 1
16238: NEG
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 0
16259: PUSH
16260: LD_INT 3
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 1
16269: NEG
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16296: LD_ADDR_VAR 0 12
16300: PUSH
16301: LD_INT 0
16303: PUSH
16304: LD_INT 0
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 0
16313: PUSH
16314: LD_INT 1
16316: NEG
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 1
16324: PUSH
16325: LD_INT 0
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 0
16344: PUSH
16345: LD_INT 1
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 1
16354: NEG
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 1
16365: NEG
16366: PUSH
16367: LD_INT 1
16369: NEG
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: LD_INT 1
16380: NEG
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 2
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 1
16408: NEG
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 2
16419: NEG
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 2
16430: NEG
16431: PUSH
16432: LD_INT 1
16434: NEG
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 2
16442: NEG
16443: PUSH
16444: LD_INT 1
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 3
16453: NEG
16454: PUSH
16455: LD_INT 0
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 3
16464: NEG
16465: PUSH
16466: LD_INT 1
16468: NEG
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16492: LD_ADDR_VAR 0 13
16496: PUSH
16497: LD_INT 0
16499: PUSH
16500: LD_INT 0
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: LD_INT 1
16512: NEG
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 1
16530: PUSH
16531: LD_INT 1
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 1
16550: NEG
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 1
16561: NEG
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: NEG
16574: PUSH
16575: LD_INT 2
16577: NEG
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: LD_INT 2
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 2
16615: NEG
16616: PUSH
16617: LD_INT 1
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 2
16627: NEG
16628: PUSH
16629: LD_INT 2
16631: NEG
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 2
16639: NEG
16640: PUSH
16641: LD_INT 3
16643: NEG
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 3
16651: NEG
16652: PUSH
16653: LD_INT 2
16655: NEG
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 3
16663: NEG
16664: PUSH
16665: LD_INT 3
16667: NEG
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16691: LD_ADDR_VAR 0 14
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: LD_INT 0
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: LD_INT 1
16711: NEG
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: LD_INT 0
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: LD_INT 0
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 1
16760: NEG
16761: PUSH
16762: LD_INT 1
16764: NEG
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: NEG
16773: PUSH
16774: LD_INT 2
16776: NEG
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 0
16784: PUSH
16785: LD_INT 2
16787: NEG
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: LD_INT 1
16798: NEG
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 1
16826: NEG
16827: PUSH
16828: LD_INT 1
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 1
16837: NEG
16838: PUSH
16839: LD_INT 3
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 3
16852: NEG
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: LD_INT 2
16863: NEG
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16887: LD_ADDR_VAR 0 15
16891: PUSH
16892: LD_INT 0
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: LD_INT 1
16907: NEG
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 1
16915: PUSH
16916: LD_INT 0
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: LD_INT 1
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 1
16945: NEG
16946: PUSH
16947: LD_INT 0
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 1
16956: NEG
16957: PUSH
16958: LD_INT 1
16960: NEG
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 1
16968: PUSH
16969: LD_INT 1
16971: NEG
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: LD_INT 0
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 1
16999: NEG
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: NEG
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 2
17021: NEG
17022: PUSH
17023: LD_INT 1
17025: NEG
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 2
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 3
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 3
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17080: LD_ADDR_VAR 0 16
17084: PUSH
17085: LD_INT 0
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: LD_INT 1
17100: NEG
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 1
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 0
17128: PUSH
17129: LD_INT 1
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 1
17138: NEG
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 1
17149: NEG
17150: PUSH
17151: LD_INT 1
17153: NEG
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 1
17161: NEG
17162: PUSH
17163: LD_INT 2
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 2
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 2
17203: NEG
17204: PUSH
17205: LD_INT 1
17207: NEG
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 2
17215: NEG
17216: PUSH
17217: LD_INT 2
17219: NEG
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 3
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 2
17247: PUSH
17248: LD_INT 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17273: LD_ADDR_VAR 0 17
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 0
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 1
17331: NEG
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 1
17342: NEG
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 1
17354: NEG
17355: PUSH
17356: LD_INT 2
17358: NEG
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: LD_INT 2
17369: NEG
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: LD_INT 1
17380: NEG
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 2
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 2
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 1
17418: PUSH
17419: LD_INT 2
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 2
17449: NEG
17450: PUSH
17451: LD_INT 0
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 2
17460: NEG
17461: PUSH
17462: LD_INT 1
17464: NEG
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 2
17472: NEG
17473: PUSH
17474: LD_INT 2
17476: NEG
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17503: LD_ADDR_VAR 0 18
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: NEG
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 2
17588: NEG
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: LD_INT 2
17599: NEG
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 2
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 2
17679: NEG
17680: PUSH
17681: LD_INT 0
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: NEG
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: NEG
17703: PUSH
17704: LD_INT 2
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17733: LD_ADDR_VAR 0 19
17737: PUSH
17738: LD_INT 0
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 0
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: NEG
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: LD_INT 2
17818: NEG
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: LD_INT 2
17829: NEG
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 2
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 2
17868: PUSH
17869: LD_INT 2
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: LD_INT 2
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: NEG
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: NEG
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: NEG
17933: PUSH
17934: LD_INT 2
17936: NEG
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17963: LD_ADDR_VAR 0 20
17967: PUSH
17968: LD_INT 0
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 0
17980: PUSH
17981: LD_INT 1
17983: NEG
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 1
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 1
18032: NEG
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: LD_INT 2
18048: NEG
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: LD_INT 2
18059: NEG
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: LD_INT 1
18070: NEG
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: LD_INT 2
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: LD_INT 2
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 1
18128: NEG
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 2
18139: NEG
18140: PUSH
18141: LD_INT 0
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 2
18150: NEG
18151: PUSH
18152: LD_INT 1
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 2
18162: NEG
18163: PUSH
18164: LD_INT 2
18166: NEG
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18193: LD_ADDR_VAR 0 21
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: LD_INT 2
18278: NEG
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 2
18289: NEG
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 2
18328: PUSH
18329: LD_INT 2
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 1
18358: NEG
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 2
18369: NEG
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 2
18380: NEG
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 2
18392: NEG
18393: PUSH
18394: LD_INT 2
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18423: LD_ADDR_VAR 0 22
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 1
18481: NEG
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 1
18492: NEG
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 1
18504: NEG
18505: PUSH
18506: LD_INT 2
18508: NEG
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: LD_INT 2
18519: NEG
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 2
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: LD_INT 2
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 1
18588: NEG
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 2
18599: NEG
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 2
18610: NEG
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 2
18622: NEG
18623: PUSH
18624: LD_INT 2
18626: NEG
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18653: LD_ADDR_VAR 0 23
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: PUSH
18736: LD_INT 2
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 2
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 2
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: NEG
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 2
18829: NEG
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 2
18840: NEG
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: LD_INT 2
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: LD_INT 3
18868: NEG
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: LD_INT 3
18880: NEG
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 2
18891: NEG
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 1
18902: NEG
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18933: LD_ADDR_VAR 0 24
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: LD_INT 2
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 1
19098: NEG
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 2
19109: NEG
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: LD_INT 1
19124: NEG
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 2
19132: NEG
19133: PUSH
19134: LD_INT 2
19136: NEG
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 1
19158: NEG
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 3
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19209: LD_ADDR_VAR 0 25
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: LD_INT 1
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: PUSH
19238: LD_INT 0
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: LD_INT 0
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 1
19282: NEG
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: LD_INT 2
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 2
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 2
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 1
19374: NEG
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 2
19385: NEG
19386: PUSH
19387: LD_INT 0
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: LD_INT 2
19412: NEG
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 3
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: LD_INT 3
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: LD_INT 3
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19483: LD_ADDR_VAR 0 26
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: LD_INT 0
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: LD_INT 1
19556: NEG
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 2
19568: NEG
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 1
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: NEG
19683: PUSH
19684: LD_INT 2
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: LD_INT 3
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: LD_INT 3
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 1
19714: NEG
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 2
19725: NEG
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19759: LD_ADDR_VAR 0 27
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 2
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: LD_INT 2
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: NEG
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 2
19946: NEG
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: NEG
19959: PUSH
19960: LD_INT 2
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 1
19970: NEG
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 2
19981: NEG
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 3
19992: NEG
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 3
20004: NEG
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20039: LD_ADDR_VAR 0 28
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: LD_INT 1
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: NEG
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 2
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 2
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: LD_INT 1
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 2
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 2
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 0
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 2
20226: NEG
20227: PUSH
20228: LD_INT 1
20230: NEG
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: LD_INT 2
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: NEG
20251: PUSH
20252: LD_INT 3
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: LD_INT 3
20266: NEG
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 3
20274: NEG
20275: PUSH
20276: LD_INT 1
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 3
20286: NEG
20287: PUSH
20288: LD_INT 2
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20321: LD_ADDR_VAR 0 29
20325: PUSH
20326: LD_INT 0
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 0
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 1
20379: NEG
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: NEG
20403: PUSH
20404: LD_INT 2
20406: NEG
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: LD_INT 2
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: LD_INT 1
20428: NEG
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 1
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: NEG
20512: PUSH
20513: LD_INT 3
20515: NEG
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: LD_INT 1
20526: NEG
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 3
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 3
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: LD_INT 2
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 3
20565: NEG
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20600: LD_ADDR_VAR 0 30
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: LD_INT 1
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: LD_INT 1
20673: NEG
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 2
20685: NEG
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 2
20766: NEG
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: NEG
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 1
20789: NEG
20790: PUSH
20791: LD_INT 3
20793: NEG
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 2
20804: NEG
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 3
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 3
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 3
20843: NEG
20844: PUSH
20845: LD_INT 1
20847: NEG
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20878: LD_ADDR_VAR 0 31
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: NEG
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: LD_INT 2
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: LD_INT 3
21071: NEG
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: LD_INT 1
21082: NEG
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 3
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: LD_INT 3
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 3
21121: NEG
21122: PUSH
21123: LD_INT 2
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21156: LD_ADDR_VAR 0 32
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 1
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: NEG
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 1
21225: NEG
21226: PUSH
21227: LD_INT 1
21229: NEG
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: LD_INT 2
21241: NEG
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: LD_INT 2
21252: NEG
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: NEG
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: NEG
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: LD_INT 3
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 2
21360: NEG
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 3
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 3
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 3
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21434: LD_ADDR_VAR 0 33
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: NEG
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 2
21624: NEG
21625: PUSH
21626: LD_INT 3
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 2
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: LD_INT 3
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 3
21678: NEG
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21713: LD_ADDR_VAR 0 34
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: LD_INT 1
21786: NEG
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: LD_INT 2
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: NEG
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 2
21880: NEG
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 2
21892: NEG
21893: PUSH
21894: LD_INT 2
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 3
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 3
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 3
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 2
21947: NEG
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 3
21958: NEG
21959: PUSH
21960: LD_INT 1
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21993: LD_ADDR_VAR 0 35
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: NEG
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 2
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 2
22084: NEG
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22105: LD_ADDR_VAR 0 36
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: LD_INT 0
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: LD_INT 1
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: NEG
22187: PUSH
22188: LD_INT 2
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: LD_INT 2
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22217: LD_ADDR_VAR 0 37
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 0
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 1
22309: NEG
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22329: LD_ADDR_VAR 0 38
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 2
22420: NEG
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22441: LD_ADDR_VAR 0 39
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 1
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22553: LD_ADDR_VAR 0 40
22557: PUSH
22558: LD_INT 0
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 0
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 0
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: NEG
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22665: LD_ADDR_VAR 0 41
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: NEG
22735: PUSH
22736: LD_INT 1
22738: NEG
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: LD_INT 2
22750: NEG
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 2
22820: NEG
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 2
22831: NEG
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 2
22843: NEG
22844: PUSH
22845: LD_INT 2
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 2
22855: NEG
22856: PUSH
22857: LD_INT 3
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: LD_INT 1
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 3
22898: PUSH
22899: LD_INT 2
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: LD_INT 3
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: NEG
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 3
22939: NEG
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 3
22950: NEG
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 3
22962: NEG
22963: PUSH
22964: LD_INT 2
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 3
22974: NEG
22975: PUSH
22976: LD_INT 3
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23015: LD_ADDR_VAR 0 42
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 1
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 2
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: LD_INT 2
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 2
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: LD_INT 3
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 3
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: LD_INT 3
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: LD_INT 2
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: LD_INT 3
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: LD_INT 3
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 3
23312: NEG
23313: PUSH
23314: LD_INT 2
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 3
23324: NEG
23325: PUSH
23326: LD_INT 3
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23365: LD_ADDR_VAR 0 43
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 0
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: LD_INT 2
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: LD_INT 2
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 2
23531: NEG
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 2
23542: NEG
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: LD_INT 3
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 3
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 3
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: LD_INT 1
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: PUSH
23620: LD_INT 3
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: LD_INT 3
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: NEG
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 3
23661: NEG
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 3
23672: NEG
23673: PUSH
23674: LD_INT 1
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23713: LD_ADDR_VAR 0 44
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: LD_INT 2
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: LD_INT 1
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 2
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: NEG
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 2
23868: NEG
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: NEG
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 2
23891: NEG
23892: PUSH
23893: LD_INT 2
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: LD_INT 3
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 3
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 3
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 3
23956: PUSH
23957: LD_INT 3
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: PUSH
23967: LD_INT 3
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: NEG
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 3
23987: NEG
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 3
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 3
24010: NEG
24011: PUSH
24012: LD_INT 2
24014: NEG
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 3
24022: NEG
24023: PUSH
24024: LD_INT 3
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24063: LD_ADDR_VAR 0 45
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: LD_INT 2
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 2
24229: NEG
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: LD_INT 2
24245: NEG
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 2
24253: NEG
24254: PUSH
24255: LD_INT 3
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 3
24269: NEG
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 3
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 3
24309: PUSH
24310: LD_INT 3
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: LD_INT 3
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: LD_INT 3
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: LD_INT 3
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 3
24360: NEG
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 3
24372: NEG
24373: PUSH
24374: LD_INT 3
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24413: LD_ADDR_VAR 0 46
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: LD_INT 2
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: LD_INT 2
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 2
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 2
24579: NEG
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 2
24590: NEG
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: LD_INT 3
24606: NEG
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: LD_INT 3
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 3
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 3
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: LD_INT 3
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 3
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: LD_INT 2
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 3
24709: NEG
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 3
24720: NEG
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24761: LD_ADDR_VAR 0 47
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: LD_INT 2
24846: NEG
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: LD_INT 2
24857: NEG
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 2
24876: NEG
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: LD_INT 2
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24912: LD_ADDR_VAR 0 48
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25059: LD_ADDR_VAR 0 49
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25203: LD_ADDR_VAR 0 50
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 2
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25347: LD_ADDR_VAR 0 51
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 2
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 2
25459: NEG
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: NEG
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25494: LD_ADDR_VAR 0 52
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: LD_INT 0
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: LD_INT 2
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: NEG
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: NEG
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25645: LD_ADDR_VAR 0 53
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 2
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 2
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: LD_INT 2
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25875: LD_ADDR_VAR 0 54
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 2
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: LD_INT 2
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26105: LD_ADDR_VAR 0 55
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 2
26281: NEG
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: NEG
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26335: LD_ADDR_VAR 0 56
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 2
26420: NEG
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: LD_INT 2
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 2
26511: NEG
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: NEG
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: LD_INT 2
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26565: LD_ADDR_VAR 0 57
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: LD_INT 2
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: LD_INT 2
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 2
26741: NEG
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: NEG
26765: PUSH
26766: LD_INT 2
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26795: LD_ADDR_VAR 0 58
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: NEG
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 2
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 2
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 2
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 2
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 2
26971: NEG
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: NEG
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 2
26994: NEG
26995: PUSH
26996: LD_INT 2
26998: NEG
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27025: LD_ADDR_VAR 0 59
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27113: LD_ADDR_VAR 0 60
27117: PUSH
27118: LD_INT 0
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27201: LD_ADDR_VAR 0 61
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27289: LD_ADDR_VAR 0 62
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27377: LD_ADDR_VAR 0 63
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27465: LD_ADDR_VAR 0 64
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
// end ; 1 :
27553: GO 33450
27555: LD_INT 1
27557: DOUBLE
27558: EQUAL
27559: IFTRUE 27563
27561: GO 30186
27563: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27564: LD_ADDR_VAR 0 11
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: LD_INT 3
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 3
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27608: LD_ADDR_VAR 0 12
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 3
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27649: LD_ADDR_VAR 0 13
27653: PUSH
27654: LD_INT 3
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 3
27666: PUSH
27667: LD_INT 3
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27689: LD_ADDR_VAR 0 14
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 3
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 3
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27730: LD_ADDR_VAR 0 15
27734: PUSH
27735: LD_INT 2
27737: NEG
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 3
27748: NEG
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 3
27759: NEG
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27774: LD_ADDR_VAR 0 16
27778: PUSH
27779: LD_INT 2
27781: NEG
27782: PUSH
27783: LD_INT 3
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 3
27793: NEG
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 3
27805: NEG
27806: PUSH
27807: LD_INT 3
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27820: LD_ADDR_VAR 0 17
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 3
27831: NEG
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: LD_INT 3
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: LD_INT 2
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27864: LD_ADDR_VAR 0 18
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 3
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 3
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27905: LD_ADDR_VAR 0 19
27909: PUSH
27910: LD_INT 3
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 3
27922: PUSH
27923: LD_INT 3
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 3
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27945: LD_ADDR_VAR 0 20
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27986: LD_ADDR_VAR 0 21
27990: PUSH
27991: LD_INT 2
27993: NEG
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 3
28004: NEG
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 3
28015: NEG
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28030: LD_ADDR_VAR 0 22
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: LD_INT 3
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 3
28049: NEG
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 3
28061: NEG
28062: PUSH
28063: LD_INT 3
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28076: LD_ADDR_VAR 0 23
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 3
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: LD_INT 4
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: LD_INT 3
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28120: LD_ADDR_VAR 0 24
28124: PUSH
28125: LD_INT 3
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 3
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 4
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28161: LD_ADDR_VAR 0 25
28165: PUSH
28166: LD_INT 3
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 4
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: LD_INT 4
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28201: LD_ADDR_VAR 0 26
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 4
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: LD_INT 3
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28242: LD_ADDR_VAR 0 27
28246: PUSH
28247: LD_INT 3
28249: NEG
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 3
28260: NEG
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 4
28271: NEG
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28286: LD_ADDR_VAR 0 28
28290: PUSH
28291: LD_INT 3
28293: NEG
28294: PUSH
28295: LD_INT 3
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 3
28305: NEG
28306: PUSH
28307: LD_INT 4
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 4
28317: NEG
28318: PUSH
28319: LD_INT 3
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28332: LD_ADDR_VAR 0 29
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: LD_INT 3
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: LD_INT 3
28354: NEG
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: LD_INT 4
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: LD_INT 4
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 3
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 5
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 5
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 4
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 6
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 6
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 5
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28487: LD_ADDR_VAR 0 30
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 3
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 4
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 4
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 4
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 5
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 5
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 5
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 6
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 6
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28630: LD_ADDR_VAR 0 31
28634: PUSH
28635: LD_INT 3
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 3
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 4
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 4
28677: PUSH
28678: LD_INT 4
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 3
28687: PUSH
28688: LD_INT 4
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 5
28697: PUSH
28698: LD_INT 4
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 5
28707: PUSH
28708: LD_INT 5
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 4
28717: PUSH
28718: LD_INT 5
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 6
28727: PUSH
28728: LD_INT 5
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 6
28737: PUSH
28738: LD_INT 6
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 5
28747: PUSH
28748: LD_INT 6
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28769: LD_ADDR_VAR 0 32
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 3
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 3
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 4
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 4
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 3
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 5
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: LD_INT 4
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 6
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 6
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: LD_INT 5
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28912: LD_ADDR_VAR 0 33
28916: PUSH
28917: LD_INT 2
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 3
28930: NEG
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 3
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 3
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 4
28964: NEG
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 4
28975: NEG
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 4
28987: NEG
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 5
28998: NEG
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 5
29009: NEG
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 5
29021: NEG
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 6
29032: NEG
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 6
29043: NEG
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29067: LD_ADDR_VAR 0 34
29071: PUSH
29072: LD_INT 2
29074: NEG
29075: PUSH
29076: LD_INT 3
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: NEG
29087: PUSH
29088: LD_INT 2
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 3
29098: NEG
29099: PUSH
29100: LD_INT 3
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 3
29110: NEG
29111: PUSH
29112: LD_INT 4
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 4
29122: NEG
29123: PUSH
29124: LD_INT 3
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 4
29134: NEG
29135: PUSH
29136: LD_INT 4
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 4
29146: NEG
29147: PUSH
29148: LD_INT 5
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 5
29158: NEG
29159: PUSH
29160: LD_INT 4
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 5
29170: NEG
29171: PUSH
29172: LD_INT 5
29174: NEG
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 5
29182: NEG
29183: PUSH
29184: LD_INT 6
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 6
29194: NEG
29195: PUSH
29196: LD_INT 5
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 6
29206: NEG
29207: PUSH
29208: LD_INT 6
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29230: LD_ADDR_VAR 0 41
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: LD_INT 3
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: LIST
29273: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29274: LD_ADDR_VAR 0 42
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29315: LD_ADDR_VAR 0 43
29319: PUSH
29320: LD_INT 2
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 3
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: LD_INT 3
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29355: LD_ADDR_VAR 0 44
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: LD_INT 2
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: LIST
29395: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29396: LD_ADDR_VAR 0 45
29400: PUSH
29401: LD_INT 2
29403: NEG
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 3
29425: NEG
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29440: LD_ADDR_VAR 0 46
29444: PUSH
29445: LD_INT 2
29447: NEG
29448: PUSH
29449: LD_INT 2
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: NEG
29460: PUSH
29461: LD_INT 3
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: LD_INT 2
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29486: LD_ADDR_VAR 0 47
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 3
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29519: LD_ADDR_VAR 0 48
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: LD_INT 2
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29550: LD_ADDR_VAR 0 49
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29579: LD_ADDR_VAR 0 50
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: LD_INT 3
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: LD_INT 3
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29608: LD_ADDR_VAR 0 51
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 2
29626: NEG
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29639: LD_ADDR_VAR 0 52
29643: PUSH
29644: LD_INT 3
29646: NEG
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 3
29658: NEG
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29672: LD_ADDR_VAR 0 53
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: LD_INT 3
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 3
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: LD_INT 2
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29716: LD_ADDR_VAR 0 54
29720: PUSH
29721: LD_INT 2
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29757: LD_ADDR_VAR 0 55
29761: PUSH
29762: LD_INT 3
29764: PUSH
29765: LD_INT 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: LD_INT 3
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29797: LD_ADDR_VAR 0 56
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 3
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29838: LD_ADDR_VAR 0 57
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 3
29856: NEG
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 3
29867: NEG
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29882: LD_ADDR_VAR 0 58
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: LD_INT 3
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 3
29901: NEG
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 3
29913: NEG
29914: PUSH
29915: LD_INT 3
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29928: LD_ADDR_VAR 0 59
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: LD_INT 2
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: LD_INT 2
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29972: LD_ADDR_VAR 0 60
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30013: LD_ADDR_VAR 0 61
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 2
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30053: LD_ADDR_VAR 0 62
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 2
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30094: LD_ADDR_VAR 0 63
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 2
30123: NEG
30124: PUSH
30125: LD_INT 1
30127: NEG
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30138: LD_ADDR_VAR 0 64
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: LD_INT 2
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: ST_TO_ADDR
// end ; 2 :
30184: GO 33450
30186: LD_INT 2
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 33449
30194: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30195: LD_ADDR_VAR 0 29
30199: PUSH
30200: LD_INT 4
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 4
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 5
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 5
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 4
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 3
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: LD_INT 2
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 5
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 3
30295: PUSH
30296: LD_INT 3
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 4
30315: PUSH
30316: LD_INT 3
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 4
30325: PUSH
30326: LD_INT 4
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: LD_INT 4
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 4
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: LD_INT 4
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 4
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 4
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: LD_INT 5
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: LD_INT 5
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: LD_INT 4
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: LD_INT 3
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 2
30457: PUSH
30458: LD_INT 5
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 2
30467: NEG
30468: PUSH
30469: LD_INT 3
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 3
30478: NEG
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 2
30501: NEG
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: NEG
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 3
30523: NEG
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 4
30534: NEG
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 4
30545: NEG
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 4
30557: NEG
30558: PUSH
30559: LD_INT 2
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: LD_INT 2
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 4
30580: NEG
30581: PUSH
30582: LD_INT 4
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 4
30592: NEG
30593: PUSH
30594: LD_INT 5
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 3
30604: NEG
30605: PUSH
30606: LD_INT 4
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 3
30616: NEG
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: LD_INT 3
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 5
30640: NEG
30641: PUSH
30642: LD_INT 4
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 5
30652: NEG
30653: PUSH
30654: LD_INT 5
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: LD_INT 5
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 5
30676: NEG
30677: PUSH
30678: LD_INT 3
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30733: LD_ADDR_VAR 0 30
30737: PUSH
30738: LD_INT 4
30740: PUSH
30741: LD_INT 4
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: LD_INT 3
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 5
30760: PUSH
30761: LD_INT 4
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 5
30770: PUSH
30771: LD_INT 5
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 4
30780: PUSH
30781: LD_INT 5
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 3
30790: PUSH
30791: LD_INT 4
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 5
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 3
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: LD_INT 3
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: LD_INT 4
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: LD_INT 4
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: LD_INT 4
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 4
30923: NEG
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 4
30934: NEG
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 3
30946: NEG
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 5
30979: NEG
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 5
30990: NEG
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 5
31002: NEG
31003: PUSH
31004: LD_INT 2
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: LD_INT 4
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 2
31049: NEG
31050: PUSH
31051: LD_INT 3
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: NEG
31062: PUSH
31063: LD_INT 2
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 3
31073: NEG
31074: PUSH
31075: LD_INT 2
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 4
31085: NEG
31086: PUSH
31087: LD_INT 3
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 4
31097: NEG
31098: PUSH
31099: LD_INT 4
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: LD_INT 4
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 4
31121: NEG
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 4
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 5
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 4
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 3
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: LD_INT 4
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: LD_INT 5
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: LD_INT 3
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: NEG
31224: PUSH
31225: LD_INT 5
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31280: LD_ADDR_VAR 0 31
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: LD_INT 4
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: LD_INT 4
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 5
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: LD_INT 4
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: LD_INT 5
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 2
31369: NEG
31370: PUSH
31371: LD_INT 3
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 3
31380: NEG
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 4
31436: NEG
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 4
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 4
31459: NEG
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 4
31482: NEG
31483: PUSH
31484: LD_INT 4
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 4
31494: NEG
31495: PUSH
31496: LD_INT 5
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: NEG
31507: PUSH
31508: LD_INT 4
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 4
31530: NEG
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 5
31542: NEG
31543: PUSH
31544: LD_INT 4
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 5
31554: NEG
31555: PUSH
31556: LD_INT 5
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 3
31566: NEG
31567: PUSH
31568: LD_INT 5
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 5
31578: NEG
31579: PUSH
31580: LD_INT 3
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 4
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 3
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: LD_INT 3
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 4
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 2
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: LD_INT 4
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 4
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 4
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 5
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 5
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 4
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 5
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31830: LD_ADDR_VAR 0 32
31834: PUSH
31835: LD_INT 4
31837: NEG
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 4
31848: NEG
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 3
31860: NEG
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: NEG
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 4
31882: NEG
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 5
31893: NEG
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 5
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 5
31916: NEG
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 3
31939: NEG
31940: PUSH
31941: LD_INT 3
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 3
31951: NEG
31952: PUSH
31953: LD_INT 4
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: LD_INT 3
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: NEG
31976: PUSH
31977: LD_INT 2
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 3
31987: NEG
31988: PUSH
31989: LD_INT 2
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 4
31999: NEG
32000: PUSH
32001: LD_INT 3
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 4
32011: NEG
32012: PUSH
32013: LD_INT 4
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: LD_INT 4
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 4
32035: NEG
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: LD_INT 4
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 5
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 4
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 3
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: LD_INT 3
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: LD_INT 4
32106: NEG
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: LD_INT 5
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 3
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: LD_INT 5
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 4
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 4
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 3
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 4
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 4
32242: PUSH
32243: LD_INT 4
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 4
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 5
32262: PUSH
32263: LD_INT 4
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 5
32272: PUSH
32273: LD_INT 5
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 4
32282: PUSH
32283: LD_INT 5
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 4
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 5
32312: PUSH
32313: LD_INT 3
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32377: LD_ADDR_VAR 0 33
32381: PUSH
32382: LD_INT 4
32384: NEG
32385: PUSH
32386: LD_INT 4
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 4
32396: NEG
32397: PUSH
32398: LD_INT 5
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 3
32408: NEG
32409: PUSH
32410: LD_INT 4
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 3
32420: NEG
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 4
32432: NEG
32433: PUSH
32434: LD_INT 3
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 5
32444: NEG
32445: PUSH
32446: LD_INT 4
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 5
32456: NEG
32457: PUSH
32458: LD_INT 5
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 3
32468: NEG
32469: PUSH
32470: LD_INT 5
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 5
32480: NEG
32481: PUSH
32482: LD_INT 3
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 3
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: LD_INT 3
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: LD_INT 3
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: LD_INT 4
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 2
32582: NEG
32583: PUSH
32584: LD_INT 4
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 4
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 5
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 5
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 4
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 3
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 5
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 4
32707: PUSH
32708: LD_INT 3
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 4
32717: PUSH
32718: LD_INT 4
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: LD_INT 4
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 4
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 4
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: LD_INT 4
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: LD_INT 5
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32915: LD_ADDR_VAR 0 34
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 4
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 5
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: LD_INT 4
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: LD_INT 3
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 3
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: LD_INT 4
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: LD_INT 5
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 3
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 5
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 3
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 4
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 3
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 4
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 4
33117: PUSH
33118: LD_INT 4
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 5
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: LD_INT 5
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 4
33157: PUSH
33158: LD_INT 5
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: LD_INT 4
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: LD_INT 3
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 5
33187: PUSH
33188: LD_INT 3
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 0
33217: PUSH
33218: LD_INT 2
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 4
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: NEG
33258: PUSH
33259: LD_INT 3
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 4
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: NEG
33290: PUSH
33291: LD_INT 2
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 4
33300: NEG
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 4
33311: NEG
33312: PUSH
33313: LD_INT 1
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 3
33323: NEG
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 3
33334: NEG
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 4
33345: NEG
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 5
33356: NEG
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 5
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 5
33379: NEG
33380: PUSH
33381: LD_INT 2
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 3
33391: NEG
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
// end ; end ;
33447: GO 33450
33449: POP
// case btype of b_depot , b_warehouse :
33450: LD_VAR 0 1
33454: PUSH
33455: LD_INT 0
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33469
33461: LD_INT 1
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33469
33467: GO 33670
33469: POP
// case nation of nation_american :
33470: LD_VAR 0 5
33474: PUSH
33475: LD_INT 1
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33483
33481: GO 33539
33483: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33484: LD_ADDR_VAR 0 9
33488: PUSH
33489: LD_VAR 0 11
33493: PUSH
33494: LD_VAR 0 12
33498: PUSH
33499: LD_VAR 0 13
33503: PUSH
33504: LD_VAR 0 14
33508: PUSH
33509: LD_VAR 0 15
33513: PUSH
33514: LD_VAR 0 16
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: PUSH
33527: LD_VAR 0 4
33531: PUSH
33532: LD_INT 1
33534: PLUS
33535: ARRAY
33536: ST_TO_ADDR
33537: GO 33668
33539: LD_INT 2
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33603
33547: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33548: LD_ADDR_VAR 0 9
33552: PUSH
33553: LD_VAR 0 17
33557: PUSH
33558: LD_VAR 0 18
33562: PUSH
33563: LD_VAR 0 19
33567: PUSH
33568: LD_VAR 0 20
33572: PUSH
33573: LD_VAR 0 21
33577: PUSH
33578: LD_VAR 0 22
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: PUSH
33591: LD_VAR 0 4
33595: PUSH
33596: LD_INT 1
33598: PLUS
33599: ARRAY
33600: ST_TO_ADDR
33601: GO 33668
33603: LD_INT 3
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33667
33611: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33612: LD_ADDR_VAR 0 9
33616: PUSH
33617: LD_VAR 0 23
33621: PUSH
33622: LD_VAR 0 24
33626: PUSH
33627: LD_VAR 0 25
33631: PUSH
33632: LD_VAR 0 26
33636: PUSH
33637: LD_VAR 0 27
33641: PUSH
33642: LD_VAR 0 28
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: PUSH
33655: LD_VAR 0 4
33659: PUSH
33660: LD_INT 1
33662: PLUS
33663: ARRAY
33664: ST_TO_ADDR
33665: GO 33668
33667: POP
33668: GO 34223
33670: LD_INT 2
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33684
33676: LD_INT 3
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33740
33684: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33685: LD_ADDR_VAR 0 9
33689: PUSH
33690: LD_VAR 0 29
33694: PUSH
33695: LD_VAR 0 30
33699: PUSH
33700: LD_VAR 0 31
33704: PUSH
33705: LD_VAR 0 32
33709: PUSH
33710: LD_VAR 0 33
33714: PUSH
33715: LD_VAR 0 34
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: PUSH
33728: LD_VAR 0 4
33732: PUSH
33733: LD_INT 1
33735: PLUS
33736: ARRAY
33737: ST_TO_ADDR
33738: GO 34223
33740: LD_INT 16
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33802
33746: LD_INT 17
33748: DOUBLE
33749: EQUAL
33750: IFTRUE 33802
33752: LD_INT 18
33754: DOUBLE
33755: EQUAL
33756: IFTRUE 33802
33758: LD_INT 19
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33802
33764: LD_INT 22
33766: DOUBLE
33767: EQUAL
33768: IFTRUE 33802
33770: LD_INT 20
33772: DOUBLE
33773: EQUAL
33774: IFTRUE 33802
33776: LD_INT 21
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33802
33782: LD_INT 23
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33802
33788: LD_INT 24
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33802
33794: LD_INT 25
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33802
33800: GO 33858
33802: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33803: LD_ADDR_VAR 0 9
33807: PUSH
33808: LD_VAR 0 35
33812: PUSH
33813: LD_VAR 0 36
33817: PUSH
33818: LD_VAR 0 37
33822: PUSH
33823: LD_VAR 0 38
33827: PUSH
33828: LD_VAR 0 39
33832: PUSH
33833: LD_VAR 0 40
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: PUSH
33846: LD_VAR 0 4
33850: PUSH
33851: LD_INT 1
33853: PLUS
33854: ARRAY
33855: ST_TO_ADDR
33856: GO 34223
33858: LD_INT 6
33860: DOUBLE
33861: EQUAL
33862: IFTRUE 33914
33864: LD_INT 7
33866: DOUBLE
33867: EQUAL
33868: IFTRUE 33914
33870: LD_INT 8
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33914
33876: LD_INT 13
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33914
33882: LD_INT 12
33884: DOUBLE
33885: EQUAL
33886: IFTRUE 33914
33888: LD_INT 15
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33914
33894: LD_INT 11
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33914
33900: LD_INT 14
33902: DOUBLE
33903: EQUAL
33904: IFTRUE 33914
33906: LD_INT 10
33908: DOUBLE
33909: EQUAL
33910: IFTRUE 33914
33912: GO 33970
33914: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33915: LD_ADDR_VAR 0 9
33919: PUSH
33920: LD_VAR 0 41
33924: PUSH
33925: LD_VAR 0 42
33929: PUSH
33930: LD_VAR 0 43
33934: PUSH
33935: LD_VAR 0 44
33939: PUSH
33940: LD_VAR 0 45
33944: PUSH
33945: LD_VAR 0 46
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: PUSH
33958: LD_VAR 0 4
33962: PUSH
33963: LD_INT 1
33965: PLUS
33966: ARRAY
33967: ST_TO_ADDR
33968: GO 34223
33970: LD_INT 36
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 33978
33976: GO 34034
33978: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33979: LD_ADDR_VAR 0 9
33983: PUSH
33984: LD_VAR 0 47
33988: PUSH
33989: LD_VAR 0 48
33993: PUSH
33994: LD_VAR 0 49
33998: PUSH
33999: LD_VAR 0 50
34003: PUSH
34004: LD_VAR 0 51
34008: PUSH
34009: LD_VAR 0 52
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: PUSH
34022: LD_VAR 0 4
34026: PUSH
34027: LD_INT 1
34029: PLUS
34030: ARRAY
34031: ST_TO_ADDR
34032: GO 34223
34034: LD_INT 4
34036: DOUBLE
34037: EQUAL
34038: IFTRUE 34060
34040: LD_INT 5
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34060
34046: LD_INT 34
34048: DOUBLE
34049: EQUAL
34050: IFTRUE 34060
34052: LD_INT 37
34054: DOUBLE
34055: EQUAL
34056: IFTRUE 34060
34058: GO 34116
34060: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34061: LD_ADDR_VAR 0 9
34065: PUSH
34066: LD_VAR 0 53
34070: PUSH
34071: LD_VAR 0 54
34075: PUSH
34076: LD_VAR 0 55
34080: PUSH
34081: LD_VAR 0 56
34085: PUSH
34086: LD_VAR 0 57
34090: PUSH
34091: LD_VAR 0 58
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: PUSH
34104: LD_VAR 0 4
34108: PUSH
34109: LD_INT 1
34111: PLUS
34112: ARRAY
34113: ST_TO_ADDR
34114: GO 34223
34116: LD_INT 31
34118: DOUBLE
34119: EQUAL
34120: IFTRUE 34166
34122: LD_INT 32
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34166
34128: LD_INT 33
34130: DOUBLE
34131: EQUAL
34132: IFTRUE 34166
34134: LD_INT 27
34136: DOUBLE
34137: EQUAL
34138: IFTRUE 34166
34140: LD_INT 26
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34166
34146: LD_INT 28
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34166
34152: LD_INT 29
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34166
34158: LD_INT 30
34160: DOUBLE
34161: EQUAL
34162: IFTRUE 34166
34164: GO 34222
34166: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34167: LD_ADDR_VAR 0 9
34171: PUSH
34172: LD_VAR 0 59
34176: PUSH
34177: LD_VAR 0 60
34181: PUSH
34182: LD_VAR 0 61
34186: PUSH
34187: LD_VAR 0 62
34191: PUSH
34192: LD_VAR 0 63
34196: PUSH
34197: LD_VAR 0 64
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: PUSH
34210: LD_VAR 0 4
34214: PUSH
34215: LD_INT 1
34217: PLUS
34218: ARRAY
34219: ST_TO_ADDR
34220: GO 34223
34222: POP
// temp_list2 = [ ] ;
34223: LD_ADDR_VAR 0 10
34227: PUSH
34228: EMPTY
34229: ST_TO_ADDR
// for i in temp_list do
34230: LD_ADDR_VAR 0 8
34234: PUSH
34235: LD_VAR 0 9
34239: PUSH
34240: FOR_IN
34241: IFFALSE 34293
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34243: LD_ADDR_VAR 0 10
34247: PUSH
34248: LD_VAR 0 10
34252: PUSH
34253: LD_VAR 0 8
34257: PUSH
34258: LD_INT 1
34260: ARRAY
34261: PUSH
34262: LD_VAR 0 2
34266: PLUS
34267: PUSH
34268: LD_VAR 0 8
34272: PUSH
34273: LD_INT 2
34275: ARRAY
34276: PUSH
34277: LD_VAR 0 3
34281: PLUS
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: ADD
34290: ST_TO_ADDR
34291: GO 34240
34293: POP
34294: POP
// result = temp_list2 ;
34295: LD_ADDR_VAR 0 7
34299: PUSH
34300: LD_VAR 0 10
34304: ST_TO_ADDR
// end ;
34305: LD_VAR 0 7
34309: RET
// export function EnemyInRange ( unit , dist ) ; begin
34310: LD_INT 0
34312: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34313: LD_ADDR_VAR 0 3
34317: PUSH
34318: LD_VAR 0 1
34322: PPUSH
34323: CALL_OW 255
34327: PPUSH
34328: LD_VAR 0 1
34332: PPUSH
34333: CALL_OW 250
34337: PPUSH
34338: LD_VAR 0 1
34342: PPUSH
34343: CALL_OW 251
34347: PPUSH
34348: LD_VAR 0 2
34352: PPUSH
34353: CALL 7683 0 4
34357: PUSH
34358: LD_INT 4
34360: ARRAY
34361: ST_TO_ADDR
// end ;
34362: LD_VAR 0 3
34366: RET
// export function PlayerSeeMe ( unit ) ; begin
34367: LD_INT 0
34369: PPUSH
// result := See ( your_side , unit ) ;
34370: LD_ADDR_VAR 0 2
34374: PUSH
34375: LD_OWVAR 2
34379: PPUSH
34380: LD_VAR 0 1
34384: PPUSH
34385: CALL_OW 292
34389: ST_TO_ADDR
// end ;
34390: LD_VAR 0 2
34394: RET
// export function ReverseDir ( unit ) ; begin
34395: LD_INT 0
34397: PPUSH
// if not unit then
34398: LD_VAR 0 1
34402: NOT
34403: IFFALSE 34407
// exit ;
34405: GO 34430
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34407: LD_ADDR_VAR 0 2
34411: PUSH
34412: LD_VAR 0 1
34416: PPUSH
34417: CALL_OW 254
34421: PUSH
34422: LD_INT 3
34424: PLUS
34425: PUSH
34426: LD_INT 6
34428: MOD
34429: ST_TO_ADDR
// end ;
34430: LD_VAR 0 2
34434: RET
// export function ReverseArray ( array ) ; var i ; begin
34435: LD_INT 0
34437: PPUSH
34438: PPUSH
// if not array then
34439: LD_VAR 0 1
34443: NOT
34444: IFFALSE 34448
// exit ;
34446: GO 34503
// result := [ ] ;
34448: LD_ADDR_VAR 0 2
34452: PUSH
34453: EMPTY
34454: ST_TO_ADDR
// for i := array downto 1 do
34455: LD_ADDR_VAR 0 3
34459: PUSH
34460: DOUBLE
34461: LD_VAR 0 1
34465: INC
34466: ST_TO_ADDR
34467: LD_INT 1
34469: PUSH
34470: FOR_DOWNTO
34471: IFFALSE 34501
// result := Join ( result , array [ i ] ) ;
34473: LD_ADDR_VAR 0 2
34477: PUSH
34478: LD_VAR 0 2
34482: PPUSH
34483: LD_VAR 0 1
34487: PUSH
34488: LD_VAR 0 3
34492: ARRAY
34493: PPUSH
34494: CALL 39168 0 2
34498: ST_TO_ADDR
34499: GO 34470
34501: POP
34502: POP
// end ;
34503: LD_VAR 0 2
34507: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34508: LD_INT 0
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
// if not unit or not hexes then
34516: LD_VAR 0 1
34520: NOT
34521: PUSH
34522: LD_VAR 0 2
34526: NOT
34527: OR
34528: IFFALSE 34532
// exit ;
34530: GO 34655
// dist := 9999 ;
34532: LD_ADDR_VAR 0 5
34536: PUSH
34537: LD_INT 9999
34539: ST_TO_ADDR
// for i = 1 to hexes do
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: DOUBLE
34546: LD_INT 1
34548: DEC
34549: ST_TO_ADDR
34550: LD_VAR 0 2
34554: PUSH
34555: FOR_TO
34556: IFFALSE 34643
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34558: LD_ADDR_VAR 0 6
34562: PUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: LD_VAR 0 2
34572: PUSH
34573: LD_VAR 0 4
34577: ARRAY
34578: PUSH
34579: LD_INT 1
34581: ARRAY
34582: PPUSH
34583: LD_VAR 0 2
34587: PUSH
34588: LD_VAR 0 4
34592: ARRAY
34593: PUSH
34594: LD_INT 2
34596: ARRAY
34597: PPUSH
34598: CALL_OW 297
34602: ST_TO_ADDR
// if tdist < dist then
34603: LD_VAR 0 6
34607: PUSH
34608: LD_VAR 0 5
34612: LESS
34613: IFFALSE 34641
// begin hex := hexes [ i ] ;
34615: LD_ADDR_VAR 0 8
34619: PUSH
34620: LD_VAR 0 2
34624: PUSH
34625: LD_VAR 0 4
34629: ARRAY
34630: ST_TO_ADDR
// dist := tdist ;
34631: LD_ADDR_VAR 0 5
34635: PUSH
34636: LD_VAR 0 6
34640: ST_TO_ADDR
// end ; end ;
34641: GO 34555
34643: POP
34644: POP
// result := hex ;
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_VAR 0 8
34654: ST_TO_ADDR
// end ;
34655: LD_VAR 0 3
34659: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34660: LD_INT 0
34662: PPUSH
34663: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34664: LD_VAR 0 1
34668: NOT
34669: PUSH
34670: LD_VAR 0 1
34674: PUSH
34675: LD_INT 21
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 23
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PPUSH
34699: CALL_OW 69
34703: IN
34704: NOT
34705: OR
34706: IFFALSE 34710
// exit ;
34708: GO 34757
// for i = 1 to 3 do
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: DOUBLE
34716: LD_INT 1
34718: DEC
34719: ST_TO_ADDR
34720: LD_INT 3
34722: PUSH
34723: FOR_TO
34724: IFFALSE 34755
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 250
34735: PPUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 251
34745: PPUSH
34746: LD_INT 1
34748: PPUSH
34749: CALL_OW 453
34753: GO 34723
34755: POP
34756: POP
// end ;
34757: LD_VAR 0 2
34761: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34762: LD_INT 0
34764: PPUSH
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
// if not unit or not enemy_unit then
34770: LD_VAR 0 1
34774: NOT
34775: PUSH
34776: LD_VAR 0 2
34780: NOT
34781: OR
34782: IFFALSE 34786
// exit ;
34784: GO 35253
// if GetLives ( i ) < 250 then
34786: LD_VAR 0 4
34790: PPUSH
34791: CALL_OW 256
34795: PUSH
34796: LD_INT 250
34798: LESS
34799: IFFALSE 34812
// begin ComAutodestruct ( i ) ;
34801: LD_VAR 0 4
34805: PPUSH
34806: CALL 34660 0 1
// exit ;
34810: GO 35253
// end ; x := GetX ( enemy_unit ) ;
34812: LD_ADDR_VAR 0 7
34816: PUSH
34817: LD_VAR 0 2
34821: PPUSH
34822: CALL_OW 250
34826: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34827: LD_ADDR_VAR 0 8
34831: PUSH
34832: LD_VAR 0 2
34836: PPUSH
34837: CALL_OW 251
34841: ST_TO_ADDR
// if not x or not y then
34842: LD_VAR 0 7
34846: NOT
34847: PUSH
34848: LD_VAR 0 8
34852: NOT
34853: OR
34854: IFFALSE 34858
// exit ;
34856: GO 35253
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34858: LD_ADDR_VAR 0 6
34862: PUSH
34863: LD_VAR 0 7
34867: PPUSH
34868: LD_INT 0
34870: PPUSH
34871: LD_INT 4
34873: PPUSH
34874: CALL_OW 272
34878: PUSH
34879: LD_VAR 0 8
34883: PPUSH
34884: LD_INT 0
34886: PPUSH
34887: LD_INT 4
34889: PPUSH
34890: CALL_OW 273
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_VAR 0 7
34903: PPUSH
34904: LD_INT 1
34906: PPUSH
34907: LD_INT 4
34909: PPUSH
34910: CALL_OW 272
34914: PUSH
34915: LD_VAR 0 8
34919: PPUSH
34920: LD_INT 1
34922: PPUSH
34923: LD_INT 4
34925: PPUSH
34926: CALL_OW 273
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_VAR 0 7
34939: PPUSH
34940: LD_INT 2
34942: PPUSH
34943: LD_INT 4
34945: PPUSH
34946: CALL_OW 272
34950: PUSH
34951: LD_VAR 0 8
34955: PPUSH
34956: LD_INT 2
34958: PPUSH
34959: LD_INT 4
34961: PPUSH
34962: CALL_OW 273
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_VAR 0 7
34975: PPUSH
34976: LD_INT 3
34978: PPUSH
34979: LD_INT 4
34981: PPUSH
34982: CALL_OW 272
34986: PUSH
34987: LD_VAR 0 8
34991: PPUSH
34992: LD_INT 3
34994: PPUSH
34995: LD_INT 4
34997: PPUSH
34998: CALL_OW 273
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_VAR 0 7
35011: PPUSH
35012: LD_INT 4
35014: PPUSH
35015: LD_INT 4
35017: PPUSH
35018: CALL_OW 272
35022: PUSH
35023: LD_VAR 0 8
35027: PPUSH
35028: LD_INT 4
35030: PPUSH
35031: LD_INT 4
35033: PPUSH
35034: CALL_OW 273
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_VAR 0 7
35047: PPUSH
35048: LD_INT 5
35050: PPUSH
35051: LD_INT 4
35053: PPUSH
35054: CALL_OW 272
35058: PUSH
35059: LD_VAR 0 8
35063: PPUSH
35064: LD_INT 5
35066: PPUSH
35067: LD_INT 4
35069: PPUSH
35070: CALL_OW 273
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
// for i = tmp downto 1 do
35087: LD_ADDR_VAR 0 4
35091: PUSH
35092: DOUBLE
35093: LD_VAR 0 6
35097: INC
35098: ST_TO_ADDR
35099: LD_INT 1
35101: PUSH
35102: FOR_DOWNTO
35103: IFFALSE 35204
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35105: LD_VAR 0 6
35109: PUSH
35110: LD_VAR 0 4
35114: ARRAY
35115: PUSH
35116: LD_INT 1
35118: ARRAY
35119: PPUSH
35120: LD_VAR 0 6
35124: PUSH
35125: LD_VAR 0 4
35129: ARRAY
35130: PUSH
35131: LD_INT 2
35133: ARRAY
35134: PPUSH
35135: CALL_OW 488
35139: NOT
35140: PUSH
35141: LD_VAR 0 6
35145: PUSH
35146: LD_VAR 0 4
35150: ARRAY
35151: PUSH
35152: LD_INT 1
35154: ARRAY
35155: PPUSH
35156: LD_VAR 0 6
35160: PUSH
35161: LD_VAR 0 4
35165: ARRAY
35166: PUSH
35167: LD_INT 2
35169: ARRAY
35170: PPUSH
35171: CALL_OW 428
35175: PUSH
35176: LD_INT 0
35178: NONEQUAL
35179: OR
35180: IFFALSE 35202
// tmp := Delete ( tmp , i ) ;
35182: LD_ADDR_VAR 0 6
35186: PUSH
35187: LD_VAR 0 6
35191: PPUSH
35192: LD_VAR 0 4
35196: PPUSH
35197: CALL_OW 3
35201: ST_TO_ADDR
35202: GO 35102
35204: POP
35205: POP
// j := GetClosestHex ( unit , tmp ) ;
35206: LD_ADDR_VAR 0 5
35210: PUSH
35211: LD_VAR 0 1
35215: PPUSH
35216: LD_VAR 0 6
35220: PPUSH
35221: CALL 34508 0 2
35225: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35226: LD_VAR 0 1
35230: PPUSH
35231: LD_VAR 0 5
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: PPUSH
35240: LD_VAR 0 5
35244: PUSH
35245: LD_INT 2
35247: ARRAY
35248: PPUSH
35249: CALL_OW 111
// end ;
35253: LD_VAR 0 3
35257: RET
// export function PrepareApemanSoldier ( ) ; begin
35258: LD_INT 0
35260: PPUSH
// uc_nation := 0 ;
35261: LD_ADDR_OWVAR 21
35265: PUSH
35266: LD_INT 0
35268: ST_TO_ADDR
// hc_sex := sex_male ;
35269: LD_ADDR_OWVAR 27
35273: PUSH
35274: LD_INT 1
35276: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35277: LD_ADDR_OWVAR 28
35281: PUSH
35282: LD_INT 15
35284: ST_TO_ADDR
// hc_gallery :=  ;
35285: LD_ADDR_OWVAR 33
35289: PUSH
35290: LD_STRING 
35292: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35293: LD_ADDR_OWVAR 31
35297: PUSH
35298: LD_INT 0
35300: PPUSH
35301: LD_INT 3
35303: PPUSH
35304: CALL_OW 12
35308: PUSH
35309: LD_INT 0
35311: PPUSH
35312: LD_INT 3
35314: PPUSH
35315: CALL_OW 12
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
// end ;
35332: LD_VAR 0 1
35336: RET
// export function PrepareApemanEngineer ( ) ; begin
35337: LD_INT 0
35339: PPUSH
// uc_nation := 0 ;
35340: LD_ADDR_OWVAR 21
35344: PUSH
35345: LD_INT 0
35347: ST_TO_ADDR
// hc_sex := sex_male ;
35348: LD_ADDR_OWVAR 27
35352: PUSH
35353: LD_INT 1
35355: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35356: LD_ADDR_OWVAR 28
35360: PUSH
35361: LD_INT 16
35363: ST_TO_ADDR
// hc_gallery :=  ;
35364: LD_ADDR_OWVAR 33
35368: PUSH
35369: LD_STRING 
35371: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35372: LD_ADDR_OWVAR 31
35376: PUSH
35377: LD_INT 0
35379: PPUSH
35380: LD_INT 3
35382: PPUSH
35383: CALL_OW 12
35387: PUSH
35388: LD_INT 0
35390: PPUSH
35391: LD_INT 3
35393: PPUSH
35394: CALL_OW 12
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: ST_TO_ADDR
// end ;
35411: LD_VAR 0 1
35415: RET
// export function PrepareApeman ( agressivity ) ; begin
35416: LD_INT 0
35418: PPUSH
// uc_side := 0 ;
35419: LD_ADDR_OWVAR 20
35423: PUSH
35424: LD_INT 0
35426: ST_TO_ADDR
// uc_nation := 0 ;
35427: LD_ADDR_OWVAR 21
35431: PUSH
35432: LD_INT 0
35434: ST_TO_ADDR
// hc_sex := sex_male ;
35435: LD_ADDR_OWVAR 27
35439: PUSH
35440: LD_INT 1
35442: ST_TO_ADDR
// hc_class := class_apeman ;
35443: LD_ADDR_OWVAR 28
35447: PUSH
35448: LD_INT 12
35450: ST_TO_ADDR
// hc_gallery :=  ;
35451: LD_ADDR_OWVAR 33
35455: PUSH
35456: LD_STRING 
35458: ST_TO_ADDR
// if agressivity = 0 then
35459: LD_VAR 0 1
35463: PUSH
35464: LD_INT 0
35466: EQUAL
35467: IFFALSE 35479
// hc_agressivity := 0 else
35469: LD_ADDR_OWVAR 35
35473: PUSH
35474: LD_INT 0
35476: ST_TO_ADDR
35477: GO 35500
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35479: LD_ADDR_OWVAR 35
35483: PUSH
35484: LD_VAR 0 1
35488: NEG
35489: PPUSH
35490: LD_VAR 0 1
35494: PPUSH
35495: CALL_OW 12
35499: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35500: LD_ADDR_OWVAR 31
35504: PUSH
35505: LD_INT 0
35507: PPUSH
35508: LD_INT 3
35510: PPUSH
35511: CALL_OW 12
35515: PUSH
35516: LD_INT 0
35518: PPUSH
35519: LD_INT 3
35521: PPUSH
35522: CALL_OW 12
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: ST_TO_ADDR
// end ;
35539: LD_VAR 0 2
35543: RET
// export function PrepareTiger ( agressivity ) ; begin
35544: LD_INT 0
35546: PPUSH
// uc_side := 0 ;
35547: LD_ADDR_OWVAR 20
35551: PUSH
35552: LD_INT 0
35554: ST_TO_ADDR
// uc_nation := 0 ;
35555: LD_ADDR_OWVAR 21
35559: PUSH
35560: LD_INT 0
35562: ST_TO_ADDR
// hc_class := class_tiger ;
35563: LD_ADDR_OWVAR 28
35567: PUSH
35568: LD_INT 14
35570: ST_TO_ADDR
// hc_gallery :=  ;
35571: LD_ADDR_OWVAR 33
35575: PUSH
35576: LD_STRING 
35578: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35579: LD_ADDR_OWVAR 35
35583: PUSH
35584: LD_VAR 0 1
35588: NEG
35589: PPUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: CALL_OW 12
35599: ST_TO_ADDR
// end ;
35600: LD_VAR 0 2
35604: RET
// export function PrepareEnchidna ( ) ; begin
35605: LD_INT 0
35607: PPUSH
// uc_side := 0 ;
35608: LD_ADDR_OWVAR 20
35612: PUSH
35613: LD_INT 0
35615: ST_TO_ADDR
// uc_nation := 0 ;
35616: LD_ADDR_OWVAR 21
35620: PUSH
35621: LD_INT 0
35623: ST_TO_ADDR
// hc_class := class_baggie ;
35624: LD_ADDR_OWVAR 28
35628: PUSH
35629: LD_INT 13
35631: ST_TO_ADDR
// hc_gallery :=  ;
35632: LD_ADDR_OWVAR 33
35636: PUSH
35637: LD_STRING 
35639: ST_TO_ADDR
// end ;
35640: LD_VAR 0 1
35644: RET
// export function PrepareFrog ( ) ; begin
35645: LD_INT 0
35647: PPUSH
// uc_side := 0 ;
35648: LD_ADDR_OWVAR 20
35652: PUSH
35653: LD_INT 0
35655: ST_TO_ADDR
// uc_nation := 0 ;
35656: LD_ADDR_OWVAR 21
35660: PUSH
35661: LD_INT 0
35663: ST_TO_ADDR
// hc_class := class_frog ;
35664: LD_ADDR_OWVAR 28
35668: PUSH
35669: LD_INT 19
35671: ST_TO_ADDR
// hc_gallery :=  ;
35672: LD_ADDR_OWVAR 33
35676: PUSH
35677: LD_STRING 
35679: ST_TO_ADDR
// end ;
35680: LD_VAR 0 1
35684: RET
// export function PrepareFish ( ) ; begin
35685: LD_INT 0
35687: PPUSH
// uc_side := 0 ;
35688: LD_ADDR_OWVAR 20
35692: PUSH
35693: LD_INT 0
35695: ST_TO_ADDR
// uc_nation := 0 ;
35696: LD_ADDR_OWVAR 21
35700: PUSH
35701: LD_INT 0
35703: ST_TO_ADDR
// hc_class := class_fish ;
35704: LD_ADDR_OWVAR 28
35708: PUSH
35709: LD_INT 20
35711: ST_TO_ADDR
// hc_gallery :=  ;
35712: LD_ADDR_OWVAR 33
35716: PUSH
35717: LD_STRING 
35719: ST_TO_ADDR
// end ;
35720: LD_VAR 0 1
35724: RET
// export function PrepareBird ( ) ; begin
35725: LD_INT 0
35727: PPUSH
// uc_side := 0 ;
35728: LD_ADDR_OWVAR 20
35732: PUSH
35733: LD_INT 0
35735: ST_TO_ADDR
// uc_nation := 0 ;
35736: LD_ADDR_OWVAR 21
35740: PUSH
35741: LD_INT 0
35743: ST_TO_ADDR
// hc_class := class_phororhacos ;
35744: LD_ADDR_OWVAR 28
35748: PUSH
35749: LD_INT 18
35751: ST_TO_ADDR
// hc_gallery :=  ;
35752: LD_ADDR_OWVAR 33
35756: PUSH
35757: LD_STRING 
35759: ST_TO_ADDR
// end ;
35760: LD_VAR 0 1
35764: RET
// export function PrepareHorse ( ) ; begin
35765: LD_INT 0
35767: PPUSH
// uc_side := 0 ;
35768: LD_ADDR_OWVAR 20
35772: PUSH
35773: LD_INT 0
35775: ST_TO_ADDR
// uc_nation := 0 ;
35776: LD_ADDR_OWVAR 21
35780: PUSH
35781: LD_INT 0
35783: ST_TO_ADDR
// hc_class := class_horse ;
35784: LD_ADDR_OWVAR 28
35788: PUSH
35789: LD_INT 21
35791: ST_TO_ADDR
// hc_gallery :=  ;
35792: LD_ADDR_OWVAR 33
35796: PUSH
35797: LD_STRING 
35799: ST_TO_ADDR
// end ;
35800: LD_VAR 0 1
35804: RET
// export function PrepareMastodont ( ) ; begin
35805: LD_INT 0
35807: PPUSH
// uc_side := 0 ;
35808: LD_ADDR_OWVAR 20
35812: PUSH
35813: LD_INT 0
35815: ST_TO_ADDR
// uc_nation := 0 ;
35816: LD_ADDR_OWVAR 21
35820: PUSH
35821: LD_INT 0
35823: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35824: LD_ADDR_OWVAR 37
35828: PUSH
35829: LD_INT 31
35831: ST_TO_ADDR
// vc_control := control_rider ;
35832: LD_ADDR_OWVAR 38
35836: PUSH
35837: LD_INT 4
35839: ST_TO_ADDR
// end ;
35840: LD_VAR 0 1
35844: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35845: LD_INT 0
35847: PPUSH
35848: PPUSH
35849: PPUSH
// uc_side = 0 ;
35850: LD_ADDR_OWVAR 20
35854: PUSH
35855: LD_INT 0
35857: ST_TO_ADDR
// uc_nation = 0 ;
35858: LD_ADDR_OWVAR 21
35862: PUSH
35863: LD_INT 0
35865: ST_TO_ADDR
// InitHc_All ( ) ;
35866: CALL_OW 584
// InitVc ;
35870: CALL_OW 20
// if mastodonts then
35874: LD_VAR 0 6
35878: IFFALSE 35945
// for i = 1 to mastodonts do
35880: LD_ADDR_VAR 0 11
35884: PUSH
35885: DOUBLE
35886: LD_INT 1
35888: DEC
35889: ST_TO_ADDR
35890: LD_VAR 0 6
35894: PUSH
35895: FOR_TO
35896: IFFALSE 35943
// begin vc_chassis := 31 ;
35898: LD_ADDR_OWVAR 37
35902: PUSH
35903: LD_INT 31
35905: ST_TO_ADDR
// vc_control := control_rider ;
35906: LD_ADDR_OWVAR 38
35910: PUSH
35911: LD_INT 4
35913: ST_TO_ADDR
// animal := CreateVehicle ;
35914: LD_ADDR_VAR 0 12
35918: PUSH
35919: CALL_OW 45
35923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35924: LD_VAR 0 12
35928: PPUSH
35929: LD_VAR 0 8
35933: PPUSH
35934: LD_INT 0
35936: PPUSH
35937: CALL 38073 0 3
// end ;
35941: GO 35895
35943: POP
35944: POP
// if horses then
35945: LD_VAR 0 5
35949: IFFALSE 36016
// for i = 1 to horses do
35951: LD_ADDR_VAR 0 11
35955: PUSH
35956: DOUBLE
35957: LD_INT 1
35959: DEC
35960: ST_TO_ADDR
35961: LD_VAR 0 5
35965: PUSH
35966: FOR_TO
35967: IFFALSE 36014
// begin hc_class := 21 ;
35969: LD_ADDR_OWVAR 28
35973: PUSH
35974: LD_INT 21
35976: ST_TO_ADDR
// hc_gallery :=  ;
35977: LD_ADDR_OWVAR 33
35981: PUSH
35982: LD_STRING 
35984: ST_TO_ADDR
// animal := CreateHuman ;
35985: LD_ADDR_VAR 0 12
35989: PUSH
35990: CALL_OW 44
35994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35995: LD_VAR 0 12
35999: PPUSH
36000: LD_VAR 0 8
36004: PPUSH
36005: LD_INT 0
36007: PPUSH
36008: CALL 38073 0 3
// end ;
36012: GO 35966
36014: POP
36015: POP
// if birds then
36016: LD_VAR 0 1
36020: IFFALSE 36087
// for i = 1 to birds do
36022: LD_ADDR_VAR 0 11
36026: PUSH
36027: DOUBLE
36028: LD_INT 1
36030: DEC
36031: ST_TO_ADDR
36032: LD_VAR 0 1
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36085
// begin hc_class := 18 ;
36040: LD_ADDR_OWVAR 28
36044: PUSH
36045: LD_INT 18
36047: ST_TO_ADDR
// hc_gallery =  ;
36048: LD_ADDR_OWVAR 33
36052: PUSH
36053: LD_STRING 
36055: ST_TO_ADDR
// animal := CreateHuman ;
36056: LD_ADDR_VAR 0 12
36060: PUSH
36061: CALL_OW 44
36065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36066: LD_VAR 0 12
36070: PPUSH
36071: LD_VAR 0 8
36075: PPUSH
36076: LD_INT 0
36078: PPUSH
36079: CALL 38073 0 3
// end ;
36083: GO 36037
36085: POP
36086: POP
// if tigers then
36087: LD_VAR 0 2
36091: IFFALSE 36175
// for i = 1 to tigers do
36093: LD_ADDR_VAR 0 11
36097: PUSH
36098: DOUBLE
36099: LD_INT 1
36101: DEC
36102: ST_TO_ADDR
36103: LD_VAR 0 2
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36173
// begin hc_class = class_tiger ;
36111: LD_ADDR_OWVAR 28
36115: PUSH
36116: LD_INT 14
36118: ST_TO_ADDR
// hc_gallery =  ;
36119: LD_ADDR_OWVAR 33
36123: PUSH
36124: LD_STRING 
36126: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36127: LD_ADDR_OWVAR 35
36131: PUSH
36132: LD_INT 7
36134: NEG
36135: PPUSH
36136: LD_INT 7
36138: PPUSH
36139: CALL_OW 12
36143: ST_TO_ADDR
// animal := CreateHuman ;
36144: LD_ADDR_VAR 0 12
36148: PUSH
36149: CALL_OW 44
36153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36154: LD_VAR 0 12
36158: PPUSH
36159: LD_VAR 0 8
36163: PPUSH
36164: LD_INT 0
36166: PPUSH
36167: CALL 38073 0 3
// end ;
36171: GO 36108
36173: POP
36174: POP
// if apemans then
36175: LD_VAR 0 3
36179: IFFALSE 36302
// for i = 1 to apemans do
36181: LD_ADDR_VAR 0 11
36185: PUSH
36186: DOUBLE
36187: LD_INT 1
36189: DEC
36190: ST_TO_ADDR
36191: LD_VAR 0 3
36195: PUSH
36196: FOR_TO
36197: IFFALSE 36300
// begin hc_class = class_apeman ;
36199: LD_ADDR_OWVAR 28
36203: PUSH
36204: LD_INT 12
36206: ST_TO_ADDR
// hc_gallery =  ;
36207: LD_ADDR_OWVAR 33
36211: PUSH
36212: LD_STRING 
36214: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36215: LD_ADDR_OWVAR 35
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PPUSH
36224: LD_INT 2
36226: PPUSH
36227: CALL_OW 12
36231: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36232: LD_ADDR_OWVAR 31
36236: PUSH
36237: LD_INT 1
36239: PPUSH
36240: LD_INT 3
36242: PPUSH
36243: CALL_OW 12
36247: PUSH
36248: LD_INT 1
36250: PPUSH
36251: LD_INT 3
36253: PPUSH
36254: CALL_OW 12
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// animal := CreateHuman ;
36271: LD_ADDR_VAR 0 12
36275: PUSH
36276: CALL_OW 44
36280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36281: LD_VAR 0 12
36285: PPUSH
36286: LD_VAR 0 8
36290: PPUSH
36291: LD_INT 0
36293: PPUSH
36294: CALL 38073 0 3
// end ;
36298: GO 36196
36300: POP
36301: POP
// if enchidnas then
36302: LD_VAR 0 4
36306: IFFALSE 36373
// for i = 1 to enchidnas do
36308: LD_ADDR_VAR 0 11
36312: PUSH
36313: DOUBLE
36314: LD_INT 1
36316: DEC
36317: ST_TO_ADDR
36318: LD_VAR 0 4
36322: PUSH
36323: FOR_TO
36324: IFFALSE 36371
// begin hc_class = 13 ;
36326: LD_ADDR_OWVAR 28
36330: PUSH
36331: LD_INT 13
36333: ST_TO_ADDR
// hc_gallery =  ;
36334: LD_ADDR_OWVAR 33
36338: PUSH
36339: LD_STRING 
36341: ST_TO_ADDR
// animal := CreateHuman ;
36342: LD_ADDR_VAR 0 12
36346: PUSH
36347: CALL_OW 44
36351: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36352: LD_VAR 0 12
36356: PPUSH
36357: LD_VAR 0 8
36361: PPUSH
36362: LD_INT 0
36364: PPUSH
36365: CALL 38073 0 3
// end ;
36369: GO 36323
36371: POP
36372: POP
// if fishes then
36373: LD_VAR 0 7
36377: IFFALSE 36444
// for i = 1 to fishes do
36379: LD_ADDR_VAR 0 11
36383: PUSH
36384: DOUBLE
36385: LD_INT 1
36387: DEC
36388: ST_TO_ADDR
36389: LD_VAR 0 7
36393: PUSH
36394: FOR_TO
36395: IFFALSE 36442
// begin hc_class = 20 ;
36397: LD_ADDR_OWVAR 28
36401: PUSH
36402: LD_INT 20
36404: ST_TO_ADDR
// hc_gallery =  ;
36405: LD_ADDR_OWVAR 33
36409: PUSH
36410: LD_STRING 
36412: ST_TO_ADDR
// animal := CreateHuman ;
36413: LD_ADDR_VAR 0 12
36417: PUSH
36418: CALL_OW 44
36422: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36423: LD_VAR 0 12
36427: PPUSH
36428: LD_VAR 0 9
36432: PPUSH
36433: LD_INT 0
36435: PPUSH
36436: CALL 38073 0 3
// end ;
36440: GO 36394
36442: POP
36443: POP
// end ;
36444: LD_VAR 0 10
36448: RET
// export function WantHeal ( sci , unit ) ; begin
36449: LD_INT 0
36451: PPUSH
// if GetTaskList ( sci ) > 0 then
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 437
36461: PUSH
36462: LD_INT 0
36464: GREATER
36465: IFFALSE 36535
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 437
36476: PUSH
36477: LD_INT 1
36479: ARRAY
36480: PUSH
36481: LD_INT 1
36483: ARRAY
36484: PUSH
36485: LD_STRING l
36487: EQUAL
36488: PUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 437
36498: PUSH
36499: LD_INT 1
36501: ARRAY
36502: PUSH
36503: LD_INT 4
36505: ARRAY
36506: PUSH
36507: LD_VAR 0 2
36511: EQUAL
36512: AND
36513: IFFALSE 36525
// result := true else
36515: LD_ADDR_VAR 0 3
36519: PUSH
36520: LD_INT 1
36522: ST_TO_ADDR
36523: GO 36533
// result := false ;
36525: LD_ADDR_VAR 0 3
36529: PUSH
36530: LD_INT 0
36532: ST_TO_ADDR
// end else
36533: GO 36543
// result := false ;
36535: LD_ADDR_VAR 0 3
36539: PUSH
36540: LD_INT 0
36542: ST_TO_ADDR
// end ;
36543: LD_VAR 0 3
36547: RET
// export function HealTarget ( sci ) ; begin
36548: LD_INT 0
36550: PPUSH
// if not sci then
36551: LD_VAR 0 1
36555: NOT
36556: IFFALSE 36560
// exit ;
36558: GO 36625
// result := 0 ;
36560: LD_ADDR_VAR 0 2
36564: PUSH
36565: LD_INT 0
36567: ST_TO_ADDR
// if GetTaskList ( sci ) then
36568: LD_VAR 0 1
36572: PPUSH
36573: CALL_OW 437
36577: IFFALSE 36625
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36579: LD_VAR 0 1
36583: PPUSH
36584: CALL_OW 437
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: PUSH
36593: LD_INT 1
36595: ARRAY
36596: PUSH
36597: LD_STRING l
36599: EQUAL
36600: IFFALSE 36625
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36602: LD_ADDR_VAR 0 2
36606: PUSH
36607: LD_VAR 0 1
36611: PPUSH
36612: CALL_OW 437
36616: PUSH
36617: LD_INT 1
36619: ARRAY
36620: PUSH
36621: LD_INT 4
36623: ARRAY
36624: ST_TO_ADDR
// end ;
36625: LD_VAR 0 2
36629: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36630: LD_INT 0
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
// if not base_units then
36636: LD_VAR 0 1
36640: NOT
36641: IFFALSE 36645
// exit ;
36643: GO 36732
// result := false ;
36645: LD_ADDR_VAR 0 2
36649: PUSH
36650: LD_INT 0
36652: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36653: LD_ADDR_VAR 0 5
36657: PUSH
36658: LD_VAR 0 1
36662: PPUSH
36663: LD_INT 21
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PPUSH
36673: CALL_OW 72
36677: ST_TO_ADDR
// if not tmp then
36678: LD_VAR 0 5
36682: NOT
36683: IFFALSE 36687
// exit ;
36685: GO 36732
// for i in tmp do
36687: LD_ADDR_VAR 0 3
36691: PUSH
36692: LD_VAR 0 5
36696: PUSH
36697: FOR_IN
36698: IFFALSE 36730
// begin result := EnemyInRange ( i , 22 ) ;
36700: LD_ADDR_VAR 0 2
36704: PUSH
36705: LD_VAR 0 3
36709: PPUSH
36710: LD_INT 22
36712: PPUSH
36713: CALL 34310 0 2
36717: ST_TO_ADDR
// if result then
36718: LD_VAR 0 2
36722: IFFALSE 36728
// exit ;
36724: POP
36725: POP
36726: GO 36732
// end ;
36728: GO 36697
36730: POP
36731: POP
// end ;
36732: LD_VAR 0 2
36736: RET
// export function FilterByTag ( units , tag ) ; begin
36737: LD_INT 0
36739: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36740: LD_ADDR_VAR 0 3
36744: PUSH
36745: LD_VAR 0 1
36749: PPUSH
36750: LD_INT 120
36752: PUSH
36753: LD_VAR 0 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PPUSH
36762: CALL_OW 72
36766: ST_TO_ADDR
// end ;
36767: LD_VAR 0 3
36771: RET
// export function IsDriver ( un ) ; begin
36772: LD_INT 0
36774: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36775: LD_ADDR_VAR 0 2
36779: PUSH
36780: LD_VAR 0 1
36784: PUSH
36785: LD_INT 55
36787: PUSH
36788: EMPTY
36789: LIST
36790: PPUSH
36791: CALL_OW 69
36795: IN
36796: ST_TO_ADDR
// end ;
36797: LD_VAR 0 2
36801: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36802: LD_INT 0
36804: PPUSH
36805: PPUSH
// list := [ ] ;
36806: LD_ADDR_VAR 0 5
36810: PUSH
36811: EMPTY
36812: ST_TO_ADDR
// case d of 0 :
36813: LD_VAR 0 3
36817: PUSH
36818: LD_INT 0
36820: DOUBLE
36821: EQUAL
36822: IFTRUE 36826
36824: GO 36959
36826: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36827: LD_ADDR_VAR 0 5
36831: PUSH
36832: LD_VAR 0 1
36836: PUSH
36837: LD_INT 4
36839: MINUS
36840: PUSH
36841: LD_VAR 0 2
36845: PUSH
36846: LD_INT 4
36848: MINUS
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: PUSH
36858: LD_VAR 0 1
36862: PUSH
36863: LD_INT 3
36865: MINUS
36866: PUSH
36867: LD_VAR 0 2
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: PUSH
36880: LD_VAR 0 1
36884: PUSH
36885: LD_INT 4
36887: PLUS
36888: PUSH
36889: LD_VAR 0 2
36893: PUSH
36894: LD_INT 4
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: PUSH
36902: LD_VAR 0 1
36906: PUSH
36907: LD_INT 3
36909: PLUS
36910: PUSH
36911: LD_VAR 0 2
36915: PUSH
36916: LD_INT 3
36918: PLUS
36919: PUSH
36920: LD_INT 5
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: PUSH
36928: LD_VAR 0 1
36932: PUSH
36933: LD_VAR 0 2
36937: PUSH
36938: LD_INT 4
36940: PLUS
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// end ; 1 :
36957: GO 37657
36959: LD_INT 1
36961: DOUBLE
36962: EQUAL
36963: IFTRUE 36967
36965: GO 37100
36967: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36968: LD_ADDR_VAR 0 5
36972: PUSH
36973: LD_VAR 0 1
36977: PUSH
36978: LD_VAR 0 2
36982: PUSH
36983: LD_INT 4
36985: MINUS
36986: PUSH
36987: LD_INT 3
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: PUSH
36995: LD_VAR 0 1
36999: PUSH
37000: LD_INT 3
37002: MINUS
37003: PUSH
37004: LD_VAR 0 2
37008: PUSH
37009: LD_INT 3
37011: MINUS
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: PUSH
37021: LD_VAR 0 1
37025: PUSH
37026: LD_INT 4
37028: MINUS
37029: PUSH
37030: LD_VAR 0 2
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: PUSH
37043: LD_VAR 0 1
37047: PUSH
37048: LD_VAR 0 2
37052: PUSH
37053: LD_INT 3
37055: PLUS
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: PUSH
37065: LD_VAR 0 1
37069: PUSH
37070: LD_INT 4
37072: PLUS
37073: PUSH
37074: LD_VAR 0 2
37078: PUSH
37079: LD_INT 4
37081: PLUS
37082: PUSH
37083: LD_INT 5
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: ST_TO_ADDR
// end ; 2 :
37098: GO 37657
37100: LD_INT 2
37102: DOUBLE
37103: EQUAL
37104: IFTRUE 37108
37106: GO 37237
37108: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37109: LD_ADDR_VAR 0 5
37113: PUSH
37114: LD_VAR 0 1
37118: PUSH
37119: LD_VAR 0 2
37123: PUSH
37124: LD_INT 3
37126: MINUS
37127: PUSH
37128: LD_INT 3
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: PUSH
37136: LD_VAR 0 1
37140: PUSH
37141: LD_INT 4
37143: PLUS
37144: PUSH
37145: LD_VAR 0 2
37149: PUSH
37150: LD_INT 4
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: PUSH
37158: LD_VAR 0 1
37162: PUSH
37163: LD_VAR 0 2
37167: PUSH
37168: LD_INT 4
37170: PLUS
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: PUSH
37180: LD_VAR 0 1
37184: PUSH
37185: LD_INT 3
37187: MINUS
37188: PUSH
37189: LD_VAR 0 2
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: PUSH
37202: LD_VAR 0 1
37206: PUSH
37207: LD_INT 4
37209: MINUS
37210: PUSH
37211: LD_VAR 0 2
37215: PUSH
37216: LD_INT 4
37218: MINUS
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: ST_TO_ADDR
// end ; 3 :
37235: GO 37657
37237: LD_INT 3
37239: DOUBLE
37240: EQUAL
37241: IFTRUE 37245
37243: GO 37378
37245: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37246: LD_ADDR_VAR 0 5
37250: PUSH
37251: LD_VAR 0 1
37255: PUSH
37256: LD_INT 3
37258: PLUS
37259: PUSH
37260: LD_VAR 0 2
37264: PUSH
37265: LD_INT 4
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: LD_VAR 0 1
37277: PUSH
37278: LD_INT 4
37280: PLUS
37281: PUSH
37282: LD_VAR 0 2
37286: PUSH
37287: LD_INT 4
37289: PLUS
37290: PUSH
37291: LD_INT 5
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: PUSH
37299: LD_VAR 0 1
37303: PUSH
37304: LD_INT 4
37306: MINUS
37307: PUSH
37308: LD_VAR 0 2
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: PUSH
37321: LD_VAR 0 1
37325: PUSH
37326: LD_VAR 0 2
37330: PUSH
37331: LD_INT 4
37333: MINUS
37334: PUSH
37335: LD_INT 3
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: PUSH
37343: LD_VAR 0 1
37347: PUSH
37348: LD_INT 3
37350: MINUS
37351: PUSH
37352: LD_VAR 0 2
37356: PUSH
37357: LD_INT 3
37359: MINUS
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// end ; 4 :
37376: GO 37657
37378: LD_INT 4
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37386
37384: GO 37519
37386: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37387: LD_ADDR_VAR 0 5
37391: PUSH
37392: LD_VAR 0 1
37396: PUSH
37397: LD_VAR 0 2
37401: PUSH
37402: LD_INT 4
37404: PLUS
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: PUSH
37414: LD_VAR 0 1
37418: PUSH
37419: LD_INT 3
37421: PLUS
37422: PUSH
37423: LD_VAR 0 2
37427: PUSH
37428: LD_INT 3
37430: PLUS
37431: PUSH
37432: LD_INT 5
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PUSH
37440: LD_VAR 0 1
37444: PUSH
37445: LD_INT 4
37447: PLUS
37448: PUSH
37449: LD_VAR 0 2
37453: PUSH
37454: LD_INT 4
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: PUSH
37462: LD_VAR 0 1
37466: PUSH
37467: LD_VAR 0 2
37471: PUSH
37472: LD_INT 3
37474: MINUS
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: PUSH
37484: LD_VAR 0 1
37488: PUSH
37489: LD_INT 4
37491: MINUS
37492: PUSH
37493: LD_VAR 0 2
37497: PUSH
37498: LD_INT 4
37500: MINUS
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
// end ; 5 :
37517: GO 37657
37519: LD_INT 5
37521: DOUBLE
37522: EQUAL
37523: IFTRUE 37527
37525: GO 37656
37527: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37528: LD_ADDR_VAR 0 5
37532: PUSH
37533: LD_VAR 0 1
37537: PUSH
37538: LD_INT 4
37540: MINUS
37541: PUSH
37542: LD_VAR 0 2
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: PUSH
37555: LD_VAR 0 1
37559: PUSH
37560: LD_VAR 0 2
37564: PUSH
37565: LD_INT 4
37567: MINUS
37568: PUSH
37569: LD_INT 3
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: PUSH
37577: LD_VAR 0 1
37581: PUSH
37582: LD_INT 4
37584: PLUS
37585: PUSH
37586: LD_VAR 0 2
37590: PUSH
37591: LD_INT 4
37593: PLUS
37594: PUSH
37595: LD_INT 5
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: PUSH
37603: LD_VAR 0 1
37607: PUSH
37608: LD_INT 3
37610: PLUS
37611: PUSH
37612: LD_VAR 0 2
37616: PUSH
37617: LD_INT 4
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: PUSH
37625: LD_VAR 0 1
37629: PUSH
37630: LD_VAR 0 2
37634: PUSH
37635: LD_INT 3
37637: PLUS
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// end ; end ;
37654: GO 37657
37656: POP
// result := list ;
37657: LD_ADDR_VAR 0 4
37661: PUSH
37662: LD_VAR 0 5
37666: ST_TO_ADDR
// end ;
37667: LD_VAR 0 4
37671: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37672: LD_INT 0
37674: PPUSH
37675: PPUSH
37676: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37677: LD_VAR 0 1
37681: NOT
37682: PUSH
37683: LD_VAR 0 2
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 3
37696: PUSH
37697: LD_INT 4
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: IN
37706: NOT
37707: OR
37708: IFFALSE 37712
// exit ;
37710: GO 37795
// tmp := [ ] ;
37712: LD_ADDR_VAR 0 5
37716: PUSH
37717: EMPTY
37718: ST_TO_ADDR
// for i in units do
37719: LD_ADDR_VAR 0 4
37723: PUSH
37724: LD_VAR 0 1
37728: PUSH
37729: FOR_IN
37730: IFFALSE 37764
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37732: LD_ADDR_VAR 0 5
37736: PUSH
37737: LD_VAR 0 5
37741: PPUSH
37742: LD_VAR 0 4
37746: PPUSH
37747: LD_VAR 0 2
37751: PPUSH
37752: CALL_OW 259
37756: PPUSH
37757: CALL 39168 0 2
37761: ST_TO_ADDR
37762: GO 37729
37764: POP
37765: POP
// if not tmp then
37766: LD_VAR 0 5
37770: NOT
37771: IFFALSE 37775
// exit ;
37773: GO 37795
// result := SortListByListDesc ( units , tmp ) ;
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: LD_VAR 0 5
37789: PPUSH
37790: CALL_OW 77
37794: ST_TO_ADDR
// end ;
37795: LD_VAR 0 3
37799: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37800: LD_INT 0
37802: PPUSH
37803: PPUSH
37804: PPUSH
// result := false ;
37805: LD_ADDR_VAR 0 3
37809: PUSH
37810: LD_INT 0
37812: ST_TO_ADDR
// if not building then
37813: LD_VAR 0 2
37817: NOT
37818: IFFALSE 37822
// exit ;
37820: GO 37960
// x := GetX ( building ) ;
37822: LD_ADDR_VAR 0 4
37826: PUSH
37827: LD_VAR 0 2
37831: PPUSH
37832: CALL_OW 250
37836: ST_TO_ADDR
// y := GetY ( building ) ;
37837: LD_ADDR_VAR 0 5
37841: PUSH
37842: LD_VAR 0 2
37846: PPUSH
37847: CALL_OW 251
37851: ST_TO_ADDR
// if not x or not y then
37852: LD_VAR 0 4
37856: NOT
37857: PUSH
37858: LD_VAR 0 5
37862: NOT
37863: OR
37864: IFFALSE 37868
// exit ;
37866: GO 37960
// if GetTaskList ( unit ) then
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 437
37877: IFFALSE 37960
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37879: LD_STRING e
37881: PUSH
37882: LD_VAR 0 1
37886: PPUSH
37887: CALL_OW 437
37891: PUSH
37892: LD_INT 1
37894: ARRAY
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: EQUAL
37900: PUSH
37901: LD_VAR 0 4
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 437
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: EQUAL
37924: AND
37925: PUSH
37926: LD_VAR 0 5
37930: PUSH
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 437
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: PUSH
37945: LD_INT 3
37947: ARRAY
37948: EQUAL
37949: AND
37950: IFFALSE 37960
// result := true end ;
37952: LD_ADDR_VAR 0 3
37956: PUSH
37957: LD_INT 1
37959: ST_TO_ADDR
// end ;
37960: LD_VAR 0 3
37964: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37965: LD_INT 0
37967: PPUSH
// result := false ;
37968: LD_ADDR_VAR 0 4
37972: PUSH
37973: LD_INT 0
37975: ST_TO_ADDR
// if GetTaskList ( unit ) then
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 437
37985: IFFALSE 38068
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37987: LD_STRING M
37989: PUSH
37990: LD_VAR 0 1
37994: PPUSH
37995: CALL_OW 437
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: EQUAL
38008: PUSH
38009: LD_VAR 0 2
38013: PUSH
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 437
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PUSH
38028: LD_INT 2
38030: ARRAY
38031: EQUAL
38032: AND
38033: PUSH
38034: LD_VAR 0 3
38038: PUSH
38039: LD_VAR 0 1
38043: PPUSH
38044: CALL_OW 437
38048: PUSH
38049: LD_INT 1
38051: ARRAY
38052: PUSH
38053: LD_INT 3
38055: ARRAY
38056: EQUAL
38057: AND
38058: IFFALSE 38068
// result := true ;
38060: LD_ADDR_VAR 0 4
38064: PUSH
38065: LD_INT 1
38067: ST_TO_ADDR
// end ; end ;
38068: LD_VAR 0 4
38072: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38073: LD_INT 0
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
// if not unit or not area then
38079: LD_VAR 0 1
38083: NOT
38084: PUSH
38085: LD_VAR 0 2
38089: NOT
38090: OR
38091: IFFALSE 38095
// exit ;
38093: GO 38271
// tmp := AreaToList ( area , i ) ;
38095: LD_ADDR_VAR 0 6
38099: PUSH
38100: LD_VAR 0 2
38104: PPUSH
38105: LD_VAR 0 5
38109: PPUSH
38110: CALL_OW 517
38114: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38115: LD_ADDR_VAR 0 5
38119: PUSH
38120: DOUBLE
38121: LD_INT 1
38123: DEC
38124: ST_TO_ADDR
38125: LD_VAR 0 6
38129: PUSH
38130: LD_INT 1
38132: ARRAY
38133: PUSH
38134: FOR_TO
38135: IFFALSE 38269
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: LD_VAR 0 6
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PUSH
38151: LD_VAR 0 5
38155: ARRAY
38156: PUSH
38157: LD_VAR 0 6
38161: PUSH
38162: LD_INT 2
38164: ARRAY
38165: PUSH
38166: LD_VAR 0 5
38170: ARRAY
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38176: LD_INT 92
38178: PUSH
38179: LD_VAR 0 7
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PUSH
38188: LD_VAR 0 7
38192: PUSH
38193: LD_INT 2
38195: ARRAY
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: PPUSH
38206: CALL_OW 69
38210: PUSH
38211: LD_INT 0
38213: EQUAL
38214: IFFALSE 38267
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38216: LD_VAR 0 1
38220: PPUSH
38221: LD_VAR 0 7
38225: PUSH
38226: LD_INT 1
38228: ARRAY
38229: PPUSH
38230: LD_VAR 0 7
38234: PUSH
38235: LD_INT 2
38237: ARRAY
38238: PPUSH
38239: LD_VAR 0 3
38243: PPUSH
38244: CALL_OW 48
// result := IsPlaced ( unit ) ;
38248: LD_ADDR_VAR 0 4
38252: PUSH
38253: LD_VAR 0 1
38257: PPUSH
38258: CALL_OW 305
38262: ST_TO_ADDR
// exit ;
38263: POP
38264: POP
38265: GO 38271
// end ; end ;
38267: GO 38134
38269: POP
38270: POP
// end ;
38271: LD_VAR 0 4
38275: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38276: LD_INT 0
38278: PPUSH
38279: PPUSH
38280: PPUSH
// if not side or side > 8 then
38281: LD_VAR 0 1
38285: NOT
38286: PUSH
38287: LD_VAR 0 1
38291: PUSH
38292: LD_INT 8
38294: GREATER
38295: OR
38296: IFFALSE 38300
// exit ;
38298: GO 38487
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38300: LD_ADDR_VAR 0 4
38304: PUSH
38305: LD_INT 22
38307: PUSH
38308: LD_VAR 0 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 21
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PPUSH
38331: CALL_OW 69
38335: ST_TO_ADDR
// if not tmp then
38336: LD_VAR 0 4
38340: NOT
38341: IFFALSE 38345
// exit ;
38343: GO 38487
// enable_addtolog := true ;
38345: LD_ADDR_OWVAR 81
38349: PUSH
38350: LD_INT 1
38352: ST_TO_ADDR
// AddToLog ( [ ) ;
38353: LD_STRING [
38355: PPUSH
38356: CALL_OW 561
// for i in tmp do
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: LD_VAR 0 4
38369: PUSH
38370: FOR_IN
38371: IFFALSE 38478
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38373: LD_STRING [
38375: PUSH
38376: LD_VAR 0 3
38380: PPUSH
38381: CALL_OW 266
38385: STR
38386: PUSH
38387: LD_STRING , 
38389: STR
38390: PUSH
38391: LD_VAR 0 3
38395: PPUSH
38396: CALL_OW 250
38400: STR
38401: PUSH
38402: LD_STRING , 
38404: STR
38405: PUSH
38406: LD_VAR 0 3
38410: PPUSH
38411: CALL_OW 251
38415: STR
38416: PUSH
38417: LD_STRING , 
38419: STR
38420: PUSH
38421: LD_VAR 0 3
38425: PPUSH
38426: CALL_OW 254
38430: STR
38431: PUSH
38432: LD_STRING , 
38434: STR
38435: PUSH
38436: LD_VAR 0 3
38440: PPUSH
38441: LD_INT 1
38443: PPUSH
38444: CALL_OW 268
38448: STR
38449: PUSH
38450: LD_STRING , 
38452: STR
38453: PUSH
38454: LD_VAR 0 3
38458: PPUSH
38459: LD_INT 2
38461: PPUSH
38462: CALL_OW 268
38466: STR
38467: PUSH
38468: LD_STRING ],
38470: STR
38471: PPUSH
38472: CALL_OW 561
// end ;
38476: GO 38370
38478: POP
38479: POP
// AddToLog ( ]; ) ;
38480: LD_STRING ];
38482: PPUSH
38483: CALL_OW 561
// end ;
38487: LD_VAR 0 2
38491: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38492: LD_INT 0
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
// if not area or not rate or not max then
38499: LD_VAR 0 1
38503: NOT
38504: PUSH
38505: LD_VAR 0 2
38509: NOT
38510: OR
38511: PUSH
38512: LD_VAR 0 4
38516: NOT
38517: OR
38518: IFFALSE 38522
// exit ;
38520: GO 38711
// while 1 do
38522: LD_INT 1
38524: IFFALSE 38711
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38526: LD_ADDR_VAR 0 9
38530: PUSH
38531: LD_VAR 0 1
38535: PPUSH
38536: LD_INT 1
38538: PPUSH
38539: CALL_OW 287
38543: PUSH
38544: LD_INT 10
38546: MUL
38547: ST_TO_ADDR
// r := rate / 10 ;
38548: LD_ADDR_VAR 0 7
38552: PUSH
38553: LD_VAR 0 2
38557: PUSH
38558: LD_INT 10
38560: DIVREAL
38561: ST_TO_ADDR
// time := 1 1$00 ;
38562: LD_ADDR_VAR 0 8
38566: PUSH
38567: LD_INT 2100
38569: ST_TO_ADDR
// if amount < min then
38570: LD_VAR 0 9
38574: PUSH
38575: LD_VAR 0 3
38579: LESS
38580: IFFALSE 38598
// r := r * 2 else
38582: LD_ADDR_VAR 0 7
38586: PUSH
38587: LD_VAR 0 7
38591: PUSH
38592: LD_INT 2
38594: MUL
38595: ST_TO_ADDR
38596: GO 38624
// if amount > max then
38598: LD_VAR 0 9
38602: PUSH
38603: LD_VAR 0 4
38607: GREATER
38608: IFFALSE 38624
// r := r / 2 ;
38610: LD_ADDR_VAR 0 7
38614: PUSH
38615: LD_VAR 0 7
38619: PUSH
38620: LD_INT 2
38622: DIVREAL
38623: ST_TO_ADDR
// time := time / r ;
38624: LD_ADDR_VAR 0 8
38628: PUSH
38629: LD_VAR 0 8
38633: PUSH
38634: LD_VAR 0 7
38638: DIVREAL
38639: ST_TO_ADDR
// if time < 0 then
38640: LD_VAR 0 8
38644: PUSH
38645: LD_INT 0
38647: LESS
38648: IFFALSE 38665
// time := time * - 1 ;
38650: LD_ADDR_VAR 0 8
38654: PUSH
38655: LD_VAR 0 8
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: MUL
38664: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38665: LD_VAR 0 8
38669: PUSH
38670: LD_INT 35
38672: PPUSH
38673: LD_INT 875
38675: PPUSH
38676: CALL_OW 12
38680: PLUS
38681: PPUSH
38682: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38686: LD_INT 1
38688: PPUSH
38689: LD_INT 5
38691: PPUSH
38692: CALL_OW 12
38696: PPUSH
38697: LD_VAR 0 1
38701: PPUSH
38702: LD_INT 1
38704: PPUSH
38705: CALL_OW 55
// end ;
38709: GO 38522
// end ;
38711: LD_VAR 0 5
38715: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38716: LD_INT 0
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
// if not turrets or not factories then
38726: LD_VAR 0 1
38730: NOT
38731: PUSH
38732: LD_VAR 0 2
38736: NOT
38737: OR
38738: IFFALSE 38742
// exit ;
38740: GO 39049
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38742: LD_ADDR_VAR 0 10
38746: PUSH
38747: LD_INT 5
38749: PUSH
38750: LD_INT 6
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 4
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: LD_INT 5
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 24
38784: PUSH
38785: LD_INT 25
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 23
38794: PUSH
38795: LD_INT 27
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 42
38808: PUSH
38809: LD_INT 43
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 44
38818: PUSH
38819: LD_INT 46
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 45
38828: PUSH
38829: LD_INT 47
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// result := [ ] ;
38846: LD_ADDR_VAR 0 3
38850: PUSH
38851: EMPTY
38852: ST_TO_ADDR
// for i in turrets do
38853: LD_ADDR_VAR 0 4
38857: PUSH
38858: LD_VAR 0 1
38862: PUSH
38863: FOR_IN
38864: IFFALSE 39047
// begin nat := GetNation ( i ) ;
38866: LD_ADDR_VAR 0 7
38870: PUSH
38871: LD_VAR 0 4
38875: PPUSH
38876: CALL_OW 248
38880: ST_TO_ADDR
// weapon := 0 ;
38881: LD_ADDR_VAR 0 8
38885: PUSH
38886: LD_INT 0
38888: ST_TO_ADDR
// if not nat then
38889: LD_VAR 0 7
38893: NOT
38894: IFFALSE 38898
// continue ;
38896: GO 38863
// for j in list [ nat ] do
38898: LD_ADDR_VAR 0 5
38902: PUSH
38903: LD_VAR 0 10
38907: PUSH
38908: LD_VAR 0 7
38912: ARRAY
38913: PUSH
38914: FOR_IN
38915: IFFALSE 38956
// if GetBWeapon ( i ) = j [ 1 ] then
38917: LD_VAR 0 4
38921: PPUSH
38922: CALL_OW 269
38926: PUSH
38927: LD_VAR 0 5
38931: PUSH
38932: LD_INT 1
38934: ARRAY
38935: EQUAL
38936: IFFALSE 38954
// begin weapon := j [ 2 ] ;
38938: LD_ADDR_VAR 0 8
38942: PUSH
38943: LD_VAR 0 5
38947: PUSH
38948: LD_INT 2
38950: ARRAY
38951: ST_TO_ADDR
// break ;
38952: GO 38956
// end ;
38954: GO 38914
38956: POP
38957: POP
// if not weapon then
38958: LD_VAR 0 8
38962: NOT
38963: IFFALSE 38967
// continue ;
38965: GO 38863
// for k in factories do
38967: LD_ADDR_VAR 0 6
38971: PUSH
38972: LD_VAR 0 2
38976: PUSH
38977: FOR_IN
38978: IFFALSE 39043
// begin weapons := AvailableWeaponList ( k ) ;
38980: LD_ADDR_VAR 0 9
38984: PUSH
38985: LD_VAR 0 6
38989: PPUSH
38990: CALL_OW 478
38994: ST_TO_ADDR
// if not weapons then
38995: LD_VAR 0 9
38999: NOT
39000: IFFALSE 39004
// continue ;
39002: GO 38977
// if weapon in weapons then
39004: LD_VAR 0 8
39008: PUSH
39009: LD_VAR 0 9
39013: IN
39014: IFFALSE 39041
// begin result := [ i , weapon ] ;
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: LD_VAR 0 4
39025: PUSH
39026: LD_VAR 0 8
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: ST_TO_ADDR
// exit ;
39035: POP
39036: POP
39037: POP
39038: POP
39039: GO 39049
// end ; end ;
39041: GO 38977
39043: POP
39044: POP
// end ;
39045: GO 38863
39047: POP
39048: POP
// end ;
39049: LD_VAR 0 3
39053: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39054: LD_INT 0
39056: PPUSH
// if not side or side > 8 then
39057: LD_VAR 0 3
39061: NOT
39062: PUSH
39063: LD_VAR 0 3
39067: PUSH
39068: LD_INT 8
39070: GREATER
39071: OR
39072: IFFALSE 39076
// exit ;
39074: GO 39135
// if not range then
39076: LD_VAR 0 4
39080: NOT
39081: IFFALSE 39092
// range := - 12 ;
39083: LD_ADDR_VAR 0 4
39087: PUSH
39088: LD_INT 12
39090: NEG
39091: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39092: LD_VAR 0 1
39096: PPUSH
39097: LD_VAR 0 2
39101: PPUSH
39102: LD_VAR 0 3
39106: PPUSH
39107: LD_VAR 0 4
39111: PPUSH
39112: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39116: LD_VAR 0 1
39120: PPUSH
39121: LD_VAR 0 2
39125: PPUSH
39126: LD_VAR 0 3
39130: PPUSH
39131: CALL_OW 331
// end ;
39135: LD_VAR 0 5
39139: RET
// export function Video ( mode ) ; begin
39140: LD_INT 0
39142: PPUSH
// ingame_video = mode ;
39143: LD_ADDR_OWVAR 52
39147: PUSH
39148: LD_VAR 0 1
39152: ST_TO_ADDR
// interface_hidden = mode ;
39153: LD_ADDR_OWVAR 54
39157: PUSH
39158: LD_VAR 0 1
39162: ST_TO_ADDR
// end ;
39163: LD_VAR 0 2
39167: RET
// export function Join ( array , element ) ; begin
39168: LD_INT 0
39170: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: LD_VAR 0 1
39180: PPUSH
39181: LD_VAR 0 1
39185: PUSH
39186: LD_INT 1
39188: PLUS
39189: PPUSH
39190: LD_VAR 0 2
39194: PPUSH
39195: CALL_OW 1
39199: ST_TO_ADDR
// end ;
39200: LD_VAR 0 3
39204: RET
// export function JoinUnion ( array , element ) ; begin
39205: LD_INT 0
39207: PPUSH
// result := array union element ;
39208: LD_ADDR_VAR 0 3
39212: PUSH
39213: LD_VAR 0 1
39217: PUSH
39218: LD_VAR 0 2
39222: UNION
39223: ST_TO_ADDR
// end ;
39224: LD_VAR 0 3
39228: RET
// export function GetBehemoths ( side ) ; begin
39229: LD_INT 0
39231: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39232: LD_ADDR_VAR 0 2
39236: PUSH
39237: LD_INT 22
39239: PUSH
39240: LD_VAR 0 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 31
39251: PUSH
39252: LD_INT 25
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PPUSH
39263: CALL_OW 69
39267: ST_TO_ADDR
// end ;
39268: LD_VAR 0 2
39272: RET
// export function Shuffle ( array ) ; var i , index ; begin
39273: LD_INT 0
39275: PPUSH
39276: PPUSH
39277: PPUSH
// result := [ ] ;
39278: LD_ADDR_VAR 0 2
39282: PUSH
39283: EMPTY
39284: ST_TO_ADDR
// if not array then
39285: LD_VAR 0 1
39289: NOT
39290: IFFALSE 39294
// exit ;
39292: GO 39393
// Randomize ;
39294: CALL_OW 10
// for i = array downto 1 do
39298: LD_ADDR_VAR 0 3
39302: PUSH
39303: DOUBLE
39304: LD_VAR 0 1
39308: INC
39309: ST_TO_ADDR
39310: LD_INT 1
39312: PUSH
39313: FOR_DOWNTO
39314: IFFALSE 39391
// begin index := rand ( 1 , array ) ;
39316: LD_ADDR_VAR 0 4
39320: PUSH
39321: LD_INT 1
39323: PPUSH
39324: LD_VAR 0 1
39328: PPUSH
39329: CALL_OW 12
39333: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39334: LD_ADDR_VAR 0 2
39338: PUSH
39339: LD_VAR 0 2
39343: PPUSH
39344: LD_VAR 0 2
39348: PUSH
39349: LD_INT 1
39351: PLUS
39352: PPUSH
39353: LD_VAR 0 1
39357: PUSH
39358: LD_VAR 0 4
39362: ARRAY
39363: PPUSH
39364: CALL_OW 2
39368: ST_TO_ADDR
// array := Delete ( array , index ) ;
39369: LD_ADDR_VAR 0 1
39373: PUSH
39374: LD_VAR 0 1
39378: PPUSH
39379: LD_VAR 0 4
39383: PPUSH
39384: CALL_OW 3
39388: ST_TO_ADDR
// end ;
39389: GO 39313
39391: POP
39392: POP
// end ;
39393: LD_VAR 0 2
39397: RET
// export function GetBaseMaterials ( base ) ; begin
39398: LD_INT 0
39400: PPUSH
// result := [ 0 , 0 , 0 ] ;
39401: LD_ADDR_VAR 0 2
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: LIST
39419: ST_TO_ADDR
// if not base then
39420: LD_VAR 0 1
39424: NOT
39425: IFFALSE 39429
// exit ;
39427: GO 39478
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39429: LD_ADDR_VAR 0 2
39433: PUSH
39434: LD_VAR 0 1
39438: PPUSH
39439: LD_INT 1
39441: PPUSH
39442: CALL_OW 275
39446: PUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: LD_INT 2
39454: PPUSH
39455: CALL_OW 275
39459: PUSH
39460: LD_VAR 0 1
39464: PPUSH
39465: LD_INT 3
39467: PPUSH
39468: CALL_OW 275
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
// end ;
39478: LD_VAR 0 2
39482: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39483: LD_INT 0
39485: PPUSH
39486: PPUSH
// result := array ;
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: LD_VAR 0 1
39496: ST_TO_ADDR
// if size >= result then
39497: LD_VAR 0 2
39501: PUSH
39502: LD_VAR 0 3
39506: GREATEREQUAL
39507: IFFALSE 39511
// exit ;
39509: GO 39561
// if size then
39511: LD_VAR 0 2
39515: IFFALSE 39561
// for i := array downto size do
39517: LD_ADDR_VAR 0 4
39521: PUSH
39522: DOUBLE
39523: LD_VAR 0 1
39527: INC
39528: ST_TO_ADDR
39529: LD_VAR 0 2
39533: PUSH
39534: FOR_DOWNTO
39535: IFFALSE 39559
// result := Delete ( result , result ) ;
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_VAR 0 3
39546: PPUSH
39547: LD_VAR 0 3
39551: PPUSH
39552: CALL_OW 3
39556: ST_TO_ADDR
39557: GO 39534
39559: POP
39560: POP
// end ;
39561: LD_VAR 0 3
39565: RET
// export function ComExit ( unit ) ; var tmp ; begin
39566: LD_INT 0
39568: PPUSH
39569: PPUSH
// if not IsInUnit ( unit ) then
39570: LD_VAR 0 1
39574: PPUSH
39575: CALL_OW 310
39579: NOT
39580: IFFALSE 39584
// exit ;
39582: GO 39644
// tmp := IsInUnit ( unit ) ;
39584: LD_ADDR_VAR 0 3
39588: PUSH
39589: LD_VAR 0 1
39593: PPUSH
39594: CALL_OW 310
39598: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39599: LD_VAR 0 3
39603: PPUSH
39604: CALL_OW 247
39608: PUSH
39609: LD_INT 2
39611: EQUAL
39612: IFFALSE 39625
// ComExitVehicle ( unit ) else
39614: LD_VAR 0 1
39618: PPUSH
39619: CALL_OW 121
39623: GO 39634
// ComExitBuilding ( unit ) ;
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 122
// result := tmp ;
39634: LD_ADDR_VAR 0 2
39638: PUSH
39639: LD_VAR 0 3
39643: ST_TO_ADDR
// end ;
39644: LD_VAR 0 2
39648: RET
// export function ComExitAll ( units ) ; var i ; begin
39649: LD_INT 0
39651: PPUSH
39652: PPUSH
// if not units then
39653: LD_VAR 0 1
39657: NOT
39658: IFFALSE 39662
// exit ;
39660: GO 39688
// for i in units do
39662: LD_ADDR_VAR 0 3
39666: PUSH
39667: LD_VAR 0 1
39671: PUSH
39672: FOR_IN
39673: IFFALSE 39686
// ComExit ( i ) ;
39675: LD_VAR 0 3
39679: PPUSH
39680: CALL 39566 0 1
39684: GO 39672
39686: POP
39687: POP
// end ;
39688: LD_VAR 0 2
39692: RET
// export function ResetHc ; begin
39693: LD_INT 0
39695: PPUSH
// InitHc ;
39696: CALL_OW 19
// hc_importance := 0 ;
39700: LD_ADDR_OWVAR 32
39704: PUSH
39705: LD_INT 0
39707: ST_TO_ADDR
// end ;
39708: LD_VAR 0 1
39712: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39713: LD_INT 0
39715: PPUSH
39716: PPUSH
39717: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39718: LD_ADDR_VAR 0 6
39722: PUSH
39723: LD_VAR 0 1
39727: PUSH
39728: LD_VAR 0 3
39732: PLUS
39733: PUSH
39734: LD_INT 2
39736: DIV
39737: ST_TO_ADDR
// if _x < 0 then
39738: LD_VAR 0 6
39742: PUSH
39743: LD_INT 0
39745: LESS
39746: IFFALSE 39763
// _x := _x * - 1 ;
39748: LD_ADDR_VAR 0 6
39752: PUSH
39753: LD_VAR 0 6
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: MUL
39762: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39763: LD_ADDR_VAR 0 7
39767: PUSH
39768: LD_VAR 0 2
39772: PUSH
39773: LD_VAR 0 4
39777: PLUS
39778: PUSH
39779: LD_INT 2
39781: DIV
39782: ST_TO_ADDR
// if _y < 0 then
39783: LD_VAR 0 7
39787: PUSH
39788: LD_INT 0
39790: LESS
39791: IFFALSE 39808
// _y := _y * - 1 ;
39793: LD_ADDR_VAR 0 7
39797: PUSH
39798: LD_VAR 0 7
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: MUL
39807: ST_TO_ADDR
// result := [ _x , _y ] ;
39808: LD_ADDR_VAR 0 5
39812: PUSH
39813: LD_VAR 0 6
39817: PUSH
39818: LD_VAR 0 7
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: ST_TO_ADDR
// end ;
39827: LD_VAR 0 5
39831: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39832: LD_INT 0
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
// task := GetTaskList ( unit ) ;
39838: LD_ADDR_VAR 0 7
39842: PUSH
39843: LD_VAR 0 1
39847: PPUSH
39848: CALL_OW 437
39852: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39853: LD_VAR 0 7
39857: NOT
39858: PUSH
39859: LD_VAR 0 1
39863: PPUSH
39864: LD_VAR 0 2
39868: PPUSH
39869: CALL_OW 308
39873: NOT
39874: AND
39875: IFFALSE 39879
// exit ;
39877: GO 39997
// if IsInArea ( unit , area ) then
39879: LD_VAR 0 1
39883: PPUSH
39884: LD_VAR 0 2
39888: PPUSH
39889: CALL_OW 308
39893: IFFALSE 39911
// begin ComMoveToArea ( unit , goAway ) ;
39895: LD_VAR 0 1
39899: PPUSH
39900: LD_VAR 0 3
39904: PPUSH
39905: CALL_OW 113
// exit ;
39909: GO 39997
// end ; if task [ 1 ] [ 1 ] <> M then
39911: LD_VAR 0 7
39915: PUSH
39916: LD_INT 1
39918: ARRAY
39919: PUSH
39920: LD_INT 1
39922: ARRAY
39923: PUSH
39924: LD_STRING M
39926: NONEQUAL
39927: IFFALSE 39931
// exit ;
39929: GO 39997
// x := task [ 1 ] [ 2 ] ;
39931: LD_ADDR_VAR 0 5
39935: PUSH
39936: LD_VAR 0 7
39940: PUSH
39941: LD_INT 1
39943: ARRAY
39944: PUSH
39945: LD_INT 2
39947: ARRAY
39948: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39949: LD_ADDR_VAR 0 6
39953: PUSH
39954: LD_VAR 0 7
39958: PUSH
39959: LD_INT 1
39961: ARRAY
39962: PUSH
39963: LD_INT 3
39965: ARRAY
39966: ST_TO_ADDR
// if InArea ( x , y , area ) then
39967: LD_VAR 0 5
39971: PPUSH
39972: LD_VAR 0 6
39976: PPUSH
39977: LD_VAR 0 2
39981: PPUSH
39982: CALL_OW 309
39986: IFFALSE 39997
// ComStop ( unit ) ;
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 141
// end ;
39997: LD_VAR 0 4
40001: RET
// export function Abs ( value ) ; begin
40002: LD_INT 0
40004: PPUSH
// result := value ;
40005: LD_ADDR_VAR 0 2
40009: PUSH
40010: LD_VAR 0 1
40014: ST_TO_ADDR
// if value < 0 then
40015: LD_VAR 0 1
40019: PUSH
40020: LD_INT 0
40022: LESS
40023: IFFALSE 40040
// result := value * - 1 ;
40025: LD_ADDR_VAR 0 2
40029: PUSH
40030: LD_VAR 0 1
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: MUL
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 2
40044: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40045: LD_INT 0
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
// if not unit or not building then
40055: LD_VAR 0 1
40059: NOT
40060: PUSH
40061: LD_VAR 0 2
40065: NOT
40066: OR
40067: IFFALSE 40071
// exit ;
40069: GO 40297
// x := GetX ( building ) ;
40071: LD_ADDR_VAR 0 4
40075: PUSH
40076: LD_VAR 0 2
40080: PPUSH
40081: CALL_OW 250
40085: ST_TO_ADDR
// y := GetY ( building ) ;
40086: LD_ADDR_VAR 0 6
40090: PUSH
40091: LD_VAR 0 2
40095: PPUSH
40096: CALL_OW 251
40100: ST_TO_ADDR
// d := GetDir ( building ) ;
40101: LD_ADDR_VAR 0 8
40105: PUSH
40106: LD_VAR 0 2
40110: PPUSH
40111: CALL_OW 254
40115: ST_TO_ADDR
// r := 4 ;
40116: LD_ADDR_VAR 0 9
40120: PUSH
40121: LD_INT 4
40123: ST_TO_ADDR
// for i := 1 to 5 do
40124: LD_ADDR_VAR 0 10
40128: PUSH
40129: DOUBLE
40130: LD_INT 1
40132: DEC
40133: ST_TO_ADDR
40134: LD_INT 5
40136: PUSH
40137: FOR_TO
40138: IFFALSE 40295
// begin _x := ShiftX ( x , d , r + i ) ;
40140: LD_ADDR_VAR 0 5
40144: PUSH
40145: LD_VAR 0 4
40149: PPUSH
40150: LD_VAR 0 8
40154: PPUSH
40155: LD_VAR 0 9
40159: PUSH
40160: LD_VAR 0 10
40164: PLUS
40165: PPUSH
40166: CALL_OW 272
40170: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40171: LD_ADDR_VAR 0 7
40175: PUSH
40176: LD_VAR 0 6
40180: PPUSH
40181: LD_VAR 0 8
40185: PPUSH
40186: LD_VAR 0 9
40190: PUSH
40191: LD_VAR 0 10
40195: PLUS
40196: PPUSH
40197: CALL_OW 273
40201: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40202: LD_VAR 0 5
40206: PPUSH
40207: LD_VAR 0 7
40211: PPUSH
40212: CALL_OW 488
40216: PUSH
40217: LD_VAR 0 5
40221: PPUSH
40222: LD_VAR 0 7
40226: PPUSH
40227: CALL_OW 428
40231: PPUSH
40232: CALL_OW 247
40236: PUSH
40237: LD_INT 3
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: IN
40247: NOT
40248: AND
40249: IFFALSE 40293
// begin ComMoveXY ( unit , _x , _y ) ;
40251: LD_VAR 0 1
40255: PPUSH
40256: LD_VAR 0 5
40260: PPUSH
40261: LD_VAR 0 7
40265: PPUSH
40266: CALL_OW 111
// result := [ _x , _y ] ;
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: LD_VAR 0 5
40279: PUSH
40280: LD_VAR 0 7
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// exit ;
40289: POP
40290: POP
40291: GO 40297
// end ; end ;
40293: GO 40137
40295: POP
40296: POP
// end ;
40297: LD_VAR 0 3
40301: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40302: LD_INT 0
40304: PPUSH
40305: PPUSH
40306: PPUSH
// result := 0 ;
40307: LD_ADDR_VAR 0 3
40311: PUSH
40312: LD_INT 0
40314: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40315: LD_VAR 0 1
40319: PUSH
40320: LD_INT 0
40322: LESS
40323: PUSH
40324: LD_VAR 0 1
40328: PUSH
40329: LD_INT 8
40331: GREATER
40332: OR
40333: PUSH
40334: LD_VAR 0 2
40338: PUSH
40339: LD_INT 0
40341: LESS
40342: OR
40343: PUSH
40344: LD_VAR 0 2
40348: PUSH
40349: LD_INT 8
40351: GREATER
40352: OR
40353: IFFALSE 40357
// exit ;
40355: GO 40432
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40357: LD_ADDR_VAR 0 4
40361: PUSH
40362: LD_INT 22
40364: PUSH
40365: LD_VAR 0 2
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PPUSH
40374: CALL_OW 69
40378: PUSH
40379: FOR_IN
40380: IFFALSE 40430
// begin un := UnitShoot ( i ) ;
40382: LD_ADDR_VAR 0 5
40386: PUSH
40387: LD_VAR 0 4
40391: PPUSH
40392: CALL_OW 504
40396: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40397: LD_VAR 0 5
40401: PPUSH
40402: CALL_OW 255
40406: PUSH
40407: LD_VAR 0 1
40411: EQUAL
40412: IFFALSE 40428
// begin result := un ;
40414: LD_ADDR_VAR 0 3
40418: PUSH
40419: LD_VAR 0 5
40423: ST_TO_ADDR
// exit ;
40424: POP
40425: POP
40426: GO 40432
// end ; end ;
40428: GO 40379
40430: POP
40431: POP
// end ;
40432: LD_VAR 0 3
40436: RET
// export function GetCargoBay ( units ) ; begin
40437: LD_INT 0
40439: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40440: LD_ADDR_VAR 0 2
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 34
40455: PUSH
40456: LD_INT 12
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 34
40465: PUSH
40466: LD_INT 51
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 34
40475: PUSH
40476: LD_INT 32
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 34
40485: PUSH
40486: LD_INT 89
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: PPUSH
40500: CALL_OW 72
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 2
40509: RET
// export function Negate ( value ) ; begin
40510: LD_INT 0
40512: PPUSH
// result := not value ;
40513: LD_ADDR_VAR 0 2
40517: PUSH
40518: LD_VAR 0 1
40522: NOT
40523: ST_TO_ADDR
// end ;
40524: LD_VAR 0 2
40528: RET
// export function Inc ( value ) ; begin
40529: LD_INT 0
40531: PPUSH
// result := value + 1 ;
40532: LD_ADDR_VAR 0 2
40536: PUSH
40537: LD_VAR 0 1
40541: PUSH
40542: LD_INT 1
40544: PLUS
40545: ST_TO_ADDR
// end ;
40546: LD_VAR 0 2
40550: RET
// export function Dec ( value ) ; begin
40551: LD_INT 0
40553: PPUSH
// result := value - 1 ;
40554: LD_ADDR_VAR 0 2
40558: PUSH
40559: LD_VAR 0 1
40563: PUSH
40564: LD_INT 1
40566: MINUS
40567: ST_TO_ADDR
// end ;
40568: LD_VAR 0 2
40572: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40573: LD_INT 0
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40583: LD_VAR 0 1
40587: PPUSH
40588: LD_VAR 0 2
40592: PPUSH
40593: CALL_OW 488
40597: NOT
40598: PUSH
40599: LD_VAR 0 3
40603: PPUSH
40604: LD_VAR 0 4
40608: PPUSH
40609: CALL_OW 488
40613: NOT
40614: OR
40615: IFFALSE 40628
// begin result := - 1 ;
40617: LD_ADDR_VAR 0 5
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: ST_TO_ADDR
// exit ;
40626: GO 40863
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40628: LD_ADDR_VAR 0 12
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: LD_VAR 0 2
40642: PPUSH
40643: LD_VAR 0 3
40647: PPUSH
40648: LD_VAR 0 4
40652: PPUSH
40653: CALL 39713 0 4
40657: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40658: LD_ADDR_VAR 0 11
40662: PUSH
40663: LD_VAR 0 1
40667: PPUSH
40668: LD_VAR 0 2
40672: PPUSH
40673: LD_VAR 0 12
40677: PUSH
40678: LD_INT 1
40680: ARRAY
40681: PPUSH
40682: LD_VAR 0 12
40686: PUSH
40687: LD_INT 2
40689: ARRAY
40690: PPUSH
40691: CALL_OW 298
40695: ST_TO_ADDR
// distance := 9999 ;
40696: LD_ADDR_VAR 0 10
40700: PUSH
40701: LD_INT 9999
40703: ST_TO_ADDR
// for i := 0 to 5 do
40704: LD_ADDR_VAR 0 6
40708: PUSH
40709: DOUBLE
40710: LD_INT 0
40712: DEC
40713: ST_TO_ADDR
40714: LD_INT 5
40716: PUSH
40717: FOR_TO
40718: IFFALSE 40861
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40720: LD_ADDR_VAR 0 7
40724: PUSH
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_VAR 0 6
40734: PPUSH
40735: LD_VAR 0 11
40739: PPUSH
40740: CALL_OW 272
40744: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40745: LD_ADDR_VAR 0 8
40749: PUSH
40750: LD_VAR 0 2
40754: PPUSH
40755: LD_VAR 0 6
40759: PPUSH
40760: LD_VAR 0 11
40764: PPUSH
40765: CALL_OW 273
40769: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40770: LD_VAR 0 7
40774: PPUSH
40775: LD_VAR 0 8
40779: PPUSH
40780: CALL_OW 488
40784: NOT
40785: IFFALSE 40789
// continue ;
40787: GO 40717
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40789: LD_ADDR_VAR 0 9
40793: PUSH
40794: LD_VAR 0 12
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PPUSH
40803: LD_VAR 0 12
40807: PUSH
40808: LD_INT 2
40810: ARRAY
40811: PPUSH
40812: LD_VAR 0 7
40816: PPUSH
40817: LD_VAR 0 8
40821: PPUSH
40822: CALL_OW 298
40826: ST_TO_ADDR
// if tmp < distance then
40827: LD_VAR 0 9
40831: PUSH
40832: LD_VAR 0 10
40836: LESS
40837: IFFALSE 40859
// begin result := i ;
40839: LD_ADDR_VAR 0 5
40843: PUSH
40844: LD_VAR 0 6
40848: ST_TO_ADDR
// distance := tmp ;
40849: LD_ADDR_VAR 0 10
40853: PUSH
40854: LD_VAR 0 9
40858: ST_TO_ADDR
// end ; end ;
40859: GO 40717
40861: POP
40862: POP
// end ;
40863: LD_VAR 0 5
40867: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
// if not driver or not IsInUnit ( driver ) then
40872: LD_VAR 0 1
40876: NOT
40877: PUSH
40878: LD_VAR 0 1
40882: PPUSH
40883: CALL_OW 310
40887: NOT
40888: OR
40889: IFFALSE 40893
// exit ;
40891: GO 40983
// vehicle := IsInUnit ( driver ) ;
40893: LD_ADDR_VAR 0 3
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: CALL_OW 310
40907: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40908: LD_VAR 0 1
40912: PPUSH
40913: LD_STRING \
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: PUSH
40943: LD_STRING E
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_VAR 0 3
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PPUSH
40979: CALL_OW 446
// end ;
40983: LD_VAR 0 2
40987: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40988: LD_INT 0
40990: PPUSH
40991: PPUSH
// if not driver or not IsInUnit ( driver ) then
40992: LD_VAR 0 1
40996: NOT
40997: PUSH
40998: LD_VAR 0 1
41002: PPUSH
41003: CALL_OW 310
41007: NOT
41008: OR
41009: IFFALSE 41013
// exit ;
41011: GO 41103
// vehicle := IsInUnit ( driver ) ;
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_VAR 0 1
41022: PPUSH
41023: CALL_OW 310
41027: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41028: LD_VAR 0 1
41032: PPUSH
41033: LD_STRING \
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: PUSH
41063: LD_STRING E
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_VAR 0 3
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PPUSH
41099: CALL_OW 447
// end ;
41103: LD_VAR 0 2
41107: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41108: LD_INT 0
41110: PPUSH
41111: PPUSH
41112: PPUSH
// tmp := [ ] ;
41113: LD_ADDR_VAR 0 5
41117: PUSH
41118: EMPTY
41119: ST_TO_ADDR
// for i in units do
41120: LD_ADDR_VAR 0 4
41124: PUSH
41125: LD_VAR 0 1
41129: PUSH
41130: FOR_IN
41131: IFFALSE 41169
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41133: LD_ADDR_VAR 0 5
41137: PUSH
41138: LD_VAR 0 5
41142: PPUSH
41143: LD_VAR 0 5
41147: PUSH
41148: LD_INT 1
41150: PLUS
41151: PPUSH
41152: LD_VAR 0 4
41156: PPUSH
41157: CALL_OW 256
41161: PPUSH
41162: CALL_OW 2
41166: ST_TO_ADDR
41167: GO 41130
41169: POP
41170: POP
// if not tmp then
41171: LD_VAR 0 5
41175: NOT
41176: IFFALSE 41180
// exit ;
41178: GO 41228
// if asc then
41180: LD_VAR 0 2
41184: IFFALSE 41208
// result := SortListByListAsc ( units , tmp ) else
41186: LD_ADDR_VAR 0 3
41190: PUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: LD_VAR 0 5
41200: PPUSH
41201: CALL_OW 76
41205: ST_TO_ADDR
41206: GO 41228
// result := SortListByListDesc ( units , tmp ) ;
41208: LD_ADDR_VAR 0 3
41212: PUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: LD_VAR 0 5
41222: PPUSH
41223: CALL_OW 77
41227: ST_TO_ADDR
// end ;
41228: LD_VAR 0 3
41232: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
// task := GetTaskList ( mech ) ;
41237: LD_ADDR_VAR 0 4
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 437
41251: ST_TO_ADDR
// if not task then
41252: LD_VAR 0 4
41256: NOT
41257: IFFALSE 41261
// exit ;
41259: GO 41303
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 4
41270: PUSH
41271: LD_INT 1
41273: ARRAY
41274: PUSH
41275: LD_INT 1
41277: ARRAY
41278: PUSH
41279: LD_STRING r
41281: EQUAL
41282: PUSH
41283: LD_VAR 0 4
41287: PUSH
41288: LD_INT 1
41290: ARRAY
41291: PUSH
41292: LD_INT 4
41294: ARRAY
41295: PUSH
41296: LD_VAR 0 2
41300: EQUAL
41301: AND
41302: ST_TO_ADDR
// end ;
41303: LD_VAR 0 3
41307: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41308: LD_INT 0
41310: PPUSH
// SetDir ( unit , d ) ;
41311: LD_VAR 0 1
41315: PPUSH
41316: LD_VAR 0 4
41320: PPUSH
41321: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41325: LD_VAR 0 1
41329: PPUSH
41330: LD_VAR 0 2
41334: PPUSH
41335: LD_VAR 0 3
41339: PPUSH
41340: LD_VAR 0 5
41344: PPUSH
41345: CALL_OW 48
// end ;
41349: LD_VAR 0 6
41353: RET
// export function ToNaturalNumber ( number ) ; begin
41354: LD_INT 0
41356: PPUSH
// result := number div 1 ;
41357: LD_ADDR_VAR 0 2
41361: PUSH
41362: LD_VAR 0 1
41366: PUSH
41367: LD_INT 1
41369: DIV
41370: ST_TO_ADDR
// if number < 0 then
41371: LD_VAR 0 1
41375: PUSH
41376: LD_INT 0
41378: LESS
41379: IFFALSE 41389
// result := 0 ;
41381: LD_ADDR_VAR 0 2
41385: PUSH
41386: LD_INT 0
41388: ST_TO_ADDR
// end ;
41389: LD_VAR 0 2
41393: RET
// export function SortByClass ( units , class ) ; var un ; begin
41394: LD_INT 0
41396: PPUSH
41397: PPUSH
// if not units or not class then
41398: LD_VAR 0 1
41402: NOT
41403: PUSH
41404: LD_VAR 0 2
41408: NOT
41409: OR
41410: IFFALSE 41414
// exit ;
41412: GO 41509
// result := [ ] ;
41414: LD_ADDR_VAR 0 3
41418: PUSH
41419: EMPTY
41420: ST_TO_ADDR
// for un in units do
41421: LD_ADDR_VAR 0 4
41425: PUSH
41426: LD_VAR 0 1
41430: PUSH
41431: FOR_IN
41432: IFFALSE 41507
// if GetClass ( un ) = class then
41434: LD_VAR 0 4
41438: PPUSH
41439: CALL_OW 257
41443: PUSH
41444: LD_VAR 0 2
41448: EQUAL
41449: IFFALSE 41476
// result := Insert ( result , 1 , un ) else
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_VAR 0 3
41460: PPUSH
41461: LD_INT 1
41463: PPUSH
41464: LD_VAR 0 4
41468: PPUSH
41469: CALL_OW 2
41473: ST_TO_ADDR
41474: GO 41505
// result := Replace ( result , result + 1 , un ) ;
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_VAR 0 3
41485: PPUSH
41486: LD_VAR 0 3
41490: PUSH
41491: LD_INT 1
41493: PLUS
41494: PPUSH
41495: LD_VAR 0 4
41499: PPUSH
41500: CALL_OW 1
41504: ST_TO_ADDR
41505: GO 41431
41507: POP
41508: POP
// end ;
41509: LD_VAR 0 3
41513: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
// result := [ ] ;
41523: LD_ADDR_VAR 0 4
41527: PUSH
41528: EMPTY
41529: ST_TO_ADDR
// if x - r < 0 then
41530: LD_VAR 0 1
41534: PUSH
41535: LD_VAR 0 3
41539: MINUS
41540: PUSH
41541: LD_INT 0
41543: LESS
41544: IFFALSE 41556
// min_x := 0 else
41546: LD_ADDR_VAR 0 8
41550: PUSH
41551: LD_INT 0
41553: ST_TO_ADDR
41554: GO 41572
// min_x := x - r ;
41556: LD_ADDR_VAR 0 8
41560: PUSH
41561: LD_VAR 0 1
41565: PUSH
41566: LD_VAR 0 3
41570: MINUS
41571: ST_TO_ADDR
// if y - r < 0 then
41572: LD_VAR 0 2
41576: PUSH
41577: LD_VAR 0 3
41581: MINUS
41582: PUSH
41583: LD_INT 0
41585: LESS
41586: IFFALSE 41598
// min_y := 0 else
41588: LD_ADDR_VAR 0 7
41592: PUSH
41593: LD_INT 0
41595: ST_TO_ADDR
41596: GO 41614
// min_y := y - r ;
41598: LD_ADDR_VAR 0 7
41602: PUSH
41603: LD_VAR 0 2
41607: PUSH
41608: LD_VAR 0 3
41612: MINUS
41613: ST_TO_ADDR
// max_x := x + r ;
41614: LD_ADDR_VAR 0 9
41618: PUSH
41619: LD_VAR 0 1
41623: PUSH
41624: LD_VAR 0 3
41628: PLUS
41629: ST_TO_ADDR
// max_y := y + r ;
41630: LD_ADDR_VAR 0 10
41634: PUSH
41635: LD_VAR 0 2
41639: PUSH
41640: LD_VAR 0 3
41644: PLUS
41645: ST_TO_ADDR
// for _x = min_x to max_x do
41646: LD_ADDR_VAR 0 5
41650: PUSH
41651: DOUBLE
41652: LD_VAR 0 8
41656: DEC
41657: ST_TO_ADDR
41658: LD_VAR 0 9
41662: PUSH
41663: FOR_TO
41664: IFFALSE 41765
// for _y = min_y to max_y do
41666: LD_ADDR_VAR 0 6
41670: PUSH
41671: DOUBLE
41672: LD_VAR 0 7
41676: DEC
41677: ST_TO_ADDR
41678: LD_VAR 0 10
41682: PUSH
41683: FOR_TO
41684: IFFALSE 41761
// begin if not ValidHex ( _x , _y ) then
41686: LD_VAR 0 5
41690: PPUSH
41691: LD_VAR 0 6
41695: PPUSH
41696: CALL_OW 488
41700: NOT
41701: IFFALSE 41705
// continue ;
41703: GO 41683
// if GetResourceTypeXY ( _x , _y ) then
41705: LD_VAR 0 5
41709: PPUSH
41710: LD_VAR 0 6
41714: PPUSH
41715: CALL_OW 283
41719: IFFALSE 41759
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41721: LD_ADDR_VAR 0 4
41725: PUSH
41726: LD_VAR 0 4
41730: PPUSH
41731: LD_VAR 0 4
41735: PUSH
41736: LD_INT 1
41738: PLUS
41739: PPUSH
41740: LD_VAR 0 5
41744: PUSH
41745: LD_VAR 0 6
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PPUSH
41754: CALL_OW 1
41758: ST_TO_ADDR
// end ;
41759: GO 41683
41761: POP
41762: POP
41763: GO 41663
41765: POP
41766: POP
// end ;
41767: LD_VAR 0 4
41771: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41772: LD_INT 0
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
// if not units then
41782: LD_VAR 0 1
41786: NOT
41787: IFFALSE 41791
// exit ;
41789: GO 42319
// result := UnitFilter ( units , [ f_ok ] ) ;
41791: LD_ADDR_VAR 0 3
41795: PUSH
41796: LD_VAR 0 1
41800: PPUSH
41801: LD_INT 50
41803: PUSH
41804: EMPTY
41805: LIST
41806: PPUSH
41807: CALL_OW 72
41811: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41812: LD_ADDR_VAR 0 8
41816: PUSH
41817: LD_VAR 0 1
41821: PUSH
41822: LD_INT 1
41824: ARRAY
41825: PPUSH
41826: CALL_OW 255
41830: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41831: LD_ADDR_VAR 0 10
41835: PUSH
41836: LD_INT 29
41838: PUSH
41839: LD_INT 91
41841: PUSH
41842: LD_INT 49
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: ST_TO_ADDR
// if not result then
41850: LD_VAR 0 3
41854: NOT
41855: IFFALSE 41859
// exit ;
41857: GO 42319
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: LD_INT 81
41866: PUSH
41867: LD_VAR 0 8
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PPUSH
41876: CALL_OW 69
41880: ST_TO_ADDR
// for i in result do
41881: LD_ADDR_VAR 0 4
41885: PUSH
41886: LD_VAR 0 3
41890: PUSH
41891: FOR_IN
41892: IFFALSE 42317
// begin tag := GetTag ( i ) + 1 ;
41894: LD_ADDR_VAR 0 9
41898: PUSH
41899: LD_VAR 0 4
41903: PPUSH
41904: CALL_OW 110
41908: PUSH
41909: LD_INT 1
41911: PLUS
41912: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41913: LD_ADDR_VAR 0 7
41917: PUSH
41918: LD_VAR 0 4
41922: PPUSH
41923: CALL_OW 250
41927: PPUSH
41928: LD_VAR 0 4
41932: PPUSH
41933: CALL_OW 251
41937: PPUSH
41938: LD_INT 4
41940: PPUSH
41941: CALL 41514 0 3
41945: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41946: LD_VAR 0 4
41950: PPUSH
41951: CALL_OW 247
41955: PUSH
41956: LD_INT 2
41958: EQUAL
41959: PUSH
41960: LD_VAR 0 7
41964: PUSH
41965: LD_INT 2
41967: GREATER
41968: AND
41969: PUSH
41970: LD_VAR 0 4
41974: PPUSH
41975: CALL_OW 264
41979: PUSH
41980: LD_VAR 0 10
41984: IN
41985: NOT
41986: AND
41987: IFFALSE 42026
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41989: LD_VAR 0 4
41993: PPUSH
41994: LD_VAR 0 7
41998: PUSH
41999: LD_INT 1
42001: ARRAY
42002: PUSH
42003: LD_INT 1
42005: ARRAY
42006: PPUSH
42007: LD_VAR 0 7
42011: PUSH
42012: LD_INT 1
42014: ARRAY
42015: PUSH
42016: LD_INT 2
42018: ARRAY
42019: PPUSH
42020: CALL_OW 116
42024: GO 42315
// if path > tag then
42026: LD_VAR 0 2
42030: PUSH
42031: LD_VAR 0 9
42035: GREATER
42036: IFFALSE 42244
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42038: LD_ADDR_VAR 0 6
42042: PUSH
42043: LD_VAR 0 5
42047: PPUSH
42048: LD_INT 91
42050: PUSH
42051: LD_VAR 0 4
42055: PUSH
42056: LD_INT 8
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: PPUSH
42064: CALL_OW 72
42068: ST_TO_ADDR
// if nearEnemy then
42069: LD_VAR 0 6
42073: IFFALSE 42142
// begin if GetWeapon ( i ) = ru_time_lapser then
42075: LD_VAR 0 4
42079: PPUSH
42080: CALL_OW 264
42084: PUSH
42085: LD_INT 49
42087: EQUAL
42088: IFFALSE 42116
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42090: LD_VAR 0 4
42094: PPUSH
42095: LD_VAR 0 6
42099: PPUSH
42100: LD_VAR 0 4
42104: PPUSH
42105: CALL_OW 74
42109: PPUSH
42110: CALL_OW 112
42114: GO 42140
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42116: LD_VAR 0 4
42120: PPUSH
42121: LD_VAR 0 6
42125: PPUSH
42126: LD_VAR 0 4
42130: PPUSH
42131: CALL_OW 74
42135: PPUSH
42136: CALL 43390 0 2
// end else
42140: GO 42242
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42142: LD_VAR 0 4
42146: PPUSH
42147: LD_VAR 0 2
42151: PUSH
42152: LD_VAR 0 9
42156: ARRAY
42157: PUSH
42158: LD_INT 1
42160: ARRAY
42161: PPUSH
42162: LD_VAR 0 2
42166: PUSH
42167: LD_VAR 0 9
42171: ARRAY
42172: PUSH
42173: LD_INT 2
42175: ARRAY
42176: PPUSH
42177: CALL_OW 297
42181: PUSH
42182: LD_INT 6
42184: GREATER
42185: IFFALSE 42228
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42187: LD_VAR 0 4
42191: PPUSH
42192: LD_VAR 0 2
42196: PUSH
42197: LD_VAR 0 9
42201: ARRAY
42202: PUSH
42203: LD_INT 1
42205: ARRAY
42206: PPUSH
42207: LD_VAR 0 2
42211: PUSH
42212: LD_VAR 0 9
42216: ARRAY
42217: PUSH
42218: LD_INT 2
42220: ARRAY
42221: PPUSH
42222: CALL_OW 114
42226: GO 42242
// SetTag ( i , tag ) ;
42228: LD_VAR 0 4
42232: PPUSH
42233: LD_VAR 0 9
42237: PPUSH
42238: CALL_OW 109
// end else
42242: GO 42315
// if enemy then
42244: LD_VAR 0 5
42248: IFFALSE 42315
// begin if GetWeapon ( i ) = ru_time_lapser then
42250: LD_VAR 0 4
42254: PPUSH
42255: CALL_OW 264
42259: PUSH
42260: LD_INT 49
42262: EQUAL
42263: IFFALSE 42291
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42265: LD_VAR 0 4
42269: PPUSH
42270: LD_VAR 0 5
42274: PPUSH
42275: LD_VAR 0 4
42279: PPUSH
42280: CALL_OW 74
42284: PPUSH
42285: CALL_OW 112
42289: GO 42315
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42291: LD_VAR 0 4
42295: PPUSH
42296: LD_VAR 0 5
42300: PPUSH
42301: LD_VAR 0 4
42305: PPUSH
42306: CALL_OW 74
42310: PPUSH
42311: CALL 43390 0 2
// end ; end ;
42315: GO 41891
42317: POP
42318: POP
// end ;
42319: LD_VAR 0 3
42323: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42324: LD_INT 0
42326: PPUSH
42327: PPUSH
42328: PPUSH
// if not unit or IsInUnit ( unit ) then
42329: LD_VAR 0 1
42333: NOT
42334: PUSH
42335: LD_VAR 0 1
42339: PPUSH
42340: CALL_OW 310
42344: OR
42345: IFFALSE 42349
// exit ;
42347: GO 42440
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42349: LD_ADDR_VAR 0 4
42353: PUSH
42354: LD_VAR 0 1
42358: PPUSH
42359: CALL_OW 250
42363: PPUSH
42364: LD_VAR 0 2
42368: PPUSH
42369: LD_INT 1
42371: PPUSH
42372: CALL_OW 272
42376: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42377: LD_ADDR_VAR 0 5
42381: PUSH
42382: LD_VAR 0 1
42386: PPUSH
42387: CALL_OW 251
42391: PPUSH
42392: LD_VAR 0 2
42396: PPUSH
42397: LD_INT 1
42399: PPUSH
42400: CALL_OW 273
42404: ST_TO_ADDR
// if ValidHex ( x , y ) then
42405: LD_VAR 0 4
42409: PPUSH
42410: LD_VAR 0 5
42414: PPUSH
42415: CALL_OW 488
42419: IFFALSE 42440
// ComTurnXY ( unit , x , y ) ;
42421: LD_VAR 0 1
42425: PPUSH
42426: LD_VAR 0 4
42430: PPUSH
42431: LD_VAR 0 5
42435: PPUSH
42436: CALL_OW 118
// end ;
42440: LD_VAR 0 3
42444: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42445: LD_INT 0
42447: PPUSH
42448: PPUSH
// result := false ;
42449: LD_ADDR_VAR 0 3
42453: PUSH
42454: LD_INT 0
42456: ST_TO_ADDR
// if not units then
42457: LD_VAR 0 2
42461: NOT
42462: IFFALSE 42466
// exit ;
42464: GO 42511
// for i in units do
42466: LD_ADDR_VAR 0 4
42470: PUSH
42471: LD_VAR 0 2
42475: PUSH
42476: FOR_IN
42477: IFFALSE 42509
// if See ( side , i ) then
42479: LD_VAR 0 1
42483: PPUSH
42484: LD_VAR 0 4
42488: PPUSH
42489: CALL_OW 292
42493: IFFALSE 42507
// begin result := true ;
42495: LD_ADDR_VAR 0 3
42499: PUSH
42500: LD_INT 1
42502: ST_TO_ADDR
// exit ;
42503: POP
42504: POP
42505: GO 42511
// end ;
42507: GO 42476
42509: POP
42510: POP
// end ;
42511: LD_VAR 0 3
42515: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42516: LD_INT 0
42518: PPUSH
42519: PPUSH
42520: PPUSH
42521: PPUSH
// if not unit or not points then
42522: LD_VAR 0 1
42526: NOT
42527: PUSH
42528: LD_VAR 0 2
42532: NOT
42533: OR
42534: IFFALSE 42538
// exit ;
42536: GO 42628
// dist := 99999 ;
42538: LD_ADDR_VAR 0 5
42542: PUSH
42543: LD_INT 99999
42545: ST_TO_ADDR
// for i in points do
42546: LD_ADDR_VAR 0 4
42550: PUSH
42551: LD_VAR 0 2
42555: PUSH
42556: FOR_IN
42557: IFFALSE 42626
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42559: LD_ADDR_VAR 0 6
42563: PUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: LD_VAR 0 4
42573: PUSH
42574: LD_INT 1
42576: ARRAY
42577: PPUSH
42578: LD_VAR 0 4
42582: PUSH
42583: LD_INT 2
42585: ARRAY
42586: PPUSH
42587: CALL_OW 297
42591: ST_TO_ADDR
// if tmpDist < dist then
42592: LD_VAR 0 6
42596: PUSH
42597: LD_VAR 0 5
42601: LESS
42602: IFFALSE 42624
// begin result := i ;
42604: LD_ADDR_VAR 0 3
42608: PUSH
42609: LD_VAR 0 4
42613: ST_TO_ADDR
// dist := tmpDist ;
42614: LD_ADDR_VAR 0 5
42618: PUSH
42619: LD_VAR 0 6
42623: ST_TO_ADDR
// end ; end ;
42624: GO 42556
42626: POP
42627: POP
// end ;
42628: LD_VAR 0 3
42632: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42633: LD_INT 0
42635: PPUSH
// uc_side := side ;
42636: LD_ADDR_OWVAR 20
42640: PUSH
42641: LD_VAR 0 1
42645: ST_TO_ADDR
// uc_nation := 3 ;
42646: LD_ADDR_OWVAR 21
42650: PUSH
42651: LD_INT 3
42653: ST_TO_ADDR
// vc_chassis := 25 ;
42654: LD_ADDR_OWVAR 37
42658: PUSH
42659: LD_INT 25
42661: ST_TO_ADDR
// vc_engine := engine_siberite ;
42662: LD_ADDR_OWVAR 39
42666: PUSH
42667: LD_INT 3
42669: ST_TO_ADDR
// vc_control := control_computer ;
42670: LD_ADDR_OWVAR 38
42674: PUSH
42675: LD_INT 3
42677: ST_TO_ADDR
// vc_weapon := 59 ;
42678: LD_ADDR_OWVAR 40
42682: PUSH
42683: LD_INT 59
42685: ST_TO_ADDR
// result := CreateVehicle ;
42686: LD_ADDR_VAR 0 5
42690: PUSH
42691: CALL_OW 45
42695: ST_TO_ADDR
// SetDir ( result , d ) ;
42696: LD_VAR 0 5
42700: PPUSH
42701: LD_VAR 0 4
42705: PPUSH
42706: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42710: LD_VAR 0 5
42714: PPUSH
42715: LD_VAR 0 2
42719: PPUSH
42720: LD_VAR 0 3
42724: PPUSH
42725: LD_INT 0
42727: PPUSH
42728: CALL_OW 48
// end ;
42732: LD_VAR 0 5
42736: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42737: LD_INT 0
42739: PPUSH
42740: PPUSH
42741: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42742: LD_ADDR_VAR 0 2
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42765: LD_VAR 0 1
42769: NOT
42770: PUSH
42771: LD_VAR 0 1
42775: PPUSH
42776: CALL_OW 264
42780: PUSH
42781: LD_INT 12
42783: PUSH
42784: LD_INT 51
42786: PUSH
42787: LD_INT 32
42789: PUSH
42790: LD_INT 89
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: IN
42799: NOT
42800: OR
42801: IFFALSE 42805
// exit ;
42803: GO 42903
// for i := 1 to 3 do
42805: LD_ADDR_VAR 0 3
42809: PUSH
42810: DOUBLE
42811: LD_INT 1
42813: DEC
42814: ST_TO_ADDR
42815: LD_INT 3
42817: PUSH
42818: FOR_TO
42819: IFFALSE 42901
// begin tmp := GetCargo ( cargo , i ) ;
42821: LD_ADDR_VAR 0 4
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: LD_VAR 0 3
42835: PPUSH
42836: CALL_OW 289
42840: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42841: LD_ADDR_VAR 0 2
42845: PUSH
42846: LD_VAR 0 2
42850: PPUSH
42851: LD_VAR 0 3
42855: PPUSH
42856: LD_VAR 0 4
42860: PPUSH
42861: CALL_OW 1
42865: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42866: LD_ADDR_VAR 0 2
42870: PUSH
42871: LD_VAR 0 2
42875: PPUSH
42876: LD_INT 4
42878: PPUSH
42879: LD_VAR 0 2
42883: PUSH
42884: LD_INT 4
42886: ARRAY
42887: PUSH
42888: LD_VAR 0 4
42892: PLUS
42893: PPUSH
42894: CALL_OW 1
42898: ST_TO_ADDR
// end ;
42899: GO 42818
42901: POP
42902: POP
// end ;
42903: LD_VAR 0 2
42907: RET
// export function Length ( array ) ; begin
42908: LD_INT 0
42910: PPUSH
// result := array + 0 ;
42911: LD_ADDR_VAR 0 2
42915: PUSH
42916: LD_VAR 0 1
42920: PUSH
42921: LD_INT 0
42923: PLUS
42924: ST_TO_ADDR
// end ;
42925: LD_VAR 0 2
42929: RET
// export function PrepareArray ( array ) ; begin
42930: LD_INT 0
42932: PPUSH
// result := array diff 0 ;
42933: LD_ADDR_VAR 0 2
42937: PUSH
42938: LD_VAR 0 1
42942: PUSH
42943: LD_INT 0
42945: DIFF
42946: ST_TO_ADDR
// if not result [ 1 ] then
42947: LD_VAR 0 2
42951: PUSH
42952: LD_INT 1
42954: ARRAY
42955: NOT
42956: IFFALSE 42976
// result := Delete ( result , 1 ) ;
42958: LD_ADDR_VAR 0 2
42962: PUSH
42963: LD_VAR 0 2
42967: PPUSH
42968: LD_INT 1
42970: PPUSH
42971: CALL_OW 3
42975: ST_TO_ADDR
// end ;
42976: LD_VAR 0 2
42980: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42981: LD_INT 0
42983: PPUSH
42984: PPUSH
42985: PPUSH
42986: PPUSH
// sibRocketRange := 25 ;
42987: LD_ADDR_VAR 0 6
42991: PUSH
42992: LD_INT 25
42994: ST_TO_ADDR
// result := false ;
42995: LD_ADDR_VAR 0 4
42999: PUSH
43000: LD_INT 0
43002: ST_TO_ADDR
// for i := 0 to 5 do
43003: LD_ADDR_VAR 0 5
43007: PUSH
43008: DOUBLE
43009: LD_INT 0
43011: DEC
43012: ST_TO_ADDR
43013: LD_INT 5
43015: PUSH
43016: FOR_TO
43017: IFFALSE 43084
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43019: LD_VAR 0 1
43023: PPUSH
43024: LD_VAR 0 5
43028: PPUSH
43029: LD_VAR 0 6
43033: PPUSH
43034: CALL_OW 272
43038: PPUSH
43039: LD_VAR 0 2
43043: PPUSH
43044: LD_VAR 0 5
43048: PPUSH
43049: LD_VAR 0 6
43053: PPUSH
43054: CALL_OW 273
43058: PPUSH
43059: LD_VAR 0 3
43063: PPUSH
43064: CALL_OW 309
43068: IFFALSE 43082
// begin result := true ;
43070: LD_ADDR_VAR 0 4
43074: PUSH
43075: LD_INT 1
43077: ST_TO_ADDR
// exit ;
43078: POP
43079: POP
43080: GO 43086
// end ;
43082: GO 43016
43084: POP
43085: POP
// end ;
43086: LD_VAR 0 4
43090: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43091: LD_INT 0
43093: PPUSH
43094: PPUSH
43095: PPUSH
// if btype = b_depot then
43096: LD_VAR 0 2
43100: PUSH
43101: LD_INT 0
43103: EQUAL
43104: IFFALSE 43116
// begin result := true ;
43106: LD_ADDR_VAR 0 3
43110: PUSH
43111: LD_INT 1
43113: ST_TO_ADDR
// exit ;
43114: GO 43232
// end ; pom := GetBase ( depot ) ;
43116: LD_ADDR_VAR 0 4
43120: PUSH
43121: LD_VAR 0 1
43125: PPUSH
43126: CALL_OW 274
43130: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43131: LD_ADDR_VAR 0 5
43135: PUSH
43136: LD_VAR 0 2
43140: PPUSH
43141: LD_VAR 0 1
43145: PPUSH
43146: CALL_OW 248
43150: PPUSH
43151: CALL_OW 450
43155: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43156: LD_ADDR_VAR 0 3
43160: PUSH
43161: LD_VAR 0 4
43165: PPUSH
43166: LD_INT 1
43168: PPUSH
43169: CALL_OW 275
43173: PUSH
43174: LD_VAR 0 5
43178: PUSH
43179: LD_INT 1
43181: ARRAY
43182: GREATEREQUAL
43183: PUSH
43184: LD_VAR 0 4
43188: PPUSH
43189: LD_INT 2
43191: PPUSH
43192: CALL_OW 275
43196: PUSH
43197: LD_VAR 0 5
43201: PUSH
43202: LD_INT 2
43204: ARRAY
43205: GREATEREQUAL
43206: AND
43207: PUSH
43208: LD_VAR 0 4
43212: PPUSH
43213: LD_INT 3
43215: PPUSH
43216: CALL_OW 275
43220: PUSH
43221: LD_VAR 0 5
43225: PUSH
43226: LD_INT 3
43228: ARRAY
43229: GREATEREQUAL
43230: AND
43231: ST_TO_ADDR
// end ;
43232: LD_VAR 0 3
43236: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43237: LD_INT 0
43239: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43240: LD_VAR 0 1
43244: PPUSH
43245: LD_VAR 0 2
43249: PPUSH
43250: LD_INT 0
43252: PPUSH
43253: LD_INT 0
43255: PPUSH
43256: LD_INT 1
43258: PPUSH
43259: LD_INT 0
43261: PPUSH
43262: CALL_OW 587
// end ;
43266: LD_VAR 0 3
43270: RET
// export function CenterOnNow ( unit ) ; begin
43271: LD_INT 0
43273: PPUSH
// result := IsInUnit ( unit ) ;
43274: LD_ADDR_VAR 0 2
43278: PUSH
43279: LD_VAR 0 1
43283: PPUSH
43284: CALL_OW 310
43288: ST_TO_ADDR
// if not result then
43289: LD_VAR 0 2
43293: NOT
43294: IFFALSE 43306
// result := unit ;
43296: LD_ADDR_VAR 0 2
43300: PUSH
43301: LD_VAR 0 1
43305: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43306: LD_VAR 0 1
43310: PPUSH
43311: CALL_OW 87
// end ;
43315: LD_VAR 0 2
43319: RET
// export function ComMoveHex ( unit , hex ) ; begin
43320: LD_INT 0
43322: PPUSH
// if not hex then
43323: LD_VAR 0 2
43327: NOT
43328: IFFALSE 43332
// exit ;
43330: GO 43385
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43332: LD_VAR 0 2
43336: PUSH
43337: LD_INT 1
43339: ARRAY
43340: PPUSH
43341: LD_VAR 0 2
43345: PUSH
43346: LD_INT 2
43348: ARRAY
43349: PPUSH
43350: CALL_OW 428
43354: IFFALSE 43358
// exit ;
43356: GO 43385
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43358: LD_VAR 0 1
43362: PPUSH
43363: LD_VAR 0 2
43367: PUSH
43368: LD_INT 1
43370: ARRAY
43371: PPUSH
43372: LD_VAR 0 2
43376: PUSH
43377: LD_INT 2
43379: ARRAY
43380: PPUSH
43381: CALL_OW 111
// end ;
43385: LD_VAR 0 3
43389: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43390: LD_INT 0
43392: PPUSH
43393: PPUSH
43394: PPUSH
// if not unit or not enemy then
43395: LD_VAR 0 1
43399: NOT
43400: PUSH
43401: LD_VAR 0 2
43405: NOT
43406: OR
43407: IFFALSE 43411
// exit ;
43409: GO 43535
// x := GetX ( enemy ) ;
43411: LD_ADDR_VAR 0 4
43415: PUSH
43416: LD_VAR 0 2
43420: PPUSH
43421: CALL_OW 250
43425: ST_TO_ADDR
// y := GetY ( enemy ) ;
43426: LD_ADDR_VAR 0 5
43430: PUSH
43431: LD_VAR 0 2
43435: PPUSH
43436: CALL_OW 251
43440: ST_TO_ADDR
// if ValidHex ( x , y ) then
43441: LD_VAR 0 4
43445: PPUSH
43446: LD_VAR 0 5
43450: PPUSH
43451: CALL_OW 488
43455: IFFALSE 43535
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43457: LD_VAR 0 2
43461: PPUSH
43462: CALL_OW 247
43466: PUSH
43467: LD_INT 3
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: IN
43477: PUSH
43478: LD_VAR 0 1
43482: PPUSH
43483: CALL_OW 255
43487: PPUSH
43488: LD_VAR 0 2
43492: PPUSH
43493: CALL_OW 292
43497: OR
43498: IFFALSE 43516
// ComAttackUnit ( unit , enemy ) else
43500: LD_VAR 0 1
43504: PPUSH
43505: LD_VAR 0 2
43509: PPUSH
43510: CALL_OW 115
43514: GO 43535
// ComAgressiveMove ( unit , x , y ) ;
43516: LD_VAR 0 1
43520: PPUSH
43521: LD_VAR 0 4
43525: PPUSH
43526: LD_VAR 0 5
43530: PPUSH
43531: CALL_OW 114
// end ;
43535: LD_VAR 0 3
43539: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43540: LD_INT 0
43542: PPUSH
43543: PPUSH
43544: PPUSH
// list := AreaToList ( area , 0 ) ;
43545: LD_ADDR_VAR 0 5
43549: PUSH
43550: LD_VAR 0 1
43554: PPUSH
43555: LD_INT 0
43557: PPUSH
43558: CALL_OW 517
43562: ST_TO_ADDR
// if not list then
43563: LD_VAR 0 5
43567: NOT
43568: IFFALSE 43572
// exit ;
43570: GO 43702
// if all then
43572: LD_VAR 0 2
43576: IFFALSE 43664
// begin for i := 1 to list [ 1 ] do
43578: LD_ADDR_VAR 0 4
43582: PUSH
43583: DOUBLE
43584: LD_INT 1
43586: DEC
43587: ST_TO_ADDR
43588: LD_VAR 0 5
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: PUSH
43597: FOR_TO
43598: IFFALSE 43660
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43600: LD_ADDR_VAR 0 3
43604: PUSH
43605: LD_VAR 0 3
43609: PPUSH
43610: LD_VAR 0 3
43614: PUSH
43615: LD_INT 1
43617: PLUS
43618: PPUSH
43619: LD_VAR 0 5
43623: PUSH
43624: LD_INT 1
43626: ARRAY
43627: PUSH
43628: LD_VAR 0 4
43632: ARRAY
43633: PUSH
43634: LD_VAR 0 5
43638: PUSH
43639: LD_INT 2
43641: ARRAY
43642: PUSH
43643: LD_VAR 0 4
43647: ARRAY
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PPUSH
43653: CALL_OW 1
43657: ST_TO_ADDR
43658: GO 43597
43660: POP
43661: POP
// exit ;
43662: GO 43702
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43664: LD_ADDR_VAR 0 3
43668: PUSH
43669: LD_VAR 0 5
43673: PUSH
43674: LD_INT 1
43676: ARRAY
43677: PUSH
43678: LD_INT 1
43680: ARRAY
43681: PUSH
43682: LD_VAR 0 5
43686: PUSH
43687: LD_INT 2
43689: ARRAY
43690: PUSH
43691: LD_INT 1
43693: ARRAY
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: EMPTY
43700: LIST
43701: ST_TO_ADDR
// end ;
43702: LD_VAR 0 3
43706: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43707: LD_INT 0
43709: PPUSH
43710: PPUSH
// list := AreaToList ( area , 0 ) ;
43711: LD_ADDR_VAR 0 4
43715: PUSH
43716: LD_VAR 0 1
43720: PPUSH
43721: LD_INT 0
43723: PPUSH
43724: CALL_OW 517
43728: ST_TO_ADDR
// if not list then
43729: LD_VAR 0 4
43733: NOT
43734: IFFALSE 43738
// exit ;
43736: GO 43779
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43738: LD_ADDR_VAR 0 3
43742: PUSH
43743: LD_VAR 0 4
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PUSH
43752: LD_INT 1
43754: ARRAY
43755: PUSH
43756: LD_VAR 0 4
43760: PUSH
43761: LD_INT 2
43763: ARRAY
43764: PUSH
43765: LD_INT 1
43767: ARRAY
43768: PUSH
43769: LD_VAR 0 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
// end ;
43779: LD_VAR 0 3
43783: RET
// export function First ( array ) ; begin
43784: LD_INT 0
43786: PPUSH
// if not array then
43787: LD_VAR 0 1
43791: NOT
43792: IFFALSE 43796
// exit ;
43794: GO 43810
// result := array [ 1 ] ;
43796: LD_ADDR_VAR 0 2
43800: PUSH
43801: LD_VAR 0 1
43805: PUSH
43806: LD_INT 1
43808: ARRAY
43809: ST_TO_ADDR
// end ;
43810: LD_VAR 0 2
43814: RET
// export function Last ( array ) ; begin
43815: LD_INT 0
43817: PPUSH
// if not array then
43818: LD_VAR 0 1
43822: NOT
43823: IFFALSE 43827
// exit ;
43825: GO 43843
// result := array [ array ] ;
43827: LD_ADDR_VAR 0 2
43831: PUSH
43832: LD_VAR 0 1
43836: PUSH
43837: LD_VAR 0 1
43841: ARRAY
43842: ST_TO_ADDR
// end ;
43843: LD_VAR 0 2
43847: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43848: LD_INT 0
43850: PPUSH
43851: PPUSH
// result := [ ] ;
43852: LD_ADDR_VAR 0 5
43856: PUSH
43857: EMPTY
43858: ST_TO_ADDR
// if not array then
43859: LD_VAR 0 1
43863: NOT
43864: IFFALSE 43868
// exit ;
43866: GO 43980
// for i := 1 to array do
43868: LD_ADDR_VAR 0 6
43872: PUSH
43873: DOUBLE
43874: LD_INT 1
43876: DEC
43877: ST_TO_ADDR
43878: LD_VAR 0 1
43882: PUSH
43883: FOR_TO
43884: IFFALSE 43978
// if array [ i ] [ index ] = value then
43886: LD_VAR 0 1
43890: PUSH
43891: LD_VAR 0 6
43895: ARRAY
43896: PUSH
43897: LD_VAR 0 2
43901: ARRAY
43902: PUSH
43903: LD_VAR 0 3
43907: EQUAL
43908: IFFALSE 43976
// begin if indexColumn then
43910: LD_VAR 0 4
43914: IFFALSE 43950
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43916: LD_ADDR_VAR 0 5
43920: PUSH
43921: LD_VAR 0 5
43925: PPUSH
43926: LD_VAR 0 1
43930: PUSH
43931: LD_VAR 0 6
43935: ARRAY
43936: PUSH
43937: LD_VAR 0 4
43941: ARRAY
43942: PPUSH
43943: CALL 39168 0 2
43947: ST_TO_ADDR
43948: GO 43976
// result := Join ( result , array [ i ] ) ;
43950: LD_ADDR_VAR 0 5
43954: PUSH
43955: LD_VAR 0 5
43959: PPUSH
43960: LD_VAR 0 1
43964: PUSH
43965: LD_VAR 0 6
43969: ARRAY
43970: PPUSH
43971: CALL 39168 0 2
43975: ST_TO_ADDR
// end ;
43976: GO 43883
43978: POP
43979: POP
// end ;
43980: LD_VAR 0 5
43984: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43985: LD_INT 0
43987: PPUSH
// if not vehicles or not parkingPoint then
43988: LD_VAR 0 1
43992: NOT
43993: PUSH
43994: LD_VAR 0 2
43998: NOT
43999: OR
44000: IFFALSE 44004
// exit ;
44002: GO 44102
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44004: LD_ADDR_VAR 0 1
44008: PUSH
44009: LD_VAR 0 1
44013: PPUSH
44014: LD_INT 50
44016: PUSH
44017: EMPTY
44018: LIST
44019: PUSH
44020: LD_INT 3
44022: PUSH
44023: LD_INT 92
44025: PUSH
44026: LD_VAR 0 2
44030: PUSH
44031: LD_INT 1
44033: ARRAY
44034: PUSH
44035: LD_VAR 0 2
44039: PUSH
44040: LD_INT 2
44042: ARRAY
44043: PUSH
44044: LD_INT 8
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PPUSH
44061: CALL_OW 72
44065: ST_TO_ADDR
// if not vehicles then
44066: LD_VAR 0 1
44070: NOT
44071: IFFALSE 44075
// exit ;
44073: GO 44102
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44075: LD_VAR 0 1
44079: PPUSH
44080: LD_VAR 0 2
44084: PUSH
44085: LD_INT 1
44087: ARRAY
44088: PPUSH
44089: LD_VAR 0 2
44093: PUSH
44094: LD_INT 2
44096: ARRAY
44097: PPUSH
44098: CALL_OW 111
// end ;
44102: LD_VAR 0 3
44106: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44107: LD_INT 0
44109: PPUSH
44110: PPUSH
44111: PPUSH
// if not side or not area then
44112: LD_VAR 0 1
44116: NOT
44117: PUSH
44118: LD_VAR 0 2
44122: NOT
44123: OR
44124: IFFALSE 44128
// exit ;
44126: GO 44247
// tmp := AreaToList ( area , 0 ) ;
44128: LD_ADDR_VAR 0 5
44132: PUSH
44133: LD_VAR 0 2
44137: PPUSH
44138: LD_INT 0
44140: PPUSH
44141: CALL_OW 517
44145: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44146: LD_ADDR_VAR 0 4
44150: PUSH
44151: DOUBLE
44152: LD_INT 1
44154: DEC
44155: ST_TO_ADDR
44156: LD_VAR 0 5
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PUSH
44165: FOR_TO
44166: IFFALSE 44245
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44168: LD_VAR 0 5
44172: PUSH
44173: LD_INT 1
44175: ARRAY
44176: PUSH
44177: LD_VAR 0 4
44181: ARRAY
44182: PPUSH
44183: LD_VAR 0 5
44187: PUSH
44188: LD_INT 2
44190: ARRAY
44191: PUSH
44192: LD_VAR 0 4
44196: ARRAY
44197: PPUSH
44198: CALL_OW 351
44202: IFFALSE 44243
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44204: LD_VAR 0 5
44208: PUSH
44209: LD_INT 1
44211: ARRAY
44212: PUSH
44213: LD_VAR 0 4
44217: ARRAY
44218: PPUSH
44219: LD_VAR 0 5
44223: PUSH
44224: LD_INT 2
44226: ARRAY
44227: PUSH
44228: LD_VAR 0 4
44232: ARRAY
44233: PPUSH
44234: LD_VAR 0 1
44238: PPUSH
44239: CALL_OW 244
// end ;
44243: GO 44165
44245: POP
44246: POP
// end ;
44247: LD_VAR 0 3
44251: RET
