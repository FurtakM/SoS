// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 695 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := false ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// SetBName ( ar_depot , kaba ) ;
  64: LD_INT 1
  66: PPUSH
  67: LD_STRING kaba
  69: PPUSH
  70: CALL_OW 500
// InitHC_All ( ) ;
  74: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  78: LD_ADDR_VAR 0 2
  82: PUSH
  83: LD_INT 22
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 32
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: PPUSH
 107: CALL_OW 69
 111: PUSH
 112: FOR_IN
 113: IFFALSE 178
// begin PrepareSoldier ( false , 6 ) ;
 115: LD_INT 0
 117: PPUSH
 118: LD_INT 6
 120: PPUSH
 121: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 125: CALL_OW 44
 129: PPUSH
 130: LD_VAR 0 2
 134: PPUSH
 135: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 139: LD_VAR 0 2
 143: PPUSH
 144: LD_INT 25
 146: PUSH
 147: LD_INT 27
 149: PUSH
 150: LD_INT 28
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_VAR 0 2
 162: PUSH
 163: LD_INT 3
 165: MOD
 166: PUSH
 167: LD_INT 1
 169: PLUS
 170: ARRAY
 171: PPUSH
 172: CALL_OW 431
// end ;
 176: GO 112
 178: POP
 179: POP
// PlaceWeaponTurret ( HexInfo ( 129 , 61 ) , ar_radar ) ;
 180: LD_INT 129
 182: PPUSH
 183: LD_INT 61
 185: PPUSH
 186: CALL_OW 428
 190: PPUSH
 191: LD_INT 30
 193: PPUSH
 194: CALL_OW 431
// PrepareSoldier ( sex_male , 3 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 3
 203: PPUSH
 204: CALL_OW 381
// omarSol := CreateHuman ;
 208: LD_ADDR_EXP 8
 212: PUSH
 213: CALL_OW 44
 217: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 218: LD_EXP 8
 222: PPUSH
 223: LD_INT 1
 225: PPUSH
 226: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 230: LD_ADDR_VAR 0 4
 234: PUSH
 235: LD_INT 143
 237: PPUSH
 238: LD_INT 51
 240: PPUSH
 241: CALL_OW 428
 245: ST_TO_ADDR
// for i := 1 to 2 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 2
 258: PUSH
 259: FOR_TO
 260: IFFALSE 288
// begin PrepareMechanic ( false , 3 ) ;
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 3
 267: PPUSH
 268: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 272: CALL_OW 44
 276: PPUSH
 277: LD_VAR 0 4
 281: PPUSH
 282: CALL_OW 52
// end ;
 286: GO 259
 288: POP
 289: POP
// for i := 1 to 2 do
 290: LD_ADDR_VAR 0 2
 294: PUSH
 295: DOUBLE
 296: LD_INT 1
 298: DEC
 299: ST_TO_ADDR
 300: LD_INT 2
 302: PUSH
 303: FOR_TO
 304: IFFALSE 330
// begin PrepareEngineer ( false , 2 ) ;
 306: LD_INT 0
 308: PPUSH
 309: LD_INT 2
 311: PPUSH
 312: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 316: CALL_OW 44
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 303
 330: POP
 331: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 332: CALL_OW 44
 336: PPUSH
 337: LD_INT 164
 339: PPUSH
 340: LD_INT 80
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 350: CALL_OW 44
 354: PPUSH
 355: LD_INT 166
 357: PPUSH
 358: LD_INT 84
 360: PPUSH
 361: LD_INT 0
 363: PPUSH
 364: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 368: LD_ADDR_VAR 0 2
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 2
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 8
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 451
// for j := 1 to 3 do
 405: LD_ADDR_VAR 0 5
 409: PUSH
 410: DOUBLE
 411: LD_INT 1
 413: DEC
 414: ST_TO_ADDR
 415: LD_INT 3
 417: PUSH
 418: FOR_TO
 419: IFFALSE 447
// begin PrepareScientist ( false , 3 ) ;
 421: LD_INT 0
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 2
 440: PPUSH
 441: CALL_OW 52
// end ;
 445: GO 418
 447: POP
 448: POP
 449: GO 402
 451: POP
 452: POP
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 3
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 1436 0 3
 476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Kaia
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 1436 0 3
 500: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 501: LD_INT 14
 503: PPUSH
 504: LD_INT 3
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 27
 512: PPUSH
 513: LD_INT 100
 515: PPUSH
 516: CALL 6276 0 5
// heikeVehicle := CreateVehicle ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 530: LD_EXP 6
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 149
 549: PPUSH
 550: LD_INT 59
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 560: LD_EXP 3
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL_OW 52
// uc_side := 5 ;
 584: LD_ADDR_OWVAR 20
 588: PUSH
 589: LD_INT 5
 591: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_STRING Omar
 599: PPUSH
 600: CALL_OW 25
 604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 605: LD_INT 14
 607: PPUSH
 608: LD_INT 3
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 27
 616: PPUSH
 617: LD_INT 100
 619: PPUSH
 620: CALL 6276 0 5
// omarVehicle := CreateVehicle ;
 624: LD_ADDR_EXP 7
 628: PUSH
 629: CALL_OW 45
 633: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 634: LD_EXP 4
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 646: LD_EXP 7
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 658: LD_EXP 7
 662: PPUSH
 663: LD_INT 132
 665: PPUSH
 666: LD_INT 83
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 676: LD_EXP 4
 680: PPUSH
 681: LD_EXP 7
 685: PPUSH
 686: CALL_OW 52
// end ; end_of_file
 690: LD_VAR 0 1
 694: RET
// export function Action ; var i ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
// Video ( true ) ;
 699: LD_INT 1
 701: PPUSH
 702: CALL 39099 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: LD_INT 30
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: PUSH
 758: FOR_IN
 759: IFFALSE 778
// SetSpecResearch ( i , 1500 , false ) ;
 761: LD_VAR 0 2
 765: PPUSH
 766: LD_INT 1500
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 486
 776: GO 758
 778: POP
 779: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 780: LD_INT 1
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_INT 2
 788: PPUSH
 789: LD_INT 32963
 791: NEG
 792: PPUSH
 793: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 797: LD_EXP 4
 801: PPUSH
 802: LD_INT 150
 804: PPUSH
 805: LD_INT 72
 807: PPUSH
 808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 812: LD_INT 35
 814: PPUSH
 815: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 819: LD_INT 150
 821: PPUSH
 822: LD_INT 72
 824: PPUSH
 825: CALL_OW 428
 829: IFFALSE 812
// ComExitBuilding ( omarSol ) ;
 831: LD_EXP 8
 835: PPUSH
 836: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 840: LD_EXP 8
 844: PPUSH
 845: LD_INT 150
 847: PPUSH
 848: LD_INT 69
 850: PPUSH
 851: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 855: LD_EXP 8
 859: PPUSH
 860: LD_EXP 4
 864: PPUSH
 865: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 869: LD_EXP 8
 873: PPUSH
 874: LD_EXP 4
 878: PPUSH
 879: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 892: LD_EXP 4
 896: PPUSH
 897: LD_INT 152
 899: PPUSH
 900: LD_INT 70
 902: PPUSH
 903: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 907: LD_INT 35
 909: PPUSH
 910: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 914: LD_EXP 4
 918: PPUSH
 919: LD_EXP 8
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 3
 931: LESS
 932: IFFALSE 907
// ComTurnUnit ( Omar , omarSol ) ;
 934: LD_EXP 4
 938: PPUSH
 939: LD_EXP 8
 943: PPUSH
 944: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 948: LD_EXP 3
 952: PPUSH
 953: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 149
 964: PPUSH
 965: LD_INT 68
 967: PPUSH
 968: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 972: LD_EXP 3
 976: PPUSH
 977: LD_EXP 4
 981: PPUSH
 982: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 986: LD_EXP 4
 990: PPUSH
 991: LD_STRING DO-Intro-1
 993: PPUSH
 994: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 998: LD_EXP 8
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 120
// wait ( 0 0$0.3 ) ;
1010: LD_INT 10
1012: PPUSH
1013: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
1017: LD_EXP 3
1021: PPUSH
1022: LD_STRING DH-Intro-2
1024: PPUSH
1025: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1029: LD_EXP 4
1033: PPUSH
1034: LD_EXP 3
1038: PPUSH
1039: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_STRING DO-Intro-3
1050: PPUSH
1051: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 152
1062: PPUSH
1063: LD_INT 58
1065: PPUSH
1066: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_INT 154
1077: PPUSH
1078: LD_INT 60
1080: PPUSH
1081: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1085: LD_EXP 4
1089: PPUSH
1090: LD_EXP 3
1094: PPUSH
1095: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1099: LD_EXP 3
1103: PPUSH
1104: LD_EXP 4
1108: PPUSH
1109: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1113: LD_INT 35
1115: PPUSH
1116: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1120: LD_EXP 3
1124: PPUSH
1125: LD_INT 152
1127: PPUSH
1128: LD_INT 58
1130: PPUSH
1131: CALL_OW 307
1135: PUSH
1136: LD_EXP 4
1140: PPUSH
1141: LD_INT 154
1143: PPUSH
1144: LD_INT 60
1146: PPUSH
1147: CALL_OW 307
1151: AND
1152: IFFALSE 1113
// wait ( 0 0$0.3 ) ;
1154: LD_INT 10
1156: PPUSH
1157: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_STRING DO-Intro-4
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1173: LD_INT 18
1175: PPUSH
1176: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_STRING DH-Intro-5
1187: PPUSH
1188: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1192: LD_EXP 4
1196: PPUSH
1197: LD_STRING DO-Intro-6
1199: PPUSH
1200: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1204: LD_INT 10
1206: PPUSH
1207: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1211: LD_EXP 3
1215: PPUSH
1216: LD_STRING DH-Intro-7
1218: PPUSH
1219: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1223: LD_INT 7
1225: PPUSH
1226: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1230: LD_EXP 3
1234: PPUSH
1235: LD_STRING DH-Intro-8
1237: PPUSH
1238: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1242: LD_EXP 4
1246: PPUSH
1247: LD_STRING DO-Intro-9
1249: PPUSH
1250: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1254: LD_EXP 3
1258: PPUSH
1259: LD_STRING DH-Intro-10
1261: PPUSH
1262: CALL_OW 88
// if not Kaia then
1266: LD_EXP 5
1270: NOT
1271: IFFALSE 1287
// Say ( Heike , DH-Intro-11-Kaia ) else
1273: LD_EXP 3
1277: PPUSH
1278: LD_STRING DH-Intro-11-Kaia
1280: PPUSH
1281: CALL_OW 88
1285: GO 1299
// Say ( Heike , DH-Intro-11-Friends ) ;
1287: LD_EXP 3
1291: PPUSH
1292: LD_STRING DH-Intro-11-Friends
1294: PPUSH
1295: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1299: LD_EXP 4
1303: PPUSH
1304: LD_STRING DO-Intro-12
1306: PPUSH
1307: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1311: LD_EXP 3
1315: PPUSH
1316: LD_STRING DH-Intro-13
1318: PPUSH
1319: CALL_OW 88
// async ;
1323: ASYNC
// wait ( 0 0$0.2 ) ;
1324: LD_INT 7
1326: PPUSH
1327: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1331: LD_EXP 3
1335: PPUSH
1336: LD_EXP 6
1340: PPUSH
1341: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1345: LD_EXP 3
1349: PPUSH
1350: LD_INT 131
1352: PPUSH
1353: LD_INT 83
1355: PPUSH
1356: CALL_OW 171
// sync ;
1360: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1361: LD_EXP 4
1365: PPUSH
1366: LD_STRING DO-Intro-14
1368: PPUSH
1369: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1373: LD_EXP 4
1377: PPUSH
1378: LD_EXP 3
1382: PPUSH
1383: CALL_OW 112
// wait ( 0 0$2 ) ;
1387: LD_INT 70
1389: PPUSH
1390: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1394: LD_INT 1
1396: PPUSH
1397: LD_STRING %_cont
1399: PPUSH
1400: CALL_OW 340
// end ;
1404: LD_VAR 0 1
1408: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1409: LD_VAR 0 2
1413: PUSH
1414: LD_EXP 4
1418: EQUAL
1419: IFFALSE 1433
// SetClass ( Omar , class_desert_warior ) ;
1421: LD_EXP 4
1425: PPUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 336
// end ; end_of_file
1433: PPOPN 2
1435: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1436: LD_INT 0
1438: PPUSH
1439: PPUSH
// if exist_mode then
1440: LD_VAR 0 2
1444: IFFALSE 1469
// unit := CreateCharacter ( prefix & ident ) else
1446: LD_ADDR_VAR 0 5
1450: PUSH
1451: LD_VAR 0 3
1455: PUSH
1456: LD_VAR 0 1
1460: STR
1461: PPUSH
1462: CALL_OW 34
1466: ST_TO_ADDR
1467: GO 1484
// unit := NewCharacter ( ident ) ;
1469: LD_ADDR_VAR 0 5
1473: PUSH
1474: LD_VAR 0 1
1478: PPUSH
1479: CALL_OW 25
1483: ST_TO_ADDR
// result := unit ;
1484: LD_ADDR_VAR 0 4
1488: PUSH
1489: LD_VAR 0 5
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 4
1498: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1499: LD_INT 0
1501: PPUSH
1502: PPUSH
// if not side or not nation then
1503: LD_VAR 0 1
1507: NOT
1508: PUSH
1509: LD_VAR 0 2
1513: NOT
1514: OR
1515: IFFALSE 1519
// exit ;
1517: GO 2287
// case nation of nation_american :
1519: LD_VAR 0 2
1523: PUSH
1524: LD_INT 1
1526: DOUBLE
1527: EQUAL
1528: IFTRUE 1532
1530: GO 1746
1532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: LD_INT 35
1540: PUSH
1541: LD_INT 45
1543: PUSH
1544: LD_INT 46
1546: PUSH
1547: LD_INT 47
1549: PUSH
1550: LD_INT 82
1552: PUSH
1553: LD_INT 83
1555: PUSH
1556: LD_INT 84
1558: PUSH
1559: LD_INT 85
1561: PUSH
1562: LD_INT 86
1564: PUSH
1565: LD_INT 1
1567: PUSH
1568: LD_INT 2
1570: PUSH
1571: LD_INT 6
1573: PUSH
1574: LD_INT 15
1576: PUSH
1577: LD_INT 16
1579: PUSH
1580: LD_INT 7
1582: PUSH
1583: LD_INT 12
1585: PUSH
1586: LD_INT 13
1588: PUSH
1589: LD_INT 10
1591: PUSH
1592: LD_INT 14
1594: PUSH
1595: LD_INT 20
1597: PUSH
1598: LD_INT 21
1600: PUSH
1601: LD_INT 22
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: LD_INT 32
1609: PUSH
1610: LD_INT 27
1612: PUSH
1613: LD_INT 36
1615: PUSH
1616: LD_INT 69
1618: PUSH
1619: LD_INT 39
1621: PUSH
1622: LD_INT 34
1624: PUSH
1625: LD_INT 40
1627: PUSH
1628: LD_INT 48
1630: PUSH
1631: LD_INT 49
1633: PUSH
1634: LD_INT 50
1636: PUSH
1637: LD_INT 51
1639: PUSH
1640: LD_INT 52
1642: PUSH
1643: LD_INT 53
1645: PUSH
1646: LD_INT 54
1648: PUSH
1649: LD_INT 55
1651: PUSH
1652: LD_INT 56
1654: PUSH
1655: LD_INT 57
1657: PUSH
1658: LD_INT 58
1660: PUSH
1661: LD_INT 59
1663: PUSH
1664: LD_INT 60
1666: PUSH
1667: LD_INT 61
1669: PUSH
1670: LD_INT 62
1672: PUSH
1673: LD_INT 80
1675: PUSH
1676: LD_INT 82
1678: PUSH
1679: LD_INT 83
1681: PUSH
1682: LD_INT 84
1684: PUSH
1685: LD_INT 85
1687: PUSH
1688: LD_INT 86
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
1744: GO 2211
1746: LD_INT 2
1748: DOUBLE
1749: EQUAL
1750: IFTRUE 1754
1752: GO 1980
1754: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1755: LD_ADDR_VAR 0 4
1759: PUSH
1760: LD_INT 35
1762: PUSH
1763: LD_INT 45
1765: PUSH
1766: LD_INT 46
1768: PUSH
1769: LD_INT 47
1771: PUSH
1772: LD_INT 82
1774: PUSH
1775: LD_INT 83
1777: PUSH
1778: LD_INT 84
1780: PUSH
1781: LD_INT 85
1783: PUSH
1784: LD_INT 87
1786: PUSH
1787: LD_INT 70
1789: PUSH
1790: LD_INT 1
1792: PUSH
1793: LD_INT 11
1795: PUSH
1796: LD_INT 3
1798: PUSH
1799: LD_INT 4
1801: PUSH
1802: LD_INT 5
1804: PUSH
1805: LD_INT 6
1807: PUSH
1808: LD_INT 15
1810: PUSH
1811: LD_INT 18
1813: PUSH
1814: LD_INT 7
1816: PUSH
1817: LD_INT 17
1819: PUSH
1820: LD_INT 8
1822: PUSH
1823: LD_INT 20
1825: PUSH
1826: LD_INT 21
1828: PUSH
1829: LD_INT 22
1831: PUSH
1832: LD_INT 72
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 69
1840: PUSH
1841: LD_INT 39
1843: PUSH
1844: LD_INT 40
1846: PUSH
1847: LD_INT 41
1849: PUSH
1850: LD_INT 42
1852: PUSH
1853: LD_INT 43
1855: PUSH
1856: LD_INT 48
1858: PUSH
1859: LD_INT 49
1861: PUSH
1862: LD_INT 50
1864: PUSH
1865: LD_INT 51
1867: PUSH
1868: LD_INT 52
1870: PUSH
1871: LD_INT 53
1873: PUSH
1874: LD_INT 54
1876: PUSH
1877: LD_INT 55
1879: PUSH
1880: LD_INT 56
1882: PUSH
1883: LD_INT 60
1885: PUSH
1886: LD_INT 61
1888: PUSH
1889: LD_INT 62
1891: PUSH
1892: LD_INT 66
1894: PUSH
1895: LD_INT 67
1897: PUSH
1898: LD_INT 68
1900: PUSH
1901: LD_INT 81
1903: PUSH
1904: LD_INT 82
1906: PUSH
1907: LD_INT 83
1909: PUSH
1910: LD_INT 84
1912: PUSH
1913: LD_INT 85
1915: PUSH
1916: LD_INT 87
1918: PUSH
1919: LD_INT 88
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: ST_TO_ADDR
1978: GO 2211
1980: LD_INT 3
1982: DOUBLE
1983: EQUAL
1984: IFTRUE 1988
1986: GO 2210
1988: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1989: LD_ADDR_VAR 0 4
1993: PUSH
1994: LD_INT 46
1996: PUSH
1997: LD_INT 47
1999: PUSH
2000: LD_INT 1
2002: PUSH
2003: LD_INT 2
2005: PUSH
2006: LD_INT 82
2008: PUSH
2009: LD_INT 83
2011: PUSH
2012: LD_INT 84
2014: PUSH
2015: LD_INT 85
2017: PUSH
2018: LD_INT 86
2020: PUSH
2021: LD_INT 11
2023: PUSH
2024: LD_INT 9
2026: PUSH
2027: LD_INT 20
2029: PUSH
2030: LD_INT 19
2032: PUSH
2033: LD_INT 21
2035: PUSH
2036: LD_INT 24
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 25
2044: PUSH
2045: LD_INT 28
2047: PUSH
2048: LD_INT 29
2050: PUSH
2051: LD_INT 30
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 37
2059: PUSH
2060: LD_INT 38
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 27
2068: PUSH
2069: LD_INT 33
2071: PUSH
2072: LD_INT 69
2074: PUSH
2075: LD_INT 39
2077: PUSH
2078: LD_INT 34
2080: PUSH
2081: LD_INT 40
2083: PUSH
2084: LD_INT 71
2086: PUSH
2087: LD_INT 23
2089: PUSH
2090: LD_INT 44
2092: PUSH
2093: LD_INT 48
2095: PUSH
2096: LD_INT 49
2098: PUSH
2099: LD_INT 50
2101: PUSH
2102: LD_INT 51
2104: PUSH
2105: LD_INT 52
2107: PUSH
2108: LD_INT 53
2110: PUSH
2111: LD_INT 54
2113: PUSH
2114: LD_INT 55
2116: PUSH
2117: LD_INT 56
2119: PUSH
2120: LD_INT 57
2122: PUSH
2123: LD_INT 58
2125: PUSH
2126: LD_INT 59
2128: PUSH
2129: LD_INT 63
2131: PUSH
2132: LD_INT 64
2134: PUSH
2135: LD_INT 65
2137: PUSH
2138: LD_INT 82
2140: PUSH
2141: LD_INT 83
2143: PUSH
2144: LD_INT 84
2146: PUSH
2147: LD_INT 85
2149: PUSH
2150: LD_INT 86
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: LIST
2207: ST_TO_ADDR
2208: GO 2211
2210: POP
// if state > - 1 and state < 3 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 1
2218: NEG
2219: GREATER
2220: PUSH
2221: LD_VAR 0 3
2225: PUSH
2226: LD_INT 3
2228: LESS
2229: AND
2230: IFFALSE 2287
// for i in result do
2232: LD_ADDR_VAR 0 5
2236: PUSH
2237: LD_VAR 0 4
2241: PUSH
2242: FOR_IN
2243: IFFALSE 2285
// if GetTech ( i , side ) <> state then
2245: LD_VAR 0 5
2249: PPUSH
2250: LD_VAR 0 1
2254: PPUSH
2255: CALL_OW 321
2259: PUSH
2260: LD_VAR 0 3
2264: NONEQUAL
2265: IFFALSE 2283
// result := result diff i ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_VAR 0 4
2276: PUSH
2277: LD_VAR 0 5
2281: DIFF
2282: ST_TO_ADDR
2283: GO 2242
2285: POP
2286: POP
// end ;
2287: LD_VAR 0 4
2291: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
// result := true ;
2297: LD_ADDR_VAR 0 3
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2305: LD_ADDR_VAR 0 5
2309: PUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 480
2319: ST_TO_ADDR
// if not tmp then
2320: LD_VAR 0 5
2324: NOT
2325: IFFALSE 2329
// exit ;
2327: GO 2378
// for i in tmp do
2329: LD_ADDR_VAR 0 4
2333: PUSH
2334: LD_VAR 0 5
2338: PUSH
2339: FOR_IN
2340: IFFALSE 2376
// if GetTech ( i , side ) <> state_researched then
2342: LD_VAR 0 4
2346: PPUSH
2347: LD_VAR 0 1
2351: PPUSH
2352: CALL_OW 321
2356: PUSH
2357: LD_INT 2
2359: NONEQUAL
2360: IFFALSE 2374
// begin result := false ;
2362: LD_ADDR_VAR 0 3
2366: PUSH
2367: LD_INT 0
2369: ST_TO_ADDR
// exit ;
2370: POP
2371: POP
2372: GO 2378
// end ;
2374: GO 2339
2376: POP
2377: POP
// end ;
2378: LD_VAR 0 3
2382: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2383: LD_INT 0
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
2397: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2398: LD_VAR 0 1
2402: NOT
2403: PUSH
2404: LD_VAR 0 1
2408: PPUSH
2409: CALL_OW 257
2413: PUSH
2414: LD_INT 9
2416: NONEQUAL
2417: OR
2418: IFFALSE 2422
// exit ;
2420: GO 2995
// side := GetSide ( unit ) ;
2422: LD_ADDR_VAR 0 9
2426: PUSH
2427: LD_VAR 0 1
2431: PPUSH
2432: CALL_OW 255
2436: ST_TO_ADDR
// tech_space := tech_spacanom ;
2437: LD_ADDR_VAR 0 12
2441: PUSH
2442: LD_INT 29
2444: ST_TO_ADDR
// tech_time := tech_taurad ;
2445: LD_ADDR_VAR 0 13
2449: PUSH
2450: LD_INT 28
2452: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2453: LD_ADDR_VAR 0 11
2457: PUSH
2458: LD_VAR 0 1
2462: PPUSH
2463: CALL_OW 310
2467: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2468: LD_VAR 0 11
2472: PPUSH
2473: CALL_OW 247
2477: PUSH
2478: LD_INT 2
2480: EQUAL
2481: IFFALSE 2485
// exit ;
2483: GO 2995
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2485: LD_ADDR_VAR 0 8
2489: PUSH
2490: LD_INT 81
2492: PUSH
2493: LD_VAR 0 9
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: LD_INT 21
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if not tmp then
2528: LD_VAR 0 8
2532: NOT
2533: IFFALSE 2537
// exit ;
2535: GO 2995
// if in_unit then
2537: LD_VAR 0 11
2541: IFFALSE 2565
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2543: LD_ADDR_VAR 0 10
2547: PUSH
2548: LD_VAR 0 8
2552: PPUSH
2553: LD_VAR 0 11
2557: PPUSH
2558: CALL_OW 74
2562: ST_TO_ADDR
2563: GO 2585
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2565: LD_ADDR_VAR 0 10
2569: PUSH
2570: LD_VAR 0 8
2574: PPUSH
2575: LD_VAR 0 1
2579: PPUSH
2580: CALL_OW 74
2584: ST_TO_ADDR
// if not enemy then
2585: LD_VAR 0 10
2589: NOT
2590: IFFALSE 2594
// exit ;
2592: GO 2995
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2594: LD_VAR 0 11
2598: PUSH
2599: LD_VAR 0 11
2603: PPUSH
2604: LD_VAR 0 10
2608: PPUSH
2609: CALL_OW 296
2613: PUSH
2614: LD_INT 13
2616: GREATER
2617: AND
2618: PUSH
2619: LD_VAR 0 1
2623: PPUSH
2624: LD_VAR 0 10
2628: PPUSH
2629: CALL_OW 296
2633: PUSH
2634: LD_INT 12
2636: GREATER
2637: OR
2638: IFFALSE 2642
// exit ;
2640: GO 2995
// missile := [ 1 ] ;
2642: LD_ADDR_VAR 0 14
2646: PUSH
2647: LD_INT 1
2649: PUSH
2650: EMPTY
2651: LIST
2652: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2653: LD_VAR 0 9
2657: PPUSH
2658: LD_VAR 0 12
2662: PPUSH
2663: CALL_OW 325
2667: IFFALSE 2696
// missile := Replace ( missile , missile + 1 , 2 ) ;
2669: LD_ADDR_VAR 0 14
2673: PUSH
2674: LD_VAR 0 14
2678: PPUSH
2679: LD_VAR 0 14
2683: PUSH
2684: LD_INT 1
2686: PLUS
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 1
2695: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2696: LD_VAR 0 9
2700: PPUSH
2701: LD_VAR 0 13
2705: PPUSH
2706: CALL_OW 325
2710: PUSH
2711: LD_VAR 0 10
2715: PPUSH
2716: CALL_OW 255
2720: PPUSH
2721: LD_VAR 0 13
2725: PPUSH
2726: CALL_OW 325
2730: NOT
2731: AND
2732: IFFALSE 2761
// missile := Replace ( missile , missile + 1 , 3 ) ;
2734: LD_ADDR_VAR 0 14
2738: PUSH
2739: LD_VAR 0 14
2743: PPUSH
2744: LD_VAR 0 14
2748: PUSH
2749: LD_INT 1
2751: PLUS
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: CALL_OW 1
2760: ST_TO_ADDR
// if missile < 2 then
2761: LD_VAR 0 14
2765: PUSH
2766: LD_INT 2
2768: LESS
2769: IFFALSE 2773
// exit ;
2771: GO 2995
// x := GetX ( enemy ) ;
2773: LD_ADDR_VAR 0 4
2777: PUSH
2778: LD_VAR 0 10
2782: PPUSH
2783: CALL_OW 250
2787: ST_TO_ADDR
// y := GetY ( enemy ) ;
2788: LD_ADDR_VAR 0 5
2792: PUSH
2793: LD_VAR 0 10
2797: PPUSH
2798: CALL_OW 251
2802: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2803: LD_ADDR_VAR 0 6
2807: PUSH
2808: LD_VAR 0 4
2812: PUSH
2813: LD_INT 1
2815: NEG
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL_OW 12
2824: PLUS
2825: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2826: LD_ADDR_VAR 0 7
2830: PUSH
2831: LD_VAR 0 5
2835: PUSH
2836: LD_INT 1
2838: NEG
2839: PPUSH
2840: LD_INT 1
2842: PPUSH
2843: CALL_OW 12
2847: PLUS
2848: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2849: LD_VAR 0 6
2853: PPUSH
2854: LD_VAR 0 7
2858: PPUSH
2859: CALL_OW 488
2863: NOT
2864: IFFALSE 2886
// begin _x := x ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: LD_VAR 0 4
2875: ST_TO_ADDR
// _y := y ;
2876: LD_ADDR_VAR 0 7
2880: PUSH
2881: LD_VAR 0 5
2885: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2886: LD_ADDR_VAR 0 3
2890: PUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_VAR 0 14
2898: PPUSH
2899: CALL_OW 12
2903: ST_TO_ADDR
// case i of 1 :
2904: LD_VAR 0 3
2908: PUSH
2909: LD_INT 1
2911: DOUBLE
2912: EQUAL
2913: IFTRUE 2917
2915: GO 2934
2917: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 115
2932: GO 2995
2934: LD_INT 2
2936: DOUBLE
2937: EQUAL
2938: IFTRUE 2942
2940: GO 2964
2942: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_VAR 0 6
2952: PPUSH
2953: LD_VAR 0 7
2957: PPUSH
2958: CALL_OW 153
2962: GO 2995
2964: LD_INT 3
2966: DOUBLE
2967: EQUAL
2968: IFTRUE 2972
2970: GO 2994
2972: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2973: LD_VAR 0 1
2977: PPUSH
2978: LD_VAR 0 6
2982: PPUSH
2983: LD_VAR 0 7
2987: PPUSH
2988: CALL_OW 154
2992: GO 2995
2994: POP
// end ;
2995: LD_VAR 0 2
2999: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3000: LD_INT 0
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
3006: PPUSH
3007: PPUSH
// if not unit or not building then
3008: LD_VAR 0 1
3012: NOT
3013: PUSH
3014: LD_VAR 0 2
3018: NOT
3019: OR
3020: IFFALSE 3024
// exit ;
3022: GO 3182
// x := GetX ( building ) ;
3024: LD_ADDR_VAR 0 5
3028: PUSH
3029: LD_VAR 0 2
3033: PPUSH
3034: CALL_OW 250
3038: ST_TO_ADDR
// y := GetY ( building ) ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: LD_VAR 0 2
3048: PPUSH
3049: CALL_OW 251
3053: ST_TO_ADDR
// for i = 0 to 5 do
3054: LD_ADDR_VAR 0 4
3058: PUSH
3059: DOUBLE
3060: LD_INT 0
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 5
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3180
// begin _x := ShiftX ( x , i , 3 ) ;
3070: LD_ADDR_VAR 0 7
3074: PUSH
3075: LD_VAR 0 5
3079: PPUSH
3080: LD_VAR 0 4
3084: PPUSH
3085: LD_INT 3
3087: PPUSH
3088: CALL_OW 272
3092: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3093: LD_ADDR_VAR 0 8
3097: PUSH
3098: LD_VAR 0 6
3102: PPUSH
3103: LD_VAR 0 4
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: CALL_OW 273
3115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3116: LD_VAR 0 7
3120: PPUSH
3121: LD_VAR 0 8
3125: PPUSH
3126: CALL_OW 488
3130: NOT
3131: IFFALSE 3135
// continue ;
3133: GO 3067
// if HexInfo ( _x , _y ) = 0 then
3135: LD_VAR 0 7
3139: PPUSH
3140: LD_VAR 0 8
3144: PPUSH
3145: CALL_OW 428
3149: PUSH
3150: LD_INT 0
3152: EQUAL
3153: IFFALSE 3178
// begin ComMoveXY ( unit , _x , _y ) ;
3155: LD_VAR 0 1
3159: PPUSH
3160: LD_VAR 0 7
3164: PPUSH
3165: LD_VAR 0 8
3169: PPUSH
3170: CALL_OW 111
// exit ;
3174: POP
3175: POP
3176: GO 3182
// end ; end ;
3178: GO 3067
3180: POP
3181: POP
// end ;
3182: LD_VAR 0 3
3186: RET
// export function ScanBase ( side , base_area ) ; begin
3187: LD_INT 0
3189: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: LD_INT 81
3202: PUSH
3203: LD_VAR 0 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PPUSH
3212: CALL_OW 70
3216: ST_TO_ADDR
// end ;
3217: LD_VAR 0 3
3221: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3222: LD_INT 0
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
// result := false ;
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// side := GetSide ( unit ) ;
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: LD_VAR 0 1
3245: PPUSH
3246: CALL_OW 255
3250: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3251: LD_ADDR_VAR 0 4
3255: PUSH
3256: LD_VAR 0 1
3260: PPUSH
3261: CALL_OW 248
3265: ST_TO_ADDR
// case nat of 1 :
3266: LD_VAR 0 4
3270: PUSH
3271: LD_INT 1
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3290
3279: POP
// tech := tech_lassight ; 2 :
3280: LD_ADDR_VAR 0 5
3284: PUSH
3285: LD_INT 12
3287: ST_TO_ADDR
3288: GO 3329
3290: LD_INT 2
3292: DOUBLE
3293: EQUAL
3294: IFTRUE 3298
3296: GO 3309
3298: POP
// tech := tech_mortar ; 3 :
3299: LD_ADDR_VAR 0 5
3303: PUSH
3304: LD_INT 41
3306: ST_TO_ADDR
3307: GO 3329
3309: LD_INT 3
3311: DOUBLE
3312: EQUAL
3313: IFTRUE 3317
3315: GO 3328
3317: POP
// tech := tech_bazooka ; end ;
3318: LD_ADDR_VAR 0 5
3322: PUSH
3323: LD_INT 44
3325: ST_TO_ADDR
3326: GO 3329
3328: POP
// if Researched ( side , tech ) then
3329: LD_VAR 0 3
3333: PPUSH
3334: LD_VAR 0 5
3338: PPUSH
3339: CALL_OW 325
3343: IFFALSE 3370
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: LD_INT 5
3352: PUSH
3353: LD_INT 8
3355: PUSH
3356: LD_INT 9
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: ST_TO_ADDR
// end ;
3370: LD_VAR 0 2
3374: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3375: LD_INT 0
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if not mines then
3380: LD_VAR 0 2
3384: NOT
3385: IFFALSE 3389
// exit ;
3387: GO 3533
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3389: LD_ADDR_VAR 0 5
3393: PUSH
3394: LD_INT 81
3396: PUSH
3397: LD_VAR 0 1
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 21
3411: PUSH
3412: LD_INT 3
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 69
3431: ST_TO_ADDR
// for i in mines do
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_VAR 0 2
3441: PUSH
3442: FOR_IN
3443: IFFALSE 3531
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3445: LD_VAR 0 4
3449: PUSH
3450: LD_INT 1
3452: ARRAY
3453: PPUSH
3454: LD_VAR 0 4
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: PPUSH
3463: CALL_OW 458
3467: NOT
3468: IFFALSE 3472
// continue ;
3470: GO 3442
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3472: LD_VAR 0 4
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: LD_VAR 0 4
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PPUSH
3490: CALL_OW 428
3494: PUSH
3495: LD_VAR 0 5
3499: IN
3500: IFFALSE 3529
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3502: LD_VAR 0 4
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: LD_VAR 0 4
3515: PUSH
3516: LD_INT 2
3518: ARRAY
3519: PPUSH
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 456
// end ;
3529: GO 3442
3531: POP
3532: POP
// end ;
3533: LD_VAR 0 3
3537: RET
// export function Count ( array ) ; begin
3538: LD_INT 0
3540: PPUSH
// result := array + 0 ;
3541: LD_ADDR_VAR 0 2
3545: PUSH
3546: LD_VAR 0 1
3550: PUSH
3551: LD_INT 0
3553: PLUS
3554: ST_TO_ADDR
// end ;
3555: LD_VAR 0 2
3559: RET
// export function IsEmpty ( building ) ; begin
3560: LD_INT 0
3562: PPUSH
// if not building then
3563: LD_VAR 0 1
3567: NOT
3568: IFFALSE 3572
// exit ;
3570: GO 3615
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3572: LD_ADDR_VAR 0 2
3576: PUSH
3577: LD_VAR 0 1
3581: PUSH
3582: LD_INT 22
3584: PUSH
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 255
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 58
3601: PUSH
3602: EMPTY
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PPUSH
3609: CALL_OW 69
3613: IN
3614: ST_TO_ADDR
// end ;
3615: LD_VAR 0 2
3619: RET
// export function IsNotFull ( building ) ; var places ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
// if not building then
3624: LD_VAR 0 1
3628: NOT
3629: IFFALSE 3633
// exit ;
3631: GO 3661
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_INT 3
3645: PUSH
3646: LD_INT 62
3648: PUSH
3649: EMPTY
3650: LIST
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PPUSH
3656: CALL_OW 72
3660: ST_TO_ADDR
// end ;
3661: LD_VAR 0 2
3665: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3666: LD_INT 0
3668: PPUSH
3669: PPUSH
3670: PPUSH
3671: PPUSH
// tmp := [ ] ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: EMPTY
3678: ST_TO_ADDR
// list := [ ] ;
3679: LD_ADDR_VAR 0 5
3683: PUSH
3684: EMPTY
3685: ST_TO_ADDR
// for i = 16 to 25 do
3686: LD_ADDR_VAR 0 4
3690: PUSH
3691: DOUBLE
3692: LD_INT 16
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 25
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3773
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_VAR 0 3
3711: PUSH
3712: LD_INT 22
3714: PUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 255
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 91
3731: PUSH
3732: LD_VAR 0 1
3736: PUSH
3737: LD_INT 6
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 30
3747: PUSH
3748: LD_VAR 0 4
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: PPUSH
3765: CALL_OW 69
3769: ADD
3770: ST_TO_ADDR
3771: GO 3699
3773: POP
3774: POP
// for i = 1 to tmp do
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: DOUBLE
3781: LD_INT 1
3783: DEC
3784: ST_TO_ADDR
3785: LD_VAR 0 3
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3879
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3793: LD_ADDR_VAR 0 5
3797: PUSH
3798: LD_VAR 0 5
3802: PUSH
3803: LD_VAR 0 3
3807: PUSH
3808: LD_VAR 0 4
3812: ARRAY
3813: PPUSH
3814: CALL_OW 266
3818: PUSH
3819: LD_VAR 0 3
3823: PUSH
3824: LD_VAR 0 4
3828: ARRAY
3829: PPUSH
3830: CALL_OW 250
3834: PUSH
3835: LD_VAR 0 3
3839: PUSH
3840: LD_VAR 0 4
3844: ARRAY
3845: PPUSH
3846: CALL_OW 251
3850: PUSH
3851: LD_VAR 0 3
3855: PUSH
3856: LD_VAR 0 4
3860: ARRAY
3861: PPUSH
3862: CALL_OW 254
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: ADD
3876: ST_TO_ADDR
3877: GO 3790
3879: POP
3880: POP
// result := list ;
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: LD_VAR 0 5
3890: ST_TO_ADDR
// end ;
3891: LD_VAR 0 2
3895: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3896: LD_INT 0
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
// if not factory then
3905: LD_VAR 0 1
3909: NOT
3910: IFFALSE 3914
// exit ;
3912: GO 4507
// if control = control_apeman then
3914: LD_VAR 0 4
3918: PUSH
3919: LD_INT 5
3921: EQUAL
3922: IFFALSE 4031
// begin tmp := UnitsInside ( factory ) ;
3924: LD_ADDR_VAR 0 8
3928: PUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: CALL_OW 313
3938: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3939: LD_VAR 0 8
3943: PPUSH
3944: LD_INT 25
3946: PUSH
3947: LD_INT 12
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PPUSH
3954: CALL_OW 72
3958: NOT
3959: IFFALSE 3969
// control := control_manual ;
3961: LD_ADDR_VAR 0 4
3965: PUSH
3966: LD_INT 1
3968: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3969: LD_ADDR_VAR 0 8
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL 3666 0 1
3983: ST_TO_ADDR
// if tmp then
3984: LD_VAR 0 8
3988: IFFALSE 4031
// begin for i in tmp do
3990: LD_ADDR_VAR 0 7
3994: PUSH
3995: LD_VAR 0 8
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4029
// if i [ 1 ] = b_ext_radio then
4003: LD_VAR 0 7
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PUSH
4012: LD_INT 22
4014: EQUAL
4015: IFFALSE 4027
// begin control := control_remote ;
4017: LD_ADDR_VAR 0 4
4021: PUSH
4022: LD_INT 2
4024: ST_TO_ADDR
// break ;
4025: GO 4029
// end ;
4027: GO 4000
4029: POP
4030: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: LD_VAR 0 4
4050: PPUSH
4051: LD_VAR 0 5
4055: PPUSH
4056: CALL_OW 448
4060: IFFALSE 4095
// begin result := [ chassis , engine , control , weapon ] ;
4062: LD_ADDR_VAR 0 6
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
// exit ;
4093: GO 4507
// end ; _chassis := AvailableChassisList ( factory ) ;
4095: LD_ADDR_VAR 0 9
4099: PUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 475
4109: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4110: LD_ADDR_VAR 0 11
4114: PUSH
4115: LD_VAR 0 1
4119: PPUSH
4120: CALL_OW 476
4124: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4125: LD_ADDR_VAR 0 12
4129: PUSH
4130: LD_VAR 0 1
4134: PPUSH
4135: CALL_OW 477
4139: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4140: LD_ADDR_VAR 0 10
4144: PUSH
4145: LD_VAR 0 1
4149: PPUSH
4150: CALL_OW 478
4154: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4155: LD_VAR 0 9
4159: NOT
4160: PUSH
4161: LD_VAR 0 11
4165: NOT
4166: OR
4167: PUSH
4168: LD_VAR 0 12
4172: NOT
4173: OR
4174: PUSH
4175: LD_VAR 0 10
4179: NOT
4180: OR
4181: IFFALSE 4216
// begin result := [ chassis , engine , control , weapon ] ;
4183: LD_ADDR_VAR 0 6
4187: PUSH
4188: LD_VAR 0 2
4192: PUSH
4193: LD_VAR 0 3
4197: PUSH
4198: LD_VAR 0 4
4202: PUSH
4203: LD_VAR 0 5
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: ST_TO_ADDR
// exit ;
4214: GO 4507
// end ; if not chassis in _chassis then
4216: LD_VAR 0 2
4220: PUSH
4221: LD_VAR 0 9
4225: IN
4226: NOT
4227: IFFALSE 4253
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4229: LD_ADDR_VAR 0 2
4233: PUSH
4234: LD_VAR 0 9
4238: PUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_VAR 0 9
4246: PPUSH
4247: CALL_OW 12
4251: ARRAY
4252: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4253: LD_VAR 0 2
4257: PPUSH
4258: LD_VAR 0 3
4262: PPUSH
4263: CALL 4512 0 2
4267: NOT
4268: IFFALSE 4327
// repeat engine := _engine [ 1 ] ;
4270: LD_ADDR_VAR 0 3
4274: PUSH
4275: LD_VAR 0 11
4279: PUSH
4280: LD_INT 1
4282: ARRAY
4283: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4284: LD_ADDR_VAR 0 11
4288: PUSH
4289: LD_VAR 0 11
4293: PPUSH
4294: LD_INT 1
4296: PPUSH
4297: CALL_OW 3
4301: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4302: LD_VAR 0 2
4306: PPUSH
4307: LD_VAR 0 3
4311: PPUSH
4312: CALL 4512 0 2
4316: PUSH
4317: LD_VAR 0 11
4321: PUSH
4322: EMPTY
4323: EQUAL
4324: OR
4325: IFFALSE 4270
// if not control in _control then
4327: LD_VAR 0 4
4331: PUSH
4332: LD_VAR 0 12
4336: IN
4337: NOT
4338: IFFALSE 4364
// control := _control [ rand ( 1 , _control ) ] ;
4340: LD_ADDR_VAR 0 4
4344: PUSH
4345: LD_VAR 0 12
4349: PUSH
4350: LD_INT 1
4352: PPUSH
4353: LD_VAR 0 12
4357: PPUSH
4358: CALL_OW 12
4362: ARRAY
4363: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4364: LD_VAR 0 2
4368: PPUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL 4732 0 2
4378: NOT
4379: IFFALSE 4438
// repeat weapon := _weapon [ 1 ] ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_VAR 0 10
4390: PUSH
4391: LD_INT 1
4393: ARRAY
4394: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4395: LD_ADDR_VAR 0 10
4399: PUSH
4400: LD_VAR 0 10
4404: PPUSH
4405: LD_INT 1
4407: PPUSH
4408: CALL_OW 3
4412: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4413: LD_VAR 0 2
4417: PPUSH
4418: LD_VAR 0 5
4422: PPUSH
4423: CALL 4732 0 2
4427: PUSH
4428: LD_VAR 0 10
4432: PUSH
4433: EMPTY
4434: EQUAL
4435: OR
4436: IFFALSE 4381
// result := [ ] ;
4438: LD_ADDR_VAR 0 6
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_VAR 0 3
4459: PPUSH
4460: LD_VAR 0 4
4464: PPUSH
4465: LD_VAR 0 5
4469: PPUSH
4470: CALL_OW 448
4474: IFFALSE 4507
// result := [ chassis , engine , control , weapon ] ;
4476: LD_ADDR_VAR 0 6
4480: PUSH
4481: LD_VAR 0 2
4485: PUSH
4486: LD_VAR 0 3
4490: PUSH
4491: LD_VAR 0 4
4495: PUSH
4496: LD_VAR 0 5
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: ST_TO_ADDR
// end ;
4507: LD_VAR 0 6
4511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4512: LD_INT 0
4514: PPUSH
// if not chassis or not engine then
4515: LD_VAR 0 1
4519: NOT
4520: PUSH
4521: LD_VAR 0 2
4525: NOT
4526: OR
4527: IFFALSE 4531
// exit ;
4529: GO 4727
// case engine of engine_solar :
4531: LD_VAR 0 2
4535: PUSH
4536: LD_INT 2
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4582
4544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_INT 11
4552: PUSH
4553: LD_INT 12
4555: PUSH
4556: LD_INT 13
4558: PUSH
4559: LD_INT 14
4561: PUSH
4562: LD_INT 1
4564: PUSH
4565: LD_INT 2
4567: PUSH
4568: LD_INT 3
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: ST_TO_ADDR
4580: GO 4711
4582: LD_INT 1
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4652
4590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: LD_INT 11
4598: PUSH
4599: LD_INT 12
4601: PUSH
4602: LD_INT 13
4604: PUSH
4605: LD_INT 14
4607: PUSH
4608: LD_INT 1
4610: PUSH
4611: LD_INT 2
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 5
4622: PUSH
4623: LD_INT 21
4625: PUSH
4626: LD_INT 23
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_INT 24
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: ST_TO_ADDR
4650: GO 4711
4652: LD_INT 3
4654: DOUBLE
4655: EQUAL
4656: IFTRUE 4660
4658: GO 4710
4660: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: LD_INT 13
4668: PUSH
4669: LD_INT 14
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 3
4677: PUSH
4678: LD_INT 4
4680: PUSH
4681: LD_INT 5
4683: PUSH
4684: LD_INT 21
4686: PUSH
4687: LD_INT 22
4689: PUSH
4690: LD_INT 23
4692: PUSH
4693: LD_INT 24
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: ST_TO_ADDR
4708: GO 4711
4710: POP
// result := ( chassis in result ) ;
4711: LD_ADDR_VAR 0 3
4715: PUSH
4716: LD_VAR 0 1
4720: PUSH
4721: LD_VAR 0 3
4725: IN
4726: ST_TO_ADDR
// end ;
4727: LD_VAR 0 3
4731: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4732: LD_INT 0
4734: PPUSH
// if not chassis or not weapon then
4735: LD_VAR 0 1
4739: NOT
4740: PUSH
4741: LD_VAR 0 2
4745: NOT
4746: OR
4747: IFFALSE 4751
// exit ;
4749: GO 5811
// case weapon of us_machine_gun :
4751: LD_VAR 0 2
4755: PUSH
4756: LD_INT 2
4758: DOUBLE
4759: EQUAL
4760: IFTRUE 4764
4762: GO 4794
4764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4765: LD_ADDR_VAR 0 3
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: LD_INT 2
4775: PUSH
4776: LD_INT 3
4778: PUSH
4779: LD_INT 4
4781: PUSH
4782: LD_INT 5
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: ST_TO_ADDR
4792: GO 5795
4794: LD_INT 3
4796: DOUBLE
4797: EQUAL
4798: IFTRUE 4802
4800: GO 4832
4802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4803: LD_ADDR_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: LD_INT 2
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: LD_INT 5
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ST_TO_ADDR
4830: GO 5795
4832: LD_INT 11
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4870
4840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: LD_INT 2
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 4
4857: PUSH
4858: LD_INT 5
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: ST_TO_ADDR
4868: GO 5795
4870: LD_INT 4
4872: DOUBLE
4873: EQUAL
4874: IFTRUE 4878
4876: GO 4904
4878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: LD_INT 3
4889: PUSH
4890: LD_INT 4
4892: PUSH
4893: LD_INT 5
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: ST_TO_ADDR
4902: GO 5795
4904: LD_INT 5
4906: DOUBLE
4907: EQUAL
4908: IFTRUE 4912
4910: GO 4938
4912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: LD_INT 4
4926: PUSH
4927: LD_INT 5
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: ST_TO_ADDR
4936: GO 5795
4938: LD_INT 9
4940: DOUBLE
4941: EQUAL
4942: IFTRUE 4946
4944: GO 4972
4946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4947: LD_ADDR_VAR 0 3
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: LD_INT 3
4957: PUSH
4958: LD_INT 4
4960: PUSH
4961: LD_INT 5
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: ST_TO_ADDR
4970: GO 5795
4972: LD_INT 7
4974: DOUBLE
4975: EQUAL
4976: IFTRUE 4980
4978: GO 5006
4980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4981: LD_ADDR_VAR 0 3
4985: PUSH
4986: LD_INT 2
4988: PUSH
4989: LD_INT 3
4991: PUSH
4992: LD_INT 4
4994: PUSH
4995: LD_INT 5
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: ST_TO_ADDR
5004: GO 5795
5006: LD_INT 12
5008: DOUBLE
5009: EQUAL
5010: IFTRUE 5014
5012: GO 5040
5014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5015: LD_ADDR_VAR 0 3
5019: PUSH
5020: LD_INT 2
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: LD_INT 4
5028: PUSH
5029: LD_INT 5
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: ST_TO_ADDR
5038: GO 5795
5040: LD_INT 13
5042: DOUBLE
5043: EQUAL
5044: IFTRUE 5048
5046: GO 5074
5048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5049: LD_ADDR_VAR 0 3
5053: PUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: ST_TO_ADDR
5072: GO 5795
5074: LD_INT 14
5076: DOUBLE
5077: EQUAL
5078: IFTRUE 5082
5080: GO 5100
5082: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5083: LD_ADDR_VAR 0 3
5087: PUSH
5088: LD_INT 4
5090: PUSH
5091: LD_INT 5
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: ST_TO_ADDR
5098: GO 5795
5100: LD_INT 6
5102: DOUBLE
5103: EQUAL
5104: IFTRUE 5108
5106: GO 5126
5108: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5109: LD_ADDR_VAR 0 3
5113: PUSH
5114: LD_INT 4
5116: PUSH
5117: LD_INT 5
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: ST_TO_ADDR
5124: GO 5795
5126: LD_INT 10
5128: DOUBLE
5129: EQUAL
5130: IFTRUE 5134
5132: GO 5152
5134: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5135: LD_ADDR_VAR 0 3
5139: PUSH
5140: LD_INT 4
5142: PUSH
5143: LD_INT 5
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: ST_TO_ADDR
5150: GO 5795
5152: LD_INT 22
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5160
5158: GO 5186
5160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5161: LD_ADDR_VAR 0 3
5165: PUSH
5166: LD_INT 11
5168: PUSH
5169: LD_INT 12
5171: PUSH
5172: LD_INT 13
5174: PUSH
5175: LD_INT 14
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: ST_TO_ADDR
5184: GO 5795
5186: LD_INT 23
5188: DOUBLE
5189: EQUAL
5190: IFTRUE 5194
5192: GO 5220
5194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5195: LD_ADDR_VAR 0 3
5199: PUSH
5200: LD_INT 11
5202: PUSH
5203: LD_INT 12
5205: PUSH
5206: LD_INT 13
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: ST_TO_ADDR
5218: GO 5795
5220: LD_INT 24
5222: DOUBLE
5223: EQUAL
5224: IFTRUE 5228
5226: GO 5254
5228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5229: LD_ADDR_VAR 0 3
5233: PUSH
5234: LD_INT 11
5236: PUSH
5237: LD_INT 12
5239: PUSH
5240: LD_INT 13
5242: PUSH
5243: LD_INT 14
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: ST_TO_ADDR
5252: GO 5795
5254: LD_INT 30
5256: DOUBLE
5257: EQUAL
5258: IFTRUE 5262
5260: GO 5288
5262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5263: LD_ADDR_VAR 0 3
5267: PUSH
5268: LD_INT 11
5270: PUSH
5271: LD_INT 12
5273: PUSH
5274: LD_INT 13
5276: PUSH
5277: LD_INT 14
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: ST_TO_ADDR
5286: GO 5795
5288: LD_INT 25
5290: DOUBLE
5291: EQUAL
5292: IFTRUE 5296
5294: GO 5314
5296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5297: LD_ADDR_VAR 0 3
5301: PUSH
5302: LD_INT 13
5304: PUSH
5305: LD_INT 14
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: ST_TO_ADDR
5312: GO 5795
5314: LD_INT 27
5316: DOUBLE
5317: EQUAL
5318: IFTRUE 5322
5320: GO 5340
5322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: LD_INT 13
5330: PUSH
5331: LD_INT 14
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: ST_TO_ADDR
5338: GO 5795
5340: LD_INT 92
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5374
5348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5349: LD_ADDR_VAR 0 3
5353: PUSH
5354: LD_INT 11
5356: PUSH
5357: LD_INT 12
5359: PUSH
5360: LD_INT 13
5362: PUSH
5363: LD_INT 14
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: ST_TO_ADDR
5372: GO 5795
5374: LD_INT 28
5376: DOUBLE
5377: EQUAL
5378: IFTRUE 5382
5380: GO 5400
5382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: LD_INT 13
5390: PUSH
5391: LD_INT 14
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: ST_TO_ADDR
5398: GO 5795
5400: LD_INT 29
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5426
5408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: LD_INT 13
5416: PUSH
5417: LD_INT 14
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 5795
5426: LD_INT 31
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5452
5434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_INT 13
5442: PUSH
5443: LD_INT 14
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: ST_TO_ADDR
5450: GO 5795
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5460
5458: GO 5478
5460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5461: LD_ADDR_VAR 0 3
5465: PUSH
5466: LD_INT 13
5468: PUSH
5469: LD_INT 14
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: ST_TO_ADDR
5476: GO 5795
5478: LD_INT 42
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5512
5486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: LD_INT 21
5494: PUSH
5495: LD_INT 22
5497: PUSH
5498: LD_INT 23
5500: PUSH
5501: LD_INT 24
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: ST_TO_ADDR
5510: GO 5795
5512: LD_INT 43
5514: DOUBLE
5515: EQUAL
5516: IFTRUE 5520
5518: GO 5546
5520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 21
5528: PUSH
5529: LD_INT 22
5531: PUSH
5532: LD_INT 23
5534: PUSH
5535: LD_INT 24
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: ST_TO_ADDR
5544: GO 5795
5546: LD_INT 44
5548: DOUBLE
5549: EQUAL
5550: IFTRUE 5554
5552: GO 5580
5554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_INT 21
5562: PUSH
5563: LD_INT 22
5565: PUSH
5566: LD_INT 23
5568: PUSH
5569: LD_INT 24
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: ST_TO_ADDR
5578: GO 5795
5580: LD_INT 45
5582: DOUBLE
5583: EQUAL
5584: IFTRUE 5588
5586: GO 5614
5588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5589: LD_ADDR_VAR 0 3
5593: PUSH
5594: LD_INT 21
5596: PUSH
5597: LD_INT 22
5599: PUSH
5600: LD_INT 23
5602: PUSH
5603: LD_INT 24
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: ST_TO_ADDR
5612: GO 5795
5614: LD_INT 49
5616: DOUBLE
5617: EQUAL
5618: IFTRUE 5622
5620: GO 5648
5622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: LD_INT 21
5630: PUSH
5631: LD_INT 22
5633: PUSH
5634: LD_INT 23
5636: PUSH
5637: LD_INT 24
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: ST_TO_ADDR
5646: GO 5795
5648: LD_INT 51
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5682
5656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5657: LD_ADDR_VAR 0 3
5661: PUSH
5662: LD_INT 21
5664: PUSH
5665: LD_INT 22
5667: PUSH
5668: LD_INT 23
5670: PUSH
5671: LD_INT 24
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: ST_TO_ADDR
5680: GO 5795
5682: LD_INT 52
5684: DOUBLE
5685: EQUAL
5686: IFTRUE 5690
5688: GO 5716
5690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5691: LD_ADDR_VAR 0 3
5695: PUSH
5696: LD_INT 21
5698: PUSH
5699: LD_INT 22
5701: PUSH
5702: LD_INT 23
5704: PUSH
5705: LD_INT 24
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: ST_TO_ADDR
5714: GO 5795
5716: LD_INT 53
5718: DOUBLE
5719: EQUAL
5720: IFTRUE 5724
5722: GO 5742
5724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5725: LD_ADDR_VAR 0 3
5729: PUSH
5730: LD_INT 23
5732: PUSH
5733: LD_INT 24
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: ST_TO_ADDR
5740: GO 5795
5742: LD_INT 46
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5768
5750: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5751: LD_ADDR_VAR 0 3
5755: PUSH
5756: LD_INT 23
5758: PUSH
5759: LD_INT 24
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: ST_TO_ADDR
5766: GO 5795
5768: LD_INT 47
5770: DOUBLE
5771: EQUAL
5772: IFTRUE 5776
5774: GO 5794
5776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_INT 23
5784: PUSH
5785: LD_INT 24
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: ST_TO_ADDR
5792: GO 5795
5794: POP
// result := ( chassis in result ) ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_VAR 0 1
5804: PUSH
5805: LD_VAR 0 3
5809: IN
5810: ST_TO_ADDR
// end ;
5811: LD_VAR 0 3
5815: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
5824: PPUSH
// result := array ;
5825: LD_ADDR_VAR 0 5
5829: PUSH
5830: LD_VAR 0 1
5834: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5835: LD_VAR 0 1
5839: NOT
5840: PUSH
5841: LD_VAR 0 2
5845: NOT
5846: OR
5847: PUSH
5848: LD_VAR 0 3
5852: NOT
5853: OR
5854: PUSH
5855: LD_VAR 0 2
5859: PUSH
5860: LD_VAR 0 1
5864: GREATER
5865: OR
5866: PUSH
5867: LD_VAR 0 3
5871: PUSH
5872: LD_VAR 0 1
5876: GREATER
5877: OR
5878: IFFALSE 5882
// exit ;
5880: GO 6178
// if direction then
5882: LD_VAR 0 4
5886: IFFALSE 5950
// begin d := 1 ;
5888: LD_ADDR_VAR 0 9
5892: PUSH
5893: LD_INT 1
5895: ST_TO_ADDR
// if i_from > i_to then
5896: LD_VAR 0 2
5900: PUSH
5901: LD_VAR 0 3
5905: GREATER
5906: IFFALSE 5932
// length := ( array - i_from ) + i_to else
5908: LD_ADDR_VAR 0 11
5912: PUSH
5913: LD_VAR 0 1
5917: PUSH
5918: LD_VAR 0 2
5922: MINUS
5923: PUSH
5924: LD_VAR 0 3
5928: PLUS
5929: ST_TO_ADDR
5930: GO 5948
// length := i_to - i_from ;
5932: LD_ADDR_VAR 0 11
5936: PUSH
5937: LD_VAR 0 3
5941: PUSH
5942: LD_VAR 0 2
5946: MINUS
5947: ST_TO_ADDR
// end else
5948: GO 6011
// begin d := - 1 ;
5950: LD_ADDR_VAR 0 9
5954: PUSH
5955: LD_INT 1
5957: NEG
5958: ST_TO_ADDR
// if i_from > i_to then
5959: LD_VAR 0 2
5963: PUSH
5964: LD_VAR 0 3
5968: GREATER
5969: IFFALSE 5989
// length := i_from - i_to else
5971: LD_ADDR_VAR 0 11
5975: PUSH
5976: LD_VAR 0 2
5980: PUSH
5981: LD_VAR 0 3
5985: MINUS
5986: ST_TO_ADDR
5987: GO 6011
// length := ( array - i_to ) + i_from ;
5989: LD_ADDR_VAR 0 11
5993: PUSH
5994: LD_VAR 0 1
5998: PUSH
5999: LD_VAR 0 3
6003: MINUS
6004: PUSH
6005: LD_VAR 0 2
6009: PLUS
6010: ST_TO_ADDR
// end ; if not length then
6011: LD_VAR 0 11
6015: NOT
6016: IFFALSE 6020
// exit ;
6018: GO 6178
// tmp := array ;
6020: LD_ADDR_VAR 0 10
6024: PUSH
6025: LD_VAR 0 1
6029: ST_TO_ADDR
// for i = 1 to length do
6030: LD_ADDR_VAR 0 6
6034: PUSH
6035: DOUBLE
6036: LD_INT 1
6038: DEC
6039: ST_TO_ADDR
6040: LD_VAR 0 11
6044: PUSH
6045: FOR_TO
6046: IFFALSE 6166
// begin for j = 1 to array do
6048: LD_ADDR_VAR 0 7
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_VAR 0 1
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6152
// begin k := j + d ;
6066: LD_ADDR_VAR 0 8
6070: PUSH
6071: LD_VAR 0 7
6075: PUSH
6076: LD_VAR 0 9
6080: PLUS
6081: ST_TO_ADDR
// if k > array then
6082: LD_VAR 0 8
6086: PUSH
6087: LD_VAR 0 1
6091: GREATER
6092: IFFALSE 6102
// k := 1 ;
6094: LD_ADDR_VAR 0 8
6098: PUSH
6099: LD_INT 1
6101: ST_TO_ADDR
// if not k then
6102: LD_VAR 0 8
6106: NOT
6107: IFFALSE 6119
// k := array ;
6109: LD_ADDR_VAR 0 8
6113: PUSH
6114: LD_VAR 0 1
6118: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6119: LD_ADDR_VAR 0 10
6123: PUSH
6124: LD_VAR 0 10
6128: PPUSH
6129: LD_VAR 0 8
6133: PPUSH
6134: LD_VAR 0 1
6138: PUSH
6139: LD_VAR 0 7
6143: ARRAY
6144: PPUSH
6145: CALL_OW 1
6149: ST_TO_ADDR
// end ;
6150: GO 6063
6152: POP
6153: POP
// array := tmp ;
6154: LD_ADDR_VAR 0 1
6158: PUSH
6159: LD_VAR 0 10
6163: ST_TO_ADDR
// end ;
6164: GO 6045
6166: POP
6167: POP
// result := array ;
6168: LD_ADDR_VAR 0 5
6172: PUSH
6173: LD_VAR 0 1
6177: ST_TO_ADDR
// end ;
6178: LD_VAR 0 5
6182: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
// result := 0 ;
6187: LD_ADDR_VAR 0 3
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// if not array or not value in array then
6195: LD_VAR 0 1
6199: NOT
6200: PUSH
6201: LD_VAR 0 2
6205: PUSH
6206: LD_VAR 0 1
6210: IN
6211: NOT
6212: OR
6213: IFFALSE 6217
// exit ;
6215: GO 6271
// for i = 1 to array do
6217: LD_ADDR_VAR 0 4
6221: PUSH
6222: DOUBLE
6223: LD_INT 1
6225: DEC
6226: ST_TO_ADDR
6227: LD_VAR 0 1
6231: PUSH
6232: FOR_TO
6233: IFFALSE 6269
// if value = array [ i ] then
6235: LD_VAR 0 2
6239: PUSH
6240: LD_VAR 0 1
6244: PUSH
6245: LD_VAR 0 4
6249: ARRAY
6250: EQUAL
6251: IFFALSE 6267
// begin result := i ;
6253: LD_ADDR_VAR 0 3
6257: PUSH
6258: LD_VAR 0 4
6262: ST_TO_ADDR
// exit ;
6263: POP
6264: POP
6265: GO 6271
// end ;
6267: GO 6232
6269: POP
6270: POP
// end ;
6271: LD_VAR 0 3
6275: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6276: LD_INT 0
6278: PPUSH
// vc_chassis := chassis ;
6279: LD_ADDR_OWVAR 37
6283: PUSH
6284: LD_VAR 0 1
6288: ST_TO_ADDR
// vc_engine := engine ;
6289: LD_ADDR_OWVAR 39
6293: PUSH
6294: LD_VAR 0 2
6298: ST_TO_ADDR
// vc_control := control ;
6299: LD_ADDR_OWVAR 38
6303: PUSH
6304: LD_VAR 0 3
6308: ST_TO_ADDR
// vc_weapon := weapon ;
6309: LD_ADDR_OWVAR 40
6313: PUSH
6314: LD_VAR 0 4
6318: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6319: LD_ADDR_OWVAR 41
6323: PUSH
6324: LD_VAR 0 5
6328: ST_TO_ADDR
// end ;
6329: LD_VAR 0 6
6333: RET
// export function WantPlant ( unit ) ; var task ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
// result := false ;
6338: LD_ADDR_VAR 0 2
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 437
6360: ST_TO_ADDR
// if task then
6361: LD_VAR 0 3
6365: IFFALSE 6393
// if task [ 1 ] [ 1 ] = p then
6367: LD_VAR 0 3
6371: PUSH
6372: LD_INT 1
6374: ARRAY
6375: PUSH
6376: LD_INT 1
6378: ARRAY
6379: PUSH
6380: LD_STRING p
6382: EQUAL
6383: IFFALSE 6393
// result := true ;
6385: LD_ADDR_VAR 0 2
6389: PUSH
6390: LD_INT 1
6392: ST_TO_ADDR
// end ;
6393: LD_VAR 0 2
6397: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
6402: PPUSH
6403: PPUSH
// if pos < 1 then
6404: LD_VAR 0 2
6408: PUSH
6409: LD_INT 1
6411: LESS
6412: IFFALSE 6416
// exit ;
6414: GO 6719
// if pos = 1 then
6416: LD_VAR 0 2
6420: PUSH
6421: LD_INT 1
6423: EQUAL
6424: IFFALSE 6457
// result := Replace ( arr , pos [ 1 ] , value ) else
6426: LD_ADDR_VAR 0 4
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: LD_VAR 0 2
6440: PUSH
6441: LD_INT 1
6443: ARRAY
6444: PPUSH
6445: LD_VAR 0 3
6449: PPUSH
6450: CALL_OW 1
6454: ST_TO_ADDR
6455: GO 6719
// begin tmp := arr ;
6457: LD_ADDR_VAR 0 6
6461: PUSH
6462: LD_VAR 0 1
6466: ST_TO_ADDR
// s_arr := [ tmp ] ;
6467: LD_ADDR_VAR 0 7
6471: PUSH
6472: LD_VAR 0 6
6476: PUSH
6477: EMPTY
6478: LIST
6479: ST_TO_ADDR
// for i = 1 to pos - 1 do
6480: LD_ADDR_VAR 0 5
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_VAR 0 2
6494: PUSH
6495: LD_INT 1
6497: MINUS
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6545
// begin tmp := tmp [ pos [ i ] ] ;
6502: LD_ADDR_VAR 0 6
6506: PUSH
6507: LD_VAR 0 6
6511: PUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_VAR 0 5
6521: ARRAY
6522: ARRAY
6523: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6524: LD_ADDR_VAR 0 7
6528: PUSH
6529: LD_VAR 0 7
6533: PUSH
6534: LD_VAR 0 6
6538: PUSH
6539: EMPTY
6540: LIST
6541: ADD
6542: ST_TO_ADDR
// end ;
6543: GO 6499
6545: POP
6546: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6547: LD_ADDR_VAR 0 6
6551: PUSH
6552: LD_VAR 0 6
6556: PPUSH
6557: LD_VAR 0 2
6561: PUSH
6562: LD_VAR 0 2
6566: ARRAY
6567: PPUSH
6568: LD_VAR 0 3
6572: PPUSH
6573: CALL_OW 1
6577: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6578: LD_ADDR_VAR 0 7
6582: PUSH
6583: LD_VAR 0 7
6587: PPUSH
6588: LD_VAR 0 7
6592: PPUSH
6593: LD_VAR 0 6
6597: PPUSH
6598: CALL_OW 1
6602: ST_TO_ADDR
// for i = s_arr downto 2 do
6603: LD_ADDR_VAR 0 5
6607: PUSH
6608: DOUBLE
6609: LD_VAR 0 7
6613: INC
6614: ST_TO_ADDR
6615: LD_INT 2
6617: PUSH
6618: FOR_DOWNTO
6619: IFFALSE 6703
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6621: LD_ADDR_VAR 0 6
6625: PUSH
6626: LD_VAR 0 7
6630: PUSH
6631: LD_VAR 0 5
6635: PUSH
6636: LD_INT 1
6638: MINUS
6639: ARRAY
6640: PPUSH
6641: LD_VAR 0 2
6645: PUSH
6646: LD_VAR 0 5
6650: PUSH
6651: LD_INT 1
6653: MINUS
6654: ARRAY
6655: PPUSH
6656: LD_VAR 0 7
6660: PUSH
6661: LD_VAR 0 5
6665: ARRAY
6666: PPUSH
6667: CALL_OW 1
6671: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6672: LD_ADDR_VAR 0 7
6676: PUSH
6677: LD_VAR 0 7
6681: PPUSH
6682: LD_VAR 0 5
6686: PUSH
6687: LD_INT 1
6689: MINUS
6690: PPUSH
6691: LD_VAR 0 6
6695: PPUSH
6696: CALL_OW 1
6700: ST_TO_ADDR
// end ;
6701: GO 6618
6703: POP
6704: POP
// result := s_arr [ 1 ] ;
6705: LD_ADDR_VAR 0 4
6709: PUSH
6710: LD_VAR 0 7
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: ST_TO_ADDR
// end ; end ;
6719: LD_VAR 0 4
6723: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6724: LD_INT 0
6726: PPUSH
6727: PPUSH
// if not list then
6728: LD_VAR 0 1
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6828
// i := list [ pos1 ] ;
6737: LD_ADDR_VAR 0 5
6741: PUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_VAR 0 2
6751: ARRAY
6752: ST_TO_ADDR
// if not i then
6753: LD_VAR 0 5
6757: NOT
6758: IFFALSE 6762
// exit ;
6760: GO 6828
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6762: LD_ADDR_VAR 0 1
6766: PUSH
6767: LD_VAR 0 1
6771: PPUSH
6772: LD_VAR 0 2
6776: PPUSH
6777: LD_VAR 0 1
6781: PUSH
6782: LD_VAR 0 3
6786: ARRAY
6787: PPUSH
6788: CALL_OW 1
6792: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6793: LD_ADDR_VAR 0 1
6797: PUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_VAR 0 5
6812: PPUSH
6813: CALL_OW 1
6817: ST_TO_ADDR
// result := list ;
6818: LD_ADDR_VAR 0 4
6822: PUSH
6823: LD_VAR 0 1
6827: ST_TO_ADDR
// end ;
6828: LD_VAR 0 4
6832: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6833: LD_INT 0
6835: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6836: LD_ADDR_VAR 0 5
6840: PUSH
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 250
6850: PPUSH
6851: LD_VAR 0 1
6855: PPUSH
6856: CALL_OW 251
6860: PPUSH
6861: LD_VAR 0 2
6865: PPUSH
6866: LD_VAR 0 3
6870: PPUSH
6871: LD_VAR 0 4
6875: PPUSH
6876: CALL 7254 0 5
6880: ST_TO_ADDR
// end ;
6881: LD_VAR 0 5
6885: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6886: LD_INT 0
6888: PPUSH
6889: PPUSH
6890: PPUSH
6891: PPUSH
// if not list or not unit then
6892: LD_VAR 0 2
6896: NOT
6897: PUSH
6898: LD_VAR 0 1
6902: NOT
6903: OR
6904: IFFALSE 6908
// exit ;
6906: GO 7249
// result := [ ] ;
6908: LD_ADDR_VAR 0 5
6912: PUSH
6913: EMPTY
6914: ST_TO_ADDR
// for i in list do
6915: LD_ADDR_VAR 0 6
6919: PUSH
6920: LD_VAR 0 2
6924: PUSH
6925: FOR_IN
6926: IFFALSE 7144
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6928: LD_ADDR_VAR 0 8
6932: PUSH
6933: LD_VAR 0 1
6937: PPUSH
6938: LD_VAR 0 6
6942: PUSH
6943: LD_INT 1
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 6
6951: PUSH
6952: LD_INT 2
6954: ARRAY
6955: PPUSH
6956: CALL_OW 297
6960: ST_TO_ADDR
// if not Count ( result ) then
6961: LD_VAR 0 5
6965: PPUSH
6966: CALL 3538 0 1
6970: NOT
6971: IFFALSE 7004
// begin result := Join ( result , [ i , tmp ] ) ;
6973: LD_ADDR_VAR 0 5
6977: PUSH
6978: LD_VAR 0 5
6982: PPUSH
6983: LD_VAR 0 6
6987: PUSH
6988: LD_VAR 0 8
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL 39127 0 2
7001: ST_TO_ADDR
// continue ;
7002: GO 6925
// end ; if result [ result ] [ 2 ] <= tmp then
7004: LD_VAR 0 5
7008: PUSH
7009: LD_VAR 0 5
7013: ARRAY
7014: PUSH
7015: LD_INT 2
7017: ARRAY
7018: PUSH
7019: LD_VAR 0 8
7023: LESSEQUAL
7024: IFFALSE 7057
// result := Join ( result , [ i , tmp ] ) else
7026: LD_ADDR_VAR 0 5
7030: PUSH
7031: LD_VAR 0 5
7035: PPUSH
7036: LD_VAR 0 6
7040: PUSH
7041: LD_VAR 0 8
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PPUSH
7050: CALL 39127 0 2
7054: ST_TO_ADDR
7055: GO 7142
// begin for j := 1 to Count ( result ) do
7057: LD_ADDR_VAR 0 7
7061: PUSH
7062: DOUBLE
7063: LD_INT 1
7065: DEC
7066: ST_TO_ADDR
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL 3538 0 1
7076: PUSH
7077: FOR_TO
7078: IFFALSE 7140
// begin if tmp < result [ j ] [ 2 ] then
7080: LD_VAR 0 8
7084: PUSH
7085: LD_VAR 0 5
7089: PUSH
7090: LD_VAR 0 7
7094: ARRAY
7095: PUSH
7096: LD_INT 2
7098: ARRAY
7099: LESS
7100: IFFALSE 7138
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7102: LD_ADDR_VAR 0 5
7106: PUSH
7107: LD_VAR 0 5
7111: PPUSH
7112: LD_VAR 0 7
7116: PPUSH
7117: LD_VAR 0 6
7121: PUSH
7122: LD_VAR 0 8
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 2
7135: ST_TO_ADDR
// break ;
7136: GO 7140
// end ; end ;
7138: GO 7077
7140: POP
7141: POP
// end ; end ;
7142: GO 6925
7144: POP
7145: POP
// if result and not asc then
7146: LD_VAR 0 5
7150: PUSH
7151: LD_VAR 0 3
7155: NOT
7156: AND
7157: IFFALSE 7174
// result := ReverseArray ( result ) ;
7159: LD_ADDR_VAR 0 5
7163: PUSH
7164: LD_VAR 0 5
7168: PPUSH
7169: CALL 34414 0 1
7173: ST_TO_ADDR
// tmp := [ ] ;
7174: LD_ADDR_VAR 0 8
7178: PUSH
7179: EMPTY
7180: ST_TO_ADDR
// if mode then
7181: LD_VAR 0 4
7185: IFFALSE 7249
// begin for i := 1 to result do
7187: LD_ADDR_VAR 0 6
7191: PUSH
7192: DOUBLE
7193: LD_INT 1
7195: DEC
7196: ST_TO_ADDR
7197: LD_VAR 0 5
7201: PUSH
7202: FOR_TO
7203: IFFALSE 7237
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7205: LD_ADDR_VAR 0 8
7209: PUSH
7210: LD_VAR 0 8
7214: PPUSH
7215: LD_VAR 0 5
7219: PUSH
7220: LD_VAR 0 6
7224: ARRAY
7225: PUSH
7226: LD_INT 1
7228: ARRAY
7229: PPUSH
7230: CALL 39127 0 2
7234: ST_TO_ADDR
7235: GO 7202
7237: POP
7238: POP
// result := tmp ;
7239: LD_ADDR_VAR 0 5
7243: PUSH
7244: LD_VAR 0 8
7248: ST_TO_ADDR
// end ; end ;
7249: LD_VAR 0 5
7253: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7254: LD_INT 0
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// if not list then
7260: LD_VAR 0 3
7264: NOT
7265: IFFALSE 7269
// exit ;
7267: GO 7657
// result := [ ] ;
7269: LD_ADDR_VAR 0 6
7273: PUSH
7274: EMPTY
7275: ST_TO_ADDR
// for i in list do
7276: LD_ADDR_VAR 0 7
7280: PUSH
7281: LD_VAR 0 3
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7489
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7289: LD_ADDR_VAR 0 9
7293: PUSH
7294: LD_VAR 0 7
7298: PPUSH
7299: LD_VAR 0 1
7303: PPUSH
7304: LD_VAR 0 2
7308: PPUSH
7309: CALL_OW 297
7313: ST_TO_ADDR
// if not result then
7314: LD_VAR 0 6
7318: NOT
7319: IFFALSE 7345
// result := [ [ i , tmp ] ] else
7321: LD_ADDR_VAR 0 6
7325: PUSH
7326: LD_VAR 0 7
7330: PUSH
7331: LD_VAR 0 9
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: ST_TO_ADDR
7343: GO 7487
// begin if result [ result ] [ 2 ] < tmp then
7345: LD_VAR 0 6
7349: PUSH
7350: LD_VAR 0 6
7354: ARRAY
7355: PUSH
7356: LD_INT 2
7358: ARRAY
7359: PUSH
7360: LD_VAR 0 9
7364: LESS
7365: IFFALSE 7407
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7367: LD_ADDR_VAR 0 6
7371: PUSH
7372: LD_VAR 0 6
7376: PPUSH
7377: LD_VAR 0 6
7381: PUSH
7382: LD_INT 1
7384: PLUS
7385: PPUSH
7386: LD_VAR 0 7
7390: PUSH
7391: LD_VAR 0 9
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 2
7404: ST_TO_ADDR
7405: GO 7487
// for j = 1 to result do
7407: LD_ADDR_VAR 0 8
7411: PUSH
7412: DOUBLE
7413: LD_INT 1
7415: DEC
7416: ST_TO_ADDR
7417: LD_VAR 0 6
7421: PUSH
7422: FOR_TO
7423: IFFALSE 7485
// begin if tmp < result [ j ] [ 2 ] then
7425: LD_VAR 0 9
7429: PUSH
7430: LD_VAR 0 6
7434: PUSH
7435: LD_VAR 0 8
7439: ARRAY
7440: PUSH
7441: LD_INT 2
7443: ARRAY
7444: LESS
7445: IFFALSE 7483
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7447: LD_ADDR_VAR 0 6
7451: PUSH
7452: LD_VAR 0 6
7456: PPUSH
7457: LD_VAR 0 8
7461: PPUSH
7462: LD_VAR 0 7
7466: PUSH
7467: LD_VAR 0 9
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 2
7480: ST_TO_ADDR
// break ;
7481: GO 7485
// end ; end ;
7483: GO 7422
7485: POP
7486: POP
// end ; end ;
7487: GO 7286
7489: POP
7490: POP
// if result and not asc then
7491: LD_VAR 0 6
7495: PUSH
7496: LD_VAR 0 4
7500: NOT
7501: AND
7502: IFFALSE 7577
// begin tmp := result ;
7504: LD_ADDR_VAR 0 9
7508: PUSH
7509: LD_VAR 0 6
7513: ST_TO_ADDR
// for i = tmp downto 1 do
7514: LD_ADDR_VAR 0 7
7518: PUSH
7519: DOUBLE
7520: LD_VAR 0 9
7524: INC
7525: ST_TO_ADDR
7526: LD_INT 1
7528: PUSH
7529: FOR_DOWNTO
7530: IFFALSE 7575
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7532: LD_ADDR_VAR 0 6
7536: PUSH
7537: LD_VAR 0 6
7541: PPUSH
7542: LD_VAR 0 9
7546: PUSH
7547: LD_VAR 0 7
7551: MINUS
7552: PUSH
7553: LD_INT 1
7555: PLUS
7556: PPUSH
7557: LD_VAR 0 9
7561: PUSH
7562: LD_VAR 0 7
7566: ARRAY
7567: PPUSH
7568: CALL_OW 1
7572: ST_TO_ADDR
7573: GO 7529
7575: POP
7576: POP
// end ; tmp := [ ] ;
7577: LD_ADDR_VAR 0 9
7581: PUSH
7582: EMPTY
7583: ST_TO_ADDR
// if mode then
7584: LD_VAR 0 5
7588: IFFALSE 7657
// begin for i = 1 to result do
7590: LD_ADDR_VAR 0 7
7594: PUSH
7595: DOUBLE
7596: LD_INT 1
7598: DEC
7599: ST_TO_ADDR
7600: LD_VAR 0 6
7604: PUSH
7605: FOR_TO
7606: IFFALSE 7645
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7608: LD_ADDR_VAR 0 9
7612: PUSH
7613: LD_VAR 0 9
7617: PPUSH
7618: LD_VAR 0 7
7622: PPUSH
7623: LD_VAR 0 6
7627: PUSH
7628: LD_VAR 0 7
7632: ARRAY
7633: PUSH
7634: LD_INT 1
7636: ARRAY
7637: PPUSH
7638: CALL_OW 1
7642: ST_TO_ADDR
7643: GO 7605
7645: POP
7646: POP
// result := tmp ;
7647: LD_ADDR_VAR 0 6
7651: PUSH
7652: LD_VAR 0 9
7656: ST_TO_ADDR
// end ; end ;
7657: LD_VAR 0 6
7661: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
7668: PPUSH
7669: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7670: LD_ADDR_VAR 0 5
7674: PUSH
7675: LD_INT 0
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: EMPTY
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: ST_TO_ADDR
// if not x or not y then
7692: LD_VAR 0 2
7696: NOT
7697: PUSH
7698: LD_VAR 0 3
7702: NOT
7703: OR
7704: IFFALSE 7708
// exit ;
7706: GO 9358
// if not range then
7708: LD_VAR 0 4
7712: NOT
7713: IFFALSE 7723
// range := 10 ;
7715: LD_ADDR_VAR 0 4
7719: PUSH
7720: LD_INT 10
7722: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7723: LD_ADDR_VAR 0 8
7727: PUSH
7728: LD_INT 81
7730: PUSH
7731: LD_VAR 0 1
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 92
7742: PUSH
7743: LD_VAR 0 2
7747: PUSH
7748: LD_VAR 0 3
7752: PUSH
7753: LD_VAR 0 4
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 3
7766: PUSH
7767: LD_INT 21
7769: PUSH
7770: LD_INT 3
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: PPUSH
7786: CALL_OW 69
7790: ST_TO_ADDR
// if not tmp then
7791: LD_VAR 0 8
7795: NOT
7796: IFFALSE 7800
// exit ;
7798: GO 9358
// for i in tmp do
7800: LD_ADDR_VAR 0 6
7804: PUSH
7805: LD_VAR 0 8
7809: PUSH
7810: FOR_IN
7811: IFFALSE 9333
// begin points := [ 0 , 0 , 0 ] ;
7813: LD_ADDR_VAR 0 9
7817: PUSH
7818: LD_INT 0
7820: PUSH
7821: LD_INT 0
7823: PUSH
7824: LD_INT 0
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: ST_TO_ADDR
// bpoints := 1 ;
7832: LD_ADDR_VAR 0 10
7836: PUSH
7837: LD_INT 1
7839: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7840: LD_VAR 0 6
7844: PPUSH
7845: CALL_OW 247
7849: PUSH
7850: LD_INT 1
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 8436
7858: POP
// begin if GetClass ( i ) = 1 then
7859: LD_VAR 0 6
7863: PPUSH
7864: CALL_OW 257
7868: PUSH
7869: LD_INT 1
7871: EQUAL
7872: IFFALSE 7893
// points := [ 10 , 5 , 3 ] ;
7874: LD_ADDR_VAR 0 9
7878: PUSH
7879: LD_INT 10
7881: PUSH
7882: LD_INT 5
7884: PUSH
7885: LD_INT 3
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7893: LD_VAR 0 6
7897: PPUSH
7898: CALL_OW 257
7902: PUSH
7903: LD_INT 2
7905: PUSH
7906: LD_INT 3
7908: PUSH
7909: LD_INT 4
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: IN
7917: IFFALSE 7938
// points := [ 3 , 2 , 1 ] ;
7919: LD_ADDR_VAR 0 9
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 2
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7938: LD_VAR 0 6
7942: PPUSH
7943: CALL_OW 257
7947: PUSH
7948: LD_INT 5
7950: EQUAL
7951: IFFALSE 7972
// points := [ 130 , 5 , 2 ] ;
7953: LD_ADDR_VAR 0 9
7957: PUSH
7958: LD_INT 130
7960: PUSH
7961: LD_INT 5
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7972: LD_VAR 0 6
7976: PPUSH
7977: CALL_OW 257
7981: PUSH
7982: LD_INT 8
7984: EQUAL
7985: IFFALSE 8006
// points := [ 35 , 35 , 30 ] ;
7987: LD_ADDR_VAR 0 9
7991: PUSH
7992: LD_INT 35
7994: PUSH
7995: LD_INT 35
7997: PUSH
7998: LD_INT 30
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8006: LD_VAR 0 6
8010: PPUSH
8011: CALL_OW 257
8015: PUSH
8016: LD_INT 9
8018: EQUAL
8019: IFFALSE 8040
// points := [ 20 , 55 , 40 ] ;
8021: LD_ADDR_VAR 0 9
8025: PUSH
8026: LD_INT 20
8028: PUSH
8029: LD_INT 55
8031: PUSH
8032: LD_INT 40
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8040: LD_VAR 0 6
8044: PPUSH
8045: CALL_OW 257
8049: PUSH
8050: LD_INT 12
8052: PUSH
8053: LD_INT 16
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: IN
8060: IFFALSE 8081
// points := [ 5 , 3 , 2 ] ;
8062: LD_ADDR_VAR 0 9
8066: PUSH
8067: LD_INT 5
8069: PUSH
8070: LD_INT 3
8072: PUSH
8073: LD_INT 2
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: LIST
8080: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8081: LD_VAR 0 6
8085: PPUSH
8086: CALL_OW 257
8090: PUSH
8091: LD_INT 17
8093: EQUAL
8094: IFFALSE 8115
// points := [ 100 , 50 , 75 ] ;
8096: LD_ADDR_VAR 0 9
8100: PUSH
8101: LD_INT 100
8103: PUSH
8104: LD_INT 50
8106: PUSH
8107: LD_INT 75
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8115: LD_VAR 0 6
8119: PPUSH
8120: CALL_OW 257
8124: PUSH
8125: LD_INT 15
8127: EQUAL
8128: IFFALSE 8149
// points := [ 10 , 5 , 3 ] ;
8130: LD_ADDR_VAR 0 9
8134: PUSH
8135: LD_INT 10
8137: PUSH
8138: LD_INT 5
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8149: LD_VAR 0 6
8153: PPUSH
8154: CALL_OW 257
8158: PUSH
8159: LD_INT 14
8161: EQUAL
8162: IFFALSE 8183
// points := [ 10 , 0 , 0 ] ;
8164: LD_ADDR_VAR 0 9
8168: PUSH
8169: LD_INT 10
8171: PUSH
8172: LD_INT 0
8174: PUSH
8175: LD_INT 0
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8183: LD_VAR 0 6
8187: PPUSH
8188: CALL_OW 257
8192: PUSH
8193: LD_INT 11
8195: EQUAL
8196: IFFALSE 8217
// points := [ 30 , 10 , 5 ] ;
8198: LD_ADDR_VAR 0 9
8202: PUSH
8203: LD_INT 30
8205: PUSH
8206: LD_INT 10
8208: PUSH
8209: LD_INT 5
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: LIST
8216: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_INT 5
8224: PPUSH
8225: CALL_OW 321
8229: PUSH
8230: LD_INT 2
8232: EQUAL
8233: IFFALSE 8250
// bpoints := bpoints * 1.8 ;
8235: LD_ADDR_VAR 0 10
8239: PUSH
8240: LD_VAR 0 10
8244: PUSH
8245: LD_REAL  1.80000000000000E+0000
8248: MUL
8249: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8250: LD_VAR 0 6
8254: PPUSH
8255: CALL_OW 257
8259: PUSH
8260: LD_INT 1
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: LD_INT 3
8268: PUSH
8269: LD_INT 4
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: IN
8278: PUSH
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_INT 51
8286: PPUSH
8287: CALL_OW 321
8291: PUSH
8292: LD_INT 2
8294: EQUAL
8295: AND
8296: IFFALSE 8313
// bpoints := bpoints * 1.2 ;
8298: LD_ADDR_VAR 0 10
8302: PUSH
8303: LD_VAR 0 10
8307: PUSH
8308: LD_REAL  1.20000000000000E+0000
8311: MUL
8312: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8313: LD_VAR 0 6
8317: PPUSH
8318: CALL_OW 257
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: LD_INT 7
8328: PUSH
8329: LD_INT 9
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: IN
8337: PUSH
8338: LD_VAR 0 1
8342: PPUSH
8343: LD_INT 52
8345: PPUSH
8346: CALL_OW 321
8350: PUSH
8351: LD_INT 2
8353: EQUAL
8354: AND
8355: IFFALSE 8372
// bpoints := bpoints * 1.5 ;
8357: LD_ADDR_VAR 0 10
8361: PUSH
8362: LD_VAR 0 10
8366: PUSH
8367: LD_REAL  1.50000000000000E+0000
8370: MUL
8371: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_INT 66
8379: PPUSH
8380: CALL_OW 321
8384: PUSH
8385: LD_INT 2
8387: EQUAL
8388: IFFALSE 8405
// bpoints := bpoints * 1.1 ;
8390: LD_ADDR_VAR 0 10
8394: PUSH
8395: LD_VAR 0 10
8399: PUSH
8400: LD_REAL  1.10000000000000E+0000
8403: MUL
8404: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8405: LD_ADDR_VAR 0 10
8409: PUSH
8410: LD_VAR 0 10
8414: PUSH
8415: LD_VAR 0 6
8419: PPUSH
8420: LD_INT 1
8422: PPUSH
8423: CALL_OW 259
8427: PUSH
8428: LD_REAL  1.15000000000000E+0000
8431: MUL
8432: MUL
8433: ST_TO_ADDR
// end ; unit_vehicle :
8434: GO 9262
8436: LD_INT 2
8438: DOUBLE
8439: EQUAL
8440: IFTRUE 8444
8442: GO 9250
8444: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8445: LD_VAR 0 6
8449: PPUSH
8450: CALL_OW 264
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 42
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: IN
8469: IFFALSE 8490
// points := [ 25 , 5 , 3 ] ;
8471: LD_ADDR_VAR 0 9
8475: PUSH
8476: LD_INT 25
8478: PUSH
8479: LD_INT 5
8481: PUSH
8482: LD_INT 3
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8490: LD_VAR 0 6
8494: PPUSH
8495: CALL_OW 264
8499: PUSH
8500: LD_INT 4
8502: PUSH
8503: LD_INT 43
8505: PUSH
8506: LD_INT 25
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: IN
8514: IFFALSE 8535
// points := [ 40 , 15 , 5 ] ;
8516: LD_ADDR_VAR 0 9
8520: PUSH
8521: LD_INT 40
8523: PUSH
8524: LD_INT 15
8526: PUSH
8527: LD_INT 5
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8535: LD_VAR 0 6
8539: PPUSH
8540: CALL_OW 264
8544: PUSH
8545: LD_INT 3
8547: PUSH
8548: LD_INT 23
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: IN
8555: IFFALSE 8576
// points := [ 7 , 25 , 8 ] ;
8557: LD_ADDR_VAR 0 9
8561: PUSH
8562: LD_INT 7
8564: PUSH
8565: LD_INT 25
8567: PUSH
8568: LD_INT 8
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8576: LD_VAR 0 6
8580: PPUSH
8581: CALL_OW 264
8585: PUSH
8586: LD_INT 5
8588: PUSH
8589: LD_INT 27
8591: PUSH
8592: LD_INT 44
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: IN
8600: IFFALSE 8621
// points := [ 14 , 50 , 16 ] ;
8602: LD_ADDR_VAR 0 9
8606: PUSH
8607: LD_INT 14
8609: PUSH
8610: LD_INT 50
8612: PUSH
8613: LD_INT 16
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8621: LD_VAR 0 6
8625: PPUSH
8626: CALL_OW 264
8630: PUSH
8631: LD_INT 6
8633: PUSH
8634: LD_INT 46
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: IN
8641: IFFALSE 8662
// points := [ 32 , 120 , 70 ] ;
8643: LD_ADDR_VAR 0 9
8647: PUSH
8648: LD_INT 32
8650: PUSH
8651: LD_INT 120
8653: PUSH
8654: LD_INT 70
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: LIST
8661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8662: LD_VAR 0 6
8666: PPUSH
8667: CALL_OW 264
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: LD_INT 28
8677: PUSH
8678: LD_INT 45
8680: PUSH
8681: LD_INT 92
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: IN
8690: IFFALSE 8711
// points := [ 35 , 20 , 45 ] ;
8692: LD_ADDR_VAR 0 9
8696: PUSH
8697: LD_INT 35
8699: PUSH
8700: LD_INT 20
8702: PUSH
8703: LD_INT 45
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8711: LD_VAR 0 6
8715: PPUSH
8716: CALL_OW 264
8720: PUSH
8721: LD_INT 47
8723: PUSH
8724: EMPTY
8725: LIST
8726: IN
8727: IFFALSE 8748
// points := [ 67 , 45 , 75 ] ;
8729: LD_ADDR_VAR 0 9
8733: PUSH
8734: LD_INT 67
8736: PUSH
8737: LD_INT 45
8739: PUSH
8740: LD_INT 75
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8748: LD_VAR 0 6
8752: PPUSH
8753: CALL_OW 264
8757: PUSH
8758: LD_INT 26
8760: PUSH
8761: EMPTY
8762: LIST
8763: IN
8764: IFFALSE 8785
// points := [ 120 , 30 , 80 ] ;
8766: LD_ADDR_VAR 0 9
8770: PUSH
8771: LD_INT 120
8773: PUSH
8774: LD_INT 30
8776: PUSH
8777: LD_INT 80
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8785: LD_VAR 0 6
8789: PPUSH
8790: CALL_OW 264
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: EMPTY
8799: LIST
8800: IN
8801: IFFALSE 8822
// points := [ 40 , 1 , 1 ] ;
8803: LD_ADDR_VAR 0 9
8807: PUSH
8808: LD_INT 40
8810: PUSH
8811: LD_INT 1
8813: PUSH
8814: LD_INT 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8822: LD_VAR 0 6
8826: PPUSH
8827: CALL_OW 264
8831: PUSH
8832: LD_INT 29
8834: PUSH
8835: EMPTY
8836: LIST
8837: IN
8838: IFFALSE 8859
// points := [ 70 , 200 , 400 ] ;
8840: LD_ADDR_VAR 0 9
8844: PUSH
8845: LD_INT 70
8847: PUSH
8848: LD_INT 200
8850: PUSH
8851: LD_INT 400
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8859: LD_VAR 0 6
8863: PPUSH
8864: CALL_OW 264
8868: PUSH
8869: LD_INT 14
8871: PUSH
8872: LD_INT 53
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: IN
8879: IFFALSE 8900
// points := [ 40 , 10 , 20 ] ;
8881: LD_ADDR_VAR 0 9
8885: PUSH
8886: LD_INT 40
8888: PUSH
8889: LD_INT 10
8891: PUSH
8892: LD_INT 20
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: LIST
8899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8900: LD_VAR 0 6
8904: PPUSH
8905: CALL_OW 264
8909: PUSH
8910: LD_INT 9
8912: PUSH
8913: EMPTY
8914: LIST
8915: IN
8916: IFFALSE 8937
// points := [ 5 , 70 , 20 ] ;
8918: LD_ADDR_VAR 0 9
8922: PUSH
8923: LD_INT 5
8925: PUSH
8926: LD_INT 70
8928: PUSH
8929: LD_INT 20
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8937: LD_VAR 0 6
8941: PPUSH
8942: CALL_OW 264
8946: PUSH
8947: LD_INT 10
8949: PUSH
8950: EMPTY
8951: LIST
8952: IN
8953: IFFALSE 8974
// points := [ 35 , 110 , 70 ] ;
8955: LD_ADDR_VAR 0 9
8959: PUSH
8960: LD_INT 35
8962: PUSH
8963: LD_INT 110
8965: PUSH
8966: LD_INT 70
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8974: LD_VAR 0 6
8978: PPUSH
8979: CALL_OW 265
8983: PUSH
8984: LD_INT 25
8986: EQUAL
8987: IFFALSE 9008
// points := [ 80 , 65 , 100 ] ;
8989: LD_ADDR_VAR 0 9
8993: PUSH
8994: LD_INT 80
8996: PUSH
8997: LD_INT 65
8999: PUSH
9000: LD_INT 100
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9008: LD_VAR 0 6
9012: PPUSH
9013: CALL_OW 263
9017: PUSH
9018: LD_INT 1
9020: EQUAL
9021: IFFALSE 9056
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9023: LD_ADDR_VAR 0 10
9027: PUSH
9028: LD_VAR 0 10
9032: PUSH
9033: LD_VAR 0 6
9037: PPUSH
9038: CALL_OW 311
9042: PPUSH
9043: LD_INT 3
9045: PPUSH
9046: CALL_OW 259
9050: PUSH
9051: LD_INT 4
9053: MUL
9054: MUL
9055: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9056: LD_VAR 0 6
9060: PPUSH
9061: CALL_OW 263
9065: PUSH
9066: LD_INT 2
9068: EQUAL
9069: IFFALSE 9120
// begin j := IsControledBy ( i ) ;
9071: LD_ADDR_VAR 0 7
9075: PUSH
9076: LD_VAR 0 6
9080: PPUSH
9081: CALL_OW 312
9085: ST_TO_ADDR
// if j then
9086: LD_VAR 0 7
9090: IFFALSE 9120
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9092: LD_ADDR_VAR 0 10
9096: PUSH
9097: LD_VAR 0 10
9101: PUSH
9102: LD_VAR 0 7
9106: PPUSH
9107: LD_INT 3
9109: PPUSH
9110: CALL_OW 259
9114: PUSH
9115: LD_INT 3
9117: MUL
9118: MUL
9119: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9120: LD_VAR 0 6
9124: PPUSH
9125: CALL_OW 264
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 46
9138: PUSH
9139: LD_INT 44
9141: PUSH
9142: LD_INT 47
9144: PUSH
9145: LD_INT 45
9147: PUSH
9148: LD_INT 28
9150: PUSH
9151: LD_INT 7
9153: PUSH
9154: LD_INT 27
9156: PUSH
9157: LD_INT 29
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: IN
9172: PUSH
9173: LD_VAR 0 1
9177: PPUSH
9178: LD_INT 52
9180: PPUSH
9181: CALL_OW 321
9185: PUSH
9186: LD_INT 2
9188: EQUAL
9189: AND
9190: IFFALSE 9207
// bpoints := bpoints * 1.2 ;
9192: LD_ADDR_VAR 0 10
9196: PUSH
9197: LD_VAR 0 10
9201: PUSH
9202: LD_REAL  1.20000000000000E+0000
9205: MUL
9206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 264
9216: PUSH
9217: LD_INT 6
9219: PUSH
9220: LD_INT 46
9222: PUSH
9223: LD_INT 47
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: IN
9231: IFFALSE 9248
// bpoints := bpoints * 1.2 ;
9233: LD_ADDR_VAR 0 10
9237: PUSH
9238: LD_VAR 0 10
9242: PUSH
9243: LD_REAL  1.20000000000000E+0000
9246: MUL
9247: ST_TO_ADDR
// end ; unit_building :
9248: GO 9262
9250: LD_INT 3
9252: DOUBLE
9253: EQUAL
9254: IFTRUE 9258
9256: GO 9261
9258: POP
// ; end ;
9259: GO 9262
9261: POP
// for j = 1 to 3 do
9262: LD_ADDR_VAR 0 7
9266: PUSH
9267: DOUBLE
9268: LD_INT 1
9270: DEC
9271: ST_TO_ADDR
9272: LD_INT 3
9274: PUSH
9275: FOR_TO
9276: IFFALSE 9329
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9278: LD_ADDR_VAR 0 5
9282: PUSH
9283: LD_VAR 0 5
9287: PPUSH
9288: LD_VAR 0 7
9292: PPUSH
9293: LD_VAR 0 5
9297: PUSH
9298: LD_VAR 0 7
9302: ARRAY
9303: PUSH
9304: LD_VAR 0 9
9308: PUSH
9309: LD_VAR 0 7
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 10
9319: MUL
9320: PLUS
9321: PPUSH
9322: CALL_OW 1
9326: ST_TO_ADDR
9327: GO 9275
9329: POP
9330: POP
// end ;
9331: GO 7810
9333: POP
9334: POP
// result := Replace ( result , 4 , tmp ) ;
9335: LD_ADDR_VAR 0 5
9339: PUSH
9340: LD_VAR 0 5
9344: PPUSH
9345: LD_INT 4
9347: PPUSH
9348: LD_VAR 0 8
9352: PPUSH
9353: CALL_OW 1
9357: ST_TO_ADDR
// end ;
9358: LD_VAR 0 5
9362: RET
// export function DangerAtRange ( unit , range ) ; begin
9363: LD_INT 0
9365: PPUSH
// if not unit then
9366: LD_VAR 0 1
9370: NOT
9371: IFFALSE 9375
// exit ;
9373: GO 9420
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9375: LD_ADDR_VAR 0 3
9379: PUSH
9380: LD_VAR 0 1
9384: PPUSH
9385: CALL_OW 255
9389: PPUSH
9390: LD_VAR 0 1
9394: PPUSH
9395: CALL_OW 250
9399: PPUSH
9400: LD_VAR 0 1
9404: PPUSH
9405: CALL_OW 251
9409: PPUSH
9410: LD_VAR 0 2
9414: PPUSH
9415: CALL 7662 0 4
9419: ST_TO_ADDR
// end ;
9420: LD_VAR 0 3
9424: RET
// export function DangerInArea ( side , area ) ; begin
9425: LD_INT 0
9427: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9428: LD_ADDR_VAR 0 3
9432: PUSH
9433: LD_VAR 0 2
9437: PPUSH
9438: LD_INT 81
9440: PUSH
9441: LD_VAR 0 1
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 70
9454: ST_TO_ADDR
// end ;
9455: LD_VAR 0 3
9459: RET
// export function IsExtension ( b ) ; begin
9460: LD_INT 0
9462: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9463: LD_ADDR_VAR 0 2
9467: PUSH
9468: LD_VAR 0 1
9472: PUSH
9473: LD_INT 23
9475: PUSH
9476: LD_INT 20
9478: PUSH
9479: LD_INT 22
9481: PUSH
9482: LD_INT 17
9484: PUSH
9485: LD_INT 24
9487: PUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 19
9493: PUSH
9494: LD_INT 16
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 18
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: IN
9515: ST_TO_ADDR
// end ;
9516: LD_VAR 0 2
9520: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9521: LD_INT 0
9523: PPUSH
9524: PPUSH
9525: PPUSH
// result := [ ] ;
9526: LD_ADDR_VAR 0 4
9530: PUSH
9531: EMPTY
9532: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9533: LD_ADDR_VAR 0 5
9537: PUSH
9538: LD_VAR 0 2
9542: PPUSH
9543: LD_INT 21
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 70
9557: ST_TO_ADDR
// if not tmp then
9558: LD_VAR 0 5
9562: NOT
9563: IFFALSE 9567
// exit ;
9565: GO 9631
// if checkLink then
9567: LD_VAR 0 3
9571: IFFALSE 9621
// begin for i in tmp do
9573: LD_ADDR_VAR 0 6
9577: PUSH
9578: LD_VAR 0 5
9582: PUSH
9583: FOR_IN
9584: IFFALSE 9619
// if GetBase ( i ) <> base then
9586: LD_VAR 0 6
9590: PPUSH
9591: CALL_OW 274
9595: PUSH
9596: LD_VAR 0 1
9600: NONEQUAL
9601: IFFALSE 9617
// ComLinkToBase ( base , i ) ;
9603: LD_VAR 0 1
9607: PPUSH
9608: LD_VAR 0 6
9612: PPUSH
9613: CALL_OW 169
9617: GO 9583
9619: POP
9620: POP
// end ; result := tmp ;
9621: LD_ADDR_VAR 0 4
9625: PUSH
9626: LD_VAR 0 5
9630: ST_TO_ADDR
// end ;
9631: LD_VAR 0 4
9635: RET
// export function ComComplete ( units , b ) ; var i ; begin
9636: LD_INT 0
9638: PPUSH
9639: PPUSH
// if not units then
9640: LD_VAR 0 1
9644: NOT
9645: IFFALSE 9649
// exit ;
9647: GO 9739
// for i in units do
9649: LD_ADDR_VAR 0 4
9653: PUSH
9654: LD_VAR 0 1
9658: PUSH
9659: FOR_IN
9660: IFFALSE 9737
// if BuildingStatus ( b ) = bs_build then
9662: LD_VAR 0 2
9666: PPUSH
9667: CALL_OW 461
9671: PUSH
9672: LD_INT 1
9674: EQUAL
9675: IFFALSE 9735
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9677: LD_VAR 0 4
9681: PPUSH
9682: LD_STRING h
9684: PUSH
9685: LD_VAR 0 2
9689: PPUSH
9690: CALL_OW 250
9694: PUSH
9695: LD_VAR 0 2
9699: PPUSH
9700: CALL_OW 251
9704: PUSH
9705: LD_VAR 0 2
9709: PUSH
9710: LD_INT 0
9712: PUSH
9713: LD_INT 0
9715: PUSH
9716: LD_INT 0
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: PPUSH
9731: CALL_OW 446
9735: GO 9659
9737: POP
9738: POP
// end ;
9739: LD_VAR 0 3
9743: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9744: LD_INT 0
9746: PPUSH
9747: PPUSH
9748: PPUSH
9749: PPUSH
9750: PPUSH
9751: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9752: LD_VAR 0 1
9756: NOT
9757: PUSH
9758: LD_VAR 0 1
9762: PPUSH
9763: CALL_OW 263
9767: PUSH
9768: LD_INT 2
9770: NONEQUAL
9771: OR
9772: IFFALSE 9776
// exit ;
9774: GO 10092
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9776: LD_ADDR_VAR 0 6
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 255
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: LD_INT 30
9803: PUSH
9804: LD_INT 36
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 34
9813: PUSH
9814: LD_INT 31
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PPUSH
9830: CALL_OW 69
9834: ST_TO_ADDR
// if not tmp then
9835: LD_VAR 0 6
9839: NOT
9840: IFFALSE 9844
// exit ;
9842: GO 10092
// result := [ ] ;
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: EMPTY
9850: ST_TO_ADDR
// for i in tmp do
9851: LD_ADDR_VAR 0 3
9855: PUSH
9856: LD_VAR 0 6
9860: PUSH
9861: FOR_IN
9862: IFFALSE 9933
// begin t := UnitsInside ( i ) ;
9864: LD_ADDR_VAR 0 4
9868: PUSH
9869: LD_VAR 0 3
9873: PPUSH
9874: CALL_OW 313
9878: ST_TO_ADDR
// if t then
9879: LD_VAR 0 4
9883: IFFALSE 9931
// for j in t do
9885: LD_ADDR_VAR 0 7
9889: PUSH
9890: LD_VAR 0 4
9894: PUSH
9895: FOR_IN
9896: IFFALSE 9929
// result := Replace ( result , result + 1 , j ) ;
9898: LD_ADDR_VAR 0 2
9902: PUSH
9903: LD_VAR 0 2
9907: PPUSH
9908: LD_VAR 0 2
9912: PUSH
9913: LD_INT 1
9915: PLUS
9916: PPUSH
9917: LD_VAR 0 7
9921: PPUSH
9922: CALL_OW 1
9926: ST_TO_ADDR
9927: GO 9895
9929: POP
9930: POP
// end ;
9931: GO 9861
9933: POP
9934: POP
// if not result then
9935: LD_VAR 0 2
9939: NOT
9940: IFFALSE 9944
// exit ;
9942: GO 10092
// mech := result [ 1 ] ;
9944: LD_ADDR_VAR 0 5
9948: PUSH
9949: LD_VAR 0 2
9953: PUSH
9954: LD_INT 1
9956: ARRAY
9957: ST_TO_ADDR
// if result > 1 then
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 1
9965: GREATER
9966: IFFALSE 10078
// begin for i = 2 to result do
9968: LD_ADDR_VAR 0 3
9972: PUSH
9973: DOUBLE
9974: LD_INT 2
9976: DEC
9977: ST_TO_ADDR
9978: LD_VAR 0 2
9982: PUSH
9983: FOR_TO
9984: IFFALSE 10076
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9986: LD_ADDR_VAR 0 4
9990: PUSH
9991: LD_VAR 0 2
9995: PUSH
9996: LD_VAR 0 3
10000: ARRAY
10001: PPUSH
10002: LD_INT 3
10004: PPUSH
10005: CALL_OW 259
10009: PUSH
10010: LD_VAR 0 2
10014: PUSH
10015: LD_VAR 0 3
10019: ARRAY
10020: PPUSH
10021: CALL_OW 432
10025: MINUS
10026: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10027: LD_VAR 0 4
10031: PUSH
10032: LD_VAR 0 5
10036: PPUSH
10037: LD_INT 3
10039: PPUSH
10040: CALL_OW 259
10044: PUSH
10045: LD_VAR 0 5
10049: PPUSH
10050: CALL_OW 432
10054: MINUS
10055: GREATEREQUAL
10056: IFFALSE 10074
// mech := result [ i ] ;
10058: LD_ADDR_VAR 0 5
10062: PUSH
10063: LD_VAR 0 2
10067: PUSH
10068: LD_VAR 0 3
10072: ARRAY
10073: ST_TO_ADDR
// end ;
10074: GO 9983
10076: POP
10077: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10078: LD_VAR 0 1
10082: PPUSH
10083: LD_VAR 0 5
10087: PPUSH
10088: CALL_OW 135
// end ;
10092: LD_VAR 0 2
10096: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10097: LD_INT 0
10099: PPUSH
10100: PPUSH
10101: PPUSH
10102: PPUSH
10103: PPUSH
10104: PPUSH
10105: PPUSH
10106: PPUSH
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
// result := [ ] ;
10112: LD_ADDR_VAR 0 7
10116: PUSH
10117: EMPTY
10118: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10119: LD_VAR 0 1
10123: PPUSH
10124: CALL_OW 266
10128: PUSH
10129: LD_INT 0
10131: PUSH
10132: LD_INT 1
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: IN
10139: NOT
10140: IFFALSE 10144
// exit ;
10142: GO 11778
// if name then
10144: LD_VAR 0 3
10148: IFFALSE 10164
// SetBName ( base_dep , name ) ;
10150: LD_VAR 0 1
10154: PPUSH
10155: LD_VAR 0 3
10159: PPUSH
10160: CALL_OW 500
// base := GetBase ( base_dep ) ;
10164: LD_ADDR_VAR 0 15
10168: PUSH
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 274
10178: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10179: LD_ADDR_VAR 0 16
10183: PUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: CALL_OW 255
10193: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10194: LD_ADDR_VAR 0 17
10198: PUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: CALL_OW 248
10208: ST_TO_ADDR
// if sources then
10209: LD_VAR 0 5
10213: IFFALSE 10260
// for i = 1 to 3 do
10215: LD_ADDR_VAR 0 8
10219: PUSH
10220: DOUBLE
10221: LD_INT 1
10223: DEC
10224: ST_TO_ADDR
10225: LD_INT 3
10227: PUSH
10228: FOR_TO
10229: IFFALSE 10258
// AddResourceType ( base , i , sources [ i ] ) ;
10231: LD_VAR 0 15
10235: PPUSH
10236: LD_VAR 0 8
10240: PPUSH
10241: LD_VAR 0 5
10245: PUSH
10246: LD_VAR 0 8
10250: ARRAY
10251: PPUSH
10252: CALL_OW 276
10256: GO 10228
10258: POP
10259: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10260: LD_ADDR_VAR 0 18
10264: PUSH
10265: LD_VAR 0 15
10269: PPUSH
10270: LD_VAR 0 2
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: CALL 9521 0 3
10282: ST_TO_ADDR
// InitHc ;
10283: CALL_OW 19
// InitUc ;
10287: CALL_OW 18
// uc_side := side ;
10291: LD_ADDR_OWVAR 20
10295: PUSH
10296: LD_VAR 0 16
10300: ST_TO_ADDR
// uc_nation := nation ;
10301: LD_ADDR_OWVAR 21
10305: PUSH
10306: LD_VAR 0 17
10310: ST_TO_ADDR
// if buildings then
10311: LD_VAR 0 18
10315: IFFALSE 11637
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10317: LD_ADDR_VAR 0 19
10321: PUSH
10322: LD_VAR 0 18
10326: PPUSH
10327: LD_INT 2
10329: PUSH
10330: LD_INT 30
10332: PUSH
10333: LD_INT 29
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 30
10342: PUSH
10343: LD_INT 30
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: PPUSH
10355: CALL_OW 72
10359: ST_TO_ADDR
// if tmp then
10360: LD_VAR 0 19
10364: IFFALSE 10412
// for i in tmp do
10366: LD_ADDR_VAR 0 8
10370: PUSH
10371: LD_VAR 0 19
10375: PUSH
10376: FOR_IN
10377: IFFALSE 10410
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10379: LD_VAR 0 8
10383: PPUSH
10384: CALL_OW 250
10388: PPUSH
10389: LD_VAR 0 8
10393: PPUSH
10394: CALL_OW 251
10398: PPUSH
10399: LD_VAR 0 16
10403: PPUSH
10404: CALL_OW 441
10408: GO 10376
10410: POP
10411: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10412: LD_VAR 0 18
10416: PPUSH
10417: LD_INT 2
10419: PUSH
10420: LD_INT 30
10422: PUSH
10423: LD_INT 32
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 30
10432: PUSH
10433: LD_INT 33
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 72
10449: IFFALSE 10537
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10451: LD_ADDR_VAR 0 8
10455: PUSH
10456: LD_VAR 0 18
10460: PPUSH
10461: LD_INT 2
10463: PUSH
10464: LD_INT 30
10466: PUSH
10467: LD_INT 32
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 30
10476: PUSH
10477: LD_INT 33
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: PPUSH
10489: CALL_OW 72
10493: PUSH
10494: FOR_IN
10495: IFFALSE 10535
// begin if not GetBWeapon ( i ) then
10497: LD_VAR 0 8
10501: PPUSH
10502: CALL_OW 269
10506: NOT
10507: IFFALSE 10533
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10509: LD_VAR 0 8
10513: PPUSH
10514: LD_VAR 0 8
10518: PPUSH
10519: LD_VAR 0 2
10523: PPUSH
10524: CALL 11783 0 2
10528: PPUSH
10529: CALL_OW 431
// end ;
10533: GO 10494
10535: POP
10536: POP
// end ; for i = 1 to personel do
10537: LD_ADDR_VAR 0 8
10541: PUSH
10542: DOUBLE
10543: LD_INT 1
10545: DEC
10546: ST_TO_ADDR
10547: LD_VAR 0 6
10551: PUSH
10552: FOR_TO
10553: IFFALSE 11617
// begin if i > 4 then
10555: LD_VAR 0 8
10559: PUSH
10560: LD_INT 4
10562: GREATER
10563: IFFALSE 10567
// break ;
10565: GO 11617
// case i of 1 :
10567: LD_VAR 0 8
10571: PUSH
10572: LD_INT 1
10574: DOUBLE
10575: EQUAL
10576: IFTRUE 10580
10578: GO 10660
10580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10581: LD_ADDR_VAR 0 12
10585: PUSH
10586: LD_VAR 0 18
10590: PPUSH
10591: LD_INT 22
10593: PUSH
10594: LD_VAR 0 16
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 58
10605: PUSH
10606: EMPTY
10607: LIST
10608: PUSH
10609: LD_INT 2
10611: PUSH
10612: LD_INT 30
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 30
10624: PUSH
10625: LD_INT 4
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 30
10634: PUSH
10635: LD_INT 5
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: ST_TO_ADDR
10658: GO 10882
10660: LD_INT 2
10662: DOUBLE
10663: EQUAL
10664: IFTRUE 10668
10666: GO 10730
10668: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10669: LD_ADDR_VAR 0 12
10673: PUSH
10674: LD_VAR 0 18
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_VAR 0 16
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: LD_INT 30
10696: PUSH
10697: LD_INT 0
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 30
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PPUSH
10723: CALL_OW 72
10727: ST_TO_ADDR
10728: GO 10882
10730: LD_INT 3
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10800
10738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10739: LD_ADDR_VAR 0 12
10743: PUSH
10744: LD_VAR 0 18
10748: PPUSH
10749: LD_INT 22
10751: PUSH
10752: LD_VAR 0 16
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 2
10763: PUSH
10764: LD_INT 30
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 30
10776: PUSH
10777: LD_INT 3
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 72
10797: ST_TO_ADDR
10798: GO 10882
10800: LD_INT 4
10802: DOUBLE
10803: EQUAL
10804: IFTRUE 10808
10806: GO 10881
10808: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10809: LD_ADDR_VAR 0 12
10813: PUSH
10814: LD_VAR 0 18
10818: PPUSH
10819: LD_INT 22
10821: PUSH
10822: LD_VAR 0 16
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 2
10833: PUSH
10834: LD_INT 30
10836: PUSH
10837: LD_INT 6
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 30
10846: PUSH
10847: LD_INT 7
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 30
10856: PUSH
10857: LD_INT 8
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PPUSH
10874: CALL_OW 72
10878: ST_TO_ADDR
10879: GO 10882
10881: POP
// if i = 1 then
10882: LD_VAR 0 8
10886: PUSH
10887: LD_INT 1
10889: EQUAL
10890: IFFALSE 11001
// begin tmp := [ ] ;
10892: LD_ADDR_VAR 0 19
10896: PUSH
10897: EMPTY
10898: ST_TO_ADDR
// for j in f do
10899: LD_ADDR_VAR 0 9
10903: PUSH
10904: LD_VAR 0 12
10908: PUSH
10909: FOR_IN
10910: IFFALSE 10983
// if GetBType ( j ) = b_bunker then
10912: LD_VAR 0 9
10916: PPUSH
10917: CALL_OW 266
10921: PUSH
10922: LD_INT 32
10924: EQUAL
10925: IFFALSE 10952
// tmp := Insert ( tmp , 1 , j ) else
10927: LD_ADDR_VAR 0 19
10931: PUSH
10932: LD_VAR 0 19
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: LD_VAR 0 9
10944: PPUSH
10945: CALL_OW 2
10949: ST_TO_ADDR
10950: GO 10981
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10952: LD_ADDR_VAR 0 19
10956: PUSH
10957: LD_VAR 0 19
10961: PPUSH
10962: LD_VAR 0 19
10966: PUSH
10967: LD_INT 1
10969: PLUS
10970: PPUSH
10971: LD_VAR 0 9
10975: PPUSH
10976: CALL_OW 2
10980: ST_TO_ADDR
10981: GO 10909
10983: POP
10984: POP
// if tmp then
10985: LD_VAR 0 19
10989: IFFALSE 11001
// f := tmp ;
10991: LD_ADDR_VAR 0 12
10995: PUSH
10996: LD_VAR 0 19
11000: ST_TO_ADDR
// end ; x := personel [ i ] ;
11001: LD_ADDR_VAR 0 13
11005: PUSH
11006: LD_VAR 0 6
11010: PUSH
11011: LD_VAR 0 8
11015: ARRAY
11016: ST_TO_ADDR
// if x = - 1 then
11017: LD_VAR 0 13
11021: PUSH
11022: LD_INT 1
11024: NEG
11025: EQUAL
11026: IFFALSE 11235
// begin for j in f do
11028: LD_ADDR_VAR 0 9
11032: PUSH
11033: LD_VAR 0 12
11037: PUSH
11038: FOR_IN
11039: IFFALSE 11231
// repeat InitHc ;
11041: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11045: LD_VAR 0 9
11049: PPUSH
11050: CALL_OW 266
11054: PUSH
11055: LD_INT 5
11057: EQUAL
11058: IFFALSE 11128
// begin if UnitsInside ( j ) < 3 then
11060: LD_VAR 0 9
11064: PPUSH
11065: CALL_OW 313
11069: PUSH
11070: LD_INT 3
11072: LESS
11073: IFFALSE 11109
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11075: LD_INT 0
11077: PPUSH
11078: LD_INT 5
11080: PUSH
11081: LD_INT 8
11083: PUSH
11084: LD_INT 9
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: PUSH
11092: LD_VAR 0 17
11096: ARRAY
11097: PPUSH
11098: LD_VAR 0 4
11102: PPUSH
11103: CALL_OW 380
11107: GO 11126
// PrepareHuman ( false , i , skill ) ;
11109: LD_INT 0
11111: PPUSH
11112: LD_VAR 0 8
11116: PPUSH
11117: LD_VAR 0 4
11121: PPUSH
11122: CALL_OW 380
// end else
11126: GO 11145
// PrepareHuman ( false , i , skill ) ;
11128: LD_INT 0
11130: PPUSH
11131: LD_VAR 0 8
11135: PPUSH
11136: LD_VAR 0 4
11140: PPUSH
11141: CALL_OW 380
// un := CreateHuman ;
11145: LD_ADDR_VAR 0 14
11149: PUSH
11150: CALL_OW 44
11154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11155: LD_ADDR_VAR 0 7
11159: PUSH
11160: LD_VAR 0 7
11164: PPUSH
11165: LD_INT 1
11167: PPUSH
11168: LD_VAR 0 14
11172: PPUSH
11173: CALL_OW 2
11177: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11178: LD_VAR 0 14
11182: PPUSH
11183: LD_VAR 0 9
11187: PPUSH
11188: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11192: LD_VAR 0 9
11196: PPUSH
11197: CALL_OW 313
11201: PUSH
11202: LD_INT 6
11204: EQUAL
11205: PUSH
11206: LD_VAR 0 9
11210: PPUSH
11211: CALL_OW 266
11215: PUSH
11216: LD_INT 32
11218: PUSH
11219: LD_INT 31
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: IN
11226: OR
11227: IFFALSE 11041
11229: GO 11038
11231: POP
11232: POP
// end else
11233: GO 11615
// for j = 1 to x do
11235: LD_ADDR_VAR 0 9
11239: PUSH
11240: DOUBLE
11241: LD_INT 1
11243: DEC
11244: ST_TO_ADDR
11245: LD_VAR 0 13
11249: PUSH
11250: FOR_TO
11251: IFFALSE 11613
// begin InitHc ;
11253: CALL_OW 19
// if not f then
11257: LD_VAR 0 12
11261: NOT
11262: IFFALSE 11351
// begin PrepareHuman ( false , i , skill ) ;
11264: LD_INT 0
11266: PPUSH
11267: LD_VAR 0 8
11271: PPUSH
11272: LD_VAR 0 4
11276: PPUSH
11277: CALL_OW 380
// un := CreateHuman ;
11281: LD_ADDR_VAR 0 14
11285: PUSH
11286: CALL_OW 44
11290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11291: LD_ADDR_VAR 0 7
11295: PUSH
11296: LD_VAR 0 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: LD_VAR 0 14
11308: PPUSH
11309: CALL_OW 2
11313: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11314: LD_VAR 0 14
11318: PPUSH
11319: LD_VAR 0 1
11323: PPUSH
11324: CALL_OW 250
11328: PPUSH
11329: LD_VAR 0 1
11333: PPUSH
11334: CALL_OW 251
11338: PPUSH
11339: LD_INT 10
11341: PPUSH
11342: LD_INT 0
11344: PPUSH
11345: CALL_OW 50
// continue ;
11349: GO 11250
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11351: LD_VAR 0 12
11355: PUSH
11356: LD_INT 1
11358: ARRAY
11359: PPUSH
11360: CALL_OW 313
11364: PUSH
11365: LD_VAR 0 12
11369: PUSH
11370: LD_INT 1
11372: ARRAY
11373: PPUSH
11374: CALL_OW 266
11378: PUSH
11379: LD_INT 32
11381: PUSH
11382: LD_INT 31
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: IN
11389: AND
11390: PUSH
11391: LD_VAR 0 12
11395: PUSH
11396: LD_INT 1
11398: ARRAY
11399: PPUSH
11400: CALL_OW 313
11404: PUSH
11405: LD_INT 6
11407: EQUAL
11408: OR
11409: IFFALSE 11429
// f := Delete ( f , 1 ) ;
11411: LD_ADDR_VAR 0 12
11415: PUSH
11416: LD_VAR 0 12
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 3
11428: ST_TO_ADDR
// if not f then
11429: LD_VAR 0 12
11433: NOT
11434: IFFALSE 11452
// begin x := x + 2 ;
11436: LD_ADDR_VAR 0 13
11440: PUSH
11441: LD_VAR 0 13
11445: PUSH
11446: LD_INT 2
11448: PLUS
11449: ST_TO_ADDR
// continue ;
11450: GO 11250
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11452: LD_VAR 0 12
11456: PUSH
11457: LD_INT 1
11459: ARRAY
11460: PPUSH
11461: CALL_OW 266
11465: PUSH
11466: LD_INT 5
11468: EQUAL
11469: IFFALSE 11543
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11471: LD_VAR 0 12
11475: PUSH
11476: LD_INT 1
11478: ARRAY
11479: PPUSH
11480: CALL_OW 313
11484: PUSH
11485: LD_INT 3
11487: LESS
11488: IFFALSE 11524
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11490: LD_INT 0
11492: PPUSH
11493: LD_INT 5
11495: PUSH
11496: LD_INT 8
11498: PUSH
11499: LD_INT 9
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_VAR 0 17
11511: ARRAY
11512: PPUSH
11513: LD_VAR 0 4
11517: PPUSH
11518: CALL_OW 380
11522: GO 11541
// PrepareHuman ( false , i , skill ) ;
11524: LD_INT 0
11526: PPUSH
11527: LD_VAR 0 8
11531: PPUSH
11532: LD_VAR 0 4
11536: PPUSH
11537: CALL_OW 380
// end else
11541: GO 11560
// PrepareHuman ( false , i , skill ) ;
11543: LD_INT 0
11545: PPUSH
11546: LD_VAR 0 8
11550: PPUSH
11551: LD_VAR 0 4
11555: PPUSH
11556: CALL_OW 380
// un := CreateHuman ;
11560: LD_ADDR_VAR 0 14
11564: PUSH
11565: CALL_OW 44
11569: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11570: LD_ADDR_VAR 0 7
11574: PUSH
11575: LD_VAR 0 7
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: LD_VAR 0 14
11587: PPUSH
11588: CALL_OW 2
11592: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11593: LD_VAR 0 14
11597: PPUSH
11598: LD_VAR 0 12
11602: PUSH
11603: LD_INT 1
11605: ARRAY
11606: PPUSH
11607: CALL_OW 52
// end ;
11611: GO 11250
11613: POP
11614: POP
// end ;
11615: GO 10552
11617: POP
11618: POP
// result := result ^ buildings ;
11619: LD_ADDR_VAR 0 7
11623: PUSH
11624: LD_VAR 0 7
11628: PUSH
11629: LD_VAR 0 18
11633: ADD
11634: ST_TO_ADDR
// end else
11635: GO 11778
// begin for i = 1 to personel do
11637: LD_ADDR_VAR 0 8
11641: PUSH
11642: DOUBLE
11643: LD_INT 1
11645: DEC
11646: ST_TO_ADDR
11647: LD_VAR 0 6
11651: PUSH
11652: FOR_TO
11653: IFFALSE 11776
// begin if i > 4 then
11655: LD_VAR 0 8
11659: PUSH
11660: LD_INT 4
11662: GREATER
11663: IFFALSE 11667
// break ;
11665: GO 11776
// x := personel [ i ] ;
11667: LD_ADDR_VAR 0 13
11671: PUSH
11672: LD_VAR 0 6
11676: PUSH
11677: LD_VAR 0 8
11681: ARRAY
11682: ST_TO_ADDR
// if x = - 1 then
11683: LD_VAR 0 13
11687: PUSH
11688: LD_INT 1
11690: NEG
11691: EQUAL
11692: IFFALSE 11696
// continue ;
11694: GO 11652
// PrepareHuman ( false , i , skill ) ;
11696: LD_INT 0
11698: PPUSH
11699: LD_VAR 0 8
11703: PPUSH
11704: LD_VAR 0 4
11708: PPUSH
11709: CALL_OW 380
// un := CreateHuman ;
11713: LD_ADDR_VAR 0 14
11717: PUSH
11718: CALL_OW 44
11722: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11723: LD_VAR 0 14
11727: PPUSH
11728: LD_VAR 0 1
11732: PPUSH
11733: CALL_OW 250
11737: PPUSH
11738: LD_VAR 0 1
11742: PPUSH
11743: CALL_OW 251
11747: PPUSH
11748: LD_INT 10
11750: PPUSH
11751: LD_INT 0
11753: PPUSH
11754: CALL_OW 50
// result := result ^ un ;
11758: LD_ADDR_VAR 0 7
11762: PUSH
11763: LD_VAR 0 7
11767: PUSH
11768: LD_VAR 0 14
11772: ADD
11773: ST_TO_ADDR
// end ;
11774: GO 11652
11776: POP
11777: POP
// end ; end ;
11778: LD_VAR 0 7
11782: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
11789: PPUSH
11790: PPUSH
11791: PPUSH
11792: PPUSH
11793: PPUSH
11794: PPUSH
11795: PPUSH
11796: PPUSH
11797: PPUSH
11798: PPUSH
11799: PPUSH
11800: PPUSH
// result := false ;
11801: LD_ADDR_VAR 0 3
11805: PUSH
11806: LD_INT 0
11808: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11809: LD_VAR 0 1
11813: NOT
11814: PUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL_OW 266
11824: PUSH
11825: LD_INT 32
11827: PUSH
11828: LD_INT 33
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: IN
11835: NOT
11836: OR
11837: IFFALSE 11841
// exit ;
11839: GO 12950
// nat := GetNation ( tower ) ;
11841: LD_ADDR_VAR 0 12
11845: PUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 248
11855: ST_TO_ADDR
// side := GetSide ( tower ) ;
11856: LD_ADDR_VAR 0 16
11860: PUSH
11861: LD_VAR 0 1
11865: PPUSH
11866: CALL_OW 255
11870: ST_TO_ADDR
// x := GetX ( tower ) ;
11871: LD_ADDR_VAR 0 10
11875: PUSH
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 250
11885: ST_TO_ADDR
// y := GetY ( tower ) ;
11886: LD_ADDR_VAR 0 11
11890: PUSH
11891: LD_VAR 0 1
11895: PPUSH
11896: CALL_OW 251
11900: ST_TO_ADDR
// if not x or not y then
11901: LD_VAR 0 10
11905: NOT
11906: PUSH
11907: LD_VAR 0 11
11911: NOT
11912: OR
11913: IFFALSE 11917
// exit ;
11915: GO 12950
// weapon := 0 ;
11917: LD_ADDR_VAR 0 18
11921: PUSH
11922: LD_INT 0
11924: ST_TO_ADDR
// fac_list := [ ] ;
11925: LD_ADDR_VAR 0 17
11929: PUSH
11930: EMPTY
11931: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11932: LD_ADDR_VAR 0 6
11936: PUSH
11937: LD_VAR 0 1
11941: PPUSH
11942: CALL_OW 274
11946: PPUSH
11947: LD_VAR 0 2
11951: PPUSH
11952: LD_INT 0
11954: PPUSH
11955: CALL 9521 0 3
11959: PPUSH
11960: LD_INT 30
11962: PUSH
11963: LD_INT 3
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 72
11974: ST_TO_ADDR
// if not factories then
11975: LD_VAR 0 6
11979: NOT
11980: IFFALSE 11984
// exit ;
11982: GO 12950
// for i in factories do
11984: LD_ADDR_VAR 0 8
11988: PUSH
11989: LD_VAR 0 6
11993: PUSH
11994: FOR_IN
11995: IFFALSE 12020
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11997: LD_ADDR_VAR 0 17
12001: PUSH
12002: LD_VAR 0 17
12006: PUSH
12007: LD_VAR 0 8
12011: PPUSH
12012: CALL_OW 478
12016: UNION
12017: ST_TO_ADDR
12018: GO 11994
12020: POP
12021: POP
// if not fac_list then
12022: LD_VAR 0 17
12026: NOT
12027: IFFALSE 12031
// exit ;
12029: GO 12950
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12031: LD_ADDR_VAR 0 5
12035: PUSH
12036: LD_INT 4
12038: PUSH
12039: LD_INT 5
12041: PUSH
12042: LD_INT 9
12044: PUSH
12045: LD_INT 10
12047: PUSH
12048: LD_INT 6
12050: PUSH
12051: LD_INT 7
12053: PUSH
12054: LD_INT 11
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 27
12068: PUSH
12069: LD_INT 28
12071: PUSH
12072: LD_INT 26
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 43
12086: PUSH
12087: LD_INT 44
12089: PUSH
12090: LD_INT 46
12092: PUSH
12093: LD_INT 45
12095: PUSH
12096: LD_INT 47
12098: PUSH
12099: LD_INT 49
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: PUSH
12115: LD_VAR 0 12
12119: ARRAY
12120: ST_TO_ADDR
// list := list isect fac_list ;
12121: LD_ADDR_VAR 0 5
12125: PUSH
12126: LD_VAR 0 5
12130: PUSH
12131: LD_VAR 0 17
12135: ISECT
12136: ST_TO_ADDR
// if not list then
12137: LD_VAR 0 5
12141: NOT
12142: IFFALSE 12146
// exit ;
12144: GO 12950
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12146: LD_VAR 0 12
12150: PUSH
12151: LD_INT 3
12153: EQUAL
12154: PUSH
12155: LD_INT 49
12157: PUSH
12158: LD_VAR 0 5
12162: IN
12163: AND
12164: PUSH
12165: LD_INT 31
12167: PPUSH
12168: LD_VAR 0 16
12172: PPUSH
12173: CALL_OW 321
12177: PUSH
12178: LD_INT 2
12180: EQUAL
12181: AND
12182: IFFALSE 12242
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12184: LD_INT 22
12186: PUSH
12187: LD_VAR 0 16
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 35
12198: PUSH
12199: LD_INT 49
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 91
12208: PUSH
12209: LD_VAR 0 1
12213: PUSH
12214: LD_INT 10
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: NOT
12232: IFFALSE 12242
// weapon := ru_time_lapser ;
12234: LD_ADDR_VAR 0 18
12238: PUSH
12239: LD_INT 49
12241: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12242: LD_VAR 0 12
12246: PUSH
12247: LD_INT 1
12249: PUSH
12250: LD_INT 2
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: IN
12257: PUSH
12258: LD_INT 11
12260: PUSH
12261: LD_VAR 0 5
12265: IN
12266: PUSH
12267: LD_INT 30
12269: PUSH
12270: LD_VAR 0 5
12274: IN
12275: OR
12276: AND
12277: PUSH
12278: LD_INT 6
12280: PPUSH
12281: LD_VAR 0 16
12285: PPUSH
12286: CALL_OW 321
12290: PUSH
12291: LD_INT 2
12293: EQUAL
12294: AND
12295: IFFALSE 12460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12297: LD_INT 22
12299: PUSH
12300: LD_VAR 0 16
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: LD_INT 35
12314: PUSH
12315: LD_INT 11
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 35
12324: PUSH
12325: LD_INT 30
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 91
12339: PUSH
12340: LD_VAR 0 1
12344: PUSH
12345: LD_INT 18
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: NOT
12363: PUSH
12364: LD_INT 22
12366: PUSH
12367: LD_VAR 0 16
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: LD_INT 30
12381: PUSH
12382: LD_INT 32
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 30
12391: PUSH
12392: LD_INT 33
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 91
12406: PUSH
12407: LD_VAR 0 1
12411: PUSH
12412: LD_INT 12
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: PPUSH
12428: CALL_OW 69
12432: PUSH
12433: LD_INT 2
12435: GREATER
12436: AND
12437: IFFALSE 12460
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12439: LD_ADDR_VAR 0 18
12443: PUSH
12444: LD_INT 11
12446: PUSH
12447: LD_INT 30
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_VAR 0 12
12458: ARRAY
12459: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12460: LD_VAR 0 18
12464: NOT
12465: PUSH
12466: LD_INT 40
12468: PPUSH
12469: LD_VAR 0 16
12473: PPUSH
12474: CALL_OW 321
12478: PUSH
12479: LD_INT 2
12481: EQUAL
12482: AND
12483: PUSH
12484: LD_INT 7
12486: PUSH
12487: LD_VAR 0 5
12491: IN
12492: PUSH
12493: LD_INT 28
12495: PUSH
12496: LD_VAR 0 5
12500: IN
12501: OR
12502: PUSH
12503: LD_INT 45
12505: PUSH
12506: LD_VAR 0 5
12510: IN
12511: OR
12512: AND
12513: IFFALSE 12767
// begin hex := GetHexInfo ( x , y ) ;
12515: LD_ADDR_VAR 0 4
12519: PUSH
12520: LD_VAR 0 10
12524: PPUSH
12525: LD_VAR 0 11
12529: PPUSH
12530: CALL_OW 546
12534: ST_TO_ADDR
// if hex [ 1 ] then
12535: LD_VAR 0 4
12539: PUSH
12540: LD_INT 1
12542: ARRAY
12543: IFFALSE 12547
// exit ;
12545: GO 12950
// height := hex [ 2 ] ;
12547: LD_ADDR_VAR 0 15
12551: PUSH
12552: LD_VAR 0 4
12556: PUSH
12557: LD_INT 2
12559: ARRAY
12560: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12561: LD_ADDR_VAR 0 14
12565: PUSH
12566: LD_INT 0
12568: PUSH
12569: LD_INT 2
12571: PUSH
12572: LD_INT 3
12574: PUSH
12575: LD_INT 5
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: ST_TO_ADDR
// for i in tmp do
12584: LD_ADDR_VAR 0 8
12588: PUSH
12589: LD_VAR 0 14
12593: PUSH
12594: FOR_IN
12595: IFFALSE 12765
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12597: LD_ADDR_VAR 0 9
12601: PUSH
12602: LD_VAR 0 10
12606: PPUSH
12607: LD_VAR 0 8
12611: PPUSH
12612: LD_INT 5
12614: PPUSH
12615: CALL_OW 272
12619: PUSH
12620: LD_VAR 0 11
12624: PPUSH
12625: LD_VAR 0 8
12629: PPUSH
12630: LD_INT 5
12632: PPUSH
12633: CALL_OW 273
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_VAR 0 9
12655: PUSH
12656: LD_INT 2
12658: ARRAY
12659: PPUSH
12660: CALL_OW 488
12664: IFFALSE 12763
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12666: LD_ADDR_VAR 0 4
12670: PUSH
12671: LD_VAR 0 9
12675: PUSH
12676: LD_INT 1
12678: ARRAY
12679: PPUSH
12680: LD_VAR 0 9
12684: PUSH
12685: LD_INT 2
12687: ARRAY
12688: PPUSH
12689: CALL_OW 546
12693: ST_TO_ADDR
// if hex [ 1 ] then
12694: LD_VAR 0 4
12698: PUSH
12699: LD_INT 1
12701: ARRAY
12702: IFFALSE 12706
// continue ;
12704: GO 12594
// h := hex [ 2 ] ;
12706: LD_ADDR_VAR 0 13
12710: PUSH
12711: LD_VAR 0 4
12715: PUSH
12716: LD_INT 2
12718: ARRAY
12719: ST_TO_ADDR
// if h + 7 < height then
12720: LD_VAR 0 13
12724: PUSH
12725: LD_INT 7
12727: PLUS
12728: PUSH
12729: LD_VAR 0 15
12733: LESS
12734: IFFALSE 12763
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12736: LD_ADDR_VAR 0 18
12740: PUSH
12741: LD_INT 7
12743: PUSH
12744: LD_INT 28
12746: PUSH
12747: LD_INT 45
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: PUSH
12755: LD_VAR 0 12
12759: ARRAY
12760: ST_TO_ADDR
// break ;
12761: GO 12765
// end ; end ; end ;
12763: GO 12594
12765: POP
12766: POP
// end ; if not weapon then
12767: LD_VAR 0 18
12771: NOT
12772: IFFALSE 12832
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12774: LD_ADDR_VAR 0 5
12778: PUSH
12779: LD_VAR 0 5
12783: PUSH
12784: LD_INT 11
12786: PUSH
12787: LD_INT 30
12789: PUSH
12790: LD_INT 49
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: DIFF
12798: ST_TO_ADDR
// if not list then
12799: LD_VAR 0 5
12803: NOT
12804: IFFALSE 12808
// exit ;
12806: GO 12950
// weapon := list [ rand ( 1 , list ) ] ;
12808: LD_ADDR_VAR 0 18
12812: PUSH
12813: LD_VAR 0 5
12817: PUSH
12818: LD_INT 1
12820: PPUSH
12821: LD_VAR 0 5
12825: PPUSH
12826: CALL_OW 12
12830: ARRAY
12831: ST_TO_ADDR
// end ; if weapon then
12832: LD_VAR 0 18
12836: IFFALSE 12950
// begin tmp := CostOfWeapon ( weapon ) ;
12838: LD_ADDR_VAR 0 14
12842: PUSH
12843: LD_VAR 0 18
12847: PPUSH
12848: CALL_OW 451
12852: ST_TO_ADDR
// j := GetBase ( tower ) ;
12853: LD_ADDR_VAR 0 9
12857: PUSH
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 274
12867: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12868: LD_VAR 0 9
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 275
12880: PUSH
12881: LD_VAR 0 14
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: GREATEREQUAL
12890: PUSH
12891: LD_VAR 0 9
12895: PPUSH
12896: LD_INT 2
12898: PPUSH
12899: CALL_OW 275
12903: PUSH
12904: LD_VAR 0 14
12908: PUSH
12909: LD_INT 2
12911: ARRAY
12912: GREATEREQUAL
12913: AND
12914: PUSH
12915: LD_VAR 0 9
12919: PPUSH
12920: LD_INT 3
12922: PPUSH
12923: CALL_OW 275
12927: PUSH
12928: LD_VAR 0 14
12932: PUSH
12933: LD_INT 3
12935: ARRAY
12936: GREATEREQUAL
12937: AND
12938: IFFALSE 12950
// result := weapon ;
12940: LD_ADDR_VAR 0 3
12944: PUSH
12945: LD_VAR 0 18
12949: ST_TO_ADDR
// end ; end ;
12950: LD_VAR 0 3
12954: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12955: LD_INT 0
12957: PPUSH
12958: PPUSH
// result := true ;
12959: LD_ADDR_VAR 0 3
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// if array1 = array2 then
12967: LD_VAR 0 1
12971: PUSH
12972: LD_VAR 0 2
12976: EQUAL
12977: IFFALSE 13037
// begin for i = 1 to array1 do
12979: LD_ADDR_VAR 0 4
12983: PUSH
12984: DOUBLE
12985: LD_INT 1
12987: DEC
12988: ST_TO_ADDR
12989: LD_VAR 0 1
12993: PUSH
12994: FOR_TO
12995: IFFALSE 13033
// if array1 [ i ] <> array2 [ i ] then
12997: LD_VAR 0 1
13001: PUSH
13002: LD_VAR 0 4
13006: ARRAY
13007: PUSH
13008: LD_VAR 0 2
13012: PUSH
13013: LD_VAR 0 4
13017: ARRAY
13018: NONEQUAL
13019: IFFALSE 13031
// begin result := false ;
13021: LD_ADDR_VAR 0 3
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// break ;
13029: GO 13033
// end ;
13031: GO 12994
13033: POP
13034: POP
// end else
13035: GO 13045
// result := false ;
13037: LD_ADDR_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// end ;
13045: LD_VAR 0 3
13049: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13050: LD_INT 0
13052: PPUSH
13053: PPUSH
// if not array1 or not array2 then
13054: LD_VAR 0 1
13058: NOT
13059: PUSH
13060: LD_VAR 0 2
13064: NOT
13065: OR
13066: IFFALSE 13070
// exit ;
13068: GO 13134
// result := true ;
13070: LD_ADDR_VAR 0 3
13074: PUSH
13075: LD_INT 1
13077: ST_TO_ADDR
// for i = 1 to array1 do
13078: LD_ADDR_VAR 0 4
13082: PUSH
13083: DOUBLE
13084: LD_INT 1
13086: DEC
13087: ST_TO_ADDR
13088: LD_VAR 0 1
13092: PUSH
13093: FOR_TO
13094: IFFALSE 13132
// if array1 [ i ] <> array2 [ i ] then
13096: LD_VAR 0 1
13100: PUSH
13101: LD_VAR 0 4
13105: ARRAY
13106: PUSH
13107: LD_VAR 0 2
13111: PUSH
13112: LD_VAR 0 4
13116: ARRAY
13117: NONEQUAL
13118: IFFALSE 13130
// begin result := false ;
13120: LD_ADDR_VAR 0 3
13124: PUSH
13125: LD_INT 0
13127: ST_TO_ADDR
// break ;
13128: GO 13132
// end ;
13130: GO 13093
13132: POP
13133: POP
// end ;
13134: LD_VAR 0 3
13138: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13139: LD_INT 0
13141: PPUSH
13142: PPUSH
13143: PPUSH
// pom := GetBase ( fac ) ;
13144: LD_ADDR_VAR 0 5
13148: PUSH
13149: LD_VAR 0 1
13153: PPUSH
13154: CALL_OW 274
13158: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13159: LD_ADDR_VAR 0 4
13163: PUSH
13164: LD_VAR 0 2
13168: PUSH
13169: LD_INT 1
13171: ARRAY
13172: PPUSH
13173: LD_VAR 0 2
13177: PUSH
13178: LD_INT 2
13180: ARRAY
13181: PPUSH
13182: LD_VAR 0 2
13186: PUSH
13187: LD_INT 3
13189: ARRAY
13190: PPUSH
13191: LD_VAR 0 2
13195: PUSH
13196: LD_INT 4
13198: ARRAY
13199: PPUSH
13200: CALL_OW 449
13204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13205: LD_ADDR_VAR 0 3
13209: PUSH
13210: LD_VAR 0 5
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 275
13222: PUSH
13223: LD_VAR 0 4
13227: PUSH
13228: LD_INT 1
13230: ARRAY
13231: GREATEREQUAL
13232: PUSH
13233: LD_VAR 0 5
13237: PPUSH
13238: LD_INT 2
13240: PPUSH
13241: CALL_OW 275
13245: PUSH
13246: LD_VAR 0 4
13250: PUSH
13251: LD_INT 2
13253: ARRAY
13254: GREATEREQUAL
13255: AND
13256: PUSH
13257: LD_VAR 0 5
13261: PPUSH
13262: LD_INT 3
13264: PPUSH
13265: CALL_OW 275
13269: PUSH
13270: LD_VAR 0 4
13274: PUSH
13275: LD_INT 3
13277: ARRAY
13278: GREATEREQUAL
13279: AND
13280: ST_TO_ADDR
// end ;
13281: LD_VAR 0 3
13285: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13286: LD_INT 0
13288: PPUSH
13289: PPUSH
13290: PPUSH
13291: PPUSH
// pom := GetBase ( building ) ;
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_VAR 0 1
13301: PPUSH
13302: CALL_OW 274
13306: ST_TO_ADDR
// if not pom then
13307: LD_VAR 0 3
13311: NOT
13312: IFFALSE 13316
// exit ;
13314: GO 13486
// btype := GetBType ( building ) ;
13316: LD_ADDR_VAR 0 5
13320: PUSH
13321: LD_VAR 0 1
13325: PPUSH
13326: CALL_OW 266
13330: ST_TO_ADDR
// if btype = b_armoury then
13331: LD_VAR 0 5
13335: PUSH
13336: LD_INT 4
13338: EQUAL
13339: IFFALSE 13349
// btype := b_barracks ;
13341: LD_ADDR_VAR 0 5
13345: PUSH
13346: LD_INT 5
13348: ST_TO_ADDR
// if btype = b_depot then
13349: LD_VAR 0 5
13353: PUSH
13354: LD_INT 0
13356: EQUAL
13357: IFFALSE 13367
// btype := b_warehouse ;
13359: LD_ADDR_VAR 0 5
13363: PUSH
13364: LD_INT 1
13366: ST_TO_ADDR
// if btype = b_workshop then
13367: LD_VAR 0 5
13371: PUSH
13372: LD_INT 2
13374: EQUAL
13375: IFFALSE 13385
// btype := b_factory ;
13377: LD_ADDR_VAR 0 5
13381: PUSH
13382: LD_INT 3
13384: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13385: LD_ADDR_VAR 0 4
13389: PUSH
13390: LD_VAR 0 5
13394: PPUSH
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 248
13404: PPUSH
13405: CALL_OW 450
13409: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13410: LD_ADDR_VAR 0 2
13414: PUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 275
13427: PUSH
13428: LD_VAR 0 4
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: GREATEREQUAL
13437: PUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 2
13445: PPUSH
13446: CALL_OW 275
13450: PUSH
13451: LD_VAR 0 4
13455: PUSH
13456: LD_INT 2
13458: ARRAY
13459: GREATEREQUAL
13460: AND
13461: PUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_INT 3
13469: PPUSH
13470: CALL_OW 275
13474: PUSH
13475: LD_VAR 0 4
13479: PUSH
13480: LD_INT 3
13482: ARRAY
13483: GREATEREQUAL
13484: AND
13485: ST_TO_ADDR
// end ;
13486: LD_VAR 0 2
13490: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13491: LD_INT 0
13493: PPUSH
13494: PPUSH
13495: PPUSH
// pom := GetBase ( building ) ;
13496: LD_ADDR_VAR 0 4
13500: PUSH
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 274
13510: ST_TO_ADDR
// if not pom then
13511: LD_VAR 0 4
13515: NOT
13516: IFFALSE 13520
// exit ;
13518: GO 13621
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13520: LD_ADDR_VAR 0 5
13524: PUSH
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_VAR 0 1
13534: PPUSH
13535: CALL_OW 248
13539: PPUSH
13540: CALL_OW 450
13544: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: LD_VAR 0 4
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 275
13562: PUSH
13563: LD_VAR 0 5
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: GREATEREQUAL
13572: PUSH
13573: LD_VAR 0 4
13577: PPUSH
13578: LD_INT 2
13580: PPUSH
13581: CALL_OW 275
13585: PUSH
13586: LD_VAR 0 5
13590: PUSH
13591: LD_INT 2
13593: ARRAY
13594: GREATEREQUAL
13595: AND
13596: PUSH
13597: LD_VAR 0 4
13601: PPUSH
13602: LD_INT 3
13604: PPUSH
13605: CALL_OW 275
13609: PUSH
13610: LD_VAR 0 5
13614: PUSH
13615: LD_INT 3
13617: ARRAY
13618: GREATEREQUAL
13619: AND
13620: ST_TO_ADDR
// end ;
13621: LD_VAR 0 3
13625: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13626: LD_INT 0
13628: PPUSH
13629: PPUSH
13630: PPUSH
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
13638: PPUSH
// result := false ;
13639: LD_ADDR_VAR 0 8
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13647: LD_VAR 0 5
13651: NOT
13652: PUSH
13653: LD_VAR 0 1
13657: NOT
13658: OR
13659: PUSH
13660: LD_VAR 0 2
13664: NOT
13665: OR
13666: PUSH
13667: LD_VAR 0 3
13671: NOT
13672: OR
13673: IFFALSE 13677
// exit ;
13675: GO 14491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13677: LD_ADDR_VAR 0 14
13681: PUSH
13682: LD_VAR 0 1
13686: PPUSH
13687: LD_VAR 0 2
13691: PPUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: LD_VAR 0 4
13701: PPUSH
13702: LD_VAR 0 5
13706: PUSH
13707: LD_INT 1
13709: ARRAY
13710: PPUSH
13711: CALL_OW 248
13715: PPUSH
13716: LD_INT 0
13718: PPUSH
13719: CALL 15744 0 6
13723: ST_TO_ADDR
// if not hexes then
13724: LD_VAR 0 14
13728: NOT
13729: IFFALSE 13733
// exit ;
13731: GO 14491
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13733: LD_ADDR_VAR 0 17
13737: PUSH
13738: LD_VAR 0 5
13742: PPUSH
13743: LD_INT 22
13745: PUSH
13746: LD_VAR 0 13
13750: PPUSH
13751: CALL_OW 255
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
// for i = 1 to hexes do
13797: LD_ADDR_VAR 0 9
13801: PUSH
13802: DOUBLE
13803: LD_INT 1
13805: DEC
13806: ST_TO_ADDR
13807: LD_VAR 0 14
13811: PUSH
13812: FOR_TO
13813: IFFALSE 14489
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13815: LD_ADDR_VAR 0 13
13819: PUSH
13820: LD_VAR 0 14
13824: PUSH
13825: LD_VAR 0 9
13829: ARRAY
13830: PUSH
13831: LD_INT 1
13833: ARRAY
13834: PPUSH
13835: LD_VAR 0 14
13839: PUSH
13840: LD_VAR 0 9
13844: ARRAY
13845: PUSH
13846: LD_INT 2
13848: ARRAY
13849: PPUSH
13850: CALL_OW 428
13854: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13855: LD_VAR 0 14
13859: PUSH
13860: LD_VAR 0 9
13864: ARRAY
13865: PUSH
13866: LD_INT 1
13868: ARRAY
13869: PPUSH
13870: LD_VAR 0 14
13874: PUSH
13875: LD_VAR 0 9
13879: ARRAY
13880: PUSH
13881: LD_INT 2
13883: ARRAY
13884: PPUSH
13885: CALL_OW 351
13889: PUSH
13890: LD_VAR 0 14
13894: PUSH
13895: LD_VAR 0 9
13899: ARRAY
13900: PUSH
13901: LD_INT 1
13903: ARRAY
13904: PPUSH
13905: LD_VAR 0 14
13909: PUSH
13910: LD_VAR 0 9
13914: ARRAY
13915: PUSH
13916: LD_INT 2
13918: ARRAY
13919: PPUSH
13920: CALL_OW 488
13924: NOT
13925: OR
13926: PUSH
13927: LD_VAR 0 13
13931: PPUSH
13932: CALL_OW 247
13936: PUSH
13937: LD_INT 3
13939: EQUAL
13940: OR
13941: IFFALSE 13947
// exit ;
13943: POP
13944: POP
13945: GO 14491
// if not tmp then
13947: LD_VAR 0 13
13951: NOT
13952: IFFALSE 13956
// continue ;
13954: GO 13812
// result := true ;
13956: LD_ADDR_VAR 0 8
13960: PUSH
13961: LD_INT 1
13963: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13964: LD_VAR 0 6
13968: PUSH
13969: LD_VAR 0 13
13973: PPUSH
13974: CALL_OW 247
13978: PUSH
13979: LD_INT 2
13981: EQUAL
13982: AND
13983: PUSH
13984: LD_VAR 0 13
13988: PPUSH
13989: CALL_OW 263
13993: PUSH
13994: LD_INT 1
13996: EQUAL
13997: AND
13998: IFFALSE 14162
// begin if IsDrivenBy ( tmp ) then
14000: LD_VAR 0 13
14004: PPUSH
14005: CALL_OW 311
14009: IFFALSE 14013
// continue ;
14011: GO 13812
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14013: LD_VAR 0 6
14017: PPUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 60
14023: PUSH
14024: EMPTY
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 55
14036: PUSH
14037: EMPTY
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PPUSH
14048: CALL_OW 72
14052: IFFALSE 14160
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14054: LD_ADDR_VAR 0 18
14058: PUSH
14059: LD_VAR 0 6
14063: PPUSH
14064: LD_INT 3
14066: PUSH
14067: LD_INT 60
14069: PUSH
14070: EMPTY
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: LD_INT 55
14082: PUSH
14083: EMPTY
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 72
14098: PUSH
14099: LD_INT 1
14101: ARRAY
14102: ST_TO_ADDR
// if IsInUnit ( driver ) then
14103: LD_VAR 0 18
14107: PPUSH
14108: CALL_OW 310
14112: IFFALSE 14123
// ComExit ( driver ) ;
14114: LD_VAR 0 18
14118: PPUSH
14119: CALL 39525 0 1
// AddComEnterUnit ( driver , tmp ) ;
14123: LD_VAR 0 18
14127: PPUSH
14128: LD_VAR 0 13
14132: PPUSH
14133: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14137: LD_VAR 0 18
14141: PPUSH
14142: LD_VAR 0 7
14146: PPUSH
14147: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14151: LD_VAR 0 18
14155: PPUSH
14156: CALL_OW 181
// end ; continue ;
14160: GO 13812
// end ; if not cleaners or not tmp in cleaners then
14162: LD_VAR 0 6
14166: NOT
14167: PUSH
14168: LD_VAR 0 13
14172: PUSH
14173: LD_VAR 0 6
14177: IN
14178: NOT
14179: OR
14180: IFFALSE 14487
// begin if dep then
14182: LD_VAR 0 17
14186: IFFALSE 14322
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14188: LD_ADDR_VAR 0 16
14192: PUSH
14193: LD_VAR 0 17
14197: PUSH
14198: LD_INT 1
14200: ARRAY
14201: PPUSH
14202: CALL_OW 250
14206: PPUSH
14207: LD_VAR 0 17
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: CALL_OW 254
14220: PPUSH
14221: LD_INT 5
14223: PPUSH
14224: CALL_OW 272
14228: PUSH
14229: LD_VAR 0 17
14233: PUSH
14234: LD_INT 1
14236: ARRAY
14237: PPUSH
14238: CALL_OW 251
14242: PPUSH
14243: LD_VAR 0 17
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: PPUSH
14252: CALL_OW 254
14256: PPUSH
14257: LD_INT 5
14259: PPUSH
14260: CALL_OW 273
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14269: LD_VAR 0 16
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: LD_VAR 0 16
14282: PUSH
14283: LD_INT 2
14285: ARRAY
14286: PPUSH
14287: CALL_OW 488
14291: IFFALSE 14322
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14293: LD_VAR 0 13
14297: PPUSH
14298: LD_VAR 0 16
14302: PUSH
14303: LD_INT 1
14305: ARRAY
14306: PPUSH
14307: LD_VAR 0 16
14311: PUSH
14312: LD_INT 2
14314: ARRAY
14315: PPUSH
14316: CALL_OW 111
// continue ;
14320: GO 13812
// end ; end ; r := GetDir ( tmp ) ;
14322: LD_ADDR_VAR 0 15
14326: PUSH
14327: LD_VAR 0 13
14331: PPUSH
14332: CALL_OW 254
14336: ST_TO_ADDR
// if r = 5 then
14337: LD_VAR 0 15
14341: PUSH
14342: LD_INT 5
14344: EQUAL
14345: IFFALSE 14355
// r := 0 ;
14347: LD_ADDR_VAR 0 15
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// for j = r to 5 do
14355: LD_ADDR_VAR 0 10
14359: PUSH
14360: DOUBLE
14361: LD_VAR 0 15
14365: DEC
14366: ST_TO_ADDR
14367: LD_INT 5
14369: PUSH
14370: FOR_TO
14371: IFFALSE 14485
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14373: LD_ADDR_VAR 0 11
14377: PUSH
14378: LD_VAR 0 13
14382: PPUSH
14383: CALL_OW 250
14387: PPUSH
14388: LD_VAR 0 10
14392: PPUSH
14393: LD_INT 2
14395: PPUSH
14396: CALL_OW 272
14400: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14401: LD_ADDR_VAR 0 12
14405: PUSH
14406: LD_VAR 0 13
14410: PPUSH
14411: CALL_OW 251
14415: PPUSH
14416: LD_VAR 0 10
14420: PPUSH
14421: LD_INT 2
14423: PPUSH
14424: CALL_OW 273
14428: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14429: LD_VAR 0 11
14433: PPUSH
14434: LD_VAR 0 12
14438: PPUSH
14439: CALL_OW 488
14443: PUSH
14444: LD_VAR 0 11
14448: PPUSH
14449: LD_VAR 0 12
14453: PPUSH
14454: CALL_OW 428
14458: NOT
14459: AND
14460: IFFALSE 14483
// begin ComMoveXY ( tmp , _x , _y ) ;
14462: LD_VAR 0 13
14466: PPUSH
14467: LD_VAR 0 11
14471: PPUSH
14472: LD_VAR 0 12
14476: PPUSH
14477: CALL_OW 111
// break ;
14481: GO 14485
// end ; end ;
14483: GO 14370
14485: POP
14486: POP
// end ; end ;
14487: GO 13812
14489: POP
14490: POP
// end ;
14491: LD_VAR 0 8
14495: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14496: LD_INT 0
14498: PPUSH
// result := true ;
14499: LD_ADDR_VAR 0 3
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14507: LD_VAR 0 2
14511: PUSH
14512: LD_INT 24
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14526
14518: LD_INT 33
14520: DOUBLE
14521: EQUAL
14522: IFTRUE 14526
14524: GO 14551
14526: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 32
14534: PPUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 321
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: ST_TO_ADDR
14549: GO 14867
14551: LD_INT 20
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14584
14559: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14560: LD_ADDR_VAR 0 3
14564: PUSH
14565: LD_INT 6
14567: PPUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 321
14577: PUSH
14578: LD_INT 2
14580: EQUAL
14581: ST_TO_ADDR
14582: GO 14867
14584: LD_INT 22
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14598
14590: LD_INT 36
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14623
14598: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: LD_INT 15
14606: PPUSH
14607: LD_VAR 0 1
14611: PPUSH
14612: CALL_OW 321
14616: PUSH
14617: LD_INT 2
14619: EQUAL
14620: ST_TO_ADDR
14621: GO 14867
14623: LD_INT 30
14625: DOUBLE
14626: EQUAL
14627: IFTRUE 14631
14629: GO 14656
14631: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14632: LD_ADDR_VAR 0 3
14636: PUSH
14637: LD_INT 20
14639: PPUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 321
14649: PUSH
14650: LD_INT 2
14652: EQUAL
14653: ST_TO_ADDR
14654: GO 14867
14656: LD_INT 28
14658: DOUBLE
14659: EQUAL
14660: IFTRUE 14670
14662: LD_INT 21
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14670
14668: GO 14695
14670: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14671: LD_ADDR_VAR 0 3
14675: PUSH
14676: LD_INT 21
14678: PPUSH
14679: LD_VAR 0 1
14683: PPUSH
14684: CALL_OW 321
14688: PUSH
14689: LD_INT 2
14691: EQUAL
14692: ST_TO_ADDR
14693: GO 14867
14695: LD_INT 16
14697: DOUBLE
14698: EQUAL
14699: IFTRUE 14703
14701: GO 14728
14703: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14704: LD_ADDR_VAR 0 3
14708: PUSH
14709: LD_INT 84
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 321
14721: PUSH
14722: LD_INT 2
14724: EQUAL
14725: ST_TO_ADDR
14726: GO 14867
14728: LD_INT 19
14730: DOUBLE
14731: EQUAL
14732: IFTRUE 14742
14734: LD_INT 23
14736: DOUBLE
14737: EQUAL
14738: IFTRUE 14742
14740: GO 14767
14742: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_INT 83
14750: PPUSH
14751: LD_VAR 0 1
14755: PPUSH
14756: CALL_OW 321
14760: PUSH
14761: LD_INT 2
14763: EQUAL
14764: ST_TO_ADDR
14765: GO 14867
14767: LD_INT 17
14769: DOUBLE
14770: EQUAL
14771: IFTRUE 14775
14773: GO 14800
14775: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14776: LD_ADDR_VAR 0 3
14780: PUSH
14781: LD_INT 39
14783: PPUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 321
14793: PUSH
14794: LD_INT 2
14796: EQUAL
14797: ST_TO_ADDR
14798: GO 14867
14800: LD_INT 18
14802: DOUBLE
14803: EQUAL
14804: IFTRUE 14808
14806: GO 14833
14808: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14809: LD_ADDR_VAR 0 3
14813: PUSH
14814: LD_INT 40
14816: PPUSH
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 321
14826: PUSH
14827: LD_INT 2
14829: EQUAL
14830: ST_TO_ADDR
14831: GO 14867
14833: LD_INT 27
14835: DOUBLE
14836: EQUAL
14837: IFTRUE 14841
14839: GO 14866
14841: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14842: LD_ADDR_VAR 0 3
14846: PUSH
14847: LD_INT 35
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 321
14859: PUSH
14860: LD_INT 2
14862: EQUAL
14863: ST_TO_ADDR
14864: GO 14867
14866: POP
// end ;
14867: LD_VAR 0 3
14871: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
14877: PPUSH
14878: PPUSH
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
14883: PPUSH
14884: PPUSH
// result := false ;
14885: LD_ADDR_VAR 0 6
14889: PUSH
14890: LD_INT 0
14892: ST_TO_ADDR
// if btype = b_depot then
14893: LD_VAR 0 2
14897: PUSH
14898: LD_INT 0
14900: EQUAL
14901: IFFALSE 14913
// begin result := true ;
14903: LD_ADDR_VAR 0 6
14907: PUSH
14908: LD_INT 1
14910: ST_TO_ADDR
// exit ;
14911: GO 15739
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14913: LD_VAR 0 1
14917: NOT
14918: PUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 266
14928: PUSH
14929: LD_INT 0
14931: PUSH
14932: LD_INT 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: IN
14939: NOT
14940: OR
14941: PUSH
14942: LD_VAR 0 2
14946: NOT
14947: OR
14948: PUSH
14949: LD_VAR 0 5
14953: PUSH
14954: LD_INT 0
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: LD_INT 2
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: LD_INT 4
14968: PUSH
14969: LD_INT 5
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: IN
14980: NOT
14981: OR
14982: PUSH
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_VAR 0 4
14992: PPUSH
14993: CALL_OW 488
14997: NOT
14998: OR
14999: IFFALSE 15003
// exit ;
15001: GO 15739
// side := GetSide ( depot ) ;
15003: LD_ADDR_VAR 0 9
15007: PUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 255
15017: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15018: LD_VAR 0 9
15022: PPUSH
15023: LD_VAR 0 2
15027: PPUSH
15028: CALL 14496 0 2
15032: NOT
15033: IFFALSE 15037
// exit ;
15035: GO 15739
// pom := GetBase ( depot ) ;
15037: LD_ADDR_VAR 0 10
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 274
15051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15052: LD_ADDR_VAR 0 11
15056: PUSH
15057: LD_VAR 0 2
15061: PPUSH
15062: LD_VAR 0 1
15066: PPUSH
15067: CALL_OW 248
15071: PPUSH
15072: CALL_OW 450
15076: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15077: LD_VAR 0 10
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 275
15089: PUSH
15090: LD_VAR 0 11
15094: PUSH
15095: LD_INT 1
15097: ARRAY
15098: GREATEREQUAL
15099: PUSH
15100: LD_VAR 0 10
15104: PPUSH
15105: LD_INT 2
15107: PPUSH
15108: CALL_OW 275
15112: PUSH
15113: LD_VAR 0 11
15117: PUSH
15118: LD_INT 2
15120: ARRAY
15121: GREATEREQUAL
15122: AND
15123: PUSH
15124: LD_VAR 0 10
15128: PPUSH
15129: LD_INT 3
15131: PPUSH
15132: CALL_OW 275
15136: PUSH
15137: LD_VAR 0 11
15141: PUSH
15142: LD_INT 3
15144: ARRAY
15145: GREATEREQUAL
15146: AND
15147: NOT
15148: IFFALSE 15152
// exit ;
15150: GO 15739
// if GetBType ( depot ) = b_depot then
15152: LD_VAR 0 1
15156: PPUSH
15157: CALL_OW 266
15161: PUSH
15162: LD_INT 0
15164: EQUAL
15165: IFFALSE 15177
// dist := 28 else
15167: LD_ADDR_VAR 0 14
15171: PUSH
15172: LD_INT 28
15174: ST_TO_ADDR
15175: GO 15185
// dist := 36 ;
15177: LD_ADDR_VAR 0 14
15181: PUSH
15182: LD_INT 36
15184: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15185: LD_VAR 0 1
15189: PPUSH
15190: LD_VAR 0 3
15194: PPUSH
15195: LD_VAR 0 4
15199: PPUSH
15200: CALL_OW 297
15204: PUSH
15205: LD_VAR 0 14
15209: GREATER
15210: IFFALSE 15214
// exit ;
15212: GO 15739
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15214: LD_ADDR_VAR 0 12
15218: PUSH
15219: LD_VAR 0 2
15223: PPUSH
15224: LD_VAR 0 3
15228: PPUSH
15229: LD_VAR 0 4
15233: PPUSH
15234: LD_VAR 0 5
15238: PPUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 248
15248: PPUSH
15249: LD_INT 0
15251: PPUSH
15252: CALL 15744 0 6
15256: ST_TO_ADDR
// if not hexes then
15257: LD_VAR 0 12
15261: NOT
15262: IFFALSE 15266
// exit ;
15264: GO 15739
// hex := GetHexInfo ( x , y ) ;
15266: LD_ADDR_VAR 0 15
15270: PUSH
15271: LD_VAR 0 3
15275: PPUSH
15276: LD_VAR 0 4
15280: PPUSH
15281: CALL_OW 546
15285: ST_TO_ADDR
// if hex [ 1 ] then
15286: LD_VAR 0 15
15290: PUSH
15291: LD_INT 1
15293: ARRAY
15294: IFFALSE 15298
// exit ;
15296: GO 15739
// height := hex [ 2 ] ;
15298: LD_ADDR_VAR 0 13
15302: PUSH
15303: LD_VAR 0 15
15307: PUSH
15308: LD_INT 2
15310: ARRAY
15311: ST_TO_ADDR
// for i = 1 to hexes do
15312: LD_ADDR_VAR 0 7
15316: PUSH
15317: DOUBLE
15318: LD_INT 1
15320: DEC
15321: ST_TO_ADDR
15322: LD_VAR 0 12
15326: PUSH
15327: FOR_TO
15328: IFFALSE 15658
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15330: LD_VAR 0 12
15334: PUSH
15335: LD_VAR 0 7
15339: ARRAY
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PPUSH
15345: LD_VAR 0 12
15349: PUSH
15350: LD_VAR 0 7
15354: ARRAY
15355: PUSH
15356: LD_INT 2
15358: ARRAY
15359: PPUSH
15360: CALL_OW 488
15364: NOT
15365: PUSH
15366: LD_VAR 0 12
15370: PUSH
15371: LD_VAR 0 7
15375: ARRAY
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: LD_VAR 0 12
15385: PUSH
15386: LD_VAR 0 7
15390: ARRAY
15391: PUSH
15392: LD_INT 2
15394: ARRAY
15395: PPUSH
15396: CALL_OW 428
15400: PUSH
15401: LD_INT 0
15403: GREATER
15404: OR
15405: PUSH
15406: LD_VAR 0 12
15410: PUSH
15411: LD_VAR 0 7
15415: ARRAY
15416: PUSH
15417: LD_INT 1
15419: ARRAY
15420: PPUSH
15421: LD_VAR 0 12
15425: PUSH
15426: LD_VAR 0 7
15430: ARRAY
15431: PUSH
15432: LD_INT 2
15434: ARRAY
15435: PPUSH
15436: CALL_OW 351
15440: OR
15441: IFFALSE 15447
// exit ;
15443: POP
15444: POP
15445: GO 15739
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15447: LD_ADDR_VAR 0 8
15451: PUSH
15452: LD_VAR 0 12
15456: PUSH
15457: LD_VAR 0 7
15461: ARRAY
15462: PUSH
15463: LD_INT 1
15465: ARRAY
15466: PPUSH
15467: LD_VAR 0 12
15471: PUSH
15472: LD_VAR 0 7
15476: ARRAY
15477: PUSH
15478: LD_INT 2
15480: ARRAY
15481: PPUSH
15482: CALL_OW 546
15486: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15487: LD_VAR 0 8
15491: PUSH
15492: LD_INT 1
15494: ARRAY
15495: PUSH
15496: LD_VAR 0 8
15500: PUSH
15501: LD_INT 2
15503: ARRAY
15504: PUSH
15505: LD_VAR 0 13
15509: PUSH
15510: LD_INT 2
15512: PLUS
15513: GREATER
15514: OR
15515: PUSH
15516: LD_VAR 0 8
15520: PUSH
15521: LD_INT 2
15523: ARRAY
15524: PUSH
15525: LD_VAR 0 13
15529: PUSH
15530: LD_INT 2
15532: MINUS
15533: LESS
15534: OR
15535: PUSH
15536: LD_VAR 0 8
15540: PUSH
15541: LD_INT 3
15543: ARRAY
15544: PUSH
15545: LD_INT 0
15547: PUSH
15548: LD_INT 8
15550: PUSH
15551: LD_INT 9
15553: PUSH
15554: LD_INT 10
15556: PUSH
15557: LD_INT 11
15559: PUSH
15560: LD_INT 12
15562: PUSH
15563: LD_INT 13
15565: PUSH
15566: LD_INT 16
15568: PUSH
15569: LD_INT 17
15571: PUSH
15572: LD_INT 18
15574: PUSH
15575: LD_INT 19
15577: PUSH
15578: LD_INT 20
15580: PUSH
15581: LD_INT 21
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: IN
15599: NOT
15600: OR
15601: PUSH
15602: LD_VAR 0 8
15606: PUSH
15607: LD_INT 5
15609: ARRAY
15610: NOT
15611: OR
15612: PUSH
15613: LD_VAR 0 8
15617: PUSH
15618: LD_INT 6
15620: ARRAY
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: LD_INT 2
15627: PUSH
15628: LD_INT 7
15630: PUSH
15631: LD_INT 9
15633: PUSH
15634: LD_INT 10
15636: PUSH
15637: LD_INT 11
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: IN
15648: NOT
15649: OR
15650: IFFALSE 15656
// exit ;
15652: POP
15653: POP
15654: GO 15739
// end ;
15656: GO 15327
15658: POP
15659: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15660: LD_VAR 0 9
15664: PPUSH
15665: LD_VAR 0 3
15669: PPUSH
15670: LD_VAR 0 4
15674: PPUSH
15675: LD_INT 20
15677: PPUSH
15678: CALL 7662 0 4
15682: PUSH
15683: LD_INT 4
15685: ARRAY
15686: IFFALSE 15690
// exit ;
15688: GO 15739
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15690: LD_VAR 0 2
15694: PUSH
15695: LD_INT 29
15697: PUSH
15698: LD_INT 30
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: IN
15705: PUSH
15706: LD_VAR 0 3
15710: PPUSH
15711: LD_VAR 0 4
15715: PPUSH
15716: LD_VAR 0 9
15720: PPUSH
15721: CALL_OW 440
15725: NOT
15726: AND
15727: IFFALSE 15731
// exit ;
15729: GO 15739
// result := true ;
15731: LD_ADDR_VAR 0 6
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// end ;
15739: LD_VAR 0 6
15743: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15744: LD_INT 0
15746: PPUSH
15747: PPUSH
15748: PPUSH
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
15759: PPUSH
15760: PPUSH
15761: PPUSH
15762: PPUSH
15763: PPUSH
15764: PPUSH
15765: PPUSH
15766: PPUSH
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
15772: PPUSH
15773: PPUSH
15774: PPUSH
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
15784: PPUSH
15785: PPUSH
15786: PPUSH
15787: PPUSH
15788: PPUSH
15789: PPUSH
15790: PPUSH
15791: PPUSH
15792: PPUSH
15793: PPUSH
15794: PPUSH
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
15800: PPUSH
15801: PPUSH
15802: PPUSH
15803: PPUSH
// result = [ ] ;
15804: LD_ADDR_VAR 0 7
15808: PUSH
15809: EMPTY
15810: ST_TO_ADDR
// temp_list = [ ] ;
15811: LD_ADDR_VAR 0 9
15815: PUSH
15816: EMPTY
15817: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15818: LD_VAR 0 4
15822: PUSH
15823: LD_INT 0
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: LD_INT 3
15834: PUSH
15835: LD_INT 4
15837: PUSH
15838: LD_INT 5
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: IN
15849: NOT
15850: PUSH
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 0
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: IN
15866: PUSH
15867: LD_VAR 0 5
15871: PUSH
15872: LD_INT 1
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 3
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: IN
15886: NOT
15887: AND
15888: OR
15889: IFFALSE 15893
// exit ;
15891: GO 34284
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15893: LD_VAR 0 1
15897: PUSH
15898: LD_INT 6
15900: PUSH
15901: LD_INT 7
15903: PUSH
15904: LD_INT 8
15906: PUSH
15907: LD_INT 13
15909: PUSH
15910: LD_INT 12
15912: PUSH
15913: LD_INT 15
15915: PUSH
15916: LD_INT 11
15918: PUSH
15919: LD_INT 14
15921: PUSH
15922: LD_INT 10
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: IN
15936: IFFALSE 15946
// btype = b_lab ;
15938: LD_ADDR_VAR 0 1
15942: PUSH
15943: LD_INT 6
15945: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15946: LD_VAR 0 6
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: LD_INT 1
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: IN
15965: NOT
15966: PUSH
15967: LD_VAR 0 1
15971: PUSH
15972: LD_INT 0
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: LD_INT 3
15983: PUSH
15984: LD_INT 6
15986: PUSH
15987: LD_INT 36
15989: PUSH
15990: LD_INT 4
15992: PUSH
15993: LD_INT 5
15995: PUSH
15996: LD_INT 31
15998: PUSH
15999: LD_INT 32
16001: PUSH
16002: LD_INT 33
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: IN
16018: NOT
16019: PUSH
16020: LD_VAR 0 6
16024: PUSH
16025: LD_INT 1
16027: EQUAL
16028: AND
16029: OR
16030: PUSH
16031: LD_VAR 0 1
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: IN
16046: NOT
16047: PUSH
16048: LD_VAR 0 6
16052: PUSH
16053: LD_INT 2
16055: EQUAL
16056: AND
16057: OR
16058: IFFALSE 16068
// mode = 0 ;
16060: LD_ADDR_VAR 0 6
16064: PUSH
16065: LD_INT 0
16067: ST_TO_ADDR
// case mode of 0 :
16068: LD_VAR 0 6
16072: PUSH
16073: LD_INT 0
16075: DOUBLE
16076: EQUAL
16077: IFTRUE 16081
16079: GO 27534
16081: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16082: LD_ADDR_VAR 0 11
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: LD_INT 0
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 0
16099: PUSH
16100: LD_INT 1
16102: NEG
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 1
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 0
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 1
16140: NEG
16141: PUSH
16142: LD_INT 0
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 1
16151: NEG
16152: PUSH
16153: LD_INT 1
16155: NEG
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 1
16163: NEG
16164: PUSH
16165: LD_INT 2
16167: NEG
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 0
16175: PUSH
16176: LD_INT 2
16178: NEG
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: LD_INT 1
16189: NEG
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: PUSH
16198: LD_INT 2
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 0
16207: PUSH
16208: LD_INT 2
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 1
16217: NEG
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 1
16228: PUSH
16229: LD_INT 3
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: LD_INT 3
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16275: LD_ADDR_VAR 0 12
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: LD_INT 0
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: LD_INT 1
16295: NEG
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: LD_INT 0
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 1
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 0
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 1
16333: NEG
16334: PUSH
16335: LD_INT 0
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 1
16344: NEG
16345: PUSH
16346: LD_INT 1
16348: NEG
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 1
16356: PUSH
16357: LD_INT 1
16359: NEG
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 2
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 2
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 1
16387: NEG
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 2
16398: NEG
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 2
16409: NEG
16410: PUSH
16411: LD_INT 1
16413: NEG
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 2
16421: NEG
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 3
16432: NEG
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 3
16443: NEG
16444: PUSH
16445: LD_INT 1
16447: NEG
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16471: LD_ADDR_VAR 0 13
16475: PUSH
16476: LD_INT 0
16478: PUSH
16479: LD_INT 0
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: LD_INT 1
16491: NEG
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: LD_INT 0
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 0
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 1
16529: NEG
16530: PUSH
16531: LD_INT 0
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 1
16540: NEG
16541: PUSH
16542: LD_INT 1
16544: NEG
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 1
16552: NEG
16553: PUSH
16554: LD_INT 2
16556: NEG
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 2
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 2
16574: PUSH
16575: LD_INT 2
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 2
16594: NEG
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 2
16606: NEG
16607: PUSH
16608: LD_INT 2
16610: NEG
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 2
16618: NEG
16619: PUSH
16620: LD_INT 3
16622: NEG
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 3
16630: NEG
16631: PUSH
16632: LD_INT 2
16634: NEG
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 3
16642: NEG
16643: PUSH
16644: LD_INT 3
16646: NEG
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16670: LD_ADDR_VAR 0 14
16674: PUSH
16675: LD_INT 0
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 0
16687: PUSH
16688: LD_INT 1
16690: NEG
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: LD_INT 0
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 1
16708: PUSH
16709: LD_INT 1
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 0
16718: PUSH
16719: LD_INT 1
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 1
16728: NEG
16729: PUSH
16730: LD_INT 0
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: NEG
16740: PUSH
16741: LD_INT 1
16743: NEG
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 1
16751: NEG
16752: PUSH
16753: LD_INT 2
16755: NEG
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 0
16763: PUSH
16764: LD_INT 2
16766: NEG
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: LD_INT 1
16777: NEG
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 0
16795: PUSH
16796: LD_INT 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: NEG
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 1
16816: NEG
16817: PUSH
16818: LD_INT 3
16820: NEG
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 0
16828: PUSH
16829: LD_INT 3
16831: NEG
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 1
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16866: LD_ADDR_VAR 0 15
16870: PUSH
16871: LD_INT 0
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 1
16924: NEG
16925: PUSH
16926: LD_INT 0
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 1
16935: NEG
16936: PUSH
16937: LD_INT 1
16939: NEG
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: LD_INT 1
16950: NEG
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: LD_INT 0
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 2
16989: NEG
16990: PUSH
16991: LD_INT 0
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 2
17000: NEG
17001: PUSH
17002: LD_INT 1
17004: NEG
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: LD_INT 1
17015: NEG
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 3
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 3
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17059: LD_ADDR_VAR 0 16
17063: PUSH
17064: LD_INT 0
17066: PUSH
17067: LD_INT 0
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 0
17076: PUSH
17077: LD_INT 1
17079: NEG
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 1
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 0
17107: PUSH
17108: LD_INT 1
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 1
17128: NEG
17129: PUSH
17130: LD_INT 1
17132: NEG
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: NEG
17141: PUSH
17142: LD_INT 2
17144: NEG
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 2
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: LD_INT 2
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: LD_INT 2
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 2
17182: NEG
17183: PUSH
17184: LD_INT 1
17186: NEG
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 2
17194: NEG
17195: PUSH
17196: LD_INT 2
17198: NEG
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: LD_INT 3
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 2
17226: PUSH
17227: LD_INT 3
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17252: LD_ADDR_VAR 0 17
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: NEG
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 1
17321: NEG
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 1
17333: NEG
17334: PUSH
17335: LD_INT 2
17337: NEG
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: LD_INT 2
17348: NEG
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: LD_INT 1
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 2
17428: NEG
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 2
17439: NEG
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: NEG
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17482: LD_ADDR_VAR 0 18
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 1
17540: NEG
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: LD_INT 2
17567: NEG
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: LD_INT 2
17578: NEG
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: NEG
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: NEG
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: NEG
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17712: LD_ADDR_VAR 0 19
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: NEG
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: NEG
17794: PUSH
17795: LD_INT 2
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 2
17808: NEG
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 2
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 2
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: NEG
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17942: LD_ADDR_VAR 0 20
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: LD_INT 0
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: NEG
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: NEG
18024: PUSH
18025: LD_INT 2
18027: NEG
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: LD_INT 2
18038: NEG
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 2
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: NEG
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18172: LD_ADDR_VAR 0 21
18176: PUSH
18177: LD_INT 0
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 1
18192: NEG
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 0
18220: PUSH
18221: LD_INT 1
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 1
18253: NEG
18254: PUSH
18255: LD_INT 2
18257: NEG
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 2
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: LD_INT 0
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 2
18359: NEG
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: NEG
18372: PUSH
18373: LD_INT 2
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18402: LD_ADDR_VAR 0 22
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: NEG
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: NEG
18484: PUSH
18485: LD_INT 2
18487: NEG
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: LD_INT 2
18498: NEG
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 1
18567: NEG
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 2
18578: NEG
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 2
18589: NEG
18590: PUSH
18591: LD_INT 1
18593: NEG
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 2
18601: NEG
18602: PUSH
18603: LD_INT 2
18605: NEG
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18632: LD_ADDR_VAR 0 23
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 0
18725: PUSH
18726: LD_INT 2
18728: NEG
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 2
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 2
18808: NEG
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 2
18819: NEG
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: NEG
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 2
18843: NEG
18844: PUSH
18845: LD_INT 3
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: LD_INT 3
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 2
18870: NEG
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18912: LD_ADDR_VAR 0 24
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 2
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 2
19088: NEG
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: NEG
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 2
19111: NEG
19112: PUSH
19113: LD_INT 2
19115: NEG
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: LD_INT 2
19126: NEG
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19188: LD_ADDR_VAR 0 25
19192: PUSH
19193: LD_INT 0
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: LD_INT 1
19261: NEG
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 1
19269: NEG
19270: PUSH
19271: LD_INT 2
19273: NEG
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: LD_INT 1
19295: NEG
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 2
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: LD_INT 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 2
19364: NEG
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: NEG
19388: PUSH
19389: LD_INT 2
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 3
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 3
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 3
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 3
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19462: LD_ADDR_VAR 0 26
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 2
19547: NEG
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 1
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 2
19638: NEG
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: NEG
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: LD_INT 3
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: NEG
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: NEG
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19738: LD_ADDR_VAR 0 27
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: LD_INT 0
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: LD_INT 1
19811: NEG
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 1
19819: NEG
19820: PUSH
19821: LD_INT 2
19823: NEG
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: LD_INT 2
19834: NEG
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 2
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: LD_INT 2
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: NEG
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 2
19914: NEG
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: LD_INT 2
19941: NEG
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: NEG
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 3
19971: NEG
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 3
19983: NEG
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20018: LD_ADDR_VAR 0 28
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: LD_INT 0
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: LD_INT 2
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 1
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: NEG
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: NEG
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 3
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: LD_INT 3
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 3
20253: NEG
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 3
20265: NEG
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20300: LD_ADDR_VAR 0 29
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: LD_INT 2
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: LD_INT 3
20494: NEG
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 3
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: LD_INT 3
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: NEG
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 3
20544: NEG
20545: PUSH
20546: LD_INT 2
20548: NEG
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20579: LD_ADDR_VAR 0 30
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: LD_INT 2
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 0
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 2
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 2
20756: NEG
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: LD_INT 3
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 3
20791: PUSH
20792: LD_INT 2
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 2
20811: NEG
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 3
20822: NEG
20823: PUSH
20824: LD_INT 1
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20857: LD_ADDR_VAR 0 31
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: LD_INT 2
20942: NEG
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 2
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 2
21022: NEG
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 2
21034: NEG
21035: PUSH
21036: LD_INT 2
21038: NEG
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: LD_INT 3
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 2
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 3
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 1
21079: PUSH
21080: LD_INT 3
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 3
21100: NEG
21101: PUSH
21102: LD_INT 2
21104: NEG
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21135: LD_ADDR_VAR 0 32
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: LD_INT 1
21155: NEG
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 0
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 2
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: NEG
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: NEG
21325: PUSH
21326: LD_INT 3
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 3
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: LD_INT 3
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: NEG
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 3
21378: NEG
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21413: LD_ADDR_VAR 0 33
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: LD_INT 1
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: LD_INT 0
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 1
21537: PUSH
21538: LD_INT 2
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: LD_INT 1
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 2
21568: NEG
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: LD_INT 1
21583: NEG
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 2
21591: NEG
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: LD_INT 3
21607: NEG
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 2
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 3
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 3
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: NEG
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 3
21657: NEG
21658: PUSH
21659: LD_INT 2
21661: NEG
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21692: LD_ADDR_VAR 0 34
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: LD_INT 1
21712: NEG
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 1
21750: NEG
21751: PUSH
21752: LD_INT 0
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: LD_INT 1
21765: NEG
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: LD_INT 2
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 2
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 2
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: LD_INT 2
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 3
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: LD_INT 3
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 2
21926: NEG
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 3
21937: NEG
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21972: LD_ADDR_VAR 0 35
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: NEG
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 2
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 2
22063: NEG
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22084: LD_ADDR_VAR 0 36
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: PUSH
22113: LD_INT 0
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: LD_INT 0
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: NEG
22166: PUSH
22167: LD_INT 2
22169: NEG
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22196: LD_ADDR_VAR 0 37
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: NEG
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22308: LD_ADDR_VAR 0 38
22312: PUSH
22313: LD_INT 0
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 1
22377: NEG
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: LD_INT 1
22403: NEG
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22420: LD_ADDR_VAR 0 39
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 2
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22532: LD_ADDR_VAR 0 40
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 0
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22644: LD_ADDR_VAR 0 41
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 0
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 1
22788: NEG
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 2
22799: NEG
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: NEG
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: LD_INT 3
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 3
22857: PUSH
22858: LD_INT 0
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 3
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 3
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 2
22907: NEG
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 3
22918: NEG
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 3
22941: NEG
22942: PUSH
22943: LD_INT 2
22945: NEG
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 3
22953: NEG
22954: PUSH
22955: LD_INT 3
22957: NEG
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22994: LD_ADDR_VAR 0 42
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 0
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: LD_INT 2
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: LD_INT 1
23101: NEG
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 1
23149: NEG
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 2
23172: NEG
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: LD_INT 3
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 3
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 0
23208: PUSH
23209: LD_INT 3
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: LD_INT 2
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 3
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 3
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 3
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 3
23291: NEG
23292: PUSH
23293: LD_INT 2
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 3
23303: NEG
23304: PUSH
23305: LD_INT 3
23307: NEG
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23344: LD_ADDR_VAR 0 43
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: LD_INT 2
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 2
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 3
23537: NEG
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: LD_INT 3
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 3
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: LD_INT 3
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 3
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 2
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 2
23629: NEG
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 3
23640: NEG
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 3
23651: NEG
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23692: LD_ADDR_VAR 0 44
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: LD_INT 0
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: NEG
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 2
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: NEG
23871: PUSH
23872: LD_INT 2
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: LD_INT 3
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 3
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 3
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: NEG
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 3
23966: NEG
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 3
23977: NEG
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 3
23989: NEG
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 3
24001: NEG
24002: PUSH
24003: LD_INT 3
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24042: LD_ADDR_VAR 0 45
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 2
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 2
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 2
24232: NEG
24233: PUSH
24234: LD_INT 3
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 3
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 3
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 2
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 3
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 3
24288: PUSH
24289: LD_INT 3
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 3
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 3
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: LD_INT 3
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 3
24339: NEG
24340: PUSH
24341: LD_INT 2
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 3
24351: NEG
24352: PUSH
24353: LD_INT 3
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24392: LD_ADDR_VAR 0 46
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: LD_INT 2
24488: NEG
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 2
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 3
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: LD_INT 3
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 2
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 3
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 3
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: LD_INT 3
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: LD_INT 3
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 3
24688: NEG
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 3
24699: NEG
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24740: LD_ADDR_VAR 0 47
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 2
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 1
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: NEG
24868: PUSH
24869: LD_INT 2
24871: NEG
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24891: LD_ADDR_VAR 0 48
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25038: LD_ADDR_VAR 0 49
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25182: LD_ADDR_VAR 0 50
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 2
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25326: LD_ADDR_VAR 0 51
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 1
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 2
25449: NEG
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25473: LD_ADDR_VAR 0 52
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: LD_INT 2
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25624: LD_ADDR_VAR 0 53
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: LD_INT 2
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: LD_INT 2
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25854: LD_ADDR_VAR 0 54
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 2
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: LD_INT 2
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26084: LD_ADDR_VAR 0 55
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 2
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26314: LD_ADDR_VAR 0 56
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: NEG
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: LD_INT 2
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26544: LD_ADDR_VAR 0 57
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: LD_INT 2
26640: NEG
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: LD_INT 2
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26774: LD_ADDR_VAR 0 58
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: LD_INT 2
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 2
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 2
26950: NEG
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 2
26961: NEG
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: NEG
26974: PUSH
26975: LD_INT 2
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27004: LD_ADDR_VAR 0 59
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27092: LD_ADDR_VAR 0 60
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27180: LD_ADDR_VAR 0 61
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27268: LD_ADDR_VAR 0 62
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27356: LD_ADDR_VAR 0 63
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27444: LD_ADDR_VAR 0 64
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// end ; 1 :
27532: GO 33429
27534: LD_INT 1
27536: DOUBLE
27537: EQUAL
27538: IFTRUE 27542
27540: GO 30165
27542: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27543: LD_ADDR_VAR 0 11
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: LD_INT 3
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: LD_INT 3
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27587: LD_ADDR_VAR 0 12
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 3
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27628: LD_ADDR_VAR 0 13
27632: PUSH
27633: LD_INT 3
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 3
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27668: LD_ADDR_VAR 0 14
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 3
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27709: LD_ADDR_VAR 0 15
27713: PUSH
27714: LD_INT 2
27716: NEG
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 3
27727: NEG
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 3
27738: NEG
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27753: LD_ADDR_VAR 0 16
27757: PUSH
27758: LD_INT 2
27760: NEG
27761: PUSH
27762: LD_INT 3
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 3
27772: NEG
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 3
27784: NEG
27785: PUSH
27786: LD_INT 3
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27799: LD_ADDR_VAR 0 17
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: LD_INT 3
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: LD_INT 3
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27843: LD_ADDR_VAR 0 18
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27884: LD_ADDR_VAR 0 19
27888: PUSH
27889: LD_INT 3
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 3
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27924: LD_ADDR_VAR 0 20
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: LD_INT 3
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 3
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27965: LD_ADDR_VAR 0 21
27969: PUSH
27970: LD_INT 2
27972: NEG
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 3
27983: NEG
27984: PUSH
27985: LD_INT 0
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 3
27994: NEG
27995: PUSH
27996: LD_INT 1
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28009: LD_ADDR_VAR 0 22
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: LD_INT 3
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 3
28028: NEG
28029: PUSH
28030: LD_INT 2
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 3
28040: NEG
28041: PUSH
28042: LD_INT 3
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28055: LD_ADDR_VAR 0 23
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: LD_INT 3
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 4
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 3
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28099: LD_ADDR_VAR 0 24
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 4
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28140: LD_ADDR_VAR 0 25
28144: PUSH
28145: LD_INT 3
28147: PUSH
28148: LD_INT 3
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 4
28157: PUSH
28158: LD_INT 3
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: LD_INT 4
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28180: LD_ADDR_VAR 0 26
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 3
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: LD_INT 4
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28221: LD_ADDR_VAR 0 27
28225: PUSH
28226: LD_INT 3
28228: NEG
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: NEG
28240: PUSH
28241: LD_INT 1
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 4
28250: NEG
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28265: LD_ADDR_VAR 0 28
28269: PUSH
28270: LD_INT 3
28272: NEG
28273: PUSH
28274: LD_INT 3
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 3
28284: NEG
28285: PUSH
28286: LD_INT 4
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 4
28296: NEG
28297: PUSH
28298: LD_INT 3
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28311: LD_ADDR_VAR 0 29
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: LD_INT 3
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 3
28333: NEG
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 2
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: LD_INT 4
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: LD_INT 4
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 3
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 5
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: LD_INT 5
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 4
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: LD_INT 6
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 6
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 5
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28466: LD_ADDR_VAR 0 30
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 3
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 3
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 3
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 4
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 4
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 4
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 5
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 5
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 5
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 6
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 6
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28609: LD_ADDR_VAR 0 31
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 3
28626: PUSH
28627: LD_INT 3
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: LD_INT 3
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 4
28646: PUSH
28647: LD_INT 3
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 4
28656: PUSH
28657: LD_INT 4
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 3
28666: PUSH
28667: LD_INT 4
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 5
28676: PUSH
28677: LD_INT 4
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 5
28686: PUSH
28687: LD_INT 5
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 4
28696: PUSH
28697: LD_INT 5
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 6
28706: PUSH
28707: LD_INT 5
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 6
28716: PUSH
28717: LD_INT 6
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 5
28726: PUSH
28727: LD_INT 6
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28748: LD_ADDR_VAR 0 32
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: LD_INT 3
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 3
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 4
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 4
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 3
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 5
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 5
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 4
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 6
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: LD_INT 6
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: LD_INT 5
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28891: LD_ADDR_VAR 0 33
28895: PUSH
28896: LD_INT 2
28898: NEG
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: NEG
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 3
28920: NEG
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 3
28932: NEG
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 4
28943: NEG
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 4
28954: NEG
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 4
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 5
28977: NEG
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 5
28988: NEG
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 5
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 6
29011: NEG
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 6
29022: NEG
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29046: LD_ADDR_VAR 0 34
29050: PUSH
29051: LD_INT 2
29053: NEG
29054: PUSH
29055: LD_INT 3
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 3
29077: NEG
29078: PUSH
29079: LD_INT 3
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 3
29089: NEG
29090: PUSH
29091: LD_INT 4
29093: NEG
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 4
29101: NEG
29102: PUSH
29103: LD_INT 3
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 4
29113: NEG
29114: PUSH
29115: LD_INT 4
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 4
29125: NEG
29126: PUSH
29127: LD_INT 5
29129: NEG
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 5
29137: NEG
29138: PUSH
29139: LD_INT 4
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 5
29149: NEG
29150: PUSH
29151: LD_INT 5
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 5
29161: NEG
29162: PUSH
29163: LD_INT 6
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 6
29173: NEG
29174: PUSH
29175: LD_INT 5
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 6
29185: NEG
29186: PUSH
29187: LD_INT 6
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29209: LD_ADDR_VAR 0 41
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: LD_INT 2
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: LD_INT 3
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29253: LD_ADDR_VAR 0 42
29257: PUSH
29258: LD_INT 2
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: LD_INT 1
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 3
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29294: LD_ADDR_VAR 0 43
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 2
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 3
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: LD_INT 3
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29334: LD_ADDR_VAR 0 44
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29375: LD_ADDR_VAR 0 45
29379: PUSH
29380: LD_INT 2
29382: NEG
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 3
29404: NEG
29405: PUSH
29406: LD_INT 1
29408: NEG
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29419: LD_ADDR_VAR 0 46
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 3
29442: NEG
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: NEG
29451: PUSH
29452: LD_INT 2
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29465: LD_ADDR_VAR 0 47
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 3
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29498: LD_ADDR_VAR 0 48
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29529: LD_ADDR_VAR 0 49
29533: PUSH
29534: LD_INT 3
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29558: LD_ADDR_VAR 0 50
29562: PUSH
29563: LD_INT 2
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 3
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29587: LD_ADDR_VAR 0 51
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29618: LD_ADDR_VAR 0 52
29622: PUSH
29623: LD_INT 3
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 3
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29651: LD_ADDR_VAR 0 53
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: LD_INT 3
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29695: LD_ADDR_VAR 0 54
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 3
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29736: LD_ADDR_VAR 0 55
29740: PUSH
29741: LD_INT 3
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 3
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29776: LD_ADDR_VAR 0 56
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: LD_INT 3
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29817: LD_ADDR_VAR 0 57
29821: PUSH
29822: LD_INT 2
29824: NEG
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 3
29835: NEG
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29861: LD_ADDR_VAR 0 58
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 3
29880: NEG
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: NEG
29893: PUSH
29894: LD_INT 3
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29907: LD_ADDR_VAR 0 59
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: LD_INT 2
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 2
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: LIST
29950: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29951: LD_ADDR_VAR 0 60
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29992: LD_ADDR_VAR 0 61
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 2
30009: PUSH
30010: LD_INT 2
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30032: LD_ADDR_VAR 0 62
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30073: LD_ADDR_VAR 0 63
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 2
30091: NEG
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30117: LD_ADDR_VAR 0 64
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 2
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// end ; 2 :
30163: GO 33429
30165: LD_INT 2
30167: DOUBLE
30168: EQUAL
30169: IFTRUE 30173
30171: GO 33428
30173: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30174: LD_ADDR_VAR 0 29
30178: PUSH
30179: LD_INT 4
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 4
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 5
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 4
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 1
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: PUSH
30254: LD_INT 2
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 5
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 4
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 4
30304: PUSH
30305: LD_INT 4
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: LD_INT 4
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 4
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: LD_INT 4
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 4
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 4
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 5
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 5
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 4
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: LD_INT 5
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: LD_INT 3
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 3
30457: NEG
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 3
30468: NEG
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 2
30480: NEG
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 4
30513: NEG
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 4
30524: NEG
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 4
30536: NEG
30537: PUSH
30538: LD_INT 2
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 2
30548: NEG
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 4
30559: NEG
30560: PUSH
30561: LD_INT 4
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 4
30571: NEG
30572: PUSH
30573: LD_INT 5
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 4
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: LD_INT 3
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 4
30607: NEG
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 5
30619: NEG
30620: PUSH
30621: LD_INT 4
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 5
30631: NEG
30632: PUSH
30633: LD_INT 5
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 3
30643: NEG
30644: PUSH
30645: LD_INT 5
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 5
30655: NEG
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30712: LD_ADDR_VAR 0 30
30716: PUSH
30717: LD_INT 4
30719: PUSH
30720: LD_INT 4
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 4
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 5
30739: PUSH
30740: LD_INT 4
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 5
30749: PUSH
30750: LD_INT 5
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 4
30759: PUSH
30760: LD_INT 5
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 3
30769: PUSH
30770: LD_INT 4
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 5
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 3
30799: PUSH
30800: LD_INT 5
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: LD_INT 4
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: LD_INT 4
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 4
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 4
30902: NEG
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 4
30913: NEG
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 3
30925: NEG
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 3
30936: NEG
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 4
30947: NEG
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 5
30958: NEG
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 5
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 5
30981: NEG
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 3
30993: NEG
30994: PUSH
30995: LD_INT 2
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: LD_INT 4
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: LD_INT 3
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: LD_INT 2
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: LD_INT 2
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 4
31064: NEG
31065: PUSH
31066: LD_INT 3
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 4
31076: NEG
31077: PUSH
31078: LD_INT 4
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 2
31088: NEG
31089: PUSH
31090: LD_INT 4
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 4
31100: NEG
31101: PUSH
31102: LD_INT 2
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: LD_INT 4
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 5
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 4
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: LD_INT 4
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: LD_INT 5
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: LD_INT 5
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31259: LD_ADDR_VAR 0 31
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 3
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 4
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 5
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 5
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 4
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: LD_INT 5
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 3
31359: NEG
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 3
31404: NEG
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 4
31415: NEG
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 4
31426: NEG
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 4
31461: NEG
31462: PUSH
31463: LD_INT 4
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 4
31473: NEG
31474: PUSH
31475: LD_INT 5
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 3
31485: NEG
31486: PUSH
31487: LD_INT 4
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: LD_INT 3
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 4
31509: NEG
31510: PUSH
31511: LD_INT 3
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 5
31521: NEG
31522: PUSH
31523: LD_INT 4
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 5
31533: NEG
31534: PUSH
31535: LD_INT 5
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 3
31545: NEG
31546: PUSH
31547: LD_INT 5
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 5
31557: NEG
31558: PUSH
31559: LD_INT 3
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 4
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: LD_INT 3
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: LD_INT 2
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: LD_INT 3
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 4
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: LD_INT 4
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 4
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 4
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 5
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 5
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 4
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 5
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31809: LD_ADDR_VAR 0 32
31813: PUSH
31814: LD_INT 4
31816: NEG
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 4
31827: NEG
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 4
31861: NEG
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 5
31872: NEG
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 5
31895: NEG
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 3
31918: NEG
31919: PUSH
31920: LD_INT 3
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: LD_INT 4
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: LD_INT 3
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 3
31966: NEG
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 4
31978: NEG
31979: PUSH
31980: LD_INT 3
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 4
31990: NEG
31991: PUSH
31992: LD_INT 4
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: NEG
32003: PUSH
32004: LD_INT 4
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 4
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 5
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 4
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: LD_INT 3
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: LD_INT 4
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 5
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 3
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: LD_INT 5
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 4
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 4
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 4
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 4
32231: PUSH
32232: LD_INT 3
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 5
32241: PUSH
32242: LD_INT 4
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 5
32251: PUSH
32252: LD_INT 5
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 5
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: LD_INT 4
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: PUSH
32282: LD_INT 3
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 5
32291: PUSH
32292: LD_INT 3
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: LD_INT 5
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32356: LD_ADDR_VAR 0 33
32360: PUSH
32361: LD_INT 4
32363: NEG
32364: PUSH
32365: LD_INT 4
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 4
32375: NEG
32376: PUSH
32377: LD_INT 5
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 3
32387: NEG
32388: PUSH
32389: LD_INT 4
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 3
32399: NEG
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 4
32411: NEG
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 5
32423: NEG
32424: PUSH
32425: LD_INT 4
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 5
32435: NEG
32436: PUSH
32437: LD_INT 5
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 3
32447: NEG
32448: PUSH
32449: LD_INT 5
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 5
32459: NEG
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 4
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: LD_INT 3
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 2
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: LD_INT 3
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: LD_INT 4
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 2
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: NEG
32562: PUSH
32563: LD_INT 4
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 4
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 5
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 5
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 4
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 5
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: LD_INT 3
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 3
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 4
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 4
32696: PUSH
32697: LD_INT 4
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 3
32706: PUSH
32707: LD_INT 4
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: LD_INT 3
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 4
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: LD_INT 4
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 4
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 5
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 5
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32894: LD_ADDR_VAR 0 34
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: LD_INT 4
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: LD_INT 5
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 4
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 3
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 3
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 4
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: LD_INT 5
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: LD_INT 5
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 4
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 4
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 3
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 4
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 4
33096: PUSH
33097: LD_INT 4
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 4
33106: PUSH
33107: LD_INT 3
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 5
33116: PUSH
33117: LD_INT 4
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 5
33126: PUSH
33127: LD_INT 5
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 4
33136: PUSH
33137: LD_INT 5
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 5
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: LD_INT 5
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: LD_INT 4
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 4
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: PUSH
33259: LD_INT 4
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 4
33279: NEG
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 4
33290: NEG
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 3
33302: NEG
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 3
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 4
33324: NEG
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 5
33335: NEG
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 5
33346: NEG
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 5
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 3
33370: NEG
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
// end ; end ;
33426: GO 33429
33428: POP
// case btype of b_depot , b_warehouse :
33429: LD_VAR 0 1
33433: PUSH
33434: LD_INT 0
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33448
33440: LD_INT 1
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33649
33448: POP
// case nation of nation_american :
33449: LD_VAR 0 5
33453: PUSH
33454: LD_INT 1
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33462
33460: GO 33518
33462: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33463: LD_ADDR_VAR 0 9
33467: PUSH
33468: LD_VAR 0 11
33472: PUSH
33473: LD_VAR 0 12
33477: PUSH
33478: LD_VAR 0 13
33482: PUSH
33483: LD_VAR 0 14
33487: PUSH
33488: LD_VAR 0 15
33492: PUSH
33493: LD_VAR 0 16
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: PUSH
33506: LD_VAR 0 4
33510: PUSH
33511: LD_INT 1
33513: PLUS
33514: ARRAY
33515: ST_TO_ADDR
33516: GO 33647
33518: LD_INT 2
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33526
33524: GO 33582
33526: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33527: LD_ADDR_VAR 0 9
33531: PUSH
33532: LD_VAR 0 17
33536: PUSH
33537: LD_VAR 0 18
33541: PUSH
33542: LD_VAR 0 19
33546: PUSH
33547: LD_VAR 0 20
33551: PUSH
33552: LD_VAR 0 21
33556: PUSH
33557: LD_VAR 0 22
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: PUSH
33570: LD_VAR 0 4
33574: PUSH
33575: LD_INT 1
33577: PLUS
33578: ARRAY
33579: ST_TO_ADDR
33580: GO 33647
33582: LD_INT 3
33584: DOUBLE
33585: EQUAL
33586: IFTRUE 33590
33588: GO 33646
33590: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33591: LD_ADDR_VAR 0 9
33595: PUSH
33596: LD_VAR 0 23
33600: PUSH
33601: LD_VAR 0 24
33605: PUSH
33606: LD_VAR 0 25
33610: PUSH
33611: LD_VAR 0 26
33615: PUSH
33616: LD_VAR 0 27
33620: PUSH
33621: LD_VAR 0 28
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: LD_VAR 0 4
33638: PUSH
33639: LD_INT 1
33641: PLUS
33642: ARRAY
33643: ST_TO_ADDR
33644: GO 33647
33646: POP
33647: GO 34202
33649: LD_INT 2
33651: DOUBLE
33652: EQUAL
33653: IFTRUE 33663
33655: LD_INT 3
33657: DOUBLE
33658: EQUAL
33659: IFTRUE 33663
33661: GO 33719
33663: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33664: LD_ADDR_VAR 0 9
33668: PUSH
33669: LD_VAR 0 29
33673: PUSH
33674: LD_VAR 0 30
33678: PUSH
33679: LD_VAR 0 31
33683: PUSH
33684: LD_VAR 0 32
33688: PUSH
33689: LD_VAR 0 33
33693: PUSH
33694: LD_VAR 0 34
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: PUSH
33707: LD_VAR 0 4
33711: PUSH
33712: LD_INT 1
33714: PLUS
33715: ARRAY
33716: ST_TO_ADDR
33717: GO 34202
33719: LD_INT 16
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33781
33725: LD_INT 17
33727: DOUBLE
33728: EQUAL
33729: IFTRUE 33781
33731: LD_INT 18
33733: DOUBLE
33734: EQUAL
33735: IFTRUE 33781
33737: LD_INT 19
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33781
33743: LD_INT 22
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33781
33749: LD_INT 20
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33781
33755: LD_INT 21
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33781
33761: LD_INT 23
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33781
33767: LD_INT 24
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33781
33773: LD_INT 25
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33781
33779: GO 33837
33781: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33782: LD_ADDR_VAR 0 9
33786: PUSH
33787: LD_VAR 0 35
33791: PUSH
33792: LD_VAR 0 36
33796: PUSH
33797: LD_VAR 0 37
33801: PUSH
33802: LD_VAR 0 38
33806: PUSH
33807: LD_VAR 0 39
33811: PUSH
33812: LD_VAR 0 40
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: PUSH
33825: LD_VAR 0 4
33829: PUSH
33830: LD_INT 1
33832: PLUS
33833: ARRAY
33834: ST_TO_ADDR
33835: GO 34202
33837: LD_INT 6
33839: DOUBLE
33840: EQUAL
33841: IFTRUE 33893
33843: LD_INT 7
33845: DOUBLE
33846: EQUAL
33847: IFTRUE 33893
33849: LD_INT 8
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33893
33855: LD_INT 13
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33893
33861: LD_INT 12
33863: DOUBLE
33864: EQUAL
33865: IFTRUE 33893
33867: LD_INT 15
33869: DOUBLE
33870: EQUAL
33871: IFTRUE 33893
33873: LD_INT 11
33875: DOUBLE
33876: EQUAL
33877: IFTRUE 33893
33879: LD_INT 14
33881: DOUBLE
33882: EQUAL
33883: IFTRUE 33893
33885: LD_INT 10
33887: DOUBLE
33888: EQUAL
33889: IFTRUE 33893
33891: GO 33949
33893: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33894: LD_ADDR_VAR 0 9
33898: PUSH
33899: LD_VAR 0 41
33903: PUSH
33904: LD_VAR 0 42
33908: PUSH
33909: LD_VAR 0 43
33913: PUSH
33914: LD_VAR 0 44
33918: PUSH
33919: LD_VAR 0 45
33923: PUSH
33924: LD_VAR 0 46
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: PUSH
33937: LD_VAR 0 4
33941: PUSH
33942: LD_INT 1
33944: PLUS
33945: ARRAY
33946: ST_TO_ADDR
33947: GO 34202
33949: LD_INT 36
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 34013
33957: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33958: LD_ADDR_VAR 0 9
33962: PUSH
33963: LD_VAR 0 47
33967: PUSH
33968: LD_VAR 0 48
33972: PUSH
33973: LD_VAR 0 49
33977: PUSH
33978: LD_VAR 0 50
33982: PUSH
33983: LD_VAR 0 51
33987: PUSH
33988: LD_VAR 0 52
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: PUSH
34001: LD_VAR 0 4
34005: PUSH
34006: LD_INT 1
34008: PLUS
34009: ARRAY
34010: ST_TO_ADDR
34011: GO 34202
34013: LD_INT 4
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34039
34019: LD_INT 5
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34039
34025: LD_INT 34
34027: DOUBLE
34028: EQUAL
34029: IFTRUE 34039
34031: LD_INT 37
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34039
34037: GO 34095
34039: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34040: LD_ADDR_VAR 0 9
34044: PUSH
34045: LD_VAR 0 53
34049: PUSH
34050: LD_VAR 0 54
34054: PUSH
34055: LD_VAR 0 55
34059: PUSH
34060: LD_VAR 0 56
34064: PUSH
34065: LD_VAR 0 57
34069: PUSH
34070: LD_VAR 0 58
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: PUSH
34083: LD_VAR 0 4
34087: PUSH
34088: LD_INT 1
34090: PLUS
34091: ARRAY
34092: ST_TO_ADDR
34093: GO 34202
34095: LD_INT 31
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34145
34101: LD_INT 32
34103: DOUBLE
34104: EQUAL
34105: IFTRUE 34145
34107: LD_INT 33
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34145
34113: LD_INT 27
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34145
34119: LD_INT 26
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34145
34125: LD_INT 28
34127: DOUBLE
34128: EQUAL
34129: IFTRUE 34145
34131: LD_INT 29
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34145
34137: LD_INT 30
34139: DOUBLE
34140: EQUAL
34141: IFTRUE 34145
34143: GO 34201
34145: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34146: LD_ADDR_VAR 0 9
34150: PUSH
34151: LD_VAR 0 59
34155: PUSH
34156: LD_VAR 0 60
34160: PUSH
34161: LD_VAR 0 61
34165: PUSH
34166: LD_VAR 0 62
34170: PUSH
34171: LD_VAR 0 63
34175: PUSH
34176: LD_VAR 0 64
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: PUSH
34189: LD_VAR 0 4
34193: PUSH
34194: LD_INT 1
34196: PLUS
34197: ARRAY
34198: ST_TO_ADDR
34199: GO 34202
34201: POP
// temp_list2 = [ ] ;
34202: LD_ADDR_VAR 0 10
34206: PUSH
34207: EMPTY
34208: ST_TO_ADDR
// for i in temp_list do
34209: LD_ADDR_VAR 0 8
34213: PUSH
34214: LD_VAR 0 9
34218: PUSH
34219: FOR_IN
34220: IFFALSE 34272
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34222: LD_ADDR_VAR 0 10
34226: PUSH
34227: LD_VAR 0 10
34231: PUSH
34232: LD_VAR 0 8
34236: PUSH
34237: LD_INT 1
34239: ARRAY
34240: PUSH
34241: LD_VAR 0 2
34245: PLUS
34246: PUSH
34247: LD_VAR 0 8
34251: PUSH
34252: LD_INT 2
34254: ARRAY
34255: PUSH
34256: LD_VAR 0 3
34260: PLUS
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: EMPTY
34267: LIST
34268: ADD
34269: ST_TO_ADDR
34270: GO 34219
34272: POP
34273: POP
// result = temp_list2 ;
34274: LD_ADDR_VAR 0 7
34278: PUSH
34279: LD_VAR 0 10
34283: ST_TO_ADDR
// end ;
34284: LD_VAR 0 7
34288: RET
// export function EnemyInRange ( unit , dist ) ; begin
34289: LD_INT 0
34291: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34292: LD_ADDR_VAR 0 3
34296: PUSH
34297: LD_VAR 0 1
34301: PPUSH
34302: CALL_OW 255
34306: PPUSH
34307: LD_VAR 0 1
34311: PPUSH
34312: CALL_OW 250
34316: PPUSH
34317: LD_VAR 0 1
34321: PPUSH
34322: CALL_OW 251
34326: PPUSH
34327: LD_VAR 0 2
34331: PPUSH
34332: CALL 7662 0 4
34336: PUSH
34337: LD_INT 4
34339: ARRAY
34340: ST_TO_ADDR
// end ;
34341: LD_VAR 0 3
34345: RET
// export function PlayerSeeMe ( unit ) ; begin
34346: LD_INT 0
34348: PPUSH
// result := See ( your_side , unit ) ;
34349: LD_ADDR_VAR 0 2
34353: PUSH
34354: LD_OWVAR 2
34358: PPUSH
34359: LD_VAR 0 1
34363: PPUSH
34364: CALL_OW 292
34368: ST_TO_ADDR
// end ;
34369: LD_VAR 0 2
34373: RET
// export function ReverseDir ( unit ) ; begin
34374: LD_INT 0
34376: PPUSH
// if not unit then
34377: LD_VAR 0 1
34381: NOT
34382: IFFALSE 34386
// exit ;
34384: GO 34409
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34386: LD_ADDR_VAR 0 2
34390: PUSH
34391: LD_VAR 0 1
34395: PPUSH
34396: CALL_OW 254
34400: PUSH
34401: LD_INT 3
34403: PLUS
34404: PUSH
34405: LD_INT 6
34407: MOD
34408: ST_TO_ADDR
// end ;
34409: LD_VAR 0 2
34413: RET
// export function ReverseArray ( array ) ; var i ; begin
34414: LD_INT 0
34416: PPUSH
34417: PPUSH
// if not array then
34418: LD_VAR 0 1
34422: NOT
34423: IFFALSE 34427
// exit ;
34425: GO 34482
// result := [ ] ;
34427: LD_ADDR_VAR 0 2
34431: PUSH
34432: EMPTY
34433: ST_TO_ADDR
// for i := array downto 1 do
34434: LD_ADDR_VAR 0 3
34438: PUSH
34439: DOUBLE
34440: LD_VAR 0 1
34444: INC
34445: ST_TO_ADDR
34446: LD_INT 1
34448: PUSH
34449: FOR_DOWNTO
34450: IFFALSE 34480
// result := Join ( result , array [ i ] ) ;
34452: LD_ADDR_VAR 0 2
34456: PUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: LD_VAR 0 1
34466: PUSH
34467: LD_VAR 0 3
34471: ARRAY
34472: PPUSH
34473: CALL 39127 0 2
34477: ST_TO_ADDR
34478: GO 34449
34480: POP
34481: POP
// end ;
34482: LD_VAR 0 2
34486: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34487: LD_INT 0
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
// if not unit or not hexes then
34495: LD_VAR 0 1
34499: NOT
34500: PUSH
34501: LD_VAR 0 2
34505: NOT
34506: OR
34507: IFFALSE 34511
// exit ;
34509: GO 34634
// dist := 9999 ;
34511: LD_ADDR_VAR 0 5
34515: PUSH
34516: LD_INT 9999
34518: ST_TO_ADDR
// for i = 1 to hexes do
34519: LD_ADDR_VAR 0 4
34523: PUSH
34524: DOUBLE
34525: LD_INT 1
34527: DEC
34528: ST_TO_ADDR
34529: LD_VAR 0 2
34533: PUSH
34534: FOR_TO
34535: IFFALSE 34622
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34537: LD_ADDR_VAR 0 6
34541: PUSH
34542: LD_VAR 0 1
34546: PPUSH
34547: LD_VAR 0 2
34551: PUSH
34552: LD_VAR 0 4
34556: ARRAY
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: PPUSH
34562: LD_VAR 0 2
34566: PUSH
34567: LD_VAR 0 4
34571: ARRAY
34572: PUSH
34573: LD_INT 2
34575: ARRAY
34576: PPUSH
34577: CALL_OW 297
34581: ST_TO_ADDR
// if tdist < dist then
34582: LD_VAR 0 6
34586: PUSH
34587: LD_VAR 0 5
34591: LESS
34592: IFFALSE 34620
// begin hex := hexes [ i ] ;
34594: LD_ADDR_VAR 0 8
34598: PUSH
34599: LD_VAR 0 2
34603: PUSH
34604: LD_VAR 0 4
34608: ARRAY
34609: ST_TO_ADDR
// dist := tdist ;
34610: LD_ADDR_VAR 0 5
34614: PUSH
34615: LD_VAR 0 6
34619: ST_TO_ADDR
// end ; end ;
34620: GO 34534
34622: POP
34623: POP
// result := hex ;
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_VAR 0 8
34633: ST_TO_ADDR
// end ;
34634: LD_VAR 0 3
34638: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34639: LD_INT 0
34641: PPUSH
34642: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34643: LD_VAR 0 1
34647: NOT
34648: PUSH
34649: LD_VAR 0 1
34653: PUSH
34654: LD_INT 21
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 23
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PPUSH
34678: CALL_OW 69
34682: IN
34683: NOT
34684: OR
34685: IFFALSE 34689
// exit ;
34687: GO 34736
// for i = 1 to 3 do
34689: LD_ADDR_VAR 0 3
34693: PUSH
34694: DOUBLE
34695: LD_INT 1
34697: DEC
34698: ST_TO_ADDR
34699: LD_INT 3
34701: PUSH
34702: FOR_TO
34703: IFFALSE 34734
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 250
34714: PPUSH
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 251
34724: PPUSH
34725: LD_INT 1
34727: PPUSH
34728: CALL_OW 453
34732: GO 34702
34734: POP
34735: POP
// end ;
34736: LD_VAR 0 2
34740: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34741: LD_INT 0
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
// if not unit or not enemy_unit then
34749: LD_VAR 0 1
34753: NOT
34754: PUSH
34755: LD_VAR 0 2
34759: NOT
34760: OR
34761: IFFALSE 34765
// exit ;
34763: GO 35232
// if GetLives ( i ) < 250 then
34765: LD_VAR 0 4
34769: PPUSH
34770: CALL_OW 256
34774: PUSH
34775: LD_INT 250
34777: LESS
34778: IFFALSE 34791
// begin ComAutodestruct ( i ) ;
34780: LD_VAR 0 4
34784: PPUSH
34785: CALL 34639 0 1
// exit ;
34789: GO 35232
// end ; x := GetX ( enemy_unit ) ;
34791: LD_ADDR_VAR 0 7
34795: PUSH
34796: LD_VAR 0 2
34800: PPUSH
34801: CALL_OW 250
34805: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34806: LD_ADDR_VAR 0 8
34810: PUSH
34811: LD_VAR 0 2
34815: PPUSH
34816: CALL_OW 251
34820: ST_TO_ADDR
// if not x or not y then
34821: LD_VAR 0 7
34825: NOT
34826: PUSH
34827: LD_VAR 0 8
34831: NOT
34832: OR
34833: IFFALSE 34837
// exit ;
34835: GO 35232
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34837: LD_ADDR_VAR 0 6
34841: PUSH
34842: LD_VAR 0 7
34846: PPUSH
34847: LD_INT 0
34849: PPUSH
34850: LD_INT 4
34852: PPUSH
34853: CALL_OW 272
34857: PUSH
34858: LD_VAR 0 8
34862: PPUSH
34863: LD_INT 0
34865: PPUSH
34866: LD_INT 4
34868: PPUSH
34869: CALL_OW 273
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_VAR 0 7
34882: PPUSH
34883: LD_INT 1
34885: PPUSH
34886: LD_INT 4
34888: PPUSH
34889: CALL_OW 272
34893: PUSH
34894: LD_VAR 0 8
34898: PPUSH
34899: LD_INT 1
34901: PPUSH
34902: LD_INT 4
34904: PPUSH
34905: CALL_OW 273
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_VAR 0 7
34918: PPUSH
34919: LD_INT 2
34921: PPUSH
34922: LD_INT 4
34924: PPUSH
34925: CALL_OW 272
34929: PUSH
34930: LD_VAR 0 8
34934: PPUSH
34935: LD_INT 2
34937: PPUSH
34938: LD_INT 4
34940: PPUSH
34941: CALL_OW 273
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_VAR 0 7
34954: PPUSH
34955: LD_INT 3
34957: PPUSH
34958: LD_INT 4
34960: PPUSH
34961: CALL_OW 272
34965: PUSH
34966: LD_VAR 0 8
34970: PPUSH
34971: LD_INT 3
34973: PPUSH
34974: LD_INT 4
34976: PPUSH
34977: CALL_OW 273
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_VAR 0 7
34990: PPUSH
34991: LD_INT 4
34993: PPUSH
34994: LD_INT 4
34996: PPUSH
34997: CALL_OW 272
35001: PUSH
35002: LD_VAR 0 8
35006: PPUSH
35007: LD_INT 4
35009: PPUSH
35010: LD_INT 4
35012: PPUSH
35013: CALL_OW 273
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_VAR 0 7
35026: PPUSH
35027: LD_INT 5
35029: PPUSH
35030: LD_INT 4
35032: PPUSH
35033: CALL_OW 272
35037: PUSH
35038: LD_VAR 0 8
35042: PPUSH
35043: LD_INT 5
35045: PPUSH
35046: LD_INT 4
35048: PPUSH
35049: CALL_OW 273
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// for i = tmp downto 1 do
35066: LD_ADDR_VAR 0 4
35070: PUSH
35071: DOUBLE
35072: LD_VAR 0 6
35076: INC
35077: ST_TO_ADDR
35078: LD_INT 1
35080: PUSH
35081: FOR_DOWNTO
35082: IFFALSE 35183
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35084: LD_VAR 0 6
35088: PUSH
35089: LD_VAR 0 4
35093: ARRAY
35094: PUSH
35095: LD_INT 1
35097: ARRAY
35098: PPUSH
35099: LD_VAR 0 6
35103: PUSH
35104: LD_VAR 0 4
35108: ARRAY
35109: PUSH
35110: LD_INT 2
35112: ARRAY
35113: PPUSH
35114: CALL_OW 488
35118: NOT
35119: PUSH
35120: LD_VAR 0 6
35124: PUSH
35125: LD_VAR 0 4
35129: ARRAY
35130: PUSH
35131: LD_INT 1
35133: ARRAY
35134: PPUSH
35135: LD_VAR 0 6
35139: PUSH
35140: LD_VAR 0 4
35144: ARRAY
35145: PUSH
35146: LD_INT 2
35148: ARRAY
35149: PPUSH
35150: CALL_OW 428
35154: PUSH
35155: LD_INT 0
35157: NONEQUAL
35158: OR
35159: IFFALSE 35181
// tmp := Delete ( tmp , i ) ;
35161: LD_ADDR_VAR 0 6
35165: PUSH
35166: LD_VAR 0 6
35170: PPUSH
35171: LD_VAR 0 4
35175: PPUSH
35176: CALL_OW 3
35180: ST_TO_ADDR
35181: GO 35081
35183: POP
35184: POP
// j := GetClosestHex ( unit , tmp ) ;
35185: LD_ADDR_VAR 0 5
35189: PUSH
35190: LD_VAR 0 1
35194: PPUSH
35195: LD_VAR 0 6
35199: PPUSH
35200: CALL 34487 0 2
35204: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35205: LD_VAR 0 1
35209: PPUSH
35210: LD_VAR 0 5
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PPUSH
35219: LD_VAR 0 5
35223: PUSH
35224: LD_INT 2
35226: ARRAY
35227: PPUSH
35228: CALL_OW 111
// end ;
35232: LD_VAR 0 3
35236: RET
// export function PrepareApemanSoldier ( ) ; begin
35237: LD_INT 0
35239: PPUSH
// uc_nation := 0 ;
35240: LD_ADDR_OWVAR 21
35244: PUSH
35245: LD_INT 0
35247: ST_TO_ADDR
// hc_sex := sex_male ;
35248: LD_ADDR_OWVAR 27
35252: PUSH
35253: LD_INT 1
35255: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35256: LD_ADDR_OWVAR 28
35260: PUSH
35261: LD_INT 15
35263: ST_TO_ADDR
// hc_gallery :=  ;
35264: LD_ADDR_OWVAR 33
35268: PUSH
35269: LD_STRING 
35271: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35272: LD_ADDR_OWVAR 31
35276: PUSH
35277: LD_INT 0
35279: PPUSH
35280: LD_INT 3
35282: PPUSH
35283: CALL_OW 12
35287: PUSH
35288: LD_INT 0
35290: PPUSH
35291: LD_INT 3
35293: PPUSH
35294: CALL_OW 12
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
// end ;
35311: LD_VAR 0 1
35315: RET
// export function PrepareApemanEngineer ( ) ; begin
35316: LD_INT 0
35318: PPUSH
// uc_nation := 0 ;
35319: LD_ADDR_OWVAR 21
35323: PUSH
35324: LD_INT 0
35326: ST_TO_ADDR
// hc_sex := sex_male ;
35327: LD_ADDR_OWVAR 27
35331: PUSH
35332: LD_INT 1
35334: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35335: LD_ADDR_OWVAR 28
35339: PUSH
35340: LD_INT 16
35342: ST_TO_ADDR
// hc_gallery :=  ;
35343: LD_ADDR_OWVAR 33
35347: PUSH
35348: LD_STRING 
35350: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35351: LD_ADDR_OWVAR 31
35355: PUSH
35356: LD_INT 0
35358: PPUSH
35359: LD_INT 3
35361: PPUSH
35362: CALL_OW 12
35366: PUSH
35367: LD_INT 0
35369: PPUSH
35370: LD_INT 3
35372: PPUSH
35373: CALL_OW 12
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
// end ;
35390: LD_VAR 0 1
35394: RET
// export function PrepareApeman ( agressivity ) ; begin
35395: LD_INT 0
35397: PPUSH
// uc_side := 0 ;
35398: LD_ADDR_OWVAR 20
35402: PUSH
35403: LD_INT 0
35405: ST_TO_ADDR
// uc_nation := 0 ;
35406: LD_ADDR_OWVAR 21
35410: PUSH
35411: LD_INT 0
35413: ST_TO_ADDR
// hc_sex := sex_male ;
35414: LD_ADDR_OWVAR 27
35418: PUSH
35419: LD_INT 1
35421: ST_TO_ADDR
// hc_class := class_apeman ;
35422: LD_ADDR_OWVAR 28
35426: PUSH
35427: LD_INT 12
35429: ST_TO_ADDR
// hc_gallery :=  ;
35430: LD_ADDR_OWVAR 33
35434: PUSH
35435: LD_STRING 
35437: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35438: LD_ADDR_OWVAR 35
35442: PUSH
35443: LD_VAR 0 1
35447: NEG
35448: PPUSH
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 12
35458: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35459: LD_ADDR_OWVAR 31
35463: PUSH
35464: LD_INT 0
35466: PPUSH
35467: LD_INT 3
35469: PPUSH
35470: CALL_OW 12
35474: PUSH
35475: LD_INT 0
35477: PPUSH
35478: LD_INT 3
35480: PPUSH
35481: CALL_OW 12
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: ST_TO_ADDR
// end ;
35498: LD_VAR 0 2
35502: RET
// export function PrepareTiger ( agressivity ) ; begin
35503: LD_INT 0
35505: PPUSH
// uc_side := 0 ;
35506: LD_ADDR_OWVAR 20
35510: PUSH
35511: LD_INT 0
35513: ST_TO_ADDR
// uc_nation := 0 ;
35514: LD_ADDR_OWVAR 21
35518: PUSH
35519: LD_INT 0
35521: ST_TO_ADDR
// hc_class := class_tiger ;
35522: LD_ADDR_OWVAR 28
35526: PUSH
35527: LD_INT 14
35529: ST_TO_ADDR
// hc_gallery :=  ;
35530: LD_ADDR_OWVAR 33
35534: PUSH
35535: LD_STRING 
35537: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35538: LD_ADDR_OWVAR 35
35542: PUSH
35543: LD_VAR 0 1
35547: NEG
35548: PPUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 12
35558: ST_TO_ADDR
// end ;
35559: LD_VAR 0 2
35563: RET
// export function PrepareEnchidna ( ) ; begin
35564: LD_INT 0
35566: PPUSH
// uc_side := 0 ;
35567: LD_ADDR_OWVAR 20
35571: PUSH
35572: LD_INT 0
35574: ST_TO_ADDR
// uc_nation := 0 ;
35575: LD_ADDR_OWVAR 21
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// hc_class := class_baggie ;
35583: LD_ADDR_OWVAR 28
35587: PUSH
35588: LD_INT 13
35590: ST_TO_ADDR
// hc_gallery :=  ;
35591: LD_ADDR_OWVAR 33
35595: PUSH
35596: LD_STRING 
35598: ST_TO_ADDR
// end ;
35599: LD_VAR 0 1
35603: RET
// export function PrepareFrog ( ) ; begin
35604: LD_INT 0
35606: PPUSH
// uc_side := 0 ;
35607: LD_ADDR_OWVAR 20
35611: PUSH
35612: LD_INT 0
35614: ST_TO_ADDR
// uc_nation := 0 ;
35615: LD_ADDR_OWVAR 21
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// hc_class := class_frog ;
35623: LD_ADDR_OWVAR 28
35627: PUSH
35628: LD_INT 19
35630: ST_TO_ADDR
// hc_gallery :=  ;
35631: LD_ADDR_OWVAR 33
35635: PUSH
35636: LD_STRING 
35638: ST_TO_ADDR
// end ;
35639: LD_VAR 0 1
35643: RET
// export function PrepareFish ( ) ; begin
35644: LD_INT 0
35646: PPUSH
// uc_side := 0 ;
35647: LD_ADDR_OWVAR 20
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
// uc_nation := 0 ;
35655: LD_ADDR_OWVAR 21
35659: PUSH
35660: LD_INT 0
35662: ST_TO_ADDR
// hc_class := class_fish ;
35663: LD_ADDR_OWVAR 28
35667: PUSH
35668: LD_INT 20
35670: ST_TO_ADDR
// hc_gallery :=  ;
35671: LD_ADDR_OWVAR 33
35675: PUSH
35676: LD_STRING 
35678: ST_TO_ADDR
// end ;
35679: LD_VAR 0 1
35683: RET
// export function PrepareBird ( ) ; begin
35684: LD_INT 0
35686: PPUSH
// uc_side := 0 ;
35687: LD_ADDR_OWVAR 20
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// uc_nation := 0 ;
35695: LD_ADDR_OWVAR 21
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// hc_class := class_phororhacos ;
35703: LD_ADDR_OWVAR 28
35707: PUSH
35708: LD_INT 18
35710: ST_TO_ADDR
// hc_gallery :=  ;
35711: LD_ADDR_OWVAR 33
35715: PUSH
35716: LD_STRING 
35718: ST_TO_ADDR
// end ;
35719: LD_VAR 0 1
35723: RET
// export function PrepareHorse ( ) ; begin
35724: LD_INT 0
35726: PPUSH
// uc_side := 0 ;
35727: LD_ADDR_OWVAR 20
35731: PUSH
35732: LD_INT 0
35734: ST_TO_ADDR
// uc_nation := 0 ;
35735: LD_ADDR_OWVAR 21
35739: PUSH
35740: LD_INT 0
35742: ST_TO_ADDR
// hc_class := class_horse ;
35743: LD_ADDR_OWVAR 28
35747: PUSH
35748: LD_INT 21
35750: ST_TO_ADDR
// hc_gallery :=  ;
35751: LD_ADDR_OWVAR 33
35755: PUSH
35756: LD_STRING 
35758: ST_TO_ADDR
// end ;
35759: LD_VAR 0 1
35763: RET
// export function PrepareMastodont ( ) ; begin
35764: LD_INT 0
35766: PPUSH
// uc_side := 0 ;
35767: LD_ADDR_OWVAR 20
35771: PUSH
35772: LD_INT 0
35774: ST_TO_ADDR
// uc_nation := 0 ;
35775: LD_ADDR_OWVAR 21
35779: PUSH
35780: LD_INT 0
35782: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35783: LD_ADDR_OWVAR 37
35787: PUSH
35788: LD_INT 31
35790: ST_TO_ADDR
// vc_control := control_rider ;
35791: LD_ADDR_OWVAR 38
35795: PUSH
35796: LD_INT 4
35798: ST_TO_ADDR
// end ;
35799: LD_VAR 0 1
35803: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35804: LD_INT 0
35806: PPUSH
35807: PPUSH
35808: PPUSH
// uc_side = 0 ;
35809: LD_ADDR_OWVAR 20
35813: PUSH
35814: LD_INT 0
35816: ST_TO_ADDR
// uc_nation = 0 ;
35817: LD_ADDR_OWVAR 21
35821: PUSH
35822: LD_INT 0
35824: ST_TO_ADDR
// InitHc_All ( ) ;
35825: CALL_OW 584
// InitVc ;
35829: CALL_OW 20
// if mastodonts then
35833: LD_VAR 0 6
35837: IFFALSE 35904
// for i = 1 to mastodonts do
35839: LD_ADDR_VAR 0 11
35843: PUSH
35844: DOUBLE
35845: LD_INT 1
35847: DEC
35848: ST_TO_ADDR
35849: LD_VAR 0 6
35853: PUSH
35854: FOR_TO
35855: IFFALSE 35902
// begin vc_chassis := 31 ;
35857: LD_ADDR_OWVAR 37
35861: PUSH
35862: LD_INT 31
35864: ST_TO_ADDR
// vc_control := control_rider ;
35865: LD_ADDR_OWVAR 38
35869: PUSH
35870: LD_INT 4
35872: ST_TO_ADDR
// animal := CreateVehicle ;
35873: LD_ADDR_VAR 0 12
35877: PUSH
35878: CALL_OW 45
35882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35883: LD_VAR 0 12
35887: PPUSH
35888: LD_VAR 0 8
35892: PPUSH
35893: LD_INT 0
35895: PPUSH
35896: CALL 38032 0 3
// end ;
35900: GO 35854
35902: POP
35903: POP
// if horses then
35904: LD_VAR 0 5
35908: IFFALSE 35975
// for i = 1 to horses do
35910: LD_ADDR_VAR 0 11
35914: PUSH
35915: DOUBLE
35916: LD_INT 1
35918: DEC
35919: ST_TO_ADDR
35920: LD_VAR 0 5
35924: PUSH
35925: FOR_TO
35926: IFFALSE 35973
// begin hc_class := 21 ;
35928: LD_ADDR_OWVAR 28
35932: PUSH
35933: LD_INT 21
35935: ST_TO_ADDR
// hc_gallery :=  ;
35936: LD_ADDR_OWVAR 33
35940: PUSH
35941: LD_STRING 
35943: ST_TO_ADDR
// animal := CreateHuman ;
35944: LD_ADDR_VAR 0 12
35948: PUSH
35949: CALL_OW 44
35953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35954: LD_VAR 0 12
35958: PPUSH
35959: LD_VAR 0 8
35963: PPUSH
35964: LD_INT 0
35966: PPUSH
35967: CALL 38032 0 3
// end ;
35971: GO 35925
35973: POP
35974: POP
// if birds then
35975: LD_VAR 0 1
35979: IFFALSE 36046
// for i = 1 to birds do
35981: LD_ADDR_VAR 0 11
35985: PUSH
35986: DOUBLE
35987: LD_INT 1
35989: DEC
35990: ST_TO_ADDR
35991: LD_VAR 0 1
35995: PUSH
35996: FOR_TO
35997: IFFALSE 36044
// begin hc_class := 18 ;
35999: LD_ADDR_OWVAR 28
36003: PUSH
36004: LD_INT 18
36006: ST_TO_ADDR
// hc_gallery =  ;
36007: LD_ADDR_OWVAR 33
36011: PUSH
36012: LD_STRING 
36014: ST_TO_ADDR
// animal := CreateHuman ;
36015: LD_ADDR_VAR 0 12
36019: PUSH
36020: CALL_OW 44
36024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36025: LD_VAR 0 12
36029: PPUSH
36030: LD_VAR 0 8
36034: PPUSH
36035: LD_INT 0
36037: PPUSH
36038: CALL 38032 0 3
// end ;
36042: GO 35996
36044: POP
36045: POP
// if tigers then
36046: LD_VAR 0 2
36050: IFFALSE 36134
// for i = 1 to tigers do
36052: LD_ADDR_VAR 0 11
36056: PUSH
36057: DOUBLE
36058: LD_INT 1
36060: DEC
36061: ST_TO_ADDR
36062: LD_VAR 0 2
36066: PUSH
36067: FOR_TO
36068: IFFALSE 36132
// begin hc_class = class_tiger ;
36070: LD_ADDR_OWVAR 28
36074: PUSH
36075: LD_INT 14
36077: ST_TO_ADDR
// hc_gallery =  ;
36078: LD_ADDR_OWVAR 33
36082: PUSH
36083: LD_STRING 
36085: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36086: LD_ADDR_OWVAR 35
36090: PUSH
36091: LD_INT 7
36093: NEG
36094: PPUSH
36095: LD_INT 7
36097: PPUSH
36098: CALL_OW 12
36102: ST_TO_ADDR
// animal := CreateHuman ;
36103: LD_ADDR_VAR 0 12
36107: PUSH
36108: CALL_OW 44
36112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36113: LD_VAR 0 12
36117: PPUSH
36118: LD_VAR 0 8
36122: PPUSH
36123: LD_INT 0
36125: PPUSH
36126: CALL 38032 0 3
// end ;
36130: GO 36067
36132: POP
36133: POP
// if apemans then
36134: LD_VAR 0 3
36138: IFFALSE 36261
// for i = 1 to apemans do
36140: LD_ADDR_VAR 0 11
36144: PUSH
36145: DOUBLE
36146: LD_INT 1
36148: DEC
36149: ST_TO_ADDR
36150: LD_VAR 0 3
36154: PUSH
36155: FOR_TO
36156: IFFALSE 36259
// begin hc_class = class_apeman ;
36158: LD_ADDR_OWVAR 28
36162: PUSH
36163: LD_INT 12
36165: ST_TO_ADDR
// hc_gallery =  ;
36166: LD_ADDR_OWVAR 33
36170: PUSH
36171: LD_STRING 
36173: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36174: LD_ADDR_OWVAR 35
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PPUSH
36183: LD_INT 2
36185: PPUSH
36186: CALL_OW 12
36190: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36191: LD_ADDR_OWVAR 31
36195: PUSH
36196: LD_INT 1
36198: PPUSH
36199: LD_INT 3
36201: PPUSH
36202: CALL_OW 12
36206: PUSH
36207: LD_INT 1
36209: PPUSH
36210: LD_INT 3
36212: PPUSH
36213: CALL_OW 12
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: ST_TO_ADDR
// animal := CreateHuman ;
36230: LD_ADDR_VAR 0 12
36234: PUSH
36235: CALL_OW 44
36239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36240: LD_VAR 0 12
36244: PPUSH
36245: LD_VAR 0 8
36249: PPUSH
36250: LD_INT 0
36252: PPUSH
36253: CALL 38032 0 3
// end ;
36257: GO 36155
36259: POP
36260: POP
// if enchidnas then
36261: LD_VAR 0 4
36265: IFFALSE 36332
// for i = 1 to enchidnas do
36267: LD_ADDR_VAR 0 11
36271: PUSH
36272: DOUBLE
36273: LD_INT 1
36275: DEC
36276: ST_TO_ADDR
36277: LD_VAR 0 4
36281: PUSH
36282: FOR_TO
36283: IFFALSE 36330
// begin hc_class = 13 ;
36285: LD_ADDR_OWVAR 28
36289: PUSH
36290: LD_INT 13
36292: ST_TO_ADDR
// hc_gallery =  ;
36293: LD_ADDR_OWVAR 33
36297: PUSH
36298: LD_STRING 
36300: ST_TO_ADDR
// animal := CreateHuman ;
36301: LD_ADDR_VAR 0 12
36305: PUSH
36306: CALL_OW 44
36310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36311: LD_VAR 0 12
36315: PPUSH
36316: LD_VAR 0 8
36320: PPUSH
36321: LD_INT 0
36323: PPUSH
36324: CALL 38032 0 3
// end ;
36328: GO 36282
36330: POP
36331: POP
// if fishes then
36332: LD_VAR 0 7
36336: IFFALSE 36403
// for i = 1 to fishes do
36338: LD_ADDR_VAR 0 11
36342: PUSH
36343: DOUBLE
36344: LD_INT 1
36346: DEC
36347: ST_TO_ADDR
36348: LD_VAR 0 7
36352: PUSH
36353: FOR_TO
36354: IFFALSE 36401
// begin hc_class = 20 ;
36356: LD_ADDR_OWVAR 28
36360: PUSH
36361: LD_INT 20
36363: ST_TO_ADDR
// hc_gallery =  ;
36364: LD_ADDR_OWVAR 33
36368: PUSH
36369: LD_STRING 
36371: ST_TO_ADDR
// animal := CreateHuman ;
36372: LD_ADDR_VAR 0 12
36376: PUSH
36377: CALL_OW 44
36381: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36382: LD_VAR 0 12
36386: PPUSH
36387: LD_VAR 0 9
36391: PPUSH
36392: LD_INT 0
36394: PPUSH
36395: CALL 38032 0 3
// end ;
36399: GO 36353
36401: POP
36402: POP
// end ;
36403: LD_VAR 0 10
36407: RET
// export function WantHeal ( sci , unit ) ; begin
36408: LD_INT 0
36410: PPUSH
// if GetTaskList ( sci ) > 0 then
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 437
36420: PUSH
36421: LD_INT 0
36423: GREATER
36424: IFFALSE 36494
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36426: LD_VAR 0 1
36430: PPUSH
36431: CALL_OW 437
36435: PUSH
36436: LD_INT 1
36438: ARRAY
36439: PUSH
36440: LD_INT 1
36442: ARRAY
36443: PUSH
36444: LD_STRING l
36446: EQUAL
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 437
36457: PUSH
36458: LD_INT 1
36460: ARRAY
36461: PUSH
36462: LD_INT 4
36464: ARRAY
36465: PUSH
36466: LD_VAR 0 2
36470: EQUAL
36471: AND
36472: IFFALSE 36484
// result := true else
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: LD_INT 1
36481: ST_TO_ADDR
36482: GO 36492
// result := false ;
36484: LD_ADDR_VAR 0 3
36488: PUSH
36489: LD_INT 0
36491: ST_TO_ADDR
// end else
36492: GO 36502
// result := false ;
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_INT 0
36501: ST_TO_ADDR
// end ;
36502: LD_VAR 0 3
36506: RET
// export function HealTarget ( sci ) ; begin
36507: LD_INT 0
36509: PPUSH
// if not sci then
36510: LD_VAR 0 1
36514: NOT
36515: IFFALSE 36519
// exit ;
36517: GO 36584
// result := 0 ;
36519: LD_ADDR_VAR 0 2
36523: PUSH
36524: LD_INT 0
36526: ST_TO_ADDR
// if GetTaskList ( sci ) then
36527: LD_VAR 0 1
36531: PPUSH
36532: CALL_OW 437
36536: IFFALSE 36584
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36538: LD_VAR 0 1
36542: PPUSH
36543: CALL_OW 437
36547: PUSH
36548: LD_INT 1
36550: ARRAY
36551: PUSH
36552: LD_INT 1
36554: ARRAY
36555: PUSH
36556: LD_STRING l
36558: EQUAL
36559: IFFALSE 36584
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36561: LD_ADDR_VAR 0 2
36565: PUSH
36566: LD_VAR 0 1
36570: PPUSH
36571: CALL_OW 437
36575: PUSH
36576: LD_INT 1
36578: ARRAY
36579: PUSH
36580: LD_INT 4
36582: ARRAY
36583: ST_TO_ADDR
// end ;
36584: LD_VAR 0 2
36588: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36589: LD_INT 0
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
// if not base_units then
36595: LD_VAR 0 1
36599: NOT
36600: IFFALSE 36604
// exit ;
36602: GO 36691
// result := false ;
36604: LD_ADDR_VAR 0 2
36608: PUSH
36609: LD_INT 0
36611: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36612: LD_ADDR_VAR 0 5
36616: PUSH
36617: LD_VAR 0 1
36621: PPUSH
36622: LD_INT 21
36624: PUSH
36625: LD_INT 3
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PPUSH
36632: CALL_OW 72
36636: ST_TO_ADDR
// if not tmp then
36637: LD_VAR 0 5
36641: NOT
36642: IFFALSE 36646
// exit ;
36644: GO 36691
// for i in tmp do
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_VAR 0 5
36655: PUSH
36656: FOR_IN
36657: IFFALSE 36689
// begin result := EnemyInRange ( i , 22 ) ;
36659: LD_ADDR_VAR 0 2
36663: PUSH
36664: LD_VAR 0 3
36668: PPUSH
36669: LD_INT 22
36671: PPUSH
36672: CALL 34289 0 2
36676: ST_TO_ADDR
// if result then
36677: LD_VAR 0 2
36681: IFFALSE 36687
// exit ;
36683: POP
36684: POP
36685: GO 36691
// end ;
36687: GO 36656
36689: POP
36690: POP
// end ;
36691: LD_VAR 0 2
36695: RET
// export function FilterByTag ( units , tag ) ; begin
36696: LD_INT 0
36698: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36699: LD_ADDR_VAR 0 3
36703: PUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: LD_INT 120
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PPUSH
36721: CALL_OW 72
36725: ST_TO_ADDR
// end ;
36726: LD_VAR 0 3
36730: RET
// export function IsDriver ( un ) ; begin
36731: LD_INT 0
36733: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36734: LD_ADDR_VAR 0 2
36738: PUSH
36739: LD_VAR 0 1
36743: PUSH
36744: LD_INT 55
36746: PUSH
36747: EMPTY
36748: LIST
36749: PPUSH
36750: CALL_OW 69
36754: IN
36755: ST_TO_ADDR
// end ;
36756: LD_VAR 0 2
36760: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36761: LD_INT 0
36763: PPUSH
36764: PPUSH
// list := [ ] ;
36765: LD_ADDR_VAR 0 5
36769: PUSH
36770: EMPTY
36771: ST_TO_ADDR
// case d of 0 :
36772: LD_VAR 0 3
36776: PUSH
36777: LD_INT 0
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 36918
36785: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36786: LD_ADDR_VAR 0 5
36790: PUSH
36791: LD_VAR 0 1
36795: PUSH
36796: LD_INT 4
36798: MINUS
36799: PUSH
36800: LD_VAR 0 2
36804: PUSH
36805: LD_INT 4
36807: MINUS
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: PUSH
36817: LD_VAR 0 1
36821: PUSH
36822: LD_INT 3
36824: MINUS
36825: PUSH
36826: LD_VAR 0 2
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: PUSH
36839: LD_VAR 0 1
36843: PUSH
36844: LD_INT 4
36846: PLUS
36847: PUSH
36848: LD_VAR 0 2
36852: PUSH
36853: LD_INT 4
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: PUSH
36861: LD_VAR 0 1
36865: PUSH
36866: LD_INT 3
36868: PLUS
36869: PUSH
36870: LD_VAR 0 2
36874: PUSH
36875: LD_INT 3
36877: PLUS
36878: PUSH
36879: LD_INT 5
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: PUSH
36887: LD_VAR 0 1
36891: PUSH
36892: LD_VAR 0 2
36896: PUSH
36897: LD_INT 4
36899: PLUS
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
// end ; 1 :
36916: GO 37616
36918: LD_INT 1
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36926
36924: GO 37059
36926: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36927: LD_ADDR_VAR 0 5
36931: PUSH
36932: LD_VAR 0 1
36936: PUSH
36937: LD_VAR 0 2
36941: PUSH
36942: LD_INT 4
36944: MINUS
36945: PUSH
36946: LD_INT 3
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: PUSH
36954: LD_VAR 0 1
36958: PUSH
36959: LD_INT 3
36961: MINUS
36962: PUSH
36963: LD_VAR 0 2
36967: PUSH
36968: LD_INT 3
36970: MINUS
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: PUSH
36980: LD_VAR 0 1
36984: PUSH
36985: LD_INT 4
36987: MINUS
36988: PUSH
36989: LD_VAR 0 2
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: PUSH
37002: LD_VAR 0 1
37006: PUSH
37007: LD_VAR 0 2
37011: PUSH
37012: LD_INT 3
37014: PLUS
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: LIST
37023: PUSH
37024: LD_VAR 0 1
37028: PUSH
37029: LD_INT 4
37031: PLUS
37032: PUSH
37033: LD_VAR 0 2
37037: PUSH
37038: LD_INT 4
37040: PLUS
37041: PUSH
37042: LD_INT 5
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// end ; 2 :
37057: GO 37616
37059: LD_INT 2
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37196
37067: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37068: LD_ADDR_VAR 0 5
37072: PUSH
37073: LD_VAR 0 1
37077: PUSH
37078: LD_VAR 0 2
37082: PUSH
37083: LD_INT 3
37085: MINUS
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: PUSH
37095: LD_VAR 0 1
37099: PUSH
37100: LD_INT 4
37102: PLUS
37103: PUSH
37104: LD_VAR 0 2
37108: PUSH
37109: LD_INT 4
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: PUSH
37117: LD_VAR 0 1
37121: PUSH
37122: LD_VAR 0 2
37126: PUSH
37127: LD_INT 4
37129: PLUS
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: LD_VAR 0 1
37143: PUSH
37144: LD_INT 3
37146: MINUS
37147: PUSH
37148: LD_VAR 0 2
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: PUSH
37161: LD_VAR 0 1
37165: PUSH
37166: LD_INT 4
37168: MINUS
37169: PUSH
37170: LD_VAR 0 2
37174: PUSH
37175: LD_INT 4
37177: MINUS
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: ST_TO_ADDR
// end ; 3 :
37194: GO 37616
37196: LD_INT 3
37198: DOUBLE
37199: EQUAL
37200: IFTRUE 37204
37202: GO 37337
37204: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37205: LD_ADDR_VAR 0 5
37209: PUSH
37210: LD_VAR 0 1
37214: PUSH
37215: LD_INT 3
37217: PLUS
37218: PUSH
37219: LD_VAR 0 2
37223: PUSH
37224: LD_INT 4
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: PUSH
37232: LD_VAR 0 1
37236: PUSH
37237: LD_INT 4
37239: PLUS
37240: PUSH
37241: LD_VAR 0 2
37245: PUSH
37246: LD_INT 4
37248: PLUS
37249: PUSH
37250: LD_INT 5
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: PUSH
37258: LD_VAR 0 1
37262: PUSH
37263: LD_INT 4
37265: MINUS
37266: PUSH
37267: LD_VAR 0 2
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: PUSH
37280: LD_VAR 0 1
37284: PUSH
37285: LD_VAR 0 2
37289: PUSH
37290: LD_INT 4
37292: MINUS
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: PUSH
37302: LD_VAR 0 1
37306: PUSH
37307: LD_INT 3
37309: MINUS
37310: PUSH
37311: LD_VAR 0 2
37315: PUSH
37316: LD_INT 3
37318: MINUS
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
// end ; 4 :
37335: GO 37616
37337: LD_INT 4
37339: DOUBLE
37340: EQUAL
37341: IFTRUE 37345
37343: GO 37478
37345: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37346: LD_ADDR_VAR 0 5
37350: PUSH
37351: LD_VAR 0 1
37355: PUSH
37356: LD_VAR 0 2
37360: PUSH
37361: LD_INT 4
37363: PLUS
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: PUSH
37373: LD_VAR 0 1
37377: PUSH
37378: LD_INT 3
37380: PLUS
37381: PUSH
37382: LD_VAR 0 2
37386: PUSH
37387: LD_INT 3
37389: PLUS
37390: PUSH
37391: LD_INT 5
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: PUSH
37399: LD_VAR 0 1
37403: PUSH
37404: LD_INT 4
37406: PLUS
37407: PUSH
37408: LD_VAR 0 2
37412: PUSH
37413: LD_INT 4
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: LD_VAR 0 1
37425: PUSH
37426: LD_VAR 0 2
37430: PUSH
37431: LD_INT 3
37433: MINUS
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: PUSH
37443: LD_VAR 0 1
37447: PUSH
37448: LD_INT 4
37450: MINUS
37451: PUSH
37452: LD_VAR 0 2
37456: PUSH
37457: LD_INT 4
37459: MINUS
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
// end ; 5 :
37476: GO 37616
37478: LD_INT 5
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37615
37486: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37487: LD_ADDR_VAR 0 5
37491: PUSH
37492: LD_VAR 0 1
37496: PUSH
37497: LD_INT 4
37499: MINUS
37500: PUSH
37501: LD_VAR 0 2
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: PUSH
37514: LD_VAR 0 1
37518: PUSH
37519: LD_VAR 0 2
37523: PUSH
37524: LD_INT 4
37526: MINUS
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: PUSH
37536: LD_VAR 0 1
37540: PUSH
37541: LD_INT 4
37543: PLUS
37544: PUSH
37545: LD_VAR 0 2
37549: PUSH
37550: LD_INT 4
37552: PLUS
37553: PUSH
37554: LD_INT 5
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: PUSH
37562: LD_VAR 0 1
37566: PUSH
37567: LD_INT 3
37569: PLUS
37570: PUSH
37571: LD_VAR 0 2
37575: PUSH
37576: LD_INT 4
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: PUSH
37584: LD_VAR 0 1
37588: PUSH
37589: LD_VAR 0 2
37593: PUSH
37594: LD_INT 3
37596: PLUS
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: ST_TO_ADDR
// end ; end ;
37613: GO 37616
37615: POP
// result := list ;
37616: LD_ADDR_VAR 0 4
37620: PUSH
37621: LD_VAR 0 5
37625: ST_TO_ADDR
// end ;
37626: LD_VAR 0 4
37630: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37631: LD_INT 0
37633: PPUSH
37634: PPUSH
37635: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37636: LD_VAR 0 1
37640: NOT
37641: PUSH
37642: LD_VAR 0 2
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 4
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: IN
37665: NOT
37666: OR
37667: IFFALSE 37671
// exit ;
37669: GO 37754
// tmp := [ ] ;
37671: LD_ADDR_VAR 0 5
37675: PUSH
37676: EMPTY
37677: ST_TO_ADDR
// for i in units do
37678: LD_ADDR_VAR 0 4
37682: PUSH
37683: LD_VAR 0 1
37687: PUSH
37688: FOR_IN
37689: IFFALSE 37723
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37691: LD_ADDR_VAR 0 5
37695: PUSH
37696: LD_VAR 0 5
37700: PPUSH
37701: LD_VAR 0 4
37705: PPUSH
37706: LD_VAR 0 2
37710: PPUSH
37711: CALL_OW 259
37715: PPUSH
37716: CALL 39127 0 2
37720: ST_TO_ADDR
37721: GO 37688
37723: POP
37724: POP
// if not tmp then
37725: LD_VAR 0 5
37729: NOT
37730: IFFALSE 37734
// exit ;
37732: GO 37754
// result := SortListByListDesc ( units , tmp ) ;
37734: LD_ADDR_VAR 0 3
37738: PUSH
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_VAR 0 5
37748: PPUSH
37749: CALL_OW 77
37753: ST_TO_ADDR
// end ;
37754: LD_VAR 0 3
37758: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37759: LD_INT 0
37761: PPUSH
37762: PPUSH
37763: PPUSH
// result := false ;
37764: LD_ADDR_VAR 0 3
37768: PUSH
37769: LD_INT 0
37771: ST_TO_ADDR
// if not building then
37772: LD_VAR 0 2
37776: NOT
37777: IFFALSE 37781
// exit ;
37779: GO 37919
// x := GetX ( building ) ;
37781: LD_ADDR_VAR 0 4
37785: PUSH
37786: LD_VAR 0 2
37790: PPUSH
37791: CALL_OW 250
37795: ST_TO_ADDR
// y := GetY ( building ) ;
37796: LD_ADDR_VAR 0 5
37800: PUSH
37801: LD_VAR 0 2
37805: PPUSH
37806: CALL_OW 251
37810: ST_TO_ADDR
// if not x or not y then
37811: LD_VAR 0 4
37815: NOT
37816: PUSH
37817: LD_VAR 0 5
37821: NOT
37822: OR
37823: IFFALSE 37827
// exit ;
37825: GO 37919
// if GetTaskList ( unit ) then
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 437
37836: IFFALSE 37919
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37838: LD_STRING e
37840: PUSH
37841: LD_VAR 0 1
37845: PPUSH
37846: CALL_OW 437
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: PUSH
37855: LD_INT 1
37857: ARRAY
37858: EQUAL
37859: PUSH
37860: LD_VAR 0 4
37864: PUSH
37865: LD_VAR 0 1
37869: PPUSH
37870: CALL_OW 437
37874: PUSH
37875: LD_INT 1
37877: ARRAY
37878: PUSH
37879: LD_INT 2
37881: ARRAY
37882: EQUAL
37883: AND
37884: PUSH
37885: LD_VAR 0 5
37889: PUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 437
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PUSH
37904: LD_INT 3
37906: ARRAY
37907: EQUAL
37908: AND
37909: IFFALSE 37919
// result := true end ;
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_INT 1
37918: ST_TO_ADDR
// end ;
37919: LD_VAR 0 3
37923: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37924: LD_INT 0
37926: PPUSH
// result := false ;
37927: LD_ADDR_VAR 0 4
37931: PUSH
37932: LD_INT 0
37934: ST_TO_ADDR
// if GetTaskList ( unit ) then
37935: LD_VAR 0 1
37939: PPUSH
37940: CALL_OW 437
37944: IFFALSE 38027
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37946: LD_STRING M
37948: PUSH
37949: LD_VAR 0 1
37953: PPUSH
37954: CALL_OW 437
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: PUSH
37963: LD_INT 1
37965: ARRAY
37966: EQUAL
37967: PUSH
37968: LD_VAR 0 2
37972: PUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 437
37982: PUSH
37983: LD_INT 1
37985: ARRAY
37986: PUSH
37987: LD_INT 2
37989: ARRAY
37990: EQUAL
37991: AND
37992: PUSH
37993: LD_VAR 0 3
37997: PUSH
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 437
38007: PUSH
38008: LD_INT 1
38010: ARRAY
38011: PUSH
38012: LD_INT 3
38014: ARRAY
38015: EQUAL
38016: AND
38017: IFFALSE 38027
// result := true ;
38019: LD_ADDR_VAR 0 4
38023: PUSH
38024: LD_INT 1
38026: ST_TO_ADDR
// end ; end ;
38027: LD_VAR 0 4
38031: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38032: LD_INT 0
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
// if not unit or not area then
38038: LD_VAR 0 1
38042: NOT
38043: PUSH
38044: LD_VAR 0 2
38048: NOT
38049: OR
38050: IFFALSE 38054
// exit ;
38052: GO 38230
// tmp := AreaToList ( area , i ) ;
38054: LD_ADDR_VAR 0 6
38058: PUSH
38059: LD_VAR 0 2
38063: PPUSH
38064: LD_VAR 0 5
38068: PPUSH
38069: CALL_OW 517
38073: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38074: LD_ADDR_VAR 0 5
38078: PUSH
38079: DOUBLE
38080: LD_INT 1
38082: DEC
38083: ST_TO_ADDR
38084: LD_VAR 0 6
38088: PUSH
38089: LD_INT 1
38091: ARRAY
38092: PUSH
38093: FOR_TO
38094: IFFALSE 38228
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38096: LD_ADDR_VAR 0 7
38100: PUSH
38101: LD_VAR 0 6
38105: PUSH
38106: LD_INT 1
38108: ARRAY
38109: PUSH
38110: LD_VAR 0 5
38114: ARRAY
38115: PUSH
38116: LD_VAR 0 6
38120: PUSH
38121: LD_INT 2
38123: ARRAY
38124: PUSH
38125: LD_VAR 0 5
38129: ARRAY
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38135: LD_INT 92
38137: PUSH
38138: LD_VAR 0 7
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: PUSH
38147: LD_VAR 0 7
38151: PUSH
38152: LD_INT 2
38154: ARRAY
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: PPUSH
38165: CALL_OW 69
38169: PUSH
38170: LD_INT 0
38172: EQUAL
38173: IFFALSE 38226
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38175: LD_VAR 0 1
38179: PPUSH
38180: LD_VAR 0 7
38184: PUSH
38185: LD_INT 1
38187: ARRAY
38188: PPUSH
38189: LD_VAR 0 7
38193: PUSH
38194: LD_INT 2
38196: ARRAY
38197: PPUSH
38198: LD_VAR 0 3
38202: PPUSH
38203: CALL_OW 48
// result := IsPlaced ( unit ) ;
38207: LD_ADDR_VAR 0 4
38211: PUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 305
38221: ST_TO_ADDR
// exit ;
38222: POP
38223: POP
38224: GO 38230
// end ; end ;
38226: GO 38093
38228: POP
38229: POP
// end ;
38230: LD_VAR 0 4
38234: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38235: LD_INT 0
38237: PPUSH
38238: PPUSH
38239: PPUSH
// if not side or side > 8 then
38240: LD_VAR 0 1
38244: NOT
38245: PUSH
38246: LD_VAR 0 1
38250: PUSH
38251: LD_INT 8
38253: GREATER
38254: OR
38255: IFFALSE 38259
// exit ;
38257: GO 38446
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38259: LD_ADDR_VAR 0 4
38263: PUSH
38264: LD_INT 22
38266: PUSH
38267: LD_VAR 0 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 21
38278: PUSH
38279: LD_INT 3
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PPUSH
38290: CALL_OW 69
38294: ST_TO_ADDR
// if not tmp then
38295: LD_VAR 0 4
38299: NOT
38300: IFFALSE 38304
// exit ;
38302: GO 38446
// enable_addtolog := true ;
38304: LD_ADDR_OWVAR 81
38308: PUSH
38309: LD_INT 1
38311: ST_TO_ADDR
// AddToLog ( [ ) ;
38312: LD_STRING [
38314: PPUSH
38315: CALL_OW 561
// for i in tmp do
38319: LD_ADDR_VAR 0 3
38323: PUSH
38324: LD_VAR 0 4
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38437
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38332: LD_STRING [
38334: PUSH
38335: LD_VAR 0 3
38339: PPUSH
38340: CALL_OW 266
38344: STR
38345: PUSH
38346: LD_STRING , 
38348: STR
38349: PUSH
38350: LD_VAR 0 3
38354: PPUSH
38355: CALL_OW 250
38359: STR
38360: PUSH
38361: LD_STRING , 
38363: STR
38364: PUSH
38365: LD_VAR 0 3
38369: PPUSH
38370: CALL_OW 251
38374: STR
38375: PUSH
38376: LD_STRING , 
38378: STR
38379: PUSH
38380: LD_VAR 0 3
38384: PPUSH
38385: CALL_OW 254
38389: STR
38390: PUSH
38391: LD_STRING , 
38393: STR
38394: PUSH
38395: LD_VAR 0 3
38399: PPUSH
38400: LD_INT 1
38402: PPUSH
38403: CALL_OW 268
38407: STR
38408: PUSH
38409: LD_STRING , 
38411: STR
38412: PUSH
38413: LD_VAR 0 3
38417: PPUSH
38418: LD_INT 2
38420: PPUSH
38421: CALL_OW 268
38425: STR
38426: PUSH
38427: LD_STRING ],
38429: STR
38430: PPUSH
38431: CALL_OW 561
// end ;
38435: GO 38329
38437: POP
38438: POP
// AddToLog ( ]; ) ;
38439: LD_STRING ];
38441: PPUSH
38442: CALL_OW 561
// end ;
38446: LD_VAR 0 2
38450: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38451: LD_INT 0
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
// if not area or not rate or not max then
38458: LD_VAR 0 1
38462: NOT
38463: PUSH
38464: LD_VAR 0 2
38468: NOT
38469: OR
38470: PUSH
38471: LD_VAR 0 4
38475: NOT
38476: OR
38477: IFFALSE 38481
// exit ;
38479: GO 38670
// while 1 do
38481: LD_INT 1
38483: IFFALSE 38670
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38485: LD_ADDR_VAR 0 9
38489: PUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: LD_INT 1
38497: PPUSH
38498: CALL_OW 287
38502: PUSH
38503: LD_INT 10
38505: MUL
38506: ST_TO_ADDR
// r := rate / 10 ;
38507: LD_ADDR_VAR 0 7
38511: PUSH
38512: LD_VAR 0 2
38516: PUSH
38517: LD_INT 10
38519: DIVREAL
38520: ST_TO_ADDR
// time := 1 1$00 ;
38521: LD_ADDR_VAR 0 8
38525: PUSH
38526: LD_INT 2100
38528: ST_TO_ADDR
// if amount < min then
38529: LD_VAR 0 9
38533: PUSH
38534: LD_VAR 0 3
38538: LESS
38539: IFFALSE 38557
// r := r * 2 else
38541: LD_ADDR_VAR 0 7
38545: PUSH
38546: LD_VAR 0 7
38550: PUSH
38551: LD_INT 2
38553: MUL
38554: ST_TO_ADDR
38555: GO 38583
// if amount > max then
38557: LD_VAR 0 9
38561: PUSH
38562: LD_VAR 0 4
38566: GREATER
38567: IFFALSE 38583
// r := r / 2 ;
38569: LD_ADDR_VAR 0 7
38573: PUSH
38574: LD_VAR 0 7
38578: PUSH
38579: LD_INT 2
38581: DIVREAL
38582: ST_TO_ADDR
// time := time / r ;
38583: LD_ADDR_VAR 0 8
38587: PUSH
38588: LD_VAR 0 8
38592: PUSH
38593: LD_VAR 0 7
38597: DIVREAL
38598: ST_TO_ADDR
// if time < 0 then
38599: LD_VAR 0 8
38603: PUSH
38604: LD_INT 0
38606: LESS
38607: IFFALSE 38624
// time := time * - 1 ;
38609: LD_ADDR_VAR 0 8
38613: PUSH
38614: LD_VAR 0 8
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: MUL
38623: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38624: LD_VAR 0 8
38628: PUSH
38629: LD_INT 35
38631: PPUSH
38632: LD_INT 875
38634: PPUSH
38635: CALL_OW 12
38639: PLUS
38640: PPUSH
38641: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38645: LD_INT 1
38647: PPUSH
38648: LD_INT 5
38650: PPUSH
38651: CALL_OW 12
38655: PPUSH
38656: LD_VAR 0 1
38660: PPUSH
38661: LD_INT 1
38663: PPUSH
38664: CALL_OW 55
// end ;
38668: GO 38481
// end ;
38670: LD_VAR 0 5
38674: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38675: LD_INT 0
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
// if not turrets or not factories then
38685: LD_VAR 0 1
38689: NOT
38690: PUSH
38691: LD_VAR 0 2
38695: NOT
38696: OR
38697: IFFALSE 38701
// exit ;
38699: GO 39008
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38701: LD_ADDR_VAR 0 10
38705: PUSH
38706: LD_INT 5
38708: PUSH
38709: LD_INT 6
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: LD_INT 4
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 24
38743: PUSH
38744: LD_INT 25
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 23
38753: PUSH
38754: LD_INT 27
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 42
38767: PUSH
38768: LD_INT 43
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 44
38777: PUSH
38778: LD_INT 46
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 45
38787: PUSH
38788: LD_INT 47
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: LIST
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: LIST
38804: ST_TO_ADDR
// result := [ ] ;
38805: LD_ADDR_VAR 0 3
38809: PUSH
38810: EMPTY
38811: ST_TO_ADDR
// for i in turrets do
38812: LD_ADDR_VAR 0 4
38816: PUSH
38817: LD_VAR 0 1
38821: PUSH
38822: FOR_IN
38823: IFFALSE 39006
// begin nat := GetNation ( i ) ;
38825: LD_ADDR_VAR 0 7
38829: PUSH
38830: LD_VAR 0 4
38834: PPUSH
38835: CALL_OW 248
38839: ST_TO_ADDR
// weapon := 0 ;
38840: LD_ADDR_VAR 0 8
38844: PUSH
38845: LD_INT 0
38847: ST_TO_ADDR
// if not nat then
38848: LD_VAR 0 7
38852: NOT
38853: IFFALSE 38857
// continue ;
38855: GO 38822
// for j in list [ nat ] do
38857: LD_ADDR_VAR 0 5
38861: PUSH
38862: LD_VAR 0 10
38866: PUSH
38867: LD_VAR 0 7
38871: ARRAY
38872: PUSH
38873: FOR_IN
38874: IFFALSE 38915
// if GetBWeapon ( i ) = j [ 1 ] then
38876: LD_VAR 0 4
38880: PPUSH
38881: CALL_OW 269
38885: PUSH
38886: LD_VAR 0 5
38890: PUSH
38891: LD_INT 1
38893: ARRAY
38894: EQUAL
38895: IFFALSE 38913
// begin weapon := j [ 2 ] ;
38897: LD_ADDR_VAR 0 8
38901: PUSH
38902: LD_VAR 0 5
38906: PUSH
38907: LD_INT 2
38909: ARRAY
38910: ST_TO_ADDR
// break ;
38911: GO 38915
// end ;
38913: GO 38873
38915: POP
38916: POP
// if not weapon then
38917: LD_VAR 0 8
38921: NOT
38922: IFFALSE 38926
// continue ;
38924: GO 38822
// for k in factories do
38926: LD_ADDR_VAR 0 6
38930: PUSH
38931: LD_VAR 0 2
38935: PUSH
38936: FOR_IN
38937: IFFALSE 39002
// begin weapons := AvailableWeaponList ( k ) ;
38939: LD_ADDR_VAR 0 9
38943: PUSH
38944: LD_VAR 0 6
38948: PPUSH
38949: CALL_OW 478
38953: ST_TO_ADDR
// if not weapons then
38954: LD_VAR 0 9
38958: NOT
38959: IFFALSE 38963
// continue ;
38961: GO 38936
// if weapon in weapons then
38963: LD_VAR 0 8
38967: PUSH
38968: LD_VAR 0 9
38972: IN
38973: IFFALSE 39000
// begin result := [ i , weapon ] ;
38975: LD_ADDR_VAR 0 3
38979: PUSH
38980: LD_VAR 0 4
38984: PUSH
38985: LD_VAR 0 8
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: ST_TO_ADDR
// exit ;
38994: POP
38995: POP
38996: POP
38997: POP
38998: GO 39008
// end ; end ;
39000: GO 38936
39002: POP
39003: POP
// end ;
39004: GO 38822
39006: POP
39007: POP
// end ;
39008: LD_VAR 0 3
39012: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39013: LD_INT 0
39015: PPUSH
// if not side or side > 8 then
39016: LD_VAR 0 3
39020: NOT
39021: PUSH
39022: LD_VAR 0 3
39026: PUSH
39027: LD_INT 8
39029: GREATER
39030: OR
39031: IFFALSE 39035
// exit ;
39033: GO 39094
// if not range then
39035: LD_VAR 0 4
39039: NOT
39040: IFFALSE 39051
// range := - 12 ;
39042: LD_ADDR_VAR 0 4
39046: PUSH
39047: LD_INT 12
39049: NEG
39050: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39051: LD_VAR 0 1
39055: PPUSH
39056: LD_VAR 0 2
39060: PPUSH
39061: LD_VAR 0 3
39065: PPUSH
39066: LD_VAR 0 4
39070: PPUSH
39071: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39075: LD_VAR 0 1
39079: PPUSH
39080: LD_VAR 0 2
39084: PPUSH
39085: LD_VAR 0 3
39089: PPUSH
39090: CALL_OW 331
// end ;
39094: LD_VAR 0 5
39098: RET
// export function Video ( mode ) ; begin
39099: LD_INT 0
39101: PPUSH
// ingame_video = mode ;
39102: LD_ADDR_OWVAR 52
39106: PUSH
39107: LD_VAR 0 1
39111: ST_TO_ADDR
// interface_hidden = mode ;
39112: LD_ADDR_OWVAR 54
39116: PUSH
39117: LD_VAR 0 1
39121: ST_TO_ADDR
// end ;
39122: LD_VAR 0 2
39126: RET
// export function Join ( array , element ) ; begin
39127: LD_INT 0
39129: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: LD_VAR 0 1
39144: PUSH
39145: LD_INT 1
39147: PLUS
39148: PPUSH
39149: LD_VAR 0 2
39153: PPUSH
39154: CALL_OW 1
39158: ST_TO_ADDR
// end ;
39159: LD_VAR 0 3
39163: RET
// export function JoinUnion ( array , element ) ; begin
39164: LD_INT 0
39166: PPUSH
// result := array union element ;
39167: LD_ADDR_VAR 0 3
39171: PUSH
39172: LD_VAR 0 1
39176: PUSH
39177: LD_VAR 0 2
39181: UNION
39182: ST_TO_ADDR
// end ;
39183: LD_VAR 0 3
39187: RET
// export function GetBehemoths ( side ) ; begin
39188: LD_INT 0
39190: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39191: LD_ADDR_VAR 0 2
39195: PUSH
39196: LD_INT 22
39198: PUSH
39199: LD_VAR 0 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 31
39210: PUSH
39211: LD_INT 25
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PPUSH
39222: CALL_OW 69
39226: ST_TO_ADDR
// end ;
39227: LD_VAR 0 2
39231: RET
// export function Shuffle ( array ) ; var i , index ; begin
39232: LD_INT 0
39234: PPUSH
39235: PPUSH
39236: PPUSH
// result := [ ] ;
39237: LD_ADDR_VAR 0 2
39241: PUSH
39242: EMPTY
39243: ST_TO_ADDR
// if not array then
39244: LD_VAR 0 1
39248: NOT
39249: IFFALSE 39253
// exit ;
39251: GO 39352
// Randomize ;
39253: CALL_OW 10
// for i = array downto 1 do
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: DOUBLE
39263: LD_VAR 0 1
39267: INC
39268: ST_TO_ADDR
39269: LD_INT 1
39271: PUSH
39272: FOR_DOWNTO
39273: IFFALSE 39350
// begin index := rand ( 1 , array ) ;
39275: LD_ADDR_VAR 0 4
39279: PUSH
39280: LD_INT 1
39282: PPUSH
39283: LD_VAR 0 1
39287: PPUSH
39288: CALL_OW 12
39292: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39293: LD_ADDR_VAR 0 2
39297: PUSH
39298: LD_VAR 0 2
39302: PPUSH
39303: LD_VAR 0 2
39307: PUSH
39308: LD_INT 1
39310: PLUS
39311: PPUSH
39312: LD_VAR 0 1
39316: PUSH
39317: LD_VAR 0 4
39321: ARRAY
39322: PPUSH
39323: CALL_OW 2
39327: ST_TO_ADDR
// array := Delete ( array , index ) ;
39328: LD_ADDR_VAR 0 1
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_VAR 0 4
39342: PPUSH
39343: CALL_OW 3
39347: ST_TO_ADDR
// end ;
39348: GO 39272
39350: POP
39351: POP
// end ;
39352: LD_VAR 0 2
39356: RET
// export function GetBaseMaterials ( base ) ; begin
39357: LD_INT 0
39359: PPUSH
// result := [ 0 , 0 , 0 ] ;
39360: LD_ADDR_VAR 0 2
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: ST_TO_ADDR
// if not base then
39379: LD_VAR 0 1
39383: NOT
39384: IFFALSE 39388
// exit ;
39386: GO 39437
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39388: LD_ADDR_VAR 0 2
39392: PUSH
39393: LD_VAR 0 1
39397: PPUSH
39398: LD_INT 1
39400: PPUSH
39401: CALL_OW 275
39405: PUSH
39406: LD_VAR 0 1
39410: PPUSH
39411: LD_INT 2
39413: PPUSH
39414: CALL_OW 275
39418: PUSH
39419: LD_VAR 0 1
39423: PPUSH
39424: LD_INT 3
39426: PPUSH
39427: CALL_OW 275
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: ST_TO_ADDR
// end ;
39437: LD_VAR 0 2
39441: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39442: LD_INT 0
39444: PPUSH
39445: PPUSH
// result := array ;
39446: LD_ADDR_VAR 0 3
39450: PUSH
39451: LD_VAR 0 1
39455: ST_TO_ADDR
// if size >= result then
39456: LD_VAR 0 2
39460: PUSH
39461: LD_VAR 0 3
39465: GREATEREQUAL
39466: IFFALSE 39470
// exit ;
39468: GO 39520
// if size then
39470: LD_VAR 0 2
39474: IFFALSE 39520
// for i := array downto size do
39476: LD_ADDR_VAR 0 4
39480: PUSH
39481: DOUBLE
39482: LD_VAR 0 1
39486: INC
39487: ST_TO_ADDR
39488: LD_VAR 0 2
39492: PUSH
39493: FOR_DOWNTO
39494: IFFALSE 39518
// result := Delete ( result , result ) ;
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_VAR 0 3
39505: PPUSH
39506: LD_VAR 0 3
39510: PPUSH
39511: CALL_OW 3
39515: ST_TO_ADDR
39516: GO 39493
39518: POP
39519: POP
// end ;
39520: LD_VAR 0 3
39524: RET
// export function ComExit ( unit ) ; var tmp ; begin
39525: LD_INT 0
39527: PPUSH
39528: PPUSH
// if not IsInUnit ( unit ) then
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL_OW 310
39538: NOT
39539: IFFALSE 39543
// exit ;
39541: GO 39603
// tmp := IsInUnit ( unit ) ;
39543: LD_ADDR_VAR 0 3
39547: PUSH
39548: LD_VAR 0 1
39552: PPUSH
39553: CALL_OW 310
39557: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39558: LD_VAR 0 3
39562: PPUSH
39563: CALL_OW 247
39567: PUSH
39568: LD_INT 2
39570: EQUAL
39571: IFFALSE 39584
// ComExitVehicle ( unit ) else
39573: LD_VAR 0 1
39577: PPUSH
39578: CALL_OW 121
39582: GO 39593
// ComExitBuilding ( unit ) ;
39584: LD_VAR 0 1
39588: PPUSH
39589: CALL_OW 122
// result := tmp ;
39593: LD_ADDR_VAR 0 2
39597: PUSH
39598: LD_VAR 0 3
39602: ST_TO_ADDR
// end ;
39603: LD_VAR 0 2
39607: RET
// export function ComExitAll ( units ) ; var i ; begin
39608: LD_INT 0
39610: PPUSH
39611: PPUSH
// if not units then
39612: LD_VAR 0 1
39616: NOT
39617: IFFALSE 39621
// exit ;
39619: GO 39647
// for i in units do
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: LD_VAR 0 1
39630: PUSH
39631: FOR_IN
39632: IFFALSE 39645
// ComExit ( i ) ;
39634: LD_VAR 0 3
39638: PPUSH
39639: CALL 39525 0 1
39643: GO 39631
39645: POP
39646: POP
// end ;
39647: LD_VAR 0 2
39651: RET
// export function ResetHc ; begin
39652: LD_INT 0
39654: PPUSH
// InitHc ;
39655: CALL_OW 19
// hc_importance := 0 ;
39659: LD_ADDR_OWVAR 32
39663: PUSH
39664: LD_INT 0
39666: ST_TO_ADDR
// end ;
39667: LD_VAR 0 1
39671: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39672: LD_INT 0
39674: PPUSH
39675: PPUSH
39676: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39677: LD_ADDR_VAR 0 6
39681: PUSH
39682: LD_VAR 0 1
39686: PUSH
39687: LD_VAR 0 3
39691: PLUS
39692: PUSH
39693: LD_INT 2
39695: DIV
39696: ST_TO_ADDR
// if _x < 0 then
39697: LD_VAR 0 6
39701: PUSH
39702: LD_INT 0
39704: LESS
39705: IFFALSE 39722
// _x := _x * - 1 ;
39707: LD_ADDR_VAR 0 6
39711: PUSH
39712: LD_VAR 0 6
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: MUL
39721: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39722: LD_ADDR_VAR 0 7
39726: PUSH
39727: LD_VAR 0 2
39731: PUSH
39732: LD_VAR 0 4
39736: PLUS
39737: PUSH
39738: LD_INT 2
39740: DIV
39741: ST_TO_ADDR
// if _y < 0 then
39742: LD_VAR 0 7
39746: PUSH
39747: LD_INT 0
39749: LESS
39750: IFFALSE 39767
// _y := _y * - 1 ;
39752: LD_ADDR_VAR 0 7
39756: PUSH
39757: LD_VAR 0 7
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: MUL
39766: ST_TO_ADDR
// result := [ _x , _y ] ;
39767: LD_ADDR_VAR 0 5
39771: PUSH
39772: LD_VAR 0 6
39776: PUSH
39777: LD_VAR 0 7
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: ST_TO_ADDR
// end ;
39786: LD_VAR 0 5
39790: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39791: LD_INT 0
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
// task := GetTaskList ( unit ) ;
39797: LD_ADDR_VAR 0 7
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 437
39811: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39812: LD_VAR 0 7
39816: NOT
39817: PUSH
39818: LD_VAR 0 1
39822: PPUSH
39823: LD_VAR 0 2
39827: PPUSH
39828: CALL_OW 308
39832: NOT
39833: AND
39834: IFFALSE 39838
// exit ;
39836: GO 39956
// if IsInArea ( unit , area ) then
39838: LD_VAR 0 1
39842: PPUSH
39843: LD_VAR 0 2
39847: PPUSH
39848: CALL_OW 308
39852: IFFALSE 39870
// begin ComMoveToArea ( unit , goAway ) ;
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_VAR 0 3
39863: PPUSH
39864: CALL_OW 113
// exit ;
39868: GO 39956
// end ; if task [ 1 ] [ 1 ] <> M then
39870: LD_VAR 0 7
39874: PUSH
39875: LD_INT 1
39877: ARRAY
39878: PUSH
39879: LD_INT 1
39881: ARRAY
39882: PUSH
39883: LD_STRING M
39885: NONEQUAL
39886: IFFALSE 39890
// exit ;
39888: GO 39956
// x := task [ 1 ] [ 2 ] ;
39890: LD_ADDR_VAR 0 5
39894: PUSH
39895: LD_VAR 0 7
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: PUSH
39904: LD_INT 2
39906: ARRAY
39907: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39908: LD_ADDR_VAR 0 6
39912: PUSH
39913: LD_VAR 0 7
39917: PUSH
39918: LD_INT 1
39920: ARRAY
39921: PUSH
39922: LD_INT 3
39924: ARRAY
39925: ST_TO_ADDR
// if InArea ( x , y , area ) then
39926: LD_VAR 0 5
39930: PPUSH
39931: LD_VAR 0 6
39935: PPUSH
39936: LD_VAR 0 2
39940: PPUSH
39941: CALL_OW 309
39945: IFFALSE 39956
// ComStop ( unit ) ;
39947: LD_VAR 0 1
39951: PPUSH
39952: CALL_OW 141
// end ;
39956: LD_VAR 0 4
39960: RET
// export function Abs ( value ) ; begin
39961: LD_INT 0
39963: PPUSH
// result := value ;
39964: LD_ADDR_VAR 0 2
39968: PUSH
39969: LD_VAR 0 1
39973: ST_TO_ADDR
// if value < 0 then
39974: LD_VAR 0 1
39978: PUSH
39979: LD_INT 0
39981: LESS
39982: IFFALSE 39999
// result := value * - 1 ;
39984: LD_ADDR_VAR 0 2
39988: PUSH
39989: LD_VAR 0 1
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: MUL
39998: ST_TO_ADDR
// end ;
39999: LD_VAR 0 2
40003: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40004: LD_INT 0
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
// if not unit or not building then
40014: LD_VAR 0 1
40018: NOT
40019: PUSH
40020: LD_VAR 0 2
40024: NOT
40025: OR
40026: IFFALSE 40030
// exit ;
40028: GO 40256
// x := GetX ( building ) ;
40030: LD_ADDR_VAR 0 4
40034: PUSH
40035: LD_VAR 0 2
40039: PPUSH
40040: CALL_OW 250
40044: ST_TO_ADDR
// y := GetY ( building ) ;
40045: LD_ADDR_VAR 0 6
40049: PUSH
40050: LD_VAR 0 2
40054: PPUSH
40055: CALL_OW 251
40059: ST_TO_ADDR
// d := GetDir ( building ) ;
40060: LD_ADDR_VAR 0 8
40064: PUSH
40065: LD_VAR 0 2
40069: PPUSH
40070: CALL_OW 254
40074: ST_TO_ADDR
// r := 4 ;
40075: LD_ADDR_VAR 0 9
40079: PUSH
40080: LD_INT 4
40082: ST_TO_ADDR
// for i := 1 to 5 do
40083: LD_ADDR_VAR 0 10
40087: PUSH
40088: DOUBLE
40089: LD_INT 1
40091: DEC
40092: ST_TO_ADDR
40093: LD_INT 5
40095: PUSH
40096: FOR_TO
40097: IFFALSE 40254
// begin _x := ShiftX ( x , d , r + i ) ;
40099: LD_ADDR_VAR 0 5
40103: PUSH
40104: LD_VAR 0 4
40108: PPUSH
40109: LD_VAR 0 8
40113: PPUSH
40114: LD_VAR 0 9
40118: PUSH
40119: LD_VAR 0 10
40123: PLUS
40124: PPUSH
40125: CALL_OW 272
40129: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40130: LD_ADDR_VAR 0 7
40134: PUSH
40135: LD_VAR 0 6
40139: PPUSH
40140: LD_VAR 0 8
40144: PPUSH
40145: LD_VAR 0 9
40149: PUSH
40150: LD_VAR 0 10
40154: PLUS
40155: PPUSH
40156: CALL_OW 273
40160: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40161: LD_VAR 0 5
40165: PPUSH
40166: LD_VAR 0 7
40170: PPUSH
40171: CALL_OW 488
40175: PUSH
40176: LD_VAR 0 5
40180: PPUSH
40181: LD_VAR 0 7
40185: PPUSH
40186: CALL_OW 428
40190: PPUSH
40191: CALL_OW 247
40195: PUSH
40196: LD_INT 3
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: IN
40206: NOT
40207: AND
40208: IFFALSE 40252
// begin ComMoveXY ( unit , _x , _y ) ;
40210: LD_VAR 0 1
40214: PPUSH
40215: LD_VAR 0 5
40219: PPUSH
40220: LD_VAR 0 7
40224: PPUSH
40225: CALL_OW 111
// result := [ _x , _y ] ;
40229: LD_ADDR_VAR 0 3
40233: PUSH
40234: LD_VAR 0 5
40238: PUSH
40239: LD_VAR 0 7
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// exit ;
40248: POP
40249: POP
40250: GO 40256
// end ; end ;
40252: GO 40096
40254: POP
40255: POP
// end ;
40256: LD_VAR 0 3
40260: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40261: LD_INT 0
40263: PPUSH
40264: PPUSH
40265: PPUSH
// result := 0 ;
40266: LD_ADDR_VAR 0 3
40270: PUSH
40271: LD_INT 0
40273: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40274: LD_VAR 0 1
40278: PUSH
40279: LD_INT 0
40281: LESS
40282: PUSH
40283: LD_VAR 0 1
40287: PUSH
40288: LD_INT 8
40290: GREATER
40291: OR
40292: PUSH
40293: LD_VAR 0 2
40297: PUSH
40298: LD_INT 0
40300: LESS
40301: OR
40302: PUSH
40303: LD_VAR 0 2
40307: PUSH
40308: LD_INT 8
40310: GREATER
40311: OR
40312: IFFALSE 40316
// exit ;
40314: GO 40391
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40316: LD_ADDR_VAR 0 4
40320: PUSH
40321: LD_INT 22
40323: PUSH
40324: LD_VAR 0 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PPUSH
40333: CALL_OW 69
40337: PUSH
40338: FOR_IN
40339: IFFALSE 40389
// begin un := UnitShoot ( i ) ;
40341: LD_ADDR_VAR 0 5
40345: PUSH
40346: LD_VAR 0 4
40350: PPUSH
40351: CALL_OW 504
40355: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40356: LD_VAR 0 5
40360: PPUSH
40361: CALL_OW 255
40365: PUSH
40366: LD_VAR 0 1
40370: EQUAL
40371: IFFALSE 40387
// begin result := un ;
40373: LD_ADDR_VAR 0 3
40377: PUSH
40378: LD_VAR 0 5
40382: ST_TO_ADDR
// exit ;
40383: POP
40384: POP
40385: GO 40391
// end ; end ;
40387: GO 40338
40389: POP
40390: POP
// end ;
40391: LD_VAR 0 3
40395: RET
// export function GetCargoBay ( units ) ; begin
40396: LD_INT 0
40398: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40399: LD_ADDR_VAR 0 2
40403: PUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 34
40414: PUSH
40415: LD_INT 12
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 34
40424: PUSH
40425: LD_INT 51
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 34
40434: PUSH
40435: LD_INT 32
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 34
40444: PUSH
40445: LD_INT 89
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: PPUSH
40459: CALL_OW 72
40463: ST_TO_ADDR
// end ;
40464: LD_VAR 0 2
40468: RET
// export function Negate ( value ) ; begin
40469: LD_INT 0
40471: PPUSH
// result := not value ;
40472: LD_ADDR_VAR 0 2
40476: PUSH
40477: LD_VAR 0 1
40481: NOT
40482: ST_TO_ADDR
// end ;
40483: LD_VAR 0 2
40487: RET
// export function Inc ( value ) ; begin
40488: LD_INT 0
40490: PPUSH
// result := value + 1 ;
40491: LD_ADDR_VAR 0 2
40495: PUSH
40496: LD_VAR 0 1
40500: PUSH
40501: LD_INT 1
40503: PLUS
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 2
40509: RET
// export function Dec ( value ) ; begin
40510: LD_INT 0
40512: PPUSH
// result := value - 1 ;
40513: LD_ADDR_VAR 0 2
40517: PUSH
40518: LD_VAR 0 1
40522: PUSH
40523: LD_INT 1
40525: MINUS
40526: ST_TO_ADDR
// end ;
40527: LD_VAR 0 2
40531: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40532: LD_INT 0
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40542: LD_VAR 0 1
40546: PPUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: CALL_OW 488
40556: NOT
40557: PUSH
40558: LD_VAR 0 3
40562: PPUSH
40563: LD_VAR 0 4
40567: PPUSH
40568: CALL_OW 488
40572: NOT
40573: OR
40574: IFFALSE 40587
// begin result := - 1 ;
40576: LD_ADDR_VAR 0 5
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: ST_TO_ADDR
// exit ;
40585: GO 40822
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40587: LD_ADDR_VAR 0 12
40591: PUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: LD_VAR 0 2
40601: PPUSH
40602: LD_VAR 0 3
40606: PPUSH
40607: LD_VAR 0 4
40611: PPUSH
40612: CALL 39672 0 4
40616: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40617: LD_ADDR_VAR 0 11
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: LD_VAR 0 2
40631: PPUSH
40632: LD_VAR 0 12
40636: PUSH
40637: LD_INT 1
40639: ARRAY
40640: PPUSH
40641: LD_VAR 0 12
40645: PUSH
40646: LD_INT 2
40648: ARRAY
40649: PPUSH
40650: CALL_OW 298
40654: ST_TO_ADDR
// distance := 9999 ;
40655: LD_ADDR_VAR 0 10
40659: PUSH
40660: LD_INT 9999
40662: ST_TO_ADDR
// for i := 0 to 5 do
40663: LD_ADDR_VAR 0 6
40667: PUSH
40668: DOUBLE
40669: LD_INT 0
40671: DEC
40672: ST_TO_ADDR
40673: LD_INT 5
40675: PUSH
40676: FOR_TO
40677: IFFALSE 40820
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40679: LD_ADDR_VAR 0 7
40683: PUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: LD_VAR 0 6
40693: PPUSH
40694: LD_VAR 0 11
40698: PPUSH
40699: CALL_OW 272
40703: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40704: LD_ADDR_VAR 0 8
40708: PUSH
40709: LD_VAR 0 2
40713: PPUSH
40714: LD_VAR 0 6
40718: PPUSH
40719: LD_VAR 0 11
40723: PPUSH
40724: CALL_OW 273
40728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40729: LD_VAR 0 7
40733: PPUSH
40734: LD_VAR 0 8
40738: PPUSH
40739: CALL_OW 488
40743: NOT
40744: IFFALSE 40748
// continue ;
40746: GO 40676
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40748: LD_ADDR_VAR 0 9
40752: PUSH
40753: LD_VAR 0 12
40757: PUSH
40758: LD_INT 1
40760: ARRAY
40761: PPUSH
40762: LD_VAR 0 12
40766: PUSH
40767: LD_INT 2
40769: ARRAY
40770: PPUSH
40771: LD_VAR 0 7
40775: PPUSH
40776: LD_VAR 0 8
40780: PPUSH
40781: CALL_OW 298
40785: ST_TO_ADDR
// if tmp < distance then
40786: LD_VAR 0 9
40790: PUSH
40791: LD_VAR 0 10
40795: LESS
40796: IFFALSE 40818
// begin result := i ;
40798: LD_ADDR_VAR 0 5
40802: PUSH
40803: LD_VAR 0 6
40807: ST_TO_ADDR
// distance := tmp ;
40808: LD_ADDR_VAR 0 10
40812: PUSH
40813: LD_VAR 0 9
40817: ST_TO_ADDR
// end ; end ;
40818: GO 40676
40820: POP
40821: POP
// end ;
40822: LD_VAR 0 5
40826: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40827: LD_INT 0
40829: PPUSH
40830: PPUSH
// if not driver or not IsInUnit ( driver ) then
40831: LD_VAR 0 1
40835: NOT
40836: PUSH
40837: LD_VAR 0 1
40841: PPUSH
40842: CALL_OW 310
40846: NOT
40847: OR
40848: IFFALSE 40852
// exit ;
40850: GO 40942
// vehicle := IsInUnit ( driver ) ;
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 310
40866: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_STRING \
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: PUSH
40902: LD_STRING E
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_VAR 0 3
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PPUSH
40938: CALL_OW 446
// end ;
40942: LD_VAR 0 2
40946: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40947: LD_INT 0
40949: PPUSH
40950: PPUSH
// if not driver or not IsInUnit ( driver ) then
40951: LD_VAR 0 1
40955: NOT
40956: PUSH
40957: LD_VAR 0 1
40961: PPUSH
40962: CALL_OW 310
40966: NOT
40967: OR
40968: IFFALSE 40972
// exit ;
40970: GO 41062
// vehicle := IsInUnit ( driver ) ;
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 310
40986: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40987: LD_VAR 0 1
40991: PPUSH
40992: LD_STRING \
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: PUSH
41022: LD_STRING E
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_VAR 0 3
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PPUSH
41058: CALL_OW 447
// end ;
41062: LD_VAR 0 2
41066: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41067: LD_INT 0
41069: PPUSH
41070: PPUSH
41071: PPUSH
// tmp := [ ] ;
41072: LD_ADDR_VAR 0 5
41076: PUSH
41077: EMPTY
41078: ST_TO_ADDR
// for i in units do
41079: LD_ADDR_VAR 0 4
41083: PUSH
41084: LD_VAR 0 1
41088: PUSH
41089: FOR_IN
41090: IFFALSE 41128
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41092: LD_ADDR_VAR 0 5
41096: PUSH
41097: LD_VAR 0 5
41101: PPUSH
41102: LD_VAR 0 5
41106: PUSH
41107: LD_INT 1
41109: PLUS
41110: PPUSH
41111: LD_VAR 0 4
41115: PPUSH
41116: CALL_OW 256
41120: PPUSH
41121: CALL_OW 2
41125: ST_TO_ADDR
41126: GO 41089
41128: POP
41129: POP
// if not tmp then
41130: LD_VAR 0 5
41134: NOT
41135: IFFALSE 41139
// exit ;
41137: GO 41187
// if asc then
41139: LD_VAR 0 2
41143: IFFALSE 41167
// result := SortListByListAsc ( units , tmp ) else
41145: LD_ADDR_VAR 0 3
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: LD_VAR 0 5
41159: PPUSH
41160: CALL_OW 76
41164: ST_TO_ADDR
41165: GO 41187
// result := SortListByListDesc ( units , tmp ) ;
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: LD_VAR 0 5
41181: PPUSH
41182: CALL_OW 77
41186: ST_TO_ADDR
// end ;
41187: LD_VAR 0 3
41191: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41192: LD_INT 0
41194: PPUSH
41195: PPUSH
// task := GetTaskList ( mech ) ;
41196: LD_ADDR_VAR 0 4
41200: PUSH
41201: LD_VAR 0 1
41205: PPUSH
41206: CALL_OW 437
41210: ST_TO_ADDR
// if not task then
41211: LD_VAR 0 4
41215: NOT
41216: IFFALSE 41220
// exit ;
41218: GO 41262
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41220: LD_ADDR_VAR 0 3
41224: PUSH
41225: LD_VAR 0 4
41229: PUSH
41230: LD_INT 1
41232: ARRAY
41233: PUSH
41234: LD_INT 1
41236: ARRAY
41237: PUSH
41238: LD_STRING r
41240: EQUAL
41241: PUSH
41242: LD_VAR 0 4
41246: PUSH
41247: LD_INT 1
41249: ARRAY
41250: PUSH
41251: LD_INT 4
41253: ARRAY
41254: PUSH
41255: LD_VAR 0 2
41259: EQUAL
41260: AND
41261: ST_TO_ADDR
// end ;
41262: LD_VAR 0 3
41266: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41267: LD_INT 0
41269: PPUSH
// SetDir ( unit , d ) ;
41270: LD_VAR 0 1
41274: PPUSH
41275: LD_VAR 0 4
41279: PPUSH
41280: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41284: LD_VAR 0 1
41288: PPUSH
41289: LD_VAR 0 2
41293: PPUSH
41294: LD_VAR 0 3
41298: PPUSH
41299: LD_VAR 0 5
41303: PPUSH
41304: CALL_OW 48
// end ;
41308: LD_VAR 0 6
41312: RET
// export function ToNaturalNumber ( number ) ; begin
41313: LD_INT 0
41315: PPUSH
// result := number div 1 ;
41316: LD_ADDR_VAR 0 2
41320: PUSH
41321: LD_VAR 0 1
41325: PUSH
41326: LD_INT 1
41328: DIV
41329: ST_TO_ADDR
// if number < 0 then
41330: LD_VAR 0 1
41334: PUSH
41335: LD_INT 0
41337: LESS
41338: IFFALSE 41348
// result := 0 ;
41340: LD_ADDR_VAR 0 2
41344: PUSH
41345: LD_INT 0
41347: ST_TO_ADDR
// end ;
41348: LD_VAR 0 2
41352: RET
// export function SortByClass ( units , class ) ; var un ; begin
41353: LD_INT 0
41355: PPUSH
41356: PPUSH
// if not units or not class then
41357: LD_VAR 0 1
41361: NOT
41362: PUSH
41363: LD_VAR 0 2
41367: NOT
41368: OR
41369: IFFALSE 41373
// exit ;
41371: GO 41468
// result := [ ] ;
41373: LD_ADDR_VAR 0 3
41377: PUSH
41378: EMPTY
41379: ST_TO_ADDR
// for un in units do
41380: LD_ADDR_VAR 0 4
41384: PUSH
41385: LD_VAR 0 1
41389: PUSH
41390: FOR_IN
41391: IFFALSE 41466
// if GetClass ( un ) = class then
41393: LD_VAR 0 4
41397: PPUSH
41398: CALL_OW 257
41402: PUSH
41403: LD_VAR 0 2
41407: EQUAL
41408: IFFALSE 41435
// result := Insert ( result , 1 , un ) else
41410: LD_ADDR_VAR 0 3
41414: PUSH
41415: LD_VAR 0 3
41419: PPUSH
41420: LD_INT 1
41422: PPUSH
41423: LD_VAR 0 4
41427: PPUSH
41428: CALL_OW 2
41432: ST_TO_ADDR
41433: GO 41464
// result := Replace ( result , result + 1 , un ) ;
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_VAR 0 3
41444: PPUSH
41445: LD_VAR 0 3
41449: PUSH
41450: LD_INT 1
41452: PLUS
41453: PPUSH
41454: LD_VAR 0 4
41458: PPUSH
41459: CALL_OW 1
41463: ST_TO_ADDR
41464: GO 41390
41466: POP
41467: POP
// end ;
41468: LD_VAR 0 3
41472: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
// result := [ ] ;
41482: LD_ADDR_VAR 0 4
41486: PUSH
41487: EMPTY
41488: ST_TO_ADDR
// if x - r < 0 then
41489: LD_VAR 0 1
41493: PUSH
41494: LD_VAR 0 3
41498: MINUS
41499: PUSH
41500: LD_INT 0
41502: LESS
41503: IFFALSE 41515
// min_x := 0 else
41505: LD_ADDR_VAR 0 8
41509: PUSH
41510: LD_INT 0
41512: ST_TO_ADDR
41513: GO 41531
// min_x := x - r ;
41515: LD_ADDR_VAR 0 8
41519: PUSH
41520: LD_VAR 0 1
41524: PUSH
41525: LD_VAR 0 3
41529: MINUS
41530: ST_TO_ADDR
// if y - r < 0 then
41531: LD_VAR 0 2
41535: PUSH
41536: LD_VAR 0 3
41540: MINUS
41541: PUSH
41542: LD_INT 0
41544: LESS
41545: IFFALSE 41557
// min_y := 0 else
41547: LD_ADDR_VAR 0 7
41551: PUSH
41552: LD_INT 0
41554: ST_TO_ADDR
41555: GO 41573
// min_y := y - r ;
41557: LD_ADDR_VAR 0 7
41561: PUSH
41562: LD_VAR 0 2
41566: PUSH
41567: LD_VAR 0 3
41571: MINUS
41572: ST_TO_ADDR
// max_x := x + r ;
41573: LD_ADDR_VAR 0 9
41577: PUSH
41578: LD_VAR 0 1
41582: PUSH
41583: LD_VAR 0 3
41587: PLUS
41588: ST_TO_ADDR
// max_y := y + r ;
41589: LD_ADDR_VAR 0 10
41593: PUSH
41594: LD_VAR 0 2
41598: PUSH
41599: LD_VAR 0 3
41603: PLUS
41604: ST_TO_ADDR
// for _x = min_x to max_x do
41605: LD_ADDR_VAR 0 5
41609: PUSH
41610: DOUBLE
41611: LD_VAR 0 8
41615: DEC
41616: ST_TO_ADDR
41617: LD_VAR 0 9
41621: PUSH
41622: FOR_TO
41623: IFFALSE 41724
// for _y = min_y to max_y do
41625: LD_ADDR_VAR 0 6
41629: PUSH
41630: DOUBLE
41631: LD_VAR 0 7
41635: DEC
41636: ST_TO_ADDR
41637: LD_VAR 0 10
41641: PUSH
41642: FOR_TO
41643: IFFALSE 41720
// begin if not ValidHex ( _x , _y ) then
41645: LD_VAR 0 5
41649: PPUSH
41650: LD_VAR 0 6
41654: PPUSH
41655: CALL_OW 488
41659: NOT
41660: IFFALSE 41664
// continue ;
41662: GO 41642
// if GetResourceTypeXY ( _x , _y ) then
41664: LD_VAR 0 5
41668: PPUSH
41669: LD_VAR 0 6
41673: PPUSH
41674: CALL_OW 283
41678: IFFALSE 41718
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41680: LD_ADDR_VAR 0 4
41684: PUSH
41685: LD_VAR 0 4
41689: PPUSH
41690: LD_VAR 0 4
41694: PUSH
41695: LD_INT 1
41697: PLUS
41698: PPUSH
41699: LD_VAR 0 5
41703: PUSH
41704: LD_VAR 0 6
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PPUSH
41713: CALL_OW 1
41717: ST_TO_ADDR
// end ;
41718: GO 41642
41720: POP
41721: POP
41722: GO 41622
41724: POP
41725: POP
// end ;
41726: LD_VAR 0 4
41730: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
// if not units then
41741: LD_VAR 0 1
41745: NOT
41746: IFFALSE 41750
// exit ;
41748: GO 42274
// result := UnitFilter ( units , [ f_ok ] ) ;
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: LD_INT 50
41762: PUSH
41763: EMPTY
41764: LIST
41765: PPUSH
41766: CALL_OW 72
41770: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41771: LD_ADDR_VAR 0 8
41775: PUSH
41776: LD_VAR 0 1
41780: PUSH
41781: LD_INT 1
41783: ARRAY
41784: PPUSH
41785: CALL_OW 255
41789: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41790: LD_ADDR_VAR 0 10
41794: PUSH
41795: LD_INT 29
41797: PUSH
41798: LD_INT 91
41800: PUSH
41801: LD_INT 49
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: ST_TO_ADDR
// if not result then
41809: LD_VAR 0 3
41813: NOT
41814: IFFALSE 41818
// exit ;
41816: GO 42274
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41818: LD_ADDR_VAR 0 5
41822: PUSH
41823: LD_INT 81
41825: PUSH
41826: LD_VAR 0 8
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PPUSH
41835: CALL_OW 69
41839: ST_TO_ADDR
// for i in result do
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_VAR 0 3
41849: PUSH
41850: FOR_IN
41851: IFFALSE 42272
// begin tag := GetTag ( i ) + 1 ;
41853: LD_ADDR_VAR 0 9
41857: PUSH
41858: LD_VAR 0 4
41862: PPUSH
41863: CALL_OW 110
41867: PUSH
41868: LD_INT 1
41870: PLUS
41871: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41872: LD_ADDR_VAR 0 7
41876: PUSH
41877: LD_VAR 0 4
41881: PPUSH
41882: CALL_OW 250
41886: PPUSH
41887: LD_VAR 0 4
41891: PPUSH
41892: CALL_OW 251
41896: PPUSH
41897: LD_INT 6
41899: PPUSH
41900: CALL 41473 0 3
41904: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41905: LD_VAR 0 4
41909: PPUSH
41910: CALL_OW 247
41914: PUSH
41915: LD_INT 2
41917: EQUAL
41918: PUSH
41919: LD_VAR 0 7
41923: AND
41924: PUSH
41925: LD_VAR 0 4
41929: PPUSH
41930: CALL_OW 264
41934: PUSH
41935: LD_VAR 0 10
41939: IN
41940: NOT
41941: AND
41942: IFFALSE 41981
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41944: LD_VAR 0 4
41948: PPUSH
41949: LD_VAR 0 7
41953: PUSH
41954: LD_INT 1
41956: ARRAY
41957: PUSH
41958: LD_INT 1
41960: ARRAY
41961: PPUSH
41962: LD_VAR 0 7
41966: PUSH
41967: LD_INT 1
41969: ARRAY
41970: PUSH
41971: LD_INT 2
41973: ARRAY
41974: PPUSH
41975: CALL_OW 116
41979: GO 42270
// if path > tag then
41981: LD_VAR 0 2
41985: PUSH
41986: LD_VAR 0 9
41990: GREATER
41991: IFFALSE 42199
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41993: LD_ADDR_VAR 0 6
41997: PUSH
41998: LD_VAR 0 5
42002: PPUSH
42003: LD_INT 91
42005: PUSH
42006: LD_VAR 0 4
42010: PUSH
42011: LD_INT 8
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: LIST
42018: PPUSH
42019: CALL_OW 72
42023: ST_TO_ADDR
// if nearEnemy then
42024: LD_VAR 0 6
42028: IFFALSE 42097
// begin if GetWeapon ( i ) = ru_time_lapser then
42030: LD_VAR 0 4
42034: PPUSH
42035: CALL_OW 264
42039: PUSH
42040: LD_INT 49
42042: EQUAL
42043: IFFALSE 42071
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42045: LD_VAR 0 4
42049: PPUSH
42050: LD_VAR 0 6
42054: PPUSH
42055: LD_VAR 0 4
42059: PPUSH
42060: CALL_OW 74
42064: PPUSH
42065: CALL_OW 112
42069: GO 42095
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42071: LD_VAR 0 4
42075: PPUSH
42076: LD_VAR 0 6
42080: PPUSH
42081: LD_VAR 0 4
42085: PPUSH
42086: CALL_OW 74
42090: PPUSH
42091: CALL 43199 0 2
// end else
42095: GO 42197
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42097: LD_VAR 0 4
42101: PPUSH
42102: LD_VAR 0 2
42106: PUSH
42107: LD_VAR 0 9
42111: ARRAY
42112: PUSH
42113: LD_INT 1
42115: ARRAY
42116: PPUSH
42117: LD_VAR 0 2
42121: PUSH
42122: LD_VAR 0 9
42126: ARRAY
42127: PUSH
42128: LD_INT 2
42130: ARRAY
42131: PPUSH
42132: CALL_OW 297
42136: PUSH
42137: LD_INT 6
42139: GREATER
42140: IFFALSE 42183
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42142: LD_VAR 0 4
42146: PPUSH
42147: LD_VAR 0 2
42151: PUSH
42152: LD_VAR 0 9
42156: ARRAY
42157: PUSH
42158: LD_INT 1
42160: ARRAY
42161: PPUSH
42162: LD_VAR 0 2
42166: PUSH
42167: LD_VAR 0 9
42171: ARRAY
42172: PUSH
42173: LD_INT 2
42175: ARRAY
42176: PPUSH
42177: CALL_OW 114
42181: GO 42197
// SetTag ( i , tag ) ;
42183: LD_VAR 0 4
42187: PPUSH
42188: LD_VAR 0 9
42192: PPUSH
42193: CALL_OW 109
// end else
42197: GO 42270
// if enemy then
42199: LD_VAR 0 5
42203: IFFALSE 42270
// begin if GetWeapon ( i ) = ru_time_lapser then
42205: LD_VAR 0 4
42209: PPUSH
42210: CALL_OW 264
42214: PUSH
42215: LD_INT 49
42217: EQUAL
42218: IFFALSE 42246
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42220: LD_VAR 0 4
42224: PPUSH
42225: LD_VAR 0 5
42229: PPUSH
42230: LD_VAR 0 4
42234: PPUSH
42235: CALL_OW 74
42239: PPUSH
42240: CALL_OW 112
42244: GO 42270
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42246: LD_VAR 0 4
42250: PPUSH
42251: LD_VAR 0 5
42255: PPUSH
42256: LD_VAR 0 4
42260: PPUSH
42261: CALL_OW 74
42265: PPUSH
42266: CALL 43199 0 2
// end ; end ;
42270: GO 41850
42272: POP
42273: POP
// end ;
42274: LD_VAR 0 3
42278: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42279: LD_INT 0
42281: PPUSH
42282: PPUSH
42283: PPUSH
// if not unit or IsInUnit ( unit ) then
42284: LD_VAR 0 1
42288: NOT
42289: PUSH
42290: LD_VAR 0 1
42294: PPUSH
42295: CALL_OW 310
42299: OR
42300: IFFALSE 42304
// exit ;
42302: GO 42395
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42304: LD_ADDR_VAR 0 4
42308: PUSH
42309: LD_VAR 0 1
42313: PPUSH
42314: CALL_OW 250
42318: PPUSH
42319: LD_VAR 0 2
42323: PPUSH
42324: LD_INT 1
42326: PPUSH
42327: CALL_OW 272
42331: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42332: LD_ADDR_VAR 0 5
42336: PUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 251
42346: PPUSH
42347: LD_VAR 0 2
42351: PPUSH
42352: LD_INT 1
42354: PPUSH
42355: CALL_OW 273
42359: ST_TO_ADDR
// if ValidHex ( x , y ) then
42360: LD_VAR 0 4
42364: PPUSH
42365: LD_VAR 0 5
42369: PPUSH
42370: CALL_OW 488
42374: IFFALSE 42395
// ComTurnXY ( unit , x , y ) ;
42376: LD_VAR 0 1
42380: PPUSH
42381: LD_VAR 0 4
42385: PPUSH
42386: LD_VAR 0 5
42390: PPUSH
42391: CALL_OW 118
// end ;
42395: LD_VAR 0 3
42399: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42400: LD_INT 0
42402: PPUSH
42403: PPUSH
// result := false ;
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: LD_INT 0
42411: ST_TO_ADDR
// if not units then
42412: LD_VAR 0 2
42416: NOT
42417: IFFALSE 42421
// exit ;
42419: GO 42466
// for i in units do
42421: LD_ADDR_VAR 0 4
42425: PUSH
42426: LD_VAR 0 2
42430: PUSH
42431: FOR_IN
42432: IFFALSE 42464
// if See ( side , i ) then
42434: LD_VAR 0 1
42438: PPUSH
42439: LD_VAR 0 4
42443: PPUSH
42444: CALL_OW 292
42448: IFFALSE 42462
// begin result := true ;
42450: LD_ADDR_VAR 0 3
42454: PUSH
42455: LD_INT 1
42457: ST_TO_ADDR
// exit ;
42458: POP
42459: POP
42460: GO 42466
// end ;
42462: GO 42431
42464: POP
42465: POP
// end ;
42466: LD_VAR 0 3
42470: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42471: LD_INT 0
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
// if not unit or not points then
42477: LD_VAR 0 1
42481: NOT
42482: PUSH
42483: LD_VAR 0 2
42487: NOT
42488: OR
42489: IFFALSE 42493
// exit ;
42491: GO 42583
// dist := 99999 ;
42493: LD_ADDR_VAR 0 5
42497: PUSH
42498: LD_INT 99999
42500: ST_TO_ADDR
// for i in points do
42501: LD_ADDR_VAR 0 4
42505: PUSH
42506: LD_VAR 0 2
42510: PUSH
42511: FOR_IN
42512: IFFALSE 42581
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42514: LD_ADDR_VAR 0 6
42518: PUSH
42519: LD_VAR 0 1
42523: PPUSH
42524: LD_VAR 0 4
42528: PUSH
42529: LD_INT 1
42531: ARRAY
42532: PPUSH
42533: LD_VAR 0 4
42537: PUSH
42538: LD_INT 2
42540: ARRAY
42541: PPUSH
42542: CALL_OW 297
42546: ST_TO_ADDR
// if tmpDist < dist then
42547: LD_VAR 0 6
42551: PUSH
42552: LD_VAR 0 5
42556: LESS
42557: IFFALSE 42579
// begin result := i ;
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_VAR 0 4
42568: ST_TO_ADDR
// dist := tmpDist ;
42569: LD_ADDR_VAR 0 5
42573: PUSH
42574: LD_VAR 0 6
42578: ST_TO_ADDR
// end ; end ;
42579: GO 42511
42581: POP
42582: POP
// end ;
42583: LD_VAR 0 3
42587: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42588: LD_INT 0
42590: PPUSH
// uc_side := side ;
42591: LD_ADDR_OWVAR 20
42595: PUSH
42596: LD_VAR 0 1
42600: ST_TO_ADDR
// uc_nation := 3 ;
42601: LD_ADDR_OWVAR 21
42605: PUSH
42606: LD_INT 3
42608: ST_TO_ADDR
// vc_chassis := 25 ;
42609: LD_ADDR_OWVAR 37
42613: PUSH
42614: LD_INT 25
42616: ST_TO_ADDR
// vc_engine := engine_siberite ;
42617: LD_ADDR_OWVAR 39
42621: PUSH
42622: LD_INT 3
42624: ST_TO_ADDR
// vc_control := control_computer ;
42625: LD_ADDR_OWVAR 38
42629: PUSH
42630: LD_INT 3
42632: ST_TO_ADDR
// vc_weapon := 59 ;
42633: LD_ADDR_OWVAR 40
42637: PUSH
42638: LD_INT 59
42640: ST_TO_ADDR
// result := CreateVehicle ;
42641: LD_ADDR_VAR 0 5
42645: PUSH
42646: CALL_OW 45
42650: ST_TO_ADDR
// SetDir ( result , d ) ;
42651: LD_VAR 0 5
42655: PPUSH
42656: LD_VAR 0 4
42660: PPUSH
42661: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42665: LD_VAR 0 5
42669: PPUSH
42670: LD_VAR 0 2
42674: PPUSH
42675: LD_VAR 0 3
42679: PPUSH
42680: LD_INT 0
42682: PPUSH
42683: CALL_OW 48
// end ;
42687: LD_VAR 0 5
42691: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42692: LD_INT 0
42694: PPUSH
42695: PPUSH
42696: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42697: LD_ADDR_VAR 0 2
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42720: LD_VAR 0 1
42724: NOT
42725: PUSH
42726: LD_VAR 0 1
42730: PPUSH
42731: CALL_OW 264
42735: PUSH
42736: LD_INT 12
42738: PUSH
42739: LD_INT 51
42741: PUSH
42742: LD_INT 32
42744: PUSH
42745: LD_INT 89
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: IN
42754: NOT
42755: OR
42756: IFFALSE 42760
// exit ;
42758: GO 42858
// for i := 1 to 3 do
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: DOUBLE
42766: LD_INT 1
42768: DEC
42769: ST_TO_ADDR
42770: LD_INT 3
42772: PUSH
42773: FOR_TO
42774: IFFALSE 42856
// begin tmp := GetCargo ( cargo , i ) ;
42776: LD_ADDR_VAR 0 4
42780: PUSH
42781: LD_VAR 0 1
42785: PPUSH
42786: LD_VAR 0 3
42790: PPUSH
42791: CALL_OW 289
42795: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42796: LD_ADDR_VAR 0 2
42800: PUSH
42801: LD_VAR 0 2
42805: PPUSH
42806: LD_VAR 0 3
42810: PPUSH
42811: LD_VAR 0 4
42815: PPUSH
42816: CALL_OW 1
42820: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42821: LD_ADDR_VAR 0 2
42825: PUSH
42826: LD_VAR 0 2
42830: PPUSH
42831: LD_INT 4
42833: PPUSH
42834: LD_VAR 0 2
42838: PUSH
42839: LD_INT 4
42841: ARRAY
42842: PUSH
42843: LD_VAR 0 4
42847: PLUS
42848: PPUSH
42849: CALL_OW 1
42853: ST_TO_ADDR
// end ;
42854: GO 42773
42856: POP
42857: POP
// end ;
42858: LD_VAR 0 2
42862: RET
// export function Length ( array ) ; begin
42863: LD_INT 0
42865: PPUSH
// result := array + 0 ;
42866: LD_ADDR_VAR 0 2
42870: PUSH
42871: LD_VAR 0 1
42875: PUSH
42876: LD_INT 0
42878: PLUS
42879: ST_TO_ADDR
// end ;
42880: LD_VAR 0 2
42884: RET
// export function PrepareArray ( array ) ; begin
42885: LD_INT 0
42887: PPUSH
// result := array diff 0 ;
42888: LD_ADDR_VAR 0 2
42892: PUSH
42893: LD_VAR 0 1
42897: PUSH
42898: LD_INT 0
42900: DIFF
42901: ST_TO_ADDR
// if not result [ 1 ] then
42902: LD_VAR 0 2
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: NOT
42911: IFFALSE 42931
// result := Delete ( result , 1 ) ;
42913: LD_ADDR_VAR 0 2
42917: PUSH
42918: LD_VAR 0 2
42922: PPUSH
42923: LD_INT 1
42925: PPUSH
42926: CALL_OW 3
42930: ST_TO_ADDR
// end ;
42931: LD_VAR 0 2
42935: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42936: LD_INT 0
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
// sibRocketRange := 25 ;
42942: LD_ADDR_VAR 0 6
42946: PUSH
42947: LD_INT 25
42949: ST_TO_ADDR
// result := false ;
42950: LD_ADDR_VAR 0 4
42954: PUSH
42955: LD_INT 0
42957: ST_TO_ADDR
// for i := 0 to 5 do
42958: LD_ADDR_VAR 0 5
42962: PUSH
42963: DOUBLE
42964: LD_INT 0
42966: DEC
42967: ST_TO_ADDR
42968: LD_INT 5
42970: PUSH
42971: FOR_TO
42972: IFFALSE 43039
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42974: LD_VAR 0 1
42978: PPUSH
42979: LD_VAR 0 5
42983: PPUSH
42984: LD_VAR 0 6
42988: PPUSH
42989: CALL_OW 272
42993: PPUSH
42994: LD_VAR 0 2
42998: PPUSH
42999: LD_VAR 0 5
43003: PPUSH
43004: LD_VAR 0 6
43008: PPUSH
43009: CALL_OW 273
43013: PPUSH
43014: LD_VAR 0 3
43018: PPUSH
43019: CALL_OW 309
43023: IFFALSE 43037
// begin result := true ;
43025: LD_ADDR_VAR 0 4
43029: PUSH
43030: LD_INT 1
43032: ST_TO_ADDR
// exit ;
43033: POP
43034: POP
43035: GO 43041
// end ;
43037: GO 42971
43039: POP
43040: POP
// end ;
43041: LD_VAR 0 4
43045: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43046: LD_INT 0
43048: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43049: LD_VAR 0 1
43053: PPUSH
43054: LD_VAR 0 2
43058: PPUSH
43059: LD_INT 0
43061: PPUSH
43062: LD_INT 0
43064: PPUSH
43065: LD_INT 1
43067: PPUSH
43068: LD_INT 0
43070: PPUSH
43071: CALL_OW 587
// end ;
43075: LD_VAR 0 3
43079: RET
// export function CenterOnNow ( unit ) ; begin
43080: LD_INT 0
43082: PPUSH
// result := IsInUnit ( unit ) ;
43083: LD_ADDR_VAR 0 2
43087: PUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: CALL_OW 310
43097: ST_TO_ADDR
// if not result then
43098: LD_VAR 0 2
43102: NOT
43103: IFFALSE 43115
// result := unit ;
43105: LD_ADDR_VAR 0 2
43109: PUSH
43110: LD_VAR 0 1
43114: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43115: LD_VAR 0 1
43119: PPUSH
43120: CALL_OW 87
// end ;
43124: LD_VAR 0 2
43128: RET
// export function ComMoveHex ( unit , hex ) ; begin
43129: LD_INT 0
43131: PPUSH
// if not hex then
43132: LD_VAR 0 2
43136: NOT
43137: IFFALSE 43141
// exit ;
43139: GO 43194
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43141: LD_VAR 0 2
43145: PUSH
43146: LD_INT 1
43148: ARRAY
43149: PPUSH
43150: LD_VAR 0 2
43154: PUSH
43155: LD_INT 2
43157: ARRAY
43158: PPUSH
43159: CALL_OW 428
43163: IFFALSE 43167
// exit ;
43165: GO 43194
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43167: LD_VAR 0 1
43171: PPUSH
43172: LD_VAR 0 2
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: PPUSH
43181: LD_VAR 0 2
43185: PUSH
43186: LD_INT 2
43188: ARRAY
43189: PPUSH
43190: CALL_OW 111
// end ;
43194: LD_VAR 0 3
43198: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43199: LD_INT 0
43201: PPUSH
43202: PPUSH
43203: PPUSH
// if not unit or not enemy then
43204: LD_VAR 0 1
43208: NOT
43209: PUSH
43210: LD_VAR 0 2
43214: NOT
43215: OR
43216: IFFALSE 43220
// exit ;
43218: GO 43344
// x := GetX ( enemy ) ;
43220: LD_ADDR_VAR 0 4
43224: PUSH
43225: LD_VAR 0 2
43229: PPUSH
43230: CALL_OW 250
43234: ST_TO_ADDR
// y := GetY ( enemy ) ;
43235: LD_ADDR_VAR 0 5
43239: PUSH
43240: LD_VAR 0 2
43244: PPUSH
43245: CALL_OW 251
43249: ST_TO_ADDR
// if ValidHex ( x , y ) then
43250: LD_VAR 0 4
43254: PPUSH
43255: LD_VAR 0 5
43259: PPUSH
43260: CALL_OW 488
43264: IFFALSE 43344
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43266: LD_VAR 0 2
43270: PPUSH
43271: CALL_OW 247
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: IN
43286: PUSH
43287: LD_VAR 0 1
43291: PPUSH
43292: CALL_OW 255
43296: PPUSH
43297: LD_VAR 0 2
43301: PPUSH
43302: CALL_OW 292
43306: OR
43307: IFFALSE 43325
// ComAttackUnit ( unit , enemy ) else
43309: LD_VAR 0 1
43313: PPUSH
43314: LD_VAR 0 2
43318: PPUSH
43319: CALL_OW 115
43323: GO 43344
// ComAgressiveMove ( unit , x , y ) ;
43325: LD_VAR 0 1
43329: PPUSH
43330: LD_VAR 0 4
43334: PPUSH
43335: LD_VAR 0 5
43339: PPUSH
43340: CALL_OW 114
// end ;
43344: LD_VAR 0 3
43348: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43349: LD_INT 0
43351: PPUSH
43352: PPUSH
43353: PPUSH
// list := AreaToList ( area , 0 ) ;
43354: LD_ADDR_VAR 0 5
43358: PUSH
43359: LD_VAR 0 1
43363: PPUSH
43364: LD_INT 0
43366: PPUSH
43367: CALL_OW 517
43371: ST_TO_ADDR
// if not list then
43372: LD_VAR 0 5
43376: NOT
43377: IFFALSE 43381
// exit ;
43379: GO 43511
// if all then
43381: LD_VAR 0 2
43385: IFFALSE 43473
// begin for i := 1 to list [ 1 ] do
43387: LD_ADDR_VAR 0 4
43391: PUSH
43392: DOUBLE
43393: LD_INT 1
43395: DEC
43396: ST_TO_ADDR
43397: LD_VAR 0 5
43401: PUSH
43402: LD_INT 1
43404: ARRAY
43405: PUSH
43406: FOR_TO
43407: IFFALSE 43469
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43409: LD_ADDR_VAR 0 3
43413: PUSH
43414: LD_VAR 0 3
43418: PPUSH
43419: LD_VAR 0 3
43423: PUSH
43424: LD_INT 1
43426: PLUS
43427: PPUSH
43428: LD_VAR 0 5
43432: PUSH
43433: LD_INT 1
43435: ARRAY
43436: PUSH
43437: LD_VAR 0 4
43441: ARRAY
43442: PUSH
43443: LD_VAR 0 5
43447: PUSH
43448: LD_INT 2
43450: ARRAY
43451: PUSH
43452: LD_VAR 0 4
43456: ARRAY
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PPUSH
43462: CALL_OW 1
43466: ST_TO_ADDR
43467: GO 43406
43469: POP
43470: POP
// exit ;
43471: GO 43511
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43473: LD_ADDR_VAR 0 3
43477: PUSH
43478: LD_VAR 0 5
43482: PUSH
43483: LD_INT 1
43485: ARRAY
43486: PUSH
43487: LD_INT 1
43489: ARRAY
43490: PUSH
43491: LD_VAR 0 5
43495: PUSH
43496: LD_INT 2
43498: ARRAY
43499: PUSH
43500: LD_INT 1
43502: ARRAY
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: EMPTY
43509: LIST
43510: ST_TO_ADDR
// end ;
43511: LD_VAR 0 3
43515: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43516: LD_INT 0
43518: PPUSH
43519: PPUSH
// list := AreaToList ( area , 0 ) ;
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: LD_VAR 0 1
43529: PPUSH
43530: LD_INT 0
43532: PPUSH
43533: CALL_OW 517
43537: ST_TO_ADDR
// if not list then
43538: LD_VAR 0 4
43542: NOT
43543: IFFALSE 43547
// exit ;
43545: GO 43588
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43547: LD_ADDR_VAR 0 3
43551: PUSH
43552: LD_VAR 0 4
43556: PUSH
43557: LD_INT 1
43559: ARRAY
43560: PUSH
43561: LD_INT 1
43563: ARRAY
43564: PUSH
43565: LD_VAR 0 4
43569: PUSH
43570: LD_INT 2
43572: ARRAY
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: PUSH
43578: LD_VAR 0 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// end ;
43588: LD_VAR 0 3
43592: RET
// export function First ( array ) ; begin
43593: LD_INT 0
43595: PPUSH
// if not array then
43596: LD_VAR 0 1
43600: NOT
43601: IFFALSE 43605
// exit ;
43603: GO 43619
// result := array [ 1 ] ;
43605: LD_ADDR_VAR 0 2
43609: PUSH
43610: LD_VAR 0 1
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: ST_TO_ADDR
// end ;
43619: LD_VAR 0 2
43623: RET
// export function Last ( array ) ; begin
43624: LD_INT 0
43626: PPUSH
// if not array then
43627: LD_VAR 0 1
43631: NOT
43632: IFFALSE 43636
// exit ;
43634: GO 43652
// result := array [ array ] ;
43636: LD_ADDR_VAR 0 2
43640: PUSH
43641: LD_VAR 0 1
43645: PUSH
43646: LD_VAR 0 1
43650: ARRAY
43651: ST_TO_ADDR
// end ;
43652: LD_VAR 0 2
43656: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43657: LD_INT 0
43659: PPUSH
43660: PPUSH
// result := [ ] ;
43661: LD_ADDR_VAR 0 5
43665: PUSH
43666: EMPTY
43667: ST_TO_ADDR
// if not array then
43668: LD_VAR 0 1
43672: NOT
43673: IFFALSE 43677
// exit ;
43675: GO 43789
// for i := 1 to array do
43677: LD_ADDR_VAR 0 6
43681: PUSH
43682: DOUBLE
43683: LD_INT 1
43685: DEC
43686: ST_TO_ADDR
43687: LD_VAR 0 1
43691: PUSH
43692: FOR_TO
43693: IFFALSE 43787
// if array [ i ] [ index ] = value then
43695: LD_VAR 0 1
43699: PUSH
43700: LD_VAR 0 6
43704: ARRAY
43705: PUSH
43706: LD_VAR 0 2
43710: ARRAY
43711: PUSH
43712: LD_VAR 0 3
43716: EQUAL
43717: IFFALSE 43785
// begin if indexColumn then
43719: LD_VAR 0 4
43723: IFFALSE 43759
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43725: LD_ADDR_VAR 0 5
43729: PUSH
43730: LD_VAR 0 5
43734: PPUSH
43735: LD_VAR 0 1
43739: PUSH
43740: LD_VAR 0 6
43744: ARRAY
43745: PUSH
43746: LD_VAR 0 4
43750: ARRAY
43751: PPUSH
43752: CALL 39127 0 2
43756: ST_TO_ADDR
43757: GO 43785
// result := Join ( result , array [ i ] ) ;
43759: LD_ADDR_VAR 0 5
43763: PUSH
43764: LD_VAR 0 5
43768: PPUSH
43769: LD_VAR 0 1
43773: PUSH
43774: LD_VAR 0 6
43778: ARRAY
43779: PPUSH
43780: CALL 39127 0 2
43784: ST_TO_ADDR
// end ;
43785: GO 43692
43787: POP
43788: POP
// end ;
43789: LD_VAR 0 5
43793: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43794: LD_INT 0
43796: PPUSH
43797: PPUSH
43798: PPUSH
// if btype = b_depot then
43799: LD_VAR 0 2
43803: PUSH
43804: LD_INT 0
43806: EQUAL
43807: IFFALSE 43819
// begin result := true ;
43809: LD_ADDR_VAR 0 3
43813: PUSH
43814: LD_INT 1
43816: ST_TO_ADDR
// exit ;
43817: GO 43935
// end ; pom := GetBase ( depot ) ;
43819: LD_ADDR_VAR 0 4
43823: PUSH
43824: LD_VAR 0 1
43828: PPUSH
43829: CALL_OW 274
43833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43834: LD_ADDR_VAR 0 5
43838: PUSH
43839: LD_VAR 0 2
43843: PPUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL_OW 248
43853: PPUSH
43854: CALL_OW 450
43858: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43859: LD_ADDR_VAR 0 3
43863: PUSH
43864: LD_VAR 0 4
43868: PPUSH
43869: LD_INT 1
43871: PPUSH
43872: CALL_OW 275
43876: PUSH
43877: LD_VAR 0 5
43881: PUSH
43882: LD_INT 1
43884: ARRAY
43885: GREATEREQUAL
43886: PUSH
43887: LD_VAR 0 4
43891: PPUSH
43892: LD_INT 2
43894: PPUSH
43895: CALL_OW 275
43899: PUSH
43900: LD_VAR 0 5
43904: PUSH
43905: LD_INT 2
43907: ARRAY
43908: GREATEREQUAL
43909: AND
43910: PUSH
43911: LD_VAR 0 4
43915: PPUSH
43916: LD_INT 3
43918: PPUSH
43919: CALL_OW 275
43923: PUSH
43924: LD_VAR 0 5
43928: PUSH
43929: LD_INT 3
43931: ARRAY
43932: GREATEREQUAL
43933: AND
43934: ST_TO_ADDR
// end ;
43935: LD_VAR 0 3
43939: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43940: LD_INT 0
43942: PPUSH
// if not vehicles or not parkingPoint then
43943: LD_VAR 0 1
43947: NOT
43948: PUSH
43949: LD_VAR 0 2
43953: NOT
43954: OR
43955: IFFALSE 43959
// exit ;
43957: GO 44057
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43959: LD_ADDR_VAR 0 1
43963: PUSH
43964: LD_VAR 0 1
43968: PPUSH
43969: LD_INT 50
43971: PUSH
43972: EMPTY
43973: LIST
43974: PUSH
43975: LD_INT 3
43977: PUSH
43978: LD_INT 92
43980: PUSH
43981: LD_VAR 0 2
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: PUSH
43990: LD_VAR 0 2
43994: PUSH
43995: LD_INT 2
43997: ARRAY
43998: PUSH
43999: LD_INT 8
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PPUSH
44016: CALL_OW 72
44020: ST_TO_ADDR
// if not vehicles then
44021: LD_VAR 0 1
44025: NOT
44026: IFFALSE 44030
// exit ;
44028: GO 44057
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44030: LD_VAR 0 1
44034: PPUSH
44035: LD_VAR 0 2
44039: PUSH
44040: LD_INT 1
44042: ARRAY
44043: PPUSH
44044: LD_VAR 0 2
44048: PUSH
44049: LD_INT 2
44051: ARRAY
44052: PPUSH
44053: CALL_OW 111
// end ;
44057: LD_VAR 0 3
44061: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44062: LD_INT 0
44064: PPUSH
44065: PPUSH
44066: PPUSH
// if not side or not area then
44067: LD_VAR 0 1
44071: NOT
44072: PUSH
44073: LD_VAR 0 2
44077: NOT
44078: OR
44079: IFFALSE 44083
// exit ;
44081: GO 44202
// tmp := AreaToList ( area , 0 ) ;
44083: LD_ADDR_VAR 0 5
44087: PUSH
44088: LD_VAR 0 2
44092: PPUSH
44093: LD_INT 0
44095: PPUSH
44096: CALL_OW 517
44100: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44101: LD_ADDR_VAR 0 4
44105: PUSH
44106: DOUBLE
44107: LD_INT 1
44109: DEC
44110: ST_TO_ADDR
44111: LD_VAR 0 5
44115: PUSH
44116: LD_INT 1
44118: ARRAY
44119: PUSH
44120: FOR_TO
44121: IFFALSE 44200
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44123: LD_VAR 0 5
44127: PUSH
44128: LD_INT 1
44130: ARRAY
44131: PUSH
44132: LD_VAR 0 4
44136: ARRAY
44137: PPUSH
44138: LD_VAR 0 5
44142: PUSH
44143: LD_INT 2
44145: ARRAY
44146: PUSH
44147: LD_VAR 0 4
44151: ARRAY
44152: PPUSH
44153: CALL_OW 351
44157: IFFALSE 44198
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44159: LD_VAR 0 5
44163: PUSH
44164: LD_INT 1
44166: ARRAY
44167: PUSH
44168: LD_VAR 0 4
44172: ARRAY
44173: PPUSH
44174: LD_VAR 0 5
44178: PUSH
44179: LD_INT 2
44181: ARRAY
44182: PUSH
44183: LD_VAR 0 4
44187: ARRAY
44188: PPUSH
44189: LD_VAR 0 1
44193: PPUSH
44194: CALL_OW 244
// end ;
44198: GO 44120
44200: POP
44201: POP
// end ;
44202: LD_VAR 0 3
44206: RET
