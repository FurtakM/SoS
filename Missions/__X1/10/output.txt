// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 667 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// InitHC_All ( ) ;
  64: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  68: LD_ADDR_VAR 0 2
  72: PUSH
  73: LD_INT 22
  75: PUSH
  76: LD_INT 2
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PUSH
  83: LD_INT 30
  85: PUSH
  86: LD_INT 32
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: PPUSH
  97: CALL_OW 69
 101: PUSH
 102: FOR_IN
 103: IFFALSE 168
// begin PrepareSoldier ( false , 6 ) ;
 105: LD_INT 0
 107: PPUSH
 108: LD_INT 6
 110: PPUSH
 111: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 115: CALL_OW 44
 119: PPUSH
 120: LD_VAR 0 2
 124: PPUSH
 125: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 129: LD_VAR 0 2
 133: PPUSH
 134: LD_INT 25
 136: PUSH
 137: LD_INT 27
 139: PUSH
 140: LD_INT 28
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_VAR 0 2
 152: PUSH
 153: LD_INT 3
 155: MOD
 156: PUSH
 157: LD_INT 1
 159: PLUS
 160: ARRAY
 161: PPUSH
 162: CALL_OW 431
// end ;
 166: GO 102
 168: POP
 169: POP
// PrepareSoldier ( sex_male , 3 ) ;
 170: LD_INT 1
 172: PPUSH
 173: LD_INT 3
 175: PPUSH
 176: CALL_OW 381
// omarSol := CreateHuman ;
 180: LD_ADDR_EXP 8
 184: PUSH
 185: CALL_OW 44
 189: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 190: LD_EXP 8
 194: PPUSH
 195: LD_INT 1
 197: PPUSH
 198: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 202: LD_ADDR_VAR 0 4
 206: PUSH
 207: LD_INT 143
 209: PPUSH
 210: LD_INT 51
 212: PPUSH
 213: CALL_OW 428
 217: ST_TO_ADDR
// for i := 1 to 2 do
 218: LD_ADDR_VAR 0 2
 222: PUSH
 223: DOUBLE
 224: LD_INT 1
 226: DEC
 227: ST_TO_ADDR
 228: LD_INT 2
 230: PUSH
 231: FOR_TO
 232: IFFALSE 260
// begin PrepareMechanic ( false , 3 ) ;
 234: LD_INT 0
 236: PPUSH
 237: LD_INT 3
 239: PPUSH
 240: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 244: CALL_OW 44
 248: PPUSH
 249: LD_VAR 0 4
 253: PPUSH
 254: CALL_OW 52
// end ;
 258: GO 231
 260: POP
 261: POP
// for i := 1 to 2 do
 262: LD_ADDR_VAR 0 2
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 2
 274: PUSH
 275: FOR_TO
 276: IFFALSE 302
// begin PrepareEngineer ( false , 2 ) ;
 278: LD_INT 0
 280: PPUSH
 281: LD_INT 2
 283: PPUSH
 284: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 288: CALL_OW 44
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: CALL_OW 52
// end ;
 300: GO 275
 302: POP
 303: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 304: CALL_OW 44
 308: PPUSH
 309: LD_INT 164
 311: PPUSH
 312: LD_INT 80
 314: PPUSH
 315: LD_INT 0
 317: PPUSH
 318: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 322: CALL_OW 44
 326: PPUSH
 327: LD_INT 166
 329: PPUSH
 330: LD_INT 84
 332: PPUSH
 333: LD_INT 0
 335: PPUSH
 336: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 340: LD_ADDR_VAR 0 2
 344: PUSH
 345: LD_INT 22
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 30
 357: PUSH
 358: LD_INT 8
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PPUSH
 369: CALL_OW 69
 373: PUSH
 374: FOR_IN
 375: IFFALSE 423
// for j := 1 to 3 do
 377: LD_ADDR_VAR 0 5
 381: PUSH
 382: DOUBLE
 383: LD_INT 1
 385: DEC
 386: ST_TO_ADDR
 387: LD_INT 3
 389: PUSH
 390: FOR_TO
 391: IFFALSE 419
// begin PrepareScientist ( false , 3 ) ;
 393: LD_INT 0
 395: PPUSH
 396: LD_INT 3
 398: PPUSH
 399: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 403: CALL_OW 44
 407: PPUSH
 408: LD_VAR 0 2
 412: PPUSH
 413: CALL_OW 52
// end ;
 417: GO 390
 419: POP
 420: POP
 421: GO 374
 423: POP
 424: POP
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 425: LD_ADDR_EXP 3
 429: PUSH
 430: LD_STRING Heike
 432: PPUSH
 433: LD_EXP 1
 437: NOT
 438: PPUSH
 439: LD_EXP 2
 443: PPUSH
 444: CALL 1408 0 3
 448: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 449: LD_ADDR_EXP 5
 453: PUSH
 454: LD_STRING Kaia
 456: PPUSH
 457: LD_EXP 1
 461: NOT
 462: PPUSH
 463: LD_EXP 2
 467: PPUSH
 468: CALL 1408 0 3
 472: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 473: LD_INT 14
 475: PPUSH
 476: LD_INT 3
 478: PPUSH
 479: LD_INT 1
 481: PPUSH
 482: LD_INT 27
 484: PPUSH
 485: LD_INT 100
 487: PPUSH
 488: CALL 6248 0 5
// heikeVehicle := CreateVehicle ;
 492: LD_ADDR_EXP 6
 496: PUSH
 497: CALL_OW 45
 501: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 502: LD_EXP 6
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 514: LD_EXP 6
 518: PPUSH
 519: LD_INT 149
 521: PPUSH
 522: LD_INT 59
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 532: LD_EXP 3
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 544: LD_EXP 3
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 52
// uc_side := 5 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 5
 563: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 564: LD_ADDR_EXP 4
 568: PUSH
 569: LD_STRING Omar
 571: PPUSH
 572: CALL_OW 25
 576: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 577: LD_INT 14
 579: PPUSH
 580: LD_INT 3
 582: PPUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 27
 588: PPUSH
 589: LD_INT 100
 591: PPUSH
 592: CALL 6248 0 5
// omarVehicle := CreateVehicle ;
 596: LD_ADDR_EXP 7
 600: PUSH
 601: CALL_OW 45
 605: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 606: LD_EXP 4
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 618: LD_EXP 7
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 630: LD_EXP 7
 634: PPUSH
 635: LD_INT 132
 637: PPUSH
 638: LD_INT 83
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 648: LD_EXP 4
 652: PPUSH
 653: LD_EXP 7
 657: PPUSH
 658: CALL_OW 52
// end ; end_of_file
 662: LD_VAR 0 1
 666: RET
// export function Action ; var i ; begin
 667: LD_INT 0
 669: PPUSH
 670: PPUSH
// Video ( true ) ;
 671: LD_INT 1
 673: PPUSH
 674: CALL 38701 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 678: LD_ADDR_VAR 0 2
 682: PUSH
 683: LD_INT 22
 685: PUSH
 686: LD_INT 2
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 30
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 30
 708: PUSH
 709: LD_INT 8
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PPUSH
 725: CALL_OW 69
 729: PUSH
 730: FOR_IN
 731: IFFALSE 750
// SetSpecResearch ( i , 1500 , false ) ;
 733: LD_VAR 0 2
 737: PPUSH
 738: LD_INT 1500
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 486
 748: GO 730
 750: POP
 751: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_INT 2
 760: PPUSH
 761: LD_INT 32963
 763: NEG
 764: PPUSH
 765: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 769: LD_EXP 4
 773: PPUSH
 774: LD_INT 150
 776: PPUSH
 777: LD_INT 72
 779: PPUSH
 780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 784: LD_INT 35
 786: PPUSH
 787: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 791: LD_INT 150
 793: PPUSH
 794: LD_INT 72
 796: PPUSH
 797: CALL_OW 428
 801: IFFALSE 784
// ComExitBuilding ( omarSol ) ;
 803: LD_EXP 8
 807: PPUSH
 808: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 812: LD_EXP 8
 816: PPUSH
 817: LD_INT 150
 819: PPUSH
 820: LD_INT 69
 822: PPUSH
 823: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 827: LD_EXP 8
 831: PPUSH
 832: LD_EXP 4
 836: PPUSH
 837: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 841: LD_EXP 8
 845: PPUSH
 846: LD_EXP 4
 850: PPUSH
 851: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 855: LD_EXP 4
 859: PPUSH
 860: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 864: LD_EXP 4
 868: PPUSH
 869: LD_INT 152
 871: PPUSH
 872: LD_INT 70
 874: PPUSH
 875: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 879: LD_INT 35
 881: PPUSH
 882: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 886: LD_EXP 4
 890: PPUSH
 891: LD_EXP 8
 895: PPUSH
 896: CALL_OW 296
 900: PUSH
 901: LD_INT 3
 903: LESS
 904: IFFALSE 879
// ComTurnUnit ( Omar , omarSol ) ;
 906: LD_EXP 4
 910: PPUSH
 911: LD_EXP 8
 915: PPUSH
 916: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 920: LD_EXP 3
 924: PPUSH
 925: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 929: LD_EXP 3
 933: PPUSH
 934: LD_INT 149
 936: PPUSH
 937: LD_INT 68
 939: PPUSH
 940: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 944: LD_EXP 3
 948: PPUSH
 949: LD_EXP 4
 953: PPUSH
 954: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 958: LD_EXP 4
 962: PPUSH
 963: LD_STRING DO-Intro-1
 965: PPUSH
 966: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 970: LD_EXP 8
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL_OW 120
// wait ( 0 0$0.3 ) ;
 982: LD_INT 10
 984: PPUSH
 985: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
 989: LD_EXP 3
 993: PPUSH
 994: LD_STRING DH-Intro-2
 996: PPUSH
 997: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1001: LD_EXP 4
1005: PPUSH
1006: LD_EXP 3
1010: PPUSH
1011: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1015: LD_EXP 4
1019: PPUSH
1020: LD_STRING DO-Intro-3
1022: PPUSH
1023: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1027: LD_EXP 3
1031: PPUSH
1032: LD_INT 152
1034: PPUSH
1035: LD_INT 58
1037: PPUSH
1038: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1042: LD_EXP 4
1046: PPUSH
1047: LD_INT 154
1049: PPUSH
1050: LD_INT 60
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1057: LD_EXP 4
1061: PPUSH
1062: LD_EXP 3
1066: PPUSH
1067: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1071: LD_EXP 3
1075: PPUSH
1076: LD_EXP 4
1080: PPUSH
1081: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1085: LD_INT 35
1087: PPUSH
1088: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1092: LD_EXP 3
1096: PPUSH
1097: LD_INT 152
1099: PPUSH
1100: LD_INT 58
1102: PPUSH
1103: CALL_OW 307
1107: PUSH
1108: LD_EXP 4
1112: PPUSH
1113: LD_INT 154
1115: PPUSH
1116: LD_INT 60
1118: PPUSH
1119: CALL_OW 307
1123: AND
1124: IFFALSE 1085
// wait ( 0 0$0.3 ) ;
1126: LD_INT 10
1128: PPUSH
1129: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1133: LD_EXP 4
1137: PPUSH
1138: LD_STRING DO-Intro-4
1140: PPUSH
1141: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1145: LD_INT 18
1147: PPUSH
1148: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1152: LD_EXP 3
1156: PPUSH
1157: LD_STRING DH-Intro-5
1159: PPUSH
1160: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1164: LD_EXP 4
1168: PPUSH
1169: LD_STRING DO-Intro-6
1171: PPUSH
1172: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1176: LD_INT 10
1178: PPUSH
1179: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1183: LD_EXP 3
1187: PPUSH
1188: LD_STRING DH-Intro-7
1190: PPUSH
1191: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1195: LD_INT 7
1197: PPUSH
1198: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1202: LD_EXP 3
1206: PPUSH
1207: LD_STRING DH-Intro-8
1209: PPUSH
1210: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_STRING DO-Intro-9
1221: PPUSH
1222: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1226: LD_EXP 3
1230: PPUSH
1231: LD_STRING DH-Intro-10
1233: PPUSH
1234: CALL_OW 88
// if not Kaia then
1238: LD_EXP 5
1242: NOT
1243: IFFALSE 1259
// Say ( Heike , DH-Intro-11-Kaia ) else
1245: LD_EXP 3
1249: PPUSH
1250: LD_STRING DH-Intro-11-Kaia
1252: PPUSH
1253: CALL_OW 88
1257: GO 1271
// Say ( Heike , DH-Intro-11-Friends ) ;
1259: LD_EXP 3
1263: PPUSH
1264: LD_STRING DH-Intro-11-Friends
1266: PPUSH
1267: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1271: LD_EXP 4
1275: PPUSH
1276: LD_STRING DO-Intro-12
1278: PPUSH
1279: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1283: LD_EXP 3
1287: PPUSH
1288: LD_STRING DH-Intro-13
1290: PPUSH
1291: CALL_OW 88
// async ;
1295: ASYNC
// wait ( 0 0$0.2 ) ;
1296: LD_INT 7
1298: PPUSH
1299: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1303: LD_EXP 3
1307: PPUSH
1308: LD_EXP 6
1312: PPUSH
1313: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1317: LD_EXP 3
1321: PPUSH
1322: LD_INT 131
1324: PPUSH
1325: LD_INT 83
1327: PPUSH
1328: CALL_OW 171
// sync ;
1332: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1333: LD_EXP 4
1337: PPUSH
1338: LD_STRING DO-Intro-14
1340: PPUSH
1341: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1345: LD_EXP 4
1349: PPUSH
1350: LD_EXP 3
1354: PPUSH
1355: CALL_OW 112
// wait ( 0 0$2 ) ;
1359: LD_INT 70
1361: PPUSH
1362: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1366: LD_INT 1
1368: PPUSH
1369: LD_STRING %_cont
1371: PPUSH
1372: CALL_OW 340
// end ;
1376: LD_VAR 0 1
1380: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1381: LD_VAR 0 2
1385: PUSH
1386: LD_EXP 4
1390: EQUAL
1391: IFFALSE 1405
// SetClass ( Omar , class_desert_warior ) ;
1393: LD_EXP 4
1397: PPUSH
1398: LD_INT 11
1400: PPUSH
1401: CALL_OW 336
// end ; end_of_file
1405: PPOPN 2
1407: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1408: LD_INT 0
1410: PPUSH
1411: PPUSH
// if exist_mode then
1412: LD_VAR 0 2
1416: IFFALSE 1441
// unit := CreateCharacter ( prefix & ident ) else
1418: LD_ADDR_VAR 0 5
1422: PUSH
1423: LD_VAR 0 3
1427: PUSH
1428: LD_VAR 0 1
1432: STR
1433: PPUSH
1434: CALL_OW 34
1438: ST_TO_ADDR
1439: GO 1456
// unit := NewCharacter ( ident ) ;
1441: LD_ADDR_VAR 0 5
1445: PUSH
1446: LD_VAR 0 1
1450: PPUSH
1451: CALL_OW 25
1455: ST_TO_ADDR
// result := unit ;
1456: LD_ADDR_VAR 0 4
1460: PUSH
1461: LD_VAR 0 5
1465: ST_TO_ADDR
// end ;
1466: LD_VAR 0 4
1470: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
// if not side or not nation then
1475: LD_VAR 0 1
1479: NOT
1480: PUSH
1481: LD_VAR 0 2
1485: NOT
1486: OR
1487: IFFALSE 1491
// exit ;
1489: GO 2259
// case nation of nation_american :
1491: LD_VAR 0 2
1495: PUSH
1496: LD_INT 1
1498: DOUBLE
1499: EQUAL
1500: IFTRUE 1504
1502: GO 1718
1504: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: LD_INT 35
1512: PUSH
1513: LD_INT 45
1515: PUSH
1516: LD_INT 46
1518: PUSH
1519: LD_INT 47
1521: PUSH
1522: LD_INT 82
1524: PUSH
1525: LD_INT 83
1527: PUSH
1528: LD_INT 84
1530: PUSH
1531: LD_INT 85
1533: PUSH
1534: LD_INT 86
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: LD_INT 2
1542: PUSH
1543: LD_INT 6
1545: PUSH
1546: LD_INT 15
1548: PUSH
1549: LD_INT 16
1551: PUSH
1552: LD_INT 7
1554: PUSH
1555: LD_INT 12
1557: PUSH
1558: LD_INT 13
1560: PUSH
1561: LD_INT 10
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 20
1569: PUSH
1570: LD_INT 21
1572: PUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 25
1578: PUSH
1579: LD_INT 32
1581: PUSH
1582: LD_INT 27
1584: PUSH
1585: LD_INT 36
1587: PUSH
1588: LD_INT 69
1590: PUSH
1591: LD_INT 39
1593: PUSH
1594: LD_INT 34
1596: PUSH
1597: LD_INT 40
1599: PUSH
1600: LD_INT 48
1602: PUSH
1603: LD_INT 49
1605: PUSH
1606: LD_INT 50
1608: PUSH
1609: LD_INT 51
1611: PUSH
1612: LD_INT 52
1614: PUSH
1615: LD_INT 53
1617: PUSH
1618: LD_INT 54
1620: PUSH
1621: LD_INT 55
1623: PUSH
1624: LD_INT 56
1626: PUSH
1627: LD_INT 57
1629: PUSH
1630: LD_INT 58
1632: PUSH
1633: LD_INT 59
1635: PUSH
1636: LD_INT 60
1638: PUSH
1639: LD_INT 61
1641: PUSH
1642: LD_INT 62
1644: PUSH
1645: LD_INT 80
1647: PUSH
1648: LD_INT 82
1650: PUSH
1651: LD_INT 83
1653: PUSH
1654: LD_INT 84
1656: PUSH
1657: LD_INT 85
1659: PUSH
1660: LD_INT 86
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: ST_TO_ADDR
1716: GO 2183
1718: LD_INT 2
1720: DOUBLE
1721: EQUAL
1722: IFTRUE 1726
1724: GO 1952
1726: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1727: LD_ADDR_VAR 0 4
1731: PUSH
1732: LD_INT 35
1734: PUSH
1735: LD_INT 45
1737: PUSH
1738: LD_INT 46
1740: PUSH
1741: LD_INT 47
1743: PUSH
1744: LD_INT 82
1746: PUSH
1747: LD_INT 83
1749: PUSH
1750: LD_INT 84
1752: PUSH
1753: LD_INT 85
1755: PUSH
1756: LD_INT 87
1758: PUSH
1759: LD_INT 70
1761: PUSH
1762: LD_INT 1
1764: PUSH
1765: LD_INT 11
1767: PUSH
1768: LD_INT 3
1770: PUSH
1771: LD_INT 4
1773: PUSH
1774: LD_INT 5
1776: PUSH
1777: LD_INT 6
1779: PUSH
1780: LD_INT 15
1782: PUSH
1783: LD_INT 18
1785: PUSH
1786: LD_INT 7
1788: PUSH
1789: LD_INT 17
1791: PUSH
1792: LD_INT 8
1794: PUSH
1795: LD_INT 20
1797: PUSH
1798: LD_INT 21
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 72
1806: PUSH
1807: LD_INT 26
1809: PUSH
1810: LD_INT 69
1812: PUSH
1813: LD_INT 39
1815: PUSH
1816: LD_INT 40
1818: PUSH
1819: LD_INT 41
1821: PUSH
1822: LD_INT 42
1824: PUSH
1825: LD_INT 43
1827: PUSH
1828: LD_INT 48
1830: PUSH
1831: LD_INT 49
1833: PUSH
1834: LD_INT 50
1836: PUSH
1837: LD_INT 51
1839: PUSH
1840: LD_INT 52
1842: PUSH
1843: LD_INT 53
1845: PUSH
1846: LD_INT 54
1848: PUSH
1849: LD_INT 55
1851: PUSH
1852: LD_INT 56
1854: PUSH
1855: LD_INT 60
1857: PUSH
1858: LD_INT 61
1860: PUSH
1861: LD_INT 62
1863: PUSH
1864: LD_INT 66
1866: PUSH
1867: LD_INT 67
1869: PUSH
1870: LD_INT 68
1872: PUSH
1873: LD_INT 81
1875: PUSH
1876: LD_INT 82
1878: PUSH
1879: LD_INT 83
1881: PUSH
1882: LD_INT 84
1884: PUSH
1885: LD_INT 85
1887: PUSH
1888: LD_INT 87
1890: PUSH
1891: LD_INT 88
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
1950: GO 2183
1952: LD_INT 3
1954: DOUBLE
1955: EQUAL
1956: IFTRUE 1960
1958: GO 2182
1960: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1961: LD_ADDR_VAR 0 4
1965: PUSH
1966: LD_INT 46
1968: PUSH
1969: LD_INT 47
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: LD_INT 2
1977: PUSH
1978: LD_INT 82
1980: PUSH
1981: LD_INT 83
1983: PUSH
1984: LD_INT 84
1986: PUSH
1987: LD_INT 85
1989: PUSH
1990: LD_INT 86
1992: PUSH
1993: LD_INT 11
1995: PUSH
1996: LD_INT 9
1998: PUSH
1999: LD_INT 20
2001: PUSH
2002: LD_INT 19
2004: PUSH
2005: LD_INT 21
2007: PUSH
2008: LD_INT 24
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 25
2016: PUSH
2017: LD_INT 28
2019: PUSH
2020: LD_INT 29
2022: PUSH
2023: LD_INT 30
2025: PUSH
2026: LD_INT 31
2028: PUSH
2029: LD_INT 37
2031: PUSH
2032: LD_INT 38
2034: PUSH
2035: LD_INT 32
2037: PUSH
2038: LD_INT 27
2040: PUSH
2041: LD_INT 33
2043: PUSH
2044: LD_INT 69
2046: PUSH
2047: LD_INT 39
2049: PUSH
2050: LD_INT 34
2052: PUSH
2053: LD_INT 40
2055: PUSH
2056: LD_INT 71
2058: PUSH
2059: LD_INT 23
2061: PUSH
2062: LD_INT 44
2064: PUSH
2065: LD_INT 48
2067: PUSH
2068: LD_INT 49
2070: PUSH
2071: LD_INT 50
2073: PUSH
2074: LD_INT 51
2076: PUSH
2077: LD_INT 52
2079: PUSH
2080: LD_INT 53
2082: PUSH
2083: LD_INT 54
2085: PUSH
2086: LD_INT 55
2088: PUSH
2089: LD_INT 56
2091: PUSH
2092: LD_INT 57
2094: PUSH
2095: LD_INT 58
2097: PUSH
2098: LD_INT 59
2100: PUSH
2101: LD_INT 63
2103: PUSH
2104: LD_INT 64
2106: PUSH
2107: LD_INT 65
2109: PUSH
2110: LD_INT 82
2112: PUSH
2113: LD_INT 83
2115: PUSH
2116: LD_INT 84
2118: PUSH
2119: LD_INT 85
2121: PUSH
2122: LD_INT 86
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: ST_TO_ADDR
2180: GO 2183
2182: POP
// if state > - 1 and state < 3 then
2183: LD_VAR 0 3
2187: PUSH
2188: LD_INT 1
2190: NEG
2191: GREATER
2192: PUSH
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 3
2200: LESS
2201: AND
2202: IFFALSE 2259
// for i in result do
2204: LD_ADDR_VAR 0 5
2208: PUSH
2209: LD_VAR 0 4
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2257
// if GetTech ( i , side ) <> state then
2217: LD_VAR 0 5
2221: PPUSH
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 321
2231: PUSH
2232: LD_VAR 0 3
2236: NONEQUAL
2237: IFFALSE 2255
// result := result diff i ;
2239: LD_ADDR_VAR 0 4
2243: PUSH
2244: LD_VAR 0 4
2248: PUSH
2249: LD_VAR 0 5
2253: DIFF
2254: ST_TO_ADDR
2255: GO 2214
2257: POP
2258: POP
// end ;
2259: LD_VAR 0 4
2263: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2264: LD_INT 0
2266: PPUSH
2267: PPUSH
2268: PPUSH
// result := true ;
2269: LD_ADDR_VAR 0 3
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2277: LD_ADDR_VAR 0 5
2281: PUSH
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 480
2291: ST_TO_ADDR
// if not tmp then
2292: LD_VAR 0 5
2296: NOT
2297: IFFALSE 2301
// exit ;
2299: GO 2350
// for i in tmp do
2301: LD_ADDR_VAR 0 4
2305: PUSH
2306: LD_VAR 0 5
2310: PUSH
2311: FOR_IN
2312: IFFALSE 2348
// if GetTech ( i , side ) <> state_researched then
2314: LD_VAR 0 4
2318: PPUSH
2319: LD_VAR 0 1
2323: PPUSH
2324: CALL_OW 321
2328: PUSH
2329: LD_INT 2
2331: NONEQUAL
2332: IFFALSE 2346
// begin result := false ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// exit ;
2342: POP
2343: POP
2344: GO 2350
// end ;
2346: GO 2311
2348: POP
2349: POP
// end ;
2350: LD_VAR 0 3
2354: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2355: LD_INT 0
2357: PPUSH
2358: PPUSH
2359: PPUSH
2360: PPUSH
2361: PPUSH
2362: PPUSH
2363: PPUSH
2364: PPUSH
2365: PPUSH
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2370: LD_VAR 0 1
2374: NOT
2375: PUSH
2376: LD_VAR 0 1
2380: PPUSH
2381: CALL_OW 257
2385: PUSH
2386: LD_INT 9
2388: NONEQUAL
2389: OR
2390: IFFALSE 2394
// exit ;
2392: GO 2967
// side := GetSide ( unit ) ;
2394: LD_ADDR_VAR 0 9
2398: PUSH
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 255
2408: ST_TO_ADDR
// tech_space := tech_spacanom ;
2409: LD_ADDR_VAR 0 12
2413: PUSH
2414: LD_INT 29
2416: ST_TO_ADDR
// tech_time := tech_taurad ;
2417: LD_ADDR_VAR 0 13
2421: PUSH
2422: LD_INT 28
2424: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2425: LD_ADDR_VAR 0 11
2429: PUSH
2430: LD_VAR 0 1
2434: PPUSH
2435: CALL_OW 310
2439: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2440: LD_VAR 0 11
2444: PPUSH
2445: CALL_OW 247
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2457
// exit ;
2455: GO 2967
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 81
2464: PUSH
2465: LD_VAR 0 9
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 3
2476: PUSH
2477: LD_INT 21
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PPUSH
2495: CALL_OW 69
2499: ST_TO_ADDR
// if not tmp then
2500: LD_VAR 0 8
2504: NOT
2505: IFFALSE 2509
// exit ;
2507: GO 2967
// if in_unit then
2509: LD_VAR 0 11
2513: IFFALSE 2537
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2515: LD_ADDR_VAR 0 10
2519: PUSH
2520: LD_VAR 0 8
2524: PPUSH
2525: LD_VAR 0 11
2529: PPUSH
2530: CALL_OW 74
2534: ST_TO_ADDR
2535: GO 2557
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2537: LD_ADDR_VAR 0 10
2541: PUSH
2542: LD_VAR 0 8
2546: PPUSH
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 74
2556: ST_TO_ADDR
// if not enemy then
2557: LD_VAR 0 10
2561: NOT
2562: IFFALSE 2566
// exit ;
2564: GO 2967
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2566: LD_VAR 0 11
2570: PUSH
2571: LD_VAR 0 11
2575: PPUSH
2576: LD_VAR 0 10
2580: PPUSH
2581: CALL_OW 296
2585: PUSH
2586: LD_INT 13
2588: GREATER
2589: AND
2590: PUSH
2591: LD_VAR 0 1
2595: PPUSH
2596: LD_VAR 0 10
2600: PPUSH
2601: CALL_OW 296
2605: PUSH
2606: LD_INT 12
2608: GREATER
2609: OR
2610: IFFALSE 2614
// exit ;
2612: GO 2967
// missile := [ 1 ] ;
2614: LD_ADDR_VAR 0 14
2618: PUSH
2619: LD_INT 1
2621: PUSH
2622: EMPTY
2623: LIST
2624: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2625: LD_VAR 0 9
2629: PPUSH
2630: LD_VAR 0 12
2634: PPUSH
2635: CALL_OW 325
2639: IFFALSE 2668
// missile := Replace ( missile , missile + 1 , 2 ) ;
2641: LD_ADDR_VAR 0 14
2645: PUSH
2646: LD_VAR 0 14
2650: PPUSH
2651: LD_VAR 0 14
2655: PUSH
2656: LD_INT 1
2658: PLUS
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: CALL_OW 1
2667: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2668: LD_VAR 0 9
2672: PPUSH
2673: LD_VAR 0 13
2677: PPUSH
2678: CALL_OW 325
2682: PUSH
2683: LD_VAR 0 10
2687: PPUSH
2688: CALL_OW 255
2692: PPUSH
2693: LD_VAR 0 13
2697: PPUSH
2698: CALL_OW 325
2702: NOT
2703: AND
2704: IFFALSE 2733
// missile := Replace ( missile , missile + 1 , 3 ) ;
2706: LD_ADDR_VAR 0 14
2710: PUSH
2711: LD_VAR 0 14
2715: PPUSH
2716: LD_VAR 0 14
2720: PUSH
2721: LD_INT 1
2723: PLUS
2724: PPUSH
2725: LD_INT 3
2727: PPUSH
2728: CALL_OW 1
2732: ST_TO_ADDR
// if missile < 2 then
2733: LD_VAR 0 14
2737: PUSH
2738: LD_INT 2
2740: LESS
2741: IFFALSE 2745
// exit ;
2743: GO 2967
// x := GetX ( enemy ) ;
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_VAR 0 10
2754: PPUSH
2755: CALL_OW 250
2759: ST_TO_ADDR
// y := GetY ( enemy ) ;
2760: LD_ADDR_VAR 0 5
2764: PUSH
2765: LD_VAR 0 10
2769: PPUSH
2770: CALL_OW 251
2774: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2775: LD_ADDR_VAR 0 6
2779: PUSH
2780: LD_VAR 0 4
2784: PUSH
2785: LD_INT 1
2787: NEG
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: CALL_OW 12
2796: PLUS
2797: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2798: LD_ADDR_VAR 0 7
2802: PUSH
2803: LD_VAR 0 5
2807: PUSH
2808: LD_INT 1
2810: NEG
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: CALL_OW 12
2819: PLUS
2820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2821: LD_VAR 0 6
2825: PPUSH
2826: LD_VAR 0 7
2830: PPUSH
2831: CALL_OW 488
2835: NOT
2836: IFFALSE 2858
// begin _x := x ;
2838: LD_ADDR_VAR 0 6
2842: PUSH
2843: LD_VAR 0 4
2847: ST_TO_ADDR
// _y := y ;
2848: LD_ADDR_VAR 0 7
2852: PUSH
2853: LD_VAR 0 5
2857: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2858: LD_ADDR_VAR 0 3
2862: PUSH
2863: LD_INT 1
2865: PPUSH
2866: LD_VAR 0 14
2870: PPUSH
2871: CALL_OW 12
2875: ST_TO_ADDR
// case i of 1 :
2876: LD_VAR 0 3
2880: PUSH
2881: LD_INT 1
2883: DOUBLE
2884: EQUAL
2885: IFTRUE 2889
2887: GO 2906
2889: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2890: LD_VAR 0 1
2894: PPUSH
2895: LD_VAR 0 10
2899: PPUSH
2900: CALL_OW 115
2904: GO 2967
2906: LD_INT 2
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2936
2914: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2915: LD_VAR 0 1
2919: PPUSH
2920: LD_VAR 0 6
2924: PPUSH
2925: LD_VAR 0 7
2929: PPUSH
2930: CALL_OW 153
2934: GO 2967
2936: LD_INT 3
2938: DOUBLE
2939: EQUAL
2940: IFTRUE 2944
2942: GO 2966
2944: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_VAR 0 6
2954: PPUSH
2955: LD_VAR 0 7
2959: PPUSH
2960: CALL_OW 154
2964: GO 2967
2966: POP
// end ;
2967: LD_VAR 0 2
2971: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2972: LD_INT 0
2974: PPUSH
2975: PPUSH
2976: PPUSH
2977: PPUSH
2978: PPUSH
2979: PPUSH
// if not unit or not building then
2980: LD_VAR 0 1
2984: NOT
2985: PUSH
2986: LD_VAR 0 2
2990: NOT
2991: OR
2992: IFFALSE 2996
// exit ;
2994: GO 3154
// x := GetX ( building ) ;
2996: LD_ADDR_VAR 0 5
3000: PUSH
3001: LD_VAR 0 2
3005: PPUSH
3006: CALL_OW 250
3010: ST_TO_ADDR
// y := GetY ( building ) ;
3011: LD_ADDR_VAR 0 6
3015: PUSH
3016: LD_VAR 0 2
3020: PPUSH
3021: CALL_OW 251
3025: ST_TO_ADDR
// for i = 0 to 5 do
3026: LD_ADDR_VAR 0 4
3030: PUSH
3031: DOUBLE
3032: LD_INT 0
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3152
// begin _x := ShiftX ( x , i , 3 ) ;
3042: LD_ADDR_VAR 0 7
3046: PUSH
3047: LD_VAR 0 5
3051: PPUSH
3052: LD_VAR 0 4
3056: PPUSH
3057: LD_INT 3
3059: PPUSH
3060: CALL_OW 272
3064: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3065: LD_ADDR_VAR 0 8
3069: PUSH
3070: LD_VAR 0 6
3074: PPUSH
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 3
3082: PPUSH
3083: CALL_OW 273
3087: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3088: LD_VAR 0 7
3092: PPUSH
3093: LD_VAR 0 8
3097: PPUSH
3098: CALL_OW 488
3102: NOT
3103: IFFALSE 3107
// continue ;
3105: GO 3039
// if HexInfo ( _x , _y ) = 0 then
3107: LD_VAR 0 7
3111: PPUSH
3112: LD_VAR 0 8
3116: PPUSH
3117: CALL_OW 428
3121: PUSH
3122: LD_INT 0
3124: EQUAL
3125: IFFALSE 3150
// begin ComMoveXY ( unit , _x , _y ) ;
3127: LD_VAR 0 1
3131: PPUSH
3132: LD_VAR 0 7
3136: PPUSH
3137: LD_VAR 0 8
3141: PPUSH
3142: CALL_OW 111
// exit ;
3146: POP
3147: POP
3148: GO 3154
// end ; end ;
3150: GO 3039
3152: POP
3153: POP
// end ;
3154: LD_VAR 0 3
3158: RET
// export function ScanBase ( side , base_area ) ; begin
3159: LD_INT 0
3161: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3162: LD_ADDR_VAR 0 3
3166: PUSH
3167: LD_VAR 0 2
3171: PPUSH
3172: LD_INT 81
3174: PUSH
3175: LD_VAR 0 1
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 70
3188: ST_TO_ADDR
// end ;
3189: LD_VAR 0 3
3193: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3194: LD_INT 0
3196: PPUSH
3197: PPUSH
3198: PPUSH
3199: PPUSH
// result := false ;
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// side := GetSide ( unit ) ;
3208: LD_ADDR_VAR 0 3
3212: PUSH
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 255
3222: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3223: LD_ADDR_VAR 0 4
3227: PUSH
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 248
3237: ST_TO_ADDR
// case nat of 1 :
3238: LD_VAR 0 4
3242: PUSH
3243: LD_INT 1
3245: DOUBLE
3246: EQUAL
3247: IFTRUE 3251
3249: GO 3262
3251: POP
// tech := tech_lassight ; 2 :
3252: LD_ADDR_VAR 0 5
3256: PUSH
3257: LD_INT 12
3259: ST_TO_ADDR
3260: GO 3301
3262: LD_INT 2
3264: DOUBLE
3265: EQUAL
3266: IFTRUE 3270
3268: GO 3281
3270: POP
// tech := tech_mortar ; 3 :
3271: LD_ADDR_VAR 0 5
3275: PUSH
3276: LD_INT 41
3278: ST_TO_ADDR
3279: GO 3301
3281: LD_INT 3
3283: DOUBLE
3284: EQUAL
3285: IFTRUE 3289
3287: GO 3300
3289: POP
// tech := tech_bazooka ; end ;
3290: LD_ADDR_VAR 0 5
3294: PUSH
3295: LD_INT 44
3297: ST_TO_ADDR
3298: GO 3301
3300: POP
// if Researched ( side , tech ) then
3301: LD_VAR 0 3
3305: PPUSH
3306: LD_VAR 0 5
3310: PPUSH
3311: CALL_OW 325
3315: IFFALSE 3342
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3317: LD_ADDR_VAR 0 2
3321: PUSH
3322: LD_INT 5
3324: PUSH
3325: LD_INT 8
3327: PUSH
3328: LD_INT 9
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: PUSH
3336: LD_VAR 0 4
3340: ARRAY
3341: ST_TO_ADDR
// end ;
3342: LD_VAR 0 2
3346: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3347: LD_INT 0
3349: PPUSH
3350: PPUSH
3351: PPUSH
// if not mines then
3352: LD_VAR 0 2
3356: NOT
3357: IFFALSE 3361
// exit ;
3359: GO 3505
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3361: LD_ADDR_VAR 0 5
3365: PUSH
3366: LD_INT 81
3368: PUSH
3369: LD_VAR 0 1
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PUSH
3378: LD_INT 3
3380: PUSH
3381: LD_INT 21
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: ST_TO_ADDR
// for i in mines do
3404: LD_ADDR_VAR 0 4
3408: PUSH
3409: LD_VAR 0 2
3413: PUSH
3414: FOR_IN
3415: IFFALSE 3503
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3417: LD_VAR 0 4
3421: PUSH
3422: LD_INT 1
3424: ARRAY
3425: PPUSH
3426: LD_VAR 0 4
3430: PUSH
3431: LD_INT 2
3433: ARRAY
3434: PPUSH
3435: CALL_OW 458
3439: NOT
3440: IFFALSE 3444
// continue ;
3442: GO 3414
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3444: LD_VAR 0 4
3448: PUSH
3449: LD_INT 1
3451: ARRAY
3452: PPUSH
3453: LD_VAR 0 4
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 428
3466: PUSH
3467: LD_VAR 0 5
3471: IN
3472: IFFALSE 3501
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3474: LD_VAR 0 4
3478: PUSH
3479: LD_INT 1
3481: ARRAY
3482: PPUSH
3483: LD_VAR 0 4
3487: PUSH
3488: LD_INT 2
3490: ARRAY
3491: PPUSH
3492: LD_VAR 0 1
3496: PPUSH
3497: CALL_OW 456
// end ;
3501: GO 3414
3503: POP
3504: POP
// end ;
3505: LD_VAR 0 3
3509: RET
// export function Count ( array ) ; begin
3510: LD_INT 0
3512: PPUSH
// result := array + 0 ;
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 0
3525: PLUS
3526: ST_TO_ADDR
// end ;
3527: LD_VAR 0 2
3531: RET
// export function IsEmpty ( building ) ; begin
3532: LD_INT 0
3534: PPUSH
// if not building then
3535: LD_VAR 0 1
3539: NOT
3540: IFFALSE 3544
// exit ;
3542: GO 3587
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3544: LD_ADDR_VAR 0 2
3548: PUSH
3549: LD_VAR 0 1
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_VAR 0 1
3561: PPUSH
3562: CALL_OW 255
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 58
3573: PUSH
3574: EMPTY
3575: LIST
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PPUSH
3581: CALL_OW 69
3585: IN
3586: ST_TO_ADDR
// end ;
3587: LD_VAR 0 2
3591: RET
// export function IsNotFull ( building ) ; var places ; begin
3592: LD_INT 0
3594: PPUSH
3595: PPUSH
// if not building then
3596: LD_VAR 0 1
3600: NOT
3601: IFFALSE 3605
// exit ;
3603: GO 3633
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_VAR 0 1
3614: PPUSH
3615: LD_INT 3
3617: PUSH
3618: LD_INT 62
3620: PUSH
3621: EMPTY
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 72
3632: ST_TO_ADDR
// end ;
3633: LD_VAR 0 2
3637: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3638: LD_INT 0
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
// tmp := [ ] ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: EMPTY
3650: ST_TO_ADDR
// list := [ ] ;
3651: LD_ADDR_VAR 0 5
3655: PUSH
3656: EMPTY
3657: ST_TO_ADDR
// for i = 16 to 25 do
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: DOUBLE
3664: LD_INT 16
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 25
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3745
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PUSH
3684: LD_INT 22
3686: PUSH
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 255
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 91
3703: PUSH
3704: LD_VAR 0 1
3708: PUSH
3709: LD_INT 6
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 30
3719: PUSH
3720: LD_VAR 0 4
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: PPUSH
3737: CALL_OW 69
3741: ADD
3742: ST_TO_ADDR
3743: GO 3671
3745: POP
3746: POP
// for i = 1 to tmp do
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: DOUBLE
3753: LD_INT 1
3755: DEC
3756: ST_TO_ADDR
3757: LD_VAR 0 3
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3851
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3765: LD_ADDR_VAR 0 5
3769: PUSH
3770: LD_VAR 0 5
3774: PUSH
3775: LD_VAR 0 3
3779: PUSH
3780: LD_VAR 0 4
3784: ARRAY
3785: PPUSH
3786: CALL_OW 266
3790: PUSH
3791: LD_VAR 0 3
3795: PUSH
3796: LD_VAR 0 4
3800: ARRAY
3801: PPUSH
3802: CALL_OW 250
3806: PUSH
3807: LD_VAR 0 3
3811: PUSH
3812: LD_VAR 0 4
3816: ARRAY
3817: PPUSH
3818: CALL_OW 251
3822: PUSH
3823: LD_VAR 0 3
3827: PUSH
3828: LD_VAR 0 4
3832: ARRAY
3833: PPUSH
3834: CALL_OW 254
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: ADD
3848: ST_TO_ADDR
3849: GO 3762
3851: POP
3852: POP
// result := list ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_VAR 0 5
3862: ST_TO_ADDR
// end ;
3863: LD_VAR 0 2
3867: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3868: LD_INT 0
3870: PPUSH
3871: PPUSH
3872: PPUSH
3873: PPUSH
3874: PPUSH
3875: PPUSH
3876: PPUSH
// if not factory then
3877: LD_VAR 0 1
3881: NOT
3882: IFFALSE 3886
// exit ;
3884: GO 4479
// if control = control_apeman then
3886: LD_VAR 0 4
3890: PUSH
3891: LD_INT 5
3893: EQUAL
3894: IFFALSE 4003
// begin tmp := UnitsInside ( factory ) ;
3896: LD_ADDR_VAR 0 8
3900: PUSH
3901: LD_VAR 0 1
3905: PPUSH
3906: CALL_OW 313
3910: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3911: LD_VAR 0 8
3915: PPUSH
3916: LD_INT 25
3918: PUSH
3919: LD_INT 12
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 72
3930: NOT
3931: IFFALSE 3941
// control := control_manual ;
3933: LD_ADDR_VAR 0 4
3937: PUSH
3938: LD_INT 1
3940: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3941: LD_ADDR_VAR 0 8
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL 3638 0 1
3955: ST_TO_ADDR
// if tmp then
3956: LD_VAR 0 8
3960: IFFALSE 4003
// begin for i in tmp do
3962: LD_ADDR_VAR 0 7
3966: PUSH
3967: LD_VAR 0 8
3971: PUSH
3972: FOR_IN
3973: IFFALSE 4001
// if i [ 1 ] = b_ext_radio then
3975: LD_VAR 0 7
3979: PUSH
3980: LD_INT 1
3982: ARRAY
3983: PUSH
3984: LD_INT 22
3986: EQUAL
3987: IFFALSE 3999
// begin control := control_remote ;
3989: LD_ADDR_VAR 0 4
3993: PUSH
3994: LD_INT 2
3996: ST_TO_ADDR
// break ;
3997: GO 4001
// end ;
3999: GO 3972
4001: POP
4002: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_VAR 0 2
4012: PPUSH
4013: LD_VAR 0 3
4017: PPUSH
4018: LD_VAR 0 4
4022: PPUSH
4023: LD_VAR 0 5
4027: PPUSH
4028: CALL_OW 448
4032: IFFALSE 4067
// begin result := [ chassis , engine , control , weapon ] ;
4034: LD_ADDR_VAR 0 6
4038: PUSH
4039: LD_VAR 0 2
4043: PUSH
4044: LD_VAR 0 3
4048: PUSH
4049: LD_VAR 0 4
4053: PUSH
4054: LD_VAR 0 5
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: ST_TO_ADDR
// exit ;
4065: GO 4479
// end ; _chassis := AvailableChassisList ( factory ) ;
4067: LD_ADDR_VAR 0 9
4071: PUSH
4072: LD_VAR 0 1
4076: PPUSH
4077: CALL_OW 475
4081: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4082: LD_ADDR_VAR 0 11
4086: PUSH
4087: LD_VAR 0 1
4091: PPUSH
4092: CALL_OW 476
4096: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4097: LD_ADDR_VAR 0 12
4101: PUSH
4102: LD_VAR 0 1
4106: PPUSH
4107: CALL_OW 477
4111: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4112: LD_ADDR_VAR 0 10
4116: PUSH
4117: LD_VAR 0 1
4121: PPUSH
4122: CALL_OW 478
4126: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4127: LD_VAR 0 9
4131: NOT
4132: PUSH
4133: LD_VAR 0 11
4137: NOT
4138: OR
4139: PUSH
4140: LD_VAR 0 12
4144: NOT
4145: OR
4146: PUSH
4147: LD_VAR 0 10
4151: NOT
4152: OR
4153: IFFALSE 4188
// begin result := [ chassis , engine , control , weapon ] ;
4155: LD_ADDR_VAR 0 6
4159: PUSH
4160: LD_VAR 0 2
4164: PUSH
4165: LD_VAR 0 3
4169: PUSH
4170: LD_VAR 0 4
4174: PUSH
4175: LD_VAR 0 5
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// exit ;
4186: GO 4479
// end ; if not chassis in _chassis then
4188: LD_VAR 0 2
4192: PUSH
4193: LD_VAR 0 9
4197: IN
4198: NOT
4199: IFFALSE 4225
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4201: LD_ADDR_VAR 0 2
4205: PUSH
4206: LD_VAR 0 9
4210: PUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 9
4218: PPUSH
4219: CALL_OW 12
4223: ARRAY
4224: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4225: LD_VAR 0 2
4229: PPUSH
4230: LD_VAR 0 3
4234: PPUSH
4235: CALL 4484 0 2
4239: NOT
4240: IFFALSE 4299
// repeat engine := _engine [ 1 ] ;
4242: LD_ADDR_VAR 0 3
4246: PUSH
4247: LD_VAR 0 11
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4256: LD_ADDR_VAR 0 11
4260: PUSH
4261: LD_VAR 0 11
4265: PPUSH
4266: LD_INT 1
4268: PPUSH
4269: CALL_OW 3
4273: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4274: LD_VAR 0 2
4278: PPUSH
4279: LD_VAR 0 3
4283: PPUSH
4284: CALL 4484 0 2
4288: PUSH
4289: LD_VAR 0 11
4293: PUSH
4294: EMPTY
4295: EQUAL
4296: OR
4297: IFFALSE 4242
// if not control in _control then
4299: LD_VAR 0 4
4303: PUSH
4304: LD_VAR 0 12
4308: IN
4309: NOT
4310: IFFALSE 4336
// control := _control [ rand ( 1 , _control ) ] ;
4312: LD_ADDR_VAR 0 4
4316: PUSH
4317: LD_VAR 0 12
4321: PUSH
4322: LD_INT 1
4324: PPUSH
4325: LD_VAR 0 12
4329: PPUSH
4330: CALL_OW 12
4334: ARRAY
4335: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4336: LD_VAR 0 2
4340: PPUSH
4341: LD_VAR 0 5
4345: PPUSH
4346: CALL 4704 0 2
4350: NOT
4351: IFFALSE 4410
// repeat weapon := _weapon [ 1 ] ;
4353: LD_ADDR_VAR 0 5
4357: PUSH
4358: LD_VAR 0 10
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4367: LD_ADDR_VAR 0 10
4371: PUSH
4372: LD_VAR 0 10
4376: PPUSH
4377: LD_INT 1
4379: PPUSH
4380: CALL_OW 3
4384: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4385: LD_VAR 0 2
4389: PPUSH
4390: LD_VAR 0 5
4394: PPUSH
4395: CALL 4704 0 2
4399: PUSH
4400: LD_VAR 0 10
4404: PUSH
4405: EMPTY
4406: EQUAL
4407: OR
4408: IFFALSE 4353
// result := [ ] ;
4410: LD_ADDR_VAR 0 6
4414: PUSH
4415: EMPTY
4416: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4417: LD_VAR 0 1
4421: PPUSH
4422: LD_VAR 0 2
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: LD_VAR 0 4
4436: PPUSH
4437: LD_VAR 0 5
4441: PPUSH
4442: CALL_OW 448
4446: IFFALSE 4479
// result := [ chassis , engine , control , weapon ] ;
4448: LD_ADDR_VAR 0 6
4452: PUSH
4453: LD_VAR 0 2
4457: PUSH
4458: LD_VAR 0 3
4462: PUSH
4463: LD_VAR 0 4
4467: PUSH
4468: LD_VAR 0 5
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: ST_TO_ADDR
// end ;
4479: LD_VAR 0 6
4483: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4484: LD_INT 0
4486: PPUSH
// if not chassis or not engine then
4487: LD_VAR 0 1
4491: NOT
4492: PUSH
4493: LD_VAR 0 2
4497: NOT
4498: OR
4499: IFFALSE 4503
// exit ;
4501: GO 4699
// case engine of engine_solar :
4503: LD_VAR 0 2
4507: PUSH
4508: LD_INT 2
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4554
4516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4517: LD_ADDR_VAR 0 3
4521: PUSH
4522: LD_INT 11
4524: PUSH
4525: LD_INT 12
4527: PUSH
4528: LD_INT 13
4530: PUSH
4531: LD_INT 14
4533: PUSH
4534: LD_INT 1
4536: PUSH
4537: LD_INT 2
4539: PUSH
4540: LD_INT 3
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: ST_TO_ADDR
4552: GO 4683
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4624
4562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: LD_INT 11
4570: PUSH
4571: LD_INT 12
4573: PUSH
4574: LD_INT 13
4576: PUSH
4577: LD_INT 14
4579: PUSH
4580: LD_INT 1
4582: PUSH
4583: LD_INT 2
4585: PUSH
4586: LD_INT 3
4588: PUSH
4589: LD_INT 4
4591: PUSH
4592: LD_INT 5
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 23
4600: PUSH
4601: LD_INT 22
4603: PUSH
4604: LD_INT 24
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: ST_TO_ADDR
4622: GO 4683
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4682
4632: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4633: LD_ADDR_VAR 0 3
4637: PUSH
4638: LD_INT 13
4640: PUSH
4641: LD_INT 14
4643: PUSH
4644: LD_INT 2
4646: PUSH
4647: LD_INT 3
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 5
4655: PUSH
4656: LD_INT 21
4658: PUSH
4659: LD_INT 22
4661: PUSH
4662: LD_INT 23
4664: PUSH
4665: LD_INT 24
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: ST_TO_ADDR
4680: GO 4683
4682: POP
// result := ( chassis in result ) ;
4683: LD_ADDR_VAR 0 3
4687: PUSH
4688: LD_VAR 0 1
4692: PUSH
4693: LD_VAR 0 3
4697: IN
4698: ST_TO_ADDR
// end ;
4699: LD_VAR 0 3
4703: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4704: LD_INT 0
4706: PPUSH
// if not chassis or not weapon then
4707: LD_VAR 0 1
4711: NOT
4712: PUSH
4713: LD_VAR 0 2
4717: NOT
4718: OR
4719: IFFALSE 4723
// exit ;
4721: GO 5783
// case weapon of us_machine_gun :
4723: LD_VAR 0 2
4727: PUSH
4728: LD_INT 2
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4766
4736: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4737: LD_ADDR_VAR 0 3
4741: PUSH
4742: LD_INT 1
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 5
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: ST_TO_ADDR
4764: GO 5767
4766: LD_INT 3
4768: DOUBLE
4769: EQUAL
4770: IFTRUE 4774
4772: GO 4804
4774: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: LD_INT 5
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: ST_TO_ADDR
4802: GO 5767
4804: LD_INT 11
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4812
4810: GO 4842
4812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4813: LD_ADDR_VAR 0 3
4817: PUSH
4818: LD_INT 1
4820: PUSH
4821: LD_INT 2
4823: PUSH
4824: LD_INT 3
4826: PUSH
4827: LD_INT 4
4829: PUSH
4830: LD_INT 5
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
4840: GO 5767
4842: LD_INT 4
4844: DOUBLE
4845: EQUAL
4846: IFTRUE 4850
4848: GO 4876
4850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4851: LD_ADDR_VAR 0 3
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: LD_INT 4
4864: PUSH
4865: LD_INT 5
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: ST_TO_ADDR
4874: GO 5767
4876: LD_INT 5
4878: DOUBLE
4879: EQUAL
4880: IFTRUE 4884
4882: GO 4910
4884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4885: LD_ADDR_VAR 0 3
4889: PUSH
4890: LD_INT 2
4892: PUSH
4893: LD_INT 3
4895: PUSH
4896: LD_INT 4
4898: PUSH
4899: LD_INT 5
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
4908: GO 5767
4910: LD_INT 9
4912: DOUBLE
4913: EQUAL
4914: IFTRUE 4918
4916: GO 4944
4918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4919: LD_ADDR_VAR 0 3
4923: PUSH
4924: LD_INT 2
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: ST_TO_ADDR
4942: GO 5767
4944: LD_INT 7
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4952
4950: GO 4978
4952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: LD_INT 5
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: ST_TO_ADDR
4976: GO 5767
4978: LD_INT 12
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5012
4986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4987: LD_ADDR_VAR 0 3
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 4
5000: PUSH
5001: LD_INT 5
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: ST_TO_ADDR
5010: GO 5767
5012: LD_INT 13
5014: DOUBLE
5015: EQUAL
5016: IFTRUE 5020
5018: GO 5046
5020: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: LD_INT 2
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: LD_INT 4
5034: PUSH
5035: LD_INT 5
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: ST_TO_ADDR
5044: GO 5767
5046: LD_INT 14
5048: DOUBLE
5049: EQUAL
5050: IFTRUE 5054
5052: GO 5072
5054: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: ST_TO_ADDR
5070: GO 5767
5072: LD_INT 6
5074: DOUBLE
5075: EQUAL
5076: IFTRUE 5080
5078: GO 5098
5080: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5081: LD_ADDR_VAR 0 3
5085: PUSH
5086: LD_INT 4
5088: PUSH
5089: LD_INT 5
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: ST_TO_ADDR
5096: GO 5767
5098: LD_INT 10
5100: DOUBLE
5101: EQUAL
5102: IFTRUE 5106
5104: GO 5124
5106: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5107: LD_ADDR_VAR 0 3
5111: PUSH
5112: LD_INT 4
5114: PUSH
5115: LD_INT 5
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: ST_TO_ADDR
5122: GO 5767
5124: LD_INT 22
5126: DOUBLE
5127: EQUAL
5128: IFTRUE 5132
5130: GO 5158
5132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_INT 11
5140: PUSH
5141: LD_INT 12
5143: PUSH
5144: LD_INT 13
5146: PUSH
5147: LD_INT 14
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: ST_TO_ADDR
5156: GO 5767
5158: LD_INT 23
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5166
5164: GO 5192
5166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 11
5174: PUSH
5175: LD_INT 12
5177: PUSH
5178: LD_INT 13
5180: PUSH
5181: LD_INT 14
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: ST_TO_ADDR
5190: GO 5767
5192: LD_INT 24
5194: DOUBLE
5195: EQUAL
5196: IFTRUE 5200
5198: GO 5226
5200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5201: LD_ADDR_VAR 0 3
5205: PUSH
5206: LD_INT 11
5208: PUSH
5209: LD_INT 12
5211: PUSH
5212: LD_INT 13
5214: PUSH
5215: LD_INT 14
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: ST_TO_ADDR
5224: GO 5767
5226: LD_INT 30
5228: DOUBLE
5229: EQUAL
5230: IFTRUE 5234
5232: GO 5260
5234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5235: LD_ADDR_VAR 0 3
5239: PUSH
5240: LD_INT 11
5242: PUSH
5243: LD_INT 12
5245: PUSH
5246: LD_INT 13
5248: PUSH
5249: LD_INT 14
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: ST_TO_ADDR
5258: GO 5767
5260: LD_INT 25
5262: DOUBLE
5263: EQUAL
5264: IFTRUE 5268
5266: GO 5286
5268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: LD_INT 13
5276: PUSH
5277: LD_INT 14
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: ST_TO_ADDR
5284: GO 5767
5286: LD_INT 27
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5294
5292: GO 5312
5294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5295: LD_ADDR_VAR 0 3
5299: PUSH
5300: LD_INT 13
5302: PUSH
5303: LD_INT 14
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: ST_TO_ADDR
5310: GO 5767
5312: LD_INT 92
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5346
5320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: LD_INT 11
5328: PUSH
5329: LD_INT 12
5331: PUSH
5332: LD_INT 13
5334: PUSH
5335: LD_INT 14
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: ST_TO_ADDR
5344: GO 5767
5346: LD_INT 28
5348: DOUBLE
5349: EQUAL
5350: IFTRUE 5354
5352: GO 5372
5354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: LD_INT 13
5362: PUSH
5363: LD_INT 14
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: ST_TO_ADDR
5370: GO 5767
5372: LD_INT 29
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5398
5380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5381: LD_ADDR_VAR 0 3
5385: PUSH
5386: LD_INT 13
5388: PUSH
5389: LD_INT 14
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: ST_TO_ADDR
5396: GO 5767
5398: LD_INT 31
5400: DOUBLE
5401: EQUAL
5402: IFTRUE 5406
5404: GO 5424
5406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5407: LD_ADDR_VAR 0 3
5411: PUSH
5412: LD_INT 13
5414: PUSH
5415: LD_INT 14
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: ST_TO_ADDR
5422: GO 5767
5424: LD_INT 26
5426: DOUBLE
5427: EQUAL
5428: IFTRUE 5432
5430: GO 5450
5432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5433: LD_ADDR_VAR 0 3
5437: PUSH
5438: LD_INT 13
5440: PUSH
5441: LD_INT 14
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: ST_TO_ADDR
5448: GO 5767
5450: LD_INT 42
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5484
5458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: LD_INT 21
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 23
5472: PUSH
5473: LD_INT 24
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: ST_TO_ADDR
5482: GO 5767
5484: LD_INT 43
5486: DOUBLE
5487: EQUAL
5488: IFTRUE 5492
5490: GO 5518
5492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5493: LD_ADDR_VAR 0 3
5497: PUSH
5498: LD_INT 21
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 23
5506: PUSH
5507: LD_INT 24
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: ST_TO_ADDR
5516: GO 5767
5518: LD_INT 44
5520: DOUBLE
5521: EQUAL
5522: IFTRUE 5526
5524: GO 5552
5526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5527: LD_ADDR_VAR 0 3
5531: PUSH
5532: LD_INT 21
5534: PUSH
5535: LD_INT 22
5537: PUSH
5538: LD_INT 23
5540: PUSH
5541: LD_INT 24
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: ST_TO_ADDR
5550: GO 5767
5552: LD_INT 45
5554: DOUBLE
5555: EQUAL
5556: IFTRUE 5560
5558: GO 5586
5560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5561: LD_ADDR_VAR 0 3
5565: PUSH
5566: LD_INT 21
5568: PUSH
5569: LD_INT 22
5571: PUSH
5572: LD_INT 23
5574: PUSH
5575: LD_INT 24
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: ST_TO_ADDR
5584: GO 5767
5586: LD_INT 49
5588: DOUBLE
5589: EQUAL
5590: IFTRUE 5594
5592: GO 5620
5594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: LD_INT 21
5602: PUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 23
5608: PUSH
5609: LD_INT 24
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: ST_TO_ADDR
5618: GO 5767
5620: LD_INT 51
5622: DOUBLE
5623: EQUAL
5624: IFTRUE 5628
5626: GO 5654
5628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_INT 21
5636: PUSH
5637: LD_INT 22
5639: PUSH
5640: LD_INT 23
5642: PUSH
5643: LD_INT 24
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: ST_TO_ADDR
5652: GO 5767
5654: LD_INT 52
5656: DOUBLE
5657: EQUAL
5658: IFTRUE 5662
5660: GO 5688
5662: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5663: LD_ADDR_VAR 0 3
5667: PUSH
5668: LD_INT 21
5670: PUSH
5671: LD_INT 22
5673: PUSH
5674: LD_INT 23
5676: PUSH
5677: LD_INT 24
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: ST_TO_ADDR
5686: GO 5767
5688: LD_INT 53
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5696
5694: GO 5714
5696: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5697: LD_ADDR_VAR 0 3
5701: PUSH
5702: LD_INT 23
5704: PUSH
5705: LD_INT 24
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: ST_TO_ADDR
5712: GO 5767
5714: LD_INT 46
5716: DOUBLE
5717: EQUAL
5718: IFTRUE 5722
5720: GO 5740
5722: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 23
5730: PUSH
5731: LD_INT 24
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: ST_TO_ADDR
5738: GO 5767
5740: LD_INT 47
5742: DOUBLE
5743: EQUAL
5744: IFTRUE 5748
5746: GO 5766
5748: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_INT 23
5756: PUSH
5757: LD_INT 24
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: ST_TO_ADDR
5764: GO 5767
5766: POP
// result := ( chassis in result ) ;
5767: LD_ADDR_VAR 0 3
5771: PUSH
5772: LD_VAR 0 1
5776: PUSH
5777: LD_VAR 0 3
5781: IN
5782: ST_TO_ADDR
// end ;
5783: LD_VAR 0 3
5787: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5788: LD_INT 0
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
// result := array ;
5797: LD_ADDR_VAR 0 5
5801: PUSH
5802: LD_VAR 0 1
5806: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5807: LD_VAR 0 1
5811: NOT
5812: PUSH
5813: LD_VAR 0 2
5817: NOT
5818: OR
5819: PUSH
5820: LD_VAR 0 3
5824: NOT
5825: OR
5826: PUSH
5827: LD_VAR 0 2
5831: PUSH
5832: LD_VAR 0 1
5836: GREATER
5837: OR
5838: PUSH
5839: LD_VAR 0 3
5843: PUSH
5844: LD_VAR 0 1
5848: GREATER
5849: OR
5850: IFFALSE 5854
// exit ;
5852: GO 6150
// if direction then
5854: LD_VAR 0 4
5858: IFFALSE 5922
// begin d := 1 ;
5860: LD_ADDR_VAR 0 9
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// if i_from > i_to then
5868: LD_VAR 0 2
5872: PUSH
5873: LD_VAR 0 3
5877: GREATER
5878: IFFALSE 5904
// length := ( array - i_from ) + i_to else
5880: LD_ADDR_VAR 0 11
5884: PUSH
5885: LD_VAR 0 1
5889: PUSH
5890: LD_VAR 0 2
5894: MINUS
5895: PUSH
5896: LD_VAR 0 3
5900: PLUS
5901: ST_TO_ADDR
5902: GO 5920
// length := i_to - i_from ;
5904: LD_ADDR_VAR 0 11
5908: PUSH
5909: LD_VAR 0 3
5913: PUSH
5914: LD_VAR 0 2
5918: MINUS
5919: ST_TO_ADDR
// end else
5920: GO 5983
// begin d := - 1 ;
5922: LD_ADDR_VAR 0 9
5926: PUSH
5927: LD_INT 1
5929: NEG
5930: ST_TO_ADDR
// if i_from > i_to then
5931: LD_VAR 0 2
5935: PUSH
5936: LD_VAR 0 3
5940: GREATER
5941: IFFALSE 5961
// length := i_from - i_to else
5943: LD_ADDR_VAR 0 11
5947: PUSH
5948: LD_VAR 0 2
5952: PUSH
5953: LD_VAR 0 3
5957: MINUS
5958: ST_TO_ADDR
5959: GO 5983
// length := ( array - i_to ) + i_from ;
5961: LD_ADDR_VAR 0 11
5965: PUSH
5966: LD_VAR 0 1
5970: PUSH
5971: LD_VAR 0 3
5975: MINUS
5976: PUSH
5977: LD_VAR 0 2
5981: PLUS
5982: ST_TO_ADDR
// end ; if not length then
5983: LD_VAR 0 11
5987: NOT
5988: IFFALSE 5992
// exit ;
5990: GO 6150
// tmp := array ;
5992: LD_ADDR_VAR 0 10
5996: PUSH
5997: LD_VAR 0 1
6001: ST_TO_ADDR
// for i = 1 to length do
6002: LD_ADDR_VAR 0 6
6006: PUSH
6007: DOUBLE
6008: LD_INT 1
6010: DEC
6011: ST_TO_ADDR
6012: LD_VAR 0 11
6016: PUSH
6017: FOR_TO
6018: IFFALSE 6138
// begin for j = 1 to array do
6020: LD_ADDR_VAR 0 7
6024: PUSH
6025: DOUBLE
6026: LD_INT 1
6028: DEC
6029: ST_TO_ADDR
6030: LD_VAR 0 1
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6124
// begin k := j + d ;
6038: LD_ADDR_VAR 0 8
6042: PUSH
6043: LD_VAR 0 7
6047: PUSH
6048: LD_VAR 0 9
6052: PLUS
6053: ST_TO_ADDR
// if k > array then
6054: LD_VAR 0 8
6058: PUSH
6059: LD_VAR 0 1
6063: GREATER
6064: IFFALSE 6074
// k := 1 ;
6066: LD_ADDR_VAR 0 8
6070: PUSH
6071: LD_INT 1
6073: ST_TO_ADDR
// if not k then
6074: LD_VAR 0 8
6078: NOT
6079: IFFALSE 6091
// k := array ;
6081: LD_ADDR_VAR 0 8
6085: PUSH
6086: LD_VAR 0 1
6090: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6091: LD_ADDR_VAR 0 10
6095: PUSH
6096: LD_VAR 0 10
6100: PPUSH
6101: LD_VAR 0 8
6105: PPUSH
6106: LD_VAR 0 1
6110: PUSH
6111: LD_VAR 0 7
6115: ARRAY
6116: PPUSH
6117: CALL_OW 1
6121: ST_TO_ADDR
// end ;
6122: GO 6035
6124: POP
6125: POP
// array := tmp ;
6126: LD_ADDR_VAR 0 1
6130: PUSH
6131: LD_VAR 0 10
6135: ST_TO_ADDR
// end ;
6136: GO 6017
6138: POP
6139: POP
// result := array ;
6140: LD_ADDR_VAR 0 5
6144: PUSH
6145: LD_VAR 0 1
6149: ST_TO_ADDR
// end ;
6150: LD_VAR 0 5
6154: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6155: LD_INT 0
6157: PPUSH
6158: PPUSH
// result := 0 ;
6159: LD_ADDR_VAR 0 3
6163: PUSH
6164: LD_INT 0
6166: ST_TO_ADDR
// if not array or not value in array then
6167: LD_VAR 0 1
6171: NOT
6172: PUSH
6173: LD_VAR 0 2
6177: PUSH
6178: LD_VAR 0 1
6182: IN
6183: NOT
6184: OR
6185: IFFALSE 6189
// exit ;
6187: GO 6243
// for i = 1 to array do
6189: LD_ADDR_VAR 0 4
6193: PUSH
6194: DOUBLE
6195: LD_INT 1
6197: DEC
6198: ST_TO_ADDR
6199: LD_VAR 0 1
6203: PUSH
6204: FOR_TO
6205: IFFALSE 6241
// if value = array [ i ] then
6207: LD_VAR 0 2
6211: PUSH
6212: LD_VAR 0 1
6216: PUSH
6217: LD_VAR 0 4
6221: ARRAY
6222: EQUAL
6223: IFFALSE 6239
// begin result := i ;
6225: LD_ADDR_VAR 0 3
6229: PUSH
6230: LD_VAR 0 4
6234: ST_TO_ADDR
// exit ;
6235: POP
6236: POP
6237: GO 6243
// end ;
6239: GO 6204
6241: POP
6242: POP
// end ;
6243: LD_VAR 0 3
6247: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6248: LD_INT 0
6250: PPUSH
// vc_chassis := chassis ;
6251: LD_ADDR_OWVAR 37
6255: PUSH
6256: LD_VAR 0 1
6260: ST_TO_ADDR
// vc_engine := engine ;
6261: LD_ADDR_OWVAR 39
6265: PUSH
6266: LD_VAR 0 2
6270: ST_TO_ADDR
// vc_control := control ;
6271: LD_ADDR_OWVAR 38
6275: PUSH
6276: LD_VAR 0 3
6280: ST_TO_ADDR
// vc_weapon := weapon ;
6281: LD_ADDR_OWVAR 40
6285: PUSH
6286: LD_VAR 0 4
6290: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6291: LD_ADDR_OWVAR 41
6295: PUSH
6296: LD_VAR 0 5
6300: ST_TO_ADDR
// end ;
6301: LD_VAR 0 6
6305: RET
// export function WantPlant ( unit ) ; var task ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
// result := false ;
6310: LD_ADDR_VAR 0 2
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 1
6327: PPUSH
6328: CALL_OW 437
6332: ST_TO_ADDR
// if task then
6333: LD_VAR 0 3
6337: IFFALSE 6365
// if task [ 1 ] [ 1 ] = p then
6339: LD_VAR 0 3
6343: PUSH
6344: LD_INT 1
6346: ARRAY
6347: PUSH
6348: LD_INT 1
6350: ARRAY
6351: PUSH
6352: LD_STRING p
6354: EQUAL
6355: IFFALSE 6365
// result := true ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// end ;
6365: LD_VAR 0 2
6369: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
// if pos < 1 then
6376: LD_VAR 0 2
6380: PUSH
6381: LD_INT 1
6383: LESS
6384: IFFALSE 6388
// exit ;
6386: GO 6691
// if pos = 1 then
6388: LD_VAR 0 2
6392: PUSH
6393: LD_INT 1
6395: EQUAL
6396: IFFALSE 6429
// result := Replace ( arr , pos [ 1 ] , value ) else
6398: LD_ADDR_VAR 0 4
6402: PUSH
6403: LD_VAR 0 1
6407: PPUSH
6408: LD_VAR 0 2
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PPUSH
6417: LD_VAR 0 3
6421: PPUSH
6422: CALL_OW 1
6426: ST_TO_ADDR
6427: GO 6691
// begin tmp := arr ;
6429: LD_ADDR_VAR 0 6
6433: PUSH
6434: LD_VAR 0 1
6438: ST_TO_ADDR
// s_arr := [ tmp ] ;
6439: LD_ADDR_VAR 0 7
6443: PUSH
6444: LD_VAR 0 6
6448: PUSH
6449: EMPTY
6450: LIST
6451: ST_TO_ADDR
// for i = 1 to pos - 1 do
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: DOUBLE
6458: LD_INT 1
6460: DEC
6461: ST_TO_ADDR
6462: LD_VAR 0 2
6466: PUSH
6467: LD_INT 1
6469: MINUS
6470: PUSH
6471: FOR_TO
6472: IFFALSE 6517
// begin tmp := tmp [ pos [ i ] ] ;
6474: LD_ADDR_VAR 0 6
6478: PUSH
6479: LD_VAR 0 6
6483: PUSH
6484: LD_VAR 0 2
6488: PUSH
6489: LD_VAR 0 5
6493: ARRAY
6494: ARRAY
6495: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6496: LD_ADDR_VAR 0 7
6500: PUSH
6501: LD_VAR 0 7
6505: PUSH
6506: LD_VAR 0 6
6510: PUSH
6511: EMPTY
6512: LIST
6513: ADD
6514: ST_TO_ADDR
// end ;
6515: GO 6471
6517: POP
6518: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6519: LD_ADDR_VAR 0 6
6523: PUSH
6524: LD_VAR 0 6
6528: PPUSH
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 2
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 3
6544: PPUSH
6545: CALL_OW 1
6549: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6550: LD_ADDR_VAR 0 7
6554: PUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 7
6564: PPUSH
6565: LD_VAR 0 6
6569: PPUSH
6570: CALL_OW 1
6574: ST_TO_ADDR
// for i = s_arr downto 2 do
6575: LD_ADDR_VAR 0 5
6579: PUSH
6580: DOUBLE
6581: LD_VAR 0 7
6585: INC
6586: ST_TO_ADDR
6587: LD_INT 2
6589: PUSH
6590: FOR_DOWNTO
6591: IFFALSE 6675
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6593: LD_ADDR_VAR 0 6
6597: PUSH
6598: LD_VAR 0 7
6602: PUSH
6603: LD_VAR 0 5
6607: PUSH
6608: LD_INT 1
6610: MINUS
6611: ARRAY
6612: PPUSH
6613: LD_VAR 0 2
6617: PUSH
6618: LD_VAR 0 5
6622: PUSH
6623: LD_INT 1
6625: MINUS
6626: ARRAY
6627: PPUSH
6628: LD_VAR 0 7
6632: PUSH
6633: LD_VAR 0 5
6637: ARRAY
6638: PPUSH
6639: CALL_OW 1
6643: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6644: LD_ADDR_VAR 0 7
6648: PUSH
6649: LD_VAR 0 7
6653: PPUSH
6654: LD_VAR 0 5
6658: PUSH
6659: LD_INT 1
6661: MINUS
6662: PPUSH
6663: LD_VAR 0 6
6667: PPUSH
6668: CALL_OW 1
6672: ST_TO_ADDR
// end ;
6673: GO 6590
6675: POP
6676: POP
// result := s_arr [ 1 ] ;
6677: LD_ADDR_VAR 0 4
6681: PUSH
6682: LD_VAR 0 7
6686: PUSH
6687: LD_INT 1
6689: ARRAY
6690: ST_TO_ADDR
// end ; end ;
6691: LD_VAR 0 4
6695: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6696: LD_INT 0
6698: PPUSH
6699: PPUSH
// if not list then
6700: LD_VAR 0 1
6704: NOT
6705: IFFALSE 6709
// exit ;
6707: GO 6800
// i := list [ pos1 ] ;
6709: LD_ADDR_VAR 0 5
6713: PUSH
6714: LD_VAR 0 1
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: ST_TO_ADDR
// if not i then
6725: LD_VAR 0 5
6729: NOT
6730: IFFALSE 6734
// exit ;
6732: GO 6800
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6734: LD_ADDR_VAR 0 1
6738: PUSH
6739: LD_VAR 0 1
6743: PPUSH
6744: LD_VAR 0 2
6748: PPUSH
6749: LD_VAR 0 1
6753: PUSH
6754: LD_VAR 0 3
6758: ARRAY
6759: PPUSH
6760: CALL_OW 1
6764: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6765: LD_ADDR_VAR 0 1
6769: PUSH
6770: LD_VAR 0 1
6774: PPUSH
6775: LD_VAR 0 3
6779: PPUSH
6780: LD_VAR 0 5
6784: PPUSH
6785: CALL_OW 1
6789: ST_TO_ADDR
// result := list ;
6790: LD_ADDR_VAR 0 4
6794: PUSH
6795: LD_VAR 0 1
6799: ST_TO_ADDR
// end ;
6800: LD_VAR 0 4
6804: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6805: LD_INT 0
6807: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6808: LD_ADDR_VAR 0 5
6812: PUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_VAR 0 2
6837: PPUSH
6838: LD_VAR 0 3
6842: PPUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: CALL 6858 0 5
6852: ST_TO_ADDR
// end ;
6853: LD_VAR 0 5
6857: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6858: LD_INT 0
6860: PPUSH
6861: PPUSH
6862: PPUSH
6863: PPUSH
// if not list then
6864: LD_VAR 0 3
6868: NOT
6869: IFFALSE 6873
// exit ;
6871: GO 7261
// result := [ ] ;
6873: LD_ADDR_VAR 0 6
6877: PUSH
6878: EMPTY
6879: ST_TO_ADDR
// for i in list do
6880: LD_ADDR_VAR 0 7
6884: PUSH
6885: LD_VAR 0 3
6889: PUSH
6890: FOR_IN
6891: IFFALSE 7093
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: LD_VAR 0 7
6902: PPUSH
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 297
6917: ST_TO_ADDR
// if not result then
6918: LD_VAR 0 6
6922: NOT
6923: IFFALSE 6949
// result := [ [ i , tmp ] ] else
6925: LD_ADDR_VAR 0 6
6929: PUSH
6930: LD_VAR 0 7
6934: PUSH
6935: LD_VAR 0 9
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: ST_TO_ADDR
6947: GO 7091
// begin if result [ result ] [ 2 ] < tmp then
6949: LD_VAR 0 6
6953: PUSH
6954: LD_VAR 0 6
6958: ARRAY
6959: PUSH
6960: LD_INT 2
6962: ARRAY
6963: PUSH
6964: LD_VAR 0 9
6968: LESS
6969: IFFALSE 7011
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6971: LD_ADDR_VAR 0 6
6975: PUSH
6976: LD_VAR 0 6
6980: PPUSH
6981: LD_VAR 0 6
6985: PUSH
6986: LD_INT 1
6988: PLUS
6989: PPUSH
6990: LD_VAR 0 7
6994: PUSH
6995: LD_VAR 0 9
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 2
7008: ST_TO_ADDR
7009: GO 7091
// for j = 1 to result do
7011: LD_ADDR_VAR 0 8
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_VAR 0 6
7025: PUSH
7026: FOR_TO
7027: IFFALSE 7089
// begin if tmp < result [ j ] [ 2 ] then
7029: LD_VAR 0 9
7033: PUSH
7034: LD_VAR 0 6
7038: PUSH
7039: LD_VAR 0 8
7043: ARRAY
7044: PUSH
7045: LD_INT 2
7047: ARRAY
7048: LESS
7049: IFFALSE 7087
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7051: LD_ADDR_VAR 0 6
7055: PUSH
7056: LD_VAR 0 6
7060: PPUSH
7061: LD_VAR 0 8
7065: PPUSH
7066: LD_VAR 0 7
7070: PUSH
7071: LD_VAR 0 9
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PPUSH
7080: CALL_OW 2
7084: ST_TO_ADDR
// break ;
7085: GO 7089
// end ; end ;
7087: GO 7026
7089: POP
7090: POP
// end ; end ;
7091: GO 6890
7093: POP
7094: POP
// if result and not asc then
7095: LD_VAR 0 6
7099: PUSH
7100: LD_VAR 0 4
7104: NOT
7105: AND
7106: IFFALSE 7181
// begin tmp := result ;
7108: LD_ADDR_VAR 0 9
7112: PUSH
7113: LD_VAR 0 6
7117: ST_TO_ADDR
// for i = tmp downto 1 do
7118: LD_ADDR_VAR 0 7
7122: PUSH
7123: DOUBLE
7124: LD_VAR 0 9
7128: INC
7129: ST_TO_ADDR
7130: LD_INT 1
7132: PUSH
7133: FOR_DOWNTO
7134: IFFALSE 7179
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7136: LD_ADDR_VAR 0 6
7140: PUSH
7141: LD_VAR 0 6
7145: PPUSH
7146: LD_VAR 0 9
7150: PUSH
7151: LD_VAR 0 7
7155: MINUS
7156: PUSH
7157: LD_INT 1
7159: PLUS
7160: PPUSH
7161: LD_VAR 0 9
7165: PUSH
7166: LD_VAR 0 7
7170: ARRAY
7171: PPUSH
7172: CALL_OW 1
7176: ST_TO_ADDR
7177: GO 7133
7179: POP
7180: POP
// end ; tmp := [ ] ;
7181: LD_ADDR_VAR 0 9
7185: PUSH
7186: EMPTY
7187: ST_TO_ADDR
// if mode then
7188: LD_VAR 0 5
7192: IFFALSE 7261
// begin for i = 1 to result do
7194: LD_ADDR_VAR 0 7
7198: PUSH
7199: DOUBLE
7200: LD_INT 1
7202: DEC
7203: ST_TO_ADDR
7204: LD_VAR 0 6
7208: PUSH
7209: FOR_TO
7210: IFFALSE 7249
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7212: LD_ADDR_VAR 0 9
7216: PUSH
7217: LD_VAR 0 9
7221: PPUSH
7222: LD_VAR 0 7
7226: PPUSH
7227: LD_VAR 0 6
7231: PUSH
7232: LD_VAR 0 7
7236: ARRAY
7237: PUSH
7238: LD_INT 1
7240: ARRAY
7241: PPUSH
7242: CALL_OW 1
7246: ST_TO_ADDR
7247: GO 7209
7249: POP
7250: POP
// result := tmp ;
7251: LD_ADDR_VAR 0 6
7255: PUSH
7256: LD_VAR 0 9
7260: ST_TO_ADDR
// end ; end ;
7261: LD_VAR 0 6
7265: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7266: LD_INT 0
7268: PPUSH
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
7273: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7274: LD_ADDR_VAR 0 5
7278: PUSH
7279: LD_INT 0
7281: PUSH
7282: LD_INT 0
7284: PUSH
7285: LD_INT 0
7287: PUSH
7288: EMPTY
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: ST_TO_ADDR
// if not x or not y then
7296: LD_VAR 0 2
7300: NOT
7301: PUSH
7302: LD_VAR 0 3
7306: NOT
7307: OR
7308: IFFALSE 7312
// exit ;
7310: GO 8962
// if not range then
7312: LD_VAR 0 4
7316: NOT
7317: IFFALSE 7327
// range := 10 ;
7319: LD_ADDR_VAR 0 4
7323: PUSH
7324: LD_INT 10
7326: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7327: LD_ADDR_VAR 0 8
7331: PUSH
7332: LD_INT 81
7334: PUSH
7335: LD_VAR 0 1
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 92
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_VAR 0 4
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: LD_INT 21
7373: PUSH
7374: LD_INT 3
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// if not tmp then
7395: LD_VAR 0 8
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 8962
// for i in tmp do
7404: LD_ADDR_VAR 0 6
7408: PUSH
7409: LD_VAR 0 8
7413: PUSH
7414: FOR_IN
7415: IFFALSE 8937
// begin points := [ 0 , 0 , 0 ] ;
7417: LD_ADDR_VAR 0 9
7421: PUSH
7422: LD_INT 0
7424: PUSH
7425: LD_INT 0
7427: PUSH
7428: LD_INT 0
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: ST_TO_ADDR
// bpoints := 1 ;
7436: LD_ADDR_VAR 0 10
7440: PUSH
7441: LD_INT 1
7443: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7444: LD_VAR 0 6
7448: PPUSH
7449: CALL_OW 247
7453: PUSH
7454: LD_INT 1
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 8040
7462: POP
// begin if GetClass ( i ) = 1 then
7463: LD_VAR 0 6
7467: PPUSH
7468: CALL_OW 257
7472: PUSH
7473: LD_INT 1
7475: EQUAL
7476: IFFALSE 7497
// points := [ 10 , 5 , 3 ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 10
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7497: LD_VAR 0 6
7501: PPUSH
7502: CALL_OW 257
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: LD_INT 3
7512: PUSH
7513: LD_INT 4
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: IN
7521: IFFALSE 7542
// points := [ 3 , 2 , 1 ] ;
7523: LD_ADDR_VAR 0 9
7527: PUSH
7528: LD_INT 3
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: LD_INT 1
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7542: LD_VAR 0 6
7546: PPUSH
7547: CALL_OW 257
7551: PUSH
7552: LD_INT 5
7554: EQUAL
7555: IFFALSE 7576
// points := [ 130 , 5 , 2 ] ;
7557: LD_ADDR_VAR 0 9
7561: PUSH
7562: LD_INT 130
7564: PUSH
7565: LD_INT 5
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 257
7585: PUSH
7586: LD_INT 8
7588: EQUAL
7589: IFFALSE 7610
// points := [ 35 , 35 , 30 ] ;
7591: LD_ADDR_VAR 0 9
7595: PUSH
7596: LD_INT 35
7598: PUSH
7599: LD_INT 35
7601: PUSH
7602: LD_INT 30
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7610: LD_VAR 0 6
7614: PPUSH
7615: CALL_OW 257
7619: PUSH
7620: LD_INT 9
7622: EQUAL
7623: IFFALSE 7644
// points := [ 20 , 55 , 40 ] ;
7625: LD_ADDR_VAR 0 9
7629: PUSH
7630: LD_INT 20
7632: PUSH
7633: LD_INT 55
7635: PUSH
7636: LD_INT 40
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7644: LD_VAR 0 6
7648: PPUSH
7649: CALL_OW 257
7653: PUSH
7654: LD_INT 12
7656: PUSH
7657: LD_INT 16
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: IN
7664: IFFALSE 7685
// points := [ 5 , 3 , 2 ] ;
7666: LD_ADDR_VAR 0 9
7670: PUSH
7671: LD_INT 5
7673: PUSH
7674: LD_INT 3
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7685: LD_VAR 0 6
7689: PPUSH
7690: CALL_OW 257
7694: PUSH
7695: LD_INT 17
7697: EQUAL
7698: IFFALSE 7719
// points := [ 100 , 50 , 75 ] ;
7700: LD_ADDR_VAR 0 9
7704: PUSH
7705: LD_INT 100
7707: PUSH
7708: LD_INT 50
7710: PUSH
7711: LD_INT 75
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7719: LD_VAR 0 6
7723: PPUSH
7724: CALL_OW 257
7728: PUSH
7729: LD_INT 15
7731: EQUAL
7732: IFFALSE 7753
// points := [ 10 , 5 , 3 ] ;
7734: LD_ADDR_VAR 0 9
7738: PUSH
7739: LD_INT 10
7741: PUSH
7742: LD_INT 5
7744: PUSH
7745: LD_INT 3
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7753: LD_VAR 0 6
7757: PPUSH
7758: CALL_OW 257
7762: PUSH
7763: LD_INT 14
7765: EQUAL
7766: IFFALSE 7787
// points := [ 10 , 0 , 0 ] ;
7768: LD_ADDR_VAR 0 9
7772: PUSH
7773: LD_INT 10
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: LD_INT 0
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7787: LD_VAR 0 6
7791: PPUSH
7792: CALL_OW 257
7796: PUSH
7797: LD_INT 11
7799: EQUAL
7800: IFFALSE 7821
// points := [ 30 , 10 , 5 ] ;
7802: LD_ADDR_VAR 0 9
7806: PUSH
7807: LD_INT 30
7809: PUSH
7810: LD_INT 10
7812: PUSH
7813: LD_INT 5
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_INT 5
7828: PPUSH
7829: CALL_OW 321
7833: PUSH
7834: LD_INT 2
7836: EQUAL
7837: IFFALSE 7854
// bpoints := bpoints * 1.8 ;
7839: LD_ADDR_VAR 0 10
7843: PUSH
7844: LD_VAR 0 10
7848: PUSH
7849: LD_REAL  1.80000000000000E+0000
7852: MUL
7853: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7854: LD_VAR 0 6
7858: PPUSH
7859: CALL_OW 257
7863: PUSH
7864: LD_INT 1
7866: PUSH
7867: LD_INT 2
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: LD_INT 4
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: IN
7882: PUSH
7883: LD_VAR 0 1
7887: PPUSH
7888: LD_INT 51
7890: PPUSH
7891: CALL_OW 321
7895: PUSH
7896: LD_INT 2
7898: EQUAL
7899: AND
7900: IFFALSE 7917
// bpoints := bpoints * 1.2 ;
7902: LD_ADDR_VAR 0 10
7906: PUSH
7907: LD_VAR 0 10
7911: PUSH
7912: LD_REAL  1.20000000000000E+0000
7915: MUL
7916: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 257
7926: PUSH
7927: LD_INT 5
7929: PUSH
7930: LD_INT 7
7932: PUSH
7933: LD_INT 9
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: LIST
7940: IN
7941: PUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: LD_INT 52
7949: PPUSH
7950: CALL_OW 321
7954: PUSH
7955: LD_INT 2
7957: EQUAL
7958: AND
7959: IFFALSE 7976
// bpoints := bpoints * 1.5 ;
7961: LD_ADDR_VAR 0 10
7965: PUSH
7966: LD_VAR 0 10
7970: PUSH
7971: LD_REAL  1.50000000000000E+0000
7974: MUL
7975: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_INT 66
7983: PPUSH
7984: CALL_OW 321
7988: PUSH
7989: LD_INT 2
7991: EQUAL
7992: IFFALSE 8009
// bpoints := bpoints * 1.1 ;
7994: LD_ADDR_VAR 0 10
7998: PUSH
7999: LD_VAR 0 10
8003: PUSH
8004: LD_REAL  1.10000000000000E+0000
8007: MUL
8008: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8009: LD_ADDR_VAR 0 10
8013: PUSH
8014: LD_VAR 0 10
8018: PUSH
8019: LD_VAR 0 6
8023: PPUSH
8024: LD_INT 1
8026: PPUSH
8027: CALL_OW 259
8031: PUSH
8032: LD_REAL  1.15000000000000E+0000
8035: MUL
8036: MUL
8037: ST_TO_ADDR
// end ; unit_vehicle :
8038: GO 8866
8040: LD_INT 2
8042: DOUBLE
8043: EQUAL
8044: IFTRUE 8048
8046: GO 8854
8048: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8049: LD_VAR 0 6
8053: PPUSH
8054: CALL_OW 264
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 24
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: IN
8073: IFFALSE 8094
// points := [ 25 , 5 , 3 ] ;
8075: LD_ADDR_VAR 0 9
8079: PUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 5
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 264
8103: PUSH
8104: LD_INT 4
8106: PUSH
8107: LD_INT 43
8109: PUSH
8110: LD_INT 25
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: IN
8118: IFFALSE 8139
// points := [ 40 , 15 , 5 ] ;
8120: LD_ADDR_VAR 0 9
8124: PUSH
8125: LD_INT 40
8127: PUSH
8128: LD_INT 15
8130: PUSH
8131: LD_INT 5
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8139: LD_VAR 0 6
8143: PPUSH
8144: CALL_OW 264
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 23
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: IN
8159: IFFALSE 8180
// points := [ 7 , 25 , 8 ] ;
8161: LD_ADDR_VAR 0 9
8165: PUSH
8166: LD_INT 7
8168: PUSH
8169: LD_INT 25
8171: PUSH
8172: LD_INT 8
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8180: LD_VAR 0 6
8184: PPUSH
8185: CALL_OW 264
8189: PUSH
8190: LD_INT 5
8192: PUSH
8193: LD_INT 27
8195: PUSH
8196: LD_INT 44
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: IN
8204: IFFALSE 8225
// points := [ 14 , 50 , 16 ] ;
8206: LD_ADDR_VAR 0 9
8210: PUSH
8211: LD_INT 14
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: LD_INT 16
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8225: LD_VAR 0 6
8229: PPUSH
8230: CALL_OW 264
8234: PUSH
8235: LD_INT 6
8237: PUSH
8238: LD_INT 46
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: IN
8245: IFFALSE 8266
// points := [ 32 , 120 , 70 ] ;
8247: LD_ADDR_VAR 0 9
8251: PUSH
8252: LD_INT 32
8254: PUSH
8255: LD_INT 120
8257: PUSH
8258: LD_INT 70
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8266: LD_VAR 0 6
8270: PPUSH
8271: CALL_OW 264
8275: PUSH
8276: LD_INT 7
8278: PUSH
8279: LD_INT 28
8281: PUSH
8282: LD_INT 45
8284: PUSH
8285: LD_INT 92
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: IN
8294: IFFALSE 8315
// points := [ 35 , 20 , 45 ] ;
8296: LD_ADDR_VAR 0 9
8300: PUSH
8301: LD_INT 35
8303: PUSH
8304: LD_INT 20
8306: PUSH
8307: LD_INT 45
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8315: LD_VAR 0 6
8319: PPUSH
8320: CALL_OW 264
8324: PUSH
8325: LD_INT 47
8327: PUSH
8328: EMPTY
8329: LIST
8330: IN
8331: IFFALSE 8352
// points := [ 67 , 45 , 75 ] ;
8333: LD_ADDR_VAR 0 9
8337: PUSH
8338: LD_INT 67
8340: PUSH
8341: LD_INT 45
8343: PUSH
8344: LD_INT 75
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8352: LD_VAR 0 6
8356: PPUSH
8357: CALL_OW 264
8361: PUSH
8362: LD_INT 26
8364: PUSH
8365: EMPTY
8366: LIST
8367: IN
8368: IFFALSE 8389
// points := [ 120 , 30 , 80 ] ;
8370: LD_ADDR_VAR 0 9
8374: PUSH
8375: LD_INT 120
8377: PUSH
8378: LD_INT 30
8380: PUSH
8381: LD_INT 80
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8389: LD_VAR 0 6
8393: PPUSH
8394: CALL_OW 264
8398: PUSH
8399: LD_INT 22
8401: PUSH
8402: EMPTY
8403: LIST
8404: IN
8405: IFFALSE 8426
// points := [ 40 , 1 , 1 ] ;
8407: LD_ADDR_VAR 0 9
8411: PUSH
8412: LD_INT 40
8414: PUSH
8415: LD_INT 1
8417: PUSH
8418: LD_INT 1
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8426: LD_VAR 0 6
8430: PPUSH
8431: CALL_OW 264
8435: PUSH
8436: LD_INT 29
8438: PUSH
8439: EMPTY
8440: LIST
8441: IN
8442: IFFALSE 8463
// points := [ 70 , 200 , 400 ] ;
8444: LD_ADDR_VAR 0 9
8448: PUSH
8449: LD_INT 70
8451: PUSH
8452: LD_INT 200
8454: PUSH
8455: LD_INT 400
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8463: LD_VAR 0 6
8467: PPUSH
8468: CALL_OW 264
8472: PUSH
8473: LD_INT 14
8475: PUSH
8476: LD_INT 53
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: IN
8483: IFFALSE 8504
// points := [ 40 , 10 , 20 ] ;
8485: LD_ADDR_VAR 0 9
8489: PUSH
8490: LD_INT 40
8492: PUSH
8493: LD_INT 10
8495: PUSH
8496: LD_INT 20
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8504: LD_VAR 0 6
8508: PPUSH
8509: CALL_OW 264
8513: PUSH
8514: LD_INT 9
8516: PUSH
8517: EMPTY
8518: LIST
8519: IN
8520: IFFALSE 8541
// points := [ 5 , 70 , 20 ] ;
8522: LD_ADDR_VAR 0 9
8526: PUSH
8527: LD_INT 5
8529: PUSH
8530: LD_INT 70
8532: PUSH
8533: LD_INT 20
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8541: LD_VAR 0 6
8545: PPUSH
8546: CALL_OW 264
8550: PUSH
8551: LD_INT 10
8553: PUSH
8554: EMPTY
8555: LIST
8556: IN
8557: IFFALSE 8578
// points := [ 35 , 110 , 70 ] ;
8559: LD_ADDR_VAR 0 9
8563: PUSH
8564: LD_INT 35
8566: PUSH
8567: LD_INT 110
8569: PUSH
8570: LD_INT 70
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8578: LD_VAR 0 6
8582: PPUSH
8583: CALL_OW 265
8587: PUSH
8588: LD_INT 25
8590: EQUAL
8591: IFFALSE 8612
// points := [ 80 , 65 , 100 ] ;
8593: LD_ADDR_VAR 0 9
8597: PUSH
8598: LD_INT 80
8600: PUSH
8601: LD_INT 65
8603: PUSH
8604: LD_INT 100
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8612: LD_VAR 0 6
8616: PPUSH
8617: CALL_OW 263
8621: PUSH
8622: LD_INT 1
8624: EQUAL
8625: IFFALSE 8660
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8627: LD_ADDR_VAR 0 10
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_VAR 0 6
8641: PPUSH
8642: CALL_OW 311
8646: PPUSH
8647: LD_INT 3
8649: PPUSH
8650: CALL_OW 259
8654: PUSH
8655: LD_INT 4
8657: MUL
8658: MUL
8659: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8660: LD_VAR 0 6
8664: PPUSH
8665: CALL_OW 263
8669: PUSH
8670: LD_INT 2
8672: EQUAL
8673: IFFALSE 8724
// begin j := IsControledBy ( i ) ;
8675: LD_ADDR_VAR 0 7
8679: PUSH
8680: LD_VAR 0 6
8684: PPUSH
8685: CALL_OW 312
8689: ST_TO_ADDR
// if j then
8690: LD_VAR 0 7
8694: IFFALSE 8724
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8696: LD_ADDR_VAR 0 10
8700: PUSH
8701: LD_VAR 0 10
8705: PUSH
8706: LD_VAR 0 7
8710: PPUSH
8711: LD_INT 3
8713: PPUSH
8714: CALL_OW 259
8718: PUSH
8719: LD_INT 3
8721: MUL
8722: MUL
8723: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8724: LD_VAR 0 6
8728: PPUSH
8729: CALL_OW 264
8733: PUSH
8734: LD_INT 5
8736: PUSH
8737: LD_INT 6
8739: PUSH
8740: LD_INT 46
8742: PUSH
8743: LD_INT 44
8745: PUSH
8746: LD_INT 47
8748: PUSH
8749: LD_INT 45
8751: PUSH
8752: LD_INT 28
8754: PUSH
8755: LD_INT 7
8757: PUSH
8758: LD_INT 27
8760: PUSH
8761: LD_INT 29
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: IN
8776: PUSH
8777: LD_VAR 0 1
8781: PPUSH
8782: LD_INT 52
8784: PPUSH
8785: CALL_OW 321
8789: PUSH
8790: LD_INT 2
8792: EQUAL
8793: AND
8794: IFFALSE 8811
// bpoints := bpoints * 1.2 ;
8796: LD_ADDR_VAR 0 10
8800: PUSH
8801: LD_VAR 0 10
8805: PUSH
8806: LD_REAL  1.20000000000000E+0000
8809: MUL
8810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8811: LD_VAR 0 6
8815: PPUSH
8816: CALL_OW 264
8820: PUSH
8821: LD_INT 6
8823: PUSH
8824: LD_INT 46
8826: PUSH
8827: LD_INT 47
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: IN
8835: IFFALSE 8852
// bpoints := bpoints * 1.2 ;
8837: LD_ADDR_VAR 0 10
8841: PUSH
8842: LD_VAR 0 10
8846: PUSH
8847: LD_REAL  1.20000000000000E+0000
8850: MUL
8851: ST_TO_ADDR
// end ; unit_building :
8852: GO 8866
8854: LD_INT 3
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8865
8862: POP
// ; end ;
8863: GO 8866
8865: POP
// for j = 1 to 3 do
8866: LD_ADDR_VAR 0 7
8870: PUSH
8871: DOUBLE
8872: LD_INT 1
8874: DEC
8875: ST_TO_ADDR
8876: LD_INT 3
8878: PUSH
8879: FOR_TO
8880: IFFALSE 8933
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8882: LD_ADDR_VAR 0 5
8886: PUSH
8887: LD_VAR 0 5
8891: PPUSH
8892: LD_VAR 0 7
8896: PPUSH
8897: LD_VAR 0 5
8901: PUSH
8902: LD_VAR 0 7
8906: ARRAY
8907: PUSH
8908: LD_VAR 0 9
8912: PUSH
8913: LD_VAR 0 7
8917: ARRAY
8918: PUSH
8919: LD_VAR 0 10
8923: MUL
8924: PLUS
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
8931: GO 8879
8933: POP
8934: POP
// end ;
8935: GO 7414
8937: POP
8938: POP
// result := Replace ( result , 4 , tmp ) ;
8939: LD_ADDR_VAR 0 5
8943: PUSH
8944: LD_VAR 0 5
8948: PPUSH
8949: LD_INT 4
8951: PPUSH
8952: LD_VAR 0 8
8956: PPUSH
8957: CALL_OW 1
8961: ST_TO_ADDR
// end ;
8962: LD_VAR 0 5
8966: RET
// export function DangerAtRange ( unit , range ) ; begin
8967: LD_INT 0
8969: PPUSH
// if not unit then
8970: LD_VAR 0 1
8974: NOT
8975: IFFALSE 8979
// exit ;
8977: GO 9024
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8979: LD_ADDR_VAR 0 3
8983: PUSH
8984: LD_VAR 0 1
8988: PPUSH
8989: CALL_OW 255
8993: PPUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 250
9003: PPUSH
9004: LD_VAR 0 1
9008: PPUSH
9009: CALL_OW 251
9013: PPUSH
9014: LD_VAR 0 2
9018: PPUSH
9019: CALL 7266 0 4
9023: ST_TO_ADDR
// end ;
9024: LD_VAR 0 3
9028: RET
// export function DangerInArea ( side , area ) ; begin
9029: LD_INT 0
9031: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9032: LD_ADDR_VAR 0 3
9036: PUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 81
9044: PUSH
9045: LD_VAR 0 1
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 70
9058: ST_TO_ADDR
// end ;
9059: LD_VAR 0 3
9063: RET
// export function IsExtension ( b ) ; begin
9064: LD_INT 0
9066: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9067: LD_ADDR_VAR 0 2
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: LD_INT 23
9079: PUSH
9080: LD_INT 20
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_INT 17
9088: PUSH
9089: LD_INT 24
9091: PUSH
9092: LD_INT 21
9094: PUSH
9095: LD_INT 19
9097: PUSH
9098: LD_INT 16
9100: PUSH
9101: LD_INT 25
9103: PUSH
9104: LD_INT 18
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: IN
9119: ST_TO_ADDR
// end ;
9120: LD_VAR 0 2
9124: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
// result := [ ] ;
9130: LD_ADDR_VAR 0 4
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9137: LD_ADDR_VAR 0 5
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_INT 21
9149: PUSH
9150: LD_INT 3
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 70
9161: ST_TO_ADDR
// if not tmp then
9162: LD_VAR 0 5
9166: NOT
9167: IFFALSE 9171
// exit ;
9169: GO 9235
// if checkLink then
9171: LD_VAR 0 3
9175: IFFALSE 9225
// begin for i in tmp do
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_VAR 0 5
9186: PUSH
9187: FOR_IN
9188: IFFALSE 9223
// if GetBase ( i ) <> base then
9190: LD_VAR 0 6
9194: PPUSH
9195: CALL_OW 274
9199: PUSH
9200: LD_VAR 0 1
9204: NONEQUAL
9205: IFFALSE 9221
// ComLinkToBase ( base , i ) ;
9207: LD_VAR 0 1
9211: PPUSH
9212: LD_VAR 0 6
9216: PPUSH
9217: CALL_OW 169
9221: GO 9187
9223: POP
9224: POP
// end ; result := tmp ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_VAR 0 5
9234: ST_TO_ADDR
// end ;
9235: LD_VAR 0 4
9239: RET
// export function ComComplete ( units , b ) ; var i ; begin
9240: LD_INT 0
9242: PPUSH
9243: PPUSH
// if not units then
9244: LD_VAR 0 1
9248: NOT
9249: IFFALSE 9253
// exit ;
9251: GO 9343
// for i in units do
9253: LD_ADDR_VAR 0 4
9257: PUSH
9258: LD_VAR 0 1
9262: PUSH
9263: FOR_IN
9264: IFFALSE 9341
// if BuildingStatus ( b ) = bs_build then
9266: LD_VAR 0 2
9270: PPUSH
9271: CALL_OW 461
9275: PUSH
9276: LD_INT 1
9278: EQUAL
9279: IFFALSE 9339
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9281: LD_VAR 0 4
9285: PPUSH
9286: LD_STRING h
9288: PUSH
9289: LD_VAR 0 2
9293: PPUSH
9294: CALL_OW 250
9298: PUSH
9299: LD_VAR 0 2
9303: PPUSH
9304: CALL_OW 251
9308: PUSH
9309: LD_VAR 0 2
9313: PUSH
9314: LD_INT 0
9316: PUSH
9317: LD_INT 0
9319: PUSH
9320: LD_INT 0
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: PUSH
9332: EMPTY
9333: LIST
9334: PPUSH
9335: CALL_OW 446
9339: GO 9263
9341: POP
9342: POP
// end ;
9343: LD_VAR 0 3
9347: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9348: LD_INT 0
9350: PPUSH
9351: PPUSH
9352: PPUSH
9353: PPUSH
9354: PPUSH
9355: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9356: LD_VAR 0 1
9360: NOT
9361: PUSH
9362: LD_VAR 0 1
9366: PPUSH
9367: CALL_OW 263
9371: PUSH
9372: LD_INT 2
9374: NONEQUAL
9375: OR
9376: IFFALSE 9380
// exit ;
9378: GO 9696
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9380: LD_ADDR_VAR 0 6
9384: PUSH
9385: LD_INT 22
9387: PUSH
9388: LD_VAR 0 1
9392: PPUSH
9393: CALL_OW 255
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: LD_INT 30
9407: PUSH
9408: LD_INT 36
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 34
9417: PUSH
9418: LD_INT 31
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 69
9438: ST_TO_ADDR
// if not tmp then
9439: LD_VAR 0 6
9443: NOT
9444: IFFALSE 9448
// exit ;
9446: GO 9696
// result := [ ] ;
9448: LD_ADDR_VAR 0 2
9452: PUSH
9453: EMPTY
9454: ST_TO_ADDR
// for i in tmp do
9455: LD_ADDR_VAR 0 3
9459: PUSH
9460: LD_VAR 0 6
9464: PUSH
9465: FOR_IN
9466: IFFALSE 9537
// begin t := UnitsInside ( i ) ;
9468: LD_ADDR_VAR 0 4
9472: PUSH
9473: LD_VAR 0 3
9477: PPUSH
9478: CALL_OW 313
9482: ST_TO_ADDR
// if t then
9483: LD_VAR 0 4
9487: IFFALSE 9535
// for j in t do
9489: LD_ADDR_VAR 0 7
9493: PUSH
9494: LD_VAR 0 4
9498: PUSH
9499: FOR_IN
9500: IFFALSE 9533
// result := Replace ( result , result + 1 , j ) ;
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_VAR 0 2
9511: PPUSH
9512: LD_VAR 0 2
9516: PUSH
9517: LD_INT 1
9519: PLUS
9520: PPUSH
9521: LD_VAR 0 7
9525: PPUSH
9526: CALL_OW 1
9530: ST_TO_ADDR
9531: GO 9499
9533: POP
9534: POP
// end ;
9535: GO 9465
9537: POP
9538: POP
// if not result then
9539: LD_VAR 0 2
9543: NOT
9544: IFFALSE 9548
// exit ;
9546: GO 9696
// mech := result [ 1 ] ;
9548: LD_ADDR_VAR 0 5
9552: PUSH
9553: LD_VAR 0 2
9557: PUSH
9558: LD_INT 1
9560: ARRAY
9561: ST_TO_ADDR
// if result > 1 then
9562: LD_VAR 0 2
9566: PUSH
9567: LD_INT 1
9569: GREATER
9570: IFFALSE 9682
// begin for i = 2 to result do
9572: LD_ADDR_VAR 0 3
9576: PUSH
9577: DOUBLE
9578: LD_INT 2
9580: DEC
9581: ST_TO_ADDR
9582: LD_VAR 0 2
9586: PUSH
9587: FOR_TO
9588: IFFALSE 9680
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9590: LD_ADDR_VAR 0 4
9594: PUSH
9595: LD_VAR 0 2
9599: PUSH
9600: LD_VAR 0 3
9604: ARRAY
9605: PPUSH
9606: LD_INT 3
9608: PPUSH
9609: CALL_OW 259
9613: PUSH
9614: LD_VAR 0 2
9618: PUSH
9619: LD_VAR 0 3
9623: ARRAY
9624: PPUSH
9625: CALL_OW 432
9629: MINUS
9630: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9631: LD_VAR 0 4
9635: PUSH
9636: LD_VAR 0 5
9640: PPUSH
9641: LD_INT 3
9643: PPUSH
9644: CALL_OW 259
9648: PUSH
9649: LD_VAR 0 5
9653: PPUSH
9654: CALL_OW 432
9658: MINUS
9659: GREATEREQUAL
9660: IFFALSE 9678
// mech := result [ i ] ;
9662: LD_ADDR_VAR 0 5
9666: PUSH
9667: LD_VAR 0 2
9671: PUSH
9672: LD_VAR 0 3
9676: ARRAY
9677: ST_TO_ADDR
// end ;
9678: GO 9587
9680: POP
9681: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9682: LD_VAR 0 1
9686: PPUSH
9687: LD_VAR 0 5
9691: PPUSH
9692: CALL_OW 135
// end ;
9696: LD_VAR 0 2
9700: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9701: LD_INT 0
9703: PPUSH
9704: PPUSH
9705: PPUSH
9706: PPUSH
9707: PPUSH
9708: PPUSH
9709: PPUSH
9710: PPUSH
9711: PPUSH
9712: PPUSH
9713: PPUSH
9714: PPUSH
9715: PPUSH
// result := [ ] ;
9716: LD_ADDR_VAR 0 7
9720: PUSH
9721: EMPTY
9722: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9723: LD_VAR 0 1
9727: PPUSH
9728: CALL_OW 266
9732: PUSH
9733: LD_INT 0
9735: PUSH
9736: LD_INT 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: IN
9743: NOT
9744: IFFALSE 9748
// exit ;
9746: GO 11382
// if name then
9748: LD_VAR 0 3
9752: IFFALSE 9768
// SetBName ( base_dep , name ) ;
9754: LD_VAR 0 1
9758: PPUSH
9759: LD_VAR 0 3
9763: PPUSH
9764: CALL_OW 500
// base := GetBase ( base_dep ) ;
9768: LD_ADDR_VAR 0 15
9772: PUSH
9773: LD_VAR 0 1
9777: PPUSH
9778: CALL_OW 274
9782: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9783: LD_ADDR_VAR 0 16
9787: PUSH
9788: LD_VAR 0 1
9792: PPUSH
9793: CALL_OW 255
9797: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9798: LD_ADDR_VAR 0 17
9802: PUSH
9803: LD_VAR 0 1
9807: PPUSH
9808: CALL_OW 248
9812: ST_TO_ADDR
// if sources then
9813: LD_VAR 0 5
9817: IFFALSE 9864
// for i = 1 to 3 do
9819: LD_ADDR_VAR 0 8
9823: PUSH
9824: DOUBLE
9825: LD_INT 1
9827: DEC
9828: ST_TO_ADDR
9829: LD_INT 3
9831: PUSH
9832: FOR_TO
9833: IFFALSE 9862
// AddResourceType ( base , i , sources [ i ] ) ;
9835: LD_VAR 0 15
9839: PPUSH
9840: LD_VAR 0 8
9844: PPUSH
9845: LD_VAR 0 5
9849: PUSH
9850: LD_VAR 0 8
9854: ARRAY
9855: PPUSH
9856: CALL_OW 276
9860: GO 9832
9862: POP
9863: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9864: LD_ADDR_VAR 0 18
9868: PUSH
9869: LD_VAR 0 15
9873: PPUSH
9874: LD_VAR 0 2
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL 9125 0 3
9886: ST_TO_ADDR
// InitHc ;
9887: CALL_OW 19
// InitUc ;
9891: CALL_OW 18
// uc_side := side ;
9895: LD_ADDR_OWVAR 20
9899: PUSH
9900: LD_VAR 0 16
9904: ST_TO_ADDR
// uc_nation := nation ;
9905: LD_ADDR_OWVAR 21
9909: PUSH
9910: LD_VAR 0 17
9914: ST_TO_ADDR
// if buildings then
9915: LD_VAR 0 18
9919: IFFALSE 11241
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9921: LD_ADDR_VAR 0 19
9925: PUSH
9926: LD_VAR 0 18
9930: PPUSH
9931: LD_INT 2
9933: PUSH
9934: LD_INT 30
9936: PUSH
9937: LD_INT 29
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 30
9946: PUSH
9947: LD_INT 30
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: PPUSH
9959: CALL_OW 72
9963: ST_TO_ADDR
// if tmp then
9964: LD_VAR 0 19
9968: IFFALSE 10016
// for i in tmp do
9970: LD_ADDR_VAR 0 8
9974: PUSH
9975: LD_VAR 0 19
9979: PUSH
9980: FOR_IN
9981: IFFALSE 10014
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: LD_VAR 0 16
10007: PPUSH
10008: CALL_OW 441
10012: GO 9980
10014: POP
10015: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10016: LD_VAR 0 18
10020: PPUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 30
10026: PUSH
10027: LD_INT 32
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 30
10036: PUSH
10037: LD_INT 33
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 72
10053: IFFALSE 10141
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10055: LD_ADDR_VAR 0 8
10059: PUSH
10060: LD_VAR 0 18
10064: PPUSH
10065: LD_INT 2
10067: PUSH
10068: LD_INT 30
10070: PUSH
10071: LD_INT 32
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 30
10080: PUSH
10081: LD_INT 33
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 72
10097: PUSH
10098: FOR_IN
10099: IFFALSE 10139
// begin if not GetBWeapon ( i ) then
10101: LD_VAR 0 8
10105: PPUSH
10106: CALL_OW 269
10110: NOT
10111: IFFALSE 10137
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10113: LD_VAR 0 8
10117: PPUSH
10118: LD_VAR 0 8
10122: PPUSH
10123: LD_VAR 0 2
10127: PPUSH
10128: CALL 11387 0 2
10132: PPUSH
10133: CALL_OW 431
// end ;
10137: GO 10098
10139: POP
10140: POP
// end ; for i = 1 to personel do
10141: LD_ADDR_VAR 0 8
10145: PUSH
10146: DOUBLE
10147: LD_INT 1
10149: DEC
10150: ST_TO_ADDR
10151: LD_VAR 0 6
10155: PUSH
10156: FOR_TO
10157: IFFALSE 11221
// begin if i > 4 then
10159: LD_VAR 0 8
10163: PUSH
10164: LD_INT 4
10166: GREATER
10167: IFFALSE 10171
// break ;
10169: GO 11221
// case i of 1 :
10171: LD_VAR 0 8
10175: PUSH
10176: LD_INT 1
10178: DOUBLE
10179: EQUAL
10180: IFTRUE 10184
10182: GO 10264
10184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10185: LD_ADDR_VAR 0 12
10189: PUSH
10190: LD_VAR 0 18
10194: PPUSH
10195: LD_INT 22
10197: PUSH
10198: LD_VAR 0 16
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 58
10209: PUSH
10210: EMPTY
10211: LIST
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: LD_INT 30
10218: PUSH
10219: LD_INT 32
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: LD_INT 30
10228: PUSH
10229: LD_INT 4
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 30
10238: PUSH
10239: LD_INT 5
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: PPUSH
10257: CALL_OW 72
10261: ST_TO_ADDR
10262: GO 10486
10264: LD_INT 2
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10334
10272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10273: LD_ADDR_VAR 0 12
10277: PUSH
10278: LD_VAR 0 18
10282: PPUSH
10283: LD_INT 22
10285: PUSH
10286: LD_VAR 0 16
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 2
10297: PUSH
10298: LD_INT 30
10300: PUSH
10301: LD_INT 0
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 30
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PPUSH
10327: CALL_OW 72
10331: ST_TO_ADDR
10332: GO 10486
10334: LD_INT 3
10336: DOUBLE
10337: EQUAL
10338: IFTRUE 10342
10340: GO 10404
10342: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10343: LD_ADDR_VAR 0 12
10347: PUSH
10348: LD_VAR 0 18
10352: PPUSH
10353: LD_INT 22
10355: PUSH
10356: LD_VAR 0 16
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 2
10367: PUSH
10368: LD_INT 30
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 30
10380: PUSH
10381: LD_INT 3
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 72
10401: ST_TO_ADDR
10402: GO 10486
10404: LD_INT 4
10406: DOUBLE
10407: EQUAL
10408: IFTRUE 10412
10410: GO 10485
10412: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10413: LD_ADDR_VAR 0 12
10417: PUSH
10418: LD_VAR 0 18
10422: PPUSH
10423: LD_INT 22
10425: PUSH
10426: LD_VAR 0 16
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: LD_INT 6
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 30
10450: PUSH
10451: LD_INT 7
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 30
10460: PUSH
10461: LD_INT 8
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 72
10482: ST_TO_ADDR
10483: GO 10486
10485: POP
// if i = 1 then
10486: LD_VAR 0 8
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 10605
// begin tmp := [ ] ;
10496: LD_ADDR_VAR 0 19
10500: PUSH
10501: EMPTY
10502: ST_TO_ADDR
// for j in f do
10503: LD_ADDR_VAR 0 9
10507: PUSH
10508: LD_VAR 0 12
10512: PUSH
10513: FOR_IN
10514: IFFALSE 10587
// if GetBType ( j ) = b_bunker then
10516: LD_VAR 0 9
10520: PPUSH
10521: CALL_OW 266
10525: PUSH
10526: LD_INT 32
10528: EQUAL
10529: IFFALSE 10556
// tmp := Insert ( tmp , 1 , j ) else
10531: LD_ADDR_VAR 0 19
10535: PUSH
10536: LD_VAR 0 19
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: LD_VAR 0 9
10548: PPUSH
10549: CALL_OW 2
10553: ST_TO_ADDR
10554: GO 10585
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10556: LD_ADDR_VAR 0 19
10560: PUSH
10561: LD_VAR 0 19
10565: PPUSH
10566: LD_VAR 0 19
10570: PUSH
10571: LD_INT 1
10573: PLUS
10574: PPUSH
10575: LD_VAR 0 9
10579: PPUSH
10580: CALL_OW 2
10584: ST_TO_ADDR
10585: GO 10513
10587: POP
10588: POP
// if tmp then
10589: LD_VAR 0 19
10593: IFFALSE 10605
// f := tmp ;
10595: LD_ADDR_VAR 0 12
10599: PUSH
10600: LD_VAR 0 19
10604: ST_TO_ADDR
// end ; x := personel [ i ] ;
10605: LD_ADDR_VAR 0 13
10609: PUSH
10610: LD_VAR 0 6
10614: PUSH
10615: LD_VAR 0 8
10619: ARRAY
10620: ST_TO_ADDR
// if x = - 1 then
10621: LD_VAR 0 13
10625: PUSH
10626: LD_INT 1
10628: NEG
10629: EQUAL
10630: IFFALSE 10839
// begin for j in f do
10632: LD_ADDR_VAR 0 9
10636: PUSH
10637: LD_VAR 0 12
10641: PUSH
10642: FOR_IN
10643: IFFALSE 10835
// repeat InitHc ;
10645: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10649: LD_VAR 0 9
10653: PPUSH
10654: CALL_OW 266
10658: PUSH
10659: LD_INT 5
10661: EQUAL
10662: IFFALSE 10732
// begin if UnitsInside ( j ) < 3 then
10664: LD_VAR 0 9
10668: PPUSH
10669: CALL_OW 313
10673: PUSH
10674: LD_INT 3
10676: LESS
10677: IFFALSE 10713
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10679: LD_INT 0
10681: PPUSH
10682: LD_INT 5
10684: PUSH
10685: LD_INT 8
10687: PUSH
10688: LD_INT 9
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: LD_VAR 0 17
10700: ARRAY
10701: PPUSH
10702: LD_VAR 0 4
10706: PPUSH
10707: CALL_OW 380
10711: GO 10730
// PrepareHuman ( false , i , skill ) ;
10713: LD_INT 0
10715: PPUSH
10716: LD_VAR 0 8
10720: PPUSH
10721: LD_VAR 0 4
10725: PPUSH
10726: CALL_OW 380
// end else
10730: GO 10749
// PrepareHuman ( false , i , skill ) ;
10732: LD_INT 0
10734: PPUSH
10735: LD_VAR 0 8
10739: PPUSH
10740: LD_VAR 0 4
10744: PPUSH
10745: CALL_OW 380
// un := CreateHuman ;
10749: LD_ADDR_VAR 0 14
10753: PUSH
10754: CALL_OW 44
10758: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10759: LD_ADDR_VAR 0 7
10763: PUSH
10764: LD_VAR 0 7
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: LD_VAR 0 14
10776: PPUSH
10777: CALL_OW 2
10781: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10782: LD_VAR 0 14
10786: PPUSH
10787: LD_VAR 0 9
10791: PPUSH
10792: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10796: LD_VAR 0 9
10800: PPUSH
10801: CALL_OW 313
10805: PUSH
10806: LD_INT 6
10808: EQUAL
10809: PUSH
10810: LD_VAR 0 9
10814: PPUSH
10815: CALL_OW 266
10819: PUSH
10820: LD_INT 32
10822: PUSH
10823: LD_INT 31
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: IN
10830: OR
10831: IFFALSE 10645
10833: GO 10642
10835: POP
10836: POP
// end else
10837: GO 11219
// for j = 1 to x do
10839: LD_ADDR_VAR 0 9
10843: PUSH
10844: DOUBLE
10845: LD_INT 1
10847: DEC
10848: ST_TO_ADDR
10849: LD_VAR 0 13
10853: PUSH
10854: FOR_TO
10855: IFFALSE 11217
// begin InitHc ;
10857: CALL_OW 19
// if not f then
10861: LD_VAR 0 12
10865: NOT
10866: IFFALSE 10955
// begin PrepareHuman ( false , i , skill ) ;
10868: LD_INT 0
10870: PPUSH
10871: LD_VAR 0 8
10875: PPUSH
10876: LD_VAR 0 4
10880: PPUSH
10881: CALL_OW 380
// un := CreateHuman ;
10885: LD_ADDR_VAR 0 14
10889: PUSH
10890: CALL_OW 44
10894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10895: LD_ADDR_VAR 0 7
10899: PUSH
10900: LD_VAR 0 7
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: LD_VAR 0 14
10912: PPUSH
10913: CALL_OW 2
10917: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10918: LD_VAR 0 14
10922: PPUSH
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 250
10932: PPUSH
10933: LD_VAR 0 1
10937: PPUSH
10938: CALL_OW 251
10942: PPUSH
10943: LD_INT 10
10945: PPUSH
10946: LD_INT 0
10948: PPUSH
10949: CALL_OW 50
// continue ;
10953: GO 10854
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10955: LD_VAR 0 12
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: PPUSH
10964: CALL_OW 313
10968: PUSH
10969: LD_VAR 0 12
10973: PUSH
10974: LD_INT 1
10976: ARRAY
10977: PPUSH
10978: CALL_OW 266
10982: PUSH
10983: LD_INT 32
10985: PUSH
10986: LD_INT 31
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: IN
10993: AND
10994: PUSH
10995: LD_VAR 0 12
10999: PUSH
11000: LD_INT 1
11002: ARRAY
11003: PPUSH
11004: CALL_OW 313
11008: PUSH
11009: LD_INT 6
11011: EQUAL
11012: OR
11013: IFFALSE 11033
// f := Delete ( f , 1 ) ;
11015: LD_ADDR_VAR 0 12
11019: PUSH
11020: LD_VAR 0 12
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 3
11032: ST_TO_ADDR
// if not f then
11033: LD_VAR 0 12
11037: NOT
11038: IFFALSE 11056
// begin x := x + 2 ;
11040: LD_ADDR_VAR 0 13
11044: PUSH
11045: LD_VAR 0 13
11049: PUSH
11050: LD_INT 2
11052: PLUS
11053: ST_TO_ADDR
// continue ;
11054: GO 10854
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11056: LD_VAR 0 12
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: PPUSH
11065: CALL_OW 266
11069: PUSH
11070: LD_INT 5
11072: EQUAL
11073: IFFALSE 11147
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11075: LD_VAR 0 12
11079: PUSH
11080: LD_INT 1
11082: ARRAY
11083: PPUSH
11084: CALL_OW 313
11088: PUSH
11089: LD_INT 3
11091: LESS
11092: IFFALSE 11128
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11094: LD_INT 0
11096: PPUSH
11097: LD_INT 5
11099: PUSH
11100: LD_INT 8
11102: PUSH
11103: LD_INT 9
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: PUSH
11111: LD_VAR 0 17
11115: ARRAY
11116: PPUSH
11117: LD_VAR 0 4
11121: PPUSH
11122: CALL_OW 380
11126: GO 11145
// PrepareHuman ( false , i , skill ) ;
11128: LD_INT 0
11130: PPUSH
11131: LD_VAR 0 8
11135: PPUSH
11136: LD_VAR 0 4
11140: PPUSH
11141: CALL_OW 380
// end else
11145: GO 11164
// PrepareHuman ( false , i , skill ) ;
11147: LD_INT 0
11149: PPUSH
11150: LD_VAR 0 8
11154: PPUSH
11155: LD_VAR 0 4
11159: PPUSH
11160: CALL_OW 380
// un := CreateHuman ;
11164: LD_ADDR_VAR 0 14
11168: PUSH
11169: CALL_OW 44
11173: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11174: LD_ADDR_VAR 0 7
11178: PUSH
11179: LD_VAR 0 7
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: LD_VAR 0 14
11191: PPUSH
11192: CALL_OW 2
11196: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11197: LD_VAR 0 14
11201: PPUSH
11202: LD_VAR 0 12
11206: PUSH
11207: LD_INT 1
11209: ARRAY
11210: PPUSH
11211: CALL_OW 52
// end ;
11215: GO 10854
11217: POP
11218: POP
// end ;
11219: GO 10156
11221: POP
11222: POP
// result := result ^ buildings ;
11223: LD_ADDR_VAR 0 7
11227: PUSH
11228: LD_VAR 0 7
11232: PUSH
11233: LD_VAR 0 18
11237: ADD
11238: ST_TO_ADDR
// end else
11239: GO 11382
// begin for i = 1 to personel do
11241: LD_ADDR_VAR 0 8
11245: PUSH
11246: DOUBLE
11247: LD_INT 1
11249: DEC
11250: ST_TO_ADDR
11251: LD_VAR 0 6
11255: PUSH
11256: FOR_TO
11257: IFFALSE 11380
// begin if i > 4 then
11259: LD_VAR 0 8
11263: PUSH
11264: LD_INT 4
11266: GREATER
11267: IFFALSE 11271
// break ;
11269: GO 11380
// x := personel [ i ] ;
11271: LD_ADDR_VAR 0 13
11275: PUSH
11276: LD_VAR 0 6
11280: PUSH
11281: LD_VAR 0 8
11285: ARRAY
11286: ST_TO_ADDR
// if x = - 1 then
11287: LD_VAR 0 13
11291: PUSH
11292: LD_INT 1
11294: NEG
11295: EQUAL
11296: IFFALSE 11300
// continue ;
11298: GO 11256
// PrepareHuman ( false , i , skill ) ;
11300: LD_INT 0
11302: PPUSH
11303: LD_VAR 0 8
11307: PPUSH
11308: LD_VAR 0 4
11312: PPUSH
11313: CALL_OW 380
// un := CreateHuman ;
11317: LD_ADDR_VAR 0 14
11321: PUSH
11322: CALL_OW 44
11326: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11327: LD_VAR 0 14
11331: PPUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 250
11341: PPUSH
11342: LD_VAR 0 1
11346: PPUSH
11347: CALL_OW 251
11351: PPUSH
11352: LD_INT 10
11354: PPUSH
11355: LD_INT 0
11357: PPUSH
11358: CALL_OW 50
// result := result ^ un ;
11362: LD_ADDR_VAR 0 7
11366: PUSH
11367: LD_VAR 0 7
11371: PUSH
11372: LD_VAR 0 14
11376: ADD
11377: ST_TO_ADDR
// end ;
11378: GO 11256
11380: POP
11381: POP
// end ; end ;
11382: LD_VAR 0 7
11386: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11387: LD_INT 0
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
// result := false ;
11405: LD_ADDR_VAR 0 3
11409: PUSH
11410: LD_INT 0
11412: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11413: LD_VAR 0 1
11417: NOT
11418: PUSH
11419: LD_VAR 0 1
11423: PPUSH
11424: CALL_OW 266
11428: PUSH
11429: LD_INT 32
11431: PUSH
11432: LD_INT 33
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: IN
11439: NOT
11440: OR
11441: IFFALSE 11445
// exit ;
11443: GO 12554
// nat := GetNation ( tower ) ;
11445: LD_ADDR_VAR 0 12
11449: PUSH
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL_OW 248
11459: ST_TO_ADDR
// side := GetSide ( tower ) ;
11460: LD_ADDR_VAR 0 16
11464: PUSH
11465: LD_VAR 0 1
11469: PPUSH
11470: CALL_OW 255
11474: ST_TO_ADDR
// x := GetX ( tower ) ;
11475: LD_ADDR_VAR 0 10
11479: PUSH
11480: LD_VAR 0 1
11484: PPUSH
11485: CALL_OW 250
11489: ST_TO_ADDR
// y := GetY ( tower ) ;
11490: LD_ADDR_VAR 0 11
11494: PUSH
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 251
11504: ST_TO_ADDR
// if not x or not y then
11505: LD_VAR 0 10
11509: NOT
11510: PUSH
11511: LD_VAR 0 11
11515: NOT
11516: OR
11517: IFFALSE 11521
// exit ;
11519: GO 12554
// weapon := 0 ;
11521: LD_ADDR_VAR 0 18
11525: PUSH
11526: LD_INT 0
11528: ST_TO_ADDR
// fac_list := [ ] ;
11529: LD_ADDR_VAR 0 17
11533: PUSH
11534: EMPTY
11535: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11536: LD_ADDR_VAR 0 6
11540: PUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 274
11550: PPUSH
11551: LD_VAR 0 2
11555: PPUSH
11556: LD_INT 0
11558: PPUSH
11559: CALL 9125 0 3
11563: PPUSH
11564: LD_INT 30
11566: PUSH
11567: LD_INT 3
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PPUSH
11574: CALL_OW 72
11578: ST_TO_ADDR
// if not factories then
11579: LD_VAR 0 6
11583: NOT
11584: IFFALSE 11588
// exit ;
11586: GO 12554
// for i in factories do
11588: LD_ADDR_VAR 0 8
11592: PUSH
11593: LD_VAR 0 6
11597: PUSH
11598: FOR_IN
11599: IFFALSE 11624
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11601: LD_ADDR_VAR 0 17
11605: PUSH
11606: LD_VAR 0 17
11610: PUSH
11611: LD_VAR 0 8
11615: PPUSH
11616: CALL_OW 478
11620: UNION
11621: ST_TO_ADDR
11622: GO 11598
11624: POP
11625: POP
// if not fac_list then
11626: LD_VAR 0 17
11630: NOT
11631: IFFALSE 11635
// exit ;
11633: GO 12554
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11635: LD_ADDR_VAR 0 5
11639: PUSH
11640: LD_INT 4
11642: PUSH
11643: LD_INT 5
11645: PUSH
11646: LD_INT 9
11648: PUSH
11649: LD_INT 10
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 7
11657: PUSH
11658: LD_INT 11
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 27
11672: PUSH
11673: LD_INT 28
11675: PUSH
11676: LD_INT 26
11678: PUSH
11679: LD_INT 30
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 43
11690: PUSH
11691: LD_INT 44
11693: PUSH
11694: LD_INT 46
11696: PUSH
11697: LD_INT 45
11699: PUSH
11700: LD_INT 47
11702: PUSH
11703: LD_INT 49
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: PUSH
11719: LD_VAR 0 12
11723: ARRAY
11724: ST_TO_ADDR
// list := list isect fac_list ;
11725: LD_ADDR_VAR 0 5
11729: PUSH
11730: LD_VAR 0 5
11734: PUSH
11735: LD_VAR 0 17
11739: ISECT
11740: ST_TO_ADDR
// if not list then
11741: LD_VAR 0 5
11745: NOT
11746: IFFALSE 11750
// exit ;
11748: GO 12554
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11750: LD_VAR 0 12
11754: PUSH
11755: LD_INT 3
11757: EQUAL
11758: PUSH
11759: LD_INT 49
11761: PUSH
11762: LD_VAR 0 5
11766: IN
11767: AND
11768: PUSH
11769: LD_INT 31
11771: PPUSH
11772: LD_VAR 0 16
11776: PPUSH
11777: CALL_OW 321
11781: PUSH
11782: LD_INT 2
11784: EQUAL
11785: AND
11786: IFFALSE 11846
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11788: LD_INT 22
11790: PUSH
11791: LD_VAR 0 16
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 35
11802: PUSH
11803: LD_INT 49
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PUSH
11810: LD_INT 91
11812: PUSH
11813: LD_VAR 0 1
11817: PUSH
11818: LD_INT 10
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: PPUSH
11831: CALL_OW 69
11835: NOT
11836: IFFALSE 11846
// weapon := ru_time_lapser ;
11838: LD_ADDR_VAR 0 18
11842: PUSH
11843: LD_INT 49
11845: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11846: LD_VAR 0 12
11850: PUSH
11851: LD_INT 1
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: IN
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_VAR 0 5
11869: IN
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_VAR 0 5
11878: IN
11879: OR
11880: AND
11881: PUSH
11882: LD_INT 6
11884: PPUSH
11885: LD_VAR 0 16
11889: PPUSH
11890: CALL_OW 321
11894: PUSH
11895: LD_INT 2
11897: EQUAL
11898: AND
11899: IFFALSE 12064
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11901: LD_INT 22
11903: PUSH
11904: LD_VAR 0 16
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 2
11915: PUSH
11916: LD_INT 35
11918: PUSH
11919: LD_INT 11
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 35
11928: PUSH
11929: LD_INT 30
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 91
11943: PUSH
11944: LD_VAR 0 1
11948: PUSH
11949: LD_INT 18
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: LIST
11961: PPUSH
11962: CALL_OW 69
11966: NOT
11967: PUSH
11968: LD_INT 22
11970: PUSH
11971: LD_VAR 0 16
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 2
11982: PUSH
11983: LD_INT 30
11985: PUSH
11986: LD_INT 32
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 30
11995: PUSH
11996: LD_INT 33
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 91
12010: PUSH
12011: LD_VAR 0 1
12015: PUSH
12016: LD_INT 12
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 2
12039: GREATER
12040: AND
12041: IFFALSE 12064
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12043: LD_ADDR_VAR 0 18
12047: PUSH
12048: LD_INT 11
12050: PUSH
12051: LD_INT 30
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_VAR 0 12
12062: ARRAY
12063: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12064: LD_VAR 0 18
12068: NOT
12069: PUSH
12070: LD_INT 40
12072: PPUSH
12073: LD_VAR 0 16
12077: PPUSH
12078: CALL_OW 321
12082: PUSH
12083: LD_INT 2
12085: EQUAL
12086: AND
12087: PUSH
12088: LD_INT 7
12090: PUSH
12091: LD_VAR 0 5
12095: IN
12096: PUSH
12097: LD_INT 28
12099: PUSH
12100: LD_VAR 0 5
12104: IN
12105: OR
12106: PUSH
12107: LD_INT 45
12109: PUSH
12110: LD_VAR 0 5
12114: IN
12115: OR
12116: AND
12117: IFFALSE 12371
// begin hex := GetHexInfo ( x , y ) ;
12119: LD_ADDR_VAR 0 4
12123: PUSH
12124: LD_VAR 0 10
12128: PPUSH
12129: LD_VAR 0 11
12133: PPUSH
12134: CALL_OW 546
12138: ST_TO_ADDR
// if hex [ 1 ] then
12139: LD_VAR 0 4
12143: PUSH
12144: LD_INT 1
12146: ARRAY
12147: IFFALSE 12151
// exit ;
12149: GO 12554
// height := hex [ 2 ] ;
12151: LD_ADDR_VAR 0 15
12155: PUSH
12156: LD_VAR 0 4
12160: PUSH
12161: LD_INT 2
12163: ARRAY
12164: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12165: LD_ADDR_VAR 0 14
12169: PUSH
12170: LD_INT 0
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 3
12178: PUSH
12179: LD_INT 5
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: ST_TO_ADDR
// for i in tmp do
12188: LD_ADDR_VAR 0 8
12192: PUSH
12193: LD_VAR 0 14
12197: PUSH
12198: FOR_IN
12199: IFFALSE 12369
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12201: LD_ADDR_VAR 0 9
12205: PUSH
12206: LD_VAR 0 10
12210: PPUSH
12211: LD_VAR 0 8
12215: PPUSH
12216: LD_INT 5
12218: PPUSH
12219: CALL_OW 272
12223: PUSH
12224: LD_VAR 0 11
12228: PPUSH
12229: LD_VAR 0 8
12233: PPUSH
12234: LD_INT 5
12236: PPUSH
12237: CALL_OW 273
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12246: LD_VAR 0 9
12250: PUSH
12251: LD_INT 1
12253: ARRAY
12254: PPUSH
12255: LD_VAR 0 9
12259: PUSH
12260: LD_INT 2
12262: ARRAY
12263: PPUSH
12264: CALL_OW 488
12268: IFFALSE 12367
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12270: LD_ADDR_VAR 0 4
12274: PUSH
12275: LD_VAR 0 9
12279: PUSH
12280: LD_INT 1
12282: ARRAY
12283: PPUSH
12284: LD_VAR 0 9
12288: PUSH
12289: LD_INT 2
12291: ARRAY
12292: PPUSH
12293: CALL_OW 546
12297: ST_TO_ADDR
// if hex [ 1 ] then
12298: LD_VAR 0 4
12302: PUSH
12303: LD_INT 1
12305: ARRAY
12306: IFFALSE 12310
// continue ;
12308: GO 12198
// h := hex [ 2 ] ;
12310: LD_ADDR_VAR 0 13
12314: PUSH
12315: LD_VAR 0 4
12319: PUSH
12320: LD_INT 2
12322: ARRAY
12323: ST_TO_ADDR
// if h + 7 < height then
12324: LD_VAR 0 13
12328: PUSH
12329: LD_INT 7
12331: PLUS
12332: PUSH
12333: LD_VAR 0 15
12337: LESS
12338: IFFALSE 12367
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12340: LD_ADDR_VAR 0 18
12344: PUSH
12345: LD_INT 7
12347: PUSH
12348: LD_INT 28
12350: PUSH
12351: LD_INT 45
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: PUSH
12359: LD_VAR 0 12
12363: ARRAY
12364: ST_TO_ADDR
// break ;
12365: GO 12369
// end ; end ; end ;
12367: GO 12198
12369: POP
12370: POP
// end ; if not weapon then
12371: LD_VAR 0 18
12375: NOT
12376: IFFALSE 12436
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12378: LD_ADDR_VAR 0 5
12382: PUSH
12383: LD_VAR 0 5
12387: PUSH
12388: LD_INT 11
12390: PUSH
12391: LD_INT 30
12393: PUSH
12394: LD_INT 49
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: DIFF
12402: ST_TO_ADDR
// if not list then
12403: LD_VAR 0 5
12407: NOT
12408: IFFALSE 12412
// exit ;
12410: GO 12554
// weapon := list [ rand ( 1 , list ) ] ;
12412: LD_ADDR_VAR 0 18
12416: PUSH
12417: LD_VAR 0 5
12421: PUSH
12422: LD_INT 1
12424: PPUSH
12425: LD_VAR 0 5
12429: PPUSH
12430: CALL_OW 12
12434: ARRAY
12435: ST_TO_ADDR
// end ; if weapon then
12436: LD_VAR 0 18
12440: IFFALSE 12554
// begin tmp := CostOfWeapon ( weapon ) ;
12442: LD_ADDR_VAR 0 14
12446: PUSH
12447: LD_VAR 0 18
12451: PPUSH
12452: CALL_OW 451
12456: ST_TO_ADDR
// j := GetBase ( tower ) ;
12457: LD_ADDR_VAR 0 9
12461: PUSH
12462: LD_VAR 0 1
12466: PPUSH
12467: CALL_OW 274
12471: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12472: LD_VAR 0 9
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 275
12484: PUSH
12485: LD_VAR 0 14
12489: PUSH
12490: LD_INT 1
12492: ARRAY
12493: GREATEREQUAL
12494: PUSH
12495: LD_VAR 0 9
12499: PPUSH
12500: LD_INT 2
12502: PPUSH
12503: CALL_OW 275
12507: PUSH
12508: LD_VAR 0 14
12512: PUSH
12513: LD_INT 2
12515: ARRAY
12516: GREATEREQUAL
12517: AND
12518: PUSH
12519: LD_VAR 0 9
12523: PPUSH
12524: LD_INT 3
12526: PPUSH
12527: CALL_OW 275
12531: PUSH
12532: LD_VAR 0 14
12536: PUSH
12537: LD_INT 3
12539: ARRAY
12540: GREATEREQUAL
12541: AND
12542: IFFALSE 12554
// result := weapon ;
12544: LD_ADDR_VAR 0 3
12548: PUSH
12549: LD_VAR 0 18
12553: ST_TO_ADDR
// end ; end ;
12554: LD_VAR 0 3
12558: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12559: LD_INT 0
12561: PPUSH
12562: PPUSH
// result := true ;
12563: LD_ADDR_VAR 0 3
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// if array1 = array2 then
12571: LD_VAR 0 1
12575: PUSH
12576: LD_VAR 0 2
12580: EQUAL
12581: IFFALSE 12641
// begin for i = 1 to array1 do
12583: LD_ADDR_VAR 0 4
12587: PUSH
12588: DOUBLE
12589: LD_INT 1
12591: DEC
12592: ST_TO_ADDR
12593: LD_VAR 0 1
12597: PUSH
12598: FOR_TO
12599: IFFALSE 12637
// if array1 [ i ] <> array2 [ i ] then
12601: LD_VAR 0 1
12605: PUSH
12606: LD_VAR 0 4
12610: ARRAY
12611: PUSH
12612: LD_VAR 0 2
12616: PUSH
12617: LD_VAR 0 4
12621: ARRAY
12622: NONEQUAL
12623: IFFALSE 12635
// begin result := false ;
12625: LD_ADDR_VAR 0 3
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// break ;
12633: GO 12637
// end ;
12635: GO 12598
12637: POP
12638: POP
// end else
12639: GO 12649
// result := false ;
12641: LD_ADDR_VAR 0 3
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// end ;
12649: LD_VAR 0 3
12653: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12654: LD_INT 0
12656: PPUSH
12657: PPUSH
// if not array1 or not array2 then
12658: LD_VAR 0 1
12662: NOT
12663: PUSH
12664: LD_VAR 0 2
12668: NOT
12669: OR
12670: IFFALSE 12674
// exit ;
12672: GO 12738
// result := true ;
12674: LD_ADDR_VAR 0 3
12678: PUSH
12679: LD_INT 1
12681: ST_TO_ADDR
// for i = 1 to array1 do
12682: LD_ADDR_VAR 0 4
12686: PUSH
12687: DOUBLE
12688: LD_INT 1
12690: DEC
12691: ST_TO_ADDR
12692: LD_VAR 0 1
12696: PUSH
12697: FOR_TO
12698: IFFALSE 12736
// if array1 [ i ] <> array2 [ i ] then
12700: LD_VAR 0 1
12704: PUSH
12705: LD_VAR 0 4
12709: ARRAY
12710: PUSH
12711: LD_VAR 0 2
12715: PUSH
12716: LD_VAR 0 4
12720: ARRAY
12721: NONEQUAL
12722: IFFALSE 12734
// begin result := false ;
12724: LD_ADDR_VAR 0 3
12728: PUSH
12729: LD_INT 0
12731: ST_TO_ADDR
// break ;
12732: GO 12736
// end ;
12734: GO 12697
12736: POP
12737: POP
// end ;
12738: LD_VAR 0 3
12742: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12743: LD_INT 0
12745: PPUSH
12746: PPUSH
12747: PPUSH
// pom := GetBase ( fac ) ;
12748: LD_ADDR_VAR 0 5
12752: PUSH
12753: LD_VAR 0 1
12757: PPUSH
12758: CALL_OW 274
12762: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12763: LD_ADDR_VAR 0 4
12767: PUSH
12768: LD_VAR 0 2
12772: PUSH
12773: LD_INT 1
12775: ARRAY
12776: PPUSH
12777: LD_VAR 0 2
12781: PUSH
12782: LD_INT 2
12784: ARRAY
12785: PPUSH
12786: LD_VAR 0 2
12790: PUSH
12791: LD_INT 3
12793: ARRAY
12794: PPUSH
12795: LD_VAR 0 2
12799: PUSH
12800: LD_INT 4
12802: ARRAY
12803: PPUSH
12804: CALL_OW 449
12808: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12809: LD_ADDR_VAR 0 3
12813: PUSH
12814: LD_VAR 0 5
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 275
12826: PUSH
12827: LD_VAR 0 4
12831: PUSH
12832: LD_INT 1
12834: ARRAY
12835: GREATEREQUAL
12836: PUSH
12837: LD_VAR 0 5
12841: PPUSH
12842: LD_INT 2
12844: PPUSH
12845: CALL_OW 275
12849: PUSH
12850: LD_VAR 0 4
12854: PUSH
12855: LD_INT 2
12857: ARRAY
12858: GREATEREQUAL
12859: AND
12860: PUSH
12861: LD_VAR 0 5
12865: PPUSH
12866: LD_INT 3
12868: PPUSH
12869: CALL_OW 275
12873: PUSH
12874: LD_VAR 0 4
12878: PUSH
12879: LD_INT 3
12881: ARRAY
12882: GREATEREQUAL
12883: AND
12884: ST_TO_ADDR
// end ;
12885: LD_VAR 0 3
12889: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12890: LD_INT 0
12892: PPUSH
12893: PPUSH
12894: PPUSH
12895: PPUSH
// pom := GetBase ( building ) ;
12896: LD_ADDR_VAR 0 3
12900: PUSH
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 274
12910: ST_TO_ADDR
// if not pom then
12911: LD_VAR 0 3
12915: NOT
12916: IFFALSE 12920
// exit ;
12918: GO 13090
// btype := GetBType ( building ) ;
12920: LD_ADDR_VAR 0 5
12924: PUSH
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 266
12934: ST_TO_ADDR
// if btype = b_armoury then
12935: LD_VAR 0 5
12939: PUSH
12940: LD_INT 4
12942: EQUAL
12943: IFFALSE 12953
// btype := b_barracks ;
12945: LD_ADDR_VAR 0 5
12949: PUSH
12950: LD_INT 5
12952: ST_TO_ADDR
// if btype = b_depot then
12953: LD_VAR 0 5
12957: PUSH
12958: LD_INT 0
12960: EQUAL
12961: IFFALSE 12971
// btype := b_warehouse ;
12963: LD_ADDR_VAR 0 5
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// if btype = b_workshop then
12971: LD_VAR 0 5
12975: PUSH
12976: LD_INT 2
12978: EQUAL
12979: IFFALSE 12989
// btype := b_factory ;
12981: LD_ADDR_VAR 0 5
12985: PUSH
12986: LD_INT 3
12988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12989: LD_ADDR_VAR 0 4
12993: PUSH
12994: LD_VAR 0 5
12998: PPUSH
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 248
13008: PPUSH
13009: CALL_OW 450
13013: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13014: LD_ADDR_VAR 0 2
13018: PUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 275
13031: PUSH
13032: LD_VAR 0 4
13036: PUSH
13037: LD_INT 1
13039: ARRAY
13040: GREATEREQUAL
13041: PUSH
13042: LD_VAR 0 3
13046: PPUSH
13047: LD_INT 2
13049: PPUSH
13050: CALL_OW 275
13054: PUSH
13055: LD_VAR 0 4
13059: PUSH
13060: LD_INT 2
13062: ARRAY
13063: GREATEREQUAL
13064: AND
13065: PUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: LD_INT 3
13073: PPUSH
13074: CALL_OW 275
13078: PUSH
13079: LD_VAR 0 4
13083: PUSH
13084: LD_INT 3
13086: ARRAY
13087: GREATEREQUAL
13088: AND
13089: ST_TO_ADDR
// end ;
13090: LD_VAR 0 2
13094: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
13099: PPUSH
// pom := GetBase ( building ) ;
13100: LD_ADDR_VAR 0 4
13104: PUSH
13105: LD_VAR 0 1
13109: PPUSH
13110: CALL_OW 274
13114: ST_TO_ADDR
// if not pom then
13115: LD_VAR 0 4
13119: NOT
13120: IFFALSE 13124
// exit ;
13122: GO 13225
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13124: LD_ADDR_VAR 0 5
13128: PUSH
13129: LD_VAR 0 2
13133: PPUSH
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 248
13143: PPUSH
13144: CALL_OW 450
13148: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13149: LD_ADDR_VAR 0 3
13153: PUSH
13154: LD_VAR 0 4
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 275
13166: PUSH
13167: LD_VAR 0 5
13171: PUSH
13172: LD_INT 1
13174: ARRAY
13175: GREATEREQUAL
13176: PUSH
13177: LD_VAR 0 4
13181: PPUSH
13182: LD_INT 2
13184: PPUSH
13185: CALL_OW 275
13189: PUSH
13190: LD_VAR 0 5
13194: PUSH
13195: LD_INT 2
13197: ARRAY
13198: GREATEREQUAL
13199: AND
13200: PUSH
13201: LD_VAR 0 4
13205: PPUSH
13206: LD_INT 3
13208: PPUSH
13209: CALL_OW 275
13213: PUSH
13214: LD_VAR 0 5
13218: PUSH
13219: LD_INT 3
13221: ARRAY
13222: GREATEREQUAL
13223: AND
13224: ST_TO_ADDR
// end ;
13225: LD_VAR 0 3
13229: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13230: LD_INT 0
13232: PPUSH
13233: PPUSH
13234: PPUSH
13235: PPUSH
13236: PPUSH
13237: PPUSH
13238: PPUSH
13239: PPUSH
13240: PPUSH
13241: PPUSH
13242: PPUSH
// result := false ;
13243: LD_ADDR_VAR 0 8
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13251: LD_VAR 0 5
13255: NOT
13256: PUSH
13257: LD_VAR 0 1
13261: NOT
13262: OR
13263: PUSH
13264: LD_VAR 0 2
13268: NOT
13269: OR
13270: PUSH
13271: LD_VAR 0 3
13275: NOT
13276: OR
13277: IFFALSE 13281
// exit ;
13279: GO 14095
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13281: LD_ADDR_VAR 0 14
13285: PUSH
13286: LD_VAR 0 1
13290: PPUSH
13291: LD_VAR 0 2
13295: PPUSH
13296: LD_VAR 0 3
13300: PPUSH
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_VAR 0 5
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: CALL_OW 248
13319: PPUSH
13320: LD_INT 0
13322: PPUSH
13323: CALL 15348 0 6
13327: ST_TO_ADDR
// if not hexes then
13328: LD_VAR 0 14
13332: NOT
13333: IFFALSE 13337
// exit ;
13335: GO 14095
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13337: LD_ADDR_VAR 0 17
13341: PUSH
13342: LD_VAR 0 5
13346: PPUSH
13347: LD_INT 22
13349: PUSH
13350: LD_VAR 0 13
13354: PPUSH
13355: CALL_OW 255
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: LD_INT 30
13369: PUSH
13370: LD_INT 0
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 1
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 72
13400: ST_TO_ADDR
// for i = 1 to hexes do
13401: LD_ADDR_VAR 0 9
13405: PUSH
13406: DOUBLE
13407: LD_INT 1
13409: DEC
13410: ST_TO_ADDR
13411: LD_VAR 0 14
13415: PUSH
13416: FOR_TO
13417: IFFALSE 14093
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13419: LD_ADDR_VAR 0 13
13423: PUSH
13424: LD_VAR 0 14
13428: PUSH
13429: LD_VAR 0 9
13433: ARRAY
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: PPUSH
13439: LD_VAR 0 14
13443: PUSH
13444: LD_VAR 0 9
13448: ARRAY
13449: PUSH
13450: LD_INT 2
13452: ARRAY
13453: PPUSH
13454: CALL_OW 428
13458: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13459: LD_VAR 0 14
13463: PUSH
13464: LD_VAR 0 9
13468: ARRAY
13469: PUSH
13470: LD_INT 1
13472: ARRAY
13473: PPUSH
13474: LD_VAR 0 14
13478: PUSH
13479: LD_VAR 0 9
13483: ARRAY
13484: PUSH
13485: LD_INT 2
13487: ARRAY
13488: PPUSH
13489: CALL_OW 351
13493: PUSH
13494: LD_VAR 0 14
13498: PUSH
13499: LD_VAR 0 9
13503: ARRAY
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_VAR 0 14
13513: PUSH
13514: LD_VAR 0 9
13518: ARRAY
13519: PUSH
13520: LD_INT 2
13522: ARRAY
13523: PPUSH
13524: CALL_OW 488
13528: NOT
13529: OR
13530: PUSH
13531: LD_VAR 0 13
13535: PPUSH
13536: CALL_OW 247
13540: PUSH
13541: LD_INT 3
13543: EQUAL
13544: OR
13545: IFFALSE 13551
// exit ;
13547: POP
13548: POP
13549: GO 14095
// if not tmp then
13551: LD_VAR 0 13
13555: NOT
13556: IFFALSE 13560
// continue ;
13558: GO 13416
// result := true ;
13560: LD_ADDR_VAR 0 8
13564: PUSH
13565: LD_INT 1
13567: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13568: LD_VAR 0 6
13572: PUSH
13573: LD_VAR 0 13
13577: PPUSH
13578: CALL_OW 247
13582: PUSH
13583: LD_INT 2
13585: EQUAL
13586: AND
13587: PUSH
13588: LD_VAR 0 13
13592: PPUSH
13593: CALL_OW 263
13597: PUSH
13598: LD_INT 1
13600: EQUAL
13601: AND
13602: IFFALSE 13766
// begin if IsDrivenBy ( tmp ) then
13604: LD_VAR 0 13
13608: PPUSH
13609: CALL_OW 311
13613: IFFALSE 13617
// continue ;
13615: GO 13416
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13617: LD_VAR 0 6
13621: PPUSH
13622: LD_INT 3
13624: PUSH
13625: LD_INT 60
13627: PUSH
13628: EMPTY
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: LD_INT 55
13640: PUSH
13641: EMPTY
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PPUSH
13652: CALL_OW 72
13656: IFFALSE 13764
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13658: LD_ADDR_VAR 0 18
13662: PUSH
13663: LD_VAR 0 6
13667: PPUSH
13668: LD_INT 3
13670: PUSH
13671: LD_INT 60
13673: PUSH
13674: EMPTY
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: LD_INT 55
13686: PUSH
13687: EMPTY
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 72
13702: PUSH
13703: LD_INT 1
13705: ARRAY
13706: ST_TO_ADDR
// if IsInUnit ( driver ) then
13707: LD_VAR 0 18
13711: PPUSH
13712: CALL_OW 310
13716: IFFALSE 13727
// ComExit ( driver ) ;
13718: LD_VAR 0 18
13722: PPUSH
13723: CALL 39127 0 1
// AddComEnterUnit ( driver , tmp ) ;
13727: LD_VAR 0 18
13731: PPUSH
13732: LD_VAR 0 13
13736: PPUSH
13737: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13741: LD_VAR 0 18
13745: PPUSH
13746: LD_VAR 0 7
13750: PPUSH
13751: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13755: LD_VAR 0 18
13759: PPUSH
13760: CALL_OW 181
// end ; continue ;
13764: GO 13416
// end ; if not cleaners or not tmp in cleaners then
13766: LD_VAR 0 6
13770: NOT
13771: PUSH
13772: LD_VAR 0 13
13776: PUSH
13777: LD_VAR 0 6
13781: IN
13782: NOT
13783: OR
13784: IFFALSE 14091
// begin if dep then
13786: LD_VAR 0 17
13790: IFFALSE 13926
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13792: LD_ADDR_VAR 0 16
13796: PUSH
13797: LD_VAR 0 17
13801: PUSH
13802: LD_INT 1
13804: ARRAY
13805: PPUSH
13806: CALL_OW 250
13810: PPUSH
13811: LD_VAR 0 17
13815: PUSH
13816: LD_INT 1
13818: ARRAY
13819: PPUSH
13820: CALL_OW 254
13824: PPUSH
13825: LD_INT 5
13827: PPUSH
13828: CALL_OW 272
13832: PUSH
13833: LD_VAR 0 17
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PPUSH
13842: CALL_OW 251
13846: PPUSH
13847: LD_VAR 0 17
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: CALL_OW 254
13860: PPUSH
13861: LD_INT 5
13863: PPUSH
13864: CALL_OW 273
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13873: LD_VAR 0 16
13877: PUSH
13878: LD_INT 1
13880: ARRAY
13881: PPUSH
13882: LD_VAR 0 16
13886: PUSH
13887: LD_INT 2
13889: ARRAY
13890: PPUSH
13891: CALL_OW 488
13895: IFFALSE 13926
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13897: LD_VAR 0 13
13901: PPUSH
13902: LD_VAR 0 16
13906: PUSH
13907: LD_INT 1
13909: ARRAY
13910: PPUSH
13911: LD_VAR 0 16
13915: PUSH
13916: LD_INT 2
13918: ARRAY
13919: PPUSH
13920: CALL_OW 111
// continue ;
13924: GO 13416
// end ; end ; r := GetDir ( tmp ) ;
13926: LD_ADDR_VAR 0 15
13930: PUSH
13931: LD_VAR 0 13
13935: PPUSH
13936: CALL_OW 254
13940: ST_TO_ADDR
// if r = 5 then
13941: LD_VAR 0 15
13945: PUSH
13946: LD_INT 5
13948: EQUAL
13949: IFFALSE 13959
// r := 0 ;
13951: LD_ADDR_VAR 0 15
13955: PUSH
13956: LD_INT 0
13958: ST_TO_ADDR
// for j = r to 5 do
13959: LD_ADDR_VAR 0 10
13963: PUSH
13964: DOUBLE
13965: LD_VAR 0 15
13969: DEC
13970: ST_TO_ADDR
13971: LD_INT 5
13973: PUSH
13974: FOR_TO
13975: IFFALSE 14089
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13977: LD_ADDR_VAR 0 11
13981: PUSH
13982: LD_VAR 0 13
13986: PPUSH
13987: CALL_OW 250
13991: PPUSH
13992: LD_VAR 0 10
13996: PPUSH
13997: LD_INT 2
13999: PPUSH
14000: CALL_OW 272
14004: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14005: LD_ADDR_VAR 0 12
14009: PUSH
14010: LD_VAR 0 13
14014: PPUSH
14015: CALL_OW 251
14019: PPUSH
14020: LD_VAR 0 10
14024: PPUSH
14025: LD_INT 2
14027: PPUSH
14028: CALL_OW 273
14032: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14033: LD_VAR 0 11
14037: PPUSH
14038: LD_VAR 0 12
14042: PPUSH
14043: CALL_OW 488
14047: PUSH
14048: LD_VAR 0 11
14052: PPUSH
14053: LD_VAR 0 12
14057: PPUSH
14058: CALL_OW 428
14062: NOT
14063: AND
14064: IFFALSE 14087
// begin ComMoveXY ( tmp , _x , _y ) ;
14066: LD_VAR 0 13
14070: PPUSH
14071: LD_VAR 0 11
14075: PPUSH
14076: LD_VAR 0 12
14080: PPUSH
14081: CALL_OW 111
// break ;
14085: GO 14089
// end ; end ;
14087: GO 13974
14089: POP
14090: POP
// end ; end ;
14091: GO 13416
14093: POP
14094: POP
// end ;
14095: LD_VAR 0 8
14099: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14100: LD_INT 0
14102: PPUSH
// result := true ;
14103: LD_ADDR_VAR 0 3
14107: PUSH
14108: LD_INT 1
14110: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14111: LD_VAR 0 2
14115: PUSH
14116: LD_INT 24
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14130
14122: LD_INT 33
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14155
14130: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_INT 32
14138: PPUSH
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 321
14148: PUSH
14149: LD_INT 2
14151: EQUAL
14152: ST_TO_ADDR
14153: GO 14471
14155: LD_INT 20
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14188
14163: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_INT 6
14171: PPUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 321
14181: PUSH
14182: LD_INT 2
14184: EQUAL
14185: ST_TO_ADDR
14186: GO 14471
14188: LD_INT 22
14190: DOUBLE
14191: EQUAL
14192: IFTRUE 14202
14194: LD_INT 36
14196: DOUBLE
14197: EQUAL
14198: IFTRUE 14202
14200: GO 14227
14202: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_INT 15
14210: PPUSH
14211: LD_VAR 0 1
14215: PPUSH
14216: CALL_OW 321
14220: PUSH
14221: LD_INT 2
14223: EQUAL
14224: ST_TO_ADDR
14225: GO 14471
14227: LD_INT 30
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14260
14235: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: LD_INT 20
14243: PPUSH
14244: LD_VAR 0 1
14248: PPUSH
14249: CALL_OW 321
14253: PUSH
14254: LD_INT 2
14256: EQUAL
14257: ST_TO_ADDR
14258: GO 14471
14260: LD_INT 28
14262: DOUBLE
14263: EQUAL
14264: IFTRUE 14274
14266: LD_INT 21
14268: DOUBLE
14269: EQUAL
14270: IFTRUE 14274
14272: GO 14299
14274: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_INT 21
14282: PPUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 321
14292: PUSH
14293: LD_INT 2
14295: EQUAL
14296: ST_TO_ADDR
14297: GO 14471
14299: LD_INT 16
14301: DOUBLE
14302: EQUAL
14303: IFTRUE 14307
14305: GO 14332
14307: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14308: LD_ADDR_VAR 0 3
14312: PUSH
14313: LD_INT 84
14315: PPUSH
14316: LD_VAR 0 1
14320: PPUSH
14321: CALL_OW 321
14325: PUSH
14326: LD_INT 2
14328: EQUAL
14329: ST_TO_ADDR
14330: GO 14471
14332: LD_INT 19
14334: DOUBLE
14335: EQUAL
14336: IFTRUE 14346
14338: LD_INT 23
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14371
14346: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_INT 83
14354: PPUSH
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL_OW 321
14364: PUSH
14365: LD_INT 2
14367: EQUAL
14368: ST_TO_ADDR
14369: GO 14471
14371: LD_INT 17
14373: DOUBLE
14374: EQUAL
14375: IFTRUE 14379
14377: GO 14404
14379: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14380: LD_ADDR_VAR 0 3
14384: PUSH
14385: LD_INT 39
14387: PPUSH
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 321
14397: PUSH
14398: LD_INT 2
14400: EQUAL
14401: ST_TO_ADDR
14402: GO 14471
14404: LD_INT 18
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14437
14412: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: LD_INT 40
14420: PPUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 321
14430: PUSH
14431: LD_INT 2
14433: EQUAL
14434: ST_TO_ADDR
14435: GO 14471
14437: LD_INT 27
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14470
14445: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 35
14453: PPUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 321
14463: PUSH
14464: LD_INT 2
14466: EQUAL
14467: ST_TO_ADDR
14468: GO 14471
14470: POP
// end ;
14471: LD_VAR 0 3
14475: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
14480: PPUSH
14481: PPUSH
14482: PPUSH
14483: PPUSH
14484: PPUSH
14485: PPUSH
14486: PPUSH
14487: PPUSH
14488: PPUSH
// result := false ;
14489: LD_ADDR_VAR 0 6
14493: PUSH
14494: LD_INT 0
14496: ST_TO_ADDR
// if btype = b_depot then
14497: LD_VAR 0 2
14501: PUSH
14502: LD_INT 0
14504: EQUAL
14505: IFFALSE 14517
// begin result := true ;
14507: LD_ADDR_VAR 0 6
14511: PUSH
14512: LD_INT 1
14514: ST_TO_ADDR
// exit ;
14515: GO 15343
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14517: LD_VAR 0 1
14521: NOT
14522: PUSH
14523: LD_VAR 0 1
14527: PPUSH
14528: CALL_OW 266
14532: PUSH
14533: LD_INT 0
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: IN
14543: NOT
14544: OR
14545: PUSH
14546: LD_VAR 0 2
14550: NOT
14551: OR
14552: PUSH
14553: LD_VAR 0 5
14557: PUSH
14558: LD_INT 0
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: LD_INT 2
14566: PUSH
14567: LD_INT 3
14569: PUSH
14570: LD_INT 4
14572: PUSH
14573: LD_INT 5
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: IN
14584: NOT
14585: OR
14586: PUSH
14587: LD_VAR 0 3
14591: PPUSH
14592: LD_VAR 0 4
14596: PPUSH
14597: CALL_OW 488
14601: NOT
14602: OR
14603: IFFALSE 14607
// exit ;
14605: GO 15343
// side := GetSide ( depot ) ;
14607: LD_ADDR_VAR 0 9
14611: PUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 255
14621: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14622: LD_VAR 0 9
14626: PPUSH
14627: LD_VAR 0 2
14631: PPUSH
14632: CALL 14100 0 2
14636: NOT
14637: IFFALSE 14641
// exit ;
14639: GO 15343
// pom := GetBase ( depot ) ;
14641: LD_ADDR_VAR 0 10
14645: PUSH
14646: LD_VAR 0 1
14650: PPUSH
14651: CALL_OW 274
14655: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14656: LD_ADDR_VAR 0 11
14660: PUSH
14661: LD_VAR 0 2
14665: PPUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 248
14675: PPUSH
14676: CALL_OW 450
14680: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14681: LD_VAR 0 10
14685: PPUSH
14686: LD_INT 1
14688: PPUSH
14689: CALL_OW 275
14693: PUSH
14694: LD_VAR 0 11
14698: PUSH
14699: LD_INT 1
14701: ARRAY
14702: GREATEREQUAL
14703: PUSH
14704: LD_VAR 0 10
14708: PPUSH
14709: LD_INT 2
14711: PPUSH
14712: CALL_OW 275
14716: PUSH
14717: LD_VAR 0 11
14721: PUSH
14722: LD_INT 2
14724: ARRAY
14725: GREATEREQUAL
14726: AND
14727: PUSH
14728: LD_VAR 0 10
14732: PPUSH
14733: LD_INT 3
14735: PPUSH
14736: CALL_OW 275
14740: PUSH
14741: LD_VAR 0 11
14745: PUSH
14746: LD_INT 3
14748: ARRAY
14749: GREATEREQUAL
14750: AND
14751: NOT
14752: IFFALSE 14756
// exit ;
14754: GO 15343
// if GetBType ( depot ) = b_depot then
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 266
14765: PUSH
14766: LD_INT 0
14768: EQUAL
14769: IFFALSE 14781
// dist := 28 else
14771: LD_ADDR_VAR 0 14
14775: PUSH
14776: LD_INT 28
14778: ST_TO_ADDR
14779: GO 14789
// dist := 36 ;
14781: LD_ADDR_VAR 0 14
14785: PUSH
14786: LD_INT 36
14788: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14789: LD_VAR 0 1
14793: PPUSH
14794: LD_VAR 0 3
14798: PPUSH
14799: LD_VAR 0 4
14803: PPUSH
14804: CALL_OW 297
14808: PUSH
14809: LD_VAR 0 14
14813: GREATER
14814: IFFALSE 14818
// exit ;
14816: GO 15343
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14818: LD_ADDR_VAR 0 12
14822: PUSH
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_VAR 0 4
14837: PPUSH
14838: LD_VAR 0 5
14842: PPUSH
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 248
14852: PPUSH
14853: LD_INT 0
14855: PPUSH
14856: CALL 15348 0 6
14860: ST_TO_ADDR
// if not hexes then
14861: LD_VAR 0 12
14865: NOT
14866: IFFALSE 14870
// exit ;
14868: GO 15343
// hex := GetHexInfo ( x , y ) ;
14870: LD_ADDR_VAR 0 15
14874: PUSH
14875: LD_VAR 0 3
14879: PPUSH
14880: LD_VAR 0 4
14884: PPUSH
14885: CALL_OW 546
14889: ST_TO_ADDR
// if hex [ 1 ] then
14890: LD_VAR 0 15
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: IFFALSE 14902
// exit ;
14900: GO 15343
// height := hex [ 2 ] ;
14902: LD_ADDR_VAR 0 13
14906: PUSH
14907: LD_VAR 0 15
14911: PUSH
14912: LD_INT 2
14914: ARRAY
14915: ST_TO_ADDR
// for i = 1 to hexes do
14916: LD_ADDR_VAR 0 7
14920: PUSH
14921: DOUBLE
14922: LD_INT 1
14924: DEC
14925: ST_TO_ADDR
14926: LD_VAR 0 12
14930: PUSH
14931: FOR_TO
14932: IFFALSE 15262
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14934: LD_VAR 0 12
14938: PUSH
14939: LD_VAR 0 7
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_VAR 0 12
14953: PUSH
14954: LD_VAR 0 7
14958: ARRAY
14959: PUSH
14960: LD_INT 2
14962: ARRAY
14963: PPUSH
14964: CALL_OW 488
14968: NOT
14969: PUSH
14970: LD_VAR 0 12
14974: PUSH
14975: LD_VAR 0 7
14979: ARRAY
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: LD_VAR 0 12
14989: PUSH
14990: LD_VAR 0 7
14994: ARRAY
14995: PUSH
14996: LD_INT 2
14998: ARRAY
14999: PPUSH
15000: CALL_OW 428
15004: PUSH
15005: LD_INT 0
15007: GREATER
15008: OR
15009: PUSH
15010: LD_VAR 0 12
15014: PUSH
15015: LD_VAR 0 7
15019: ARRAY
15020: PUSH
15021: LD_INT 1
15023: ARRAY
15024: PPUSH
15025: LD_VAR 0 12
15029: PUSH
15030: LD_VAR 0 7
15034: ARRAY
15035: PUSH
15036: LD_INT 2
15038: ARRAY
15039: PPUSH
15040: CALL_OW 351
15044: OR
15045: IFFALSE 15051
// exit ;
15047: POP
15048: POP
15049: GO 15343
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15051: LD_ADDR_VAR 0 8
15055: PUSH
15056: LD_VAR 0 12
15060: PUSH
15061: LD_VAR 0 7
15065: ARRAY
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PPUSH
15071: LD_VAR 0 12
15075: PUSH
15076: LD_VAR 0 7
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: ARRAY
15085: PPUSH
15086: CALL_OW 546
15090: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15091: LD_VAR 0 8
15095: PUSH
15096: LD_INT 1
15098: ARRAY
15099: PUSH
15100: LD_VAR 0 8
15104: PUSH
15105: LD_INT 2
15107: ARRAY
15108: PUSH
15109: LD_VAR 0 13
15113: PUSH
15114: LD_INT 2
15116: PLUS
15117: GREATER
15118: OR
15119: PUSH
15120: LD_VAR 0 8
15124: PUSH
15125: LD_INT 2
15127: ARRAY
15128: PUSH
15129: LD_VAR 0 13
15133: PUSH
15134: LD_INT 2
15136: MINUS
15137: LESS
15138: OR
15139: PUSH
15140: LD_VAR 0 8
15144: PUSH
15145: LD_INT 3
15147: ARRAY
15148: PUSH
15149: LD_INT 0
15151: PUSH
15152: LD_INT 8
15154: PUSH
15155: LD_INT 9
15157: PUSH
15158: LD_INT 10
15160: PUSH
15161: LD_INT 11
15163: PUSH
15164: LD_INT 12
15166: PUSH
15167: LD_INT 13
15169: PUSH
15170: LD_INT 16
15172: PUSH
15173: LD_INT 17
15175: PUSH
15176: LD_INT 18
15178: PUSH
15179: LD_INT 19
15181: PUSH
15182: LD_INT 20
15184: PUSH
15185: LD_INT 21
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: IN
15203: NOT
15204: OR
15205: PUSH
15206: LD_VAR 0 8
15210: PUSH
15211: LD_INT 5
15213: ARRAY
15214: NOT
15215: OR
15216: PUSH
15217: LD_VAR 0 8
15221: PUSH
15222: LD_INT 6
15224: ARRAY
15225: PUSH
15226: LD_INT 1
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: LD_INT 7
15234: PUSH
15235: LD_INT 9
15237: PUSH
15238: LD_INT 10
15240: PUSH
15241: LD_INT 11
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: IN
15252: NOT
15253: OR
15254: IFFALSE 15260
// exit ;
15256: POP
15257: POP
15258: GO 15343
// end ;
15260: GO 14931
15262: POP
15263: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15264: LD_VAR 0 9
15268: PPUSH
15269: LD_VAR 0 3
15273: PPUSH
15274: LD_VAR 0 4
15278: PPUSH
15279: LD_INT 20
15281: PPUSH
15282: CALL 7266 0 4
15286: PUSH
15287: LD_INT 4
15289: ARRAY
15290: IFFALSE 15294
// exit ;
15292: GO 15343
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15294: LD_VAR 0 2
15298: PUSH
15299: LD_INT 29
15301: PUSH
15302: LD_INT 30
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: IN
15309: PUSH
15310: LD_VAR 0 3
15314: PPUSH
15315: LD_VAR 0 4
15319: PPUSH
15320: LD_VAR 0 9
15324: PPUSH
15325: CALL_OW 440
15329: NOT
15330: AND
15331: IFFALSE 15335
// exit ;
15333: GO 15343
// result := true ;
15335: LD_ADDR_VAR 0 6
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// end ;
15343: LD_VAR 0 6
15347: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
15352: PPUSH
15353: PPUSH
15354: PPUSH
15355: PPUSH
15356: PPUSH
15357: PPUSH
15358: PPUSH
15359: PPUSH
15360: PPUSH
15361: PPUSH
15362: PPUSH
15363: PPUSH
15364: PPUSH
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
15369: PPUSH
15370: PPUSH
15371: PPUSH
15372: PPUSH
15373: PPUSH
15374: PPUSH
15375: PPUSH
15376: PPUSH
15377: PPUSH
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
// result = [ ] ;
15408: LD_ADDR_VAR 0 7
15412: PUSH
15413: EMPTY
15414: ST_TO_ADDR
// temp_list = [ ] ;
15415: LD_ADDR_VAR 0 9
15419: PUSH
15420: EMPTY
15421: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15422: LD_VAR 0 4
15426: PUSH
15427: LD_INT 0
15429: PUSH
15430: LD_INT 1
15432: PUSH
15433: LD_INT 2
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: LD_INT 4
15441: PUSH
15442: LD_INT 5
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: IN
15453: NOT
15454: PUSH
15455: LD_VAR 0 1
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: LD_INT 1
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: IN
15470: PUSH
15471: LD_VAR 0 5
15475: PUSH
15476: LD_INT 1
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: LD_INT 3
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: IN
15490: NOT
15491: AND
15492: OR
15493: IFFALSE 15497
// exit ;
15495: GO 33888
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15497: LD_VAR 0 1
15501: PUSH
15502: LD_INT 6
15504: PUSH
15505: LD_INT 7
15507: PUSH
15508: LD_INT 8
15510: PUSH
15511: LD_INT 13
15513: PUSH
15514: LD_INT 12
15516: PUSH
15517: LD_INT 15
15519: PUSH
15520: LD_INT 11
15522: PUSH
15523: LD_INT 14
15525: PUSH
15526: LD_INT 10
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: IN
15540: IFFALSE 15550
// btype = b_lab ;
15542: LD_ADDR_VAR 0 1
15546: PUSH
15547: LD_INT 6
15549: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15550: LD_VAR 0 6
15554: PUSH
15555: LD_INT 0
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: IN
15569: NOT
15570: PUSH
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: LD_INT 2
15584: PUSH
15585: LD_INT 3
15587: PUSH
15588: LD_INT 6
15590: PUSH
15591: LD_INT 36
15593: PUSH
15594: LD_INT 4
15596: PUSH
15597: LD_INT 5
15599: PUSH
15600: LD_INT 31
15602: PUSH
15603: LD_INT 32
15605: PUSH
15606: LD_INT 33
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: IN
15622: NOT
15623: PUSH
15624: LD_VAR 0 6
15628: PUSH
15629: LD_INT 1
15631: EQUAL
15632: AND
15633: OR
15634: PUSH
15635: LD_VAR 0 1
15639: PUSH
15640: LD_INT 2
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: IN
15650: NOT
15651: PUSH
15652: LD_VAR 0 6
15656: PUSH
15657: LD_INT 2
15659: EQUAL
15660: AND
15661: OR
15662: IFFALSE 15672
// mode = 0 ;
15664: LD_ADDR_VAR 0 6
15668: PUSH
15669: LD_INT 0
15671: ST_TO_ADDR
// case mode of 0 :
15672: LD_VAR 0 6
15676: PUSH
15677: LD_INT 0
15679: DOUBLE
15680: EQUAL
15681: IFTRUE 15685
15683: GO 27138
15685: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15686: LD_ADDR_VAR 0 11
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: LD_INT 0
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 0
15703: PUSH
15704: LD_INT 1
15706: NEG
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: LD_INT 0
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 0
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 1
15744: NEG
15745: PUSH
15746: LD_INT 0
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 1
15755: NEG
15756: PUSH
15757: LD_INT 1
15759: NEG
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 1
15767: NEG
15768: PUSH
15769: LD_INT 2
15771: NEG
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 0
15779: PUSH
15780: LD_INT 2
15782: NEG
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: PUSH
15791: LD_INT 1
15793: NEG
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 0
15811: PUSH
15812: LD_INT 2
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 1
15821: NEG
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: LD_INT 3
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 0
15842: PUSH
15843: LD_INT 3
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 1
15852: NEG
15853: PUSH
15854: LD_INT 2
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15879: LD_ADDR_VAR 0 12
15883: PUSH
15884: LD_INT 0
15886: PUSH
15887: LD_INT 0
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 0
15896: PUSH
15897: LD_INT 1
15899: NEG
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: LD_INT 0
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 0
15927: PUSH
15928: LD_INT 1
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 1
15937: NEG
15938: PUSH
15939: LD_INT 0
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 1
15948: NEG
15949: PUSH
15950: LD_INT 1
15952: NEG
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: LD_INT 1
15963: NEG
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 2
15971: PUSH
15972: LD_INT 0
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 2
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: NEG
15992: PUSH
15993: LD_INT 1
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 2
16002: NEG
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 2
16013: NEG
16014: PUSH
16015: LD_INT 1
16017: NEG
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 2
16025: NEG
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 3
16036: NEG
16037: PUSH
16038: LD_INT 0
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 3
16047: NEG
16048: PUSH
16049: LD_INT 1
16051: NEG
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16075: LD_ADDR_VAR 0 13
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 0
16092: PUSH
16093: LD_INT 1
16095: NEG
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: LD_INT 0
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 1
16133: NEG
16134: PUSH
16135: LD_INT 0
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: NEG
16145: PUSH
16146: LD_INT 1
16148: NEG
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 1
16156: NEG
16157: PUSH
16158: LD_INT 2
16160: NEG
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 2
16168: PUSH
16169: LD_INT 1
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 2
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 2
16198: NEG
16199: PUSH
16200: LD_INT 1
16202: NEG
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 2
16210: NEG
16211: PUSH
16212: LD_INT 2
16214: NEG
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 2
16222: NEG
16223: PUSH
16224: LD_INT 3
16226: NEG
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 3
16234: NEG
16235: PUSH
16236: LD_INT 2
16238: NEG
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 3
16246: NEG
16247: PUSH
16248: LD_INT 3
16250: NEG
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16274: LD_ADDR_VAR 0 14
16278: PUSH
16279: LD_INT 0
16281: PUSH
16282: LD_INT 0
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 1
16294: NEG
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 0
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 1
16332: NEG
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: NEG
16344: PUSH
16345: LD_INT 1
16347: NEG
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 1
16355: NEG
16356: PUSH
16357: LD_INT 2
16359: NEG
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: LD_INT 2
16370: NEG
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 1
16378: PUSH
16379: LD_INT 1
16381: NEG
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 1
16409: NEG
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 1
16420: NEG
16421: PUSH
16422: LD_INT 3
16424: NEG
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 0
16432: PUSH
16433: LD_INT 3
16435: NEG
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: LD_INT 2
16446: NEG
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16470: LD_ADDR_VAR 0 15
16474: PUSH
16475: LD_INT 0
16477: PUSH
16478: LD_INT 0
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: LD_INT 1
16490: NEG
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 0
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 1
16528: NEG
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: NEG
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 1
16551: PUSH
16552: LD_INT 1
16554: NEG
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: NEG
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 2
16593: NEG
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 2
16604: NEG
16605: PUSH
16606: LD_INT 1
16608: NEG
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: LD_INT 1
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 3
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16663: LD_ADDR_VAR 0 16
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: LD_INT 0
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: LD_INT 1
16683: NEG
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: LD_INT 0
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: LD_INT 1
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 0
16711: PUSH
16712: LD_INT 1
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 1
16721: NEG
16722: PUSH
16723: LD_INT 0
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: NEG
16733: PUSH
16734: LD_INT 1
16736: NEG
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: NEG
16745: PUSH
16746: LD_INT 2
16748: NEG
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 2
16766: PUSH
16767: LD_INT 2
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 1
16776: PUSH
16777: LD_INT 2
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 2
16786: NEG
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 2
16798: NEG
16799: PUSH
16800: LD_INT 2
16802: NEG
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 3
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 3
16820: PUSH
16821: LD_INT 3
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 2
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16856: LD_ADDR_VAR 0 17
16860: PUSH
16861: LD_INT 0
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 0
16873: PUSH
16874: LD_INT 1
16876: NEG
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: LD_INT 0
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 1
16914: NEG
16915: PUSH
16916: LD_INT 0
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: LD_INT 1
16929: NEG
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: NEG
16938: PUSH
16939: LD_INT 2
16941: NEG
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 0
16949: PUSH
16950: LD_INT 2
16952: NEG
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 1
16960: PUSH
16961: LD_INT 1
16963: NEG
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 2
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: LD_INT 2
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 0
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 1
17021: NEG
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 2
17032: NEG
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 2
17043: NEG
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: NEG
17056: PUSH
17057: LD_INT 2
17059: NEG
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17086: LD_ADDR_VAR 0 18
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: LD_INT 0
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: LD_INT 1
17106: NEG
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: LD_INT 0
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: PUSH
17125: LD_INT 1
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 0
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 1
17144: NEG
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: LD_INT 1
17159: NEG
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 1
17167: NEG
17168: PUSH
17169: LD_INT 2
17171: NEG
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 0
17179: PUSH
17180: LD_INT 2
17182: NEG
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: LD_INT 1
17193: NEG
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 1
17251: NEG
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 2
17262: NEG
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 2
17273: NEG
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: LD_INT 2
17289: NEG
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17316: LD_ADDR_VAR 0 19
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: LD_INT 0
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 0
17333: PUSH
17334: LD_INT 1
17336: NEG
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: LD_INT 0
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 1
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 1
17374: NEG
17375: PUSH
17376: LD_INT 0
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: LD_INT 1
17389: NEG
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: NEG
17398: PUSH
17399: LD_INT 2
17401: NEG
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: LD_INT 2
17412: NEG
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 2
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 0
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 1
17481: NEG
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 2
17492: NEG
17493: PUSH
17494: LD_INT 0
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 2
17503: NEG
17504: PUSH
17505: LD_INT 1
17507: NEG
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 2
17515: NEG
17516: PUSH
17517: LD_INT 2
17519: NEG
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17546: LD_ADDR_VAR 0 20
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: LD_INT 0
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 0
17563: PUSH
17564: LD_INT 1
17566: NEG
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: LD_INT 0
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 0
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 1
17604: NEG
17605: PUSH
17606: LD_INT 0
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: LD_INT 1
17619: NEG
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: NEG
17628: PUSH
17629: LD_INT 2
17631: NEG
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 0
17639: PUSH
17640: LD_INT 2
17642: NEG
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 1
17711: NEG
17712: PUSH
17713: LD_INT 1
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 2
17722: NEG
17723: PUSH
17724: LD_INT 0
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 2
17733: NEG
17734: PUSH
17735: LD_INT 1
17737: NEG
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 2
17745: NEG
17746: PUSH
17747: LD_INT 2
17749: NEG
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17776: LD_ADDR_VAR 0 21
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: LD_INT 0
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: LD_INT 1
17796: NEG
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 0
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: NEG
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: LD_INT 1
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: NEG
17858: PUSH
17859: LD_INT 2
17861: NEG
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: LD_INT 2
17872: NEG
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: LD_INT 1
17883: NEG
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 0
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 1
17941: NEG
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: NEG
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 2
17963: NEG
17964: PUSH
17965: LD_INT 1
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 2
17975: NEG
17976: PUSH
17977: LD_INT 2
17979: NEG
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18006: LD_ADDR_VAR 0 22
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: LD_INT 0
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: LD_INT 1
18026: NEG
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: LD_INT 0
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: LD_INT 1
18079: NEG
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: NEG
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: LD_INT 2
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: LD_INT 1
18113: NEG
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 0
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 1
18171: NEG
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 2
18182: NEG
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: NEG
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 2
18205: NEG
18206: PUSH
18207: LD_INT 2
18209: NEG
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18236: LD_ADDR_VAR 0 23
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: LD_INT 0
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 1
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 0
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: LD_INT 1
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: LD_INT 2
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 2
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 0
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 2
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 1
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: NEG
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 2
18412: NEG
18413: PUSH
18414: LD_INT 0
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: NEG
18424: PUSH
18425: LD_INT 1
18427: NEG
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: LD_INT 2
18439: NEG
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: NEG
18448: PUSH
18449: LD_INT 3
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: LD_INT 3
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 2
18482: PUSH
18483: LD_INT 1
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18516: LD_ADDR_VAR 0 24
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 1
18536: NEG
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: NEG
18598: PUSH
18599: LD_INT 2
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 2
18612: NEG
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: LD_INT 2
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: NEG
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 2
18692: NEG
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 2
18703: NEG
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 2
18715: NEG
18716: PUSH
18717: LD_INT 2
18719: NEG
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 1
18727: PUSH
18728: LD_INT 2
18730: NEG
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 2
18738: PUSH
18739: LD_INT 1
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18792: LD_ADDR_VAR 0 25
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 2
18907: PUSH
18908: LD_INT 0
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: LD_INT 2
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 0
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: LD_INT 1
18983: NEG
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 2
18991: NEG
18992: PUSH
18993: LD_INT 2
18995: NEG
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 3
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 3
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19066: LD_ADDR_VAR 0 26
19070: PUSH
19071: LD_INT 0
19073: PUSH
19074: LD_INT 0
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: LD_INT 1
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 0
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 1
19124: NEG
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: LD_INT 2
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: LD_INT 2
19162: NEG
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: LD_INT 1
19173: NEG
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 2
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 2
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 0
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: NEG
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 2
19253: NEG
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 2
19265: NEG
19266: PUSH
19267: LD_INT 2
19269: NEG
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: LD_INT 3
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: LD_INT 3
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 2
19308: NEG
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19342: LD_ADDR_VAR 0 27
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: LD_INT 1
19362: NEG
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: LD_INT 2
19427: NEG
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: LD_INT 2
19438: NEG
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: NEG
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 2
19518: NEG
19519: PUSH
19520: LD_INT 0
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 2
19529: NEG
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: LD_INT 2
19545: NEG
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 3
19575: NEG
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 3
19587: NEG
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19622: LD_ADDR_VAR 0 28
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: LD_INT 1
19695: NEG
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: LD_INT 2
19707: NEG
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: LD_INT 2
19718: NEG
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: LD_INT 1
19729: NEG
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 2
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 0
19777: PUSH
19778: LD_INT 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: NEG
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 2
19833: NEG
19834: PUSH
19835: LD_INT 3
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: PUSH
19847: LD_INT 3
19849: NEG
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 3
19857: NEG
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 3
19869: NEG
19870: PUSH
19871: LD_INT 2
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19904: LD_ADDR_VAR 0 29
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 1
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: NEG
19986: PUSH
19987: LD_INT 2
19989: NEG
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: LD_INT 1
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: LD_INT 2
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: NEG
20083: PUSH
20084: LD_INT 2
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 2
20094: NEG
20095: PUSH
20096: LD_INT 3
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 3
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: LD_INT 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 3
20148: NEG
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20183: LD_ADDR_VAR 0 30
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: LD_INT 2
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 0
20276: PUSH
20277: LD_INT 2
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: LD_INT 3
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: LD_INT 2
20387: NEG
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 3
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: LD_INT 3
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 3
20426: NEG
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20461: LD_ADDR_VAR 0 31
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: LD_INT 1
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: LD_INT 1
20534: NEG
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 1
20542: NEG
20543: PUSH
20544: LD_INT 2
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 2
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 1
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 1
20615: NEG
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: NEG
20639: PUSH
20640: LD_INT 2
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 2
20650: NEG
20651: PUSH
20652: LD_INT 3
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 2
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 3
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 3
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 3
20704: NEG
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20739: LD_ADDR_VAR 0 32
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 1
20797: NEG
20798: PUSH
20799: LD_INT 0
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: NEG
20809: PUSH
20810: LD_INT 1
20812: NEG
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: LD_INT 2
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: PUSH
20844: LD_INT 1
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: NEG
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 3
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 3
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 3
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 3
20982: NEG
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21017: LD_ADDR_VAR 0 33
21021: PUSH
21022: LD_INT 0
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 1
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: LD_INT 2
21102: NEG
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: LD_INT 2
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: LD_INT 2
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: NEG
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: LD_INT 2
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: NEG
21208: PUSH
21209: LD_INT 3
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 3
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: NEG
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 3
21261: NEG
21262: PUSH
21263: LD_INT 2
21265: NEG
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21296: LD_ADDR_VAR 0 34
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: NEG
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: LD_INT 2
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: NEG
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: NEG
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: NEG
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: LD_INT 2
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: LD_INT 3
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 2
21502: NEG
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 3
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 3
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 3
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21576: LD_ADDR_VAR 0 35
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: NEG
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21688: LD_ADDR_VAR 0 36
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: LD_INT 0
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 0
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: LD_INT 0
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 2
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21800: LD_ADDR_VAR 0 37
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 0
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: LD_INT 1
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21912: LD_ADDR_VAR 0 38
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 0
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: LD_INT 1
21932: NEG
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 2
22003: NEG
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22024: LD_ADDR_VAR 0 39
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: LD_INT 2
22109: NEG
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22136: LD_ADDR_VAR 0 40
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 0
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22248: LD_ADDR_VAR 0 41
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: LD_INT 1
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 0
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: NEG
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 1
22344: NEG
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: NEG
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 2
22403: NEG
22404: PUSH
22405: LD_INT 0
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 2
22414: NEG
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 2
22426: NEG
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: LD_INT 3
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 3
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 3
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 3
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: NEG
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 3
22522: NEG
22523: PUSH
22524: LD_INT 0
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 3
22533: NEG
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 3
22545: NEG
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 3
22557: NEG
22558: PUSH
22559: LD_INT 3
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22598: LD_ADDR_VAR 0 42
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: LD_INT 2
22683: NEG
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: NEG
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 2
22776: NEG
22777: PUSH
22778: LD_INT 2
22780: NEG
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: LD_INT 3
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: LD_INT 3
22804: NEG
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: LD_INT 3
22815: NEG
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 3
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 3
22844: PUSH
22845: LD_INT 3
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 2
22854: PUSH
22855: LD_INT 3
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 3
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 3
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 3
22895: NEG
22896: PUSH
22897: LD_INT 2
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 3
22907: NEG
22908: PUSH
22909: LD_INT 3
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22948: LD_ADDR_VAR 0 43
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: LD_INT 1
22968: NEG
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: LD_INT 2
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 2
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: LD_INT 0
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 2
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: LD_INT 3
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 3
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 3
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: LD_INT 3
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 2
23233: NEG
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 3
23244: NEG
23245: PUSH
23246: LD_INT 0
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 3
23255: NEG
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23296: LD_ADDR_VAR 0 44
23300: PUSH
23301: LD_INT 0
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 2
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: LD_INT 2
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 2
23451: NEG
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 2
23462: NEG
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: NEG
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: NEG
23487: PUSH
23488: LD_INT 3
23490: NEG
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 3
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 3
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 3
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 3
23570: NEG
23571: PUSH
23572: LD_INT 0
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 3
23581: NEG
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 3
23593: NEG
23594: PUSH
23595: LD_INT 2
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 3
23605: NEG
23606: PUSH
23607: LD_INT 3
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23646: LD_ADDR_VAR 0 45
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 1
23704: NEG
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: NEG
23728: PUSH
23729: LD_INT 2
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 2
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: NEG
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 2
23824: NEG
23825: PUSH
23826: LD_INT 2
23828: NEG
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 2
23836: NEG
23837: PUSH
23838: LD_INT 3
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: LD_INT 3
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: LD_INT 3
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: LD_INT 2
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 3
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 3
23892: PUSH
23893: LD_INT 3
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 2
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 3
23943: NEG
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 3
23955: NEG
23956: PUSH
23957: LD_INT 3
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23996: LD_ADDR_VAR 0 46
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: NEG
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: LD_INT 2
24081: NEG
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: LD_INT 2
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 2
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 2
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 1
24151: NEG
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 2
24162: NEG
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 2
24173: NEG
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: LD_INT 3
24189: NEG
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: LD_INT 3
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 2
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 3
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 3
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 3
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 2
24281: NEG
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 3
24292: NEG
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 3
24303: NEG
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24344: LD_ADDR_VAR 0 47
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 0
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: LD_INT 0
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: LD_INT 2
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: LD_INT 2
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 2
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: NEG
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24495: LD_ADDR_VAR 0 48
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 0
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: LD_INT 2
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 2
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24642: LD_ADDR_VAR 0 49
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 2
24754: PUSH
24755: LD_INT 2
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24786: LD_ADDR_VAR 0 50
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24930: LD_ADDR_VAR 0 51
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 0
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25077: LD_ADDR_VAR 0 52
25081: PUSH
25082: LD_INT 0
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 2
25204: NEG
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25228: LD_ADDR_VAR 0 53
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: LD_INT 1
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 1
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: LD_INT 2
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 2
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 2
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: NEG
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 2
25415: NEG
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: LD_INT 2
25431: NEG
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25458: LD_ADDR_VAR 0 54
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: LD_INT 2
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: LD_INT 2
25554: NEG
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: NEG
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: NEG
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25688: LD_ADDR_VAR 0 55
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: NEG
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 2
25875: NEG
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 2
25887: NEG
25888: PUSH
25889: LD_INT 2
25891: NEG
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25918: LD_ADDR_VAR 0 56
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 0
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: NEG
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26148: LD_ADDR_VAR 0 57
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: LD_INT 2
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 2
26324: NEG
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 2
26347: NEG
26348: PUSH
26349: LD_INT 2
26351: NEG
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26378: LD_ADDR_VAR 0 58
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: NEG
26460: PUSH
26461: LD_INT 2
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 2
26554: NEG
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: LD_INT 2
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26608: LD_ADDR_VAR 0 59
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26696: LD_ADDR_VAR 0 60
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26784: LD_ADDR_VAR 0 61
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26872: LD_ADDR_VAR 0 62
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26960: LD_ADDR_VAR 0 63
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27048: LD_ADDR_VAR 0 64
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: ST_TO_ADDR
// end ; 1 :
27136: GO 33033
27138: LD_INT 1
27140: DOUBLE
27141: EQUAL
27142: IFTRUE 27146
27144: GO 29769
27146: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27147: LD_ADDR_VAR 0 11
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 3
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 3
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27191: LD_ADDR_VAR 0 12
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 3
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27232: LD_ADDR_VAR 0 13
27236: PUSH
27237: LD_INT 3
27239: PUSH
27240: LD_INT 2
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: LD_INT 3
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27272: LD_ADDR_VAR 0 14
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: LD_INT 3
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: LD_INT 3
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: LIST
27312: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27313: LD_ADDR_VAR 0 15
27317: PUSH
27318: LD_INT 2
27320: NEG
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 3
27331: NEG
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 3
27342: NEG
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27357: LD_ADDR_VAR 0 16
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: LD_INT 3
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 3
27376: NEG
27377: PUSH
27378: LD_INT 2
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 3
27388: NEG
27389: PUSH
27390: LD_INT 3
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27403: LD_ADDR_VAR 0 17
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 3
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27447: LD_ADDR_VAR 0 18
27451: PUSH
27452: LD_INT 2
27454: PUSH
27455: LD_INT 1
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 3
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27488: LD_ADDR_VAR 0 19
27492: PUSH
27493: LD_INT 3
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 3
27505: PUSH
27506: LD_INT 3
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: LD_INT 3
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27528: LD_ADDR_VAR 0 20
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: LD_INT 3
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 3
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27569: LD_ADDR_VAR 0 21
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 3
27587: NEG
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 3
27598: NEG
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27613: LD_ADDR_VAR 0 22
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 3
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 3
27632: NEG
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: NEG
27645: PUSH
27646: LD_INT 3
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27659: LD_ADDR_VAR 0 23
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: LD_INT 4
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 3
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27703: LD_ADDR_VAR 0 24
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 3
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 4
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27744: LD_ADDR_VAR 0 25
27748: PUSH
27749: LD_INT 3
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 4
27761: PUSH
27762: LD_INT 3
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: LD_INT 4
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27784: LD_ADDR_VAR 0 26
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: LD_INT 3
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 4
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: LD_INT 3
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27825: LD_ADDR_VAR 0 27
27829: PUSH
27830: LD_INT 3
27832: NEG
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 3
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 4
27854: NEG
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27869: LD_ADDR_VAR 0 28
27873: PUSH
27874: LD_INT 3
27876: NEG
27877: PUSH
27878: LD_INT 3
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 3
27888: NEG
27889: PUSH
27890: LD_INT 4
27892: NEG
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 4
27900: NEG
27901: PUSH
27902: LD_INT 3
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27915: LD_ADDR_VAR 0 29
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: LD_INT 3
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 3
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 2
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: LD_INT 4
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 4
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 3
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 5
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: LD_INT 5
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: LD_INT 4
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 6
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 6
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: LD_INT 5
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28070: LD_ADDR_VAR 0 30
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 3
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 4
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 4
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 4
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 5
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 5
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 5
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 6
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 6
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28213: LD_ADDR_VAR 0 31
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: LD_INT 3
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: LD_INT 3
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 4
28250: PUSH
28251: LD_INT 3
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 4
28260: PUSH
28261: LD_INT 4
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: LD_INT 4
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 5
28280: PUSH
28281: LD_INT 4
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 5
28290: PUSH
28291: LD_INT 5
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 4
28300: PUSH
28301: LD_INT 5
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 6
28310: PUSH
28311: LD_INT 5
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 6
28320: PUSH
28321: LD_INT 6
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 5
28330: PUSH
28331: LD_INT 6
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28352: LD_ADDR_VAR 0 32
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 3
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 3
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 2
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: LD_INT 4
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 4
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: NEG
28411: PUSH
28412: LD_INT 3
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: LD_INT 5
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 5
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 4
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 6
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: LD_INT 6
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 1
28472: NEG
28473: PUSH
28474: LD_INT 5
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28495: LD_ADDR_VAR 0 33
28499: PUSH
28500: LD_INT 2
28502: NEG
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 3
28513: NEG
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 3
28524: NEG
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 3
28536: NEG
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 4
28547: NEG
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 4
28558: NEG
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 4
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 5
28581: NEG
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 5
28592: NEG
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 5
28604: NEG
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 6
28615: NEG
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 6
28626: NEG
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28650: LD_ADDR_VAR 0 34
28654: PUSH
28655: LD_INT 2
28657: NEG
28658: PUSH
28659: LD_INT 3
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 3
28669: NEG
28670: PUSH
28671: LD_INT 2
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 3
28681: NEG
28682: PUSH
28683: LD_INT 3
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: NEG
28694: PUSH
28695: LD_INT 4
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 4
28705: NEG
28706: PUSH
28707: LD_INT 3
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 4
28717: NEG
28718: PUSH
28719: LD_INT 4
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 4
28729: NEG
28730: PUSH
28731: LD_INT 5
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 5
28741: NEG
28742: PUSH
28743: LD_INT 4
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 5
28753: NEG
28754: PUSH
28755: LD_INT 5
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 5
28765: NEG
28766: PUSH
28767: LD_INT 6
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 6
28777: NEG
28778: PUSH
28779: LD_INT 5
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 6
28789: NEG
28790: PUSH
28791: LD_INT 6
28793: NEG
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28813: LD_ADDR_VAR 0 41
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: LD_INT 2
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 3
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: LD_INT 2
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28857: LD_ADDR_VAR 0 42
28861: PUSH
28862: LD_INT 2
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 3
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28898: LD_ADDR_VAR 0 43
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 3
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: LD_INT 3
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28938: LD_ADDR_VAR 0 44
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: LIST
28978: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28979: LD_ADDR_VAR 0 45
28983: PUSH
28984: LD_INT 2
28986: NEG
28987: PUSH
28988: LD_INT 0
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 2
28997: NEG
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 3
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: LIST
29022: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29023: LD_ADDR_VAR 0 46
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: LD_INT 3
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 3
29054: NEG
29055: PUSH
29056: LD_INT 2
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29069: LD_ADDR_VAR 0 47
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: LD_INT 3
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: LD_INT 3
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29102: LD_ADDR_VAR 0 48
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29133: LD_ADDR_VAR 0 49
29137: PUSH
29138: LD_INT 3
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 3
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29162: LD_ADDR_VAR 0 50
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: LD_INT 3
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: LD_INT 3
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29191: LD_ADDR_VAR 0 51
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29222: LD_ADDR_VAR 0 52
29226: PUSH
29227: LD_INT 3
29229: NEG
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 3
29241: NEG
29242: PUSH
29243: LD_INT 2
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29255: LD_ADDR_VAR 0 53
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: LD_INT 3
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 3
29277: NEG
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29299: LD_ADDR_VAR 0 54
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 3
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29340: LD_ADDR_VAR 0 55
29344: PUSH
29345: LD_INT 3
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29380: LD_ADDR_VAR 0 56
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29421: LD_ADDR_VAR 0 57
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: NEG
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29465: LD_ADDR_VAR 0 58
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 3
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: NEG
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29511: LD_ADDR_VAR 0 59
29515: PUSH
29516: LD_INT 1
29518: NEG
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: LD_INT 1
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29555: LD_ADDR_VAR 0 60
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29596: LD_ADDR_VAR 0 61
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29636: LD_ADDR_VAR 0 62
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29677: LD_ADDR_VAR 0 63
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29721: LD_ADDR_VAR 0 64
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 2
29740: NEG
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 2
29752: NEG
29753: PUSH
29754: LD_INT 2
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// end ; 2 :
29767: GO 33033
29769: LD_INT 2
29771: DOUBLE
29772: EQUAL
29773: IFTRUE 29777
29775: GO 33032
29777: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29778: LD_ADDR_VAR 0 29
29782: PUSH
29783: LD_INT 4
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 4
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 5
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 5
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 4
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 3
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 3
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 5
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 3
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 4
29908: PUSH
29909: LD_INT 4
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 3
29918: PUSH
29919: LD_INT 4
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 2
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 4
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 2
29958: PUSH
29959: LD_INT 4
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 4
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: LD_INT 4
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: LD_INT 5
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 5
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 4
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: LD_INT 5
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 2
30050: NEG
30051: PUSH
30052: LD_INT 3
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 3
30061: NEG
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 3
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: NEG
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 2
30095: NEG
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 3
30106: NEG
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 4
30117: NEG
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 4
30128: NEG
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 4
30140: NEG
30141: PUSH
30142: LD_INT 2
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: LD_INT 4
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 4
30175: NEG
30176: PUSH
30177: LD_INT 5
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 3
30187: NEG
30188: PUSH
30189: LD_INT 4
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: LD_INT 3
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 4
30211: NEG
30212: PUSH
30213: LD_INT 3
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 5
30223: NEG
30224: PUSH
30225: LD_INT 4
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 5
30235: NEG
30236: PUSH
30237: LD_INT 5
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 3
30247: NEG
30248: PUSH
30249: LD_INT 5
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 5
30259: NEG
30260: PUSH
30261: LD_INT 3
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30316: LD_ADDR_VAR 0 30
30320: PUSH
30321: LD_INT 4
30323: PUSH
30324: LD_INT 4
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 4
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 5
30343: PUSH
30344: LD_INT 4
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 5
30353: PUSH
30354: LD_INT 5
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 4
30363: PUSH
30364: LD_INT 5
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 3
30373: PUSH
30374: LD_INT 4
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 5
30393: PUSH
30394: LD_INT 3
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 5
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: LD_INT 3
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 4
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: LD_INT 3
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 2
30485: PUSH
30486: LD_INT 4
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 2
30495: NEG
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 4
30517: NEG
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 3
30529: NEG
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: NEG
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 4
30551: NEG
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 5
30562: NEG
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 5
30573: NEG
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 5
30585: NEG
30586: PUSH
30587: LD_INT 2
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: NEG
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: NEG
30609: PUSH
30610: LD_INT 3
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: LD_INT 4
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 3
30656: NEG
30657: PUSH
30658: LD_INT 2
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 4
30668: NEG
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 4
30680: NEG
30681: PUSH
30682: LD_INT 4
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: NEG
30693: PUSH
30694: LD_INT 4
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 4
30704: NEG
30705: PUSH
30706: LD_INT 2
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 4
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: LD_INT 5
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 4
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 3
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 4
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: LD_INT 5
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: NEG
30807: PUSH
30808: LD_INT 5
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30863: LD_ADDR_VAR 0 31
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: LD_INT 4
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 4
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 5
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 4
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: LD_INT 5
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 3
30974: NEG
30975: PUSH
30976: LD_INT 1
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 2
30997: NEG
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 4
31019: NEG
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 4
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 4
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: LD_INT 4
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 4
31077: NEG
31078: PUSH
31079: LD_INT 5
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 3
31089: NEG
31090: PUSH
31091: LD_INT 4
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 3
31101: NEG
31102: PUSH
31103: LD_INT 3
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 4
31113: NEG
31114: PUSH
31115: LD_INT 3
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 5
31125: NEG
31126: PUSH
31127: LD_INT 4
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 5
31137: NEG
31138: PUSH
31139: LD_INT 5
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 3
31149: NEG
31150: PUSH
31151: LD_INT 5
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 5
31161: NEG
31162: PUSH
31163: LD_INT 3
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: LD_INT 3
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: LD_INT 4
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 3
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 4
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: LD_INT 4
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 4
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 4
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 5
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 5
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 4
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 3
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: PUSH
31348: LD_INT 2
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 5
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31413: LD_ADDR_VAR 0 32
31417: PUSH
31418: LD_INT 4
31420: NEG
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 4
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 4
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 5
31476: NEG
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 5
31487: NEG
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 5
31499: NEG
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: LD_INT 3
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: LD_INT 4
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: NEG
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 2
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: NEG
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 4
31582: NEG
31583: PUSH
31584: LD_INT 3
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 4
31594: NEG
31595: PUSH
31596: LD_INT 4
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: LD_INT 4
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 4
31618: NEG
31619: PUSH
31620: LD_INT 2
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 4
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 5
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: LD_INT 4
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 3
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: LD_INT 3
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 4
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 5
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: LD_INT 3
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: LD_INT 5
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 4
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 4
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 3
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 4
31825: PUSH
31826: LD_INT 4
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 4
31835: PUSH
31836: LD_INT 3
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 5
31845: PUSH
31846: LD_INT 4
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 5
31855: PUSH
31856: LD_INT 5
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 4
31865: PUSH
31866: LD_INT 5
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 3
31875: PUSH
31876: LD_INT 4
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: LD_INT 3
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 3
31905: PUSH
31906: LD_INT 5
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31960: LD_ADDR_VAR 0 33
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: LD_INT 4
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 4
31979: NEG
31980: PUSH
31981: LD_INT 5
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: NEG
31992: PUSH
31993: LD_INT 4
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: NEG
32004: PUSH
32005: LD_INT 3
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 4
32015: NEG
32016: PUSH
32017: LD_INT 3
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 5
32027: NEG
32028: PUSH
32029: LD_INT 4
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 5
32039: NEG
32040: PUSH
32041: LD_INT 5
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 3
32051: NEG
32052: PUSH
32053: LD_INT 5
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 5
32063: NEG
32064: PUSH
32065: LD_INT 3
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 3
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: LD_INT 4
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: LD_INT 3
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: LD_INT 4
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 4
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 4
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 4
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 5
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 5
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 5
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 4
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 4
32300: PUSH
32301: LD_INT 4
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 4
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 4
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: LD_INT 4
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: LD_INT 5
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 5
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: LD_INT 5
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: NEG
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32498: LD_ADDR_VAR 0 34
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 4
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: LD_INT 5
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 4
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: LD_INT 3
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 3
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: LD_INT 4
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 5
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 3
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: LD_INT 5
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 4
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 4
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 3
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 4
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 4
32700: PUSH
32701: LD_INT 4
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 4
32710: PUSH
32711: LD_INT 3
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 5
32720: PUSH
32721: LD_INT 4
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 5
32730: PUSH
32731: LD_INT 5
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 4
32740: PUSH
32741: LD_INT 5
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 3
32750: PUSH
32751: LD_INT 4
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 3
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 5
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 5
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 4
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: LD_INT 4
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: LD_INT 4
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 4
32883: NEG
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 4
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 4
32928: NEG
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 5
32939: NEG
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 5
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 5
32962: NEG
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 3
32974: NEG
32975: PUSH
32976: LD_INT 2
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
// end ; end ;
33030: GO 33033
33032: POP
// case btype of b_depot , b_warehouse :
33033: LD_VAR 0 1
33037: PUSH
33038: LD_INT 0
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33052
33044: LD_INT 1
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33253
33052: POP
// case nation of nation_american :
33053: LD_VAR 0 5
33057: PUSH
33058: LD_INT 1
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33122
33066: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33067: LD_ADDR_VAR 0 9
33071: PUSH
33072: LD_VAR 0 11
33076: PUSH
33077: LD_VAR 0 12
33081: PUSH
33082: LD_VAR 0 13
33086: PUSH
33087: LD_VAR 0 14
33091: PUSH
33092: LD_VAR 0 15
33096: PUSH
33097: LD_VAR 0 16
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: PUSH
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 1
33117: PLUS
33118: ARRAY
33119: ST_TO_ADDR
33120: GO 33251
33122: LD_INT 2
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33130
33128: GO 33186
33130: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33131: LD_ADDR_VAR 0 9
33135: PUSH
33136: LD_VAR 0 17
33140: PUSH
33141: LD_VAR 0 18
33145: PUSH
33146: LD_VAR 0 19
33150: PUSH
33151: LD_VAR 0 20
33155: PUSH
33156: LD_VAR 0 21
33160: PUSH
33161: LD_VAR 0 22
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: PUSH
33174: LD_VAR 0 4
33178: PUSH
33179: LD_INT 1
33181: PLUS
33182: ARRAY
33183: ST_TO_ADDR
33184: GO 33251
33186: LD_INT 3
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33250
33194: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33195: LD_ADDR_VAR 0 9
33199: PUSH
33200: LD_VAR 0 23
33204: PUSH
33205: LD_VAR 0 24
33209: PUSH
33210: LD_VAR 0 25
33214: PUSH
33215: LD_VAR 0 26
33219: PUSH
33220: LD_VAR 0 27
33224: PUSH
33225: LD_VAR 0 28
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: PUSH
33238: LD_VAR 0 4
33242: PUSH
33243: LD_INT 1
33245: PLUS
33246: ARRAY
33247: ST_TO_ADDR
33248: GO 33251
33250: POP
33251: GO 33806
33253: LD_INT 2
33255: DOUBLE
33256: EQUAL
33257: IFTRUE 33267
33259: LD_INT 3
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33267
33265: GO 33323
33267: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33268: LD_ADDR_VAR 0 9
33272: PUSH
33273: LD_VAR 0 29
33277: PUSH
33278: LD_VAR 0 30
33282: PUSH
33283: LD_VAR 0 31
33287: PUSH
33288: LD_VAR 0 32
33292: PUSH
33293: LD_VAR 0 33
33297: PUSH
33298: LD_VAR 0 34
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: PUSH
33311: LD_VAR 0 4
33315: PUSH
33316: LD_INT 1
33318: PLUS
33319: ARRAY
33320: ST_TO_ADDR
33321: GO 33806
33323: LD_INT 16
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33385
33329: LD_INT 17
33331: DOUBLE
33332: EQUAL
33333: IFTRUE 33385
33335: LD_INT 18
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33385
33341: LD_INT 19
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33385
33347: LD_INT 22
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33385
33353: LD_INT 20
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33385
33359: LD_INT 21
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33385
33365: LD_INT 23
33367: DOUBLE
33368: EQUAL
33369: IFTRUE 33385
33371: LD_INT 24
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33385
33377: LD_INT 25
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33385
33383: GO 33441
33385: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33386: LD_ADDR_VAR 0 9
33390: PUSH
33391: LD_VAR 0 35
33395: PUSH
33396: LD_VAR 0 36
33400: PUSH
33401: LD_VAR 0 37
33405: PUSH
33406: LD_VAR 0 38
33410: PUSH
33411: LD_VAR 0 39
33415: PUSH
33416: LD_VAR 0 40
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: PUSH
33429: LD_VAR 0 4
33433: PUSH
33434: LD_INT 1
33436: PLUS
33437: ARRAY
33438: ST_TO_ADDR
33439: GO 33806
33441: LD_INT 6
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33497
33447: LD_INT 7
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33497
33453: LD_INT 8
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33497
33459: LD_INT 13
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33497
33465: LD_INT 12
33467: DOUBLE
33468: EQUAL
33469: IFTRUE 33497
33471: LD_INT 15
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33497
33477: LD_INT 11
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33497
33483: LD_INT 14
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33497
33489: LD_INT 10
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33497
33495: GO 33553
33497: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33498: LD_ADDR_VAR 0 9
33502: PUSH
33503: LD_VAR 0 41
33507: PUSH
33508: LD_VAR 0 42
33512: PUSH
33513: LD_VAR 0 43
33517: PUSH
33518: LD_VAR 0 44
33522: PUSH
33523: LD_VAR 0 45
33527: PUSH
33528: LD_VAR 0 46
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: PUSH
33541: LD_VAR 0 4
33545: PUSH
33546: LD_INT 1
33548: PLUS
33549: ARRAY
33550: ST_TO_ADDR
33551: GO 33806
33553: LD_INT 36
33555: DOUBLE
33556: EQUAL
33557: IFTRUE 33561
33559: GO 33617
33561: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33562: LD_ADDR_VAR 0 9
33566: PUSH
33567: LD_VAR 0 47
33571: PUSH
33572: LD_VAR 0 48
33576: PUSH
33577: LD_VAR 0 49
33581: PUSH
33582: LD_VAR 0 50
33586: PUSH
33587: LD_VAR 0 51
33591: PUSH
33592: LD_VAR 0 52
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: PUSH
33605: LD_VAR 0 4
33609: PUSH
33610: LD_INT 1
33612: PLUS
33613: ARRAY
33614: ST_TO_ADDR
33615: GO 33806
33617: LD_INT 4
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33643
33623: LD_INT 5
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33643
33629: LD_INT 34
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33643
33635: LD_INT 37
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33699
33643: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33644: LD_ADDR_VAR 0 9
33648: PUSH
33649: LD_VAR 0 53
33653: PUSH
33654: LD_VAR 0 54
33658: PUSH
33659: LD_VAR 0 55
33663: PUSH
33664: LD_VAR 0 56
33668: PUSH
33669: LD_VAR 0 57
33673: PUSH
33674: LD_VAR 0 58
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: PUSH
33687: LD_VAR 0 4
33691: PUSH
33692: LD_INT 1
33694: PLUS
33695: ARRAY
33696: ST_TO_ADDR
33697: GO 33806
33699: LD_INT 31
33701: DOUBLE
33702: EQUAL
33703: IFTRUE 33749
33705: LD_INT 32
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33749
33711: LD_INT 33
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33749
33717: LD_INT 27
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33749
33723: LD_INT 26
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33749
33729: LD_INT 28
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33749
33735: LD_INT 29
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33749
33741: LD_INT 30
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33749
33747: GO 33805
33749: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33750: LD_ADDR_VAR 0 9
33754: PUSH
33755: LD_VAR 0 59
33759: PUSH
33760: LD_VAR 0 60
33764: PUSH
33765: LD_VAR 0 61
33769: PUSH
33770: LD_VAR 0 62
33774: PUSH
33775: LD_VAR 0 63
33779: PUSH
33780: LD_VAR 0 64
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: PUSH
33793: LD_VAR 0 4
33797: PUSH
33798: LD_INT 1
33800: PLUS
33801: ARRAY
33802: ST_TO_ADDR
33803: GO 33806
33805: POP
// temp_list2 = [ ] ;
33806: LD_ADDR_VAR 0 10
33810: PUSH
33811: EMPTY
33812: ST_TO_ADDR
// for i in temp_list do
33813: LD_ADDR_VAR 0 8
33817: PUSH
33818: LD_VAR 0 9
33822: PUSH
33823: FOR_IN
33824: IFFALSE 33876
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33826: LD_ADDR_VAR 0 10
33830: PUSH
33831: LD_VAR 0 10
33835: PUSH
33836: LD_VAR 0 8
33840: PUSH
33841: LD_INT 1
33843: ARRAY
33844: PUSH
33845: LD_VAR 0 2
33849: PLUS
33850: PUSH
33851: LD_VAR 0 8
33855: PUSH
33856: LD_INT 2
33858: ARRAY
33859: PUSH
33860: LD_VAR 0 3
33864: PLUS
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: EMPTY
33871: LIST
33872: ADD
33873: ST_TO_ADDR
33874: GO 33823
33876: POP
33877: POP
// result = temp_list2 ;
33878: LD_ADDR_VAR 0 7
33882: PUSH
33883: LD_VAR 0 10
33887: ST_TO_ADDR
// end ;
33888: LD_VAR 0 7
33892: RET
// export function EnemyInRange ( unit , dist ) ; begin
33893: LD_INT 0
33895: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33896: LD_ADDR_VAR 0 3
33900: PUSH
33901: LD_VAR 0 1
33905: PPUSH
33906: CALL_OW 255
33910: PPUSH
33911: LD_VAR 0 1
33915: PPUSH
33916: CALL_OW 250
33920: PPUSH
33921: LD_VAR 0 1
33925: PPUSH
33926: CALL_OW 251
33930: PPUSH
33931: LD_VAR 0 2
33935: PPUSH
33936: CALL 7266 0 4
33940: PUSH
33941: LD_INT 4
33943: ARRAY
33944: ST_TO_ADDR
// end ;
33945: LD_VAR 0 3
33949: RET
// export function PlayerSeeMe ( unit ) ; begin
33950: LD_INT 0
33952: PPUSH
// result := See ( your_side , unit ) ;
33953: LD_ADDR_VAR 0 2
33957: PUSH
33958: LD_OWVAR 2
33962: PPUSH
33963: LD_VAR 0 1
33967: PPUSH
33968: CALL_OW 292
33972: ST_TO_ADDR
// end ;
33973: LD_VAR 0 2
33977: RET
// export function ReverseDir ( unit ) ; begin
33978: LD_INT 0
33980: PPUSH
// if not unit then
33981: LD_VAR 0 1
33985: NOT
33986: IFFALSE 33990
// exit ;
33988: GO 34013
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33990: LD_ADDR_VAR 0 2
33994: PUSH
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 254
34004: PUSH
34005: LD_INT 3
34007: PLUS
34008: PUSH
34009: LD_INT 6
34011: MOD
34012: ST_TO_ADDR
// end ;
34013: LD_VAR 0 2
34017: RET
// export function ReverseArray ( array ) ; var i ; begin
34018: LD_INT 0
34020: PPUSH
34021: PPUSH
// if not array then
34022: LD_VAR 0 1
34026: NOT
34027: IFFALSE 34031
// exit ;
34029: GO 34086
// result := [ ] ;
34031: LD_ADDR_VAR 0 2
34035: PUSH
34036: EMPTY
34037: ST_TO_ADDR
// for i := array downto 1 do
34038: LD_ADDR_VAR 0 3
34042: PUSH
34043: DOUBLE
34044: LD_VAR 0 1
34048: INC
34049: ST_TO_ADDR
34050: LD_INT 1
34052: PUSH
34053: FOR_DOWNTO
34054: IFFALSE 34084
// result := Join ( result , array [ i ] ) ;
34056: LD_ADDR_VAR 0 2
34060: PUSH
34061: LD_VAR 0 2
34065: PPUSH
34066: LD_VAR 0 1
34070: PUSH
34071: LD_VAR 0 3
34075: ARRAY
34076: PPUSH
34077: CALL 38729 0 2
34081: ST_TO_ADDR
34082: GO 34053
34084: POP
34085: POP
// end ;
34086: LD_VAR 0 2
34090: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34091: LD_INT 0
34093: PPUSH
34094: PPUSH
34095: PPUSH
34096: PPUSH
34097: PPUSH
34098: PPUSH
// if not unit or not hexes then
34099: LD_VAR 0 1
34103: NOT
34104: PUSH
34105: LD_VAR 0 2
34109: NOT
34110: OR
34111: IFFALSE 34115
// exit ;
34113: GO 34238
// dist := 9999 ;
34115: LD_ADDR_VAR 0 5
34119: PUSH
34120: LD_INT 9999
34122: ST_TO_ADDR
// for i = 1 to hexes do
34123: LD_ADDR_VAR 0 4
34127: PUSH
34128: DOUBLE
34129: LD_INT 1
34131: DEC
34132: ST_TO_ADDR
34133: LD_VAR 0 2
34137: PUSH
34138: FOR_TO
34139: IFFALSE 34226
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34141: LD_ADDR_VAR 0 6
34145: PUSH
34146: LD_VAR 0 1
34150: PPUSH
34151: LD_VAR 0 2
34155: PUSH
34156: LD_VAR 0 4
34160: ARRAY
34161: PUSH
34162: LD_INT 1
34164: ARRAY
34165: PPUSH
34166: LD_VAR 0 2
34170: PUSH
34171: LD_VAR 0 4
34175: ARRAY
34176: PUSH
34177: LD_INT 2
34179: ARRAY
34180: PPUSH
34181: CALL_OW 297
34185: ST_TO_ADDR
// if tdist < dist then
34186: LD_VAR 0 6
34190: PUSH
34191: LD_VAR 0 5
34195: LESS
34196: IFFALSE 34224
// begin hex := hexes [ i ] ;
34198: LD_ADDR_VAR 0 8
34202: PUSH
34203: LD_VAR 0 2
34207: PUSH
34208: LD_VAR 0 4
34212: ARRAY
34213: ST_TO_ADDR
// dist := tdist ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_VAR 0 6
34223: ST_TO_ADDR
// end ; end ;
34224: GO 34138
34226: POP
34227: POP
// result := hex ;
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_VAR 0 8
34237: ST_TO_ADDR
// end ;
34238: LD_VAR 0 3
34242: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34243: LD_INT 0
34245: PPUSH
34246: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34247: LD_VAR 0 1
34251: NOT
34252: PUSH
34253: LD_VAR 0 1
34257: PUSH
34258: LD_INT 21
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 23
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PPUSH
34282: CALL_OW 69
34286: IN
34287: NOT
34288: OR
34289: IFFALSE 34293
// exit ;
34291: GO 34340
// for i = 1 to 3 do
34293: LD_ADDR_VAR 0 3
34297: PUSH
34298: DOUBLE
34299: LD_INT 1
34301: DEC
34302: ST_TO_ADDR
34303: LD_INT 3
34305: PUSH
34306: FOR_TO
34307: IFFALSE 34338
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL_OW 250
34318: PPUSH
34319: LD_VAR 0 1
34323: PPUSH
34324: CALL_OW 251
34328: PPUSH
34329: LD_INT 1
34331: PPUSH
34332: CALL_OW 453
34336: GO 34306
34338: POP
34339: POP
// end ;
34340: LD_VAR 0 2
34344: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34345: LD_INT 0
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34353: LD_VAR 0 1
34357: NOT
34358: PUSH
34359: LD_VAR 0 2
34363: NOT
34364: OR
34365: PUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: CALL_OW 314
34375: OR
34376: IFFALSE 34380
// exit ;
34378: GO 34847
// if GetLives ( i ) < 250 then
34380: LD_VAR 0 4
34384: PPUSH
34385: CALL_OW 256
34389: PUSH
34390: LD_INT 250
34392: LESS
34393: IFFALSE 34406
// begin ComAutodestruct ( i ) ;
34395: LD_VAR 0 4
34399: PPUSH
34400: CALL 34243 0 1
// exit ;
34404: GO 34847
// end ; x := GetX ( enemy_unit ) ;
34406: LD_ADDR_VAR 0 7
34410: PUSH
34411: LD_VAR 0 2
34415: PPUSH
34416: CALL_OW 250
34420: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34421: LD_ADDR_VAR 0 8
34425: PUSH
34426: LD_VAR 0 2
34430: PPUSH
34431: CALL_OW 251
34435: ST_TO_ADDR
// if not x or not y then
34436: LD_VAR 0 7
34440: NOT
34441: PUSH
34442: LD_VAR 0 8
34446: NOT
34447: OR
34448: IFFALSE 34452
// exit ;
34450: GO 34847
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34452: LD_ADDR_VAR 0 6
34456: PUSH
34457: LD_VAR 0 7
34461: PPUSH
34462: LD_INT 0
34464: PPUSH
34465: LD_INT 4
34467: PPUSH
34468: CALL_OW 272
34472: PUSH
34473: LD_VAR 0 8
34477: PPUSH
34478: LD_INT 0
34480: PPUSH
34481: LD_INT 4
34483: PPUSH
34484: CALL_OW 273
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_VAR 0 7
34497: PPUSH
34498: LD_INT 1
34500: PPUSH
34501: LD_INT 4
34503: PPUSH
34504: CALL_OW 272
34508: PUSH
34509: LD_VAR 0 8
34513: PPUSH
34514: LD_INT 1
34516: PPUSH
34517: LD_INT 4
34519: PPUSH
34520: CALL_OW 273
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_VAR 0 7
34533: PPUSH
34534: LD_INT 2
34536: PPUSH
34537: LD_INT 4
34539: PPUSH
34540: CALL_OW 272
34544: PUSH
34545: LD_VAR 0 8
34549: PPUSH
34550: LD_INT 2
34552: PPUSH
34553: LD_INT 4
34555: PPUSH
34556: CALL_OW 273
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_VAR 0 7
34569: PPUSH
34570: LD_INT 3
34572: PPUSH
34573: LD_INT 4
34575: PPUSH
34576: CALL_OW 272
34580: PUSH
34581: LD_VAR 0 8
34585: PPUSH
34586: LD_INT 3
34588: PPUSH
34589: LD_INT 4
34591: PPUSH
34592: CALL_OW 273
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_VAR 0 7
34605: PPUSH
34606: LD_INT 4
34608: PPUSH
34609: LD_INT 4
34611: PPUSH
34612: CALL_OW 272
34616: PUSH
34617: LD_VAR 0 8
34621: PPUSH
34622: LD_INT 4
34624: PPUSH
34625: LD_INT 4
34627: PPUSH
34628: CALL_OW 273
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_VAR 0 7
34641: PPUSH
34642: LD_INT 5
34644: PPUSH
34645: LD_INT 4
34647: PPUSH
34648: CALL_OW 272
34652: PUSH
34653: LD_VAR 0 8
34657: PPUSH
34658: LD_INT 5
34660: PPUSH
34661: LD_INT 4
34663: PPUSH
34664: CALL_OW 273
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
// for i = tmp downto 1 do
34681: LD_ADDR_VAR 0 4
34685: PUSH
34686: DOUBLE
34687: LD_VAR 0 6
34691: INC
34692: ST_TO_ADDR
34693: LD_INT 1
34695: PUSH
34696: FOR_DOWNTO
34697: IFFALSE 34798
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34699: LD_VAR 0 6
34703: PUSH
34704: LD_VAR 0 4
34708: ARRAY
34709: PUSH
34710: LD_INT 1
34712: ARRAY
34713: PPUSH
34714: LD_VAR 0 6
34718: PUSH
34719: LD_VAR 0 4
34723: ARRAY
34724: PUSH
34725: LD_INT 2
34727: ARRAY
34728: PPUSH
34729: CALL_OW 488
34733: NOT
34734: PUSH
34735: LD_VAR 0 6
34739: PUSH
34740: LD_VAR 0 4
34744: ARRAY
34745: PUSH
34746: LD_INT 1
34748: ARRAY
34749: PPUSH
34750: LD_VAR 0 6
34754: PUSH
34755: LD_VAR 0 4
34759: ARRAY
34760: PUSH
34761: LD_INT 2
34763: ARRAY
34764: PPUSH
34765: CALL_OW 428
34769: PUSH
34770: LD_INT 0
34772: NONEQUAL
34773: OR
34774: IFFALSE 34796
// tmp := Delete ( tmp , i ) ;
34776: LD_ADDR_VAR 0 6
34780: PUSH
34781: LD_VAR 0 6
34785: PPUSH
34786: LD_VAR 0 4
34790: PPUSH
34791: CALL_OW 3
34795: ST_TO_ADDR
34796: GO 34696
34798: POP
34799: POP
// j := GetClosestHex ( unit , tmp ) ;
34800: LD_ADDR_VAR 0 5
34804: PUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: LD_VAR 0 6
34814: PPUSH
34815: CALL 34091 0 2
34819: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34820: LD_VAR 0 1
34824: PPUSH
34825: LD_VAR 0 5
34829: PUSH
34830: LD_INT 1
34832: ARRAY
34833: PPUSH
34834: LD_VAR 0 5
34838: PUSH
34839: LD_INT 2
34841: ARRAY
34842: PPUSH
34843: CALL_OW 111
// end ;
34847: LD_VAR 0 3
34851: RET
// export function PrepareApemanSoldier ( ) ; begin
34852: LD_INT 0
34854: PPUSH
// uc_nation := 0 ;
34855: LD_ADDR_OWVAR 21
34859: PUSH
34860: LD_INT 0
34862: ST_TO_ADDR
// hc_sex := sex_male ;
34863: LD_ADDR_OWVAR 27
34867: PUSH
34868: LD_INT 1
34870: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34871: LD_ADDR_OWVAR 28
34875: PUSH
34876: LD_INT 15
34878: ST_TO_ADDR
// hc_gallery :=  ;
34879: LD_ADDR_OWVAR 33
34883: PUSH
34884: LD_STRING 
34886: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34887: LD_ADDR_OWVAR 31
34891: PUSH
34892: LD_INT 0
34894: PPUSH
34895: LD_INT 3
34897: PPUSH
34898: CALL_OW 12
34902: PUSH
34903: LD_INT 0
34905: PPUSH
34906: LD_INT 3
34908: PPUSH
34909: CALL_OW 12
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// end ;
34926: LD_VAR 0 1
34930: RET
// export function PrepareApemanEngineer ( ) ; begin
34931: LD_INT 0
34933: PPUSH
// uc_nation := 0 ;
34934: LD_ADDR_OWVAR 21
34938: PUSH
34939: LD_INT 0
34941: ST_TO_ADDR
// hc_sex := sex_male ;
34942: LD_ADDR_OWVAR 27
34946: PUSH
34947: LD_INT 1
34949: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34950: LD_ADDR_OWVAR 28
34954: PUSH
34955: LD_INT 16
34957: ST_TO_ADDR
// hc_gallery :=  ;
34958: LD_ADDR_OWVAR 33
34962: PUSH
34963: LD_STRING 
34965: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34966: LD_ADDR_OWVAR 31
34970: PUSH
34971: LD_INT 0
34973: PPUSH
34974: LD_INT 3
34976: PPUSH
34977: CALL_OW 12
34981: PUSH
34982: LD_INT 0
34984: PPUSH
34985: LD_INT 3
34987: PPUSH
34988: CALL_OW 12
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: ST_TO_ADDR
// end ;
35005: LD_VAR 0 1
35009: RET
// export function PrepareApeman ( agressivity ) ; begin
35010: LD_INT 0
35012: PPUSH
// uc_side := 0 ;
35013: LD_ADDR_OWVAR 20
35017: PUSH
35018: LD_INT 0
35020: ST_TO_ADDR
// uc_nation := 0 ;
35021: LD_ADDR_OWVAR 21
35025: PUSH
35026: LD_INT 0
35028: ST_TO_ADDR
// hc_sex := sex_male ;
35029: LD_ADDR_OWVAR 27
35033: PUSH
35034: LD_INT 1
35036: ST_TO_ADDR
// hc_class := class_apeman ;
35037: LD_ADDR_OWVAR 28
35041: PUSH
35042: LD_INT 12
35044: ST_TO_ADDR
// hc_gallery :=  ;
35045: LD_ADDR_OWVAR 33
35049: PUSH
35050: LD_STRING 
35052: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35053: LD_ADDR_OWVAR 35
35057: PUSH
35058: LD_VAR 0 1
35062: NEG
35063: PPUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL_OW 12
35073: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35074: LD_ADDR_OWVAR 31
35078: PUSH
35079: LD_INT 0
35081: PPUSH
35082: LD_INT 3
35084: PPUSH
35085: CALL_OW 12
35089: PUSH
35090: LD_INT 0
35092: PPUSH
35093: LD_INT 3
35095: PPUSH
35096: CALL_OW 12
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
// end ;
35113: LD_VAR 0 2
35117: RET
// export function PrepareTiger ( agressivity ) ; begin
35118: LD_INT 0
35120: PPUSH
// uc_side := 0 ;
35121: LD_ADDR_OWVAR 20
35125: PUSH
35126: LD_INT 0
35128: ST_TO_ADDR
// uc_nation := 0 ;
35129: LD_ADDR_OWVAR 21
35133: PUSH
35134: LD_INT 0
35136: ST_TO_ADDR
// hc_class := class_tiger ;
35137: LD_ADDR_OWVAR 28
35141: PUSH
35142: LD_INT 14
35144: ST_TO_ADDR
// hc_gallery :=  ;
35145: LD_ADDR_OWVAR 33
35149: PUSH
35150: LD_STRING 
35152: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35153: LD_ADDR_OWVAR 35
35157: PUSH
35158: LD_VAR 0 1
35162: NEG
35163: PPUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 12
35173: ST_TO_ADDR
// end ;
35174: LD_VAR 0 2
35178: RET
// export function PrepareEnchidna ( ) ; begin
35179: LD_INT 0
35181: PPUSH
// uc_side := 0 ;
35182: LD_ADDR_OWVAR 20
35186: PUSH
35187: LD_INT 0
35189: ST_TO_ADDR
// uc_nation := 0 ;
35190: LD_ADDR_OWVAR 21
35194: PUSH
35195: LD_INT 0
35197: ST_TO_ADDR
// hc_class := class_baggie ;
35198: LD_ADDR_OWVAR 28
35202: PUSH
35203: LD_INT 13
35205: ST_TO_ADDR
// hc_gallery :=  ;
35206: LD_ADDR_OWVAR 33
35210: PUSH
35211: LD_STRING 
35213: ST_TO_ADDR
// end ;
35214: LD_VAR 0 1
35218: RET
// export function PrepareFrog ( ) ; begin
35219: LD_INT 0
35221: PPUSH
// uc_side := 0 ;
35222: LD_ADDR_OWVAR 20
35226: PUSH
35227: LD_INT 0
35229: ST_TO_ADDR
// uc_nation := 0 ;
35230: LD_ADDR_OWVAR 21
35234: PUSH
35235: LD_INT 0
35237: ST_TO_ADDR
// hc_class := class_frog ;
35238: LD_ADDR_OWVAR 28
35242: PUSH
35243: LD_INT 19
35245: ST_TO_ADDR
// hc_gallery :=  ;
35246: LD_ADDR_OWVAR 33
35250: PUSH
35251: LD_STRING 
35253: ST_TO_ADDR
// end ;
35254: LD_VAR 0 1
35258: RET
// export function PrepareFish ( ) ; begin
35259: LD_INT 0
35261: PPUSH
// uc_side := 0 ;
35262: LD_ADDR_OWVAR 20
35266: PUSH
35267: LD_INT 0
35269: ST_TO_ADDR
// uc_nation := 0 ;
35270: LD_ADDR_OWVAR 21
35274: PUSH
35275: LD_INT 0
35277: ST_TO_ADDR
// hc_class := class_fish ;
35278: LD_ADDR_OWVAR 28
35282: PUSH
35283: LD_INT 20
35285: ST_TO_ADDR
// hc_gallery :=  ;
35286: LD_ADDR_OWVAR 33
35290: PUSH
35291: LD_STRING 
35293: ST_TO_ADDR
// end ;
35294: LD_VAR 0 1
35298: RET
// export function PrepareBird ( ) ; begin
35299: LD_INT 0
35301: PPUSH
// uc_side := 0 ;
35302: LD_ADDR_OWVAR 20
35306: PUSH
35307: LD_INT 0
35309: ST_TO_ADDR
// uc_nation := 0 ;
35310: LD_ADDR_OWVAR 21
35314: PUSH
35315: LD_INT 0
35317: ST_TO_ADDR
// hc_class := class_phororhacos ;
35318: LD_ADDR_OWVAR 28
35322: PUSH
35323: LD_INT 18
35325: ST_TO_ADDR
// hc_gallery :=  ;
35326: LD_ADDR_OWVAR 33
35330: PUSH
35331: LD_STRING 
35333: ST_TO_ADDR
// end ;
35334: LD_VAR 0 1
35338: RET
// export function PrepareHorse ( ) ; begin
35339: LD_INT 0
35341: PPUSH
// uc_side := 0 ;
35342: LD_ADDR_OWVAR 20
35346: PUSH
35347: LD_INT 0
35349: ST_TO_ADDR
// uc_nation := 0 ;
35350: LD_ADDR_OWVAR 21
35354: PUSH
35355: LD_INT 0
35357: ST_TO_ADDR
// hc_class := class_horse ;
35358: LD_ADDR_OWVAR 28
35362: PUSH
35363: LD_INT 21
35365: ST_TO_ADDR
// hc_gallery :=  ;
35366: LD_ADDR_OWVAR 33
35370: PUSH
35371: LD_STRING 
35373: ST_TO_ADDR
// end ;
35374: LD_VAR 0 1
35378: RET
// export function PrepareMastodont ( ) ; begin
35379: LD_INT 0
35381: PPUSH
// uc_side := 0 ;
35382: LD_ADDR_OWVAR 20
35386: PUSH
35387: LD_INT 0
35389: ST_TO_ADDR
// uc_nation := 0 ;
35390: LD_ADDR_OWVAR 21
35394: PUSH
35395: LD_INT 0
35397: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35398: LD_ADDR_OWVAR 37
35402: PUSH
35403: LD_INT 31
35405: ST_TO_ADDR
// vc_control := control_rider ;
35406: LD_ADDR_OWVAR 38
35410: PUSH
35411: LD_INT 4
35413: ST_TO_ADDR
// end ;
35414: LD_VAR 0 1
35418: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35419: LD_INT 0
35421: PPUSH
35422: PPUSH
35423: PPUSH
// uc_side = 0 ;
35424: LD_ADDR_OWVAR 20
35428: PUSH
35429: LD_INT 0
35431: ST_TO_ADDR
// uc_nation = 0 ;
35432: LD_ADDR_OWVAR 21
35436: PUSH
35437: LD_INT 0
35439: ST_TO_ADDR
// InitHc_All ( ) ;
35440: CALL_OW 584
// InitVc ;
35444: CALL_OW 20
// if mastodonts then
35448: LD_VAR 0 6
35452: IFFALSE 35519
// for i = 1 to mastodonts do
35454: LD_ADDR_VAR 0 11
35458: PUSH
35459: DOUBLE
35460: LD_INT 1
35462: DEC
35463: ST_TO_ADDR
35464: LD_VAR 0 6
35468: PUSH
35469: FOR_TO
35470: IFFALSE 35517
// begin vc_chassis := 31 ;
35472: LD_ADDR_OWVAR 37
35476: PUSH
35477: LD_INT 31
35479: ST_TO_ADDR
// vc_control := control_rider ;
35480: LD_ADDR_OWVAR 38
35484: PUSH
35485: LD_INT 4
35487: ST_TO_ADDR
// animal := CreateVehicle ;
35488: LD_ADDR_VAR 0 12
35492: PUSH
35493: CALL_OW 45
35497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35498: LD_VAR 0 12
35502: PPUSH
35503: LD_VAR 0 8
35507: PPUSH
35508: LD_INT 0
35510: PPUSH
35511: CALL 37647 0 3
// end ;
35515: GO 35469
35517: POP
35518: POP
// if horses then
35519: LD_VAR 0 5
35523: IFFALSE 35590
// for i = 1 to horses do
35525: LD_ADDR_VAR 0 11
35529: PUSH
35530: DOUBLE
35531: LD_INT 1
35533: DEC
35534: ST_TO_ADDR
35535: LD_VAR 0 5
35539: PUSH
35540: FOR_TO
35541: IFFALSE 35588
// begin hc_class := 21 ;
35543: LD_ADDR_OWVAR 28
35547: PUSH
35548: LD_INT 21
35550: ST_TO_ADDR
// hc_gallery :=  ;
35551: LD_ADDR_OWVAR 33
35555: PUSH
35556: LD_STRING 
35558: ST_TO_ADDR
// animal := CreateHuman ;
35559: LD_ADDR_VAR 0 12
35563: PUSH
35564: CALL_OW 44
35568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35569: LD_VAR 0 12
35573: PPUSH
35574: LD_VAR 0 8
35578: PPUSH
35579: LD_INT 0
35581: PPUSH
35582: CALL 37647 0 3
// end ;
35586: GO 35540
35588: POP
35589: POP
// if birds then
35590: LD_VAR 0 1
35594: IFFALSE 35661
// for i = 1 to birds do
35596: LD_ADDR_VAR 0 11
35600: PUSH
35601: DOUBLE
35602: LD_INT 1
35604: DEC
35605: ST_TO_ADDR
35606: LD_VAR 0 1
35610: PUSH
35611: FOR_TO
35612: IFFALSE 35659
// begin hc_class := 18 ;
35614: LD_ADDR_OWVAR 28
35618: PUSH
35619: LD_INT 18
35621: ST_TO_ADDR
// hc_gallery =  ;
35622: LD_ADDR_OWVAR 33
35626: PUSH
35627: LD_STRING 
35629: ST_TO_ADDR
// animal := CreateHuman ;
35630: LD_ADDR_VAR 0 12
35634: PUSH
35635: CALL_OW 44
35639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35640: LD_VAR 0 12
35644: PPUSH
35645: LD_VAR 0 8
35649: PPUSH
35650: LD_INT 0
35652: PPUSH
35653: CALL 37647 0 3
// end ;
35657: GO 35611
35659: POP
35660: POP
// if tigers then
35661: LD_VAR 0 2
35665: IFFALSE 35749
// for i = 1 to tigers do
35667: LD_ADDR_VAR 0 11
35671: PUSH
35672: DOUBLE
35673: LD_INT 1
35675: DEC
35676: ST_TO_ADDR
35677: LD_VAR 0 2
35681: PUSH
35682: FOR_TO
35683: IFFALSE 35747
// begin hc_class = class_tiger ;
35685: LD_ADDR_OWVAR 28
35689: PUSH
35690: LD_INT 14
35692: ST_TO_ADDR
// hc_gallery =  ;
35693: LD_ADDR_OWVAR 33
35697: PUSH
35698: LD_STRING 
35700: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35701: LD_ADDR_OWVAR 35
35705: PUSH
35706: LD_INT 7
35708: NEG
35709: PPUSH
35710: LD_INT 7
35712: PPUSH
35713: CALL_OW 12
35717: ST_TO_ADDR
// animal := CreateHuman ;
35718: LD_ADDR_VAR 0 12
35722: PUSH
35723: CALL_OW 44
35727: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35728: LD_VAR 0 12
35732: PPUSH
35733: LD_VAR 0 8
35737: PPUSH
35738: LD_INT 0
35740: PPUSH
35741: CALL 37647 0 3
// end ;
35745: GO 35682
35747: POP
35748: POP
// if apemans then
35749: LD_VAR 0 3
35753: IFFALSE 35876
// for i = 1 to apemans do
35755: LD_ADDR_VAR 0 11
35759: PUSH
35760: DOUBLE
35761: LD_INT 1
35763: DEC
35764: ST_TO_ADDR
35765: LD_VAR 0 3
35769: PUSH
35770: FOR_TO
35771: IFFALSE 35874
// begin hc_class = class_apeman ;
35773: LD_ADDR_OWVAR 28
35777: PUSH
35778: LD_INT 12
35780: ST_TO_ADDR
// hc_gallery =  ;
35781: LD_ADDR_OWVAR 33
35785: PUSH
35786: LD_STRING 
35788: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35789: LD_ADDR_OWVAR 35
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PPUSH
35798: LD_INT 2
35800: PPUSH
35801: CALL_OW 12
35805: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35806: LD_ADDR_OWVAR 31
35810: PUSH
35811: LD_INT 1
35813: PPUSH
35814: LD_INT 3
35816: PPUSH
35817: CALL_OW 12
35821: PUSH
35822: LD_INT 1
35824: PPUSH
35825: LD_INT 3
35827: PPUSH
35828: CALL_OW 12
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: ST_TO_ADDR
// animal := CreateHuman ;
35845: LD_ADDR_VAR 0 12
35849: PUSH
35850: CALL_OW 44
35854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35855: LD_VAR 0 12
35859: PPUSH
35860: LD_VAR 0 8
35864: PPUSH
35865: LD_INT 0
35867: PPUSH
35868: CALL 37647 0 3
// end ;
35872: GO 35770
35874: POP
35875: POP
// if enchidnas then
35876: LD_VAR 0 4
35880: IFFALSE 35947
// for i = 1 to enchidnas do
35882: LD_ADDR_VAR 0 11
35886: PUSH
35887: DOUBLE
35888: LD_INT 1
35890: DEC
35891: ST_TO_ADDR
35892: LD_VAR 0 4
35896: PUSH
35897: FOR_TO
35898: IFFALSE 35945
// begin hc_class = 13 ;
35900: LD_ADDR_OWVAR 28
35904: PUSH
35905: LD_INT 13
35907: ST_TO_ADDR
// hc_gallery =  ;
35908: LD_ADDR_OWVAR 33
35912: PUSH
35913: LD_STRING 
35915: ST_TO_ADDR
// animal := CreateHuman ;
35916: LD_ADDR_VAR 0 12
35920: PUSH
35921: CALL_OW 44
35925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35926: LD_VAR 0 12
35930: PPUSH
35931: LD_VAR 0 8
35935: PPUSH
35936: LD_INT 0
35938: PPUSH
35939: CALL 37647 0 3
// end ;
35943: GO 35897
35945: POP
35946: POP
// if fishes then
35947: LD_VAR 0 7
35951: IFFALSE 36018
// for i = 1 to fishes do
35953: LD_ADDR_VAR 0 11
35957: PUSH
35958: DOUBLE
35959: LD_INT 1
35961: DEC
35962: ST_TO_ADDR
35963: LD_VAR 0 7
35967: PUSH
35968: FOR_TO
35969: IFFALSE 36016
// begin hc_class = 20 ;
35971: LD_ADDR_OWVAR 28
35975: PUSH
35976: LD_INT 20
35978: ST_TO_ADDR
// hc_gallery =  ;
35979: LD_ADDR_OWVAR 33
35983: PUSH
35984: LD_STRING 
35986: ST_TO_ADDR
// animal := CreateHuman ;
35987: LD_ADDR_VAR 0 12
35991: PUSH
35992: CALL_OW 44
35996: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35997: LD_VAR 0 12
36001: PPUSH
36002: LD_VAR 0 9
36006: PPUSH
36007: LD_INT 0
36009: PPUSH
36010: CALL 37647 0 3
// end ;
36014: GO 35968
36016: POP
36017: POP
// end ;
36018: LD_VAR 0 10
36022: RET
// export function WantHeal ( sci , unit ) ; begin
36023: LD_INT 0
36025: PPUSH
// if GetTaskList ( sci ) > 0 then
36026: LD_VAR 0 1
36030: PPUSH
36031: CALL_OW 437
36035: PUSH
36036: LD_INT 0
36038: GREATER
36039: IFFALSE 36109
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36041: LD_VAR 0 1
36045: PPUSH
36046: CALL_OW 437
36050: PUSH
36051: LD_INT 1
36053: ARRAY
36054: PUSH
36055: LD_INT 1
36057: ARRAY
36058: PUSH
36059: LD_STRING l
36061: EQUAL
36062: PUSH
36063: LD_VAR 0 1
36067: PPUSH
36068: CALL_OW 437
36072: PUSH
36073: LD_INT 1
36075: ARRAY
36076: PUSH
36077: LD_INT 4
36079: ARRAY
36080: PUSH
36081: LD_VAR 0 2
36085: EQUAL
36086: AND
36087: IFFALSE 36099
// result := true else
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: LD_INT 1
36096: ST_TO_ADDR
36097: GO 36107
// result := false ;
36099: LD_ADDR_VAR 0 3
36103: PUSH
36104: LD_INT 0
36106: ST_TO_ADDR
// end else
36107: GO 36117
// result := false ;
36109: LD_ADDR_VAR 0 3
36113: PUSH
36114: LD_INT 0
36116: ST_TO_ADDR
// end ;
36117: LD_VAR 0 3
36121: RET
// export function HealTarget ( sci ) ; begin
36122: LD_INT 0
36124: PPUSH
// if not sci then
36125: LD_VAR 0 1
36129: NOT
36130: IFFALSE 36134
// exit ;
36132: GO 36199
// result := 0 ;
36134: LD_ADDR_VAR 0 2
36138: PUSH
36139: LD_INT 0
36141: ST_TO_ADDR
// if GetTaskList ( sci ) then
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 437
36151: IFFALSE 36199
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 437
36162: PUSH
36163: LD_INT 1
36165: ARRAY
36166: PUSH
36167: LD_INT 1
36169: ARRAY
36170: PUSH
36171: LD_STRING l
36173: EQUAL
36174: IFFALSE 36199
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36176: LD_ADDR_VAR 0 2
36180: PUSH
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL_OW 437
36190: PUSH
36191: LD_INT 1
36193: ARRAY
36194: PUSH
36195: LD_INT 4
36197: ARRAY
36198: ST_TO_ADDR
// end ;
36199: LD_VAR 0 2
36203: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36204: LD_INT 0
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
// if not base_units then
36210: LD_VAR 0 1
36214: NOT
36215: IFFALSE 36219
// exit ;
36217: GO 36306
// result := false ;
36219: LD_ADDR_VAR 0 2
36223: PUSH
36224: LD_INT 0
36226: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36227: LD_ADDR_VAR 0 5
36231: PUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: LD_INT 21
36239: PUSH
36240: LD_INT 3
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PPUSH
36247: CALL_OW 72
36251: ST_TO_ADDR
// if not tmp then
36252: LD_VAR 0 5
36256: NOT
36257: IFFALSE 36261
// exit ;
36259: GO 36306
// for i in tmp do
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_VAR 0 5
36270: PUSH
36271: FOR_IN
36272: IFFALSE 36304
// begin result := EnemyInRange ( i , 22 ) ;
36274: LD_ADDR_VAR 0 2
36278: PUSH
36279: LD_VAR 0 3
36283: PPUSH
36284: LD_INT 22
36286: PPUSH
36287: CALL 33893 0 2
36291: ST_TO_ADDR
// if result then
36292: LD_VAR 0 2
36296: IFFALSE 36302
// exit ;
36298: POP
36299: POP
36300: GO 36306
// end ;
36302: GO 36271
36304: POP
36305: POP
// end ;
36306: LD_VAR 0 2
36310: RET
// export function FilterByTag ( units , tag ) ; begin
36311: LD_INT 0
36313: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36314: LD_ADDR_VAR 0 3
36318: PUSH
36319: LD_VAR 0 1
36323: PPUSH
36324: LD_INT 120
36326: PUSH
36327: LD_VAR 0 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PPUSH
36336: CALL_OW 72
36340: ST_TO_ADDR
// end ;
36341: LD_VAR 0 3
36345: RET
// export function IsDriver ( un ) ; begin
36346: LD_INT 0
36348: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36349: LD_ADDR_VAR 0 2
36353: PUSH
36354: LD_VAR 0 1
36358: PUSH
36359: LD_INT 55
36361: PUSH
36362: EMPTY
36363: LIST
36364: PPUSH
36365: CALL_OW 69
36369: IN
36370: ST_TO_ADDR
// end ;
36371: LD_VAR 0 2
36375: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36376: LD_INT 0
36378: PPUSH
36379: PPUSH
// list := [ ] ;
36380: LD_ADDR_VAR 0 5
36384: PUSH
36385: EMPTY
36386: ST_TO_ADDR
// case d of 0 :
36387: LD_VAR 0 3
36391: PUSH
36392: LD_INT 0
36394: DOUBLE
36395: EQUAL
36396: IFTRUE 36400
36398: GO 36533
36400: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36401: LD_ADDR_VAR 0 5
36405: PUSH
36406: LD_VAR 0 1
36410: PUSH
36411: LD_INT 4
36413: MINUS
36414: PUSH
36415: LD_VAR 0 2
36419: PUSH
36420: LD_INT 4
36422: MINUS
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: PUSH
36432: LD_VAR 0 1
36436: PUSH
36437: LD_INT 3
36439: MINUS
36440: PUSH
36441: LD_VAR 0 2
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: PUSH
36454: LD_VAR 0 1
36458: PUSH
36459: LD_INT 4
36461: PLUS
36462: PUSH
36463: LD_VAR 0 2
36467: PUSH
36468: LD_INT 4
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: LD_VAR 0 1
36480: PUSH
36481: LD_INT 3
36483: PLUS
36484: PUSH
36485: LD_VAR 0 2
36489: PUSH
36490: LD_INT 3
36492: PLUS
36493: PUSH
36494: LD_INT 5
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: PUSH
36502: LD_VAR 0 1
36506: PUSH
36507: LD_VAR 0 2
36511: PUSH
36512: LD_INT 4
36514: PLUS
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// end ; 1 :
36531: GO 37231
36533: LD_INT 1
36535: DOUBLE
36536: EQUAL
36537: IFTRUE 36541
36539: GO 36674
36541: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36542: LD_ADDR_VAR 0 5
36546: PUSH
36547: LD_VAR 0 1
36551: PUSH
36552: LD_VAR 0 2
36556: PUSH
36557: LD_INT 4
36559: MINUS
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: PUSH
36569: LD_VAR 0 1
36573: PUSH
36574: LD_INT 3
36576: MINUS
36577: PUSH
36578: LD_VAR 0 2
36582: PUSH
36583: LD_INT 3
36585: MINUS
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: PUSH
36595: LD_VAR 0 1
36599: PUSH
36600: LD_INT 4
36602: MINUS
36603: PUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: PUSH
36617: LD_VAR 0 1
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: LD_INT 3
36629: PLUS
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: PUSH
36639: LD_VAR 0 1
36643: PUSH
36644: LD_INT 4
36646: PLUS
36647: PUSH
36648: LD_VAR 0 2
36652: PUSH
36653: LD_INT 4
36655: PLUS
36656: PUSH
36657: LD_INT 5
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: ST_TO_ADDR
// end ; 2 :
36672: GO 37231
36674: LD_INT 2
36676: DOUBLE
36677: EQUAL
36678: IFTRUE 36682
36680: GO 36811
36682: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36683: LD_ADDR_VAR 0 5
36687: PUSH
36688: LD_VAR 0 1
36692: PUSH
36693: LD_VAR 0 2
36697: PUSH
36698: LD_INT 3
36700: MINUS
36701: PUSH
36702: LD_INT 3
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: PUSH
36710: LD_VAR 0 1
36714: PUSH
36715: LD_INT 4
36717: PLUS
36718: PUSH
36719: LD_VAR 0 2
36723: PUSH
36724: LD_INT 4
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: PUSH
36732: LD_VAR 0 1
36736: PUSH
36737: LD_VAR 0 2
36741: PUSH
36742: LD_INT 4
36744: PLUS
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: PUSH
36754: LD_VAR 0 1
36758: PUSH
36759: LD_INT 3
36761: MINUS
36762: PUSH
36763: LD_VAR 0 2
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: PUSH
36776: LD_VAR 0 1
36780: PUSH
36781: LD_INT 4
36783: MINUS
36784: PUSH
36785: LD_VAR 0 2
36789: PUSH
36790: LD_INT 4
36792: MINUS
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// end ; 3 :
36809: GO 37231
36811: LD_INT 3
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 36952
36819: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36820: LD_ADDR_VAR 0 5
36824: PUSH
36825: LD_VAR 0 1
36829: PUSH
36830: LD_INT 3
36832: PLUS
36833: PUSH
36834: LD_VAR 0 2
36838: PUSH
36839: LD_INT 4
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: PUSH
36847: LD_VAR 0 1
36851: PUSH
36852: LD_INT 4
36854: PLUS
36855: PUSH
36856: LD_VAR 0 2
36860: PUSH
36861: LD_INT 4
36863: PLUS
36864: PUSH
36865: LD_INT 5
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: PUSH
36873: LD_VAR 0 1
36877: PUSH
36878: LD_INT 4
36880: MINUS
36881: PUSH
36882: LD_VAR 0 2
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: PUSH
36895: LD_VAR 0 1
36899: PUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_INT 4
36907: MINUS
36908: PUSH
36909: LD_INT 3
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: PUSH
36917: LD_VAR 0 1
36921: PUSH
36922: LD_INT 3
36924: MINUS
36925: PUSH
36926: LD_VAR 0 2
36930: PUSH
36931: LD_INT 3
36933: MINUS
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: ST_TO_ADDR
// end ; 4 :
36950: GO 37231
36952: LD_INT 4
36954: DOUBLE
36955: EQUAL
36956: IFTRUE 36960
36958: GO 37093
36960: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36961: LD_ADDR_VAR 0 5
36965: PUSH
36966: LD_VAR 0 1
36970: PUSH
36971: LD_VAR 0 2
36975: PUSH
36976: LD_INT 4
36978: PLUS
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: PUSH
36988: LD_VAR 0 1
36992: PUSH
36993: LD_INT 3
36995: PLUS
36996: PUSH
36997: LD_VAR 0 2
37001: PUSH
37002: LD_INT 3
37004: PLUS
37005: PUSH
37006: LD_INT 5
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: PUSH
37014: LD_VAR 0 1
37018: PUSH
37019: LD_INT 4
37021: PLUS
37022: PUSH
37023: LD_VAR 0 2
37027: PUSH
37028: LD_INT 4
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: PUSH
37036: LD_VAR 0 1
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_INT 3
37048: MINUS
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: PUSH
37058: LD_VAR 0 1
37062: PUSH
37063: LD_INT 4
37065: MINUS
37066: PUSH
37067: LD_VAR 0 2
37071: PUSH
37072: LD_INT 4
37074: MINUS
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: ST_TO_ADDR
// end ; 5 :
37091: GO 37231
37093: LD_INT 5
37095: DOUBLE
37096: EQUAL
37097: IFTRUE 37101
37099: GO 37230
37101: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37102: LD_ADDR_VAR 0 5
37106: PUSH
37107: LD_VAR 0 1
37111: PUSH
37112: LD_INT 4
37114: MINUS
37115: PUSH
37116: LD_VAR 0 2
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: PUSH
37129: LD_VAR 0 1
37133: PUSH
37134: LD_VAR 0 2
37138: PUSH
37139: LD_INT 4
37141: MINUS
37142: PUSH
37143: LD_INT 3
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: PUSH
37151: LD_VAR 0 1
37155: PUSH
37156: LD_INT 4
37158: PLUS
37159: PUSH
37160: LD_VAR 0 2
37164: PUSH
37165: LD_INT 4
37167: PLUS
37168: PUSH
37169: LD_INT 5
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: PUSH
37177: LD_VAR 0 1
37181: PUSH
37182: LD_INT 3
37184: PLUS
37185: PUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_INT 4
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: PUSH
37199: LD_VAR 0 1
37203: PUSH
37204: LD_VAR 0 2
37208: PUSH
37209: LD_INT 3
37211: PLUS
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
// end ; end ;
37228: GO 37231
37230: POP
// result := list ;
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_VAR 0 5
37240: ST_TO_ADDR
// end ;
37241: LD_VAR 0 4
37245: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37246: LD_INT 0
37248: PPUSH
37249: PPUSH
37250: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37251: LD_VAR 0 1
37255: NOT
37256: PUSH
37257: LD_VAR 0 2
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 4
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: IN
37280: NOT
37281: OR
37282: IFFALSE 37286
// exit ;
37284: GO 37369
// tmp := [ ] ;
37286: LD_ADDR_VAR 0 5
37290: PUSH
37291: EMPTY
37292: ST_TO_ADDR
// for i in units do
37293: LD_ADDR_VAR 0 4
37297: PUSH
37298: LD_VAR 0 1
37302: PUSH
37303: FOR_IN
37304: IFFALSE 37338
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37306: LD_ADDR_VAR 0 5
37310: PUSH
37311: LD_VAR 0 5
37315: PPUSH
37316: LD_VAR 0 4
37320: PPUSH
37321: LD_VAR 0 2
37325: PPUSH
37326: CALL_OW 259
37330: PPUSH
37331: CALL 38729 0 2
37335: ST_TO_ADDR
37336: GO 37303
37338: POP
37339: POP
// if not tmp then
37340: LD_VAR 0 5
37344: NOT
37345: IFFALSE 37349
// exit ;
37347: GO 37369
// result := SortListByListDesc ( units , tmp ) ;
37349: LD_ADDR_VAR 0 3
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: LD_VAR 0 5
37363: PPUSH
37364: CALL_OW 77
37368: ST_TO_ADDR
// end ;
37369: LD_VAR 0 3
37373: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37374: LD_INT 0
37376: PPUSH
37377: PPUSH
37378: PPUSH
// result := false ;
37379: LD_ADDR_VAR 0 3
37383: PUSH
37384: LD_INT 0
37386: ST_TO_ADDR
// if not building then
37387: LD_VAR 0 2
37391: NOT
37392: IFFALSE 37396
// exit ;
37394: GO 37534
// x := GetX ( building ) ;
37396: LD_ADDR_VAR 0 4
37400: PUSH
37401: LD_VAR 0 2
37405: PPUSH
37406: CALL_OW 250
37410: ST_TO_ADDR
// y := GetY ( building ) ;
37411: LD_ADDR_VAR 0 5
37415: PUSH
37416: LD_VAR 0 2
37420: PPUSH
37421: CALL_OW 251
37425: ST_TO_ADDR
// if not x or not y then
37426: LD_VAR 0 4
37430: NOT
37431: PUSH
37432: LD_VAR 0 5
37436: NOT
37437: OR
37438: IFFALSE 37442
// exit ;
37440: GO 37534
// if GetTaskList ( unit ) then
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 437
37451: IFFALSE 37534
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37453: LD_STRING e
37455: PUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL_OW 437
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: EQUAL
37474: PUSH
37475: LD_VAR 0 4
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 437
37489: PUSH
37490: LD_INT 1
37492: ARRAY
37493: PUSH
37494: LD_INT 2
37496: ARRAY
37497: EQUAL
37498: AND
37499: PUSH
37500: LD_VAR 0 5
37504: PUSH
37505: LD_VAR 0 1
37509: PPUSH
37510: CALL_OW 437
37514: PUSH
37515: LD_INT 1
37517: ARRAY
37518: PUSH
37519: LD_INT 3
37521: ARRAY
37522: EQUAL
37523: AND
37524: IFFALSE 37534
// result := true end ;
37526: LD_ADDR_VAR 0 3
37530: PUSH
37531: LD_INT 1
37533: ST_TO_ADDR
// end ;
37534: LD_VAR 0 3
37538: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37539: LD_INT 0
37541: PPUSH
// result := false ;
37542: LD_ADDR_VAR 0 4
37546: PUSH
37547: LD_INT 0
37549: ST_TO_ADDR
// if GetTaskList ( unit ) then
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 437
37559: IFFALSE 37642
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37561: LD_STRING M
37563: PUSH
37564: LD_VAR 0 1
37568: PPUSH
37569: CALL_OW 437
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PUSH
37578: LD_INT 1
37580: ARRAY
37581: EQUAL
37582: PUSH
37583: LD_VAR 0 2
37587: PUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 437
37597: PUSH
37598: LD_INT 1
37600: ARRAY
37601: PUSH
37602: LD_INT 2
37604: ARRAY
37605: EQUAL
37606: AND
37607: PUSH
37608: LD_VAR 0 3
37612: PUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: CALL_OW 437
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: PUSH
37627: LD_INT 3
37629: ARRAY
37630: EQUAL
37631: AND
37632: IFFALSE 37642
// result := true ;
37634: LD_ADDR_VAR 0 4
37638: PUSH
37639: LD_INT 1
37641: ST_TO_ADDR
// end ; end ;
37642: LD_VAR 0 4
37646: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37647: LD_INT 0
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
// if not unit or not area then
37653: LD_VAR 0 1
37657: NOT
37658: PUSH
37659: LD_VAR 0 2
37663: NOT
37664: OR
37665: IFFALSE 37669
// exit ;
37667: GO 37832
// tmp := AreaToList ( area , i ) ;
37669: LD_ADDR_VAR 0 6
37673: PUSH
37674: LD_VAR 0 2
37678: PPUSH
37679: LD_VAR 0 5
37683: PPUSH
37684: CALL_OW 517
37688: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37689: LD_ADDR_VAR 0 5
37693: PUSH
37694: DOUBLE
37695: LD_INT 1
37697: DEC
37698: ST_TO_ADDR
37699: LD_VAR 0 6
37703: PUSH
37704: LD_INT 1
37706: ARRAY
37707: PUSH
37708: FOR_TO
37709: IFFALSE 37830
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37711: LD_ADDR_VAR 0 7
37715: PUSH
37716: LD_VAR 0 6
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PUSH
37725: LD_VAR 0 5
37729: ARRAY
37730: PUSH
37731: LD_VAR 0 6
37735: PUSH
37736: LD_INT 2
37738: ARRAY
37739: PUSH
37740: LD_VAR 0 5
37744: ARRAY
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37750: LD_INT 92
37752: PUSH
37753: LD_VAR 0 7
37757: PUSH
37758: LD_INT 1
37760: ARRAY
37761: PUSH
37762: LD_VAR 0 7
37766: PUSH
37767: LD_INT 2
37769: ARRAY
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: PPUSH
37780: CALL_OW 69
37784: PUSH
37785: LD_INT 0
37787: EQUAL
37788: IFFALSE 37828
// begin PlaceUnitArea ( unit , area , mode ) ;
37790: LD_VAR 0 1
37794: PPUSH
37795: LD_VAR 0 2
37799: PPUSH
37800: LD_VAR 0 3
37804: PPUSH
37805: CALL_OW 49
// result := IsPlaced ( unit ) ;
37809: LD_ADDR_VAR 0 4
37813: PUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 305
37823: ST_TO_ADDR
// exit ;
37824: POP
37825: POP
37826: GO 37832
// end ; end ;
37828: GO 37708
37830: POP
37831: POP
// end ;
37832: LD_VAR 0 4
37836: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37837: LD_INT 0
37839: PPUSH
37840: PPUSH
37841: PPUSH
// if not side or side > 8 then
37842: LD_VAR 0 1
37846: NOT
37847: PUSH
37848: LD_VAR 0 1
37852: PUSH
37853: LD_INT 8
37855: GREATER
37856: OR
37857: IFFALSE 37861
// exit ;
37859: GO 38048
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37861: LD_ADDR_VAR 0 4
37865: PUSH
37866: LD_INT 22
37868: PUSH
37869: LD_VAR 0 1
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 21
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PPUSH
37892: CALL_OW 69
37896: ST_TO_ADDR
// if not tmp then
37897: LD_VAR 0 4
37901: NOT
37902: IFFALSE 37906
// exit ;
37904: GO 38048
// enable_addtolog := true ;
37906: LD_ADDR_OWVAR 81
37910: PUSH
37911: LD_INT 1
37913: ST_TO_ADDR
// AddToLog ( [ ) ;
37914: LD_STRING [
37916: PPUSH
37917: CALL_OW 561
// for i in tmp do
37921: LD_ADDR_VAR 0 3
37925: PUSH
37926: LD_VAR 0 4
37930: PUSH
37931: FOR_IN
37932: IFFALSE 38039
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37934: LD_STRING [
37936: PUSH
37937: LD_VAR 0 3
37941: PPUSH
37942: CALL_OW 266
37946: STR
37947: PUSH
37948: LD_STRING , 
37950: STR
37951: PUSH
37952: LD_VAR 0 3
37956: PPUSH
37957: CALL_OW 250
37961: STR
37962: PUSH
37963: LD_STRING , 
37965: STR
37966: PUSH
37967: LD_VAR 0 3
37971: PPUSH
37972: CALL_OW 251
37976: STR
37977: PUSH
37978: LD_STRING , 
37980: STR
37981: PUSH
37982: LD_VAR 0 3
37986: PPUSH
37987: CALL_OW 254
37991: STR
37992: PUSH
37993: LD_STRING , 
37995: STR
37996: PUSH
37997: LD_VAR 0 3
38001: PPUSH
38002: LD_INT 1
38004: PPUSH
38005: CALL_OW 268
38009: STR
38010: PUSH
38011: LD_STRING , 
38013: STR
38014: PUSH
38015: LD_VAR 0 3
38019: PPUSH
38020: LD_INT 2
38022: PPUSH
38023: CALL_OW 268
38027: STR
38028: PUSH
38029: LD_STRING ],
38031: STR
38032: PPUSH
38033: CALL_OW 561
// end ;
38037: GO 37931
38039: POP
38040: POP
// AddToLog ( ]; ) ;
38041: LD_STRING ];
38043: PPUSH
38044: CALL_OW 561
// end ;
38048: LD_VAR 0 2
38052: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
// if not area or not rate or not max then
38060: LD_VAR 0 1
38064: NOT
38065: PUSH
38066: LD_VAR 0 2
38070: NOT
38071: OR
38072: PUSH
38073: LD_VAR 0 4
38077: NOT
38078: OR
38079: IFFALSE 38083
// exit ;
38081: GO 38272
// while 1 do
38083: LD_INT 1
38085: IFFALSE 38272
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38087: LD_ADDR_VAR 0 9
38091: PUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: LD_INT 1
38099: PPUSH
38100: CALL_OW 287
38104: PUSH
38105: LD_INT 10
38107: MUL
38108: ST_TO_ADDR
// r := rate / 10 ;
38109: LD_ADDR_VAR 0 7
38113: PUSH
38114: LD_VAR 0 2
38118: PUSH
38119: LD_INT 10
38121: DIVREAL
38122: ST_TO_ADDR
// time := 1 1$00 ;
38123: LD_ADDR_VAR 0 8
38127: PUSH
38128: LD_INT 2100
38130: ST_TO_ADDR
// if amount < min then
38131: LD_VAR 0 9
38135: PUSH
38136: LD_VAR 0 3
38140: LESS
38141: IFFALSE 38159
// r := r * 2 else
38143: LD_ADDR_VAR 0 7
38147: PUSH
38148: LD_VAR 0 7
38152: PUSH
38153: LD_INT 2
38155: MUL
38156: ST_TO_ADDR
38157: GO 38185
// if amount > max then
38159: LD_VAR 0 9
38163: PUSH
38164: LD_VAR 0 4
38168: GREATER
38169: IFFALSE 38185
// r := r / 2 ;
38171: LD_ADDR_VAR 0 7
38175: PUSH
38176: LD_VAR 0 7
38180: PUSH
38181: LD_INT 2
38183: DIVREAL
38184: ST_TO_ADDR
// time := time / r ;
38185: LD_ADDR_VAR 0 8
38189: PUSH
38190: LD_VAR 0 8
38194: PUSH
38195: LD_VAR 0 7
38199: DIVREAL
38200: ST_TO_ADDR
// if time < 0 then
38201: LD_VAR 0 8
38205: PUSH
38206: LD_INT 0
38208: LESS
38209: IFFALSE 38226
// time := time * - 1 ;
38211: LD_ADDR_VAR 0 8
38215: PUSH
38216: LD_VAR 0 8
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: MUL
38225: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38226: LD_VAR 0 8
38230: PUSH
38231: LD_INT 35
38233: PPUSH
38234: LD_INT 875
38236: PPUSH
38237: CALL_OW 12
38241: PLUS
38242: PPUSH
38243: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38247: LD_INT 1
38249: PPUSH
38250: LD_INT 5
38252: PPUSH
38253: CALL_OW 12
38257: PPUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: LD_INT 1
38265: PPUSH
38266: CALL_OW 55
// end ;
38270: GO 38083
// end ;
38272: LD_VAR 0 5
38276: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38277: LD_INT 0
38279: PPUSH
38280: PPUSH
38281: PPUSH
38282: PPUSH
38283: PPUSH
38284: PPUSH
38285: PPUSH
38286: PPUSH
// if not turrets or not factories then
38287: LD_VAR 0 1
38291: NOT
38292: PUSH
38293: LD_VAR 0 2
38297: NOT
38298: OR
38299: IFFALSE 38303
// exit ;
38301: GO 38610
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38303: LD_ADDR_VAR 0 10
38307: PUSH
38308: LD_INT 5
38310: PUSH
38311: LD_INT 6
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 2
38320: PUSH
38321: LD_INT 4
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 5
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 24
38345: PUSH
38346: LD_INT 25
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 23
38355: PUSH
38356: LD_INT 27
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 42
38369: PUSH
38370: LD_INT 43
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 44
38379: PUSH
38380: LD_INT 46
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 45
38389: PUSH
38390: LD_INT 47
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// result := [ ] ;
38407: LD_ADDR_VAR 0 3
38411: PUSH
38412: EMPTY
38413: ST_TO_ADDR
// for i in turrets do
38414: LD_ADDR_VAR 0 4
38418: PUSH
38419: LD_VAR 0 1
38423: PUSH
38424: FOR_IN
38425: IFFALSE 38608
// begin nat := GetNation ( i ) ;
38427: LD_ADDR_VAR 0 7
38431: PUSH
38432: LD_VAR 0 4
38436: PPUSH
38437: CALL_OW 248
38441: ST_TO_ADDR
// weapon := 0 ;
38442: LD_ADDR_VAR 0 8
38446: PUSH
38447: LD_INT 0
38449: ST_TO_ADDR
// if not nat then
38450: LD_VAR 0 7
38454: NOT
38455: IFFALSE 38459
// continue ;
38457: GO 38424
// for j in list [ nat ] do
38459: LD_ADDR_VAR 0 5
38463: PUSH
38464: LD_VAR 0 10
38468: PUSH
38469: LD_VAR 0 7
38473: ARRAY
38474: PUSH
38475: FOR_IN
38476: IFFALSE 38517
// if GetBWeapon ( i ) = j [ 1 ] then
38478: LD_VAR 0 4
38482: PPUSH
38483: CALL_OW 269
38487: PUSH
38488: LD_VAR 0 5
38492: PUSH
38493: LD_INT 1
38495: ARRAY
38496: EQUAL
38497: IFFALSE 38515
// begin weapon := j [ 2 ] ;
38499: LD_ADDR_VAR 0 8
38503: PUSH
38504: LD_VAR 0 5
38508: PUSH
38509: LD_INT 2
38511: ARRAY
38512: ST_TO_ADDR
// break ;
38513: GO 38517
// end ;
38515: GO 38475
38517: POP
38518: POP
// if not weapon then
38519: LD_VAR 0 8
38523: NOT
38524: IFFALSE 38528
// continue ;
38526: GO 38424
// for k in factories do
38528: LD_ADDR_VAR 0 6
38532: PUSH
38533: LD_VAR 0 2
38537: PUSH
38538: FOR_IN
38539: IFFALSE 38604
// begin weapons := AvailableWeaponList ( k ) ;
38541: LD_ADDR_VAR 0 9
38545: PUSH
38546: LD_VAR 0 6
38550: PPUSH
38551: CALL_OW 478
38555: ST_TO_ADDR
// if not weapons then
38556: LD_VAR 0 9
38560: NOT
38561: IFFALSE 38565
// continue ;
38563: GO 38538
// if weapon in weapons then
38565: LD_VAR 0 8
38569: PUSH
38570: LD_VAR 0 9
38574: IN
38575: IFFALSE 38602
// begin result := [ i , weapon ] ;
38577: LD_ADDR_VAR 0 3
38581: PUSH
38582: LD_VAR 0 4
38586: PUSH
38587: LD_VAR 0 8
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: ST_TO_ADDR
// exit ;
38596: POP
38597: POP
38598: POP
38599: POP
38600: GO 38610
// end ; end ;
38602: GO 38538
38604: POP
38605: POP
// end ;
38606: GO 38424
38608: POP
38609: POP
// end ;
38610: LD_VAR 0 3
38614: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38615: LD_INT 0
38617: PPUSH
// if not side or side > 8 then
38618: LD_VAR 0 3
38622: NOT
38623: PUSH
38624: LD_VAR 0 3
38628: PUSH
38629: LD_INT 8
38631: GREATER
38632: OR
38633: IFFALSE 38637
// exit ;
38635: GO 38696
// if not range then
38637: LD_VAR 0 4
38641: NOT
38642: IFFALSE 38653
// range := - 12 ;
38644: LD_ADDR_VAR 0 4
38648: PUSH
38649: LD_INT 12
38651: NEG
38652: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38653: LD_VAR 0 1
38657: PPUSH
38658: LD_VAR 0 2
38662: PPUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: LD_VAR 0 4
38672: PPUSH
38673: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38677: LD_VAR 0 1
38681: PPUSH
38682: LD_VAR 0 2
38686: PPUSH
38687: LD_VAR 0 3
38691: PPUSH
38692: CALL_OW 331
// end ;
38696: LD_VAR 0 5
38700: RET
// export function Video ( mode ) ; begin
38701: LD_INT 0
38703: PPUSH
// ingame_video = mode ;
38704: LD_ADDR_OWVAR 52
38708: PUSH
38709: LD_VAR 0 1
38713: ST_TO_ADDR
// interface_hidden = mode ;
38714: LD_ADDR_OWVAR 54
38718: PUSH
38719: LD_VAR 0 1
38723: ST_TO_ADDR
// end ;
38724: LD_VAR 0 2
38728: RET
// export function Join ( array , element ) ; begin
38729: LD_INT 0
38731: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38732: LD_ADDR_VAR 0 3
38736: PUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: LD_VAR 0 1
38746: PUSH
38747: LD_INT 1
38749: PLUS
38750: PPUSH
38751: LD_VAR 0 2
38755: PPUSH
38756: CALL_OW 1
38760: ST_TO_ADDR
// end ;
38761: LD_VAR 0 3
38765: RET
// export function JoinUnion ( array , element ) ; begin
38766: LD_INT 0
38768: PPUSH
// result := array union element ;
38769: LD_ADDR_VAR 0 3
38773: PUSH
38774: LD_VAR 0 1
38778: PUSH
38779: LD_VAR 0 2
38783: UNION
38784: ST_TO_ADDR
// end ;
38785: LD_VAR 0 3
38789: RET
// export function GetBehemoths ( side ) ; begin
38790: LD_INT 0
38792: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38793: LD_ADDR_VAR 0 2
38797: PUSH
38798: LD_INT 22
38800: PUSH
38801: LD_VAR 0 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 31
38812: PUSH
38813: LD_INT 25
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PPUSH
38824: CALL_OW 69
38828: ST_TO_ADDR
// end ;
38829: LD_VAR 0 2
38833: RET
// export function Shuffle ( array ) ; var i , index ; begin
38834: LD_INT 0
38836: PPUSH
38837: PPUSH
38838: PPUSH
// result := [ ] ;
38839: LD_ADDR_VAR 0 2
38843: PUSH
38844: EMPTY
38845: ST_TO_ADDR
// if not array then
38846: LD_VAR 0 1
38850: NOT
38851: IFFALSE 38855
// exit ;
38853: GO 38954
// Randomize ;
38855: CALL_OW 10
// for i = array downto 1 do
38859: LD_ADDR_VAR 0 3
38863: PUSH
38864: DOUBLE
38865: LD_VAR 0 1
38869: INC
38870: ST_TO_ADDR
38871: LD_INT 1
38873: PUSH
38874: FOR_DOWNTO
38875: IFFALSE 38952
// begin index := rand ( 1 , array ) ;
38877: LD_ADDR_VAR 0 4
38881: PUSH
38882: LD_INT 1
38884: PPUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 12
38894: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38895: LD_ADDR_VAR 0 2
38899: PUSH
38900: LD_VAR 0 2
38904: PPUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_INT 1
38912: PLUS
38913: PPUSH
38914: LD_VAR 0 1
38918: PUSH
38919: LD_VAR 0 4
38923: ARRAY
38924: PPUSH
38925: CALL_OW 2
38929: ST_TO_ADDR
// array := Delete ( array , index ) ;
38930: LD_ADDR_VAR 0 1
38934: PUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: LD_VAR 0 4
38944: PPUSH
38945: CALL_OW 3
38949: ST_TO_ADDR
// end ;
38950: GO 38874
38952: POP
38953: POP
// end ;
38954: LD_VAR 0 2
38958: RET
// export function GetBaseMaterials ( base ) ; begin
38959: LD_INT 0
38961: PPUSH
// result := [ 0 , 0 , 0 ] ;
38962: LD_ADDR_VAR 0 2
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: ST_TO_ADDR
// if not base then
38981: LD_VAR 0 1
38985: NOT
38986: IFFALSE 38990
// exit ;
38988: GO 39039
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38990: LD_ADDR_VAR 0 2
38994: PUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: LD_INT 1
39002: PPUSH
39003: CALL_OW 275
39007: PUSH
39008: LD_VAR 0 1
39012: PPUSH
39013: LD_INT 2
39015: PPUSH
39016: CALL_OW 275
39020: PUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: LD_INT 3
39028: PPUSH
39029: CALL_OW 275
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
// end ;
39039: LD_VAR 0 2
39043: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39044: LD_INT 0
39046: PPUSH
39047: PPUSH
// result := array ;
39048: LD_ADDR_VAR 0 3
39052: PUSH
39053: LD_VAR 0 1
39057: ST_TO_ADDR
// if size >= result then
39058: LD_VAR 0 2
39062: PUSH
39063: LD_VAR 0 3
39067: GREATEREQUAL
39068: IFFALSE 39072
// exit ;
39070: GO 39122
// if size then
39072: LD_VAR 0 2
39076: IFFALSE 39122
// for i := array downto size do
39078: LD_ADDR_VAR 0 4
39082: PUSH
39083: DOUBLE
39084: LD_VAR 0 1
39088: INC
39089: ST_TO_ADDR
39090: LD_VAR 0 2
39094: PUSH
39095: FOR_DOWNTO
39096: IFFALSE 39120
// result := Delete ( result , result ) ;
39098: LD_ADDR_VAR 0 3
39102: PUSH
39103: LD_VAR 0 3
39107: PPUSH
39108: LD_VAR 0 3
39112: PPUSH
39113: CALL_OW 3
39117: ST_TO_ADDR
39118: GO 39095
39120: POP
39121: POP
// end ;
39122: LD_VAR 0 3
39126: RET
// export function ComExit ( unit ) ; var tmp ; begin
39127: LD_INT 0
39129: PPUSH
39130: PPUSH
// if not IsInUnit ( unit ) then
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 310
39140: NOT
39141: IFFALSE 39145
// exit ;
39143: GO 39205
// tmp := IsInUnit ( unit ) ;
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_VAR 0 1
39154: PPUSH
39155: CALL_OW 310
39159: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39160: LD_VAR 0 3
39164: PPUSH
39165: CALL_OW 247
39169: PUSH
39170: LD_INT 2
39172: EQUAL
39173: IFFALSE 39186
// ComExitVehicle ( unit ) else
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL_OW 121
39184: GO 39195
// ComExitBuilding ( unit ) ;
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 122
// result := tmp ;
39195: LD_ADDR_VAR 0 2
39199: PUSH
39200: LD_VAR 0 3
39204: ST_TO_ADDR
// end ;
39205: LD_VAR 0 2
39209: RET
// export function ComExitAll ( units ) ; var i ; begin
39210: LD_INT 0
39212: PPUSH
39213: PPUSH
// if not units then
39214: LD_VAR 0 1
39218: NOT
39219: IFFALSE 39223
// exit ;
39221: GO 39249
// for i in units do
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_VAR 0 1
39232: PUSH
39233: FOR_IN
39234: IFFALSE 39247
// ComExit ( i ) ;
39236: LD_VAR 0 3
39240: PPUSH
39241: CALL 39127 0 1
39245: GO 39233
39247: POP
39248: POP
// end ;
39249: LD_VAR 0 2
39253: RET
// export function ResetHc ; begin
39254: LD_INT 0
39256: PPUSH
// InitHc ;
39257: CALL_OW 19
// hc_importance := 0 ;
39261: LD_ADDR_OWVAR 32
39265: PUSH
39266: LD_INT 0
39268: ST_TO_ADDR
// end ;
39269: LD_VAR 0 1
39273: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39274: LD_INT 0
39276: PPUSH
39277: PPUSH
39278: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39279: LD_ADDR_VAR 0 6
39283: PUSH
39284: LD_VAR 0 1
39288: PUSH
39289: LD_VAR 0 3
39293: PLUS
39294: PUSH
39295: LD_INT 2
39297: DIV
39298: ST_TO_ADDR
// if _x < 0 then
39299: LD_VAR 0 6
39303: PUSH
39304: LD_INT 0
39306: LESS
39307: IFFALSE 39324
// _x := _x * - 1 ;
39309: LD_ADDR_VAR 0 6
39313: PUSH
39314: LD_VAR 0 6
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: MUL
39323: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39324: LD_ADDR_VAR 0 7
39328: PUSH
39329: LD_VAR 0 2
39333: PUSH
39334: LD_VAR 0 4
39338: PLUS
39339: PUSH
39340: LD_INT 2
39342: DIV
39343: ST_TO_ADDR
// if _y < 0 then
39344: LD_VAR 0 7
39348: PUSH
39349: LD_INT 0
39351: LESS
39352: IFFALSE 39369
// _y := _y * - 1 ;
39354: LD_ADDR_VAR 0 7
39358: PUSH
39359: LD_VAR 0 7
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: MUL
39368: ST_TO_ADDR
// result := [ _x , _y ] ;
39369: LD_ADDR_VAR 0 5
39373: PUSH
39374: LD_VAR 0 6
39378: PUSH
39379: LD_VAR 0 7
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: ST_TO_ADDR
// end ;
39388: LD_VAR 0 5
39392: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39393: LD_INT 0
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
// task := GetTaskList ( unit ) ;
39399: LD_ADDR_VAR 0 7
39403: PUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: CALL_OW 437
39413: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39414: LD_VAR 0 7
39418: NOT
39419: PUSH
39420: LD_VAR 0 1
39424: PPUSH
39425: LD_VAR 0 2
39429: PPUSH
39430: CALL_OW 308
39434: NOT
39435: AND
39436: IFFALSE 39440
// exit ;
39438: GO 39558
// if IsInArea ( unit , area ) then
39440: LD_VAR 0 1
39444: PPUSH
39445: LD_VAR 0 2
39449: PPUSH
39450: CALL_OW 308
39454: IFFALSE 39472
// begin ComMoveToArea ( unit , goAway ) ;
39456: LD_VAR 0 1
39460: PPUSH
39461: LD_VAR 0 3
39465: PPUSH
39466: CALL_OW 113
// exit ;
39470: GO 39558
// end ; if task [ 1 ] [ 1 ] <> M then
39472: LD_VAR 0 7
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PUSH
39481: LD_INT 1
39483: ARRAY
39484: PUSH
39485: LD_STRING M
39487: NONEQUAL
39488: IFFALSE 39492
// exit ;
39490: GO 39558
// x := task [ 1 ] [ 2 ] ;
39492: LD_ADDR_VAR 0 5
39496: PUSH
39497: LD_VAR 0 7
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: PUSH
39506: LD_INT 2
39508: ARRAY
39509: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39510: LD_ADDR_VAR 0 6
39514: PUSH
39515: LD_VAR 0 7
39519: PUSH
39520: LD_INT 1
39522: ARRAY
39523: PUSH
39524: LD_INT 3
39526: ARRAY
39527: ST_TO_ADDR
// if InArea ( x , y , area ) then
39528: LD_VAR 0 5
39532: PPUSH
39533: LD_VAR 0 6
39537: PPUSH
39538: LD_VAR 0 2
39542: PPUSH
39543: CALL_OW 309
39547: IFFALSE 39558
// ComStop ( unit ) ;
39549: LD_VAR 0 1
39553: PPUSH
39554: CALL_OW 141
// end ;
39558: LD_VAR 0 4
39562: RET
// export function Abs ( value ) ; begin
39563: LD_INT 0
39565: PPUSH
// result := value ;
39566: LD_ADDR_VAR 0 2
39570: PUSH
39571: LD_VAR 0 1
39575: ST_TO_ADDR
// if value < 0 then
39576: LD_VAR 0 1
39580: PUSH
39581: LD_INT 0
39583: LESS
39584: IFFALSE 39601
// result := value * - 1 ;
39586: LD_ADDR_VAR 0 2
39590: PUSH
39591: LD_VAR 0 1
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: MUL
39600: ST_TO_ADDR
// end ;
39601: LD_VAR 0 2
39605: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39606: LD_INT 0
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
// if not unit or not building then
39616: LD_VAR 0 1
39620: NOT
39621: PUSH
39622: LD_VAR 0 2
39626: NOT
39627: OR
39628: IFFALSE 39632
// exit ;
39630: GO 39858
// x := GetX ( building ) ;
39632: LD_ADDR_VAR 0 4
39636: PUSH
39637: LD_VAR 0 2
39641: PPUSH
39642: CALL_OW 250
39646: ST_TO_ADDR
// y := GetY ( building ) ;
39647: LD_ADDR_VAR 0 6
39651: PUSH
39652: LD_VAR 0 2
39656: PPUSH
39657: CALL_OW 251
39661: ST_TO_ADDR
// d := GetDir ( building ) ;
39662: LD_ADDR_VAR 0 8
39666: PUSH
39667: LD_VAR 0 2
39671: PPUSH
39672: CALL_OW 254
39676: ST_TO_ADDR
// r := 4 ;
39677: LD_ADDR_VAR 0 9
39681: PUSH
39682: LD_INT 4
39684: ST_TO_ADDR
// for i := 1 to 5 do
39685: LD_ADDR_VAR 0 10
39689: PUSH
39690: DOUBLE
39691: LD_INT 1
39693: DEC
39694: ST_TO_ADDR
39695: LD_INT 5
39697: PUSH
39698: FOR_TO
39699: IFFALSE 39856
// begin _x := ShiftX ( x , d , r + i ) ;
39701: LD_ADDR_VAR 0 5
39705: PUSH
39706: LD_VAR 0 4
39710: PPUSH
39711: LD_VAR 0 8
39715: PPUSH
39716: LD_VAR 0 9
39720: PUSH
39721: LD_VAR 0 10
39725: PLUS
39726: PPUSH
39727: CALL_OW 272
39731: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39732: LD_ADDR_VAR 0 7
39736: PUSH
39737: LD_VAR 0 6
39741: PPUSH
39742: LD_VAR 0 8
39746: PPUSH
39747: LD_VAR 0 9
39751: PUSH
39752: LD_VAR 0 10
39756: PLUS
39757: PPUSH
39758: CALL_OW 273
39762: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39763: LD_VAR 0 5
39767: PPUSH
39768: LD_VAR 0 7
39772: PPUSH
39773: CALL_OW 488
39777: PUSH
39778: LD_VAR 0 5
39782: PPUSH
39783: LD_VAR 0 7
39787: PPUSH
39788: CALL_OW 428
39792: PPUSH
39793: CALL_OW 247
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: IN
39808: NOT
39809: AND
39810: IFFALSE 39854
// begin ComMoveXY ( unit , _x , _y ) ;
39812: LD_VAR 0 1
39816: PPUSH
39817: LD_VAR 0 5
39821: PPUSH
39822: LD_VAR 0 7
39826: PPUSH
39827: CALL_OW 111
// result := [ _x , _y ] ;
39831: LD_ADDR_VAR 0 3
39835: PUSH
39836: LD_VAR 0 5
39840: PUSH
39841: LD_VAR 0 7
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: ST_TO_ADDR
// exit ;
39850: POP
39851: POP
39852: GO 39858
// end ; end ;
39854: GO 39698
39856: POP
39857: POP
// end ;
39858: LD_VAR 0 3
39862: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39863: LD_INT 0
39865: PPUSH
39866: PPUSH
39867: PPUSH
// result := 0 ;
39868: LD_ADDR_VAR 0 3
39872: PUSH
39873: LD_INT 0
39875: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39876: LD_VAR 0 1
39880: PUSH
39881: LD_INT 0
39883: LESS
39884: PUSH
39885: LD_VAR 0 1
39889: PUSH
39890: LD_INT 8
39892: GREATER
39893: OR
39894: PUSH
39895: LD_VAR 0 2
39899: PUSH
39900: LD_INT 0
39902: LESS
39903: OR
39904: PUSH
39905: LD_VAR 0 2
39909: PUSH
39910: LD_INT 8
39912: GREATER
39913: OR
39914: IFFALSE 39918
// exit ;
39916: GO 39993
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39918: LD_ADDR_VAR 0 4
39922: PUSH
39923: LD_INT 22
39925: PUSH
39926: LD_VAR 0 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PPUSH
39935: CALL_OW 69
39939: PUSH
39940: FOR_IN
39941: IFFALSE 39991
// begin un := UnitShoot ( i ) ;
39943: LD_ADDR_VAR 0 5
39947: PUSH
39948: LD_VAR 0 4
39952: PPUSH
39953: CALL_OW 504
39957: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39958: LD_VAR 0 5
39962: PPUSH
39963: CALL_OW 255
39967: PUSH
39968: LD_VAR 0 1
39972: EQUAL
39973: IFFALSE 39989
// begin result := un ;
39975: LD_ADDR_VAR 0 3
39979: PUSH
39980: LD_VAR 0 5
39984: ST_TO_ADDR
// exit ;
39985: POP
39986: POP
39987: GO 39993
// end ; end ;
39989: GO 39940
39991: POP
39992: POP
// end ;
39993: LD_VAR 0 3
39997: RET
// export function GetCargoBay ( units ) ; begin
39998: LD_INT 0
40000: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40001: LD_ADDR_VAR 0 2
40005: PUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 34
40016: PUSH
40017: LD_INT 12
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 34
40026: PUSH
40027: LD_INT 51
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 34
40036: PUSH
40037: LD_INT 32
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 34
40046: PUSH
40047: LD_INT 89
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: PPUSH
40061: CALL_OW 72
40065: ST_TO_ADDR
// end ;
40066: LD_VAR 0 2
40070: RET
// export function Negate ( value ) ; begin
40071: LD_INT 0
40073: PPUSH
// result := not value ;
40074: LD_ADDR_VAR 0 2
40078: PUSH
40079: LD_VAR 0 1
40083: NOT
40084: ST_TO_ADDR
// end ;
40085: LD_VAR 0 2
40089: RET
// export function Inc ( value ) ; begin
40090: LD_INT 0
40092: PPUSH
// result := value + 1 ;
40093: LD_ADDR_VAR 0 2
40097: PUSH
40098: LD_VAR 0 1
40102: PUSH
40103: LD_INT 1
40105: PLUS
40106: ST_TO_ADDR
// end ;
40107: LD_VAR 0 2
40111: RET
// export function Dec ( value ) ; begin
40112: LD_INT 0
40114: PPUSH
// result := value - 1 ;
40115: LD_ADDR_VAR 0 2
40119: PUSH
40120: LD_VAR 0 1
40124: PUSH
40125: LD_INT 1
40127: MINUS
40128: ST_TO_ADDR
// end ;
40129: LD_VAR 0 2
40133: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
40138: PPUSH
40139: PPUSH
40140: PPUSH
40141: PPUSH
40142: PPUSH
40143: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40144: LD_VAR 0 1
40148: PPUSH
40149: LD_VAR 0 2
40153: PPUSH
40154: CALL_OW 488
40158: NOT
40159: PUSH
40160: LD_VAR 0 3
40164: PPUSH
40165: LD_VAR 0 4
40169: PPUSH
40170: CALL_OW 488
40174: NOT
40175: OR
40176: IFFALSE 40189
// begin result := - 1 ;
40178: LD_ADDR_VAR 0 5
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: ST_TO_ADDR
// exit ;
40187: GO 40424
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40189: LD_ADDR_VAR 0 12
40193: PUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_VAR 0 2
40203: PPUSH
40204: LD_VAR 0 3
40208: PPUSH
40209: LD_VAR 0 4
40213: PPUSH
40214: CALL 39274 0 4
40218: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40219: LD_ADDR_VAR 0 11
40223: PUSH
40224: LD_VAR 0 1
40228: PPUSH
40229: LD_VAR 0 2
40233: PPUSH
40234: LD_VAR 0 12
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 12
40247: PUSH
40248: LD_INT 2
40250: ARRAY
40251: PPUSH
40252: CALL_OW 298
40256: ST_TO_ADDR
// distance := 9999 ;
40257: LD_ADDR_VAR 0 10
40261: PUSH
40262: LD_INT 9999
40264: ST_TO_ADDR
// for i := 0 to 5 do
40265: LD_ADDR_VAR 0 6
40269: PUSH
40270: DOUBLE
40271: LD_INT 0
40273: DEC
40274: ST_TO_ADDR
40275: LD_INT 5
40277: PUSH
40278: FOR_TO
40279: IFFALSE 40422
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40281: LD_ADDR_VAR 0 7
40285: PUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: LD_VAR 0 6
40295: PPUSH
40296: LD_VAR 0 11
40300: PPUSH
40301: CALL_OW 272
40305: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40306: LD_ADDR_VAR 0 8
40310: PUSH
40311: LD_VAR 0 2
40315: PPUSH
40316: LD_VAR 0 6
40320: PPUSH
40321: LD_VAR 0 11
40325: PPUSH
40326: CALL_OW 273
40330: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40331: LD_VAR 0 7
40335: PPUSH
40336: LD_VAR 0 8
40340: PPUSH
40341: CALL_OW 488
40345: NOT
40346: IFFALSE 40350
// continue ;
40348: GO 40278
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40350: LD_ADDR_VAR 0 9
40354: PUSH
40355: LD_VAR 0 12
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: PPUSH
40364: LD_VAR 0 12
40368: PUSH
40369: LD_INT 2
40371: ARRAY
40372: PPUSH
40373: LD_VAR 0 7
40377: PPUSH
40378: LD_VAR 0 8
40382: PPUSH
40383: CALL_OW 298
40387: ST_TO_ADDR
// if tmp < distance then
40388: LD_VAR 0 9
40392: PUSH
40393: LD_VAR 0 10
40397: LESS
40398: IFFALSE 40420
// begin result := i ;
40400: LD_ADDR_VAR 0 5
40404: PUSH
40405: LD_VAR 0 6
40409: ST_TO_ADDR
// distance := tmp ;
40410: LD_ADDR_VAR 0 10
40414: PUSH
40415: LD_VAR 0 9
40419: ST_TO_ADDR
// end ; end ;
40420: GO 40278
40422: POP
40423: POP
// end ;
40424: LD_VAR 0 5
40428: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40429: LD_INT 0
40431: PPUSH
40432: PPUSH
// if not driver or not IsInUnit ( driver ) then
40433: LD_VAR 0 1
40437: NOT
40438: PUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 310
40448: NOT
40449: OR
40450: IFFALSE 40454
// exit ;
40452: GO 40544
// vehicle := IsInUnit ( driver ) ;
40454: LD_ADDR_VAR 0 3
40458: PUSH
40459: LD_VAR 0 1
40463: PPUSH
40464: CALL_OW 310
40468: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40469: LD_VAR 0 1
40473: PPUSH
40474: LD_STRING \
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: PUSH
40504: LD_STRING E
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_VAR 0 3
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PPUSH
40540: CALL_OW 446
// end ;
40544: LD_VAR 0 2
40548: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40549: LD_INT 0
40551: PPUSH
40552: PPUSH
// if not driver or not IsInUnit ( driver ) then
40553: LD_VAR 0 1
40557: NOT
40558: PUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 310
40568: NOT
40569: OR
40570: IFFALSE 40574
// exit ;
40572: GO 40664
// vehicle := IsInUnit ( driver ) ;
40574: LD_ADDR_VAR 0 3
40578: PUSH
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 310
40588: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40589: LD_VAR 0 1
40593: PPUSH
40594: LD_STRING \
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: PUSH
40624: LD_STRING E
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_VAR 0 3
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PPUSH
40660: CALL_OW 447
// end ;
40664: LD_VAR 0 2
40668: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40669: LD_INT 0
40671: PPUSH
40672: PPUSH
40673: PPUSH
// tmp := [ ] ;
40674: LD_ADDR_VAR 0 5
40678: PUSH
40679: EMPTY
40680: ST_TO_ADDR
// for i in units do
40681: LD_ADDR_VAR 0 4
40685: PUSH
40686: LD_VAR 0 1
40690: PUSH
40691: FOR_IN
40692: IFFALSE 40730
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40694: LD_ADDR_VAR 0 5
40698: PUSH
40699: LD_VAR 0 5
40703: PPUSH
40704: LD_VAR 0 5
40708: PUSH
40709: LD_INT 1
40711: PLUS
40712: PPUSH
40713: LD_VAR 0 4
40717: PPUSH
40718: CALL_OW 256
40722: PPUSH
40723: CALL_OW 2
40727: ST_TO_ADDR
40728: GO 40691
40730: POP
40731: POP
// if not tmp then
40732: LD_VAR 0 5
40736: NOT
40737: IFFALSE 40741
// exit ;
40739: GO 40789
// if asc then
40741: LD_VAR 0 2
40745: IFFALSE 40769
// result := SortListByListAsc ( units , tmp ) else
40747: LD_ADDR_VAR 0 3
40751: PUSH
40752: LD_VAR 0 1
40756: PPUSH
40757: LD_VAR 0 5
40761: PPUSH
40762: CALL_OW 76
40766: ST_TO_ADDR
40767: GO 40789
// result := SortListByListDesc ( units , tmp ) ;
40769: LD_ADDR_VAR 0 3
40773: PUSH
40774: LD_VAR 0 1
40778: PPUSH
40779: LD_VAR 0 5
40783: PPUSH
40784: CALL_OW 77
40788: ST_TO_ADDR
// end ;
40789: LD_VAR 0 3
40793: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40794: LD_INT 0
40796: PPUSH
40797: PPUSH
// task := GetTaskList ( mech ) ;
40798: LD_ADDR_VAR 0 4
40802: PUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: CALL_OW 437
40812: ST_TO_ADDR
// if not task then
40813: LD_VAR 0 4
40817: NOT
40818: IFFALSE 40822
// exit ;
40820: GO 40864
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40822: LD_ADDR_VAR 0 3
40826: PUSH
40827: LD_VAR 0 4
40831: PUSH
40832: LD_INT 1
40834: ARRAY
40835: PUSH
40836: LD_INT 1
40838: ARRAY
40839: PUSH
40840: LD_STRING r
40842: EQUAL
40843: PUSH
40844: LD_VAR 0 4
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: PUSH
40853: LD_INT 4
40855: ARRAY
40856: PUSH
40857: LD_VAR 0 2
40861: EQUAL
40862: AND
40863: ST_TO_ADDR
// end ;
40864: LD_VAR 0 3
40868: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40869: LD_INT 0
40871: PPUSH
// SetDir ( unit , d ) ;
40872: LD_VAR 0 1
40876: PPUSH
40877: LD_VAR 0 4
40881: PPUSH
40882: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40886: LD_VAR 0 1
40890: PPUSH
40891: LD_VAR 0 2
40895: PPUSH
40896: LD_VAR 0 3
40900: PPUSH
40901: LD_VAR 0 5
40905: PPUSH
40906: CALL_OW 48
// end ;
40910: LD_VAR 0 6
40914: RET
// export function ToNaturalNumber ( number ) ; begin
40915: LD_INT 0
40917: PPUSH
// result := number div 1 ;
40918: LD_ADDR_VAR 0 2
40922: PUSH
40923: LD_VAR 0 1
40927: PUSH
40928: LD_INT 1
40930: DIV
40931: ST_TO_ADDR
// if number < 0 then
40932: LD_VAR 0 1
40936: PUSH
40937: LD_INT 0
40939: LESS
40940: IFFALSE 40950
// result := 0 ;
40942: LD_ADDR_VAR 0 2
40946: PUSH
40947: LD_INT 0
40949: ST_TO_ADDR
// end ;
40950: LD_VAR 0 2
40954: RET
// export function SortByClass ( units , class ) ; var un ; begin
40955: LD_INT 0
40957: PPUSH
40958: PPUSH
// if not units or not class then
40959: LD_VAR 0 1
40963: NOT
40964: PUSH
40965: LD_VAR 0 2
40969: NOT
40970: OR
40971: IFFALSE 40975
// exit ;
40973: GO 41070
// result := [ ] ;
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: EMPTY
40981: ST_TO_ADDR
// for un in units do
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: LD_VAR 0 1
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41068
// if GetClass ( un ) = class then
40995: LD_VAR 0 4
40999: PPUSH
41000: CALL_OW 257
41004: PUSH
41005: LD_VAR 0 2
41009: EQUAL
41010: IFFALSE 41037
// result := Insert ( result , 1 , un ) else
41012: LD_ADDR_VAR 0 3
41016: PUSH
41017: LD_VAR 0 3
41021: PPUSH
41022: LD_INT 1
41024: PPUSH
41025: LD_VAR 0 4
41029: PPUSH
41030: CALL_OW 2
41034: ST_TO_ADDR
41035: GO 41066
// result := Replace ( result , result + 1 , un ) ;
41037: LD_ADDR_VAR 0 3
41041: PUSH
41042: LD_VAR 0 3
41046: PPUSH
41047: LD_VAR 0 3
41051: PUSH
41052: LD_INT 1
41054: PLUS
41055: PPUSH
41056: LD_VAR 0 4
41060: PPUSH
41061: CALL_OW 1
41065: ST_TO_ADDR
41066: GO 40992
41068: POP
41069: POP
// end ;
41070: LD_VAR 0 3
41074: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41075: LD_INT 0
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
// result := [ ] ;
41084: LD_ADDR_VAR 0 4
41088: PUSH
41089: EMPTY
41090: ST_TO_ADDR
// if x - r < 0 then
41091: LD_VAR 0 1
41095: PUSH
41096: LD_VAR 0 3
41100: MINUS
41101: PUSH
41102: LD_INT 0
41104: LESS
41105: IFFALSE 41117
// min_x := 0 else
41107: LD_ADDR_VAR 0 8
41111: PUSH
41112: LD_INT 0
41114: ST_TO_ADDR
41115: GO 41133
// min_x := x - r ;
41117: LD_ADDR_VAR 0 8
41121: PUSH
41122: LD_VAR 0 1
41126: PUSH
41127: LD_VAR 0 3
41131: MINUS
41132: ST_TO_ADDR
// if y - r < 0 then
41133: LD_VAR 0 2
41137: PUSH
41138: LD_VAR 0 3
41142: MINUS
41143: PUSH
41144: LD_INT 0
41146: LESS
41147: IFFALSE 41159
// min_y := 0 else
41149: LD_ADDR_VAR 0 7
41153: PUSH
41154: LD_INT 0
41156: ST_TO_ADDR
41157: GO 41175
// min_y := y - r ;
41159: LD_ADDR_VAR 0 7
41163: PUSH
41164: LD_VAR 0 2
41168: PUSH
41169: LD_VAR 0 3
41173: MINUS
41174: ST_TO_ADDR
// max_x := x + r ;
41175: LD_ADDR_VAR 0 9
41179: PUSH
41180: LD_VAR 0 1
41184: PUSH
41185: LD_VAR 0 3
41189: PLUS
41190: ST_TO_ADDR
// max_y := y + r ;
41191: LD_ADDR_VAR 0 10
41195: PUSH
41196: LD_VAR 0 2
41200: PUSH
41201: LD_VAR 0 3
41205: PLUS
41206: ST_TO_ADDR
// for _x = min_x to max_x do
41207: LD_ADDR_VAR 0 5
41211: PUSH
41212: DOUBLE
41213: LD_VAR 0 8
41217: DEC
41218: ST_TO_ADDR
41219: LD_VAR 0 9
41223: PUSH
41224: FOR_TO
41225: IFFALSE 41326
// for _y = min_y to max_y do
41227: LD_ADDR_VAR 0 6
41231: PUSH
41232: DOUBLE
41233: LD_VAR 0 7
41237: DEC
41238: ST_TO_ADDR
41239: LD_VAR 0 10
41243: PUSH
41244: FOR_TO
41245: IFFALSE 41322
// begin if not ValidHex ( _x , _y ) then
41247: LD_VAR 0 5
41251: PPUSH
41252: LD_VAR 0 6
41256: PPUSH
41257: CALL_OW 488
41261: NOT
41262: IFFALSE 41266
// continue ;
41264: GO 41244
// if GetResourceTypeXY ( _x , _y ) then
41266: LD_VAR 0 5
41270: PPUSH
41271: LD_VAR 0 6
41275: PPUSH
41276: CALL_OW 283
41280: IFFALSE 41320
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41282: LD_ADDR_VAR 0 4
41286: PUSH
41287: LD_VAR 0 4
41291: PPUSH
41292: LD_VAR 0 4
41296: PUSH
41297: LD_INT 1
41299: PLUS
41300: PPUSH
41301: LD_VAR 0 5
41305: PUSH
41306: LD_VAR 0 6
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PPUSH
41315: CALL_OW 1
41319: ST_TO_ADDR
// end ;
41320: GO 41244
41322: POP
41323: POP
41324: GO 41224
41326: POP
41327: POP
// end ;
41328: LD_VAR 0 4
41332: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
// if not units then
41343: LD_VAR 0 1
41347: NOT
41348: IFFALSE 41352
// exit ;
41350: GO 41876
// result := UnitFilter ( units , [ f_ok ] ) ;
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_VAR 0 1
41361: PPUSH
41362: LD_INT 50
41364: PUSH
41365: EMPTY
41366: LIST
41367: PPUSH
41368: CALL_OW 72
41372: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41373: LD_ADDR_VAR 0 8
41377: PUSH
41378: LD_VAR 0 1
41382: PUSH
41383: LD_INT 1
41385: ARRAY
41386: PPUSH
41387: CALL_OW 255
41391: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41392: LD_ADDR_VAR 0 10
41396: PUSH
41397: LD_INT 29
41399: PUSH
41400: LD_INT 91
41402: PUSH
41403: LD_INT 49
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// if not result then
41411: LD_VAR 0 3
41415: NOT
41416: IFFALSE 41420
// exit ;
41418: GO 41876
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41420: LD_ADDR_VAR 0 5
41424: PUSH
41425: LD_INT 81
41427: PUSH
41428: LD_VAR 0 8
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PPUSH
41437: CALL_OW 69
41441: ST_TO_ADDR
// for i in result do
41442: LD_ADDR_VAR 0 4
41446: PUSH
41447: LD_VAR 0 3
41451: PUSH
41452: FOR_IN
41453: IFFALSE 41874
// begin tag := GetTag ( i ) + 1 ;
41455: LD_ADDR_VAR 0 9
41459: PUSH
41460: LD_VAR 0 4
41464: PPUSH
41465: CALL_OW 110
41469: PUSH
41470: LD_INT 1
41472: PLUS
41473: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41474: LD_ADDR_VAR 0 7
41478: PUSH
41479: LD_VAR 0 4
41483: PPUSH
41484: CALL_OW 250
41488: PPUSH
41489: LD_VAR 0 4
41493: PPUSH
41494: CALL_OW 251
41498: PPUSH
41499: LD_INT 6
41501: PPUSH
41502: CALL 41075 0 3
41506: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41507: LD_VAR 0 4
41511: PPUSH
41512: CALL_OW 247
41516: PUSH
41517: LD_INT 2
41519: EQUAL
41520: PUSH
41521: LD_VAR 0 7
41525: AND
41526: PUSH
41527: LD_VAR 0 4
41531: PPUSH
41532: CALL_OW 264
41536: PUSH
41537: LD_VAR 0 10
41541: IN
41542: NOT
41543: AND
41544: IFFALSE 41583
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41546: LD_VAR 0 4
41550: PPUSH
41551: LD_VAR 0 7
41555: PUSH
41556: LD_INT 1
41558: ARRAY
41559: PUSH
41560: LD_INT 1
41562: ARRAY
41563: PPUSH
41564: LD_VAR 0 7
41568: PUSH
41569: LD_INT 1
41571: ARRAY
41572: PUSH
41573: LD_INT 2
41575: ARRAY
41576: PPUSH
41577: CALL_OW 116
41581: GO 41872
// if path > tag then
41583: LD_VAR 0 2
41587: PUSH
41588: LD_VAR 0 9
41592: GREATER
41593: IFFALSE 41801
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41595: LD_ADDR_VAR 0 6
41599: PUSH
41600: LD_VAR 0 5
41604: PPUSH
41605: LD_INT 91
41607: PUSH
41608: LD_VAR 0 4
41612: PUSH
41613: LD_INT 8
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: PPUSH
41621: CALL_OW 72
41625: ST_TO_ADDR
// if nearEnemy then
41626: LD_VAR 0 6
41630: IFFALSE 41699
// begin if GetWeapon ( i ) = ru_time_lapser then
41632: LD_VAR 0 4
41636: PPUSH
41637: CALL_OW 264
41641: PUSH
41642: LD_INT 49
41644: EQUAL
41645: IFFALSE 41673
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41647: LD_VAR 0 4
41651: PPUSH
41652: LD_VAR 0 6
41656: PPUSH
41657: LD_VAR 0 4
41661: PPUSH
41662: CALL_OW 74
41666: PPUSH
41667: CALL_OW 112
41671: GO 41697
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41673: LD_VAR 0 4
41677: PPUSH
41678: LD_VAR 0 6
41682: PPUSH
41683: LD_VAR 0 4
41687: PPUSH
41688: CALL_OW 74
41692: PPUSH
41693: CALL 42801 0 2
// end else
41697: GO 41799
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41699: LD_VAR 0 4
41703: PPUSH
41704: LD_VAR 0 2
41708: PUSH
41709: LD_VAR 0 9
41713: ARRAY
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PPUSH
41719: LD_VAR 0 2
41723: PUSH
41724: LD_VAR 0 9
41728: ARRAY
41729: PUSH
41730: LD_INT 2
41732: ARRAY
41733: PPUSH
41734: CALL_OW 297
41738: PUSH
41739: LD_INT 6
41741: GREATER
41742: IFFALSE 41785
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41744: LD_VAR 0 4
41748: PPUSH
41749: LD_VAR 0 2
41753: PUSH
41754: LD_VAR 0 9
41758: ARRAY
41759: PUSH
41760: LD_INT 1
41762: ARRAY
41763: PPUSH
41764: LD_VAR 0 2
41768: PUSH
41769: LD_VAR 0 9
41773: ARRAY
41774: PUSH
41775: LD_INT 2
41777: ARRAY
41778: PPUSH
41779: CALL_OW 114
41783: GO 41799
// SetTag ( i , tag ) ;
41785: LD_VAR 0 4
41789: PPUSH
41790: LD_VAR 0 9
41794: PPUSH
41795: CALL_OW 109
// end else
41799: GO 41872
// if enemy then
41801: LD_VAR 0 5
41805: IFFALSE 41872
// begin if GetWeapon ( i ) = ru_time_lapser then
41807: LD_VAR 0 4
41811: PPUSH
41812: CALL_OW 264
41816: PUSH
41817: LD_INT 49
41819: EQUAL
41820: IFFALSE 41848
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41822: LD_VAR 0 4
41826: PPUSH
41827: LD_VAR 0 5
41831: PPUSH
41832: LD_VAR 0 4
41836: PPUSH
41837: CALL_OW 74
41841: PPUSH
41842: CALL_OW 112
41846: GO 41872
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41848: LD_VAR 0 4
41852: PPUSH
41853: LD_VAR 0 5
41857: PPUSH
41858: LD_VAR 0 4
41862: PPUSH
41863: CALL_OW 74
41867: PPUSH
41868: CALL 42801 0 2
// end ; end ;
41872: GO 41452
41874: POP
41875: POP
// end ;
41876: LD_VAR 0 3
41880: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41881: LD_INT 0
41883: PPUSH
41884: PPUSH
41885: PPUSH
// if not unit or IsInUnit ( unit ) then
41886: LD_VAR 0 1
41890: NOT
41891: PUSH
41892: LD_VAR 0 1
41896: PPUSH
41897: CALL_OW 310
41901: OR
41902: IFFALSE 41906
// exit ;
41904: GO 41997
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41906: LD_ADDR_VAR 0 4
41910: PUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 250
41920: PPUSH
41921: LD_VAR 0 2
41925: PPUSH
41926: LD_INT 1
41928: PPUSH
41929: CALL_OW 272
41933: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41934: LD_ADDR_VAR 0 5
41938: PUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: CALL_OW 251
41948: PPUSH
41949: LD_VAR 0 2
41953: PPUSH
41954: LD_INT 1
41956: PPUSH
41957: CALL_OW 273
41961: ST_TO_ADDR
// if ValidHex ( x , y ) then
41962: LD_VAR 0 4
41966: PPUSH
41967: LD_VAR 0 5
41971: PPUSH
41972: CALL_OW 488
41976: IFFALSE 41997
// ComTurnXY ( unit , x , y ) ;
41978: LD_VAR 0 1
41982: PPUSH
41983: LD_VAR 0 4
41987: PPUSH
41988: LD_VAR 0 5
41992: PPUSH
41993: CALL_OW 118
// end ;
41997: LD_VAR 0 3
42001: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42002: LD_INT 0
42004: PPUSH
42005: PPUSH
// result := false ;
42006: LD_ADDR_VAR 0 3
42010: PUSH
42011: LD_INT 0
42013: ST_TO_ADDR
// if not units then
42014: LD_VAR 0 2
42018: NOT
42019: IFFALSE 42023
// exit ;
42021: GO 42068
// for i in units do
42023: LD_ADDR_VAR 0 4
42027: PUSH
42028: LD_VAR 0 2
42032: PUSH
42033: FOR_IN
42034: IFFALSE 42066
// if See ( side , i ) then
42036: LD_VAR 0 1
42040: PPUSH
42041: LD_VAR 0 4
42045: PPUSH
42046: CALL_OW 292
42050: IFFALSE 42064
// begin result := true ;
42052: LD_ADDR_VAR 0 3
42056: PUSH
42057: LD_INT 1
42059: ST_TO_ADDR
// exit ;
42060: POP
42061: POP
42062: GO 42068
// end ;
42064: GO 42033
42066: POP
42067: POP
// end ;
42068: LD_VAR 0 3
42072: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42073: LD_INT 0
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
// if not unit or not points then
42079: LD_VAR 0 1
42083: NOT
42084: PUSH
42085: LD_VAR 0 2
42089: NOT
42090: OR
42091: IFFALSE 42095
// exit ;
42093: GO 42185
// dist := 99999 ;
42095: LD_ADDR_VAR 0 5
42099: PUSH
42100: LD_INT 99999
42102: ST_TO_ADDR
// for i in points do
42103: LD_ADDR_VAR 0 4
42107: PUSH
42108: LD_VAR 0 2
42112: PUSH
42113: FOR_IN
42114: IFFALSE 42183
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42116: LD_ADDR_VAR 0 6
42120: PUSH
42121: LD_VAR 0 1
42125: PPUSH
42126: LD_VAR 0 4
42130: PUSH
42131: LD_INT 1
42133: ARRAY
42134: PPUSH
42135: LD_VAR 0 4
42139: PUSH
42140: LD_INT 2
42142: ARRAY
42143: PPUSH
42144: CALL_OW 297
42148: ST_TO_ADDR
// if tmpDist < dist then
42149: LD_VAR 0 6
42153: PUSH
42154: LD_VAR 0 5
42158: LESS
42159: IFFALSE 42181
// begin result := i ;
42161: LD_ADDR_VAR 0 3
42165: PUSH
42166: LD_VAR 0 4
42170: ST_TO_ADDR
// dist := tmpDist ;
42171: LD_ADDR_VAR 0 5
42175: PUSH
42176: LD_VAR 0 6
42180: ST_TO_ADDR
// end ; end ;
42181: GO 42113
42183: POP
42184: POP
// end ;
42185: LD_VAR 0 3
42189: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42190: LD_INT 0
42192: PPUSH
// uc_side := side ;
42193: LD_ADDR_OWVAR 20
42197: PUSH
42198: LD_VAR 0 1
42202: ST_TO_ADDR
// uc_nation := 3 ;
42203: LD_ADDR_OWVAR 21
42207: PUSH
42208: LD_INT 3
42210: ST_TO_ADDR
// vc_chassis := 25 ;
42211: LD_ADDR_OWVAR 37
42215: PUSH
42216: LD_INT 25
42218: ST_TO_ADDR
// vc_engine := engine_siberite ;
42219: LD_ADDR_OWVAR 39
42223: PUSH
42224: LD_INT 3
42226: ST_TO_ADDR
// vc_control := control_computer ;
42227: LD_ADDR_OWVAR 38
42231: PUSH
42232: LD_INT 3
42234: ST_TO_ADDR
// vc_weapon := 59 ;
42235: LD_ADDR_OWVAR 40
42239: PUSH
42240: LD_INT 59
42242: ST_TO_ADDR
// result := CreateVehicle ;
42243: LD_ADDR_VAR 0 5
42247: PUSH
42248: CALL_OW 45
42252: ST_TO_ADDR
// SetDir ( result , d ) ;
42253: LD_VAR 0 5
42257: PPUSH
42258: LD_VAR 0 4
42262: PPUSH
42263: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42267: LD_VAR 0 5
42271: PPUSH
42272: LD_VAR 0 2
42276: PPUSH
42277: LD_VAR 0 3
42281: PPUSH
42282: LD_INT 0
42284: PPUSH
42285: CALL_OW 48
// end ;
42289: LD_VAR 0 5
42293: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42294: LD_INT 0
42296: PPUSH
42297: PPUSH
42298: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42299: LD_ADDR_VAR 0 2
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42322: LD_VAR 0 1
42326: NOT
42327: PUSH
42328: LD_VAR 0 1
42332: PPUSH
42333: CALL_OW 264
42337: PUSH
42338: LD_INT 12
42340: PUSH
42341: LD_INT 51
42343: PUSH
42344: LD_INT 32
42346: PUSH
42347: LD_INT 89
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: IN
42356: NOT
42357: OR
42358: IFFALSE 42362
// exit ;
42360: GO 42460
// for i := 1 to 3 do
42362: LD_ADDR_VAR 0 3
42366: PUSH
42367: DOUBLE
42368: LD_INT 1
42370: DEC
42371: ST_TO_ADDR
42372: LD_INT 3
42374: PUSH
42375: FOR_TO
42376: IFFALSE 42458
// begin tmp := GetCargo ( cargo , i ) ;
42378: LD_ADDR_VAR 0 4
42382: PUSH
42383: LD_VAR 0 1
42387: PPUSH
42388: LD_VAR 0 3
42392: PPUSH
42393: CALL_OW 289
42397: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42398: LD_ADDR_VAR 0 2
42402: PUSH
42403: LD_VAR 0 2
42407: PPUSH
42408: LD_VAR 0 3
42412: PPUSH
42413: LD_VAR 0 4
42417: PPUSH
42418: CALL_OW 1
42422: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42423: LD_ADDR_VAR 0 2
42427: PUSH
42428: LD_VAR 0 2
42432: PPUSH
42433: LD_INT 4
42435: PPUSH
42436: LD_VAR 0 2
42440: PUSH
42441: LD_INT 4
42443: ARRAY
42444: PUSH
42445: LD_VAR 0 4
42449: PLUS
42450: PPUSH
42451: CALL_OW 1
42455: ST_TO_ADDR
// end ;
42456: GO 42375
42458: POP
42459: POP
// end ;
42460: LD_VAR 0 2
42464: RET
// export function Length ( array ) ; begin
42465: LD_INT 0
42467: PPUSH
// result := array + 0 ;
42468: LD_ADDR_VAR 0 2
42472: PUSH
42473: LD_VAR 0 1
42477: PUSH
42478: LD_INT 0
42480: PLUS
42481: ST_TO_ADDR
// end ;
42482: LD_VAR 0 2
42486: RET
// export function PrepareArray ( array ) ; begin
42487: LD_INT 0
42489: PPUSH
// result := array diff 0 ;
42490: LD_ADDR_VAR 0 2
42494: PUSH
42495: LD_VAR 0 1
42499: PUSH
42500: LD_INT 0
42502: DIFF
42503: ST_TO_ADDR
// if not result [ 1 ] then
42504: LD_VAR 0 2
42508: PUSH
42509: LD_INT 1
42511: ARRAY
42512: NOT
42513: IFFALSE 42533
// result := Delete ( result , 1 ) ;
42515: LD_ADDR_VAR 0 2
42519: PUSH
42520: LD_VAR 0 2
42524: PPUSH
42525: LD_INT 1
42527: PPUSH
42528: CALL_OW 3
42532: ST_TO_ADDR
// end ;
42533: LD_VAR 0 2
42537: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42538: LD_INT 0
42540: PPUSH
42541: PPUSH
42542: PPUSH
42543: PPUSH
// sibRocketRange := 25 ;
42544: LD_ADDR_VAR 0 6
42548: PUSH
42549: LD_INT 25
42551: ST_TO_ADDR
// result := false ;
42552: LD_ADDR_VAR 0 4
42556: PUSH
42557: LD_INT 0
42559: ST_TO_ADDR
// for i := 0 to 5 do
42560: LD_ADDR_VAR 0 5
42564: PUSH
42565: DOUBLE
42566: LD_INT 0
42568: DEC
42569: ST_TO_ADDR
42570: LD_INT 5
42572: PUSH
42573: FOR_TO
42574: IFFALSE 42641
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42576: LD_VAR 0 1
42580: PPUSH
42581: LD_VAR 0 5
42585: PPUSH
42586: LD_VAR 0 6
42590: PPUSH
42591: CALL_OW 272
42595: PPUSH
42596: LD_VAR 0 2
42600: PPUSH
42601: LD_VAR 0 5
42605: PPUSH
42606: LD_VAR 0 6
42610: PPUSH
42611: CALL_OW 273
42615: PPUSH
42616: LD_VAR 0 3
42620: PPUSH
42621: CALL_OW 309
42625: IFFALSE 42639
// begin result := true ;
42627: LD_ADDR_VAR 0 4
42631: PUSH
42632: LD_INT 1
42634: ST_TO_ADDR
// exit ;
42635: POP
42636: POP
42637: GO 42643
// end ;
42639: GO 42573
42641: POP
42642: POP
// end ;
42643: LD_VAR 0 4
42647: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42648: LD_INT 0
42650: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42651: LD_VAR 0 1
42655: PPUSH
42656: LD_VAR 0 2
42660: PPUSH
42661: LD_INT 0
42663: PPUSH
42664: LD_INT 0
42666: PPUSH
42667: LD_INT 1
42669: PPUSH
42670: LD_INT 0
42672: PPUSH
42673: CALL_OW 587
// end ;
42677: LD_VAR 0 3
42681: RET
// export function CenterOnNow ( unit ) ; begin
42682: LD_INT 0
42684: PPUSH
// result := IsInUnit ( unit ) ;
42685: LD_ADDR_VAR 0 2
42689: PUSH
42690: LD_VAR 0 1
42694: PPUSH
42695: CALL_OW 310
42699: ST_TO_ADDR
// if not result then
42700: LD_VAR 0 2
42704: NOT
42705: IFFALSE 42717
// result := unit ;
42707: LD_ADDR_VAR 0 2
42711: PUSH
42712: LD_VAR 0 1
42716: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42717: LD_VAR 0 1
42721: PPUSH
42722: CALL_OW 87
// end ;
42726: LD_VAR 0 2
42730: RET
// export function ComMoveHex ( unit , hex ) ; begin
42731: LD_INT 0
42733: PPUSH
// if not hex then
42734: LD_VAR 0 2
42738: NOT
42739: IFFALSE 42743
// exit ;
42741: GO 42796
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42743: LD_VAR 0 2
42747: PUSH
42748: LD_INT 1
42750: ARRAY
42751: PPUSH
42752: LD_VAR 0 2
42756: PUSH
42757: LD_INT 2
42759: ARRAY
42760: PPUSH
42761: CALL_OW 428
42765: IFFALSE 42769
// exit ;
42767: GO 42796
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42769: LD_VAR 0 1
42773: PPUSH
42774: LD_VAR 0 2
42778: PUSH
42779: LD_INT 1
42781: ARRAY
42782: PPUSH
42783: LD_VAR 0 2
42787: PUSH
42788: LD_INT 2
42790: ARRAY
42791: PPUSH
42792: CALL_OW 111
// end ;
42796: LD_VAR 0 3
42800: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42801: LD_INT 0
42803: PPUSH
42804: PPUSH
42805: PPUSH
// if not unit or not enemy then
42806: LD_VAR 0 1
42810: NOT
42811: PUSH
42812: LD_VAR 0 2
42816: NOT
42817: OR
42818: IFFALSE 42822
// exit ;
42820: GO 42946
// x := GetX ( enemy ) ;
42822: LD_ADDR_VAR 0 4
42826: PUSH
42827: LD_VAR 0 2
42831: PPUSH
42832: CALL_OW 250
42836: ST_TO_ADDR
// y := GetY ( enemy ) ;
42837: LD_ADDR_VAR 0 5
42841: PUSH
42842: LD_VAR 0 2
42846: PPUSH
42847: CALL_OW 251
42851: ST_TO_ADDR
// if ValidHex ( x , y ) then
42852: LD_VAR 0 4
42856: PPUSH
42857: LD_VAR 0 5
42861: PPUSH
42862: CALL_OW 488
42866: IFFALSE 42946
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
42868: LD_VAR 0 2
42872: PPUSH
42873: CALL_OW 247
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: IN
42888: PUSH
42889: LD_VAR 0 1
42893: PPUSH
42894: CALL_OW 255
42898: PPUSH
42899: LD_VAR 0 2
42903: PPUSH
42904: CALL_OW 292
42908: AND
42909: IFFALSE 42927
// ComAttackUnit ( unit , enemy ) else
42911: LD_VAR 0 1
42915: PPUSH
42916: LD_VAR 0 2
42920: PPUSH
42921: CALL_OW 115
42925: GO 42946
// ComAgressiveMove ( unit , x , y ) ;
42927: LD_VAR 0 1
42931: PPUSH
42932: LD_VAR 0 4
42936: PPUSH
42937: LD_VAR 0 5
42941: PPUSH
42942: CALL_OW 114
// end ;
42946: LD_VAR 0 3
42950: RET
