// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 695 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// SetBName ( ar_depot , kaba ) ;
  64: LD_INT 1
  66: PPUSH
  67: LD_STRING kaba
  69: PPUSH
  70: CALL_OW 500
// InitHC_All ( ) ;
  74: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  78: LD_ADDR_VAR 0 2
  82: PUSH
  83: LD_INT 22
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 32
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: PPUSH
 107: CALL_OW 69
 111: PUSH
 112: FOR_IN
 113: IFFALSE 178
// begin PrepareSoldier ( false , 6 ) ;
 115: LD_INT 0
 117: PPUSH
 118: LD_INT 6
 120: PPUSH
 121: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 125: CALL_OW 44
 129: PPUSH
 130: LD_VAR 0 2
 134: PPUSH
 135: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 139: LD_VAR 0 2
 143: PPUSH
 144: LD_INT 25
 146: PUSH
 147: LD_INT 27
 149: PUSH
 150: LD_INT 28
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_VAR 0 2
 162: PUSH
 163: LD_INT 3
 165: MOD
 166: PUSH
 167: LD_INT 1
 169: PLUS
 170: ARRAY
 171: PPUSH
 172: CALL_OW 431
// end ;
 176: GO 112
 178: POP
 179: POP
// PlaceWeaponTurret ( HexInfo ( 129 , 61 ) , ar_radar ) ;
 180: LD_INT 129
 182: PPUSH
 183: LD_INT 61
 185: PPUSH
 186: CALL_OW 428
 190: PPUSH
 191: LD_INT 30
 193: PPUSH
 194: CALL_OW 431
// PrepareSoldier ( sex_male , 3 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 3
 203: PPUSH
 204: CALL_OW 381
// omarSol := CreateHuman ;
 208: LD_ADDR_EXP 8
 212: PUSH
 213: CALL_OW 44
 217: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 218: LD_EXP 8
 222: PPUSH
 223: LD_INT 1
 225: PPUSH
 226: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 230: LD_ADDR_VAR 0 4
 234: PUSH
 235: LD_INT 143
 237: PPUSH
 238: LD_INT 51
 240: PPUSH
 241: CALL_OW 428
 245: ST_TO_ADDR
// for i := 1 to 2 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 2
 258: PUSH
 259: FOR_TO
 260: IFFALSE 288
// begin PrepareMechanic ( false , 3 ) ;
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 3
 267: PPUSH
 268: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 272: CALL_OW 44
 276: PPUSH
 277: LD_VAR 0 4
 281: PPUSH
 282: CALL_OW 52
// end ;
 286: GO 259
 288: POP
 289: POP
// for i := 1 to 2 do
 290: LD_ADDR_VAR 0 2
 294: PUSH
 295: DOUBLE
 296: LD_INT 1
 298: DEC
 299: ST_TO_ADDR
 300: LD_INT 2
 302: PUSH
 303: FOR_TO
 304: IFFALSE 330
// begin PrepareEngineer ( false , 2 ) ;
 306: LD_INT 0
 308: PPUSH
 309: LD_INT 2
 311: PPUSH
 312: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 316: CALL_OW 44
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: GO 303
 330: POP
 331: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 332: CALL_OW 44
 336: PPUSH
 337: LD_INT 164
 339: PPUSH
 340: LD_INT 80
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 350: CALL_OW 44
 354: PPUSH
 355: LD_INT 166
 357: PPUSH
 358: LD_INT 84
 360: PPUSH
 361: LD_INT 0
 363: PPUSH
 364: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 368: LD_ADDR_VAR 0 2
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 2
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 8
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 451
// for j := 1 to 3 do
 405: LD_ADDR_VAR 0 5
 409: PUSH
 410: DOUBLE
 411: LD_INT 1
 413: DEC
 414: ST_TO_ADDR
 415: LD_INT 3
 417: PUSH
 418: FOR_TO
 419: IFFALSE 447
// begin PrepareScientist ( false , 3 ) ;
 421: LD_INT 0
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 2
 440: PPUSH
 441: CALL_OW 52
// end ;
 445: GO 418
 447: POP
 448: POP
 449: GO 402
 451: POP
 452: POP
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 3
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 1436 0 3
 476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Kaia
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 1436 0 3
 500: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 501: LD_INT 14
 503: PPUSH
 504: LD_INT 3
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: LD_INT 27
 512: PPUSH
 513: LD_INT 100
 515: PPUSH
 516: CALL 6276 0 5
// heikeVehicle := CreateVehicle ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 530: LD_EXP 6
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 149
 549: PPUSH
 550: LD_INT 59
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 560: LD_EXP 3
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL_OW 52
// uc_side := 5 ;
 584: LD_ADDR_OWVAR 20
 588: PUSH
 589: LD_INT 5
 591: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_STRING Omar
 599: PPUSH
 600: CALL_OW 25
 604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 605: LD_INT 14
 607: PPUSH
 608: LD_INT 3
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 27
 616: PPUSH
 617: LD_INT 100
 619: PPUSH
 620: CALL 6276 0 5
// omarVehicle := CreateVehicle ;
 624: LD_ADDR_EXP 7
 628: PUSH
 629: CALL_OW 45
 633: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 634: LD_EXP 4
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 646: LD_EXP 7
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 658: LD_EXP 7
 662: PPUSH
 663: LD_INT 132
 665: PPUSH
 666: LD_INT 83
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 676: LD_EXP 4
 680: PPUSH
 681: LD_EXP 7
 685: PPUSH
 686: CALL_OW 52
// end ; end_of_file
 690: LD_VAR 0 1
 694: RET
// export function Action ; var i ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
// Video ( true ) ;
 699: LD_INT 1
 701: PPUSH
 702: CALL 38729 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: LD_INT 30
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: PUSH
 758: FOR_IN
 759: IFFALSE 778
// SetSpecResearch ( i , 1500 , false ) ;
 761: LD_VAR 0 2
 765: PPUSH
 766: LD_INT 1500
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 486
 776: GO 758
 778: POP
 779: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 780: LD_INT 1
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_INT 2
 788: PPUSH
 789: LD_INT 32963
 791: NEG
 792: PPUSH
 793: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 797: LD_EXP 4
 801: PPUSH
 802: LD_INT 150
 804: PPUSH
 805: LD_INT 72
 807: PPUSH
 808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 812: LD_INT 35
 814: PPUSH
 815: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 819: LD_INT 150
 821: PPUSH
 822: LD_INT 72
 824: PPUSH
 825: CALL_OW 428
 829: IFFALSE 812
// ComExitBuilding ( omarSol ) ;
 831: LD_EXP 8
 835: PPUSH
 836: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 840: LD_EXP 8
 844: PPUSH
 845: LD_INT 150
 847: PPUSH
 848: LD_INT 69
 850: PPUSH
 851: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 855: LD_EXP 8
 859: PPUSH
 860: LD_EXP 4
 864: PPUSH
 865: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 869: LD_EXP 8
 873: PPUSH
 874: LD_EXP 4
 878: PPUSH
 879: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 892: LD_EXP 4
 896: PPUSH
 897: LD_INT 152
 899: PPUSH
 900: LD_INT 70
 902: PPUSH
 903: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 907: LD_INT 35
 909: PPUSH
 910: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 914: LD_EXP 4
 918: PPUSH
 919: LD_EXP 8
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 3
 931: LESS
 932: IFFALSE 907
// ComTurnUnit ( Omar , omarSol ) ;
 934: LD_EXP 4
 938: PPUSH
 939: LD_EXP 8
 943: PPUSH
 944: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 948: LD_EXP 3
 952: PPUSH
 953: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 149
 964: PPUSH
 965: LD_INT 68
 967: PPUSH
 968: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 972: LD_EXP 3
 976: PPUSH
 977: LD_EXP 4
 981: PPUSH
 982: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 986: LD_EXP 4
 990: PPUSH
 991: LD_STRING DO-Intro-1
 993: PPUSH
 994: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 998: LD_EXP 8
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 120
// wait ( 0 0$0.3 ) ;
1010: LD_INT 10
1012: PPUSH
1013: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
1017: LD_EXP 3
1021: PPUSH
1022: LD_STRING DH-Intro-2
1024: PPUSH
1025: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1029: LD_EXP 4
1033: PPUSH
1034: LD_EXP 3
1038: PPUSH
1039: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_STRING DO-Intro-3
1050: PPUSH
1051: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 152
1062: PPUSH
1063: LD_INT 58
1065: PPUSH
1066: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_INT 154
1077: PPUSH
1078: LD_INT 60
1080: PPUSH
1081: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1085: LD_EXP 4
1089: PPUSH
1090: LD_EXP 3
1094: PPUSH
1095: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1099: LD_EXP 3
1103: PPUSH
1104: LD_EXP 4
1108: PPUSH
1109: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1113: LD_INT 35
1115: PPUSH
1116: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1120: LD_EXP 3
1124: PPUSH
1125: LD_INT 152
1127: PPUSH
1128: LD_INT 58
1130: PPUSH
1131: CALL_OW 307
1135: PUSH
1136: LD_EXP 4
1140: PPUSH
1141: LD_INT 154
1143: PPUSH
1144: LD_INT 60
1146: PPUSH
1147: CALL_OW 307
1151: AND
1152: IFFALSE 1113
// wait ( 0 0$0.3 ) ;
1154: LD_INT 10
1156: PPUSH
1157: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_STRING DO-Intro-4
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1173: LD_INT 18
1175: PPUSH
1176: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_STRING DH-Intro-5
1187: PPUSH
1188: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1192: LD_EXP 4
1196: PPUSH
1197: LD_STRING DO-Intro-6
1199: PPUSH
1200: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1204: LD_INT 10
1206: PPUSH
1207: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1211: LD_EXP 3
1215: PPUSH
1216: LD_STRING DH-Intro-7
1218: PPUSH
1219: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1223: LD_INT 7
1225: PPUSH
1226: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1230: LD_EXP 3
1234: PPUSH
1235: LD_STRING DH-Intro-8
1237: PPUSH
1238: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1242: LD_EXP 4
1246: PPUSH
1247: LD_STRING DO-Intro-9
1249: PPUSH
1250: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1254: LD_EXP 3
1258: PPUSH
1259: LD_STRING DH-Intro-10
1261: PPUSH
1262: CALL_OW 88
// if not Kaia then
1266: LD_EXP 5
1270: NOT
1271: IFFALSE 1287
// Say ( Heike , DH-Intro-11-Kaia ) else
1273: LD_EXP 3
1277: PPUSH
1278: LD_STRING DH-Intro-11-Kaia
1280: PPUSH
1281: CALL_OW 88
1285: GO 1299
// Say ( Heike , DH-Intro-11-Friends ) ;
1287: LD_EXP 3
1291: PPUSH
1292: LD_STRING DH-Intro-11-Friends
1294: PPUSH
1295: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1299: LD_EXP 4
1303: PPUSH
1304: LD_STRING DO-Intro-12
1306: PPUSH
1307: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1311: LD_EXP 3
1315: PPUSH
1316: LD_STRING DH-Intro-13
1318: PPUSH
1319: CALL_OW 88
// async ;
1323: ASYNC
// wait ( 0 0$0.2 ) ;
1324: LD_INT 7
1326: PPUSH
1327: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1331: LD_EXP 3
1335: PPUSH
1336: LD_EXP 6
1340: PPUSH
1341: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1345: LD_EXP 3
1349: PPUSH
1350: LD_INT 131
1352: PPUSH
1353: LD_INT 83
1355: PPUSH
1356: CALL_OW 171
// sync ;
1360: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1361: LD_EXP 4
1365: PPUSH
1366: LD_STRING DO-Intro-14
1368: PPUSH
1369: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1373: LD_EXP 4
1377: PPUSH
1378: LD_EXP 3
1382: PPUSH
1383: CALL_OW 112
// wait ( 0 0$2 ) ;
1387: LD_INT 70
1389: PPUSH
1390: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1394: LD_INT 1
1396: PPUSH
1397: LD_STRING %_cont
1399: PPUSH
1400: CALL_OW 340
// end ;
1404: LD_VAR 0 1
1408: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1409: LD_VAR 0 2
1413: PUSH
1414: LD_EXP 4
1418: EQUAL
1419: IFFALSE 1433
// SetClass ( Omar , class_desert_warior ) ;
1421: LD_EXP 4
1425: PPUSH
1426: LD_INT 11
1428: PPUSH
1429: CALL_OW 336
// end ; end_of_file
1433: PPOPN 2
1435: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1436: LD_INT 0
1438: PPUSH
1439: PPUSH
// if exist_mode then
1440: LD_VAR 0 2
1444: IFFALSE 1469
// unit := CreateCharacter ( prefix & ident ) else
1446: LD_ADDR_VAR 0 5
1450: PUSH
1451: LD_VAR 0 3
1455: PUSH
1456: LD_VAR 0 1
1460: STR
1461: PPUSH
1462: CALL_OW 34
1466: ST_TO_ADDR
1467: GO 1484
// unit := NewCharacter ( ident ) ;
1469: LD_ADDR_VAR 0 5
1473: PUSH
1474: LD_VAR 0 1
1478: PPUSH
1479: CALL_OW 25
1483: ST_TO_ADDR
// result := unit ;
1484: LD_ADDR_VAR 0 4
1488: PUSH
1489: LD_VAR 0 5
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 4
1498: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1499: LD_INT 0
1501: PPUSH
1502: PPUSH
// if not side or not nation then
1503: LD_VAR 0 1
1507: NOT
1508: PUSH
1509: LD_VAR 0 2
1513: NOT
1514: OR
1515: IFFALSE 1519
// exit ;
1517: GO 2287
// case nation of nation_american :
1519: LD_VAR 0 2
1523: PUSH
1524: LD_INT 1
1526: DOUBLE
1527: EQUAL
1528: IFTRUE 1532
1530: GO 1746
1532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: LD_INT 35
1540: PUSH
1541: LD_INT 45
1543: PUSH
1544: LD_INT 46
1546: PUSH
1547: LD_INT 47
1549: PUSH
1550: LD_INT 82
1552: PUSH
1553: LD_INT 83
1555: PUSH
1556: LD_INT 84
1558: PUSH
1559: LD_INT 85
1561: PUSH
1562: LD_INT 86
1564: PUSH
1565: LD_INT 1
1567: PUSH
1568: LD_INT 2
1570: PUSH
1571: LD_INT 6
1573: PUSH
1574: LD_INT 15
1576: PUSH
1577: LD_INT 16
1579: PUSH
1580: LD_INT 7
1582: PUSH
1583: LD_INT 12
1585: PUSH
1586: LD_INT 13
1588: PUSH
1589: LD_INT 10
1591: PUSH
1592: LD_INT 14
1594: PUSH
1595: LD_INT 20
1597: PUSH
1598: LD_INT 21
1600: PUSH
1601: LD_INT 22
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: LD_INT 32
1609: PUSH
1610: LD_INT 27
1612: PUSH
1613: LD_INT 36
1615: PUSH
1616: LD_INT 69
1618: PUSH
1619: LD_INT 39
1621: PUSH
1622: LD_INT 34
1624: PUSH
1625: LD_INT 40
1627: PUSH
1628: LD_INT 48
1630: PUSH
1631: LD_INT 49
1633: PUSH
1634: LD_INT 50
1636: PUSH
1637: LD_INT 51
1639: PUSH
1640: LD_INT 52
1642: PUSH
1643: LD_INT 53
1645: PUSH
1646: LD_INT 54
1648: PUSH
1649: LD_INT 55
1651: PUSH
1652: LD_INT 56
1654: PUSH
1655: LD_INT 57
1657: PUSH
1658: LD_INT 58
1660: PUSH
1661: LD_INT 59
1663: PUSH
1664: LD_INT 60
1666: PUSH
1667: LD_INT 61
1669: PUSH
1670: LD_INT 62
1672: PUSH
1673: LD_INT 80
1675: PUSH
1676: LD_INT 82
1678: PUSH
1679: LD_INT 83
1681: PUSH
1682: LD_INT 84
1684: PUSH
1685: LD_INT 85
1687: PUSH
1688: LD_INT 86
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
1744: GO 2211
1746: LD_INT 2
1748: DOUBLE
1749: EQUAL
1750: IFTRUE 1754
1752: GO 1980
1754: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1755: LD_ADDR_VAR 0 4
1759: PUSH
1760: LD_INT 35
1762: PUSH
1763: LD_INT 45
1765: PUSH
1766: LD_INT 46
1768: PUSH
1769: LD_INT 47
1771: PUSH
1772: LD_INT 82
1774: PUSH
1775: LD_INT 83
1777: PUSH
1778: LD_INT 84
1780: PUSH
1781: LD_INT 85
1783: PUSH
1784: LD_INT 87
1786: PUSH
1787: LD_INT 70
1789: PUSH
1790: LD_INT 1
1792: PUSH
1793: LD_INT 11
1795: PUSH
1796: LD_INT 3
1798: PUSH
1799: LD_INT 4
1801: PUSH
1802: LD_INT 5
1804: PUSH
1805: LD_INT 6
1807: PUSH
1808: LD_INT 15
1810: PUSH
1811: LD_INT 18
1813: PUSH
1814: LD_INT 7
1816: PUSH
1817: LD_INT 17
1819: PUSH
1820: LD_INT 8
1822: PUSH
1823: LD_INT 20
1825: PUSH
1826: LD_INT 21
1828: PUSH
1829: LD_INT 22
1831: PUSH
1832: LD_INT 72
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 69
1840: PUSH
1841: LD_INT 39
1843: PUSH
1844: LD_INT 40
1846: PUSH
1847: LD_INT 41
1849: PUSH
1850: LD_INT 42
1852: PUSH
1853: LD_INT 43
1855: PUSH
1856: LD_INT 48
1858: PUSH
1859: LD_INT 49
1861: PUSH
1862: LD_INT 50
1864: PUSH
1865: LD_INT 51
1867: PUSH
1868: LD_INT 52
1870: PUSH
1871: LD_INT 53
1873: PUSH
1874: LD_INT 54
1876: PUSH
1877: LD_INT 55
1879: PUSH
1880: LD_INT 56
1882: PUSH
1883: LD_INT 60
1885: PUSH
1886: LD_INT 61
1888: PUSH
1889: LD_INT 62
1891: PUSH
1892: LD_INT 66
1894: PUSH
1895: LD_INT 67
1897: PUSH
1898: LD_INT 68
1900: PUSH
1901: LD_INT 81
1903: PUSH
1904: LD_INT 82
1906: PUSH
1907: LD_INT 83
1909: PUSH
1910: LD_INT 84
1912: PUSH
1913: LD_INT 85
1915: PUSH
1916: LD_INT 87
1918: PUSH
1919: LD_INT 88
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: ST_TO_ADDR
1978: GO 2211
1980: LD_INT 3
1982: DOUBLE
1983: EQUAL
1984: IFTRUE 1988
1986: GO 2210
1988: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1989: LD_ADDR_VAR 0 4
1993: PUSH
1994: LD_INT 46
1996: PUSH
1997: LD_INT 47
1999: PUSH
2000: LD_INT 1
2002: PUSH
2003: LD_INT 2
2005: PUSH
2006: LD_INT 82
2008: PUSH
2009: LD_INT 83
2011: PUSH
2012: LD_INT 84
2014: PUSH
2015: LD_INT 85
2017: PUSH
2018: LD_INT 86
2020: PUSH
2021: LD_INT 11
2023: PUSH
2024: LD_INT 9
2026: PUSH
2027: LD_INT 20
2029: PUSH
2030: LD_INT 19
2032: PUSH
2033: LD_INT 21
2035: PUSH
2036: LD_INT 24
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 25
2044: PUSH
2045: LD_INT 28
2047: PUSH
2048: LD_INT 29
2050: PUSH
2051: LD_INT 30
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 37
2059: PUSH
2060: LD_INT 38
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 27
2068: PUSH
2069: LD_INT 33
2071: PUSH
2072: LD_INT 69
2074: PUSH
2075: LD_INT 39
2077: PUSH
2078: LD_INT 34
2080: PUSH
2081: LD_INT 40
2083: PUSH
2084: LD_INT 71
2086: PUSH
2087: LD_INT 23
2089: PUSH
2090: LD_INT 44
2092: PUSH
2093: LD_INT 48
2095: PUSH
2096: LD_INT 49
2098: PUSH
2099: LD_INT 50
2101: PUSH
2102: LD_INT 51
2104: PUSH
2105: LD_INT 52
2107: PUSH
2108: LD_INT 53
2110: PUSH
2111: LD_INT 54
2113: PUSH
2114: LD_INT 55
2116: PUSH
2117: LD_INT 56
2119: PUSH
2120: LD_INT 57
2122: PUSH
2123: LD_INT 58
2125: PUSH
2126: LD_INT 59
2128: PUSH
2129: LD_INT 63
2131: PUSH
2132: LD_INT 64
2134: PUSH
2135: LD_INT 65
2137: PUSH
2138: LD_INT 82
2140: PUSH
2141: LD_INT 83
2143: PUSH
2144: LD_INT 84
2146: PUSH
2147: LD_INT 85
2149: PUSH
2150: LD_INT 86
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: LIST
2207: ST_TO_ADDR
2208: GO 2211
2210: POP
// if state > - 1 and state < 3 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 1
2218: NEG
2219: GREATER
2220: PUSH
2221: LD_VAR 0 3
2225: PUSH
2226: LD_INT 3
2228: LESS
2229: AND
2230: IFFALSE 2287
// for i in result do
2232: LD_ADDR_VAR 0 5
2236: PUSH
2237: LD_VAR 0 4
2241: PUSH
2242: FOR_IN
2243: IFFALSE 2285
// if GetTech ( i , side ) <> state then
2245: LD_VAR 0 5
2249: PPUSH
2250: LD_VAR 0 1
2254: PPUSH
2255: CALL_OW 321
2259: PUSH
2260: LD_VAR 0 3
2264: NONEQUAL
2265: IFFALSE 2283
// result := result diff i ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_VAR 0 4
2276: PUSH
2277: LD_VAR 0 5
2281: DIFF
2282: ST_TO_ADDR
2283: GO 2242
2285: POP
2286: POP
// end ;
2287: LD_VAR 0 4
2291: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
// result := true ;
2297: LD_ADDR_VAR 0 3
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2305: LD_ADDR_VAR 0 5
2309: PUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 480
2319: ST_TO_ADDR
// if not tmp then
2320: LD_VAR 0 5
2324: NOT
2325: IFFALSE 2329
// exit ;
2327: GO 2378
// for i in tmp do
2329: LD_ADDR_VAR 0 4
2333: PUSH
2334: LD_VAR 0 5
2338: PUSH
2339: FOR_IN
2340: IFFALSE 2376
// if GetTech ( i , side ) <> state_researched then
2342: LD_VAR 0 4
2346: PPUSH
2347: LD_VAR 0 1
2351: PPUSH
2352: CALL_OW 321
2356: PUSH
2357: LD_INT 2
2359: NONEQUAL
2360: IFFALSE 2374
// begin result := false ;
2362: LD_ADDR_VAR 0 3
2366: PUSH
2367: LD_INT 0
2369: ST_TO_ADDR
// exit ;
2370: POP
2371: POP
2372: GO 2378
// end ;
2374: GO 2339
2376: POP
2377: POP
// end ;
2378: LD_VAR 0 3
2382: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2383: LD_INT 0
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
2397: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2398: LD_VAR 0 1
2402: NOT
2403: PUSH
2404: LD_VAR 0 1
2408: PPUSH
2409: CALL_OW 257
2413: PUSH
2414: LD_INT 9
2416: NONEQUAL
2417: OR
2418: IFFALSE 2422
// exit ;
2420: GO 2995
// side := GetSide ( unit ) ;
2422: LD_ADDR_VAR 0 9
2426: PUSH
2427: LD_VAR 0 1
2431: PPUSH
2432: CALL_OW 255
2436: ST_TO_ADDR
// tech_space := tech_spacanom ;
2437: LD_ADDR_VAR 0 12
2441: PUSH
2442: LD_INT 29
2444: ST_TO_ADDR
// tech_time := tech_taurad ;
2445: LD_ADDR_VAR 0 13
2449: PUSH
2450: LD_INT 28
2452: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2453: LD_ADDR_VAR 0 11
2457: PUSH
2458: LD_VAR 0 1
2462: PPUSH
2463: CALL_OW 310
2467: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2468: LD_VAR 0 11
2472: PPUSH
2473: CALL_OW 247
2477: PUSH
2478: LD_INT 2
2480: EQUAL
2481: IFFALSE 2485
// exit ;
2483: GO 2995
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2485: LD_ADDR_VAR 0 8
2489: PUSH
2490: LD_INT 81
2492: PUSH
2493: LD_VAR 0 9
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: LD_INT 21
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if not tmp then
2528: LD_VAR 0 8
2532: NOT
2533: IFFALSE 2537
// exit ;
2535: GO 2995
// if in_unit then
2537: LD_VAR 0 11
2541: IFFALSE 2565
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2543: LD_ADDR_VAR 0 10
2547: PUSH
2548: LD_VAR 0 8
2552: PPUSH
2553: LD_VAR 0 11
2557: PPUSH
2558: CALL_OW 74
2562: ST_TO_ADDR
2563: GO 2585
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2565: LD_ADDR_VAR 0 10
2569: PUSH
2570: LD_VAR 0 8
2574: PPUSH
2575: LD_VAR 0 1
2579: PPUSH
2580: CALL_OW 74
2584: ST_TO_ADDR
// if not enemy then
2585: LD_VAR 0 10
2589: NOT
2590: IFFALSE 2594
// exit ;
2592: GO 2995
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2594: LD_VAR 0 11
2598: PUSH
2599: LD_VAR 0 11
2603: PPUSH
2604: LD_VAR 0 10
2608: PPUSH
2609: CALL_OW 296
2613: PUSH
2614: LD_INT 13
2616: GREATER
2617: AND
2618: PUSH
2619: LD_VAR 0 1
2623: PPUSH
2624: LD_VAR 0 10
2628: PPUSH
2629: CALL_OW 296
2633: PUSH
2634: LD_INT 12
2636: GREATER
2637: OR
2638: IFFALSE 2642
// exit ;
2640: GO 2995
// missile := [ 1 ] ;
2642: LD_ADDR_VAR 0 14
2646: PUSH
2647: LD_INT 1
2649: PUSH
2650: EMPTY
2651: LIST
2652: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2653: LD_VAR 0 9
2657: PPUSH
2658: LD_VAR 0 12
2662: PPUSH
2663: CALL_OW 325
2667: IFFALSE 2696
// missile := Replace ( missile , missile + 1 , 2 ) ;
2669: LD_ADDR_VAR 0 14
2673: PUSH
2674: LD_VAR 0 14
2678: PPUSH
2679: LD_VAR 0 14
2683: PUSH
2684: LD_INT 1
2686: PLUS
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 1
2695: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2696: LD_VAR 0 9
2700: PPUSH
2701: LD_VAR 0 13
2705: PPUSH
2706: CALL_OW 325
2710: PUSH
2711: LD_VAR 0 10
2715: PPUSH
2716: CALL_OW 255
2720: PPUSH
2721: LD_VAR 0 13
2725: PPUSH
2726: CALL_OW 325
2730: NOT
2731: AND
2732: IFFALSE 2761
// missile := Replace ( missile , missile + 1 , 3 ) ;
2734: LD_ADDR_VAR 0 14
2738: PUSH
2739: LD_VAR 0 14
2743: PPUSH
2744: LD_VAR 0 14
2748: PUSH
2749: LD_INT 1
2751: PLUS
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: CALL_OW 1
2760: ST_TO_ADDR
// if missile < 2 then
2761: LD_VAR 0 14
2765: PUSH
2766: LD_INT 2
2768: LESS
2769: IFFALSE 2773
// exit ;
2771: GO 2995
// x := GetX ( enemy ) ;
2773: LD_ADDR_VAR 0 4
2777: PUSH
2778: LD_VAR 0 10
2782: PPUSH
2783: CALL_OW 250
2787: ST_TO_ADDR
// y := GetY ( enemy ) ;
2788: LD_ADDR_VAR 0 5
2792: PUSH
2793: LD_VAR 0 10
2797: PPUSH
2798: CALL_OW 251
2802: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2803: LD_ADDR_VAR 0 6
2807: PUSH
2808: LD_VAR 0 4
2812: PUSH
2813: LD_INT 1
2815: NEG
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL_OW 12
2824: PLUS
2825: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2826: LD_ADDR_VAR 0 7
2830: PUSH
2831: LD_VAR 0 5
2835: PUSH
2836: LD_INT 1
2838: NEG
2839: PPUSH
2840: LD_INT 1
2842: PPUSH
2843: CALL_OW 12
2847: PLUS
2848: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2849: LD_VAR 0 6
2853: PPUSH
2854: LD_VAR 0 7
2858: PPUSH
2859: CALL_OW 488
2863: NOT
2864: IFFALSE 2886
// begin _x := x ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: LD_VAR 0 4
2875: ST_TO_ADDR
// _y := y ;
2876: LD_ADDR_VAR 0 7
2880: PUSH
2881: LD_VAR 0 5
2885: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2886: LD_ADDR_VAR 0 3
2890: PUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_VAR 0 14
2898: PPUSH
2899: CALL_OW 12
2903: ST_TO_ADDR
// case i of 1 :
2904: LD_VAR 0 3
2908: PUSH
2909: LD_INT 1
2911: DOUBLE
2912: EQUAL
2913: IFTRUE 2917
2915: GO 2934
2917: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 115
2932: GO 2995
2934: LD_INT 2
2936: DOUBLE
2937: EQUAL
2938: IFTRUE 2942
2940: GO 2964
2942: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_VAR 0 6
2952: PPUSH
2953: LD_VAR 0 7
2957: PPUSH
2958: CALL_OW 153
2962: GO 2995
2964: LD_INT 3
2966: DOUBLE
2967: EQUAL
2968: IFTRUE 2972
2970: GO 2994
2972: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2973: LD_VAR 0 1
2977: PPUSH
2978: LD_VAR 0 6
2982: PPUSH
2983: LD_VAR 0 7
2987: PPUSH
2988: CALL_OW 154
2992: GO 2995
2994: POP
// end ;
2995: LD_VAR 0 2
2999: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3000: LD_INT 0
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
3006: PPUSH
3007: PPUSH
// if not unit or not building then
3008: LD_VAR 0 1
3012: NOT
3013: PUSH
3014: LD_VAR 0 2
3018: NOT
3019: OR
3020: IFFALSE 3024
// exit ;
3022: GO 3182
// x := GetX ( building ) ;
3024: LD_ADDR_VAR 0 5
3028: PUSH
3029: LD_VAR 0 2
3033: PPUSH
3034: CALL_OW 250
3038: ST_TO_ADDR
// y := GetY ( building ) ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: LD_VAR 0 2
3048: PPUSH
3049: CALL_OW 251
3053: ST_TO_ADDR
// for i = 0 to 5 do
3054: LD_ADDR_VAR 0 4
3058: PUSH
3059: DOUBLE
3060: LD_INT 0
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 5
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3180
// begin _x := ShiftX ( x , i , 3 ) ;
3070: LD_ADDR_VAR 0 7
3074: PUSH
3075: LD_VAR 0 5
3079: PPUSH
3080: LD_VAR 0 4
3084: PPUSH
3085: LD_INT 3
3087: PPUSH
3088: CALL_OW 272
3092: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3093: LD_ADDR_VAR 0 8
3097: PUSH
3098: LD_VAR 0 6
3102: PPUSH
3103: LD_VAR 0 4
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: CALL_OW 273
3115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3116: LD_VAR 0 7
3120: PPUSH
3121: LD_VAR 0 8
3125: PPUSH
3126: CALL_OW 488
3130: NOT
3131: IFFALSE 3135
// continue ;
3133: GO 3067
// if HexInfo ( _x , _y ) = 0 then
3135: LD_VAR 0 7
3139: PPUSH
3140: LD_VAR 0 8
3144: PPUSH
3145: CALL_OW 428
3149: PUSH
3150: LD_INT 0
3152: EQUAL
3153: IFFALSE 3178
// begin ComMoveXY ( unit , _x , _y ) ;
3155: LD_VAR 0 1
3159: PPUSH
3160: LD_VAR 0 7
3164: PPUSH
3165: LD_VAR 0 8
3169: PPUSH
3170: CALL_OW 111
// exit ;
3174: POP
3175: POP
3176: GO 3182
// end ; end ;
3178: GO 3067
3180: POP
3181: POP
// end ;
3182: LD_VAR 0 3
3186: RET
// export function ScanBase ( side , base_area ) ; begin
3187: LD_INT 0
3189: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: LD_INT 81
3202: PUSH
3203: LD_VAR 0 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PPUSH
3212: CALL_OW 70
3216: ST_TO_ADDR
// end ;
3217: LD_VAR 0 3
3221: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3222: LD_INT 0
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
// result := false ;
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// side := GetSide ( unit ) ;
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: LD_VAR 0 1
3245: PPUSH
3246: CALL_OW 255
3250: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3251: LD_ADDR_VAR 0 4
3255: PUSH
3256: LD_VAR 0 1
3260: PPUSH
3261: CALL_OW 248
3265: ST_TO_ADDR
// case nat of 1 :
3266: LD_VAR 0 4
3270: PUSH
3271: LD_INT 1
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3290
3279: POP
// tech := tech_lassight ; 2 :
3280: LD_ADDR_VAR 0 5
3284: PUSH
3285: LD_INT 12
3287: ST_TO_ADDR
3288: GO 3329
3290: LD_INT 2
3292: DOUBLE
3293: EQUAL
3294: IFTRUE 3298
3296: GO 3309
3298: POP
// tech := tech_mortar ; 3 :
3299: LD_ADDR_VAR 0 5
3303: PUSH
3304: LD_INT 41
3306: ST_TO_ADDR
3307: GO 3329
3309: LD_INT 3
3311: DOUBLE
3312: EQUAL
3313: IFTRUE 3317
3315: GO 3328
3317: POP
// tech := tech_bazooka ; end ;
3318: LD_ADDR_VAR 0 5
3322: PUSH
3323: LD_INT 44
3325: ST_TO_ADDR
3326: GO 3329
3328: POP
// if Researched ( side , tech ) then
3329: LD_VAR 0 3
3333: PPUSH
3334: LD_VAR 0 5
3338: PPUSH
3339: CALL_OW 325
3343: IFFALSE 3370
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: LD_INT 5
3352: PUSH
3353: LD_INT 8
3355: PUSH
3356: LD_INT 9
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: ST_TO_ADDR
// end ;
3370: LD_VAR 0 2
3374: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3375: LD_INT 0
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if not mines then
3380: LD_VAR 0 2
3384: NOT
3385: IFFALSE 3389
// exit ;
3387: GO 3533
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3389: LD_ADDR_VAR 0 5
3393: PUSH
3394: LD_INT 81
3396: PUSH
3397: LD_VAR 0 1
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 21
3411: PUSH
3412: LD_INT 3
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 69
3431: ST_TO_ADDR
// for i in mines do
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_VAR 0 2
3441: PUSH
3442: FOR_IN
3443: IFFALSE 3531
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3445: LD_VAR 0 4
3449: PUSH
3450: LD_INT 1
3452: ARRAY
3453: PPUSH
3454: LD_VAR 0 4
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: PPUSH
3463: CALL_OW 458
3467: NOT
3468: IFFALSE 3472
// continue ;
3470: GO 3442
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3472: LD_VAR 0 4
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: LD_VAR 0 4
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PPUSH
3490: CALL_OW 428
3494: PUSH
3495: LD_VAR 0 5
3499: IN
3500: IFFALSE 3529
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3502: LD_VAR 0 4
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: LD_VAR 0 4
3515: PUSH
3516: LD_INT 2
3518: ARRAY
3519: PPUSH
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 456
// end ;
3529: GO 3442
3531: POP
3532: POP
// end ;
3533: LD_VAR 0 3
3537: RET
// export function Count ( array ) ; begin
3538: LD_INT 0
3540: PPUSH
// result := array + 0 ;
3541: LD_ADDR_VAR 0 2
3545: PUSH
3546: LD_VAR 0 1
3550: PUSH
3551: LD_INT 0
3553: PLUS
3554: ST_TO_ADDR
// end ;
3555: LD_VAR 0 2
3559: RET
// export function IsEmpty ( building ) ; begin
3560: LD_INT 0
3562: PPUSH
// if not building then
3563: LD_VAR 0 1
3567: NOT
3568: IFFALSE 3572
// exit ;
3570: GO 3615
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3572: LD_ADDR_VAR 0 2
3576: PUSH
3577: LD_VAR 0 1
3581: PUSH
3582: LD_INT 22
3584: PUSH
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 255
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 58
3601: PUSH
3602: EMPTY
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PPUSH
3609: CALL_OW 69
3613: IN
3614: ST_TO_ADDR
// end ;
3615: LD_VAR 0 2
3619: RET
// export function IsNotFull ( building ) ; var places ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
// if not building then
3624: LD_VAR 0 1
3628: NOT
3629: IFFALSE 3633
// exit ;
3631: GO 3661
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_INT 3
3645: PUSH
3646: LD_INT 62
3648: PUSH
3649: EMPTY
3650: LIST
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PPUSH
3656: CALL_OW 72
3660: ST_TO_ADDR
// end ;
3661: LD_VAR 0 2
3665: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3666: LD_INT 0
3668: PPUSH
3669: PPUSH
3670: PPUSH
3671: PPUSH
// tmp := [ ] ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: EMPTY
3678: ST_TO_ADDR
// list := [ ] ;
3679: LD_ADDR_VAR 0 5
3683: PUSH
3684: EMPTY
3685: ST_TO_ADDR
// for i = 16 to 25 do
3686: LD_ADDR_VAR 0 4
3690: PUSH
3691: DOUBLE
3692: LD_INT 16
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 25
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3773
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_VAR 0 3
3711: PUSH
3712: LD_INT 22
3714: PUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 255
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 91
3731: PUSH
3732: LD_VAR 0 1
3736: PUSH
3737: LD_INT 6
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 30
3747: PUSH
3748: LD_VAR 0 4
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: PPUSH
3765: CALL_OW 69
3769: ADD
3770: ST_TO_ADDR
3771: GO 3699
3773: POP
3774: POP
// for i = 1 to tmp do
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: DOUBLE
3781: LD_INT 1
3783: DEC
3784: ST_TO_ADDR
3785: LD_VAR 0 3
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3879
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3793: LD_ADDR_VAR 0 5
3797: PUSH
3798: LD_VAR 0 5
3802: PUSH
3803: LD_VAR 0 3
3807: PUSH
3808: LD_VAR 0 4
3812: ARRAY
3813: PPUSH
3814: CALL_OW 266
3818: PUSH
3819: LD_VAR 0 3
3823: PUSH
3824: LD_VAR 0 4
3828: ARRAY
3829: PPUSH
3830: CALL_OW 250
3834: PUSH
3835: LD_VAR 0 3
3839: PUSH
3840: LD_VAR 0 4
3844: ARRAY
3845: PPUSH
3846: CALL_OW 251
3850: PUSH
3851: LD_VAR 0 3
3855: PUSH
3856: LD_VAR 0 4
3860: ARRAY
3861: PPUSH
3862: CALL_OW 254
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: ADD
3876: ST_TO_ADDR
3877: GO 3790
3879: POP
3880: POP
// result := list ;
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: LD_VAR 0 5
3890: ST_TO_ADDR
// end ;
3891: LD_VAR 0 2
3895: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3896: LD_INT 0
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
// if not factory then
3905: LD_VAR 0 1
3909: NOT
3910: IFFALSE 3914
// exit ;
3912: GO 4507
// if control = control_apeman then
3914: LD_VAR 0 4
3918: PUSH
3919: LD_INT 5
3921: EQUAL
3922: IFFALSE 4031
// begin tmp := UnitsInside ( factory ) ;
3924: LD_ADDR_VAR 0 8
3928: PUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: CALL_OW 313
3938: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3939: LD_VAR 0 8
3943: PPUSH
3944: LD_INT 25
3946: PUSH
3947: LD_INT 12
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PPUSH
3954: CALL_OW 72
3958: NOT
3959: IFFALSE 3969
// control := control_manual ;
3961: LD_ADDR_VAR 0 4
3965: PUSH
3966: LD_INT 1
3968: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3969: LD_ADDR_VAR 0 8
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL 3666 0 1
3983: ST_TO_ADDR
// if tmp then
3984: LD_VAR 0 8
3988: IFFALSE 4031
// begin for i in tmp do
3990: LD_ADDR_VAR 0 7
3994: PUSH
3995: LD_VAR 0 8
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4029
// if i [ 1 ] = b_ext_radio then
4003: LD_VAR 0 7
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PUSH
4012: LD_INT 22
4014: EQUAL
4015: IFFALSE 4027
// begin control := control_remote ;
4017: LD_ADDR_VAR 0 4
4021: PUSH
4022: LD_INT 2
4024: ST_TO_ADDR
// break ;
4025: GO 4029
// end ;
4027: GO 4000
4029: POP
4030: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4031: LD_VAR 0 1
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: LD_VAR 0 4
4050: PPUSH
4051: LD_VAR 0 5
4055: PPUSH
4056: CALL_OW 448
4060: IFFALSE 4095
// begin result := [ chassis , engine , control , weapon ] ;
4062: LD_ADDR_VAR 0 6
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
// exit ;
4093: GO 4507
// end ; _chassis := AvailableChassisList ( factory ) ;
4095: LD_ADDR_VAR 0 9
4099: PUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 475
4109: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4110: LD_ADDR_VAR 0 11
4114: PUSH
4115: LD_VAR 0 1
4119: PPUSH
4120: CALL_OW 476
4124: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4125: LD_ADDR_VAR 0 12
4129: PUSH
4130: LD_VAR 0 1
4134: PPUSH
4135: CALL_OW 477
4139: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4140: LD_ADDR_VAR 0 10
4144: PUSH
4145: LD_VAR 0 1
4149: PPUSH
4150: CALL_OW 478
4154: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4155: LD_VAR 0 9
4159: NOT
4160: PUSH
4161: LD_VAR 0 11
4165: NOT
4166: OR
4167: PUSH
4168: LD_VAR 0 12
4172: NOT
4173: OR
4174: PUSH
4175: LD_VAR 0 10
4179: NOT
4180: OR
4181: IFFALSE 4216
// begin result := [ chassis , engine , control , weapon ] ;
4183: LD_ADDR_VAR 0 6
4187: PUSH
4188: LD_VAR 0 2
4192: PUSH
4193: LD_VAR 0 3
4197: PUSH
4198: LD_VAR 0 4
4202: PUSH
4203: LD_VAR 0 5
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: ST_TO_ADDR
// exit ;
4214: GO 4507
// end ; if not chassis in _chassis then
4216: LD_VAR 0 2
4220: PUSH
4221: LD_VAR 0 9
4225: IN
4226: NOT
4227: IFFALSE 4253
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4229: LD_ADDR_VAR 0 2
4233: PUSH
4234: LD_VAR 0 9
4238: PUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_VAR 0 9
4246: PPUSH
4247: CALL_OW 12
4251: ARRAY
4252: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4253: LD_VAR 0 2
4257: PPUSH
4258: LD_VAR 0 3
4262: PPUSH
4263: CALL 4512 0 2
4267: NOT
4268: IFFALSE 4327
// repeat engine := _engine [ 1 ] ;
4270: LD_ADDR_VAR 0 3
4274: PUSH
4275: LD_VAR 0 11
4279: PUSH
4280: LD_INT 1
4282: ARRAY
4283: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4284: LD_ADDR_VAR 0 11
4288: PUSH
4289: LD_VAR 0 11
4293: PPUSH
4294: LD_INT 1
4296: PPUSH
4297: CALL_OW 3
4301: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4302: LD_VAR 0 2
4306: PPUSH
4307: LD_VAR 0 3
4311: PPUSH
4312: CALL 4512 0 2
4316: PUSH
4317: LD_VAR 0 11
4321: PUSH
4322: EMPTY
4323: EQUAL
4324: OR
4325: IFFALSE 4270
// if not control in _control then
4327: LD_VAR 0 4
4331: PUSH
4332: LD_VAR 0 12
4336: IN
4337: NOT
4338: IFFALSE 4364
// control := _control [ rand ( 1 , _control ) ] ;
4340: LD_ADDR_VAR 0 4
4344: PUSH
4345: LD_VAR 0 12
4349: PUSH
4350: LD_INT 1
4352: PPUSH
4353: LD_VAR 0 12
4357: PPUSH
4358: CALL_OW 12
4362: ARRAY
4363: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4364: LD_VAR 0 2
4368: PPUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL 4732 0 2
4378: NOT
4379: IFFALSE 4438
// repeat weapon := _weapon [ 1 ] ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_VAR 0 10
4390: PUSH
4391: LD_INT 1
4393: ARRAY
4394: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4395: LD_ADDR_VAR 0 10
4399: PUSH
4400: LD_VAR 0 10
4404: PPUSH
4405: LD_INT 1
4407: PPUSH
4408: CALL_OW 3
4412: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4413: LD_VAR 0 2
4417: PPUSH
4418: LD_VAR 0 5
4422: PPUSH
4423: CALL 4732 0 2
4427: PUSH
4428: LD_VAR 0 10
4432: PUSH
4433: EMPTY
4434: EQUAL
4435: OR
4436: IFFALSE 4381
// result := [ ] ;
4438: LD_ADDR_VAR 0 6
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_VAR 0 3
4459: PPUSH
4460: LD_VAR 0 4
4464: PPUSH
4465: LD_VAR 0 5
4469: PPUSH
4470: CALL_OW 448
4474: IFFALSE 4507
// result := [ chassis , engine , control , weapon ] ;
4476: LD_ADDR_VAR 0 6
4480: PUSH
4481: LD_VAR 0 2
4485: PUSH
4486: LD_VAR 0 3
4490: PUSH
4491: LD_VAR 0 4
4495: PUSH
4496: LD_VAR 0 5
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: ST_TO_ADDR
// end ;
4507: LD_VAR 0 6
4511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4512: LD_INT 0
4514: PPUSH
// if not chassis or not engine then
4515: LD_VAR 0 1
4519: NOT
4520: PUSH
4521: LD_VAR 0 2
4525: NOT
4526: OR
4527: IFFALSE 4531
// exit ;
4529: GO 4727
// case engine of engine_solar :
4531: LD_VAR 0 2
4535: PUSH
4536: LD_INT 2
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4582
4544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_INT 11
4552: PUSH
4553: LD_INT 12
4555: PUSH
4556: LD_INT 13
4558: PUSH
4559: LD_INT 14
4561: PUSH
4562: LD_INT 1
4564: PUSH
4565: LD_INT 2
4567: PUSH
4568: LD_INT 3
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: ST_TO_ADDR
4580: GO 4711
4582: LD_INT 1
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4652
4590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: LD_INT 11
4598: PUSH
4599: LD_INT 12
4601: PUSH
4602: LD_INT 13
4604: PUSH
4605: LD_INT 14
4607: PUSH
4608: LD_INT 1
4610: PUSH
4611: LD_INT 2
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 5
4622: PUSH
4623: LD_INT 21
4625: PUSH
4626: LD_INT 23
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_INT 24
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: ST_TO_ADDR
4650: GO 4711
4652: LD_INT 3
4654: DOUBLE
4655: EQUAL
4656: IFTRUE 4660
4658: GO 4710
4660: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: LD_INT 13
4668: PUSH
4669: LD_INT 14
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 3
4677: PUSH
4678: LD_INT 4
4680: PUSH
4681: LD_INT 5
4683: PUSH
4684: LD_INT 21
4686: PUSH
4687: LD_INT 22
4689: PUSH
4690: LD_INT 23
4692: PUSH
4693: LD_INT 24
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: ST_TO_ADDR
4708: GO 4711
4710: POP
// result := ( chassis in result ) ;
4711: LD_ADDR_VAR 0 3
4715: PUSH
4716: LD_VAR 0 1
4720: PUSH
4721: LD_VAR 0 3
4725: IN
4726: ST_TO_ADDR
// end ;
4727: LD_VAR 0 3
4731: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4732: LD_INT 0
4734: PPUSH
// if not chassis or not weapon then
4735: LD_VAR 0 1
4739: NOT
4740: PUSH
4741: LD_VAR 0 2
4745: NOT
4746: OR
4747: IFFALSE 4751
// exit ;
4749: GO 5811
// case weapon of us_machine_gun :
4751: LD_VAR 0 2
4755: PUSH
4756: LD_INT 2
4758: DOUBLE
4759: EQUAL
4760: IFTRUE 4764
4762: GO 4794
4764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4765: LD_ADDR_VAR 0 3
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: LD_INT 2
4775: PUSH
4776: LD_INT 3
4778: PUSH
4779: LD_INT 4
4781: PUSH
4782: LD_INT 5
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: ST_TO_ADDR
4792: GO 5795
4794: LD_INT 3
4796: DOUBLE
4797: EQUAL
4798: IFTRUE 4802
4800: GO 4832
4802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4803: LD_ADDR_VAR 0 3
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: LD_INT 2
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: LD_INT 5
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ST_TO_ADDR
4830: GO 5795
4832: LD_INT 11
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4870
4840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: LD_INT 2
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 4
4857: PUSH
4858: LD_INT 5
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: ST_TO_ADDR
4868: GO 5795
4870: LD_INT 4
4872: DOUBLE
4873: EQUAL
4874: IFTRUE 4878
4876: GO 4904
4878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: LD_INT 3
4889: PUSH
4890: LD_INT 4
4892: PUSH
4893: LD_INT 5
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: ST_TO_ADDR
4902: GO 5795
4904: LD_INT 5
4906: DOUBLE
4907: EQUAL
4908: IFTRUE 4912
4910: GO 4938
4912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: LD_INT 4
4926: PUSH
4927: LD_INT 5
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: ST_TO_ADDR
4936: GO 5795
4938: LD_INT 9
4940: DOUBLE
4941: EQUAL
4942: IFTRUE 4946
4944: GO 4972
4946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4947: LD_ADDR_VAR 0 3
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: LD_INT 3
4957: PUSH
4958: LD_INT 4
4960: PUSH
4961: LD_INT 5
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: ST_TO_ADDR
4970: GO 5795
4972: LD_INT 7
4974: DOUBLE
4975: EQUAL
4976: IFTRUE 4980
4978: GO 5006
4980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4981: LD_ADDR_VAR 0 3
4985: PUSH
4986: LD_INT 2
4988: PUSH
4989: LD_INT 3
4991: PUSH
4992: LD_INT 4
4994: PUSH
4995: LD_INT 5
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: ST_TO_ADDR
5004: GO 5795
5006: LD_INT 12
5008: DOUBLE
5009: EQUAL
5010: IFTRUE 5014
5012: GO 5040
5014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5015: LD_ADDR_VAR 0 3
5019: PUSH
5020: LD_INT 2
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: LD_INT 4
5028: PUSH
5029: LD_INT 5
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: ST_TO_ADDR
5038: GO 5795
5040: LD_INT 13
5042: DOUBLE
5043: EQUAL
5044: IFTRUE 5048
5046: GO 5074
5048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5049: LD_ADDR_VAR 0 3
5053: PUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: ST_TO_ADDR
5072: GO 5795
5074: LD_INT 14
5076: DOUBLE
5077: EQUAL
5078: IFTRUE 5082
5080: GO 5100
5082: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5083: LD_ADDR_VAR 0 3
5087: PUSH
5088: LD_INT 4
5090: PUSH
5091: LD_INT 5
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: ST_TO_ADDR
5098: GO 5795
5100: LD_INT 6
5102: DOUBLE
5103: EQUAL
5104: IFTRUE 5108
5106: GO 5126
5108: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5109: LD_ADDR_VAR 0 3
5113: PUSH
5114: LD_INT 4
5116: PUSH
5117: LD_INT 5
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: ST_TO_ADDR
5124: GO 5795
5126: LD_INT 10
5128: DOUBLE
5129: EQUAL
5130: IFTRUE 5134
5132: GO 5152
5134: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5135: LD_ADDR_VAR 0 3
5139: PUSH
5140: LD_INT 4
5142: PUSH
5143: LD_INT 5
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: ST_TO_ADDR
5150: GO 5795
5152: LD_INT 22
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5160
5158: GO 5186
5160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5161: LD_ADDR_VAR 0 3
5165: PUSH
5166: LD_INT 11
5168: PUSH
5169: LD_INT 12
5171: PUSH
5172: LD_INT 13
5174: PUSH
5175: LD_INT 14
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: ST_TO_ADDR
5184: GO 5795
5186: LD_INT 23
5188: DOUBLE
5189: EQUAL
5190: IFTRUE 5194
5192: GO 5220
5194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5195: LD_ADDR_VAR 0 3
5199: PUSH
5200: LD_INT 11
5202: PUSH
5203: LD_INT 12
5205: PUSH
5206: LD_INT 13
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: ST_TO_ADDR
5218: GO 5795
5220: LD_INT 24
5222: DOUBLE
5223: EQUAL
5224: IFTRUE 5228
5226: GO 5254
5228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5229: LD_ADDR_VAR 0 3
5233: PUSH
5234: LD_INT 11
5236: PUSH
5237: LD_INT 12
5239: PUSH
5240: LD_INT 13
5242: PUSH
5243: LD_INT 14
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: ST_TO_ADDR
5252: GO 5795
5254: LD_INT 30
5256: DOUBLE
5257: EQUAL
5258: IFTRUE 5262
5260: GO 5288
5262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5263: LD_ADDR_VAR 0 3
5267: PUSH
5268: LD_INT 11
5270: PUSH
5271: LD_INT 12
5273: PUSH
5274: LD_INT 13
5276: PUSH
5277: LD_INT 14
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: ST_TO_ADDR
5286: GO 5795
5288: LD_INT 25
5290: DOUBLE
5291: EQUAL
5292: IFTRUE 5296
5294: GO 5314
5296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5297: LD_ADDR_VAR 0 3
5301: PUSH
5302: LD_INT 13
5304: PUSH
5305: LD_INT 14
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: ST_TO_ADDR
5312: GO 5795
5314: LD_INT 27
5316: DOUBLE
5317: EQUAL
5318: IFTRUE 5322
5320: GO 5340
5322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: LD_INT 13
5330: PUSH
5331: LD_INT 14
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: ST_TO_ADDR
5338: GO 5795
5340: LD_INT 92
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5374
5348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5349: LD_ADDR_VAR 0 3
5353: PUSH
5354: LD_INT 11
5356: PUSH
5357: LD_INT 12
5359: PUSH
5360: LD_INT 13
5362: PUSH
5363: LD_INT 14
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: ST_TO_ADDR
5372: GO 5795
5374: LD_INT 28
5376: DOUBLE
5377: EQUAL
5378: IFTRUE 5382
5380: GO 5400
5382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: LD_INT 13
5390: PUSH
5391: LD_INT 14
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: ST_TO_ADDR
5398: GO 5795
5400: LD_INT 29
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5426
5408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: LD_INT 13
5416: PUSH
5417: LD_INT 14
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 5795
5426: LD_INT 31
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5452
5434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_INT 13
5442: PUSH
5443: LD_INT 14
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: ST_TO_ADDR
5450: GO 5795
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5460
5458: GO 5478
5460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5461: LD_ADDR_VAR 0 3
5465: PUSH
5466: LD_INT 13
5468: PUSH
5469: LD_INT 14
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: ST_TO_ADDR
5476: GO 5795
5478: LD_INT 42
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5512
5486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: LD_INT 21
5494: PUSH
5495: LD_INT 22
5497: PUSH
5498: LD_INT 23
5500: PUSH
5501: LD_INT 24
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: ST_TO_ADDR
5510: GO 5795
5512: LD_INT 43
5514: DOUBLE
5515: EQUAL
5516: IFTRUE 5520
5518: GO 5546
5520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 21
5528: PUSH
5529: LD_INT 22
5531: PUSH
5532: LD_INT 23
5534: PUSH
5535: LD_INT 24
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: ST_TO_ADDR
5544: GO 5795
5546: LD_INT 44
5548: DOUBLE
5549: EQUAL
5550: IFTRUE 5554
5552: GO 5580
5554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_INT 21
5562: PUSH
5563: LD_INT 22
5565: PUSH
5566: LD_INT 23
5568: PUSH
5569: LD_INT 24
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: ST_TO_ADDR
5578: GO 5795
5580: LD_INT 45
5582: DOUBLE
5583: EQUAL
5584: IFTRUE 5588
5586: GO 5614
5588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5589: LD_ADDR_VAR 0 3
5593: PUSH
5594: LD_INT 21
5596: PUSH
5597: LD_INT 22
5599: PUSH
5600: LD_INT 23
5602: PUSH
5603: LD_INT 24
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: ST_TO_ADDR
5612: GO 5795
5614: LD_INT 49
5616: DOUBLE
5617: EQUAL
5618: IFTRUE 5622
5620: GO 5648
5622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: LD_INT 21
5630: PUSH
5631: LD_INT 22
5633: PUSH
5634: LD_INT 23
5636: PUSH
5637: LD_INT 24
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: ST_TO_ADDR
5646: GO 5795
5648: LD_INT 51
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5682
5656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5657: LD_ADDR_VAR 0 3
5661: PUSH
5662: LD_INT 21
5664: PUSH
5665: LD_INT 22
5667: PUSH
5668: LD_INT 23
5670: PUSH
5671: LD_INT 24
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: ST_TO_ADDR
5680: GO 5795
5682: LD_INT 52
5684: DOUBLE
5685: EQUAL
5686: IFTRUE 5690
5688: GO 5716
5690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5691: LD_ADDR_VAR 0 3
5695: PUSH
5696: LD_INT 21
5698: PUSH
5699: LD_INT 22
5701: PUSH
5702: LD_INT 23
5704: PUSH
5705: LD_INT 24
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: ST_TO_ADDR
5714: GO 5795
5716: LD_INT 53
5718: DOUBLE
5719: EQUAL
5720: IFTRUE 5724
5722: GO 5742
5724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5725: LD_ADDR_VAR 0 3
5729: PUSH
5730: LD_INT 23
5732: PUSH
5733: LD_INT 24
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: ST_TO_ADDR
5740: GO 5795
5742: LD_INT 46
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5768
5750: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5751: LD_ADDR_VAR 0 3
5755: PUSH
5756: LD_INT 23
5758: PUSH
5759: LD_INT 24
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: ST_TO_ADDR
5766: GO 5795
5768: LD_INT 47
5770: DOUBLE
5771: EQUAL
5772: IFTRUE 5776
5774: GO 5794
5776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_INT 23
5784: PUSH
5785: LD_INT 24
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: ST_TO_ADDR
5792: GO 5795
5794: POP
// result := ( chassis in result ) ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_VAR 0 1
5804: PUSH
5805: LD_VAR 0 3
5809: IN
5810: ST_TO_ADDR
// end ;
5811: LD_VAR 0 3
5815: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
5824: PPUSH
// result := array ;
5825: LD_ADDR_VAR 0 5
5829: PUSH
5830: LD_VAR 0 1
5834: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5835: LD_VAR 0 1
5839: NOT
5840: PUSH
5841: LD_VAR 0 2
5845: NOT
5846: OR
5847: PUSH
5848: LD_VAR 0 3
5852: NOT
5853: OR
5854: PUSH
5855: LD_VAR 0 2
5859: PUSH
5860: LD_VAR 0 1
5864: GREATER
5865: OR
5866: PUSH
5867: LD_VAR 0 3
5871: PUSH
5872: LD_VAR 0 1
5876: GREATER
5877: OR
5878: IFFALSE 5882
// exit ;
5880: GO 6178
// if direction then
5882: LD_VAR 0 4
5886: IFFALSE 5950
// begin d := 1 ;
5888: LD_ADDR_VAR 0 9
5892: PUSH
5893: LD_INT 1
5895: ST_TO_ADDR
// if i_from > i_to then
5896: LD_VAR 0 2
5900: PUSH
5901: LD_VAR 0 3
5905: GREATER
5906: IFFALSE 5932
// length := ( array - i_from ) + i_to else
5908: LD_ADDR_VAR 0 11
5912: PUSH
5913: LD_VAR 0 1
5917: PUSH
5918: LD_VAR 0 2
5922: MINUS
5923: PUSH
5924: LD_VAR 0 3
5928: PLUS
5929: ST_TO_ADDR
5930: GO 5948
// length := i_to - i_from ;
5932: LD_ADDR_VAR 0 11
5936: PUSH
5937: LD_VAR 0 3
5941: PUSH
5942: LD_VAR 0 2
5946: MINUS
5947: ST_TO_ADDR
// end else
5948: GO 6011
// begin d := - 1 ;
5950: LD_ADDR_VAR 0 9
5954: PUSH
5955: LD_INT 1
5957: NEG
5958: ST_TO_ADDR
// if i_from > i_to then
5959: LD_VAR 0 2
5963: PUSH
5964: LD_VAR 0 3
5968: GREATER
5969: IFFALSE 5989
// length := i_from - i_to else
5971: LD_ADDR_VAR 0 11
5975: PUSH
5976: LD_VAR 0 2
5980: PUSH
5981: LD_VAR 0 3
5985: MINUS
5986: ST_TO_ADDR
5987: GO 6011
// length := ( array - i_to ) + i_from ;
5989: LD_ADDR_VAR 0 11
5993: PUSH
5994: LD_VAR 0 1
5998: PUSH
5999: LD_VAR 0 3
6003: MINUS
6004: PUSH
6005: LD_VAR 0 2
6009: PLUS
6010: ST_TO_ADDR
// end ; if not length then
6011: LD_VAR 0 11
6015: NOT
6016: IFFALSE 6020
// exit ;
6018: GO 6178
// tmp := array ;
6020: LD_ADDR_VAR 0 10
6024: PUSH
6025: LD_VAR 0 1
6029: ST_TO_ADDR
// for i = 1 to length do
6030: LD_ADDR_VAR 0 6
6034: PUSH
6035: DOUBLE
6036: LD_INT 1
6038: DEC
6039: ST_TO_ADDR
6040: LD_VAR 0 11
6044: PUSH
6045: FOR_TO
6046: IFFALSE 6166
// begin for j = 1 to array do
6048: LD_ADDR_VAR 0 7
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_VAR 0 1
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6152
// begin k := j + d ;
6066: LD_ADDR_VAR 0 8
6070: PUSH
6071: LD_VAR 0 7
6075: PUSH
6076: LD_VAR 0 9
6080: PLUS
6081: ST_TO_ADDR
// if k > array then
6082: LD_VAR 0 8
6086: PUSH
6087: LD_VAR 0 1
6091: GREATER
6092: IFFALSE 6102
// k := 1 ;
6094: LD_ADDR_VAR 0 8
6098: PUSH
6099: LD_INT 1
6101: ST_TO_ADDR
// if not k then
6102: LD_VAR 0 8
6106: NOT
6107: IFFALSE 6119
// k := array ;
6109: LD_ADDR_VAR 0 8
6113: PUSH
6114: LD_VAR 0 1
6118: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6119: LD_ADDR_VAR 0 10
6123: PUSH
6124: LD_VAR 0 10
6128: PPUSH
6129: LD_VAR 0 8
6133: PPUSH
6134: LD_VAR 0 1
6138: PUSH
6139: LD_VAR 0 7
6143: ARRAY
6144: PPUSH
6145: CALL_OW 1
6149: ST_TO_ADDR
// end ;
6150: GO 6063
6152: POP
6153: POP
// array := tmp ;
6154: LD_ADDR_VAR 0 1
6158: PUSH
6159: LD_VAR 0 10
6163: ST_TO_ADDR
// end ;
6164: GO 6045
6166: POP
6167: POP
// result := array ;
6168: LD_ADDR_VAR 0 5
6172: PUSH
6173: LD_VAR 0 1
6177: ST_TO_ADDR
// end ;
6178: LD_VAR 0 5
6182: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
// result := 0 ;
6187: LD_ADDR_VAR 0 3
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// if not array or not value in array then
6195: LD_VAR 0 1
6199: NOT
6200: PUSH
6201: LD_VAR 0 2
6205: PUSH
6206: LD_VAR 0 1
6210: IN
6211: NOT
6212: OR
6213: IFFALSE 6217
// exit ;
6215: GO 6271
// for i = 1 to array do
6217: LD_ADDR_VAR 0 4
6221: PUSH
6222: DOUBLE
6223: LD_INT 1
6225: DEC
6226: ST_TO_ADDR
6227: LD_VAR 0 1
6231: PUSH
6232: FOR_TO
6233: IFFALSE 6269
// if value = array [ i ] then
6235: LD_VAR 0 2
6239: PUSH
6240: LD_VAR 0 1
6244: PUSH
6245: LD_VAR 0 4
6249: ARRAY
6250: EQUAL
6251: IFFALSE 6267
// begin result := i ;
6253: LD_ADDR_VAR 0 3
6257: PUSH
6258: LD_VAR 0 4
6262: ST_TO_ADDR
// exit ;
6263: POP
6264: POP
6265: GO 6271
// end ;
6267: GO 6232
6269: POP
6270: POP
// end ;
6271: LD_VAR 0 3
6275: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6276: LD_INT 0
6278: PPUSH
// vc_chassis := chassis ;
6279: LD_ADDR_OWVAR 37
6283: PUSH
6284: LD_VAR 0 1
6288: ST_TO_ADDR
// vc_engine := engine ;
6289: LD_ADDR_OWVAR 39
6293: PUSH
6294: LD_VAR 0 2
6298: ST_TO_ADDR
// vc_control := control ;
6299: LD_ADDR_OWVAR 38
6303: PUSH
6304: LD_VAR 0 3
6308: ST_TO_ADDR
// vc_weapon := weapon ;
6309: LD_ADDR_OWVAR 40
6313: PUSH
6314: LD_VAR 0 4
6318: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6319: LD_ADDR_OWVAR 41
6323: PUSH
6324: LD_VAR 0 5
6328: ST_TO_ADDR
// end ;
6329: LD_VAR 0 6
6333: RET
// export function WantPlant ( unit ) ; var task ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
// result := false ;
6338: LD_ADDR_VAR 0 2
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 437
6360: ST_TO_ADDR
// if task then
6361: LD_VAR 0 3
6365: IFFALSE 6393
// if task [ 1 ] [ 1 ] = p then
6367: LD_VAR 0 3
6371: PUSH
6372: LD_INT 1
6374: ARRAY
6375: PUSH
6376: LD_INT 1
6378: ARRAY
6379: PUSH
6380: LD_STRING p
6382: EQUAL
6383: IFFALSE 6393
// result := true ;
6385: LD_ADDR_VAR 0 2
6389: PUSH
6390: LD_INT 1
6392: ST_TO_ADDR
// end ;
6393: LD_VAR 0 2
6397: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
6402: PPUSH
6403: PPUSH
// if pos < 1 then
6404: LD_VAR 0 2
6408: PUSH
6409: LD_INT 1
6411: LESS
6412: IFFALSE 6416
// exit ;
6414: GO 6719
// if pos = 1 then
6416: LD_VAR 0 2
6420: PUSH
6421: LD_INT 1
6423: EQUAL
6424: IFFALSE 6457
// result := Replace ( arr , pos [ 1 ] , value ) else
6426: LD_ADDR_VAR 0 4
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: LD_VAR 0 2
6440: PUSH
6441: LD_INT 1
6443: ARRAY
6444: PPUSH
6445: LD_VAR 0 3
6449: PPUSH
6450: CALL_OW 1
6454: ST_TO_ADDR
6455: GO 6719
// begin tmp := arr ;
6457: LD_ADDR_VAR 0 6
6461: PUSH
6462: LD_VAR 0 1
6466: ST_TO_ADDR
// s_arr := [ tmp ] ;
6467: LD_ADDR_VAR 0 7
6471: PUSH
6472: LD_VAR 0 6
6476: PUSH
6477: EMPTY
6478: LIST
6479: ST_TO_ADDR
// for i = 1 to pos - 1 do
6480: LD_ADDR_VAR 0 5
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_VAR 0 2
6494: PUSH
6495: LD_INT 1
6497: MINUS
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6545
// begin tmp := tmp [ pos [ i ] ] ;
6502: LD_ADDR_VAR 0 6
6506: PUSH
6507: LD_VAR 0 6
6511: PUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_VAR 0 5
6521: ARRAY
6522: ARRAY
6523: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6524: LD_ADDR_VAR 0 7
6528: PUSH
6529: LD_VAR 0 7
6533: PUSH
6534: LD_VAR 0 6
6538: PUSH
6539: EMPTY
6540: LIST
6541: ADD
6542: ST_TO_ADDR
// end ;
6543: GO 6499
6545: POP
6546: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6547: LD_ADDR_VAR 0 6
6551: PUSH
6552: LD_VAR 0 6
6556: PPUSH
6557: LD_VAR 0 2
6561: PUSH
6562: LD_VAR 0 2
6566: ARRAY
6567: PPUSH
6568: LD_VAR 0 3
6572: PPUSH
6573: CALL_OW 1
6577: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6578: LD_ADDR_VAR 0 7
6582: PUSH
6583: LD_VAR 0 7
6587: PPUSH
6588: LD_VAR 0 7
6592: PPUSH
6593: LD_VAR 0 6
6597: PPUSH
6598: CALL_OW 1
6602: ST_TO_ADDR
// for i = s_arr downto 2 do
6603: LD_ADDR_VAR 0 5
6607: PUSH
6608: DOUBLE
6609: LD_VAR 0 7
6613: INC
6614: ST_TO_ADDR
6615: LD_INT 2
6617: PUSH
6618: FOR_DOWNTO
6619: IFFALSE 6703
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6621: LD_ADDR_VAR 0 6
6625: PUSH
6626: LD_VAR 0 7
6630: PUSH
6631: LD_VAR 0 5
6635: PUSH
6636: LD_INT 1
6638: MINUS
6639: ARRAY
6640: PPUSH
6641: LD_VAR 0 2
6645: PUSH
6646: LD_VAR 0 5
6650: PUSH
6651: LD_INT 1
6653: MINUS
6654: ARRAY
6655: PPUSH
6656: LD_VAR 0 7
6660: PUSH
6661: LD_VAR 0 5
6665: ARRAY
6666: PPUSH
6667: CALL_OW 1
6671: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6672: LD_ADDR_VAR 0 7
6676: PUSH
6677: LD_VAR 0 7
6681: PPUSH
6682: LD_VAR 0 5
6686: PUSH
6687: LD_INT 1
6689: MINUS
6690: PPUSH
6691: LD_VAR 0 6
6695: PPUSH
6696: CALL_OW 1
6700: ST_TO_ADDR
// end ;
6701: GO 6618
6703: POP
6704: POP
// result := s_arr [ 1 ] ;
6705: LD_ADDR_VAR 0 4
6709: PUSH
6710: LD_VAR 0 7
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: ST_TO_ADDR
// end ; end ;
6719: LD_VAR 0 4
6723: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6724: LD_INT 0
6726: PPUSH
6727: PPUSH
// if not list then
6728: LD_VAR 0 1
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6828
// i := list [ pos1 ] ;
6737: LD_ADDR_VAR 0 5
6741: PUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_VAR 0 2
6751: ARRAY
6752: ST_TO_ADDR
// if not i then
6753: LD_VAR 0 5
6757: NOT
6758: IFFALSE 6762
// exit ;
6760: GO 6828
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6762: LD_ADDR_VAR 0 1
6766: PUSH
6767: LD_VAR 0 1
6771: PPUSH
6772: LD_VAR 0 2
6776: PPUSH
6777: LD_VAR 0 1
6781: PUSH
6782: LD_VAR 0 3
6786: ARRAY
6787: PPUSH
6788: CALL_OW 1
6792: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6793: LD_ADDR_VAR 0 1
6797: PUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_VAR 0 5
6812: PPUSH
6813: CALL_OW 1
6817: ST_TO_ADDR
// result := list ;
6818: LD_ADDR_VAR 0 4
6822: PUSH
6823: LD_VAR 0 1
6827: ST_TO_ADDR
// end ;
6828: LD_VAR 0 4
6832: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6833: LD_INT 0
6835: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6836: LD_ADDR_VAR 0 5
6840: PUSH
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 250
6850: PPUSH
6851: LD_VAR 0 1
6855: PPUSH
6856: CALL_OW 251
6860: PPUSH
6861: LD_VAR 0 2
6865: PPUSH
6866: LD_VAR 0 3
6870: PPUSH
6871: LD_VAR 0 4
6875: PPUSH
6876: CALL 6886 0 5
6880: ST_TO_ADDR
// end ;
6881: LD_VAR 0 5
6885: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6886: LD_INT 0
6888: PPUSH
6889: PPUSH
6890: PPUSH
6891: PPUSH
// if not list then
6892: LD_VAR 0 3
6896: NOT
6897: IFFALSE 6901
// exit ;
6899: GO 7289
// result := [ ] ;
6901: LD_ADDR_VAR 0 6
6905: PUSH
6906: EMPTY
6907: ST_TO_ADDR
// for i in list do
6908: LD_ADDR_VAR 0 7
6912: PUSH
6913: LD_VAR 0 3
6917: PUSH
6918: FOR_IN
6919: IFFALSE 7121
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6921: LD_ADDR_VAR 0 9
6925: PUSH
6926: LD_VAR 0 7
6930: PPUSH
6931: LD_VAR 0 1
6935: PPUSH
6936: LD_VAR 0 2
6940: PPUSH
6941: CALL_OW 297
6945: ST_TO_ADDR
// if not result then
6946: LD_VAR 0 6
6950: NOT
6951: IFFALSE 6977
// result := [ [ i , tmp ] ] else
6953: LD_ADDR_VAR 0 6
6957: PUSH
6958: LD_VAR 0 7
6962: PUSH
6963: LD_VAR 0 9
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: ST_TO_ADDR
6975: GO 7119
// begin if result [ result ] [ 2 ] < tmp then
6977: LD_VAR 0 6
6981: PUSH
6982: LD_VAR 0 6
6986: ARRAY
6987: PUSH
6988: LD_INT 2
6990: ARRAY
6991: PUSH
6992: LD_VAR 0 9
6996: LESS
6997: IFFALSE 7039
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6999: LD_ADDR_VAR 0 6
7003: PUSH
7004: LD_VAR 0 6
7008: PPUSH
7009: LD_VAR 0 6
7013: PUSH
7014: LD_INT 1
7016: PLUS
7017: PPUSH
7018: LD_VAR 0 7
7022: PUSH
7023: LD_VAR 0 9
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PPUSH
7032: CALL_OW 2
7036: ST_TO_ADDR
7037: GO 7119
// for j = 1 to result do
7039: LD_ADDR_VAR 0 8
7043: PUSH
7044: DOUBLE
7045: LD_INT 1
7047: DEC
7048: ST_TO_ADDR
7049: LD_VAR 0 6
7053: PUSH
7054: FOR_TO
7055: IFFALSE 7117
// begin if tmp < result [ j ] [ 2 ] then
7057: LD_VAR 0 9
7061: PUSH
7062: LD_VAR 0 6
7066: PUSH
7067: LD_VAR 0 8
7071: ARRAY
7072: PUSH
7073: LD_INT 2
7075: ARRAY
7076: LESS
7077: IFFALSE 7115
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7079: LD_ADDR_VAR 0 6
7083: PUSH
7084: LD_VAR 0 6
7088: PPUSH
7089: LD_VAR 0 8
7093: PPUSH
7094: LD_VAR 0 7
7098: PUSH
7099: LD_VAR 0 9
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 2
7112: ST_TO_ADDR
// break ;
7113: GO 7117
// end ; end ;
7115: GO 7054
7117: POP
7118: POP
// end ; end ;
7119: GO 6918
7121: POP
7122: POP
// if result and not asc then
7123: LD_VAR 0 6
7127: PUSH
7128: LD_VAR 0 4
7132: NOT
7133: AND
7134: IFFALSE 7209
// begin tmp := result ;
7136: LD_ADDR_VAR 0 9
7140: PUSH
7141: LD_VAR 0 6
7145: ST_TO_ADDR
// for i = tmp downto 1 do
7146: LD_ADDR_VAR 0 7
7150: PUSH
7151: DOUBLE
7152: LD_VAR 0 9
7156: INC
7157: ST_TO_ADDR
7158: LD_INT 1
7160: PUSH
7161: FOR_DOWNTO
7162: IFFALSE 7207
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7164: LD_ADDR_VAR 0 6
7168: PUSH
7169: LD_VAR 0 6
7173: PPUSH
7174: LD_VAR 0 9
7178: PUSH
7179: LD_VAR 0 7
7183: MINUS
7184: PUSH
7185: LD_INT 1
7187: PLUS
7188: PPUSH
7189: LD_VAR 0 9
7193: PUSH
7194: LD_VAR 0 7
7198: ARRAY
7199: PPUSH
7200: CALL_OW 1
7204: ST_TO_ADDR
7205: GO 7161
7207: POP
7208: POP
// end ; tmp := [ ] ;
7209: LD_ADDR_VAR 0 9
7213: PUSH
7214: EMPTY
7215: ST_TO_ADDR
// if mode then
7216: LD_VAR 0 5
7220: IFFALSE 7289
// begin for i = 1 to result do
7222: LD_ADDR_VAR 0 7
7226: PUSH
7227: DOUBLE
7228: LD_INT 1
7230: DEC
7231: ST_TO_ADDR
7232: LD_VAR 0 6
7236: PUSH
7237: FOR_TO
7238: IFFALSE 7277
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7240: LD_ADDR_VAR 0 9
7244: PUSH
7245: LD_VAR 0 9
7249: PPUSH
7250: LD_VAR 0 7
7254: PPUSH
7255: LD_VAR 0 6
7259: PUSH
7260: LD_VAR 0 7
7264: ARRAY
7265: PUSH
7266: LD_INT 1
7268: ARRAY
7269: PPUSH
7270: CALL_OW 1
7274: ST_TO_ADDR
7275: GO 7237
7277: POP
7278: POP
// result := tmp ;
7279: LD_ADDR_VAR 0 6
7283: PUSH
7284: LD_VAR 0 9
7288: ST_TO_ADDR
// end ; end ;
7289: LD_VAR 0 6
7293: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7294: LD_INT 0
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7302: LD_ADDR_VAR 0 5
7306: PUSH
7307: LD_INT 0
7309: PUSH
7310: LD_INT 0
7312: PUSH
7313: LD_INT 0
7315: PUSH
7316: EMPTY
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: ST_TO_ADDR
// if not x or not y then
7324: LD_VAR 0 2
7328: NOT
7329: PUSH
7330: LD_VAR 0 3
7334: NOT
7335: OR
7336: IFFALSE 7340
// exit ;
7338: GO 8990
// if not range then
7340: LD_VAR 0 4
7344: NOT
7345: IFFALSE 7355
// range := 10 ;
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: LD_INT 10
7354: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7355: LD_ADDR_VAR 0 8
7359: PUSH
7360: LD_INT 81
7362: PUSH
7363: LD_VAR 0 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 92
7374: PUSH
7375: LD_VAR 0 2
7379: PUSH
7380: LD_VAR 0 3
7384: PUSH
7385: LD_VAR 0 4
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 21
7401: PUSH
7402: LD_INT 3
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 69
7422: ST_TO_ADDR
// if not tmp then
7423: LD_VAR 0 8
7427: NOT
7428: IFFALSE 7432
// exit ;
7430: GO 8990
// for i in tmp do
7432: LD_ADDR_VAR 0 6
7436: PUSH
7437: LD_VAR 0 8
7441: PUSH
7442: FOR_IN
7443: IFFALSE 8965
// begin points := [ 0 , 0 , 0 ] ;
7445: LD_ADDR_VAR 0 9
7449: PUSH
7450: LD_INT 0
7452: PUSH
7453: LD_INT 0
7455: PUSH
7456: LD_INT 0
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: LIST
7463: ST_TO_ADDR
// bpoints := 1 ;
7464: LD_ADDR_VAR 0 10
7468: PUSH
7469: LD_INT 1
7471: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7472: LD_VAR 0 6
7476: PPUSH
7477: CALL_OW 247
7481: PUSH
7482: LD_INT 1
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 8068
7490: POP
// begin if GetClass ( i ) = 1 then
7491: LD_VAR 0 6
7495: PPUSH
7496: CALL_OW 257
7500: PUSH
7501: LD_INT 1
7503: EQUAL
7504: IFFALSE 7525
// points := [ 10 , 5 , 3 ] ;
7506: LD_ADDR_VAR 0 9
7510: PUSH
7511: LD_INT 10
7513: PUSH
7514: LD_INT 5
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7525: LD_VAR 0 6
7529: PPUSH
7530: CALL_OW 257
7534: PUSH
7535: LD_INT 2
7537: PUSH
7538: LD_INT 3
7540: PUSH
7541: LD_INT 4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: IN
7549: IFFALSE 7570
// points := [ 3 , 2 , 1 ] ;
7551: LD_ADDR_VAR 0 9
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: LD_INT 2
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL_OW 257
7579: PUSH
7580: LD_INT 5
7582: EQUAL
7583: IFFALSE 7604
// points := [ 130 , 5 , 2 ] ;
7585: LD_ADDR_VAR 0 9
7589: PUSH
7590: LD_INT 130
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7604: LD_VAR 0 6
7608: PPUSH
7609: CALL_OW 257
7613: PUSH
7614: LD_INT 8
7616: EQUAL
7617: IFFALSE 7638
// points := [ 35 , 35 , 30 ] ;
7619: LD_ADDR_VAR 0 9
7623: PUSH
7624: LD_INT 35
7626: PUSH
7627: LD_INT 35
7629: PUSH
7630: LD_INT 30
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7638: LD_VAR 0 6
7642: PPUSH
7643: CALL_OW 257
7647: PUSH
7648: LD_INT 9
7650: EQUAL
7651: IFFALSE 7672
// points := [ 20 , 55 , 40 ] ;
7653: LD_ADDR_VAR 0 9
7657: PUSH
7658: LD_INT 20
7660: PUSH
7661: LD_INT 55
7663: PUSH
7664: LD_INT 40
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7672: LD_VAR 0 6
7676: PPUSH
7677: CALL_OW 257
7681: PUSH
7682: LD_INT 12
7684: PUSH
7685: LD_INT 16
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: IN
7692: IFFALSE 7713
// points := [ 5 , 3 , 2 ] ;
7694: LD_ADDR_VAR 0 9
7698: PUSH
7699: LD_INT 5
7701: PUSH
7702: LD_INT 3
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7713: LD_VAR 0 6
7717: PPUSH
7718: CALL_OW 257
7722: PUSH
7723: LD_INT 17
7725: EQUAL
7726: IFFALSE 7747
// points := [ 100 , 50 , 75 ] ;
7728: LD_ADDR_VAR 0 9
7732: PUSH
7733: LD_INT 100
7735: PUSH
7736: LD_INT 50
7738: PUSH
7739: LD_INT 75
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7747: LD_VAR 0 6
7751: PPUSH
7752: CALL_OW 257
7756: PUSH
7757: LD_INT 15
7759: EQUAL
7760: IFFALSE 7781
// points := [ 10 , 5 , 3 ] ;
7762: LD_ADDR_VAR 0 9
7766: PUSH
7767: LD_INT 10
7769: PUSH
7770: LD_INT 5
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7781: LD_VAR 0 6
7785: PPUSH
7786: CALL_OW 257
7790: PUSH
7791: LD_INT 14
7793: EQUAL
7794: IFFALSE 7815
// points := [ 10 , 0 , 0 ] ;
7796: LD_ADDR_VAR 0 9
7800: PUSH
7801: LD_INT 10
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7815: LD_VAR 0 6
7819: PPUSH
7820: CALL_OW 257
7824: PUSH
7825: LD_INT 11
7827: EQUAL
7828: IFFALSE 7849
// points := [ 30 , 10 , 5 ] ;
7830: LD_ADDR_VAR 0 9
7834: PUSH
7835: LD_INT 30
7837: PUSH
7838: LD_INT 10
7840: PUSH
7841: LD_INT 5
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_INT 5
7856: PPUSH
7857: CALL_OW 321
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 7882
// bpoints := bpoints * 1.8 ;
7867: LD_ADDR_VAR 0 10
7871: PUSH
7872: LD_VAR 0 10
7876: PUSH
7877: LD_REAL  1.80000000000000E+0000
7880: MUL
7881: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7882: LD_VAR 0 6
7886: PPUSH
7887: CALL_OW 257
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: LD_INT 2
7897: PUSH
7898: LD_INT 3
7900: PUSH
7901: LD_INT 4
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: IN
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_INT 51
7918: PPUSH
7919: CALL_OW 321
7923: PUSH
7924: LD_INT 2
7926: EQUAL
7927: AND
7928: IFFALSE 7945
// bpoints := bpoints * 1.2 ;
7930: LD_ADDR_VAR 0 10
7934: PUSH
7935: LD_VAR 0 10
7939: PUSH
7940: LD_REAL  1.20000000000000E+0000
7943: MUL
7944: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7945: LD_VAR 0 6
7949: PPUSH
7950: CALL_OW 257
7954: PUSH
7955: LD_INT 5
7957: PUSH
7958: LD_INT 7
7960: PUSH
7961: LD_INT 9
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: IN
7969: PUSH
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_INT 52
7977: PPUSH
7978: CALL_OW 321
7982: PUSH
7983: LD_INT 2
7985: EQUAL
7986: AND
7987: IFFALSE 8004
// bpoints := bpoints * 1.5 ;
7989: LD_ADDR_VAR 0 10
7993: PUSH
7994: LD_VAR 0 10
7998: PUSH
7999: LD_REAL  1.50000000000000E+0000
8002: MUL
8003: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8004: LD_VAR 0 1
8008: PPUSH
8009: LD_INT 66
8011: PPUSH
8012: CALL_OW 321
8016: PUSH
8017: LD_INT 2
8019: EQUAL
8020: IFFALSE 8037
// bpoints := bpoints * 1.1 ;
8022: LD_ADDR_VAR 0 10
8026: PUSH
8027: LD_VAR 0 10
8031: PUSH
8032: LD_REAL  1.10000000000000E+0000
8035: MUL
8036: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8037: LD_ADDR_VAR 0 10
8041: PUSH
8042: LD_VAR 0 10
8046: PUSH
8047: LD_VAR 0 6
8051: PPUSH
8052: LD_INT 1
8054: PPUSH
8055: CALL_OW 259
8059: PUSH
8060: LD_REAL  1.15000000000000E+0000
8063: MUL
8064: MUL
8065: ST_TO_ADDR
// end ; unit_vehicle :
8066: GO 8894
8068: LD_INT 2
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8882
8076: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8077: LD_VAR 0 6
8081: PPUSH
8082: CALL_OW 264
8086: PUSH
8087: LD_INT 2
8089: PUSH
8090: LD_INT 42
8092: PUSH
8093: LD_INT 24
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: IN
8101: IFFALSE 8122
// points := [ 25 , 5 , 3 ] ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_INT 25
8110: PUSH
8111: LD_INT 5
8113: PUSH
8114: LD_INT 3
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8122: LD_VAR 0 6
8126: PPUSH
8127: CALL_OW 264
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: LD_INT 43
8137: PUSH
8138: LD_INT 25
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: IN
8146: IFFALSE 8167
// points := [ 40 , 15 , 5 ] ;
8148: LD_ADDR_VAR 0 9
8152: PUSH
8153: LD_INT 40
8155: PUSH
8156: LD_INT 15
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8167: LD_VAR 0 6
8171: PPUSH
8172: CALL_OW 264
8176: PUSH
8177: LD_INT 3
8179: PUSH
8180: LD_INT 23
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: IN
8187: IFFALSE 8208
// points := [ 7 , 25 , 8 ] ;
8189: LD_ADDR_VAR 0 9
8193: PUSH
8194: LD_INT 7
8196: PUSH
8197: LD_INT 25
8199: PUSH
8200: LD_INT 8
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8208: LD_VAR 0 6
8212: PPUSH
8213: CALL_OW 264
8217: PUSH
8218: LD_INT 5
8220: PUSH
8221: LD_INT 27
8223: PUSH
8224: LD_INT 44
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: IN
8232: IFFALSE 8253
// points := [ 14 , 50 , 16 ] ;
8234: LD_ADDR_VAR 0 9
8238: PUSH
8239: LD_INT 14
8241: PUSH
8242: LD_INT 50
8244: PUSH
8245: LD_INT 16
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8253: LD_VAR 0 6
8257: PPUSH
8258: CALL_OW 264
8262: PUSH
8263: LD_INT 6
8265: PUSH
8266: LD_INT 46
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: IN
8273: IFFALSE 8294
// points := [ 32 , 120 , 70 ] ;
8275: LD_ADDR_VAR 0 9
8279: PUSH
8280: LD_INT 32
8282: PUSH
8283: LD_INT 120
8285: PUSH
8286: LD_INT 70
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8294: LD_VAR 0 6
8298: PPUSH
8299: CALL_OW 264
8303: PUSH
8304: LD_INT 7
8306: PUSH
8307: LD_INT 28
8309: PUSH
8310: LD_INT 45
8312: PUSH
8313: LD_INT 92
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: IN
8322: IFFALSE 8343
// points := [ 35 , 20 , 45 ] ;
8324: LD_ADDR_VAR 0 9
8328: PUSH
8329: LD_INT 35
8331: PUSH
8332: LD_INT 20
8334: PUSH
8335: LD_INT 45
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8343: LD_VAR 0 6
8347: PPUSH
8348: CALL_OW 264
8352: PUSH
8353: LD_INT 47
8355: PUSH
8356: EMPTY
8357: LIST
8358: IN
8359: IFFALSE 8380
// points := [ 67 , 45 , 75 ] ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_INT 67
8368: PUSH
8369: LD_INT 45
8371: PUSH
8372: LD_INT 75
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8380: LD_VAR 0 6
8384: PPUSH
8385: CALL_OW 264
8389: PUSH
8390: LD_INT 26
8392: PUSH
8393: EMPTY
8394: LIST
8395: IN
8396: IFFALSE 8417
// points := [ 120 , 30 , 80 ] ;
8398: LD_ADDR_VAR 0 9
8402: PUSH
8403: LD_INT 120
8405: PUSH
8406: LD_INT 30
8408: PUSH
8409: LD_INT 80
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8417: LD_VAR 0 6
8421: PPUSH
8422: CALL_OW 264
8426: PUSH
8427: LD_INT 22
8429: PUSH
8430: EMPTY
8431: LIST
8432: IN
8433: IFFALSE 8454
// points := [ 40 , 1 , 1 ] ;
8435: LD_ADDR_VAR 0 9
8439: PUSH
8440: LD_INT 40
8442: PUSH
8443: LD_INT 1
8445: PUSH
8446: LD_INT 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8454: LD_VAR 0 6
8458: PPUSH
8459: CALL_OW 264
8463: PUSH
8464: LD_INT 29
8466: PUSH
8467: EMPTY
8468: LIST
8469: IN
8470: IFFALSE 8491
// points := [ 70 , 200 , 400 ] ;
8472: LD_ADDR_VAR 0 9
8476: PUSH
8477: LD_INT 70
8479: PUSH
8480: LD_INT 200
8482: PUSH
8483: LD_INT 400
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8491: LD_VAR 0 6
8495: PPUSH
8496: CALL_OW 264
8500: PUSH
8501: LD_INT 14
8503: PUSH
8504: LD_INT 53
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: IN
8511: IFFALSE 8532
// points := [ 40 , 10 , 20 ] ;
8513: LD_ADDR_VAR 0 9
8517: PUSH
8518: LD_INT 40
8520: PUSH
8521: LD_INT 10
8523: PUSH
8524: LD_INT 20
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8532: LD_VAR 0 6
8536: PPUSH
8537: CALL_OW 264
8541: PUSH
8542: LD_INT 9
8544: PUSH
8545: EMPTY
8546: LIST
8547: IN
8548: IFFALSE 8569
// points := [ 5 , 70 , 20 ] ;
8550: LD_ADDR_VAR 0 9
8554: PUSH
8555: LD_INT 5
8557: PUSH
8558: LD_INT 70
8560: PUSH
8561: LD_INT 20
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8569: LD_VAR 0 6
8573: PPUSH
8574: CALL_OW 264
8578: PUSH
8579: LD_INT 10
8581: PUSH
8582: EMPTY
8583: LIST
8584: IN
8585: IFFALSE 8606
// points := [ 35 , 110 , 70 ] ;
8587: LD_ADDR_VAR 0 9
8591: PUSH
8592: LD_INT 35
8594: PUSH
8595: LD_INT 110
8597: PUSH
8598: LD_INT 70
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8606: LD_VAR 0 6
8610: PPUSH
8611: CALL_OW 265
8615: PUSH
8616: LD_INT 25
8618: EQUAL
8619: IFFALSE 8640
// points := [ 80 , 65 , 100 ] ;
8621: LD_ADDR_VAR 0 9
8625: PUSH
8626: LD_INT 80
8628: PUSH
8629: LD_INT 65
8631: PUSH
8632: LD_INT 100
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: LIST
8639: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8640: LD_VAR 0 6
8644: PPUSH
8645: CALL_OW 263
8649: PUSH
8650: LD_INT 1
8652: EQUAL
8653: IFFALSE 8688
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8655: LD_ADDR_VAR 0 10
8659: PUSH
8660: LD_VAR 0 10
8664: PUSH
8665: LD_VAR 0 6
8669: PPUSH
8670: CALL_OW 311
8674: PPUSH
8675: LD_INT 3
8677: PPUSH
8678: CALL_OW 259
8682: PUSH
8683: LD_INT 4
8685: MUL
8686: MUL
8687: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8688: LD_VAR 0 6
8692: PPUSH
8693: CALL_OW 263
8697: PUSH
8698: LD_INT 2
8700: EQUAL
8701: IFFALSE 8752
// begin j := IsControledBy ( i ) ;
8703: LD_ADDR_VAR 0 7
8707: PUSH
8708: LD_VAR 0 6
8712: PPUSH
8713: CALL_OW 312
8717: ST_TO_ADDR
// if j then
8718: LD_VAR 0 7
8722: IFFALSE 8752
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8724: LD_ADDR_VAR 0 10
8728: PUSH
8729: LD_VAR 0 10
8733: PUSH
8734: LD_VAR 0 7
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 259
8746: PUSH
8747: LD_INT 3
8749: MUL
8750: MUL
8751: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8752: LD_VAR 0 6
8756: PPUSH
8757: CALL_OW 264
8761: PUSH
8762: LD_INT 5
8764: PUSH
8765: LD_INT 6
8767: PUSH
8768: LD_INT 46
8770: PUSH
8771: LD_INT 44
8773: PUSH
8774: LD_INT 47
8776: PUSH
8777: LD_INT 45
8779: PUSH
8780: LD_INT 28
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 27
8788: PUSH
8789: LD_INT 29
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: IN
8804: PUSH
8805: LD_VAR 0 1
8809: PPUSH
8810: LD_INT 52
8812: PPUSH
8813: CALL_OW 321
8817: PUSH
8818: LD_INT 2
8820: EQUAL
8821: AND
8822: IFFALSE 8839
// bpoints := bpoints * 1.2 ;
8824: LD_ADDR_VAR 0 10
8828: PUSH
8829: LD_VAR 0 10
8833: PUSH
8834: LD_REAL  1.20000000000000E+0000
8837: MUL
8838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8839: LD_VAR 0 6
8843: PPUSH
8844: CALL_OW 264
8848: PUSH
8849: LD_INT 6
8851: PUSH
8852: LD_INT 46
8854: PUSH
8855: LD_INT 47
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: IN
8863: IFFALSE 8880
// bpoints := bpoints * 1.2 ;
8865: LD_ADDR_VAR 0 10
8869: PUSH
8870: LD_VAR 0 10
8874: PUSH
8875: LD_REAL  1.20000000000000E+0000
8878: MUL
8879: ST_TO_ADDR
// end ; unit_building :
8880: GO 8894
8882: LD_INT 3
8884: DOUBLE
8885: EQUAL
8886: IFTRUE 8890
8888: GO 8893
8890: POP
// ; end ;
8891: GO 8894
8893: POP
// for j = 1 to 3 do
8894: LD_ADDR_VAR 0 7
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 3
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8961
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8910: LD_ADDR_VAR 0 5
8914: PUSH
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_VAR 0 7
8924: PPUSH
8925: LD_VAR 0 5
8929: PUSH
8930: LD_VAR 0 7
8934: ARRAY
8935: PUSH
8936: LD_VAR 0 9
8940: PUSH
8941: LD_VAR 0 7
8945: ARRAY
8946: PUSH
8947: LD_VAR 0 10
8951: MUL
8952: PLUS
8953: PPUSH
8954: CALL_OW 1
8958: ST_TO_ADDR
8959: GO 8907
8961: POP
8962: POP
// end ;
8963: GO 7442
8965: POP
8966: POP
// result := Replace ( result , 4 , tmp ) ;
8967: LD_ADDR_VAR 0 5
8971: PUSH
8972: LD_VAR 0 5
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: LD_VAR 0 8
8984: PPUSH
8985: CALL_OW 1
8989: ST_TO_ADDR
// end ;
8990: LD_VAR 0 5
8994: RET
// export function DangerAtRange ( unit , range ) ; begin
8995: LD_INT 0
8997: PPUSH
// if not unit then
8998: LD_VAR 0 1
9002: NOT
9003: IFFALSE 9007
// exit ;
9005: GO 9052
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9007: LD_ADDR_VAR 0 3
9011: PUSH
9012: LD_VAR 0 1
9016: PPUSH
9017: CALL_OW 255
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 250
9031: PPUSH
9032: LD_VAR 0 1
9036: PPUSH
9037: CALL_OW 251
9041: PPUSH
9042: LD_VAR 0 2
9046: PPUSH
9047: CALL 7294 0 4
9051: ST_TO_ADDR
// end ;
9052: LD_VAR 0 3
9056: RET
// export function DangerInArea ( side , area ) ; begin
9057: LD_INT 0
9059: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9060: LD_ADDR_VAR 0 3
9064: PUSH
9065: LD_VAR 0 2
9069: PPUSH
9070: LD_INT 81
9072: PUSH
9073: LD_VAR 0 1
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PPUSH
9082: CALL_OW 70
9086: ST_TO_ADDR
// end ;
9087: LD_VAR 0 3
9091: RET
// export function IsExtension ( b ) ; begin
9092: LD_INT 0
9094: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_VAR 0 1
9104: PUSH
9105: LD_INT 23
9107: PUSH
9108: LD_INT 20
9110: PUSH
9111: LD_INT 22
9113: PUSH
9114: LD_INT 17
9116: PUSH
9117: LD_INT 24
9119: PUSH
9120: LD_INT 21
9122: PUSH
9123: LD_INT 19
9125: PUSH
9126: LD_INT 16
9128: PUSH
9129: LD_INT 25
9131: PUSH
9132: LD_INT 18
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: IN
9147: ST_TO_ADDR
// end ;
9148: LD_VAR 0 2
9152: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9153: LD_INT 0
9155: PPUSH
9156: PPUSH
9157: PPUSH
// result := [ ] ;
9158: LD_ADDR_VAR 0 4
9162: PUSH
9163: EMPTY
9164: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9165: LD_ADDR_VAR 0 5
9169: PUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: LD_INT 21
9177: PUSH
9178: LD_INT 3
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PPUSH
9185: CALL_OW 70
9189: ST_TO_ADDR
// if not tmp then
9190: LD_VAR 0 5
9194: NOT
9195: IFFALSE 9199
// exit ;
9197: GO 9263
// if checkLink then
9199: LD_VAR 0 3
9203: IFFALSE 9253
// begin for i in tmp do
9205: LD_ADDR_VAR 0 6
9209: PUSH
9210: LD_VAR 0 5
9214: PUSH
9215: FOR_IN
9216: IFFALSE 9251
// if GetBase ( i ) <> base then
9218: LD_VAR 0 6
9222: PPUSH
9223: CALL_OW 274
9227: PUSH
9228: LD_VAR 0 1
9232: NONEQUAL
9233: IFFALSE 9249
// ComLinkToBase ( base , i ) ;
9235: LD_VAR 0 1
9239: PPUSH
9240: LD_VAR 0 6
9244: PPUSH
9245: CALL_OW 169
9249: GO 9215
9251: POP
9252: POP
// end ; result := tmp ;
9253: LD_ADDR_VAR 0 4
9257: PUSH
9258: LD_VAR 0 5
9262: ST_TO_ADDR
// end ;
9263: LD_VAR 0 4
9267: RET
// export function ComComplete ( units , b ) ; var i ; begin
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
// if not units then
9272: LD_VAR 0 1
9276: NOT
9277: IFFALSE 9281
// exit ;
9279: GO 9371
// for i in units do
9281: LD_ADDR_VAR 0 4
9285: PUSH
9286: LD_VAR 0 1
9290: PUSH
9291: FOR_IN
9292: IFFALSE 9369
// if BuildingStatus ( b ) = bs_build then
9294: LD_VAR 0 2
9298: PPUSH
9299: CALL_OW 461
9303: PUSH
9304: LD_INT 1
9306: EQUAL
9307: IFFALSE 9367
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9309: LD_VAR 0 4
9313: PPUSH
9314: LD_STRING h
9316: PUSH
9317: LD_VAR 0 2
9321: PPUSH
9322: CALL_OW 250
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 251
9336: PUSH
9337: LD_VAR 0 2
9341: PUSH
9342: LD_INT 0
9344: PUSH
9345: LD_INT 0
9347: PUSH
9348: LD_INT 0
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: PPUSH
9363: CALL_OW 446
9367: GO 9291
9369: POP
9370: POP
// end ;
9371: LD_VAR 0 3
9375: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9376: LD_INT 0
9378: PPUSH
9379: PPUSH
9380: PPUSH
9381: PPUSH
9382: PPUSH
9383: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9384: LD_VAR 0 1
9388: NOT
9389: PUSH
9390: LD_VAR 0 1
9394: PPUSH
9395: CALL_OW 263
9399: PUSH
9400: LD_INT 2
9402: NONEQUAL
9403: OR
9404: IFFALSE 9408
// exit ;
9406: GO 9724
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9408: LD_ADDR_VAR 0 6
9412: PUSH
9413: LD_INT 22
9415: PUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 255
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 2
9432: PUSH
9433: LD_INT 30
9435: PUSH
9436: LD_INT 36
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 34
9445: PUSH
9446: LD_INT 31
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PPUSH
9462: CALL_OW 69
9466: ST_TO_ADDR
// if not tmp then
9467: LD_VAR 0 6
9471: NOT
9472: IFFALSE 9476
// exit ;
9474: GO 9724
// result := [ ] ;
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: EMPTY
9482: ST_TO_ADDR
// for i in tmp do
9483: LD_ADDR_VAR 0 3
9487: PUSH
9488: LD_VAR 0 6
9492: PUSH
9493: FOR_IN
9494: IFFALSE 9565
// begin t := UnitsInside ( i ) ;
9496: LD_ADDR_VAR 0 4
9500: PUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: CALL_OW 313
9510: ST_TO_ADDR
// if t then
9511: LD_VAR 0 4
9515: IFFALSE 9563
// for j in t do
9517: LD_ADDR_VAR 0 7
9521: PUSH
9522: LD_VAR 0 4
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9561
// result := Replace ( result , result + 1 , j ) ;
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: LD_VAR 0 2
9539: PPUSH
9540: LD_VAR 0 2
9544: PUSH
9545: LD_INT 1
9547: PLUS
9548: PPUSH
9549: LD_VAR 0 7
9553: PPUSH
9554: CALL_OW 1
9558: ST_TO_ADDR
9559: GO 9527
9561: POP
9562: POP
// end ;
9563: GO 9493
9565: POP
9566: POP
// if not result then
9567: LD_VAR 0 2
9571: NOT
9572: IFFALSE 9576
// exit ;
9574: GO 9724
// mech := result [ 1 ] ;
9576: LD_ADDR_VAR 0 5
9580: PUSH
9581: LD_VAR 0 2
9585: PUSH
9586: LD_INT 1
9588: ARRAY
9589: ST_TO_ADDR
// if result > 1 then
9590: LD_VAR 0 2
9594: PUSH
9595: LD_INT 1
9597: GREATER
9598: IFFALSE 9710
// begin for i = 2 to result do
9600: LD_ADDR_VAR 0 3
9604: PUSH
9605: DOUBLE
9606: LD_INT 2
9608: DEC
9609: ST_TO_ADDR
9610: LD_VAR 0 2
9614: PUSH
9615: FOR_TO
9616: IFFALSE 9708
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9618: LD_ADDR_VAR 0 4
9622: PUSH
9623: LD_VAR 0 2
9627: PUSH
9628: LD_VAR 0 3
9632: ARRAY
9633: PPUSH
9634: LD_INT 3
9636: PPUSH
9637: CALL_OW 259
9641: PUSH
9642: LD_VAR 0 2
9646: PUSH
9647: LD_VAR 0 3
9651: ARRAY
9652: PPUSH
9653: CALL_OW 432
9657: MINUS
9658: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9659: LD_VAR 0 4
9663: PUSH
9664: LD_VAR 0 5
9668: PPUSH
9669: LD_INT 3
9671: PPUSH
9672: CALL_OW 259
9676: PUSH
9677: LD_VAR 0 5
9681: PPUSH
9682: CALL_OW 432
9686: MINUS
9687: GREATEREQUAL
9688: IFFALSE 9706
// mech := result [ i ] ;
9690: LD_ADDR_VAR 0 5
9694: PUSH
9695: LD_VAR 0 2
9699: PUSH
9700: LD_VAR 0 3
9704: ARRAY
9705: ST_TO_ADDR
// end ;
9706: GO 9615
9708: POP
9709: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9710: LD_VAR 0 1
9714: PPUSH
9715: LD_VAR 0 5
9719: PPUSH
9720: CALL_OW 135
// end ;
9724: LD_VAR 0 2
9728: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9729: LD_INT 0
9731: PPUSH
9732: PPUSH
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
9739: PPUSH
9740: PPUSH
9741: PPUSH
9742: PPUSH
9743: PPUSH
// result := [ ] ;
9744: LD_ADDR_VAR 0 7
9748: PUSH
9749: EMPTY
9750: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9751: LD_VAR 0 1
9755: PPUSH
9756: CALL_OW 266
9760: PUSH
9761: LD_INT 0
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: IN
9771: NOT
9772: IFFALSE 9776
// exit ;
9774: GO 11410
// if name then
9776: LD_VAR 0 3
9780: IFFALSE 9796
// SetBName ( base_dep , name ) ;
9782: LD_VAR 0 1
9786: PPUSH
9787: LD_VAR 0 3
9791: PPUSH
9792: CALL_OW 500
// base := GetBase ( base_dep ) ;
9796: LD_ADDR_VAR 0 15
9800: PUSH
9801: LD_VAR 0 1
9805: PPUSH
9806: CALL_OW 274
9810: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9811: LD_ADDR_VAR 0 16
9815: PUSH
9816: LD_VAR 0 1
9820: PPUSH
9821: CALL_OW 255
9825: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9826: LD_ADDR_VAR 0 17
9830: PUSH
9831: LD_VAR 0 1
9835: PPUSH
9836: CALL_OW 248
9840: ST_TO_ADDR
// if sources then
9841: LD_VAR 0 5
9845: IFFALSE 9892
// for i = 1 to 3 do
9847: LD_ADDR_VAR 0 8
9851: PUSH
9852: DOUBLE
9853: LD_INT 1
9855: DEC
9856: ST_TO_ADDR
9857: LD_INT 3
9859: PUSH
9860: FOR_TO
9861: IFFALSE 9890
// AddResourceType ( base , i , sources [ i ] ) ;
9863: LD_VAR 0 15
9867: PPUSH
9868: LD_VAR 0 8
9872: PPUSH
9873: LD_VAR 0 5
9877: PUSH
9878: LD_VAR 0 8
9882: ARRAY
9883: PPUSH
9884: CALL_OW 276
9888: GO 9860
9890: POP
9891: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9892: LD_ADDR_VAR 0 18
9896: PUSH
9897: LD_VAR 0 15
9901: PPUSH
9902: LD_VAR 0 2
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL 9153 0 3
9914: ST_TO_ADDR
// InitHc ;
9915: CALL_OW 19
// InitUc ;
9919: CALL_OW 18
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 16
9932: ST_TO_ADDR
// uc_nation := nation ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_VAR 0 17
9942: ST_TO_ADDR
// if buildings then
9943: LD_VAR 0 18
9947: IFFALSE 11269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9949: LD_ADDR_VAR 0 19
9953: PUSH
9954: LD_VAR 0 18
9958: PPUSH
9959: LD_INT 2
9961: PUSH
9962: LD_INT 30
9964: PUSH
9965: LD_INT 29
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 30
9974: PUSH
9975: LD_INT 30
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 72
9991: ST_TO_ADDR
// if tmp then
9992: LD_VAR 0 19
9996: IFFALSE 10044
// for i in tmp do
9998: LD_ADDR_VAR 0 8
10002: PUSH
10003: LD_VAR 0 19
10007: PUSH
10008: FOR_IN
10009: IFFALSE 10042
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10011: LD_VAR 0 8
10015: PPUSH
10016: CALL_OW 250
10020: PPUSH
10021: LD_VAR 0 8
10025: PPUSH
10026: CALL_OW 251
10030: PPUSH
10031: LD_VAR 0 16
10035: PPUSH
10036: CALL_OW 441
10040: GO 10008
10042: POP
10043: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10044: LD_VAR 0 18
10048: PPUSH
10049: LD_INT 2
10051: PUSH
10052: LD_INT 30
10054: PUSH
10055: LD_INT 32
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 30
10064: PUSH
10065: LD_INT 33
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 72
10081: IFFALSE 10169
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10083: LD_ADDR_VAR 0 8
10087: PUSH
10088: LD_VAR 0 18
10092: PPUSH
10093: LD_INT 2
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_INT 32
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 30
10108: PUSH
10109: LD_INT 33
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 72
10125: PUSH
10126: FOR_IN
10127: IFFALSE 10167
// begin if not GetBWeapon ( i ) then
10129: LD_VAR 0 8
10133: PPUSH
10134: CALL_OW 269
10138: NOT
10139: IFFALSE 10165
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10141: LD_VAR 0 8
10145: PPUSH
10146: LD_VAR 0 8
10150: PPUSH
10151: LD_VAR 0 2
10155: PPUSH
10156: CALL 11415 0 2
10160: PPUSH
10161: CALL_OW 431
// end ;
10165: GO 10126
10167: POP
10168: POP
// end ; for i = 1 to personel do
10169: LD_ADDR_VAR 0 8
10173: PUSH
10174: DOUBLE
10175: LD_INT 1
10177: DEC
10178: ST_TO_ADDR
10179: LD_VAR 0 6
10183: PUSH
10184: FOR_TO
10185: IFFALSE 11249
// begin if i > 4 then
10187: LD_VAR 0 8
10191: PUSH
10192: LD_INT 4
10194: GREATER
10195: IFFALSE 10199
// break ;
10197: GO 11249
// case i of 1 :
10199: LD_VAR 0 8
10203: PUSH
10204: LD_INT 1
10206: DOUBLE
10207: EQUAL
10208: IFTRUE 10212
10210: GO 10292
10212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10213: LD_ADDR_VAR 0 12
10217: PUSH
10218: LD_VAR 0 18
10222: PPUSH
10223: LD_INT 22
10225: PUSH
10226: LD_VAR 0 16
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: LD_INT 30
10246: PUSH
10247: LD_INT 32
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 30
10256: PUSH
10257: LD_INT 4
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 30
10266: PUSH
10267: LD_INT 5
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 72
10289: ST_TO_ADDR
10290: GO 10514
10292: LD_INT 2
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 10362
10300: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10301: LD_ADDR_VAR 0 12
10305: PUSH
10306: LD_VAR 0 18
10310: PPUSH
10311: LD_INT 22
10313: PUSH
10314: LD_VAR 0 16
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 30
10328: PUSH
10329: LD_INT 0
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PPUSH
10355: CALL_OW 72
10359: ST_TO_ADDR
10360: GO 10514
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10432
10370: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10371: LD_ADDR_VAR 0 12
10375: PUSH
10376: LD_VAR 0 18
10380: PPUSH
10381: LD_INT 22
10383: PUSH
10384: LD_VAR 0 16
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 2
10395: PUSH
10396: LD_INT 30
10398: PUSH
10399: LD_INT 2
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 30
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: CALL_OW 72
10429: ST_TO_ADDR
10430: GO 10514
10432: LD_INT 4
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10513
10440: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10441: LD_ADDR_VAR 0 12
10445: PUSH
10446: LD_VAR 0 18
10450: PPUSH
10451: LD_INT 22
10453: PUSH
10454: LD_VAR 0 16
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 2
10465: PUSH
10466: LD_INT 30
10468: PUSH
10469: LD_INT 6
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 30
10478: PUSH
10479: LD_INT 7
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 30
10488: PUSH
10489: LD_INT 8
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 72
10510: ST_TO_ADDR
10511: GO 10514
10513: POP
// if i = 1 then
10514: LD_VAR 0 8
10518: PUSH
10519: LD_INT 1
10521: EQUAL
10522: IFFALSE 10633
// begin tmp := [ ] ;
10524: LD_ADDR_VAR 0 19
10528: PUSH
10529: EMPTY
10530: ST_TO_ADDR
// for j in f do
10531: LD_ADDR_VAR 0 9
10535: PUSH
10536: LD_VAR 0 12
10540: PUSH
10541: FOR_IN
10542: IFFALSE 10615
// if GetBType ( j ) = b_bunker then
10544: LD_VAR 0 9
10548: PPUSH
10549: CALL_OW 266
10553: PUSH
10554: LD_INT 32
10556: EQUAL
10557: IFFALSE 10584
// tmp := Insert ( tmp , 1 , j ) else
10559: LD_ADDR_VAR 0 19
10563: PUSH
10564: LD_VAR 0 19
10568: PPUSH
10569: LD_INT 1
10571: PPUSH
10572: LD_VAR 0 9
10576: PPUSH
10577: CALL_OW 2
10581: ST_TO_ADDR
10582: GO 10613
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10584: LD_ADDR_VAR 0 19
10588: PUSH
10589: LD_VAR 0 19
10593: PPUSH
10594: LD_VAR 0 19
10598: PUSH
10599: LD_INT 1
10601: PLUS
10602: PPUSH
10603: LD_VAR 0 9
10607: PPUSH
10608: CALL_OW 2
10612: ST_TO_ADDR
10613: GO 10541
10615: POP
10616: POP
// if tmp then
10617: LD_VAR 0 19
10621: IFFALSE 10633
// f := tmp ;
10623: LD_ADDR_VAR 0 12
10627: PUSH
10628: LD_VAR 0 19
10632: ST_TO_ADDR
// end ; x := personel [ i ] ;
10633: LD_ADDR_VAR 0 13
10637: PUSH
10638: LD_VAR 0 6
10642: PUSH
10643: LD_VAR 0 8
10647: ARRAY
10648: ST_TO_ADDR
// if x = - 1 then
10649: LD_VAR 0 13
10653: PUSH
10654: LD_INT 1
10656: NEG
10657: EQUAL
10658: IFFALSE 10867
// begin for j in f do
10660: LD_ADDR_VAR 0 9
10664: PUSH
10665: LD_VAR 0 12
10669: PUSH
10670: FOR_IN
10671: IFFALSE 10863
// repeat InitHc ;
10673: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10677: LD_VAR 0 9
10681: PPUSH
10682: CALL_OW 266
10686: PUSH
10687: LD_INT 5
10689: EQUAL
10690: IFFALSE 10760
// begin if UnitsInside ( j ) < 3 then
10692: LD_VAR 0 9
10696: PPUSH
10697: CALL_OW 313
10701: PUSH
10702: LD_INT 3
10704: LESS
10705: IFFALSE 10741
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10707: LD_INT 0
10709: PPUSH
10710: LD_INT 5
10712: PUSH
10713: LD_INT 8
10715: PUSH
10716: LD_INT 9
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: LD_VAR 0 17
10728: ARRAY
10729: PPUSH
10730: LD_VAR 0 4
10734: PPUSH
10735: CALL_OW 380
10739: GO 10758
// PrepareHuman ( false , i , skill ) ;
10741: LD_INT 0
10743: PPUSH
10744: LD_VAR 0 8
10748: PPUSH
10749: LD_VAR 0 4
10753: PPUSH
10754: CALL_OW 380
// end else
10758: GO 10777
// PrepareHuman ( false , i , skill ) ;
10760: LD_INT 0
10762: PPUSH
10763: LD_VAR 0 8
10767: PPUSH
10768: LD_VAR 0 4
10772: PPUSH
10773: CALL_OW 380
// un := CreateHuman ;
10777: LD_ADDR_VAR 0 14
10781: PUSH
10782: CALL_OW 44
10786: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10787: LD_ADDR_VAR 0 7
10791: PUSH
10792: LD_VAR 0 7
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: LD_VAR 0 14
10804: PPUSH
10805: CALL_OW 2
10809: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10810: LD_VAR 0 14
10814: PPUSH
10815: LD_VAR 0 9
10819: PPUSH
10820: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10824: LD_VAR 0 9
10828: PPUSH
10829: CALL_OW 313
10833: PUSH
10834: LD_INT 6
10836: EQUAL
10837: PUSH
10838: LD_VAR 0 9
10842: PPUSH
10843: CALL_OW 266
10847: PUSH
10848: LD_INT 32
10850: PUSH
10851: LD_INT 31
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: IN
10858: OR
10859: IFFALSE 10673
10861: GO 10670
10863: POP
10864: POP
// end else
10865: GO 11247
// for j = 1 to x do
10867: LD_ADDR_VAR 0 9
10871: PUSH
10872: DOUBLE
10873: LD_INT 1
10875: DEC
10876: ST_TO_ADDR
10877: LD_VAR 0 13
10881: PUSH
10882: FOR_TO
10883: IFFALSE 11245
// begin InitHc ;
10885: CALL_OW 19
// if not f then
10889: LD_VAR 0 12
10893: NOT
10894: IFFALSE 10983
// begin PrepareHuman ( false , i , skill ) ;
10896: LD_INT 0
10898: PPUSH
10899: LD_VAR 0 8
10903: PPUSH
10904: LD_VAR 0 4
10908: PPUSH
10909: CALL_OW 380
// un := CreateHuman ;
10913: LD_ADDR_VAR 0 14
10917: PUSH
10918: CALL_OW 44
10922: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10923: LD_ADDR_VAR 0 7
10927: PUSH
10928: LD_VAR 0 7
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: LD_VAR 0 14
10940: PPUSH
10941: CALL_OW 2
10945: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10946: LD_VAR 0 14
10950: PPUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 250
10960: PPUSH
10961: LD_VAR 0 1
10965: PPUSH
10966: CALL_OW 251
10970: PPUSH
10971: LD_INT 10
10973: PPUSH
10974: LD_INT 0
10976: PPUSH
10977: CALL_OW 50
// continue ;
10981: GO 10882
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10983: LD_VAR 0 12
10987: PUSH
10988: LD_INT 1
10990: ARRAY
10991: PPUSH
10992: CALL_OW 313
10996: PUSH
10997: LD_VAR 0 12
11001: PUSH
11002: LD_INT 1
11004: ARRAY
11005: PPUSH
11006: CALL_OW 266
11010: PUSH
11011: LD_INT 32
11013: PUSH
11014: LD_INT 31
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: IN
11021: AND
11022: PUSH
11023: LD_VAR 0 12
11027: PUSH
11028: LD_INT 1
11030: ARRAY
11031: PPUSH
11032: CALL_OW 313
11036: PUSH
11037: LD_INT 6
11039: EQUAL
11040: OR
11041: IFFALSE 11061
// f := Delete ( f , 1 ) ;
11043: LD_ADDR_VAR 0 12
11047: PUSH
11048: LD_VAR 0 12
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 3
11060: ST_TO_ADDR
// if not f then
11061: LD_VAR 0 12
11065: NOT
11066: IFFALSE 11084
// begin x := x + 2 ;
11068: LD_ADDR_VAR 0 13
11072: PUSH
11073: LD_VAR 0 13
11077: PUSH
11078: LD_INT 2
11080: PLUS
11081: ST_TO_ADDR
// continue ;
11082: GO 10882
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11084: LD_VAR 0 12
11088: PUSH
11089: LD_INT 1
11091: ARRAY
11092: PPUSH
11093: CALL_OW 266
11097: PUSH
11098: LD_INT 5
11100: EQUAL
11101: IFFALSE 11175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11103: LD_VAR 0 12
11107: PUSH
11108: LD_INT 1
11110: ARRAY
11111: PPUSH
11112: CALL_OW 313
11116: PUSH
11117: LD_INT 3
11119: LESS
11120: IFFALSE 11156
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11122: LD_INT 0
11124: PPUSH
11125: LD_INT 5
11127: PUSH
11128: LD_INT 8
11130: PUSH
11131: LD_INT 9
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: PUSH
11139: LD_VAR 0 17
11143: ARRAY
11144: PPUSH
11145: LD_VAR 0 4
11149: PPUSH
11150: CALL_OW 380
11154: GO 11173
// PrepareHuman ( false , i , skill ) ;
11156: LD_INT 0
11158: PPUSH
11159: LD_VAR 0 8
11163: PPUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: CALL_OW 380
// end else
11173: GO 11192
// PrepareHuman ( false , i , skill ) ;
11175: LD_INT 0
11177: PPUSH
11178: LD_VAR 0 8
11182: PPUSH
11183: LD_VAR 0 4
11187: PPUSH
11188: CALL_OW 380
// un := CreateHuman ;
11192: LD_ADDR_VAR 0 14
11196: PUSH
11197: CALL_OW 44
11201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11202: LD_ADDR_VAR 0 7
11206: PUSH
11207: LD_VAR 0 7
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: LD_VAR 0 14
11219: PPUSH
11220: CALL_OW 2
11224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11225: LD_VAR 0 14
11229: PPUSH
11230: LD_VAR 0 12
11234: PUSH
11235: LD_INT 1
11237: ARRAY
11238: PPUSH
11239: CALL_OW 52
// end ;
11243: GO 10882
11245: POP
11246: POP
// end ;
11247: GO 10184
11249: POP
11250: POP
// result := result ^ buildings ;
11251: LD_ADDR_VAR 0 7
11255: PUSH
11256: LD_VAR 0 7
11260: PUSH
11261: LD_VAR 0 18
11265: ADD
11266: ST_TO_ADDR
// end else
11267: GO 11410
// begin for i = 1 to personel do
11269: LD_ADDR_VAR 0 8
11273: PUSH
11274: DOUBLE
11275: LD_INT 1
11277: DEC
11278: ST_TO_ADDR
11279: LD_VAR 0 6
11283: PUSH
11284: FOR_TO
11285: IFFALSE 11408
// begin if i > 4 then
11287: LD_VAR 0 8
11291: PUSH
11292: LD_INT 4
11294: GREATER
11295: IFFALSE 11299
// break ;
11297: GO 11408
// x := personel [ i ] ;
11299: LD_ADDR_VAR 0 13
11303: PUSH
11304: LD_VAR 0 6
11308: PUSH
11309: LD_VAR 0 8
11313: ARRAY
11314: ST_TO_ADDR
// if x = - 1 then
11315: LD_VAR 0 13
11319: PUSH
11320: LD_INT 1
11322: NEG
11323: EQUAL
11324: IFFALSE 11328
// continue ;
11326: GO 11284
// PrepareHuman ( false , i , skill ) ;
11328: LD_INT 0
11330: PPUSH
11331: LD_VAR 0 8
11335: PPUSH
11336: LD_VAR 0 4
11340: PPUSH
11341: CALL_OW 380
// un := CreateHuman ;
11345: LD_ADDR_VAR 0 14
11349: PUSH
11350: CALL_OW 44
11354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11355: LD_VAR 0 14
11359: PPUSH
11360: LD_VAR 0 1
11364: PPUSH
11365: CALL_OW 250
11369: PPUSH
11370: LD_VAR 0 1
11374: PPUSH
11375: CALL_OW 251
11379: PPUSH
11380: LD_INT 10
11382: PPUSH
11383: LD_INT 0
11385: PPUSH
11386: CALL_OW 50
// result := result ^ un ;
11390: LD_ADDR_VAR 0 7
11394: PUSH
11395: LD_VAR 0 7
11399: PUSH
11400: LD_VAR 0 14
11404: ADD
11405: ST_TO_ADDR
// end ;
11406: GO 11284
11408: POP
11409: POP
// end ; end ;
11410: LD_VAR 0 7
11414: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11415: LD_INT 0
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
11422: PPUSH
11423: PPUSH
11424: PPUSH
11425: PPUSH
11426: PPUSH
11427: PPUSH
11428: PPUSH
11429: PPUSH
11430: PPUSH
11431: PPUSH
11432: PPUSH
// result := false ;
11433: LD_ADDR_VAR 0 3
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11441: LD_VAR 0 1
11445: NOT
11446: PUSH
11447: LD_VAR 0 1
11451: PPUSH
11452: CALL_OW 266
11456: PUSH
11457: LD_INT 32
11459: PUSH
11460: LD_INT 33
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: IN
11467: NOT
11468: OR
11469: IFFALSE 11473
// exit ;
11471: GO 12582
// nat := GetNation ( tower ) ;
11473: LD_ADDR_VAR 0 12
11477: PUSH
11478: LD_VAR 0 1
11482: PPUSH
11483: CALL_OW 248
11487: ST_TO_ADDR
// side := GetSide ( tower ) ;
11488: LD_ADDR_VAR 0 16
11492: PUSH
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 255
11502: ST_TO_ADDR
// x := GetX ( tower ) ;
11503: LD_ADDR_VAR 0 10
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 250
11517: ST_TO_ADDR
// y := GetY ( tower ) ;
11518: LD_ADDR_VAR 0 11
11522: PUSH
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 251
11532: ST_TO_ADDR
// if not x or not y then
11533: LD_VAR 0 10
11537: NOT
11538: PUSH
11539: LD_VAR 0 11
11543: NOT
11544: OR
11545: IFFALSE 11549
// exit ;
11547: GO 12582
// weapon := 0 ;
11549: LD_ADDR_VAR 0 18
11553: PUSH
11554: LD_INT 0
11556: ST_TO_ADDR
// fac_list := [ ] ;
11557: LD_ADDR_VAR 0 17
11561: PUSH
11562: EMPTY
11563: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11564: LD_ADDR_VAR 0 6
11568: PUSH
11569: LD_VAR 0 1
11573: PPUSH
11574: CALL_OW 274
11578: PPUSH
11579: LD_VAR 0 2
11583: PPUSH
11584: LD_INT 0
11586: PPUSH
11587: CALL 9153 0 3
11591: PPUSH
11592: LD_INT 30
11594: PUSH
11595: LD_INT 3
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 72
11606: ST_TO_ADDR
// if not factories then
11607: LD_VAR 0 6
11611: NOT
11612: IFFALSE 11616
// exit ;
11614: GO 12582
// for i in factories do
11616: LD_ADDR_VAR 0 8
11620: PUSH
11621: LD_VAR 0 6
11625: PUSH
11626: FOR_IN
11627: IFFALSE 11652
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11629: LD_ADDR_VAR 0 17
11633: PUSH
11634: LD_VAR 0 17
11638: PUSH
11639: LD_VAR 0 8
11643: PPUSH
11644: CALL_OW 478
11648: UNION
11649: ST_TO_ADDR
11650: GO 11626
11652: POP
11653: POP
// if not fac_list then
11654: LD_VAR 0 17
11658: NOT
11659: IFFALSE 11663
// exit ;
11661: GO 12582
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: LD_INT 4
11670: PUSH
11671: LD_INT 5
11673: PUSH
11674: LD_INT 9
11676: PUSH
11677: LD_INT 10
11679: PUSH
11680: LD_INT 6
11682: PUSH
11683: LD_INT 7
11685: PUSH
11686: LD_INT 11
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 27
11700: PUSH
11701: LD_INT 28
11703: PUSH
11704: LD_INT 26
11706: PUSH
11707: LD_INT 30
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 43
11718: PUSH
11719: LD_INT 44
11721: PUSH
11722: LD_INT 46
11724: PUSH
11725: LD_INT 45
11727: PUSH
11728: LD_INT 47
11730: PUSH
11731: LD_INT 49
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: PUSH
11747: LD_VAR 0 12
11751: ARRAY
11752: ST_TO_ADDR
// list := list isect fac_list ;
11753: LD_ADDR_VAR 0 5
11757: PUSH
11758: LD_VAR 0 5
11762: PUSH
11763: LD_VAR 0 17
11767: ISECT
11768: ST_TO_ADDR
// if not list then
11769: LD_VAR 0 5
11773: NOT
11774: IFFALSE 11778
// exit ;
11776: GO 12582
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11778: LD_VAR 0 12
11782: PUSH
11783: LD_INT 3
11785: EQUAL
11786: PUSH
11787: LD_INT 49
11789: PUSH
11790: LD_VAR 0 5
11794: IN
11795: AND
11796: PUSH
11797: LD_INT 31
11799: PPUSH
11800: LD_VAR 0 16
11804: PPUSH
11805: CALL_OW 321
11809: PUSH
11810: LD_INT 2
11812: EQUAL
11813: AND
11814: IFFALSE 11874
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11816: LD_INT 22
11818: PUSH
11819: LD_VAR 0 16
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 35
11830: PUSH
11831: LD_INT 49
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 91
11840: PUSH
11841: LD_VAR 0 1
11845: PUSH
11846: LD_INT 10
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: PPUSH
11859: CALL_OW 69
11863: NOT
11864: IFFALSE 11874
// weapon := ru_time_lapser ;
11866: LD_ADDR_VAR 0 18
11870: PUSH
11871: LD_INT 49
11873: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11874: LD_VAR 0 12
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: LD_INT 2
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: IN
11889: PUSH
11890: LD_INT 11
11892: PUSH
11893: LD_VAR 0 5
11897: IN
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: LD_VAR 0 5
11906: IN
11907: OR
11908: AND
11909: PUSH
11910: LD_INT 6
11912: PPUSH
11913: LD_VAR 0 16
11917: PPUSH
11918: CALL_OW 321
11922: PUSH
11923: LD_INT 2
11925: EQUAL
11926: AND
11927: IFFALSE 12092
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11929: LD_INT 22
11931: PUSH
11932: LD_VAR 0 16
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: LD_INT 35
11946: PUSH
11947: LD_INT 11
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 35
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 91
11971: PUSH
11972: LD_VAR 0 1
11976: PUSH
11977: LD_INT 18
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: NOT
11995: PUSH
11996: LD_INT 22
11998: PUSH
11999: LD_VAR 0 16
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 2
12010: PUSH
12011: LD_INT 30
12013: PUSH
12014: LD_INT 32
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 30
12023: PUSH
12024: LD_INT 33
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 91
12038: PUSH
12039: LD_VAR 0 1
12043: PUSH
12044: LD_INT 12
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: PPUSH
12060: CALL_OW 69
12064: PUSH
12065: LD_INT 2
12067: GREATER
12068: AND
12069: IFFALSE 12092
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12071: LD_ADDR_VAR 0 18
12075: PUSH
12076: LD_INT 11
12078: PUSH
12079: LD_INT 30
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_VAR 0 12
12090: ARRAY
12091: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12092: LD_VAR 0 18
12096: NOT
12097: PUSH
12098: LD_INT 40
12100: PPUSH
12101: LD_VAR 0 16
12105: PPUSH
12106: CALL_OW 321
12110: PUSH
12111: LD_INT 2
12113: EQUAL
12114: AND
12115: PUSH
12116: LD_INT 7
12118: PUSH
12119: LD_VAR 0 5
12123: IN
12124: PUSH
12125: LD_INT 28
12127: PUSH
12128: LD_VAR 0 5
12132: IN
12133: OR
12134: PUSH
12135: LD_INT 45
12137: PUSH
12138: LD_VAR 0 5
12142: IN
12143: OR
12144: AND
12145: IFFALSE 12399
// begin hex := GetHexInfo ( x , y ) ;
12147: LD_ADDR_VAR 0 4
12151: PUSH
12152: LD_VAR 0 10
12156: PPUSH
12157: LD_VAR 0 11
12161: PPUSH
12162: CALL_OW 546
12166: ST_TO_ADDR
// if hex [ 1 ] then
12167: LD_VAR 0 4
12171: PUSH
12172: LD_INT 1
12174: ARRAY
12175: IFFALSE 12179
// exit ;
12177: GO 12582
// height := hex [ 2 ] ;
12179: LD_ADDR_VAR 0 15
12183: PUSH
12184: LD_VAR 0 4
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12193: LD_ADDR_VAR 0 14
12197: PUSH
12198: LD_INT 0
12200: PUSH
12201: LD_INT 2
12203: PUSH
12204: LD_INT 3
12206: PUSH
12207: LD_INT 5
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: ST_TO_ADDR
// for i in tmp do
12216: LD_ADDR_VAR 0 8
12220: PUSH
12221: LD_VAR 0 14
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12397
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12229: LD_ADDR_VAR 0 9
12233: PUSH
12234: LD_VAR 0 10
12238: PPUSH
12239: LD_VAR 0 8
12243: PPUSH
12244: LD_INT 5
12246: PPUSH
12247: CALL_OW 272
12251: PUSH
12252: LD_VAR 0 11
12256: PPUSH
12257: LD_VAR 0 8
12261: PPUSH
12262: LD_INT 5
12264: PPUSH
12265: CALL_OW 273
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12274: LD_VAR 0 9
12278: PUSH
12279: LD_INT 1
12281: ARRAY
12282: PPUSH
12283: LD_VAR 0 9
12287: PUSH
12288: LD_INT 2
12290: ARRAY
12291: PPUSH
12292: CALL_OW 488
12296: IFFALSE 12395
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12298: LD_ADDR_VAR 0 4
12302: PUSH
12303: LD_VAR 0 9
12307: PUSH
12308: LD_INT 1
12310: ARRAY
12311: PPUSH
12312: LD_VAR 0 9
12316: PUSH
12317: LD_INT 2
12319: ARRAY
12320: PPUSH
12321: CALL_OW 546
12325: ST_TO_ADDR
// if hex [ 1 ] then
12326: LD_VAR 0 4
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: IFFALSE 12338
// continue ;
12336: GO 12226
// h := hex [ 2 ] ;
12338: LD_ADDR_VAR 0 13
12342: PUSH
12343: LD_VAR 0 4
12347: PUSH
12348: LD_INT 2
12350: ARRAY
12351: ST_TO_ADDR
// if h + 7 < height then
12352: LD_VAR 0 13
12356: PUSH
12357: LD_INT 7
12359: PLUS
12360: PUSH
12361: LD_VAR 0 15
12365: LESS
12366: IFFALSE 12395
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12368: LD_ADDR_VAR 0 18
12372: PUSH
12373: LD_INT 7
12375: PUSH
12376: LD_INT 28
12378: PUSH
12379: LD_INT 45
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PUSH
12387: LD_VAR 0 12
12391: ARRAY
12392: ST_TO_ADDR
// break ;
12393: GO 12397
// end ; end ; end ;
12395: GO 12226
12397: POP
12398: POP
// end ; if not weapon then
12399: LD_VAR 0 18
12403: NOT
12404: IFFALSE 12464
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12406: LD_ADDR_VAR 0 5
12410: PUSH
12411: LD_VAR 0 5
12415: PUSH
12416: LD_INT 11
12418: PUSH
12419: LD_INT 30
12421: PUSH
12422: LD_INT 49
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: DIFF
12430: ST_TO_ADDR
// if not list then
12431: LD_VAR 0 5
12435: NOT
12436: IFFALSE 12440
// exit ;
12438: GO 12582
// weapon := list [ rand ( 1 , list ) ] ;
12440: LD_ADDR_VAR 0 18
12444: PUSH
12445: LD_VAR 0 5
12449: PUSH
12450: LD_INT 1
12452: PPUSH
12453: LD_VAR 0 5
12457: PPUSH
12458: CALL_OW 12
12462: ARRAY
12463: ST_TO_ADDR
// end ; if weapon then
12464: LD_VAR 0 18
12468: IFFALSE 12582
// begin tmp := CostOfWeapon ( weapon ) ;
12470: LD_ADDR_VAR 0 14
12474: PUSH
12475: LD_VAR 0 18
12479: PPUSH
12480: CALL_OW 451
12484: ST_TO_ADDR
// j := GetBase ( tower ) ;
12485: LD_ADDR_VAR 0 9
12489: PUSH
12490: LD_VAR 0 1
12494: PPUSH
12495: CALL_OW 274
12499: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12500: LD_VAR 0 9
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 275
12512: PUSH
12513: LD_VAR 0 14
12517: PUSH
12518: LD_INT 1
12520: ARRAY
12521: GREATEREQUAL
12522: PUSH
12523: LD_VAR 0 9
12527: PPUSH
12528: LD_INT 2
12530: PPUSH
12531: CALL_OW 275
12535: PUSH
12536: LD_VAR 0 14
12540: PUSH
12541: LD_INT 2
12543: ARRAY
12544: GREATEREQUAL
12545: AND
12546: PUSH
12547: LD_VAR 0 9
12551: PPUSH
12552: LD_INT 3
12554: PPUSH
12555: CALL_OW 275
12559: PUSH
12560: LD_VAR 0 14
12564: PUSH
12565: LD_INT 3
12567: ARRAY
12568: GREATEREQUAL
12569: AND
12570: IFFALSE 12582
// result := weapon ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_VAR 0 18
12581: ST_TO_ADDR
// end ; end ;
12582: LD_VAR 0 3
12586: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12587: LD_INT 0
12589: PPUSH
12590: PPUSH
// result := true ;
12591: LD_ADDR_VAR 0 3
12595: PUSH
12596: LD_INT 1
12598: ST_TO_ADDR
// if array1 = array2 then
12599: LD_VAR 0 1
12603: PUSH
12604: LD_VAR 0 2
12608: EQUAL
12609: IFFALSE 12669
// begin for i = 1 to array1 do
12611: LD_ADDR_VAR 0 4
12615: PUSH
12616: DOUBLE
12617: LD_INT 1
12619: DEC
12620: ST_TO_ADDR
12621: LD_VAR 0 1
12625: PUSH
12626: FOR_TO
12627: IFFALSE 12665
// if array1 [ i ] <> array2 [ i ] then
12629: LD_VAR 0 1
12633: PUSH
12634: LD_VAR 0 4
12638: ARRAY
12639: PUSH
12640: LD_VAR 0 2
12644: PUSH
12645: LD_VAR 0 4
12649: ARRAY
12650: NONEQUAL
12651: IFFALSE 12663
// begin result := false ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// break ;
12661: GO 12665
// end ;
12663: GO 12626
12665: POP
12666: POP
// end else
12667: GO 12677
// result := false ;
12669: LD_ADDR_VAR 0 3
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// end ;
12677: LD_VAR 0 3
12681: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12682: LD_INT 0
12684: PPUSH
12685: PPUSH
// if not array1 or not array2 then
12686: LD_VAR 0 1
12690: NOT
12691: PUSH
12692: LD_VAR 0 2
12696: NOT
12697: OR
12698: IFFALSE 12702
// exit ;
12700: GO 12766
// result := true ;
12702: LD_ADDR_VAR 0 3
12706: PUSH
12707: LD_INT 1
12709: ST_TO_ADDR
// for i = 1 to array1 do
12710: LD_ADDR_VAR 0 4
12714: PUSH
12715: DOUBLE
12716: LD_INT 1
12718: DEC
12719: ST_TO_ADDR
12720: LD_VAR 0 1
12724: PUSH
12725: FOR_TO
12726: IFFALSE 12764
// if array1 [ i ] <> array2 [ i ] then
12728: LD_VAR 0 1
12732: PUSH
12733: LD_VAR 0 4
12737: ARRAY
12738: PUSH
12739: LD_VAR 0 2
12743: PUSH
12744: LD_VAR 0 4
12748: ARRAY
12749: NONEQUAL
12750: IFFALSE 12762
// begin result := false ;
12752: LD_ADDR_VAR 0 3
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// break ;
12760: GO 12764
// end ;
12762: GO 12725
12764: POP
12765: POP
// end ;
12766: LD_VAR 0 3
12770: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12771: LD_INT 0
12773: PPUSH
12774: PPUSH
12775: PPUSH
// pom := GetBase ( fac ) ;
12776: LD_ADDR_VAR 0 5
12780: PUSH
12781: LD_VAR 0 1
12785: PPUSH
12786: CALL_OW 274
12790: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12791: LD_ADDR_VAR 0 4
12795: PUSH
12796: LD_VAR 0 2
12800: PUSH
12801: LD_INT 1
12803: ARRAY
12804: PPUSH
12805: LD_VAR 0 2
12809: PUSH
12810: LD_INT 2
12812: ARRAY
12813: PPUSH
12814: LD_VAR 0 2
12818: PUSH
12819: LD_INT 3
12821: ARRAY
12822: PPUSH
12823: LD_VAR 0 2
12827: PUSH
12828: LD_INT 4
12830: ARRAY
12831: PPUSH
12832: CALL_OW 449
12836: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12837: LD_ADDR_VAR 0 3
12841: PUSH
12842: LD_VAR 0 5
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 275
12854: PUSH
12855: LD_VAR 0 4
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: GREATEREQUAL
12864: PUSH
12865: LD_VAR 0 5
12869: PPUSH
12870: LD_INT 2
12872: PPUSH
12873: CALL_OW 275
12877: PUSH
12878: LD_VAR 0 4
12882: PUSH
12883: LD_INT 2
12885: ARRAY
12886: GREATEREQUAL
12887: AND
12888: PUSH
12889: LD_VAR 0 5
12893: PPUSH
12894: LD_INT 3
12896: PPUSH
12897: CALL_OW 275
12901: PUSH
12902: LD_VAR 0 4
12906: PUSH
12907: LD_INT 3
12909: ARRAY
12910: GREATEREQUAL
12911: AND
12912: ST_TO_ADDR
// end ;
12913: LD_VAR 0 3
12917: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12918: LD_INT 0
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
// pom := GetBase ( building ) ;
12924: LD_ADDR_VAR 0 3
12928: PUSH
12929: LD_VAR 0 1
12933: PPUSH
12934: CALL_OW 274
12938: ST_TO_ADDR
// if not pom then
12939: LD_VAR 0 3
12943: NOT
12944: IFFALSE 12948
// exit ;
12946: GO 13118
// btype := GetBType ( building ) ;
12948: LD_ADDR_VAR 0 5
12952: PUSH
12953: LD_VAR 0 1
12957: PPUSH
12958: CALL_OW 266
12962: ST_TO_ADDR
// if btype = b_armoury then
12963: LD_VAR 0 5
12967: PUSH
12968: LD_INT 4
12970: EQUAL
12971: IFFALSE 12981
// btype := b_barracks ;
12973: LD_ADDR_VAR 0 5
12977: PUSH
12978: LD_INT 5
12980: ST_TO_ADDR
// if btype = b_depot then
12981: LD_VAR 0 5
12985: PUSH
12986: LD_INT 0
12988: EQUAL
12989: IFFALSE 12999
// btype := b_warehouse ;
12991: LD_ADDR_VAR 0 5
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// if btype = b_workshop then
12999: LD_VAR 0 5
13003: PUSH
13004: LD_INT 2
13006: EQUAL
13007: IFFALSE 13017
// btype := b_factory ;
13009: LD_ADDR_VAR 0 5
13013: PUSH
13014: LD_INT 3
13016: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13017: LD_ADDR_VAR 0 4
13021: PUSH
13022: LD_VAR 0 5
13026: PPUSH
13027: LD_VAR 0 1
13031: PPUSH
13032: CALL_OW 248
13036: PPUSH
13037: CALL_OW 450
13041: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 275
13059: PUSH
13060: LD_VAR 0 4
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: GREATEREQUAL
13069: PUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 2
13077: PPUSH
13078: CALL_OW 275
13082: PUSH
13083: LD_VAR 0 4
13087: PUSH
13088: LD_INT 2
13090: ARRAY
13091: GREATEREQUAL
13092: AND
13093: PUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: LD_INT 3
13101: PPUSH
13102: CALL_OW 275
13106: PUSH
13107: LD_VAR 0 4
13111: PUSH
13112: LD_INT 3
13114: ARRAY
13115: GREATEREQUAL
13116: AND
13117: ST_TO_ADDR
// end ;
13118: LD_VAR 0 2
13122: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
13127: PPUSH
// pom := GetBase ( building ) ;
13128: LD_ADDR_VAR 0 4
13132: PUSH
13133: LD_VAR 0 1
13137: PPUSH
13138: CALL_OW 274
13142: ST_TO_ADDR
// if not pom then
13143: LD_VAR 0 4
13147: NOT
13148: IFFALSE 13152
// exit ;
13150: GO 13253
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13152: LD_ADDR_VAR 0 5
13156: PUSH
13157: LD_VAR 0 2
13161: PPUSH
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 248
13171: PPUSH
13172: CALL_OW 450
13176: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13177: LD_ADDR_VAR 0 3
13181: PUSH
13182: LD_VAR 0 4
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: CALL_OW 275
13194: PUSH
13195: LD_VAR 0 5
13199: PUSH
13200: LD_INT 1
13202: ARRAY
13203: GREATEREQUAL
13204: PUSH
13205: LD_VAR 0 4
13209: PPUSH
13210: LD_INT 2
13212: PPUSH
13213: CALL_OW 275
13217: PUSH
13218: LD_VAR 0 5
13222: PUSH
13223: LD_INT 2
13225: ARRAY
13226: GREATEREQUAL
13227: AND
13228: PUSH
13229: LD_VAR 0 4
13233: PPUSH
13234: LD_INT 3
13236: PPUSH
13237: CALL_OW 275
13241: PUSH
13242: LD_VAR 0 5
13246: PUSH
13247: LD_INT 3
13249: ARRAY
13250: GREATEREQUAL
13251: AND
13252: ST_TO_ADDR
// end ;
13253: LD_VAR 0 3
13257: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
13266: PPUSH
13267: PPUSH
13268: PPUSH
13269: PPUSH
13270: PPUSH
// result := false ;
13271: LD_ADDR_VAR 0 8
13275: PUSH
13276: LD_INT 0
13278: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13279: LD_VAR 0 5
13283: NOT
13284: PUSH
13285: LD_VAR 0 1
13289: NOT
13290: OR
13291: PUSH
13292: LD_VAR 0 2
13296: NOT
13297: OR
13298: PUSH
13299: LD_VAR 0 3
13303: NOT
13304: OR
13305: IFFALSE 13309
// exit ;
13307: GO 14123
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13309: LD_ADDR_VAR 0 14
13313: PUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: LD_VAR 0 2
13323: PPUSH
13324: LD_VAR 0 3
13328: PPUSH
13329: LD_VAR 0 4
13333: PPUSH
13334: LD_VAR 0 5
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PPUSH
13343: CALL_OW 248
13347: PPUSH
13348: LD_INT 0
13350: PPUSH
13351: CALL 15376 0 6
13355: ST_TO_ADDR
// if not hexes then
13356: LD_VAR 0 14
13360: NOT
13361: IFFALSE 13365
// exit ;
13363: GO 14123
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13365: LD_ADDR_VAR 0 17
13369: PUSH
13370: LD_VAR 0 5
13374: PPUSH
13375: LD_INT 22
13377: PUSH
13378: LD_VAR 0 13
13382: PPUSH
13383: CALL_OW 255
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 0
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 30
13407: PUSH
13408: LD_INT 1
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PPUSH
13424: CALL_OW 72
13428: ST_TO_ADDR
// for i = 1 to hexes do
13429: LD_ADDR_VAR 0 9
13433: PUSH
13434: DOUBLE
13435: LD_INT 1
13437: DEC
13438: ST_TO_ADDR
13439: LD_VAR 0 14
13443: PUSH
13444: FOR_TO
13445: IFFALSE 14121
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13447: LD_ADDR_VAR 0 13
13451: PUSH
13452: LD_VAR 0 14
13456: PUSH
13457: LD_VAR 0 9
13461: ARRAY
13462: PUSH
13463: LD_INT 1
13465: ARRAY
13466: PPUSH
13467: LD_VAR 0 14
13471: PUSH
13472: LD_VAR 0 9
13476: ARRAY
13477: PUSH
13478: LD_INT 2
13480: ARRAY
13481: PPUSH
13482: CALL_OW 428
13486: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13487: LD_VAR 0 14
13491: PUSH
13492: LD_VAR 0 9
13496: ARRAY
13497: PUSH
13498: LD_INT 1
13500: ARRAY
13501: PPUSH
13502: LD_VAR 0 14
13506: PUSH
13507: LD_VAR 0 9
13511: ARRAY
13512: PUSH
13513: LD_INT 2
13515: ARRAY
13516: PPUSH
13517: CALL_OW 351
13521: PUSH
13522: LD_VAR 0 14
13526: PUSH
13527: LD_VAR 0 9
13531: ARRAY
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: PPUSH
13537: LD_VAR 0 14
13541: PUSH
13542: LD_VAR 0 9
13546: ARRAY
13547: PUSH
13548: LD_INT 2
13550: ARRAY
13551: PPUSH
13552: CALL_OW 488
13556: NOT
13557: OR
13558: PUSH
13559: LD_VAR 0 13
13563: PPUSH
13564: CALL_OW 247
13568: PUSH
13569: LD_INT 3
13571: EQUAL
13572: OR
13573: IFFALSE 13579
// exit ;
13575: POP
13576: POP
13577: GO 14123
// if not tmp then
13579: LD_VAR 0 13
13583: NOT
13584: IFFALSE 13588
// continue ;
13586: GO 13444
// result := true ;
13588: LD_ADDR_VAR 0 8
13592: PUSH
13593: LD_INT 1
13595: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13596: LD_VAR 0 6
13600: PUSH
13601: LD_VAR 0 13
13605: PPUSH
13606: CALL_OW 247
13610: PUSH
13611: LD_INT 2
13613: EQUAL
13614: AND
13615: PUSH
13616: LD_VAR 0 13
13620: PPUSH
13621: CALL_OW 263
13625: PUSH
13626: LD_INT 1
13628: EQUAL
13629: AND
13630: IFFALSE 13794
// begin if IsDrivenBy ( tmp ) then
13632: LD_VAR 0 13
13636: PPUSH
13637: CALL_OW 311
13641: IFFALSE 13645
// continue ;
13643: GO 13444
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13645: LD_VAR 0 6
13649: PPUSH
13650: LD_INT 3
13652: PUSH
13653: LD_INT 60
13655: PUSH
13656: EMPTY
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 3
13665: PUSH
13666: LD_INT 55
13668: PUSH
13669: EMPTY
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 72
13684: IFFALSE 13792
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13686: LD_ADDR_VAR 0 18
13690: PUSH
13691: LD_VAR 0 6
13695: PPUSH
13696: LD_INT 3
13698: PUSH
13699: LD_INT 60
13701: PUSH
13702: EMPTY
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 3
13711: PUSH
13712: LD_INT 55
13714: PUSH
13715: EMPTY
13716: LIST
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 72
13730: PUSH
13731: LD_INT 1
13733: ARRAY
13734: ST_TO_ADDR
// if IsInUnit ( driver ) then
13735: LD_VAR 0 18
13739: PPUSH
13740: CALL_OW 310
13744: IFFALSE 13755
// ComExit ( driver ) ;
13746: LD_VAR 0 18
13750: PPUSH
13751: CALL 39155 0 1
// AddComEnterUnit ( driver , tmp ) ;
13755: LD_VAR 0 18
13759: PPUSH
13760: LD_VAR 0 13
13764: PPUSH
13765: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13769: LD_VAR 0 18
13773: PPUSH
13774: LD_VAR 0 7
13778: PPUSH
13779: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13783: LD_VAR 0 18
13787: PPUSH
13788: CALL_OW 181
// end ; continue ;
13792: GO 13444
// end ; if not cleaners or not tmp in cleaners then
13794: LD_VAR 0 6
13798: NOT
13799: PUSH
13800: LD_VAR 0 13
13804: PUSH
13805: LD_VAR 0 6
13809: IN
13810: NOT
13811: OR
13812: IFFALSE 14119
// begin if dep then
13814: LD_VAR 0 17
13818: IFFALSE 13954
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13820: LD_ADDR_VAR 0 16
13824: PUSH
13825: LD_VAR 0 17
13829: PUSH
13830: LD_INT 1
13832: ARRAY
13833: PPUSH
13834: CALL_OW 250
13838: PPUSH
13839: LD_VAR 0 17
13843: PUSH
13844: LD_INT 1
13846: ARRAY
13847: PPUSH
13848: CALL_OW 254
13852: PPUSH
13853: LD_INT 5
13855: PPUSH
13856: CALL_OW 272
13860: PUSH
13861: LD_VAR 0 17
13865: PUSH
13866: LD_INT 1
13868: ARRAY
13869: PPUSH
13870: CALL_OW 251
13874: PPUSH
13875: LD_VAR 0 17
13879: PUSH
13880: LD_INT 1
13882: ARRAY
13883: PPUSH
13884: CALL_OW 254
13888: PPUSH
13889: LD_INT 5
13891: PPUSH
13892: CALL_OW 273
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13901: LD_VAR 0 16
13905: PUSH
13906: LD_INT 1
13908: ARRAY
13909: PPUSH
13910: LD_VAR 0 16
13914: PUSH
13915: LD_INT 2
13917: ARRAY
13918: PPUSH
13919: CALL_OW 488
13923: IFFALSE 13954
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13925: LD_VAR 0 13
13929: PPUSH
13930: LD_VAR 0 16
13934: PUSH
13935: LD_INT 1
13937: ARRAY
13938: PPUSH
13939: LD_VAR 0 16
13943: PUSH
13944: LD_INT 2
13946: ARRAY
13947: PPUSH
13948: CALL_OW 111
// continue ;
13952: GO 13444
// end ; end ; r := GetDir ( tmp ) ;
13954: LD_ADDR_VAR 0 15
13958: PUSH
13959: LD_VAR 0 13
13963: PPUSH
13964: CALL_OW 254
13968: ST_TO_ADDR
// if r = 5 then
13969: LD_VAR 0 15
13973: PUSH
13974: LD_INT 5
13976: EQUAL
13977: IFFALSE 13987
// r := 0 ;
13979: LD_ADDR_VAR 0 15
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// for j = r to 5 do
13987: LD_ADDR_VAR 0 10
13991: PUSH
13992: DOUBLE
13993: LD_VAR 0 15
13997: DEC
13998: ST_TO_ADDR
13999: LD_INT 5
14001: PUSH
14002: FOR_TO
14003: IFFALSE 14117
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14005: LD_ADDR_VAR 0 11
14009: PUSH
14010: LD_VAR 0 13
14014: PPUSH
14015: CALL_OW 250
14019: PPUSH
14020: LD_VAR 0 10
14024: PPUSH
14025: LD_INT 2
14027: PPUSH
14028: CALL_OW 272
14032: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14033: LD_ADDR_VAR 0 12
14037: PUSH
14038: LD_VAR 0 13
14042: PPUSH
14043: CALL_OW 251
14047: PPUSH
14048: LD_VAR 0 10
14052: PPUSH
14053: LD_INT 2
14055: PPUSH
14056: CALL_OW 273
14060: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14061: LD_VAR 0 11
14065: PPUSH
14066: LD_VAR 0 12
14070: PPUSH
14071: CALL_OW 488
14075: PUSH
14076: LD_VAR 0 11
14080: PPUSH
14081: LD_VAR 0 12
14085: PPUSH
14086: CALL_OW 428
14090: NOT
14091: AND
14092: IFFALSE 14115
// begin ComMoveXY ( tmp , _x , _y ) ;
14094: LD_VAR 0 13
14098: PPUSH
14099: LD_VAR 0 11
14103: PPUSH
14104: LD_VAR 0 12
14108: PPUSH
14109: CALL_OW 111
// break ;
14113: GO 14117
// end ; end ;
14115: GO 14002
14117: POP
14118: POP
// end ; end ;
14119: GO 13444
14121: POP
14122: POP
// end ;
14123: LD_VAR 0 8
14127: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14128: LD_INT 0
14130: PPUSH
// result := true ;
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_INT 1
14138: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14139: LD_VAR 0 2
14143: PUSH
14144: LD_INT 24
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14158
14150: LD_INT 33
14152: DOUBLE
14153: EQUAL
14154: IFTRUE 14158
14156: GO 14183
14158: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14159: LD_ADDR_VAR 0 3
14163: PUSH
14164: LD_INT 32
14166: PPUSH
14167: LD_VAR 0 1
14171: PPUSH
14172: CALL_OW 321
14176: PUSH
14177: LD_INT 2
14179: EQUAL
14180: ST_TO_ADDR
14181: GO 14499
14183: LD_INT 20
14185: DOUBLE
14186: EQUAL
14187: IFTRUE 14191
14189: GO 14216
14191: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14192: LD_ADDR_VAR 0 3
14196: PUSH
14197: LD_INT 6
14199: PPUSH
14200: LD_VAR 0 1
14204: PPUSH
14205: CALL_OW 321
14209: PUSH
14210: LD_INT 2
14212: EQUAL
14213: ST_TO_ADDR
14214: GO 14499
14216: LD_INT 22
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14230
14222: LD_INT 36
14224: DOUBLE
14225: EQUAL
14226: IFTRUE 14230
14228: GO 14255
14230: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_INT 15
14238: PPUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 321
14248: PUSH
14249: LD_INT 2
14251: EQUAL
14252: ST_TO_ADDR
14253: GO 14499
14255: LD_INT 30
14257: DOUBLE
14258: EQUAL
14259: IFTRUE 14263
14261: GO 14288
14263: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_INT 20
14271: PPUSH
14272: LD_VAR 0 1
14276: PPUSH
14277: CALL_OW 321
14281: PUSH
14282: LD_INT 2
14284: EQUAL
14285: ST_TO_ADDR
14286: GO 14499
14288: LD_INT 28
14290: DOUBLE
14291: EQUAL
14292: IFTRUE 14302
14294: LD_INT 21
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14327
14302: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_INT 21
14310: PPUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 321
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: ST_TO_ADDR
14325: GO 14499
14327: LD_INT 16
14329: DOUBLE
14330: EQUAL
14331: IFTRUE 14335
14333: GO 14360
14335: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_INT 84
14343: PPUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 321
14353: PUSH
14354: LD_INT 2
14356: EQUAL
14357: ST_TO_ADDR
14358: GO 14499
14360: LD_INT 19
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14374
14366: LD_INT 23
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14399
14374: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14375: LD_ADDR_VAR 0 3
14379: PUSH
14380: LD_INT 83
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 321
14392: PUSH
14393: LD_INT 2
14395: EQUAL
14396: ST_TO_ADDR
14397: GO 14499
14399: LD_INT 17
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14432
14407: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14408: LD_ADDR_VAR 0 3
14412: PUSH
14413: LD_INT 39
14415: PPUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: ST_TO_ADDR
14430: GO 14499
14432: LD_INT 18
14434: DOUBLE
14435: EQUAL
14436: IFTRUE 14440
14438: GO 14465
14440: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14441: LD_ADDR_VAR 0 3
14445: PUSH
14446: LD_INT 40
14448: PPUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 321
14458: PUSH
14459: LD_INT 2
14461: EQUAL
14462: ST_TO_ADDR
14463: GO 14499
14465: LD_INT 27
14467: DOUBLE
14468: EQUAL
14469: IFTRUE 14473
14471: GO 14498
14473: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14474: LD_ADDR_VAR 0 3
14478: PUSH
14479: LD_INT 35
14481: PPUSH
14482: LD_VAR 0 1
14486: PPUSH
14487: CALL_OW 321
14491: PUSH
14492: LD_INT 2
14494: EQUAL
14495: ST_TO_ADDR
14496: GO 14499
14498: POP
// end ;
14499: LD_VAR 0 3
14503: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
// result := false ;
14517: LD_ADDR_VAR 0 6
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// if btype = b_depot then
14525: LD_VAR 0 2
14529: PUSH
14530: LD_INT 0
14532: EQUAL
14533: IFFALSE 14545
// begin result := true ;
14535: LD_ADDR_VAR 0 6
14539: PUSH
14540: LD_INT 1
14542: ST_TO_ADDR
// exit ;
14543: GO 15371
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14545: LD_VAR 0 1
14549: NOT
14550: PUSH
14551: LD_VAR 0 1
14555: PPUSH
14556: CALL_OW 266
14560: PUSH
14561: LD_INT 0
14563: PUSH
14564: LD_INT 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: IN
14571: NOT
14572: OR
14573: PUSH
14574: LD_VAR 0 2
14578: NOT
14579: OR
14580: PUSH
14581: LD_VAR 0 5
14585: PUSH
14586: LD_INT 0
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: LD_INT 2
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: LD_INT 4
14600: PUSH
14601: LD_INT 5
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: IN
14612: NOT
14613: OR
14614: PUSH
14615: LD_VAR 0 3
14619: PPUSH
14620: LD_VAR 0 4
14624: PPUSH
14625: CALL_OW 488
14629: NOT
14630: OR
14631: IFFALSE 14635
// exit ;
14633: GO 15371
// side := GetSide ( depot ) ;
14635: LD_ADDR_VAR 0 9
14639: PUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 255
14649: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14650: LD_VAR 0 9
14654: PPUSH
14655: LD_VAR 0 2
14659: PPUSH
14660: CALL 14128 0 2
14664: NOT
14665: IFFALSE 14669
// exit ;
14667: GO 15371
// pom := GetBase ( depot ) ;
14669: LD_ADDR_VAR 0 10
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 274
14683: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14684: LD_ADDR_VAR 0 11
14688: PUSH
14689: LD_VAR 0 2
14693: PPUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 248
14703: PPUSH
14704: CALL_OW 450
14708: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14709: LD_VAR 0 10
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 275
14721: PUSH
14722: LD_VAR 0 11
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: GREATEREQUAL
14731: PUSH
14732: LD_VAR 0 10
14736: PPUSH
14737: LD_INT 2
14739: PPUSH
14740: CALL_OW 275
14744: PUSH
14745: LD_VAR 0 11
14749: PUSH
14750: LD_INT 2
14752: ARRAY
14753: GREATEREQUAL
14754: AND
14755: PUSH
14756: LD_VAR 0 10
14760: PPUSH
14761: LD_INT 3
14763: PPUSH
14764: CALL_OW 275
14768: PUSH
14769: LD_VAR 0 11
14773: PUSH
14774: LD_INT 3
14776: ARRAY
14777: GREATEREQUAL
14778: AND
14779: NOT
14780: IFFALSE 14784
// exit ;
14782: GO 15371
// if GetBType ( depot ) = b_depot then
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 266
14793: PUSH
14794: LD_INT 0
14796: EQUAL
14797: IFFALSE 14809
// dist := 28 else
14799: LD_ADDR_VAR 0 14
14803: PUSH
14804: LD_INT 28
14806: ST_TO_ADDR
14807: GO 14817
// dist := 36 ;
14809: LD_ADDR_VAR 0 14
14813: PUSH
14814: LD_INT 36
14816: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14817: LD_VAR 0 1
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_VAR 0 4
14831: PPUSH
14832: CALL_OW 297
14836: PUSH
14837: LD_VAR 0 14
14841: GREATER
14842: IFFALSE 14846
// exit ;
14844: GO 15371
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14846: LD_ADDR_VAR 0 12
14850: PUSH
14851: LD_VAR 0 2
14855: PPUSH
14856: LD_VAR 0 3
14860: PPUSH
14861: LD_VAR 0 4
14865: PPUSH
14866: LD_VAR 0 5
14870: PPUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 248
14880: PPUSH
14881: LD_INT 0
14883: PPUSH
14884: CALL 15376 0 6
14888: ST_TO_ADDR
// if not hexes then
14889: LD_VAR 0 12
14893: NOT
14894: IFFALSE 14898
// exit ;
14896: GO 15371
// hex := GetHexInfo ( x , y ) ;
14898: LD_ADDR_VAR 0 15
14902: PUSH
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_VAR 0 4
14912: PPUSH
14913: CALL_OW 546
14917: ST_TO_ADDR
// if hex [ 1 ] then
14918: LD_VAR 0 15
14922: PUSH
14923: LD_INT 1
14925: ARRAY
14926: IFFALSE 14930
// exit ;
14928: GO 15371
// height := hex [ 2 ] ;
14930: LD_ADDR_VAR 0 13
14934: PUSH
14935: LD_VAR 0 15
14939: PUSH
14940: LD_INT 2
14942: ARRAY
14943: ST_TO_ADDR
// for i = 1 to hexes do
14944: LD_ADDR_VAR 0 7
14948: PUSH
14949: DOUBLE
14950: LD_INT 1
14952: DEC
14953: ST_TO_ADDR
14954: LD_VAR 0 12
14958: PUSH
14959: FOR_TO
14960: IFFALSE 15290
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14962: LD_VAR 0 12
14966: PUSH
14967: LD_VAR 0 7
14971: ARRAY
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PPUSH
14977: LD_VAR 0 12
14981: PUSH
14982: LD_VAR 0 7
14986: ARRAY
14987: PUSH
14988: LD_INT 2
14990: ARRAY
14991: PPUSH
14992: CALL_OW 488
14996: NOT
14997: PUSH
14998: LD_VAR 0 12
15002: PUSH
15003: LD_VAR 0 7
15007: ARRAY
15008: PUSH
15009: LD_INT 1
15011: ARRAY
15012: PPUSH
15013: LD_VAR 0 12
15017: PUSH
15018: LD_VAR 0 7
15022: ARRAY
15023: PUSH
15024: LD_INT 2
15026: ARRAY
15027: PPUSH
15028: CALL_OW 428
15032: PUSH
15033: LD_INT 0
15035: GREATER
15036: OR
15037: PUSH
15038: LD_VAR 0 12
15042: PUSH
15043: LD_VAR 0 7
15047: ARRAY
15048: PUSH
15049: LD_INT 1
15051: ARRAY
15052: PPUSH
15053: LD_VAR 0 12
15057: PUSH
15058: LD_VAR 0 7
15062: ARRAY
15063: PUSH
15064: LD_INT 2
15066: ARRAY
15067: PPUSH
15068: CALL_OW 351
15072: OR
15073: IFFALSE 15079
// exit ;
15075: POP
15076: POP
15077: GO 15371
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15079: LD_ADDR_VAR 0 8
15083: PUSH
15084: LD_VAR 0 12
15088: PUSH
15089: LD_VAR 0 7
15093: ARRAY
15094: PUSH
15095: LD_INT 1
15097: ARRAY
15098: PPUSH
15099: LD_VAR 0 12
15103: PUSH
15104: LD_VAR 0 7
15108: ARRAY
15109: PUSH
15110: LD_INT 2
15112: ARRAY
15113: PPUSH
15114: CALL_OW 546
15118: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15119: LD_VAR 0 8
15123: PUSH
15124: LD_INT 1
15126: ARRAY
15127: PUSH
15128: LD_VAR 0 8
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: PUSH
15137: LD_VAR 0 13
15141: PUSH
15142: LD_INT 2
15144: PLUS
15145: GREATER
15146: OR
15147: PUSH
15148: LD_VAR 0 8
15152: PUSH
15153: LD_INT 2
15155: ARRAY
15156: PUSH
15157: LD_VAR 0 13
15161: PUSH
15162: LD_INT 2
15164: MINUS
15165: LESS
15166: OR
15167: PUSH
15168: LD_VAR 0 8
15172: PUSH
15173: LD_INT 3
15175: ARRAY
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: LD_INT 8
15182: PUSH
15183: LD_INT 9
15185: PUSH
15186: LD_INT 10
15188: PUSH
15189: LD_INT 11
15191: PUSH
15192: LD_INT 12
15194: PUSH
15195: LD_INT 13
15197: PUSH
15198: LD_INT 16
15200: PUSH
15201: LD_INT 17
15203: PUSH
15204: LD_INT 18
15206: PUSH
15207: LD_INT 19
15209: PUSH
15210: LD_INT 20
15212: PUSH
15213: LD_INT 21
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: IN
15231: NOT
15232: OR
15233: PUSH
15234: LD_VAR 0 8
15238: PUSH
15239: LD_INT 5
15241: ARRAY
15242: NOT
15243: OR
15244: PUSH
15245: LD_VAR 0 8
15249: PUSH
15250: LD_INT 6
15252: ARRAY
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: LD_INT 7
15262: PUSH
15263: LD_INT 9
15265: PUSH
15266: LD_INT 10
15268: PUSH
15269: LD_INT 11
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: IN
15280: NOT
15281: OR
15282: IFFALSE 15288
// exit ;
15284: POP
15285: POP
15286: GO 15371
// end ;
15288: GO 14959
15290: POP
15291: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15292: LD_VAR 0 9
15296: PPUSH
15297: LD_VAR 0 3
15301: PPUSH
15302: LD_VAR 0 4
15306: PPUSH
15307: LD_INT 20
15309: PPUSH
15310: CALL 7294 0 4
15314: PUSH
15315: LD_INT 4
15317: ARRAY
15318: IFFALSE 15322
// exit ;
15320: GO 15371
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 29
15329: PUSH
15330: LD_INT 30
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: IN
15337: PUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: LD_VAR 0 4
15347: PPUSH
15348: LD_VAR 0 9
15352: PPUSH
15353: CALL_OW 440
15357: NOT
15358: AND
15359: IFFALSE 15363
// exit ;
15361: GO 15371
// result := true ;
15363: LD_ADDR_VAR 0 6
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 6
15375: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
15409: PPUSH
15410: PPUSH
15411: PPUSH
15412: PPUSH
15413: PPUSH
15414: PPUSH
15415: PPUSH
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
// result = [ ] ;
15436: LD_ADDR_VAR 0 7
15440: PUSH
15441: EMPTY
15442: ST_TO_ADDR
// temp_list = [ ] ;
15443: LD_ADDR_VAR 0 9
15447: PUSH
15448: EMPTY
15449: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15450: LD_VAR 0 4
15454: PUSH
15455: LD_INT 0
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: LD_INT 3
15466: PUSH
15467: LD_INT 4
15469: PUSH
15470: LD_INT 5
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: IN
15481: NOT
15482: PUSH
15483: LD_VAR 0 1
15487: PUSH
15488: LD_INT 0
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: IN
15498: PUSH
15499: LD_VAR 0 5
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: LD_INT 2
15509: PUSH
15510: LD_INT 3
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: IN
15518: NOT
15519: AND
15520: OR
15521: IFFALSE 15525
// exit ;
15523: GO 33916
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15525: LD_VAR 0 1
15529: PUSH
15530: LD_INT 6
15532: PUSH
15533: LD_INT 7
15535: PUSH
15536: LD_INT 8
15538: PUSH
15539: LD_INT 13
15541: PUSH
15542: LD_INT 12
15544: PUSH
15545: LD_INT 15
15547: PUSH
15548: LD_INT 11
15550: PUSH
15551: LD_INT 14
15553: PUSH
15554: LD_INT 10
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: IN
15568: IFFALSE 15578
// btype = b_lab ;
15570: LD_ADDR_VAR 0 1
15574: PUSH
15575: LD_INT 6
15577: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15578: LD_VAR 0 6
15582: PUSH
15583: LD_INT 0
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: LD_INT 2
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: IN
15597: NOT
15598: PUSH
15599: LD_VAR 0 1
15603: PUSH
15604: LD_INT 0
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: LD_INT 6
15618: PUSH
15619: LD_INT 36
15621: PUSH
15622: LD_INT 4
15624: PUSH
15625: LD_INT 5
15627: PUSH
15628: LD_INT 31
15630: PUSH
15631: LD_INT 32
15633: PUSH
15634: LD_INT 33
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: IN
15650: NOT
15651: PUSH
15652: LD_VAR 0 6
15656: PUSH
15657: LD_INT 1
15659: EQUAL
15660: AND
15661: OR
15662: PUSH
15663: LD_VAR 0 1
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 3
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: IN
15678: NOT
15679: PUSH
15680: LD_VAR 0 6
15684: PUSH
15685: LD_INT 2
15687: EQUAL
15688: AND
15689: OR
15690: IFFALSE 15700
// mode = 0 ;
15692: LD_ADDR_VAR 0 6
15696: PUSH
15697: LD_INT 0
15699: ST_TO_ADDR
// case mode of 0 :
15700: LD_VAR 0 6
15704: PUSH
15705: LD_INT 0
15707: DOUBLE
15708: EQUAL
15709: IFTRUE 15713
15711: GO 27166
15713: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15714: LD_ADDR_VAR 0 11
15718: PUSH
15719: LD_INT 0
15721: PUSH
15722: LD_INT 0
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 0
15731: PUSH
15732: LD_INT 1
15734: NEG
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 1
15742: PUSH
15743: LD_INT 0
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 1
15752: PUSH
15753: LD_INT 1
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: LD_INT 1
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 1
15772: NEG
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 1
15783: NEG
15784: PUSH
15785: LD_INT 1
15787: NEG
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 1
15795: NEG
15796: PUSH
15797: LD_INT 2
15799: NEG
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 0
15807: PUSH
15808: LD_INT 2
15810: NEG
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: LD_INT 1
15821: NEG
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: LD_INT 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 0
15839: PUSH
15840: LD_INT 2
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 1
15849: NEG
15850: PUSH
15851: LD_INT 1
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 1
15860: PUSH
15861: LD_INT 3
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 0
15870: PUSH
15871: LD_INT 3
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 1
15880: NEG
15881: PUSH
15882: LD_INT 2
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15907: LD_ADDR_VAR 0 12
15911: PUSH
15912: LD_INT 0
15914: PUSH
15915: LD_INT 0
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 0
15924: PUSH
15925: LD_INT 1
15927: NEG
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 1
15935: PUSH
15936: LD_INT 0
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 1
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 0
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 1
15965: NEG
15966: PUSH
15967: LD_INT 0
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 1
15976: NEG
15977: PUSH
15978: LD_INT 1
15980: NEG
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 1
15988: PUSH
15989: LD_INT 1
15991: NEG
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 2
15999: PUSH
16000: LD_INT 0
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 2
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 1
16019: NEG
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 2
16030: NEG
16031: PUSH
16032: LD_INT 0
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 2
16041: NEG
16042: PUSH
16043: LD_INT 1
16045: NEG
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 2
16053: NEG
16054: PUSH
16055: LD_INT 1
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 3
16064: NEG
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 3
16075: NEG
16076: PUSH
16077: LD_INT 1
16079: NEG
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16103: LD_ADDR_VAR 0 13
16107: PUSH
16108: LD_INT 0
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 0
16120: PUSH
16121: LD_INT 1
16123: NEG
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: LD_INT 0
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 0
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 1
16161: NEG
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: LD_INT 1
16176: NEG
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 1
16184: NEG
16185: PUSH
16186: LD_INT 2
16188: NEG
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 2
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 2
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: LD_INT 2
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 2
16226: NEG
16227: PUSH
16228: LD_INT 1
16230: NEG
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 2
16238: NEG
16239: PUSH
16240: LD_INT 2
16242: NEG
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 2
16250: NEG
16251: PUSH
16252: LD_INT 3
16254: NEG
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 3
16262: NEG
16263: PUSH
16264: LD_INT 2
16266: NEG
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 3
16274: NEG
16275: PUSH
16276: LD_INT 3
16278: NEG
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16302: LD_ADDR_VAR 0 14
16306: PUSH
16307: LD_INT 0
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: LD_INT 1
16322: NEG
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: LD_INT 0
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 0
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 1
16360: NEG
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 1
16371: NEG
16372: PUSH
16373: LD_INT 1
16375: NEG
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 1
16383: NEG
16384: PUSH
16385: LD_INT 2
16387: NEG
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: LD_INT 2
16398: NEG
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: LD_INT 1
16409: NEG
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: LD_INT 2
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 1
16437: NEG
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: LD_INT 3
16452: NEG
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 0
16460: PUSH
16461: LD_INT 3
16463: NEG
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 2
16474: NEG
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16498: LD_ADDR_VAR 0 15
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 0
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: LD_INT 0
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 1
16556: NEG
16557: PUSH
16558: LD_INT 0
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 1
16567: NEG
16568: PUSH
16569: LD_INT 1
16571: NEG
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 1
16582: NEG
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 0
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 2
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 1
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 2
16621: NEG
16622: PUSH
16623: LD_INT 0
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: NEG
16633: PUSH
16634: LD_INT 1
16636: NEG
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 1
16647: NEG
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 3
16655: PUSH
16656: LD_INT 0
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 3
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16691: LD_ADDR_VAR 0 16
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: LD_INT 0
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: LD_INT 1
16711: NEG
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: LD_INT 0
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: LD_INT 0
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 1
16760: NEG
16761: PUSH
16762: LD_INT 1
16764: NEG
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: NEG
16773: PUSH
16774: LD_INT 2
16776: NEG
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 2
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 1
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 2
16814: NEG
16815: PUSH
16816: LD_INT 1
16818: NEG
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 2
16826: NEG
16827: PUSH
16828: LD_INT 2
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 3
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 3
16848: PUSH
16849: LD_INT 3
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 2
16858: PUSH
16859: LD_INT 3
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16884: LD_ADDR_VAR 0 17
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: LD_INT 0
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 0
16901: PUSH
16902: LD_INT 1
16904: NEG
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: LD_INT 0
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 0
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 1
16942: NEG
16943: PUSH
16944: LD_INT 0
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 1
16953: NEG
16954: PUSH
16955: LD_INT 1
16957: NEG
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 1
16965: NEG
16966: PUSH
16967: LD_INT 2
16969: NEG
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 0
16977: PUSH
16978: LD_INT 2
16980: NEG
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: LD_INT 1
16991: NEG
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 1
17049: NEG
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 2
17060: NEG
17061: PUSH
17062: LD_INT 0
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 2
17071: NEG
17072: PUSH
17073: LD_INT 1
17075: NEG
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 2
17083: NEG
17084: PUSH
17085: LD_INT 2
17087: NEG
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17114: LD_ADDR_VAR 0 18
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: LD_INT 0
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 0
17131: PUSH
17132: LD_INT 1
17134: NEG
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 0
17162: PUSH
17163: LD_INT 1
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 1
17172: NEG
17173: PUSH
17174: LD_INT 0
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 1
17183: NEG
17184: PUSH
17185: LD_INT 1
17187: NEG
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 1
17195: NEG
17196: PUSH
17197: LD_INT 2
17199: NEG
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 0
17207: PUSH
17208: LD_INT 2
17210: NEG
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: LD_INT 1
17221: NEG
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 2
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: LD_INT 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 1
17279: NEG
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: LD_INT 0
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 2
17301: NEG
17302: PUSH
17303: LD_INT 1
17305: NEG
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 2
17313: NEG
17314: PUSH
17315: LD_INT 2
17317: NEG
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17344: LD_ADDR_VAR 0 19
17348: PUSH
17349: LD_INT 0
17351: PUSH
17352: LD_INT 0
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: LD_INT 1
17364: NEG
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 0
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 1
17402: NEG
17403: PUSH
17404: LD_INT 0
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 1
17413: NEG
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 1
17425: NEG
17426: PUSH
17427: LD_INT 2
17429: NEG
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 0
17437: PUSH
17438: LD_INT 2
17440: NEG
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: LD_INT 1
17451: NEG
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 0
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 2
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 2
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 1
17489: PUSH
17490: LD_INT 2
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: LD_INT 2
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 1
17509: NEG
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 2
17520: NEG
17521: PUSH
17522: LD_INT 0
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 2
17531: NEG
17532: PUSH
17533: LD_INT 1
17535: NEG
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 2
17543: NEG
17544: PUSH
17545: LD_INT 2
17547: NEG
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17574: LD_ADDR_VAR 0 20
17578: PUSH
17579: LD_INT 0
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: LD_INT 1
17594: NEG
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 1
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 0
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 1
17632: NEG
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 1
17643: NEG
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: NEG
17656: PUSH
17657: LD_INT 2
17659: NEG
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 0
17667: PUSH
17668: LD_INT 2
17670: NEG
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: PUSH
17679: LD_INT 1
17681: NEG
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: LD_INT 0
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 2
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 2
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 1
17739: NEG
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: NEG
17751: PUSH
17752: LD_INT 0
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 2
17761: NEG
17762: PUSH
17763: LD_INT 1
17765: NEG
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 2
17773: NEG
17774: PUSH
17775: LD_INT 2
17777: NEG
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17804: LD_ADDR_VAR 0 21
17808: PUSH
17809: LD_INT 0
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 0
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 1
17862: NEG
17863: PUSH
17864: LD_INT 0
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 2
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: LD_INT 1
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 1
17969: NEG
17970: PUSH
17971: LD_INT 1
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: NEG
17992: PUSH
17993: LD_INT 1
17995: NEG
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18034: LD_ADDR_VAR 0 22
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 2
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18264: LD_ADDR_VAR 0 23
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: NEG
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: LD_INT 2
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 2
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: NEG
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: NEG
18452: PUSH
18453: LD_INT 1
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: NEG
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 2
18475: NEG
18476: PUSH
18477: LD_INT 3
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 1
18487: NEG
18488: PUSH
18489: LD_INT 3
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18544: LD_ADDR_VAR 0 24
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: LD_INT 1
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: NEG
18603: PUSH
18604: LD_INT 0
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 1
18613: NEG
18614: PUSH
18615: LD_INT 1
18617: NEG
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: LD_INT 2
18629: NEG
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: LD_INT 2
18640: NEG
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 2
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 1
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 2
18731: NEG
18732: PUSH
18733: LD_INT 1
18735: NEG
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 2
18743: NEG
18744: PUSH
18745: LD_INT 2
18747: NEG
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: LD_INT 2
18758: NEG
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: LD_INT 1
18769: NEG
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 3
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18820: LD_ADDR_VAR 0 25
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 1
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 1
18893: NEG
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 2
18905: NEG
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: NEG
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: NEG
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: LD_INT 2
19023: NEG
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 3
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 3
19041: PUSH
19042: LD_INT 2
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: LD_INT 3
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19094: LD_ADDR_VAR 0 26
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 0
19142: PUSH
19143: LD_INT 1
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 1
19152: NEG
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 2
19179: NEG
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 1
19259: NEG
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: NEG
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: NEG
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: NEG
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: LD_INT 3
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 3
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19370: LD_ADDR_VAR 0 27
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 0
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 1
19428: NEG
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 1
19451: NEG
19452: PUSH
19453: LD_INT 2
19455: NEG
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 2
19466: NEG
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: NEG
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 2
19569: NEG
19570: PUSH
19571: LD_INT 2
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 2
19592: NEG
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 3
19603: NEG
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 3
19615: NEG
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19650: LD_ADDR_VAR 0 28
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: NEG
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: LD_INT 2
19746: NEG
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: NEG
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: NEG
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 2
19837: NEG
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: NEG
19850: PUSH
19851: LD_INT 2
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: NEG
19862: PUSH
19863: LD_INT 3
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: LD_INT 3
19877: NEG
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 3
19885: NEG
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 3
19897: NEG
19898: PUSH
19899: LD_INT 2
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19932: LD_ADDR_VAR 0 29
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 1
19990: NEG
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 2
20017: NEG
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 2
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 2
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: NEG
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 2
20122: NEG
20123: PUSH
20124: LD_INT 3
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 3
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 3
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: LD_INT 2
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 3
20176: NEG
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20211: LD_ADDR_VAR 0 30
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: LD_INT 2
20296: NEG
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: LD_INT 2
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 1
20366: NEG
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 2
20377: NEG
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 2
20388: NEG
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: LD_INT 3
20404: NEG
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 1
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 3
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: PUSH
20434: LD_INT 3
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: LD_INT 1
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 3
20454: NEG
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20489: LD_ADDR_VAR 0 31
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: LD_INT 2
20574: NEG
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: LD_INT 1
20585: NEG
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 1
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 2
20654: NEG
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: NEG
20679: PUSH
20680: LD_INT 3
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 3
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: LD_INT 3
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 3
20732: NEG
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20767: LD_ADDR_VAR 0 32
20771: PUSH
20772: LD_INT 0
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: LD_INT 1
20787: NEG
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: LD_INT 0
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: LD_INT 1
20840: NEG
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: LD_INT 2
20863: NEG
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 1
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: NEG
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 2
20944: NEG
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: LD_INT 3
20960: NEG
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 3
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: LD_INT 3
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 3
21010: NEG
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21045: LD_ADDR_VAR 0 33
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: LD_INT 0
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 1
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: LD_INT 1
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: LD_INT 2
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: NEG
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 2
21223: NEG
21224: PUSH
21225: LD_INT 2
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: NEG
21236: PUSH
21237: LD_INT 3
21239: NEG
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: LD_INT 1
21250: NEG
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 3
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 3
21289: NEG
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21324: LD_ADDR_VAR 0 34
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: LD_INT 2
21409: NEG
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: LD_INT 2
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: NEG
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: NEG
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: LD_INT 3
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 3
21538: PUSH
21539: LD_INT 2
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 3
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 2
21558: NEG
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 3
21569: NEG
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21604: LD_ADDR_VAR 0 35
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 0
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21716: LD_ADDR_VAR 0 36
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: LD_INT 0
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 1
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 0
21764: PUSH
21765: LD_INT 1
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: NEG
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21828: LD_ADDR_VAR 0 37
21832: PUSH
21833: LD_INT 0
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: LD_INT 0
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 1
21866: PUSH
21867: LD_INT 1
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: LD_INT 0
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: LD_INT 1
21901: NEG
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 1
21912: NEG
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21940: LD_ADDR_VAR 0 38
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 2
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: NEG
22032: PUSH
22033: LD_INT 1
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22052: LD_ADDR_VAR 0 39
22056: PUSH
22057: LD_INT 0
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: LD_INT 0
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: LD_INT 2
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22164: LD_ADDR_VAR 0 40
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 0
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: LD_INT 1
22248: NEG
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22276: LD_ADDR_VAR 0 41
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: NEG
22358: PUSH
22359: LD_INT 2
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: LD_INT 1
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 2
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 2
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: LD_INT 2
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 2
22466: NEG
22467: PUSH
22468: LD_INT 3
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 3
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 2
22539: NEG
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 3
22550: NEG
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: NEG
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 3
22573: NEG
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 3
22585: NEG
22586: PUSH
22587: LD_INT 3
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22626: LD_ADDR_VAR 0 42
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: LD_INT 2
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: NEG
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 2
22804: NEG
22805: PUSH
22806: LD_INT 2
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: NEG
22817: PUSH
22818: LD_INT 3
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 3
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: LD_INT 3
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: LD_INT 2
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 3
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 3
22872: PUSH
22873: LD_INT 3
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: LD_INT 3
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: LD_INT 3
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 3
22923: NEG
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 3
22935: NEG
22936: PUSH
22937: LD_INT 3
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22976: LD_ADDR_VAR 0 43
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: LD_INT 0
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: LD_INT 2
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: NEG
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 2
23153: NEG
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: LD_INT 3
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: LD_INT 3
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 2
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 3
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 3
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: NEG
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 3
23272: NEG
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 3
23283: NEG
23284: PUSH
23285: LD_INT 1
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23324: LD_ADDR_VAR 0 44
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 2
23502: NEG
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: LD_INT 3
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: LD_INT 3
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 2
23587: NEG
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 3
23598: NEG
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 3
23609: NEG
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 3
23621: NEG
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 3
23633: NEG
23634: PUSH
23635: LD_INT 3
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23674: LD_ADDR_VAR 0 45
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: NEG
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 0
23767: PUSH
23768: LD_INT 2
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 2
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 2
23840: NEG
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: NEG
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 2
23864: NEG
23865: PUSH
23866: LD_INT 3
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 3
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 3
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 2
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 3
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 3
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 3
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: LD_INT 3
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 3
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 3
23971: NEG
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 3
23983: NEG
23984: PUSH
23985: LD_INT 3
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24024: LD_ADDR_VAR 0 46
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 2
24190: NEG
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 2
24201: NEG
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: LD_INT 3
24217: NEG
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: LD_INT 3
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 3
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 3
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: NEG
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 3
24320: NEG
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 3
24331: NEG
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24372: LD_ADDR_VAR 0 47
24376: PUSH
24377: LD_INT 0
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: LD_INT 2
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 2
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 2
24487: NEG
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 2
24499: NEG
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24523: LD_ADDR_VAR 0 48
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: LD_INT 2
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 2
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24670: LD_ADDR_VAR 0 49
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 1
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: LD_INT 1
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: PUSH
24783: LD_INT 2
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24814: LD_ADDR_VAR 0 50
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24958: LD_ADDR_VAR 0 51
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 2
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25105: LD_ADDR_VAR 0 52
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: NEG
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 2
25220: NEG
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 2
25232: NEG
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25256: LD_ADDR_VAR 0 53
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 0
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 2
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 2
25443: NEG
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: LD_INT 2
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25486: LD_ADDR_VAR 0 54
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: NEG
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 2
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: LD_INT 2
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: LD_INT 1
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 2
25685: NEG
25686: PUSH
25687: LD_INT 2
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25716: LD_ADDR_VAR 0 55
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: LD_INT 2
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25946: LD_ADDR_VAR 0 56
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: LD_INT 2
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26176: LD_ADDR_VAR 0 57
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26406: LD_ADDR_VAR 0 58
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: NEG
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26636: LD_ADDR_VAR 0 59
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26724: LD_ADDR_VAR 0 60
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26812: LD_ADDR_VAR 0 61
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26900: LD_ADDR_VAR 0 62
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26988: LD_ADDR_VAR 0 63
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27076: LD_ADDR_VAR 0 64
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: ST_TO_ADDR
// end ; 1 :
27164: GO 33061
27166: LD_INT 1
27168: DOUBLE
27169: EQUAL
27170: IFTRUE 27174
27172: GO 29797
27174: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27175: LD_ADDR_VAR 0 11
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 3
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: LD_INT 3
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27219: LD_ADDR_VAR 0 12
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 3
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27260: LD_ADDR_VAR 0 13
27264: PUSH
27265: LD_INT 3
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 3
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 2
27287: PUSH
27288: LD_INT 3
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27300: LD_ADDR_VAR 0 14
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 3
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 3
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27341: LD_ADDR_VAR 0 15
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 3
27359: NEG
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 3
27370: NEG
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27385: LD_ADDR_VAR 0 16
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: LD_INT 3
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 3
27404: NEG
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 3
27416: NEG
27417: PUSH
27418: LD_INT 3
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27431: LD_ADDR_VAR 0 17
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: LD_INT 3
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 3
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 2
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27475: LD_ADDR_VAR 0 18
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 3
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27516: LD_ADDR_VAR 0 19
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 3
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: LD_INT 3
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27556: LD_ADDR_VAR 0 20
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 3
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: LIST
27596: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27597: LD_ADDR_VAR 0 21
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 3
27615: NEG
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 3
27626: NEG
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: LIST
27640: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27641: LD_ADDR_VAR 0 22
27645: PUSH
27646: LD_INT 2
27648: NEG
27649: PUSH
27650: LD_INT 3
27652: NEG
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 3
27660: NEG
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 3
27672: NEG
27673: PUSH
27674: LD_INT 3
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27687: LD_ADDR_VAR 0 23
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: LD_INT 3
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 4
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: LD_INT 3
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27731: LD_ADDR_VAR 0 24
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 3
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 4
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27772: LD_ADDR_VAR 0 25
27776: PUSH
27777: LD_INT 3
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 4
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: LD_INT 4
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27812: LD_ADDR_VAR 0 26
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 3
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: LD_INT 4
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27853: LD_ADDR_VAR 0 27
27857: PUSH
27858: LD_INT 3
27860: NEG
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 3
27871: NEG
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 4
27882: NEG
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27897: LD_ADDR_VAR 0 28
27901: PUSH
27902: LD_INT 3
27904: NEG
27905: PUSH
27906: LD_INT 3
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 3
27916: NEG
27917: PUSH
27918: LD_INT 4
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 4
27928: NEG
27929: PUSH
27930: LD_INT 3
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27943: LD_ADDR_VAR 0 29
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: LD_INT 3
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: LD_INT 3
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: LD_INT 2
27976: NEG
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 4
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 4
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 3
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 5
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 5
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 4
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: LD_INT 6
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 6
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 5
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28098: LD_ADDR_VAR 0 30
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 3
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 3
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 4
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 4
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 4
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 5
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 5
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 5
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 6
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 6
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28241: LD_ADDR_VAR 0 31
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 3
28258: PUSH
28259: LD_INT 3
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: LD_INT 3
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 4
28278: PUSH
28279: LD_INT 3
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 4
28288: PUSH
28289: LD_INT 4
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: LD_INT 4
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 5
28308: PUSH
28309: LD_INT 4
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 5
28318: PUSH
28319: LD_INT 5
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 4
28328: PUSH
28329: LD_INT 5
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 6
28338: PUSH
28339: LD_INT 5
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 6
28348: PUSH
28349: LD_INT 6
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 5
28358: PUSH
28359: LD_INT 6
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28380: LD_ADDR_VAR 0 32
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 3
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 2
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 4
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 4
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 5
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: LD_INT 5
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 4
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: LD_INT 6
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 6
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: LD_INT 5
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28523: LD_ADDR_VAR 0 33
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 3
28541: NEG
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 3
28552: NEG
28553: PUSH
28554: LD_INT 1
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 3
28564: NEG
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 4
28575: NEG
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 4
28586: NEG
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 4
28598: NEG
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 5
28609: NEG
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 5
28620: NEG
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 5
28632: NEG
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 6
28643: NEG
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 6
28654: NEG
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28678: LD_ADDR_VAR 0 34
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: LD_INT 3
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 3
28697: NEG
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 3
28709: NEG
28710: PUSH
28711: LD_INT 3
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 3
28721: NEG
28722: PUSH
28723: LD_INT 4
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 4
28733: NEG
28734: PUSH
28735: LD_INT 3
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 4
28745: NEG
28746: PUSH
28747: LD_INT 4
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 4
28757: NEG
28758: PUSH
28759: LD_INT 5
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 5
28769: NEG
28770: PUSH
28771: LD_INT 4
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 5
28781: NEG
28782: PUSH
28783: LD_INT 5
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 5
28793: NEG
28794: PUSH
28795: LD_INT 6
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 6
28805: NEG
28806: PUSH
28807: LD_INT 5
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 6
28817: NEG
28818: PUSH
28819: LD_INT 6
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28841: LD_ADDR_VAR 0 41
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: LD_INT 3
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: LD_INT 2
28874: NEG
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: LIST
28884: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28885: LD_ADDR_VAR 0 42
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 3
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28926: LD_ADDR_VAR 0 43
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: LD_INT 2
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 3
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 3
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28966: LD_ADDR_VAR 0 44
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: LD_INT 2
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: LIST
29006: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29007: LD_ADDR_VAR 0 45
29011: PUSH
29012: LD_INT 2
29014: NEG
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: NEG
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29051: LD_ADDR_VAR 0 46
29055: PUSH
29056: LD_INT 2
29058: NEG
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 3
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: NEG
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29097: LD_ADDR_VAR 0 47
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: LD_INT 3
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: LD_INT 3
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29130: LD_ADDR_VAR 0 48
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: LD_INT 2
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 2
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29161: LD_ADDR_VAR 0 49
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29190: LD_ADDR_VAR 0 50
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 3
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29219: LD_ADDR_VAR 0 51
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29250: LD_ADDR_VAR 0 52
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 3
29269: NEG
29270: PUSH
29271: LD_INT 2
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29283: LD_ADDR_VAR 0 53
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: LD_INT 3
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 3
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29327: LD_ADDR_VAR 0 54
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 3
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 3
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29368: LD_ADDR_VAR 0 55
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: LIST
29407: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29408: LD_ADDR_VAR 0 56
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 3
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29449: LD_ADDR_VAR 0 57
29453: PUSH
29454: LD_INT 2
29456: NEG
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 3
29467: NEG
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 3
29478: NEG
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: LIST
29492: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29493: LD_ADDR_VAR 0 58
29497: PUSH
29498: LD_INT 2
29500: NEG
29501: PUSH
29502: LD_INT 3
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 3
29512: NEG
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 3
29524: NEG
29525: PUSH
29526: LD_INT 3
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29539: LD_ADDR_VAR 0 59
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: LD_INT 2
29550: NEG
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: LD_INT 2
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29583: LD_ADDR_VAR 0 60
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 2
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29624: LD_ADDR_VAR 0 61
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 1
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: LIST
29663: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29664: LD_ADDR_VAR 0 62
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29705: LD_ADDR_VAR 0 63
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29749: LD_ADDR_VAR 0 64
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: LD_INT 2
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 2
29780: NEG
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// end ; 2 :
29795: GO 33061
29797: LD_INT 2
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 33060
29805: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29806: LD_ADDR_VAR 0 29
29810: PUSH
29811: LD_INT 4
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 4
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 5
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 5
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 4
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 5
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: LD_INT 3
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 4
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 4
29936: PUSH
29937: LD_INT 4
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: LD_INT 4
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: LD_INT 3
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 4
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: LD_INT 4
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 4
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 3
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: LD_INT 4
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: LD_INT 5
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: LD_INT 5
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: LD_INT 4
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: LD_INT 3
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 5
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 3
30089: NEG
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 3
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 2
30123: NEG
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 4
30145: NEG
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 4
30156: NEG
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 4
30168: NEG
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 4
30191: NEG
30192: PUSH
30193: LD_INT 4
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 4
30203: NEG
30204: PUSH
30205: LD_INT 5
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: NEG
30216: PUSH
30217: LD_INT 4
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 3
30227: NEG
30228: PUSH
30229: LD_INT 3
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 4
30239: NEG
30240: PUSH
30241: LD_INT 3
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 5
30251: NEG
30252: PUSH
30253: LD_INT 4
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 5
30263: NEG
30264: PUSH
30265: LD_INT 5
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: LD_INT 5
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 5
30287: NEG
30288: PUSH
30289: LD_INT 3
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30344: LD_ADDR_VAR 0 30
30348: PUSH
30349: LD_INT 4
30351: PUSH
30352: LD_INT 4
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 4
30361: PUSH
30362: LD_INT 3
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 5
30371: PUSH
30372: LD_INT 4
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 5
30381: PUSH
30382: LD_INT 5
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 4
30391: PUSH
30392: LD_INT 5
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: LD_INT 4
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: LD_INT 3
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 5
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 4
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 4
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: LD_INT 4
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 2
30523: NEG
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 4
30534: NEG
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 4
30545: NEG
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 3
30557: NEG
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 4
30579: NEG
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 5
30590: NEG
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 5
30601: NEG
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 5
30613: NEG
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: NEG
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 4
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 2
30660: NEG
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: NEG
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 3
30684: NEG
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 4
30696: NEG
30697: PUSH
30698: LD_INT 3
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 4
30708: NEG
30709: PUSH
30710: LD_INT 4
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: LD_INT 4
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 4
30732: NEG
30733: PUSH
30734: LD_INT 2
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 4
30747: NEG
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: LD_INT 5
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: LD_INT 4
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 3
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 4
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: LD_INT 5
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 2
30834: NEG
30835: PUSH
30836: LD_INT 5
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30891: LD_ADDR_VAR 0 31
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: LD_INT 4
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 4
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: LD_INT 5
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 5
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: LD_INT 4
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: LD_INT 5
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 3
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 3
30991: NEG
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 2
31025: NEG
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 3
31036: NEG
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 4
31047: NEG
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 4
31058: NEG
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 4
31070: NEG
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 4
31093: NEG
31094: PUSH
31095: LD_INT 4
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 4
31105: NEG
31106: PUSH
31107: LD_INT 5
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 3
31117: NEG
31118: PUSH
31119: LD_INT 4
31121: NEG
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 3
31129: NEG
31130: PUSH
31131: LD_INT 3
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 4
31141: NEG
31142: PUSH
31143: LD_INT 3
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 5
31153: NEG
31154: PUSH
31155: LD_INT 4
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 5
31165: NEG
31166: PUSH
31167: LD_INT 5
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 3
31177: NEG
31178: PUSH
31179: LD_INT 5
31181: NEG
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 5
31189: NEG
31190: PUSH
31191: LD_INT 3
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 3
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 4
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 3
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: LD_INT 2
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: LD_INT 3
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: LD_INT 4
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: LD_INT 2
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: LD_INT 4
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 4
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 5
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 5
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 4
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 5
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31441: LD_ADDR_VAR 0 32
31445: PUSH
31446: LD_INT 4
31448: NEG
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 4
31459: NEG
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: NEG
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 3
31482: NEG
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 4
31493: NEG
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 5
31504: NEG
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 5
31515: NEG
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 5
31527: NEG
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 3
31539: NEG
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 3
31562: NEG
31563: PUSH
31564: LD_INT 4
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 3
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: LD_INT 2
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 4
31610: NEG
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 4
31622: NEG
31623: PUSH
31624: LD_INT 4
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: LD_INT 4
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 4
31646: NEG
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: LD_INT 4
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: LD_INT 5
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 4
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 3
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 4
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: LD_INT 5
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: LD_INT 3
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: LD_INT 5
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: PUSH
31833: LD_INT 2
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 4
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: LD_INT 4
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: LD_INT 3
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 5
31873: PUSH
31874: LD_INT 4
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 5
31883: PUSH
31884: LD_INT 5
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: PUSH
31894: LD_INT 5
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: LD_INT 4
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: PUSH
31914: LD_INT 3
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 5
31923: PUSH
31924: LD_INT 3
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 3
31933: PUSH
31934: LD_INT 5
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31988: LD_ADDR_VAR 0 33
31992: PUSH
31993: LD_INT 4
31995: NEG
31996: PUSH
31997: LD_INT 4
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 4
32007: NEG
32008: PUSH
32009: LD_INT 5
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 3
32019: NEG
32020: PUSH
32021: LD_INT 4
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 3
32031: NEG
32032: PUSH
32033: LD_INT 3
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 4
32043: NEG
32044: PUSH
32045: LD_INT 3
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 5
32055: NEG
32056: PUSH
32057: LD_INT 4
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 5
32067: NEG
32068: PUSH
32069: LD_INT 5
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: NEG
32080: PUSH
32081: LD_INT 5
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 5
32091: NEG
32092: PUSH
32093: LD_INT 3
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 3
32106: NEG
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 4
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 2
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: PUSH
32160: LD_INT 3
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 4
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: PUSH
32183: LD_INT 2
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: LD_INT 4
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 4
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 4
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 5
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 5
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 4
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 3
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 3
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 5
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 4
32318: PUSH
32319: LD_INT 3
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: LD_INT 4
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 3
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 4
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: LD_INT 4
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 4
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 3
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: LD_INT 4
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: LD_INT 5
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 3
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 5
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32526: LD_ADDR_VAR 0 34
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: LD_INT 4
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: LD_INT 5
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 4
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 3
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 3
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: LD_INT 4
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 5
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: LD_INT 3
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 5
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 3
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 4
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 4
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 3
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 4
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 4
32728: PUSH
32729: LD_INT 4
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 5
32748: PUSH
32749: LD_INT 4
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 5
32758: PUSH
32759: LD_INT 5
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 4
32768: PUSH
32769: LD_INT 5
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 3
32778: PUSH
32779: LD_INT 4
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: LD_INT 5
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: LD_INT 4
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: LD_INT 4
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 4
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 4
32911: NEG
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 4
32922: NEG
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: NEG
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: NEG
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 5
32967: NEG
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 5
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 5
32990: NEG
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: ST_TO_ADDR
// end ; end ;
33058: GO 33061
33060: POP
// case btype of b_depot , b_warehouse :
33061: LD_VAR 0 1
33065: PUSH
33066: LD_INT 0
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33080
33072: LD_INT 1
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33281
33080: POP
// case nation of nation_american :
33081: LD_VAR 0 5
33085: PUSH
33086: LD_INT 1
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33150
33094: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33095: LD_ADDR_VAR 0 9
33099: PUSH
33100: LD_VAR 0 11
33104: PUSH
33105: LD_VAR 0 12
33109: PUSH
33110: LD_VAR 0 13
33114: PUSH
33115: LD_VAR 0 14
33119: PUSH
33120: LD_VAR 0 15
33124: PUSH
33125: LD_VAR 0 16
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: PUSH
33138: LD_VAR 0 4
33142: PUSH
33143: LD_INT 1
33145: PLUS
33146: ARRAY
33147: ST_TO_ADDR
33148: GO 33279
33150: LD_INT 2
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33214
33158: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33159: LD_ADDR_VAR 0 9
33163: PUSH
33164: LD_VAR 0 17
33168: PUSH
33169: LD_VAR 0 18
33173: PUSH
33174: LD_VAR 0 19
33178: PUSH
33179: LD_VAR 0 20
33183: PUSH
33184: LD_VAR 0 21
33188: PUSH
33189: LD_VAR 0 22
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: PUSH
33202: LD_VAR 0 4
33206: PUSH
33207: LD_INT 1
33209: PLUS
33210: ARRAY
33211: ST_TO_ADDR
33212: GO 33279
33214: LD_INT 3
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33278
33222: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33223: LD_ADDR_VAR 0 9
33227: PUSH
33228: LD_VAR 0 23
33232: PUSH
33233: LD_VAR 0 24
33237: PUSH
33238: LD_VAR 0 25
33242: PUSH
33243: LD_VAR 0 26
33247: PUSH
33248: LD_VAR 0 27
33252: PUSH
33253: LD_VAR 0 28
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: PUSH
33266: LD_VAR 0 4
33270: PUSH
33271: LD_INT 1
33273: PLUS
33274: ARRAY
33275: ST_TO_ADDR
33276: GO 33279
33278: POP
33279: GO 33834
33281: LD_INT 2
33283: DOUBLE
33284: EQUAL
33285: IFTRUE 33295
33287: LD_INT 3
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33351
33295: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33296: LD_ADDR_VAR 0 9
33300: PUSH
33301: LD_VAR 0 29
33305: PUSH
33306: LD_VAR 0 30
33310: PUSH
33311: LD_VAR 0 31
33315: PUSH
33316: LD_VAR 0 32
33320: PUSH
33321: LD_VAR 0 33
33325: PUSH
33326: LD_VAR 0 34
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: PUSH
33339: LD_VAR 0 4
33343: PUSH
33344: LD_INT 1
33346: PLUS
33347: ARRAY
33348: ST_TO_ADDR
33349: GO 33834
33351: LD_INT 16
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33413
33357: LD_INT 17
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33413
33363: LD_INT 18
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33413
33369: LD_INT 19
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33413
33375: LD_INT 22
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33413
33381: LD_INT 20
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33413
33387: LD_INT 21
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33413
33393: LD_INT 23
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33413
33399: LD_INT 24
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33413
33405: LD_INT 25
33407: DOUBLE
33408: EQUAL
33409: IFTRUE 33413
33411: GO 33469
33413: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_VAR 0 35
33423: PUSH
33424: LD_VAR 0 36
33428: PUSH
33429: LD_VAR 0 37
33433: PUSH
33434: LD_VAR 0 38
33438: PUSH
33439: LD_VAR 0 39
33443: PUSH
33444: LD_VAR 0 40
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: PUSH
33457: LD_VAR 0 4
33461: PUSH
33462: LD_INT 1
33464: PLUS
33465: ARRAY
33466: ST_TO_ADDR
33467: GO 33834
33469: LD_INT 6
33471: DOUBLE
33472: EQUAL
33473: IFTRUE 33525
33475: LD_INT 7
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33525
33481: LD_INT 8
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33525
33487: LD_INT 13
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33525
33493: LD_INT 12
33495: DOUBLE
33496: EQUAL
33497: IFTRUE 33525
33499: LD_INT 15
33501: DOUBLE
33502: EQUAL
33503: IFTRUE 33525
33505: LD_INT 11
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33525
33511: LD_INT 14
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33525
33517: LD_INT 10
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33581
33525: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33526: LD_ADDR_VAR 0 9
33530: PUSH
33531: LD_VAR 0 41
33535: PUSH
33536: LD_VAR 0 42
33540: PUSH
33541: LD_VAR 0 43
33545: PUSH
33546: LD_VAR 0 44
33550: PUSH
33551: LD_VAR 0 45
33555: PUSH
33556: LD_VAR 0 46
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: PUSH
33569: LD_VAR 0 4
33573: PUSH
33574: LD_INT 1
33576: PLUS
33577: ARRAY
33578: ST_TO_ADDR
33579: GO 33834
33581: LD_INT 36
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33645
33589: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33590: LD_ADDR_VAR 0 9
33594: PUSH
33595: LD_VAR 0 47
33599: PUSH
33600: LD_VAR 0 48
33604: PUSH
33605: LD_VAR 0 49
33609: PUSH
33610: LD_VAR 0 50
33614: PUSH
33615: LD_VAR 0 51
33619: PUSH
33620: LD_VAR 0 52
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: LD_VAR 0 4
33637: PUSH
33638: LD_INT 1
33640: PLUS
33641: ARRAY
33642: ST_TO_ADDR
33643: GO 33834
33645: LD_INT 4
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33671
33651: LD_INT 5
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33671
33657: LD_INT 34
33659: DOUBLE
33660: EQUAL
33661: IFTRUE 33671
33663: LD_INT 37
33665: DOUBLE
33666: EQUAL
33667: IFTRUE 33671
33669: GO 33727
33671: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33672: LD_ADDR_VAR 0 9
33676: PUSH
33677: LD_VAR 0 53
33681: PUSH
33682: LD_VAR 0 54
33686: PUSH
33687: LD_VAR 0 55
33691: PUSH
33692: LD_VAR 0 56
33696: PUSH
33697: LD_VAR 0 57
33701: PUSH
33702: LD_VAR 0 58
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: PUSH
33715: LD_VAR 0 4
33719: PUSH
33720: LD_INT 1
33722: PLUS
33723: ARRAY
33724: ST_TO_ADDR
33725: GO 33834
33727: LD_INT 31
33729: DOUBLE
33730: EQUAL
33731: IFTRUE 33777
33733: LD_INT 32
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33777
33739: LD_INT 33
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33777
33745: LD_INT 27
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33777
33751: LD_INT 26
33753: DOUBLE
33754: EQUAL
33755: IFTRUE 33777
33757: LD_INT 28
33759: DOUBLE
33760: EQUAL
33761: IFTRUE 33777
33763: LD_INT 29
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33777
33769: LD_INT 30
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33777
33775: GO 33833
33777: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33778: LD_ADDR_VAR 0 9
33782: PUSH
33783: LD_VAR 0 59
33787: PUSH
33788: LD_VAR 0 60
33792: PUSH
33793: LD_VAR 0 61
33797: PUSH
33798: LD_VAR 0 62
33802: PUSH
33803: LD_VAR 0 63
33807: PUSH
33808: LD_VAR 0 64
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: PUSH
33821: LD_VAR 0 4
33825: PUSH
33826: LD_INT 1
33828: PLUS
33829: ARRAY
33830: ST_TO_ADDR
33831: GO 33834
33833: POP
// temp_list2 = [ ] ;
33834: LD_ADDR_VAR 0 10
33838: PUSH
33839: EMPTY
33840: ST_TO_ADDR
// for i in temp_list do
33841: LD_ADDR_VAR 0 8
33845: PUSH
33846: LD_VAR 0 9
33850: PUSH
33851: FOR_IN
33852: IFFALSE 33904
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33854: LD_ADDR_VAR 0 10
33858: PUSH
33859: LD_VAR 0 10
33863: PUSH
33864: LD_VAR 0 8
33868: PUSH
33869: LD_INT 1
33871: ARRAY
33872: PUSH
33873: LD_VAR 0 2
33877: PLUS
33878: PUSH
33879: LD_VAR 0 8
33883: PUSH
33884: LD_INT 2
33886: ARRAY
33887: PUSH
33888: LD_VAR 0 3
33892: PLUS
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: ADD
33901: ST_TO_ADDR
33902: GO 33851
33904: POP
33905: POP
// result = temp_list2 ;
33906: LD_ADDR_VAR 0 7
33910: PUSH
33911: LD_VAR 0 10
33915: ST_TO_ADDR
// end ;
33916: LD_VAR 0 7
33920: RET
// export function EnemyInRange ( unit , dist ) ; begin
33921: LD_INT 0
33923: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33924: LD_ADDR_VAR 0 3
33928: PUSH
33929: LD_VAR 0 1
33933: PPUSH
33934: CALL_OW 255
33938: PPUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 250
33948: PPUSH
33949: LD_VAR 0 1
33953: PPUSH
33954: CALL_OW 251
33958: PPUSH
33959: LD_VAR 0 2
33963: PPUSH
33964: CALL 7294 0 4
33968: PUSH
33969: LD_INT 4
33971: ARRAY
33972: ST_TO_ADDR
// end ;
33973: LD_VAR 0 3
33977: RET
// export function PlayerSeeMe ( unit ) ; begin
33978: LD_INT 0
33980: PPUSH
// result := See ( your_side , unit ) ;
33981: LD_ADDR_VAR 0 2
33985: PUSH
33986: LD_OWVAR 2
33990: PPUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL_OW 292
34000: ST_TO_ADDR
// end ;
34001: LD_VAR 0 2
34005: RET
// export function ReverseDir ( unit ) ; begin
34006: LD_INT 0
34008: PPUSH
// if not unit then
34009: LD_VAR 0 1
34013: NOT
34014: IFFALSE 34018
// exit ;
34016: GO 34041
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34018: LD_ADDR_VAR 0 2
34022: PUSH
34023: LD_VAR 0 1
34027: PPUSH
34028: CALL_OW 254
34032: PUSH
34033: LD_INT 3
34035: PLUS
34036: PUSH
34037: LD_INT 6
34039: MOD
34040: ST_TO_ADDR
// end ;
34041: LD_VAR 0 2
34045: RET
// export function ReverseArray ( array ) ; var i ; begin
34046: LD_INT 0
34048: PPUSH
34049: PPUSH
// if not array then
34050: LD_VAR 0 1
34054: NOT
34055: IFFALSE 34059
// exit ;
34057: GO 34114
// result := [ ] ;
34059: LD_ADDR_VAR 0 2
34063: PUSH
34064: EMPTY
34065: ST_TO_ADDR
// for i := array downto 1 do
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: DOUBLE
34072: LD_VAR 0 1
34076: INC
34077: ST_TO_ADDR
34078: LD_INT 1
34080: PUSH
34081: FOR_DOWNTO
34082: IFFALSE 34112
// result := Join ( result , array [ i ] ) ;
34084: LD_ADDR_VAR 0 2
34088: PUSH
34089: LD_VAR 0 2
34093: PPUSH
34094: LD_VAR 0 1
34098: PUSH
34099: LD_VAR 0 3
34103: ARRAY
34104: PPUSH
34105: CALL 38757 0 2
34109: ST_TO_ADDR
34110: GO 34081
34112: POP
34113: POP
// end ;
34114: LD_VAR 0 2
34118: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34119: LD_INT 0
34121: PPUSH
34122: PPUSH
34123: PPUSH
34124: PPUSH
34125: PPUSH
34126: PPUSH
// if not unit or not hexes then
34127: LD_VAR 0 1
34131: NOT
34132: PUSH
34133: LD_VAR 0 2
34137: NOT
34138: OR
34139: IFFALSE 34143
// exit ;
34141: GO 34266
// dist := 9999 ;
34143: LD_ADDR_VAR 0 5
34147: PUSH
34148: LD_INT 9999
34150: ST_TO_ADDR
// for i = 1 to hexes do
34151: LD_ADDR_VAR 0 4
34155: PUSH
34156: DOUBLE
34157: LD_INT 1
34159: DEC
34160: ST_TO_ADDR
34161: LD_VAR 0 2
34165: PUSH
34166: FOR_TO
34167: IFFALSE 34254
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34169: LD_ADDR_VAR 0 6
34173: PUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: LD_VAR 0 2
34183: PUSH
34184: LD_VAR 0 4
34188: ARRAY
34189: PUSH
34190: LD_INT 1
34192: ARRAY
34193: PPUSH
34194: LD_VAR 0 2
34198: PUSH
34199: LD_VAR 0 4
34203: ARRAY
34204: PUSH
34205: LD_INT 2
34207: ARRAY
34208: PPUSH
34209: CALL_OW 297
34213: ST_TO_ADDR
// if tdist < dist then
34214: LD_VAR 0 6
34218: PUSH
34219: LD_VAR 0 5
34223: LESS
34224: IFFALSE 34252
// begin hex := hexes [ i ] ;
34226: LD_ADDR_VAR 0 8
34230: PUSH
34231: LD_VAR 0 2
34235: PUSH
34236: LD_VAR 0 4
34240: ARRAY
34241: ST_TO_ADDR
// dist := tdist ;
34242: LD_ADDR_VAR 0 5
34246: PUSH
34247: LD_VAR 0 6
34251: ST_TO_ADDR
// end ; end ;
34252: GO 34166
34254: POP
34255: POP
// result := hex ;
34256: LD_ADDR_VAR 0 3
34260: PUSH
34261: LD_VAR 0 8
34265: ST_TO_ADDR
// end ;
34266: LD_VAR 0 3
34270: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34271: LD_INT 0
34273: PPUSH
34274: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34275: LD_VAR 0 1
34279: NOT
34280: PUSH
34281: LD_VAR 0 1
34285: PUSH
34286: LD_INT 21
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 23
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PPUSH
34310: CALL_OW 69
34314: IN
34315: NOT
34316: OR
34317: IFFALSE 34321
// exit ;
34319: GO 34368
// for i = 1 to 3 do
34321: LD_ADDR_VAR 0 3
34325: PUSH
34326: DOUBLE
34327: LD_INT 1
34329: DEC
34330: ST_TO_ADDR
34331: LD_INT 3
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34366
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 250
34346: PPUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 251
34356: PPUSH
34357: LD_INT 1
34359: PPUSH
34360: CALL_OW 453
34364: GO 34334
34366: POP
34367: POP
// end ;
34368: LD_VAR 0 2
34372: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34373: LD_INT 0
34375: PPUSH
34376: PPUSH
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34381: LD_VAR 0 1
34385: NOT
34386: PUSH
34387: LD_VAR 0 2
34391: NOT
34392: OR
34393: PUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL_OW 314
34403: OR
34404: IFFALSE 34408
// exit ;
34406: GO 34875
// if GetLives ( i ) < 250 then
34408: LD_VAR 0 4
34412: PPUSH
34413: CALL_OW 256
34417: PUSH
34418: LD_INT 250
34420: LESS
34421: IFFALSE 34434
// begin ComAutodestruct ( i ) ;
34423: LD_VAR 0 4
34427: PPUSH
34428: CALL 34271 0 1
// exit ;
34432: GO 34875
// end ; x := GetX ( enemy_unit ) ;
34434: LD_ADDR_VAR 0 7
34438: PUSH
34439: LD_VAR 0 2
34443: PPUSH
34444: CALL_OW 250
34448: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34449: LD_ADDR_VAR 0 8
34453: PUSH
34454: LD_VAR 0 2
34458: PPUSH
34459: CALL_OW 251
34463: ST_TO_ADDR
// if not x or not y then
34464: LD_VAR 0 7
34468: NOT
34469: PUSH
34470: LD_VAR 0 8
34474: NOT
34475: OR
34476: IFFALSE 34480
// exit ;
34478: GO 34875
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34480: LD_ADDR_VAR 0 6
34484: PUSH
34485: LD_VAR 0 7
34489: PPUSH
34490: LD_INT 0
34492: PPUSH
34493: LD_INT 4
34495: PPUSH
34496: CALL_OW 272
34500: PUSH
34501: LD_VAR 0 8
34505: PPUSH
34506: LD_INT 0
34508: PPUSH
34509: LD_INT 4
34511: PPUSH
34512: CALL_OW 273
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_VAR 0 7
34525: PPUSH
34526: LD_INT 1
34528: PPUSH
34529: LD_INT 4
34531: PPUSH
34532: CALL_OW 272
34536: PUSH
34537: LD_VAR 0 8
34541: PPUSH
34542: LD_INT 1
34544: PPUSH
34545: LD_INT 4
34547: PPUSH
34548: CALL_OW 273
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_VAR 0 7
34561: PPUSH
34562: LD_INT 2
34564: PPUSH
34565: LD_INT 4
34567: PPUSH
34568: CALL_OW 272
34572: PUSH
34573: LD_VAR 0 8
34577: PPUSH
34578: LD_INT 2
34580: PPUSH
34581: LD_INT 4
34583: PPUSH
34584: CALL_OW 273
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_VAR 0 7
34597: PPUSH
34598: LD_INT 3
34600: PPUSH
34601: LD_INT 4
34603: PPUSH
34604: CALL_OW 272
34608: PUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: LD_INT 3
34616: PPUSH
34617: LD_INT 4
34619: PPUSH
34620: CALL_OW 273
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_VAR 0 7
34633: PPUSH
34634: LD_INT 4
34636: PPUSH
34637: LD_INT 4
34639: PPUSH
34640: CALL_OW 272
34644: PUSH
34645: LD_VAR 0 8
34649: PPUSH
34650: LD_INT 4
34652: PPUSH
34653: LD_INT 4
34655: PPUSH
34656: CALL_OW 273
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_VAR 0 7
34669: PPUSH
34670: LD_INT 5
34672: PPUSH
34673: LD_INT 4
34675: PPUSH
34676: CALL_OW 272
34680: PUSH
34681: LD_VAR 0 8
34685: PPUSH
34686: LD_INT 5
34688: PPUSH
34689: LD_INT 4
34691: PPUSH
34692: CALL_OW 273
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: ST_TO_ADDR
// for i = tmp downto 1 do
34709: LD_ADDR_VAR 0 4
34713: PUSH
34714: DOUBLE
34715: LD_VAR 0 6
34719: INC
34720: ST_TO_ADDR
34721: LD_INT 1
34723: PUSH
34724: FOR_DOWNTO
34725: IFFALSE 34826
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34727: LD_VAR 0 6
34731: PUSH
34732: LD_VAR 0 4
34736: ARRAY
34737: PUSH
34738: LD_INT 1
34740: ARRAY
34741: PPUSH
34742: LD_VAR 0 6
34746: PUSH
34747: LD_VAR 0 4
34751: ARRAY
34752: PUSH
34753: LD_INT 2
34755: ARRAY
34756: PPUSH
34757: CALL_OW 488
34761: NOT
34762: PUSH
34763: LD_VAR 0 6
34767: PUSH
34768: LD_VAR 0 4
34772: ARRAY
34773: PUSH
34774: LD_INT 1
34776: ARRAY
34777: PPUSH
34778: LD_VAR 0 6
34782: PUSH
34783: LD_VAR 0 4
34787: ARRAY
34788: PUSH
34789: LD_INT 2
34791: ARRAY
34792: PPUSH
34793: CALL_OW 428
34797: PUSH
34798: LD_INT 0
34800: NONEQUAL
34801: OR
34802: IFFALSE 34824
// tmp := Delete ( tmp , i ) ;
34804: LD_ADDR_VAR 0 6
34808: PUSH
34809: LD_VAR 0 6
34813: PPUSH
34814: LD_VAR 0 4
34818: PPUSH
34819: CALL_OW 3
34823: ST_TO_ADDR
34824: GO 34724
34826: POP
34827: POP
// j := GetClosestHex ( unit , tmp ) ;
34828: LD_ADDR_VAR 0 5
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: LD_VAR 0 6
34842: PPUSH
34843: CALL 34119 0 2
34847: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_VAR 0 5
34857: PUSH
34858: LD_INT 1
34860: ARRAY
34861: PPUSH
34862: LD_VAR 0 5
34866: PUSH
34867: LD_INT 2
34869: ARRAY
34870: PPUSH
34871: CALL_OW 111
// end ;
34875: LD_VAR 0 3
34879: RET
// export function PrepareApemanSoldier ( ) ; begin
34880: LD_INT 0
34882: PPUSH
// uc_nation := 0 ;
34883: LD_ADDR_OWVAR 21
34887: PUSH
34888: LD_INT 0
34890: ST_TO_ADDR
// hc_sex := sex_male ;
34891: LD_ADDR_OWVAR 27
34895: PUSH
34896: LD_INT 1
34898: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34899: LD_ADDR_OWVAR 28
34903: PUSH
34904: LD_INT 15
34906: ST_TO_ADDR
// hc_gallery :=  ;
34907: LD_ADDR_OWVAR 33
34911: PUSH
34912: LD_STRING 
34914: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34915: LD_ADDR_OWVAR 31
34919: PUSH
34920: LD_INT 0
34922: PPUSH
34923: LD_INT 3
34925: PPUSH
34926: CALL_OW 12
34930: PUSH
34931: LD_INT 0
34933: PPUSH
34934: LD_INT 3
34936: PPUSH
34937: CALL_OW 12
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: ST_TO_ADDR
// end ;
34954: LD_VAR 0 1
34958: RET
// export function PrepareApemanEngineer ( ) ; begin
34959: LD_INT 0
34961: PPUSH
// uc_nation := 0 ;
34962: LD_ADDR_OWVAR 21
34966: PUSH
34967: LD_INT 0
34969: ST_TO_ADDR
// hc_sex := sex_male ;
34970: LD_ADDR_OWVAR 27
34974: PUSH
34975: LD_INT 1
34977: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34978: LD_ADDR_OWVAR 28
34982: PUSH
34983: LD_INT 16
34985: ST_TO_ADDR
// hc_gallery :=  ;
34986: LD_ADDR_OWVAR 33
34990: PUSH
34991: LD_STRING 
34993: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34994: LD_ADDR_OWVAR 31
34998: PUSH
34999: LD_INT 0
35001: PPUSH
35002: LD_INT 3
35004: PPUSH
35005: CALL_OW 12
35009: PUSH
35010: LD_INT 0
35012: PPUSH
35013: LD_INT 3
35015: PPUSH
35016: CALL_OW 12
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
// end ;
35033: LD_VAR 0 1
35037: RET
// export function PrepareApeman ( agressivity ) ; begin
35038: LD_INT 0
35040: PPUSH
// uc_side := 0 ;
35041: LD_ADDR_OWVAR 20
35045: PUSH
35046: LD_INT 0
35048: ST_TO_ADDR
// uc_nation := 0 ;
35049: LD_ADDR_OWVAR 21
35053: PUSH
35054: LD_INT 0
35056: ST_TO_ADDR
// hc_sex := sex_male ;
35057: LD_ADDR_OWVAR 27
35061: PUSH
35062: LD_INT 1
35064: ST_TO_ADDR
// hc_class := class_apeman ;
35065: LD_ADDR_OWVAR 28
35069: PUSH
35070: LD_INT 12
35072: ST_TO_ADDR
// hc_gallery :=  ;
35073: LD_ADDR_OWVAR 33
35077: PUSH
35078: LD_STRING 
35080: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35081: LD_ADDR_OWVAR 35
35085: PUSH
35086: LD_VAR 0 1
35090: NEG
35091: PPUSH
35092: LD_VAR 0 1
35096: PPUSH
35097: CALL_OW 12
35101: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35102: LD_ADDR_OWVAR 31
35106: PUSH
35107: LD_INT 0
35109: PPUSH
35110: LD_INT 3
35112: PPUSH
35113: CALL_OW 12
35117: PUSH
35118: LD_INT 0
35120: PPUSH
35121: LD_INT 3
35123: PPUSH
35124: CALL_OW 12
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: ST_TO_ADDR
// end ;
35141: LD_VAR 0 2
35145: RET
// export function PrepareTiger ( agressivity ) ; begin
35146: LD_INT 0
35148: PPUSH
// uc_side := 0 ;
35149: LD_ADDR_OWVAR 20
35153: PUSH
35154: LD_INT 0
35156: ST_TO_ADDR
// uc_nation := 0 ;
35157: LD_ADDR_OWVAR 21
35161: PUSH
35162: LD_INT 0
35164: ST_TO_ADDR
// hc_class := class_tiger ;
35165: LD_ADDR_OWVAR 28
35169: PUSH
35170: LD_INT 14
35172: ST_TO_ADDR
// hc_gallery :=  ;
35173: LD_ADDR_OWVAR 33
35177: PUSH
35178: LD_STRING 
35180: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35181: LD_ADDR_OWVAR 35
35185: PUSH
35186: LD_VAR 0 1
35190: NEG
35191: PPUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 12
35201: ST_TO_ADDR
// end ;
35202: LD_VAR 0 2
35206: RET
// export function PrepareEnchidna ( ) ; begin
35207: LD_INT 0
35209: PPUSH
// uc_side := 0 ;
35210: LD_ADDR_OWVAR 20
35214: PUSH
35215: LD_INT 0
35217: ST_TO_ADDR
// uc_nation := 0 ;
35218: LD_ADDR_OWVAR 21
35222: PUSH
35223: LD_INT 0
35225: ST_TO_ADDR
// hc_class := class_baggie ;
35226: LD_ADDR_OWVAR 28
35230: PUSH
35231: LD_INT 13
35233: ST_TO_ADDR
// hc_gallery :=  ;
35234: LD_ADDR_OWVAR 33
35238: PUSH
35239: LD_STRING 
35241: ST_TO_ADDR
// end ;
35242: LD_VAR 0 1
35246: RET
// export function PrepareFrog ( ) ; begin
35247: LD_INT 0
35249: PPUSH
// uc_side := 0 ;
35250: LD_ADDR_OWVAR 20
35254: PUSH
35255: LD_INT 0
35257: ST_TO_ADDR
// uc_nation := 0 ;
35258: LD_ADDR_OWVAR 21
35262: PUSH
35263: LD_INT 0
35265: ST_TO_ADDR
// hc_class := class_frog ;
35266: LD_ADDR_OWVAR 28
35270: PUSH
35271: LD_INT 19
35273: ST_TO_ADDR
// hc_gallery :=  ;
35274: LD_ADDR_OWVAR 33
35278: PUSH
35279: LD_STRING 
35281: ST_TO_ADDR
// end ;
35282: LD_VAR 0 1
35286: RET
// export function PrepareFish ( ) ; begin
35287: LD_INT 0
35289: PPUSH
// uc_side := 0 ;
35290: LD_ADDR_OWVAR 20
35294: PUSH
35295: LD_INT 0
35297: ST_TO_ADDR
// uc_nation := 0 ;
35298: LD_ADDR_OWVAR 21
35302: PUSH
35303: LD_INT 0
35305: ST_TO_ADDR
// hc_class := class_fish ;
35306: LD_ADDR_OWVAR 28
35310: PUSH
35311: LD_INT 20
35313: ST_TO_ADDR
// hc_gallery :=  ;
35314: LD_ADDR_OWVAR 33
35318: PUSH
35319: LD_STRING 
35321: ST_TO_ADDR
// end ;
35322: LD_VAR 0 1
35326: RET
// export function PrepareBird ( ) ; begin
35327: LD_INT 0
35329: PPUSH
// uc_side := 0 ;
35330: LD_ADDR_OWVAR 20
35334: PUSH
35335: LD_INT 0
35337: ST_TO_ADDR
// uc_nation := 0 ;
35338: LD_ADDR_OWVAR 21
35342: PUSH
35343: LD_INT 0
35345: ST_TO_ADDR
// hc_class := class_phororhacos ;
35346: LD_ADDR_OWVAR 28
35350: PUSH
35351: LD_INT 18
35353: ST_TO_ADDR
// hc_gallery :=  ;
35354: LD_ADDR_OWVAR 33
35358: PUSH
35359: LD_STRING 
35361: ST_TO_ADDR
// end ;
35362: LD_VAR 0 1
35366: RET
// export function PrepareHorse ( ) ; begin
35367: LD_INT 0
35369: PPUSH
// uc_side := 0 ;
35370: LD_ADDR_OWVAR 20
35374: PUSH
35375: LD_INT 0
35377: ST_TO_ADDR
// uc_nation := 0 ;
35378: LD_ADDR_OWVAR 21
35382: PUSH
35383: LD_INT 0
35385: ST_TO_ADDR
// hc_class := class_horse ;
35386: LD_ADDR_OWVAR 28
35390: PUSH
35391: LD_INT 21
35393: ST_TO_ADDR
// hc_gallery :=  ;
35394: LD_ADDR_OWVAR 33
35398: PUSH
35399: LD_STRING 
35401: ST_TO_ADDR
// end ;
35402: LD_VAR 0 1
35406: RET
// export function PrepareMastodont ( ) ; begin
35407: LD_INT 0
35409: PPUSH
// uc_side := 0 ;
35410: LD_ADDR_OWVAR 20
35414: PUSH
35415: LD_INT 0
35417: ST_TO_ADDR
// uc_nation := 0 ;
35418: LD_ADDR_OWVAR 21
35422: PUSH
35423: LD_INT 0
35425: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35426: LD_ADDR_OWVAR 37
35430: PUSH
35431: LD_INT 31
35433: ST_TO_ADDR
// vc_control := control_rider ;
35434: LD_ADDR_OWVAR 38
35438: PUSH
35439: LD_INT 4
35441: ST_TO_ADDR
// end ;
35442: LD_VAR 0 1
35446: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35447: LD_INT 0
35449: PPUSH
35450: PPUSH
35451: PPUSH
// uc_side = 0 ;
35452: LD_ADDR_OWVAR 20
35456: PUSH
35457: LD_INT 0
35459: ST_TO_ADDR
// uc_nation = 0 ;
35460: LD_ADDR_OWVAR 21
35464: PUSH
35465: LD_INT 0
35467: ST_TO_ADDR
// InitHc_All ( ) ;
35468: CALL_OW 584
// InitVc ;
35472: CALL_OW 20
// if mastodonts then
35476: LD_VAR 0 6
35480: IFFALSE 35547
// for i = 1 to mastodonts do
35482: LD_ADDR_VAR 0 11
35486: PUSH
35487: DOUBLE
35488: LD_INT 1
35490: DEC
35491: ST_TO_ADDR
35492: LD_VAR 0 6
35496: PUSH
35497: FOR_TO
35498: IFFALSE 35545
// begin vc_chassis := 31 ;
35500: LD_ADDR_OWVAR 37
35504: PUSH
35505: LD_INT 31
35507: ST_TO_ADDR
// vc_control := control_rider ;
35508: LD_ADDR_OWVAR 38
35512: PUSH
35513: LD_INT 4
35515: ST_TO_ADDR
// animal := CreateVehicle ;
35516: LD_ADDR_VAR 0 12
35520: PUSH
35521: CALL_OW 45
35525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35526: LD_VAR 0 12
35530: PPUSH
35531: LD_VAR 0 8
35535: PPUSH
35536: LD_INT 0
35538: PPUSH
35539: CALL 37675 0 3
// end ;
35543: GO 35497
35545: POP
35546: POP
// if horses then
35547: LD_VAR 0 5
35551: IFFALSE 35618
// for i = 1 to horses do
35553: LD_ADDR_VAR 0 11
35557: PUSH
35558: DOUBLE
35559: LD_INT 1
35561: DEC
35562: ST_TO_ADDR
35563: LD_VAR 0 5
35567: PUSH
35568: FOR_TO
35569: IFFALSE 35616
// begin hc_class := 21 ;
35571: LD_ADDR_OWVAR 28
35575: PUSH
35576: LD_INT 21
35578: ST_TO_ADDR
// hc_gallery :=  ;
35579: LD_ADDR_OWVAR 33
35583: PUSH
35584: LD_STRING 
35586: ST_TO_ADDR
// animal := CreateHuman ;
35587: LD_ADDR_VAR 0 12
35591: PUSH
35592: CALL_OW 44
35596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35597: LD_VAR 0 12
35601: PPUSH
35602: LD_VAR 0 8
35606: PPUSH
35607: LD_INT 0
35609: PPUSH
35610: CALL 37675 0 3
// end ;
35614: GO 35568
35616: POP
35617: POP
// if birds then
35618: LD_VAR 0 1
35622: IFFALSE 35689
// for i = 1 to birds do
35624: LD_ADDR_VAR 0 11
35628: PUSH
35629: DOUBLE
35630: LD_INT 1
35632: DEC
35633: ST_TO_ADDR
35634: LD_VAR 0 1
35638: PUSH
35639: FOR_TO
35640: IFFALSE 35687
// begin hc_class := 18 ;
35642: LD_ADDR_OWVAR 28
35646: PUSH
35647: LD_INT 18
35649: ST_TO_ADDR
// hc_gallery =  ;
35650: LD_ADDR_OWVAR 33
35654: PUSH
35655: LD_STRING 
35657: ST_TO_ADDR
// animal := CreateHuman ;
35658: LD_ADDR_VAR 0 12
35662: PUSH
35663: CALL_OW 44
35667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35668: LD_VAR 0 12
35672: PPUSH
35673: LD_VAR 0 8
35677: PPUSH
35678: LD_INT 0
35680: PPUSH
35681: CALL 37675 0 3
// end ;
35685: GO 35639
35687: POP
35688: POP
// if tigers then
35689: LD_VAR 0 2
35693: IFFALSE 35777
// for i = 1 to tigers do
35695: LD_ADDR_VAR 0 11
35699: PUSH
35700: DOUBLE
35701: LD_INT 1
35703: DEC
35704: ST_TO_ADDR
35705: LD_VAR 0 2
35709: PUSH
35710: FOR_TO
35711: IFFALSE 35775
// begin hc_class = class_tiger ;
35713: LD_ADDR_OWVAR 28
35717: PUSH
35718: LD_INT 14
35720: ST_TO_ADDR
// hc_gallery =  ;
35721: LD_ADDR_OWVAR 33
35725: PUSH
35726: LD_STRING 
35728: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35729: LD_ADDR_OWVAR 35
35733: PUSH
35734: LD_INT 7
35736: NEG
35737: PPUSH
35738: LD_INT 7
35740: PPUSH
35741: CALL_OW 12
35745: ST_TO_ADDR
// animal := CreateHuman ;
35746: LD_ADDR_VAR 0 12
35750: PUSH
35751: CALL_OW 44
35755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35756: LD_VAR 0 12
35760: PPUSH
35761: LD_VAR 0 8
35765: PPUSH
35766: LD_INT 0
35768: PPUSH
35769: CALL 37675 0 3
// end ;
35773: GO 35710
35775: POP
35776: POP
// if apemans then
35777: LD_VAR 0 3
35781: IFFALSE 35904
// for i = 1 to apemans do
35783: LD_ADDR_VAR 0 11
35787: PUSH
35788: DOUBLE
35789: LD_INT 1
35791: DEC
35792: ST_TO_ADDR
35793: LD_VAR 0 3
35797: PUSH
35798: FOR_TO
35799: IFFALSE 35902
// begin hc_class = class_apeman ;
35801: LD_ADDR_OWVAR 28
35805: PUSH
35806: LD_INT 12
35808: ST_TO_ADDR
// hc_gallery =  ;
35809: LD_ADDR_OWVAR 33
35813: PUSH
35814: LD_STRING 
35816: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35817: LD_ADDR_OWVAR 35
35821: PUSH
35822: LD_INT 2
35824: NEG
35825: PPUSH
35826: LD_INT 2
35828: PPUSH
35829: CALL_OW 12
35833: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35834: LD_ADDR_OWVAR 31
35838: PUSH
35839: LD_INT 1
35841: PPUSH
35842: LD_INT 3
35844: PPUSH
35845: CALL_OW 12
35849: PUSH
35850: LD_INT 1
35852: PPUSH
35853: LD_INT 3
35855: PPUSH
35856: CALL_OW 12
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// animal := CreateHuman ;
35873: LD_ADDR_VAR 0 12
35877: PUSH
35878: CALL_OW 44
35882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35883: LD_VAR 0 12
35887: PPUSH
35888: LD_VAR 0 8
35892: PPUSH
35893: LD_INT 0
35895: PPUSH
35896: CALL 37675 0 3
// end ;
35900: GO 35798
35902: POP
35903: POP
// if enchidnas then
35904: LD_VAR 0 4
35908: IFFALSE 35975
// for i = 1 to enchidnas do
35910: LD_ADDR_VAR 0 11
35914: PUSH
35915: DOUBLE
35916: LD_INT 1
35918: DEC
35919: ST_TO_ADDR
35920: LD_VAR 0 4
35924: PUSH
35925: FOR_TO
35926: IFFALSE 35973
// begin hc_class = 13 ;
35928: LD_ADDR_OWVAR 28
35932: PUSH
35933: LD_INT 13
35935: ST_TO_ADDR
// hc_gallery =  ;
35936: LD_ADDR_OWVAR 33
35940: PUSH
35941: LD_STRING 
35943: ST_TO_ADDR
// animal := CreateHuman ;
35944: LD_ADDR_VAR 0 12
35948: PUSH
35949: CALL_OW 44
35953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35954: LD_VAR 0 12
35958: PPUSH
35959: LD_VAR 0 8
35963: PPUSH
35964: LD_INT 0
35966: PPUSH
35967: CALL 37675 0 3
// end ;
35971: GO 35925
35973: POP
35974: POP
// if fishes then
35975: LD_VAR 0 7
35979: IFFALSE 36046
// for i = 1 to fishes do
35981: LD_ADDR_VAR 0 11
35985: PUSH
35986: DOUBLE
35987: LD_INT 1
35989: DEC
35990: ST_TO_ADDR
35991: LD_VAR 0 7
35995: PUSH
35996: FOR_TO
35997: IFFALSE 36044
// begin hc_class = 20 ;
35999: LD_ADDR_OWVAR 28
36003: PUSH
36004: LD_INT 20
36006: ST_TO_ADDR
// hc_gallery =  ;
36007: LD_ADDR_OWVAR 33
36011: PUSH
36012: LD_STRING 
36014: ST_TO_ADDR
// animal := CreateHuman ;
36015: LD_ADDR_VAR 0 12
36019: PUSH
36020: CALL_OW 44
36024: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36025: LD_VAR 0 12
36029: PPUSH
36030: LD_VAR 0 9
36034: PPUSH
36035: LD_INT 0
36037: PPUSH
36038: CALL 37675 0 3
// end ;
36042: GO 35996
36044: POP
36045: POP
// end ;
36046: LD_VAR 0 10
36050: RET
// export function WantHeal ( sci , unit ) ; begin
36051: LD_INT 0
36053: PPUSH
// if GetTaskList ( sci ) > 0 then
36054: LD_VAR 0 1
36058: PPUSH
36059: CALL_OW 437
36063: PUSH
36064: LD_INT 0
36066: GREATER
36067: IFFALSE 36137
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36069: LD_VAR 0 1
36073: PPUSH
36074: CALL_OW 437
36078: PUSH
36079: LD_INT 1
36081: ARRAY
36082: PUSH
36083: LD_INT 1
36085: ARRAY
36086: PUSH
36087: LD_STRING l
36089: EQUAL
36090: PUSH
36091: LD_VAR 0 1
36095: PPUSH
36096: CALL_OW 437
36100: PUSH
36101: LD_INT 1
36103: ARRAY
36104: PUSH
36105: LD_INT 4
36107: ARRAY
36108: PUSH
36109: LD_VAR 0 2
36113: EQUAL
36114: AND
36115: IFFALSE 36127
// result := true else
36117: LD_ADDR_VAR 0 3
36121: PUSH
36122: LD_INT 1
36124: ST_TO_ADDR
36125: GO 36135
// result := false ;
36127: LD_ADDR_VAR 0 3
36131: PUSH
36132: LD_INT 0
36134: ST_TO_ADDR
// end else
36135: GO 36145
// result := false ;
36137: LD_ADDR_VAR 0 3
36141: PUSH
36142: LD_INT 0
36144: ST_TO_ADDR
// end ;
36145: LD_VAR 0 3
36149: RET
// export function HealTarget ( sci ) ; begin
36150: LD_INT 0
36152: PPUSH
// if not sci then
36153: LD_VAR 0 1
36157: NOT
36158: IFFALSE 36162
// exit ;
36160: GO 36227
// result := 0 ;
36162: LD_ADDR_VAR 0 2
36166: PUSH
36167: LD_INT 0
36169: ST_TO_ADDR
// if GetTaskList ( sci ) then
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 437
36179: IFFALSE 36227
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL_OW 437
36190: PUSH
36191: LD_INT 1
36193: ARRAY
36194: PUSH
36195: LD_INT 1
36197: ARRAY
36198: PUSH
36199: LD_STRING l
36201: EQUAL
36202: IFFALSE 36227
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36204: LD_ADDR_VAR 0 2
36208: PUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 437
36218: PUSH
36219: LD_INT 1
36221: ARRAY
36222: PUSH
36223: LD_INT 4
36225: ARRAY
36226: ST_TO_ADDR
// end ;
36227: LD_VAR 0 2
36231: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36232: LD_INT 0
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
// if not base_units then
36238: LD_VAR 0 1
36242: NOT
36243: IFFALSE 36247
// exit ;
36245: GO 36334
// result := false ;
36247: LD_ADDR_VAR 0 2
36251: PUSH
36252: LD_INT 0
36254: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36255: LD_ADDR_VAR 0 5
36259: PUSH
36260: LD_VAR 0 1
36264: PPUSH
36265: LD_INT 21
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PPUSH
36275: CALL_OW 72
36279: ST_TO_ADDR
// if not tmp then
36280: LD_VAR 0 5
36284: NOT
36285: IFFALSE 36289
// exit ;
36287: GO 36334
// for i in tmp do
36289: LD_ADDR_VAR 0 3
36293: PUSH
36294: LD_VAR 0 5
36298: PUSH
36299: FOR_IN
36300: IFFALSE 36332
// begin result := EnemyInRange ( i , 22 ) ;
36302: LD_ADDR_VAR 0 2
36306: PUSH
36307: LD_VAR 0 3
36311: PPUSH
36312: LD_INT 22
36314: PPUSH
36315: CALL 33921 0 2
36319: ST_TO_ADDR
// if result then
36320: LD_VAR 0 2
36324: IFFALSE 36330
// exit ;
36326: POP
36327: POP
36328: GO 36334
// end ;
36330: GO 36299
36332: POP
36333: POP
// end ;
36334: LD_VAR 0 2
36338: RET
// export function FilterByTag ( units , tag ) ; begin
36339: LD_INT 0
36341: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36342: LD_ADDR_VAR 0 3
36346: PUSH
36347: LD_VAR 0 1
36351: PPUSH
36352: LD_INT 120
36354: PUSH
36355: LD_VAR 0 2
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PPUSH
36364: CALL_OW 72
36368: ST_TO_ADDR
// end ;
36369: LD_VAR 0 3
36373: RET
// export function IsDriver ( un ) ; begin
36374: LD_INT 0
36376: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36377: LD_ADDR_VAR 0 2
36381: PUSH
36382: LD_VAR 0 1
36386: PUSH
36387: LD_INT 55
36389: PUSH
36390: EMPTY
36391: LIST
36392: PPUSH
36393: CALL_OW 69
36397: IN
36398: ST_TO_ADDR
// end ;
36399: LD_VAR 0 2
36403: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36404: LD_INT 0
36406: PPUSH
36407: PPUSH
// list := [ ] ;
36408: LD_ADDR_VAR 0 5
36412: PUSH
36413: EMPTY
36414: ST_TO_ADDR
// case d of 0 :
36415: LD_VAR 0 3
36419: PUSH
36420: LD_INT 0
36422: DOUBLE
36423: EQUAL
36424: IFTRUE 36428
36426: GO 36561
36428: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36429: LD_ADDR_VAR 0 5
36433: PUSH
36434: LD_VAR 0 1
36438: PUSH
36439: LD_INT 4
36441: MINUS
36442: PUSH
36443: LD_VAR 0 2
36447: PUSH
36448: LD_INT 4
36450: MINUS
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: LIST
36459: PUSH
36460: LD_VAR 0 1
36464: PUSH
36465: LD_INT 3
36467: MINUS
36468: PUSH
36469: LD_VAR 0 2
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: PUSH
36482: LD_VAR 0 1
36486: PUSH
36487: LD_INT 4
36489: PLUS
36490: PUSH
36491: LD_VAR 0 2
36495: PUSH
36496: LD_INT 4
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: PUSH
36504: LD_VAR 0 1
36508: PUSH
36509: LD_INT 3
36511: PLUS
36512: PUSH
36513: LD_VAR 0 2
36517: PUSH
36518: LD_INT 3
36520: PLUS
36521: PUSH
36522: LD_INT 5
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: PUSH
36530: LD_VAR 0 1
36534: PUSH
36535: LD_VAR 0 2
36539: PUSH
36540: LD_INT 4
36542: PLUS
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: ST_TO_ADDR
// end ; 1 :
36559: GO 37259
36561: LD_INT 1
36563: DOUBLE
36564: EQUAL
36565: IFTRUE 36569
36567: GO 36702
36569: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36570: LD_ADDR_VAR 0 5
36574: PUSH
36575: LD_VAR 0 1
36579: PUSH
36580: LD_VAR 0 2
36584: PUSH
36585: LD_INT 4
36587: MINUS
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: PUSH
36597: LD_VAR 0 1
36601: PUSH
36602: LD_INT 3
36604: MINUS
36605: PUSH
36606: LD_VAR 0 2
36610: PUSH
36611: LD_INT 3
36613: MINUS
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: PUSH
36623: LD_VAR 0 1
36627: PUSH
36628: LD_INT 4
36630: MINUS
36631: PUSH
36632: LD_VAR 0 2
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: PUSH
36645: LD_VAR 0 1
36649: PUSH
36650: LD_VAR 0 2
36654: PUSH
36655: LD_INT 3
36657: PLUS
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: PUSH
36667: LD_VAR 0 1
36671: PUSH
36672: LD_INT 4
36674: PLUS
36675: PUSH
36676: LD_VAR 0 2
36680: PUSH
36681: LD_INT 4
36683: PLUS
36684: PUSH
36685: LD_INT 5
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: ST_TO_ADDR
// end ; 2 :
36700: GO 37259
36702: LD_INT 2
36704: DOUBLE
36705: EQUAL
36706: IFTRUE 36710
36708: GO 36839
36710: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36711: LD_ADDR_VAR 0 5
36715: PUSH
36716: LD_VAR 0 1
36720: PUSH
36721: LD_VAR 0 2
36725: PUSH
36726: LD_INT 3
36728: MINUS
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: PUSH
36738: LD_VAR 0 1
36742: PUSH
36743: LD_INT 4
36745: PLUS
36746: PUSH
36747: LD_VAR 0 2
36751: PUSH
36752: LD_INT 4
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: PUSH
36760: LD_VAR 0 1
36764: PUSH
36765: LD_VAR 0 2
36769: PUSH
36770: LD_INT 4
36772: PLUS
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: PUSH
36782: LD_VAR 0 1
36786: PUSH
36787: LD_INT 3
36789: MINUS
36790: PUSH
36791: LD_VAR 0 2
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: PUSH
36804: LD_VAR 0 1
36808: PUSH
36809: LD_INT 4
36811: MINUS
36812: PUSH
36813: LD_VAR 0 2
36817: PUSH
36818: LD_INT 4
36820: MINUS
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
// end ; 3 :
36837: GO 37259
36839: LD_INT 3
36841: DOUBLE
36842: EQUAL
36843: IFTRUE 36847
36845: GO 36980
36847: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36848: LD_ADDR_VAR 0 5
36852: PUSH
36853: LD_VAR 0 1
36857: PUSH
36858: LD_INT 3
36860: PLUS
36861: PUSH
36862: LD_VAR 0 2
36866: PUSH
36867: LD_INT 4
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: PUSH
36875: LD_VAR 0 1
36879: PUSH
36880: LD_INT 4
36882: PLUS
36883: PUSH
36884: LD_VAR 0 2
36888: PUSH
36889: LD_INT 4
36891: PLUS
36892: PUSH
36893: LD_INT 5
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: PUSH
36901: LD_VAR 0 1
36905: PUSH
36906: LD_INT 4
36908: MINUS
36909: PUSH
36910: LD_VAR 0 2
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: PUSH
36923: LD_VAR 0 1
36927: PUSH
36928: LD_VAR 0 2
36932: PUSH
36933: LD_INT 4
36935: MINUS
36936: PUSH
36937: LD_INT 3
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: PUSH
36945: LD_VAR 0 1
36949: PUSH
36950: LD_INT 3
36952: MINUS
36953: PUSH
36954: LD_VAR 0 2
36958: PUSH
36959: LD_INT 3
36961: MINUS
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: ST_TO_ADDR
// end ; 4 :
36978: GO 37259
36980: LD_INT 4
36982: DOUBLE
36983: EQUAL
36984: IFTRUE 36988
36986: GO 37121
36988: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36989: LD_ADDR_VAR 0 5
36993: PUSH
36994: LD_VAR 0 1
36998: PUSH
36999: LD_VAR 0 2
37003: PUSH
37004: LD_INT 4
37006: PLUS
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: PUSH
37016: LD_VAR 0 1
37020: PUSH
37021: LD_INT 3
37023: PLUS
37024: PUSH
37025: LD_VAR 0 2
37029: PUSH
37030: LD_INT 3
37032: PLUS
37033: PUSH
37034: LD_INT 5
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: LIST
37041: PUSH
37042: LD_VAR 0 1
37046: PUSH
37047: LD_INT 4
37049: PLUS
37050: PUSH
37051: LD_VAR 0 2
37055: PUSH
37056: LD_INT 4
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: PUSH
37064: LD_VAR 0 1
37068: PUSH
37069: LD_VAR 0 2
37073: PUSH
37074: LD_INT 3
37076: MINUS
37077: PUSH
37078: LD_INT 3
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: PUSH
37086: LD_VAR 0 1
37090: PUSH
37091: LD_INT 4
37093: MINUS
37094: PUSH
37095: LD_VAR 0 2
37099: PUSH
37100: LD_INT 4
37102: MINUS
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: ST_TO_ADDR
// end ; 5 :
37119: GO 37259
37121: LD_INT 5
37123: DOUBLE
37124: EQUAL
37125: IFTRUE 37129
37127: GO 37258
37129: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37130: LD_ADDR_VAR 0 5
37134: PUSH
37135: LD_VAR 0 1
37139: PUSH
37140: LD_INT 4
37142: MINUS
37143: PUSH
37144: LD_VAR 0 2
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: PUSH
37157: LD_VAR 0 1
37161: PUSH
37162: LD_VAR 0 2
37166: PUSH
37167: LD_INT 4
37169: MINUS
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: PUSH
37179: LD_VAR 0 1
37183: PUSH
37184: LD_INT 4
37186: PLUS
37187: PUSH
37188: LD_VAR 0 2
37192: PUSH
37193: LD_INT 4
37195: PLUS
37196: PUSH
37197: LD_INT 5
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: PUSH
37205: LD_VAR 0 1
37209: PUSH
37210: LD_INT 3
37212: PLUS
37213: PUSH
37214: LD_VAR 0 2
37218: PUSH
37219: LD_INT 4
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: PUSH
37227: LD_VAR 0 1
37231: PUSH
37232: LD_VAR 0 2
37236: PUSH
37237: LD_INT 3
37239: PLUS
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: ST_TO_ADDR
// end ; end ;
37256: GO 37259
37258: POP
// result := list ;
37259: LD_ADDR_VAR 0 4
37263: PUSH
37264: LD_VAR 0 5
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 4
37273: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37274: LD_INT 0
37276: PPUSH
37277: PPUSH
37278: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37279: LD_VAR 0 1
37283: NOT
37284: PUSH
37285: LD_VAR 0 2
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: LD_INT 3
37298: PUSH
37299: LD_INT 4
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: IN
37308: NOT
37309: OR
37310: IFFALSE 37314
// exit ;
37312: GO 37397
// tmp := [ ] ;
37314: LD_ADDR_VAR 0 5
37318: PUSH
37319: EMPTY
37320: ST_TO_ADDR
// for i in units do
37321: LD_ADDR_VAR 0 4
37325: PUSH
37326: LD_VAR 0 1
37330: PUSH
37331: FOR_IN
37332: IFFALSE 37366
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37334: LD_ADDR_VAR 0 5
37338: PUSH
37339: LD_VAR 0 5
37343: PPUSH
37344: LD_VAR 0 4
37348: PPUSH
37349: LD_VAR 0 2
37353: PPUSH
37354: CALL_OW 259
37358: PPUSH
37359: CALL 38757 0 2
37363: ST_TO_ADDR
37364: GO 37331
37366: POP
37367: POP
// if not tmp then
37368: LD_VAR 0 5
37372: NOT
37373: IFFALSE 37377
// exit ;
37375: GO 37397
// result := SortListByListDesc ( units , tmp ) ;
37377: LD_ADDR_VAR 0 3
37381: PUSH
37382: LD_VAR 0 1
37386: PPUSH
37387: LD_VAR 0 5
37391: PPUSH
37392: CALL_OW 77
37396: ST_TO_ADDR
// end ;
37397: LD_VAR 0 3
37401: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37402: LD_INT 0
37404: PPUSH
37405: PPUSH
37406: PPUSH
// result := false ;
37407: LD_ADDR_VAR 0 3
37411: PUSH
37412: LD_INT 0
37414: ST_TO_ADDR
// if not building then
37415: LD_VAR 0 2
37419: NOT
37420: IFFALSE 37424
// exit ;
37422: GO 37562
// x := GetX ( building ) ;
37424: LD_ADDR_VAR 0 4
37428: PUSH
37429: LD_VAR 0 2
37433: PPUSH
37434: CALL_OW 250
37438: ST_TO_ADDR
// y := GetY ( building ) ;
37439: LD_ADDR_VAR 0 5
37443: PUSH
37444: LD_VAR 0 2
37448: PPUSH
37449: CALL_OW 251
37453: ST_TO_ADDR
// if not x or not y then
37454: LD_VAR 0 4
37458: NOT
37459: PUSH
37460: LD_VAR 0 5
37464: NOT
37465: OR
37466: IFFALSE 37470
// exit ;
37468: GO 37562
// if GetTaskList ( unit ) then
37470: LD_VAR 0 1
37474: PPUSH
37475: CALL_OW 437
37479: IFFALSE 37562
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37481: LD_STRING e
37483: PUSH
37484: LD_VAR 0 1
37488: PPUSH
37489: CALL_OW 437
37493: PUSH
37494: LD_INT 1
37496: ARRAY
37497: PUSH
37498: LD_INT 1
37500: ARRAY
37501: EQUAL
37502: PUSH
37503: LD_VAR 0 4
37507: PUSH
37508: LD_VAR 0 1
37512: PPUSH
37513: CALL_OW 437
37517: PUSH
37518: LD_INT 1
37520: ARRAY
37521: PUSH
37522: LD_INT 2
37524: ARRAY
37525: EQUAL
37526: AND
37527: PUSH
37528: LD_VAR 0 5
37532: PUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 437
37542: PUSH
37543: LD_INT 1
37545: ARRAY
37546: PUSH
37547: LD_INT 3
37549: ARRAY
37550: EQUAL
37551: AND
37552: IFFALSE 37562
// result := true end ;
37554: LD_ADDR_VAR 0 3
37558: PUSH
37559: LD_INT 1
37561: ST_TO_ADDR
// end ;
37562: LD_VAR 0 3
37566: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37567: LD_INT 0
37569: PPUSH
// result := false ;
37570: LD_ADDR_VAR 0 4
37574: PUSH
37575: LD_INT 0
37577: ST_TO_ADDR
// if GetTaskList ( unit ) then
37578: LD_VAR 0 1
37582: PPUSH
37583: CALL_OW 437
37587: IFFALSE 37670
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37589: LD_STRING M
37591: PUSH
37592: LD_VAR 0 1
37596: PPUSH
37597: CALL_OW 437
37601: PUSH
37602: LD_INT 1
37604: ARRAY
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: EQUAL
37610: PUSH
37611: LD_VAR 0 2
37615: PUSH
37616: LD_VAR 0 1
37620: PPUSH
37621: CALL_OW 437
37625: PUSH
37626: LD_INT 1
37628: ARRAY
37629: PUSH
37630: LD_INT 2
37632: ARRAY
37633: EQUAL
37634: AND
37635: PUSH
37636: LD_VAR 0 3
37640: PUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: CALL_OW 437
37650: PUSH
37651: LD_INT 1
37653: ARRAY
37654: PUSH
37655: LD_INT 3
37657: ARRAY
37658: EQUAL
37659: AND
37660: IFFALSE 37670
// result := true ;
37662: LD_ADDR_VAR 0 4
37666: PUSH
37667: LD_INT 1
37669: ST_TO_ADDR
// end ; end ;
37670: LD_VAR 0 4
37674: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37675: LD_INT 0
37677: PPUSH
37678: PPUSH
37679: PPUSH
37680: PPUSH
// if not unit or not area then
37681: LD_VAR 0 1
37685: NOT
37686: PUSH
37687: LD_VAR 0 2
37691: NOT
37692: OR
37693: IFFALSE 37697
// exit ;
37695: GO 37860
// tmp := AreaToList ( area , i ) ;
37697: LD_ADDR_VAR 0 6
37701: PUSH
37702: LD_VAR 0 2
37706: PPUSH
37707: LD_VAR 0 5
37711: PPUSH
37712: CALL_OW 517
37716: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37717: LD_ADDR_VAR 0 5
37721: PUSH
37722: DOUBLE
37723: LD_INT 1
37725: DEC
37726: ST_TO_ADDR
37727: LD_VAR 0 6
37731: PUSH
37732: LD_INT 1
37734: ARRAY
37735: PUSH
37736: FOR_TO
37737: IFFALSE 37858
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37739: LD_ADDR_VAR 0 7
37743: PUSH
37744: LD_VAR 0 6
37748: PUSH
37749: LD_INT 1
37751: ARRAY
37752: PUSH
37753: LD_VAR 0 5
37757: ARRAY
37758: PUSH
37759: LD_VAR 0 6
37763: PUSH
37764: LD_INT 2
37766: ARRAY
37767: PUSH
37768: LD_VAR 0 5
37772: ARRAY
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37778: LD_INT 92
37780: PUSH
37781: LD_VAR 0 7
37785: PUSH
37786: LD_INT 1
37788: ARRAY
37789: PUSH
37790: LD_VAR 0 7
37794: PUSH
37795: LD_INT 2
37797: ARRAY
37798: PUSH
37799: LD_INT 3
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: PPUSH
37808: CALL_OW 69
37812: PUSH
37813: LD_INT 0
37815: EQUAL
37816: IFFALSE 37856
// begin PlaceUnitArea ( unit , area , mode ) ;
37818: LD_VAR 0 1
37822: PPUSH
37823: LD_VAR 0 2
37827: PPUSH
37828: LD_VAR 0 3
37832: PPUSH
37833: CALL_OW 49
// result := IsPlaced ( unit ) ;
37837: LD_ADDR_VAR 0 4
37841: PUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: CALL_OW 305
37851: ST_TO_ADDR
// exit ;
37852: POP
37853: POP
37854: GO 37860
// end ; end ;
37856: GO 37736
37858: POP
37859: POP
// end ;
37860: LD_VAR 0 4
37864: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37865: LD_INT 0
37867: PPUSH
37868: PPUSH
37869: PPUSH
// if not side or side > 8 then
37870: LD_VAR 0 1
37874: NOT
37875: PUSH
37876: LD_VAR 0 1
37880: PUSH
37881: LD_INT 8
37883: GREATER
37884: OR
37885: IFFALSE 37889
// exit ;
37887: GO 38076
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37889: LD_ADDR_VAR 0 4
37893: PUSH
37894: LD_INT 22
37896: PUSH
37897: LD_VAR 0 1
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 21
37908: PUSH
37909: LD_INT 3
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PPUSH
37920: CALL_OW 69
37924: ST_TO_ADDR
// if not tmp then
37925: LD_VAR 0 4
37929: NOT
37930: IFFALSE 37934
// exit ;
37932: GO 38076
// enable_addtolog := true ;
37934: LD_ADDR_OWVAR 81
37938: PUSH
37939: LD_INT 1
37941: ST_TO_ADDR
// AddToLog ( [ ) ;
37942: LD_STRING [
37944: PPUSH
37945: CALL_OW 561
// for i in tmp do
37949: LD_ADDR_VAR 0 3
37953: PUSH
37954: LD_VAR 0 4
37958: PUSH
37959: FOR_IN
37960: IFFALSE 38067
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37962: LD_STRING [
37964: PUSH
37965: LD_VAR 0 3
37969: PPUSH
37970: CALL_OW 266
37974: STR
37975: PUSH
37976: LD_STRING , 
37978: STR
37979: PUSH
37980: LD_VAR 0 3
37984: PPUSH
37985: CALL_OW 250
37989: STR
37990: PUSH
37991: LD_STRING , 
37993: STR
37994: PUSH
37995: LD_VAR 0 3
37999: PPUSH
38000: CALL_OW 251
38004: STR
38005: PUSH
38006: LD_STRING , 
38008: STR
38009: PUSH
38010: LD_VAR 0 3
38014: PPUSH
38015: CALL_OW 254
38019: STR
38020: PUSH
38021: LD_STRING , 
38023: STR
38024: PUSH
38025: LD_VAR 0 3
38029: PPUSH
38030: LD_INT 1
38032: PPUSH
38033: CALL_OW 268
38037: STR
38038: PUSH
38039: LD_STRING , 
38041: STR
38042: PUSH
38043: LD_VAR 0 3
38047: PPUSH
38048: LD_INT 2
38050: PPUSH
38051: CALL_OW 268
38055: STR
38056: PUSH
38057: LD_STRING ],
38059: STR
38060: PPUSH
38061: CALL_OW 561
// end ;
38065: GO 37959
38067: POP
38068: POP
// AddToLog ( ]; ) ;
38069: LD_STRING ];
38071: PPUSH
38072: CALL_OW 561
// end ;
38076: LD_VAR 0 2
38080: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38081: LD_INT 0
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
// if not area or not rate or not max then
38088: LD_VAR 0 1
38092: NOT
38093: PUSH
38094: LD_VAR 0 2
38098: NOT
38099: OR
38100: PUSH
38101: LD_VAR 0 4
38105: NOT
38106: OR
38107: IFFALSE 38111
// exit ;
38109: GO 38300
// while 1 do
38111: LD_INT 1
38113: IFFALSE 38300
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38115: LD_ADDR_VAR 0 9
38119: PUSH
38120: LD_VAR 0 1
38124: PPUSH
38125: LD_INT 1
38127: PPUSH
38128: CALL_OW 287
38132: PUSH
38133: LD_INT 10
38135: MUL
38136: ST_TO_ADDR
// r := rate / 10 ;
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: LD_VAR 0 2
38146: PUSH
38147: LD_INT 10
38149: DIVREAL
38150: ST_TO_ADDR
// time := 1 1$00 ;
38151: LD_ADDR_VAR 0 8
38155: PUSH
38156: LD_INT 2100
38158: ST_TO_ADDR
// if amount < min then
38159: LD_VAR 0 9
38163: PUSH
38164: LD_VAR 0 3
38168: LESS
38169: IFFALSE 38187
// r := r * 2 else
38171: LD_ADDR_VAR 0 7
38175: PUSH
38176: LD_VAR 0 7
38180: PUSH
38181: LD_INT 2
38183: MUL
38184: ST_TO_ADDR
38185: GO 38213
// if amount > max then
38187: LD_VAR 0 9
38191: PUSH
38192: LD_VAR 0 4
38196: GREATER
38197: IFFALSE 38213
// r := r / 2 ;
38199: LD_ADDR_VAR 0 7
38203: PUSH
38204: LD_VAR 0 7
38208: PUSH
38209: LD_INT 2
38211: DIVREAL
38212: ST_TO_ADDR
// time := time / r ;
38213: LD_ADDR_VAR 0 8
38217: PUSH
38218: LD_VAR 0 8
38222: PUSH
38223: LD_VAR 0 7
38227: DIVREAL
38228: ST_TO_ADDR
// if time < 0 then
38229: LD_VAR 0 8
38233: PUSH
38234: LD_INT 0
38236: LESS
38237: IFFALSE 38254
// time := time * - 1 ;
38239: LD_ADDR_VAR 0 8
38243: PUSH
38244: LD_VAR 0 8
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: MUL
38253: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38254: LD_VAR 0 8
38258: PUSH
38259: LD_INT 35
38261: PPUSH
38262: LD_INT 875
38264: PPUSH
38265: CALL_OW 12
38269: PLUS
38270: PPUSH
38271: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38275: LD_INT 1
38277: PPUSH
38278: LD_INT 5
38280: PPUSH
38281: CALL_OW 12
38285: PPUSH
38286: LD_VAR 0 1
38290: PPUSH
38291: LD_INT 1
38293: PPUSH
38294: CALL_OW 55
// end ;
38298: GO 38111
// end ;
38300: LD_VAR 0 5
38304: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38305: LD_INT 0
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
// if not turrets or not factories then
38315: LD_VAR 0 1
38319: NOT
38320: PUSH
38321: LD_VAR 0 2
38325: NOT
38326: OR
38327: IFFALSE 38331
// exit ;
38329: GO 38638
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38331: LD_ADDR_VAR 0 10
38335: PUSH
38336: LD_INT 5
38338: PUSH
38339: LD_INT 6
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 4
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: LD_INT 5
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 24
38373: PUSH
38374: LD_INT 25
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 23
38383: PUSH
38384: LD_INT 27
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 42
38397: PUSH
38398: LD_INT 43
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 44
38407: PUSH
38408: LD_INT 46
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 45
38417: PUSH
38418: LD_INT 47
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: ST_TO_ADDR
// result := [ ] ;
38435: LD_ADDR_VAR 0 3
38439: PUSH
38440: EMPTY
38441: ST_TO_ADDR
// for i in turrets do
38442: LD_ADDR_VAR 0 4
38446: PUSH
38447: LD_VAR 0 1
38451: PUSH
38452: FOR_IN
38453: IFFALSE 38636
// begin nat := GetNation ( i ) ;
38455: LD_ADDR_VAR 0 7
38459: PUSH
38460: LD_VAR 0 4
38464: PPUSH
38465: CALL_OW 248
38469: ST_TO_ADDR
// weapon := 0 ;
38470: LD_ADDR_VAR 0 8
38474: PUSH
38475: LD_INT 0
38477: ST_TO_ADDR
// if not nat then
38478: LD_VAR 0 7
38482: NOT
38483: IFFALSE 38487
// continue ;
38485: GO 38452
// for j in list [ nat ] do
38487: LD_ADDR_VAR 0 5
38491: PUSH
38492: LD_VAR 0 10
38496: PUSH
38497: LD_VAR 0 7
38501: ARRAY
38502: PUSH
38503: FOR_IN
38504: IFFALSE 38545
// if GetBWeapon ( i ) = j [ 1 ] then
38506: LD_VAR 0 4
38510: PPUSH
38511: CALL_OW 269
38515: PUSH
38516: LD_VAR 0 5
38520: PUSH
38521: LD_INT 1
38523: ARRAY
38524: EQUAL
38525: IFFALSE 38543
// begin weapon := j [ 2 ] ;
38527: LD_ADDR_VAR 0 8
38531: PUSH
38532: LD_VAR 0 5
38536: PUSH
38537: LD_INT 2
38539: ARRAY
38540: ST_TO_ADDR
// break ;
38541: GO 38545
// end ;
38543: GO 38503
38545: POP
38546: POP
// if not weapon then
38547: LD_VAR 0 8
38551: NOT
38552: IFFALSE 38556
// continue ;
38554: GO 38452
// for k in factories do
38556: LD_ADDR_VAR 0 6
38560: PUSH
38561: LD_VAR 0 2
38565: PUSH
38566: FOR_IN
38567: IFFALSE 38632
// begin weapons := AvailableWeaponList ( k ) ;
38569: LD_ADDR_VAR 0 9
38573: PUSH
38574: LD_VAR 0 6
38578: PPUSH
38579: CALL_OW 478
38583: ST_TO_ADDR
// if not weapons then
38584: LD_VAR 0 9
38588: NOT
38589: IFFALSE 38593
// continue ;
38591: GO 38566
// if weapon in weapons then
38593: LD_VAR 0 8
38597: PUSH
38598: LD_VAR 0 9
38602: IN
38603: IFFALSE 38630
// begin result := [ i , weapon ] ;
38605: LD_ADDR_VAR 0 3
38609: PUSH
38610: LD_VAR 0 4
38614: PUSH
38615: LD_VAR 0 8
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// exit ;
38624: POP
38625: POP
38626: POP
38627: POP
38628: GO 38638
// end ; end ;
38630: GO 38566
38632: POP
38633: POP
// end ;
38634: GO 38452
38636: POP
38637: POP
// end ;
38638: LD_VAR 0 3
38642: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38643: LD_INT 0
38645: PPUSH
// if not side or side > 8 then
38646: LD_VAR 0 3
38650: NOT
38651: PUSH
38652: LD_VAR 0 3
38656: PUSH
38657: LD_INT 8
38659: GREATER
38660: OR
38661: IFFALSE 38665
// exit ;
38663: GO 38724
// if not range then
38665: LD_VAR 0 4
38669: NOT
38670: IFFALSE 38681
// range := - 12 ;
38672: LD_ADDR_VAR 0 4
38676: PUSH
38677: LD_INT 12
38679: NEG
38680: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_VAR 0 2
38690: PPUSH
38691: LD_VAR 0 3
38695: PPUSH
38696: LD_VAR 0 4
38700: PPUSH
38701: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38705: LD_VAR 0 1
38709: PPUSH
38710: LD_VAR 0 2
38714: PPUSH
38715: LD_VAR 0 3
38719: PPUSH
38720: CALL_OW 331
// end ;
38724: LD_VAR 0 5
38728: RET
// export function Video ( mode ) ; begin
38729: LD_INT 0
38731: PPUSH
// ingame_video = mode ;
38732: LD_ADDR_OWVAR 52
38736: PUSH
38737: LD_VAR 0 1
38741: ST_TO_ADDR
// interface_hidden = mode ;
38742: LD_ADDR_OWVAR 54
38746: PUSH
38747: LD_VAR 0 1
38751: ST_TO_ADDR
// end ;
38752: LD_VAR 0 2
38756: RET
// export function Join ( array , element ) ; begin
38757: LD_INT 0
38759: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38760: LD_ADDR_VAR 0 3
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: LD_VAR 0 1
38774: PUSH
38775: LD_INT 1
38777: PLUS
38778: PPUSH
38779: LD_VAR 0 2
38783: PPUSH
38784: CALL_OW 1
38788: ST_TO_ADDR
// end ;
38789: LD_VAR 0 3
38793: RET
// export function JoinUnion ( array , element ) ; begin
38794: LD_INT 0
38796: PPUSH
// result := array union element ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_VAR 0 1
38806: PUSH
38807: LD_VAR 0 2
38811: UNION
38812: ST_TO_ADDR
// end ;
38813: LD_VAR 0 3
38817: RET
// export function GetBehemoths ( side ) ; begin
38818: LD_INT 0
38820: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38821: LD_ADDR_VAR 0 2
38825: PUSH
38826: LD_INT 22
38828: PUSH
38829: LD_VAR 0 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 31
38840: PUSH
38841: LD_INT 25
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PPUSH
38852: CALL_OW 69
38856: ST_TO_ADDR
// end ;
38857: LD_VAR 0 2
38861: RET
// export function Shuffle ( array ) ; var i , index ; begin
38862: LD_INT 0
38864: PPUSH
38865: PPUSH
38866: PPUSH
// result := [ ] ;
38867: LD_ADDR_VAR 0 2
38871: PUSH
38872: EMPTY
38873: ST_TO_ADDR
// if not array then
38874: LD_VAR 0 1
38878: NOT
38879: IFFALSE 38883
// exit ;
38881: GO 38982
// Randomize ;
38883: CALL_OW 10
// for i = array downto 1 do
38887: LD_ADDR_VAR 0 3
38891: PUSH
38892: DOUBLE
38893: LD_VAR 0 1
38897: INC
38898: ST_TO_ADDR
38899: LD_INT 1
38901: PUSH
38902: FOR_DOWNTO
38903: IFFALSE 38980
// begin index := rand ( 1 , array ) ;
38905: LD_ADDR_VAR 0 4
38909: PUSH
38910: LD_INT 1
38912: PPUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 12
38922: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38923: LD_ADDR_VAR 0 2
38927: PUSH
38928: LD_VAR 0 2
38932: PPUSH
38933: LD_VAR 0 2
38937: PUSH
38938: LD_INT 1
38940: PLUS
38941: PPUSH
38942: LD_VAR 0 1
38946: PUSH
38947: LD_VAR 0 4
38951: ARRAY
38952: PPUSH
38953: CALL_OW 2
38957: ST_TO_ADDR
// array := Delete ( array , index ) ;
38958: LD_ADDR_VAR 0 1
38962: PUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: LD_VAR 0 4
38972: PPUSH
38973: CALL_OW 3
38977: ST_TO_ADDR
// end ;
38978: GO 38902
38980: POP
38981: POP
// end ;
38982: LD_VAR 0 2
38986: RET
// export function GetBaseMaterials ( base ) ; begin
38987: LD_INT 0
38989: PPUSH
// result := [ 0 , 0 , 0 ] ;
38990: LD_ADDR_VAR 0 2
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: ST_TO_ADDR
// if not base then
39009: LD_VAR 0 1
39013: NOT
39014: IFFALSE 39018
// exit ;
39016: GO 39067
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39018: LD_ADDR_VAR 0 2
39022: PUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: LD_INT 1
39030: PPUSH
39031: CALL_OW 275
39035: PUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: LD_INT 2
39043: PPUSH
39044: CALL_OW 275
39048: PUSH
39049: LD_VAR 0 1
39053: PPUSH
39054: LD_INT 3
39056: PPUSH
39057: CALL_OW 275
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: ST_TO_ADDR
// end ;
39067: LD_VAR 0 2
39071: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39072: LD_INT 0
39074: PPUSH
39075: PPUSH
// result := array ;
39076: LD_ADDR_VAR 0 3
39080: PUSH
39081: LD_VAR 0 1
39085: ST_TO_ADDR
// if size >= result then
39086: LD_VAR 0 2
39090: PUSH
39091: LD_VAR 0 3
39095: GREATEREQUAL
39096: IFFALSE 39100
// exit ;
39098: GO 39150
// if size then
39100: LD_VAR 0 2
39104: IFFALSE 39150
// for i := array downto size do
39106: LD_ADDR_VAR 0 4
39110: PUSH
39111: DOUBLE
39112: LD_VAR 0 1
39116: INC
39117: ST_TO_ADDR
39118: LD_VAR 0 2
39122: PUSH
39123: FOR_DOWNTO
39124: IFFALSE 39148
// result := Delete ( result , result ) ;
39126: LD_ADDR_VAR 0 3
39130: PUSH
39131: LD_VAR 0 3
39135: PPUSH
39136: LD_VAR 0 3
39140: PPUSH
39141: CALL_OW 3
39145: ST_TO_ADDR
39146: GO 39123
39148: POP
39149: POP
// end ;
39150: LD_VAR 0 3
39154: RET
// export function ComExit ( unit ) ; var tmp ; begin
39155: LD_INT 0
39157: PPUSH
39158: PPUSH
// if not IsInUnit ( unit ) then
39159: LD_VAR 0 1
39163: PPUSH
39164: CALL_OW 310
39168: NOT
39169: IFFALSE 39173
// exit ;
39171: GO 39233
// tmp := IsInUnit ( unit ) ;
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 310
39187: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39188: LD_VAR 0 3
39192: PPUSH
39193: CALL_OW 247
39197: PUSH
39198: LD_INT 2
39200: EQUAL
39201: IFFALSE 39214
// ComExitVehicle ( unit ) else
39203: LD_VAR 0 1
39207: PPUSH
39208: CALL_OW 121
39212: GO 39223
// ComExitBuilding ( unit ) ;
39214: LD_VAR 0 1
39218: PPUSH
39219: CALL_OW 122
// result := tmp ;
39223: LD_ADDR_VAR 0 2
39227: PUSH
39228: LD_VAR 0 3
39232: ST_TO_ADDR
// end ;
39233: LD_VAR 0 2
39237: RET
// export function ComExitAll ( units ) ; var i ; begin
39238: LD_INT 0
39240: PPUSH
39241: PPUSH
// if not units then
39242: LD_VAR 0 1
39246: NOT
39247: IFFALSE 39251
// exit ;
39249: GO 39277
// for i in units do
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_VAR 0 1
39260: PUSH
39261: FOR_IN
39262: IFFALSE 39275
// ComExit ( i ) ;
39264: LD_VAR 0 3
39268: PPUSH
39269: CALL 39155 0 1
39273: GO 39261
39275: POP
39276: POP
// end ;
39277: LD_VAR 0 2
39281: RET
// export function ResetHc ; begin
39282: LD_INT 0
39284: PPUSH
// InitHc ;
39285: CALL_OW 19
// hc_importance := 0 ;
39289: LD_ADDR_OWVAR 32
39293: PUSH
39294: LD_INT 0
39296: ST_TO_ADDR
// end ;
39297: LD_VAR 0 1
39301: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39302: LD_INT 0
39304: PPUSH
39305: PPUSH
39306: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39307: LD_ADDR_VAR 0 6
39311: PUSH
39312: LD_VAR 0 1
39316: PUSH
39317: LD_VAR 0 3
39321: PLUS
39322: PUSH
39323: LD_INT 2
39325: DIV
39326: ST_TO_ADDR
// if _x < 0 then
39327: LD_VAR 0 6
39331: PUSH
39332: LD_INT 0
39334: LESS
39335: IFFALSE 39352
// _x := _x * - 1 ;
39337: LD_ADDR_VAR 0 6
39341: PUSH
39342: LD_VAR 0 6
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: MUL
39351: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39352: LD_ADDR_VAR 0 7
39356: PUSH
39357: LD_VAR 0 2
39361: PUSH
39362: LD_VAR 0 4
39366: PLUS
39367: PUSH
39368: LD_INT 2
39370: DIV
39371: ST_TO_ADDR
// if _y < 0 then
39372: LD_VAR 0 7
39376: PUSH
39377: LD_INT 0
39379: LESS
39380: IFFALSE 39397
// _y := _y * - 1 ;
39382: LD_ADDR_VAR 0 7
39386: PUSH
39387: LD_VAR 0 7
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: MUL
39396: ST_TO_ADDR
// result := [ _x , _y ] ;
39397: LD_ADDR_VAR 0 5
39401: PUSH
39402: LD_VAR 0 6
39406: PUSH
39407: LD_VAR 0 7
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: ST_TO_ADDR
// end ;
39416: LD_VAR 0 5
39420: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39421: LD_INT 0
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
// task := GetTaskList ( unit ) ;
39427: LD_ADDR_VAR 0 7
39431: PUSH
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 437
39441: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39442: LD_VAR 0 7
39446: NOT
39447: PUSH
39448: LD_VAR 0 1
39452: PPUSH
39453: LD_VAR 0 2
39457: PPUSH
39458: CALL_OW 308
39462: NOT
39463: AND
39464: IFFALSE 39468
// exit ;
39466: GO 39586
// if IsInArea ( unit , area ) then
39468: LD_VAR 0 1
39472: PPUSH
39473: LD_VAR 0 2
39477: PPUSH
39478: CALL_OW 308
39482: IFFALSE 39500
// begin ComMoveToArea ( unit , goAway ) ;
39484: LD_VAR 0 1
39488: PPUSH
39489: LD_VAR 0 3
39493: PPUSH
39494: CALL_OW 113
// exit ;
39498: GO 39586
// end ; if task [ 1 ] [ 1 ] <> M then
39500: LD_VAR 0 7
39504: PUSH
39505: LD_INT 1
39507: ARRAY
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PUSH
39513: LD_STRING M
39515: NONEQUAL
39516: IFFALSE 39520
// exit ;
39518: GO 39586
// x := task [ 1 ] [ 2 ] ;
39520: LD_ADDR_VAR 0 5
39524: PUSH
39525: LD_VAR 0 7
39529: PUSH
39530: LD_INT 1
39532: ARRAY
39533: PUSH
39534: LD_INT 2
39536: ARRAY
39537: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39538: LD_ADDR_VAR 0 6
39542: PUSH
39543: LD_VAR 0 7
39547: PUSH
39548: LD_INT 1
39550: ARRAY
39551: PUSH
39552: LD_INT 3
39554: ARRAY
39555: ST_TO_ADDR
// if InArea ( x , y , area ) then
39556: LD_VAR 0 5
39560: PPUSH
39561: LD_VAR 0 6
39565: PPUSH
39566: LD_VAR 0 2
39570: PPUSH
39571: CALL_OW 309
39575: IFFALSE 39586
// ComStop ( unit ) ;
39577: LD_VAR 0 1
39581: PPUSH
39582: CALL_OW 141
// end ;
39586: LD_VAR 0 4
39590: RET
// export function Abs ( value ) ; begin
39591: LD_INT 0
39593: PPUSH
// result := value ;
39594: LD_ADDR_VAR 0 2
39598: PUSH
39599: LD_VAR 0 1
39603: ST_TO_ADDR
// if value < 0 then
39604: LD_VAR 0 1
39608: PUSH
39609: LD_INT 0
39611: LESS
39612: IFFALSE 39629
// result := value * - 1 ;
39614: LD_ADDR_VAR 0 2
39618: PUSH
39619: LD_VAR 0 1
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: MUL
39628: ST_TO_ADDR
// end ;
39629: LD_VAR 0 2
39633: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39634: LD_INT 0
39636: PPUSH
39637: PPUSH
39638: PPUSH
39639: PPUSH
39640: PPUSH
39641: PPUSH
39642: PPUSH
39643: PPUSH
// if not unit or not building then
39644: LD_VAR 0 1
39648: NOT
39649: PUSH
39650: LD_VAR 0 2
39654: NOT
39655: OR
39656: IFFALSE 39660
// exit ;
39658: GO 39886
// x := GetX ( building ) ;
39660: LD_ADDR_VAR 0 4
39664: PUSH
39665: LD_VAR 0 2
39669: PPUSH
39670: CALL_OW 250
39674: ST_TO_ADDR
// y := GetY ( building ) ;
39675: LD_ADDR_VAR 0 6
39679: PUSH
39680: LD_VAR 0 2
39684: PPUSH
39685: CALL_OW 251
39689: ST_TO_ADDR
// d := GetDir ( building ) ;
39690: LD_ADDR_VAR 0 8
39694: PUSH
39695: LD_VAR 0 2
39699: PPUSH
39700: CALL_OW 254
39704: ST_TO_ADDR
// r := 4 ;
39705: LD_ADDR_VAR 0 9
39709: PUSH
39710: LD_INT 4
39712: ST_TO_ADDR
// for i := 1 to 5 do
39713: LD_ADDR_VAR 0 10
39717: PUSH
39718: DOUBLE
39719: LD_INT 1
39721: DEC
39722: ST_TO_ADDR
39723: LD_INT 5
39725: PUSH
39726: FOR_TO
39727: IFFALSE 39884
// begin _x := ShiftX ( x , d , r + i ) ;
39729: LD_ADDR_VAR 0 5
39733: PUSH
39734: LD_VAR 0 4
39738: PPUSH
39739: LD_VAR 0 8
39743: PPUSH
39744: LD_VAR 0 9
39748: PUSH
39749: LD_VAR 0 10
39753: PLUS
39754: PPUSH
39755: CALL_OW 272
39759: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39760: LD_ADDR_VAR 0 7
39764: PUSH
39765: LD_VAR 0 6
39769: PPUSH
39770: LD_VAR 0 8
39774: PPUSH
39775: LD_VAR 0 9
39779: PUSH
39780: LD_VAR 0 10
39784: PLUS
39785: PPUSH
39786: CALL_OW 273
39790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39791: LD_VAR 0 5
39795: PPUSH
39796: LD_VAR 0 7
39800: PPUSH
39801: CALL_OW 488
39805: PUSH
39806: LD_VAR 0 5
39810: PPUSH
39811: LD_VAR 0 7
39815: PPUSH
39816: CALL_OW 428
39820: PPUSH
39821: CALL_OW 247
39825: PUSH
39826: LD_INT 3
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: IN
39836: NOT
39837: AND
39838: IFFALSE 39882
// begin ComMoveXY ( unit , _x , _y ) ;
39840: LD_VAR 0 1
39844: PPUSH
39845: LD_VAR 0 5
39849: PPUSH
39850: LD_VAR 0 7
39854: PPUSH
39855: CALL_OW 111
// result := [ _x , _y ] ;
39859: LD_ADDR_VAR 0 3
39863: PUSH
39864: LD_VAR 0 5
39868: PUSH
39869: LD_VAR 0 7
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: ST_TO_ADDR
// exit ;
39878: POP
39879: POP
39880: GO 39886
// end ; end ;
39882: GO 39726
39884: POP
39885: POP
// end ;
39886: LD_VAR 0 3
39890: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
39895: PPUSH
// result := 0 ;
39896: LD_ADDR_VAR 0 3
39900: PUSH
39901: LD_INT 0
39903: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39904: LD_VAR 0 1
39908: PUSH
39909: LD_INT 0
39911: LESS
39912: PUSH
39913: LD_VAR 0 1
39917: PUSH
39918: LD_INT 8
39920: GREATER
39921: OR
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: LD_INT 0
39930: LESS
39931: OR
39932: PUSH
39933: LD_VAR 0 2
39937: PUSH
39938: LD_INT 8
39940: GREATER
39941: OR
39942: IFFALSE 39946
// exit ;
39944: GO 40021
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39946: LD_ADDR_VAR 0 4
39950: PUSH
39951: LD_INT 22
39953: PUSH
39954: LD_VAR 0 2
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL_OW 69
39967: PUSH
39968: FOR_IN
39969: IFFALSE 40019
// begin un := UnitShoot ( i ) ;
39971: LD_ADDR_VAR 0 5
39975: PUSH
39976: LD_VAR 0 4
39980: PPUSH
39981: CALL_OW 504
39985: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39986: LD_VAR 0 5
39990: PPUSH
39991: CALL_OW 255
39995: PUSH
39996: LD_VAR 0 1
40000: EQUAL
40001: IFFALSE 40017
// begin result := un ;
40003: LD_ADDR_VAR 0 3
40007: PUSH
40008: LD_VAR 0 5
40012: ST_TO_ADDR
// exit ;
40013: POP
40014: POP
40015: GO 40021
// end ; end ;
40017: GO 39968
40019: POP
40020: POP
// end ;
40021: LD_VAR 0 3
40025: RET
// export function GetCargoBay ( units ) ; begin
40026: LD_INT 0
40028: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40029: LD_ADDR_VAR 0 2
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: LD_INT 2
40041: PUSH
40042: LD_INT 34
40044: PUSH
40045: LD_INT 12
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 34
40054: PUSH
40055: LD_INT 51
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 34
40064: PUSH
40065: LD_INT 32
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 34
40074: PUSH
40075: LD_INT 89
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: PPUSH
40089: CALL_OW 72
40093: ST_TO_ADDR
// end ;
40094: LD_VAR 0 2
40098: RET
// export function Negate ( value ) ; begin
40099: LD_INT 0
40101: PPUSH
// result := not value ;
40102: LD_ADDR_VAR 0 2
40106: PUSH
40107: LD_VAR 0 1
40111: NOT
40112: ST_TO_ADDR
// end ;
40113: LD_VAR 0 2
40117: RET
// export function Inc ( value ) ; begin
40118: LD_INT 0
40120: PPUSH
// result := value + 1 ;
40121: LD_ADDR_VAR 0 2
40125: PUSH
40126: LD_VAR 0 1
40130: PUSH
40131: LD_INT 1
40133: PLUS
40134: ST_TO_ADDR
// end ;
40135: LD_VAR 0 2
40139: RET
// export function Dec ( value ) ; begin
40140: LD_INT 0
40142: PPUSH
// result := value - 1 ;
40143: LD_ADDR_VAR 0 2
40147: PUSH
40148: LD_VAR 0 1
40152: PUSH
40153: LD_INT 1
40155: MINUS
40156: ST_TO_ADDR
// end ;
40157: LD_VAR 0 2
40161: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40162: LD_INT 0
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40172: LD_VAR 0 1
40176: PPUSH
40177: LD_VAR 0 2
40181: PPUSH
40182: CALL_OW 488
40186: NOT
40187: PUSH
40188: LD_VAR 0 3
40192: PPUSH
40193: LD_VAR 0 4
40197: PPUSH
40198: CALL_OW 488
40202: NOT
40203: OR
40204: IFFALSE 40217
// begin result := - 1 ;
40206: LD_ADDR_VAR 0 5
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: ST_TO_ADDR
// exit ;
40215: GO 40452
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40217: LD_ADDR_VAR 0 12
40221: PUSH
40222: LD_VAR 0 1
40226: PPUSH
40227: LD_VAR 0 2
40231: PPUSH
40232: LD_VAR 0 3
40236: PPUSH
40237: LD_VAR 0 4
40241: PPUSH
40242: CALL 39302 0 4
40246: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40247: LD_ADDR_VAR 0 11
40251: PUSH
40252: LD_VAR 0 1
40256: PPUSH
40257: LD_VAR 0 2
40261: PPUSH
40262: LD_VAR 0 12
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: PPUSH
40271: LD_VAR 0 12
40275: PUSH
40276: LD_INT 2
40278: ARRAY
40279: PPUSH
40280: CALL_OW 298
40284: ST_TO_ADDR
// distance := 9999 ;
40285: LD_ADDR_VAR 0 10
40289: PUSH
40290: LD_INT 9999
40292: ST_TO_ADDR
// for i := 0 to 5 do
40293: LD_ADDR_VAR 0 6
40297: PUSH
40298: DOUBLE
40299: LD_INT 0
40301: DEC
40302: ST_TO_ADDR
40303: LD_INT 5
40305: PUSH
40306: FOR_TO
40307: IFFALSE 40450
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40309: LD_ADDR_VAR 0 7
40313: PUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_VAR 0 6
40323: PPUSH
40324: LD_VAR 0 11
40328: PPUSH
40329: CALL_OW 272
40333: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40334: LD_ADDR_VAR 0 8
40338: PUSH
40339: LD_VAR 0 2
40343: PPUSH
40344: LD_VAR 0 6
40348: PPUSH
40349: LD_VAR 0 11
40353: PPUSH
40354: CALL_OW 273
40358: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40359: LD_VAR 0 7
40363: PPUSH
40364: LD_VAR 0 8
40368: PPUSH
40369: CALL_OW 488
40373: NOT
40374: IFFALSE 40378
// continue ;
40376: GO 40306
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40378: LD_ADDR_VAR 0 9
40382: PUSH
40383: LD_VAR 0 12
40387: PUSH
40388: LD_INT 1
40390: ARRAY
40391: PPUSH
40392: LD_VAR 0 12
40396: PUSH
40397: LD_INT 2
40399: ARRAY
40400: PPUSH
40401: LD_VAR 0 7
40405: PPUSH
40406: LD_VAR 0 8
40410: PPUSH
40411: CALL_OW 298
40415: ST_TO_ADDR
// if tmp < distance then
40416: LD_VAR 0 9
40420: PUSH
40421: LD_VAR 0 10
40425: LESS
40426: IFFALSE 40448
// begin result := i ;
40428: LD_ADDR_VAR 0 5
40432: PUSH
40433: LD_VAR 0 6
40437: ST_TO_ADDR
// distance := tmp ;
40438: LD_ADDR_VAR 0 10
40442: PUSH
40443: LD_VAR 0 9
40447: ST_TO_ADDR
// end ; end ;
40448: GO 40306
40450: POP
40451: POP
// end ;
40452: LD_VAR 0 5
40456: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40457: LD_INT 0
40459: PPUSH
40460: PPUSH
// if not driver or not IsInUnit ( driver ) then
40461: LD_VAR 0 1
40465: NOT
40466: PUSH
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL_OW 310
40476: NOT
40477: OR
40478: IFFALSE 40482
// exit ;
40480: GO 40572
// vehicle := IsInUnit ( driver ) ;
40482: LD_ADDR_VAR 0 3
40486: PUSH
40487: LD_VAR 0 1
40491: PPUSH
40492: CALL_OW 310
40496: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40497: LD_VAR 0 1
40501: PPUSH
40502: LD_STRING \
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: PUSH
40532: LD_STRING E
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_VAR 0 3
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PPUSH
40568: CALL_OW 446
// end ;
40572: LD_VAR 0 2
40576: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40577: LD_INT 0
40579: PPUSH
40580: PPUSH
// if not driver or not IsInUnit ( driver ) then
40581: LD_VAR 0 1
40585: NOT
40586: PUSH
40587: LD_VAR 0 1
40591: PPUSH
40592: CALL_OW 310
40596: NOT
40597: OR
40598: IFFALSE 40602
// exit ;
40600: GO 40692
// vehicle := IsInUnit ( driver ) ;
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 310
40616: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40617: LD_VAR 0 1
40621: PPUSH
40622: LD_STRING \
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: PUSH
40652: LD_STRING E
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_VAR 0 3
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PPUSH
40688: CALL_OW 447
// end ;
40692: LD_VAR 0 2
40696: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40697: LD_INT 0
40699: PPUSH
40700: PPUSH
40701: PPUSH
// tmp := [ ] ;
40702: LD_ADDR_VAR 0 5
40706: PUSH
40707: EMPTY
40708: ST_TO_ADDR
// for i in units do
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_VAR 0 1
40718: PUSH
40719: FOR_IN
40720: IFFALSE 40758
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40722: LD_ADDR_VAR 0 5
40726: PUSH
40727: LD_VAR 0 5
40731: PPUSH
40732: LD_VAR 0 5
40736: PUSH
40737: LD_INT 1
40739: PLUS
40740: PPUSH
40741: LD_VAR 0 4
40745: PPUSH
40746: CALL_OW 256
40750: PPUSH
40751: CALL_OW 2
40755: ST_TO_ADDR
40756: GO 40719
40758: POP
40759: POP
// if not tmp then
40760: LD_VAR 0 5
40764: NOT
40765: IFFALSE 40769
// exit ;
40767: GO 40817
// if asc then
40769: LD_VAR 0 2
40773: IFFALSE 40797
// result := SortListByListAsc ( units , tmp ) else
40775: LD_ADDR_VAR 0 3
40779: PUSH
40780: LD_VAR 0 1
40784: PPUSH
40785: LD_VAR 0 5
40789: PPUSH
40790: CALL_OW 76
40794: ST_TO_ADDR
40795: GO 40817
// result := SortListByListDesc ( units , tmp ) ;
40797: LD_ADDR_VAR 0 3
40801: PUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: LD_VAR 0 5
40811: PPUSH
40812: CALL_OW 77
40816: ST_TO_ADDR
// end ;
40817: LD_VAR 0 3
40821: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40822: LD_INT 0
40824: PPUSH
40825: PPUSH
// task := GetTaskList ( mech ) ;
40826: LD_ADDR_VAR 0 4
40830: PUSH
40831: LD_VAR 0 1
40835: PPUSH
40836: CALL_OW 437
40840: ST_TO_ADDR
// if not task then
40841: LD_VAR 0 4
40845: NOT
40846: IFFALSE 40850
// exit ;
40848: GO 40892
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40850: LD_ADDR_VAR 0 3
40854: PUSH
40855: LD_VAR 0 4
40859: PUSH
40860: LD_INT 1
40862: ARRAY
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: PUSH
40868: LD_STRING r
40870: EQUAL
40871: PUSH
40872: LD_VAR 0 4
40876: PUSH
40877: LD_INT 1
40879: ARRAY
40880: PUSH
40881: LD_INT 4
40883: ARRAY
40884: PUSH
40885: LD_VAR 0 2
40889: EQUAL
40890: AND
40891: ST_TO_ADDR
// end ;
40892: LD_VAR 0 3
40896: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40897: LD_INT 0
40899: PPUSH
// SetDir ( unit , d ) ;
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_VAR 0 4
40909: PPUSH
40910: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40914: LD_VAR 0 1
40918: PPUSH
40919: LD_VAR 0 2
40923: PPUSH
40924: LD_VAR 0 3
40928: PPUSH
40929: LD_VAR 0 5
40933: PPUSH
40934: CALL_OW 48
// end ;
40938: LD_VAR 0 6
40942: RET
// export function ToNaturalNumber ( number ) ; begin
40943: LD_INT 0
40945: PPUSH
// result := number div 1 ;
40946: LD_ADDR_VAR 0 2
40950: PUSH
40951: LD_VAR 0 1
40955: PUSH
40956: LD_INT 1
40958: DIV
40959: ST_TO_ADDR
// if number < 0 then
40960: LD_VAR 0 1
40964: PUSH
40965: LD_INT 0
40967: LESS
40968: IFFALSE 40978
// result := 0 ;
40970: LD_ADDR_VAR 0 2
40974: PUSH
40975: LD_INT 0
40977: ST_TO_ADDR
// end ;
40978: LD_VAR 0 2
40982: RET
// export function SortByClass ( units , class ) ; var un ; begin
40983: LD_INT 0
40985: PPUSH
40986: PPUSH
// if not units or not class then
40987: LD_VAR 0 1
40991: NOT
40992: PUSH
40993: LD_VAR 0 2
40997: NOT
40998: OR
40999: IFFALSE 41003
// exit ;
41001: GO 41098
// result := [ ] ;
41003: LD_ADDR_VAR 0 3
41007: PUSH
41008: EMPTY
41009: ST_TO_ADDR
// for un in units do
41010: LD_ADDR_VAR 0 4
41014: PUSH
41015: LD_VAR 0 1
41019: PUSH
41020: FOR_IN
41021: IFFALSE 41096
// if GetClass ( un ) = class then
41023: LD_VAR 0 4
41027: PPUSH
41028: CALL_OW 257
41032: PUSH
41033: LD_VAR 0 2
41037: EQUAL
41038: IFFALSE 41065
// result := Insert ( result , 1 , un ) else
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_VAR 0 3
41049: PPUSH
41050: LD_INT 1
41052: PPUSH
41053: LD_VAR 0 4
41057: PPUSH
41058: CALL_OW 2
41062: ST_TO_ADDR
41063: GO 41094
// result := Replace ( result , result + 1 , un ) ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_VAR 0 3
41074: PPUSH
41075: LD_VAR 0 3
41079: PUSH
41080: LD_INT 1
41082: PLUS
41083: PPUSH
41084: LD_VAR 0 4
41088: PPUSH
41089: CALL_OW 1
41093: ST_TO_ADDR
41094: GO 41020
41096: POP
41097: POP
// end ;
41098: LD_VAR 0 3
41102: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41103: LD_INT 0
41105: PPUSH
41106: PPUSH
41107: PPUSH
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
// result := [ ] ;
41112: LD_ADDR_VAR 0 4
41116: PUSH
41117: EMPTY
41118: ST_TO_ADDR
// if x - r < 0 then
41119: LD_VAR 0 1
41123: PUSH
41124: LD_VAR 0 3
41128: MINUS
41129: PUSH
41130: LD_INT 0
41132: LESS
41133: IFFALSE 41145
// min_x := 0 else
41135: LD_ADDR_VAR 0 8
41139: PUSH
41140: LD_INT 0
41142: ST_TO_ADDR
41143: GO 41161
// min_x := x - r ;
41145: LD_ADDR_VAR 0 8
41149: PUSH
41150: LD_VAR 0 1
41154: PUSH
41155: LD_VAR 0 3
41159: MINUS
41160: ST_TO_ADDR
// if y - r < 0 then
41161: LD_VAR 0 2
41165: PUSH
41166: LD_VAR 0 3
41170: MINUS
41171: PUSH
41172: LD_INT 0
41174: LESS
41175: IFFALSE 41187
// min_y := 0 else
41177: LD_ADDR_VAR 0 7
41181: PUSH
41182: LD_INT 0
41184: ST_TO_ADDR
41185: GO 41203
// min_y := y - r ;
41187: LD_ADDR_VAR 0 7
41191: PUSH
41192: LD_VAR 0 2
41196: PUSH
41197: LD_VAR 0 3
41201: MINUS
41202: ST_TO_ADDR
// max_x := x + r ;
41203: LD_ADDR_VAR 0 9
41207: PUSH
41208: LD_VAR 0 1
41212: PUSH
41213: LD_VAR 0 3
41217: PLUS
41218: ST_TO_ADDR
// max_y := y + r ;
41219: LD_ADDR_VAR 0 10
41223: PUSH
41224: LD_VAR 0 2
41228: PUSH
41229: LD_VAR 0 3
41233: PLUS
41234: ST_TO_ADDR
// for _x = min_x to max_x do
41235: LD_ADDR_VAR 0 5
41239: PUSH
41240: DOUBLE
41241: LD_VAR 0 8
41245: DEC
41246: ST_TO_ADDR
41247: LD_VAR 0 9
41251: PUSH
41252: FOR_TO
41253: IFFALSE 41354
// for _y = min_y to max_y do
41255: LD_ADDR_VAR 0 6
41259: PUSH
41260: DOUBLE
41261: LD_VAR 0 7
41265: DEC
41266: ST_TO_ADDR
41267: LD_VAR 0 10
41271: PUSH
41272: FOR_TO
41273: IFFALSE 41350
// begin if not ValidHex ( _x , _y ) then
41275: LD_VAR 0 5
41279: PPUSH
41280: LD_VAR 0 6
41284: PPUSH
41285: CALL_OW 488
41289: NOT
41290: IFFALSE 41294
// continue ;
41292: GO 41272
// if GetResourceTypeXY ( _x , _y ) then
41294: LD_VAR 0 5
41298: PPUSH
41299: LD_VAR 0 6
41303: PPUSH
41304: CALL_OW 283
41308: IFFALSE 41348
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41310: LD_ADDR_VAR 0 4
41314: PUSH
41315: LD_VAR 0 4
41319: PPUSH
41320: LD_VAR 0 4
41324: PUSH
41325: LD_INT 1
41327: PLUS
41328: PPUSH
41329: LD_VAR 0 5
41333: PUSH
41334: LD_VAR 0 6
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL_OW 1
41347: ST_TO_ADDR
// end ;
41348: GO 41272
41350: POP
41351: POP
41352: GO 41252
41354: POP
41355: POP
// end ;
41356: LD_VAR 0 4
41360: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41361: LD_INT 0
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
// if not units then
41371: LD_VAR 0 1
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 41904
// result := UnitFilter ( units , [ f_ok ] ) ;
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_VAR 0 1
41389: PPUSH
41390: LD_INT 50
41392: PUSH
41393: EMPTY
41394: LIST
41395: PPUSH
41396: CALL_OW 72
41400: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41401: LD_ADDR_VAR 0 8
41405: PUSH
41406: LD_VAR 0 1
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: PPUSH
41415: CALL_OW 255
41419: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41420: LD_ADDR_VAR 0 10
41424: PUSH
41425: LD_INT 29
41427: PUSH
41428: LD_INT 91
41430: PUSH
41431: LD_INT 49
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: ST_TO_ADDR
// if not result then
41439: LD_VAR 0 3
41443: NOT
41444: IFFALSE 41448
// exit ;
41446: GO 41904
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41448: LD_ADDR_VAR 0 5
41452: PUSH
41453: LD_INT 81
41455: PUSH
41456: LD_VAR 0 8
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PPUSH
41465: CALL_OW 69
41469: ST_TO_ADDR
// for i in result do
41470: LD_ADDR_VAR 0 4
41474: PUSH
41475: LD_VAR 0 3
41479: PUSH
41480: FOR_IN
41481: IFFALSE 41902
// begin tag := GetTag ( i ) + 1 ;
41483: LD_ADDR_VAR 0 9
41487: PUSH
41488: LD_VAR 0 4
41492: PPUSH
41493: CALL_OW 110
41497: PUSH
41498: LD_INT 1
41500: PLUS
41501: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41502: LD_ADDR_VAR 0 7
41506: PUSH
41507: LD_VAR 0 4
41511: PPUSH
41512: CALL_OW 250
41516: PPUSH
41517: LD_VAR 0 4
41521: PPUSH
41522: CALL_OW 251
41526: PPUSH
41527: LD_INT 6
41529: PPUSH
41530: CALL 41103 0 3
41534: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41535: LD_VAR 0 4
41539: PPUSH
41540: CALL_OW 247
41544: PUSH
41545: LD_INT 2
41547: EQUAL
41548: PUSH
41549: LD_VAR 0 7
41553: AND
41554: PUSH
41555: LD_VAR 0 4
41559: PPUSH
41560: CALL_OW 264
41564: PUSH
41565: LD_VAR 0 10
41569: IN
41570: NOT
41571: AND
41572: IFFALSE 41611
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41574: LD_VAR 0 4
41578: PPUSH
41579: LD_VAR 0 7
41583: PUSH
41584: LD_INT 1
41586: ARRAY
41587: PUSH
41588: LD_INT 1
41590: ARRAY
41591: PPUSH
41592: LD_VAR 0 7
41596: PUSH
41597: LD_INT 1
41599: ARRAY
41600: PUSH
41601: LD_INT 2
41603: ARRAY
41604: PPUSH
41605: CALL_OW 116
41609: GO 41900
// if path > tag then
41611: LD_VAR 0 2
41615: PUSH
41616: LD_VAR 0 9
41620: GREATER
41621: IFFALSE 41829
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41623: LD_ADDR_VAR 0 6
41627: PUSH
41628: LD_VAR 0 5
41632: PPUSH
41633: LD_INT 91
41635: PUSH
41636: LD_VAR 0 4
41640: PUSH
41641: LD_INT 8
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: PPUSH
41649: CALL_OW 72
41653: ST_TO_ADDR
// if nearEnemy then
41654: LD_VAR 0 6
41658: IFFALSE 41727
// begin if GetWeapon ( i ) = ru_time_lapser then
41660: LD_VAR 0 4
41664: PPUSH
41665: CALL_OW 264
41669: PUSH
41670: LD_INT 49
41672: EQUAL
41673: IFFALSE 41701
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41675: LD_VAR 0 4
41679: PPUSH
41680: LD_VAR 0 6
41684: PPUSH
41685: LD_VAR 0 4
41689: PPUSH
41690: CALL_OW 74
41694: PPUSH
41695: CALL_OW 112
41699: GO 41725
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41701: LD_VAR 0 4
41705: PPUSH
41706: LD_VAR 0 6
41710: PPUSH
41711: LD_VAR 0 4
41715: PPUSH
41716: CALL_OW 74
41720: PPUSH
41721: CALL 42829 0 2
// end else
41725: GO 41827
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41727: LD_VAR 0 4
41731: PPUSH
41732: LD_VAR 0 2
41736: PUSH
41737: LD_VAR 0 9
41741: ARRAY
41742: PUSH
41743: LD_INT 1
41745: ARRAY
41746: PPUSH
41747: LD_VAR 0 2
41751: PUSH
41752: LD_VAR 0 9
41756: ARRAY
41757: PUSH
41758: LD_INT 2
41760: ARRAY
41761: PPUSH
41762: CALL_OW 297
41766: PUSH
41767: LD_INT 6
41769: GREATER
41770: IFFALSE 41813
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41772: LD_VAR 0 4
41776: PPUSH
41777: LD_VAR 0 2
41781: PUSH
41782: LD_VAR 0 9
41786: ARRAY
41787: PUSH
41788: LD_INT 1
41790: ARRAY
41791: PPUSH
41792: LD_VAR 0 2
41796: PUSH
41797: LD_VAR 0 9
41801: ARRAY
41802: PUSH
41803: LD_INT 2
41805: ARRAY
41806: PPUSH
41807: CALL_OW 114
41811: GO 41827
// SetTag ( i , tag ) ;
41813: LD_VAR 0 4
41817: PPUSH
41818: LD_VAR 0 9
41822: PPUSH
41823: CALL_OW 109
// end else
41827: GO 41900
// if enemy then
41829: LD_VAR 0 5
41833: IFFALSE 41900
// begin if GetWeapon ( i ) = ru_time_lapser then
41835: LD_VAR 0 4
41839: PPUSH
41840: CALL_OW 264
41844: PUSH
41845: LD_INT 49
41847: EQUAL
41848: IFFALSE 41876
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41850: LD_VAR 0 4
41854: PPUSH
41855: LD_VAR 0 5
41859: PPUSH
41860: LD_VAR 0 4
41864: PPUSH
41865: CALL_OW 74
41869: PPUSH
41870: CALL_OW 112
41874: GO 41900
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41876: LD_VAR 0 4
41880: PPUSH
41881: LD_VAR 0 5
41885: PPUSH
41886: LD_VAR 0 4
41890: PPUSH
41891: CALL_OW 74
41895: PPUSH
41896: CALL 42829 0 2
// end ; end ;
41900: GO 41480
41902: POP
41903: POP
// end ;
41904: LD_VAR 0 3
41908: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41909: LD_INT 0
41911: PPUSH
41912: PPUSH
41913: PPUSH
// if not unit or IsInUnit ( unit ) then
41914: LD_VAR 0 1
41918: NOT
41919: PUSH
41920: LD_VAR 0 1
41924: PPUSH
41925: CALL_OW 310
41929: OR
41930: IFFALSE 41934
// exit ;
41932: GO 42025
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41934: LD_ADDR_VAR 0 4
41938: PUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: CALL_OW 250
41948: PPUSH
41949: LD_VAR 0 2
41953: PPUSH
41954: LD_INT 1
41956: PPUSH
41957: CALL_OW 272
41961: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41962: LD_ADDR_VAR 0 5
41966: PUSH
41967: LD_VAR 0 1
41971: PPUSH
41972: CALL_OW 251
41976: PPUSH
41977: LD_VAR 0 2
41981: PPUSH
41982: LD_INT 1
41984: PPUSH
41985: CALL_OW 273
41989: ST_TO_ADDR
// if ValidHex ( x , y ) then
41990: LD_VAR 0 4
41994: PPUSH
41995: LD_VAR 0 5
41999: PPUSH
42000: CALL_OW 488
42004: IFFALSE 42025
// ComTurnXY ( unit , x , y ) ;
42006: LD_VAR 0 1
42010: PPUSH
42011: LD_VAR 0 4
42015: PPUSH
42016: LD_VAR 0 5
42020: PPUSH
42021: CALL_OW 118
// end ;
42025: LD_VAR 0 3
42029: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42030: LD_INT 0
42032: PPUSH
42033: PPUSH
// result := false ;
42034: LD_ADDR_VAR 0 3
42038: PUSH
42039: LD_INT 0
42041: ST_TO_ADDR
// if not units then
42042: LD_VAR 0 2
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 42096
// for i in units do
42051: LD_ADDR_VAR 0 4
42055: PUSH
42056: LD_VAR 0 2
42060: PUSH
42061: FOR_IN
42062: IFFALSE 42094
// if See ( side , i ) then
42064: LD_VAR 0 1
42068: PPUSH
42069: LD_VAR 0 4
42073: PPUSH
42074: CALL_OW 292
42078: IFFALSE 42092
// begin result := true ;
42080: LD_ADDR_VAR 0 3
42084: PUSH
42085: LD_INT 1
42087: ST_TO_ADDR
// exit ;
42088: POP
42089: POP
42090: GO 42096
// end ;
42092: GO 42061
42094: POP
42095: POP
// end ;
42096: LD_VAR 0 3
42100: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42101: LD_INT 0
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
// if not unit or not points then
42107: LD_VAR 0 1
42111: NOT
42112: PUSH
42113: LD_VAR 0 2
42117: NOT
42118: OR
42119: IFFALSE 42123
// exit ;
42121: GO 42213
// dist := 99999 ;
42123: LD_ADDR_VAR 0 5
42127: PUSH
42128: LD_INT 99999
42130: ST_TO_ADDR
// for i in points do
42131: LD_ADDR_VAR 0 4
42135: PUSH
42136: LD_VAR 0 2
42140: PUSH
42141: FOR_IN
42142: IFFALSE 42211
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42144: LD_ADDR_VAR 0 6
42148: PUSH
42149: LD_VAR 0 1
42153: PPUSH
42154: LD_VAR 0 4
42158: PUSH
42159: LD_INT 1
42161: ARRAY
42162: PPUSH
42163: LD_VAR 0 4
42167: PUSH
42168: LD_INT 2
42170: ARRAY
42171: PPUSH
42172: CALL_OW 297
42176: ST_TO_ADDR
// if tmpDist < dist then
42177: LD_VAR 0 6
42181: PUSH
42182: LD_VAR 0 5
42186: LESS
42187: IFFALSE 42209
// begin result := i ;
42189: LD_ADDR_VAR 0 3
42193: PUSH
42194: LD_VAR 0 4
42198: ST_TO_ADDR
// dist := tmpDist ;
42199: LD_ADDR_VAR 0 5
42203: PUSH
42204: LD_VAR 0 6
42208: ST_TO_ADDR
// end ; end ;
42209: GO 42141
42211: POP
42212: POP
// end ;
42213: LD_VAR 0 3
42217: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42218: LD_INT 0
42220: PPUSH
// uc_side := side ;
42221: LD_ADDR_OWVAR 20
42225: PUSH
42226: LD_VAR 0 1
42230: ST_TO_ADDR
// uc_nation := 3 ;
42231: LD_ADDR_OWVAR 21
42235: PUSH
42236: LD_INT 3
42238: ST_TO_ADDR
// vc_chassis := 25 ;
42239: LD_ADDR_OWVAR 37
42243: PUSH
42244: LD_INT 25
42246: ST_TO_ADDR
// vc_engine := engine_siberite ;
42247: LD_ADDR_OWVAR 39
42251: PUSH
42252: LD_INT 3
42254: ST_TO_ADDR
// vc_control := control_computer ;
42255: LD_ADDR_OWVAR 38
42259: PUSH
42260: LD_INT 3
42262: ST_TO_ADDR
// vc_weapon := 59 ;
42263: LD_ADDR_OWVAR 40
42267: PUSH
42268: LD_INT 59
42270: ST_TO_ADDR
// result := CreateVehicle ;
42271: LD_ADDR_VAR 0 5
42275: PUSH
42276: CALL_OW 45
42280: ST_TO_ADDR
// SetDir ( result , d ) ;
42281: LD_VAR 0 5
42285: PPUSH
42286: LD_VAR 0 4
42290: PPUSH
42291: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42295: LD_VAR 0 5
42299: PPUSH
42300: LD_VAR 0 2
42304: PPUSH
42305: LD_VAR 0 3
42309: PPUSH
42310: LD_INT 0
42312: PPUSH
42313: CALL_OW 48
// end ;
42317: LD_VAR 0 5
42321: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42322: LD_INT 0
42324: PPUSH
42325: PPUSH
42326: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42327: LD_ADDR_VAR 0 2
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42350: LD_VAR 0 1
42354: NOT
42355: PUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 264
42365: PUSH
42366: LD_INT 12
42368: PUSH
42369: LD_INT 51
42371: PUSH
42372: LD_INT 32
42374: PUSH
42375: LD_INT 89
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: IN
42384: NOT
42385: OR
42386: IFFALSE 42390
// exit ;
42388: GO 42488
// for i := 1 to 3 do
42390: LD_ADDR_VAR 0 3
42394: PUSH
42395: DOUBLE
42396: LD_INT 1
42398: DEC
42399: ST_TO_ADDR
42400: LD_INT 3
42402: PUSH
42403: FOR_TO
42404: IFFALSE 42486
// begin tmp := GetCargo ( cargo , i ) ;
42406: LD_ADDR_VAR 0 4
42410: PUSH
42411: LD_VAR 0 1
42415: PPUSH
42416: LD_VAR 0 3
42420: PPUSH
42421: CALL_OW 289
42425: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42426: LD_ADDR_VAR 0 2
42430: PUSH
42431: LD_VAR 0 2
42435: PPUSH
42436: LD_VAR 0 3
42440: PPUSH
42441: LD_VAR 0 4
42445: PPUSH
42446: CALL_OW 1
42450: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42451: LD_ADDR_VAR 0 2
42455: PUSH
42456: LD_VAR 0 2
42460: PPUSH
42461: LD_INT 4
42463: PPUSH
42464: LD_VAR 0 2
42468: PUSH
42469: LD_INT 4
42471: ARRAY
42472: PUSH
42473: LD_VAR 0 4
42477: PLUS
42478: PPUSH
42479: CALL_OW 1
42483: ST_TO_ADDR
// end ;
42484: GO 42403
42486: POP
42487: POP
// end ;
42488: LD_VAR 0 2
42492: RET
// export function Length ( array ) ; begin
42493: LD_INT 0
42495: PPUSH
// result := array + 0 ;
42496: LD_ADDR_VAR 0 2
42500: PUSH
42501: LD_VAR 0 1
42505: PUSH
42506: LD_INT 0
42508: PLUS
42509: ST_TO_ADDR
// end ;
42510: LD_VAR 0 2
42514: RET
// export function PrepareArray ( array ) ; begin
42515: LD_INT 0
42517: PPUSH
// result := array diff 0 ;
42518: LD_ADDR_VAR 0 2
42522: PUSH
42523: LD_VAR 0 1
42527: PUSH
42528: LD_INT 0
42530: DIFF
42531: ST_TO_ADDR
// if not result [ 1 ] then
42532: LD_VAR 0 2
42536: PUSH
42537: LD_INT 1
42539: ARRAY
42540: NOT
42541: IFFALSE 42561
// result := Delete ( result , 1 ) ;
42543: LD_ADDR_VAR 0 2
42547: PUSH
42548: LD_VAR 0 2
42552: PPUSH
42553: LD_INT 1
42555: PPUSH
42556: CALL_OW 3
42560: ST_TO_ADDR
// end ;
42561: LD_VAR 0 2
42565: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42566: LD_INT 0
42568: PPUSH
42569: PPUSH
42570: PPUSH
42571: PPUSH
// sibRocketRange := 25 ;
42572: LD_ADDR_VAR 0 6
42576: PUSH
42577: LD_INT 25
42579: ST_TO_ADDR
// result := false ;
42580: LD_ADDR_VAR 0 4
42584: PUSH
42585: LD_INT 0
42587: ST_TO_ADDR
// for i := 0 to 5 do
42588: LD_ADDR_VAR 0 5
42592: PUSH
42593: DOUBLE
42594: LD_INT 0
42596: DEC
42597: ST_TO_ADDR
42598: LD_INT 5
42600: PUSH
42601: FOR_TO
42602: IFFALSE 42669
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42604: LD_VAR 0 1
42608: PPUSH
42609: LD_VAR 0 5
42613: PPUSH
42614: LD_VAR 0 6
42618: PPUSH
42619: CALL_OW 272
42623: PPUSH
42624: LD_VAR 0 2
42628: PPUSH
42629: LD_VAR 0 5
42633: PPUSH
42634: LD_VAR 0 6
42638: PPUSH
42639: CALL_OW 273
42643: PPUSH
42644: LD_VAR 0 3
42648: PPUSH
42649: CALL_OW 309
42653: IFFALSE 42667
// begin result := true ;
42655: LD_ADDR_VAR 0 4
42659: PUSH
42660: LD_INT 1
42662: ST_TO_ADDR
// exit ;
42663: POP
42664: POP
42665: GO 42671
// end ;
42667: GO 42601
42669: POP
42670: POP
// end ;
42671: LD_VAR 0 4
42675: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42676: LD_INT 0
42678: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42679: LD_VAR 0 1
42683: PPUSH
42684: LD_VAR 0 2
42688: PPUSH
42689: LD_INT 0
42691: PPUSH
42692: LD_INT 0
42694: PPUSH
42695: LD_INT 1
42697: PPUSH
42698: LD_INT 0
42700: PPUSH
42701: CALL_OW 587
// end ;
42705: LD_VAR 0 3
42709: RET
// export function CenterOnNow ( unit ) ; begin
42710: LD_INT 0
42712: PPUSH
// result := IsInUnit ( unit ) ;
42713: LD_ADDR_VAR 0 2
42717: PUSH
42718: LD_VAR 0 1
42722: PPUSH
42723: CALL_OW 310
42727: ST_TO_ADDR
// if not result then
42728: LD_VAR 0 2
42732: NOT
42733: IFFALSE 42745
// result := unit ;
42735: LD_ADDR_VAR 0 2
42739: PUSH
42740: LD_VAR 0 1
42744: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 87
// end ;
42754: LD_VAR 0 2
42758: RET
// export function ComMoveHex ( unit , hex ) ; begin
42759: LD_INT 0
42761: PPUSH
// if not hex then
42762: LD_VAR 0 2
42766: NOT
42767: IFFALSE 42771
// exit ;
42769: GO 42824
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42771: LD_VAR 0 2
42775: PUSH
42776: LD_INT 1
42778: ARRAY
42779: PPUSH
42780: LD_VAR 0 2
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: PPUSH
42789: CALL_OW 428
42793: IFFALSE 42797
// exit ;
42795: GO 42824
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42797: LD_VAR 0 1
42801: PPUSH
42802: LD_VAR 0 2
42806: PUSH
42807: LD_INT 1
42809: ARRAY
42810: PPUSH
42811: LD_VAR 0 2
42815: PUSH
42816: LD_INT 2
42818: ARRAY
42819: PPUSH
42820: CALL_OW 111
// end ;
42824: LD_VAR 0 3
42828: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42829: LD_INT 0
42831: PPUSH
42832: PPUSH
42833: PPUSH
// if not unit or not enemy then
42834: LD_VAR 0 1
42838: NOT
42839: PUSH
42840: LD_VAR 0 2
42844: NOT
42845: OR
42846: IFFALSE 42850
// exit ;
42848: GO 42974
// x := GetX ( enemy ) ;
42850: LD_ADDR_VAR 0 4
42854: PUSH
42855: LD_VAR 0 2
42859: PPUSH
42860: CALL_OW 250
42864: ST_TO_ADDR
// y := GetY ( enemy ) ;
42865: LD_ADDR_VAR 0 5
42869: PUSH
42870: LD_VAR 0 2
42874: PPUSH
42875: CALL_OW 251
42879: ST_TO_ADDR
// if ValidHex ( x , y ) then
42880: LD_VAR 0 4
42884: PPUSH
42885: LD_VAR 0 5
42889: PPUSH
42890: CALL_OW 488
42894: IFFALSE 42974
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
42896: LD_VAR 0 2
42900: PPUSH
42901: CALL_OW 247
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: IN
42916: PUSH
42917: LD_VAR 0 1
42921: PPUSH
42922: CALL_OW 255
42926: PPUSH
42927: LD_VAR 0 2
42931: PPUSH
42932: CALL_OW 292
42936: AND
42937: IFFALSE 42955
// ComAttackUnit ( unit , enemy ) else
42939: LD_VAR 0 1
42943: PPUSH
42944: LD_VAR 0 2
42948: PPUSH
42949: CALL_OW 115
42953: GO 42974
// ComAgressiveMove ( unit , x , y ) ;
42955: LD_VAR 0 1
42959: PPUSH
42960: LD_VAR 0 4
42964: PPUSH
42965: LD_VAR 0 5
42969: PPUSH
42970: CALL_OW 114
// end ;
42974: LD_VAR 0 3
42978: RET
