// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 685 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 09_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 09_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Omar , Kaia ; export heikeVehicle , omarVehicle , omarSol ; export function PrepareArabian ; var i , un , fac , j ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 2 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// uc_nation := nation_arabian ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// InitHC_All ( ) ;
  64: CALL_OW 584
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) do
  68: LD_ADDR_VAR 0 2
  72: PUSH
  73: LD_INT 22
  75: PUSH
  76: LD_INT 2
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PUSH
  83: LD_INT 30
  85: PUSH
  86: LD_INT 32
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: PPUSH
  97: CALL_OW 69
 101: PUSH
 102: FOR_IN
 103: IFFALSE 168
// begin PrepareSoldier ( false , 6 ) ;
 105: LD_INT 0
 107: PPUSH
 108: LD_INT 6
 110: PPUSH
 111: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 115: CALL_OW 44
 119: PPUSH
 120: LD_VAR 0 2
 124: PPUSH
 125: CALL_OW 52
// PlaceWeaponTurret ( i , [ ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ i mod 3 + 1 ] ) ;
 129: LD_VAR 0 2
 133: PPUSH
 134: LD_INT 25
 136: PUSH
 137: LD_INT 27
 139: PUSH
 140: LD_INT 28
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_VAR 0 2
 152: PUSH
 153: LD_INT 3
 155: MOD
 156: PUSH
 157: LD_INT 1
 159: PLUS
 160: ARRAY
 161: PPUSH
 162: CALL_OW 431
// end ;
 166: GO 102
 168: POP
 169: POP
// PlaceWeaponTurret ( HexInfo ( 129 , 61 ) , ar_radar ) ;
 170: LD_INT 129
 172: PPUSH
 173: LD_INT 61
 175: PPUSH
 176: CALL_OW 428
 180: PPUSH
 181: LD_INT 30
 183: PPUSH
 184: CALL_OW 431
// PrepareSoldier ( sex_male , 3 ) ;
 188: LD_INT 1
 190: PPUSH
 191: LD_INT 3
 193: PPUSH
 194: CALL_OW 381
// omarSol := CreateHuman ;
 198: LD_ADDR_EXP 8
 202: PUSH
 203: CALL_OW 44
 207: ST_TO_ADDR
// PlaceHumanInUnit ( omarSol , ar_depot ) ;
 208: LD_EXP 8
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: CALL_OW 52
// fac := HexInfo ( 143 , 51 ) ;
 220: LD_ADDR_VAR 0 4
 224: PUSH
 225: LD_INT 143
 227: PPUSH
 228: LD_INT 51
 230: PPUSH
 231: CALL_OW 428
 235: ST_TO_ADDR
// for i := 1 to 2 do
 236: LD_ADDR_VAR 0 2
 240: PUSH
 241: DOUBLE
 242: LD_INT 1
 244: DEC
 245: ST_TO_ADDR
 246: LD_INT 2
 248: PUSH
 249: FOR_TO
 250: IFFALSE 278
// begin PrepareMechanic ( false , 3 ) ;
 252: LD_INT 0
 254: PPUSH
 255: LD_INT 3
 257: PPUSH
 258: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , fac ) ;
 262: CALL_OW 44
 266: PPUSH
 267: LD_VAR 0 4
 271: PPUSH
 272: CALL_OW 52
// end ;
 276: GO 249
 278: POP
 279: POP
// for i := 1 to 2 do
 280: LD_ADDR_VAR 0 2
 284: PUSH
 285: DOUBLE
 286: LD_INT 1
 288: DEC
 289: ST_TO_ADDR
 290: LD_INT 2
 292: PUSH
 293: FOR_TO
 294: IFFALSE 320
// begin PrepareEngineer ( false , 2 ) ;
 296: LD_INT 0
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ar_depot ) ;
 306: CALL_OW 44
 310: PPUSH
 311: LD_INT 1
 313: PPUSH
 314: CALL_OW 52
// end ;
 318: GO 293
 320: POP
 321: POP
// PlaceUnitXY ( CreateHuman , 164 , 80 , false ) ;
 322: CALL_OW 44
 326: PPUSH
 327: LD_INT 164
 329: PPUSH
 330: LD_INT 80
 332: PPUSH
 333: LD_INT 0
 335: PPUSH
 336: CALL_OW 48
// PlaceUnitXY ( CreateHuman , 166 , 84 , false ) ;
 340: CALL_OW 44
 344: PPUSH
 345: LD_INT 166
 347: PPUSH
 348: LD_INT 84
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) do
 358: LD_ADDR_VAR 0 2
 362: PUSH
 363: LD_INT 22
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: LD_INT 8
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: FOR_IN
 393: IFFALSE 441
// for j := 1 to 3 do
 395: LD_ADDR_VAR 0 5
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: FOR_TO
 409: IFFALSE 437
// begin PrepareScientist ( false , 3 ) ;
 411: LD_INT 0
 413: PPUSH
 414: LD_INT 3
 416: PPUSH
 417: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , i ) ;
 421: CALL_OW 44
 425: PPUSH
 426: LD_VAR 0 2
 430: PPUSH
 431: CALL_OW 52
// end ;
 435: GO 408
 437: POP
 438: POP
 439: GO 392
 441: POP
 442: POP
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 443: LD_ADDR_EXP 3
 447: PUSH
 448: LD_STRING Heike
 450: PPUSH
 451: LD_EXP 1
 455: NOT
 456: PPUSH
 457: LD_EXP 2
 461: PPUSH
 462: CALL 1426 0 3
 466: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 467: LD_ADDR_EXP 5
 471: PUSH
 472: LD_STRING Kaia
 474: PPUSH
 475: LD_EXP 1
 479: NOT
 480: PPUSH
 481: LD_EXP 2
 485: PPUSH
 486: CALL 1426 0 3
 490: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 491: LD_INT 14
 493: PPUSH
 494: LD_INT 3
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 27
 502: PPUSH
 503: LD_INT 100
 505: PPUSH
 506: CALL 6266 0 5
// heikeVehicle := CreateVehicle ;
 510: LD_ADDR_EXP 6
 514: PUSH
 515: CALL_OW 45
 519: ST_TO_ADDR
// SetDir ( heikeVehicle , 1 ) ;
 520: LD_EXP 6
 524: PPUSH
 525: LD_INT 1
 527: PPUSH
 528: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 149 , 59 , false ) ;
 532: LD_EXP 6
 536: PPUSH
 537: LD_INT 149
 539: PPUSH
 540: LD_INT 59
 542: PPUSH
 543: LD_INT 0
 545: PPUSH
 546: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 550: LD_EXP 3
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL_OW 336
// PlaceHumanInUnit ( Heike , ar_depot ) ;
 562: LD_EXP 3
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 52
// uc_side := 5 ;
 574: LD_ADDR_OWVAR 20
 578: PUSH
 579: LD_INT 5
 581: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 582: LD_ADDR_EXP 4
 586: PUSH
 587: LD_STRING Omar
 589: PPUSH
 590: CALL_OW 25
 594: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 595: LD_INT 14
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 27
 606: PPUSH
 607: LD_INT 100
 609: PPUSH
 610: CALL 6266 0 5
// omarVehicle := CreateVehicle ;
 614: LD_ADDR_EXP 7
 618: PUSH
 619: CALL_OW 45
 623: ST_TO_ADDR
// SetClass ( Omar , class_soldier ) ;
 624: LD_EXP 4
 628: PPUSH
 629: LD_INT 1
 631: PPUSH
 632: CALL_OW 336
// SetDir ( omarVehicle , 1 ) ;
 636: LD_EXP 7
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL_OW 233
// PlaceUnitXY ( omarVehicle , 132 , 83 , false ) ;
 648: LD_EXP 7
 652: PPUSH
 653: LD_INT 132
 655: PPUSH
 656: LD_INT 83
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 666: LD_EXP 4
 670: PPUSH
 671: LD_EXP 7
 675: PPUSH
 676: CALL_OW 52
// end ; end_of_file
 680: LD_VAR 0 1
 684: RET
// export function Action ; var i ; begin
 685: LD_INT 0
 687: PPUSH
 688: PPUSH
// Video ( true ) ;
 689: LD_INT 1
 691: PPUSH
 692: CALL 38719 0 1
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_lab_full ] ] ] ) do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: LD_INT 22
 703: PUSH
 704: LD_INT 2
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 2
 713: PUSH
 714: LD_INT 30
 716: PUSH
 717: LD_INT 3
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 30
 726: PUSH
 727: LD_INT 8
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 69
 747: PUSH
 748: FOR_IN
 749: IFFALSE 768
// SetSpecResearch ( i , 1500 , false ) ;
 751: LD_VAR 0 2
 755: PPUSH
 756: LD_INT 1500
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 486
 766: GO 748
 768: POP
 769: POP
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
 770: LD_INT 1
 772: PPUSH
 773: LD_INT 1
 775: PPUSH
 776: LD_INT 2
 778: PPUSH
 779: LD_INT 32963
 781: NEG
 782: PPUSH
 783: CALL_OW 330
// ComMoveXY ( Omar , 150 , 72 ) ;
 787: LD_EXP 4
 791: PPUSH
 792: LD_INT 150
 794: PPUSH
 795: LD_INT 72
 797: PPUSH
 798: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 802: LD_INT 35
 804: PPUSH
 805: CALL_OW 67
// until HexInfo ( 150 , 72 ) ;
 809: LD_INT 150
 811: PPUSH
 812: LD_INT 72
 814: PPUSH
 815: CALL_OW 428
 819: IFFALSE 802
// ComExitBuilding ( omarSol ) ;
 821: LD_EXP 8
 825: PPUSH
 826: CALL_OW 122
// AddComMoveXY ( omarSol , 150 , 69 ) ;
 830: LD_EXP 8
 834: PPUSH
 835: LD_INT 150
 837: PPUSH
 838: LD_INT 69
 840: PPUSH
 841: CALL_OW 171
// AddComMoveUnit ( omarSol , Omar ) ;
 845: LD_EXP 8
 849: PPUSH
 850: LD_EXP 4
 854: PPUSH
 855: CALL_OW 172
// AddComTurnUnit ( omarSol , Omar ) ;
 859: LD_EXP 8
 863: PPUSH
 864: LD_EXP 4
 868: PPUSH
 869: CALL_OW 179
// ComExitVehicle ( Omar ) ;
 873: LD_EXP 4
 877: PPUSH
 878: CALL_OW 121
// AddComMoveXY ( Omar , 152 , 70 ) ;
 882: LD_EXP 4
 886: PPUSH
 887: LD_INT 152
 889: PPUSH
 890: LD_INT 70
 892: PPUSH
 893: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
 897: LD_INT 35
 899: PPUSH
 900: CALL_OW 67
// until GetDistUnits ( Omar , omarSol ) < 3 ;
 904: LD_EXP 4
 908: PPUSH
 909: LD_EXP 8
 913: PPUSH
 914: CALL_OW 296
 918: PUSH
 919: LD_INT 3
 921: LESS
 922: IFFALSE 897
// ComTurnUnit ( Omar , omarSol ) ;
 924: LD_EXP 4
 928: PPUSH
 929: LD_EXP 8
 933: PPUSH
 934: CALL_OW 119
// ComExitBuilding ( Heike ) ;
 938: LD_EXP 3
 942: PPUSH
 943: CALL_OW 122
// AddComMoveXY ( Heike , 149 , 68 ) ;
 947: LD_EXP 3
 951: PPUSH
 952: LD_INT 149
 954: PPUSH
 955: LD_INT 68
 957: PPUSH
 958: CALL_OW 171
// AddComTurnUnit ( Heike , Omar ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_EXP 4
 971: PPUSH
 972: CALL_OW 179
// Say ( Omar , DO-Intro-1 ) ;
 976: LD_EXP 4
 980: PPUSH
 981: LD_STRING DO-Intro-1
 983: PPUSH
 984: CALL_OW 88
// ComEnterUnit ( omarSol , ar_depot ) ;
 988: LD_EXP 8
 992: PPUSH
 993: LD_INT 1
 995: PPUSH
 996: CALL_OW 120
// wait ( 0 0$0.3 ) ;
1000: LD_INT 10
1002: PPUSH
1003: CALL_OW 67
// Say ( Heike , DH-Intro-2 ) ;
1007: LD_EXP 3
1011: PPUSH
1012: LD_STRING DH-Intro-2
1014: PPUSH
1015: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
1019: LD_EXP 4
1023: PPUSH
1024: LD_EXP 3
1028: PPUSH
1029: CALL_OW 119
// Say ( Omar , DO-Intro-3 ) ;
1033: LD_EXP 4
1037: PPUSH
1038: LD_STRING DO-Intro-3
1040: PPUSH
1041: CALL_OW 88
// ComMoveXY ( Heike , 152 , 58 ) ;
1045: LD_EXP 3
1049: PPUSH
1050: LD_INT 152
1052: PPUSH
1053: LD_INT 58
1055: PPUSH
1056: CALL_OW 111
// ComMoveXY ( Omar , 154 , 60 ) ;
1060: LD_EXP 4
1064: PPUSH
1065: LD_INT 154
1067: PPUSH
1068: LD_INT 60
1070: PPUSH
1071: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1075: LD_EXP 4
1079: PPUSH
1080: LD_EXP 3
1084: PPUSH
1085: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1089: LD_EXP 3
1093: PPUSH
1094: LD_EXP 4
1098: PPUSH
1099: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1103: LD_INT 35
1105: PPUSH
1106: CALL_OW 67
// until IsAt ( Heike , 152 , 58 ) and IsAt ( Omar , 154 , 60 ) ;
1110: LD_EXP 3
1114: PPUSH
1115: LD_INT 152
1117: PPUSH
1118: LD_INT 58
1120: PPUSH
1121: CALL_OW 307
1125: PUSH
1126: LD_EXP 4
1130: PPUSH
1131: LD_INT 154
1133: PPUSH
1134: LD_INT 60
1136: PPUSH
1137: CALL_OW 307
1141: AND
1142: IFFALSE 1103
// wait ( 0 0$0.3 ) ;
1144: LD_INT 10
1146: PPUSH
1147: CALL_OW 67
// Say ( Omar , DO-Intro-4 ) ;
1151: LD_EXP 4
1155: PPUSH
1156: LD_STRING DO-Intro-4
1158: PPUSH
1159: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1163: LD_INT 18
1165: PPUSH
1166: CALL_OW 67
// Say ( Heike , DH-Intro-5 ) ;
1170: LD_EXP 3
1174: PPUSH
1175: LD_STRING DH-Intro-5
1177: PPUSH
1178: CALL_OW 88
// Say ( Omar , DO-Intro-6 ) ;
1182: LD_EXP 4
1186: PPUSH
1187: LD_STRING DO-Intro-6
1189: PPUSH
1190: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1194: LD_INT 10
1196: PPUSH
1197: CALL_OW 67
// Say ( Heike , DH-Intro-7 ) ;
1201: LD_EXP 3
1205: PPUSH
1206: LD_STRING DH-Intro-7
1208: PPUSH
1209: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1213: LD_INT 7
1215: PPUSH
1216: CALL_OW 67
// Say ( Heike , DH-Intro-8 ) ;
1220: LD_EXP 3
1224: PPUSH
1225: LD_STRING DH-Intro-8
1227: PPUSH
1228: CALL_OW 88
// Say ( Omar , DO-Intro-9 ) ;
1232: LD_EXP 4
1236: PPUSH
1237: LD_STRING DO-Intro-9
1239: PPUSH
1240: CALL_OW 88
// Say ( Heike , DH-Intro-10 ) ;
1244: LD_EXP 3
1248: PPUSH
1249: LD_STRING DH-Intro-10
1251: PPUSH
1252: CALL_OW 88
// if not Kaia then
1256: LD_EXP 5
1260: NOT
1261: IFFALSE 1277
// Say ( Heike , DH-Intro-11-Kaia ) else
1263: LD_EXP 3
1267: PPUSH
1268: LD_STRING DH-Intro-11-Kaia
1270: PPUSH
1271: CALL_OW 88
1275: GO 1289
// Say ( Heike , DH-Intro-11-Friends ) ;
1277: LD_EXP 3
1281: PPUSH
1282: LD_STRING DH-Intro-11-Friends
1284: PPUSH
1285: CALL_OW 88
// Say ( Omar , DO-Intro-12 ) ;
1289: LD_EXP 4
1293: PPUSH
1294: LD_STRING DO-Intro-12
1296: PPUSH
1297: CALL_OW 88
// Say ( Heike , DH-Intro-13 ) ;
1301: LD_EXP 3
1305: PPUSH
1306: LD_STRING DH-Intro-13
1308: PPUSH
1309: CALL_OW 88
// async ;
1313: ASYNC
// wait ( 0 0$0.2 ) ;
1314: LD_INT 7
1316: PPUSH
1317: CALL_OW 67
// ComEnterUnit ( Heike , heikeVehicle ) ;
1321: LD_EXP 3
1325: PPUSH
1326: LD_EXP 6
1330: PPUSH
1331: CALL_OW 120
// AddComMoveXY ( Heike , 131 , 83 ) ;
1335: LD_EXP 3
1339: PPUSH
1340: LD_INT 131
1342: PPUSH
1343: LD_INT 83
1345: PPUSH
1346: CALL_OW 171
// sync ;
1350: SYNC
// Say ( Omar , DO-Intro-14 ) ;
1351: LD_EXP 4
1355: PPUSH
1356: LD_STRING DO-Intro-14
1358: PPUSH
1359: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1363: LD_EXP 4
1367: PPUSH
1368: LD_EXP 3
1372: PPUSH
1373: CALL_OW 112
// wait ( 0 0$2 ) ;
1377: LD_INT 70
1379: PPUSH
1380: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1384: LD_INT 1
1386: PPUSH
1387: LD_STRING %_cont
1389: PPUSH
1390: CALL_OW 340
// end ;
1394: LD_VAR 0 1
1398: RET
// on LeaveVehicle ( veh , unit ) do begin if unit = Omar then
1399: LD_VAR 0 2
1403: PUSH
1404: LD_EXP 4
1408: EQUAL
1409: IFFALSE 1423
// SetClass ( Omar , class_desert_warior ) ;
1411: LD_EXP 4
1415: PPUSH
1416: LD_INT 11
1418: PPUSH
1419: CALL_OW 336
// end ; end_of_file
1423: PPOPN 2
1425: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
// if exist_mode then
1430: LD_VAR 0 2
1434: IFFALSE 1459
// unit := CreateCharacter ( prefix & ident ) else
1436: LD_ADDR_VAR 0 5
1440: PUSH
1441: LD_VAR 0 3
1445: PUSH
1446: LD_VAR 0 1
1450: STR
1451: PPUSH
1452: CALL_OW 34
1456: ST_TO_ADDR
1457: GO 1474
// unit := NewCharacter ( ident ) ;
1459: LD_ADDR_VAR 0 5
1463: PUSH
1464: LD_VAR 0 1
1468: PPUSH
1469: CALL_OW 25
1473: ST_TO_ADDR
// result := unit ;
1474: LD_ADDR_VAR 0 4
1478: PUSH
1479: LD_VAR 0 5
1483: ST_TO_ADDR
// end ;
1484: LD_VAR 0 4
1488: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1489: LD_INT 0
1491: PPUSH
1492: PPUSH
// if not side or not nation then
1493: LD_VAR 0 1
1497: NOT
1498: PUSH
1499: LD_VAR 0 2
1503: NOT
1504: OR
1505: IFFALSE 1509
// exit ;
1507: GO 2277
// case nation of nation_american :
1509: LD_VAR 0 2
1513: PUSH
1514: LD_INT 1
1516: DOUBLE
1517: EQUAL
1518: IFTRUE 1522
1520: GO 1736
1522: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1523: LD_ADDR_VAR 0 4
1527: PUSH
1528: LD_INT 35
1530: PUSH
1531: LD_INT 45
1533: PUSH
1534: LD_INT 46
1536: PUSH
1537: LD_INT 47
1539: PUSH
1540: LD_INT 82
1542: PUSH
1543: LD_INT 83
1545: PUSH
1546: LD_INT 84
1548: PUSH
1549: LD_INT 85
1551: PUSH
1552: LD_INT 86
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 6
1563: PUSH
1564: LD_INT 15
1566: PUSH
1567: LD_INT 16
1569: PUSH
1570: LD_INT 7
1572: PUSH
1573: LD_INT 12
1575: PUSH
1576: LD_INT 13
1578: PUSH
1579: LD_INT 10
1581: PUSH
1582: LD_INT 14
1584: PUSH
1585: LD_INT 20
1587: PUSH
1588: LD_INT 21
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 25
1596: PUSH
1597: LD_INT 32
1599: PUSH
1600: LD_INT 27
1602: PUSH
1603: LD_INT 36
1605: PUSH
1606: LD_INT 69
1608: PUSH
1609: LD_INT 39
1611: PUSH
1612: LD_INT 34
1614: PUSH
1615: LD_INT 40
1617: PUSH
1618: LD_INT 48
1620: PUSH
1621: LD_INT 49
1623: PUSH
1624: LD_INT 50
1626: PUSH
1627: LD_INT 51
1629: PUSH
1630: LD_INT 52
1632: PUSH
1633: LD_INT 53
1635: PUSH
1636: LD_INT 54
1638: PUSH
1639: LD_INT 55
1641: PUSH
1642: LD_INT 56
1644: PUSH
1645: LD_INT 57
1647: PUSH
1648: LD_INT 58
1650: PUSH
1651: LD_INT 59
1653: PUSH
1654: LD_INT 60
1656: PUSH
1657: LD_INT 61
1659: PUSH
1660: LD_INT 62
1662: PUSH
1663: LD_INT 80
1665: PUSH
1666: LD_INT 82
1668: PUSH
1669: LD_INT 83
1671: PUSH
1672: LD_INT 84
1674: PUSH
1675: LD_INT 85
1677: PUSH
1678: LD_INT 86
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: ST_TO_ADDR
1734: GO 2201
1736: LD_INT 2
1738: DOUBLE
1739: EQUAL
1740: IFTRUE 1744
1742: GO 1970
1744: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1745: LD_ADDR_VAR 0 4
1749: PUSH
1750: LD_INT 35
1752: PUSH
1753: LD_INT 45
1755: PUSH
1756: LD_INT 46
1758: PUSH
1759: LD_INT 47
1761: PUSH
1762: LD_INT 82
1764: PUSH
1765: LD_INT 83
1767: PUSH
1768: LD_INT 84
1770: PUSH
1771: LD_INT 85
1773: PUSH
1774: LD_INT 87
1776: PUSH
1777: LD_INT 70
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: LD_INT 11
1785: PUSH
1786: LD_INT 3
1788: PUSH
1789: LD_INT 4
1791: PUSH
1792: LD_INT 5
1794: PUSH
1795: LD_INT 6
1797: PUSH
1798: LD_INT 15
1800: PUSH
1801: LD_INT 18
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 17
1809: PUSH
1810: LD_INT 8
1812: PUSH
1813: LD_INT 20
1815: PUSH
1816: LD_INT 21
1818: PUSH
1819: LD_INT 22
1821: PUSH
1822: LD_INT 72
1824: PUSH
1825: LD_INT 26
1827: PUSH
1828: LD_INT 69
1830: PUSH
1831: LD_INT 39
1833: PUSH
1834: LD_INT 40
1836: PUSH
1837: LD_INT 41
1839: PUSH
1840: LD_INT 42
1842: PUSH
1843: LD_INT 43
1845: PUSH
1846: LD_INT 48
1848: PUSH
1849: LD_INT 49
1851: PUSH
1852: LD_INT 50
1854: PUSH
1855: LD_INT 51
1857: PUSH
1858: LD_INT 52
1860: PUSH
1861: LD_INT 53
1863: PUSH
1864: LD_INT 54
1866: PUSH
1867: LD_INT 55
1869: PUSH
1870: LD_INT 56
1872: PUSH
1873: LD_INT 60
1875: PUSH
1876: LD_INT 61
1878: PUSH
1879: LD_INT 62
1881: PUSH
1882: LD_INT 66
1884: PUSH
1885: LD_INT 67
1887: PUSH
1888: LD_INT 68
1890: PUSH
1891: LD_INT 81
1893: PUSH
1894: LD_INT 82
1896: PUSH
1897: LD_INT 83
1899: PUSH
1900: LD_INT 84
1902: PUSH
1903: LD_INT 85
1905: PUSH
1906: LD_INT 87
1908: PUSH
1909: LD_INT 88
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: ST_TO_ADDR
1968: GO 2201
1970: LD_INT 3
1972: DOUBLE
1973: EQUAL
1974: IFTRUE 1978
1976: GO 2200
1978: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: LD_INT 46
1986: PUSH
1987: LD_INT 47
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 2
1995: PUSH
1996: LD_INT 82
1998: PUSH
1999: LD_INT 83
2001: PUSH
2002: LD_INT 84
2004: PUSH
2005: LD_INT 85
2007: PUSH
2008: LD_INT 86
2010: PUSH
2011: LD_INT 11
2013: PUSH
2014: LD_INT 9
2016: PUSH
2017: LD_INT 20
2019: PUSH
2020: LD_INT 19
2022: PUSH
2023: LD_INT 21
2025: PUSH
2026: LD_INT 24
2028: PUSH
2029: LD_INT 22
2031: PUSH
2032: LD_INT 25
2034: PUSH
2035: LD_INT 28
2037: PUSH
2038: LD_INT 29
2040: PUSH
2041: LD_INT 30
2043: PUSH
2044: LD_INT 31
2046: PUSH
2047: LD_INT 37
2049: PUSH
2050: LD_INT 38
2052: PUSH
2053: LD_INT 32
2055: PUSH
2056: LD_INT 27
2058: PUSH
2059: LD_INT 33
2061: PUSH
2062: LD_INT 69
2064: PUSH
2065: LD_INT 39
2067: PUSH
2068: LD_INT 34
2070: PUSH
2071: LD_INT 40
2073: PUSH
2074: LD_INT 71
2076: PUSH
2077: LD_INT 23
2079: PUSH
2080: LD_INT 44
2082: PUSH
2083: LD_INT 48
2085: PUSH
2086: LD_INT 49
2088: PUSH
2089: LD_INT 50
2091: PUSH
2092: LD_INT 51
2094: PUSH
2095: LD_INT 52
2097: PUSH
2098: LD_INT 53
2100: PUSH
2101: LD_INT 54
2103: PUSH
2104: LD_INT 55
2106: PUSH
2107: LD_INT 56
2109: PUSH
2110: LD_INT 57
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: LD_INT 59
2118: PUSH
2119: LD_INT 63
2121: PUSH
2122: LD_INT 64
2124: PUSH
2125: LD_INT 65
2127: PUSH
2128: LD_INT 82
2130: PUSH
2131: LD_INT 83
2133: PUSH
2134: LD_INT 84
2136: PUSH
2137: LD_INT 85
2139: PUSH
2140: LD_INT 86
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: ST_TO_ADDR
2198: GO 2201
2200: POP
// if state > - 1 and state < 3 then
2201: LD_VAR 0 3
2205: PUSH
2206: LD_INT 1
2208: NEG
2209: GREATER
2210: PUSH
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 3
2218: LESS
2219: AND
2220: IFFALSE 2277
// for i in result do
2222: LD_ADDR_VAR 0 5
2226: PUSH
2227: LD_VAR 0 4
2231: PUSH
2232: FOR_IN
2233: IFFALSE 2275
// if GetTech ( i , side ) <> state then
2235: LD_VAR 0 5
2239: PPUSH
2240: LD_VAR 0 1
2244: PPUSH
2245: CALL_OW 321
2249: PUSH
2250: LD_VAR 0 3
2254: NONEQUAL
2255: IFFALSE 2273
// result := result diff i ;
2257: LD_ADDR_VAR 0 4
2261: PUSH
2262: LD_VAR 0 4
2266: PUSH
2267: LD_VAR 0 5
2271: DIFF
2272: ST_TO_ADDR
2273: GO 2232
2275: POP
2276: POP
// end ;
2277: LD_VAR 0 4
2281: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2282: LD_INT 0
2284: PPUSH
2285: PPUSH
2286: PPUSH
// result := true ;
2287: LD_ADDR_VAR 0 3
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2295: LD_ADDR_VAR 0 5
2299: PUSH
2300: LD_VAR 0 2
2304: PPUSH
2305: CALL_OW 480
2309: ST_TO_ADDR
// if not tmp then
2310: LD_VAR 0 5
2314: NOT
2315: IFFALSE 2319
// exit ;
2317: GO 2368
// for i in tmp do
2319: LD_ADDR_VAR 0 4
2323: PUSH
2324: LD_VAR 0 5
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2366
// if GetTech ( i , side ) <> state_researched then
2332: LD_VAR 0 4
2336: PPUSH
2337: LD_VAR 0 1
2341: PPUSH
2342: CALL_OW 321
2346: PUSH
2347: LD_INT 2
2349: NONEQUAL
2350: IFFALSE 2364
// begin result := false ;
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: LD_INT 0
2359: ST_TO_ADDR
// exit ;
2360: POP
2361: POP
2362: GO 2368
// end ;
2364: GO 2329
2366: POP
2367: POP
// end ;
2368: LD_VAR 0 3
2372: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2388: LD_VAR 0 1
2392: NOT
2393: PUSH
2394: LD_VAR 0 1
2398: PPUSH
2399: CALL_OW 257
2403: PUSH
2404: LD_INT 9
2406: NONEQUAL
2407: OR
2408: IFFALSE 2412
// exit ;
2410: GO 2985
// side := GetSide ( unit ) ;
2412: LD_ADDR_VAR 0 9
2416: PUSH
2417: LD_VAR 0 1
2421: PPUSH
2422: CALL_OW 255
2426: ST_TO_ADDR
// tech_space := tech_spacanom ;
2427: LD_ADDR_VAR 0 12
2431: PUSH
2432: LD_INT 29
2434: ST_TO_ADDR
// tech_time := tech_taurad ;
2435: LD_ADDR_VAR 0 13
2439: PUSH
2440: LD_INT 28
2442: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2443: LD_ADDR_VAR 0 11
2447: PUSH
2448: LD_VAR 0 1
2452: PPUSH
2453: CALL_OW 310
2457: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2458: LD_VAR 0 11
2462: PPUSH
2463: CALL_OW 247
2467: PUSH
2468: LD_INT 2
2470: EQUAL
2471: IFFALSE 2475
// exit ;
2473: GO 2985
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2475: LD_ADDR_VAR 0 8
2479: PUSH
2480: LD_INT 81
2482: PUSH
2483: LD_VAR 0 9
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_INT 3
2494: PUSH
2495: LD_INT 21
2497: PUSH
2498: LD_INT 3
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PPUSH
2513: CALL_OW 69
2517: ST_TO_ADDR
// if not tmp then
2518: LD_VAR 0 8
2522: NOT
2523: IFFALSE 2527
// exit ;
2525: GO 2985
// if in_unit then
2527: LD_VAR 0 11
2531: IFFALSE 2555
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2533: LD_ADDR_VAR 0 10
2537: PUSH
2538: LD_VAR 0 8
2542: PPUSH
2543: LD_VAR 0 11
2547: PPUSH
2548: CALL_OW 74
2552: ST_TO_ADDR
2553: GO 2575
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2555: LD_ADDR_VAR 0 10
2559: PUSH
2560: LD_VAR 0 8
2564: PPUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 74
2574: ST_TO_ADDR
// if not enemy then
2575: LD_VAR 0 10
2579: NOT
2580: IFFALSE 2584
// exit ;
2582: GO 2985
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2584: LD_VAR 0 11
2588: PUSH
2589: LD_VAR 0 11
2593: PPUSH
2594: LD_VAR 0 10
2598: PPUSH
2599: CALL_OW 296
2603: PUSH
2604: LD_INT 13
2606: GREATER
2607: AND
2608: PUSH
2609: LD_VAR 0 1
2613: PPUSH
2614: LD_VAR 0 10
2618: PPUSH
2619: CALL_OW 296
2623: PUSH
2624: LD_INT 12
2626: GREATER
2627: OR
2628: IFFALSE 2632
// exit ;
2630: GO 2985
// missile := [ 1 ] ;
2632: LD_ADDR_VAR 0 14
2636: PUSH
2637: LD_INT 1
2639: PUSH
2640: EMPTY
2641: LIST
2642: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2643: LD_VAR 0 9
2647: PPUSH
2648: LD_VAR 0 12
2652: PPUSH
2653: CALL_OW 325
2657: IFFALSE 2686
// missile := Replace ( missile , missile + 1 , 2 ) ;
2659: LD_ADDR_VAR 0 14
2663: PUSH
2664: LD_VAR 0 14
2668: PPUSH
2669: LD_VAR 0 14
2673: PUSH
2674: LD_INT 1
2676: PLUS
2677: PPUSH
2678: LD_INT 2
2680: PPUSH
2681: CALL_OW 1
2685: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2686: LD_VAR 0 9
2690: PPUSH
2691: LD_VAR 0 13
2695: PPUSH
2696: CALL_OW 325
2700: PUSH
2701: LD_VAR 0 10
2705: PPUSH
2706: CALL_OW 255
2710: PPUSH
2711: LD_VAR 0 13
2715: PPUSH
2716: CALL_OW 325
2720: NOT
2721: AND
2722: IFFALSE 2751
// missile := Replace ( missile , missile + 1 , 3 ) ;
2724: LD_ADDR_VAR 0 14
2728: PUSH
2729: LD_VAR 0 14
2733: PPUSH
2734: LD_VAR 0 14
2738: PUSH
2739: LD_INT 1
2741: PLUS
2742: PPUSH
2743: LD_INT 3
2745: PPUSH
2746: CALL_OW 1
2750: ST_TO_ADDR
// if missile < 2 then
2751: LD_VAR 0 14
2755: PUSH
2756: LD_INT 2
2758: LESS
2759: IFFALSE 2763
// exit ;
2761: GO 2985
// x := GetX ( enemy ) ;
2763: LD_ADDR_VAR 0 4
2767: PUSH
2768: LD_VAR 0 10
2772: PPUSH
2773: CALL_OW 250
2777: ST_TO_ADDR
// y := GetY ( enemy ) ;
2778: LD_ADDR_VAR 0 5
2782: PUSH
2783: LD_VAR 0 10
2787: PPUSH
2788: CALL_OW 251
2792: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2793: LD_ADDR_VAR 0 6
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 1
2805: NEG
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: CALL_OW 12
2814: PLUS
2815: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2816: LD_ADDR_VAR 0 7
2820: PUSH
2821: LD_VAR 0 5
2825: PUSH
2826: LD_INT 1
2828: NEG
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: CALL_OW 12
2837: PLUS
2838: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2839: LD_VAR 0 6
2843: PPUSH
2844: LD_VAR 0 7
2848: PPUSH
2849: CALL_OW 488
2853: NOT
2854: IFFALSE 2876
// begin _x := x ;
2856: LD_ADDR_VAR 0 6
2860: PUSH
2861: LD_VAR 0 4
2865: ST_TO_ADDR
// _y := y ;
2866: LD_ADDR_VAR 0 7
2870: PUSH
2871: LD_VAR 0 5
2875: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_INT 1
2883: PPUSH
2884: LD_VAR 0 14
2888: PPUSH
2889: CALL_OW 12
2893: ST_TO_ADDR
// case i of 1 :
2894: LD_VAR 0 3
2898: PUSH
2899: LD_INT 1
2901: DOUBLE
2902: EQUAL
2903: IFTRUE 2907
2905: GO 2924
2907: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2908: LD_VAR 0 1
2912: PPUSH
2913: LD_VAR 0 10
2917: PPUSH
2918: CALL_OW 115
2922: GO 2985
2924: LD_INT 2
2926: DOUBLE
2927: EQUAL
2928: IFTRUE 2932
2930: GO 2954
2932: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 6
2942: PPUSH
2943: LD_VAR 0 7
2947: PPUSH
2948: CALL_OW 153
2952: GO 2985
2954: LD_INT 3
2956: DOUBLE
2957: EQUAL
2958: IFTRUE 2962
2960: GO 2984
2962: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2963: LD_VAR 0 1
2967: PPUSH
2968: LD_VAR 0 6
2972: PPUSH
2973: LD_VAR 0 7
2977: PPUSH
2978: CALL_OW 154
2982: GO 2985
2984: POP
// end ;
2985: LD_VAR 0 2
2989: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2990: LD_INT 0
2992: PPUSH
2993: PPUSH
2994: PPUSH
2995: PPUSH
2996: PPUSH
2997: PPUSH
// if not unit or not building then
2998: LD_VAR 0 1
3002: NOT
3003: PUSH
3004: LD_VAR 0 2
3008: NOT
3009: OR
3010: IFFALSE 3014
// exit ;
3012: GO 3172
// x := GetX ( building ) ;
3014: LD_ADDR_VAR 0 5
3018: PUSH
3019: LD_VAR 0 2
3023: PPUSH
3024: CALL_OW 250
3028: ST_TO_ADDR
// y := GetY ( building ) ;
3029: LD_ADDR_VAR 0 6
3033: PUSH
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 251
3043: ST_TO_ADDR
// for i = 0 to 5 do
3044: LD_ADDR_VAR 0 4
3048: PUSH
3049: DOUBLE
3050: LD_INT 0
3052: DEC
3053: ST_TO_ADDR
3054: LD_INT 5
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3170
// begin _x := ShiftX ( x , i , 3 ) ;
3060: LD_ADDR_VAR 0 7
3064: PUSH
3065: LD_VAR 0 5
3069: PPUSH
3070: LD_VAR 0 4
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: CALL_OW 272
3082: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3083: LD_ADDR_VAR 0 8
3087: PUSH
3088: LD_VAR 0 6
3092: PPUSH
3093: LD_VAR 0 4
3097: PPUSH
3098: LD_INT 3
3100: PPUSH
3101: CALL_OW 273
3105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3106: LD_VAR 0 7
3110: PPUSH
3111: LD_VAR 0 8
3115: PPUSH
3116: CALL_OW 488
3120: NOT
3121: IFFALSE 3125
// continue ;
3123: GO 3057
// if HexInfo ( _x , _y ) = 0 then
3125: LD_VAR 0 7
3129: PPUSH
3130: LD_VAR 0 8
3134: PPUSH
3135: CALL_OW 428
3139: PUSH
3140: LD_INT 0
3142: EQUAL
3143: IFFALSE 3168
// begin ComMoveXY ( unit , _x , _y ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 7
3154: PPUSH
3155: LD_VAR 0 8
3159: PPUSH
3160: CALL_OW 111
// exit ;
3164: POP
3165: POP
3166: GO 3172
// end ; end ;
3168: GO 3057
3170: POP
3171: POP
// end ;
3172: LD_VAR 0 3
3176: RET
// export function ScanBase ( side , base_area ) ; begin
3177: LD_INT 0
3179: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: LD_VAR 0 2
3189: PPUSH
3190: LD_INT 81
3192: PUSH
3193: LD_VAR 0 1
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 70
3206: ST_TO_ADDR
// end ;
3207: LD_VAR 0 3
3211: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3212: LD_INT 0
3214: PPUSH
3215: PPUSH
3216: PPUSH
3217: PPUSH
// result := false ;
3218: LD_ADDR_VAR 0 2
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// side := GetSide ( unit ) ;
3226: LD_ADDR_VAR 0 3
3230: PUSH
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 255
3240: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3241: LD_ADDR_VAR 0 4
3245: PUSH
3246: LD_VAR 0 1
3250: PPUSH
3251: CALL_OW 248
3255: ST_TO_ADDR
// case nat of 1 :
3256: LD_VAR 0 4
3260: PUSH
3261: LD_INT 1
3263: DOUBLE
3264: EQUAL
3265: IFTRUE 3269
3267: GO 3280
3269: POP
// tech := tech_lassight ; 2 :
3270: LD_ADDR_VAR 0 5
3274: PUSH
3275: LD_INT 12
3277: ST_TO_ADDR
3278: GO 3319
3280: LD_INT 2
3282: DOUBLE
3283: EQUAL
3284: IFTRUE 3288
3286: GO 3299
3288: POP
// tech := tech_mortar ; 3 :
3289: LD_ADDR_VAR 0 5
3293: PUSH
3294: LD_INT 41
3296: ST_TO_ADDR
3297: GO 3319
3299: LD_INT 3
3301: DOUBLE
3302: EQUAL
3303: IFTRUE 3307
3305: GO 3318
3307: POP
// tech := tech_bazooka ; end ;
3308: LD_ADDR_VAR 0 5
3312: PUSH
3313: LD_INT 44
3315: ST_TO_ADDR
3316: GO 3319
3318: POP
// if Researched ( side , tech ) then
3319: LD_VAR 0 3
3323: PPUSH
3324: LD_VAR 0 5
3328: PPUSH
3329: CALL_OW 325
3333: IFFALSE 3360
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3335: LD_ADDR_VAR 0 2
3339: PUSH
3340: LD_INT 5
3342: PUSH
3343: LD_INT 8
3345: PUSH
3346: LD_INT 9
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_VAR 0 4
3358: ARRAY
3359: ST_TO_ADDR
// end ;
3360: LD_VAR 0 2
3364: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3365: LD_INT 0
3367: PPUSH
3368: PPUSH
3369: PPUSH
// if not mines then
3370: LD_VAR 0 2
3374: NOT
3375: IFFALSE 3379
// exit ;
3377: GO 3523
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3379: LD_ADDR_VAR 0 5
3383: PUSH
3384: LD_INT 81
3386: PUSH
3387: LD_VAR 0 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: LD_INT 21
3401: PUSH
3402: LD_INT 3
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// for i in mines do
3422: LD_ADDR_VAR 0 4
3426: PUSH
3427: LD_VAR 0 2
3431: PUSH
3432: FOR_IN
3433: IFFALSE 3521
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3435: LD_VAR 0 4
3439: PUSH
3440: LD_INT 1
3442: ARRAY
3443: PPUSH
3444: LD_VAR 0 4
3448: PUSH
3449: LD_INT 2
3451: ARRAY
3452: PPUSH
3453: CALL_OW 458
3457: NOT
3458: IFFALSE 3462
// continue ;
3460: GO 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3462: LD_VAR 0 4
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 4
3475: PUSH
3476: LD_INT 2
3478: ARRAY
3479: PPUSH
3480: CALL_OW 428
3484: PUSH
3485: LD_VAR 0 5
3489: IN
3490: IFFALSE 3519
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3492: LD_VAR 0 4
3496: PUSH
3497: LD_INT 1
3499: ARRAY
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL_OW 456
// end ;
3519: GO 3432
3521: POP
3522: POP
// end ;
3523: LD_VAR 0 3
3527: RET
// export function Count ( array ) ; begin
3528: LD_INT 0
3530: PPUSH
// result := array + 0 ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_VAR 0 1
3540: PUSH
3541: LD_INT 0
3543: PLUS
3544: ST_TO_ADDR
// end ;
3545: LD_VAR 0 2
3549: RET
// export function IsEmpty ( building ) ; begin
3550: LD_INT 0
3552: PPUSH
// if not building then
3553: LD_VAR 0 1
3557: NOT
3558: IFFALSE 3562
// exit ;
3560: GO 3605
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3562: LD_ADDR_VAR 0 2
3566: PUSH
3567: LD_VAR 0 1
3571: PUSH
3572: LD_INT 22
3574: PUSH
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 255
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 58
3591: PUSH
3592: EMPTY
3593: LIST
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PPUSH
3599: CALL_OW 69
3603: IN
3604: ST_TO_ADDR
// end ;
3605: LD_VAR 0 2
3609: RET
// export function IsNotFull ( building ) ; var places ; begin
3610: LD_INT 0
3612: PPUSH
3613: PPUSH
// if not building then
3614: LD_VAR 0 1
3618: NOT
3619: IFFALSE 3623
// exit ;
3621: GO 3651
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3623: LD_ADDR_VAR 0 2
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: LD_INT 3
3635: PUSH
3636: LD_INT 62
3638: PUSH
3639: EMPTY
3640: LIST
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PPUSH
3646: CALL_OW 72
3650: ST_TO_ADDR
// end ;
3651: LD_VAR 0 2
3655: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3656: LD_INT 0
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
// tmp := [ ] ;
3662: LD_ADDR_VAR 0 3
3666: PUSH
3667: EMPTY
3668: ST_TO_ADDR
// list := [ ] ;
3669: LD_ADDR_VAR 0 5
3673: PUSH
3674: EMPTY
3675: ST_TO_ADDR
// for i = 16 to 25 do
3676: LD_ADDR_VAR 0 4
3680: PUSH
3681: DOUBLE
3682: LD_INT 16
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 25
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3763
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3692: LD_ADDR_VAR 0 3
3696: PUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL_OW 255
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: LD_INT 91
3721: PUSH
3722: LD_VAR 0 1
3726: PUSH
3727: LD_INT 6
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 30
3737: PUSH
3738: LD_VAR 0 4
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: EMPTY
3753: LIST
3754: PPUSH
3755: CALL_OW 69
3759: ADD
3760: ST_TO_ADDR
3761: GO 3689
3763: POP
3764: POP
// for i = 1 to tmp do
3765: LD_ADDR_VAR 0 4
3769: PUSH
3770: DOUBLE
3771: LD_INT 1
3773: DEC
3774: ST_TO_ADDR
3775: LD_VAR 0 3
3779: PUSH
3780: FOR_TO
3781: IFFALSE 3869
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3783: LD_ADDR_VAR 0 5
3787: PUSH
3788: LD_VAR 0 5
3792: PUSH
3793: LD_VAR 0 3
3797: PUSH
3798: LD_VAR 0 4
3802: ARRAY
3803: PPUSH
3804: CALL_OW 266
3808: PUSH
3809: LD_VAR 0 3
3813: PUSH
3814: LD_VAR 0 4
3818: ARRAY
3819: PPUSH
3820: CALL_OW 250
3824: PUSH
3825: LD_VAR 0 3
3829: PUSH
3830: LD_VAR 0 4
3834: ARRAY
3835: PPUSH
3836: CALL_OW 251
3840: PUSH
3841: LD_VAR 0 3
3845: PUSH
3846: LD_VAR 0 4
3850: ARRAY
3851: PPUSH
3852: CALL_OW 254
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: ADD
3866: ST_TO_ADDR
3867: GO 3780
3869: POP
3870: POP
// result := list ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_VAR 0 5
3880: ST_TO_ADDR
// end ;
3881: LD_VAR 0 2
3885: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3886: LD_INT 0
3888: PPUSH
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
3893: PPUSH
3894: PPUSH
// if not factory then
3895: LD_VAR 0 1
3899: NOT
3900: IFFALSE 3904
// exit ;
3902: GO 4497
// if control = control_apeman then
3904: LD_VAR 0 4
3908: PUSH
3909: LD_INT 5
3911: EQUAL
3912: IFFALSE 4021
// begin tmp := UnitsInside ( factory ) ;
3914: LD_ADDR_VAR 0 8
3918: PUSH
3919: LD_VAR 0 1
3923: PPUSH
3924: CALL_OW 313
3928: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3929: LD_VAR 0 8
3933: PPUSH
3934: LD_INT 25
3936: PUSH
3937: LD_INT 12
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 72
3948: NOT
3949: IFFALSE 3959
// control := control_manual ;
3951: LD_ADDR_VAR 0 4
3955: PUSH
3956: LD_INT 1
3958: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3959: LD_ADDR_VAR 0 8
3963: PUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL 3656 0 1
3973: ST_TO_ADDR
// if tmp then
3974: LD_VAR 0 8
3978: IFFALSE 4021
// begin for i in tmp do
3980: LD_ADDR_VAR 0 7
3984: PUSH
3985: LD_VAR 0 8
3989: PUSH
3990: FOR_IN
3991: IFFALSE 4019
// if i [ 1 ] = b_ext_radio then
3993: LD_VAR 0 7
3997: PUSH
3998: LD_INT 1
4000: ARRAY
4001: PUSH
4002: LD_INT 22
4004: EQUAL
4005: IFFALSE 4017
// begin control := control_remote ;
4007: LD_ADDR_VAR 0 4
4011: PUSH
4012: LD_INT 2
4014: ST_TO_ADDR
// break ;
4015: GO 4019
// end ;
4017: GO 3990
4019: POP
4020: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4021: LD_VAR 0 1
4025: PPUSH
4026: LD_VAR 0 2
4030: PPUSH
4031: LD_VAR 0 3
4035: PPUSH
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 5
4045: PPUSH
4046: CALL_OW 448
4050: IFFALSE 4085
// begin result := [ chassis , engine , control , weapon ] ;
4052: LD_ADDR_VAR 0 6
4056: PUSH
4057: LD_VAR 0 2
4061: PUSH
4062: LD_VAR 0 3
4066: PUSH
4067: LD_VAR 0 4
4071: PUSH
4072: LD_VAR 0 5
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: ST_TO_ADDR
// exit ;
4083: GO 4497
// end ; _chassis := AvailableChassisList ( factory ) ;
4085: LD_ADDR_VAR 0 9
4089: PUSH
4090: LD_VAR 0 1
4094: PPUSH
4095: CALL_OW 475
4099: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4100: LD_ADDR_VAR 0 11
4104: PUSH
4105: LD_VAR 0 1
4109: PPUSH
4110: CALL_OW 476
4114: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4115: LD_ADDR_VAR 0 12
4119: PUSH
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 477
4129: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4130: LD_ADDR_VAR 0 10
4134: PUSH
4135: LD_VAR 0 1
4139: PPUSH
4140: CALL_OW 478
4144: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4145: LD_VAR 0 9
4149: NOT
4150: PUSH
4151: LD_VAR 0 11
4155: NOT
4156: OR
4157: PUSH
4158: LD_VAR 0 12
4162: NOT
4163: OR
4164: PUSH
4165: LD_VAR 0 10
4169: NOT
4170: OR
4171: IFFALSE 4206
// begin result := [ chassis , engine , control , weapon ] ;
4173: LD_ADDR_VAR 0 6
4177: PUSH
4178: LD_VAR 0 2
4182: PUSH
4183: LD_VAR 0 3
4187: PUSH
4188: LD_VAR 0 4
4192: PUSH
4193: LD_VAR 0 5
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: ST_TO_ADDR
// exit ;
4204: GO 4497
// end ; if not chassis in _chassis then
4206: LD_VAR 0 2
4210: PUSH
4211: LD_VAR 0 9
4215: IN
4216: NOT
4217: IFFALSE 4243
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4219: LD_ADDR_VAR 0 2
4223: PUSH
4224: LD_VAR 0 9
4228: PUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_VAR 0 9
4236: PPUSH
4237: CALL_OW 12
4241: ARRAY
4242: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4243: LD_VAR 0 2
4247: PPUSH
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL 4502 0 2
4257: NOT
4258: IFFALSE 4317
// repeat engine := _engine [ 1 ] ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: LD_VAR 0 11
4269: PUSH
4270: LD_INT 1
4272: ARRAY
4273: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4274: LD_ADDR_VAR 0 11
4278: PUSH
4279: LD_VAR 0 11
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL_OW 3
4291: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4292: LD_VAR 0 2
4296: PPUSH
4297: LD_VAR 0 3
4301: PPUSH
4302: CALL 4502 0 2
4306: PUSH
4307: LD_VAR 0 11
4311: PUSH
4312: EMPTY
4313: EQUAL
4314: OR
4315: IFFALSE 4260
// if not control in _control then
4317: LD_VAR 0 4
4321: PUSH
4322: LD_VAR 0 12
4326: IN
4327: NOT
4328: IFFALSE 4354
// control := _control [ rand ( 1 , _control ) ] ;
4330: LD_ADDR_VAR 0 4
4334: PUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PPUSH
4343: LD_VAR 0 12
4347: PPUSH
4348: CALL_OW 12
4352: ARRAY
4353: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4354: LD_VAR 0 2
4358: PPUSH
4359: LD_VAR 0 5
4363: PPUSH
4364: CALL 4722 0 2
4368: NOT
4369: IFFALSE 4428
// repeat weapon := _weapon [ 1 ] ;
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: LD_VAR 0 10
4380: PUSH
4381: LD_INT 1
4383: ARRAY
4384: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4385: LD_ADDR_VAR 0 10
4389: PUSH
4390: LD_VAR 0 10
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: CALL_OW 3
4402: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4403: LD_VAR 0 2
4407: PPUSH
4408: LD_VAR 0 5
4412: PPUSH
4413: CALL 4722 0 2
4417: PUSH
4418: LD_VAR 0 10
4422: PUSH
4423: EMPTY
4424: EQUAL
4425: OR
4426: IFFALSE 4371
// result := [ ] ;
4428: LD_ADDR_VAR 0 6
4432: PUSH
4433: EMPTY
4434: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_VAR 0 3
4449: PPUSH
4450: LD_VAR 0 4
4454: PPUSH
4455: LD_VAR 0 5
4459: PPUSH
4460: CALL_OW 448
4464: IFFALSE 4497
// result := [ chassis , engine , control , weapon ] ;
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 2
4475: PUSH
4476: LD_VAR 0 3
4480: PUSH
4481: LD_VAR 0 4
4485: PUSH
4486: LD_VAR 0 5
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// end ;
4497: LD_VAR 0 6
4501: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4502: LD_INT 0
4504: PPUSH
// if not chassis or not engine then
4505: LD_VAR 0 1
4509: NOT
4510: PUSH
4511: LD_VAR 0 2
4515: NOT
4516: OR
4517: IFFALSE 4521
// exit ;
4519: GO 4717
// case engine of engine_solar :
4521: LD_VAR 0 2
4525: PUSH
4526: LD_INT 2
4528: DOUBLE
4529: EQUAL
4530: IFTRUE 4534
4532: GO 4572
4534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 11
4542: PUSH
4543: LD_INT 12
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: LD_INT 1
4554: PUSH
4555: LD_INT 2
4557: PUSH
4558: LD_INT 3
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: ST_TO_ADDR
4570: GO 4701
4572: LD_INT 1
4574: DOUBLE
4575: EQUAL
4576: IFTRUE 4580
4578: GO 4642
4580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: LD_INT 11
4588: PUSH
4589: LD_INT 12
4591: PUSH
4592: LD_INT 13
4594: PUSH
4595: LD_INT 14
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: LD_INT 2
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: LD_INT 21
4615: PUSH
4616: LD_INT 23
4618: PUSH
4619: LD_INT 22
4621: PUSH
4622: LD_INT 24
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
4640: GO 4701
4642: LD_INT 3
4644: DOUBLE
4645: EQUAL
4646: IFTRUE 4650
4648: GO 4700
4650: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 13
4658: PUSH
4659: LD_INT 14
4661: PUSH
4662: LD_INT 2
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: LD_INT 4
4670: PUSH
4671: LD_INT 5
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 23
4682: PUSH
4683: LD_INT 24
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: ST_TO_ADDR
4698: GO 4701
4700: POP
// result := ( chassis in result ) ;
4701: LD_ADDR_VAR 0 3
4705: PUSH
4706: LD_VAR 0 1
4710: PUSH
4711: LD_VAR 0 3
4715: IN
4716: ST_TO_ADDR
// end ;
4717: LD_VAR 0 3
4721: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4722: LD_INT 0
4724: PPUSH
// if not chassis or not weapon then
4725: LD_VAR 0 1
4729: NOT
4730: PUSH
4731: LD_VAR 0 2
4735: NOT
4736: OR
4737: IFFALSE 4741
// exit ;
4739: GO 5801
// case weapon of us_machine_gun :
4741: LD_VAR 0 2
4745: PUSH
4746: LD_INT 2
4748: DOUBLE
4749: EQUAL
4750: IFTRUE 4754
4752: GO 4784
4754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4755: LD_ADDR_VAR 0 3
4759: PUSH
4760: LD_INT 1
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 4
4771: PUSH
4772: LD_INT 5
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: ST_TO_ADDR
4782: GO 5785
4784: LD_INT 3
4786: DOUBLE
4787: EQUAL
4788: IFTRUE 4792
4790: GO 4822
4792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: LD_INT 1
4800: PUSH
4801: LD_INT 2
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: LD_INT 4
4809: PUSH
4810: LD_INT 5
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: ST_TO_ADDR
4820: GO 5785
4822: LD_INT 11
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4830
4828: GO 4860
4830: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: LD_INT 1
4838: PUSH
4839: LD_INT 2
4841: PUSH
4842: LD_INT 3
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: LD_INT 5
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: ST_TO_ADDR
4858: GO 5785
4860: LD_INT 4
4862: DOUBLE
4863: EQUAL
4864: IFTRUE 4868
4866: GO 4894
4868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4869: LD_ADDR_VAR 0 3
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: LD_INT 3
4879: PUSH
4880: LD_INT 4
4882: PUSH
4883: LD_INT 5
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: ST_TO_ADDR
4892: GO 5785
4894: LD_INT 5
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4928
4902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: LD_INT 2
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: LD_INT 4
4916: PUSH
4917: LD_INT 5
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: ST_TO_ADDR
4926: GO 5785
4928: LD_INT 9
4930: DOUBLE
4931: EQUAL
4932: IFTRUE 4936
4934: GO 4962
4936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: LD_INT 2
4944: PUSH
4945: LD_INT 3
4947: PUSH
4948: LD_INT 4
4950: PUSH
4951: LD_INT 5
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: ST_TO_ADDR
4960: GO 5785
4962: LD_INT 7
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4970
4968: GO 4996
4970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 2
4978: PUSH
4979: LD_INT 3
4981: PUSH
4982: LD_INT 4
4984: PUSH
4985: LD_INT 5
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: ST_TO_ADDR
4994: GO 5785
4996: LD_INT 12
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5004
5002: GO 5030
5004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5005: LD_ADDR_VAR 0 3
5009: PUSH
5010: LD_INT 2
5012: PUSH
5013: LD_INT 3
5015: PUSH
5016: LD_INT 4
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: ST_TO_ADDR
5028: GO 5785
5030: LD_INT 13
5032: DOUBLE
5033: EQUAL
5034: IFTRUE 5038
5036: GO 5064
5038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 3
5049: PUSH
5050: LD_INT 4
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: ST_TO_ADDR
5062: GO 5785
5064: LD_INT 14
5066: DOUBLE
5067: EQUAL
5068: IFTRUE 5072
5070: GO 5090
5072: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5073: LD_ADDR_VAR 0 3
5077: PUSH
5078: LD_INT 4
5080: PUSH
5081: LD_INT 5
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: ST_TO_ADDR
5088: GO 5785
5090: LD_INT 6
5092: DOUBLE
5093: EQUAL
5094: IFTRUE 5098
5096: GO 5116
5098: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5099: LD_ADDR_VAR 0 3
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 5
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: ST_TO_ADDR
5114: GO 5785
5116: LD_INT 10
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5124
5122: GO 5142
5124: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5125: LD_ADDR_VAR 0 3
5129: PUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: ST_TO_ADDR
5140: GO 5785
5142: LD_INT 22
5144: DOUBLE
5145: EQUAL
5146: IFTRUE 5150
5148: GO 5176
5150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5151: LD_ADDR_VAR 0 3
5155: PUSH
5156: LD_INT 11
5158: PUSH
5159: LD_INT 12
5161: PUSH
5162: LD_INT 13
5164: PUSH
5165: LD_INT 14
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: ST_TO_ADDR
5174: GO 5785
5176: LD_INT 23
5178: DOUBLE
5179: EQUAL
5180: IFTRUE 5184
5182: GO 5210
5184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5185: LD_ADDR_VAR 0 3
5189: PUSH
5190: LD_INT 11
5192: PUSH
5193: LD_INT 12
5195: PUSH
5196: LD_INT 13
5198: PUSH
5199: LD_INT 14
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: ST_TO_ADDR
5208: GO 5785
5210: LD_INT 24
5212: DOUBLE
5213: EQUAL
5214: IFTRUE 5218
5216: GO 5244
5218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5219: LD_ADDR_VAR 0 3
5223: PUSH
5224: LD_INT 11
5226: PUSH
5227: LD_INT 12
5229: PUSH
5230: LD_INT 13
5232: PUSH
5233: LD_INT 14
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: ST_TO_ADDR
5242: GO 5785
5244: LD_INT 30
5246: DOUBLE
5247: EQUAL
5248: IFTRUE 5252
5250: GO 5278
5252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5253: LD_ADDR_VAR 0 3
5257: PUSH
5258: LD_INT 11
5260: PUSH
5261: LD_INT 12
5263: PUSH
5264: LD_INT 13
5266: PUSH
5267: LD_INT 14
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: ST_TO_ADDR
5276: GO 5785
5278: LD_INT 25
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5304
5286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5287: LD_ADDR_VAR 0 3
5291: PUSH
5292: LD_INT 13
5294: PUSH
5295: LD_INT 14
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
5302: GO 5785
5304: LD_INT 27
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5330
5312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_INT 13
5320: PUSH
5321: LD_INT 14
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: ST_TO_ADDR
5328: GO 5785
5330: LD_INT 92
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5364
5338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_INT 11
5346: PUSH
5347: LD_INT 12
5349: PUSH
5350: LD_INT 13
5352: PUSH
5353: LD_INT 14
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: ST_TO_ADDR
5362: GO 5785
5364: LD_INT 28
5366: DOUBLE
5367: EQUAL
5368: IFTRUE 5372
5370: GO 5390
5372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5373: LD_ADDR_VAR 0 3
5377: PUSH
5378: LD_INT 13
5380: PUSH
5381: LD_INT 14
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: ST_TO_ADDR
5388: GO 5785
5390: LD_INT 29
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5416
5398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5399: LD_ADDR_VAR 0 3
5403: PUSH
5404: LD_INT 13
5406: PUSH
5407: LD_INT 14
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: ST_TO_ADDR
5414: GO 5785
5416: LD_INT 31
5418: DOUBLE
5419: EQUAL
5420: IFTRUE 5424
5422: GO 5442
5424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5425: LD_ADDR_VAR 0 3
5429: PUSH
5430: LD_INT 13
5432: PUSH
5433: LD_INT 14
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: ST_TO_ADDR
5440: GO 5785
5442: LD_INT 26
5444: DOUBLE
5445: EQUAL
5446: IFTRUE 5450
5448: GO 5468
5450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5451: LD_ADDR_VAR 0 3
5455: PUSH
5456: LD_INT 13
5458: PUSH
5459: LD_INT 14
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: ST_TO_ADDR
5466: GO 5785
5468: LD_INT 42
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 5502
5476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5477: LD_ADDR_VAR 0 3
5481: PUSH
5482: LD_INT 21
5484: PUSH
5485: LD_INT 22
5487: PUSH
5488: LD_INT 23
5490: PUSH
5491: LD_INT 24
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: ST_TO_ADDR
5500: GO 5785
5502: LD_INT 43
5504: DOUBLE
5505: EQUAL
5506: IFTRUE 5510
5508: GO 5536
5510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_INT 21
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 23
5524: PUSH
5525: LD_INT 24
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 5785
5536: LD_INT 44
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5570
5544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: LD_INT 21
5552: PUSH
5553: LD_INT 22
5555: PUSH
5556: LD_INT 23
5558: PUSH
5559: LD_INT 24
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: ST_TO_ADDR
5568: GO 5785
5570: LD_INT 45
5572: DOUBLE
5573: EQUAL
5574: IFTRUE 5578
5576: GO 5604
5578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5579: LD_ADDR_VAR 0 3
5583: PUSH
5584: LD_INT 21
5586: PUSH
5587: LD_INT 22
5589: PUSH
5590: LD_INT 23
5592: PUSH
5593: LD_INT 24
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: ST_TO_ADDR
5602: GO 5785
5604: LD_INT 49
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5612
5610: GO 5638
5612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5613: LD_ADDR_VAR 0 3
5617: PUSH
5618: LD_INT 21
5620: PUSH
5621: LD_INT 22
5623: PUSH
5624: LD_INT 23
5626: PUSH
5627: LD_INT 24
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: ST_TO_ADDR
5636: GO 5785
5638: LD_INT 51
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5646
5644: GO 5672
5646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_INT 21
5654: PUSH
5655: LD_INT 22
5657: PUSH
5658: LD_INT 23
5660: PUSH
5661: LD_INT 24
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: ST_TO_ADDR
5670: GO 5785
5672: LD_INT 52
5674: DOUBLE
5675: EQUAL
5676: IFTRUE 5680
5678: GO 5706
5680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5681: LD_ADDR_VAR 0 3
5685: PUSH
5686: LD_INT 21
5688: PUSH
5689: LD_INT 22
5691: PUSH
5692: LD_INT 23
5694: PUSH
5695: LD_INT 24
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: ST_TO_ADDR
5704: GO 5785
5706: LD_INT 53
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5732
5714: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5715: LD_ADDR_VAR 0 3
5719: PUSH
5720: LD_INT 23
5722: PUSH
5723: LD_INT 24
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: ST_TO_ADDR
5730: GO 5785
5732: LD_INT 46
5734: DOUBLE
5735: EQUAL
5736: IFTRUE 5740
5738: GO 5758
5740: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5741: LD_ADDR_VAR 0 3
5745: PUSH
5746: LD_INT 23
5748: PUSH
5749: LD_INT 24
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: ST_TO_ADDR
5756: GO 5785
5758: LD_INT 47
5760: DOUBLE
5761: EQUAL
5762: IFTRUE 5766
5764: GO 5784
5766: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5767: LD_ADDR_VAR 0 3
5771: PUSH
5772: LD_INT 23
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: ST_TO_ADDR
5782: GO 5785
5784: POP
// result := ( chassis in result ) ;
5785: LD_ADDR_VAR 0 3
5789: PUSH
5790: LD_VAR 0 1
5794: PUSH
5795: LD_VAR 0 3
5799: IN
5800: ST_TO_ADDR
// end ;
5801: LD_VAR 0 3
5805: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5806: LD_INT 0
5808: PPUSH
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
// result := array ;
5815: LD_ADDR_VAR 0 5
5819: PUSH
5820: LD_VAR 0 1
5824: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5825: LD_VAR 0 1
5829: NOT
5830: PUSH
5831: LD_VAR 0 2
5835: NOT
5836: OR
5837: PUSH
5838: LD_VAR 0 3
5842: NOT
5843: OR
5844: PUSH
5845: LD_VAR 0 2
5849: PUSH
5850: LD_VAR 0 1
5854: GREATER
5855: OR
5856: PUSH
5857: LD_VAR 0 3
5861: PUSH
5862: LD_VAR 0 1
5866: GREATER
5867: OR
5868: IFFALSE 5872
// exit ;
5870: GO 6168
// if direction then
5872: LD_VAR 0 4
5876: IFFALSE 5940
// begin d := 1 ;
5878: LD_ADDR_VAR 0 9
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// if i_from > i_to then
5886: LD_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: GREATER
5896: IFFALSE 5922
// length := ( array - i_from ) + i_to else
5898: LD_ADDR_VAR 0 11
5902: PUSH
5903: LD_VAR 0 1
5907: PUSH
5908: LD_VAR 0 2
5912: MINUS
5913: PUSH
5914: LD_VAR 0 3
5918: PLUS
5919: ST_TO_ADDR
5920: GO 5938
// length := i_to - i_from ;
5922: LD_ADDR_VAR 0 11
5926: PUSH
5927: LD_VAR 0 3
5931: PUSH
5932: LD_VAR 0 2
5936: MINUS
5937: ST_TO_ADDR
// end else
5938: GO 6001
// begin d := - 1 ;
5940: LD_ADDR_VAR 0 9
5944: PUSH
5945: LD_INT 1
5947: NEG
5948: ST_TO_ADDR
// if i_from > i_to then
5949: LD_VAR 0 2
5953: PUSH
5954: LD_VAR 0 3
5958: GREATER
5959: IFFALSE 5979
// length := i_from - i_to else
5961: LD_ADDR_VAR 0 11
5965: PUSH
5966: LD_VAR 0 2
5970: PUSH
5971: LD_VAR 0 3
5975: MINUS
5976: ST_TO_ADDR
5977: GO 6001
// length := ( array - i_to ) + i_from ;
5979: LD_ADDR_VAR 0 11
5983: PUSH
5984: LD_VAR 0 1
5988: PUSH
5989: LD_VAR 0 3
5993: MINUS
5994: PUSH
5995: LD_VAR 0 2
5999: PLUS
6000: ST_TO_ADDR
// end ; if not length then
6001: LD_VAR 0 11
6005: NOT
6006: IFFALSE 6010
// exit ;
6008: GO 6168
// tmp := array ;
6010: LD_ADDR_VAR 0 10
6014: PUSH
6015: LD_VAR 0 1
6019: ST_TO_ADDR
// for i = 1 to length do
6020: LD_ADDR_VAR 0 6
6024: PUSH
6025: DOUBLE
6026: LD_INT 1
6028: DEC
6029: ST_TO_ADDR
6030: LD_VAR 0 11
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6156
// begin for j = 1 to array do
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: DOUBLE
6044: LD_INT 1
6046: DEC
6047: ST_TO_ADDR
6048: LD_VAR 0 1
6052: PUSH
6053: FOR_TO
6054: IFFALSE 6142
// begin k := j + d ;
6056: LD_ADDR_VAR 0 8
6060: PUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_VAR 0 9
6070: PLUS
6071: ST_TO_ADDR
// if k > array then
6072: LD_VAR 0 8
6076: PUSH
6077: LD_VAR 0 1
6081: GREATER
6082: IFFALSE 6092
// k := 1 ;
6084: LD_ADDR_VAR 0 8
6088: PUSH
6089: LD_INT 1
6091: ST_TO_ADDR
// if not k then
6092: LD_VAR 0 8
6096: NOT
6097: IFFALSE 6109
// k := array ;
6099: LD_ADDR_VAR 0 8
6103: PUSH
6104: LD_VAR 0 1
6108: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6109: LD_ADDR_VAR 0 10
6113: PUSH
6114: LD_VAR 0 10
6118: PPUSH
6119: LD_VAR 0 8
6123: PPUSH
6124: LD_VAR 0 1
6128: PUSH
6129: LD_VAR 0 7
6133: ARRAY
6134: PPUSH
6135: CALL_OW 1
6139: ST_TO_ADDR
// end ;
6140: GO 6053
6142: POP
6143: POP
// array := tmp ;
6144: LD_ADDR_VAR 0 1
6148: PUSH
6149: LD_VAR 0 10
6153: ST_TO_ADDR
// end ;
6154: GO 6035
6156: POP
6157: POP
// result := array ;
6158: LD_ADDR_VAR 0 5
6162: PUSH
6163: LD_VAR 0 1
6167: ST_TO_ADDR
// end ;
6168: LD_VAR 0 5
6172: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6173: LD_INT 0
6175: PPUSH
6176: PPUSH
// result := 0 ;
6177: LD_ADDR_VAR 0 3
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// if not array or not value in array then
6185: LD_VAR 0 1
6189: NOT
6190: PUSH
6191: LD_VAR 0 2
6195: PUSH
6196: LD_VAR 0 1
6200: IN
6201: NOT
6202: OR
6203: IFFALSE 6207
// exit ;
6205: GO 6261
// for i = 1 to array do
6207: LD_ADDR_VAR 0 4
6211: PUSH
6212: DOUBLE
6213: LD_INT 1
6215: DEC
6216: ST_TO_ADDR
6217: LD_VAR 0 1
6221: PUSH
6222: FOR_TO
6223: IFFALSE 6259
// if value = array [ i ] then
6225: LD_VAR 0 2
6229: PUSH
6230: LD_VAR 0 1
6234: PUSH
6235: LD_VAR 0 4
6239: ARRAY
6240: EQUAL
6241: IFFALSE 6257
// begin result := i ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: LD_VAR 0 4
6252: ST_TO_ADDR
// exit ;
6253: POP
6254: POP
6255: GO 6261
// end ;
6257: GO 6222
6259: POP
6260: POP
// end ;
6261: LD_VAR 0 3
6265: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6266: LD_INT 0
6268: PPUSH
// vc_chassis := chassis ;
6269: LD_ADDR_OWVAR 37
6273: PUSH
6274: LD_VAR 0 1
6278: ST_TO_ADDR
// vc_engine := engine ;
6279: LD_ADDR_OWVAR 39
6283: PUSH
6284: LD_VAR 0 2
6288: ST_TO_ADDR
// vc_control := control ;
6289: LD_ADDR_OWVAR 38
6293: PUSH
6294: LD_VAR 0 3
6298: ST_TO_ADDR
// vc_weapon := weapon ;
6299: LD_ADDR_OWVAR 40
6303: PUSH
6304: LD_VAR 0 4
6308: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6309: LD_ADDR_OWVAR 41
6313: PUSH
6314: LD_VAR 0 5
6318: ST_TO_ADDR
// end ;
6319: LD_VAR 0 6
6323: RET
// export function WantPlant ( unit ) ; var task ; begin
6324: LD_INT 0
6326: PPUSH
6327: PPUSH
// result := false ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: LD_INT 0
6335: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: LD_VAR 0 1
6345: PPUSH
6346: CALL_OW 437
6350: ST_TO_ADDR
// if task then
6351: LD_VAR 0 3
6355: IFFALSE 6383
// if task [ 1 ] [ 1 ] = p then
6357: LD_VAR 0 3
6361: PUSH
6362: LD_INT 1
6364: ARRAY
6365: PUSH
6366: LD_INT 1
6368: ARRAY
6369: PUSH
6370: LD_STRING p
6372: EQUAL
6373: IFFALSE 6383
// result := true ;
6375: LD_ADDR_VAR 0 2
6379: PUSH
6380: LD_INT 1
6382: ST_TO_ADDR
// end ;
6383: LD_VAR 0 2
6387: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
// if pos < 1 then
6394: LD_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: LESS
6402: IFFALSE 6406
// exit ;
6404: GO 6709
// if pos = 1 then
6406: LD_VAR 0 2
6410: PUSH
6411: LD_INT 1
6413: EQUAL
6414: IFFALSE 6447
// result := Replace ( arr , pos [ 1 ] , value ) else
6416: LD_ADDR_VAR 0 4
6420: PUSH
6421: LD_VAR 0 1
6425: PPUSH
6426: LD_VAR 0 2
6430: PUSH
6431: LD_INT 1
6433: ARRAY
6434: PPUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 1
6444: ST_TO_ADDR
6445: GO 6709
// begin tmp := arr ;
6447: LD_ADDR_VAR 0 6
6451: PUSH
6452: LD_VAR 0 1
6456: ST_TO_ADDR
// s_arr := [ tmp ] ;
6457: LD_ADDR_VAR 0 7
6461: PUSH
6462: LD_VAR 0 6
6466: PUSH
6467: EMPTY
6468: LIST
6469: ST_TO_ADDR
// for i = 1 to pos - 1 do
6470: LD_ADDR_VAR 0 5
6474: PUSH
6475: DOUBLE
6476: LD_INT 1
6478: DEC
6479: ST_TO_ADDR
6480: LD_VAR 0 2
6484: PUSH
6485: LD_INT 1
6487: MINUS
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6535
// begin tmp := tmp [ pos [ i ] ] ;
6492: LD_ADDR_VAR 0 6
6496: PUSH
6497: LD_VAR 0 6
6501: PUSH
6502: LD_VAR 0 2
6506: PUSH
6507: LD_VAR 0 5
6511: ARRAY
6512: ARRAY
6513: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6514: LD_ADDR_VAR 0 7
6518: PUSH
6519: LD_VAR 0 7
6523: PUSH
6524: LD_VAR 0 6
6528: PUSH
6529: EMPTY
6530: LIST
6531: ADD
6532: ST_TO_ADDR
// end ;
6533: GO 6489
6535: POP
6536: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6537: LD_ADDR_VAR 0 6
6541: PUSH
6542: LD_VAR 0 6
6546: PPUSH
6547: LD_VAR 0 2
6551: PUSH
6552: LD_VAR 0 2
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 3
6562: PPUSH
6563: CALL_OW 1
6567: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6568: LD_ADDR_VAR 0 7
6572: PUSH
6573: LD_VAR 0 7
6577: PPUSH
6578: LD_VAR 0 7
6582: PPUSH
6583: LD_VAR 0 6
6587: PPUSH
6588: CALL_OW 1
6592: ST_TO_ADDR
// for i = s_arr downto 2 do
6593: LD_ADDR_VAR 0 5
6597: PUSH
6598: DOUBLE
6599: LD_VAR 0 7
6603: INC
6604: ST_TO_ADDR
6605: LD_INT 2
6607: PUSH
6608: FOR_DOWNTO
6609: IFFALSE 6693
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6611: LD_ADDR_VAR 0 6
6615: PUSH
6616: LD_VAR 0 7
6620: PUSH
6621: LD_VAR 0 5
6625: PUSH
6626: LD_INT 1
6628: MINUS
6629: ARRAY
6630: PPUSH
6631: LD_VAR 0 2
6635: PUSH
6636: LD_VAR 0 5
6640: PUSH
6641: LD_INT 1
6643: MINUS
6644: ARRAY
6645: PPUSH
6646: LD_VAR 0 7
6650: PUSH
6651: LD_VAR 0 5
6655: ARRAY
6656: PPUSH
6657: CALL_OW 1
6661: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6662: LD_ADDR_VAR 0 7
6666: PUSH
6667: LD_VAR 0 7
6671: PPUSH
6672: LD_VAR 0 5
6676: PUSH
6677: LD_INT 1
6679: MINUS
6680: PPUSH
6681: LD_VAR 0 6
6685: PPUSH
6686: CALL_OW 1
6690: ST_TO_ADDR
// end ;
6691: GO 6608
6693: POP
6694: POP
// result := s_arr [ 1 ] ;
6695: LD_ADDR_VAR 0 4
6699: PUSH
6700: LD_VAR 0 7
6704: PUSH
6705: LD_INT 1
6707: ARRAY
6708: ST_TO_ADDR
// end ; end ;
6709: LD_VAR 0 4
6713: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6714: LD_INT 0
6716: PPUSH
6717: PPUSH
// if not list then
6718: LD_VAR 0 1
6722: NOT
6723: IFFALSE 6727
// exit ;
6725: GO 6818
// i := list [ pos1 ] ;
6727: LD_ADDR_VAR 0 5
6731: PUSH
6732: LD_VAR 0 1
6736: PUSH
6737: LD_VAR 0 2
6741: ARRAY
6742: ST_TO_ADDR
// if not i then
6743: LD_VAR 0 5
6747: NOT
6748: IFFALSE 6752
// exit ;
6750: GO 6818
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6752: LD_ADDR_VAR 0 1
6756: PUSH
6757: LD_VAR 0 1
6761: PPUSH
6762: LD_VAR 0 2
6766: PPUSH
6767: LD_VAR 0 1
6771: PUSH
6772: LD_VAR 0 3
6776: ARRAY
6777: PPUSH
6778: CALL_OW 1
6782: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6783: LD_ADDR_VAR 0 1
6787: PUSH
6788: LD_VAR 0 1
6792: PPUSH
6793: LD_VAR 0 3
6797: PPUSH
6798: LD_VAR 0 5
6802: PPUSH
6803: CALL_OW 1
6807: ST_TO_ADDR
// result := list ;
6808: LD_ADDR_VAR 0 4
6812: PUSH
6813: LD_VAR 0 1
6817: ST_TO_ADDR
// end ;
6818: LD_VAR 0 4
6822: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6823: LD_INT 0
6825: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6826: LD_ADDR_VAR 0 5
6830: PUSH
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 250
6840: PPUSH
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 251
6850: PPUSH
6851: LD_VAR 0 2
6855: PPUSH
6856: LD_VAR 0 3
6860: PPUSH
6861: LD_VAR 0 4
6865: PPUSH
6866: CALL 6876 0 5
6870: ST_TO_ADDR
// end ;
6871: LD_VAR 0 5
6875: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6876: LD_INT 0
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
// if not list then
6882: LD_VAR 0 3
6886: NOT
6887: IFFALSE 6891
// exit ;
6889: GO 7279
// result := [ ] ;
6891: LD_ADDR_VAR 0 6
6895: PUSH
6896: EMPTY
6897: ST_TO_ADDR
// for i in list do
6898: LD_ADDR_VAR 0 7
6902: PUSH
6903: LD_VAR 0 3
6907: PUSH
6908: FOR_IN
6909: IFFALSE 7111
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6911: LD_ADDR_VAR 0 9
6915: PUSH
6916: LD_VAR 0 7
6920: PPUSH
6921: LD_VAR 0 1
6925: PPUSH
6926: LD_VAR 0 2
6930: PPUSH
6931: CALL_OW 297
6935: ST_TO_ADDR
// if not result then
6936: LD_VAR 0 6
6940: NOT
6941: IFFALSE 6967
// result := [ [ i , tmp ] ] else
6943: LD_ADDR_VAR 0 6
6947: PUSH
6948: LD_VAR 0 7
6952: PUSH
6953: LD_VAR 0 9
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: ST_TO_ADDR
6965: GO 7109
// begin if result [ result ] [ 2 ] < tmp then
6967: LD_VAR 0 6
6971: PUSH
6972: LD_VAR 0 6
6976: ARRAY
6977: PUSH
6978: LD_INT 2
6980: ARRAY
6981: PUSH
6982: LD_VAR 0 9
6986: LESS
6987: IFFALSE 7029
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6989: LD_ADDR_VAR 0 6
6993: PUSH
6994: LD_VAR 0 6
6998: PPUSH
6999: LD_VAR 0 6
7003: PUSH
7004: LD_INT 1
7006: PLUS
7007: PPUSH
7008: LD_VAR 0 7
7012: PUSH
7013: LD_VAR 0 9
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 2
7026: ST_TO_ADDR
7027: GO 7109
// for j = 1 to result do
7029: LD_ADDR_VAR 0 8
7033: PUSH
7034: DOUBLE
7035: LD_INT 1
7037: DEC
7038: ST_TO_ADDR
7039: LD_VAR 0 6
7043: PUSH
7044: FOR_TO
7045: IFFALSE 7107
// begin if tmp < result [ j ] [ 2 ] then
7047: LD_VAR 0 9
7051: PUSH
7052: LD_VAR 0 6
7056: PUSH
7057: LD_VAR 0 8
7061: ARRAY
7062: PUSH
7063: LD_INT 2
7065: ARRAY
7066: LESS
7067: IFFALSE 7105
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7069: LD_ADDR_VAR 0 6
7073: PUSH
7074: LD_VAR 0 6
7078: PPUSH
7079: LD_VAR 0 8
7083: PPUSH
7084: LD_VAR 0 7
7088: PUSH
7089: LD_VAR 0 9
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 2
7102: ST_TO_ADDR
// break ;
7103: GO 7107
// end ; end ;
7105: GO 7044
7107: POP
7108: POP
// end ; end ;
7109: GO 6908
7111: POP
7112: POP
// if result and not asc then
7113: LD_VAR 0 6
7117: PUSH
7118: LD_VAR 0 4
7122: NOT
7123: AND
7124: IFFALSE 7199
// begin tmp := result ;
7126: LD_ADDR_VAR 0 9
7130: PUSH
7131: LD_VAR 0 6
7135: ST_TO_ADDR
// for i = tmp downto 1 do
7136: LD_ADDR_VAR 0 7
7140: PUSH
7141: DOUBLE
7142: LD_VAR 0 9
7146: INC
7147: ST_TO_ADDR
7148: LD_INT 1
7150: PUSH
7151: FOR_DOWNTO
7152: IFFALSE 7197
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7154: LD_ADDR_VAR 0 6
7158: PUSH
7159: LD_VAR 0 6
7163: PPUSH
7164: LD_VAR 0 9
7168: PUSH
7169: LD_VAR 0 7
7173: MINUS
7174: PUSH
7175: LD_INT 1
7177: PLUS
7178: PPUSH
7179: LD_VAR 0 9
7183: PUSH
7184: LD_VAR 0 7
7188: ARRAY
7189: PPUSH
7190: CALL_OW 1
7194: ST_TO_ADDR
7195: GO 7151
7197: POP
7198: POP
// end ; tmp := [ ] ;
7199: LD_ADDR_VAR 0 9
7203: PUSH
7204: EMPTY
7205: ST_TO_ADDR
// if mode then
7206: LD_VAR 0 5
7210: IFFALSE 7279
// begin for i = 1 to result do
7212: LD_ADDR_VAR 0 7
7216: PUSH
7217: DOUBLE
7218: LD_INT 1
7220: DEC
7221: ST_TO_ADDR
7222: LD_VAR 0 6
7226: PUSH
7227: FOR_TO
7228: IFFALSE 7267
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7230: LD_ADDR_VAR 0 9
7234: PUSH
7235: LD_VAR 0 9
7239: PPUSH
7240: LD_VAR 0 7
7244: PPUSH
7245: LD_VAR 0 6
7249: PUSH
7250: LD_VAR 0 7
7254: ARRAY
7255: PUSH
7256: LD_INT 1
7258: ARRAY
7259: PPUSH
7260: CALL_OW 1
7264: ST_TO_ADDR
7265: GO 7227
7267: POP
7268: POP
// result := tmp ;
7269: LD_ADDR_VAR 0 6
7273: PUSH
7274: LD_VAR 0 9
7278: ST_TO_ADDR
// end ; end ;
7279: LD_VAR 0 6
7283: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7284: LD_INT 0
7286: PPUSH
7287: PPUSH
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7292: LD_ADDR_VAR 0 5
7296: PUSH
7297: LD_INT 0
7299: PUSH
7300: LD_INT 0
7302: PUSH
7303: LD_INT 0
7305: PUSH
7306: EMPTY
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
// if not x or not y then
7314: LD_VAR 0 2
7318: NOT
7319: PUSH
7320: LD_VAR 0 3
7324: NOT
7325: OR
7326: IFFALSE 7330
// exit ;
7328: GO 8980
// if not range then
7330: LD_VAR 0 4
7334: NOT
7335: IFFALSE 7345
// range := 10 ;
7337: LD_ADDR_VAR 0 4
7341: PUSH
7342: LD_INT 10
7344: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7345: LD_ADDR_VAR 0 8
7349: PUSH
7350: LD_INT 81
7352: PUSH
7353: LD_VAR 0 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 92
7364: PUSH
7365: LD_VAR 0 2
7369: PUSH
7370: LD_VAR 0 3
7374: PUSH
7375: LD_VAR 0 4
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: LD_INT 21
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: PPUSH
7408: CALL_OW 69
7412: ST_TO_ADDR
// if not tmp then
7413: LD_VAR 0 8
7417: NOT
7418: IFFALSE 7422
// exit ;
7420: GO 8980
// for i in tmp do
7422: LD_ADDR_VAR 0 6
7426: PUSH
7427: LD_VAR 0 8
7431: PUSH
7432: FOR_IN
7433: IFFALSE 8955
// begin points := [ 0 , 0 , 0 ] ;
7435: LD_ADDR_VAR 0 9
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: ST_TO_ADDR
// bpoints := 1 ;
7454: LD_ADDR_VAR 0 10
7458: PUSH
7459: LD_INT 1
7461: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7462: LD_VAR 0 6
7466: PPUSH
7467: CALL_OW 247
7471: PUSH
7472: LD_INT 1
7474: DOUBLE
7475: EQUAL
7476: IFTRUE 7480
7478: GO 8058
7480: POP
// begin if GetClass ( i ) = 1 then
7481: LD_VAR 0 6
7485: PPUSH
7486: CALL_OW 257
7490: PUSH
7491: LD_INT 1
7493: EQUAL
7494: IFFALSE 7515
// points := [ 10 , 5 , 3 ] ;
7496: LD_ADDR_VAR 0 9
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 5
7506: PUSH
7507: LD_INT 3
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7515: LD_VAR 0 6
7519: PPUSH
7520: CALL_OW 257
7524: PUSH
7525: LD_INT 2
7527: PUSH
7528: LD_INT 3
7530: PUSH
7531: LD_INT 4
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: IN
7539: IFFALSE 7560
// points := [ 3 , 2 , 1 ] ;
7541: LD_ADDR_VAR 0 9
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7560: LD_VAR 0 6
7564: PPUSH
7565: CALL_OW 257
7569: PUSH
7570: LD_INT 5
7572: EQUAL
7573: IFFALSE 7594
// points := [ 130 , 5 , 2 ] ;
7575: LD_ADDR_VAR 0 9
7579: PUSH
7580: LD_INT 130
7582: PUSH
7583: LD_INT 5
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7594: LD_VAR 0 6
7598: PPUSH
7599: CALL_OW 257
7603: PUSH
7604: LD_INT 8
7606: EQUAL
7607: IFFALSE 7628
// points := [ 35 , 35 , 30 ] ;
7609: LD_ADDR_VAR 0 9
7613: PUSH
7614: LD_INT 35
7616: PUSH
7617: LD_INT 35
7619: PUSH
7620: LD_INT 30
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7628: LD_VAR 0 6
7632: PPUSH
7633: CALL_OW 257
7637: PUSH
7638: LD_INT 9
7640: EQUAL
7641: IFFALSE 7662
// points := [ 20 , 55 , 40 ] ;
7643: LD_ADDR_VAR 0 9
7647: PUSH
7648: LD_INT 20
7650: PUSH
7651: LD_INT 55
7653: PUSH
7654: LD_INT 40
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7662: LD_VAR 0 6
7666: PPUSH
7667: CALL_OW 257
7671: PUSH
7672: LD_INT 12
7674: PUSH
7675: LD_INT 16
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: IN
7682: IFFALSE 7703
// points := [ 5 , 3 , 2 ] ;
7684: LD_ADDR_VAR 0 9
7688: PUSH
7689: LD_INT 5
7691: PUSH
7692: LD_INT 3
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7703: LD_VAR 0 6
7707: PPUSH
7708: CALL_OW 257
7712: PUSH
7713: LD_INT 17
7715: EQUAL
7716: IFFALSE 7737
// points := [ 100 , 50 , 75 ] ;
7718: LD_ADDR_VAR 0 9
7722: PUSH
7723: LD_INT 100
7725: PUSH
7726: LD_INT 50
7728: PUSH
7729: LD_INT 75
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7737: LD_VAR 0 6
7741: PPUSH
7742: CALL_OW 257
7746: PUSH
7747: LD_INT 15
7749: EQUAL
7750: IFFALSE 7771
// points := [ 10 , 5 , 3 ] ;
7752: LD_ADDR_VAR 0 9
7756: PUSH
7757: LD_INT 10
7759: PUSH
7760: LD_INT 5
7762: PUSH
7763: LD_INT 3
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7771: LD_VAR 0 6
7775: PPUSH
7776: CALL_OW 257
7780: PUSH
7781: LD_INT 14
7783: EQUAL
7784: IFFALSE 7805
// points := [ 10 , 0 , 0 ] ;
7786: LD_ADDR_VAR 0 9
7790: PUSH
7791: LD_INT 10
7793: PUSH
7794: LD_INT 0
7796: PUSH
7797: LD_INT 0
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7805: LD_VAR 0 6
7809: PPUSH
7810: CALL_OW 257
7814: PUSH
7815: LD_INT 11
7817: EQUAL
7818: IFFALSE 7839
// points := [ 30 , 10 , 5 ] ;
7820: LD_ADDR_VAR 0 9
7824: PUSH
7825: LD_INT 30
7827: PUSH
7828: LD_INT 10
7830: PUSH
7831: LD_INT 5
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7839: LD_VAR 0 1
7843: PPUSH
7844: LD_INT 5
7846: PPUSH
7847: CALL_OW 321
7851: PUSH
7852: LD_INT 2
7854: EQUAL
7855: IFFALSE 7872
// bpoints := bpoints * 1.8 ;
7857: LD_ADDR_VAR 0 10
7861: PUSH
7862: LD_VAR 0 10
7866: PUSH
7867: LD_REAL  1.80000000000000E+0000
7870: MUL
7871: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7872: LD_VAR 0 6
7876: PPUSH
7877: CALL_OW 257
7881: PUSH
7882: LD_INT 1
7884: PUSH
7885: LD_INT 2
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 4
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: IN
7900: PUSH
7901: LD_VAR 0 1
7905: PPUSH
7906: LD_INT 51
7908: PPUSH
7909: CALL_OW 321
7913: PUSH
7914: LD_INT 2
7916: EQUAL
7917: AND
7918: IFFALSE 7935
// bpoints := bpoints * 1.2 ;
7920: LD_ADDR_VAR 0 10
7924: PUSH
7925: LD_VAR 0 10
7929: PUSH
7930: LD_REAL  1.20000000000000E+0000
7933: MUL
7934: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7935: LD_VAR 0 6
7939: PPUSH
7940: CALL_OW 257
7944: PUSH
7945: LD_INT 5
7947: PUSH
7948: LD_INT 7
7950: PUSH
7951: LD_INT 9
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: IN
7959: PUSH
7960: LD_VAR 0 1
7964: PPUSH
7965: LD_INT 52
7967: PPUSH
7968: CALL_OW 321
7972: PUSH
7973: LD_INT 2
7975: EQUAL
7976: AND
7977: IFFALSE 7994
// bpoints := bpoints * 1.5 ;
7979: LD_ADDR_VAR 0 10
7983: PUSH
7984: LD_VAR 0 10
7988: PUSH
7989: LD_REAL  1.50000000000000E+0000
7992: MUL
7993: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7994: LD_VAR 0 1
7998: PPUSH
7999: LD_INT 66
8001: PPUSH
8002: CALL_OW 321
8006: PUSH
8007: LD_INT 2
8009: EQUAL
8010: IFFALSE 8027
// bpoints := bpoints * 1.1 ;
8012: LD_ADDR_VAR 0 10
8016: PUSH
8017: LD_VAR 0 10
8021: PUSH
8022: LD_REAL  1.10000000000000E+0000
8025: MUL
8026: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8027: LD_ADDR_VAR 0 10
8031: PUSH
8032: LD_VAR 0 10
8036: PUSH
8037: LD_VAR 0 6
8041: PPUSH
8042: LD_INT 1
8044: PPUSH
8045: CALL_OW 259
8049: PUSH
8050: LD_REAL  1.15000000000000E+0000
8053: MUL
8054: MUL
8055: ST_TO_ADDR
// end ; unit_vehicle :
8056: GO 8884
8058: LD_INT 2
8060: DOUBLE
8061: EQUAL
8062: IFTRUE 8066
8064: GO 8872
8066: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8067: LD_VAR 0 6
8071: PPUSH
8072: CALL_OW 264
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 42
8082: PUSH
8083: LD_INT 24
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: IN
8091: IFFALSE 8112
// points := [ 25 , 5 , 3 ] ;
8093: LD_ADDR_VAR 0 9
8097: PUSH
8098: LD_INT 25
8100: PUSH
8101: LD_INT 5
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8112: LD_VAR 0 6
8116: PPUSH
8117: CALL_OW 264
8121: PUSH
8122: LD_INT 4
8124: PUSH
8125: LD_INT 43
8127: PUSH
8128: LD_INT 25
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: IN
8136: IFFALSE 8157
// points := [ 40 , 15 , 5 ] ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: LD_INT 40
8145: PUSH
8146: LD_INT 15
8148: PUSH
8149: LD_INT 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8157: LD_VAR 0 6
8161: PPUSH
8162: CALL_OW 264
8166: PUSH
8167: LD_INT 3
8169: PUSH
8170: LD_INT 23
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: IN
8177: IFFALSE 8198
// points := [ 7 , 25 , 8 ] ;
8179: LD_ADDR_VAR 0 9
8183: PUSH
8184: LD_INT 7
8186: PUSH
8187: LD_INT 25
8189: PUSH
8190: LD_INT 8
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8198: LD_VAR 0 6
8202: PPUSH
8203: CALL_OW 264
8207: PUSH
8208: LD_INT 5
8210: PUSH
8211: LD_INT 27
8213: PUSH
8214: LD_INT 44
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: IN
8222: IFFALSE 8243
// points := [ 14 , 50 , 16 ] ;
8224: LD_ADDR_VAR 0 9
8228: PUSH
8229: LD_INT 14
8231: PUSH
8232: LD_INT 50
8234: PUSH
8235: LD_INT 16
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8243: LD_VAR 0 6
8247: PPUSH
8248: CALL_OW 264
8252: PUSH
8253: LD_INT 6
8255: PUSH
8256: LD_INT 46
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: IN
8263: IFFALSE 8284
// points := [ 32 , 120 , 70 ] ;
8265: LD_ADDR_VAR 0 9
8269: PUSH
8270: LD_INT 32
8272: PUSH
8273: LD_INT 120
8275: PUSH
8276: LD_INT 70
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8284: LD_VAR 0 6
8288: PPUSH
8289: CALL_OW 264
8293: PUSH
8294: LD_INT 7
8296: PUSH
8297: LD_INT 28
8299: PUSH
8300: LD_INT 45
8302: PUSH
8303: LD_INT 92
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: IN
8312: IFFALSE 8333
// points := [ 35 , 20 , 45 ] ;
8314: LD_ADDR_VAR 0 9
8318: PUSH
8319: LD_INT 35
8321: PUSH
8322: LD_INT 20
8324: PUSH
8325: LD_INT 45
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8333: LD_VAR 0 6
8337: PPUSH
8338: CALL_OW 264
8342: PUSH
8343: LD_INT 47
8345: PUSH
8346: EMPTY
8347: LIST
8348: IN
8349: IFFALSE 8370
// points := [ 67 , 45 , 75 ] ;
8351: LD_ADDR_VAR 0 9
8355: PUSH
8356: LD_INT 67
8358: PUSH
8359: LD_INT 45
8361: PUSH
8362: LD_INT 75
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8370: LD_VAR 0 6
8374: PPUSH
8375: CALL_OW 264
8379: PUSH
8380: LD_INT 26
8382: PUSH
8383: EMPTY
8384: LIST
8385: IN
8386: IFFALSE 8407
// points := [ 120 , 30 , 80 ] ;
8388: LD_ADDR_VAR 0 9
8392: PUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 30
8398: PUSH
8399: LD_INT 80
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8407: LD_VAR 0 6
8411: PPUSH
8412: CALL_OW 264
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: EMPTY
8421: LIST
8422: IN
8423: IFFALSE 8444
// points := [ 40 , 1 , 1 ] ;
8425: LD_ADDR_VAR 0 9
8429: PUSH
8430: LD_INT 40
8432: PUSH
8433: LD_INT 1
8435: PUSH
8436: LD_INT 1
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8444: LD_VAR 0 6
8448: PPUSH
8449: CALL_OW 264
8453: PUSH
8454: LD_INT 29
8456: PUSH
8457: EMPTY
8458: LIST
8459: IN
8460: IFFALSE 8481
// points := [ 70 , 200 , 400 ] ;
8462: LD_ADDR_VAR 0 9
8466: PUSH
8467: LD_INT 70
8469: PUSH
8470: LD_INT 200
8472: PUSH
8473: LD_INT 400
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8481: LD_VAR 0 6
8485: PPUSH
8486: CALL_OW 264
8490: PUSH
8491: LD_INT 14
8493: PUSH
8494: LD_INT 53
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: IN
8501: IFFALSE 8522
// points := [ 40 , 10 , 20 ] ;
8503: LD_ADDR_VAR 0 9
8507: PUSH
8508: LD_INT 40
8510: PUSH
8511: LD_INT 10
8513: PUSH
8514: LD_INT 20
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8522: LD_VAR 0 6
8526: PPUSH
8527: CALL_OW 264
8531: PUSH
8532: LD_INT 9
8534: PUSH
8535: EMPTY
8536: LIST
8537: IN
8538: IFFALSE 8559
// points := [ 5 , 70 , 20 ] ;
8540: LD_ADDR_VAR 0 9
8544: PUSH
8545: LD_INT 5
8547: PUSH
8548: LD_INT 70
8550: PUSH
8551: LD_INT 20
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8559: LD_VAR 0 6
8563: PPUSH
8564: CALL_OW 264
8568: PUSH
8569: LD_INT 10
8571: PUSH
8572: EMPTY
8573: LIST
8574: IN
8575: IFFALSE 8596
// points := [ 35 , 110 , 70 ] ;
8577: LD_ADDR_VAR 0 9
8581: PUSH
8582: LD_INT 35
8584: PUSH
8585: LD_INT 110
8587: PUSH
8588: LD_INT 70
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8596: LD_VAR 0 6
8600: PPUSH
8601: CALL_OW 265
8605: PUSH
8606: LD_INT 25
8608: EQUAL
8609: IFFALSE 8630
// points := [ 80 , 65 , 100 ] ;
8611: LD_ADDR_VAR 0 9
8615: PUSH
8616: LD_INT 80
8618: PUSH
8619: LD_INT 65
8621: PUSH
8622: LD_INT 100
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8630: LD_VAR 0 6
8634: PPUSH
8635: CALL_OW 263
8639: PUSH
8640: LD_INT 1
8642: EQUAL
8643: IFFALSE 8678
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8645: LD_ADDR_VAR 0 10
8649: PUSH
8650: LD_VAR 0 10
8654: PUSH
8655: LD_VAR 0 6
8659: PPUSH
8660: CALL_OW 311
8664: PPUSH
8665: LD_INT 3
8667: PPUSH
8668: CALL_OW 259
8672: PUSH
8673: LD_INT 4
8675: MUL
8676: MUL
8677: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8678: LD_VAR 0 6
8682: PPUSH
8683: CALL_OW 263
8687: PUSH
8688: LD_INT 2
8690: EQUAL
8691: IFFALSE 8742
// begin j := IsControledBy ( i ) ;
8693: LD_ADDR_VAR 0 7
8697: PUSH
8698: LD_VAR 0 6
8702: PPUSH
8703: CALL_OW 312
8707: ST_TO_ADDR
// if j then
8708: LD_VAR 0 7
8712: IFFALSE 8742
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8714: LD_ADDR_VAR 0 10
8718: PUSH
8719: LD_VAR 0 10
8723: PUSH
8724: LD_VAR 0 7
8728: PPUSH
8729: LD_INT 3
8731: PPUSH
8732: CALL_OW 259
8736: PUSH
8737: LD_INT 3
8739: MUL
8740: MUL
8741: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8742: LD_VAR 0 6
8746: PPUSH
8747: CALL_OW 264
8751: PUSH
8752: LD_INT 5
8754: PUSH
8755: LD_INT 6
8757: PUSH
8758: LD_INT 46
8760: PUSH
8761: LD_INT 44
8763: PUSH
8764: LD_INT 47
8766: PUSH
8767: LD_INT 45
8769: PUSH
8770: LD_INT 28
8772: PUSH
8773: LD_INT 7
8775: PUSH
8776: LD_INT 27
8778: PUSH
8779: LD_INT 29
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: IN
8794: PUSH
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_INT 52
8802: PPUSH
8803: CALL_OW 321
8807: PUSH
8808: LD_INT 2
8810: EQUAL
8811: AND
8812: IFFALSE 8829
// bpoints := bpoints * 1.2 ;
8814: LD_ADDR_VAR 0 10
8818: PUSH
8819: LD_VAR 0 10
8823: PUSH
8824: LD_REAL  1.20000000000000E+0000
8827: MUL
8828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8829: LD_VAR 0 6
8833: PPUSH
8834: CALL_OW 264
8838: PUSH
8839: LD_INT 6
8841: PUSH
8842: LD_INT 46
8844: PUSH
8845: LD_INT 47
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: IN
8853: IFFALSE 8870
// bpoints := bpoints * 1.2 ;
8855: LD_ADDR_VAR 0 10
8859: PUSH
8860: LD_VAR 0 10
8864: PUSH
8865: LD_REAL  1.20000000000000E+0000
8868: MUL
8869: ST_TO_ADDR
// end ; unit_building :
8870: GO 8884
8872: LD_INT 3
8874: DOUBLE
8875: EQUAL
8876: IFTRUE 8880
8878: GO 8883
8880: POP
// ; end ;
8881: GO 8884
8883: POP
// for j = 1 to 3 do
8884: LD_ADDR_VAR 0 7
8888: PUSH
8889: DOUBLE
8890: LD_INT 1
8892: DEC
8893: ST_TO_ADDR
8894: LD_INT 3
8896: PUSH
8897: FOR_TO
8898: IFFALSE 8951
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8900: LD_ADDR_VAR 0 5
8904: PUSH
8905: LD_VAR 0 5
8909: PPUSH
8910: LD_VAR 0 7
8914: PPUSH
8915: LD_VAR 0 5
8919: PUSH
8920: LD_VAR 0 7
8924: ARRAY
8925: PUSH
8926: LD_VAR 0 9
8930: PUSH
8931: LD_VAR 0 7
8935: ARRAY
8936: PUSH
8937: LD_VAR 0 10
8941: MUL
8942: PLUS
8943: PPUSH
8944: CALL_OW 1
8948: ST_TO_ADDR
8949: GO 8897
8951: POP
8952: POP
// end ;
8953: GO 7432
8955: POP
8956: POP
// result := Replace ( result , 4 , tmp ) ;
8957: LD_ADDR_VAR 0 5
8961: PUSH
8962: LD_VAR 0 5
8966: PPUSH
8967: LD_INT 4
8969: PPUSH
8970: LD_VAR 0 8
8974: PPUSH
8975: CALL_OW 1
8979: ST_TO_ADDR
// end ;
8980: LD_VAR 0 5
8984: RET
// export function DangerAtRange ( unit , range ) ; begin
8985: LD_INT 0
8987: PPUSH
// if not unit then
8988: LD_VAR 0 1
8992: NOT
8993: IFFALSE 8997
// exit ;
8995: GO 9042
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8997: LD_ADDR_VAR 0 3
9001: PUSH
9002: LD_VAR 0 1
9006: PPUSH
9007: CALL_OW 255
9011: PPUSH
9012: LD_VAR 0 1
9016: PPUSH
9017: CALL_OW 250
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 251
9031: PPUSH
9032: LD_VAR 0 2
9036: PPUSH
9037: CALL 7284 0 4
9041: ST_TO_ADDR
// end ;
9042: LD_VAR 0 3
9046: RET
// export function DangerInArea ( side , area ) ; begin
9047: LD_INT 0
9049: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9050: LD_ADDR_VAR 0 3
9054: PUSH
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_INT 81
9062: PUSH
9063: LD_VAR 0 1
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PPUSH
9072: CALL_OW 70
9076: ST_TO_ADDR
// end ;
9077: LD_VAR 0 3
9081: RET
// export function IsExtension ( b ) ; begin
9082: LD_INT 0
9084: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9085: LD_ADDR_VAR 0 2
9089: PUSH
9090: LD_VAR 0 1
9094: PUSH
9095: LD_INT 23
9097: PUSH
9098: LD_INT 20
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_INT 17
9106: PUSH
9107: LD_INT 24
9109: PUSH
9110: LD_INT 21
9112: PUSH
9113: LD_INT 19
9115: PUSH
9116: LD_INT 16
9118: PUSH
9119: LD_INT 25
9121: PUSH
9122: LD_INT 18
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: IN
9137: ST_TO_ADDR
// end ;
9138: LD_VAR 0 2
9142: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
9147: PPUSH
// result := [ ] ;
9148: LD_ADDR_VAR 0 4
9152: PUSH
9153: EMPTY
9154: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9155: LD_ADDR_VAR 0 5
9159: PUSH
9160: LD_VAR 0 2
9164: PPUSH
9165: LD_INT 21
9167: PUSH
9168: LD_INT 3
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 70
9179: ST_TO_ADDR
// if not tmp then
9180: LD_VAR 0 5
9184: NOT
9185: IFFALSE 9189
// exit ;
9187: GO 9253
// if checkLink then
9189: LD_VAR 0 3
9193: IFFALSE 9243
// begin for i in tmp do
9195: LD_ADDR_VAR 0 6
9199: PUSH
9200: LD_VAR 0 5
9204: PUSH
9205: FOR_IN
9206: IFFALSE 9241
// if GetBase ( i ) <> base then
9208: LD_VAR 0 6
9212: PPUSH
9213: CALL_OW 274
9217: PUSH
9218: LD_VAR 0 1
9222: NONEQUAL
9223: IFFALSE 9239
// ComLinkToBase ( base , i ) ;
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 6
9234: PPUSH
9235: CALL_OW 169
9239: GO 9205
9241: POP
9242: POP
// end ; result := tmp ;
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: LD_VAR 0 5
9252: ST_TO_ADDR
// end ;
9253: LD_VAR 0 4
9257: RET
// export function ComComplete ( units , b ) ; var i ; begin
9258: LD_INT 0
9260: PPUSH
9261: PPUSH
// if not units then
9262: LD_VAR 0 1
9266: NOT
9267: IFFALSE 9271
// exit ;
9269: GO 9361
// for i in units do
9271: LD_ADDR_VAR 0 4
9275: PUSH
9276: LD_VAR 0 1
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9359
// if BuildingStatus ( b ) = bs_build then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 461
9293: PUSH
9294: LD_INT 1
9296: EQUAL
9297: IFFALSE 9357
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9299: LD_VAR 0 4
9303: PPUSH
9304: LD_STRING h
9306: PUSH
9307: LD_VAR 0 2
9311: PPUSH
9312: CALL_OW 250
9316: PUSH
9317: LD_VAR 0 2
9321: PPUSH
9322: CALL_OW 251
9326: PUSH
9327: LD_VAR 0 2
9331: PUSH
9332: LD_INT 0
9334: PUSH
9335: LD_INT 0
9337: PUSH
9338: LD_INT 0
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: PPUSH
9353: CALL_OW 446
9357: GO 9281
9359: POP
9360: POP
// end ;
9361: LD_VAR 0 3
9365: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9366: LD_INT 0
9368: PPUSH
9369: PPUSH
9370: PPUSH
9371: PPUSH
9372: PPUSH
9373: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9374: LD_VAR 0 1
9378: NOT
9379: PUSH
9380: LD_VAR 0 1
9384: PPUSH
9385: CALL_OW 263
9389: PUSH
9390: LD_INT 2
9392: NONEQUAL
9393: OR
9394: IFFALSE 9398
// exit ;
9396: GO 9714
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9398: LD_ADDR_VAR 0 6
9402: PUSH
9403: LD_INT 22
9405: PUSH
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 255
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 30
9425: PUSH
9426: LD_INT 36
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 34
9435: PUSH
9436: LD_INT 31
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 69
9456: ST_TO_ADDR
// if not tmp then
9457: LD_VAR 0 6
9461: NOT
9462: IFFALSE 9466
// exit ;
9464: GO 9714
// result := [ ] ;
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: EMPTY
9472: ST_TO_ADDR
// for i in tmp do
9473: LD_ADDR_VAR 0 3
9477: PUSH
9478: LD_VAR 0 6
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9555
// begin t := UnitsInside ( i ) ;
9486: LD_ADDR_VAR 0 4
9490: PUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: CALL_OW 313
9500: ST_TO_ADDR
// if t then
9501: LD_VAR 0 4
9505: IFFALSE 9553
// for j in t do
9507: LD_ADDR_VAR 0 7
9511: PUSH
9512: LD_VAR 0 4
9516: PUSH
9517: FOR_IN
9518: IFFALSE 9551
// result := Replace ( result , result + 1 , j ) ;
9520: LD_ADDR_VAR 0 2
9524: PUSH
9525: LD_VAR 0 2
9529: PPUSH
9530: LD_VAR 0 2
9534: PUSH
9535: LD_INT 1
9537: PLUS
9538: PPUSH
9539: LD_VAR 0 7
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
9549: GO 9517
9551: POP
9552: POP
// end ;
9553: GO 9483
9555: POP
9556: POP
// if not result then
9557: LD_VAR 0 2
9561: NOT
9562: IFFALSE 9566
// exit ;
9564: GO 9714
// mech := result [ 1 ] ;
9566: LD_ADDR_VAR 0 5
9570: PUSH
9571: LD_VAR 0 2
9575: PUSH
9576: LD_INT 1
9578: ARRAY
9579: ST_TO_ADDR
// if result > 1 then
9580: LD_VAR 0 2
9584: PUSH
9585: LD_INT 1
9587: GREATER
9588: IFFALSE 9700
// begin for i = 2 to result do
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: DOUBLE
9596: LD_INT 2
9598: DEC
9599: ST_TO_ADDR
9600: LD_VAR 0 2
9604: PUSH
9605: FOR_TO
9606: IFFALSE 9698
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9608: LD_ADDR_VAR 0 4
9612: PUSH
9613: LD_VAR 0 2
9617: PUSH
9618: LD_VAR 0 3
9622: ARRAY
9623: PPUSH
9624: LD_INT 3
9626: PPUSH
9627: CALL_OW 259
9631: PUSH
9632: LD_VAR 0 2
9636: PUSH
9637: LD_VAR 0 3
9641: ARRAY
9642: PPUSH
9643: CALL_OW 432
9647: MINUS
9648: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9649: LD_VAR 0 4
9653: PUSH
9654: LD_VAR 0 5
9658: PPUSH
9659: LD_INT 3
9661: PPUSH
9662: CALL_OW 259
9666: PUSH
9667: LD_VAR 0 5
9671: PPUSH
9672: CALL_OW 432
9676: MINUS
9677: GREATEREQUAL
9678: IFFALSE 9696
// mech := result [ i ] ;
9680: LD_ADDR_VAR 0 5
9684: PUSH
9685: LD_VAR 0 2
9689: PUSH
9690: LD_VAR 0 3
9694: ARRAY
9695: ST_TO_ADDR
// end ;
9696: GO 9605
9698: POP
9699: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: LD_VAR 0 5
9709: PPUSH
9710: CALL_OW 135
// end ;
9714: LD_VAR 0 2
9718: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9719: LD_INT 0
9721: PPUSH
9722: PPUSH
9723: PPUSH
9724: PPUSH
9725: PPUSH
9726: PPUSH
9727: PPUSH
9728: PPUSH
9729: PPUSH
9730: PPUSH
9731: PPUSH
9732: PPUSH
9733: PPUSH
// result := [ ] ;
9734: LD_ADDR_VAR 0 7
9738: PUSH
9739: EMPTY
9740: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9741: LD_VAR 0 1
9745: PPUSH
9746: CALL_OW 266
9750: PUSH
9751: LD_INT 0
9753: PUSH
9754: LD_INT 1
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: IN
9761: NOT
9762: IFFALSE 9766
// exit ;
9764: GO 11400
// if name then
9766: LD_VAR 0 3
9770: IFFALSE 9786
// SetBName ( base_dep , name ) ;
9772: LD_VAR 0 1
9776: PPUSH
9777: LD_VAR 0 3
9781: PPUSH
9782: CALL_OW 500
// base := GetBase ( base_dep ) ;
9786: LD_ADDR_VAR 0 15
9790: PUSH
9791: LD_VAR 0 1
9795: PPUSH
9796: CALL_OW 274
9800: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9801: LD_ADDR_VAR 0 16
9805: PUSH
9806: LD_VAR 0 1
9810: PPUSH
9811: CALL_OW 255
9815: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9816: LD_ADDR_VAR 0 17
9820: PUSH
9821: LD_VAR 0 1
9825: PPUSH
9826: CALL_OW 248
9830: ST_TO_ADDR
// if sources then
9831: LD_VAR 0 5
9835: IFFALSE 9882
// for i = 1 to 3 do
9837: LD_ADDR_VAR 0 8
9841: PUSH
9842: DOUBLE
9843: LD_INT 1
9845: DEC
9846: ST_TO_ADDR
9847: LD_INT 3
9849: PUSH
9850: FOR_TO
9851: IFFALSE 9880
// AddResourceType ( base , i , sources [ i ] ) ;
9853: LD_VAR 0 15
9857: PPUSH
9858: LD_VAR 0 8
9862: PPUSH
9863: LD_VAR 0 5
9867: PUSH
9868: LD_VAR 0 8
9872: ARRAY
9873: PPUSH
9874: CALL_OW 276
9878: GO 9850
9880: POP
9881: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9882: LD_ADDR_VAR 0 18
9886: PUSH
9887: LD_VAR 0 15
9891: PPUSH
9892: LD_VAR 0 2
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: CALL 9143 0 3
9904: ST_TO_ADDR
// InitHc ;
9905: CALL_OW 19
// InitUc ;
9909: CALL_OW 18
// uc_side := side ;
9913: LD_ADDR_OWVAR 20
9917: PUSH
9918: LD_VAR 0 16
9922: ST_TO_ADDR
// uc_nation := nation ;
9923: LD_ADDR_OWVAR 21
9927: PUSH
9928: LD_VAR 0 17
9932: ST_TO_ADDR
// if buildings then
9933: LD_VAR 0 18
9937: IFFALSE 11259
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9939: LD_ADDR_VAR 0 19
9943: PUSH
9944: LD_VAR 0 18
9948: PPUSH
9949: LD_INT 2
9951: PUSH
9952: LD_INT 30
9954: PUSH
9955: LD_INT 29
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 30
9964: PUSH
9965: LD_INT 30
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 72
9981: ST_TO_ADDR
// if tmp then
9982: LD_VAR 0 19
9986: IFFALSE 10034
// for i in tmp do
9988: LD_ADDR_VAR 0 8
9992: PUSH
9993: LD_VAR 0 19
9997: PUSH
9998: FOR_IN
9999: IFFALSE 10032
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10001: LD_VAR 0 8
10005: PPUSH
10006: CALL_OW 250
10010: PPUSH
10011: LD_VAR 0 8
10015: PPUSH
10016: CALL_OW 251
10020: PPUSH
10021: LD_VAR 0 16
10025: PPUSH
10026: CALL_OW 441
10030: GO 9998
10032: POP
10033: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10034: LD_VAR 0 18
10038: PPUSH
10039: LD_INT 2
10041: PUSH
10042: LD_INT 30
10044: PUSH
10045: LD_INT 32
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 30
10054: PUSH
10055: LD_INT 33
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 72
10071: IFFALSE 10159
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10073: LD_ADDR_VAR 0 8
10077: PUSH
10078: LD_VAR 0 18
10082: PPUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 30
10088: PUSH
10089: LD_INT 32
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_INT 33
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 72
10115: PUSH
10116: FOR_IN
10117: IFFALSE 10157
// begin if not GetBWeapon ( i ) then
10119: LD_VAR 0 8
10123: PPUSH
10124: CALL_OW 269
10128: NOT
10129: IFFALSE 10155
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10131: LD_VAR 0 8
10135: PPUSH
10136: LD_VAR 0 8
10140: PPUSH
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL 11405 0 2
10150: PPUSH
10151: CALL_OW 431
// end ;
10155: GO 10116
10157: POP
10158: POP
// end ; for i = 1 to personel do
10159: LD_ADDR_VAR 0 8
10163: PUSH
10164: DOUBLE
10165: LD_INT 1
10167: DEC
10168: ST_TO_ADDR
10169: LD_VAR 0 6
10173: PUSH
10174: FOR_TO
10175: IFFALSE 11239
// begin if i > 4 then
10177: LD_VAR 0 8
10181: PUSH
10182: LD_INT 4
10184: GREATER
10185: IFFALSE 10189
// break ;
10187: GO 11239
// case i of 1 :
10189: LD_VAR 0 8
10193: PUSH
10194: LD_INT 1
10196: DOUBLE
10197: EQUAL
10198: IFTRUE 10202
10200: GO 10282
10202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10203: LD_ADDR_VAR 0 12
10207: PUSH
10208: LD_VAR 0 18
10212: PPUSH
10213: LD_INT 22
10215: PUSH
10216: LD_VAR 0 16
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 58
10227: PUSH
10228: EMPTY
10229: LIST
10230: PUSH
10231: LD_INT 2
10233: PUSH
10234: LD_INT 30
10236: PUSH
10237: LD_INT 32
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 30
10246: PUSH
10247: LD_INT 4
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 30
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 72
10279: ST_TO_ADDR
10280: GO 10504
10282: LD_INT 2
10284: DOUBLE
10285: EQUAL
10286: IFTRUE 10290
10288: GO 10352
10290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10291: LD_ADDR_VAR 0 12
10295: PUSH
10296: LD_VAR 0 18
10300: PPUSH
10301: LD_INT 22
10303: PUSH
10304: LD_VAR 0 16
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: LD_INT 30
10318: PUSH
10319: LD_INT 0
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 30
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 72
10349: ST_TO_ADDR
10350: GO 10504
10352: LD_INT 3
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10422
10360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10361: LD_ADDR_VAR 0 12
10365: PUSH
10366: LD_VAR 0 18
10370: PPUSH
10371: LD_INT 22
10373: PUSH
10374: LD_VAR 0 16
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: LD_INT 30
10388: PUSH
10389: LD_INT 2
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 30
10398: PUSH
10399: LD_INT 3
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PPUSH
10415: CALL_OW 72
10419: ST_TO_ADDR
10420: GO 10504
10422: LD_INT 4
10424: DOUBLE
10425: EQUAL
10426: IFTRUE 10430
10428: GO 10503
10430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10431: LD_ADDR_VAR 0 12
10435: PUSH
10436: LD_VAR 0 18
10440: PPUSH
10441: LD_INT 22
10443: PUSH
10444: LD_VAR 0 16
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 2
10455: PUSH
10456: LD_INT 30
10458: PUSH
10459: LD_INT 6
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 30
10468: PUSH
10469: LD_INT 7
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 30
10478: PUSH
10479: LD_INT 8
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 72
10500: ST_TO_ADDR
10501: GO 10504
10503: POP
// if i = 1 then
10504: LD_VAR 0 8
10508: PUSH
10509: LD_INT 1
10511: EQUAL
10512: IFFALSE 10623
// begin tmp := [ ] ;
10514: LD_ADDR_VAR 0 19
10518: PUSH
10519: EMPTY
10520: ST_TO_ADDR
// for j in f do
10521: LD_ADDR_VAR 0 9
10525: PUSH
10526: LD_VAR 0 12
10530: PUSH
10531: FOR_IN
10532: IFFALSE 10605
// if GetBType ( j ) = b_bunker then
10534: LD_VAR 0 9
10538: PPUSH
10539: CALL_OW 266
10543: PUSH
10544: LD_INT 32
10546: EQUAL
10547: IFFALSE 10574
// tmp := Insert ( tmp , 1 , j ) else
10549: LD_ADDR_VAR 0 19
10553: PUSH
10554: LD_VAR 0 19
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: LD_VAR 0 9
10566: PPUSH
10567: CALL_OW 2
10571: ST_TO_ADDR
10572: GO 10603
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10574: LD_ADDR_VAR 0 19
10578: PUSH
10579: LD_VAR 0 19
10583: PPUSH
10584: LD_VAR 0 19
10588: PUSH
10589: LD_INT 1
10591: PLUS
10592: PPUSH
10593: LD_VAR 0 9
10597: PPUSH
10598: CALL_OW 2
10602: ST_TO_ADDR
10603: GO 10531
10605: POP
10606: POP
// if tmp then
10607: LD_VAR 0 19
10611: IFFALSE 10623
// f := tmp ;
10613: LD_ADDR_VAR 0 12
10617: PUSH
10618: LD_VAR 0 19
10622: ST_TO_ADDR
// end ; x := personel [ i ] ;
10623: LD_ADDR_VAR 0 13
10627: PUSH
10628: LD_VAR 0 6
10632: PUSH
10633: LD_VAR 0 8
10637: ARRAY
10638: ST_TO_ADDR
// if x = - 1 then
10639: LD_VAR 0 13
10643: PUSH
10644: LD_INT 1
10646: NEG
10647: EQUAL
10648: IFFALSE 10857
// begin for j in f do
10650: LD_ADDR_VAR 0 9
10654: PUSH
10655: LD_VAR 0 12
10659: PUSH
10660: FOR_IN
10661: IFFALSE 10853
// repeat InitHc ;
10663: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10667: LD_VAR 0 9
10671: PPUSH
10672: CALL_OW 266
10676: PUSH
10677: LD_INT 5
10679: EQUAL
10680: IFFALSE 10750
// begin if UnitsInside ( j ) < 3 then
10682: LD_VAR 0 9
10686: PPUSH
10687: CALL_OW 313
10691: PUSH
10692: LD_INT 3
10694: LESS
10695: IFFALSE 10731
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10697: LD_INT 0
10699: PPUSH
10700: LD_INT 5
10702: PUSH
10703: LD_INT 8
10705: PUSH
10706: LD_INT 9
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: LD_VAR 0 17
10718: ARRAY
10719: PPUSH
10720: LD_VAR 0 4
10724: PPUSH
10725: CALL_OW 380
10729: GO 10748
// PrepareHuman ( false , i , skill ) ;
10731: LD_INT 0
10733: PPUSH
10734: LD_VAR 0 8
10738: PPUSH
10739: LD_VAR 0 4
10743: PPUSH
10744: CALL_OW 380
// end else
10748: GO 10767
// PrepareHuman ( false , i , skill ) ;
10750: LD_INT 0
10752: PPUSH
10753: LD_VAR 0 8
10757: PPUSH
10758: LD_VAR 0 4
10762: PPUSH
10763: CALL_OW 380
// un := CreateHuman ;
10767: LD_ADDR_VAR 0 14
10771: PUSH
10772: CALL_OW 44
10776: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10777: LD_ADDR_VAR 0 7
10781: PUSH
10782: LD_VAR 0 7
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: LD_VAR 0 14
10794: PPUSH
10795: CALL_OW 2
10799: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10800: LD_VAR 0 14
10804: PPUSH
10805: LD_VAR 0 9
10809: PPUSH
10810: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10814: LD_VAR 0 9
10818: PPUSH
10819: CALL_OW 313
10823: PUSH
10824: LD_INT 6
10826: EQUAL
10827: PUSH
10828: LD_VAR 0 9
10832: PPUSH
10833: CALL_OW 266
10837: PUSH
10838: LD_INT 32
10840: PUSH
10841: LD_INT 31
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: IN
10848: OR
10849: IFFALSE 10663
10851: GO 10660
10853: POP
10854: POP
// end else
10855: GO 11237
// for j = 1 to x do
10857: LD_ADDR_VAR 0 9
10861: PUSH
10862: DOUBLE
10863: LD_INT 1
10865: DEC
10866: ST_TO_ADDR
10867: LD_VAR 0 13
10871: PUSH
10872: FOR_TO
10873: IFFALSE 11235
// begin InitHc ;
10875: CALL_OW 19
// if not f then
10879: LD_VAR 0 12
10883: NOT
10884: IFFALSE 10973
// begin PrepareHuman ( false , i , skill ) ;
10886: LD_INT 0
10888: PPUSH
10889: LD_VAR 0 8
10893: PPUSH
10894: LD_VAR 0 4
10898: PPUSH
10899: CALL_OW 380
// un := CreateHuman ;
10903: LD_ADDR_VAR 0 14
10907: PUSH
10908: CALL_OW 44
10912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10913: LD_ADDR_VAR 0 7
10917: PUSH
10918: LD_VAR 0 7
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: LD_VAR 0 14
10930: PPUSH
10931: CALL_OW 2
10935: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10936: LD_VAR 0 14
10940: PPUSH
10941: LD_VAR 0 1
10945: PPUSH
10946: CALL_OW 250
10950: PPUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 251
10960: PPUSH
10961: LD_INT 10
10963: PPUSH
10964: LD_INT 0
10966: PPUSH
10967: CALL_OW 50
// continue ;
10971: GO 10872
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10973: LD_VAR 0 12
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: PPUSH
10982: CALL_OW 313
10986: PUSH
10987: LD_VAR 0 12
10991: PUSH
10992: LD_INT 1
10994: ARRAY
10995: PPUSH
10996: CALL_OW 266
11000: PUSH
11001: LD_INT 32
11003: PUSH
11004: LD_INT 31
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: IN
11011: AND
11012: PUSH
11013: LD_VAR 0 12
11017: PUSH
11018: LD_INT 1
11020: ARRAY
11021: PPUSH
11022: CALL_OW 313
11026: PUSH
11027: LD_INT 6
11029: EQUAL
11030: OR
11031: IFFALSE 11051
// f := Delete ( f , 1 ) ;
11033: LD_ADDR_VAR 0 12
11037: PUSH
11038: LD_VAR 0 12
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 3
11050: ST_TO_ADDR
// if not f then
11051: LD_VAR 0 12
11055: NOT
11056: IFFALSE 11074
// begin x := x + 2 ;
11058: LD_ADDR_VAR 0 13
11062: PUSH
11063: LD_VAR 0 13
11067: PUSH
11068: LD_INT 2
11070: PLUS
11071: ST_TO_ADDR
// continue ;
11072: GO 10872
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11074: LD_VAR 0 12
11078: PUSH
11079: LD_INT 1
11081: ARRAY
11082: PPUSH
11083: CALL_OW 266
11087: PUSH
11088: LD_INT 5
11090: EQUAL
11091: IFFALSE 11165
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11093: LD_VAR 0 12
11097: PUSH
11098: LD_INT 1
11100: ARRAY
11101: PPUSH
11102: CALL_OW 313
11106: PUSH
11107: LD_INT 3
11109: LESS
11110: IFFALSE 11146
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11112: LD_INT 0
11114: PPUSH
11115: LD_INT 5
11117: PUSH
11118: LD_INT 8
11120: PUSH
11121: LD_INT 9
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: LIST
11128: PUSH
11129: LD_VAR 0 17
11133: ARRAY
11134: PPUSH
11135: LD_VAR 0 4
11139: PPUSH
11140: CALL_OW 380
11144: GO 11163
// PrepareHuman ( false , i , skill ) ;
11146: LD_INT 0
11148: PPUSH
11149: LD_VAR 0 8
11153: PPUSH
11154: LD_VAR 0 4
11158: PPUSH
11159: CALL_OW 380
// end else
11163: GO 11182
// PrepareHuman ( false , i , skill ) ;
11165: LD_INT 0
11167: PPUSH
11168: LD_VAR 0 8
11172: PPUSH
11173: LD_VAR 0 4
11177: PPUSH
11178: CALL_OW 380
// un := CreateHuman ;
11182: LD_ADDR_VAR 0 14
11186: PUSH
11187: CALL_OW 44
11191: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11192: LD_ADDR_VAR 0 7
11196: PUSH
11197: LD_VAR 0 7
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: LD_VAR 0 14
11209: PPUSH
11210: CALL_OW 2
11214: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11215: LD_VAR 0 14
11219: PPUSH
11220: LD_VAR 0 12
11224: PUSH
11225: LD_INT 1
11227: ARRAY
11228: PPUSH
11229: CALL_OW 52
// end ;
11233: GO 10872
11235: POP
11236: POP
// end ;
11237: GO 10174
11239: POP
11240: POP
// result := result ^ buildings ;
11241: LD_ADDR_VAR 0 7
11245: PUSH
11246: LD_VAR 0 7
11250: PUSH
11251: LD_VAR 0 18
11255: ADD
11256: ST_TO_ADDR
// end else
11257: GO 11400
// begin for i = 1 to personel do
11259: LD_ADDR_VAR 0 8
11263: PUSH
11264: DOUBLE
11265: LD_INT 1
11267: DEC
11268: ST_TO_ADDR
11269: LD_VAR 0 6
11273: PUSH
11274: FOR_TO
11275: IFFALSE 11398
// begin if i > 4 then
11277: LD_VAR 0 8
11281: PUSH
11282: LD_INT 4
11284: GREATER
11285: IFFALSE 11289
// break ;
11287: GO 11398
// x := personel [ i ] ;
11289: LD_ADDR_VAR 0 13
11293: PUSH
11294: LD_VAR 0 6
11298: PUSH
11299: LD_VAR 0 8
11303: ARRAY
11304: ST_TO_ADDR
// if x = - 1 then
11305: LD_VAR 0 13
11309: PUSH
11310: LD_INT 1
11312: NEG
11313: EQUAL
11314: IFFALSE 11318
// continue ;
11316: GO 11274
// PrepareHuman ( false , i , skill ) ;
11318: LD_INT 0
11320: PPUSH
11321: LD_VAR 0 8
11325: PPUSH
11326: LD_VAR 0 4
11330: PPUSH
11331: CALL_OW 380
// un := CreateHuman ;
11335: LD_ADDR_VAR 0 14
11339: PUSH
11340: CALL_OW 44
11344: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11345: LD_VAR 0 14
11349: PPUSH
11350: LD_VAR 0 1
11354: PPUSH
11355: CALL_OW 250
11359: PPUSH
11360: LD_VAR 0 1
11364: PPUSH
11365: CALL_OW 251
11369: PPUSH
11370: LD_INT 10
11372: PPUSH
11373: LD_INT 0
11375: PPUSH
11376: CALL_OW 50
// result := result ^ un ;
11380: LD_ADDR_VAR 0 7
11384: PUSH
11385: LD_VAR 0 7
11389: PUSH
11390: LD_VAR 0 14
11394: ADD
11395: ST_TO_ADDR
// end ;
11396: GO 11274
11398: POP
11399: POP
// end ; end ;
11400: LD_VAR 0 7
11404: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11405: LD_INT 0
11407: PPUSH
11408: PPUSH
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
11422: PPUSH
// result := false ;
11423: LD_ADDR_VAR 0 3
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11431: LD_VAR 0 1
11435: NOT
11436: PUSH
11437: LD_VAR 0 1
11441: PPUSH
11442: CALL_OW 266
11446: PUSH
11447: LD_INT 32
11449: PUSH
11450: LD_INT 33
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: IN
11457: NOT
11458: OR
11459: IFFALSE 11463
// exit ;
11461: GO 12572
// nat := GetNation ( tower ) ;
11463: LD_ADDR_VAR 0 12
11467: PUSH
11468: LD_VAR 0 1
11472: PPUSH
11473: CALL_OW 248
11477: ST_TO_ADDR
// side := GetSide ( tower ) ;
11478: LD_ADDR_VAR 0 16
11482: PUSH
11483: LD_VAR 0 1
11487: PPUSH
11488: CALL_OW 255
11492: ST_TO_ADDR
// x := GetX ( tower ) ;
11493: LD_ADDR_VAR 0 10
11497: PUSH
11498: LD_VAR 0 1
11502: PPUSH
11503: CALL_OW 250
11507: ST_TO_ADDR
// y := GetY ( tower ) ;
11508: LD_ADDR_VAR 0 11
11512: PUSH
11513: LD_VAR 0 1
11517: PPUSH
11518: CALL_OW 251
11522: ST_TO_ADDR
// if not x or not y then
11523: LD_VAR 0 10
11527: NOT
11528: PUSH
11529: LD_VAR 0 11
11533: NOT
11534: OR
11535: IFFALSE 11539
// exit ;
11537: GO 12572
// weapon := 0 ;
11539: LD_ADDR_VAR 0 18
11543: PUSH
11544: LD_INT 0
11546: ST_TO_ADDR
// fac_list := [ ] ;
11547: LD_ADDR_VAR 0 17
11551: PUSH
11552: EMPTY
11553: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 1
11563: PPUSH
11564: CALL_OW 274
11568: PPUSH
11569: LD_VAR 0 2
11573: PPUSH
11574: LD_INT 0
11576: PPUSH
11577: CALL 9143 0 3
11581: PPUSH
11582: LD_INT 30
11584: PUSH
11585: LD_INT 3
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PPUSH
11592: CALL_OW 72
11596: ST_TO_ADDR
// if not factories then
11597: LD_VAR 0 6
11601: NOT
11602: IFFALSE 11606
// exit ;
11604: GO 12572
// for i in factories do
11606: LD_ADDR_VAR 0 8
11610: PUSH
11611: LD_VAR 0 6
11615: PUSH
11616: FOR_IN
11617: IFFALSE 11642
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11619: LD_ADDR_VAR 0 17
11623: PUSH
11624: LD_VAR 0 17
11628: PUSH
11629: LD_VAR 0 8
11633: PPUSH
11634: CALL_OW 478
11638: UNION
11639: ST_TO_ADDR
11640: GO 11616
11642: POP
11643: POP
// if not fac_list then
11644: LD_VAR 0 17
11648: NOT
11649: IFFALSE 11653
// exit ;
11651: GO 12572
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11653: LD_ADDR_VAR 0 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: LD_INT 5
11663: PUSH
11664: LD_INT 9
11666: PUSH
11667: LD_INT 10
11669: PUSH
11670: LD_INT 6
11672: PUSH
11673: LD_INT 7
11675: PUSH
11676: LD_INT 11
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 27
11690: PUSH
11691: LD_INT 28
11693: PUSH
11694: LD_INT 26
11696: PUSH
11697: LD_INT 30
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 43
11708: PUSH
11709: LD_INT 44
11711: PUSH
11712: LD_INT 46
11714: PUSH
11715: LD_INT 45
11717: PUSH
11718: LD_INT 47
11720: PUSH
11721: LD_INT 49
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: LD_VAR 0 12
11741: ARRAY
11742: ST_TO_ADDR
// list := list isect fac_list ;
11743: LD_ADDR_VAR 0 5
11747: PUSH
11748: LD_VAR 0 5
11752: PUSH
11753: LD_VAR 0 17
11757: ISECT
11758: ST_TO_ADDR
// if not list then
11759: LD_VAR 0 5
11763: NOT
11764: IFFALSE 11768
// exit ;
11766: GO 12572
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11768: LD_VAR 0 12
11772: PUSH
11773: LD_INT 3
11775: EQUAL
11776: PUSH
11777: LD_INT 49
11779: PUSH
11780: LD_VAR 0 5
11784: IN
11785: AND
11786: PUSH
11787: LD_INT 31
11789: PPUSH
11790: LD_VAR 0 16
11794: PPUSH
11795: CALL_OW 321
11799: PUSH
11800: LD_INT 2
11802: EQUAL
11803: AND
11804: IFFALSE 11864
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11806: LD_INT 22
11808: PUSH
11809: LD_VAR 0 16
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 35
11820: PUSH
11821: LD_INT 49
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 91
11830: PUSH
11831: LD_VAR 0 1
11835: PUSH
11836: LD_INT 10
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 69
11853: NOT
11854: IFFALSE 11864
// weapon := ru_time_lapser ;
11856: LD_ADDR_VAR 0 18
11860: PUSH
11861: LD_INT 49
11863: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11864: LD_VAR 0 12
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: LD_INT 2
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: IN
11879: PUSH
11880: LD_INT 11
11882: PUSH
11883: LD_VAR 0 5
11887: IN
11888: PUSH
11889: LD_INT 30
11891: PUSH
11892: LD_VAR 0 5
11896: IN
11897: OR
11898: AND
11899: PUSH
11900: LD_INT 6
11902: PPUSH
11903: LD_VAR 0 16
11907: PPUSH
11908: CALL_OW 321
11912: PUSH
11913: LD_INT 2
11915: EQUAL
11916: AND
11917: IFFALSE 12082
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11919: LD_INT 22
11921: PUSH
11922: LD_VAR 0 16
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: LD_INT 35
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 35
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 91
11961: PUSH
11962: LD_VAR 0 1
11966: PUSH
11967: LD_INT 18
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: PPUSH
11980: CALL_OW 69
11984: NOT
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_VAR 0 16
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 2
12000: PUSH
12001: LD_INT 30
12003: PUSH
12004: LD_INT 32
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 30
12013: PUSH
12014: LD_INT 33
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 91
12028: PUSH
12029: LD_VAR 0 1
12033: PUSH
12034: LD_INT 12
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: PUSH
12055: LD_INT 2
12057: GREATER
12058: AND
12059: IFFALSE 12082
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12061: LD_ADDR_VAR 0 18
12065: PUSH
12066: LD_INT 11
12068: PUSH
12069: LD_INT 30
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_VAR 0 12
12080: ARRAY
12081: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12082: LD_VAR 0 18
12086: NOT
12087: PUSH
12088: LD_INT 40
12090: PPUSH
12091: LD_VAR 0 16
12095: PPUSH
12096: CALL_OW 321
12100: PUSH
12101: LD_INT 2
12103: EQUAL
12104: AND
12105: PUSH
12106: LD_INT 7
12108: PUSH
12109: LD_VAR 0 5
12113: IN
12114: PUSH
12115: LD_INT 28
12117: PUSH
12118: LD_VAR 0 5
12122: IN
12123: OR
12124: PUSH
12125: LD_INT 45
12127: PUSH
12128: LD_VAR 0 5
12132: IN
12133: OR
12134: AND
12135: IFFALSE 12389
// begin hex := GetHexInfo ( x , y ) ;
12137: LD_ADDR_VAR 0 4
12141: PUSH
12142: LD_VAR 0 10
12146: PPUSH
12147: LD_VAR 0 11
12151: PPUSH
12152: CALL_OW 546
12156: ST_TO_ADDR
// if hex [ 1 ] then
12157: LD_VAR 0 4
12161: PUSH
12162: LD_INT 1
12164: ARRAY
12165: IFFALSE 12169
// exit ;
12167: GO 12572
// height := hex [ 2 ] ;
12169: LD_ADDR_VAR 0 15
12173: PUSH
12174: LD_VAR 0 4
12178: PUSH
12179: LD_INT 2
12181: ARRAY
12182: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12183: LD_ADDR_VAR 0 14
12187: PUSH
12188: LD_INT 0
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 3
12196: PUSH
12197: LD_INT 5
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: ST_TO_ADDR
// for i in tmp do
12206: LD_ADDR_VAR 0 8
12210: PUSH
12211: LD_VAR 0 14
12215: PUSH
12216: FOR_IN
12217: IFFALSE 12387
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12219: LD_ADDR_VAR 0 9
12223: PUSH
12224: LD_VAR 0 10
12228: PPUSH
12229: LD_VAR 0 8
12233: PPUSH
12234: LD_INT 5
12236: PPUSH
12237: CALL_OW 272
12241: PUSH
12242: LD_VAR 0 11
12246: PPUSH
12247: LD_VAR 0 8
12251: PPUSH
12252: LD_INT 5
12254: PPUSH
12255: CALL_OW 273
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12264: LD_VAR 0 9
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: LD_VAR 0 9
12277: PUSH
12278: LD_INT 2
12280: ARRAY
12281: PPUSH
12282: CALL_OW 488
12286: IFFALSE 12385
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12288: LD_ADDR_VAR 0 4
12292: PUSH
12293: LD_VAR 0 9
12297: PUSH
12298: LD_INT 1
12300: ARRAY
12301: PPUSH
12302: LD_VAR 0 9
12306: PUSH
12307: LD_INT 2
12309: ARRAY
12310: PPUSH
12311: CALL_OW 546
12315: ST_TO_ADDR
// if hex [ 1 ] then
12316: LD_VAR 0 4
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: IFFALSE 12328
// continue ;
12326: GO 12216
// h := hex [ 2 ] ;
12328: LD_ADDR_VAR 0 13
12332: PUSH
12333: LD_VAR 0 4
12337: PUSH
12338: LD_INT 2
12340: ARRAY
12341: ST_TO_ADDR
// if h + 7 < height then
12342: LD_VAR 0 13
12346: PUSH
12347: LD_INT 7
12349: PLUS
12350: PUSH
12351: LD_VAR 0 15
12355: LESS
12356: IFFALSE 12385
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12358: LD_ADDR_VAR 0 18
12362: PUSH
12363: LD_INT 7
12365: PUSH
12366: LD_INT 28
12368: PUSH
12369: LD_INT 45
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_VAR 0 12
12381: ARRAY
12382: ST_TO_ADDR
// break ;
12383: GO 12387
// end ; end ; end ;
12385: GO 12216
12387: POP
12388: POP
// end ; if not weapon then
12389: LD_VAR 0 18
12393: NOT
12394: IFFALSE 12454
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12396: LD_ADDR_VAR 0 5
12400: PUSH
12401: LD_VAR 0 5
12405: PUSH
12406: LD_INT 11
12408: PUSH
12409: LD_INT 30
12411: PUSH
12412: LD_INT 49
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: DIFF
12420: ST_TO_ADDR
// if not list then
12421: LD_VAR 0 5
12425: NOT
12426: IFFALSE 12430
// exit ;
12428: GO 12572
// weapon := list [ rand ( 1 , list ) ] ;
12430: LD_ADDR_VAR 0 18
12434: PUSH
12435: LD_VAR 0 5
12439: PUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_VAR 0 5
12447: PPUSH
12448: CALL_OW 12
12452: ARRAY
12453: ST_TO_ADDR
// end ; if weapon then
12454: LD_VAR 0 18
12458: IFFALSE 12572
// begin tmp := CostOfWeapon ( weapon ) ;
12460: LD_ADDR_VAR 0 14
12464: PUSH
12465: LD_VAR 0 18
12469: PPUSH
12470: CALL_OW 451
12474: ST_TO_ADDR
// j := GetBase ( tower ) ;
12475: LD_ADDR_VAR 0 9
12479: PUSH
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 274
12489: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12490: LD_VAR 0 9
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 275
12502: PUSH
12503: LD_VAR 0 14
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: GREATEREQUAL
12512: PUSH
12513: LD_VAR 0 9
12517: PPUSH
12518: LD_INT 2
12520: PPUSH
12521: CALL_OW 275
12525: PUSH
12526: LD_VAR 0 14
12530: PUSH
12531: LD_INT 2
12533: ARRAY
12534: GREATEREQUAL
12535: AND
12536: PUSH
12537: LD_VAR 0 9
12541: PPUSH
12542: LD_INT 3
12544: PPUSH
12545: CALL_OW 275
12549: PUSH
12550: LD_VAR 0 14
12554: PUSH
12555: LD_INT 3
12557: ARRAY
12558: GREATEREQUAL
12559: AND
12560: IFFALSE 12572
// result := weapon ;
12562: LD_ADDR_VAR 0 3
12566: PUSH
12567: LD_VAR 0 18
12571: ST_TO_ADDR
// end ; end ;
12572: LD_VAR 0 3
12576: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12577: LD_INT 0
12579: PPUSH
12580: PPUSH
// result := true ;
12581: LD_ADDR_VAR 0 3
12585: PUSH
12586: LD_INT 1
12588: ST_TO_ADDR
// if array1 = array2 then
12589: LD_VAR 0 1
12593: PUSH
12594: LD_VAR 0 2
12598: EQUAL
12599: IFFALSE 12659
// begin for i = 1 to array1 do
12601: LD_ADDR_VAR 0 4
12605: PUSH
12606: DOUBLE
12607: LD_INT 1
12609: DEC
12610: ST_TO_ADDR
12611: LD_VAR 0 1
12615: PUSH
12616: FOR_TO
12617: IFFALSE 12655
// if array1 [ i ] <> array2 [ i ] then
12619: LD_VAR 0 1
12623: PUSH
12624: LD_VAR 0 4
12628: ARRAY
12629: PUSH
12630: LD_VAR 0 2
12634: PUSH
12635: LD_VAR 0 4
12639: ARRAY
12640: NONEQUAL
12641: IFFALSE 12653
// begin result := false ;
12643: LD_ADDR_VAR 0 3
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// break ;
12651: GO 12655
// end ;
12653: GO 12616
12655: POP
12656: POP
// end else
12657: GO 12667
// result := false ;
12659: LD_ADDR_VAR 0 3
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// end ;
12667: LD_VAR 0 3
12671: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12672: LD_INT 0
12674: PPUSH
12675: PPUSH
// if not array1 or not array2 then
12676: LD_VAR 0 1
12680: NOT
12681: PUSH
12682: LD_VAR 0 2
12686: NOT
12687: OR
12688: IFFALSE 12692
// exit ;
12690: GO 12756
// result := true ;
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: LD_INT 1
12699: ST_TO_ADDR
// for i = 1 to array1 do
12700: LD_ADDR_VAR 0 4
12704: PUSH
12705: DOUBLE
12706: LD_INT 1
12708: DEC
12709: ST_TO_ADDR
12710: LD_VAR 0 1
12714: PUSH
12715: FOR_TO
12716: IFFALSE 12754
// if array1 [ i ] <> array2 [ i ] then
12718: LD_VAR 0 1
12722: PUSH
12723: LD_VAR 0 4
12727: ARRAY
12728: PUSH
12729: LD_VAR 0 2
12733: PUSH
12734: LD_VAR 0 4
12738: ARRAY
12739: NONEQUAL
12740: IFFALSE 12752
// begin result := false ;
12742: LD_ADDR_VAR 0 3
12746: PUSH
12747: LD_INT 0
12749: ST_TO_ADDR
// break ;
12750: GO 12754
// end ;
12752: GO 12715
12754: POP
12755: POP
// end ;
12756: LD_VAR 0 3
12760: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12761: LD_INT 0
12763: PPUSH
12764: PPUSH
12765: PPUSH
// pom := GetBase ( fac ) ;
12766: LD_ADDR_VAR 0 5
12770: PUSH
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 274
12780: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12781: LD_ADDR_VAR 0 4
12785: PUSH
12786: LD_VAR 0 2
12790: PUSH
12791: LD_INT 1
12793: ARRAY
12794: PPUSH
12795: LD_VAR 0 2
12799: PUSH
12800: LD_INT 2
12802: ARRAY
12803: PPUSH
12804: LD_VAR 0 2
12808: PUSH
12809: LD_INT 3
12811: ARRAY
12812: PPUSH
12813: LD_VAR 0 2
12817: PUSH
12818: LD_INT 4
12820: ARRAY
12821: PPUSH
12822: CALL_OW 449
12826: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_VAR 0 5
12836: PPUSH
12837: LD_INT 1
12839: PPUSH
12840: CALL_OW 275
12844: PUSH
12845: LD_VAR 0 4
12849: PUSH
12850: LD_INT 1
12852: ARRAY
12853: GREATEREQUAL
12854: PUSH
12855: LD_VAR 0 5
12859: PPUSH
12860: LD_INT 2
12862: PPUSH
12863: CALL_OW 275
12867: PUSH
12868: LD_VAR 0 4
12872: PUSH
12873: LD_INT 2
12875: ARRAY
12876: GREATEREQUAL
12877: AND
12878: PUSH
12879: LD_VAR 0 5
12883: PPUSH
12884: LD_INT 3
12886: PPUSH
12887: CALL_OW 275
12891: PUSH
12892: LD_VAR 0 4
12896: PUSH
12897: LD_INT 3
12899: ARRAY
12900: GREATEREQUAL
12901: AND
12902: ST_TO_ADDR
// end ;
12903: LD_VAR 0 3
12907: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
12912: PPUSH
12913: PPUSH
// pom := GetBase ( building ) ;
12914: LD_ADDR_VAR 0 3
12918: PUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: CALL_OW 274
12928: ST_TO_ADDR
// if not pom then
12929: LD_VAR 0 3
12933: NOT
12934: IFFALSE 12938
// exit ;
12936: GO 13108
// btype := GetBType ( building ) ;
12938: LD_ADDR_VAR 0 5
12942: PUSH
12943: LD_VAR 0 1
12947: PPUSH
12948: CALL_OW 266
12952: ST_TO_ADDR
// if btype = b_armoury then
12953: LD_VAR 0 5
12957: PUSH
12958: LD_INT 4
12960: EQUAL
12961: IFFALSE 12971
// btype := b_barracks ;
12963: LD_ADDR_VAR 0 5
12967: PUSH
12968: LD_INT 5
12970: ST_TO_ADDR
// if btype = b_depot then
12971: LD_VAR 0 5
12975: PUSH
12976: LD_INT 0
12978: EQUAL
12979: IFFALSE 12989
// btype := b_warehouse ;
12981: LD_ADDR_VAR 0 5
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
// if btype = b_workshop then
12989: LD_VAR 0 5
12993: PUSH
12994: LD_INT 2
12996: EQUAL
12997: IFFALSE 13007
// btype := b_factory ;
12999: LD_ADDR_VAR 0 5
13003: PUSH
13004: LD_INT 3
13006: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13007: LD_ADDR_VAR 0 4
13011: PUSH
13012: LD_VAR 0 5
13016: PPUSH
13017: LD_VAR 0 1
13021: PPUSH
13022: CALL_OW 248
13026: PPUSH
13027: CALL_OW 450
13031: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13032: LD_ADDR_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: CALL_OW 275
13049: PUSH
13050: LD_VAR 0 4
13054: PUSH
13055: LD_INT 1
13057: ARRAY
13058: GREATEREQUAL
13059: PUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 2
13067: PPUSH
13068: CALL_OW 275
13072: PUSH
13073: LD_VAR 0 4
13077: PUSH
13078: LD_INT 2
13080: ARRAY
13081: GREATEREQUAL
13082: AND
13083: PUSH
13084: LD_VAR 0 3
13088: PPUSH
13089: LD_INT 3
13091: PPUSH
13092: CALL_OW 275
13096: PUSH
13097: LD_VAR 0 4
13101: PUSH
13102: LD_INT 3
13104: ARRAY
13105: GREATEREQUAL
13106: AND
13107: ST_TO_ADDR
// end ;
13108: LD_VAR 0 2
13112: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13113: LD_INT 0
13115: PPUSH
13116: PPUSH
13117: PPUSH
// pom := GetBase ( building ) ;
13118: LD_ADDR_VAR 0 4
13122: PUSH
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 274
13132: ST_TO_ADDR
// if not pom then
13133: LD_VAR 0 4
13137: NOT
13138: IFFALSE 13142
// exit ;
13140: GO 13243
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13142: LD_ADDR_VAR 0 5
13146: PUSH
13147: LD_VAR 0 2
13151: PPUSH
13152: LD_VAR 0 1
13156: PPUSH
13157: CALL_OW 248
13161: PPUSH
13162: CALL_OW 450
13166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: LD_VAR 0 4
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 275
13184: PUSH
13185: LD_VAR 0 5
13189: PUSH
13190: LD_INT 1
13192: ARRAY
13193: GREATEREQUAL
13194: PUSH
13195: LD_VAR 0 4
13199: PPUSH
13200: LD_INT 2
13202: PPUSH
13203: CALL_OW 275
13207: PUSH
13208: LD_VAR 0 5
13212: PUSH
13213: LD_INT 2
13215: ARRAY
13216: GREATEREQUAL
13217: AND
13218: PUSH
13219: LD_VAR 0 4
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: CALL_OW 275
13231: PUSH
13232: LD_VAR 0 5
13236: PUSH
13237: LD_INT 3
13239: ARRAY
13240: GREATEREQUAL
13241: AND
13242: ST_TO_ADDR
// end ;
13243: LD_VAR 0 3
13247: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
// result := false ;
13261: LD_ADDR_VAR 0 8
13265: PUSH
13266: LD_INT 0
13268: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13269: LD_VAR 0 5
13273: NOT
13274: PUSH
13275: LD_VAR 0 1
13279: NOT
13280: OR
13281: PUSH
13282: LD_VAR 0 2
13286: NOT
13287: OR
13288: PUSH
13289: LD_VAR 0 3
13293: NOT
13294: OR
13295: IFFALSE 13299
// exit ;
13297: GO 14113
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13299: LD_ADDR_VAR 0 14
13303: PUSH
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_VAR 0 2
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_VAR 0 5
13328: PUSH
13329: LD_INT 1
13331: ARRAY
13332: PPUSH
13333: CALL_OW 248
13337: PPUSH
13338: LD_INT 0
13340: PPUSH
13341: CALL 15366 0 6
13345: ST_TO_ADDR
// if not hexes then
13346: LD_VAR 0 14
13350: NOT
13351: IFFALSE 13355
// exit ;
13353: GO 14113
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13355: LD_ADDR_VAR 0 17
13359: PUSH
13360: LD_VAR 0 5
13364: PPUSH
13365: LD_INT 22
13367: PUSH
13368: LD_VAR 0 13
13372: PPUSH
13373: CALL_OW 255
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 2
13384: PUSH
13385: LD_INT 30
13387: PUSH
13388: LD_INT 0
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 72
13418: ST_TO_ADDR
// for i = 1 to hexes do
13419: LD_ADDR_VAR 0 9
13423: PUSH
13424: DOUBLE
13425: LD_INT 1
13427: DEC
13428: ST_TO_ADDR
13429: LD_VAR 0 14
13433: PUSH
13434: FOR_TO
13435: IFFALSE 14111
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13437: LD_ADDR_VAR 0 13
13441: PUSH
13442: LD_VAR 0 14
13446: PUSH
13447: LD_VAR 0 9
13451: ARRAY
13452: PUSH
13453: LD_INT 1
13455: ARRAY
13456: PPUSH
13457: LD_VAR 0 14
13461: PUSH
13462: LD_VAR 0 9
13466: ARRAY
13467: PUSH
13468: LD_INT 2
13470: ARRAY
13471: PPUSH
13472: CALL_OW 428
13476: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13477: LD_VAR 0 14
13481: PUSH
13482: LD_VAR 0 9
13486: ARRAY
13487: PUSH
13488: LD_INT 1
13490: ARRAY
13491: PPUSH
13492: LD_VAR 0 14
13496: PUSH
13497: LD_VAR 0 9
13501: ARRAY
13502: PUSH
13503: LD_INT 2
13505: ARRAY
13506: PPUSH
13507: CALL_OW 351
13511: PUSH
13512: LD_VAR 0 14
13516: PUSH
13517: LD_VAR 0 9
13521: ARRAY
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PPUSH
13527: LD_VAR 0 14
13531: PUSH
13532: LD_VAR 0 9
13536: ARRAY
13537: PUSH
13538: LD_INT 2
13540: ARRAY
13541: PPUSH
13542: CALL_OW 488
13546: NOT
13547: OR
13548: PUSH
13549: LD_VAR 0 13
13553: PPUSH
13554: CALL_OW 247
13558: PUSH
13559: LD_INT 3
13561: EQUAL
13562: OR
13563: IFFALSE 13569
// exit ;
13565: POP
13566: POP
13567: GO 14113
// if not tmp then
13569: LD_VAR 0 13
13573: NOT
13574: IFFALSE 13578
// continue ;
13576: GO 13434
// result := true ;
13578: LD_ADDR_VAR 0 8
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13586: LD_VAR 0 6
13590: PUSH
13591: LD_VAR 0 13
13595: PPUSH
13596: CALL_OW 247
13600: PUSH
13601: LD_INT 2
13603: EQUAL
13604: AND
13605: PUSH
13606: LD_VAR 0 13
13610: PPUSH
13611: CALL_OW 263
13615: PUSH
13616: LD_INT 1
13618: EQUAL
13619: AND
13620: IFFALSE 13784
// begin if IsDrivenBy ( tmp ) then
13622: LD_VAR 0 13
13626: PPUSH
13627: CALL_OW 311
13631: IFFALSE 13635
// continue ;
13633: GO 13434
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13635: LD_VAR 0 6
13639: PPUSH
13640: LD_INT 3
13642: PUSH
13643: LD_INT 60
13645: PUSH
13646: EMPTY
13647: LIST
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 3
13655: PUSH
13656: LD_INT 55
13658: PUSH
13659: EMPTY
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PPUSH
13670: CALL_OW 72
13674: IFFALSE 13782
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13676: LD_ADDR_VAR 0 18
13680: PUSH
13681: LD_VAR 0 6
13685: PPUSH
13686: LD_INT 3
13688: PUSH
13689: LD_INT 60
13691: PUSH
13692: EMPTY
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 3
13701: PUSH
13702: LD_INT 55
13704: PUSH
13705: EMPTY
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 72
13720: PUSH
13721: LD_INT 1
13723: ARRAY
13724: ST_TO_ADDR
// if IsInUnit ( driver ) then
13725: LD_VAR 0 18
13729: PPUSH
13730: CALL_OW 310
13734: IFFALSE 13745
// ComExit ( driver ) ;
13736: LD_VAR 0 18
13740: PPUSH
13741: CALL 39145 0 1
// AddComEnterUnit ( driver , tmp ) ;
13745: LD_VAR 0 18
13749: PPUSH
13750: LD_VAR 0 13
13754: PPUSH
13755: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13759: LD_VAR 0 18
13763: PPUSH
13764: LD_VAR 0 7
13768: PPUSH
13769: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13773: LD_VAR 0 18
13777: PPUSH
13778: CALL_OW 181
// end ; continue ;
13782: GO 13434
// end ; if not cleaners or not tmp in cleaners then
13784: LD_VAR 0 6
13788: NOT
13789: PUSH
13790: LD_VAR 0 13
13794: PUSH
13795: LD_VAR 0 6
13799: IN
13800: NOT
13801: OR
13802: IFFALSE 14109
// begin if dep then
13804: LD_VAR 0 17
13808: IFFALSE 13944
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13810: LD_ADDR_VAR 0 16
13814: PUSH
13815: LD_VAR 0 17
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: CALL_OW 250
13828: PPUSH
13829: LD_VAR 0 17
13833: PUSH
13834: LD_INT 1
13836: ARRAY
13837: PPUSH
13838: CALL_OW 254
13842: PPUSH
13843: LD_INT 5
13845: PPUSH
13846: CALL_OW 272
13850: PUSH
13851: LD_VAR 0 17
13855: PUSH
13856: LD_INT 1
13858: ARRAY
13859: PPUSH
13860: CALL_OW 251
13864: PPUSH
13865: LD_VAR 0 17
13869: PUSH
13870: LD_INT 1
13872: ARRAY
13873: PPUSH
13874: CALL_OW 254
13878: PPUSH
13879: LD_INT 5
13881: PPUSH
13882: CALL_OW 273
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13891: LD_VAR 0 16
13895: PUSH
13896: LD_INT 1
13898: ARRAY
13899: PPUSH
13900: LD_VAR 0 16
13904: PUSH
13905: LD_INT 2
13907: ARRAY
13908: PPUSH
13909: CALL_OW 488
13913: IFFALSE 13944
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13915: LD_VAR 0 13
13919: PPUSH
13920: LD_VAR 0 16
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PPUSH
13929: LD_VAR 0 16
13933: PUSH
13934: LD_INT 2
13936: ARRAY
13937: PPUSH
13938: CALL_OW 111
// continue ;
13942: GO 13434
// end ; end ; r := GetDir ( tmp ) ;
13944: LD_ADDR_VAR 0 15
13948: PUSH
13949: LD_VAR 0 13
13953: PPUSH
13954: CALL_OW 254
13958: ST_TO_ADDR
// if r = 5 then
13959: LD_VAR 0 15
13963: PUSH
13964: LD_INT 5
13966: EQUAL
13967: IFFALSE 13977
// r := 0 ;
13969: LD_ADDR_VAR 0 15
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// for j = r to 5 do
13977: LD_ADDR_VAR 0 10
13981: PUSH
13982: DOUBLE
13983: LD_VAR 0 15
13987: DEC
13988: ST_TO_ADDR
13989: LD_INT 5
13991: PUSH
13992: FOR_TO
13993: IFFALSE 14107
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13995: LD_ADDR_VAR 0 11
13999: PUSH
14000: LD_VAR 0 13
14004: PPUSH
14005: CALL_OW 250
14009: PPUSH
14010: LD_VAR 0 10
14014: PPUSH
14015: LD_INT 2
14017: PPUSH
14018: CALL_OW 272
14022: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14023: LD_ADDR_VAR 0 12
14027: PUSH
14028: LD_VAR 0 13
14032: PPUSH
14033: CALL_OW 251
14037: PPUSH
14038: LD_VAR 0 10
14042: PPUSH
14043: LD_INT 2
14045: PPUSH
14046: CALL_OW 273
14050: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14051: LD_VAR 0 11
14055: PPUSH
14056: LD_VAR 0 12
14060: PPUSH
14061: CALL_OW 488
14065: PUSH
14066: LD_VAR 0 11
14070: PPUSH
14071: LD_VAR 0 12
14075: PPUSH
14076: CALL_OW 428
14080: NOT
14081: AND
14082: IFFALSE 14105
// begin ComMoveXY ( tmp , _x , _y ) ;
14084: LD_VAR 0 13
14088: PPUSH
14089: LD_VAR 0 11
14093: PPUSH
14094: LD_VAR 0 12
14098: PPUSH
14099: CALL_OW 111
// break ;
14103: GO 14107
// end ; end ;
14105: GO 13992
14107: POP
14108: POP
// end ; end ;
14109: GO 13434
14111: POP
14112: POP
// end ;
14113: LD_VAR 0 8
14117: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14118: LD_INT 0
14120: PPUSH
// result := true ;
14121: LD_ADDR_VAR 0 3
14125: PUSH
14126: LD_INT 1
14128: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14129: LD_VAR 0 2
14133: PUSH
14134: LD_INT 24
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14148
14140: LD_INT 33
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14173
14148: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 32
14156: PPUSH
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 321
14166: PUSH
14167: LD_INT 2
14169: EQUAL
14170: ST_TO_ADDR
14171: GO 14489
14173: LD_INT 20
14175: DOUBLE
14176: EQUAL
14177: IFTRUE 14181
14179: GO 14206
14181: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14182: LD_ADDR_VAR 0 3
14186: PUSH
14187: LD_INT 6
14189: PPUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 321
14199: PUSH
14200: LD_INT 2
14202: EQUAL
14203: ST_TO_ADDR
14204: GO 14489
14206: LD_INT 22
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14220
14212: LD_INT 36
14214: DOUBLE
14215: EQUAL
14216: IFTRUE 14220
14218: GO 14245
14220: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14221: LD_ADDR_VAR 0 3
14225: PUSH
14226: LD_INT 15
14228: PPUSH
14229: LD_VAR 0 1
14233: PPUSH
14234: CALL_OW 321
14238: PUSH
14239: LD_INT 2
14241: EQUAL
14242: ST_TO_ADDR
14243: GO 14489
14245: LD_INT 30
14247: DOUBLE
14248: EQUAL
14249: IFTRUE 14253
14251: GO 14278
14253: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: LD_INT 20
14261: PPUSH
14262: LD_VAR 0 1
14266: PPUSH
14267: CALL_OW 321
14271: PUSH
14272: LD_INT 2
14274: EQUAL
14275: ST_TO_ADDR
14276: GO 14489
14278: LD_INT 28
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14292
14284: LD_INT 21
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14317
14292: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14293: LD_ADDR_VAR 0 3
14297: PUSH
14298: LD_INT 21
14300: PPUSH
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 321
14310: PUSH
14311: LD_INT 2
14313: EQUAL
14314: ST_TO_ADDR
14315: GO 14489
14317: LD_INT 16
14319: DOUBLE
14320: EQUAL
14321: IFTRUE 14325
14323: GO 14350
14325: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14326: LD_ADDR_VAR 0 3
14330: PUSH
14331: LD_INT 84
14333: PPUSH
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL_OW 321
14343: PUSH
14344: LD_INT 2
14346: EQUAL
14347: ST_TO_ADDR
14348: GO 14489
14350: LD_INT 19
14352: DOUBLE
14353: EQUAL
14354: IFTRUE 14364
14356: LD_INT 23
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14389
14364: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14365: LD_ADDR_VAR 0 3
14369: PUSH
14370: LD_INT 83
14372: PPUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 321
14382: PUSH
14383: LD_INT 2
14385: EQUAL
14386: ST_TO_ADDR
14387: GO 14489
14389: LD_INT 17
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14422
14397: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14398: LD_ADDR_VAR 0 3
14402: PUSH
14403: LD_INT 39
14405: PPUSH
14406: LD_VAR 0 1
14410: PPUSH
14411: CALL_OW 321
14415: PUSH
14416: LD_INT 2
14418: EQUAL
14419: ST_TO_ADDR
14420: GO 14489
14422: LD_INT 18
14424: DOUBLE
14425: EQUAL
14426: IFTRUE 14430
14428: GO 14455
14430: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: LD_INT 40
14438: PPUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 321
14448: PUSH
14449: LD_INT 2
14451: EQUAL
14452: ST_TO_ADDR
14453: GO 14489
14455: LD_INT 27
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14488
14463: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 35
14471: PPUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 321
14481: PUSH
14482: LD_INT 2
14484: EQUAL
14485: ST_TO_ADDR
14486: GO 14489
14488: POP
// end ;
14489: LD_VAR 0 3
14493: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14494: LD_INT 0
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
14503: PPUSH
14504: PPUSH
14505: PPUSH
14506: PPUSH
// result := false ;
14507: LD_ADDR_VAR 0 6
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
// if btype = b_depot then
14515: LD_VAR 0 2
14519: PUSH
14520: LD_INT 0
14522: EQUAL
14523: IFFALSE 14535
// begin result := true ;
14525: LD_ADDR_VAR 0 6
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// exit ;
14533: GO 15361
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14535: LD_VAR 0 1
14539: NOT
14540: PUSH
14541: LD_VAR 0 1
14545: PPUSH
14546: CALL_OW 266
14550: PUSH
14551: LD_INT 0
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: IN
14561: NOT
14562: OR
14563: PUSH
14564: LD_VAR 0 2
14568: NOT
14569: OR
14570: PUSH
14571: LD_VAR 0 5
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: IN
14602: NOT
14603: OR
14604: PUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: LD_VAR 0 4
14614: PPUSH
14615: CALL_OW 488
14619: NOT
14620: OR
14621: IFFALSE 14625
// exit ;
14623: GO 15361
// side := GetSide ( depot ) ;
14625: LD_ADDR_VAR 0 9
14629: PUSH
14630: LD_VAR 0 1
14634: PPUSH
14635: CALL_OW 255
14639: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14640: LD_VAR 0 9
14644: PPUSH
14645: LD_VAR 0 2
14649: PPUSH
14650: CALL 14118 0 2
14654: NOT
14655: IFFALSE 14659
// exit ;
14657: GO 15361
// pom := GetBase ( depot ) ;
14659: LD_ADDR_VAR 0 10
14663: PUSH
14664: LD_VAR 0 1
14668: PPUSH
14669: CALL_OW 274
14673: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14674: LD_ADDR_VAR 0 11
14678: PUSH
14679: LD_VAR 0 2
14683: PPUSH
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 248
14693: PPUSH
14694: CALL_OW 450
14698: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14699: LD_VAR 0 10
14703: PPUSH
14704: LD_INT 1
14706: PPUSH
14707: CALL_OW 275
14711: PUSH
14712: LD_VAR 0 11
14716: PUSH
14717: LD_INT 1
14719: ARRAY
14720: GREATEREQUAL
14721: PUSH
14722: LD_VAR 0 10
14726: PPUSH
14727: LD_INT 2
14729: PPUSH
14730: CALL_OW 275
14734: PUSH
14735: LD_VAR 0 11
14739: PUSH
14740: LD_INT 2
14742: ARRAY
14743: GREATEREQUAL
14744: AND
14745: PUSH
14746: LD_VAR 0 10
14750: PPUSH
14751: LD_INT 3
14753: PPUSH
14754: CALL_OW 275
14758: PUSH
14759: LD_VAR 0 11
14763: PUSH
14764: LD_INT 3
14766: ARRAY
14767: GREATEREQUAL
14768: AND
14769: NOT
14770: IFFALSE 14774
// exit ;
14772: GO 15361
// if GetBType ( depot ) = b_depot then
14774: LD_VAR 0 1
14778: PPUSH
14779: CALL_OW 266
14783: PUSH
14784: LD_INT 0
14786: EQUAL
14787: IFFALSE 14799
// dist := 28 else
14789: LD_ADDR_VAR 0 14
14793: PUSH
14794: LD_INT 28
14796: ST_TO_ADDR
14797: GO 14807
// dist := 36 ;
14799: LD_ADDR_VAR 0 14
14803: PUSH
14804: LD_INT 36
14806: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_VAR 0 4
14821: PPUSH
14822: CALL_OW 297
14826: PUSH
14827: LD_VAR 0 14
14831: GREATER
14832: IFFALSE 14836
// exit ;
14834: GO 15361
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14836: LD_ADDR_VAR 0 12
14840: PUSH
14841: LD_VAR 0 2
14845: PPUSH
14846: LD_VAR 0 3
14850: PPUSH
14851: LD_VAR 0 4
14855: PPUSH
14856: LD_VAR 0 5
14860: PPUSH
14861: LD_VAR 0 1
14865: PPUSH
14866: CALL_OW 248
14870: PPUSH
14871: LD_INT 0
14873: PPUSH
14874: CALL 15366 0 6
14878: ST_TO_ADDR
// if not hexes then
14879: LD_VAR 0 12
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 15361
// hex := GetHexInfo ( x , y ) ;
14888: LD_ADDR_VAR 0 15
14892: PUSH
14893: LD_VAR 0 3
14897: PPUSH
14898: LD_VAR 0 4
14902: PPUSH
14903: CALL_OW 546
14907: ST_TO_ADDR
// if hex [ 1 ] then
14908: LD_VAR 0 15
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: IFFALSE 14920
// exit ;
14918: GO 15361
// height := hex [ 2 ] ;
14920: LD_ADDR_VAR 0 13
14924: PUSH
14925: LD_VAR 0 15
14929: PUSH
14930: LD_INT 2
14932: ARRAY
14933: ST_TO_ADDR
// for i = 1 to hexes do
14934: LD_ADDR_VAR 0 7
14938: PUSH
14939: DOUBLE
14940: LD_INT 1
14942: DEC
14943: ST_TO_ADDR
14944: LD_VAR 0 12
14948: PUSH
14949: FOR_TO
14950: IFFALSE 15280
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14952: LD_VAR 0 12
14956: PUSH
14957: LD_VAR 0 7
14961: ARRAY
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_VAR 0 12
14971: PUSH
14972: LD_VAR 0 7
14976: ARRAY
14977: PUSH
14978: LD_INT 2
14980: ARRAY
14981: PPUSH
14982: CALL_OW 488
14986: NOT
14987: PUSH
14988: LD_VAR 0 12
14992: PUSH
14993: LD_VAR 0 7
14997: ARRAY
14998: PUSH
14999: LD_INT 1
15001: ARRAY
15002: PPUSH
15003: LD_VAR 0 12
15007: PUSH
15008: LD_VAR 0 7
15012: ARRAY
15013: PUSH
15014: LD_INT 2
15016: ARRAY
15017: PPUSH
15018: CALL_OW 428
15022: PUSH
15023: LD_INT 0
15025: GREATER
15026: OR
15027: PUSH
15028: LD_VAR 0 12
15032: PUSH
15033: LD_VAR 0 7
15037: ARRAY
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PPUSH
15043: LD_VAR 0 12
15047: PUSH
15048: LD_VAR 0 7
15052: ARRAY
15053: PUSH
15054: LD_INT 2
15056: ARRAY
15057: PPUSH
15058: CALL_OW 351
15062: OR
15063: IFFALSE 15069
// exit ;
15065: POP
15066: POP
15067: GO 15361
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15069: LD_ADDR_VAR 0 8
15073: PUSH
15074: LD_VAR 0 12
15078: PUSH
15079: LD_VAR 0 7
15083: ARRAY
15084: PUSH
15085: LD_INT 1
15087: ARRAY
15088: PPUSH
15089: LD_VAR 0 12
15093: PUSH
15094: LD_VAR 0 7
15098: ARRAY
15099: PUSH
15100: LD_INT 2
15102: ARRAY
15103: PPUSH
15104: CALL_OW 546
15108: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15109: LD_VAR 0 8
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PUSH
15118: LD_VAR 0 8
15122: PUSH
15123: LD_INT 2
15125: ARRAY
15126: PUSH
15127: LD_VAR 0 13
15131: PUSH
15132: LD_INT 2
15134: PLUS
15135: GREATER
15136: OR
15137: PUSH
15138: LD_VAR 0 8
15142: PUSH
15143: LD_INT 2
15145: ARRAY
15146: PUSH
15147: LD_VAR 0 13
15151: PUSH
15152: LD_INT 2
15154: MINUS
15155: LESS
15156: OR
15157: PUSH
15158: LD_VAR 0 8
15162: PUSH
15163: LD_INT 3
15165: ARRAY
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: LD_INT 8
15172: PUSH
15173: LD_INT 9
15175: PUSH
15176: LD_INT 10
15178: PUSH
15179: LD_INT 11
15181: PUSH
15182: LD_INT 12
15184: PUSH
15185: LD_INT 13
15187: PUSH
15188: LD_INT 16
15190: PUSH
15191: LD_INT 17
15193: PUSH
15194: LD_INT 18
15196: PUSH
15197: LD_INT 19
15199: PUSH
15200: LD_INT 20
15202: PUSH
15203: LD_INT 21
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: IN
15221: NOT
15222: OR
15223: PUSH
15224: LD_VAR 0 8
15228: PUSH
15229: LD_INT 5
15231: ARRAY
15232: NOT
15233: OR
15234: PUSH
15235: LD_VAR 0 8
15239: PUSH
15240: LD_INT 6
15242: ARRAY
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: LD_INT 2
15249: PUSH
15250: LD_INT 7
15252: PUSH
15253: LD_INT 9
15255: PUSH
15256: LD_INT 10
15258: PUSH
15259: LD_INT 11
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: IN
15270: NOT
15271: OR
15272: IFFALSE 15278
// exit ;
15274: POP
15275: POP
15276: GO 15361
// end ;
15278: GO 14949
15280: POP
15281: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15282: LD_VAR 0 9
15286: PPUSH
15287: LD_VAR 0 3
15291: PPUSH
15292: LD_VAR 0 4
15296: PPUSH
15297: LD_INT 20
15299: PPUSH
15300: CALL 7284 0 4
15304: PUSH
15305: LD_INT 4
15307: ARRAY
15308: IFFALSE 15312
// exit ;
15310: GO 15361
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15312: LD_VAR 0 2
15316: PUSH
15317: LD_INT 29
15319: PUSH
15320: LD_INT 30
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: IN
15327: PUSH
15328: LD_VAR 0 3
15332: PPUSH
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 9
15342: PPUSH
15343: CALL_OW 440
15347: NOT
15348: AND
15349: IFFALSE 15353
// exit ;
15351: GO 15361
// result := true ;
15353: LD_ADDR_VAR 0 6
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// end ;
15361: LD_VAR 0 6
15365: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15366: LD_INT 0
15368: PPUSH
15369: PPUSH
15370: PPUSH
15371: PPUSH
15372: PPUSH
15373: PPUSH
15374: PPUSH
15375: PPUSH
15376: PPUSH
15377: PPUSH
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
15409: PPUSH
15410: PPUSH
15411: PPUSH
15412: PPUSH
15413: PPUSH
15414: PPUSH
15415: PPUSH
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
// result = [ ] ;
15426: LD_ADDR_VAR 0 7
15430: PUSH
15431: EMPTY
15432: ST_TO_ADDR
// temp_list = [ ] ;
15433: LD_ADDR_VAR 0 9
15437: PUSH
15438: EMPTY
15439: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15440: LD_VAR 0 4
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: LD_INT 1
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: LD_INT 3
15456: PUSH
15457: LD_INT 4
15459: PUSH
15460: LD_INT 5
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: IN
15471: NOT
15472: PUSH
15473: LD_VAR 0 1
15477: PUSH
15478: LD_INT 0
15480: PUSH
15481: LD_INT 1
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: IN
15488: PUSH
15489: LD_VAR 0 5
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: LD_INT 2
15499: PUSH
15500: LD_INT 3
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: LIST
15507: IN
15508: NOT
15509: AND
15510: OR
15511: IFFALSE 15515
// exit ;
15513: GO 33906
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15515: LD_VAR 0 1
15519: PUSH
15520: LD_INT 6
15522: PUSH
15523: LD_INT 7
15525: PUSH
15526: LD_INT 8
15528: PUSH
15529: LD_INT 13
15531: PUSH
15532: LD_INT 12
15534: PUSH
15535: LD_INT 15
15537: PUSH
15538: LD_INT 11
15540: PUSH
15541: LD_INT 14
15543: PUSH
15544: LD_INT 10
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: IN
15558: IFFALSE 15568
// btype = b_lab ;
15560: LD_ADDR_VAR 0 1
15564: PUSH
15565: LD_INT 6
15567: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15568: LD_VAR 0 6
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 2
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: IN
15587: NOT
15588: PUSH
15589: LD_VAR 0 1
15593: PUSH
15594: LD_INT 0
15596: PUSH
15597: LD_INT 1
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: LD_INT 6
15608: PUSH
15609: LD_INT 36
15611: PUSH
15612: LD_INT 4
15614: PUSH
15615: LD_INT 5
15617: PUSH
15618: LD_INT 31
15620: PUSH
15621: LD_INT 32
15623: PUSH
15624: LD_INT 33
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: IN
15640: NOT
15641: PUSH
15642: LD_VAR 0 6
15646: PUSH
15647: LD_INT 1
15649: EQUAL
15650: AND
15651: OR
15652: PUSH
15653: LD_VAR 0 1
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: LD_INT 3
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: IN
15668: NOT
15669: PUSH
15670: LD_VAR 0 6
15674: PUSH
15675: LD_INT 2
15677: EQUAL
15678: AND
15679: OR
15680: IFFALSE 15690
// mode = 0 ;
15682: LD_ADDR_VAR 0 6
15686: PUSH
15687: LD_INT 0
15689: ST_TO_ADDR
// case mode of 0 :
15690: LD_VAR 0 6
15694: PUSH
15695: LD_INT 0
15697: DOUBLE
15698: EQUAL
15699: IFTRUE 15703
15701: GO 27156
15703: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15704: LD_ADDR_VAR 0 11
15708: PUSH
15709: LD_INT 0
15711: PUSH
15712: LD_INT 0
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 0
15721: PUSH
15722: LD_INT 1
15724: NEG
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 1
15732: PUSH
15733: LD_INT 0
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 1
15742: PUSH
15743: LD_INT 1
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 0
15752: PUSH
15753: LD_INT 1
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 1
15762: NEG
15763: PUSH
15764: LD_INT 0
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 1
15773: NEG
15774: PUSH
15775: LD_INT 1
15777: NEG
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 1
15785: NEG
15786: PUSH
15787: LD_INT 2
15789: NEG
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 0
15797: PUSH
15798: LD_INT 2
15800: NEG
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: LD_INT 1
15811: NEG
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 0
15829: PUSH
15830: LD_INT 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 1
15839: NEG
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: LD_INT 3
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 3
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 1
15870: NEG
15871: PUSH
15872: LD_INT 2
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15897: LD_ADDR_VAR 0 12
15901: PUSH
15902: LD_INT 0
15904: PUSH
15905: LD_INT 0
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 0
15914: PUSH
15915: LD_INT 1
15917: NEG
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 1
15925: PUSH
15926: LD_INT 0
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 1
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 0
15945: PUSH
15946: LD_INT 1
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: NEG
15956: PUSH
15957: LD_INT 0
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 1
15966: NEG
15967: PUSH
15968: LD_INT 1
15970: NEG
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 1
15978: PUSH
15979: LD_INT 1
15981: NEG
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 2
15989: PUSH
15990: LD_INT 0
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 2
15999: PUSH
16000: LD_INT 1
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 1
16009: NEG
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 2
16020: NEG
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 2
16031: NEG
16032: PUSH
16033: LD_INT 1
16035: NEG
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 2
16043: NEG
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 3
16054: NEG
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 3
16065: NEG
16066: PUSH
16067: LD_INT 1
16069: NEG
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16093: LD_ADDR_VAR 0 13
16097: PUSH
16098: LD_INT 0
16100: PUSH
16101: LD_INT 0
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 0
16110: PUSH
16111: LD_INT 1
16113: NEG
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: LD_INT 0
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: LD_INT 1
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 0
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 1
16151: NEG
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 1
16162: NEG
16163: PUSH
16164: LD_INT 1
16166: NEG
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 1
16174: NEG
16175: PUSH
16176: LD_INT 2
16178: NEG
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 2
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 2
16216: NEG
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 2
16228: NEG
16229: PUSH
16230: LD_INT 2
16232: NEG
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 2
16240: NEG
16241: PUSH
16242: LD_INT 3
16244: NEG
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 3
16252: NEG
16253: PUSH
16254: LD_INT 2
16256: NEG
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 3
16264: NEG
16265: PUSH
16266: LD_INT 3
16268: NEG
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16292: LD_ADDR_VAR 0 14
16296: PUSH
16297: LD_INT 0
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 0
16309: PUSH
16310: LD_INT 1
16312: NEG
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: LD_INT 0
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: LD_INT 1
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: NEG
16351: PUSH
16352: LD_INT 0
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 1
16361: NEG
16362: PUSH
16363: LD_INT 1
16365: NEG
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 1
16373: NEG
16374: PUSH
16375: LD_INT 2
16377: NEG
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 0
16385: PUSH
16386: LD_INT 2
16388: NEG
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 1
16396: PUSH
16397: LD_INT 1
16399: NEG
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 2
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: LD_INT 2
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 1
16427: NEG
16428: PUSH
16429: LD_INT 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 1
16438: NEG
16439: PUSH
16440: LD_INT 3
16442: NEG
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: LD_INT 3
16453: NEG
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: LD_INT 2
16464: NEG
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16488: LD_ADDR_VAR 0 15
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: LD_INT 0
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: LD_INT 1
16508: NEG
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: LD_INT 0
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 0
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 1
16546: NEG
16547: PUSH
16548: LD_INT 0
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 1
16557: NEG
16558: PUSH
16559: LD_INT 1
16561: NEG
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 1
16572: NEG
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 1
16600: NEG
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 2
16611: NEG
16612: PUSH
16613: LD_INT 0
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 2
16622: NEG
16623: PUSH
16624: LD_INT 1
16626: NEG
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 2
16634: PUSH
16635: LD_INT 1
16637: NEG
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 3
16645: PUSH
16646: LD_INT 0
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 3
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16681: LD_ADDR_VAR 0 16
16685: PUSH
16686: LD_INT 0
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: LD_INT 1
16701: NEG
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: LD_INT 0
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: LD_INT 1
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 0
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: NEG
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 1
16750: NEG
16751: PUSH
16752: LD_INT 1
16754: NEG
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: NEG
16763: PUSH
16764: LD_INT 2
16766: NEG
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 2
16784: PUSH
16785: LD_INT 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 2
16804: NEG
16805: PUSH
16806: LD_INT 1
16808: NEG
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 2
16816: NEG
16817: PUSH
16818: LD_INT 2
16820: NEG
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 3
16828: PUSH
16829: LD_INT 2
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 3
16838: PUSH
16839: LD_INT 3
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: LD_INT 3
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16874: LD_ADDR_VAR 0 17
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: LD_INT 0
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: LD_INT 1
16894: NEG
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: LD_INT 0
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: LD_INT 1
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 1
16932: NEG
16933: PUSH
16934: LD_INT 0
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: LD_INT 1
16947: NEG
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 1
16955: NEG
16956: PUSH
16957: LD_INT 2
16959: NEG
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 0
16967: PUSH
16968: LD_INT 2
16970: NEG
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: PUSH
16979: LD_INT 1
16981: NEG
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: NEG
17051: PUSH
17052: LD_INT 0
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: NEG
17062: PUSH
17063: LD_INT 1
17065: NEG
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 2
17073: NEG
17074: PUSH
17075: LD_INT 2
17077: NEG
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17104: LD_ADDR_VAR 0 18
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: LD_INT 1
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 0
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: NEG
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 1
17185: NEG
17186: PUSH
17187: LD_INT 2
17189: NEG
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: PUSH
17209: LD_INT 1
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 2
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 1
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: NEG
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 2
17280: NEG
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 2
17291: NEG
17292: PUSH
17293: LD_INT 1
17295: NEG
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 2
17303: NEG
17304: PUSH
17305: LD_INT 2
17307: NEG
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17334: LD_ADDR_VAR 0 19
17338: PUSH
17339: LD_INT 0
17341: PUSH
17342: LD_INT 0
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 0
17351: PUSH
17352: LD_INT 1
17354: NEG
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: LD_INT 0
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 0
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 1
17392: NEG
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: NEG
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 1
17415: NEG
17416: PUSH
17417: LD_INT 2
17419: NEG
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: LD_INT 2
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: LD_INT 1
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 2
17469: PUSH
17470: LD_INT 2
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: LD_INT 2
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 2
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: NEG
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: NEG
17511: PUSH
17512: LD_INT 0
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 2
17521: NEG
17522: PUSH
17523: LD_INT 1
17525: NEG
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: LD_INT 2
17537: NEG
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17564: LD_ADDR_VAR 0 20
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 0
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 0
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 1
17622: NEG
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: LD_INT 1
17637: NEG
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: LD_INT 2
17649: NEG
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 2
17660: NEG
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 1
17668: PUSH
17669: LD_INT 1
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 2
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: LD_INT 2
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 1
17729: NEG
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 2
17740: NEG
17741: PUSH
17742: LD_INT 0
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: NEG
17752: PUSH
17753: LD_INT 1
17755: NEG
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: NEG
17764: PUSH
17765: LD_INT 2
17767: NEG
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17794: LD_ADDR_VAR 0 21
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 0
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 0
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 1
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 2
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 0
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: NEG
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 2
17970: NEG
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: NEG
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: NEG
17994: PUSH
17995: LD_INT 2
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18024: LD_ADDR_VAR 0 22
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 0
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 0
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 1
18082: NEG
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 1
18093: NEG
18094: PUSH
18095: LD_INT 1
18097: NEG
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 1
18105: NEG
18106: PUSH
18107: LD_INT 2
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 0
18117: PUSH
18118: LD_INT 2
18120: NEG
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: LD_INT 1
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 2
18139: PUSH
18140: LD_INT 0
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 2
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 0
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: NEG
18201: PUSH
18202: LD_INT 0
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 2
18211: NEG
18212: PUSH
18213: LD_INT 1
18215: NEG
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 2
18223: NEG
18224: PUSH
18225: LD_INT 2
18227: NEG
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18254: LD_ADDR_VAR 0 23
18258: PUSH
18259: LD_INT 0
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 0
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 1
18312: NEG
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 1
18323: NEG
18324: PUSH
18325: LD_INT 1
18327: NEG
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: LD_INT 2
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 0
18347: PUSH
18348: LD_INT 2
18350: NEG
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 1
18358: PUSH
18359: LD_INT 1
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: LD_INT 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: NEG
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 2
18441: NEG
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 2
18453: NEG
18454: PUSH
18455: LD_INT 2
18457: NEG
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 2
18465: NEG
18466: PUSH
18467: LD_INT 3
18469: NEG
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: LD_INT 3
18481: NEG
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: LD_INT 2
18492: NEG
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 2
18500: PUSH
18501: LD_INT 1
18503: NEG
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18534: LD_ADDR_VAR 0 24
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 0
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: LD_INT 2
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 2
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: NEG
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 2
18721: NEG
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 2
18733: NEG
18734: PUSH
18735: LD_INT 2
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: LD_INT 2
18748: NEG
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 3
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 3
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18810: LD_ADDR_VAR 0 25
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 1
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: NEG
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: NEG
18880: PUSH
18881: LD_INT 1
18883: NEG
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: NEG
18892: PUSH
18893: LD_INT 2
18895: NEG
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: LD_INT 2
18906: NEG
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 1
18914: PUSH
18915: LD_INT 1
18917: NEG
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 2
18986: NEG
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 2
19009: NEG
19010: PUSH
19011: LD_INT 2
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 3
19031: PUSH
19032: LD_INT 2
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: PUSH
19042: LD_INT 3
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19084: LD_ADDR_VAR 0 26
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: LD_INT 1
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: LD_INT 2
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 2
19180: NEG
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: NEG
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 2
19271: NEG
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: NEG
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: PUSH
19296: LD_INT 3
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: LD_INT 3
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: NEG
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: NEG
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19360: LD_ADDR_VAR 0 27
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: NEG
19419: PUSH
19420: LD_INT 0
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: LD_INT 2
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: LD_INT 2
19456: NEG
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: LD_INT 0
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 1
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 2
19536: NEG
19537: PUSH
19538: LD_INT 0
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: NEG
19548: PUSH
19549: LD_INT 1
19551: NEG
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 2
19559: NEG
19560: PUSH
19561: LD_INT 2
19563: NEG
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: NEG
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 3
19593: NEG
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 3
19605: NEG
19606: PUSH
19607: LD_INT 2
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19640: LD_ADDR_VAR 0 28
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: NEG
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: LD_INT 2
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 0
19733: PUSH
19734: LD_INT 2
19736: NEG
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: NEG
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 2
19839: NEG
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: LD_INT 3
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 3
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 3
19875: NEG
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 3
19887: NEG
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19922: LD_ADDR_VAR 0 29
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: LD_INT 1
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: LD_INT 1
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 0
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: LD_INT 1
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: LD_INT 2
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: NEG
20113: PUSH
20114: LD_INT 3
20116: NEG
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: LD_INT 1
20127: NEG
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 3
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 3
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 3
20166: NEG
20167: PUSH
20168: LD_INT 2
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20201: LD_ADDR_VAR 0 30
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 1
20259: NEG
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 1
20270: NEG
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 2
20297: NEG
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 2
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 2
20367: NEG
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 2
20378: NEG
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: LD_INT 3
20394: NEG
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 3
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: LD_INT 3
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 3
20444: NEG
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20479: LD_ADDR_VAR 0 31
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: LD_INT 0
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 1
20499: NEG
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: NEG
20549: PUSH
20550: LD_INT 1
20552: NEG
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: NEG
20561: PUSH
20562: LD_INT 2
20564: NEG
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 2
20644: NEG
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: NEG
20657: PUSH
20658: LD_INT 2
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 2
20668: NEG
20669: PUSH
20670: LD_INT 3
20672: NEG
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 3
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: LD_INT 3
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: LD_INT 2
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 3
20722: NEG
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20757: LD_ADDR_VAR 0 32
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: LD_INT 0
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 0
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 1
20815: NEG
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 1
20826: NEG
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: LD_INT 2
20842: NEG
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: LD_INT 2
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: NEG
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 2
20934: NEG
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: LD_INT 3
20950: NEG
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: LD_INT 2
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 3
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: LD_INT 3
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 2
20989: NEG
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 3
21000: NEG
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21035: LD_ADDR_VAR 0 33
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: LD_INT 0
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 1
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 1
21104: NEG
21105: PUSH
21106: LD_INT 1
21108: NEG
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 1
21116: NEG
21117: PUSH
21118: LD_INT 2
21120: NEG
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 2
21190: NEG
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 2
21201: NEG
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: NEG
21214: PUSH
21215: LD_INT 2
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 2
21225: NEG
21226: PUSH
21227: LD_INT 3
21229: NEG
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 2
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 3
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: LD_INT 3
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 3
21279: NEG
21280: PUSH
21281: LD_INT 2
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21314: LD_ADDR_VAR 0 34
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 1
21383: NEG
21384: PUSH
21385: LD_INT 1
21387: NEG
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 2
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 2
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 2
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 2
21470: NEG
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: NEG
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: LD_INT 3
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: LD_INT 2
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 3
21528: PUSH
21529: LD_INT 2
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 3
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: NEG
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 3
21559: NEG
21560: PUSH
21561: LD_INT 1
21563: NEG
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21594: LD_ADDR_VAR 0 35
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 1
21663: NEG
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: LD_INT 1
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21706: LD_ADDR_VAR 0 36
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 0
21754: PUSH
21755: LD_INT 1
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21818: LD_ADDR_VAR 0 37
21822: PUSH
21823: LD_INT 0
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 0
21835: PUSH
21836: LD_INT 1
21838: NEG
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: LD_INT 1
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: LD_INT 0
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: LD_INT 1
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: NEG
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21930: LD_ADDR_VAR 0 38
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 2
22021: NEG
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22042: LD_ADDR_VAR 0 39
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 0
22059: PUSH
22060: LD_INT 1
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: NEG
22101: PUSH
22102: LD_INT 0
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: LD_INT 2
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22154: LD_ADDR_VAR 0 40
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22266: LD_ADDR_VAR 0 41
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 1
22335: NEG
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: LD_INT 2
22351: NEG
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: LD_INT 1
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 1
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 2
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 2
22421: NEG
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 2
22432: NEG
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: NEG
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 2
22456: NEG
22457: PUSH
22458: LD_INT 3
22460: NEG
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 2
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 3
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 3
22509: PUSH
22510: LD_INT 3
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: NEG
22530: PUSH
22531: LD_INT 1
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 3
22540: NEG
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 3
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 3
22563: NEG
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 3
22575: NEG
22576: PUSH
22577: LD_INT 3
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22616: LD_ADDR_VAR 0 42
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 2
22782: NEG
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 2
22806: NEG
22807: PUSH
22808: LD_INT 3
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: NEG
22819: PUSH
22820: LD_INT 3
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: LD_INT 2
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 3
22862: PUSH
22863: LD_INT 3
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 3
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 3
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 3
22913: NEG
22914: PUSH
22915: LD_INT 2
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 3
22925: NEG
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22966: LD_ADDR_VAR 0 43
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: NEG
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 2
23143: NEG
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: LD_INT 3
23159: NEG
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 3
23170: NEG
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 1
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 3
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 3
23262: NEG
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 3
23273: NEG
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23314: LD_ADDR_VAR 0 44
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: LD_INT 0
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: LD_INT 1
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: NEG
23396: PUSH
23397: LD_INT 2
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 2
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: LD_INT 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: LD_INT 2
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 2
23469: NEG
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 2
23480: NEG
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PUSH
23494: LD_INT 2
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 2
23504: NEG
23505: PUSH
23506: LD_INT 3
23508: NEG
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 1
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 3
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: LD_INT 3
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 3
23588: NEG
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 3
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 3
23611: NEG
23612: PUSH
23613: LD_INT 2
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 3
23623: NEG
23624: PUSH
23625: LD_INT 3
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23664: LD_ADDR_VAR 0 45
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: LD_INT 2
23760: NEG
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 2
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 2
23854: NEG
23855: PUSH
23856: LD_INT 3
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: PUSH
23868: LD_INT 3
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 3
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: LD_INT 2
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 3
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 3
23910: PUSH
23911: LD_INT 3
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 3
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 3
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 3
23961: NEG
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 3
23973: NEG
23974: PUSH
23975: LD_INT 3
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24014: LD_ADDR_VAR 0 46
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: LD_INT 2
24099: NEG
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 2
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: NEG
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: LD_INT 3
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: LD_INT 3
24218: NEG
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: LD_INT 2
24229: NEG
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 3
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: NEG
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: NEG
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 3
24310: NEG
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 3
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24362: LD_ADDR_VAR 0 47
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 0
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: LD_INT 1
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: LD_INT 2
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 2
24489: NEG
24490: PUSH
24491: LD_INT 2
24493: NEG
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24513: LD_ADDR_VAR 0 48
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: LD_INT 2
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 2
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24660: LD_ADDR_VAR 0 49
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 0
24708: PUSH
24709: LD_INT 1
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 1
24729: NEG
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 2
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: LD_INT 2
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 2
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24804: LD_ADDR_VAR 0 50
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24948: LD_ADDR_VAR 0 51
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: LD_INT 0
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25095: LD_ADDR_VAR 0 52
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 2
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: NEG
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 2
25222: NEG
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25246: LD_ADDR_VAR 0 53
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: NEG
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: LD_INT 2
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: NEG
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 2
25433: NEG
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: LD_INT 2
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25476: LD_ADDR_VAR 0 54
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 2
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: NEG
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: NEG
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 2
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25706: LD_ADDR_VAR 0 55
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: LD_INT 2
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 2
25882: NEG
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: LD_INT 2
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25936: LD_ADDR_VAR 0 56
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 1
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: LD_INT 2
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: NEG
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: NEG
26136: PUSH
26137: LD_INT 2
26139: NEG
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26166: LD_ADDR_VAR 0 57
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 0
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: LD_INT 2
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: NEG
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: LD_INT 2
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26396: LD_ADDR_VAR 0 58
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: LD_INT 2
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: LD_INT 2
26492: NEG
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: NEG
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: LD_INT 2
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26626: LD_ADDR_VAR 0 59
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26714: LD_ADDR_VAR 0 60
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26802: LD_ADDR_VAR 0 61
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26890: LD_ADDR_VAR 0 62
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26978: LD_ADDR_VAR 0 63
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27066: LD_ADDR_VAR 0 64
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: ST_TO_ADDR
// end ; 1 :
27154: GO 33051
27156: LD_INT 1
27158: DOUBLE
27159: EQUAL
27160: IFTRUE 27164
27162: GO 29787
27164: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27165: LD_ADDR_VAR 0 11
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 3
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27209: LD_ADDR_VAR 0 12
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27250: LD_ADDR_VAR 0 13
27254: PUSH
27255: LD_INT 3
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 3
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27290: LD_ADDR_VAR 0 14
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 3
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 3
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27331: LD_ADDR_VAR 0 15
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 3
27349: NEG
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 3
27360: NEG
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27375: LD_ADDR_VAR 0 16
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 3
27394: NEG
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 3
27406: NEG
27407: PUSH
27408: LD_INT 3
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27421: LD_ADDR_VAR 0 17
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 3
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27465: LD_ADDR_VAR 0 18
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 3
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27506: LD_ADDR_VAR 0 19
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: LD_INT 2
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27546: LD_ADDR_VAR 0 20
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: LD_INT 3
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27587: LD_ADDR_VAR 0 21
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: NEG
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 3
27616: NEG
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27631: LD_ADDR_VAR 0 22
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: LD_INT 3
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 3
27650: NEG
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 3
27662: NEG
27663: PUSH
27664: LD_INT 3
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27677: LD_ADDR_VAR 0 23
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 4
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 3
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27721: LD_ADDR_VAR 0 24
27725: PUSH
27726: LD_INT 3
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 4
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27762: LD_ADDR_VAR 0 25
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: LD_INT 3
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 4
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 3
27789: PUSH
27790: LD_INT 4
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27802: LD_ADDR_VAR 0 26
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 3
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 4
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27843: LD_ADDR_VAR 0 27
27847: PUSH
27848: LD_INT 3
27850: NEG
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 3
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 4
27872: NEG
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27887: LD_ADDR_VAR 0 28
27891: PUSH
27892: LD_INT 3
27894: NEG
27895: PUSH
27896: LD_INT 3
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 3
27906: NEG
27907: PUSH
27908: LD_INT 4
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 4
27918: NEG
27919: PUSH
27920: LD_INT 3
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27933: LD_ADDR_VAR 0 29
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: LD_INT 3
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 3
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 4
27978: NEG
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: LD_INT 4
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: LD_INT 3
28000: NEG
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: LD_INT 5
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: LD_INT 5
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: LD_INT 4
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: LD_INT 6
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 6
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 5
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28088: LD_ADDR_VAR 0 30
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 1
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 3
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 4
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 4
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 4
28157: PUSH
28158: LD_INT 1
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 5
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 5
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 5
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 6
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 6
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28231: LD_ADDR_VAR 0 31
28235: PUSH
28236: LD_INT 3
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: LD_INT 3
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: LD_INT 3
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 4
28268: PUSH
28269: LD_INT 3
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 4
28278: PUSH
28279: LD_INT 4
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 3
28288: PUSH
28289: LD_INT 4
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 5
28298: PUSH
28299: LD_INT 4
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 5
28308: PUSH
28309: LD_INT 5
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 4
28318: PUSH
28319: LD_INT 5
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 6
28328: PUSH
28329: LD_INT 5
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 6
28338: PUSH
28339: LD_INT 6
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 5
28348: PUSH
28349: LD_INT 6
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28370: LD_ADDR_VAR 0 32
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 3
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 4
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: LD_INT 4
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 5
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 5
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 4
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: LD_INT 6
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: LD_INT 6
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: LD_INT 5
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28513: LD_ADDR_VAR 0 33
28517: PUSH
28518: LD_INT 2
28520: NEG
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 3
28531: NEG
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 3
28542: NEG
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 3
28554: NEG
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 4
28565: NEG
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 4
28576: NEG
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 4
28588: NEG
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 5
28599: NEG
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 5
28610: NEG
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 5
28622: NEG
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 6
28633: NEG
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 6
28644: NEG
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28668: LD_ADDR_VAR 0 34
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: LD_INT 3
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 3
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 3
28699: NEG
28700: PUSH
28701: LD_INT 3
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 3
28711: NEG
28712: PUSH
28713: LD_INT 4
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 4
28723: NEG
28724: PUSH
28725: LD_INT 3
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 4
28735: NEG
28736: PUSH
28737: LD_INT 4
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 4
28747: NEG
28748: PUSH
28749: LD_INT 5
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 5
28759: NEG
28760: PUSH
28761: LD_INT 4
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 5
28771: NEG
28772: PUSH
28773: LD_INT 5
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 5
28783: NEG
28784: PUSH
28785: LD_INT 6
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 6
28795: NEG
28796: PUSH
28797: LD_INT 5
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 6
28807: NEG
28808: PUSH
28809: LD_INT 6
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28831: LD_ADDR_VAR 0 41
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: LD_INT 3
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28875: LD_ADDR_VAR 0 42
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 3
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28916: LD_ADDR_VAR 0 43
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: LD_INT 2
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: LD_INT 2
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: LD_INT 3
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28956: LD_ADDR_VAR 0 44
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 3
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: LIST
28996: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28997: LD_ADDR_VAR 0 45
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 2
29015: NEG
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 3
29026: NEG
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29041: LD_ADDR_VAR 0 46
29045: PUSH
29046: LD_INT 2
29048: NEG
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: LD_INT 3
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: NEG
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29087: LD_ADDR_VAR 0 47
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: LD_INT 3
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 3
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29120: LD_ADDR_VAR 0 48
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29151: LD_ADDR_VAR 0 49
29155: PUSH
29156: LD_INT 3
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 2
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29180: LD_ADDR_VAR 0 50
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: LD_INT 3
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29209: LD_ADDR_VAR 0 51
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29240: LD_ADDR_VAR 0 52
29244: PUSH
29245: LD_INT 3
29247: NEG
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 3
29259: NEG
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29273: LD_ADDR_VAR 0 53
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: PUSH
29282: LD_INT 3
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29317: LD_ADDR_VAR 0 54
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 3
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29358: LD_ADDR_VAR 0 55
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29398: LD_ADDR_VAR 0 56
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: LD_INT 3
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29439: LD_ADDR_VAR 0 57
29443: PUSH
29444: LD_INT 2
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 3
29457: NEG
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 3
29468: NEG
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29483: LD_ADDR_VAR 0 58
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: LD_INT 3
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 3
29502: NEG
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 3
29514: NEG
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29529: LD_ADDR_VAR 0 59
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29573: LD_ADDR_VAR 0 60
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 2
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29614: LD_ADDR_VAR 0 61
29618: PUSH
29619: LD_INT 2
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29654: LD_ADDR_VAR 0 62
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29695: LD_ADDR_VAR 0 63
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29739: LD_ADDR_VAR 0 64
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 2
29758: NEG
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: ST_TO_ADDR
// end ; 2 :
29785: GO 33051
29787: LD_INT 2
29789: DOUBLE
29790: EQUAL
29791: IFTRUE 29795
29793: GO 33050
29795: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29796: LD_ADDR_VAR 0 29
29800: PUSH
29801: LD_INT 4
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 4
29813: PUSH
29814: LD_INT 1
29816: NEG
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 5
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 5
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 4
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 5
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: LD_INT 3
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 4
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 4
29926: PUSH
29927: LD_INT 4
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 3
29936: PUSH
29937: LD_INT 4
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 2
29946: PUSH
29947: LD_INT 3
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 4
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 4
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: LD_INT 4
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 3
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 4
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: LD_INT 5
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 5
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: LD_INT 4
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 5
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 2
30068: NEG
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: NEG
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 3
30090: NEG
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 2
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 3
30124: NEG
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 4
30135: NEG
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 4
30146: NEG
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 4
30158: NEG
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 4
30181: NEG
30182: PUSH
30183: LD_INT 4
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 4
30193: NEG
30194: PUSH
30195: LD_INT 5
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 3
30205: NEG
30206: PUSH
30207: LD_INT 4
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: LD_INT 3
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 4
30229: NEG
30230: PUSH
30231: LD_INT 3
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 5
30241: NEG
30242: PUSH
30243: LD_INT 4
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 5
30253: NEG
30254: PUSH
30255: LD_INT 5
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 3
30265: NEG
30266: PUSH
30267: LD_INT 5
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 5
30277: NEG
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30334: LD_ADDR_VAR 0 30
30338: PUSH
30339: LD_INT 4
30341: PUSH
30342: LD_INT 4
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 4
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 5
30361: PUSH
30362: LD_INT 4
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 5
30371: PUSH
30372: LD_INT 5
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 4
30381: PUSH
30382: LD_INT 5
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: LD_INT 4
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: LD_INT 5
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 0
30431: PUSH
30432: LD_INT 3
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 4
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 4
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: LD_INT 3
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: LD_INT 2
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: LD_INT 4
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: NEG
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 4
30524: NEG
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 4
30535: NEG
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 3
30558: NEG
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 5
30580: NEG
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 5
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 5
30603: NEG
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: NEG
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: NEG
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 3
30638: NEG
30639: PUSH
30640: LD_INT 4
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: LD_INT 3
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: LD_INT 2
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 3
30674: NEG
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 4
30686: NEG
30687: PUSH
30688: LD_INT 3
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 4
30698: NEG
30699: PUSH
30700: LD_INT 4
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: NEG
30711: PUSH
30712: LD_INT 4
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 4
30722: NEG
30723: PUSH
30724: LD_INT 2
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: LD_INT 4
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: LD_INT 5
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: LD_INT 4
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: PUSH
30768: LD_INT 3
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: LD_INT 3
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: LD_INT 4
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: LD_INT 5
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 3
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: LD_INT 5
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30881: LD_ADDR_VAR 0 31
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: LD_INT 4
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 4
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 5
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: LD_INT 5
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: LD_INT 4
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 5
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: LD_INT 3
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 4
31037: NEG
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 4
31048: NEG
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 4
31060: NEG
31061: PUSH
31062: LD_INT 2
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 2
31072: NEG
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 4
31083: NEG
31084: PUSH
31085: LD_INT 4
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 4
31095: NEG
31096: PUSH
31097: LD_INT 5
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: LD_INT 4
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 4
31131: NEG
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 5
31143: NEG
31144: PUSH
31145: LD_INT 4
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 5
31155: NEG
31156: PUSH
31157: LD_INT 5
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: LD_INT 5
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 5
31179: NEG
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 4
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 3
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: LD_INT 3
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: LD_INT 4
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 2
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 4
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 4
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 5
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 5
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 4
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31431: LD_ADDR_VAR 0 32
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 4
31449: NEG
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 3
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 4
31483: NEG
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 5
31494: NEG
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 5
31505: NEG
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 5
31517: NEG
31518: PUSH
31519: LD_INT 2
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: LD_INT 4
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: NEG
31565: PUSH
31566: LD_INT 3
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 4
31600: NEG
31601: PUSH
31602: LD_INT 3
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 4
31612: NEG
31613: PUSH
31614: LD_INT 4
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: NEG
31625: PUSH
31626: LD_INT 4
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 4
31636: NEG
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: LD_INT 4
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 5
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 4
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: LD_INT 3
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 4
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 5
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: LD_INT 3
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 5
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 4
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 4
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 4
31843: PUSH
31844: LD_INT 4
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: LD_INT 3
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 5
31863: PUSH
31864: LD_INT 4
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 5
31873: PUSH
31874: LD_INT 5
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 4
31883: PUSH
31884: LD_INT 5
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 3
31893: PUSH
31894: LD_INT 4
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: LD_INT 3
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 5
31913: PUSH
31914: LD_INT 3
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: LD_INT 5
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31978: LD_ADDR_VAR 0 33
31982: PUSH
31983: LD_INT 4
31985: NEG
31986: PUSH
31987: LD_INT 4
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 4
31997: NEG
31998: PUSH
31999: LD_INT 5
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 3
32009: NEG
32010: PUSH
32011: LD_INT 4
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 3
32021: NEG
32022: PUSH
32023: LD_INT 3
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 4
32033: NEG
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 5
32045: NEG
32046: PUSH
32047: LD_INT 4
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 5
32057: NEG
32058: PUSH
32059: LD_INT 5
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 3
32069: NEG
32070: PUSH
32071: LD_INT 5
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 5
32081: NEG
32082: PUSH
32083: LD_INT 3
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 3
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: LD_INT 4
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 3
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 3
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 4
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: NEG
32184: PUSH
32185: LD_INT 4
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 4
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 4
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 5
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 5
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 4
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 3
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 5
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: LD_INT 3
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 4
32308: PUSH
32309: LD_INT 3
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 4
32318: PUSH
32319: LD_INT 4
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: LD_INT 4
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: LD_INT 3
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: LD_INT 4
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 4
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 4
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: LD_INT 5
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32516: LD_ADDR_VAR 0 34
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: LD_INT 4
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 5
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: LD_INT 4
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 3
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 5
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: LD_INT 3
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 5
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 3
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 4
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 4
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 2
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 4
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 4
32718: PUSH
32719: LD_INT 4
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 4
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 5
32738: PUSH
32739: LD_INT 4
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 5
32748: PUSH
32749: LD_INT 5
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 4
32758: PUSH
32759: LD_INT 5
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 3
32768: PUSH
32769: LD_INT 4
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 3
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 5
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: LD_INT 5
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: LD_INT 3
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 4
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 4
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 4
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: NEG
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 4
32901: NEG
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 4
32912: NEG
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 3
32924: NEG
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 4
32946: NEG
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 5
32957: NEG
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 5
32968: NEG
32969: PUSH
32970: LD_INT 1
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 5
32980: NEG
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 3
32992: NEG
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// end ; end ;
33048: GO 33051
33050: POP
// case btype of b_depot , b_warehouse :
33051: LD_VAR 0 1
33055: PUSH
33056: LD_INT 0
33058: DOUBLE
33059: EQUAL
33060: IFTRUE 33070
33062: LD_INT 1
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33271
33070: POP
// case nation of nation_american :
33071: LD_VAR 0 5
33075: PUSH
33076: LD_INT 1
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33140
33084: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33085: LD_ADDR_VAR 0 9
33089: PUSH
33090: LD_VAR 0 11
33094: PUSH
33095: LD_VAR 0 12
33099: PUSH
33100: LD_VAR 0 13
33104: PUSH
33105: LD_VAR 0 14
33109: PUSH
33110: LD_VAR 0 15
33114: PUSH
33115: LD_VAR 0 16
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: PUSH
33128: LD_VAR 0 4
33132: PUSH
33133: LD_INT 1
33135: PLUS
33136: ARRAY
33137: ST_TO_ADDR
33138: GO 33269
33140: LD_INT 2
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33148
33146: GO 33204
33148: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33149: LD_ADDR_VAR 0 9
33153: PUSH
33154: LD_VAR 0 17
33158: PUSH
33159: LD_VAR 0 18
33163: PUSH
33164: LD_VAR 0 19
33168: PUSH
33169: LD_VAR 0 20
33173: PUSH
33174: LD_VAR 0 21
33178: PUSH
33179: LD_VAR 0 22
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: PUSH
33192: LD_VAR 0 4
33196: PUSH
33197: LD_INT 1
33199: PLUS
33200: ARRAY
33201: ST_TO_ADDR
33202: GO 33269
33204: LD_INT 3
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33268
33212: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33213: LD_ADDR_VAR 0 9
33217: PUSH
33218: LD_VAR 0 23
33222: PUSH
33223: LD_VAR 0 24
33227: PUSH
33228: LD_VAR 0 25
33232: PUSH
33233: LD_VAR 0 26
33237: PUSH
33238: LD_VAR 0 27
33242: PUSH
33243: LD_VAR 0 28
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: PUSH
33256: LD_VAR 0 4
33260: PUSH
33261: LD_INT 1
33263: PLUS
33264: ARRAY
33265: ST_TO_ADDR
33266: GO 33269
33268: POP
33269: GO 33824
33271: LD_INT 2
33273: DOUBLE
33274: EQUAL
33275: IFTRUE 33285
33277: LD_INT 3
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33341
33285: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33286: LD_ADDR_VAR 0 9
33290: PUSH
33291: LD_VAR 0 29
33295: PUSH
33296: LD_VAR 0 30
33300: PUSH
33301: LD_VAR 0 31
33305: PUSH
33306: LD_VAR 0 32
33310: PUSH
33311: LD_VAR 0 33
33315: PUSH
33316: LD_VAR 0 34
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: PUSH
33329: LD_VAR 0 4
33333: PUSH
33334: LD_INT 1
33336: PLUS
33337: ARRAY
33338: ST_TO_ADDR
33339: GO 33824
33341: LD_INT 16
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33403
33347: LD_INT 17
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33403
33353: LD_INT 18
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33403
33359: LD_INT 19
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33403
33365: LD_INT 22
33367: DOUBLE
33368: EQUAL
33369: IFTRUE 33403
33371: LD_INT 20
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33403
33377: LD_INT 21
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33403
33383: LD_INT 23
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33403
33389: LD_INT 24
33391: DOUBLE
33392: EQUAL
33393: IFTRUE 33403
33395: LD_INT 25
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33459
33403: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33404: LD_ADDR_VAR 0 9
33408: PUSH
33409: LD_VAR 0 35
33413: PUSH
33414: LD_VAR 0 36
33418: PUSH
33419: LD_VAR 0 37
33423: PUSH
33424: LD_VAR 0 38
33428: PUSH
33429: LD_VAR 0 39
33433: PUSH
33434: LD_VAR 0 40
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: PUSH
33447: LD_VAR 0 4
33451: PUSH
33452: LD_INT 1
33454: PLUS
33455: ARRAY
33456: ST_TO_ADDR
33457: GO 33824
33459: LD_INT 6
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33515
33465: LD_INT 7
33467: DOUBLE
33468: EQUAL
33469: IFTRUE 33515
33471: LD_INT 8
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33515
33477: LD_INT 13
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33515
33483: LD_INT 12
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33515
33489: LD_INT 15
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33515
33495: LD_INT 11
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33515
33501: LD_INT 14
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33515
33507: LD_INT 10
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33515
33513: GO 33571
33515: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33516: LD_ADDR_VAR 0 9
33520: PUSH
33521: LD_VAR 0 41
33525: PUSH
33526: LD_VAR 0 42
33530: PUSH
33531: LD_VAR 0 43
33535: PUSH
33536: LD_VAR 0 44
33540: PUSH
33541: LD_VAR 0 45
33545: PUSH
33546: LD_VAR 0 46
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: PUSH
33559: LD_VAR 0 4
33563: PUSH
33564: LD_INT 1
33566: PLUS
33567: ARRAY
33568: ST_TO_ADDR
33569: GO 33824
33571: LD_INT 36
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33579
33577: GO 33635
33579: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33580: LD_ADDR_VAR 0 9
33584: PUSH
33585: LD_VAR 0 47
33589: PUSH
33590: LD_VAR 0 48
33594: PUSH
33595: LD_VAR 0 49
33599: PUSH
33600: LD_VAR 0 50
33604: PUSH
33605: LD_VAR 0 51
33609: PUSH
33610: LD_VAR 0 52
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: PUSH
33623: LD_VAR 0 4
33627: PUSH
33628: LD_INT 1
33630: PLUS
33631: ARRAY
33632: ST_TO_ADDR
33633: GO 33824
33635: LD_INT 4
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33661
33641: LD_INT 5
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33661
33647: LD_INT 34
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33661
33653: LD_INT 37
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 33717
33661: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33662: LD_ADDR_VAR 0 9
33666: PUSH
33667: LD_VAR 0 53
33671: PUSH
33672: LD_VAR 0 54
33676: PUSH
33677: LD_VAR 0 55
33681: PUSH
33682: LD_VAR 0 56
33686: PUSH
33687: LD_VAR 0 57
33691: PUSH
33692: LD_VAR 0 58
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: PUSH
33705: LD_VAR 0 4
33709: PUSH
33710: LD_INT 1
33712: PLUS
33713: ARRAY
33714: ST_TO_ADDR
33715: GO 33824
33717: LD_INT 31
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33767
33723: LD_INT 32
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33767
33729: LD_INT 33
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33767
33735: LD_INT 27
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33767
33741: LD_INT 26
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33767
33747: LD_INT 28
33749: DOUBLE
33750: EQUAL
33751: IFTRUE 33767
33753: LD_INT 29
33755: DOUBLE
33756: EQUAL
33757: IFTRUE 33767
33759: LD_INT 30
33761: DOUBLE
33762: EQUAL
33763: IFTRUE 33767
33765: GO 33823
33767: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33768: LD_ADDR_VAR 0 9
33772: PUSH
33773: LD_VAR 0 59
33777: PUSH
33778: LD_VAR 0 60
33782: PUSH
33783: LD_VAR 0 61
33787: PUSH
33788: LD_VAR 0 62
33792: PUSH
33793: LD_VAR 0 63
33797: PUSH
33798: LD_VAR 0 64
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: PUSH
33811: LD_VAR 0 4
33815: PUSH
33816: LD_INT 1
33818: PLUS
33819: ARRAY
33820: ST_TO_ADDR
33821: GO 33824
33823: POP
// temp_list2 = [ ] ;
33824: LD_ADDR_VAR 0 10
33828: PUSH
33829: EMPTY
33830: ST_TO_ADDR
// for i in temp_list do
33831: LD_ADDR_VAR 0 8
33835: PUSH
33836: LD_VAR 0 9
33840: PUSH
33841: FOR_IN
33842: IFFALSE 33894
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33844: LD_ADDR_VAR 0 10
33848: PUSH
33849: LD_VAR 0 10
33853: PUSH
33854: LD_VAR 0 8
33858: PUSH
33859: LD_INT 1
33861: ARRAY
33862: PUSH
33863: LD_VAR 0 2
33867: PLUS
33868: PUSH
33869: LD_VAR 0 8
33873: PUSH
33874: LD_INT 2
33876: ARRAY
33877: PUSH
33878: LD_VAR 0 3
33882: PLUS
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: ADD
33891: ST_TO_ADDR
33892: GO 33841
33894: POP
33895: POP
// result = temp_list2 ;
33896: LD_ADDR_VAR 0 7
33900: PUSH
33901: LD_VAR 0 10
33905: ST_TO_ADDR
// end ;
33906: LD_VAR 0 7
33910: RET
// export function EnemyInRange ( unit , dist ) ; begin
33911: LD_INT 0
33913: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33914: LD_ADDR_VAR 0 3
33918: PUSH
33919: LD_VAR 0 1
33923: PPUSH
33924: CALL_OW 255
33928: PPUSH
33929: LD_VAR 0 1
33933: PPUSH
33934: CALL_OW 250
33938: PPUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 251
33948: PPUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL 7284 0 4
33958: PUSH
33959: LD_INT 4
33961: ARRAY
33962: ST_TO_ADDR
// end ;
33963: LD_VAR 0 3
33967: RET
// export function PlayerSeeMe ( unit ) ; begin
33968: LD_INT 0
33970: PPUSH
// result := See ( your_side , unit ) ;
33971: LD_ADDR_VAR 0 2
33975: PUSH
33976: LD_OWVAR 2
33980: PPUSH
33981: LD_VAR 0 1
33985: PPUSH
33986: CALL_OW 292
33990: ST_TO_ADDR
// end ;
33991: LD_VAR 0 2
33995: RET
// export function ReverseDir ( unit ) ; begin
33996: LD_INT 0
33998: PPUSH
// if not unit then
33999: LD_VAR 0 1
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34031
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34008: LD_ADDR_VAR 0 2
34012: PUSH
34013: LD_VAR 0 1
34017: PPUSH
34018: CALL_OW 254
34022: PUSH
34023: LD_INT 3
34025: PLUS
34026: PUSH
34027: LD_INT 6
34029: MOD
34030: ST_TO_ADDR
// end ;
34031: LD_VAR 0 2
34035: RET
// export function ReverseArray ( array ) ; var i ; begin
34036: LD_INT 0
34038: PPUSH
34039: PPUSH
// if not array then
34040: LD_VAR 0 1
34044: NOT
34045: IFFALSE 34049
// exit ;
34047: GO 34104
// result := [ ] ;
34049: LD_ADDR_VAR 0 2
34053: PUSH
34054: EMPTY
34055: ST_TO_ADDR
// for i := array downto 1 do
34056: LD_ADDR_VAR 0 3
34060: PUSH
34061: DOUBLE
34062: LD_VAR 0 1
34066: INC
34067: ST_TO_ADDR
34068: LD_INT 1
34070: PUSH
34071: FOR_DOWNTO
34072: IFFALSE 34102
// result := Join ( result , array [ i ] ) ;
34074: LD_ADDR_VAR 0 2
34078: PUSH
34079: LD_VAR 0 2
34083: PPUSH
34084: LD_VAR 0 1
34088: PUSH
34089: LD_VAR 0 3
34093: ARRAY
34094: PPUSH
34095: CALL 38747 0 2
34099: ST_TO_ADDR
34100: GO 34071
34102: POP
34103: POP
// end ;
34104: LD_VAR 0 2
34108: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34109: LD_INT 0
34111: PPUSH
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
// if not unit or not hexes then
34117: LD_VAR 0 1
34121: NOT
34122: PUSH
34123: LD_VAR 0 2
34127: NOT
34128: OR
34129: IFFALSE 34133
// exit ;
34131: GO 34256
// dist := 9999 ;
34133: LD_ADDR_VAR 0 5
34137: PUSH
34138: LD_INT 9999
34140: ST_TO_ADDR
// for i = 1 to hexes do
34141: LD_ADDR_VAR 0 4
34145: PUSH
34146: DOUBLE
34147: LD_INT 1
34149: DEC
34150: ST_TO_ADDR
34151: LD_VAR 0 2
34155: PUSH
34156: FOR_TO
34157: IFFALSE 34244
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34159: LD_ADDR_VAR 0 6
34163: PUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: LD_VAR 0 2
34173: PUSH
34174: LD_VAR 0 4
34178: ARRAY
34179: PUSH
34180: LD_INT 1
34182: ARRAY
34183: PPUSH
34184: LD_VAR 0 2
34188: PUSH
34189: LD_VAR 0 4
34193: ARRAY
34194: PUSH
34195: LD_INT 2
34197: ARRAY
34198: PPUSH
34199: CALL_OW 297
34203: ST_TO_ADDR
// if tdist < dist then
34204: LD_VAR 0 6
34208: PUSH
34209: LD_VAR 0 5
34213: LESS
34214: IFFALSE 34242
// begin hex := hexes [ i ] ;
34216: LD_ADDR_VAR 0 8
34220: PUSH
34221: LD_VAR 0 2
34225: PUSH
34226: LD_VAR 0 4
34230: ARRAY
34231: ST_TO_ADDR
// dist := tdist ;
34232: LD_ADDR_VAR 0 5
34236: PUSH
34237: LD_VAR 0 6
34241: ST_TO_ADDR
// end ; end ;
34242: GO 34156
34244: POP
34245: POP
// result := hex ;
34246: LD_ADDR_VAR 0 3
34250: PUSH
34251: LD_VAR 0 8
34255: ST_TO_ADDR
// end ;
34256: LD_VAR 0 3
34260: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34261: LD_INT 0
34263: PPUSH
34264: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34265: LD_VAR 0 1
34269: NOT
34270: PUSH
34271: LD_VAR 0 1
34275: PUSH
34276: LD_INT 21
34278: PUSH
34279: LD_INT 2
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 23
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PPUSH
34300: CALL_OW 69
34304: IN
34305: NOT
34306: OR
34307: IFFALSE 34311
// exit ;
34309: GO 34358
// for i = 1 to 3 do
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: DOUBLE
34317: LD_INT 1
34319: DEC
34320: ST_TO_ADDR
34321: LD_INT 3
34323: PUSH
34324: FOR_TO
34325: IFFALSE 34356
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 250
34336: PPUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 251
34346: PPUSH
34347: LD_INT 1
34349: PPUSH
34350: CALL_OW 453
34354: GO 34324
34356: POP
34357: POP
// end ;
34358: LD_VAR 0 2
34362: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34371: LD_VAR 0 1
34375: NOT
34376: PUSH
34377: LD_VAR 0 2
34381: NOT
34382: OR
34383: PUSH
34384: LD_VAR 0 1
34388: PPUSH
34389: CALL_OW 314
34393: OR
34394: IFFALSE 34398
// exit ;
34396: GO 34865
// if GetLives ( i ) < 250 then
34398: LD_VAR 0 4
34402: PPUSH
34403: CALL_OW 256
34407: PUSH
34408: LD_INT 250
34410: LESS
34411: IFFALSE 34424
// begin ComAutodestruct ( i ) ;
34413: LD_VAR 0 4
34417: PPUSH
34418: CALL 34261 0 1
// exit ;
34422: GO 34865
// end ; x := GetX ( enemy_unit ) ;
34424: LD_ADDR_VAR 0 7
34428: PUSH
34429: LD_VAR 0 2
34433: PPUSH
34434: CALL_OW 250
34438: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34439: LD_ADDR_VAR 0 8
34443: PUSH
34444: LD_VAR 0 2
34448: PPUSH
34449: CALL_OW 251
34453: ST_TO_ADDR
// if not x or not y then
34454: LD_VAR 0 7
34458: NOT
34459: PUSH
34460: LD_VAR 0 8
34464: NOT
34465: OR
34466: IFFALSE 34470
// exit ;
34468: GO 34865
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34470: LD_ADDR_VAR 0 6
34474: PUSH
34475: LD_VAR 0 7
34479: PPUSH
34480: LD_INT 0
34482: PPUSH
34483: LD_INT 4
34485: PPUSH
34486: CALL_OW 272
34490: PUSH
34491: LD_VAR 0 8
34495: PPUSH
34496: LD_INT 0
34498: PPUSH
34499: LD_INT 4
34501: PPUSH
34502: CALL_OW 273
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_VAR 0 7
34515: PPUSH
34516: LD_INT 1
34518: PPUSH
34519: LD_INT 4
34521: PPUSH
34522: CALL_OW 272
34526: PUSH
34527: LD_VAR 0 8
34531: PPUSH
34532: LD_INT 1
34534: PPUSH
34535: LD_INT 4
34537: PPUSH
34538: CALL_OW 273
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_VAR 0 7
34551: PPUSH
34552: LD_INT 2
34554: PPUSH
34555: LD_INT 4
34557: PPUSH
34558: CALL_OW 272
34562: PUSH
34563: LD_VAR 0 8
34567: PPUSH
34568: LD_INT 2
34570: PPUSH
34571: LD_INT 4
34573: PPUSH
34574: CALL_OW 273
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_VAR 0 7
34587: PPUSH
34588: LD_INT 3
34590: PPUSH
34591: LD_INT 4
34593: PPUSH
34594: CALL_OW 272
34598: PUSH
34599: LD_VAR 0 8
34603: PPUSH
34604: LD_INT 3
34606: PPUSH
34607: LD_INT 4
34609: PPUSH
34610: CALL_OW 273
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_VAR 0 7
34623: PPUSH
34624: LD_INT 4
34626: PPUSH
34627: LD_INT 4
34629: PPUSH
34630: CALL_OW 272
34634: PUSH
34635: LD_VAR 0 8
34639: PPUSH
34640: LD_INT 4
34642: PPUSH
34643: LD_INT 4
34645: PPUSH
34646: CALL_OW 273
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_VAR 0 7
34659: PPUSH
34660: LD_INT 5
34662: PPUSH
34663: LD_INT 4
34665: PPUSH
34666: CALL_OW 272
34670: PUSH
34671: LD_VAR 0 8
34675: PPUSH
34676: LD_INT 5
34678: PPUSH
34679: LD_INT 4
34681: PPUSH
34682: CALL_OW 273
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: ST_TO_ADDR
// for i = tmp downto 1 do
34699: LD_ADDR_VAR 0 4
34703: PUSH
34704: DOUBLE
34705: LD_VAR 0 6
34709: INC
34710: ST_TO_ADDR
34711: LD_INT 1
34713: PUSH
34714: FOR_DOWNTO
34715: IFFALSE 34816
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34717: LD_VAR 0 6
34721: PUSH
34722: LD_VAR 0 4
34726: ARRAY
34727: PUSH
34728: LD_INT 1
34730: ARRAY
34731: PPUSH
34732: LD_VAR 0 6
34736: PUSH
34737: LD_VAR 0 4
34741: ARRAY
34742: PUSH
34743: LD_INT 2
34745: ARRAY
34746: PPUSH
34747: CALL_OW 488
34751: NOT
34752: PUSH
34753: LD_VAR 0 6
34757: PUSH
34758: LD_VAR 0 4
34762: ARRAY
34763: PUSH
34764: LD_INT 1
34766: ARRAY
34767: PPUSH
34768: LD_VAR 0 6
34772: PUSH
34773: LD_VAR 0 4
34777: ARRAY
34778: PUSH
34779: LD_INT 2
34781: ARRAY
34782: PPUSH
34783: CALL_OW 428
34787: PUSH
34788: LD_INT 0
34790: NONEQUAL
34791: OR
34792: IFFALSE 34814
// tmp := Delete ( tmp , i ) ;
34794: LD_ADDR_VAR 0 6
34798: PUSH
34799: LD_VAR 0 6
34803: PPUSH
34804: LD_VAR 0 4
34808: PPUSH
34809: CALL_OW 3
34813: ST_TO_ADDR
34814: GO 34714
34816: POP
34817: POP
// j := GetClosestHex ( unit , tmp ) ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: LD_VAR 0 6
34832: PPUSH
34833: CALL 34109 0 2
34837: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34838: LD_VAR 0 1
34842: PPUSH
34843: LD_VAR 0 5
34847: PUSH
34848: LD_INT 1
34850: ARRAY
34851: PPUSH
34852: LD_VAR 0 5
34856: PUSH
34857: LD_INT 2
34859: ARRAY
34860: PPUSH
34861: CALL_OW 111
// end ;
34865: LD_VAR 0 3
34869: RET
// export function PrepareApemanSoldier ( ) ; begin
34870: LD_INT 0
34872: PPUSH
// uc_nation := 0 ;
34873: LD_ADDR_OWVAR 21
34877: PUSH
34878: LD_INT 0
34880: ST_TO_ADDR
// hc_sex := sex_male ;
34881: LD_ADDR_OWVAR 27
34885: PUSH
34886: LD_INT 1
34888: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34889: LD_ADDR_OWVAR 28
34893: PUSH
34894: LD_INT 15
34896: ST_TO_ADDR
// hc_gallery :=  ;
34897: LD_ADDR_OWVAR 33
34901: PUSH
34902: LD_STRING 
34904: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34905: LD_ADDR_OWVAR 31
34909: PUSH
34910: LD_INT 0
34912: PPUSH
34913: LD_INT 3
34915: PPUSH
34916: CALL_OW 12
34920: PUSH
34921: LD_INT 0
34923: PPUSH
34924: LD_INT 3
34926: PPUSH
34927: CALL_OW 12
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
// end ;
34944: LD_VAR 0 1
34948: RET
// export function PrepareApemanEngineer ( ) ; begin
34949: LD_INT 0
34951: PPUSH
// uc_nation := 0 ;
34952: LD_ADDR_OWVAR 21
34956: PUSH
34957: LD_INT 0
34959: ST_TO_ADDR
// hc_sex := sex_male ;
34960: LD_ADDR_OWVAR 27
34964: PUSH
34965: LD_INT 1
34967: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34968: LD_ADDR_OWVAR 28
34972: PUSH
34973: LD_INT 16
34975: ST_TO_ADDR
// hc_gallery :=  ;
34976: LD_ADDR_OWVAR 33
34980: PUSH
34981: LD_STRING 
34983: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34984: LD_ADDR_OWVAR 31
34988: PUSH
34989: LD_INT 0
34991: PPUSH
34992: LD_INT 3
34994: PPUSH
34995: CALL_OW 12
34999: PUSH
35000: LD_INT 0
35002: PPUSH
35003: LD_INT 3
35005: PPUSH
35006: CALL_OW 12
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: ST_TO_ADDR
// end ;
35023: LD_VAR 0 1
35027: RET
// export function PrepareApeman ( agressivity ) ; begin
35028: LD_INT 0
35030: PPUSH
// uc_side := 0 ;
35031: LD_ADDR_OWVAR 20
35035: PUSH
35036: LD_INT 0
35038: ST_TO_ADDR
// uc_nation := 0 ;
35039: LD_ADDR_OWVAR 21
35043: PUSH
35044: LD_INT 0
35046: ST_TO_ADDR
// hc_sex := sex_male ;
35047: LD_ADDR_OWVAR 27
35051: PUSH
35052: LD_INT 1
35054: ST_TO_ADDR
// hc_class := class_apeman ;
35055: LD_ADDR_OWVAR 28
35059: PUSH
35060: LD_INT 12
35062: ST_TO_ADDR
// hc_gallery :=  ;
35063: LD_ADDR_OWVAR 33
35067: PUSH
35068: LD_STRING 
35070: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35071: LD_ADDR_OWVAR 35
35075: PUSH
35076: LD_VAR 0 1
35080: NEG
35081: PPUSH
35082: LD_VAR 0 1
35086: PPUSH
35087: CALL_OW 12
35091: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35092: LD_ADDR_OWVAR 31
35096: PUSH
35097: LD_INT 0
35099: PPUSH
35100: LD_INT 3
35102: PPUSH
35103: CALL_OW 12
35107: PUSH
35108: LD_INT 0
35110: PPUSH
35111: LD_INT 3
35113: PPUSH
35114: CALL_OW 12
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
// end ;
35131: LD_VAR 0 2
35135: RET
// export function PrepareTiger ( agressivity ) ; begin
35136: LD_INT 0
35138: PPUSH
// uc_side := 0 ;
35139: LD_ADDR_OWVAR 20
35143: PUSH
35144: LD_INT 0
35146: ST_TO_ADDR
// uc_nation := 0 ;
35147: LD_ADDR_OWVAR 21
35151: PUSH
35152: LD_INT 0
35154: ST_TO_ADDR
// hc_class := class_tiger ;
35155: LD_ADDR_OWVAR 28
35159: PUSH
35160: LD_INT 14
35162: ST_TO_ADDR
// hc_gallery :=  ;
35163: LD_ADDR_OWVAR 33
35167: PUSH
35168: LD_STRING 
35170: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35171: LD_ADDR_OWVAR 35
35175: PUSH
35176: LD_VAR 0 1
35180: NEG
35181: PPUSH
35182: LD_VAR 0 1
35186: PPUSH
35187: CALL_OW 12
35191: ST_TO_ADDR
// end ;
35192: LD_VAR 0 2
35196: RET
// export function PrepareEnchidna ( ) ; begin
35197: LD_INT 0
35199: PPUSH
// uc_side := 0 ;
35200: LD_ADDR_OWVAR 20
35204: PUSH
35205: LD_INT 0
35207: ST_TO_ADDR
// uc_nation := 0 ;
35208: LD_ADDR_OWVAR 21
35212: PUSH
35213: LD_INT 0
35215: ST_TO_ADDR
// hc_class := class_baggie ;
35216: LD_ADDR_OWVAR 28
35220: PUSH
35221: LD_INT 13
35223: ST_TO_ADDR
// hc_gallery :=  ;
35224: LD_ADDR_OWVAR 33
35228: PUSH
35229: LD_STRING 
35231: ST_TO_ADDR
// end ;
35232: LD_VAR 0 1
35236: RET
// export function PrepareFrog ( ) ; begin
35237: LD_INT 0
35239: PPUSH
// uc_side := 0 ;
35240: LD_ADDR_OWVAR 20
35244: PUSH
35245: LD_INT 0
35247: ST_TO_ADDR
// uc_nation := 0 ;
35248: LD_ADDR_OWVAR 21
35252: PUSH
35253: LD_INT 0
35255: ST_TO_ADDR
// hc_class := class_frog ;
35256: LD_ADDR_OWVAR 28
35260: PUSH
35261: LD_INT 19
35263: ST_TO_ADDR
// hc_gallery :=  ;
35264: LD_ADDR_OWVAR 33
35268: PUSH
35269: LD_STRING 
35271: ST_TO_ADDR
// end ;
35272: LD_VAR 0 1
35276: RET
// export function PrepareFish ( ) ; begin
35277: LD_INT 0
35279: PPUSH
// uc_side := 0 ;
35280: LD_ADDR_OWVAR 20
35284: PUSH
35285: LD_INT 0
35287: ST_TO_ADDR
// uc_nation := 0 ;
35288: LD_ADDR_OWVAR 21
35292: PUSH
35293: LD_INT 0
35295: ST_TO_ADDR
// hc_class := class_fish ;
35296: LD_ADDR_OWVAR 28
35300: PUSH
35301: LD_INT 20
35303: ST_TO_ADDR
// hc_gallery :=  ;
35304: LD_ADDR_OWVAR 33
35308: PUSH
35309: LD_STRING 
35311: ST_TO_ADDR
// end ;
35312: LD_VAR 0 1
35316: RET
// export function PrepareBird ( ) ; begin
35317: LD_INT 0
35319: PPUSH
// uc_side := 0 ;
35320: LD_ADDR_OWVAR 20
35324: PUSH
35325: LD_INT 0
35327: ST_TO_ADDR
// uc_nation := 0 ;
35328: LD_ADDR_OWVAR 21
35332: PUSH
35333: LD_INT 0
35335: ST_TO_ADDR
// hc_class := class_phororhacos ;
35336: LD_ADDR_OWVAR 28
35340: PUSH
35341: LD_INT 18
35343: ST_TO_ADDR
// hc_gallery :=  ;
35344: LD_ADDR_OWVAR 33
35348: PUSH
35349: LD_STRING 
35351: ST_TO_ADDR
// end ;
35352: LD_VAR 0 1
35356: RET
// export function PrepareHorse ( ) ; begin
35357: LD_INT 0
35359: PPUSH
// uc_side := 0 ;
35360: LD_ADDR_OWVAR 20
35364: PUSH
35365: LD_INT 0
35367: ST_TO_ADDR
// uc_nation := 0 ;
35368: LD_ADDR_OWVAR 21
35372: PUSH
35373: LD_INT 0
35375: ST_TO_ADDR
// hc_class := class_horse ;
35376: LD_ADDR_OWVAR 28
35380: PUSH
35381: LD_INT 21
35383: ST_TO_ADDR
// hc_gallery :=  ;
35384: LD_ADDR_OWVAR 33
35388: PUSH
35389: LD_STRING 
35391: ST_TO_ADDR
// end ;
35392: LD_VAR 0 1
35396: RET
// export function PrepareMastodont ( ) ; begin
35397: LD_INT 0
35399: PPUSH
// uc_side := 0 ;
35400: LD_ADDR_OWVAR 20
35404: PUSH
35405: LD_INT 0
35407: ST_TO_ADDR
// uc_nation := 0 ;
35408: LD_ADDR_OWVAR 21
35412: PUSH
35413: LD_INT 0
35415: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35416: LD_ADDR_OWVAR 37
35420: PUSH
35421: LD_INT 31
35423: ST_TO_ADDR
// vc_control := control_rider ;
35424: LD_ADDR_OWVAR 38
35428: PUSH
35429: LD_INT 4
35431: ST_TO_ADDR
// end ;
35432: LD_VAR 0 1
35436: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35437: LD_INT 0
35439: PPUSH
35440: PPUSH
35441: PPUSH
// uc_side = 0 ;
35442: LD_ADDR_OWVAR 20
35446: PUSH
35447: LD_INT 0
35449: ST_TO_ADDR
// uc_nation = 0 ;
35450: LD_ADDR_OWVAR 21
35454: PUSH
35455: LD_INT 0
35457: ST_TO_ADDR
// InitHc_All ( ) ;
35458: CALL_OW 584
// InitVc ;
35462: CALL_OW 20
// if mastodonts then
35466: LD_VAR 0 6
35470: IFFALSE 35537
// for i = 1 to mastodonts do
35472: LD_ADDR_VAR 0 11
35476: PUSH
35477: DOUBLE
35478: LD_INT 1
35480: DEC
35481: ST_TO_ADDR
35482: LD_VAR 0 6
35486: PUSH
35487: FOR_TO
35488: IFFALSE 35535
// begin vc_chassis := 31 ;
35490: LD_ADDR_OWVAR 37
35494: PUSH
35495: LD_INT 31
35497: ST_TO_ADDR
// vc_control := control_rider ;
35498: LD_ADDR_OWVAR 38
35502: PUSH
35503: LD_INT 4
35505: ST_TO_ADDR
// animal := CreateVehicle ;
35506: LD_ADDR_VAR 0 12
35510: PUSH
35511: CALL_OW 45
35515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35516: LD_VAR 0 12
35520: PPUSH
35521: LD_VAR 0 8
35525: PPUSH
35526: LD_INT 0
35528: PPUSH
35529: CALL 37665 0 3
// end ;
35533: GO 35487
35535: POP
35536: POP
// if horses then
35537: LD_VAR 0 5
35541: IFFALSE 35608
// for i = 1 to horses do
35543: LD_ADDR_VAR 0 11
35547: PUSH
35548: DOUBLE
35549: LD_INT 1
35551: DEC
35552: ST_TO_ADDR
35553: LD_VAR 0 5
35557: PUSH
35558: FOR_TO
35559: IFFALSE 35606
// begin hc_class := 21 ;
35561: LD_ADDR_OWVAR 28
35565: PUSH
35566: LD_INT 21
35568: ST_TO_ADDR
// hc_gallery :=  ;
35569: LD_ADDR_OWVAR 33
35573: PUSH
35574: LD_STRING 
35576: ST_TO_ADDR
// animal := CreateHuman ;
35577: LD_ADDR_VAR 0 12
35581: PUSH
35582: CALL_OW 44
35586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35587: LD_VAR 0 12
35591: PPUSH
35592: LD_VAR 0 8
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: CALL 37665 0 3
// end ;
35604: GO 35558
35606: POP
35607: POP
// if birds then
35608: LD_VAR 0 1
35612: IFFALSE 35679
// for i = 1 to birds do
35614: LD_ADDR_VAR 0 11
35618: PUSH
35619: DOUBLE
35620: LD_INT 1
35622: DEC
35623: ST_TO_ADDR
35624: LD_VAR 0 1
35628: PUSH
35629: FOR_TO
35630: IFFALSE 35677
// begin hc_class := 18 ;
35632: LD_ADDR_OWVAR 28
35636: PUSH
35637: LD_INT 18
35639: ST_TO_ADDR
// hc_gallery =  ;
35640: LD_ADDR_OWVAR 33
35644: PUSH
35645: LD_STRING 
35647: ST_TO_ADDR
// animal := CreateHuman ;
35648: LD_ADDR_VAR 0 12
35652: PUSH
35653: CALL_OW 44
35657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35658: LD_VAR 0 12
35662: PPUSH
35663: LD_VAR 0 8
35667: PPUSH
35668: LD_INT 0
35670: PPUSH
35671: CALL 37665 0 3
// end ;
35675: GO 35629
35677: POP
35678: POP
// if tigers then
35679: LD_VAR 0 2
35683: IFFALSE 35767
// for i = 1 to tigers do
35685: LD_ADDR_VAR 0 11
35689: PUSH
35690: DOUBLE
35691: LD_INT 1
35693: DEC
35694: ST_TO_ADDR
35695: LD_VAR 0 2
35699: PUSH
35700: FOR_TO
35701: IFFALSE 35765
// begin hc_class = class_tiger ;
35703: LD_ADDR_OWVAR 28
35707: PUSH
35708: LD_INT 14
35710: ST_TO_ADDR
// hc_gallery =  ;
35711: LD_ADDR_OWVAR 33
35715: PUSH
35716: LD_STRING 
35718: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35719: LD_ADDR_OWVAR 35
35723: PUSH
35724: LD_INT 7
35726: NEG
35727: PPUSH
35728: LD_INT 7
35730: PPUSH
35731: CALL_OW 12
35735: ST_TO_ADDR
// animal := CreateHuman ;
35736: LD_ADDR_VAR 0 12
35740: PUSH
35741: CALL_OW 44
35745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35746: LD_VAR 0 12
35750: PPUSH
35751: LD_VAR 0 8
35755: PPUSH
35756: LD_INT 0
35758: PPUSH
35759: CALL 37665 0 3
// end ;
35763: GO 35700
35765: POP
35766: POP
// if apemans then
35767: LD_VAR 0 3
35771: IFFALSE 35894
// for i = 1 to apemans do
35773: LD_ADDR_VAR 0 11
35777: PUSH
35778: DOUBLE
35779: LD_INT 1
35781: DEC
35782: ST_TO_ADDR
35783: LD_VAR 0 3
35787: PUSH
35788: FOR_TO
35789: IFFALSE 35892
// begin hc_class = class_apeman ;
35791: LD_ADDR_OWVAR 28
35795: PUSH
35796: LD_INT 12
35798: ST_TO_ADDR
// hc_gallery =  ;
35799: LD_ADDR_OWVAR 33
35803: PUSH
35804: LD_STRING 
35806: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35807: LD_ADDR_OWVAR 35
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PPUSH
35816: LD_INT 2
35818: PPUSH
35819: CALL_OW 12
35823: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35824: LD_ADDR_OWVAR 31
35828: PUSH
35829: LD_INT 1
35831: PPUSH
35832: LD_INT 3
35834: PPUSH
35835: CALL_OW 12
35839: PUSH
35840: LD_INT 1
35842: PPUSH
35843: LD_INT 3
35845: PPUSH
35846: CALL_OW 12
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: ST_TO_ADDR
// animal := CreateHuman ;
35863: LD_ADDR_VAR 0 12
35867: PUSH
35868: CALL_OW 44
35872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35873: LD_VAR 0 12
35877: PPUSH
35878: LD_VAR 0 8
35882: PPUSH
35883: LD_INT 0
35885: PPUSH
35886: CALL 37665 0 3
// end ;
35890: GO 35788
35892: POP
35893: POP
// if enchidnas then
35894: LD_VAR 0 4
35898: IFFALSE 35965
// for i = 1 to enchidnas do
35900: LD_ADDR_VAR 0 11
35904: PUSH
35905: DOUBLE
35906: LD_INT 1
35908: DEC
35909: ST_TO_ADDR
35910: LD_VAR 0 4
35914: PUSH
35915: FOR_TO
35916: IFFALSE 35963
// begin hc_class = 13 ;
35918: LD_ADDR_OWVAR 28
35922: PUSH
35923: LD_INT 13
35925: ST_TO_ADDR
// hc_gallery =  ;
35926: LD_ADDR_OWVAR 33
35930: PUSH
35931: LD_STRING 
35933: ST_TO_ADDR
// animal := CreateHuman ;
35934: LD_ADDR_VAR 0 12
35938: PUSH
35939: CALL_OW 44
35943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35944: LD_VAR 0 12
35948: PPUSH
35949: LD_VAR 0 8
35953: PPUSH
35954: LD_INT 0
35956: PPUSH
35957: CALL 37665 0 3
// end ;
35961: GO 35915
35963: POP
35964: POP
// if fishes then
35965: LD_VAR 0 7
35969: IFFALSE 36036
// for i = 1 to fishes do
35971: LD_ADDR_VAR 0 11
35975: PUSH
35976: DOUBLE
35977: LD_INT 1
35979: DEC
35980: ST_TO_ADDR
35981: LD_VAR 0 7
35985: PUSH
35986: FOR_TO
35987: IFFALSE 36034
// begin hc_class = 20 ;
35989: LD_ADDR_OWVAR 28
35993: PUSH
35994: LD_INT 20
35996: ST_TO_ADDR
// hc_gallery =  ;
35997: LD_ADDR_OWVAR 33
36001: PUSH
36002: LD_STRING 
36004: ST_TO_ADDR
// animal := CreateHuman ;
36005: LD_ADDR_VAR 0 12
36009: PUSH
36010: CALL_OW 44
36014: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36015: LD_VAR 0 12
36019: PPUSH
36020: LD_VAR 0 9
36024: PPUSH
36025: LD_INT 0
36027: PPUSH
36028: CALL 37665 0 3
// end ;
36032: GO 35986
36034: POP
36035: POP
// end ;
36036: LD_VAR 0 10
36040: RET
// export function WantHeal ( sci , unit ) ; begin
36041: LD_INT 0
36043: PPUSH
// if GetTaskList ( sci ) > 0 then
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 437
36053: PUSH
36054: LD_INT 0
36056: GREATER
36057: IFFALSE 36127
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36059: LD_VAR 0 1
36063: PPUSH
36064: CALL_OW 437
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: PUSH
36073: LD_INT 1
36075: ARRAY
36076: PUSH
36077: LD_STRING l
36079: EQUAL
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 437
36090: PUSH
36091: LD_INT 1
36093: ARRAY
36094: PUSH
36095: LD_INT 4
36097: ARRAY
36098: PUSH
36099: LD_VAR 0 2
36103: EQUAL
36104: AND
36105: IFFALSE 36117
// result := true else
36107: LD_ADDR_VAR 0 3
36111: PUSH
36112: LD_INT 1
36114: ST_TO_ADDR
36115: GO 36125
// result := false ;
36117: LD_ADDR_VAR 0 3
36121: PUSH
36122: LD_INT 0
36124: ST_TO_ADDR
// end else
36125: GO 36135
// result := false ;
36127: LD_ADDR_VAR 0 3
36131: PUSH
36132: LD_INT 0
36134: ST_TO_ADDR
// end ;
36135: LD_VAR 0 3
36139: RET
// export function HealTarget ( sci ) ; begin
36140: LD_INT 0
36142: PPUSH
// if not sci then
36143: LD_VAR 0 1
36147: NOT
36148: IFFALSE 36152
// exit ;
36150: GO 36217
// result := 0 ;
36152: LD_ADDR_VAR 0 2
36156: PUSH
36157: LD_INT 0
36159: ST_TO_ADDR
// if GetTaskList ( sci ) then
36160: LD_VAR 0 1
36164: PPUSH
36165: CALL_OW 437
36169: IFFALSE 36217
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 437
36180: PUSH
36181: LD_INT 1
36183: ARRAY
36184: PUSH
36185: LD_INT 1
36187: ARRAY
36188: PUSH
36189: LD_STRING l
36191: EQUAL
36192: IFFALSE 36217
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36194: LD_ADDR_VAR 0 2
36198: PUSH
36199: LD_VAR 0 1
36203: PPUSH
36204: CALL_OW 437
36208: PUSH
36209: LD_INT 1
36211: ARRAY
36212: PUSH
36213: LD_INT 4
36215: ARRAY
36216: ST_TO_ADDR
// end ;
36217: LD_VAR 0 2
36221: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36222: LD_INT 0
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
// if not base_units then
36228: LD_VAR 0 1
36232: NOT
36233: IFFALSE 36237
// exit ;
36235: GO 36324
// result := false ;
36237: LD_ADDR_VAR 0 2
36241: PUSH
36242: LD_INT 0
36244: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36245: LD_ADDR_VAR 0 5
36249: PUSH
36250: LD_VAR 0 1
36254: PPUSH
36255: LD_INT 21
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PPUSH
36265: CALL_OW 72
36269: ST_TO_ADDR
// if not tmp then
36270: LD_VAR 0 5
36274: NOT
36275: IFFALSE 36279
// exit ;
36277: GO 36324
// for i in tmp do
36279: LD_ADDR_VAR 0 3
36283: PUSH
36284: LD_VAR 0 5
36288: PUSH
36289: FOR_IN
36290: IFFALSE 36322
// begin result := EnemyInRange ( i , 22 ) ;
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: LD_VAR 0 3
36301: PPUSH
36302: LD_INT 22
36304: PPUSH
36305: CALL 33911 0 2
36309: ST_TO_ADDR
// if result then
36310: LD_VAR 0 2
36314: IFFALSE 36320
// exit ;
36316: POP
36317: POP
36318: GO 36324
// end ;
36320: GO 36289
36322: POP
36323: POP
// end ;
36324: LD_VAR 0 2
36328: RET
// export function FilterByTag ( units , tag ) ; begin
36329: LD_INT 0
36331: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: LD_INT 120
36344: PUSH
36345: LD_VAR 0 2
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PPUSH
36354: CALL_OW 72
36358: ST_TO_ADDR
// end ;
36359: LD_VAR 0 3
36363: RET
// export function IsDriver ( un ) ; begin
36364: LD_INT 0
36366: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36367: LD_ADDR_VAR 0 2
36371: PUSH
36372: LD_VAR 0 1
36376: PUSH
36377: LD_INT 55
36379: PUSH
36380: EMPTY
36381: LIST
36382: PPUSH
36383: CALL_OW 69
36387: IN
36388: ST_TO_ADDR
// end ;
36389: LD_VAR 0 2
36393: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36394: LD_INT 0
36396: PPUSH
36397: PPUSH
// list := [ ] ;
36398: LD_ADDR_VAR 0 5
36402: PUSH
36403: EMPTY
36404: ST_TO_ADDR
// case d of 0 :
36405: LD_VAR 0 3
36409: PUSH
36410: LD_INT 0
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36551
36418: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: LD_VAR 0 1
36428: PUSH
36429: LD_INT 4
36431: MINUS
36432: PUSH
36433: LD_VAR 0 2
36437: PUSH
36438: LD_INT 4
36440: MINUS
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: PUSH
36450: LD_VAR 0 1
36454: PUSH
36455: LD_INT 3
36457: MINUS
36458: PUSH
36459: LD_VAR 0 2
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: PUSH
36472: LD_VAR 0 1
36476: PUSH
36477: LD_INT 4
36479: PLUS
36480: PUSH
36481: LD_VAR 0 2
36485: PUSH
36486: LD_INT 4
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: LD_VAR 0 1
36498: PUSH
36499: LD_INT 3
36501: PLUS
36502: PUSH
36503: LD_VAR 0 2
36507: PUSH
36508: LD_INT 3
36510: PLUS
36511: PUSH
36512: LD_INT 5
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: PUSH
36520: LD_VAR 0 1
36524: PUSH
36525: LD_VAR 0 2
36529: PUSH
36530: LD_INT 4
36532: PLUS
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// end ; 1 :
36549: GO 37249
36551: LD_INT 1
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36559
36557: GO 36692
36559: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36560: LD_ADDR_VAR 0 5
36564: PUSH
36565: LD_VAR 0 1
36569: PUSH
36570: LD_VAR 0 2
36574: PUSH
36575: LD_INT 4
36577: MINUS
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: PUSH
36587: LD_VAR 0 1
36591: PUSH
36592: LD_INT 3
36594: MINUS
36595: PUSH
36596: LD_VAR 0 2
36600: PUSH
36601: LD_INT 3
36603: MINUS
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: PUSH
36613: LD_VAR 0 1
36617: PUSH
36618: LD_INT 4
36620: MINUS
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: PUSH
36635: LD_VAR 0 1
36639: PUSH
36640: LD_VAR 0 2
36644: PUSH
36645: LD_INT 3
36647: PLUS
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: PUSH
36657: LD_VAR 0 1
36661: PUSH
36662: LD_INT 4
36664: PLUS
36665: PUSH
36666: LD_VAR 0 2
36670: PUSH
36671: LD_INT 4
36673: PLUS
36674: PUSH
36675: LD_INT 5
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// end ; 2 :
36690: GO 37249
36692: LD_INT 2
36694: DOUBLE
36695: EQUAL
36696: IFTRUE 36700
36698: GO 36829
36700: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36701: LD_ADDR_VAR 0 5
36705: PUSH
36706: LD_VAR 0 1
36710: PUSH
36711: LD_VAR 0 2
36715: PUSH
36716: LD_INT 3
36718: MINUS
36719: PUSH
36720: LD_INT 3
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: PUSH
36728: LD_VAR 0 1
36732: PUSH
36733: LD_INT 4
36735: PLUS
36736: PUSH
36737: LD_VAR 0 2
36741: PUSH
36742: LD_INT 4
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: PUSH
36750: LD_VAR 0 1
36754: PUSH
36755: LD_VAR 0 2
36759: PUSH
36760: LD_INT 4
36762: PLUS
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: PUSH
36772: LD_VAR 0 1
36776: PUSH
36777: LD_INT 3
36779: MINUS
36780: PUSH
36781: LD_VAR 0 2
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: PUSH
36794: LD_VAR 0 1
36798: PUSH
36799: LD_INT 4
36801: MINUS
36802: PUSH
36803: LD_VAR 0 2
36807: PUSH
36808: LD_INT 4
36810: MINUS
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// end ; 3 :
36827: GO 37249
36829: LD_INT 3
36831: DOUBLE
36832: EQUAL
36833: IFTRUE 36837
36835: GO 36970
36837: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36838: LD_ADDR_VAR 0 5
36842: PUSH
36843: LD_VAR 0 1
36847: PUSH
36848: LD_INT 3
36850: PLUS
36851: PUSH
36852: LD_VAR 0 2
36856: PUSH
36857: LD_INT 4
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: PUSH
36865: LD_VAR 0 1
36869: PUSH
36870: LD_INT 4
36872: PLUS
36873: PUSH
36874: LD_VAR 0 2
36878: PUSH
36879: LD_INT 4
36881: PLUS
36882: PUSH
36883: LD_INT 5
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: LD_VAR 0 1
36895: PUSH
36896: LD_INT 4
36898: MINUS
36899: PUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: PUSH
36913: LD_VAR 0 1
36917: PUSH
36918: LD_VAR 0 2
36922: PUSH
36923: LD_INT 4
36925: MINUS
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: PUSH
36935: LD_VAR 0 1
36939: PUSH
36940: LD_INT 3
36942: MINUS
36943: PUSH
36944: LD_VAR 0 2
36948: PUSH
36949: LD_INT 3
36951: MINUS
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// end ; 4 :
36968: GO 37249
36970: LD_INT 4
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 37111
36978: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36979: LD_ADDR_VAR 0 5
36983: PUSH
36984: LD_VAR 0 1
36988: PUSH
36989: LD_VAR 0 2
36993: PUSH
36994: LD_INT 4
36996: PLUS
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: LD_INT 3
37013: PLUS
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 3
37022: PLUS
37023: PUSH
37024: LD_INT 5
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: LD_VAR 0 1
37036: PUSH
37037: LD_INT 4
37039: PLUS
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_INT 4
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: LD_VAR 0 1
37058: PUSH
37059: LD_VAR 0 2
37063: PUSH
37064: LD_INT 3
37066: MINUS
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: PUSH
37076: LD_VAR 0 1
37080: PUSH
37081: LD_INT 4
37083: MINUS
37084: PUSH
37085: LD_VAR 0 2
37089: PUSH
37090: LD_INT 4
37092: MINUS
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// end ; 5 :
37109: GO 37249
37111: LD_INT 5
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37248
37119: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37120: LD_ADDR_VAR 0 5
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_INT 4
37132: MINUS
37133: PUSH
37134: LD_VAR 0 2
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: LD_VAR 0 2
37156: PUSH
37157: LD_INT 4
37159: MINUS
37160: PUSH
37161: LD_INT 3
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: PUSH
37169: LD_VAR 0 1
37173: PUSH
37174: LD_INT 4
37176: PLUS
37177: PUSH
37178: LD_VAR 0 2
37182: PUSH
37183: LD_INT 4
37185: PLUS
37186: PUSH
37187: LD_INT 5
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: LD_VAR 0 1
37199: PUSH
37200: LD_INT 3
37202: PLUS
37203: PUSH
37204: LD_VAR 0 2
37208: PUSH
37209: LD_INT 4
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: PUSH
37217: LD_VAR 0 1
37221: PUSH
37222: LD_VAR 0 2
37226: PUSH
37227: LD_INT 3
37229: PLUS
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// end ; end ;
37246: GO 37249
37248: POP
// result := list ;
37249: LD_ADDR_VAR 0 4
37253: PUSH
37254: LD_VAR 0 5
37258: ST_TO_ADDR
// end ;
37259: LD_VAR 0 4
37263: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37264: LD_INT 0
37266: PPUSH
37267: PPUSH
37268: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37269: LD_VAR 0 1
37273: NOT
37274: PUSH
37275: LD_VAR 0 2
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: LD_INT 3
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: IN
37298: NOT
37299: OR
37300: IFFALSE 37304
// exit ;
37302: GO 37387
// tmp := [ ] ;
37304: LD_ADDR_VAR 0 5
37308: PUSH
37309: EMPTY
37310: ST_TO_ADDR
// for i in units do
37311: LD_ADDR_VAR 0 4
37315: PUSH
37316: LD_VAR 0 1
37320: PUSH
37321: FOR_IN
37322: IFFALSE 37356
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37324: LD_ADDR_VAR 0 5
37328: PUSH
37329: LD_VAR 0 5
37333: PPUSH
37334: LD_VAR 0 4
37338: PPUSH
37339: LD_VAR 0 2
37343: PPUSH
37344: CALL_OW 259
37348: PPUSH
37349: CALL 38747 0 2
37353: ST_TO_ADDR
37354: GO 37321
37356: POP
37357: POP
// if not tmp then
37358: LD_VAR 0 5
37362: NOT
37363: IFFALSE 37367
// exit ;
37365: GO 37387
// result := SortListByListDesc ( units , tmp ) ;
37367: LD_ADDR_VAR 0 3
37371: PUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: LD_VAR 0 5
37381: PPUSH
37382: CALL_OW 77
37386: ST_TO_ADDR
// end ;
37387: LD_VAR 0 3
37391: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37392: LD_INT 0
37394: PPUSH
37395: PPUSH
37396: PPUSH
// result := false ;
37397: LD_ADDR_VAR 0 3
37401: PUSH
37402: LD_INT 0
37404: ST_TO_ADDR
// if not building then
37405: LD_VAR 0 2
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 37552
// x := GetX ( building ) ;
37414: LD_ADDR_VAR 0 4
37418: PUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: CALL_OW 250
37428: ST_TO_ADDR
// y := GetY ( building ) ;
37429: LD_ADDR_VAR 0 5
37433: PUSH
37434: LD_VAR 0 2
37438: PPUSH
37439: CALL_OW 251
37443: ST_TO_ADDR
// if not x or not y then
37444: LD_VAR 0 4
37448: NOT
37449: PUSH
37450: LD_VAR 0 5
37454: NOT
37455: OR
37456: IFFALSE 37460
// exit ;
37458: GO 37552
// if GetTaskList ( unit ) then
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 437
37469: IFFALSE 37552
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37471: LD_STRING e
37473: PUSH
37474: LD_VAR 0 1
37478: PPUSH
37479: CALL_OW 437
37483: PUSH
37484: LD_INT 1
37486: ARRAY
37487: PUSH
37488: LD_INT 1
37490: ARRAY
37491: EQUAL
37492: PUSH
37493: LD_VAR 0 4
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 437
37507: PUSH
37508: LD_INT 1
37510: ARRAY
37511: PUSH
37512: LD_INT 2
37514: ARRAY
37515: EQUAL
37516: AND
37517: PUSH
37518: LD_VAR 0 5
37522: PUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 437
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: PUSH
37537: LD_INT 3
37539: ARRAY
37540: EQUAL
37541: AND
37542: IFFALSE 37552
// result := true end ;
37544: LD_ADDR_VAR 0 3
37548: PUSH
37549: LD_INT 1
37551: ST_TO_ADDR
// end ;
37552: LD_VAR 0 3
37556: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37557: LD_INT 0
37559: PPUSH
// result := false ;
37560: LD_ADDR_VAR 0 4
37564: PUSH
37565: LD_INT 0
37567: ST_TO_ADDR
// if GetTaskList ( unit ) then
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 437
37577: IFFALSE 37660
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37579: LD_STRING M
37581: PUSH
37582: LD_VAR 0 1
37586: PPUSH
37587: CALL_OW 437
37591: PUSH
37592: LD_INT 1
37594: ARRAY
37595: PUSH
37596: LD_INT 1
37598: ARRAY
37599: EQUAL
37600: PUSH
37601: LD_VAR 0 2
37605: PUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: CALL_OW 437
37615: PUSH
37616: LD_INT 1
37618: ARRAY
37619: PUSH
37620: LD_INT 2
37622: ARRAY
37623: EQUAL
37624: AND
37625: PUSH
37626: LD_VAR 0 3
37630: PUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 437
37640: PUSH
37641: LD_INT 1
37643: ARRAY
37644: PUSH
37645: LD_INT 3
37647: ARRAY
37648: EQUAL
37649: AND
37650: IFFALSE 37660
// result := true ;
37652: LD_ADDR_VAR 0 4
37656: PUSH
37657: LD_INT 1
37659: ST_TO_ADDR
// end ; end ;
37660: LD_VAR 0 4
37664: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37665: LD_INT 0
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
// if not unit or not area then
37671: LD_VAR 0 1
37675: NOT
37676: PUSH
37677: LD_VAR 0 2
37681: NOT
37682: OR
37683: IFFALSE 37687
// exit ;
37685: GO 37850
// tmp := AreaToList ( area , i ) ;
37687: LD_ADDR_VAR 0 6
37691: PUSH
37692: LD_VAR 0 2
37696: PPUSH
37697: LD_VAR 0 5
37701: PPUSH
37702: CALL_OW 517
37706: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37707: LD_ADDR_VAR 0 5
37711: PUSH
37712: DOUBLE
37713: LD_INT 1
37715: DEC
37716: ST_TO_ADDR
37717: LD_VAR 0 6
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PUSH
37726: FOR_TO
37727: IFFALSE 37848
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37729: LD_ADDR_VAR 0 7
37733: PUSH
37734: LD_VAR 0 6
37738: PUSH
37739: LD_INT 1
37741: ARRAY
37742: PUSH
37743: LD_VAR 0 5
37747: ARRAY
37748: PUSH
37749: LD_VAR 0 6
37753: PUSH
37754: LD_INT 2
37756: ARRAY
37757: PUSH
37758: LD_VAR 0 5
37762: ARRAY
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37768: LD_INT 92
37770: PUSH
37771: LD_VAR 0 7
37775: PUSH
37776: LD_INT 1
37778: ARRAY
37779: PUSH
37780: LD_VAR 0 7
37784: PUSH
37785: LD_INT 2
37787: ARRAY
37788: PUSH
37789: LD_INT 3
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: PPUSH
37798: CALL_OW 69
37802: PUSH
37803: LD_INT 0
37805: EQUAL
37806: IFFALSE 37846
// begin PlaceUnitArea ( unit , area , mode ) ;
37808: LD_VAR 0 1
37812: PPUSH
37813: LD_VAR 0 2
37817: PPUSH
37818: LD_VAR 0 3
37822: PPUSH
37823: CALL_OW 49
// result := IsPlaced ( unit ) ;
37827: LD_ADDR_VAR 0 4
37831: PUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: CALL_OW 305
37841: ST_TO_ADDR
// exit ;
37842: POP
37843: POP
37844: GO 37850
// end ; end ;
37846: GO 37726
37848: POP
37849: POP
// end ;
37850: LD_VAR 0 4
37854: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37855: LD_INT 0
37857: PPUSH
37858: PPUSH
37859: PPUSH
// if not side or side > 8 then
37860: LD_VAR 0 1
37864: NOT
37865: PUSH
37866: LD_VAR 0 1
37870: PUSH
37871: LD_INT 8
37873: GREATER
37874: OR
37875: IFFALSE 37879
// exit ;
37877: GO 38066
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37879: LD_ADDR_VAR 0 4
37883: PUSH
37884: LD_INT 22
37886: PUSH
37887: LD_VAR 0 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 21
37898: PUSH
37899: LD_INT 3
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PPUSH
37910: CALL_OW 69
37914: ST_TO_ADDR
// if not tmp then
37915: LD_VAR 0 4
37919: NOT
37920: IFFALSE 37924
// exit ;
37922: GO 38066
// enable_addtolog := true ;
37924: LD_ADDR_OWVAR 81
37928: PUSH
37929: LD_INT 1
37931: ST_TO_ADDR
// AddToLog ( [ ) ;
37932: LD_STRING [
37934: PPUSH
37935: CALL_OW 561
// for i in tmp do
37939: LD_ADDR_VAR 0 3
37943: PUSH
37944: LD_VAR 0 4
37948: PUSH
37949: FOR_IN
37950: IFFALSE 38057
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37952: LD_STRING [
37954: PUSH
37955: LD_VAR 0 3
37959: PPUSH
37960: CALL_OW 266
37964: STR
37965: PUSH
37966: LD_STRING , 
37968: STR
37969: PUSH
37970: LD_VAR 0 3
37974: PPUSH
37975: CALL_OW 250
37979: STR
37980: PUSH
37981: LD_STRING , 
37983: STR
37984: PUSH
37985: LD_VAR 0 3
37989: PPUSH
37990: CALL_OW 251
37994: STR
37995: PUSH
37996: LD_STRING , 
37998: STR
37999: PUSH
38000: LD_VAR 0 3
38004: PPUSH
38005: CALL_OW 254
38009: STR
38010: PUSH
38011: LD_STRING , 
38013: STR
38014: PUSH
38015: LD_VAR 0 3
38019: PPUSH
38020: LD_INT 1
38022: PPUSH
38023: CALL_OW 268
38027: STR
38028: PUSH
38029: LD_STRING , 
38031: STR
38032: PUSH
38033: LD_VAR 0 3
38037: PPUSH
38038: LD_INT 2
38040: PPUSH
38041: CALL_OW 268
38045: STR
38046: PUSH
38047: LD_STRING ],
38049: STR
38050: PPUSH
38051: CALL_OW 561
// end ;
38055: GO 37949
38057: POP
38058: POP
// AddToLog ( ]; ) ;
38059: LD_STRING ];
38061: PPUSH
38062: CALL_OW 561
// end ;
38066: LD_VAR 0 2
38070: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38071: LD_INT 0
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
// if not area or not rate or not max then
38078: LD_VAR 0 1
38082: NOT
38083: PUSH
38084: LD_VAR 0 2
38088: NOT
38089: OR
38090: PUSH
38091: LD_VAR 0 4
38095: NOT
38096: OR
38097: IFFALSE 38101
// exit ;
38099: GO 38290
// while 1 do
38101: LD_INT 1
38103: IFFALSE 38290
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38105: LD_ADDR_VAR 0 9
38109: PUSH
38110: LD_VAR 0 1
38114: PPUSH
38115: LD_INT 1
38117: PPUSH
38118: CALL_OW 287
38122: PUSH
38123: LD_INT 10
38125: MUL
38126: ST_TO_ADDR
// r := rate / 10 ;
38127: LD_ADDR_VAR 0 7
38131: PUSH
38132: LD_VAR 0 2
38136: PUSH
38137: LD_INT 10
38139: DIVREAL
38140: ST_TO_ADDR
// time := 1 1$00 ;
38141: LD_ADDR_VAR 0 8
38145: PUSH
38146: LD_INT 2100
38148: ST_TO_ADDR
// if amount < min then
38149: LD_VAR 0 9
38153: PUSH
38154: LD_VAR 0 3
38158: LESS
38159: IFFALSE 38177
// r := r * 2 else
38161: LD_ADDR_VAR 0 7
38165: PUSH
38166: LD_VAR 0 7
38170: PUSH
38171: LD_INT 2
38173: MUL
38174: ST_TO_ADDR
38175: GO 38203
// if amount > max then
38177: LD_VAR 0 9
38181: PUSH
38182: LD_VAR 0 4
38186: GREATER
38187: IFFALSE 38203
// r := r / 2 ;
38189: LD_ADDR_VAR 0 7
38193: PUSH
38194: LD_VAR 0 7
38198: PUSH
38199: LD_INT 2
38201: DIVREAL
38202: ST_TO_ADDR
// time := time / r ;
38203: LD_ADDR_VAR 0 8
38207: PUSH
38208: LD_VAR 0 8
38212: PUSH
38213: LD_VAR 0 7
38217: DIVREAL
38218: ST_TO_ADDR
// if time < 0 then
38219: LD_VAR 0 8
38223: PUSH
38224: LD_INT 0
38226: LESS
38227: IFFALSE 38244
// time := time * - 1 ;
38229: LD_ADDR_VAR 0 8
38233: PUSH
38234: LD_VAR 0 8
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: MUL
38243: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38244: LD_VAR 0 8
38248: PUSH
38249: LD_INT 35
38251: PPUSH
38252: LD_INT 875
38254: PPUSH
38255: CALL_OW 12
38259: PLUS
38260: PPUSH
38261: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38265: LD_INT 1
38267: PPUSH
38268: LD_INT 5
38270: PPUSH
38271: CALL_OW 12
38275: PPUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: LD_INT 1
38283: PPUSH
38284: CALL_OW 55
// end ;
38288: GO 38101
// end ;
38290: LD_VAR 0 5
38294: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38295: LD_INT 0
38297: PPUSH
38298: PPUSH
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
// if not turrets or not factories then
38305: LD_VAR 0 1
38309: NOT
38310: PUSH
38311: LD_VAR 0 2
38315: NOT
38316: OR
38317: IFFALSE 38321
// exit ;
38319: GO 38628
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38321: LD_ADDR_VAR 0 10
38325: PUSH
38326: LD_INT 5
38328: PUSH
38329: LD_INT 6
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 4
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: LD_INT 5
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 24
38363: PUSH
38364: LD_INT 25
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 23
38373: PUSH
38374: LD_INT 27
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 42
38387: PUSH
38388: LD_INT 43
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 44
38397: PUSH
38398: LD_INT 46
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 45
38407: PUSH
38408: LD_INT 47
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: ST_TO_ADDR
// result := [ ] ;
38425: LD_ADDR_VAR 0 3
38429: PUSH
38430: EMPTY
38431: ST_TO_ADDR
// for i in turrets do
38432: LD_ADDR_VAR 0 4
38436: PUSH
38437: LD_VAR 0 1
38441: PUSH
38442: FOR_IN
38443: IFFALSE 38626
// begin nat := GetNation ( i ) ;
38445: LD_ADDR_VAR 0 7
38449: PUSH
38450: LD_VAR 0 4
38454: PPUSH
38455: CALL_OW 248
38459: ST_TO_ADDR
// weapon := 0 ;
38460: LD_ADDR_VAR 0 8
38464: PUSH
38465: LD_INT 0
38467: ST_TO_ADDR
// if not nat then
38468: LD_VAR 0 7
38472: NOT
38473: IFFALSE 38477
// continue ;
38475: GO 38442
// for j in list [ nat ] do
38477: LD_ADDR_VAR 0 5
38481: PUSH
38482: LD_VAR 0 10
38486: PUSH
38487: LD_VAR 0 7
38491: ARRAY
38492: PUSH
38493: FOR_IN
38494: IFFALSE 38535
// if GetBWeapon ( i ) = j [ 1 ] then
38496: LD_VAR 0 4
38500: PPUSH
38501: CALL_OW 269
38505: PUSH
38506: LD_VAR 0 5
38510: PUSH
38511: LD_INT 1
38513: ARRAY
38514: EQUAL
38515: IFFALSE 38533
// begin weapon := j [ 2 ] ;
38517: LD_ADDR_VAR 0 8
38521: PUSH
38522: LD_VAR 0 5
38526: PUSH
38527: LD_INT 2
38529: ARRAY
38530: ST_TO_ADDR
// break ;
38531: GO 38535
// end ;
38533: GO 38493
38535: POP
38536: POP
// if not weapon then
38537: LD_VAR 0 8
38541: NOT
38542: IFFALSE 38546
// continue ;
38544: GO 38442
// for k in factories do
38546: LD_ADDR_VAR 0 6
38550: PUSH
38551: LD_VAR 0 2
38555: PUSH
38556: FOR_IN
38557: IFFALSE 38622
// begin weapons := AvailableWeaponList ( k ) ;
38559: LD_ADDR_VAR 0 9
38563: PUSH
38564: LD_VAR 0 6
38568: PPUSH
38569: CALL_OW 478
38573: ST_TO_ADDR
// if not weapons then
38574: LD_VAR 0 9
38578: NOT
38579: IFFALSE 38583
// continue ;
38581: GO 38556
// if weapon in weapons then
38583: LD_VAR 0 8
38587: PUSH
38588: LD_VAR 0 9
38592: IN
38593: IFFALSE 38620
// begin result := [ i , weapon ] ;
38595: LD_ADDR_VAR 0 3
38599: PUSH
38600: LD_VAR 0 4
38604: PUSH
38605: LD_VAR 0 8
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: ST_TO_ADDR
// exit ;
38614: POP
38615: POP
38616: POP
38617: POP
38618: GO 38628
// end ; end ;
38620: GO 38556
38622: POP
38623: POP
// end ;
38624: GO 38442
38626: POP
38627: POP
// end ;
38628: LD_VAR 0 3
38632: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38633: LD_INT 0
38635: PPUSH
// if not side or side > 8 then
38636: LD_VAR 0 3
38640: NOT
38641: PUSH
38642: LD_VAR 0 3
38646: PUSH
38647: LD_INT 8
38649: GREATER
38650: OR
38651: IFFALSE 38655
// exit ;
38653: GO 38714
// if not range then
38655: LD_VAR 0 4
38659: NOT
38660: IFFALSE 38671
// range := - 12 ;
38662: LD_ADDR_VAR 0 4
38666: PUSH
38667: LD_INT 12
38669: NEG
38670: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38671: LD_VAR 0 1
38675: PPUSH
38676: LD_VAR 0 2
38680: PPUSH
38681: LD_VAR 0 3
38685: PPUSH
38686: LD_VAR 0 4
38690: PPUSH
38691: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38695: LD_VAR 0 1
38699: PPUSH
38700: LD_VAR 0 2
38704: PPUSH
38705: LD_VAR 0 3
38709: PPUSH
38710: CALL_OW 331
// end ;
38714: LD_VAR 0 5
38718: RET
// export function Video ( mode ) ; begin
38719: LD_INT 0
38721: PPUSH
// ingame_video = mode ;
38722: LD_ADDR_OWVAR 52
38726: PUSH
38727: LD_VAR 0 1
38731: ST_TO_ADDR
// interface_hidden = mode ;
38732: LD_ADDR_OWVAR 54
38736: PUSH
38737: LD_VAR 0 1
38741: ST_TO_ADDR
// end ;
38742: LD_VAR 0 2
38746: RET
// export function Join ( array , element ) ; begin
38747: LD_INT 0
38749: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38750: LD_ADDR_VAR 0 3
38754: PUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: LD_VAR 0 1
38764: PUSH
38765: LD_INT 1
38767: PLUS
38768: PPUSH
38769: LD_VAR 0 2
38773: PPUSH
38774: CALL_OW 1
38778: ST_TO_ADDR
// end ;
38779: LD_VAR 0 3
38783: RET
// export function JoinUnion ( array , element ) ; begin
38784: LD_INT 0
38786: PPUSH
// result := array union element ;
38787: LD_ADDR_VAR 0 3
38791: PUSH
38792: LD_VAR 0 1
38796: PUSH
38797: LD_VAR 0 2
38801: UNION
38802: ST_TO_ADDR
// end ;
38803: LD_VAR 0 3
38807: RET
// export function GetBehemoths ( side ) ; begin
38808: LD_INT 0
38810: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38811: LD_ADDR_VAR 0 2
38815: PUSH
38816: LD_INT 22
38818: PUSH
38819: LD_VAR 0 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 31
38830: PUSH
38831: LD_INT 25
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PPUSH
38842: CALL_OW 69
38846: ST_TO_ADDR
// end ;
38847: LD_VAR 0 2
38851: RET
// export function Shuffle ( array ) ; var i , index ; begin
38852: LD_INT 0
38854: PPUSH
38855: PPUSH
38856: PPUSH
// result := [ ] ;
38857: LD_ADDR_VAR 0 2
38861: PUSH
38862: EMPTY
38863: ST_TO_ADDR
// if not array then
38864: LD_VAR 0 1
38868: NOT
38869: IFFALSE 38873
// exit ;
38871: GO 38972
// Randomize ;
38873: CALL_OW 10
// for i = array downto 1 do
38877: LD_ADDR_VAR 0 3
38881: PUSH
38882: DOUBLE
38883: LD_VAR 0 1
38887: INC
38888: ST_TO_ADDR
38889: LD_INT 1
38891: PUSH
38892: FOR_DOWNTO
38893: IFFALSE 38970
// begin index := rand ( 1 , array ) ;
38895: LD_ADDR_VAR 0 4
38899: PUSH
38900: LD_INT 1
38902: PPUSH
38903: LD_VAR 0 1
38907: PPUSH
38908: CALL_OW 12
38912: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38913: LD_ADDR_VAR 0 2
38917: PUSH
38918: LD_VAR 0 2
38922: PPUSH
38923: LD_VAR 0 2
38927: PUSH
38928: LD_INT 1
38930: PLUS
38931: PPUSH
38932: LD_VAR 0 1
38936: PUSH
38937: LD_VAR 0 4
38941: ARRAY
38942: PPUSH
38943: CALL_OW 2
38947: ST_TO_ADDR
// array := Delete ( array , index ) ;
38948: LD_ADDR_VAR 0 1
38952: PUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: LD_VAR 0 4
38962: PPUSH
38963: CALL_OW 3
38967: ST_TO_ADDR
// end ;
38968: GO 38892
38970: POP
38971: POP
// end ;
38972: LD_VAR 0 2
38976: RET
// export function GetBaseMaterials ( base ) ; begin
38977: LD_INT 0
38979: PPUSH
// result := [ 0 , 0 , 0 ] ;
38980: LD_ADDR_VAR 0 2
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// if not base then
38999: LD_VAR 0 1
39003: NOT
39004: IFFALSE 39008
// exit ;
39006: GO 39057
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39008: LD_ADDR_VAR 0 2
39012: PUSH
39013: LD_VAR 0 1
39017: PPUSH
39018: LD_INT 1
39020: PPUSH
39021: CALL_OW 275
39025: PUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: LD_INT 2
39033: PPUSH
39034: CALL_OW 275
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: LD_INT 3
39046: PPUSH
39047: CALL_OW 275
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: ST_TO_ADDR
// end ;
39057: LD_VAR 0 2
39061: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39062: LD_INT 0
39064: PPUSH
39065: PPUSH
// result := array ;
39066: LD_ADDR_VAR 0 3
39070: PUSH
39071: LD_VAR 0 1
39075: ST_TO_ADDR
// if size >= result then
39076: LD_VAR 0 2
39080: PUSH
39081: LD_VAR 0 3
39085: GREATEREQUAL
39086: IFFALSE 39090
// exit ;
39088: GO 39140
// if size then
39090: LD_VAR 0 2
39094: IFFALSE 39140
// for i := array downto size do
39096: LD_ADDR_VAR 0 4
39100: PUSH
39101: DOUBLE
39102: LD_VAR 0 1
39106: INC
39107: ST_TO_ADDR
39108: LD_VAR 0 2
39112: PUSH
39113: FOR_DOWNTO
39114: IFFALSE 39138
// result := Delete ( result , result ) ;
39116: LD_ADDR_VAR 0 3
39120: PUSH
39121: LD_VAR 0 3
39125: PPUSH
39126: LD_VAR 0 3
39130: PPUSH
39131: CALL_OW 3
39135: ST_TO_ADDR
39136: GO 39113
39138: POP
39139: POP
// end ;
39140: LD_VAR 0 3
39144: RET
// export function ComExit ( unit ) ; var tmp ; begin
39145: LD_INT 0
39147: PPUSH
39148: PPUSH
// if not IsInUnit ( unit ) then
39149: LD_VAR 0 1
39153: PPUSH
39154: CALL_OW 310
39158: NOT
39159: IFFALSE 39163
// exit ;
39161: GO 39223
// tmp := IsInUnit ( unit ) ;
39163: LD_ADDR_VAR 0 3
39167: PUSH
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL_OW 310
39177: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39178: LD_VAR 0 3
39182: PPUSH
39183: CALL_OW 247
39187: PUSH
39188: LD_INT 2
39190: EQUAL
39191: IFFALSE 39204
// ComExitVehicle ( unit ) else
39193: LD_VAR 0 1
39197: PPUSH
39198: CALL_OW 121
39202: GO 39213
// ComExitBuilding ( unit ) ;
39204: LD_VAR 0 1
39208: PPUSH
39209: CALL_OW 122
// result := tmp ;
39213: LD_ADDR_VAR 0 2
39217: PUSH
39218: LD_VAR 0 3
39222: ST_TO_ADDR
// end ;
39223: LD_VAR 0 2
39227: RET
// export function ComExitAll ( units ) ; var i ; begin
39228: LD_INT 0
39230: PPUSH
39231: PPUSH
// if not units then
39232: LD_VAR 0 1
39236: NOT
39237: IFFALSE 39241
// exit ;
39239: GO 39267
// for i in units do
39241: LD_ADDR_VAR 0 3
39245: PUSH
39246: LD_VAR 0 1
39250: PUSH
39251: FOR_IN
39252: IFFALSE 39265
// ComExit ( i ) ;
39254: LD_VAR 0 3
39258: PPUSH
39259: CALL 39145 0 1
39263: GO 39251
39265: POP
39266: POP
// end ;
39267: LD_VAR 0 2
39271: RET
// export function ResetHc ; begin
39272: LD_INT 0
39274: PPUSH
// InitHc ;
39275: CALL_OW 19
// hc_importance := 0 ;
39279: LD_ADDR_OWVAR 32
39283: PUSH
39284: LD_INT 0
39286: ST_TO_ADDR
// end ;
39287: LD_VAR 0 1
39291: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39292: LD_INT 0
39294: PPUSH
39295: PPUSH
39296: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39297: LD_ADDR_VAR 0 6
39301: PUSH
39302: LD_VAR 0 1
39306: PUSH
39307: LD_VAR 0 3
39311: PLUS
39312: PUSH
39313: LD_INT 2
39315: DIV
39316: ST_TO_ADDR
// if _x < 0 then
39317: LD_VAR 0 6
39321: PUSH
39322: LD_INT 0
39324: LESS
39325: IFFALSE 39342
// _x := _x * - 1 ;
39327: LD_ADDR_VAR 0 6
39331: PUSH
39332: LD_VAR 0 6
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: MUL
39341: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39342: LD_ADDR_VAR 0 7
39346: PUSH
39347: LD_VAR 0 2
39351: PUSH
39352: LD_VAR 0 4
39356: PLUS
39357: PUSH
39358: LD_INT 2
39360: DIV
39361: ST_TO_ADDR
// if _y < 0 then
39362: LD_VAR 0 7
39366: PUSH
39367: LD_INT 0
39369: LESS
39370: IFFALSE 39387
// _y := _y * - 1 ;
39372: LD_ADDR_VAR 0 7
39376: PUSH
39377: LD_VAR 0 7
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: MUL
39386: ST_TO_ADDR
// result := [ _x , _y ] ;
39387: LD_ADDR_VAR 0 5
39391: PUSH
39392: LD_VAR 0 6
39396: PUSH
39397: LD_VAR 0 7
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// end ;
39406: LD_VAR 0 5
39410: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39411: LD_INT 0
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
// task := GetTaskList ( unit ) ;
39417: LD_ADDR_VAR 0 7
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 437
39431: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39432: LD_VAR 0 7
39436: NOT
39437: PUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: LD_VAR 0 2
39447: PPUSH
39448: CALL_OW 308
39452: NOT
39453: AND
39454: IFFALSE 39458
// exit ;
39456: GO 39576
// if IsInArea ( unit , area ) then
39458: LD_VAR 0 1
39462: PPUSH
39463: LD_VAR 0 2
39467: PPUSH
39468: CALL_OW 308
39472: IFFALSE 39490
// begin ComMoveToArea ( unit , goAway ) ;
39474: LD_VAR 0 1
39478: PPUSH
39479: LD_VAR 0 3
39483: PPUSH
39484: CALL_OW 113
// exit ;
39488: GO 39576
// end ; if task [ 1 ] [ 1 ] <> M then
39490: LD_VAR 0 7
39494: PUSH
39495: LD_INT 1
39497: ARRAY
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PUSH
39503: LD_STRING M
39505: NONEQUAL
39506: IFFALSE 39510
// exit ;
39508: GO 39576
// x := task [ 1 ] [ 2 ] ;
39510: LD_ADDR_VAR 0 5
39514: PUSH
39515: LD_VAR 0 7
39519: PUSH
39520: LD_INT 1
39522: ARRAY
39523: PUSH
39524: LD_INT 2
39526: ARRAY
39527: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39528: LD_ADDR_VAR 0 6
39532: PUSH
39533: LD_VAR 0 7
39537: PUSH
39538: LD_INT 1
39540: ARRAY
39541: PUSH
39542: LD_INT 3
39544: ARRAY
39545: ST_TO_ADDR
// if InArea ( x , y , area ) then
39546: LD_VAR 0 5
39550: PPUSH
39551: LD_VAR 0 6
39555: PPUSH
39556: LD_VAR 0 2
39560: PPUSH
39561: CALL_OW 309
39565: IFFALSE 39576
// ComStop ( unit ) ;
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 141
// end ;
39576: LD_VAR 0 4
39580: RET
// export function Abs ( value ) ; begin
39581: LD_INT 0
39583: PPUSH
// result := value ;
39584: LD_ADDR_VAR 0 2
39588: PUSH
39589: LD_VAR 0 1
39593: ST_TO_ADDR
// if value < 0 then
39594: LD_VAR 0 1
39598: PUSH
39599: LD_INT 0
39601: LESS
39602: IFFALSE 39619
// result := value * - 1 ;
39604: LD_ADDR_VAR 0 2
39608: PUSH
39609: LD_VAR 0 1
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: MUL
39618: ST_TO_ADDR
// end ;
39619: LD_VAR 0 2
39623: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39624: LD_INT 0
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
// if not unit or not building then
39634: LD_VAR 0 1
39638: NOT
39639: PUSH
39640: LD_VAR 0 2
39644: NOT
39645: OR
39646: IFFALSE 39650
// exit ;
39648: GO 39876
// x := GetX ( building ) ;
39650: LD_ADDR_VAR 0 4
39654: PUSH
39655: LD_VAR 0 2
39659: PPUSH
39660: CALL_OW 250
39664: ST_TO_ADDR
// y := GetY ( building ) ;
39665: LD_ADDR_VAR 0 6
39669: PUSH
39670: LD_VAR 0 2
39674: PPUSH
39675: CALL_OW 251
39679: ST_TO_ADDR
// d := GetDir ( building ) ;
39680: LD_ADDR_VAR 0 8
39684: PUSH
39685: LD_VAR 0 2
39689: PPUSH
39690: CALL_OW 254
39694: ST_TO_ADDR
// r := 4 ;
39695: LD_ADDR_VAR 0 9
39699: PUSH
39700: LD_INT 4
39702: ST_TO_ADDR
// for i := 1 to 5 do
39703: LD_ADDR_VAR 0 10
39707: PUSH
39708: DOUBLE
39709: LD_INT 1
39711: DEC
39712: ST_TO_ADDR
39713: LD_INT 5
39715: PUSH
39716: FOR_TO
39717: IFFALSE 39874
// begin _x := ShiftX ( x , d , r + i ) ;
39719: LD_ADDR_VAR 0 5
39723: PUSH
39724: LD_VAR 0 4
39728: PPUSH
39729: LD_VAR 0 8
39733: PPUSH
39734: LD_VAR 0 9
39738: PUSH
39739: LD_VAR 0 10
39743: PLUS
39744: PPUSH
39745: CALL_OW 272
39749: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39750: LD_ADDR_VAR 0 7
39754: PUSH
39755: LD_VAR 0 6
39759: PPUSH
39760: LD_VAR 0 8
39764: PPUSH
39765: LD_VAR 0 9
39769: PUSH
39770: LD_VAR 0 10
39774: PLUS
39775: PPUSH
39776: CALL_OW 273
39780: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39781: LD_VAR 0 5
39785: PPUSH
39786: LD_VAR 0 7
39790: PPUSH
39791: CALL_OW 488
39795: PUSH
39796: LD_VAR 0 5
39800: PPUSH
39801: LD_VAR 0 7
39805: PPUSH
39806: CALL_OW 428
39810: PPUSH
39811: CALL_OW 247
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: IN
39826: NOT
39827: AND
39828: IFFALSE 39872
// begin ComMoveXY ( unit , _x , _y ) ;
39830: LD_VAR 0 1
39834: PPUSH
39835: LD_VAR 0 5
39839: PPUSH
39840: LD_VAR 0 7
39844: PPUSH
39845: CALL_OW 111
// result := [ _x , _y ] ;
39849: LD_ADDR_VAR 0 3
39853: PUSH
39854: LD_VAR 0 5
39858: PUSH
39859: LD_VAR 0 7
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: ST_TO_ADDR
// exit ;
39868: POP
39869: POP
39870: GO 39876
// end ; end ;
39872: GO 39716
39874: POP
39875: POP
// end ;
39876: LD_VAR 0 3
39880: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39881: LD_INT 0
39883: PPUSH
39884: PPUSH
39885: PPUSH
// result := 0 ;
39886: LD_ADDR_VAR 0 3
39890: PUSH
39891: LD_INT 0
39893: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39894: LD_VAR 0 1
39898: PUSH
39899: LD_INT 0
39901: LESS
39902: PUSH
39903: LD_VAR 0 1
39907: PUSH
39908: LD_INT 8
39910: GREATER
39911: OR
39912: PUSH
39913: LD_VAR 0 2
39917: PUSH
39918: LD_INT 0
39920: LESS
39921: OR
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: LD_INT 8
39930: GREATER
39931: OR
39932: IFFALSE 39936
// exit ;
39934: GO 40011
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39936: LD_ADDR_VAR 0 4
39940: PUSH
39941: LD_INT 22
39943: PUSH
39944: LD_VAR 0 2
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PPUSH
39953: CALL_OW 69
39957: PUSH
39958: FOR_IN
39959: IFFALSE 40009
// begin un := UnitShoot ( i ) ;
39961: LD_ADDR_VAR 0 5
39965: PUSH
39966: LD_VAR 0 4
39970: PPUSH
39971: CALL_OW 504
39975: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39976: LD_VAR 0 5
39980: PPUSH
39981: CALL_OW 255
39985: PUSH
39986: LD_VAR 0 1
39990: EQUAL
39991: IFFALSE 40007
// begin result := un ;
39993: LD_ADDR_VAR 0 3
39997: PUSH
39998: LD_VAR 0 5
40002: ST_TO_ADDR
// exit ;
40003: POP
40004: POP
40005: GO 40011
// end ; end ;
40007: GO 39958
40009: POP
40010: POP
// end ;
40011: LD_VAR 0 3
40015: RET
// export function GetCargoBay ( units ) ; begin
40016: LD_INT 0
40018: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40019: LD_ADDR_VAR 0 2
40023: PUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 34
40034: PUSH
40035: LD_INT 12
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 34
40044: PUSH
40045: LD_INT 51
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 34
40054: PUSH
40055: LD_INT 32
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 34
40064: PUSH
40065: LD_INT 89
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: PPUSH
40079: CALL_OW 72
40083: ST_TO_ADDR
// end ;
40084: LD_VAR 0 2
40088: RET
// export function Negate ( value ) ; begin
40089: LD_INT 0
40091: PPUSH
// result := not value ;
40092: LD_ADDR_VAR 0 2
40096: PUSH
40097: LD_VAR 0 1
40101: NOT
40102: ST_TO_ADDR
// end ;
40103: LD_VAR 0 2
40107: RET
// export function Inc ( value ) ; begin
40108: LD_INT 0
40110: PPUSH
// result := value + 1 ;
40111: LD_ADDR_VAR 0 2
40115: PUSH
40116: LD_VAR 0 1
40120: PUSH
40121: LD_INT 1
40123: PLUS
40124: ST_TO_ADDR
// end ;
40125: LD_VAR 0 2
40129: RET
// export function Dec ( value ) ; begin
40130: LD_INT 0
40132: PPUSH
// result := value - 1 ;
40133: LD_ADDR_VAR 0 2
40137: PUSH
40138: LD_VAR 0 1
40142: PUSH
40143: LD_INT 1
40145: MINUS
40146: ST_TO_ADDR
// end ;
40147: LD_VAR 0 2
40151: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40162: LD_VAR 0 1
40166: PPUSH
40167: LD_VAR 0 2
40171: PPUSH
40172: CALL_OW 488
40176: NOT
40177: PUSH
40178: LD_VAR 0 3
40182: PPUSH
40183: LD_VAR 0 4
40187: PPUSH
40188: CALL_OW 488
40192: NOT
40193: OR
40194: IFFALSE 40207
// begin result := - 1 ;
40196: LD_ADDR_VAR 0 5
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: ST_TO_ADDR
// exit ;
40205: GO 40442
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40207: LD_ADDR_VAR 0 12
40211: PUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: LD_VAR 0 2
40221: PPUSH
40222: LD_VAR 0 3
40226: PPUSH
40227: LD_VAR 0 4
40231: PPUSH
40232: CALL 39292 0 4
40236: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40237: LD_ADDR_VAR 0 11
40241: PUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: LD_VAR 0 2
40251: PPUSH
40252: LD_VAR 0 12
40256: PUSH
40257: LD_INT 1
40259: ARRAY
40260: PPUSH
40261: LD_VAR 0 12
40265: PUSH
40266: LD_INT 2
40268: ARRAY
40269: PPUSH
40270: CALL_OW 298
40274: ST_TO_ADDR
// distance := 9999 ;
40275: LD_ADDR_VAR 0 10
40279: PUSH
40280: LD_INT 9999
40282: ST_TO_ADDR
// for i := 0 to 5 do
40283: LD_ADDR_VAR 0 6
40287: PUSH
40288: DOUBLE
40289: LD_INT 0
40291: DEC
40292: ST_TO_ADDR
40293: LD_INT 5
40295: PUSH
40296: FOR_TO
40297: IFFALSE 40440
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40299: LD_ADDR_VAR 0 7
40303: PUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: LD_VAR 0 6
40313: PPUSH
40314: LD_VAR 0 11
40318: PPUSH
40319: CALL_OW 272
40323: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40324: LD_ADDR_VAR 0 8
40328: PUSH
40329: LD_VAR 0 2
40333: PPUSH
40334: LD_VAR 0 6
40338: PPUSH
40339: LD_VAR 0 11
40343: PPUSH
40344: CALL_OW 273
40348: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40349: LD_VAR 0 7
40353: PPUSH
40354: LD_VAR 0 8
40358: PPUSH
40359: CALL_OW 488
40363: NOT
40364: IFFALSE 40368
// continue ;
40366: GO 40296
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40368: LD_ADDR_VAR 0 9
40372: PUSH
40373: LD_VAR 0 12
40377: PUSH
40378: LD_INT 1
40380: ARRAY
40381: PPUSH
40382: LD_VAR 0 12
40386: PUSH
40387: LD_INT 2
40389: ARRAY
40390: PPUSH
40391: LD_VAR 0 7
40395: PPUSH
40396: LD_VAR 0 8
40400: PPUSH
40401: CALL_OW 298
40405: ST_TO_ADDR
// if tmp < distance then
40406: LD_VAR 0 9
40410: PUSH
40411: LD_VAR 0 10
40415: LESS
40416: IFFALSE 40438
// begin result := i ;
40418: LD_ADDR_VAR 0 5
40422: PUSH
40423: LD_VAR 0 6
40427: ST_TO_ADDR
// distance := tmp ;
40428: LD_ADDR_VAR 0 10
40432: PUSH
40433: LD_VAR 0 9
40437: ST_TO_ADDR
// end ; end ;
40438: GO 40296
40440: POP
40441: POP
// end ;
40442: LD_VAR 0 5
40446: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40447: LD_INT 0
40449: PPUSH
40450: PPUSH
// if not driver or not IsInUnit ( driver ) then
40451: LD_VAR 0 1
40455: NOT
40456: PUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: CALL_OW 310
40466: NOT
40467: OR
40468: IFFALSE 40472
// exit ;
40470: GO 40562
// vehicle := IsInUnit ( driver ) ;
40472: LD_ADDR_VAR 0 3
40476: PUSH
40477: LD_VAR 0 1
40481: PPUSH
40482: CALL_OW 310
40486: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40487: LD_VAR 0 1
40491: PPUSH
40492: LD_STRING \
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: PUSH
40522: LD_STRING E
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_VAR 0 3
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PPUSH
40558: CALL_OW 446
// end ;
40562: LD_VAR 0 2
40566: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40567: LD_INT 0
40569: PPUSH
40570: PPUSH
// if not driver or not IsInUnit ( driver ) then
40571: LD_VAR 0 1
40575: NOT
40576: PUSH
40577: LD_VAR 0 1
40581: PPUSH
40582: CALL_OW 310
40586: NOT
40587: OR
40588: IFFALSE 40592
// exit ;
40590: GO 40682
// vehicle := IsInUnit ( driver ) ;
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 310
40606: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40607: LD_VAR 0 1
40611: PPUSH
40612: LD_STRING \
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: PUSH
40642: LD_STRING E
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_VAR 0 3
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PPUSH
40678: CALL_OW 447
// end ;
40682: LD_VAR 0 2
40686: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40687: LD_INT 0
40689: PPUSH
40690: PPUSH
40691: PPUSH
// tmp := [ ] ;
40692: LD_ADDR_VAR 0 5
40696: PUSH
40697: EMPTY
40698: ST_TO_ADDR
// for i in units do
40699: LD_ADDR_VAR 0 4
40703: PUSH
40704: LD_VAR 0 1
40708: PUSH
40709: FOR_IN
40710: IFFALSE 40748
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40712: LD_ADDR_VAR 0 5
40716: PUSH
40717: LD_VAR 0 5
40721: PPUSH
40722: LD_VAR 0 5
40726: PUSH
40727: LD_INT 1
40729: PLUS
40730: PPUSH
40731: LD_VAR 0 4
40735: PPUSH
40736: CALL_OW 256
40740: PPUSH
40741: CALL_OW 2
40745: ST_TO_ADDR
40746: GO 40709
40748: POP
40749: POP
// if not tmp then
40750: LD_VAR 0 5
40754: NOT
40755: IFFALSE 40759
// exit ;
40757: GO 40807
// if asc then
40759: LD_VAR 0 2
40763: IFFALSE 40787
// result := SortListByListAsc ( units , tmp ) else
40765: LD_ADDR_VAR 0 3
40769: PUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: LD_VAR 0 5
40779: PPUSH
40780: CALL_OW 76
40784: ST_TO_ADDR
40785: GO 40807
// result := SortListByListDesc ( units , tmp ) ;
40787: LD_ADDR_VAR 0 3
40791: PUSH
40792: LD_VAR 0 1
40796: PPUSH
40797: LD_VAR 0 5
40801: PPUSH
40802: CALL_OW 77
40806: ST_TO_ADDR
// end ;
40807: LD_VAR 0 3
40811: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40812: LD_INT 0
40814: PPUSH
40815: PPUSH
// task := GetTaskList ( mech ) ;
40816: LD_ADDR_VAR 0 4
40820: PUSH
40821: LD_VAR 0 1
40825: PPUSH
40826: CALL_OW 437
40830: ST_TO_ADDR
// if not task then
40831: LD_VAR 0 4
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 40882
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_VAR 0 4
40849: PUSH
40850: LD_INT 1
40852: ARRAY
40853: PUSH
40854: LD_INT 1
40856: ARRAY
40857: PUSH
40858: LD_STRING r
40860: EQUAL
40861: PUSH
40862: LD_VAR 0 4
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PUSH
40871: LD_INT 4
40873: ARRAY
40874: PUSH
40875: LD_VAR 0 2
40879: EQUAL
40880: AND
40881: ST_TO_ADDR
// end ;
40882: LD_VAR 0 3
40886: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40887: LD_INT 0
40889: PPUSH
// SetDir ( unit , d ) ;
40890: LD_VAR 0 1
40894: PPUSH
40895: LD_VAR 0 4
40899: PPUSH
40900: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40904: LD_VAR 0 1
40908: PPUSH
40909: LD_VAR 0 2
40913: PPUSH
40914: LD_VAR 0 3
40918: PPUSH
40919: LD_VAR 0 5
40923: PPUSH
40924: CALL_OW 48
// end ;
40928: LD_VAR 0 6
40932: RET
// export function ToNaturalNumber ( number ) ; begin
40933: LD_INT 0
40935: PPUSH
// result := number div 1 ;
40936: LD_ADDR_VAR 0 2
40940: PUSH
40941: LD_VAR 0 1
40945: PUSH
40946: LD_INT 1
40948: DIV
40949: ST_TO_ADDR
// if number < 0 then
40950: LD_VAR 0 1
40954: PUSH
40955: LD_INT 0
40957: LESS
40958: IFFALSE 40968
// result := 0 ;
40960: LD_ADDR_VAR 0 2
40964: PUSH
40965: LD_INT 0
40967: ST_TO_ADDR
// end ;
40968: LD_VAR 0 2
40972: RET
// export function SortByClass ( units , class ) ; var un ; begin
40973: LD_INT 0
40975: PPUSH
40976: PPUSH
// if not units or not class then
40977: LD_VAR 0 1
40981: NOT
40982: PUSH
40983: LD_VAR 0 2
40987: NOT
40988: OR
40989: IFFALSE 40993
// exit ;
40991: GO 41088
// result := [ ] ;
40993: LD_ADDR_VAR 0 3
40997: PUSH
40998: EMPTY
40999: ST_TO_ADDR
// for un in units do
41000: LD_ADDR_VAR 0 4
41004: PUSH
41005: LD_VAR 0 1
41009: PUSH
41010: FOR_IN
41011: IFFALSE 41086
// if GetClass ( un ) = class then
41013: LD_VAR 0 4
41017: PPUSH
41018: CALL_OW 257
41022: PUSH
41023: LD_VAR 0 2
41027: EQUAL
41028: IFFALSE 41055
// result := Insert ( result , 1 , un ) else
41030: LD_ADDR_VAR 0 3
41034: PUSH
41035: LD_VAR 0 3
41039: PPUSH
41040: LD_INT 1
41042: PPUSH
41043: LD_VAR 0 4
41047: PPUSH
41048: CALL_OW 2
41052: ST_TO_ADDR
41053: GO 41084
// result := Replace ( result , result + 1 , un ) ;
41055: LD_ADDR_VAR 0 3
41059: PUSH
41060: LD_VAR 0 3
41064: PPUSH
41065: LD_VAR 0 3
41069: PUSH
41070: LD_INT 1
41072: PLUS
41073: PPUSH
41074: LD_VAR 0 4
41078: PPUSH
41079: CALL_OW 1
41083: ST_TO_ADDR
41084: GO 41010
41086: POP
41087: POP
// end ;
41088: LD_VAR 0 3
41092: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41093: LD_INT 0
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
// result := [ ] ;
41102: LD_ADDR_VAR 0 4
41106: PUSH
41107: EMPTY
41108: ST_TO_ADDR
// if x - r < 0 then
41109: LD_VAR 0 1
41113: PUSH
41114: LD_VAR 0 3
41118: MINUS
41119: PUSH
41120: LD_INT 0
41122: LESS
41123: IFFALSE 41135
// min_x := 0 else
41125: LD_ADDR_VAR 0 8
41129: PUSH
41130: LD_INT 0
41132: ST_TO_ADDR
41133: GO 41151
// min_x := x - r ;
41135: LD_ADDR_VAR 0 8
41139: PUSH
41140: LD_VAR 0 1
41144: PUSH
41145: LD_VAR 0 3
41149: MINUS
41150: ST_TO_ADDR
// if y - r < 0 then
41151: LD_VAR 0 2
41155: PUSH
41156: LD_VAR 0 3
41160: MINUS
41161: PUSH
41162: LD_INT 0
41164: LESS
41165: IFFALSE 41177
// min_y := 0 else
41167: LD_ADDR_VAR 0 7
41171: PUSH
41172: LD_INT 0
41174: ST_TO_ADDR
41175: GO 41193
// min_y := y - r ;
41177: LD_ADDR_VAR 0 7
41181: PUSH
41182: LD_VAR 0 2
41186: PUSH
41187: LD_VAR 0 3
41191: MINUS
41192: ST_TO_ADDR
// max_x := x + r ;
41193: LD_ADDR_VAR 0 9
41197: PUSH
41198: LD_VAR 0 1
41202: PUSH
41203: LD_VAR 0 3
41207: PLUS
41208: ST_TO_ADDR
// max_y := y + r ;
41209: LD_ADDR_VAR 0 10
41213: PUSH
41214: LD_VAR 0 2
41218: PUSH
41219: LD_VAR 0 3
41223: PLUS
41224: ST_TO_ADDR
// for _x = min_x to max_x do
41225: LD_ADDR_VAR 0 5
41229: PUSH
41230: DOUBLE
41231: LD_VAR 0 8
41235: DEC
41236: ST_TO_ADDR
41237: LD_VAR 0 9
41241: PUSH
41242: FOR_TO
41243: IFFALSE 41344
// for _y = min_y to max_y do
41245: LD_ADDR_VAR 0 6
41249: PUSH
41250: DOUBLE
41251: LD_VAR 0 7
41255: DEC
41256: ST_TO_ADDR
41257: LD_VAR 0 10
41261: PUSH
41262: FOR_TO
41263: IFFALSE 41340
// begin if not ValidHex ( _x , _y ) then
41265: LD_VAR 0 5
41269: PPUSH
41270: LD_VAR 0 6
41274: PPUSH
41275: CALL_OW 488
41279: NOT
41280: IFFALSE 41284
// continue ;
41282: GO 41262
// if GetResourceTypeXY ( _x , _y ) then
41284: LD_VAR 0 5
41288: PPUSH
41289: LD_VAR 0 6
41293: PPUSH
41294: CALL_OW 283
41298: IFFALSE 41338
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41300: LD_ADDR_VAR 0 4
41304: PUSH
41305: LD_VAR 0 4
41309: PPUSH
41310: LD_VAR 0 4
41314: PUSH
41315: LD_INT 1
41317: PLUS
41318: PPUSH
41319: LD_VAR 0 5
41323: PUSH
41324: LD_VAR 0 6
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PPUSH
41333: CALL_OW 1
41337: ST_TO_ADDR
// end ;
41338: GO 41262
41340: POP
41341: POP
41342: GO 41242
41344: POP
41345: POP
// end ;
41346: LD_VAR 0 4
41350: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41351: LD_INT 0
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
// if not units then
41361: LD_VAR 0 1
41365: NOT
41366: IFFALSE 41370
// exit ;
41368: GO 41894
// result := UnitFilter ( units , [ f_ok ] ) ;
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_VAR 0 1
41379: PPUSH
41380: LD_INT 50
41382: PUSH
41383: EMPTY
41384: LIST
41385: PPUSH
41386: CALL_OW 72
41390: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41391: LD_ADDR_VAR 0 8
41395: PUSH
41396: LD_VAR 0 1
41400: PUSH
41401: LD_INT 1
41403: ARRAY
41404: PPUSH
41405: CALL_OW 255
41409: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41410: LD_ADDR_VAR 0 10
41414: PUSH
41415: LD_INT 29
41417: PUSH
41418: LD_INT 91
41420: PUSH
41421: LD_INT 49
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// if not result then
41429: LD_VAR 0 3
41433: NOT
41434: IFFALSE 41438
// exit ;
41436: GO 41894
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41438: LD_ADDR_VAR 0 5
41442: PUSH
41443: LD_INT 81
41445: PUSH
41446: LD_VAR 0 8
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PPUSH
41455: CALL_OW 69
41459: ST_TO_ADDR
// for i in result do
41460: LD_ADDR_VAR 0 4
41464: PUSH
41465: LD_VAR 0 3
41469: PUSH
41470: FOR_IN
41471: IFFALSE 41892
// begin tag := GetTag ( i ) + 1 ;
41473: LD_ADDR_VAR 0 9
41477: PUSH
41478: LD_VAR 0 4
41482: PPUSH
41483: CALL_OW 110
41487: PUSH
41488: LD_INT 1
41490: PLUS
41491: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41492: LD_ADDR_VAR 0 7
41496: PUSH
41497: LD_VAR 0 4
41501: PPUSH
41502: CALL_OW 250
41506: PPUSH
41507: LD_VAR 0 4
41511: PPUSH
41512: CALL_OW 251
41516: PPUSH
41517: LD_INT 6
41519: PPUSH
41520: CALL 41093 0 3
41524: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41525: LD_VAR 0 4
41529: PPUSH
41530: CALL_OW 247
41534: PUSH
41535: LD_INT 2
41537: EQUAL
41538: PUSH
41539: LD_VAR 0 7
41543: AND
41544: PUSH
41545: LD_VAR 0 4
41549: PPUSH
41550: CALL_OW 264
41554: PUSH
41555: LD_VAR 0 10
41559: IN
41560: NOT
41561: AND
41562: IFFALSE 41601
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41564: LD_VAR 0 4
41568: PPUSH
41569: LD_VAR 0 7
41573: PUSH
41574: LD_INT 1
41576: ARRAY
41577: PUSH
41578: LD_INT 1
41580: ARRAY
41581: PPUSH
41582: LD_VAR 0 7
41586: PUSH
41587: LD_INT 1
41589: ARRAY
41590: PUSH
41591: LD_INT 2
41593: ARRAY
41594: PPUSH
41595: CALL_OW 116
41599: GO 41890
// if path > tag then
41601: LD_VAR 0 2
41605: PUSH
41606: LD_VAR 0 9
41610: GREATER
41611: IFFALSE 41819
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41613: LD_ADDR_VAR 0 6
41617: PUSH
41618: LD_VAR 0 5
41622: PPUSH
41623: LD_INT 91
41625: PUSH
41626: LD_VAR 0 4
41630: PUSH
41631: LD_INT 8
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: PPUSH
41639: CALL_OW 72
41643: ST_TO_ADDR
// if nearEnemy then
41644: LD_VAR 0 6
41648: IFFALSE 41717
// begin if GetWeapon ( i ) = ru_time_lapser then
41650: LD_VAR 0 4
41654: PPUSH
41655: CALL_OW 264
41659: PUSH
41660: LD_INT 49
41662: EQUAL
41663: IFFALSE 41691
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41665: LD_VAR 0 4
41669: PPUSH
41670: LD_VAR 0 6
41674: PPUSH
41675: LD_VAR 0 4
41679: PPUSH
41680: CALL_OW 74
41684: PPUSH
41685: CALL_OW 112
41689: GO 41715
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41691: LD_VAR 0 4
41695: PPUSH
41696: LD_VAR 0 6
41700: PPUSH
41701: LD_VAR 0 4
41705: PPUSH
41706: CALL_OW 74
41710: PPUSH
41711: CALL 42819 0 2
// end else
41715: GO 41817
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41717: LD_VAR 0 4
41721: PPUSH
41722: LD_VAR 0 2
41726: PUSH
41727: LD_VAR 0 9
41731: ARRAY
41732: PUSH
41733: LD_INT 1
41735: ARRAY
41736: PPUSH
41737: LD_VAR 0 2
41741: PUSH
41742: LD_VAR 0 9
41746: ARRAY
41747: PUSH
41748: LD_INT 2
41750: ARRAY
41751: PPUSH
41752: CALL_OW 297
41756: PUSH
41757: LD_INT 6
41759: GREATER
41760: IFFALSE 41803
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41762: LD_VAR 0 4
41766: PPUSH
41767: LD_VAR 0 2
41771: PUSH
41772: LD_VAR 0 9
41776: ARRAY
41777: PUSH
41778: LD_INT 1
41780: ARRAY
41781: PPUSH
41782: LD_VAR 0 2
41786: PUSH
41787: LD_VAR 0 9
41791: ARRAY
41792: PUSH
41793: LD_INT 2
41795: ARRAY
41796: PPUSH
41797: CALL_OW 114
41801: GO 41817
// SetTag ( i , tag ) ;
41803: LD_VAR 0 4
41807: PPUSH
41808: LD_VAR 0 9
41812: PPUSH
41813: CALL_OW 109
// end else
41817: GO 41890
// if enemy then
41819: LD_VAR 0 5
41823: IFFALSE 41890
// begin if GetWeapon ( i ) = ru_time_lapser then
41825: LD_VAR 0 4
41829: PPUSH
41830: CALL_OW 264
41834: PUSH
41835: LD_INT 49
41837: EQUAL
41838: IFFALSE 41866
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41840: LD_VAR 0 4
41844: PPUSH
41845: LD_VAR 0 5
41849: PPUSH
41850: LD_VAR 0 4
41854: PPUSH
41855: CALL_OW 74
41859: PPUSH
41860: CALL_OW 112
41864: GO 41890
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41866: LD_VAR 0 4
41870: PPUSH
41871: LD_VAR 0 5
41875: PPUSH
41876: LD_VAR 0 4
41880: PPUSH
41881: CALL_OW 74
41885: PPUSH
41886: CALL 42819 0 2
// end ; end ;
41890: GO 41470
41892: POP
41893: POP
// end ;
41894: LD_VAR 0 3
41898: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41899: LD_INT 0
41901: PPUSH
41902: PPUSH
41903: PPUSH
// if not unit or IsInUnit ( unit ) then
41904: LD_VAR 0 1
41908: NOT
41909: PUSH
41910: LD_VAR 0 1
41914: PPUSH
41915: CALL_OW 310
41919: OR
41920: IFFALSE 41924
// exit ;
41922: GO 42015
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41924: LD_ADDR_VAR 0 4
41928: PUSH
41929: LD_VAR 0 1
41933: PPUSH
41934: CALL_OW 250
41938: PPUSH
41939: LD_VAR 0 2
41943: PPUSH
41944: LD_INT 1
41946: PPUSH
41947: CALL_OW 272
41951: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41952: LD_ADDR_VAR 0 5
41956: PUSH
41957: LD_VAR 0 1
41961: PPUSH
41962: CALL_OW 251
41966: PPUSH
41967: LD_VAR 0 2
41971: PPUSH
41972: LD_INT 1
41974: PPUSH
41975: CALL_OW 273
41979: ST_TO_ADDR
// if ValidHex ( x , y ) then
41980: LD_VAR 0 4
41984: PPUSH
41985: LD_VAR 0 5
41989: PPUSH
41990: CALL_OW 488
41994: IFFALSE 42015
// ComTurnXY ( unit , x , y ) ;
41996: LD_VAR 0 1
42000: PPUSH
42001: LD_VAR 0 4
42005: PPUSH
42006: LD_VAR 0 5
42010: PPUSH
42011: CALL_OW 118
// end ;
42015: LD_VAR 0 3
42019: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42020: LD_INT 0
42022: PPUSH
42023: PPUSH
// result := false ;
42024: LD_ADDR_VAR 0 3
42028: PUSH
42029: LD_INT 0
42031: ST_TO_ADDR
// if not units then
42032: LD_VAR 0 2
42036: NOT
42037: IFFALSE 42041
// exit ;
42039: GO 42086
// for i in units do
42041: LD_ADDR_VAR 0 4
42045: PUSH
42046: LD_VAR 0 2
42050: PUSH
42051: FOR_IN
42052: IFFALSE 42084
// if See ( side , i ) then
42054: LD_VAR 0 1
42058: PPUSH
42059: LD_VAR 0 4
42063: PPUSH
42064: CALL_OW 292
42068: IFFALSE 42082
// begin result := true ;
42070: LD_ADDR_VAR 0 3
42074: PUSH
42075: LD_INT 1
42077: ST_TO_ADDR
// exit ;
42078: POP
42079: POP
42080: GO 42086
// end ;
42082: GO 42051
42084: POP
42085: POP
// end ;
42086: LD_VAR 0 3
42090: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42091: LD_INT 0
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
// if not unit or not points then
42097: LD_VAR 0 1
42101: NOT
42102: PUSH
42103: LD_VAR 0 2
42107: NOT
42108: OR
42109: IFFALSE 42113
// exit ;
42111: GO 42203
// dist := 99999 ;
42113: LD_ADDR_VAR 0 5
42117: PUSH
42118: LD_INT 99999
42120: ST_TO_ADDR
// for i in points do
42121: LD_ADDR_VAR 0 4
42125: PUSH
42126: LD_VAR 0 2
42130: PUSH
42131: FOR_IN
42132: IFFALSE 42201
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42134: LD_ADDR_VAR 0 6
42138: PUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: LD_VAR 0 4
42148: PUSH
42149: LD_INT 1
42151: ARRAY
42152: PPUSH
42153: LD_VAR 0 4
42157: PUSH
42158: LD_INT 2
42160: ARRAY
42161: PPUSH
42162: CALL_OW 297
42166: ST_TO_ADDR
// if tmpDist < dist then
42167: LD_VAR 0 6
42171: PUSH
42172: LD_VAR 0 5
42176: LESS
42177: IFFALSE 42199
// begin result := i ;
42179: LD_ADDR_VAR 0 3
42183: PUSH
42184: LD_VAR 0 4
42188: ST_TO_ADDR
// dist := tmpDist ;
42189: LD_ADDR_VAR 0 5
42193: PUSH
42194: LD_VAR 0 6
42198: ST_TO_ADDR
// end ; end ;
42199: GO 42131
42201: POP
42202: POP
// end ;
42203: LD_VAR 0 3
42207: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42208: LD_INT 0
42210: PPUSH
// uc_side := side ;
42211: LD_ADDR_OWVAR 20
42215: PUSH
42216: LD_VAR 0 1
42220: ST_TO_ADDR
// uc_nation := 3 ;
42221: LD_ADDR_OWVAR 21
42225: PUSH
42226: LD_INT 3
42228: ST_TO_ADDR
// vc_chassis := 25 ;
42229: LD_ADDR_OWVAR 37
42233: PUSH
42234: LD_INT 25
42236: ST_TO_ADDR
// vc_engine := engine_siberite ;
42237: LD_ADDR_OWVAR 39
42241: PUSH
42242: LD_INT 3
42244: ST_TO_ADDR
// vc_control := control_computer ;
42245: LD_ADDR_OWVAR 38
42249: PUSH
42250: LD_INT 3
42252: ST_TO_ADDR
// vc_weapon := 59 ;
42253: LD_ADDR_OWVAR 40
42257: PUSH
42258: LD_INT 59
42260: ST_TO_ADDR
// result := CreateVehicle ;
42261: LD_ADDR_VAR 0 5
42265: PUSH
42266: CALL_OW 45
42270: ST_TO_ADDR
// SetDir ( result , d ) ;
42271: LD_VAR 0 5
42275: PPUSH
42276: LD_VAR 0 4
42280: PPUSH
42281: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42285: LD_VAR 0 5
42289: PPUSH
42290: LD_VAR 0 2
42294: PPUSH
42295: LD_VAR 0 3
42299: PPUSH
42300: LD_INT 0
42302: PPUSH
42303: CALL_OW 48
// end ;
42307: LD_VAR 0 5
42311: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42312: LD_INT 0
42314: PPUSH
42315: PPUSH
42316: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42317: LD_ADDR_VAR 0 2
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42340: LD_VAR 0 1
42344: NOT
42345: PUSH
42346: LD_VAR 0 1
42350: PPUSH
42351: CALL_OW 264
42355: PUSH
42356: LD_INT 12
42358: PUSH
42359: LD_INT 51
42361: PUSH
42362: LD_INT 32
42364: PUSH
42365: LD_INT 89
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: IN
42374: NOT
42375: OR
42376: IFFALSE 42380
// exit ;
42378: GO 42478
// for i := 1 to 3 do
42380: LD_ADDR_VAR 0 3
42384: PUSH
42385: DOUBLE
42386: LD_INT 1
42388: DEC
42389: ST_TO_ADDR
42390: LD_INT 3
42392: PUSH
42393: FOR_TO
42394: IFFALSE 42476
// begin tmp := GetCargo ( cargo , i ) ;
42396: LD_ADDR_VAR 0 4
42400: PUSH
42401: LD_VAR 0 1
42405: PPUSH
42406: LD_VAR 0 3
42410: PPUSH
42411: CALL_OW 289
42415: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42416: LD_ADDR_VAR 0 2
42420: PUSH
42421: LD_VAR 0 2
42425: PPUSH
42426: LD_VAR 0 3
42430: PPUSH
42431: LD_VAR 0 4
42435: PPUSH
42436: CALL_OW 1
42440: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42441: LD_ADDR_VAR 0 2
42445: PUSH
42446: LD_VAR 0 2
42450: PPUSH
42451: LD_INT 4
42453: PPUSH
42454: LD_VAR 0 2
42458: PUSH
42459: LD_INT 4
42461: ARRAY
42462: PUSH
42463: LD_VAR 0 4
42467: PLUS
42468: PPUSH
42469: CALL_OW 1
42473: ST_TO_ADDR
// end ;
42474: GO 42393
42476: POP
42477: POP
// end ;
42478: LD_VAR 0 2
42482: RET
// export function Length ( array ) ; begin
42483: LD_INT 0
42485: PPUSH
// result := array + 0 ;
42486: LD_ADDR_VAR 0 2
42490: PUSH
42491: LD_VAR 0 1
42495: PUSH
42496: LD_INT 0
42498: PLUS
42499: ST_TO_ADDR
// end ;
42500: LD_VAR 0 2
42504: RET
// export function PrepareArray ( array ) ; begin
42505: LD_INT 0
42507: PPUSH
// result := array diff 0 ;
42508: LD_ADDR_VAR 0 2
42512: PUSH
42513: LD_VAR 0 1
42517: PUSH
42518: LD_INT 0
42520: DIFF
42521: ST_TO_ADDR
// if not result [ 1 ] then
42522: LD_VAR 0 2
42526: PUSH
42527: LD_INT 1
42529: ARRAY
42530: NOT
42531: IFFALSE 42551
// result := Delete ( result , 1 ) ;
42533: LD_ADDR_VAR 0 2
42537: PUSH
42538: LD_VAR 0 2
42542: PPUSH
42543: LD_INT 1
42545: PPUSH
42546: CALL_OW 3
42550: ST_TO_ADDR
// end ;
42551: LD_VAR 0 2
42555: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42556: LD_INT 0
42558: PPUSH
42559: PPUSH
42560: PPUSH
42561: PPUSH
// sibRocketRange := 25 ;
42562: LD_ADDR_VAR 0 6
42566: PUSH
42567: LD_INT 25
42569: ST_TO_ADDR
// result := false ;
42570: LD_ADDR_VAR 0 4
42574: PUSH
42575: LD_INT 0
42577: ST_TO_ADDR
// for i := 0 to 5 do
42578: LD_ADDR_VAR 0 5
42582: PUSH
42583: DOUBLE
42584: LD_INT 0
42586: DEC
42587: ST_TO_ADDR
42588: LD_INT 5
42590: PUSH
42591: FOR_TO
42592: IFFALSE 42659
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42594: LD_VAR 0 1
42598: PPUSH
42599: LD_VAR 0 5
42603: PPUSH
42604: LD_VAR 0 6
42608: PPUSH
42609: CALL_OW 272
42613: PPUSH
42614: LD_VAR 0 2
42618: PPUSH
42619: LD_VAR 0 5
42623: PPUSH
42624: LD_VAR 0 6
42628: PPUSH
42629: CALL_OW 273
42633: PPUSH
42634: LD_VAR 0 3
42638: PPUSH
42639: CALL_OW 309
42643: IFFALSE 42657
// begin result := true ;
42645: LD_ADDR_VAR 0 4
42649: PUSH
42650: LD_INT 1
42652: ST_TO_ADDR
// exit ;
42653: POP
42654: POP
42655: GO 42661
// end ;
42657: GO 42591
42659: POP
42660: POP
// end ;
42661: LD_VAR 0 4
42665: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42666: LD_INT 0
42668: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42669: LD_VAR 0 1
42673: PPUSH
42674: LD_VAR 0 2
42678: PPUSH
42679: LD_INT 0
42681: PPUSH
42682: LD_INT 0
42684: PPUSH
42685: LD_INT 1
42687: PPUSH
42688: LD_INT 0
42690: PPUSH
42691: CALL_OW 587
// end ;
42695: LD_VAR 0 3
42699: RET
// export function CenterOnNow ( unit ) ; begin
42700: LD_INT 0
42702: PPUSH
// result := IsInUnit ( unit ) ;
42703: LD_ADDR_VAR 0 2
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: CALL_OW 310
42717: ST_TO_ADDR
// if not result then
42718: LD_VAR 0 2
42722: NOT
42723: IFFALSE 42735
// result := unit ;
42725: LD_ADDR_VAR 0 2
42729: PUSH
42730: LD_VAR 0 1
42734: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42735: LD_VAR 0 1
42739: PPUSH
42740: CALL_OW 87
// end ;
42744: LD_VAR 0 2
42748: RET
// export function ComMoveHex ( unit , hex ) ; begin
42749: LD_INT 0
42751: PPUSH
// if not hex then
42752: LD_VAR 0 2
42756: NOT
42757: IFFALSE 42761
// exit ;
42759: GO 42814
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42761: LD_VAR 0 2
42765: PUSH
42766: LD_INT 1
42768: ARRAY
42769: PPUSH
42770: LD_VAR 0 2
42774: PUSH
42775: LD_INT 2
42777: ARRAY
42778: PPUSH
42779: CALL_OW 428
42783: IFFALSE 42787
// exit ;
42785: GO 42814
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42787: LD_VAR 0 1
42791: PPUSH
42792: LD_VAR 0 2
42796: PUSH
42797: LD_INT 1
42799: ARRAY
42800: PPUSH
42801: LD_VAR 0 2
42805: PUSH
42806: LD_INT 2
42808: ARRAY
42809: PPUSH
42810: CALL_OW 111
// end ;
42814: LD_VAR 0 3
42818: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42819: LD_INT 0
42821: PPUSH
42822: PPUSH
42823: PPUSH
// if not unit or not enemy then
42824: LD_VAR 0 1
42828: NOT
42829: PUSH
42830: LD_VAR 0 2
42834: NOT
42835: OR
42836: IFFALSE 42840
// exit ;
42838: GO 42964
// x := GetX ( enemy ) ;
42840: LD_ADDR_VAR 0 4
42844: PUSH
42845: LD_VAR 0 2
42849: PPUSH
42850: CALL_OW 250
42854: ST_TO_ADDR
// y := GetY ( enemy ) ;
42855: LD_ADDR_VAR 0 5
42859: PUSH
42860: LD_VAR 0 2
42864: PPUSH
42865: CALL_OW 251
42869: ST_TO_ADDR
// if ValidHex ( x , y ) then
42870: LD_VAR 0 4
42874: PPUSH
42875: LD_VAR 0 5
42879: PPUSH
42880: CALL_OW 488
42884: IFFALSE 42964
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
42886: LD_VAR 0 2
42890: PPUSH
42891: CALL_OW 247
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: IN
42906: PUSH
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 255
42916: PPUSH
42917: LD_VAR 0 2
42921: PPUSH
42922: CALL_OW 292
42926: AND
42927: IFFALSE 42945
// ComAttackUnit ( unit , enemy ) else
42929: LD_VAR 0 1
42933: PPUSH
42934: LD_VAR 0 2
42938: PPUSH
42939: CALL_OW 115
42943: GO 42964
// ComAgressiveMove ( unit , x , y ) ;
42945: LD_VAR 0 1
42949: PPUSH
42950: LD_VAR 0 4
42954: PPUSH
42955: LD_VAR 0 5
42959: PPUSH
42960: CALL_OW 114
// end ;
42964: LD_VAR 0 3
42968: RET
