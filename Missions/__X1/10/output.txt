// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 9 0 0
// end ;
   8: END
// export debug , prefix ; function Init ; begin
   9: LD_INT 0
  11: PPUSH
// debug := true ;
  12: LD_ADDR_EXP 1
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// prefix := 09_ ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_STRING 09_
  27: ST_TO_ADDR
// end ; end_of_file
  28: LD_VAR 0 1
  32: RET
// export Heike , Omar , Kaia ; export function PrepareArabian ; begin
  33: LD_INT 0
  35: PPUSH
// uc_side := 2 ;
  36: LD_ADDR_OWVAR 20
  40: PUSH
  41: LD_INT 2
  43: ST_TO_ADDR
// uc_nation := nation_arabian ;
  44: LD_ADDR_OWVAR 21
  48: PUSH
  49: LD_INT 2
  51: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING Heike
  59: PPUSH
  60: LD_EXP 1
  64: NOT
  65: PPUSH
  66: LD_EXP 2
  70: PPUSH
  71: CALL 126 0 3
  75: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_STRING Kaia
  83: PPUSH
  84: LD_EXP 1
  88: NOT
  89: PPUSH
  90: LD_EXP 2
  94: PPUSH
  95: CALL 126 0 3
  99: ST_TO_ADDR
// uc_side := 5 ;
 100: LD_ADDR_OWVAR 20
 104: PUSH
 105: LD_INT 5
 107: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_STRING Omar
 115: PPUSH
 116: CALL_OW 25
 120: ST_TO_ADDR
// end ; end_of_file
 121: LD_VAR 0 1
 125: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 126: LD_INT 0
 128: PPUSH
 129: PPUSH
// if exist_mode then
 130: LD_VAR 0 2
 134: IFFALSE 159
// unit := CreateCharacter ( prefix & ident ) else
 136: LD_ADDR_VAR 0 5
 140: PUSH
 141: LD_VAR 0 3
 145: PUSH
 146: LD_VAR 0 1
 150: STR
 151: PPUSH
 152: CALL_OW 34
 156: ST_TO_ADDR
 157: GO 174
// unit := NewCharacter ( ident ) ;
 159: LD_ADDR_VAR 0 5
 163: PUSH
 164: LD_VAR 0 1
 168: PPUSH
 169: CALL_OW 25
 173: ST_TO_ADDR
// result := unit ;
 174: LD_ADDR_VAR 0 4
 178: PUSH
 179: LD_VAR 0 5
 183: ST_TO_ADDR
// end ;
 184: LD_VAR 0 4
 188: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 189: LD_INT 0
 191: PPUSH
 192: PPUSH
// if not side or not nation then
 193: LD_VAR 0 1
 197: NOT
 198: PUSH
 199: LD_VAR 0 2
 203: NOT
 204: OR
 205: IFFALSE 209
// exit ;
 207: GO 977
// case nation of nation_american :
 209: LD_VAR 0 2
 213: PUSH
 214: LD_INT 1
 216: DOUBLE
 217: EQUAL
 218: IFTRUE 222
 220: GO 436
 222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 223: LD_ADDR_VAR 0 4
 227: PUSH
 228: LD_INT 35
 230: PUSH
 231: LD_INT 45
 233: PUSH
 234: LD_INT 46
 236: PUSH
 237: LD_INT 47
 239: PUSH
 240: LD_INT 82
 242: PUSH
 243: LD_INT 83
 245: PUSH
 246: LD_INT 84
 248: PUSH
 249: LD_INT 85
 251: PUSH
 252: LD_INT 86
 254: PUSH
 255: LD_INT 1
 257: PUSH
 258: LD_INT 2
 260: PUSH
 261: LD_INT 6
 263: PUSH
 264: LD_INT 15
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 7
 272: PUSH
 273: LD_INT 12
 275: PUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 10
 281: PUSH
 282: LD_INT 14
 284: PUSH
 285: LD_INT 20
 287: PUSH
 288: LD_INT 21
 290: PUSH
 291: LD_INT 22
 293: PUSH
 294: LD_INT 25
 296: PUSH
 297: LD_INT 32
 299: PUSH
 300: LD_INT 27
 302: PUSH
 303: LD_INT 36
 305: PUSH
 306: LD_INT 69
 308: PUSH
 309: LD_INT 39
 311: PUSH
 312: LD_INT 34
 314: PUSH
 315: LD_INT 40
 317: PUSH
 318: LD_INT 48
 320: PUSH
 321: LD_INT 49
 323: PUSH
 324: LD_INT 50
 326: PUSH
 327: LD_INT 51
 329: PUSH
 330: LD_INT 52
 332: PUSH
 333: LD_INT 53
 335: PUSH
 336: LD_INT 54
 338: PUSH
 339: LD_INT 55
 341: PUSH
 342: LD_INT 56
 344: PUSH
 345: LD_INT 57
 347: PUSH
 348: LD_INT 58
 350: PUSH
 351: LD_INT 59
 353: PUSH
 354: LD_INT 60
 356: PUSH
 357: LD_INT 61
 359: PUSH
 360: LD_INT 62
 362: PUSH
 363: LD_INT 80
 365: PUSH
 366: LD_INT 82
 368: PUSH
 369: LD_INT 83
 371: PUSH
 372: LD_INT 84
 374: PUSH
 375: LD_INT 85
 377: PUSH
 378: LD_INT 86
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: ST_TO_ADDR
 434: GO 901
 436: LD_INT 2
 438: DOUBLE
 439: EQUAL
 440: IFTRUE 444
 442: GO 670
 444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_INT 35
 452: PUSH
 453: LD_INT 45
 455: PUSH
 456: LD_INT 46
 458: PUSH
 459: LD_INT 47
 461: PUSH
 462: LD_INT 82
 464: PUSH
 465: LD_INT 83
 467: PUSH
 468: LD_INT 84
 470: PUSH
 471: LD_INT 85
 473: PUSH
 474: LD_INT 87
 476: PUSH
 477: LD_INT 70
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: LD_INT 11
 485: PUSH
 486: LD_INT 3
 488: PUSH
 489: LD_INT 4
 491: PUSH
 492: LD_INT 5
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 15
 500: PUSH
 501: LD_INT 18
 503: PUSH
 504: LD_INT 7
 506: PUSH
 507: LD_INT 17
 509: PUSH
 510: LD_INT 8
 512: PUSH
 513: LD_INT 20
 515: PUSH
 516: LD_INT 21
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 72
 524: PUSH
 525: LD_INT 26
 527: PUSH
 528: LD_INT 69
 530: PUSH
 531: LD_INT 39
 533: PUSH
 534: LD_INT 40
 536: PUSH
 537: LD_INT 41
 539: PUSH
 540: LD_INT 42
 542: PUSH
 543: LD_INT 43
 545: PUSH
 546: LD_INT 48
 548: PUSH
 549: LD_INT 49
 551: PUSH
 552: LD_INT 50
 554: PUSH
 555: LD_INT 51
 557: PUSH
 558: LD_INT 52
 560: PUSH
 561: LD_INT 53
 563: PUSH
 564: LD_INT 54
 566: PUSH
 567: LD_INT 55
 569: PUSH
 570: LD_INT 56
 572: PUSH
 573: LD_INT 60
 575: PUSH
 576: LD_INT 61
 578: PUSH
 579: LD_INT 62
 581: PUSH
 582: LD_INT 66
 584: PUSH
 585: LD_INT 67
 587: PUSH
 588: LD_INT 68
 590: PUSH
 591: LD_INT 81
 593: PUSH
 594: LD_INT 82
 596: PUSH
 597: LD_INT 83
 599: PUSH
 600: LD_INT 84
 602: PUSH
 603: LD_INT 85
 605: PUSH
 606: LD_INT 87
 608: PUSH
 609: LD_INT 88
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: ST_TO_ADDR
 668: GO 901
 670: LD_INT 3
 672: DOUBLE
 673: EQUAL
 674: IFTRUE 678
 676: GO 900
 678: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 679: LD_ADDR_VAR 0 4
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 47
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 82
 698: PUSH
 699: LD_INT 83
 701: PUSH
 702: LD_INT 84
 704: PUSH
 705: LD_INT 85
 707: PUSH
 708: LD_INT 86
 710: PUSH
 711: LD_INT 11
 713: PUSH
 714: LD_INT 9
 716: PUSH
 717: LD_INT 20
 719: PUSH
 720: LD_INT 19
 722: PUSH
 723: LD_INT 21
 725: PUSH
 726: LD_INT 24
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 25
 734: PUSH
 735: LD_INT 28
 737: PUSH
 738: LD_INT 29
 740: PUSH
 741: LD_INT 30
 743: PUSH
 744: LD_INT 31
 746: PUSH
 747: LD_INT 37
 749: PUSH
 750: LD_INT 38
 752: PUSH
 753: LD_INT 32
 755: PUSH
 756: LD_INT 27
 758: PUSH
 759: LD_INT 33
 761: PUSH
 762: LD_INT 69
 764: PUSH
 765: LD_INT 39
 767: PUSH
 768: LD_INT 34
 770: PUSH
 771: LD_INT 40
 773: PUSH
 774: LD_INT 71
 776: PUSH
 777: LD_INT 23
 779: PUSH
 780: LD_INT 44
 782: PUSH
 783: LD_INT 48
 785: PUSH
 786: LD_INT 49
 788: PUSH
 789: LD_INT 50
 791: PUSH
 792: LD_INT 51
 794: PUSH
 795: LD_INT 52
 797: PUSH
 798: LD_INT 53
 800: PUSH
 801: LD_INT 54
 803: PUSH
 804: LD_INT 55
 806: PUSH
 807: LD_INT 56
 809: PUSH
 810: LD_INT 57
 812: PUSH
 813: LD_INT 58
 815: PUSH
 816: LD_INT 59
 818: PUSH
 819: LD_INT 63
 821: PUSH
 822: LD_INT 64
 824: PUSH
 825: LD_INT 65
 827: PUSH
 828: LD_INT 82
 830: PUSH
 831: LD_INT 83
 833: PUSH
 834: LD_INT 84
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: LD_INT 86
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: ST_TO_ADDR
 898: GO 901
 900: POP
// if state > - 1 and state < 3 then
 901: LD_VAR 0 3
 905: PUSH
 906: LD_INT 1
 908: NEG
 909: GREATER
 910: PUSH
 911: LD_VAR 0 3
 915: PUSH
 916: LD_INT 3
 918: LESS
 919: AND
 920: IFFALSE 977
// for i in result do
 922: LD_ADDR_VAR 0 5
 926: PUSH
 927: LD_VAR 0 4
 931: PUSH
 932: FOR_IN
 933: IFFALSE 975
// if GetTech ( i , side ) <> state then
 935: LD_VAR 0 5
 939: PPUSH
 940: LD_VAR 0 1
 944: PPUSH
 945: CALL_OW 321
 949: PUSH
 950: LD_VAR 0 3
 954: NONEQUAL
 955: IFFALSE 973
// result := result diff i ;
 957: LD_ADDR_VAR 0 4
 961: PUSH
 962: LD_VAR 0 4
 966: PUSH
 967: LD_VAR 0 5
 971: DIFF
 972: ST_TO_ADDR
 973: GO 932
 975: POP
 976: POP
// end ;
 977: LD_VAR 0 4
 981: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
 982: LD_INT 0
 984: PPUSH
 985: PPUSH
 986: PPUSH
// result := true ;
 987: LD_ADDR_VAR 0 3
 991: PUSH
 992: LD_INT 1
 994: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL_OW 480
1009: ST_TO_ADDR
// if not tmp then
1010: LD_VAR 0 5
1014: NOT
1015: IFFALSE 1019
// exit ;
1017: GO 1068
// for i in tmp do
1019: LD_ADDR_VAR 0 4
1023: PUSH
1024: LD_VAR 0 5
1028: PUSH
1029: FOR_IN
1030: IFFALSE 1066
// if GetTech ( i , side ) <> state_researched then
1032: LD_VAR 0 4
1036: PPUSH
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 321
1046: PUSH
1047: LD_INT 2
1049: NONEQUAL
1050: IFFALSE 1064
// begin result := false ;
1052: LD_ADDR_VAR 0 3
1056: PUSH
1057: LD_INT 0
1059: ST_TO_ADDR
// exit ;
1060: POP
1061: POP
1062: GO 1068
// end ;
1064: GO 1029
1066: POP
1067: POP
// end ;
1068: LD_VAR 0 3
1072: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1073: LD_INT 0
1075: PPUSH
1076: PPUSH
1077: PPUSH
1078: PPUSH
1079: PPUSH
1080: PPUSH
1081: PPUSH
1082: PPUSH
1083: PPUSH
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1088: LD_VAR 0 1
1092: NOT
1093: PUSH
1094: LD_VAR 0 1
1098: PPUSH
1099: CALL_OW 257
1103: PUSH
1104: LD_INT 9
1106: NONEQUAL
1107: OR
1108: IFFALSE 1112
// exit ;
1110: GO 1685
// side := GetSide ( unit ) ;
1112: LD_ADDR_VAR 0 9
1116: PUSH
1117: LD_VAR 0 1
1121: PPUSH
1122: CALL_OW 255
1126: ST_TO_ADDR
// tech_space := tech_spacanom ;
1127: LD_ADDR_VAR 0 12
1131: PUSH
1132: LD_INT 29
1134: ST_TO_ADDR
// tech_time := tech_taurad ;
1135: LD_ADDR_VAR 0 13
1139: PUSH
1140: LD_INT 28
1142: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1143: LD_ADDR_VAR 0 11
1147: PUSH
1148: LD_VAR 0 1
1152: PPUSH
1153: CALL_OW 310
1157: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1158: LD_VAR 0 11
1162: PPUSH
1163: CALL_OW 247
1167: PUSH
1168: LD_INT 2
1170: EQUAL
1171: IFFALSE 1175
// exit ;
1173: GO 1685
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1175: LD_ADDR_VAR 0 8
1179: PUSH
1180: LD_INT 81
1182: PUSH
1183: LD_VAR 0 9
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: LD_INT 21
1197: PUSH
1198: LD_INT 3
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PPUSH
1213: CALL_OW 69
1217: ST_TO_ADDR
// if not tmp then
1218: LD_VAR 0 8
1222: NOT
1223: IFFALSE 1227
// exit ;
1225: GO 1685
// if in_unit then
1227: LD_VAR 0 11
1231: IFFALSE 1255
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1233: LD_ADDR_VAR 0 10
1237: PUSH
1238: LD_VAR 0 8
1242: PPUSH
1243: LD_VAR 0 11
1247: PPUSH
1248: CALL_OW 74
1252: ST_TO_ADDR
1253: GO 1275
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1255: LD_ADDR_VAR 0 10
1259: PUSH
1260: LD_VAR 0 8
1264: PPUSH
1265: LD_VAR 0 1
1269: PPUSH
1270: CALL_OW 74
1274: ST_TO_ADDR
// if not enemy then
1275: LD_VAR 0 10
1279: NOT
1280: IFFALSE 1284
// exit ;
1282: GO 1685
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1284: LD_VAR 0 11
1288: PUSH
1289: LD_VAR 0 11
1293: PPUSH
1294: LD_VAR 0 10
1298: PPUSH
1299: CALL_OW 296
1303: PUSH
1304: LD_INT 13
1306: GREATER
1307: AND
1308: PUSH
1309: LD_VAR 0 1
1313: PPUSH
1314: LD_VAR 0 10
1318: PPUSH
1319: CALL_OW 296
1323: PUSH
1324: LD_INT 12
1326: GREATER
1327: OR
1328: IFFALSE 1332
// exit ;
1330: GO 1685
// missile := [ 1 ] ;
1332: LD_ADDR_VAR 0 14
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: EMPTY
1341: LIST
1342: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1343: LD_VAR 0 9
1347: PPUSH
1348: LD_VAR 0 12
1352: PPUSH
1353: CALL_OW 325
1357: IFFALSE 1386
// missile := Replace ( missile , missile + 1 , 2 ) ;
1359: LD_ADDR_VAR 0 14
1363: PUSH
1364: LD_VAR 0 14
1368: PPUSH
1369: LD_VAR 0 14
1373: PUSH
1374: LD_INT 1
1376: PLUS
1377: PPUSH
1378: LD_INT 2
1380: PPUSH
1381: CALL_OW 1
1385: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1386: LD_VAR 0 9
1390: PPUSH
1391: LD_VAR 0 13
1395: PPUSH
1396: CALL_OW 325
1400: PUSH
1401: LD_VAR 0 10
1405: PPUSH
1406: CALL_OW 255
1410: PPUSH
1411: LD_VAR 0 13
1415: PPUSH
1416: CALL_OW 325
1420: NOT
1421: AND
1422: IFFALSE 1451
// missile := Replace ( missile , missile + 1 , 3 ) ;
1424: LD_ADDR_VAR 0 14
1428: PUSH
1429: LD_VAR 0 14
1433: PPUSH
1434: LD_VAR 0 14
1438: PUSH
1439: LD_INT 1
1441: PLUS
1442: PPUSH
1443: LD_INT 3
1445: PPUSH
1446: CALL_OW 1
1450: ST_TO_ADDR
// if missile < 2 then
1451: LD_VAR 0 14
1455: PUSH
1456: LD_INT 2
1458: LESS
1459: IFFALSE 1463
// exit ;
1461: GO 1685
// x := GetX ( enemy ) ;
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_VAR 0 10
1472: PPUSH
1473: CALL_OW 250
1477: ST_TO_ADDR
// y := GetY ( enemy ) ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_VAR 0 10
1487: PPUSH
1488: CALL_OW 251
1492: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1493: LD_ADDR_VAR 0 6
1497: PUSH
1498: LD_VAR 0 4
1502: PUSH
1503: LD_INT 1
1505: NEG
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: CALL_OW 12
1514: PLUS
1515: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1516: LD_ADDR_VAR 0 7
1520: PUSH
1521: LD_VAR 0 5
1525: PUSH
1526: LD_INT 1
1528: NEG
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: CALL_OW 12
1537: PLUS
1538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1539: LD_VAR 0 6
1543: PPUSH
1544: LD_VAR 0 7
1548: PPUSH
1549: CALL_OW 488
1553: NOT
1554: IFFALSE 1576
// begin _x := x ;
1556: LD_ADDR_VAR 0 6
1560: PUSH
1561: LD_VAR 0 4
1565: ST_TO_ADDR
// _y := y ;
1566: LD_ADDR_VAR 0 7
1570: PUSH
1571: LD_VAR 0 5
1575: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1576: LD_ADDR_VAR 0 3
1580: PUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_VAR 0 14
1588: PPUSH
1589: CALL_OW 12
1593: ST_TO_ADDR
// case i of 1 :
1594: LD_VAR 0 3
1598: PUSH
1599: LD_INT 1
1601: DOUBLE
1602: EQUAL
1603: IFTRUE 1607
1605: GO 1624
1607: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1608: LD_VAR 0 1
1612: PPUSH
1613: LD_VAR 0 10
1617: PPUSH
1618: CALL_OW 115
1622: GO 1685
1624: LD_INT 2
1626: DOUBLE
1627: EQUAL
1628: IFTRUE 1632
1630: GO 1654
1632: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1633: LD_VAR 0 1
1637: PPUSH
1638: LD_VAR 0 6
1642: PPUSH
1643: LD_VAR 0 7
1647: PPUSH
1648: CALL_OW 153
1652: GO 1685
1654: LD_INT 3
1656: DOUBLE
1657: EQUAL
1658: IFTRUE 1662
1660: GO 1684
1662: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1663: LD_VAR 0 1
1667: PPUSH
1668: LD_VAR 0 6
1672: PPUSH
1673: LD_VAR 0 7
1677: PPUSH
1678: CALL_OW 154
1682: GO 1685
1684: POP
// end ;
1685: LD_VAR 0 2
1689: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1690: LD_INT 0
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
// if not unit or not building then
1698: LD_VAR 0 1
1702: NOT
1703: PUSH
1704: LD_VAR 0 2
1708: NOT
1709: OR
1710: IFFALSE 1714
// exit ;
1712: GO 1872
// x := GetX ( building ) ;
1714: LD_ADDR_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: PPUSH
1724: CALL_OW 250
1728: ST_TO_ADDR
// y := GetY ( building ) ;
1729: LD_ADDR_VAR 0 6
1733: PUSH
1734: LD_VAR 0 2
1738: PPUSH
1739: CALL_OW 251
1743: ST_TO_ADDR
// for i = 0 to 5 do
1744: LD_ADDR_VAR 0 4
1748: PUSH
1749: DOUBLE
1750: LD_INT 0
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1870
// begin _x := ShiftX ( x , i , 3 ) ;
1760: LD_ADDR_VAR 0 7
1764: PUSH
1765: LD_VAR 0 5
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: LD_INT 3
1777: PPUSH
1778: CALL_OW 272
1782: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1783: LD_ADDR_VAR 0 8
1787: PUSH
1788: LD_VAR 0 6
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: CALL_OW 273
1805: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1806: LD_VAR 0 7
1810: PPUSH
1811: LD_VAR 0 8
1815: PPUSH
1816: CALL_OW 488
1820: NOT
1821: IFFALSE 1825
// continue ;
1823: GO 1757
// if HexInfo ( _x , _y ) = 0 then
1825: LD_VAR 0 7
1829: PPUSH
1830: LD_VAR 0 8
1834: PPUSH
1835: CALL_OW 428
1839: PUSH
1840: LD_INT 0
1842: EQUAL
1843: IFFALSE 1868
// begin ComMoveXY ( unit , _x , _y ) ;
1845: LD_VAR 0 1
1849: PPUSH
1850: LD_VAR 0 7
1854: PPUSH
1855: LD_VAR 0 8
1859: PPUSH
1860: CALL_OW 111
// exit ;
1864: POP
1865: POP
1866: GO 1872
// end ; end ;
1868: GO 1757
1870: POP
1871: POP
// end ;
1872: LD_VAR 0 3
1876: RET
// export function ScanBase ( side , base_area ) ; begin
1877: LD_INT 0
1879: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1880: LD_ADDR_VAR 0 3
1884: PUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_INT 81
1892: PUSH
1893: LD_VAR 0 1
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PPUSH
1902: CALL_OW 70
1906: ST_TO_ADDR
// end ;
1907: LD_VAR 0 3
1911: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1912: LD_INT 0
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
// result := false ;
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_INT 0
1925: ST_TO_ADDR
// side := GetSide ( unit ) ;
1926: LD_ADDR_VAR 0 3
1930: PUSH
1931: LD_VAR 0 1
1935: PPUSH
1936: CALL_OW 255
1940: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1941: LD_ADDR_VAR 0 4
1945: PUSH
1946: LD_VAR 0 1
1950: PPUSH
1951: CALL_OW 248
1955: ST_TO_ADDR
// case nat of 1 :
1956: LD_VAR 0 4
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 1980
1969: POP
// tech := tech_lassight ; 2 :
1970: LD_ADDR_VAR 0 5
1974: PUSH
1975: LD_INT 12
1977: ST_TO_ADDR
1978: GO 2019
1980: LD_INT 2
1982: DOUBLE
1983: EQUAL
1984: IFTRUE 1988
1986: GO 1999
1988: POP
// tech := tech_mortar ; 3 :
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_INT 41
1996: ST_TO_ADDR
1997: GO 2019
1999: LD_INT 3
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2018
2007: POP
// tech := tech_bazooka ; end ;
2008: LD_ADDR_VAR 0 5
2012: PUSH
2013: LD_INT 44
2015: ST_TO_ADDR
2016: GO 2019
2018: POP
// if Researched ( side , tech ) then
2019: LD_VAR 0 3
2023: PPUSH
2024: LD_VAR 0 5
2028: PPUSH
2029: CALL_OW 325
2033: IFFALSE 2060
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 8
2045: PUSH
2046: LD_INT 9
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_VAR 0 4
2058: ARRAY
2059: ST_TO_ADDR
// end ;
2060: LD_VAR 0 2
2064: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2065: LD_INT 0
2067: PPUSH
2068: PPUSH
2069: PPUSH
// if not mines then
2070: LD_VAR 0 2
2074: NOT
2075: IFFALSE 2079
// exit ;
2077: GO 2223
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2079: LD_ADDR_VAR 0 5
2083: PUSH
2084: LD_INT 81
2086: PUSH
2087: LD_VAR 0 1
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 3
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PPUSH
2117: CALL_OW 69
2121: ST_TO_ADDR
// for i in mines do
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_VAR 0 2
2131: PUSH
2132: FOR_IN
2133: IFFALSE 2221
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2135: LD_VAR 0 4
2139: PUSH
2140: LD_INT 1
2142: ARRAY
2143: PPUSH
2144: LD_VAR 0 4
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PPUSH
2153: CALL_OW 458
2157: NOT
2158: IFFALSE 2162
// continue ;
2160: GO 2132
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2162: LD_VAR 0 4
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: LD_VAR 0 4
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: PPUSH
2180: CALL_OW 428
2184: PUSH
2185: LD_VAR 0 5
2189: IN
2190: IFFALSE 2219
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2192: LD_VAR 0 4
2196: PUSH
2197: LD_INT 1
2199: ARRAY
2200: PPUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 2
2208: ARRAY
2209: PPUSH
2210: LD_VAR 0 1
2214: PPUSH
2215: CALL_OW 456
// end ;
2219: GO 2132
2221: POP
2222: POP
// end ;
2223: LD_VAR 0 3
2227: RET
// export function Count ( array ) ; begin
2228: LD_INT 0
2230: PPUSH
// result := array + 0 ;
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_INT 0
2243: PLUS
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 2
2249: RET
// export function IsEmpty ( building ) ; begin
2250: LD_INT 0
2252: PPUSH
// if not building then
2253: LD_VAR 0 1
2257: NOT
2258: IFFALSE 2262
// exit ;
2260: GO 2305
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2262: LD_ADDR_VAR 0 2
2266: PUSH
2267: LD_VAR 0 1
2271: PUSH
2272: LD_INT 22
2274: PUSH
2275: LD_VAR 0 1
2279: PPUSH
2280: CALL_OW 255
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 58
2291: PUSH
2292: EMPTY
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PPUSH
2299: CALL_OW 69
2303: IN
2304: ST_TO_ADDR
// end ;
2305: LD_VAR 0 2
2309: RET
// export function IsNotFull ( building ) ; var places ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
// if not building then
2314: LD_VAR 0 1
2318: NOT
2319: IFFALSE 2323
// exit ;
2321: GO 2351
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2323: LD_ADDR_VAR 0 2
2327: PUSH
2328: LD_VAR 0 1
2332: PPUSH
2333: LD_INT 3
2335: PUSH
2336: LD_INT 62
2338: PUSH
2339: EMPTY
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PPUSH
2346: CALL_OW 72
2350: ST_TO_ADDR
// end ;
2351: LD_VAR 0 2
2355: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2356: LD_INT 0
2358: PPUSH
2359: PPUSH
2360: PPUSH
2361: PPUSH
// tmp := [ ] ;
2362: LD_ADDR_VAR 0 3
2366: PUSH
2367: EMPTY
2368: ST_TO_ADDR
// list := [ ] ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: EMPTY
2375: ST_TO_ADDR
// for i = 16 to 25 do
2376: LD_ADDR_VAR 0 4
2380: PUSH
2381: DOUBLE
2382: LD_INT 16
2384: DEC
2385: ST_TO_ADDR
2386: LD_INT 25
2388: PUSH
2389: FOR_TO
2390: IFFALSE 2463
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2392: LD_ADDR_VAR 0 3
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 22
2404: PUSH
2405: LD_VAR 0 1
2409: PPUSH
2410: CALL_OW 255
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 91
2421: PUSH
2422: LD_VAR 0 1
2426: PUSH
2427: LD_INT 6
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 30
2437: PUSH
2438: LD_VAR 0 4
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: PPUSH
2455: CALL_OW 69
2459: ADD
2460: ST_TO_ADDR
2461: GO 2389
2463: POP
2464: POP
// for i = 1 to tmp do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: DOUBLE
2471: LD_INT 1
2473: DEC
2474: ST_TO_ADDR
2475: LD_VAR 0 3
2479: PUSH
2480: FOR_TO
2481: IFFALSE 2569
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_VAR 0 5
2492: PUSH
2493: LD_VAR 0 3
2497: PUSH
2498: LD_VAR 0 4
2502: ARRAY
2503: PPUSH
2504: CALL_OW 266
2508: PUSH
2509: LD_VAR 0 3
2513: PUSH
2514: LD_VAR 0 4
2518: ARRAY
2519: PPUSH
2520: CALL_OW 250
2524: PUSH
2525: LD_VAR 0 3
2529: PUSH
2530: LD_VAR 0 4
2534: ARRAY
2535: PPUSH
2536: CALL_OW 251
2540: PUSH
2541: LD_VAR 0 3
2545: PUSH
2546: LD_VAR 0 4
2550: ARRAY
2551: PPUSH
2552: CALL_OW 254
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: ADD
2566: ST_TO_ADDR
2567: GO 2480
2569: POP
2570: POP
// result := list ;
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: LD_VAR 0 5
2580: ST_TO_ADDR
// end ;
2581: LD_VAR 0 2
2585: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2586: LD_INT 0
2588: PPUSH
2589: PPUSH
2590: PPUSH
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
// if not factory then
2595: LD_VAR 0 1
2599: NOT
2600: IFFALSE 2604
// exit ;
2602: GO 3197
// if control = control_apeman then
2604: LD_VAR 0 4
2608: PUSH
2609: LD_INT 5
2611: EQUAL
2612: IFFALSE 2721
// begin tmp := UnitsInside ( factory ) ;
2614: LD_ADDR_VAR 0 8
2618: PUSH
2619: LD_VAR 0 1
2623: PPUSH
2624: CALL_OW 313
2628: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2629: LD_VAR 0 8
2633: PPUSH
2634: LD_INT 25
2636: PUSH
2637: LD_INT 12
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 72
2648: NOT
2649: IFFALSE 2659
// control := control_manual ;
2651: LD_ADDR_VAR 0 4
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2659: LD_ADDR_VAR 0 8
2663: PUSH
2664: LD_VAR 0 1
2668: PPUSH
2669: CALL 2356 0 1
2673: ST_TO_ADDR
// if tmp then
2674: LD_VAR 0 8
2678: IFFALSE 2721
// begin for i in tmp do
2680: LD_ADDR_VAR 0 7
2684: PUSH
2685: LD_VAR 0 8
2689: PUSH
2690: FOR_IN
2691: IFFALSE 2719
// if i [ 1 ] = b_ext_radio then
2693: LD_VAR 0 7
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PUSH
2702: LD_INT 22
2704: EQUAL
2705: IFFALSE 2717
// begin control := control_remote ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_INT 2
2714: ST_TO_ADDR
// break ;
2715: GO 2719
// end ;
2717: GO 2690
2719: POP
2720: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: LD_VAR 0 3
2735: PPUSH
2736: LD_VAR 0 4
2740: PPUSH
2741: LD_VAR 0 5
2745: PPUSH
2746: CALL_OW 448
2750: IFFALSE 2785
// begin result := [ chassis , engine , control , weapon ] ;
2752: LD_ADDR_VAR 0 6
2756: PUSH
2757: LD_VAR 0 2
2761: PUSH
2762: LD_VAR 0 3
2766: PUSH
2767: LD_VAR 0 4
2771: PUSH
2772: LD_VAR 0 5
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: ST_TO_ADDR
// exit ;
2783: GO 3197
// end ; _chassis := AvailableChassisList ( factory ) ;
2785: LD_ADDR_VAR 0 9
2789: PUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: CALL_OW 475
2799: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2800: LD_ADDR_VAR 0 11
2804: PUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL_OW 476
2814: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2815: LD_ADDR_VAR 0 12
2819: PUSH
2820: LD_VAR 0 1
2824: PPUSH
2825: CALL_OW 477
2829: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2830: LD_ADDR_VAR 0 10
2834: PUSH
2835: LD_VAR 0 1
2839: PPUSH
2840: CALL_OW 478
2844: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2845: LD_VAR 0 9
2849: NOT
2850: PUSH
2851: LD_VAR 0 11
2855: NOT
2856: OR
2857: PUSH
2858: LD_VAR 0 12
2862: NOT
2863: OR
2864: PUSH
2865: LD_VAR 0 10
2869: NOT
2870: OR
2871: IFFALSE 2906
// begin result := [ chassis , engine , control , weapon ] ;
2873: LD_ADDR_VAR 0 6
2877: PUSH
2878: LD_VAR 0 2
2882: PUSH
2883: LD_VAR 0 3
2887: PUSH
2888: LD_VAR 0 4
2892: PUSH
2893: LD_VAR 0 5
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: ST_TO_ADDR
// exit ;
2904: GO 3197
// end ; if not chassis in _chassis then
2906: LD_VAR 0 2
2910: PUSH
2911: LD_VAR 0 9
2915: IN
2916: NOT
2917: IFFALSE 2943
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: LD_VAR 0 9
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_VAR 0 9
2936: PPUSH
2937: CALL_OW 12
2941: ARRAY
2942: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
2943: LD_VAR 0 2
2947: PPUSH
2948: LD_VAR 0 3
2952: PPUSH
2953: CALL 3202 0 2
2957: NOT
2958: IFFALSE 3017
// repeat engine := _engine [ 1 ] ;
2960: LD_ADDR_VAR 0 3
2964: PUSH
2965: LD_VAR 0 11
2969: PUSH
2970: LD_INT 1
2972: ARRAY
2973: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
2974: LD_ADDR_VAR 0 11
2978: PUSH
2979: LD_VAR 0 11
2983: PPUSH
2984: LD_INT 1
2986: PPUSH
2987: CALL_OW 3
2991: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
2992: LD_VAR 0 2
2996: PPUSH
2997: LD_VAR 0 3
3001: PPUSH
3002: CALL 3202 0 2
3006: PUSH
3007: LD_VAR 0 11
3011: PUSH
3012: EMPTY
3013: EQUAL
3014: OR
3015: IFFALSE 2960
// if not control in _control then
3017: LD_VAR 0 4
3021: PUSH
3022: LD_VAR 0 12
3026: IN
3027: NOT
3028: IFFALSE 3054
// control := _control [ rand ( 1 , _control ) ] ;
3030: LD_ADDR_VAR 0 4
3034: PUSH
3035: LD_VAR 0 12
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_VAR 0 12
3047: PPUSH
3048: CALL_OW 12
3052: ARRAY
3053: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3054: LD_VAR 0 2
3058: PPUSH
3059: LD_VAR 0 5
3063: PPUSH
3064: CALL 3422 0 2
3068: NOT
3069: IFFALSE 3128
// repeat weapon := _weapon [ 1 ] ;
3071: LD_ADDR_VAR 0 5
3075: PUSH
3076: LD_VAR 0 10
3080: PUSH
3081: LD_INT 1
3083: ARRAY
3084: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3085: LD_ADDR_VAR 0 10
3089: PUSH
3090: LD_VAR 0 10
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 3
3102: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_VAR 0 5
3112: PPUSH
3113: CALL 3422 0 2
3117: PUSH
3118: LD_VAR 0 10
3122: PUSH
3123: EMPTY
3124: EQUAL
3125: OR
3126: IFFALSE 3071
// result := [ ] ;
3128: LD_ADDR_VAR 0 6
3132: PUSH
3133: EMPTY
3134: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3135: LD_VAR 0 1
3139: PPUSH
3140: LD_VAR 0 2
3144: PPUSH
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: LD_VAR 0 5
3159: PPUSH
3160: CALL_OW 448
3164: IFFALSE 3197
// result := [ chassis , engine , control , weapon ] ;
3166: LD_ADDR_VAR 0 6
3170: PUSH
3171: LD_VAR 0 2
3175: PUSH
3176: LD_VAR 0 3
3180: PUSH
3181: LD_VAR 0 4
3185: PUSH
3186: LD_VAR 0 5
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: ST_TO_ADDR
// end ;
3197: LD_VAR 0 6
3201: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3202: LD_INT 0
3204: PPUSH
// if not chassis or not engine then
3205: LD_VAR 0 1
3209: NOT
3210: PUSH
3211: LD_VAR 0 2
3215: NOT
3216: OR
3217: IFFALSE 3221
// exit ;
3219: GO 3417
// case engine of engine_solar :
3221: LD_VAR 0 2
3225: PUSH
3226: LD_INT 2
3228: DOUBLE
3229: EQUAL
3230: IFTRUE 3234
3232: GO 3272
3234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 11
3242: PUSH
3243: LD_INT 12
3245: PUSH
3246: LD_INT 13
3248: PUSH
3249: LD_INT 14
3251: PUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 2
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: ST_TO_ADDR
3270: GO 3401
3272: LD_INT 1
3274: DOUBLE
3275: EQUAL
3276: IFTRUE 3280
3278: GO 3342
3280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3281: LD_ADDR_VAR 0 3
3285: PUSH
3286: LD_INT 11
3288: PUSH
3289: LD_INT 12
3291: PUSH
3292: LD_INT 13
3294: PUSH
3295: LD_INT 14
3297: PUSH
3298: LD_INT 1
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: LD_INT 5
3312: PUSH
3313: LD_INT 21
3315: PUSH
3316: LD_INT 23
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 24
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: ST_TO_ADDR
3340: GO 3401
3342: LD_INT 3
3344: DOUBLE
3345: EQUAL
3346: IFTRUE 3350
3348: GO 3400
3350: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3351: LD_ADDR_VAR 0 3
3355: PUSH
3356: LD_INT 13
3358: PUSH
3359: LD_INT 14
3361: PUSH
3362: LD_INT 2
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: LD_INT 4
3370: PUSH
3371: LD_INT 5
3373: PUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_INT 23
3382: PUSH
3383: LD_INT 24
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: ST_TO_ADDR
3398: GO 3401
3400: POP
// result := ( chassis in result ) ;
3401: LD_ADDR_VAR 0 3
3405: PUSH
3406: LD_VAR 0 1
3410: PUSH
3411: LD_VAR 0 3
3415: IN
3416: ST_TO_ADDR
// end ;
3417: LD_VAR 0 3
3421: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3422: LD_INT 0
3424: PPUSH
// if not chassis or not weapon then
3425: LD_VAR 0 1
3429: NOT
3430: PUSH
3431: LD_VAR 0 2
3435: NOT
3436: OR
3437: IFFALSE 3441
// exit ;
3439: GO 4501
// case weapon of us_machine_gun :
3441: LD_VAR 0 2
3445: PUSH
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3484
3454: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_INT 1
3462: PUSH
3463: LD_INT 2
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: LD_INT 4
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: ST_TO_ADDR
3482: GO 4485
3484: LD_INT 3
3486: DOUBLE
3487: EQUAL
3488: IFTRUE 3492
3490: GO 3522
3492: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3493: LD_ADDR_VAR 0 3
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: LD_INT 2
3503: PUSH
3504: LD_INT 3
3506: PUSH
3507: LD_INT 4
3509: PUSH
3510: LD_INT 5
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: ST_TO_ADDR
3520: GO 4485
3522: LD_INT 11
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3560
3530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3531: LD_ADDR_VAR 0 3
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: LD_INT 4
3547: PUSH
3548: LD_INT 5
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: ST_TO_ADDR
3558: GO 4485
3560: LD_INT 4
3562: DOUBLE
3563: EQUAL
3564: IFTRUE 3568
3566: GO 3594
3568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3569: LD_ADDR_VAR 0 3
3573: PUSH
3574: LD_INT 2
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 4
3582: PUSH
3583: LD_INT 5
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: ST_TO_ADDR
3592: GO 4485
3594: LD_INT 5
3596: DOUBLE
3597: EQUAL
3598: IFTRUE 3602
3600: GO 3628
3602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: LD_INT 5
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: ST_TO_ADDR
3626: GO 4485
3628: LD_INT 9
3630: DOUBLE
3631: EQUAL
3632: IFTRUE 3636
3634: GO 3662
3636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3637: LD_ADDR_VAR 0 3
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: LD_INT 4
3650: PUSH
3651: LD_INT 5
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: ST_TO_ADDR
3660: GO 4485
3662: LD_INT 7
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3696
3670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: LD_INT 5
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: ST_TO_ADDR
3694: GO 4485
3696: LD_INT 12
3698: DOUBLE
3699: EQUAL
3700: IFTRUE 3704
3702: GO 3730
3704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: LD_INT 4
3718: PUSH
3719: LD_INT 5
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: ST_TO_ADDR
3728: GO 4485
3730: LD_INT 13
3732: DOUBLE
3733: EQUAL
3734: IFTRUE 3738
3736: GO 3764
3738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3739: LD_ADDR_VAR 0 3
3743: PUSH
3744: LD_INT 2
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 4
3752: PUSH
3753: LD_INT 5
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: ST_TO_ADDR
3762: GO 4485
3764: LD_INT 14
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3790
3772: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: LD_INT 5
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: ST_TO_ADDR
3788: GO 4485
3790: LD_INT 6
3792: DOUBLE
3793: EQUAL
3794: IFTRUE 3798
3796: GO 3816
3798: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3799: LD_ADDR_VAR 0 3
3803: PUSH
3804: LD_INT 4
3806: PUSH
3807: LD_INT 5
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: ST_TO_ADDR
3814: GO 4485
3816: LD_INT 10
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3842
3824: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: ST_TO_ADDR
3840: GO 4485
3842: LD_INT 22
3844: DOUBLE
3845: EQUAL
3846: IFTRUE 3850
3848: GO 3876
3850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: LD_INT 11
3858: PUSH
3859: LD_INT 12
3861: PUSH
3862: LD_INT 13
3864: PUSH
3865: LD_INT 14
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: ST_TO_ADDR
3874: GO 4485
3876: LD_INT 23
3878: DOUBLE
3879: EQUAL
3880: IFTRUE 3884
3882: GO 3910
3884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
3885: LD_ADDR_VAR 0 3
3889: PUSH
3890: LD_INT 11
3892: PUSH
3893: LD_INT 12
3895: PUSH
3896: LD_INT 13
3898: PUSH
3899: LD_INT 14
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: ST_TO_ADDR
3908: GO 4485
3910: LD_INT 24
3912: DOUBLE
3913: EQUAL
3914: IFTRUE 3918
3916: GO 3944
3918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
3919: LD_ADDR_VAR 0 3
3923: PUSH
3924: LD_INT 11
3926: PUSH
3927: LD_INT 12
3929: PUSH
3930: LD_INT 13
3932: PUSH
3933: LD_INT 14
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: ST_TO_ADDR
3942: GO 4485
3944: LD_INT 30
3946: DOUBLE
3947: EQUAL
3948: IFTRUE 3952
3950: GO 3978
3952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: LD_INT 11
3960: PUSH
3961: LD_INT 12
3963: PUSH
3964: LD_INT 13
3966: PUSH
3967: LD_INT 14
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: ST_TO_ADDR
3976: GO 4485
3978: LD_INT 25
3980: DOUBLE
3981: EQUAL
3982: IFTRUE 3986
3984: GO 4004
3986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: LD_INT 13
3994: PUSH
3995: LD_INT 14
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: ST_TO_ADDR
4002: GO 4485
4004: LD_INT 27
4006: DOUBLE
4007: EQUAL
4008: IFTRUE 4012
4010: GO 4030
4012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 13
4020: PUSH
4021: LD_INT 14
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: ST_TO_ADDR
4028: GO 4485
4030: LD_INT 92
4032: DOUBLE
4033: EQUAL
4034: IFTRUE 4038
4036: GO 4064
4038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4039: LD_ADDR_VAR 0 3
4043: PUSH
4044: LD_INT 11
4046: PUSH
4047: LD_INT 12
4049: PUSH
4050: LD_INT 13
4052: PUSH
4053: LD_INT 14
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: ST_TO_ADDR
4062: GO 4485
4064: LD_INT 28
4066: DOUBLE
4067: EQUAL
4068: IFTRUE 4072
4070: GO 4090
4072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4073: LD_ADDR_VAR 0 3
4077: PUSH
4078: LD_INT 13
4080: PUSH
4081: LD_INT 14
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: ST_TO_ADDR
4088: GO 4485
4090: LD_INT 29
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4116
4098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4099: LD_ADDR_VAR 0 3
4103: PUSH
4104: LD_INT 13
4106: PUSH
4107: LD_INT 14
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: ST_TO_ADDR
4114: GO 4485
4116: LD_INT 31
4118: DOUBLE
4119: EQUAL
4120: IFTRUE 4124
4122: GO 4142
4124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4125: LD_ADDR_VAR 0 3
4129: PUSH
4130: LD_INT 13
4132: PUSH
4133: LD_INT 14
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: ST_TO_ADDR
4140: GO 4485
4142: LD_INT 26
4144: DOUBLE
4145: EQUAL
4146: IFTRUE 4150
4148: GO 4168
4150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4151: LD_ADDR_VAR 0 3
4155: PUSH
4156: LD_INT 13
4158: PUSH
4159: LD_INT 14
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
4166: GO 4485
4168: LD_INT 42
4170: DOUBLE
4171: EQUAL
4172: IFTRUE 4176
4174: GO 4202
4176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: LD_INT 21
4184: PUSH
4185: LD_INT 22
4187: PUSH
4188: LD_INT 23
4190: PUSH
4191: LD_INT 24
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: ST_TO_ADDR
4200: GO 4485
4202: LD_INT 43
4204: DOUBLE
4205: EQUAL
4206: IFTRUE 4210
4208: GO 4236
4210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4211: LD_ADDR_VAR 0 3
4215: PUSH
4216: LD_INT 21
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_INT 23
4224: PUSH
4225: LD_INT 24
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: ST_TO_ADDR
4234: GO 4485
4236: LD_INT 44
4238: DOUBLE
4239: EQUAL
4240: IFTRUE 4244
4242: GO 4270
4244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4245: LD_ADDR_VAR 0 3
4249: PUSH
4250: LD_INT 21
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 23
4258: PUSH
4259: LD_INT 24
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: ST_TO_ADDR
4268: GO 4485
4270: LD_INT 45
4272: DOUBLE
4273: EQUAL
4274: IFTRUE 4278
4276: GO 4304
4278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4279: LD_ADDR_VAR 0 3
4283: PUSH
4284: LD_INT 21
4286: PUSH
4287: LD_INT 22
4289: PUSH
4290: LD_INT 23
4292: PUSH
4293: LD_INT 24
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: ST_TO_ADDR
4302: GO 4485
4304: LD_INT 49
4306: DOUBLE
4307: EQUAL
4308: IFTRUE 4312
4310: GO 4338
4312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4313: LD_ADDR_VAR 0 3
4317: PUSH
4318: LD_INT 21
4320: PUSH
4321: LD_INT 22
4323: PUSH
4324: LD_INT 23
4326: PUSH
4327: LD_INT 24
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: ST_TO_ADDR
4336: GO 4485
4338: LD_INT 51
4340: DOUBLE
4341: EQUAL
4342: IFTRUE 4346
4344: GO 4372
4346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_INT 21
4354: PUSH
4355: LD_INT 22
4357: PUSH
4358: LD_INT 23
4360: PUSH
4361: LD_INT 24
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: ST_TO_ADDR
4370: GO 4485
4372: LD_INT 52
4374: DOUBLE
4375: EQUAL
4376: IFTRUE 4380
4378: GO 4406
4380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4381: LD_ADDR_VAR 0 3
4385: PUSH
4386: LD_INT 21
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 23
4394: PUSH
4395: LD_INT 24
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: ST_TO_ADDR
4404: GO 4485
4406: LD_INT 53
4408: DOUBLE
4409: EQUAL
4410: IFTRUE 4414
4412: GO 4432
4414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 23
4422: PUSH
4423: LD_INT 24
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: ST_TO_ADDR
4430: GO 4485
4432: LD_INT 46
4434: DOUBLE
4435: EQUAL
4436: IFTRUE 4440
4438: GO 4458
4440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4441: LD_ADDR_VAR 0 3
4445: PUSH
4446: LD_INT 23
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: ST_TO_ADDR
4456: GO 4485
4458: LD_INT 47
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4484
4466: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: LD_INT 23
4474: PUSH
4475: LD_INT 24
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: ST_TO_ADDR
4482: GO 4485
4484: POP
// result := ( chassis in result ) ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_VAR 0 1
4494: PUSH
4495: LD_VAR 0 3
4499: IN
4500: ST_TO_ADDR
// end ;
4501: LD_VAR 0 3
4505: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
4514: PPUSH
// result := array ;
4515: LD_ADDR_VAR 0 5
4519: PUSH
4520: LD_VAR 0 1
4524: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4525: LD_VAR 0 1
4529: NOT
4530: PUSH
4531: LD_VAR 0 2
4535: NOT
4536: OR
4537: PUSH
4538: LD_VAR 0 3
4542: NOT
4543: OR
4544: PUSH
4545: LD_VAR 0 2
4549: PUSH
4550: LD_VAR 0 1
4554: GREATER
4555: OR
4556: PUSH
4557: LD_VAR 0 3
4561: PUSH
4562: LD_VAR 0 1
4566: GREATER
4567: OR
4568: IFFALSE 4572
// exit ;
4570: GO 4868
// if direction then
4572: LD_VAR 0 4
4576: IFFALSE 4640
// begin d := 1 ;
4578: LD_ADDR_VAR 0 9
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// if i_from > i_to then
4586: LD_VAR 0 2
4590: PUSH
4591: LD_VAR 0 3
4595: GREATER
4596: IFFALSE 4622
// length := ( array - i_from ) + i_to else
4598: LD_ADDR_VAR 0 11
4602: PUSH
4603: LD_VAR 0 1
4607: PUSH
4608: LD_VAR 0 2
4612: MINUS
4613: PUSH
4614: LD_VAR 0 3
4618: PLUS
4619: ST_TO_ADDR
4620: GO 4638
// length := i_to - i_from ;
4622: LD_ADDR_VAR 0 11
4626: PUSH
4627: LD_VAR 0 3
4631: PUSH
4632: LD_VAR 0 2
4636: MINUS
4637: ST_TO_ADDR
// end else
4638: GO 4701
// begin d := - 1 ;
4640: LD_ADDR_VAR 0 9
4644: PUSH
4645: LD_INT 1
4647: NEG
4648: ST_TO_ADDR
// if i_from > i_to then
4649: LD_VAR 0 2
4653: PUSH
4654: LD_VAR 0 3
4658: GREATER
4659: IFFALSE 4679
// length := i_from - i_to else
4661: LD_ADDR_VAR 0 11
4665: PUSH
4666: LD_VAR 0 2
4670: PUSH
4671: LD_VAR 0 3
4675: MINUS
4676: ST_TO_ADDR
4677: GO 4701
// length := ( array - i_to ) + i_from ;
4679: LD_ADDR_VAR 0 11
4683: PUSH
4684: LD_VAR 0 1
4688: PUSH
4689: LD_VAR 0 3
4693: MINUS
4694: PUSH
4695: LD_VAR 0 2
4699: PLUS
4700: ST_TO_ADDR
// end ; if not length then
4701: LD_VAR 0 11
4705: NOT
4706: IFFALSE 4710
// exit ;
4708: GO 4868
// tmp := array ;
4710: LD_ADDR_VAR 0 10
4714: PUSH
4715: LD_VAR 0 1
4719: ST_TO_ADDR
// for i = 1 to length do
4720: LD_ADDR_VAR 0 6
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_VAR 0 11
4734: PUSH
4735: FOR_TO
4736: IFFALSE 4856
// begin for j = 1 to array do
4738: LD_ADDR_VAR 0 7
4742: PUSH
4743: DOUBLE
4744: LD_INT 1
4746: DEC
4747: ST_TO_ADDR
4748: LD_VAR 0 1
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4842
// begin k := j + d ;
4756: LD_ADDR_VAR 0 8
4760: PUSH
4761: LD_VAR 0 7
4765: PUSH
4766: LD_VAR 0 9
4770: PLUS
4771: ST_TO_ADDR
// if k > array then
4772: LD_VAR 0 8
4776: PUSH
4777: LD_VAR 0 1
4781: GREATER
4782: IFFALSE 4792
// k := 1 ;
4784: LD_ADDR_VAR 0 8
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// if not k then
4792: LD_VAR 0 8
4796: NOT
4797: IFFALSE 4809
// k := array ;
4799: LD_ADDR_VAR 0 8
4803: PUSH
4804: LD_VAR 0 1
4808: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4809: LD_ADDR_VAR 0 10
4813: PUSH
4814: LD_VAR 0 10
4818: PPUSH
4819: LD_VAR 0 8
4823: PPUSH
4824: LD_VAR 0 1
4828: PUSH
4829: LD_VAR 0 7
4833: ARRAY
4834: PPUSH
4835: CALL_OW 1
4839: ST_TO_ADDR
// end ;
4840: GO 4753
4842: POP
4843: POP
// array := tmp ;
4844: LD_ADDR_VAR 0 1
4848: PUSH
4849: LD_VAR 0 10
4853: ST_TO_ADDR
// end ;
4854: GO 4735
4856: POP
4857: POP
// result := array ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_VAR 0 1
4867: ST_TO_ADDR
// end ;
4868: LD_VAR 0 5
4872: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4873: LD_INT 0
4875: PPUSH
4876: PPUSH
// result := 0 ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: LD_INT 0
4884: ST_TO_ADDR
// if not array or not value in array then
4885: LD_VAR 0 1
4889: NOT
4890: PUSH
4891: LD_VAR 0 2
4895: PUSH
4896: LD_VAR 0 1
4900: IN
4901: NOT
4902: OR
4903: IFFALSE 4907
// exit ;
4905: GO 4961
// for i = 1 to array do
4907: LD_ADDR_VAR 0 4
4911: PUSH
4912: DOUBLE
4913: LD_INT 1
4915: DEC
4916: ST_TO_ADDR
4917: LD_VAR 0 1
4921: PUSH
4922: FOR_TO
4923: IFFALSE 4959
// if value = array [ i ] then
4925: LD_VAR 0 2
4929: PUSH
4930: LD_VAR 0 1
4934: PUSH
4935: LD_VAR 0 4
4939: ARRAY
4940: EQUAL
4941: IFFALSE 4957
// begin result := i ;
4943: LD_ADDR_VAR 0 3
4947: PUSH
4948: LD_VAR 0 4
4952: ST_TO_ADDR
// exit ;
4953: POP
4954: POP
4955: GO 4961
// end ;
4957: GO 4922
4959: POP
4960: POP
// end ;
4961: LD_VAR 0 3
4965: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
4966: LD_INT 0
4968: PPUSH
// vc_chassis := chassis ;
4969: LD_ADDR_OWVAR 37
4973: PUSH
4974: LD_VAR 0 1
4978: ST_TO_ADDR
// vc_engine := engine ;
4979: LD_ADDR_OWVAR 39
4983: PUSH
4984: LD_VAR 0 2
4988: ST_TO_ADDR
// vc_control := control ;
4989: LD_ADDR_OWVAR 38
4993: PUSH
4994: LD_VAR 0 3
4998: ST_TO_ADDR
// vc_weapon := weapon ;
4999: LD_ADDR_OWVAR 40
5003: PUSH
5004: LD_VAR 0 4
5008: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5009: LD_ADDR_OWVAR 41
5013: PUSH
5014: LD_VAR 0 5
5018: ST_TO_ADDR
// end ;
5019: LD_VAR 0 6
5023: RET
// export function WantPlant ( unit ) ; var task ; begin
5024: LD_INT 0
5026: PPUSH
5027: PPUSH
// result := false ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_INT 0
5035: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_VAR 0 1
5045: PPUSH
5046: CALL_OW 437
5050: ST_TO_ADDR
// if task then
5051: LD_VAR 0 3
5055: IFFALSE 5083
// if task [ 1 ] [ 1 ] = p then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PUSH
5066: LD_INT 1
5068: ARRAY
5069: PUSH
5070: LD_STRING p
5072: EQUAL
5073: IFFALSE 5083
// result := true ;
5075: LD_ADDR_VAR 0 2
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// end ;
5083: LD_VAR 0 2
5087: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
5092: PPUSH
5093: PPUSH
// if pos < 1 then
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 1
5101: LESS
5102: IFFALSE 5106
// exit ;
5104: GO 5409
// if pos = 1 then
5106: LD_VAR 0 2
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: IFFALSE 5147
// result := Replace ( arr , pos [ 1 ] , value ) else
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: LD_VAR 0 1
5125: PPUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: ARRAY
5134: PPUSH
5135: LD_VAR 0 3
5139: PPUSH
5140: CALL_OW 1
5144: ST_TO_ADDR
5145: GO 5409
// begin tmp := arr ;
5147: LD_ADDR_VAR 0 6
5151: PUSH
5152: LD_VAR 0 1
5156: ST_TO_ADDR
// s_arr := [ tmp ] ;
5157: LD_ADDR_VAR 0 7
5161: PUSH
5162: LD_VAR 0 6
5166: PUSH
5167: EMPTY
5168: LIST
5169: ST_TO_ADDR
// for i = 1 to pos - 1 do
5170: LD_ADDR_VAR 0 5
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 1
5187: MINUS
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5235
// begin tmp := tmp [ pos [ i ] ] ;
5192: LD_ADDR_VAR 0 6
5196: PUSH
5197: LD_VAR 0 6
5201: PUSH
5202: LD_VAR 0 2
5206: PUSH
5207: LD_VAR 0 5
5211: ARRAY
5212: ARRAY
5213: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5214: LD_ADDR_VAR 0 7
5218: PUSH
5219: LD_VAR 0 7
5223: PUSH
5224: LD_VAR 0 6
5228: PUSH
5229: EMPTY
5230: LIST
5231: ADD
5232: ST_TO_ADDR
// end ;
5233: GO 5189
5235: POP
5236: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5237: LD_ADDR_VAR 0 6
5241: PUSH
5242: LD_VAR 0 6
5246: PPUSH
5247: LD_VAR 0 2
5251: PUSH
5252: LD_VAR 0 2
5256: ARRAY
5257: PPUSH
5258: LD_VAR 0 3
5262: PPUSH
5263: CALL_OW 1
5267: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5268: LD_ADDR_VAR 0 7
5272: PUSH
5273: LD_VAR 0 7
5277: PPUSH
5278: LD_VAR 0 7
5282: PPUSH
5283: LD_VAR 0 6
5287: PPUSH
5288: CALL_OW 1
5292: ST_TO_ADDR
// for i = s_arr downto 2 do
5293: LD_ADDR_VAR 0 5
5297: PUSH
5298: DOUBLE
5299: LD_VAR 0 7
5303: INC
5304: ST_TO_ADDR
5305: LD_INT 2
5307: PUSH
5308: FOR_DOWNTO
5309: IFFALSE 5393
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5311: LD_ADDR_VAR 0 6
5315: PUSH
5316: LD_VAR 0 7
5320: PUSH
5321: LD_VAR 0 5
5325: PUSH
5326: LD_INT 1
5328: MINUS
5329: ARRAY
5330: PPUSH
5331: LD_VAR 0 2
5335: PUSH
5336: LD_VAR 0 5
5340: PUSH
5341: LD_INT 1
5343: MINUS
5344: ARRAY
5345: PPUSH
5346: LD_VAR 0 7
5350: PUSH
5351: LD_VAR 0 5
5355: ARRAY
5356: PPUSH
5357: CALL_OW 1
5361: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5362: LD_ADDR_VAR 0 7
5366: PUSH
5367: LD_VAR 0 7
5371: PPUSH
5372: LD_VAR 0 5
5376: PUSH
5377: LD_INT 1
5379: MINUS
5380: PPUSH
5381: LD_VAR 0 6
5385: PPUSH
5386: CALL_OW 1
5390: ST_TO_ADDR
// end ;
5391: GO 5308
5393: POP
5394: POP
// result := s_arr [ 1 ] ;
5395: LD_ADDR_VAR 0 4
5399: PUSH
5400: LD_VAR 0 7
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: ST_TO_ADDR
// end ; end ;
5409: LD_VAR 0 4
5413: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5414: LD_INT 0
5416: PPUSH
5417: PPUSH
// if not list then
5418: LD_VAR 0 1
5422: NOT
5423: IFFALSE 5427
// exit ;
5425: GO 5518
// i := list [ pos1 ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_VAR 0 1
5436: PUSH
5437: LD_VAR 0 2
5441: ARRAY
5442: ST_TO_ADDR
// if not i then
5443: LD_VAR 0 5
5447: NOT
5448: IFFALSE 5452
// exit ;
5450: GO 5518
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: LD_VAR 0 1
5461: PPUSH
5462: LD_VAR 0 2
5466: PPUSH
5467: LD_VAR 0 1
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: CALL_OW 1
5482: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5483: LD_ADDR_VAR 0 1
5487: PUSH
5488: LD_VAR 0 1
5492: PPUSH
5493: LD_VAR 0 3
5497: PPUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: CALL_OW 1
5507: ST_TO_ADDR
// result := list ;
5508: LD_ADDR_VAR 0 4
5512: PUSH
5513: LD_VAR 0 1
5517: ST_TO_ADDR
// end ;
5518: LD_VAR 0 4
5522: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5523: LD_INT 0
5525: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5526: LD_ADDR_VAR 0 5
5530: PUSH
5531: LD_VAR 0 1
5535: PPUSH
5536: CALL_OW 250
5540: PPUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 251
5550: PPUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: LD_VAR 0 3
5560: PPUSH
5561: LD_VAR 0 4
5565: PPUSH
5566: CALL 5576 0 5
5570: ST_TO_ADDR
// end ;
5571: LD_VAR 0 5
5575: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5576: LD_INT 0
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
// if not list then
5582: LD_VAR 0 3
5586: NOT
5587: IFFALSE 5591
// exit ;
5589: GO 5979
// result := [ ] ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: EMPTY
5597: ST_TO_ADDR
// for i in list do
5598: LD_ADDR_VAR 0 7
5602: PUSH
5603: LD_VAR 0 3
5607: PUSH
5608: FOR_IN
5609: IFFALSE 5811
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5611: LD_ADDR_VAR 0 9
5615: PUSH
5616: LD_VAR 0 7
5620: PPUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL_OW 297
5635: ST_TO_ADDR
// if not result then
5636: LD_VAR 0 6
5640: NOT
5641: IFFALSE 5667
// result := [ [ i , tmp ] ] else
5643: LD_ADDR_VAR 0 6
5647: PUSH
5648: LD_VAR 0 7
5652: PUSH
5653: LD_VAR 0 9
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: EMPTY
5663: LIST
5664: ST_TO_ADDR
5665: GO 5809
// begin if result [ result ] [ 2 ] < tmp then
5667: LD_VAR 0 6
5671: PUSH
5672: LD_VAR 0 6
5676: ARRAY
5677: PUSH
5678: LD_INT 2
5680: ARRAY
5681: PUSH
5682: LD_VAR 0 9
5686: LESS
5687: IFFALSE 5729
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_VAR 0 6
5698: PPUSH
5699: LD_VAR 0 6
5703: PUSH
5704: LD_INT 1
5706: PLUS
5707: PPUSH
5708: LD_VAR 0 7
5712: PUSH
5713: LD_VAR 0 9
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PPUSH
5722: CALL_OW 2
5726: ST_TO_ADDR
5727: GO 5809
// for j = 1 to result do
5729: LD_ADDR_VAR 0 8
5733: PUSH
5734: DOUBLE
5735: LD_INT 1
5737: DEC
5738: ST_TO_ADDR
5739: LD_VAR 0 6
5743: PUSH
5744: FOR_TO
5745: IFFALSE 5807
// begin if tmp < result [ j ] [ 2 ] then
5747: LD_VAR 0 9
5751: PUSH
5752: LD_VAR 0 6
5756: PUSH
5757: LD_VAR 0 8
5761: ARRAY
5762: PUSH
5763: LD_INT 2
5765: ARRAY
5766: LESS
5767: IFFALSE 5805
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5769: LD_ADDR_VAR 0 6
5773: PUSH
5774: LD_VAR 0 6
5778: PPUSH
5779: LD_VAR 0 8
5783: PPUSH
5784: LD_VAR 0 7
5788: PUSH
5789: LD_VAR 0 9
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 2
5802: ST_TO_ADDR
// break ;
5803: GO 5807
// end ; end ;
5805: GO 5744
5807: POP
5808: POP
// end ; end ;
5809: GO 5608
5811: POP
5812: POP
// if result and not asc then
5813: LD_VAR 0 6
5817: PUSH
5818: LD_VAR 0 4
5822: NOT
5823: AND
5824: IFFALSE 5899
// begin tmp := result ;
5826: LD_ADDR_VAR 0 9
5830: PUSH
5831: LD_VAR 0 6
5835: ST_TO_ADDR
// for i = tmp downto 1 do
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: DOUBLE
5842: LD_VAR 0 9
5846: INC
5847: ST_TO_ADDR
5848: LD_INT 1
5850: PUSH
5851: FOR_DOWNTO
5852: IFFALSE 5897
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 6
5863: PPUSH
5864: LD_VAR 0 9
5868: PUSH
5869: LD_VAR 0 7
5873: MINUS
5874: PUSH
5875: LD_INT 1
5877: PLUS
5878: PPUSH
5879: LD_VAR 0 9
5883: PUSH
5884: LD_VAR 0 7
5888: ARRAY
5889: PPUSH
5890: CALL_OW 1
5894: ST_TO_ADDR
5895: GO 5851
5897: POP
5898: POP
// end ; tmp := [ ] ;
5899: LD_ADDR_VAR 0 9
5903: PUSH
5904: EMPTY
5905: ST_TO_ADDR
// if mode then
5906: LD_VAR 0 5
5910: IFFALSE 5979
// begin for i = 1 to result do
5912: LD_ADDR_VAR 0 7
5916: PUSH
5917: DOUBLE
5918: LD_INT 1
5920: DEC
5921: ST_TO_ADDR
5922: LD_VAR 0 6
5926: PUSH
5927: FOR_TO
5928: IFFALSE 5967
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
5930: LD_ADDR_VAR 0 9
5934: PUSH
5935: LD_VAR 0 9
5939: PPUSH
5940: LD_VAR 0 7
5944: PPUSH
5945: LD_VAR 0 6
5949: PUSH
5950: LD_VAR 0 7
5954: ARRAY
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 1
5964: ST_TO_ADDR
5965: GO 5927
5967: POP
5968: POP
// result := tmp ;
5969: LD_ADDR_VAR 0 6
5973: PUSH
5974: LD_VAR 0 9
5978: ST_TO_ADDR
// end ; end ;
5979: LD_VAR 0 6
5983: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
5992: LD_ADDR_VAR 0 5
5996: PUSH
5997: LD_INT 0
5999: PUSH
6000: LD_INT 0
6002: PUSH
6003: LD_INT 0
6005: PUSH
6006: EMPTY
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: ST_TO_ADDR
// if not x or not y then
6014: LD_VAR 0 2
6018: NOT
6019: PUSH
6020: LD_VAR 0 3
6024: NOT
6025: OR
6026: IFFALSE 6030
// exit ;
6028: GO 7680
// if not range then
6030: LD_VAR 0 4
6034: NOT
6035: IFFALSE 6045
// range := 10 ;
6037: LD_ADDR_VAR 0 4
6041: PUSH
6042: LD_INT 10
6044: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6045: LD_ADDR_VAR 0 8
6049: PUSH
6050: LD_INT 81
6052: PUSH
6053: LD_VAR 0 1
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 92
6064: PUSH
6065: LD_VAR 0 2
6069: PUSH
6070: LD_VAR 0 3
6074: PUSH
6075: LD_VAR 0 4
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: LD_INT 21
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: PPUSH
6108: CALL_OW 69
6112: ST_TO_ADDR
// if not tmp then
6113: LD_VAR 0 8
6117: NOT
6118: IFFALSE 6122
// exit ;
6120: GO 7680
// for i in tmp do
6122: LD_ADDR_VAR 0 6
6126: PUSH
6127: LD_VAR 0 8
6131: PUSH
6132: FOR_IN
6133: IFFALSE 7655
// begin points := [ 0 , 0 , 0 ] ;
6135: LD_ADDR_VAR 0 9
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
// bpoints := 1 ;
6154: LD_ADDR_VAR 0 10
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6162: LD_VAR 0 6
6166: PPUSH
6167: CALL_OW 247
6171: PUSH
6172: LD_INT 1
6174: DOUBLE
6175: EQUAL
6176: IFTRUE 6180
6178: GO 6758
6180: POP
// begin if GetClass ( i ) = 1 then
6181: LD_VAR 0 6
6185: PPUSH
6186: CALL_OW 257
6190: PUSH
6191: LD_INT 1
6193: EQUAL
6194: IFFALSE 6215
// points := [ 10 , 5 , 3 ] ;
6196: LD_ADDR_VAR 0 9
6200: PUSH
6201: LD_INT 10
6203: PUSH
6204: LD_INT 5
6206: PUSH
6207: LD_INT 3
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6215: LD_VAR 0 6
6219: PPUSH
6220: CALL_OW 257
6224: PUSH
6225: LD_INT 2
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: IN
6239: IFFALSE 6260
// points := [ 3 , 2 , 1 ] ;
6241: LD_ADDR_VAR 0 9
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 1
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6260: LD_VAR 0 6
6264: PPUSH
6265: CALL_OW 257
6269: PUSH
6270: LD_INT 5
6272: EQUAL
6273: IFFALSE 6294
// points := [ 130 , 5 , 2 ] ;
6275: LD_ADDR_VAR 0 9
6279: PUSH
6280: LD_INT 130
6282: PUSH
6283: LD_INT 5
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6294: LD_VAR 0 6
6298: PPUSH
6299: CALL_OW 257
6303: PUSH
6304: LD_INT 8
6306: EQUAL
6307: IFFALSE 6328
// points := [ 35 , 35 , 30 ] ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_INT 35
6316: PUSH
6317: LD_INT 35
6319: PUSH
6320: LD_INT 30
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6328: LD_VAR 0 6
6332: PPUSH
6333: CALL_OW 257
6337: PUSH
6338: LD_INT 9
6340: EQUAL
6341: IFFALSE 6362
// points := [ 20 , 55 , 40 ] ;
6343: LD_ADDR_VAR 0 9
6347: PUSH
6348: LD_INT 20
6350: PUSH
6351: LD_INT 55
6353: PUSH
6354: LD_INT 40
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6362: LD_VAR 0 6
6366: PPUSH
6367: CALL_OW 257
6371: PUSH
6372: LD_INT 12
6374: PUSH
6375: LD_INT 16
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: IN
6382: IFFALSE 6403
// points := [ 5 , 3 , 2 ] ;
6384: LD_ADDR_VAR 0 9
6388: PUSH
6389: LD_INT 5
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6403: LD_VAR 0 6
6407: PPUSH
6408: CALL_OW 257
6412: PUSH
6413: LD_INT 17
6415: EQUAL
6416: IFFALSE 6437
// points := [ 100 , 50 , 75 ] ;
6418: LD_ADDR_VAR 0 9
6422: PUSH
6423: LD_INT 100
6425: PUSH
6426: LD_INT 50
6428: PUSH
6429: LD_INT 75
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6437: LD_VAR 0 6
6441: PPUSH
6442: CALL_OW 257
6446: PUSH
6447: LD_INT 15
6449: EQUAL
6450: IFFALSE 6471
// points := [ 10 , 5 , 3 ] ;
6452: LD_ADDR_VAR 0 9
6456: PUSH
6457: LD_INT 10
6459: PUSH
6460: LD_INT 5
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6471: LD_VAR 0 6
6475: PPUSH
6476: CALL_OW 257
6480: PUSH
6481: LD_INT 14
6483: EQUAL
6484: IFFALSE 6505
// points := [ 10 , 0 , 0 ] ;
6486: LD_ADDR_VAR 0 9
6490: PUSH
6491: LD_INT 10
6493: PUSH
6494: LD_INT 0
6496: PUSH
6497: LD_INT 0
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6505: LD_VAR 0 6
6509: PPUSH
6510: CALL_OW 257
6514: PUSH
6515: LD_INT 11
6517: EQUAL
6518: IFFALSE 6539
// points := [ 30 , 10 , 5 ] ;
6520: LD_ADDR_VAR 0 9
6524: PUSH
6525: LD_INT 30
6527: PUSH
6528: LD_INT 10
6530: PUSH
6531: LD_INT 5
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6539: LD_VAR 0 1
6543: PPUSH
6544: LD_INT 5
6546: PPUSH
6547: CALL_OW 321
6551: PUSH
6552: LD_INT 2
6554: EQUAL
6555: IFFALSE 6572
// bpoints := bpoints * 1.8 ;
6557: LD_ADDR_VAR 0 10
6561: PUSH
6562: LD_VAR 0 10
6566: PUSH
6567: LD_REAL  1.80000000000000E+0000
6570: MUL
6571: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6572: LD_VAR 0 6
6576: PPUSH
6577: CALL_OW 257
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: LD_INT 3
6590: PUSH
6591: LD_INT 4
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: IN
6600: PUSH
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_INT 51
6608: PPUSH
6609: CALL_OW 321
6613: PUSH
6614: LD_INT 2
6616: EQUAL
6617: AND
6618: IFFALSE 6635
// bpoints := bpoints * 1.2 ;
6620: LD_ADDR_VAR 0 10
6624: PUSH
6625: LD_VAR 0 10
6629: PUSH
6630: LD_REAL  1.20000000000000E+0000
6633: MUL
6634: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6635: LD_VAR 0 6
6639: PPUSH
6640: CALL_OW 257
6644: PUSH
6645: LD_INT 5
6647: PUSH
6648: LD_INT 7
6650: PUSH
6651: LD_INT 9
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: IN
6659: PUSH
6660: LD_VAR 0 1
6664: PPUSH
6665: LD_INT 52
6667: PPUSH
6668: CALL_OW 321
6672: PUSH
6673: LD_INT 2
6675: EQUAL
6676: AND
6677: IFFALSE 6694
// bpoints := bpoints * 1.5 ;
6679: LD_ADDR_VAR 0 10
6683: PUSH
6684: LD_VAR 0 10
6688: PUSH
6689: LD_REAL  1.50000000000000E+0000
6692: MUL
6693: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6694: LD_VAR 0 1
6698: PPUSH
6699: LD_INT 66
6701: PPUSH
6702: CALL_OW 321
6706: PUSH
6707: LD_INT 2
6709: EQUAL
6710: IFFALSE 6727
// bpoints := bpoints * 1.1 ;
6712: LD_ADDR_VAR 0 10
6716: PUSH
6717: LD_VAR 0 10
6721: PUSH
6722: LD_REAL  1.10000000000000E+0000
6725: MUL
6726: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6727: LD_ADDR_VAR 0 10
6731: PUSH
6732: LD_VAR 0 10
6736: PUSH
6737: LD_VAR 0 6
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 259
6749: PUSH
6750: LD_REAL  1.15000000000000E+0000
6753: MUL
6754: MUL
6755: ST_TO_ADDR
// end ; unit_vehicle :
6756: GO 7584
6758: LD_INT 2
6760: DOUBLE
6761: EQUAL
6762: IFTRUE 6766
6764: GO 7572
6766: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6767: LD_VAR 0 6
6771: PPUSH
6772: CALL_OW 264
6776: PUSH
6777: LD_INT 2
6779: PUSH
6780: LD_INT 42
6782: PUSH
6783: LD_INT 24
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: IN
6791: IFFALSE 6812
// points := [ 25 , 5 , 3 ] ;
6793: LD_ADDR_VAR 0 9
6797: PUSH
6798: LD_INT 25
6800: PUSH
6801: LD_INT 5
6803: PUSH
6804: LD_INT 3
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6812: LD_VAR 0 6
6816: PPUSH
6817: CALL_OW 264
6821: PUSH
6822: LD_INT 4
6824: PUSH
6825: LD_INT 43
6827: PUSH
6828: LD_INT 25
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: IN
6836: IFFALSE 6857
// points := [ 40 , 15 , 5 ] ;
6838: LD_ADDR_VAR 0 9
6842: PUSH
6843: LD_INT 40
6845: PUSH
6846: LD_INT 15
6848: PUSH
6849: LD_INT 5
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6857: LD_VAR 0 6
6861: PPUSH
6862: CALL_OW 264
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: LD_INT 23
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: IN
6877: IFFALSE 6898
// points := [ 7 , 25 , 8 ] ;
6879: LD_ADDR_VAR 0 9
6883: PUSH
6884: LD_INT 7
6886: PUSH
6887: LD_INT 25
6889: PUSH
6890: LD_INT 8
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
6898: LD_VAR 0 6
6902: PPUSH
6903: CALL_OW 264
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 27
6913: PUSH
6914: LD_INT 44
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: IN
6922: IFFALSE 6943
// points := [ 14 , 50 , 16 ] ;
6924: LD_ADDR_VAR 0 9
6928: PUSH
6929: LD_INT 14
6931: PUSH
6932: LD_INT 50
6934: PUSH
6935: LD_INT 16
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
6943: LD_VAR 0 6
6947: PPUSH
6948: CALL_OW 264
6952: PUSH
6953: LD_INT 6
6955: PUSH
6956: LD_INT 46
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: IN
6963: IFFALSE 6984
// points := [ 32 , 120 , 70 ] ;
6965: LD_ADDR_VAR 0 9
6969: PUSH
6970: LD_INT 32
6972: PUSH
6973: LD_INT 120
6975: PUSH
6976: LD_INT 70
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
6984: LD_VAR 0 6
6988: PPUSH
6989: CALL_OW 264
6993: PUSH
6994: LD_INT 7
6996: PUSH
6997: LD_INT 28
6999: PUSH
7000: LD_INT 45
7002: PUSH
7003: LD_INT 92
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: IN
7012: IFFALSE 7033
// points := [ 35 , 20 , 45 ] ;
7014: LD_ADDR_VAR 0 9
7018: PUSH
7019: LD_INT 35
7021: PUSH
7022: LD_INT 20
7024: PUSH
7025: LD_INT 45
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7033: LD_VAR 0 6
7037: PPUSH
7038: CALL_OW 264
7042: PUSH
7043: LD_INT 47
7045: PUSH
7046: EMPTY
7047: LIST
7048: IN
7049: IFFALSE 7070
// points := [ 67 , 45 , 75 ] ;
7051: LD_ADDR_VAR 0 9
7055: PUSH
7056: LD_INT 67
7058: PUSH
7059: LD_INT 45
7061: PUSH
7062: LD_INT 75
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7070: LD_VAR 0 6
7074: PPUSH
7075: CALL_OW 264
7079: PUSH
7080: LD_INT 26
7082: PUSH
7083: EMPTY
7084: LIST
7085: IN
7086: IFFALSE 7107
// points := [ 120 , 30 , 80 ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: LD_INT 120
7095: PUSH
7096: LD_INT 30
7098: PUSH
7099: LD_INT 80
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7107: LD_VAR 0 6
7111: PPUSH
7112: CALL_OW 264
7116: PUSH
7117: LD_INT 22
7119: PUSH
7120: EMPTY
7121: LIST
7122: IN
7123: IFFALSE 7144
// points := [ 40 , 1 , 1 ] ;
7125: LD_ADDR_VAR 0 9
7129: PUSH
7130: LD_INT 40
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: LD_INT 1
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7144: LD_VAR 0 6
7148: PPUSH
7149: CALL_OW 264
7153: PUSH
7154: LD_INT 29
7156: PUSH
7157: EMPTY
7158: LIST
7159: IN
7160: IFFALSE 7181
// points := [ 70 , 200 , 400 ] ;
7162: LD_ADDR_VAR 0 9
7166: PUSH
7167: LD_INT 70
7169: PUSH
7170: LD_INT 200
7172: PUSH
7173: LD_INT 400
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7181: LD_VAR 0 6
7185: PPUSH
7186: CALL_OW 264
7190: PUSH
7191: LD_INT 14
7193: PUSH
7194: LD_INT 53
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: IN
7201: IFFALSE 7222
// points := [ 40 , 10 , 20 ] ;
7203: LD_ADDR_VAR 0 9
7207: PUSH
7208: LD_INT 40
7210: PUSH
7211: LD_INT 10
7213: PUSH
7214: LD_INT 20
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7222: LD_VAR 0 6
7226: PPUSH
7227: CALL_OW 264
7231: PUSH
7232: LD_INT 9
7234: PUSH
7235: EMPTY
7236: LIST
7237: IN
7238: IFFALSE 7259
// points := [ 5 , 70 , 20 ] ;
7240: LD_ADDR_VAR 0 9
7244: PUSH
7245: LD_INT 5
7247: PUSH
7248: LD_INT 70
7250: PUSH
7251: LD_INT 20
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7259: LD_VAR 0 6
7263: PPUSH
7264: CALL_OW 264
7268: PUSH
7269: LD_INT 10
7271: PUSH
7272: EMPTY
7273: LIST
7274: IN
7275: IFFALSE 7296
// points := [ 35 , 110 , 70 ] ;
7277: LD_ADDR_VAR 0 9
7281: PUSH
7282: LD_INT 35
7284: PUSH
7285: LD_INT 110
7287: PUSH
7288: LD_INT 70
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7296: LD_VAR 0 6
7300: PPUSH
7301: CALL_OW 265
7305: PUSH
7306: LD_INT 25
7308: EQUAL
7309: IFFALSE 7330
// points := [ 80 , 65 , 100 ] ;
7311: LD_ADDR_VAR 0 9
7315: PUSH
7316: LD_INT 80
7318: PUSH
7319: LD_INT 65
7321: PUSH
7322: LD_INT 100
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7330: LD_VAR 0 6
7334: PPUSH
7335: CALL_OW 263
7339: PUSH
7340: LD_INT 1
7342: EQUAL
7343: IFFALSE 7378
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7345: LD_ADDR_VAR 0 10
7349: PUSH
7350: LD_VAR 0 10
7354: PUSH
7355: LD_VAR 0 6
7359: PPUSH
7360: CALL_OW 311
7364: PPUSH
7365: LD_INT 3
7367: PPUSH
7368: CALL_OW 259
7372: PUSH
7373: LD_INT 4
7375: MUL
7376: MUL
7377: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7378: LD_VAR 0 6
7382: PPUSH
7383: CALL_OW 263
7387: PUSH
7388: LD_INT 2
7390: EQUAL
7391: IFFALSE 7442
// begin j := IsControledBy ( i ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_VAR 0 6
7402: PPUSH
7403: CALL_OW 312
7407: ST_TO_ADDR
// if j then
7408: LD_VAR 0 7
7412: IFFALSE 7442
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7414: LD_ADDR_VAR 0 10
7418: PUSH
7419: LD_VAR 0 10
7423: PUSH
7424: LD_VAR 0 7
7428: PPUSH
7429: LD_INT 3
7431: PPUSH
7432: CALL_OW 259
7436: PUSH
7437: LD_INT 3
7439: MUL
7440: MUL
7441: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7442: LD_VAR 0 6
7446: PPUSH
7447: CALL_OW 264
7451: PUSH
7452: LD_INT 5
7454: PUSH
7455: LD_INT 6
7457: PUSH
7458: LD_INT 46
7460: PUSH
7461: LD_INT 44
7463: PUSH
7464: LD_INT 47
7466: PUSH
7467: LD_INT 45
7469: PUSH
7470: LD_INT 28
7472: PUSH
7473: LD_INT 7
7475: PUSH
7476: LD_INT 27
7478: PUSH
7479: LD_INT 29
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: IN
7494: PUSH
7495: LD_VAR 0 1
7499: PPUSH
7500: LD_INT 52
7502: PPUSH
7503: CALL_OW 321
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: AND
7512: IFFALSE 7529
// bpoints := bpoints * 1.2 ;
7514: LD_ADDR_VAR 0 10
7518: PUSH
7519: LD_VAR 0 10
7523: PUSH
7524: LD_REAL  1.20000000000000E+0000
7527: MUL
7528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7529: LD_VAR 0 6
7533: PPUSH
7534: CALL_OW 264
7538: PUSH
7539: LD_INT 6
7541: PUSH
7542: LD_INT 46
7544: PUSH
7545: LD_INT 47
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: IN
7553: IFFALSE 7570
// bpoints := bpoints * 1.2 ;
7555: LD_ADDR_VAR 0 10
7559: PUSH
7560: LD_VAR 0 10
7564: PUSH
7565: LD_REAL  1.20000000000000E+0000
7568: MUL
7569: ST_TO_ADDR
// end ; unit_building :
7570: GO 7584
7572: LD_INT 3
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7583
7580: POP
// ; end ;
7581: GO 7584
7583: POP
// for j = 1 to 3 do
7584: LD_ADDR_VAR 0 7
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_INT 3
7596: PUSH
7597: FOR_TO
7598: IFFALSE 7651
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7600: LD_ADDR_VAR 0 5
7604: PUSH
7605: LD_VAR 0 5
7609: PPUSH
7610: LD_VAR 0 7
7614: PPUSH
7615: LD_VAR 0 5
7619: PUSH
7620: LD_VAR 0 7
7624: ARRAY
7625: PUSH
7626: LD_VAR 0 9
7630: PUSH
7631: LD_VAR 0 7
7635: ARRAY
7636: PUSH
7637: LD_VAR 0 10
7641: MUL
7642: PLUS
7643: PPUSH
7644: CALL_OW 1
7648: ST_TO_ADDR
7649: GO 7597
7651: POP
7652: POP
// end ;
7653: GO 6132
7655: POP
7656: POP
// result := Replace ( result , 4 , tmp ) ;
7657: LD_ADDR_VAR 0 5
7661: PUSH
7662: LD_VAR 0 5
7666: PPUSH
7667: LD_INT 4
7669: PPUSH
7670: LD_VAR 0 8
7674: PPUSH
7675: CALL_OW 1
7679: ST_TO_ADDR
// end ;
7680: LD_VAR 0 5
7684: RET
// export function DangerAtRange ( unit , range ) ; begin
7685: LD_INT 0
7687: PPUSH
// if not unit then
7688: LD_VAR 0 1
7692: NOT
7693: IFFALSE 7697
// exit ;
7695: GO 7742
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7697: LD_ADDR_VAR 0 3
7701: PUSH
7702: LD_VAR 0 1
7706: PPUSH
7707: CALL_OW 255
7711: PPUSH
7712: LD_VAR 0 1
7716: PPUSH
7717: CALL_OW 250
7721: PPUSH
7722: LD_VAR 0 1
7726: PPUSH
7727: CALL_OW 251
7731: PPUSH
7732: LD_VAR 0 2
7736: PPUSH
7737: CALL 5984 0 4
7741: ST_TO_ADDR
// end ;
7742: LD_VAR 0 3
7746: RET
// export function DangerInArea ( side , area ) ; begin
7747: LD_INT 0
7749: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7750: LD_ADDR_VAR 0 3
7754: PUSH
7755: LD_VAR 0 2
7759: PPUSH
7760: LD_INT 81
7762: PUSH
7763: LD_VAR 0 1
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 70
7776: ST_TO_ADDR
// end ;
7777: LD_VAR 0 3
7781: RET
// export function IsExtension ( b ) ; begin
7782: LD_INT 0
7784: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7785: LD_ADDR_VAR 0 2
7789: PUSH
7790: LD_VAR 0 1
7794: PUSH
7795: LD_INT 23
7797: PUSH
7798: LD_INT 20
7800: PUSH
7801: LD_INT 22
7803: PUSH
7804: LD_INT 17
7806: PUSH
7807: LD_INT 24
7809: PUSH
7810: LD_INT 21
7812: PUSH
7813: LD_INT 19
7815: PUSH
7816: LD_INT 16
7818: PUSH
7819: LD_INT 25
7821: PUSH
7822: LD_INT 18
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: IN
7837: ST_TO_ADDR
// end ;
7838: LD_VAR 0 2
7842: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7843: LD_INT 0
7845: PPUSH
7846: PPUSH
7847: PPUSH
// result := [ ] ;
7848: LD_ADDR_VAR 0 4
7852: PUSH
7853: EMPTY
7854: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7855: LD_ADDR_VAR 0 5
7859: PUSH
7860: LD_VAR 0 2
7864: PPUSH
7865: LD_INT 21
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 70
7879: ST_TO_ADDR
// if not tmp then
7880: LD_VAR 0 5
7884: NOT
7885: IFFALSE 7889
// exit ;
7887: GO 7953
// if checkLink then
7889: LD_VAR 0 3
7893: IFFALSE 7943
// begin for i in tmp do
7895: LD_ADDR_VAR 0 6
7899: PUSH
7900: LD_VAR 0 5
7904: PUSH
7905: FOR_IN
7906: IFFALSE 7941
// if GetBase ( i ) <> base then
7908: LD_VAR 0 6
7912: PPUSH
7913: CALL_OW 274
7917: PUSH
7918: LD_VAR 0 1
7922: NONEQUAL
7923: IFFALSE 7939
// ComLinkToBase ( base , i ) ;
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 6
7934: PPUSH
7935: CALL_OW 169
7939: GO 7905
7941: POP
7942: POP
// end ; result := tmp ;
7943: LD_ADDR_VAR 0 4
7947: PUSH
7948: LD_VAR 0 5
7952: ST_TO_ADDR
// end ;
7953: LD_VAR 0 4
7957: RET
// export function ComComplete ( units , b ) ; var i ; begin
7958: LD_INT 0
7960: PPUSH
7961: PPUSH
// if not units then
7962: LD_VAR 0 1
7966: NOT
7967: IFFALSE 7971
// exit ;
7969: GO 8061
// for i in units do
7971: LD_ADDR_VAR 0 4
7975: PUSH
7976: LD_VAR 0 1
7980: PUSH
7981: FOR_IN
7982: IFFALSE 8059
// if BuildingStatus ( b ) = bs_build then
7984: LD_VAR 0 2
7988: PPUSH
7989: CALL_OW 461
7993: PUSH
7994: LD_INT 1
7996: EQUAL
7997: IFFALSE 8057
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
7999: LD_VAR 0 4
8003: PPUSH
8004: LD_STRING h
8006: PUSH
8007: LD_VAR 0 2
8011: PPUSH
8012: CALL_OW 250
8016: PUSH
8017: LD_VAR 0 2
8021: PPUSH
8022: CALL_OW 251
8026: PUSH
8027: LD_VAR 0 2
8031: PUSH
8032: LD_INT 0
8034: PUSH
8035: LD_INT 0
8037: PUSH
8038: LD_INT 0
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: PPUSH
8053: CALL_OW 446
8057: GO 7981
8059: POP
8060: POP
// end ;
8061: LD_VAR 0 3
8065: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8074: LD_VAR 0 1
8078: NOT
8079: PUSH
8080: LD_VAR 0 1
8084: PPUSH
8085: CALL_OW 263
8089: PUSH
8090: LD_INT 2
8092: NONEQUAL
8093: OR
8094: IFFALSE 8098
// exit ;
8096: GO 8414
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8098: LD_ADDR_VAR 0 6
8102: PUSH
8103: LD_INT 22
8105: PUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 255
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_INT 2
8122: PUSH
8123: LD_INT 30
8125: PUSH
8126: LD_INT 36
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 34
8135: PUSH
8136: LD_INT 31
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PPUSH
8152: CALL_OW 69
8156: ST_TO_ADDR
// if not tmp then
8157: LD_VAR 0 6
8161: NOT
8162: IFFALSE 8166
// exit ;
8164: GO 8414
// result := [ ] ;
8166: LD_ADDR_VAR 0 2
8170: PUSH
8171: EMPTY
8172: ST_TO_ADDR
// for i in tmp do
8173: LD_ADDR_VAR 0 3
8177: PUSH
8178: LD_VAR 0 6
8182: PUSH
8183: FOR_IN
8184: IFFALSE 8255
// begin t := UnitsInside ( i ) ;
8186: LD_ADDR_VAR 0 4
8190: PUSH
8191: LD_VAR 0 3
8195: PPUSH
8196: CALL_OW 313
8200: ST_TO_ADDR
// if t then
8201: LD_VAR 0 4
8205: IFFALSE 8253
// for j in t do
8207: LD_ADDR_VAR 0 7
8211: PUSH
8212: LD_VAR 0 4
8216: PUSH
8217: FOR_IN
8218: IFFALSE 8251
// result := Replace ( result , result + 1 , j ) ;
8220: LD_ADDR_VAR 0 2
8224: PUSH
8225: LD_VAR 0 2
8229: PPUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 1
8237: PLUS
8238: PPUSH
8239: LD_VAR 0 7
8243: PPUSH
8244: CALL_OW 1
8248: ST_TO_ADDR
8249: GO 8217
8251: POP
8252: POP
// end ;
8253: GO 8183
8255: POP
8256: POP
// if not result then
8257: LD_VAR 0 2
8261: NOT
8262: IFFALSE 8266
// exit ;
8264: GO 8414
// mech := result [ 1 ] ;
8266: LD_ADDR_VAR 0 5
8270: PUSH
8271: LD_VAR 0 2
8275: PUSH
8276: LD_INT 1
8278: ARRAY
8279: ST_TO_ADDR
// if result > 1 then
8280: LD_VAR 0 2
8284: PUSH
8285: LD_INT 1
8287: GREATER
8288: IFFALSE 8400
// begin for i = 2 to result do
8290: LD_ADDR_VAR 0 3
8294: PUSH
8295: DOUBLE
8296: LD_INT 2
8298: DEC
8299: ST_TO_ADDR
8300: LD_VAR 0 2
8304: PUSH
8305: FOR_TO
8306: IFFALSE 8398
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8308: LD_ADDR_VAR 0 4
8312: PUSH
8313: LD_VAR 0 2
8317: PUSH
8318: LD_VAR 0 3
8322: ARRAY
8323: PPUSH
8324: LD_INT 3
8326: PPUSH
8327: CALL_OW 259
8331: PUSH
8332: LD_VAR 0 2
8336: PUSH
8337: LD_VAR 0 3
8341: ARRAY
8342: PPUSH
8343: CALL_OW 432
8347: MINUS
8348: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8349: LD_VAR 0 4
8353: PUSH
8354: LD_VAR 0 5
8358: PPUSH
8359: LD_INT 3
8361: PPUSH
8362: CALL_OW 259
8366: PUSH
8367: LD_VAR 0 5
8371: PPUSH
8372: CALL_OW 432
8376: MINUS
8377: GREATEREQUAL
8378: IFFALSE 8396
// mech := result [ i ] ;
8380: LD_ADDR_VAR 0 5
8384: PUSH
8385: LD_VAR 0 2
8389: PUSH
8390: LD_VAR 0 3
8394: ARRAY
8395: ST_TO_ADDR
// end ;
8396: GO 8305
8398: POP
8399: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8400: LD_VAR 0 1
8404: PPUSH
8405: LD_VAR 0 5
8409: PPUSH
8410: CALL_OW 135
// end ;
8414: LD_VAR 0 2
8418: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8419: LD_INT 0
8421: PPUSH
8422: PPUSH
8423: PPUSH
8424: PPUSH
8425: PPUSH
8426: PPUSH
8427: PPUSH
8428: PPUSH
8429: PPUSH
8430: PPUSH
8431: PPUSH
8432: PPUSH
8433: PPUSH
// result := [ ] ;
8434: LD_ADDR_VAR 0 7
8438: PUSH
8439: EMPTY
8440: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 266
8450: PUSH
8451: LD_INT 0
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: IN
8461: NOT
8462: IFFALSE 8466
// exit ;
8464: GO 10100
// if name then
8466: LD_VAR 0 3
8470: IFFALSE 8486
// SetBName ( base_dep , name ) ;
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_VAR 0 3
8481: PPUSH
8482: CALL_OW 500
// base := GetBase ( base_dep ) ;
8486: LD_ADDR_VAR 0 15
8490: PUSH
8491: LD_VAR 0 1
8495: PPUSH
8496: CALL_OW 274
8500: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8501: LD_ADDR_VAR 0 16
8505: PUSH
8506: LD_VAR 0 1
8510: PPUSH
8511: CALL_OW 255
8515: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8516: LD_ADDR_VAR 0 17
8520: PUSH
8521: LD_VAR 0 1
8525: PPUSH
8526: CALL_OW 248
8530: ST_TO_ADDR
// if sources then
8531: LD_VAR 0 5
8535: IFFALSE 8582
// for i = 1 to 3 do
8537: LD_ADDR_VAR 0 8
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 3
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8580
// AddResourceType ( base , i , sources [ i ] ) ;
8553: LD_VAR 0 15
8557: PPUSH
8558: LD_VAR 0 8
8562: PPUSH
8563: LD_VAR 0 5
8567: PUSH
8568: LD_VAR 0 8
8572: ARRAY
8573: PPUSH
8574: CALL_OW 276
8578: GO 8550
8580: POP
8581: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8582: LD_ADDR_VAR 0 18
8586: PUSH
8587: LD_VAR 0 15
8591: PPUSH
8592: LD_VAR 0 2
8596: PPUSH
8597: LD_INT 1
8599: PPUSH
8600: CALL 7843 0 3
8604: ST_TO_ADDR
// InitHc ;
8605: CALL_OW 19
// InitUc ;
8609: CALL_OW 18
// uc_side := side ;
8613: LD_ADDR_OWVAR 20
8617: PUSH
8618: LD_VAR 0 16
8622: ST_TO_ADDR
// uc_nation := nation ;
8623: LD_ADDR_OWVAR 21
8627: PUSH
8628: LD_VAR 0 17
8632: ST_TO_ADDR
// if buildings then
8633: LD_VAR 0 18
8637: IFFALSE 9959
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8639: LD_ADDR_VAR 0 19
8643: PUSH
8644: LD_VAR 0 18
8648: PPUSH
8649: LD_INT 2
8651: PUSH
8652: LD_INT 30
8654: PUSH
8655: LD_INT 29
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 30
8664: PUSH
8665: LD_INT 30
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: ST_TO_ADDR
// if tmp then
8682: LD_VAR 0 19
8686: IFFALSE 8734
// for i in tmp do
8688: LD_ADDR_VAR 0 8
8692: PUSH
8693: LD_VAR 0 19
8697: PUSH
8698: FOR_IN
8699: IFFALSE 8732
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8701: LD_VAR 0 8
8705: PPUSH
8706: CALL_OW 250
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 251
8720: PPUSH
8721: LD_VAR 0 16
8725: PPUSH
8726: CALL_OW 441
8730: GO 8698
8732: POP
8733: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8734: LD_VAR 0 18
8738: PPUSH
8739: LD_INT 2
8741: PUSH
8742: LD_INT 30
8744: PUSH
8745: LD_INT 32
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 30
8754: PUSH
8755: LD_INT 33
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: PPUSH
8767: CALL_OW 72
8771: IFFALSE 8859
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8773: LD_ADDR_VAR 0 8
8777: PUSH
8778: LD_VAR 0 18
8782: PPUSH
8783: LD_INT 2
8785: PUSH
8786: LD_INT 30
8788: PUSH
8789: LD_INT 32
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 30
8798: PUSH
8799: LD_INT 33
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 72
8815: PUSH
8816: FOR_IN
8817: IFFALSE 8857
// begin if not GetBWeapon ( i ) then
8819: LD_VAR 0 8
8823: PPUSH
8824: CALL_OW 269
8828: NOT
8829: IFFALSE 8855
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8831: LD_VAR 0 8
8835: PPUSH
8836: LD_VAR 0 8
8840: PPUSH
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL 10105 0 2
8850: PPUSH
8851: CALL_OW 431
// end ;
8855: GO 8816
8857: POP
8858: POP
// end ; for i = 1 to personel do
8859: LD_ADDR_VAR 0 8
8863: PUSH
8864: DOUBLE
8865: LD_INT 1
8867: DEC
8868: ST_TO_ADDR
8869: LD_VAR 0 6
8873: PUSH
8874: FOR_TO
8875: IFFALSE 9939
// begin if i > 4 then
8877: LD_VAR 0 8
8881: PUSH
8882: LD_INT 4
8884: GREATER
8885: IFFALSE 8889
// break ;
8887: GO 9939
// case i of 1 :
8889: LD_VAR 0 8
8893: PUSH
8894: LD_INT 1
8896: DOUBLE
8897: EQUAL
8898: IFTRUE 8902
8900: GO 8982
8902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
8903: LD_ADDR_VAR 0 12
8907: PUSH
8908: LD_VAR 0 18
8912: PPUSH
8913: LD_INT 22
8915: PUSH
8916: LD_VAR 0 16
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 58
8927: PUSH
8928: EMPTY
8929: LIST
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: LD_INT 30
8936: PUSH
8937: LD_INT 32
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 30
8946: PUSH
8947: LD_INT 4
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 30
8956: PUSH
8957: LD_INT 5
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 72
8979: ST_TO_ADDR
8980: GO 9204
8982: LD_INT 2
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 9052
8990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
8991: LD_ADDR_VAR 0 12
8995: PUSH
8996: LD_VAR 0 18
9000: PPUSH
9001: LD_INT 22
9003: PUSH
9004: LD_VAR 0 16
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 2
9015: PUSH
9016: LD_INT 30
9018: PUSH
9019: LD_INT 0
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 30
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 72
9049: ST_TO_ADDR
9050: GO 9204
9052: LD_INT 3
9054: DOUBLE
9055: EQUAL
9056: IFTRUE 9060
9058: GO 9122
9060: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9061: LD_ADDR_VAR 0 12
9065: PUSH
9066: LD_VAR 0 18
9070: PPUSH
9071: LD_INT 22
9073: PUSH
9074: LD_VAR 0 16
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: LD_INT 30
9088: PUSH
9089: LD_INT 2
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 30
9098: PUSH
9099: LD_INT 3
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 72
9119: ST_TO_ADDR
9120: GO 9204
9122: LD_INT 4
9124: DOUBLE
9125: EQUAL
9126: IFTRUE 9130
9128: GO 9203
9130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9131: LD_ADDR_VAR 0 12
9135: PUSH
9136: LD_VAR 0 18
9140: PPUSH
9141: LD_INT 22
9143: PUSH
9144: LD_VAR 0 16
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 2
9155: PUSH
9156: LD_INT 30
9158: PUSH
9159: LD_INT 6
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 30
9168: PUSH
9169: LD_INT 7
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 30
9178: PUSH
9179: LD_INT 8
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PPUSH
9196: CALL_OW 72
9200: ST_TO_ADDR
9201: GO 9204
9203: POP
// if i = 1 then
9204: LD_VAR 0 8
9208: PUSH
9209: LD_INT 1
9211: EQUAL
9212: IFFALSE 9323
// begin tmp := [ ] ;
9214: LD_ADDR_VAR 0 19
9218: PUSH
9219: EMPTY
9220: ST_TO_ADDR
// for j in f do
9221: LD_ADDR_VAR 0 9
9225: PUSH
9226: LD_VAR 0 12
9230: PUSH
9231: FOR_IN
9232: IFFALSE 9305
// if GetBType ( j ) = b_bunker then
9234: LD_VAR 0 9
9238: PPUSH
9239: CALL_OW 266
9243: PUSH
9244: LD_INT 32
9246: EQUAL
9247: IFFALSE 9274
// tmp := Insert ( tmp , 1 , j ) else
9249: LD_ADDR_VAR 0 19
9253: PUSH
9254: LD_VAR 0 19
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: LD_VAR 0 9
9266: PPUSH
9267: CALL_OW 2
9271: ST_TO_ADDR
9272: GO 9303
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9274: LD_ADDR_VAR 0 19
9278: PUSH
9279: LD_VAR 0 19
9283: PPUSH
9284: LD_VAR 0 19
9288: PUSH
9289: LD_INT 1
9291: PLUS
9292: PPUSH
9293: LD_VAR 0 9
9297: PPUSH
9298: CALL_OW 2
9302: ST_TO_ADDR
9303: GO 9231
9305: POP
9306: POP
// if tmp then
9307: LD_VAR 0 19
9311: IFFALSE 9323
// f := tmp ;
9313: LD_ADDR_VAR 0 12
9317: PUSH
9318: LD_VAR 0 19
9322: ST_TO_ADDR
// end ; x := personel [ i ] ;
9323: LD_ADDR_VAR 0 13
9327: PUSH
9328: LD_VAR 0 6
9332: PUSH
9333: LD_VAR 0 8
9337: ARRAY
9338: ST_TO_ADDR
// if x = - 1 then
9339: LD_VAR 0 13
9343: PUSH
9344: LD_INT 1
9346: NEG
9347: EQUAL
9348: IFFALSE 9557
// begin for j in f do
9350: LD_ADDR_VAR 0 9
9354: PUSH
9355: LD_VAR 0 12
9359: PUSH
9360: FOR_IN
9361: IFFALSE 9553
// repeat InitHc ;
9363: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9367: LD_VAR 0 9
9371: PPUSH
9372: CALL_OW 266
9376: PUSH
9377: LD_INT 5
9379: EQUAL
9380: IFFALSE 9450
// begin if UnitsInside ( j ) < 3 then
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 313
9391: PUSH
9392: LD_INT 3
9394: LESS
9395: IFFALSE 9431
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9397: LD_INT 0
9399: PPUSH
9400: LD_INT 5
9402: PUSH
9403: LD_INT 8
9405: PUSH
9406: LD_INT 9
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_VAR 0 17
9418: ARRAY
9419: PPUSH
9420: LD_VAR 0 4
9424: PPUSH
9425: CALL_OW 380
9429: GO 9448
// PrepareHuman ( false , i , skill ) ;
9431: LD_INT 0
9433: PPUSH
9434: LD_VAR 0 8
9438: PPUSH
9439: LD_VAR 0 4
9443: PPUSH
9444: CALL_OW 380
// end else
9448: GO 9467
// PrepareHuman ( false , i , skill ) ;
9450: LD_INT 0
9452: PPUSH
9453: LD_VAR 0 8
9457: PPUSH
9458: LD_VAR 0 4
9462: PPUSH
9463: CALL_OW 380
// un := CreateHuman ;
9467: LD_ADDR_VAR 0 14
9471: PUSH
9472: CALL_OW 44
9476: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9477: LD_ADDR_VAR 0 7
9481: PUSH
9482: LD_VAR 0 7
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: LD_VAR 0 14
9494: PPUSH
9495: CALL_OW 2
9499: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9500: LD_VAR 0 14
9504: PPUSH
9505: LD_VAR 0 9
9509: PPUSH
9510: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9514: LD_VAR 0 9
9518: PPUSH
9519: CALL_OW 313
9523: PUSH
9524: LD_INT 6
9526: EQUAL
9527: PUSH
9528: LD_VAR 0 9
9532: PPUSH
9533: CALL_OW 266
9537: PUSH
9538: LD_INT 32
9540: PUSH
9541: LD_INT 31
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: IN
9548: OR
9549: IFFALSE 9363
9551: GO 9360
9553: POP
9554: POP
// end else
9555: GO 9937
// for j = 1 to x do
9557: LD_ADDR_VAR 0 9
9561: PUSH
9562: DOUBLE
9563: LD_INT 1
9565: DEC
9566: ST_TO_ADDR
9567: LD_VAR 0 13
9571: PUSH
9572: FOR_TO
9573: IFFALSE 9935
// begin InitHc ;
9575: CALL_OW 19
// if not f then
9579: LD_VAR 0 12
9583: NOT
9584: IFFALSE 9673
// begin PrepareHuman ( false , i , skill ) ;
9586: LD_INT 0
9588: PPUSH
9589: LD_VAR 0 8
9593: PPUSH
9594: LD_VAR 0 4
9598: PPUSH
9599: CALL_OW 380
// un := CreateHuman ;
9603: LD_ADDR_VAR 0 14
9607: PUSH
9608: CALL_OW 44
9612: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9613: LD_ADDR_VAR 0 7
9617: PUSH
9618: LD_VAR 0 7
9622: PPUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 14
9630: PPUSH
9631: CALL_OW 2
9635: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9636: LD_VAR 0 14
9640: PPUSH
9641: LD_VAR 0 1
9645: PPUSH
9646: CALL_OW 250
9650: PPUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: CALL_OW 251
9660: PPUSH
9661: LD_INT 10
9663: PPUSH
9664: LD_INT 0
9666: PPUSH
9667: CALL_OW 50
// continue ;
9671: GO 9572
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9673: LD_VAR 0 12
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: CALL_OW 313
9686: PUSH
9687: LD_VAR 0 12
9691: PUSH
9692: LD_INT 1
9694: ARRAY
9695: PPUSH
9696: CALL_OW 266
9700: PUSH
9701: LD_INT 32
9703: PUSH
9704: LD_INT 31
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: IN
9711: AND
9712: PUSH
9713: LD_VAR 0 12
9717: PUSH
9718: LD_INT 1
9720: ARRAY
9721: PPUSH
9722: CALL_OW 313
9726: PUSH
9727: LD_INT 6
9729: EQUAL
9730: OR
9731: IFFALSE 9751
// f := Delete ( f , 1 ) ;
9733: LD_ADDR_VAR 0 12
9737: PUSH
9738: LD_VAR 0 12
9742: PPUSH
9743: LD_INT 1
9745: PPUSH
9746: CALL_OW 3
9750: ST_TO_ADDR
// if not f then
9751: LD_VAR 0 12
9755: NOT
9756: IFFALSE 9774
// begin x := x + 2 ;
9758: LD_ADDR_VAR 0 13
9762: PUSH
9763: LD_VAR 0 13
9767: PUSH
9768: LD_INT 2
9770: PLUS
9771: ST_TO_ADDR
// continue ;
9772: GO 9572
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9774: LD_VAR 0 12
9778: PUSH
9779: LD_INT 1
9781: ARRAY
9782: PPUSH
9783: CALL_OW 266
9787: PUSH
9788: LD_INT 5
9790: EQUAL
9791: IFFALSE 9865
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9793: LD_VAR 0 12
9797: PUSH
9798: LD_INT 1
9800: ARRAY
9801: PPUSH
9802: CALL_OW 313
9806: PUSH
9807: LD_INT 3
9809: LESS
9810: IFFALSE 9846
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9812: LD_INT 0
9814: PPUSH
9815: LD_INT 5
9817: PUSH
9818: LD_INT 8
9820: PUSH
9821: LD_INT 9
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: LD_VAR 0 17
9833: ARRAY
9834: PPUSH
9835: LD_VAR 0 4
9839: PPUSH
9840: CALL_OW 380
9844: GO 9863
// PrepareHuman ( false , i , skill ) ;
9846: LD_INT 0
9848: PPUSH
9849: LD_VAR 0 8
9853: PPUSH
9854: LD_VAR 0 4
9858: PPUSH
9859: CALL_OW 380
// end else
9863: GO 9882
// PrepareHuman ( false , i , skill ) ;
9865: LD_INT 0
9867: PPUSH
9868: LD_VAR 0 8
9872: PPUSH
9873: LD_VAR 0 4
9877: PPUSH
9878: CALL_OW 380
// un := CreateHuman ;
9882: LD_ADDR_VAR 0 14
9886: PUSH
9887: CALL_OW 44
9891: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9892: LD_ADDR_VAR 0 7
9896: PUSH
9897: LD_VAR 0 7
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: LD_VAR 0 14
9909: PPUSH
9910: CALL_OW 2
9914: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
9915: LD_VAR 0 14
9919: PPUSH
9920: LD_VAR 0 12
9924: PUSH
9925: LD_INT 1
9927: ARRAY
9928: PPUSH
9929: CALL_OW 52
// end ;
9933: GO 9572
9935: POP
9936: POP
// end ;
9937: GO 8874
9939: POP
9940: POP
// result := result ^ buildings ;
9941: LD_ADDR_VAR 0 7
9945: PUSH
9946: LD_VAR 0 7
9950: PUSH
9951: LD_VAR 0 18
9955: ADD
9956: ST_TO_ADDR
// end else
9957: GO 10100
// begin for i = 1 to personel do
9959: LD_ADDR_VAR 0 8
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_VAR 0 6
9973: PUSH
9974: FOR_TO
9975: IFFALSE 10098
// begin if i > 4 then
9977: LD_VAR 0 8
9981: PUSH
9982: LD_INT 4
9984: GREATER
9985: IFFALSE 9989
// break ;
9987: GO 10098
// x := personel [ i ] ;
9989: LD_ADDR_VAR 0 13
9993: PUSH
9994: LD_VAR 0 6
9998: PUSH
9999: LD_VAR 0 8
10003: ARRAY
10004: ST_TO_ADDR
// if x = - 1 then
10005: LD_VAR 0 13
10009: PUSH
10010: LD_INT 1
10012: NEG
10013: EQUAL
10014: IFFALSE 10018
// continue ;
10016: GO 9974
// PrepareHuman ( false , i , skill ) ;
10018: LD_INT 0
10020: PPUSH
10021: LD_VAR 0 8
10025: PPUSH
10026: LD_VAR 0 4
10030: PPUSH
10031: CALL_OW 380
// un := CreateHuman ;
10035: LD_ADDR_VAR 0 14
10039: PUSH
10040: CALL_OW 44
10044: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10045: LD_VAR 0 14
10049: PPUSH
10050: LD_VAR 0 1
10054: PPUSH
10055: CALL_OW 250
10059: PPUSH
10060: LD_VAR 0 1
10064: PPUSH
10065: CALL_OW 251
10069: PPUSH
10070: LD_INT 10
10072: PPUSH
10073: LD_INT 0
10075: PPUSH
10076: CALL_OW 50
// result := result ^ un ;
10080: LD_ADDR_VAR 0 7
10084: PUSH
10085: LD_VAR 0 7
10089: PUSH
10090: LD_VAR 0 14
10094: ADD
10095: ST_TO_ADDR
// end ;
10096: GO 9974
10098: POP
10099: POP
// end ; end ;
10100: LD_VAR 0 7
10104: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10105: LD_INT 0
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
10113: PPUSH
10114: PPUSH
10115: PPUSH
10116: PPUSH
10117: PPUSH
10118: PPUSH
10119: PPUSH
10120: PPUSH
10121: PPUSH
10122: PPUSH
// result := false ;
10123: LD_ADDR_VAR 0 3
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10131: LD_VAR 0 1
10135: NOT
10136: PUSH
10137: LD_VAR 0 1
10141: PPUSH
10142: CALL_OW 266
10146: PUSH
10147: LD_INT 32
10149: PUSH
10150: LD_INT 33
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: IN
10157: NOT
10158: OR
10159: IFFALSE 10163
// exit ;
10161: GO 11272
// nat := GetNation ( tower ) ;
10163: LD_ADDR_VAR 0 12
10167: PUSH
10168: LD_VAR 0 1
10172: PPUSH
10173: CALL_OW 248
10177: ST_TO_ADDR
// side := GetSide ( tower ) ;
10178: LD_ADDR_VAR 0 16
10182: PUSH
10183: LD_VAR 0 1
10187: PPUSH
10188: CALL_OW 255
10192: ST_TO_ADDR
// x := GetX ( tower ) ;
10193: LD_ADDR_VAR 0 10
10197: PUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 250
10207: ST_TO_ADDR
// y := GetY ( tower ) ;
10208: LD_ADDR_VAR 0 11
10212: PUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 251
10222: ST_TO_ADDR
// if not x or not y then
10223: LD_VAR 0 10
10227: NOT
10228: PUSH
10229: LD_VAR 0 11
10233: NOT
10234: OR
10235: IFFALSE 10239
// exit ;
10237: GO 11272
// weapon := 0 ;
10239: LD_ADDR_VAR 0 18
10243: PUSH
10244: LD_INT 0
10246: ST_TO_ADDR
// fac_list := [ ] ;
10247: LD_ADDR_VAR 0 17
10251: PUSH
10252: EMPTY
10253: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10254: LD_ADDR_VAR 0 6
10258: PUSH
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 274
10268: PPUSH
10269: LD_VAR 0 2
10273: PPUSH
10274: LD_INT 0
10276: PPUSH
10277: CALL 7843 0 3
10281: PPUSH
10282: LD_INT 30
10284: PUSH
10285: LD_INT 3
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PPUSH
10292: CALL_OW 72
10296: ST_TO_ADDR
// if not factories then
10297: LD_VAR 0 6
10301: NOT
10302: IFFALSE 10306
// exit ;
10304: GO 11272
// for i in factories do
10306: LD_ADDR_VAR 0 8
10310: PUSH
10311: LD_VAR 0 6
10315: PUSH
10316: FOR_IN
10317: IFFALSE 10342
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10319: LD_ADDR_VAR 0 17
10323: PUSH
10324: LD_VAR 0 17
10328: PUSH
10329: LD_VAR 0 8
10333: PPUSH
10334: CALL_OW 478
10338: UNION
10339: ST_TO_ADDR
10340: GO 10316
10342: POP
10343: POP
// if not fac_list then
10344: LD_VAR 0 17
10348: NOT
10349: IFFALSE 10353
// exit ;
10351: GO 11272
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10353: LD_ADDR_VAR 0 5
10357: PUSH
10358: LD_INT 4
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: LD_INT 9
10366: PUSH
10367: LD_INT 10
10369: PUSH
10370: LD_INT 6
10372: PUSH
10373: LD_INT 7
10375: PUSH
10376: LD_INT 11
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 27
10390: PUSH
10391: LD_INT 28
10393: PUSH
10394: LD_INT 26
10396: PUSH
10397: LD_INT 30
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 43
10408: PUSH
10409: LD_INT 44
10411: PUSH
10412: LD_INT 46
10414: PUSH
10415: LD_INT 45
10417: PUSH
10418: LD_INT 47
10420: PUSH
10421: LD_INT 49
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: PUSH
10437: LD_VAR 0 12
10441: ARRAY
10442: ST_TO_ADDR
// list := list isect fac_list ;
10443: LD_ADDR_VAR 0 5
10447: PUSH
10448: LD_VAR 0 5
10452: PUSH
10453: LD_VAR 0 17
10457: ISECT
10458: ST_TO_ADDR
// if not list then
10459: LD_VAR 0 5
10463: NOT
10464: IFFALSE 10468
// exit ;
10466: GO 11272
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10468: LD_VAR 0 12
10472: PUSH
10473: LD_INT 3
10475: EQUAL
10476: PUSH
10477: LD_INT 49
10479: PUSH
10480: LD_VAR 0 5
10484: IN
10485: AND
10486: PUSH
10487: LD_INT 31
10489: PPUSH
10490: LD_VAR 0 16
10494: PPUSH
10495: CALL_OW 321
10499: PUSH
10500: LD_INT 2
10502: EQUAL
10503: AND
10504: IFFALSE 10564
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10506: LD_INT 22
10508: PUSH
10509: LD_VAR 0 16
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 35
10520: PUSH
10521: LD_INT 49
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 91
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: LD_INT 10
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: PPUSH
10549: CALL_OW 69
10553: NOT
10554: IFFALSE 10564
// weapon := ru_time_lapser ;
10556: LD_ADDR_VAR 0 18
10560: PUSH
10561: LD_INT 49
10563: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10564: LD_VAR 0 12
10568: PUSH
10569: LD_INT 1
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: IN
10579: PUSH
10580: LD_INT 11
10582: PUSH
10583: LD_VAR 0 5
10587: IN
10588: PUSH
10589: LD_INT 30
10591: PUSH
10592: LD_VAR 0 5
10596: IN
10597: OR
10598: AND
10599: PUSH
10600: LD_INT 6
10602: PPUSH
10603: LD_VAR 0 16
10607: PPUSH
10608: CALL_OW 321
10612: PUSH
10613: LD_INT 2
10615: EQUAL
10616: AND
10617: IFFALSE 10782
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10619: LD_INT 22
10621: PUSH
10622: LD_VAR 0 16
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: LD_INT 35
10636: PUSH
10637: LD_INT 11
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 35
10646: PUSH
10647: LD_INT 30
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 91
10661: PUSH
10662: LD_VAR 0 1
10666: PUSH
10667: LD_INT 18
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: NOT
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_VAR 0 16
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: LD_INT 30
10703: PUSH
10704: LD_INT 32
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 30
10713: PUSH
10714: LD_INT 33
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 91
10728: PUSH
10729: LD_VAR 0 1
10733: PUSH
10734: LD_INT 12
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: PPUSH
10750: CALL_OW 69
10754: PUSH
10755: LD_INT 2
10757: GREATER
10758: AND
10759: IFFALSE 10782
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10761: LD_ADDR_VAR 0 18
10765: PUSH
10766: LD_INT 11
10768: PUSH
10769: LD_INT 30
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_VAR 0 12
10780: ARRAY
10781: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10782: LD_VAR 0 18
10786: NOT
10787: PUSH
10788: LD_INT 40
10790: PPUSH
10791: LD_VAR 0 16
10795: PPUSH
10796: CALL_OW 321
10800: PUSH
10801: LD_INT 2
10803: EQUAL
10804: AND
10805: PUSH
10806: LD_INT 7
10808: PUSH
10809: LD_VAR 0 5
10813: IN
10814: PUSH
10815: LD_INT 28
10817: PUSH
10818: LD_VAR 0 5
10822: IN
10823: OR
10824: PUSH
10825: LD_INT 45
10827: PUSH
10828: LD_VAR 0 5
10832: IN
10833: OR
10834: AND
10835: IFFALSE 11089
// begin hex := GetHexInfo ( x , y ) ;
10837: LD_ADDR_VAR 0 4
10841: PUSH
10842: LD_VAR 0 10
10846: PPUSH
10847: LD_VAR 0 11
10851: PPUSH
10852: CALL_OW 546
10856: ST_TO_ADDR
// if hex [ 1 ] then
10857: LD_VAR 0 4
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: IFFALSE 10869
// exit ;
10867: GO 11272
// height := hex [ 2 ] ;
10869: LD_ADDR_VAR 0 15
10873: PUSH
10874: LD_VAR 0 4
10878: PUSH
10879: LD_INT 2
10881: ARRAY
10882: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
10883: LD_ADDR_VAR 0 14
10887: PUSH
10888: LD_INT 0
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: LD_INT 3
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: ST_TO_ADDR
// for i in tmp do
10906: LD_ADDR_VAR 0 8
10910: PUSH
10911: LD_VAR 0 14
10915: PUSH
10916: FOR_IN
10917: IFFALSE 11087
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
10919: LD_ADDR_VAR 0 9
10923: PUSH
10924: LD_VAR 0 10
10928: PPUSH
10929: LD_VAR 0 8
10933: PPUSH
10934: LD_INT 5
10936: PPUSH
10937: CALL_OW 272
10941: PUSH
10942: LD_VAR 0 11
10946: PPUSH
10947: LD_VAR 0 8
10951: PPUSH
10952: LD_INT 5
10954: PPUSH
10955: CALL_OW 273
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
10964: LD_VAR 0 9
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PPUSH
10973: LD_VAR 0 9
10977: PUSH
10978: LD_INT 2
10980: ARRAY
10981: PPUSH
10982: CALL_OW 488
10986: IFFALSE 11085
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
10988: LD_ADDR_VAR 0 4
10992: PUSH
10993: LD_VAR 0 9
10997: PUSH
10998: LD_INT 1
11000: ARRAY
11001: PPUSH
11002: LD_VAR 0 9
11006: PUSH
11007: LD_INT 2
11009: ARRAY
11010: PPUSH
11011: CALL_OW 546
11015: ST_TO_ADDR
// if hex [ 1 ] then
11016: LD_VAR 0 4
11020: PUSH
11021: LD_INT 1
11023: ARRAY
11024: IFFALSE 11028
// continue ;
11026: GO 10916
// h := hex [ 2 ] ;
11028: LD_ADDR_VAR 0 13
11032: PUSH
11033: LD_VAR 0 4
11037: PUSH
11038: LD_INT 2
11040: ARRAY
11041: ST_TO_ADDR
// if h + 7 < height then
11042: LD_VAR 0 13
11046: PUSH
11047: LD_INT 7
11049: PLUS
11050: PUSH
11051: LD_VAR 0 15
11055: LESS
11056: IFFALSE 11085
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11058: LD_ADDR_VAR 0 18
11062: PUSH
11063: LD_INT 7
11065: PUSH
11066: LD_INT 28
11068: PUSH
11069: LD_INT 45
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: PUSH
11077: LD_VAR 0 12
11081: ARRAY
11082: ST_TO_ADDR
// break ;
11083: GO 11087
// end ; end ; end ;
11085: GO 10916
11087: POP
11088: POP
// end ; if not weapon then
11089: LD_VAR 0 18
11093: NOT
11094: IFFALSE 11154
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11096: LD_ADDR_VAR 0 5
11100: PUSH
11101: LD_VAR 0 5
11105: PUSH
11106: LD_INT 11
11108: PUSH
11109: LD_INT 30
11111: PUSH
11112: LD_INT 49
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: DIFF
11120: ST_TO_ADDR
// if not list then
11121: LD_VAR 0 5
11125: NOT
11126: IFFALSE 11130
// exit ;
11128: GO 11272
// weapon := list [ rand ( 1 , list ) ] ;
11130: LD_ADDR_VAR 0 18
11134: PUSH
11135: LD_VAR 0 5
11139: PUSH
11140: LD_INT 1
11142: PPUSH
11143: LD_VAR 0 5
11147: PPUSH
11148: CALL_OW 12
11152: ARRAY
11153: ST_TO_ADDR
// end ; if weapon then
11154: LD_VAR 0 18
11158: IFFALSE 11272
// begin tmp := CostOfWeapon ( weapon ) ;
11160: LD_ADDR_VAR 0 14
11164: PUSH
11165: LD_VAR 0 18
11169: PPUSH
11170: CALL_OW 451
11174: ST_TO_ADDR
// j := GetBase ( tower ) ;
11175: LD_ADDR_VAR 0 9
11179: PUSH
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 274
11189: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11190: LD_VAR 0 9
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 275
11202: PUSH
11203: LD_VAR 0 14
11207: PUSH
11208: LD_INT 1
11210: ARRAY
11211: GREATEREQUAL
11212: PUSH
11213: LD_VAR 0 9
11217: PPUSH
11218: LD_INT 2
11220: PPUSH
11221: CALL_OW 275
11225: PUSH
11226: LD_VAR 0 14
11230: PUSH
11231: LD_INT 2
11233: ARRAY
11234: GREATEREQUAL
11235: AND
11236: PUSH
11237: LD_VAR 0 9
11241: PPUSH
11242: LD_INT 3
11244: PPUSH
11245: CALL_OW 275
11249: PUSH
11250: LD_VAR 0 14
11254: PUSH
11255: LD_INT 3
11257: ARRAY
11258: GREATEREQUAL
11259: AND
11260: IFFALSE 11272
// result := weapon ;
11262: LD_ADDR_VAR 0 3
11266: PUSH
11267: LD_VAR 0 18
11271: ST_TO_ADDR
// end ; end ;
11272: LD_VAR 0 3
11276: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11277: LD_INT 0
11279: PPUSH
11280: PPUSH
// result := true ;
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// if array1 = array2 then
11289: LD_VAR 0 1
11293: PUSH
11294: LD_VAR 0 2
11298: EQUAL
11299: IFFALSE 11359
// begin for i = 1 to array1 do
11301: LD_ADDR_VAR 0 4
11305: PUSH
11306: DOUBLE
11307: LD_INT 1
11309: DEC
11310: ST_TO_ADDR
11311: LD_VAR 0 1
11315: PUSH
11316: FOR_TO
11317: IFFALSE 11355
// if array1 [ i ] <> array2 [ i ] then
11319: LD_VAR 0 1
11323: PUSH
11324: LD_VAR 0 4
11328: ARRAY
11329: PUSH
11330: LD_VAR 0 2
11334: PUSH
11335: LD_VAR 0 4
11339: ARRAY
11340: NONEQUAL
11341: IFFALSE 11353
// begin result := false ;
11343: LD_ADDR_VAR 0 3
11347: PUSH
11348: LD_INT 0
11350: ST_TO_ADDR
// break ;
11351: GO 11355
// end ;
11353: GO 11316
11355: POP
11356: POP
// end else
11357: GO 11367
// result := false ;
11359: LD_ADDR_VAR 0 3
11363: PUSH
11364: LD_INT 0
11366: ST_TO_ADDR
// end ;
11367: LD_VAR 0 3
11371: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11372: LD_INT 0
11374: PPUSH
11375: PPUSH
// if not array1 or not array2 then
11376: LD_VAR 0 1
11380: NOT
11381: PUSH
11382: LD_VAR 0 2
11386: NOT
11387: OR
11388: IFFALSE 11392
// exit ;
11390: GO 11456
// result := true ;
11392: LD_ADDR_VAR 0 3
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// for i = 1 to array1 do
11400: LD_ADDR_VAR 0 4
11404: PUSH
11405: DOUBLE
11406: LD_INT 1
11408: DEC
11409: ST_TO_ADDR
11410: LD_VAR 0 1
11414: PUSH
11415: FOR_TO
11416: IFFALSE 11454
// if array1 [ i ] <> array2 [ i ] then
11418: LD_VAR 0 1
11422: PUSH
11423: LD_VAR 0 4
11427: ARRAY
11428: PUSH
11429: LD_VAR 0 2
11433: PUSH
11434: LD_VAR 0 4
11438: ARRAY
11439: NONEQUAL
11440: IFFALSE 11452
// begin result := false ;
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_INT 0
11449: ST_TO_ADDR
// break ;
11450: GO 11454
// end ;
11452: GO 11415
11454: POP
11455: POP
// end ;
11456: LD_VAR 0 3
11460: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11461: LD_INT 0
11463: PPUSH
11464: PPUSH
11465: PPUSH
// pom := GetBase ( fac ) ;
11466: LD_ADDR_VAR 0 5
11470: PUSH
11471: LD_VAR 0 1
11475: PPUSH
11476: CALL_OW 274
11480: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_VAR 0 2
11490: PUSH
11491: LD_INT 1
11493: ARRAY
11494: PPUSH
11495: LD_VAR 0 2
11499: PUSH
11500: LD_INT 2
11502: ARRAY
11503: PPUSH
11504: LD_VAR 0 2
11508: PUSH
11509: LD_INT 3
11511: ARRAY
11512: PPUSH
11513: LD_VAR 0 2
11517: PUSH
11518: LD_INT 4
11520: ARRAY
11521: PPUSH
11522: CALL_OW 449
11526: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11527: LD_ADDR_VAR 0 3
11531: PUSH
11532: LD_VAR 0 5
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 275
11544: PUSH
11545: LD_VAR 0 4
11549: PUSH
11550: LD_INT 1
11552: ARRAY
11553: GREATEREQUAL
11554: PUSH
11555: LD_VAR 0 5
11559: PPUSH
11560: LD_INT 2
11562: PPUSH
11563: CALL_OW 275
11567: PUSH
11568: LD_VAR 0 4
11572: PUSH
11573: LD_INT 2
11575: ARRAY
11576: GREATEREQUAL
11577: AND
11578: PUSH
11579: LD_VAR 0 5
11583: PPUSH
11584: LD_INT 3
11586: PPUSH
11587: CALL_OW 275
11591: PUSH
11592: LD_VAR 0 4
11596: PUSH
11597: LD_INT 3
11599: ARRAY
11600: GREATEREQUAL
11601: AND
11602: ST_TO_ADDR
// end ;
11603: LD_VAR 0 3
11607: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
// pom := GetBase ( building ) ;
11614: LD_ADDR_VAR 0 3
11618: PUSH
11619: LD_VAR 0 1
11623: PPUSH
11624: CALL_OW 274
11628: ST_TO_ADDR
// if not pom then
11629: LD_VAR 0 3
11633: NOT
11634: IFFALSE 11638
// exit ;
11636: GO 11808
// btype := GetBType ( building ) ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_VAR 0 1
11647: PPUSH
11648: CALL_OW 266
11652: ST_TO_ADDR
// if btype = b_armoury then
11653: LD_VAR 0 5
11657: PUSH
11658: LD_INT 4
11660: EQUAL
11661: IFFALSE 11671
// btype := b_barracks ;
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: LD_INT 5
11670: ST_TO_ADDR
// if btype = b_depot then
11671: LD_VAR 0 5
11675: PUSH
11676: LD_INT 0
11678: EQUAL
11679: IFFALSE 11689
// btype := b_warehouse ;
11681: LD_ADDR_VAR 0 5
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if btype = b_workshop then
11689: LD_VAR 0 5
11693: PUSH
11694: LD_INT 2
11696: EQUAL
11697: IFFALSE 11707
// btype := b_factory ;
11699: LD_ADDR_VAR 0 5
11703: PUSH
11704: LD_INT 3
11706: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11707: LD_ADDR_VAR 0 4
11711: PUSH
11712: LD_VAR 0 5
11716: PPUSH
11717: LD_VAR 0 1
11721: PPUSH
11722: CALL_OW 248
11726: PPUSH
11727: CALL_OW 450
11731: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11732: LD_ADDR_VAR 0 2
11736: PUSH
11737: LD_VAR 0 3
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL_OW 275
11749: PUSH
11750: LD_VAR 0 4
11754: PUSH
11755: LD_INT 1
11757: ARRAY
11758: GREATEREQUAL
11759: PUSH
11760: LD_VAR 0 3
11764: PPUSH
11765: LD_INT 2
11767: PPUSH
11768: CALL_OW 275
11772: PUSH
11773: LD_VAR 0 4
11777: PUSH
11778: LD_INT 2
11780: ARRAY
11781: GREATEREQUAL
11782: AND
11783: PUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: LD_INT 3
11791: PPUSH
11792: CALL_OW 275
11796: PUSH
11797: LD_VAR 0 4
11801: PUSH
11802: LD_INT 3
11804: ARRAY
11805: GREATEREQUAL
11806: AND
11807: ST_TO_ADDR
// end ;
11808: LD_VAR 0 2
11812: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11813: LD_INT 0
11815: PPUSH
11816: PPUSH
11817: PPUSH
// pom := GetBase ( building ) ;
11818: LD_ADDR_VAR 0 4
11822: PUSH
11823: LD_VAR 0 1
11827: PPUSH
11828: CALL_OW 274
11832: ST_TO_ADDR
// if not pom then
11833: LD_VAR 0 4
11837: NOT
11838: IFFALSE 11842
// exit ;
11840: GO 11943
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11842: LD_ADDR_VAR 0 5
11846: PUSH
11847: LD_VAR 0 2
11851: PPUSH
11852: LD_VAR 0 1
11856: PPUSH
11857: CALL_OW 248
11861: PPUSH
11862: CALL_OW 450
11866: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11867: LD_ADDR_VAR 0 3
11871: PUSH
11872: LD_VAR 0 4
11876: PPUSH
11877: LD_INT 1
11879: PPUSH
11880: CALL_OW 275
11884: PUSH
11885: LD_VAR 0 5
11889: PUSH
11890: LD_INT 1
11892: ARRAY
11893: GREATEREQUAL
11894: PUSH
11895: LD_VAR 0 4
11899: PPUSH
11900: LD_INT 2
11902: PPUSH
11903: CALL_OW 275
11907: PUSH
11908: LD_VAR 0 5
11912: PUSH
11913: LD_INT 2
11915: ARRAY
11916: GREATEREQUAL
11917: AND
11918: PUSH
11919: LD_VAR 0 4
11923: PPUSH
11924: LD_INT 3
11926: PPUSH
11927: CALL_OW 275
11931: PUSH
11932: LD_VAR 0 5
11936: PUSH
11937: LD_INT 3
11939: ARRAY
11940: GREATEREQUAL
11941: AND
11942: ST_TO_ADDR
// end ;
11943: LD_VAR 0 3
11947: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
11948: LD_INT 0
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
11955: PPUSH
11956: PPUSH
11957: PPUSH
11958: PPUSH
11959: PPUSH
11960: PPUSH
// result := false ;
11961: LD_ADDR_VAR 0 8
11965: PUSH
11966: LD_INT 0
11968: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
11969: LD_VAR 0 5
11973: NOT
11974: PUSH
11975: LD_VAR 0 1
11979: NOT
11980: OR
11981: PUSH
11982: LD_VAR 0 2
11986: NOT
11987: OR
11988: PUSH
11989: LD_VAR 0 3
11993: NOT
11994: OR
11995: IFFALSE 11999
// exit ;
11997: GO 12813
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
11999: LD_ADDR_VAR 0 14
12003: PUSH
12004: LD_VAR 0 1
12008: PPUSH
12009: LD_VAR 0 2
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: LD_VAR 0 4
12023: PPUSH
12024: LD_VAR 0 5
12028: PUSH
12029: LD_INT 1
12031: ARRAY
12032: PPUSH
12033: CALL_OW 248
12037: PPUSH
12038: LD_INT 0
12040: PPUSH
12041: CALL 14066 0 6
12045: ST_TO_ADDR
// if not hexes then
12046: LD_VAR 0 14
12050: NOT
12051: IFFALSE 12055
// exit ;
12053: GO 12813
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12055: LD_ADDR_VAR 0 17
12059: PUSH
12060: LD_VAR 0 5
12064: PPUSH
12065: LD_INT 22
12067: PUSH
12068: LD_VAR 0 13
12072: PPUSH
12073: CALL_OW 255
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 30
12087: PUSH
12088: LD_INT 0
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 30
12097: PUSH
12098: LD_INT 1
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 72
12118: ST_TO_ADDR
// for i = 1 to hexes do
12119: LD_ADDR_VAR 0 9
12123: PUSH
12124: DOUBLE
12125: LD_INT 1
12127: DEC
12128: ST_TO_ADDR
12129: LD_VAR 0 14
12133: PUSH
12134: FOR_TO
12135: IFFALSE 12811
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12137: LD_ADDR_VAR 0 13
12141: PUSH
12142: LD_VAR 0 14
12146: PUSH
12147: LD_VAR 0 9
12151: ARRAY
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: LD_VAR 0 14
12161: PUSH
12162: LD_VAR 0 9
12166: ARRAY
12167: PUSH
12168: LD_INT 2
12170: ARRAY
12171: PPUSH
12172: CALL_OW 428
12176: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12177: LD_VAR 0 14
12181: PUSH
12182: LD_VAR 0 9
12186: ARRAY
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PPUSH
12192: LD_VAR 0 14
12196: PUSH
12197: LD_VAR 0 9
12201: ARRAY
12202: PUSH
12203: LD_INT 2
12205: ARRAY
12206: PPUSH
12207: CALL_OW 351
12211: PUSH
12212: LD_VAR 0 14
12216: PUSH
12217: LD_VAR 0 9
12221: ARRAY
12222: PUSH
12223: LD_INT 1
12225: ARRAY
12226: PPUSH
12227: LD_VAR 0 14
12231: PUSH
12232: LD_VAR 0 9
12236: ARRAY
12237: PUSH
12238: LD_INT 2
12240: ARRAY
12241: PPUSH
12242: CALL_OW 488
12246: NOT
12247: OR
12248: PUSH
12249: LD_VAR 0 13
12253: PPUSH
12254: CALL_OW 247
12258: PUSH
12259: LD_INT 3
12261: EQUAL
12262: OR
12263: IFFALSE 12269
// exit ;
12265: POP
12266: POP
12267: GO 12813
// if not tmp then
12269: LD_VAR 0 13
12273: NOT
12274: IFFALSE 12278
// continue ;
12276: GO 12134
// result := true ;
12278: LD_ADDR_VAR 0 8
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12286: LD_VAR 0 6
12290: PUSH
12291: LD_VAR 0 13
12295: PPUSH
12296: CALL_OW 247
12300: PUSH
12301: LD_INT 2
12303: EQUAL
12304: AND
12305: PUSH
12306: LD_VAR 0 13
12310: PPUSH
12311: CALL_OW 263
12315: PUSH
12316: LD_INT 1
12318: EQUAL
12319: AND
12320: IFFALSE 12484
// begin if IsDrivenBy ( tmp ) then
12322: LD_VAR 0 13
12326: PPUSH
12327: CALL_OW 311
12331: IFFALSE 12335
// continue ;
12333: GO 12134
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12335: LD_VAR 0 6
12339: PPUSH
12340: LD_INT 3
12342: PUSH
12343: LD_INT 60
12345: PUSH
12346: EMPTY
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 3
12355: PUSH
12356: LD_INT 55
12358: PUSH
12359: EMPTY
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 72
12374: IFFALSE 12482
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12376: LD_ADDR_VAR 0 18
12380: PUSH
12381: LD_VAR 0 6
12385: PPUSH
12386: LD_INT 3
12388: PUSH
12389: LD_INT 60
12391: PUSH
12392: EMPTY
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 55
12404: PUSH
12405: EMPTY
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PPUSH
12416: CALL_OW 72
12420: PUSH
12421: LD_INT 1
12423: ARRAY
12424: ST_TO_ADDR
// if IsInUnit ( driver ) then
12425: LD_VAR 0 18
12429: PPUSH
12430: CALL_OW 310
12434: IFFALSE 12445
// ComExit ( driver ) ;
12436: LD_VAR 0 18
12440: PPUSH
12441: CALL 37845 0 1
// AddComEnterUnit ( driver , tmp ) ;
12445: LD_VAR 0 18
12449: PPUSH
12450: LD_VAR 0 13
12454: PPUSH
12455: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12459: LD_VAR 0 18
12463: PPUSH
12464: LD_VAR 0 7
12468: PPUSH
12469: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12473: LD_VAR 0 18
12477: PPUSH
12478: CALL_OW 181
// end ; continue ;
12482: GO 12134
// end ; if not cleaners or not tmp in cleaners then
12484: LD_VAR 0 6
12488: NOT
12489: PUSH
12490: LD_VAR 0 13
12494: PUSH
12495: LD_VAR 0 6
12499: IN
12500: NOT
12501: OR
12502: IFFALSE 12809
// begin if dep then
12504: LD_VAR 0 17
12508: IFFALSE 12644
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12510: LD_ADDR_VAR 0 16
12514: PUSH
12515: LD_VAR 0 17
12519: PUSH
12520: LD_INT 1
12522: ARRAY
12523: PPUSH
12524: CALL_OW 250
12528: PPUSH
12529: LD_VAR 0 17
12533: PUSH
12534: LD_INT 1
12536: ARRAY
12537: PPUSH
12538: CALL_OW 254
12542: PPUSH
12543: LD_INT 5
12545: PPUSH
12546: CALL_OW 272
12550: PUSH
12551: LD_VAR 0 17
12555: PUSH
12556: LD_INT 1
12558: ARRAY
12559: PPUSH
12560: CALL_OW 251
12564: PPUSH
12565: LD_VAR 0 17
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: PPUSH
12574: CALL_OW 254
12578: PPUSH
12579: LD_INT 5
12581: PPUSH
12582: CALL_OW 273
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12591: LD_VAR 0 16
12595: PUSH
12596: LD_INT 1
12598: ARRAY
12599: PPUSH
12600: LD_VAR 0 16
12604: PUSH
12605: LD_INT 2
12607: ARRAY
12608: PPUSH
12609: CALL_OW 488
12613: IFFALSE 12644
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12615: LD_VAR 0 13
12619: PPUSH
12620: LD_VAR 0 16
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: LD_VAR 0 16
12633: PUSH
12634: LD_INT 2
12636: ARRAY
12637: PPUSH
12638: CALL_OW 111
// continue ;
12642: GO 12134
// end ; end ; r := GetDir ( tmp ) ;
12644: LD_ADDR_VAR 0 15
12648: PUSH
12649: LD_VAR 0 13
12653: PPUSH
12654: CALL_OW 254
12658: ST_TO_ADDR
// if r = 5 then
12659: LD_VAR 0 15
12663: PUSH
12664: LD_INT 5
12666: EQUAL
12667: IFFALSE 12677
// r := 0 ;
12669: LD_ADDR_VAR 0 15
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// for j = r to 5 do
12677: LD_ADDR_VAR 0 10
12681: PUSH
12682: DOUBLE
12683: LD_VAR 0 15
12687: DEC
12688: ST_TO_ADDR
12689: LD_INT 5
12691: PUSH
12692: FOR_TO
12693: IFFALSE 12807
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12695: LD_ADDR_VAR 0 11
12699: PUSH
12700: LD_VAR 0 13
12704: PPUSH
12705: CALL_OW 250
12709: PPUSH
12710: LD_VAR 0 10
12714: PPUSH
12715: LD_INT 2
12717: PPUSH
12718: CALL_OW 272
12722: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12723: LD_ADDR_VAR 0 12
12727: PUSH
12728: LD_VAR 0 13
12732: PPUSH
12733: CALL_OW 251
12737: PPUSH
12738: LD_VAR 0 10
12742: PPUSH
12743: LD_INT 2
12745: PPUSH
12746: CALL_OW 273
12750: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12751: LD_VAR 0 11
12755: PPUSH
12756: LD_VAR 0 12
12760: PPUSH
12761: CALL_OW 488
12765: PUSH
12766: LD_VAR 0 11
12770: PPUSH
12771: LD_VAR 0 12
12775: PPUSH
12776: CALL_OW 428
12780: NOT
12781: AND
12782: IFFALSE 12805
// begin ComMoveXY ( tmp , _x , _y ) ;
12784: LD_VAR 0 13
12788: PPUSH
12789: LD_VAR 0 11
12793: PPUSH
12794: LD_VAR 0 12
12798: PPUSH
12799: CALL_OW 111
// break ;
12803: GO 12807
// end ; end ;
12805: GO 12692
12807: POP
12808: POP
// end ; end ;
12809: GO 12134
12811: POP
12812: POP
// end ;
12813: LD_VAR 0 8
12817: RET
// export function BuildingTechInvented ( side , btype ) ; begin
12818: LD_INT 0
12820: PPUSH
// result := true ;
12821: LD_ADDR_VAR 0 3
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
12829: LD_VAR 0 2
12833: PUSH
12834: LD_INT 24
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12848
12840: LD_INT 33
12842: DOUBLE
12843: EQUAL
12844: IFTRUE 12848
12846: GO 12873
12848: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_INT 32
12856: PPUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL_OW 321
12866: PUSH
12867: LD_INT 2
12869: EQUAL
12870: ST_TO_ADDR
12871: GO 13189
12873: LD_INT 20
12875: DOUBLE
12876: EQUAL
12877: IFTRUE 12881
12879: GO 12906
12881: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: LD_INT 6
12889: PPUSH
12890: LD_VAR 0 1
12894: PPUSH
12895: CALL_OW 321
12899: PUSH
12900: LD_INT 2
12902: EQUAL
12903: ST_TO_ADDR
12904: GO 13189
12906: LD_INT 22
12908: DOUBLE
12909: EQUAL
12910: IFTRUE 12920
12912: LD_INT 36
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 12945
12920: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_INT 15
12928: PPUSH
12929: LD_VAR 0 1
12933: PPUSH
12934: CALL_OW 321
12938: PUSH
12939: LD_INT 2
12941: EQUAL
12942: ST_TO_ADDR
12943: GO 13189
12945: LD_INT 30
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12978
12953: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
12954: LD_ADDR_VAR 0 3
12958: PUSH
12959: LD_INT 20
12961: PPUSH
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 321
12971: PUSH
12972: LD_INT 2
12974: EQUAL
12975: ST_TO_ADDR
12976: GO 13189
12978: LD_INT 28
12980: DOUBLE
12981: EQUAL
12982: IFTRUE 12992
12984: LD_INT 21
12986: DOUBLE
12987: EQUAL
12988: IFTRUE 12992
12990: GO 13017
12992: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: LD_INT 21
13000: PPUSH
13001: LD_VAR 0 1
13005: PPUSH
13006: CALL_OW 321
13010: PUSH
13011: LD_INT 2
13013: EQUAL
13014: ST_TO_ADDR
13015: GO 13189
13017: LD_INT 16
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13050
13025: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: LD_INT 84
13033: PPUSH
13034: LD_VAR 0 1
13038: PPUSH
13039: CALL_OW 321
13043: PUSH
13044: LD_INT 2
13046: EQUAL
13047: ST_TO_ADDR
13048: GO 13189
13050: LD_INT 19
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13064
13056: LD_INT 23
13058: DOUBLE
13059: EQUAL
13060: IFTRUE 13064
13062: GO 13089
13064: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13065: LD_ADDR_VAR 0 3
13069: PUSH
13070: LD_INT 83
13072: PPUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 321
13082: PUSH
13083: LD_INT 2
13085: EQUAL
13086: ST_TO_ADDR
13087: GO 13189
13089: LD_INT 17
13091: DOUBLE
13092: EQUAL
13093: IFTRUE 13097
13095: GO 13122
13097: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_INT 39
13105: PPUSH
13106: LD_VAR 0 1
13110: PPUSH
13111: CALL_OW 321
13115: PUSH
13116: LD_INT 2
13118: EQUAL
13119: ST_TO_ADDR
13120: GO 13189
13122: LD_INT 18
13124: DOUBLE
13125: EQUAL
13126: IFTRUE 13130
13128: GO 13155
13130: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13131: LD_ADDR_VAR 0 3
13135: PUSH
13136: LD_INT 40
13138: PPUSH
13139: LD_VAR 0 1
13143: PPUSH
13144: CALL_OW 321
13148: PUSH
13149: LD_INT 2
13151: EQUAL
13152: ST_TO_ADDR
13153: GO 13189
13155: LD_INT 27
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13188
13163: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13164: LD_ADDR_VAR 0 3
13168: PUSH
13169: LD_INT 35
13171: PPUSH
13172: LD_VAR 0 1
13176: PPUSH
13177: CALL_OW 321
13181: PUSH
13182: LD_INT 2
13184: EQUAL
13185: ST_TO_ADDR
13186: GO 13189
13188: POP
// end ;
13189: LD_VAR 0 3
13193: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
13198: PPUSH
13199: PPUSH
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
13204: PPUSH
13205: PPUSH
13206: PPUSH
// result := false ;
13207: LD_ADDR_VAR 0 6
13211: PUSH
13212: LD_INT 0
13214: ST_TO_ADDR
// if btype = b_depot then
13215: LD_VAR 0 2
13219: PUSH
13220: LD_INT 0
13222: EQUAL
13223: IFFALSE 13235
// begin result := true ;
13225: LD_ADDR_VAR 0 6
13229: PUSH
13230: LD_INT 1
13232: ST_TO_ADDR
// exit ;
13233: GO 14061
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13235: LD_VAR 0 1
13239: NOT
13240: PUSH
13241: LD_VAR 0 1
13245: PPUSH
13246: CALL_OW 266
13250: PUSH
13251: LD_INT 0
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: IN
13261: NOT
13262: OR
13263: PUSH
13264: LD_VAR 0 2
13268: NOT
13269: OR
13270: PUSH
13271: LD_VAR 0 5
13275: PUSH
13276: LD_INT 0
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: LD_INT 4
13290: PUSH
13291: LD_INT 5
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: IN
13302: NOT
13303: OR
13304: PUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_VAR 0 4
13314: PPUSH
13315: CALL_OW 488
13319: NOT
13320: OR
13321: IFFALSE 13325
// exit ;
13323: GO 14061
// side := GetSide ( depot ) ;
13325: LD_ADDR_VAR 0 9
13329: PUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 255
13339: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13340: LD_VAR 0 9
13344: PPUSH
13345: LD_VAR 0 2
13349: PPUSH
13350: CALL 12818 0 2
13354: NOT
13355: IFFALSE 13359
// exit ;
13357: GO 14061
// pom := GetBase ( depot ) ;
13359: LD_ADDR_VAR 0 10
13363: PUSH
13364: LD_VAR 0 1
13368: PPUSH
13369: CALL_OW 274
13373: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13374: LD_ADDR_VAR 0 11
13378: PUSH
13379: LD_VAR 0 2
13383: PPUSH
13384: LD_VAR 0 1
13388: PPUSH
13389: CALL_OW 248
13393: PPUSH
13394: CALL_OW 450
13398: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13399: LD_VAR 0 10
13403: PPUSH
13404: LD_INT 1
13406: PPUSH
13407: CALL_OW 275
13411: PUSH
13412: LD_VAR 0 11
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: GREATEREQUAL
13421: PUSH
13422: LD_VAR 0 10
13426: PPUSH
13427: LD_INT 2
13429: PPUSH
13430: CALL_OW 275
13434: PUSH
13435: LD_VAR 0 11
13439: PUSH
13440: LD_INT 2
13442: ARRAY
13443: GREATEREQUAL
13444: AND
13445: PUSH
13446: LD_VAR 0 10
13450: PPUSH
13451: LD_INT 3
13453: PPUSH
13454: CALL_OW 275
13458: PUSH
13459: LD_VAR 0 11
13463: PUSH
13464: LD_INT 3
13466: ARRAY
13467: GREATEREQUAL
13468: AND
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 14061
// if GetBType ( depot ) = b_depot then
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 266
13483: PUSH
13484: LD_INT 0
13486: EQUAL
13487: IFFALSE 13499
// dist := 28 else
13489: LD_ADDR_VAR 0 14
13493: PUSH
13494: LD_INT 28
13496: ST_TO_ADDR
13497: GO 13507
// dist := 36 ;
13499: LD_ADDR_VAR 0 14
13503: PUSH
13504: LD_INT 36
13506: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13507: LD_VAR 0 1
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_VAR 0 4
13521: PPUSH
13522: CALL_OW 297
13526: PUSH
13527: LD_VAR 0 14
13531: GREATER
13532: IFFALSE 13536
// exit ;
13534: GO 14061
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13536: LD_ADDR_VAR 0 12
13540: PUSH
13541: LD_VAR 0 2
13545: PPUSH
13546: LD_VAR 0 3
13550: PPUSH
13551: LD_VAR 0 4
13555: PPUSH
13556: LD_VAR 0 5
13560: PPUSH
13561: LD_VAR 0 1
13565: PPUSH
13566: CALL_OW 248
13570: PPUSH
13571: LD_INT 0
13573: PPUSH
13574: CALL 14066 0 6
13578: ST_TO_ADDR
// if not hexes then
13579: LD_VAR 0 12
13583: NOT
13584: IFFALSE 13588
// exit ;
13586: GO 14061
// hex := GetHexInfo ( x , y ) ;
13588: LD_ADDR_VAR 0 15
13592: PUSH
13593: LD_VAR 0 3
13597: PPUSH
13598: LD_VAR 0 4
13602: PPUSH
13603: CALL_OW 546
13607: ST_TO_ADDR
// if hex [ 1 ] then
13608: LD_VAR 0 15
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: IFFALSE 13620
// exit ;
13618: GO 14061
// height := hex [ 2 ] ;
13620: LD_ADDR_VAR 0 13
13624: PUSH
13625: LD_VAR 0 15
13629: PUSH
13630: LD_INT 2
13632: ARRAY
13633: ST_TO_ADDR
// for i = 1 to hexes do
13634: LD_ADDR_VAR 0 7
13638: PUSH
13639: DOUBLE
13640: LD_INT 1
13642: DEC
13643: ST_TO_ADDR
13644: LD_VAR 0 12
13648: PUSH
13649: FOR_TO
13650: IFFALSE 13980
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13652: LD_VAR 0 12
13656: PUSH
13657: LD_VAR 0 7
13661: ARRAY
13662: PUSH
13663: LD_INT 1
13665: ARRAY
13666: PPUSH
13667: LD_VAR 0 12
13671: PUSH
13672: LD_VAR 0 7
13676: ARRAY
13677: PUSH
13678: LD_INT 2
13680: ARRAY
13681: PPUSH
13682: CALL_OW 488
13686: NOT
13687: PUSH
13688: LD_VAR 0 12
13692: PUSH
13693: LD_VAR 0 7
13697: ARRAY
13698: PUSH
13699: LD_INT 1
13701: ARRAY
13702: PPUSH
13703: LD_VAR 0 12
13707: PUSH
13708: LD_VAR 0 7
13712: ARRAY
13713: PUSH
13714: LD_INT 2
13716: ARRAY
13717: PPUSH
13718: CALL_OW 428
13722: PUSH
13723: LD_INT 0
13725: GREATER
13726: OR
13727: PUSH
13728: LD_VAR 0 12
13732: PUSH
13733: LD_VAR 0 7
13737: ARRAY
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PPUSH
13743: LD_VAR 0 12
13747: PUSH
13748: LD_VAR 0 7
13752: ARRAY
13753: PUSH
13754: LD_INT 2
13756: ARRAY
13757: PPUSH
13758: CALL_OW 351
13762: OR
13763: IFFALSE 13769
// exit ;
13765: POP
13766: POP
13767: GO 14061
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13769: LD_ADDR_VAR 0 8
13773: PUSH
13774: LD_VAR 0 12
13778: PUSH
13779: LD_VAR 0 7
13783: ARRAY
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PPUSH
13789: LD_VAR 0 12
13793: PUSH
13794: LD_VAR 0 7
13798: ARRAY
13799: PUSH
13800: LD_INT 2
13802: ARRAY
13803: PPUSH
13804: CALL_OW 546
13808: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13809: LD_VAR 0 8
13813: PUSH
13814: LD_INT 1
13816: ARRAY
13817: PUSH
13818: LD_VAR 0 8
13822: PUSH
13823: LD_INT 2
13825: ARRAY
13826: PUSH
13827: LD_VAR 0 13
13831: PUSH
13832: LD_INT 2
13834: PLUS
13835: GREATER
13836: OR
13837: PUSH
13838: LD_VAR 0 8
13842: PUSH
13843: LD_INT 2
13845: ARRAY
13846: PUSH
13847: LD_VAR 0 13
13851: PUSH
13852: LD_INT 2
13854: MINUS
13855: LESS
13856: OR
13857: PUSH
13858: LD_VAR 0 8
13862: PUSH
13863: LD_INT 3
13865: ARRAY
13866: PUSH
13867: LD_INT 0
13869: PUSH
13870: LD_INT 8
13872: PUSH
13873: LD_INT 9
13875: PUSH
13876: LD_INT 10
13878: PUSH
13879: LD_INT 11
13881: PUSH
13882: LD_INT 12
13884: PUSH
13885: LD_INT 13
13887: PUSH
13888: LD_INT 16
13890: PUSH
13891: LD_INT 17
13893: PUSH
13894: LD_INT 18
13896: PUSH
13897: LD_INT 19
13899: PUSH
13900: LD_INT 20
13902: PUSH
13903: LD_INT 21
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: IN
13921: NOT
13922: OR
13923: PUSH
13924: LD_VAR 0 8
13928: PUSH
13929: LD_INT 5
13931: ARRAY
13932: NOT
13933: OR
13934: PUSH
13935: LD_VAR 0 8
13939: PUSH
13940: LD_INT 6
13942: ARRAY
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: LD_INT 2
13949: PUSH
13950: LD_INT 7
13952: PUSH
13953: LD_INT 9
13955: PUSH
13956: LD_INT 10
13958: PUSH
13959: LD_INT 11
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: IN
13970: NOT
13971: OR
13972: IFFALSE 13978
// exit ;
13974: POP
13975: POP
13976: GO 14061
// end ;
13978: GO 13649
13980: POP
13981: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13982: LD_VAR 0 9
13986: PPUSH
13987: LD_VAR 0 3
13991: PPUSH
13992: LD_VAR 0 4
13996: PPUSH
13997: LD_INT 20
13999: PPUSH
14000: CALL 5984 0 4
14004: PUSH
14005: LD_INT 4
14007: ARRAY
14008: IFFALSE 14012
// exit ;
14010: GO 14061
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14012: LD_VAR 0 2
14016: PUSH
14017: LD_INT 29
14019: PUSH
14020: LD_INT 30
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: IN
14027: PUSH
14028: LD_VAR 0 3
14032: PPUSH
14033: LD_VAR 0 4
14037: PPUSH
14038: LD_VAR 0 9
14042: PPUSH
14043: CALL_OW 440
14047: NOT
14048: AND
14049: IFFALSE 14053
// exit ;
14051: GO 14061
// result := true ;
14053: LD_ADDR_VAR 0 6
14057: PUSH
14058: LD_INT 1
14060: ST_TO_ADDR
// end ;
14061: LD_VAR 0 6
14065: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14066: LD_INT 0
14068: PPUSH
14069: PPUSH
14070: PPUSH
14071: PPUSH
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
14076: PPUSH
14077: PPUSH
14078: PPUSH
14079: PPUSH
14080: PPUSH
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
14087: PPUSH
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
14104: PPUSH
14105: PPUSH
14106: PPUSH
14107: PPUSH
14108: PPUSH
14109: PPUSH
14110: PPUSH
14111: PPUSH
14112: PPUSH
14113: PPUSH
14114: PPUSH
14115: PPUSH
14116: PPUSH
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
14123: PPUSH
14124: PPUSH
14125: PPUSH
// result = [ ] ;
14126: LD_ADDR_VAR 0 7
14130: PUSH
14131: EMPTY
14132: ST_TO_ADDR
// temp_list = [ ] ;
14133: LD_ADDR_VAR 0 9
14137: PUSH
14138: EMPTY
14139: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14140: LD_VAR 0 4
14144: PUSH
14145: LD_INT 0
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: LD_INT 5
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: IN
14171: NOT
14172: PUSH
14173: LD_VAR 0 1
14177: PUSH
14178: LD_INT 0
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: IN
14188: PUSH
14189: LD_VAR 0 5
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: LD_INT 3
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: IN
14208: NOT
14209: AND
14210: OR
14211: IFFALSE 14215
// exit ;
14213: GO 32606
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14215: LD_VAR 0 1
14219: PUSH
14220: LD_INT 6
14222: PUSH
14223: LD_INT 7
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: LD_INT 13
14231: PUSH
14232: LD_INT 12
14234: PUSH
14235: LD_INT 15
14237: PUSH
14238: LD_INT 11
14240: PUSH
14241: LD_INT 14
14243: PUSH
14244: LD_INT 10
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: IN
14258: IFFALSE 14268
// btype = b_lab ;
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: LD_INT 6
14267: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14268: LD_VAR 0 6
14272: PUSH
14273: LD_INT 0
14275: PUSH
14276: LD_INT 1
14278: PUSH
14279: LD_INT 2
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: IN
14287: NOT
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: LD_INT 0
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 6
14308: PUSH
14309: LD_INT 36
14311: PUSH
14312: LD_INT 4
14314: PUSH
14315: LD_INT 5
14317: PUSH
14318: LD_INT 31
14320: PUSH
14321: LD_INT 32
14323: PUSH
14324: LD_INT 33
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: IN
14340: NOT
14341: PUSH
14342: LD_VAR 0 6
14346: PUSH
14347: LD_INT 1
14349: EQUAL
14350: AND
14351: OR
14352: PUSH
14353: LD_VAR 0 1
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: LD_INT 3
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: IN
14368: NOT
14369: PUSH
14370: LD_VAR 0 6
14374: PUSH
14375: LD_INT 2
14377: EQUAL
14378: AND
14379: OR
14380: IFFALSE 14390
// mode = 0 ;
14382: LD_ADDR_VAR 0 6
14386: PUSH
14387: LD_INT 0
14389: ST_TO_ADDR
// case mode of 0 :
14390: LD_VAR 0 6
14394: PUSH
14395: LD_INT 0
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 25856
14403: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14404: LD_ADDR_VAR 0 11
14408: PUSH
14409: LD_INT 0
14411: PUSH
14412: LD_INT 0
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 0
14421: PUSH
14422: LD_INT 1
14424: NEG
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 1
14432: PUSH
14433: LD_INT 0
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 1
14442: PUSH
14443: LD_INT 1
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 0
14452: PUSH
14453: LD_INT 1
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 1
14462: NEG
14463: PUSH
14464: LD_INT 0
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 1
14473: NEG
14474: PUSH
14475: LD_INT 1
14477: NEG
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 1
14485: NEG
14486: PUSH
14487: LD_INT 2
14489: NEG
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 0
14497: PUSH
14498: LD_INT 2
14500: NEG
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: LD_INT 1
14511: NEG
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 1
14519: PUSH
14520: LD_INT 2
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 0
14529: PUSH
14530: LD_INT 2
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 1
14539: NEG
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: LD_INT 3
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 0
14560: PUSH
14561: LD_INT 3
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 1
14570: NEG
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14597: LD_ADDR_VAR 0 12
14601: PUSH
14602: LD_INT 0
14604: PUSH
14605: LD_INT 0
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 0
14614: PUSH
14615: LD_INT 1
14617: NEG
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: LD_INT 0
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 1
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 0
14645: PUSH
14646: LD_INT 1
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 1
14655: NEG
14656: PUSH
14657: LD_INT 0
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 1
14666: NEG
14667: PUSH
14668: LD_INT 1
14670: NEG
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 1
14678: PUSH
14679: LD_INT 1
14681: NEG
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: LD_INT 0
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 1
14709: NEG
14710: PUSH
14711: LD_INT 1
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 2
14720: NEG
14721: PUSH
14722: LD_INT 0
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 2
14731: NEG
14732: PUSH
14733: LD_INT 1
14735: NEG
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 2
14743: NEG
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 3
14754: NEG
14755: PUSH
14756: LD_INT 0
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 3
14765: NEG
14766: PUSH
14767: LD_INT 1
14769: NEG
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14793: LD_ADDR_VAR 0 13
14797: PUSH
14798: LD_INT 0
14800: PUSH
14801: LD_INT 0
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 0
14810: PUSH
14811: LD_INT 1
14813: NEG
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 1
14821: PUSH
14822: LD_INT 0
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: LD_INT 1
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 0
14841: PUSH
14842: LD_INT 1
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 1
14851: NEG
14852: PUSH
14853: LD_INT 0
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 1
14862: NEG
14863: PUSH
14864: LD_INT 1
14866: NEG
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 1
14874: NEG
14875: PUSH
14876: LD_INT 2
14878: NEG
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 2
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 2
14896: PUSH
14897: LD_INT 2
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 2
14916: NEG
14917: PUSH
14918: LD_INT 1
14920: NEG
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 2
14928: NEG
14929: PUSH
14930: LD_INT 2
14932: NEG
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 2
14940: NEG
14941: PUSH
14942: LD_INT 3
14944: NEG
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 3
14952: NEG
14953: PUSH
14954: LD_INT 2
14956: NEG
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 3
14964: NEG
14965: PUSH
14966: LD_INT 3
14968: NEG
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14992: LD_ADDR_VAR 0 14
14996: PUSH
14997: LD_INT 0
14999: PUSH
15000: LD_INT 0
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 0
15009: PUSH
15010: LD_INT 1
15012: NEG
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: LD_INT 0
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 0
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 1
15050: NEG
15051: PUSH
15052: LD_INT 0
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 1
15061: NEG
15062: PUSH
15063: LD_INT 1
15065: NEG
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 1
15073: NEG
15074: PUSH
15075: LD_INT 2
15077: NEG
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 0
15085: PUSH
15086: LD_INT 2
15088: NEG
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: LD_INT 1
15099: NEG
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 1
15107: PUSH
15108: LD_INT 2
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 0
15117: PUSH
15118: LD_INT 2
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 1
15127: NEG
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 1
15138: NEG
15139: PUSH
15140: LD_INT 3
15142: NEG
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 0
15150: PUSH
15151: LD_INT 3
15153: NEG
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 1
15161: PUSH
15162: LD_INT 2
15164: NEG
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15188: LD_ADDR_VAR 0 15
15192: PUSH
15193: LD_INT 0
15195: PUSH
15196: LD_INT 0
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 0
15205: PUSH
15206: LD_INT 1
15208: NEG
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: LD_INT 0
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 1
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 0
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 1
15246: NEG
15247: PUSH
15248: LD_INT 0
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 1
15257: NEG
15258: PUSH
15259: LD_INT 1
15261: NEG
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: LD_INT 1
15272: NEG
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 0
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 1
15300: NEG
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 2
15311: NEG
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 2
15322: NEG
15323: PUSH
15324: LD_INT 1
15326: NEG
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 2
15334: PUSH
15335: LD_INT 1
15337: NEG
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 3
15355: PUSH
15356: LD_INT 1
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15381: LD_ADDR_VAR 0 16
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 0
15398: PUSH
15399: LD_INT 1
15401: NEG
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 1
15409: PUSH
15410: LD_INT 0
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 1
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 0
15429: PUSH
15430: LD_INT 1
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 1
15439: NEG
15440: PUSH
15441: LD_INT 0
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 1
15450: NEG
15451: PUSH
15452: LD_INT 1
15454: NEG
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 1
15462: NEG
15463: PUSH
15464: LD_INT 2
15466: NEG
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 2
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: LD_INT 2
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: LD_INT 2
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 2
15504: NEG
15505: PUSH
15506: LD_INT 1
15508: NEG
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 2
15516: NEG
15517: PUSH
15518: LD_INT 2
15520: NEG
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 3
15528: PUSH
15529: LD_INT 2
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: LD_INT 3
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 2
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15574: LD_ADDR_VAR 0 17
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 0
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 0
15591: PUSH
15592: LD_INT 1
15594: NEG
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 0
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 0
15622: PUSH
15623: LD_INT 1
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 1
15632: NEG
15633: PUSH
15634: LD_INT 0
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 1
15643: NEG
15644: PUSH
15645: LD_INT 1
15647: NEG
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 1
15655: NEG
15656: PUSH
15657: LD_INT 2
15659: NEG
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 0
15667: PUSH
15668: LD_INT 2
15670: NEG
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: LD_INT 1
15681: NEG
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 2
15689: PUSH
15690: LD_INT 0
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: LD_INT 2
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 0
15729: PUSH
15730: LD_INT 2
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 1
15739: NEG
15740: PUSH
15741: LD_INT 1
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 2
15750: NEG
15751: PUSH
15752: LD_INT 0
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 2
15761: NEG
15762: PUSH
15763: LD_INT 1
15765: NEG
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 2
15773: NEG
15774: PUSH
15775: LD_INT 2
15777: NEG
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15804: LD_ADDR_VAR 0 18
15808: PUSH
15809: LD_INT 0
15811: PUSH
15812: LD_INT 0
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 0
15821: PUSH
15822: LD_INT 1
15824: NEG
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: LD_INT 0
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 1
15862: NEG
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 1
15873: NEG
15874: PUSH
15875: LD_INT 1
15877: NEG
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 1
15885: NEG
15886: PUSH
15887: LD_INT 2
15889: NEG
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 0
15897: PUSH
15898: LD_INT 2
15900: NEG
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 1
15908: PUSH
15909: LD_INT 1
15911: NEG
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 2
15919: PUSH
15920: LD_INT 0
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 2
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: LD_INT 2
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 0
15959: PUSH
15960: LD_INT 2
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 1
15969: NEG
15970: PUSH
15971: LD_INT 1
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 2
15980: NEG
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 2
15991: NEG
15992: PUSH
15993: LD_INT 1
15995: NEG
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 2
16003: NEG
16004: PUSH
16005: LD_INT 2
16007: NEG
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16034: LD_ADDR_VAR 0 19
16038: PUSH
16039: LD_INT 0
16041: PUSH
16042: LD_INT 0
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: LD_INT 1
16054: NEG
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: LD_INT 0
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: LD_INT 1
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: LD_INT 1
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 1
16092: NEG
16093: PUSH
16094: LD_INT 0
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 1
16103: NEG
16104: PUSH
16105: LD_INT 1
16107: NEG
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 1
16115: NEG
16116: PUSH
16117: LD_INT 2
16119: NEG
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 0
16127: PUSH
16128: LD_INT 2
16130: NEG
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: LD_INT 1
16141: NEG
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: LD_INT 1
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 2
16169: PUSH
16170: LD_INT 2
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: LD_INT 2
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 0
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 1
16199: NEG
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 2
16210: NEG
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 2
16221: NEG
16222: PUSH
16223: LD_INT 1
16225: NEG
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 2
16233: NEG
16234: PUSH
16235: LD_INT 2
16237: NEG
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16264: LD_ADDR_VAR 0 20
16268: PUSH
16269: LD_INT 0
16271: PUSH
16272: LD_INT 0
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 0
16281: PUSH
16282: LD_INT 1
16284: NEG
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 1
16292: PUSH
16293: LD_INT 0
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 1
16322: NEG
16323: PUSH
16324: LD_INT 0
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 1
16333: NEG
16334: PUSH
16335: LD_INT 1
16337: NEG
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 1
16345: NEG
16346: PUSH
16347: LD_INT 2
16349: NEG
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: LD_INT 2
16360: NEG
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 1
16368: PUSH
16369: LD_INT 1
16371: NEG
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 2
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: LD_INT 1
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: NEG
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: NEG
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 2
16451: NEG
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 2
16463: NEG
16464: PUSH
16465: LD_INT 2
16467: NEG
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16494: LD_ADDR_VAR 0 21
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: LD_INT 0
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 0
16511: PUSH
16512: LD_INT 1
16514: NEG
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: LD_INT 1
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: LD_INT 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 1
16552: NEG
16553: PUSH
16554: LD_INT 0
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: NEG
16564: PUSH
16565: LD_INT 1
16567: NEG
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 1
16575: NEG
16576: PUSH
16577: LD_INT 2
16579: NEG
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: LD_INT 2
16590: NEG
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 1
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: LD_INT 2
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 0
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: NEG
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 2
16670: NEG
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 2
16681: NEG
16682: PUSH
16683: LD_INT 1
16685: NEG
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: NEG
16694: PUSH
16695: LD_INT 2
16697: NEG
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16724: LD_ADDR_VAR 0 22
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 0
16741: PUSH
16742: LD_INT 1
16744: NEG
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: LD_INT 1
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 0
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 1
16782: NEG
16783: PUSH
16784: LD_INT 0
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 1
16793: NEG
16794: PUSH
16795: LD_INT 1
16797: NEG
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: NEG
16806: PUSH
16807: LD_INT 2
16809: NEG
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 0
16817: PUSH
16818: LD_INT 2
16820: NEG
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: LD_INT 1
16831: NEG
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: LD_INT 0
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 1
16889: NEG
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 2
16900: NEG
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 2
16911: NEG
16912: PUSH
16913: LD_INT 1
16915: NEG
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 2
16923: NEG
16924: PUSH
16925: LD_INT 2
16927: NEG
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16954: LD_ADDR_VAR 0 23
16958: PUSH
16959: LD_INT 0
16961: PUSH
16962: LD_INT 0
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: LD_INT 1
16974: NEG
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: LD_INT 0
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: NEG
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 1
17023: NEG
17024: PUSH
17025: LD_INT 1
17027: NEG
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 1
17035: NEG
17036: PUSH
17037: LD_INT 2
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: LD_INT 2
17050: NEG
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: LD_INT 1
17061: NEG
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 1
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 1
17119: NEG
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 2
17130: NEG
17131: PUSH
17132: LD_INT 0
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 2
17141: NEG
17142: PUSH
17143: LD_INT 1
17145: NEG
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 2
17153: NEG
17154: PUSH
17155: LD_INT 2
17157: NEG
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 2
17165: NEG
17166: PUSH
17167: LD_INT 3
17169: NEG
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: LD_INT 3
17181: NEG
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: LD_INT 2
17192: NEG
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: LD_INT 1
17203: NEG
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17234: LD_ADDR_VAR 0 24
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: LD_INT 0
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: LD_INT 1
17254: NEG
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: LD_INT 0
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 1
17292: NEG
17293: PUSH
17294: LD_INT 0
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 1
17303: NEG
17304: PUSH
17305: LD_INT 1
17307: NEG
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 1
17315: NEG
17316: PUSH
17317: LD_INT 2
17319: NEG
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: LD_INT 2
17330: NEG
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 1
17338: PUSH
17339: LD_INT 1
17341: NEG
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 1
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: LD_INT 2
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: NEG
17400: PUSH
17401: LD_INT 1
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 2
17410: NEG
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 2
17421: NEG
17422: PUSH
17423: LD_INT 1
17425: NEG
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 2
17433: NEG
17434: PUSH
17435: LD_INT 2
17437: NEG
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: LD_INT 2
17448: NEG
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 2
17456: PUSH
17457: LD_INT 1
17459: NEG
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 3
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17510: LD_ADDR_VAR 0 25
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 0
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 1
17568: NEG
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: NEG
17580: PUSH
17581: LD_INT 1
17583: NEG
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 1
17591: NEG
17592: PUSH
17593: LD_INT 2
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: LD_INT 2
17606: NEG
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: LD_INT 1
17617: NEG
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 2
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 2
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 2
17645: PUSH
17646: LD_INT 2
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: LD_INT 2
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 1
17675: NEG
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 2
17686: NEG
17687: PUSH
17688: LD_INT 0
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 2
17697: NEG
17698: PUSH
17699: LD_INT 1
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 2
17709: NEG
17710: PUSH
17711: LD_INT 2
17713: NEG
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 3
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 3
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 2
17741: PUSH
17742: LD_INT 3
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: LD_INT 3
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17784: LD_ADDR_VAR 0 26
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: LD_INT 0
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 1
17804: NEG
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: NEG
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: NEG
17854: PUSH
17855: LD_INT 1
17857: NEG
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: PUSH
17867: LD_INT 2
17869: NEG
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: LD_INT 2
17880: NEG
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: LD_INT 1
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: NEG
17950: PUSH
17951: LD_INT 1
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 2
17960: NEG
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 2
17971: NEG
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: NEG
17984: PUSH
17985: LD_INT 2
17987: NEG
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 2
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: NEG
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18060: LD_ADDR_VAR 0 27
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: LD_INT 1
18080: NEG
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 0
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: LD_INT 2
18156: NEG
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: LD_INT 1
18167: NEG
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 2
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: LD_INT 2
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 2
18236: NEG
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 2
18247: NEG
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 2
18259: NEG
18260: PUSH
18261: LD_INT 2
18263: NEG
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: NEG
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: NEG
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 3
18293: NEG
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 3
18305: NEG
18306: PUSH
18307: LD_INT 2
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18340: LD_ADDR_VAR 0 28
18344: PUSH
18345: LD_INT 0
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: LD_INT 1
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: NEG
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: LD_INT 2
18425: NEG
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: LD_INT 2
18436: NEG
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 2
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 2
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 2
18475: PUSH
18476: LD_INT 2
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: LD_INT 1
18531: NEG
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 2
18539: NEG
18540: PUSH
18541: LD_INT 2
18543: NEG
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 2
18551: NEG
18552: PUSH
18553: LD_INT 3
18555: NEG
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 3
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 3
18575: NEG
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 3
18587: NEG
18588: PUSH
18589: LD_INT 2
18591: NEG
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18622: LD_ADDR_VAR 0 29
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: LD_INT 1
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: LD_INT 2
18707: NEG
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 2
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 2
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: NEG
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: LD_INT 2
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: LD_INT 3
18816: NEG
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 3
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: LD_INT 3
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 3
18866: NEG
18867: PUSH
18868: LD_INT 2
18870: NEG
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18901: LD_ADDR_VAR 0 30
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: LD_INT 1
18921: NEG
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 2
18986: NEG
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: LD_INT 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 1
19090: NEG
19091: PUSH
19092: LD_INT 3
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: LD_INT 2
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 3
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 3
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 2
19133: NEG
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 3
19144: NEG
19145: PUSH
19146: LD_INT 1
19148: NEG
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19179: LD_ADDR_VAR 0 31
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 2
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 0
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 1
19333: NEG
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: LD_INT 1
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 3
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 3
19422: NEG
19423: PUSH
19424: LD_INT 2
19426: NEG
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19457: LD_ADDR_VAR 0 32
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 2
19623: NEG
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: NEG
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: LD_INT 3
19650: NEG
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 2
19689: NEG
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 3
19700: NEG
19701: PUSH
19702: LD_INT 1
19704: NEG
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19735: LD_ADDR_VAR 0 33
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: LD_INT 1
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 0
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 1
19793: NEG
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: LD_INT 2
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 2
19890: NEG
19891: PUSH
19892: LD_INT 0
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: NEG
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: LD_INT 2
19917: NEG
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: LD_INT 3
19929: NEG
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 3
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: NEG
19969: PUSH
19970: LD_INT 2
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 3
19979: NEG
19980: PUSH
19981: LD_INT 2
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20014: LD_ADDR_VAR 0 34
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 1
20095: NEG
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 2
20170: NEG
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 2
20181: NEG
20182: PUSH
20183: LD_INT 1
20185: NEG
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 2
20193: NEG
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: LD_INT 3
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 3
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: LD_INT 3
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 3
20259: NEG
20260: PUSH
20261: LD_INT 1
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20294: LD_ADDR_VAR 0 35
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: LD_INT 1
20367: NEG
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 2
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: NEG
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20406: LD_ADDR_VAR 0 36
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: LD_INT 1
20426: NEG
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: LD_INT 0
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: LD_INT 1
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20518: LD_ADDR_VAR 0 37
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: LD_INT 1
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: NEG
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 1
20591: NEG
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: LD_INT 1
20602: NEG
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20630: LD_ADDR_VAR 0 38
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 1
20688: NEG
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20742: LD_ADDR_VAR 0 39
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: LD_INT 1
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: NEG
20824: PUSH
20825: LD_INT 2
20827: NEG
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20854: LD_ADDR_VAR 0 40
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: NEG
20924: PUSH
20925: LD_INT 1
20927: NEG
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20966: LD_ADDR_VAR 0 41
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: LD_INT 0
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 0
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: NEG
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: LD_INT 2
21051: NEG
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 2
21132: NEG
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 2
21144: NEG
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 2
21156: NEG
21157: PUSH
21158: LD_INT 3
21160: NEG
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 3
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 3
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 3
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: LD_INT 3
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: NEG
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 3
21240: NEG
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 3
21251: NEG
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 3
21263: NEG
21264: PUSH
21265: LD_INT 2
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 3
21275: NEG
21276: PUSH
21277: LD_INT 3
21279: NEG
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21316: LD_ADDR_VAR 0 42
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: LD_INT 2
21401: NEG
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 2
21412: NEG
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 2
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 2
21482: NEG
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 2
21494: NEG
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: NEG
21507: PUSH
21508: LD_INT 3
21510: NEG
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 3
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: LD_INT 3
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: LD_INT 2
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 3
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 3
21562: PUSH
21563: LD_INT 3
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 0
21592: PUSH
21593: LD_INT 3
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 3
21613: NEG
21614: PUSH
21615: LD_INT 2
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: NEG
21626: PUSH
21627: LD_INT 3
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21666: LD_ADDR_VAR 0 43
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: NEG
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 2
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 2
21762: NEG
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: NEG
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: LD_INT 3
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: LD_INT 3
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 3
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: LD_INT 3
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 2
21951: NEG
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 3
21962: NEG
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 3
21973: NEG
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22014: LD_ADDR_VAR 0 44
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: LD_INT 2
22099: NEG
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 2
22169: NEG
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: NEG
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: LD_INT 2
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: LD_INT 3
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 3
22247: PUSH
22248: LD_INT 2
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 3
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: NEG
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 3
22288: NEG
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 3
22299: NEG
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 3
22311: NEG
22312: PUSH
22313: LD_INT 2
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 3
22323: NEG
22324: PUSH
22325: LD_INT 3
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22364: LD_ADDR_VAR 0 45
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 0
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 0
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: LD_INT 0
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: LD_INT 2
22460: NEG
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 2
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 2
22530: NEG
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 2
22542: NEG
22543: PUSH
22544: LD_INT 2
22546: NEG
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: LD_INT 3
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: LD_INT 3
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: LD_INT 3
22581: NEG
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: LD_INT 2
22592: NEG
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 3
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 3
22610: PUSH
22611: LD_INT 3
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: LD_INT 3
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: LD_INT 3
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 3
22661: NEG
22662: PUSH
22663: LD_INT 2
22665: NEG
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 3
22673: NEG
22674: PUSH
22675: LD_INT 3
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22714: LD_ADDR_VAR 0 46
22718: PUSH
22719: LD_INT 0
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: LD_INT 1
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: LD_INT 1
22787: NEG
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: LD_INT 2
22799: NEG
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 0
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: LD_INT 0
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 2
22891: NEG
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: NEG
22904: PUSH
22905: LD_INT 3
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: LD_INT 3
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 2
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 3
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 3
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 2
22999: NEG
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 3
23010: NEG
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 3
23021: NEG
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23062: LD_ADDR_VAR 0 47
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: NEG
23178: PUSH
23179: LD_INT 1
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: NEG
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23213: LD_ADDR_VAR 0 48
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23360: LD_ADDR_VAR 0 49
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 2
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: LD_INT 1
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23504: LD_ADDR_VAR 0 50
23508: PUSH
23509: LD_INT 0
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: LD_INT 1
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 2
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23648: LD_ADDR_VAR 0 51
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: PUSH
23730: LD_INT 2
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 2
23760: NEG
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: NEG
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23795: LD_ADDR_VAR 0 52
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 2
23899: NEG
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 2
23922: NEG
23923: PUSH
23924: LD_INT 2
23926: NEG
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23946: LD_ADDR_VAR 0 53
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: LD_INT 2
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 2
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 1
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 2
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: LD_INT 2
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 2
24145: NEG
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24176: LD_ADDR_VAR 0 54
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 0
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 2
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24406: LD_ADDR_VAR 0 55
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: LD_INT 2
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 2
24502: NEG
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: LD_INT 2
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: NEG
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 2
24605: NEG
24606: PUSH
24607: LD_INT 2
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24636: LD_ADDR_VAR 0 56
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 2
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 2
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 2
24835: NEG
24836: PUSH
24837: LD_INT 2
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24866: LD_ADDR_VAR 0 57
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: LD_INT 2
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 2
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 2
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: LD_INT 2
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 0
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: LD_INT 2
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25096: LD_ADDR_VAR 0 58
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 0
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: NEG
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: LD_INT 1
25203: NEG
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: NEG
25296: PUSH
25297: LD_INT 2
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25326: LD_ADDR_VAR 0 59
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 1
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25414: LD_ADDR_VAR 0 60
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25502: LD_ADDR_VAR 0 61
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25590: LD_ADDR_VAR 0 62
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25678: LD_ADDR_VAR 0 63
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 1
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25766: LD_ADDR_VAR 0 64
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 1
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// end ; 1 :
25854: GO 31751
25856: LD_INT 1
25858: DOUBLE
25859: EQUAL
25860: IFTRUE 25864
25862: GO 28487
25864: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25865: LD_ADDR_VAR 0 11
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: LD_INT 3
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 3
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25909: LD_ADDR_VAR 0 12
25913: PUSH
25914: LD_INT 2
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: LIST
25949: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25950: LD_ADDR_VAR 0 13
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: LD_INT 3
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25990: LD_ADDR_VAR 0 14
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 3
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: LD_INT 3
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26031: LD_ADDR_VAR 0 15
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 3
26049: NEG
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26075: LD_ADDR_VAR 0 16
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: LD_INT 3
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 3
26094: NEG
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 3
26106: NEG
26107: PUSH
26108: LD_INT 3
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26121: LD_ADDR_VAR 0 17
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: LD_INT 3
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 3
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 2
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26165: LD_ADDR_VAR 0 18
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26206: LD_ADDR_VAR 0 19
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: LD_INT 3
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: LD_INT 3
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26246: LD_ADDR_VAR 0 20
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 3
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 3
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26287: LD_ADDR_VAR 0 21
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 3
26305: NEG
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 3
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: LIST
26330: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26331: LD_ADDR_VAR 0 22
26335: PUSH
26336: LD_INT 2
26338: NEG
26339: PUSH
26340: LD_INT 3
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 3
26350: NEG
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 3
26362: NEG
26363: PUSH
26364: LD_INT 3
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26377: LD_ADDR_VAR 0 23
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 3
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 4
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 3
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26421: LD_ADDR_VAR 0 24
26425: PUSH
26426: LD_INT 3
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 3
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 4
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26462: LD_ADDR_VAR 0 25
26466: PUSH
26467: LD_INT 3
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 4
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 3
26489: PUSH
26490: LD_INT 4
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: LIST
26501: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26502: LD_ADDR_VAR 0 26
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 4
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26543: LD_ADDR_VAR 0 27
26547: PUSH
26548: LD_INT 3
26550: NEG
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 4
26572: NEG
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26587: LD_ADDR_VAR 0 28
26591: PUSH
26592: LD_INT 3
26594: NEG
26595: PUSH
26596: LD_INT 3
26598: NEG
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 3
26606: NEG
26607: PUSH
26608: LD_INT 4
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 4
26618: NEG
26619: PUSH
26620: LD_INT 3
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26633: LD_ADDR_VAR 0 29
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: LD_INT 3
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: LD_INT 2
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 4
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: LD_INT 4
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 3
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 5
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 5
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 4
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: LD_INT 6
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 6
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: LD_INT 5
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26788: LD_ADDR_VAR 0 30
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 4
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 4
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 4
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 5
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 5
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 5
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 6
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 6
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26931: LD_ADDR_VAR 0 31
26935: PUSH
26936: LD_INT 3
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 3
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 4
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 4
26978: PUSH
26979: LD_INT 4
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 3
26988: PUSH
26989: LD_INT 4
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 5
26998: PUSH
26999: LD_INT 4
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 5
27008: PUSH
27009: LD_INT 5
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 4
27018: PUSH
27019: LD_INT 5
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 6
27028: PUSH
27029: LD_INT 5
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 6
27038: PUSH
27039: LD_INT 6
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 5
27048: PUSH
27049: LD_INT 6
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27070: LD_ADDR_VAR 0 32
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 3
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 4
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 4
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 3
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: LD_INT 5
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: LD_INT 5
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 4
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: LD_INT 6
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: LD_INT 6
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: LD_INT 5
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27213: LD_ADDR_VAR 0 33
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 3
27231: NEG
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 3
27242: NEG
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 4
27265: NEG
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 4
27276: NEG
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 4
27288: NEG
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 5
27299: NEG
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 5
27310: NEG
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 5
27322: NEG
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 6
27333: NEG
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 6
27344: NEG
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27368: LD_ADDR_VAR 0 34
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 3
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 3
27387: NEG
27388: PUSH
27389: LD_INT 2
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 3
27399: NEG
27400: PUSH
27401: LD_INT 3
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 3
27411: NEG
27412: PUSH
27413: LD_INT 4
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 4
27423: NEG
27424: PUSH
27425: LD_INT 3
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 4
27435: NEG
27436: PUSH
27437: LD_INT 4
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 4
27447: NEG
27448: PUSH
27449: LD_INT 5
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 5
27459: NEG
27460: PUSH
27461: LD_INT 4
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 5
27471: NEG
27472: PUSH
27473: LD_INT 5
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 5
27483: NEG
27484: PUSH
27485: LD_INT 6
27487: NEG
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 6
27495: NEG
27496: PUSH
27497: LD_INT 5
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 6
27507: NEG
27508: PUSH
27509: LD_INT 6
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27531: LD_ADDR_VAR 0 41
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 3
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27575: LD_ADDR_VAR 0 42
27579: PUSH
27580: LD_INT 2
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 3
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27616: LD_ADDR_VAR 0 43
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 3
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: LD_INT 3
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27656: LD_ADDR_VAR 0 44
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 3
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27697: LD_ADDR_VAR 0 45
27701: PUSH
27702: LD_INT 2
27704: NEG
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 3
27726: NEG
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27741: LD_ADDR_VAR 0 46
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: NEG
27761: PUSH
27762: LD_INT 3
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 3
27772: NEG
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27787: LD_ADDR_VAR 0 47
27791: PUSH
27792: LD_INT 2
27794: NEG
27795: PUSH
27796: LD_INT 3
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: LD_INT 3
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27820: LD_ADDR_VAR 0 48
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 2
27830: NEG
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 2
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27851: LD_ADDR_VAR 0 49
27855: PUSH
27856: LD_INT 3
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 3
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27880: LD_ADDR_VAR 0 50
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27909: LD_ADDR_VAR 0 51
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27940: LD_ADDR_VAR 0 52
27944: PUSH
27945: LD_INT 3
27947: NEG
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27973: LD_ADDR_VAR 0 53
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 3
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: LD_INT 3
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: LIST
28016: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28017: LD_ADDR_VAR 0 54
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 3
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28058: LD_ADDR_VAR 0 55
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 3
28075: PUSH
28076: LD_INT 3
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 3
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28098: LD_ADDR_VAR 0 56
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28139: LD_ADDR_VAR 0 57
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 3
28157: NEG
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 3
28168: NEG
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28183: LD_ADDR_VAR 0 58
28187: PUSH
28188: LD_INT 2
28190: NEG
28191: PUSH
28192: LD_INT 3
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 3
28202: NEG
28203: PUSH
28204: LD_INT 2
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 3
28214: NEG
28215: PUSH
28216: LD_INT 3
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28229: LD_ADDR_VAR 0 59
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28273: LD_ADDR_VAR 0 60
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 2
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28314: LD_ADDR_VAR 0 61
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28354: LD_ADDR_VAR 0 62
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28395: LD_ADDR_VAR 0 63
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: NEG
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 2
28424: NEG
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28439: LD_ADDR_VAR 0 64
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: LD_INT 2
28450: NEG
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: NEG
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: LD_INT 2
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
// end ; 2 :
28485: GO 31751
28487: LD_INT 2
28489: DOUBLE
28490: EQUAL
28491: IFTRUE 28495
28493: GO 31750
28495: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28496: LD_ADDR_VAR 0 29
28500: PUSH
28501: LD_INT 4
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 4
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 5
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 5
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 4
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 3
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 3
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 3
28575: PUSH
28576: LD_INT 2
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 5
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 3
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 4
28616: PUSH
28617: LD_INT 3
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 4
28626: PUSH
28627: LD_INT 4
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: LD_INT 4
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: LD_INT 3
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 4
28666: PUSH
28667: LD_INT 2
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: LD_INT 4
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: LD_INT 4
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: LD_INT 3
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: LD_INT 4
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 5
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: LD_INT 5
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: LD_INT 4
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: LD_INT 3
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: LD_INT 5
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 2
28768: NEG
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 3
28779: NEG
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 3
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 3
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 4
28835: NEG
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 4
28846: NEG
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 4
28858: NEG
28859: PUSH
28860: LD_INT 2
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 4
28881: NEG
28882: PUSH
28883: LD_INT 4
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 4
28893: NEG
28894: PUSH
28895: LD_INT 5
28897: NEG
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 3
28905: NEG
28906: PUSH
28907: LD_INT 4
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 3
28917: NEG
28918: PUSH
28919: LD_INT 3
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 4
28929: NEG
28930: PUSH
28931: LD_INT 3
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 5
28941: NEG
28942: PUSH
28943: LD_INT 4
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 5
28953: NEG
28954: PUSH
28955: LD_INT 5
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 3
28965: NEG
28966: PUSH
28967: LD_INT 5
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 5
28977: NEG
28978: PUSH
28979: LD_INT 3
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29034: LD_ADDR_VAR 0 30
29038: PUSH
29039: LD_INT 4
29041: PUSH
29042: LD_INT 4
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 4
29051: PUSH
29052: LD_INT 3
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 5
29061: PUSH
29062: LD_INT 4
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 5
29071: PUSH
29072: LD_INT 5
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 4
29081: PUSH
29082: LD_INT 5
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: LD_INT 4
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 3
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 5
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: LD_INT 5
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: LD_INT 4
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 4
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 3
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: LD_INT 2
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 2
29203: PUSH
29204: LD_INT 4
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 4
29224: NEG
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 4
29235: NEG
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 3
29247: NEG
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 3
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 4
29269: NEG
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 5
29280: NEG
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 5
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 5
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 3
29326: NEG
29327: PUSH
29328: LD_INT 3
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 3
29338: NEG
29339: PUSH
29340: LD_INT 4
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 2
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 4
29386: NEG
29387: PUSH
29388: LD_INT 3
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 4
29398: NEG
29399: PUSH
29400: LD_INT 4
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 2
29410: NEG
29411: PUSH
29412: LD_INT 4
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 4
29422: NEG
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: LD_INT 4
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 5
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: LD_INT 4
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: LD_INT 3
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: LD_INT 3
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 4
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: LD_INT 5
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 3
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 2
29524: NEG
29525: PUSH
29526: LD_INT 5
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29581: LD_ADDR_VAR 0 31
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 4
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 3
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 4
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: LD_INT 5
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: LD_INT 5
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: LD_INT 4
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 5
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: NEG
29671: PUSH
29672: LD_INT 3
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 3
29681: NEG
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 3
29692: NEG
29693: PUSH
29694: LD_INT 1
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: NEG
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 2
29715: NEG
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 4
29737: NEG
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 4
29748: NEG
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 4
29760: NEG
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 4
29783: NEG
29784: PUSH
29785: LD_INT 4
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 4
29795: NEG
29796: PUSH
29797: LD_INT 5
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: NEG
29808: PUSH
29809: LD_INT 4
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: NEG
29820: PUSH
29821: LD_INT 3
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 4
29831: NEG
29832: PUSH
29833: LD_INT 3
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 5
29843: NEG
29844: PUSH
29845: LD_INT 4
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 5
29855: NEG
29856: PUSH
29857: LD_INT 5
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 3
29867: NEG
29868: PUSH
29869: LD_INT 5
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 5
29879: NEG
29880: PUSH
29881: LD_INT 3
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 3
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 4
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 3
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: LD_INT 2
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: LD_INT 3
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: LD_INT 4
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: LD_INT 2
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: LD_INT 4
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 4
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 5
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 5
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 4
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 3
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: LD_INT 2
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 5
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30131: LD_ADDR_VAR 0 32
30135: PUSH
30136: LD_INT 4
30138: NEG
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 4
30149: NEG
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 4
30183: NEG
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 5
30194: NEG
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 5
30205: NEG
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 5
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 3
30240: NEG
30241: PUSH
30242: LD_INT 3
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 3
30252: NEG
30253: PUSH
30254: LD_INT 4
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: LD_INT 3
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 2
30276: NEG
30277: PUSH
30278: LD_INT 2
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 3
30288: NEG
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 4
30300: NEG
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 4
30312: NEG
30313: PUSH
30314: LD_INT 4
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: NEG
30325: PUSH
30326: LD_INT 4
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 4
30336: NEG
30337: PUSH
30338: LD_INT 2
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: LD_INT 4
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: LD_INT 5
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: LD_INT 4
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 3
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 3
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: LD_INT 4
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 5
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 2
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 5
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 4
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 4
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 2
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 4
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 4
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 4
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 5
30563: PUSH
30564: LD_INT 4
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 5
30573: PUSH
30574: LD_INT 5
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 4
30583: PUSH
30584: LD_INT 5
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: LD_INT 3
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: LD_INT 5
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30678: LD_ADDR_VAR 0 33
30682: PUSH
30683: LD_INT 4
30685: NEG
30686: PUSH
30687: LD_INT 4
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 4
30697: NEG
30698: PUSH
30699: LD_INT 5
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: LD_INT 4
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 3
30721: NEG
30722: PUSH
30723: LD_INT 3
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 4
30733: NEG
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 5
30745: NEG
30746: PUSH
30747: LD_INT 4
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 5
30757: NEG
30758: PUSH
30759: LD_INT 5
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 3
30769: NEG
30770: PUSH
30771: LD_INT 5
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 5
30781: NEG
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 3
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: LD_INT 4
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: LD_INT 3
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 2
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: LD_INT 2
30840: NEG
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: LD_INT 4
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: LD_INT 4
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 4
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 4
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 5
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 5
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 4
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 3
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 5
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: LD_INT 3
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 4
31008: PUSH
31009: LD_INT 3
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 4
31018: PUSH
31019: LD_INT 4
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 3
31028: PUSH
31029: LD_INT 4
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 2
31038: PUSH
31039: LD_INT 3
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 4
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: LD_INT 4
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 4
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 4
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 5
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: LD_INT 5
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: LD_INT 4
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 3
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: LD_INT 5
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 2
31160: NEG
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31216: LD_ADDR_VAR 0 34
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 4
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 5
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 4
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: LD_INT 3
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 4
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: LD_INT 5
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: LD_INT 3
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 5
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 4
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 4
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 3
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 4
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 4
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 4
31428: PUSH
31429: LD_INT 3
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 5
31438: PUSH
31439: LD_INT 4
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 5
31448: PUSH
31449: LD_INT 5
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 4
31458: PUSH
31459: LD_INT 5
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 3
31468: PUSH
31469: LD_INT 4
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: LD_INT 3
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 4
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 4
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 4
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 4
31601: NEG
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 4
31612: NEG
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 3
31624: NEG
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 3
31635: NEG
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 4
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 5
31657: NEG
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 5
31668: NEG
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 5
31680: NEG
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// end ; end ;
31748: GO 31751
31750: POP
// case btype of b_depot , b_warehouse :
31751: LD_VAR 0 1
31755: PUSH
31756: LD_INT 0
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31770
31762: LD_INT 1
31764: DOUBLE
31765: EQUAL
31766: IFTRUE 31770
31768: GO 31971
31770: POP
// case nation of nation_american :
31771: LD_VAR 0 5
31775: PUSH
31776: LD_INT 1
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 31840
31784: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31785: LD_ADDR_VAR 0 9
31789: PUSH
31790: LD_VAR 0 11
31794: PUSH
31795: LD_VAR 0 12
31799: PUSH
31800: LD_VAR 0 13
31804: PUSH
31805: LD_VAR 0 14
31809: PUSH
31810: LD_VAR 0 15
31814: PUSH
31815: LD_VAR 0 16
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: PUSH
31828: LD_VAR 0 4
31832: PUSH
31833: LD_INT 1
31835: PLUS
31836: ARRAY
31837: ST_TO_ADDR
31838: GO 31969
31840: LD_INT 2
31842: DOUBLE
31843: EQUAL
31844: IFTRUE 31848
31846: GO 31904
31848: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31849: LD_ADDR_VAR 0 9
31853: PUSH
31854: LD_VAR 0 17
31858: PUSH
31859: LD_VAR 0 18
31863: PUSH
31864: LD_VAR 0 19
31868: PUSH
31869: LD_VAR 0 20
31873: PUSH
31874: LD_VAR 0 21
31878: PUSH
31879: LD_VAR 0 22
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: PUSH
31892: LD_VAR 0 4
31896: PUSH
31897: LD_INT 1
31899: PLUS
31900: ARRAY
31901: ST_TO_ADDR
31902: GO 31969
31904: LD_INT 3
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31968
31912: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31913: LD_ADDR_VAR 0 9
31917: PUSH
31918: LD_VAR 0 23
31922: PUSH
31923: LD_VAR 0 24
31927: PUSH
31928: LD_VAR 0 25
31932: PUSH
31933: LD_VAR 0 26
31937: PUSH
31938: LD_VAR 0 27
31942: PUSH
31943: LD_VAR 0 28
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: LD_VAR 0 4
31960: PUSH
31961: LD_INT 1
31963: PLUS
31964: ARRAY
31965: ST_TO_ADDR
31966: GO 31969
31968: POP
31969: GO 32524
31971: LD_INT 2
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31985
31977: LD_INT 3
31979: DOUBLE
31980: EQUAL
31981: IFTRUE 31985
31983: GO 32041
31985: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31986: LD_ADDR_VAR 0 9
31990: PUSH
31991: LD_VAR 0 29
31995: PUSH
31996: LD_VAR 0 30
32000: PUSH
32001: LD_VAR 0 31
32005: PUSH
32006: LD_VAR 0 32
32010: PUSH
32011: LD_VAR 0 33
32015: PUSH
32016: LD_VAR 0 34
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: PUSH
32029: LD_VAR 0 4
32033: PUSH
32034: LD_INT 1
32036: PLUS
32037: ARRAY
32038: ST_TO_ADDR
32039: GO 32524
32041: LD_INT 16
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32103
32047: LD_INT 17
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32103
32053: LD_INT 18
32055: DOUBLE
32056: EQUAL
32057: IFTRUE 32103
32059: LD_INT 19
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32103
32065: LD_INT 22
32067: DOUBLE
32068: EQUAL
32069: IFTRUE 32103
32071: LD_INT 20
32073: DOUBLE
32074: EQUAL
32075: IFTRUE 32103
32077: LD_INT 21
32079: DOUBLE
32080: EQUAL
32081: IFTRUE 32103
32083: LD_INT 23
32085: DOUBLE
32086: EQUAL
32087: IFTRUE 32103
32089: LD_INT 24
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32103
32095: LD_INT 25
32097: DOUBLE
32098: EQUAL
32099: IFTRUE 32103
32101: GO 32159
32103: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32104: LD_ADDR_VAR 0 9
32108: PUSH
32109: LD_VAR 0 35
32113: PUSH
32114: LD_VAR 0 36
32118: PUSH
32119: LD_VAR 0 37
32123: PUSH
32124: LD_VAR 0 38
32128: PUSH
32129: LD_VAR 0 39
32133: PUSH
32134: LD_VAR 0 40
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: PUSH
32147: LD_VAR 0 4
32151: PUSH
32152: LD_INT 1
32154: PLUS
32155: ARRAY
32156: ST_TO_ADDR
32157: GO 32524
32159: LD_INT 6
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32215
32165: LD_INT 7
32167: DOUBLE
32168: EQUAL
32169: IFTRUE 32215
32171: LD_INT 8
32173: DOUBLE
32174: EQUAL
32175: IFTRUE 32215
32177: LD_INT 13
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32215
32183: LD_INT 12
32185: DOUBLE
32186: EQUAL
32187: IFTRUE 32215
32189: LD_INT 15
32191: DOUBLE
32192: EQUAL
32193: IFTRUE 32215
32195: LD_INT 11
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32215
32201: LD_INT 14
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32215
32207: LD_INT 10
32209: DOUBLE
32210: EQUAL
32211: IFTRUE 32215
32213: GO 32271
32215: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32216: LD_ADDR_VAR 0 9
32220: PUSH
32221: LD_VAR 0 41
32225: PUSH
32226: LD_VAR 0 42
32230: PUSH
32231: LD_VAR 0 43
32235: PUSH
32236: LD_VAR 0 44
32240: PUSH
32241: LD_VAR 0 45
32245: PUSH
32246: LD_VAR 0 46
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: PUSH
32259: LD_VAR 0 4
32263: PUSH
32264: LD_INT 1
32266: PLUS
32267: ARRAY
32268: ST_TO_ADDR
32269: GO 32524
32271: LD_INT 36
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 32335
32279: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32280: LD_ADDR_VAR 0 9
32284: PUSH
32285: LD_VAR 0 47
32289: PUSH
32290: LD_VAR 0 48
32294: PUSH
32295: LD_VAR 0 49
32299: PUSH
32300: LD_VAR 0 50
32304: PUSH
32305: LD_VAR 0 51
32309: PUSH
32310: LD_VAR 0 52
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: PUSH
32323: LD_VAR 0 4
32327: PUSH
32328: LD_INT 1
32330: PLUS
32331: ARRAY
32332: ST_TO_ADDR
32333: GO 32524
32335: LD_INT 4
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32361
32341: LD_INT 5
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32361
32347: LD_INT 34
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32361
32353: LD_INT 37
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32417
32361: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32362: LD_ADDR_VAR 0 9
32366: PUSH
32367: LD_VAR 0 53
32371: PUSH
32372: LD_VAR 0 54
32376: PUSH
32377: LD_VAR 0 55
32381: PUSH
32382: LD_VAR 0 56
32386: PUSH
32387: LD_VAR 0 57
32391: PUSH
32392: LD_VAR 0 58
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: PUSH
32405: LD_VAR 0 4
32409: PUSH
32410: LD_INT 1
32412: PLUS
32413: ARRAY
32414: ST_TO_ADDR
32415: GO 32524
32417: LD_INT 31
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32467
32423: LD_INT 32
32425: DOUBLE
32426: EQUAL
32427: IFTRUE 32467
32429: LD_INT 33
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32467
32435: LD_INT 27
32437: DOUBLE
32438: EQUAL
32439: IFTRUE 32467
32441: LD_INT 26
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32467
32447: LD_INT 28
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32467
32453: LD_INT 29
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32467
32459: LD_INT 30
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32523
32467: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32468: LD_ADDR_VAR 0 9
32472: PUSH
32473: LD_VAR 0 59
32477: PUSH
32478: LD_VAR 0 60
32482: PUSH
32483: LD_VAR 0 61
32487: PUSH
32488: LD_VAR 0 62
32492: PUSH
32493: LD_VAR 0 63
32497: PUSH
32498: LD_VAR 0 64
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: PUSH
32511: LD_VAR 0 4
32515: PUSH
32516: LD_INT 1
32518: PLUS
32519: ARRAY
32520: ST_TO_ADDR
32521: GO 32524
32523: POP
// temp_list2 = [ ] ;
32524: LD_ADDR_VAR 0 10
32528: PUSH
32529: EMPTY
32530: ST_TO_ADDR
// for i in temp_list do
32531: LD_ADDR_VAR 0 8
32535: PUSH
32536: LD_VAR 0 9
32540: PUSH
32541: FOR_IN
32542: IFFALSE 32594
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32544: LD_ADDR_VAR 0 10
32548: PUSH
32549: LD_VAR 0 10
32553: PUSH
32554: LD_VAR 0 8
32558: PUSH
32559: LD_INT 1
32561: ARRAY
32562: PUSH
32563: LD_VAR 0 2
32567: PLUS
32568: PUSH
32569: LD_VAR 0 8
32573: PUSH
32574: LD_INT 2
32576: ARRAY
32577: PUSH
32578: LD_VAR 0 3
32582: PLUS
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: ADD
32591: ST_TO_ADDR
32592: GO 32541
32594: POP
32595: POP
// result = temp_list2 ;
32596: LD_ADDR_VAR 0 7
32600: PUSH
32601: LD_VAR 0 10
32605: ST_TO_ADDR
// end ;
32606: LD_VAR 0 7
32610: RET
// export function EnemyInRange ( unit , dist ) ; begin
32611: LD_INT 0
32613: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32614: LD_ADDR_VAR 0 3
32618: PUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: CALL_OW 255
32628: PPUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 250
32638: PPUSH
32639: LD_VAR 0 1
32643: PPUSH
32644: CALL_OW 251
32648: PPUSH
32649: LD_VAR 0 2
32653: PPUSH
32654: CALL 5984 0 4
32658: PUSH
32659: LD_INT 4
32661: ARRAY
32662: ST_TO_ADDR
// end ;
32663: LD_VAR 0 3
32667: RET
// export function PlayerSeeMe ( unit ) ; begin
32668: LD_INT 0
32670: PPUSH
// result := See ( your_side , unit ) ;
32671: LD_ADDR_VAR 0 2
32675: PUSH
32676: LD_OWVAR 2
32680: PPUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 292
32690: ST_TO_ADDR
// end ;
32691: LD_VAR 0 2
32695: RET
// export function ReverseDir ( unit ) ; begin
32696: LD_INT 0
32698: PPUSH
// if not unit then
32699: LD_VAR 0 1
32703: NOT
32704: IFFALSE 32708
// exit ;
32706: GO 32731
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32708: LD_ADDR_VAR 0 2
32712: PUSH
32713: LD_VAR 0 1
32717: PPUSH
32718: CALL_OW 254
32722: PUSH
32723: LD_INT 3
32725: PLUS
32726: PUSH
32727: LD_INT 6
32729: MOD
32730: ST_TO_ADDR
// end ;
32731: LD_VAR 0 2
32735: RET
// export function ReverseArray ( array ) ; var i ; begin
32736: LD_INT 0
32738: PPUSH
32739: PPUSH
// if not array then
32740: LD_VAR 0 1
32744: NOT
32745: IFFALSE 32749
// exit ;
32747: GO 32804
// result := [ ] ;
32749: LD_ADDR_VAR 0 2
32753: PUSH
32754: EMPTY
32755: ST_TO_ADDR
// for i := array downto 1 do
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: DOUBLE
32762: LD_VAR 0 1
32766: INC
32767: ST_TO_ADDR
32768: LD_INT 1
32770: PUSH
32771: FOR_DOWNTO
32772: IFFALSE 32802
// result := Join ( result , array [ i ] ) ;
32774: LD_ADDR_VAR 0 2
32778: PUSH
32779: LD_VAR 0 2
32783: PPUSH
32784: LD_VAR 0 1
32788: PUSH
32789: LD_VAR 0 3
32793: ARRAY
32794: PPUSH
32795: CALL 37447 0 2
32799: ST_TO_ADDR
32800: GO 32771
32802: POP
32803: POP
// end ;
32804: LD_VAR 0 2
32808: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
32809: LD_INT 0
32811: PPUSH
32812: PPUSH
32813: PPUSH
32814: PPUSH
32815: PPUSH
32816: PPUSH
// if not unit or not hexes then
32817: LD_VAR 0 1
32821: NOT
32822: PUSH
32823: LD_VAR 0 2
32827: NOT
32828: OR
32829: IFFALSE 32833
// exit ;
32831: GO 32956
// dist := 9999 ;
32833: LD_ADDR_VAR 0 5
32837: PUSH
32838: LD_INT 9999
32840: ST_TO_ADDR
// for i = 1 to hexes do
32841: LD_ADDR_VAR 0 4
32845: PUSH
32846: DOUBLE
32847: LD_INT 1
32849: DEC
32850: ST_TO_ADDR
32851: LD_VAR 0 2
32855: PUSH
32856: FOR_TO
32857: IFFALSE 32944
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32859: LD_ADDR_VAR 0 6
32863: PUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: LD_VAR 0 2
32873: PUSH
32874: LD_VAR 0 4
32878: ARRAY
32879: PUSH
32880: LD_INT 1
32882: ARRAY
32883: PPUSH
32884: LD_VAR 0 2
32888: PUSH
32889: LD_VAR 0 4
32893: ARRAY
32894: PUSH
32895: LD_INT 2
32897: ARRAY
32898: PPUSH
32899: CALL_OW 297
32903: ST_TO_ADDR
// if tdist < dist then
32904: LD_VAR 0 6
32908: PUSH
32909: LD_VAR 0 5
32913: LESS
32914: IFFALSE 32942
// begin hex := hexes [ i ] ;
32916: LD_ADDR_VAR 0 8
32920: PUSH
32921: LD_VAR 0 2
32925: PUSH
32926: LD_VAR 0 4
32930: ARRAY
32931: ST_TO_ADDR
// dist := tdist ;
32932: LD_ADDR_VAR 0 5
32936: PUSH
32937: LD_VAR 0 6
32941: ST_TO_ADDR
// end ; end ;
32942: GO 32856
32944: POP
32945: POP
// result := hex ;
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_VAR 0 8
32955: ST_TO_ADDR
// end ;
32956: LD_VAR 0 3
32960: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32961: LD_INT 0
32963: PPUSH
32964: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32965: LD_VAR 0 1
32969: NOT
32970: PUSH
32971: LD_VAR 0 1
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 23
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PPUSH
33000: CALL_OW 69
33004: IN
33005: NOT
33006: OR
33007: IFFALSE 33011
// exit ;
33009: GO 33058
// for i = 1 to 3 do
33011: LD_ADDR_VAR 0 3
33015: PUSH
33016: DOUBLE
33017: LD_INT 1
33019: DEC
33020: ST_TO_ADDR
33021: LD_INT 3
33023: PUSH
33024: FOR_TO
33025: IFFALSE 33056
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33027: LD_VAR 0 1
33031: PPUSH
33032: CALL_OW 250
33036: PPUSH
33037: LD_VAR 0 1
33041: PPUSH
33042: CALL_OW 251
33046: PPUSH
33047: LD_INT 1
33049: PPUSH
33050: CALL_OW 453
33054: GO 33024
33056: POP
33057: POP
// end ;
33058: LD_VAR 0 2
33062: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33063: LD_INT 0
33065: PPUSH
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
33070: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33071: LD_VAR 0 1
33075: NOT
33076: PUSH
33077: LD_VAR 0 2
33081: NOT
33082: OR
33083: PUSH
33084: LD_VAR 0 1
33088: PPUSH
33089: CALL_OW 314
33093: OR
33094: IFFALSE 33098
// exit ;
33096: GO 33565
// if GetLives ( i ) < 250 then
33098: LD_VAR 0 4
33102: PPUSH
33103: CALL_OW 256
33107: PUSH
33108: LD_INT 250
33110: LESS
33111: IFFALSE 33124
// begin ComAutodestruct ( i ) ;
33113: LD_VAR 0 4
33117: PPUSH
33118: CALL 32961 0 1
// exit ;
33122: GO 33565
// end ; x := GetX ( enemy_unit ) ;
33124: LD_ADDR_VAR 0 7
33128: PUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: CALL_OW 250
33138: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33139: LD_ADDR_VAR 0 8
33143: PUSH
33144: LD_VAR 0 2
33148: PPUSH
33149: CALL_OW 251
33153: ST_TO_ADDR
// if not x or not y then
33154: LD_VAR 0 7
33158: NOT
33159: PUSH
33160: LD_VAR 0 8
33164: NOT
33165: OR
33166: IFFALSE 33170
// exit ;
33168: GO 33565
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33170: LD_ADDR_VAR 0 6
33174: PUSH
33175: LD_VAR 0 7
33179: PPUSH
33180: LD_INT 0
33182: PPUSH
33183: LD_INT 4
33185: PPUSH
33186: CALL_OW 272
33190: PUSH
33191: LD_VAR 0 8
33195: PPUSH
33196: LD_INT 0
33198: PPUSH
33199: LD_INT 4
33201: PPUSH
33202: CALL_OW 273
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_VAR 0 7
33215: PPUSH
33216: LD_INT 1
33218: PPUSH
33219: LD_INT 4
33221: PPUSH
33222: CALL_OW 272
33226: PUSH
33227: LD_VAR 0 8
33231: PPUSH
33232: LD_INT 1
33234: PPUSH
33235: LD_INT 4
33237: PPUSH
33238: CALL_OW 273
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_VAR 0 7
33251: PPUSH
33252: LD_INT 2
33254: PPUSH
33255: LD_INT 4
33257: PPUSH
33258: CALL_OW 272
33262: PUSH
33263: LD_VAR 0 8
33267: PPUSH
33268: LD_INT 2
33270: PPUSH
33271: LD_INT 4
33273: PPUSH
33274: CALL_OW 273
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_VAR 0 7
33287: PPUSH
33288: LD_INT 3
33290: PPUSH
33291: LD_INT 4
33293: PPUSH
33294: CALL_OW 272
33298: PUSH
33299: LD_VAR 0 8
33303: PPUSH
33304: LD_INT 3
33306: PPUSH
33307: LD_INT 4
33309: PPUSH
33310: CALL_OW 273
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_VAR 0 7
33323: PPUSH
33324: LD_INT 4
33326: PPUSH
33327: LD_INT 4
33329: PPUSH
33330: CALL_OW 272
33334: PUSH
33335: LD_VAR 0 8
33339: PPUSH
33340: LD_INT 4
33342: PPUSH
33343: LD_INT 4
33345: PPUSH
33346: CALL_OW 273
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_VAR 0 7
33359: PPUSH
33360: LD_INT 5
33362: PPUSH
33363: LD_INT 4
33365: PPUSH
33366: CALL_OW 272
33370: PUSH
33371: LD_VAR 0 8
33375: PPUSH
33376: LD_INT 5
33378: PPUSH
33379: LD_INT 4
33381: PPUSH
33382: CALL_OW 273
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
// for i = tmp downto 1 do
33399: LD_ADDR_VAR 0 4
33403: PUSH
33404: DOUBLE
33405: LD_VAR 0 6
33409: INC
33410: ST_TO_ADDR
33411: LD_INT 1
33413: PUSH
33414: FOR_DOWNTO
33415: IFFALSE 33516
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33417: LD_VAR 0 6
33421: PUSH
33422: LD_VAR 0 4
33426: ARRAY
33427: PUSH
33428: LD_INT 1
33430: ARRAY
33431: PPUSH
33432: LD_VAR 0 6
33436: PUSH
33437: LD_VAR 0 4
33441: ARRAY
33442: PUSH
33443: LD_INT 2
33445: ARRAY
33446: PPUSH
33447: CALL_OW 488
33451: NOT
33452: PUSH
33453: LD_VAR 0 6
33457: PUSH
33458: LD_VAR 0 4
33462: ARRAY
33463: PUSH
33464: LD_INT 1
33466: ARRAY
33467: PPUSH
33468: LD_VAR 0 6
33472: PUSH
33473: LD_VAR 0 4
33477: ARRAY
33478: PUSH
33479: LD_INT 2
33481: ARRAY
33482: PPUSH
33483: CALL_OW 428
33487: PUSH
33488: LD_INT 0
33490: NONEQUAL
33491: OR
33492: IFFALSE 33514
// tmp := Delete ( tmp , i ) ;
33494: LD_ADDR_VAR 0 6
33498: PUSH
33499: LD_VAR 0 6
33503: PPUSH
33504: LD_VAR 0 4
33508: PPUSH
33509: CALL_OW 3
33513: ST_TO_ADDR
33514: GO 33414
33516: POP
33517: POP
// j := GetClosestHex ( unit , tmp ) ;
33518: LD_ADDR_VAR 0 5
33522: PUSH
33523: LD_VAR 0 1
33527: PPUSH
33528: LD_VAR 0 6
33532: PPUSH
33533: CALL 32809 0 2
33537: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33538: LD_VAR 0 1
33542: PPUSH
33543: LD_VAR 0 5
33547: PUSH
33548: LD_INT 1
33550: ARRAY
33551: PPUSH
33552: LD_VAR 0 5
33556: PUSH
33557: LD_INT 2
33559: ARRAY
33560: PPUSH
33561: CALL_OW 111
// end ;
33565: LD_VAR 0 3
33569: RET
// export function PrepareApemanSoldier ( ) ; begin
33570: LD_INT 0
33572: PPUSH
// uc_nation := 0 ;
33573: LD_ADDR_OWVAR 21
33577: PUSH
33578: LD_INT 0
33580: ST_TO_ADDR
// hc_sex := sex_male ;
33581: LD_ADDR_OWVAR 27
33585: PUSH
33586: LD_INT 1
33588: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33589: LD_ADDR_OWVAR 28
33593: PUSH
33594: LD_INT 15
33596: ST_TO_ADDR
// hc_gallery :=  ;
33597: LD_ADDR_OWVAR 33
33601: PUSH
33602: LD_STRING 
33604: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33605: LD_ADDR_OWVAR 31
33609: PUSH
33610: LD_INT 0
33612: PPUSH
33613: LD_INT 3
33615: PPUSH
33616: CALL_OW 12
33620: PUSH
33621: LD_INT 0
33623: PPUSH
33624: LD_INT 3
33626: PPUSH
33627: CALL_OW 12
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: ST_TO_ADDR
// end ;
33644: LD_VAR 0 1
33648: RET
// export function PrepareApemanEngineer ( ) ; begin
33649: LD_INT 0
33651: PPUSH
// uc_nation := 0 ;
33652: LD_ADDR_OWVAR 21
33656: PUSH
33657: LD_INT 0
33659: ST_TO_ADDR
// hc_sex := sex_male ;
33660: LD_ADDR_OWVAR 27
33664: PUSH
33665: LD_INT 1
33667: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33668: LD_ADDR_OWVAR 28
33672: PUSH
33673: LD_INT 16
33675: ST_TO_ADDR
// hc_gallery :=  ;
33676: LD_ADDR_OWVAR 33
33680: PUSH
33681: LD_STRING 
33683: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33684: LD_ADDR_OWVAR 31
33688: PUSH
33689: LD_INT 0
33691: PPUSH
33692: LD_INT 3
33694: PPUSH
33695: CALL_OW 12
33699: PUSH
33700: LD_INT 0
33702: PPUSH
33703: LD_INT 3
33705: PPUSH
33706: CALL_OW 12
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// end ;
33723: LD_VAR 0 1
33727: RET
// export function PrepareApeman ( agressivity ) ; begin
33728: LD_INT 0
33730: PPUSH
// uc_side := 0 ;
33731: LD_ADDR_OWVAR 20
33735: PUSH
33736: LD_INT 0
33738: ST_TO_ADDR
// uc_nation := 0 ;
33739: LD_ADDR_OWVAR 21
33743: PUSH
33744: LD_INT 0
33746: ST_TO_ADDR
// hc_sex := sex_male ;
33747: LD_ADDR_OWVAR 27
33751: PUSH
33752: LD_INT 1
33754: ST_TO_ADDR
// hc_class := class_apeman ;
33755: LD_ADDR_OWVAR 28
33759: PUSH
33760: LD_INT 12
33762: ST_TO_ADDR
// hc_gallery :=  ;
33763: LD_ADDR_OWVAR 33
33767: PUSH
33768: LD_STRING 
33770: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33771: LD_ADDR_OWVAR 35
33775: PUSH
33776: LD_VAR 0 1
33780: NEG
33781: PPUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 12
33791: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33792: LD_ADDR_OWVAR 31
33796: PUSH
33797: LD_INT 0
33799: PPUSH
33800: LD_INT 3
33802: PPUSH
33803: CALL_OW 12
33807: PUSH
33808: LD_INT 0
33810: PPUSH
33811: LD_INT 3
33813: PPUSH
33814: CALL_OW 12
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: ST_TO_ADDR
// end ;
33831: LD_VAR 0 2
33835: RET
// export function PrepareTiger ( agressivity ) ; begin
33836: LD_INT 0
33838: PPUSH
// uc_side := 0 ;
33839: LD_ADDR_OWVAR 20
33843: PUSH
33844: LD_INT 0
33846: ST_TO_ADDR
// uc_nation := 0 ;
33847: LD_ADDR_OWVAR 21
33851: PUSH
33852: LD_INT 0
33854: ST_TO_ADDR
// hc_class := class_tiger ;
33855: LD_ADDR_OWVAR 28
33859: PUSH
33860: LD_INT 14
33862: ST_TO_ADDR
// hc_gallery :=  ;
33863: LD_ADDR_OWVAR 33
33867: PUSH
33868: LD_STRING 
33870: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33871: LD_ADDR_OWVAR 35
33875: PUSH
33876: LD_VAR 0 1
33880: NEG
33881: PPUSH
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL_OW 12
33891: ST_TO_ADDR
// end ;
33892: LD_VAR 0 2
33896: RET
// export function PrepareEnchidna ( ) ; begin
33897: LD_INT 0
33899: PPUSH
// uc_side := 0 ;
33900: LD_ADDR_OWVAR 20
33904: PUSH
33905: LD_INT 0
33907: ST_TO_ADDR
// uc_nation := 0 ;
33908: LD_ADDR_OWVAR 21
33912: PUSH
33913: LD_INT 0
33915: ST_TO_ADDR
// hc_class := class_baggie ;
33916: LD_ADDR_OWVAR 28
33920: PUSH
33921: LD_INT 13
33923: ST_TO_ADDR
// hc_gallery :=  ;
33924: LD_ADDR_OWVAR 33
33928: PUSH
33929: LD_STRING 
33931: ST_TO_ADDR
// end ;
33932: LD_VAR 0 1
33936: RET
// export function PrepareFrog ( ) ; begin
33937: LD_INT 0
33939: PPUSH
// uc_side := 0 ;
33940: LD_ADDR_OWVAR 20
33944: PUSH
33945: LD_INT 0
33947: ST_TO_ADDR
// uc_nation := 0 ;
33948: LD_ADDR_OWVAR 21
33952: PUSH
33953: LD_INT 0
33955: ST_TO_ADDR
// hc_class := class_frog ;
33956: LD_ADDR_OWVAR 28
33960: PUSH
33961: LD_INT 19
33963: ST_TO_ADDR
// hc_gallery :=  ;
33964: LD_ADDR_OWVAR 33
33968: PUSH
33969: LD_STRING 
33971: ST_TO_ADDR
// end ;
33972: LD_VAR 0 1
33976: RET
// export function PrepareFish ( ) ; begin
33977: LD_INT 0
33979: PPUSH
// uc_side := 0 ;
33980: LD_ADDR_OWVAR 20
33984: PUSH
33985: LD_INT 0
33987: ST_TO_ADDR
// uc_nation := 0 ;
33988: LD_ADDR_OWVAR 21
33992: PUSH
33993: LD_INT 0
33995: ST_TO_ADDR
// hc_class := class_fish ;
33996: LD_ADDR_OWVAR 28
34000: PUSH
34001: LD_INT 20
34003: ST_TO_ADDR
// hc_gallery :=  ;
34004: LD_ADDR_OWVAR 33
34008: PUSH
34009: LD_STRING 
34011: ST_TO_ADDR
// end ;
34012: LD_VAR 0 1
34016: RET
// export function PrepareBird ( ) ; begin
34017: LD_INT 0
34019: PPUSH
// uc_side := 0 ;
34020: LD_ADDR_OWVAR 20
34024: PUSH
34025: LD_INT 0
34027: ST_TO_ADDR
// uc_nation := 0 ;
34028: LD_ADDR_OWVAR 21
34032: PUSH
34033: LD_INT 0
34035: ST_TO_ADDR
// hc_class := class_phororhacos ;
34036: LD_ADDR_OWVAR 28
34040: PUSH
34041: LD_INT 18
34043: ST_TO_ADDR
// hc_gallery :=  ;
34044: LD_ADDR_OWVAR 33
34048: PUSH
34049: LD_STRING 
34051: ST_TO_ADDR
// end ;
34052: LD_VAR 0 1
34056: RET
// export function PrepareHorse ( ) ; begin
34057: LD_INT 0
34059: PPUSH
// uc_side := 0 ;
34060: LD_ADDR_OWVAR 20
34064: PUSH
34065: LD_INT 0
34067: ST_TO_ADDR
// uc_nation := 0 ;
34068: LD_ADDR_OWVAR 21
34072: PUSH
34073: LD_INT 0
34075: ST_TO_ADDR
// hc_class := class_horse ;
34076: LD_ADDR_OWVAR 28
34080: PUSH
34081: LD_INT 21
34083: ST_TO_ADDR
// hc_gallery :=  ;
34084: LD_ADDR_OWVAR 33
34088: PUSH
34089: LD_STRING 
34091: ST_TO_ADDR
// end ;
34092: LD_VAR 0 1
34096: RET
// export function PrepareMastodont ( ) ; begin
34097: LD_INT 0
34099: PPUSH
// uc_side := 0 ;
34100: LD_ADDR_OWVAR 20
34104: PUSH
34105: LD_INT 0
34107: ST_TO_ADDR
// uc_nation := 0 ;
34108: LD_ADDR_OWVAR 21
34112: PUSH
34113: LD_INT 0
34115: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34116: LD_ADDR_OWVAR 37
34120: PUSH
34121: LD_INT 31
34123: ST_TO_ADDR
// vc_control := control_rider ;
34124: LD_ADDR_OWVAR 38
34128: PUSH
34129: LD_INT 4
34131: ST_TO_ADDR
// end ;
34132: LD_VAR 0 1
34136: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34137: LD_INT 0
34139: PPUSH
34140: PPUSH
34141: PPUSH
// uc_side = 0 ;
34142: LD_ADDR_OWVAR 20
34146: PUSH
34147: LD_INT 0
34149: ST_TO_ADDR
// uc_nation = 0 ;
34150: LD_ADDR_OWVAR 21
34154: PUSH
34155: LD_INT 0
34157: ST_TO_ADDR
// InitHc_All ( ) ;
34158: CALL_OW 584
// InitVc ;
34162: CALL_OW 20
// if mastodonts then
34166: LD_VAR 0 6
34170: IFFALSE 34237
// for i = 1 to mastodonts do
34172: LD_ADDR_VAR 0 11
34176: PUSH
34177: DOUBLE
34178: LD_INT 1
34180: DEC
34181: ST_TO_ADDR
34182: LD_VAR 0 6
34186: PUSH
34187: FOR_TO
34188: IFFALSE 34235
// begin vc_chassis := 31 ;
34190: LD_ADDR_OWVAR 37
34194: PUSH
34195: LD_INT 31
34197: ST_TO_ADDR
// vc_control := control_rider ;
34198: LD_ADDR_OWVAR 38
34202: PUSH
34203: LD_INT 4
34205: ST_TO_ADDR
// animal := CreateVehicle ;
34206: LD_ADDR_VAR 0 12
34210: PUSH
34211: CALL_OW 45
34215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34216: LD_VAR 0 12
34220: PPUSH
34221: LD_VAR 0 8
34225: PPUSH
34226: LD_INT 0
34228: PPUSH
34229: CALL 36365 0 3
// end ;
34233: GO 34187
34235: POP
34236: POP
// if horses then
34237: LD_VAR 0 5
34241: IFFALSE 34308
// for i = 1 to horses do
34243: LD_ADDR_VAR 0 11
34247: PUSH
34248: DOUBLE
34249: LD_INT 1
34251: DEC
34252: ST_TO_ADDR
34253: LD_VAR 0 5
34257: PUSH
34258: FOR_TO
34259: IFFALSE 34306
// begin hc_class := 21 ;
34261: LD_ADDR_OWVAR 28
34265: PUSH
34266: LD_INT 21
34268: ST_TO_ADDR
// hc_gallery :=  ;
34269: LD_ADDR_OWVAR 33
34273: PUSH
34274: LD_STRING 
34276: ST_TO_ADDR
// animal := CreateHuman ;
34277: LD_ADDR_VAR 0 12
34281: PUSH
34282: CALL_OW 44
34286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34287: LD_VAR 0 12
34291: PPUSH
34292: LD_VAR 0 8
34296: PPUSH
34297: LD_INT 0
34299: PPUSH
34300: CALL 36365 0 3
// end ;
34304: GO 34258
34306: POP
34307: POP
// if birds then
34308: LD_VAR 0 1
34312: IFFALSE 34379
// for i = 1 to birds do
34314: LD_ADDR_VAR 0 11
34318: PUSH
34319: DOUBLE
34320: LD_INT 1
34322: DEC
34323: ST_TO_ADDR
34324: LD_VAR 0 1
34328: PUSH
34329: FOR_TO
34330: IFFALSE 34377
// begin hc_class := 18 ;
34332: LD_ADDR_OWVAR 28
34336: PUSH
34337: LD_INT 18
34339: ST_TO_ADDR
// hc_gallery =  ;
34340: LD_ADDR_OWVAR 33
34344: PUSH
34345: LD_STRING 
34347: ST_TO_ADDR
// animal := CreateHuman ;
34348: LD_ADDR_VAR 0 12
34352: PUSH
34353: CALL_OW 44
34357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34358: LD_VAR 0 12
34362: PPUSH
34363: LD_VAR 0 8
34367: PPUSH
34368: LD_INT 0
34370: PPUSH
34371: CALL 36365 0 3
// end ;
34375: GO 34329
34377: POP
34378: POP
// if tigers then
34379: LD_VAR 0 2
34383: IFFALSE 34467
// for i = 1 to tigers do
34385: LD_ADDR_VAR 0 11
34389: PUSH
34390: DOUBLE
34391: LD_INT 1
34393: DEC
34394: ST_TO_ADDR
34395: LD_VAR 0 2
34399: PUSH
34400: FOR_TO
34401: IFFALSE 34465
// begin hc_class = class_tiger ;
34403: LD_ADDR_OWVAR 28
34407: PUSH
34408: LD_INT 14
34410: ST_TO_ADDR
// hc_gallery =  ;
34411: LD_ADDR_OWVAR 33
34415: PUSH
34416: LD_STRING 
34418: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34419: LD_ADDR_OWVAR 35
34423: PUSH
34424: LD_INT 7
34426: NEG
34427: PPUSH
34428: LD_INT 7
34430: PPUSH
34431: CALL_OW 12
34435: ST_TO_ADDR
// animal := CreateHuman ;
34436: LD_ADDR_VAR 0 12
34440: PUSH
34441: CALL_OW 44
34445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34446: LD_VAR 0 12
34450: PPUSH
34451: LD_VAR 0 8
34455: PPUSH
34456: LD_INT 0
34458: PPUSH
34459: CALL 36365 0 3
// end ;
34463: GO 34400
34465: POP
34466: POP
// if apemans then
34467: LD_VAR 0 3
34471: IFFALSE 34594
// for i = 1 to apemans do
34473: LD_ADDR_VAR 0 11
34477: PUSH
34478: DOUBLE
34479: LD_INT 1
34481: DEC
34482: ST_TO_ADDR
34483: LD_VAR 0 3
34487: PUSH
34488: FOR_TO
34489: IFFALSE 34592
// begin hc_class = class_apeman ;
34491: LD_ADDR_OWVAR 28
34495: PUSH
34496: LD_INT 12
34498: ST_TO_ADDR
// hc_gallery =  ;
34499: LD_ADDR_OWVAR 33
34503: PUSH
34504: LD_STRING 
34506: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34507: LD_ADDR_OWVAR 35
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PPUSH
34516: LD_INT 2
34518: PPUSH
34519: CALL_OW 12
34523: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34524: LD_ADDR_OWVAR 31
34528: PUSH
34529: LD_INT 1
34531: PPUSH
34532: LD_INT 3
34534: PPUSH
34535: CALL_OW 12
34539: PUSH
34540: LD_INT 1
34542: PPUSH
34543: LD_INT 3
34545: PPUSH
34546: CALL_OW 12
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
// animal := CreateHuman ;
34563: LD_ADDR_VAR 0 12
34567: PUSH
34568: CALL_OW 44
34572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34573: LD_VAR 0 12
34577: PPUSH
34578: LD_VAR 0 8
34582: PPUSH
34583: LD_INT 0
34585: PPUSH
34586: CALL 36365 0 3
// end ;
34590: GO 34488
34592: POP
34593: POP
// if enchidnas then
34594: LD_VAR 0 4
34598: IFFALSE 34665
// for i = 1 to enchidnas do
34600: LD_ADDR_VAR 0 11
34604: PUSH
34605: DOUBLE
34606: LD_INT 1
34608: DEC
34609: ST_TO_ADDR
34610: LD_VAR 0 4
34614: PUSH
34615: FOR_TO
34616: IFFALSE 34663
// begin hc_class = 13 ;
34618: LD_ADDR_OWVAR 28
34622: PUSH
34623: LD_INT 13
34625: ST_TO_ADDR
// hc_gallery =  ;
34626: LD_ADDR_OWVAR 33
34630: PUSH
34631: LD_STRING 
34633: ST_TO_ADDR
// animal := CreateHuman ;
34634: LD_ADDR_VAR 0 12
34638: PUSH
34639: CALL_OW 44
34643: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34644: LD_VAR 0 12
34648: PPUSH
34649: LD_VAR 0 8
34653: PPUSH
34654: LD_INT 0
34656: PPUSH
34657: CALL 36365 0 3
// end ;
34661: GO 34615
34663: POP
34664: POP
// if fishes then
34665: LD_VAR 0 7
34669: IFFALSE 34736
// for i = 1 to fishes do
34671: LD_ADDR_VAR 0 11
34675: PUSH
34676: DOUBLE
34677: LD_INT 1
34679: DEC
34680: ST_TO_ADDR
34681: LD_VAR 0 7
34685: PUSH
34686: FOR_TO
34687: IFFALSE 34734
// begin hc_class = 20 ;
34689: LD_ADDR_OWVAR 28
34693: PUSH
34694: LD_INT 20
34696: ST_TO_ADDR
// hc_gallery =  ;
34697: LD_ADDR_OWVAR 33
34701: PUSH
34702: LD_STRING 
34704: ST_TO_ADDR
// animal := CreateHuman ;
34705: LD_ADDR_VAR 0 12
34709: PUSH
34710: CALL_OW 44
34714: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34715: LD_VAR 0 12
34719: PPUSH
34720: LD_VAR 0 9
34724: PPUSH
34725: LD_INT 0
34727: PPUSH
34728: CALL 36365 0 3
// end ;
34732: GO 34686
34734: POP
34735: POP
// end ;
34736: LD_VAR 0 10
34740: RET
// export function WantHeal ( sci , unit ) ; begin
34741: LD_INT 0
34743: PPUSH
// if GetTaskList ( sci ) > 0 then
34744: LD_VAR 0 1
34748: PPUSH
34749: CALL_OW 437
34753: PUSH
34754: LD_INT 0
34756: GREATER
34757: IFFALSE 34827
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 437
34768: PUSH
34769: LD_INT 1
34771: ARRAY
34772: PUSH
34773: LD_INT 1
34775: ARRAY
34776: PUSH
34777: LD_STRING l
34779: EQUAL
34780: PUSH
34781: LD_VAR 0 1
34785: PPUSH
34786: CALL_OW 437
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PUSH
34795: LD_INT 4
34797: ARRAY
34798: PUSH
34799: LD_VAR 0 2
34803: EQUAL
34804: AND
34805: IFFALSE 34817
// result := true else
34807: LD_ADDR_VAR 0 3
34811: PUSH
34812: LD_INT 1
34814: ST_TO_ADDR
34815: GO 34825
// result := false ;
34817: LD_ADDR_VAR 0 3
34821: PUSH
34822: LD_INT 0
34824: ST_TO_ADDR
// end else
34825: GO 34835
// result := false ;
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_INT 0
34834: ST_TO_ADDR
// end ;
34835: LD_VAR 0 3
34839: RET
// export function HealTarget ( sci ) ; begin
34840: LD_INT 0
34842: PPUSH
// if not sci then
34843: LD_VAR 0 1
34847: NOT
34848: IFFALSE 34852
// exit ;
34850: GO 34917
// result := 0 ;
34852: LD_ADDR_VAR 0 2
34856: PUSH
34857: LD_INT 0
34859: ST_TO_ADDR
// if GetTaskList ( sci ) then
34860: LD_VAR 0 1
34864: PPUSH
34865: CALL_OW 437
34869: IFFALSE 34917
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34871: LD_VAR 0 1
34875: PPUSH
34876: CALL_OW 437
34880: PUSH
34881: LD_INT 1
34883: ARRAY
34884: PUSH
34885: LD_INT 1
34887: ARRAY
34888: PUSH
34889: LD_STRING l
34891: EQUAL
34892: IFFALSE 34917
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34894: LD_ADDR_VAR 0 2
34898: PUSH
34899: LD_VAR 0 1
34903: PPUSH
34904: CALL_OW 437
34908: PUSH
34909: LD_INT 1
34911: ARRAY
34912: PUSH
34913: LD_INT 4
34915: ARRAY
34916: ST_TO_ADDR
// end ;
34917: LD_VAR 0 2
34921: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34922: LD_INT 0
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
// if not base_units then
34928: LD_VAR 0 1
34932: NOT
34933: IFFALSE 34937
// exit ;
34935: GO 35024
// result := false ;
34937: LD_ADDR_VAR 0 2
34941: PUSH
34942: LD_INT 0
34944: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34945: LD_ADDR_VAR 0 5
34949: PUSH
34950: LD_VAR 0 1
34954: PPUSH
34955: LD_INT 21
34957: PUSH
34958: LD_INT 3
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PPUSH
34965: CALL_OW 72
34969: ST_TO_ADDR
// if not tmp then
34970: LD_VAR 0 5
34974: NOT
34975: IFFALSE 34979
// exit ;
34977: GO 35024
// for i in tmp do
34979: LD_ADDR_VAR 0 3
34983: PUSH
34984: LD_VAR 0 5
34988: PUSH
34989: FOR_IN
34990: IFFALSE 35022
// begin result := EnemyInRange ( i , 22 ) ;
34992: LD_ADDR_VAR 0 2
34996: PUSH
34997: LD_VAR 0 3
35001: PPUSH
35002: LD_INT 22
35004: PPUSH
35005: CALL 32611 0 2
35009: ST_TO_ADDR
// if result then
35010: LD_VAR 0 2
35014: IFFALSE 35020
// exit ;
35016: POP
35017: POP
35018: GO 35024
// end ;
35020: GO 34989
35022: POP
35023: POP
// end ;
35024: LD_VAR 0 2
35028: RET
// export function FilterByTag ( units , tag ) ; begin
35029: LD_INT 0
35031: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35032: LD_ADDR_VAR 0 3
35036: PUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: LD_INT 120
35044: PUSH
35045: LD_VAR 0 2
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PPUSH
35054: CALL_OW 72
35058: ST_TO_ADDR
// end ;
35059: LD_VAR 0 3
35063: RET
// export function IsDriver ( un ) ; begin
35064: LD_INT 0
35066: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35067: LD_ADDR_VAR 0 2
35071: PUSH
35072: LD_VAR 0 1
35076: PUSH
35077: LD_INT 55
35079: PUSH
35080: EMPTY
35081: LIST
35082: PPUSH
35083: CALL_OW 69
35087: IN
35088: ST_TO_ADDR
// end ;
35089: LD_VAR 0 2
35093: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35094: LD_INT 0
35096: PPUSH
35097: PPUSH
// list := [ ] ;
35098: LD_ADDR_VAR 0 5
35102: PUSH
35103: EMPTY
35104: ST_TO_ADDR
// case d of 0 :
35105: LD_VAR 0 3
35109: PUSH
35110: LD_INT 0
35112: DOUBLE
35113: EQUAL
35114: IFTRUE 35118
35116: GO 35251
35118: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35119: LD_ADDR_VAR 0 5
35123: PUSH
35124: LD_VAR 0 1
35128: PUSH
35129: LD_INT 4
35131: MINUS
35132: PUSH
35133: LD_VAR 0 2
35137: PUSH
35138: LD_INT 4
35140: MINUS
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: PUSH
35150: LD_VAR 0 1
35154: PUSH
35155: LD_INT 3
35157: MINUS
35158: PUSH
35159: LD_VAR 0 2
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: PUSH
35172: LD_VAR 0 1
35176: PUSH
35177: LD_INT 4
35179: PLUS
35180: PUSH
35181: LD_VAR 0 2
35185: PUSH
35186: LD_INT 4
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: PUSH
35194: LD_VAR 0 1
35198: PUSH
35199: LD_INT 3
35201: PLUS
35202: PUSH
35203: LD_VAR 0 2
35207: PUSH
35208: LD_INT 3
35210: PLUS
35211: PUSH
35212: LD_INT 5
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: PUSH
35220: LD_VAR 0 1
35224: PUSH
35225: LD_VAR 0 2
35229: PUSH
35230: LD_INT 4
35232: PLUS
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
// end ; 1 :
35249: GO 35949
35251: LD_INT 1
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35392
35259: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35260: LD_ADDR_VAR 0 5
35264: PUSH
35265: LD_VAR 0 1
35269: PUSH
35270: LD_VAR 0 2
35274: PUSH
35275: LD_INT 4
35277: MINUS
35278: PUSH
35279: LD_INT 3
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: LIST
35286: PUSH
35287: LD_VAR 0 1
35291: PUSH
35292: LD_INT 3
35294: MINUS
35295: PUSH
35296: LD_VAR 0 2
35300: PUSH
35301: LD_INT 3
35303: MINUS
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: PUSH
35313: LD_VAR 0 1
35317: PUSH
35318: LD_INT 4
35320: MINUS
35321: PUSH
35322: LD_VAR 0 2
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: PUSH
35335: LD_VAR 0 1
35339: PUSH
35340: LD_VAR 0 2
35344: PUSH
35345: LD_INT 3
35347: PLUS
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: PUSH
35357: LD_VAR 0 1
35361: PUSH
35362: LD_INT 4
35364: PLUS
35365: PUSH
35366: LD_VAR 0 2
35370: PUSH
35371: LD_INT 4
35373: PLUS
35374: PUSH
35375: LD_INT 5
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
// end ; 2 :
35390: GO 35949
35392: LD_INT 2
35394: DOUBLE
35395: EQUAL
35396: IFTRUE 35400
35398: GO 35529
35400: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35401: LD_ADDR_VAR 0 5
35405: PUSH
35406: LD_VAR 0 1
35410: PUSH
35411: LD_VAR 0 2
35415: PUSH
35416: LD_INT 3
35418: MINUS
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: PUSH
35428: LD_VAR 0 1
35432: PUSH
35433: LD_INT 4
35435: PLUS
35436: PUSH
35437: LD_VAR 0 2
35441: PUSH
35442: LD_INT 4
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: PUSH
35450: LD_VAR 0 1
35454: PUSH
35455: LD_VAR 0 2
35459: PUSH
35460: LD_INT 4
35462: PLUS
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: PUSH
35472: LD_VAR 0 1
35476: PUSH
35477: LD_INT 3
35479: MINUS
35480: PUSH
35481: LD_VAR 0 2
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: PUSH
35494: LD_VAR 0 1
35498: PUSH
35499: LD_INT 4
35501: MINUS
35502: PUSH
35503: LD_VAR 0 2
35507: PUSH
35508: LD_INT 4
35510: MINUS
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// end ; 3 :
35527: GO 35949
35529: LD_INT 3
35531: DOUBLE
35532: EQUAL
35533: IFTRUE 35537
35535: GO 35670
35537: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35538: LD_ADDR_VAR 0 5
35542: PUSH
35543: LD_VAR 0 1
35547: PUSH
35548: LD_INT 3
35550: PLUS
35551: PUSH
35552: LD_VAR 0 2
35556: PUSH
35557: LD_INT 4
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: PUSH
35565: LD_VAR 0 1
35569: PUSH
35570: LD_INT 4
35572: PLUS
35573: PUSH
35574: LD_VAR 0 2
35578: PUSH
35579: LD_INT 4
35581: PLUS
35582: PUSH
35583: LD_INT 5
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: PUSH
35591: LD_VAR 0 1
35595: PUSH
35596: LD_INT 4
35598: MINUS
35599: PUSH
35600: LD_VAR 0 2
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: PUSH
35613: LD_VAR 0 1
35617: PUSH
35618: LD_VAR 0 2
35622: PUSH
35623: LD_INT 4
35625: MINUS
35626: PUSH
35627: LD_INT 3
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: LD_VAR 0 1
35639: PUSH
35640: LD_INT 3
35642: MINUS
35643: PUSH
35644: LD_VAR 0 2
35648: PUSH
35649: LD_INT 3
35651: MINUS
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: ST_TO_ADDR
// end ; 4 :
35668: GO 35949
35670: LD_INT 4
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35811
35678: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35679: LD_ADDR_VAR 0 5
35683: PUSH
35684: LD_VAR 0 1
35688: PUSH
35689: LD_VAR 0 2
35693: PUSH
35694: LD_INT 4
35696: PLUS
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: PUSH
35706: LD_VAR 0 1
35710: PUSH
35711: LD_INT 3
35713: PLUS
35714: PUSH
35715: LD_VAR 0 2
35719: PUSH
35720: LD_INT 3
35722: PLUS
35723: PUSH
35724: LD_INT 5
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: PUSH
35732: LD_VAR 0 1
35736: PUSH
35737: LD_INT 4
35739: PLUS
35740: PUSH
35741: LD_VAR 0 2
35745: PUSH
35746: LD_INT 4
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: LIST
35753: PUSH
35754: LD_VAR 0 1
35758: PUSH
35759: LD_VAR 0 2
35763: PUSH
35764: LD_INT 3
35766: MINUS
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: PUSH
35776: LD_VAR 0 1
35780: PUSH
35781: LD_INT 4
35783: MINUS
35784: PUSH
35785: LD_VAR 0 2
35789: PUSH
35790: LD_INT 4
35792: MINUS
35793: PUSH
35794: LD_INT 2
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// end ; 5 :
35809: GO 35949
35811: LD_INT 5
35813: DOUBLE
35814: EQUAL
35815: IFTRUE 35819
35817: GO 35948
35819: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35820: LD_ADDR_VAR 0 5
35824: PUSH
35825: LD_VAR 0 1
35829: PUSH
35830: LD_INT 4
35832: MINUS
35833: PUSH
35834: LD_VAR 0 2
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: PUSH
35847: LD_VAR 0 1
35851: PUSH
35852: LD_VAR 0 2
35856: PUSH
35857: LD_INT 4
35859: MINUS
35860: PUSH
35861: LD_INT 3
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: PUSH
35869: LD_VAR 0 1
35873: PUSH
35874: LD_INT 4
35876: PLUS
35877: PUSH
35878: LD_VAR 0 2
35882: PUSH
35883: LD_INT 4
35885: PLUS
35886: PUSH
35887: LD_INT 5
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: PUSH
35895: LD_VAR 0 1
35899: PUSH
35900: LD_INT 3
35902: PLUS
35903: PUSH
35904: LD_VAR 0 2
35908: PUSH
35909: LD_INT 4
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: PUSH
35917: LD_VAR 0 1
35921: PUSH
35922: LD_VAR 0 2
35926: PUSH
35927: LD_INT 3
35929: PLUS
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: ST_TO_ADDR
// end ; end ;
35946: GO 35949
35948: POP
// result := list ;
35949: LD_ADDR_VAR 0 4
35953: PUSH
35954: LD_VAR 0 5
35958: ST_TO_ADDR
// end ;
35959: LD_VAR 0 4
35963: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35964: LD_INT 0
35966: PPUSH
35967: PPUSH
35968: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35969: LD_VAR 0 1
35973: NOT
35974: PUSH
35975: LD_VAR 0 2
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 3
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: IN
35998: NOT
35999: OR
36000: IFFALSE 36004
// exit ;
36002: GO 36087
// tmp := [ ] ;
36004: LD_ADDR_VAR 0 5
36008: PUSH
36009: EMPTY
36010: ST_TO_ADDR
// for i in units do
36011: LD_ADDR_VAR 0 4
36015: PUSH
36016: LD_VAR 0 1
36020: PUSH
36021: FOR_IN
36022: IFFALSE 36056
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36024: LD_ADDR_VAR 0 5
36028: PUSH
36029: LD_VAR 0 5
36033: PPUSH
36034: LD_VAR 0 4
36038: PPUSH
36039: LD_VAR 0 2
36043: PPUSH
36044: CALL_OW 259
36048: PPUSH
36049: CALL 37447 0 2
36053: ST_TO_ADDR
36054: GO 36021
36056: POP
36057: POP
// if not tmp then
36058: LD_VAR 0 5
36062: NOT
36063: IFFALSE 36067
// exit ;
36065: GO 36087
// result := SortListByListDesc ( units , tmp ) ;
36067: LD_ADDR_VAR 0 3
36071: PUSH
36072: LD_VAR 0 1
36076: PPUSH
36077: LD_VAR 0 5
36081: PPUSH
36082: CALL_OW 77
36086: ST_TO_ADDR
// end ;
36087: LD_VAR 0 3
36091: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36092: LD_INT 0
36094: PPUSH
36095: PPUSH
36096: PPUSH
// result := false ;
36097: LD_ADDR_VAR 0 3
36101: PUSH
36102: LD_INT 0
36104: ST_TO_ADDR
// if not building then
36105: LD_VAR 0 2
36109: NOT
36110: IFFALSE 36114
// exit ;
36112: GO 36252
// x := GetX ( building ) ;
36114: LD_ADDR_VAR 0 4
36118: PUSH
36119: LD_VAR 0 2
36123: PPUSH
36124: CALL_OW 250
36128: ST_TO_ADDR
// y := GetY ( building ) ;
36129: LD_ADDR_VAR 0 5
36133: PUSH
36134: LD_VAR 0 2
36138: PPUSH
36139: CALL_OW 251
36143: ST_TO_ADDR
// if not x or not y then
36144: LD_VAR 0 4
36148: NOT
36149: PUSH
36150: LD_VAR 0 5
36154: NOT
36155: OR
36156: IFFALSE 36160
// exit ;
36158: GO 36252
// if GetTaskList ( unit ) then
36160: LD_VAR 0 1
36164: PPUSH
36165: CALL_OW 437
36169: IFFALSE 36252
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36171: LD_STRING e
36173: PUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 437
36183: PUSH
36184: LD_INT 1
36186: ARRAY
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: EQUAL
36192: PUSH
36193: LD_VAR 0 4
36197: PUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 437
36207: PUSH
36208: LD_INT 1
36210: ARRAY
36211: PUSH
36212: LD_INT 2
36214: ARRAY
36215: EQUAL
36216: AND
36217: PUSH
36218: LD_VAR 0 5
36222: PUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 437
36232: PUSH
36233: LD_INT 1
36235: ARRAY
36236: PUSH
36237: LD_INT 3
36239: ARRAY
36240: EQUAL
36241: AND
36242: IFFALSE 36252
// result := true end ;
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: LD_INT 1
36251: ST_TO_ADDR
// end ;
36252: LD_VAR 0 3
36256: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36257: LD_INT 0
36259: PPUSH
// result := false ;
36260: LD_ADDR_VAR 0 4
36264: PUSH
36265: LD_INT 0
36267: ST_TO_ADDR
// if GetTaskList ( unit ) then
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 437
36277: IFFALSE 36360
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36279: LD_STRING M
36281: PUSH
36282: LD_VAR 0 1
36286: PPUSH
36287: CALL_OW 437
36291: PUSH
36292: LD_INT 1
36294: ARRAY
36295: PUSH
36296: LD_INT 1
36298: ARRAY
36299: EQUAL
36300: PUSH
36301: LD_VAR 0 2
36305: PUSH
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL_OW 437
36315: PUSH
36316: LD_INT 1
36318: ARRAY
36319: PUSH
36320: LD_INT 2
36322: ARRAY
36323: EQUAL
36324: AND
36325: PUSH
36326: LD_VAR 0 3
36330: PUSH
36331: LD_VAR 0 1
36335: PPUSH
36336: CALL_OW 437
36340: PUSH
36341: LD_INT 1
36343: ARRAY
36344: PUSH
36345: LD_INT 3
36347: ARRAY
36348: EQUAL
36349: AND
36350: IFFALSE 36360
// result := true ;
36352: LD_ADDR_VAR 0 4
36356: PUSH
36357: LD_INT 1
36359: ST_TO_ADDR
// end ; end ;
36360: LD_VAR 0 4
36364: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36365: LD_INT 0
36367: PPUSH
36368: PPUSH
36369: PPUSH
36370: PPUSH
// if not unit or not area then
36371: LD_VAR 0 1
36375: NOT
36376: PUSH
36377: LD_VAR 0 2
36381: NOT
36382: OR
36383: IFFALSE 36387
// exit ;
36385: GO 36550
// tmp := AreaToList ( area , i ) ;
36387: LD_ADDR_VAR 0 6
36391: PUSH
36392: LD_VAR 0 2
36396: PPUSH
36397: LD_VAR 0 5
36401: PPUSH
36402: CALL_OW 517
36406: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36407: LD_ADDR_VAR 0 5
36411: PUSH
36412: DOUBLE
36413: LD_INT 1
36415: DEC
36416: ST_TO_ADDR
36417: LD_VAR 0 6
36421: PUSH
36422: LD_INT 1
36424: ARRAY
36425: PUSH
36426: FOR_TO
36427: IFFALSE 36548
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36429: LD_ADDR_VAR 0 7
36433: PUSH
36434: LD_VAR 0 6
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PUSH
36443: LD_VAR 0 5
36447: ARRAY
36448: PUSH
36449: LD_VAR 0 6
36453: PUSH
36454: LD_INT 2
36456: ARRAY
36457: PUSH
36458: LD_VAR 0 5
36462: ARRAY
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36468: LD_INT 92
36470: PUSH
36471: LD_VAR 0 7
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: PUSH
36480: LD_VAR 0 7
36484: PUSH
36485: LD_INT 2
36487: ARRAY
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: PPUSH
36498: CALL_OW 69
36502: PUSH
36503: LD_INT 0
36505: EQUAL
36506: IFFALSE 36546
// begin PlaceUnitArea ( unit , area , mode ) ;
36508: LD_VAR 0 1
36512: PPUSH
36513: LD_VAR 0 2
36517: PPUSH
36518: LD_VAR 0 3
36522: PPUSH
36523: CALL_OW 49
// result := IsPlaced ( unit ) ;
36527: LD_ADDR_VAR 0 4
36531: PUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 305
36541: ST_TO_ADDR
// exit ;
36542: POP
36543: POP
36544: GO 36550
// end ; end ;
36546: GO 36426
36548: POP
36549: POP
// end ;
36550: LD_VAR 0 4
36554: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36555: LD_INT 0
36557: PPUSH
36558: PPUSH
36559: PPUSH
// if not side or side > 8 then
36560: LD_VAR 0 1
36564: NOT
36565: PUSH
36566: LD_VAR 0 1
36570: PUSH
36571: LD_INT 8
36573: GREATER
36574: OR
36575: IFFALSE 36579
// exit ;
36577: GO 36766
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36579: LD_ADDR_VAR 0 4
36583: PUSH
36584: LD_INT 22
36586: PUSH
36587: LD_VAR 0 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 21
36598: PUSH
36599: LD_INT 3
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PPUSH
36610: CALL_OW 69
36614: ST_TO_ADDR
// if not tmp then
36615: LD_VAR 0 4
36619: NOT
36620: IFFALSE 36624
// exit ;
36622: GO 36766
// enable_addtolog := true ;
36624: LD_ADDR_OWVAR 81
36628: PUSH
36629: LD_INT 1
36631: ST_TO_ADDR
// AddToLog ( [ ) ;
36632: LD_STRING [
36634: PPUSH
36635: CALL_OW 561
// for i in tmp do
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: LD_VAR 0 4
36648: PUSH
36649: FOR_IN
36650: IFFALSE 36757
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36652: LD_STRING [
36654: PUSH
36655: LD_VAR 0 3
36659: PPUSH
36660: CALL_OW 266
36664: STR
36665: PUSH
36666: LD_STRING , 
36668: STR
36669: PUSH
36670: LD_VAR 0 3
36674: PPUSH
36675: CALL_OW 250
36679: STR
36680: PUSH
36681: LD_STRING , 
36683: STR
36684: PUSH
36685: LD_VAR 0 3
36689: PPUSH
36690: CALL_OW 251
36694: STR
36695: PUSH
36696: LD_STRING , 
36698: STR
36699: PUSH
36700: LD_VAR 0 3
36704: PPUSH
36705: CALL_OW 254
36709: STR
36710: PUSH
36711: LD_STRING , 
36713: STR
36714: PUSH
36715: LD_VAR 0 3
36719: PPUSH
36720: LD_INT 1
36722: PPUSH
36723: CALL_OW 268
36727: STR
36728: PUSH
36729: LD_STRING , 
36731: STR
36732: PUSH
36733: LD_VAR 0 3
36737: PPUSH
36738: LD_INT 2
36740: PPUSH
36741: CALL_OW 268
36745: STR
36746: PUSH
36747: LD_STRING ],
36749: STR
36750: PPUSH
36751: CALL_OW 561
// end ;
36755: GO 36649
36757: POP
36758: POP
// AddToLog ( ]; ) ;
36759: LD_STRING ];
36761: PPUSH
36762: CALL_OW 561
// end ;
36766: LD_VAR 0 2
36770: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36771: LD_INT 0
36773: PPUSH
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
// if not area or not rate or not max then
36778: LD_VAR 0 1
36782: NOT
36783: PUSH
36784: LD_VAR 0 2
36788: NOT
36789: OR
36790: PUSH
36791: LD_VAR 0 4
36795: NOT
36796: OR
36797: IFFALSE 36801
// exit ;
36799: GO 36990
// while 1 do
36801: LD_INT 1
36803: IFFALSE 36990
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36805: LD_ADDR_VAR 0 9
36809: PUSH
36810: LD_VAR 0 1
36814: PPUSH
36815: LD_INT 1
36817: PPUSH
36818: CALL_OW 287
36822: PUSH
36823: LD_INT 10
36825: MUL
36826: ST_TO_ADDR
// r := rate / 10 ;
36827: LD_ADDR_VAR 0 7
36831: PUSH
36832: LD_VAR 0 2
36836: PUSH
36837: LD_INT 10
36839: DIVREAL
36840: ST_TO_ADDR
// time := 1 1$00 ;
36841: LD_ADDR_VAR 0 8
36845: PUSH
36846: LD_INT 2100
36848: ST_TO_ADDR
// if amount < min then
36849: LD_VAR 0 9
36853: PUSH
36854: LD_VAR 0 3
36858: LESS
36859: IFFALSE 36877
// r := r * 2 else
36861: LD_ADDR_VAR 0 7
36865: PUSH
36866: LD_VAR 0 7
36870: PUSH
36871: LD_INT 2
36873: MUL
36874: ST_TO_ADDR
36875: GO 36903
// if amount > max then
36877: LD_VAR 0 9
36881: PUSH
36882: LD_VAR 0 4
36886: GREATER
36887: IFFALSE 36903
// r := r / 2 ;
36889: LD_ADDR_VAR 0 7
36893: PUSH
36894: LD_VAR 0 7
36898: PUSH
36899: LD_INT 2
36901: DIVREAL
36902: ST_TO_ADDR
// time := time / r ;
36903: LD_ADDR_VAR 0 8
36907: PUSH
36908: LD_VAR 0 8
36912: PUSH
36913: LD_VAR 0 7
36917: DIVREAL
36918: ST_TO_ADDR
// if time < 0 then
36919: LD_VAR 0 8
36923: PUSH
36924: LD_INT 0
36926: LESS
36927: IFFALSE 36944
// time := time * - 1 ;
36929: LD_ADDR_VAR 0 8
36933: PUSH
36934: LD_VAR 0 8
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: MUL
36943: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
36944: LD_VAR 0 8
36948: PUSH
36949: LD_INT 35
36951: PPUSH
36952: LD_INT 875
36954: PPUSH
36955: CALL_OW 12
36959: PLUS
36960: PPUSH
36961: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36965: LD_INT 1
36967: PPUSH
36968: LD_INT 5
36970: PPUSH
36971: CALL_OW 12
36975: PPUSH
36976: LD_VAR 0 1
36980: PPUSH
36981: LD_INT 1
36983: PPUSH
36984: CALL_OW 55
// end ;
36988: GO 36801
// end ;
36990: LD_VAR 0 5
36994: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36995: LD_INT 0
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
37003: PPUSH
37004: PPUSH
// if not turrets or not factories then
37005: LD_VAR 0 1
37009: NOT
37010: PUSH
37011: LD_VAR 0 2
37015: NOT
37016: OR
37017: IFFALSE 37021
// exit ;
37019: GO 37328
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37021: LD_ADDR_VAR 0 10
37025: PUSH
37026: LD_INT 5
37028: PUSH
37029: LD_INT 6
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: LD_INT 4
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: LD_INT 5
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 24
37063: PUSH
37064: LD_INT 25
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 23
37073: PUSH
37074: LD_INT 27
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 42
37087: PUSH
37088: LD_INT 43
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 44
37097: PUSH
37098: LD_INT 46
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 45
37107: PUSH
37108: LD_INT 47
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// result := [ ] ;
37125: LD_ADDR_VAR 0 3
37129: PUSH
37130: EMPTY
37131: ST_TO_ADDR
// for i in turrets do
37132: LD_ADDR_VAR 0 4
37136: PUSH
37137: LD_VAR 0 1
37141: PUSH
37142: FOR_IN
37143: IFFALSE 37326
// begin nat := GetNation ( i ) ;
37145: LD_ADDR_VAR 0 7
37149: PUSH
37150: LD_VAR 0 4
37154: PPUSH
37155: CALL_OW 248
37159: ST_TO_ADDR
// weapon := 0 ;
37160: LD_ADDR_VAR 0 8
37164: PUSH
37165: LD_INT 0
37167: ST_TO_ADDR
// if not nat then
37168: LD_VAR 0 7
37172: NOT
37173: IFFALSE 37177
// continue ;
37175: GO 37142
// for j in list [ nat ] do
37177: LD_ADDR_VAR 0 5
37181: PUSH
37182: LD_VAR 0 10
37186: PUSH
37187: LD_VAR 0 7
37191: ARRAY
37192: PUSH
37193: FOR_IN
37194: IFFALSE 37235
// if GetBWeapon ( i ) = j [ 1 ] then
37196: LD_VAR 0 4
37200: PPUSH
37201: CALL_OW 269
37205: PUSH
37206: LD_VAR 0 5
37210: PUSH
37211: LD_INT 1
37213: ARRAY
37214: EQUAL
37215: IFFALSE 37233
// begin weapon := j [ 2 ] ;
37217: LD_ADDR_VAR 0 8
37221: PUSH
37222: LD_VAR 0 5
37226: PUSH
37227: LD_INT 2
37229: ARRAY
37230: ST_TO_ADDR
// break ;
37231: GO 37235
// end ;
37233: GO 37193
37235: POP
37236: POP
// if not weapon then
37237: LD_VAR 0 8
37241: NOT
37242: IFFALSE 37246
// continue ;
37244: GO 37142
// for k in factories do
37246: LD_ADDR_VAR 0 6
37250: PUSH
37251: LD_VAR 0 2
37255: PUSH
37256: FOR_IN
37257: IFFALSE 37322
// begin weapons := AvailableWeaponList ( k ) ;
37259: LD_ADDR_VAR 0 9
37263: PUSH
37264: LD_VAR 0 6
37268: PPUSH
37269: CALL_OW 478
37273: ST_TO_ADDR
// if not weapons then
37274: LD_VAR 0 9
37278: NOT
37279: IFFALSE 37283
// continue ;
37281: GO 37256
// if weapon in weapons then
37283: LD_VAR 0 8
37287: PUSH
37288: LD_VAR 0 9
37292: IN
37293: IFFALSE 37320
// begin result := [ i , weapon ] ;
37295: LD_ADDR_VAR 0 3
37299: PUSH
37300: LD_VAR 0 4
37304: PUSH
37305: LD_VAR 0 8
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// exit ;
37314: POP
37315: POP
37316: POP
37317: POP
37318: GO 37328
// end ; end ;
37320: GO 37256
37322: POP
37323: POP
// end ;
37324: GO 37142
37326: POP
37327: POP
// end ;
37328: LD_VAR 0 3
37332: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37333: LD_INT 0
37335: PPUSH
// if not side or side > 8 then
37336: LD_VAR 0 3
37340: NOT
37341: PUSH
37342: LD_VAR 0 3
37346: PUSH
37347: LD_INT 8
37349: GREATER
37350: OR
37351: IFFALSE 37355
// exit ;
37353: GO 37414
// if not range then
37355: LD_VAR 0 4
37359: NOT
37360: IFFALSE 37371
// range := - 12 ;
37362: LD_ADDR_VAR 0 4
37366: PUSH
37367: LD_INT 12
37369: NEG
37370: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37371: LD_VAR 0 1
37375: PPUSH
37376: LD_VAR 0 2
37380: PPUSH
37381: LD_VAR 0 3
37385: PPUSH
37386: LD_VAR 0 4
37390: PPUSH
37391: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37395: LD_VAR 0 1
37399: PPUSH
37400: LD_VAR 0 2
37404: PPUSH
37405: LD_VAR 0 3
37409: PPUSH
37410: CALL_OW 331
// end ;
37414: LD_VAR 0 5
37418: RET
// export function Video ( mode ) ; begin
37419: LD_INT 0
37421: PPUSH
// ingame_video = mode ;
37422: LD_ADDR_OWVAR 52
37426: PUSH
37427: LD_VAR 0 1
37431: ST_TO_ADDR
// interface_hidden = mode ;
37432: LD_ADDR_OWVAR 54
37436: PUSH
37437: LD_VAR 0 1
37441: ST_TO_ADDR
// end ;
37442: LD_VAR 0 2
37446: RET
// export function Join ( array , element ) ; begin
37447: LD_INT 0
37449: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37450: LD_ADDR_VAR 0 3
37454: PUSH
37455: LD_VAR 0 1
37459: PPUSH
37460: LD_VAR 0 1
37464: PUSH
37465: LD_INT 1
37467: PLUS
37468: PPUSH
37469: LD_VAR 0 2
37473: PPUSH
37474: CALL_OW 1
37478: ST_TO_ADDR
// end ;
37479: LD_VAR 0 3
37483: RET
// export function JoinUnion ( array , element ) ; begin
37484: LD_INT 0
37486: PPUSH
// result := array union element ;
37487: LD_ADDR_VAR 0 3
37491: PUSH
37492: LD_VAR 0 1
37496: PUSH
37497: LD_VAR 0 2
37501: UNION
37502: ST_TO_ADDR
// end ;
37503: LD_VAR 0 3
37507: RET
// export function GetBehemoths ( side ) ; begin
37508: LD_INT 0
37510: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37511: LD_ADDR_VAR 0 2
37515: PUSH
37516: LD_INT 22
37518: PUSH
37519: LD_VAR 0 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 31
37530: PUSH
37531: LD_INT 25
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PPUSH
37542: CALL_OW 69
37546: ST_TO_ADDR
// end ;
37547: LD_VAR 0 2
37551: RET
// export function Shuffle ( array ) ; var i , index ; begin
37552: LD_INT 0
37554: PPUSH
37555: PPUSH
37556: PPUSH
// result := [ ] ;
37557: LD_ADDR_VAR 0 2
37561: PUSH
37562: EMPTY
37563: ST_TO_ADDR
// if not array then
37564: LD_VAR 0 1
37568: NOT
37569: IFFALSE 37573
// exit ;
37571: GO 37672
// Randomize ;
37573: CALL_OW 10
// for i = array downto 1 do
37577: LD_ADDR_VAR 0 3
37581: PUSH
37582: DOUBLE
37583: LD_VAR 0 1
37587: INC
37588: ST_TO_ADDR
37589: LD_INT 1
37591: PUSH
37592: FOR_DOWNTO
37593: IFFALSE 37670
// begin index := rand ( 1 , array ) ;
37595: LD_ADDR_VAR 0 4
37599: PUSH
37600: LD_INT 1
37602: PPUSH
37603: LD_VAR 0 1
37607: PPUSH
37608: CALL_OW 12
37612: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37613: LD_ADDR_VAR 0 2
37617: PUSH
37618: LD_VAR 0 2
37622: PPUSH
37623: LD_VAR 0 2
37627: PUSH
37628: LD_INT 1
37630: PLUS
37631: PPUSH
37632: LD_VAR 0 1
37636: PUSH
37637: LD_VAR 0 4
37641: ARRAY
37642: PPUSH
37643: CALL_OW 2
37647: ST_TO_ADDR
// array := Delete ( array , index ) ;
37648: LD_ADDR_VAR 0 1
37652: PUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: LD_VAR 0 4
37662: PPUSH
37663: CALL_OW 3
37667: ST_TO_ADDR
// end ;
37668: GO 37592
37670: POP
37671: POP
// end ;
37672: LD_VAR 0 2
37676: RET
// export function GetBaseMaterials ( base ) ; begin
37677: LD_INT 0
37679: PPUSH
// result := [ 0 , 0 , 0 ] ;
37680: LD_ADDR_VAR 0 2
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// if not base then
37699: LD_VAR 0 1
37703: NOT
37704: IFFALSE 37708
// exit ;
37706: GO 37757
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37708: LD_ADDR_VAR 0 2
37712: PUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: LD_INT 1
37720: PPUSH
37721: CALL_OW 275
37725: PUSH
37726: LD_VAR 0 1
37730: PPUSH
37731: LD_INT 2
37733: PPUSH
37734: CALL_OW 275
37738: PUSH
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_INT 3
37746: PPUSH
37747: CALL_OW 275
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: ST_TO_ADDR
// end ;
37757: LD_VAR 0 2
37761: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37762: LD_INT 0
37764: PPUSH
37765: PPUSH
// result := array ;
37766: LD_ADDR_VAR 0 3
37770: PUSH
37771: LD_VAR 0 1
37775: ST_TO_ADDR
// if size >= result then
37776: LD_VAR 0 2
37780: PUSH
37781: LD_VAR 0 3
37785: GREATEREQUAL
37786: IFFALSE 37790
// exit ;
37788: GO 37840
// if size then
37790: LD_VAR 0 2
37794: IFFALSE 37840
// for i := array downto size do
37796: LD_ADDR_VAR 0 4
37800: PUSH
37801: DOUBLE
37802: LD_VAR 0 1
37806: INC
37807: ST_TO_ADDR
37808: LD_VAR 0 2
37812: PUSH
37813: FOR_DOWNTO
37814: IFFALSE 37838
// result := Delete ( result , result ) ;
37816: LD_ADDR_VAR 0 3
37820: PUSH
37821: LD_VAR 0 3
37825: PPUSH
37826: LD_VAR 0 3
37830: PPUSH
37831: CALL_OW 3
37835: ST_TO_ADDR
37836: GO 37813
37838: POP
37839: POP
// end ;
37840: LD_VAR 0 3
37844: RET
// export function ComExit ( unit ) ; var tmp ; begin
37845: LD_INT 0
37847: PPUSH
37848: PPUSH
// if not IsInUnit ( unit ) then
37849: LD_VAR 0 1
37853: PPUSH
37854: CALL_OW 310
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 37923
// tmp := IsInUnit ( unit ) ;
37863: LD_ADDR_VAR 0 3
37867: PUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 310
37877: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37878: LD_VAR 0 3
37882: PPUSH
37883: CALL_OW 247
37887: PUSH
37888: LD_INT 2
37890: EQUAL
37891: IFFALSE 37904
// ComExitVehicle ( unit ) else
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 121
37902: GO 37913
// ComExitBuilding ( unit ) ;
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 122
// result := tmp ;
37913: LD_ADDR_VAR 0 2
37917: PUSH
37918: LD_VAR 0 3
37922: ST_TO_ADDR
// end ;
37923: LD_VAR 0 2
37927: RET
// export function ComExitAll ( units ) ; var i ; begin
37928: LD_INT 0
37930: PPUSH
37931: PPUSH
// if not units then
37932: LD_VAR 0 1
37936: NOT
37937: IFFALSE 37941
// exit ;
37939: GO 37967
// for i in units do
37941: LD_ADDR_VAR 0 3
37945: PUSH
37946: LD_VAR 0 1
37950: PUSH
37951: FOR_IN
37952: IFFALSE 37965
// ComExit ( i ) ;
37954: LD_VAR 0 3
37958: PPUSH
37959: CALL 37845 0 1
37963: GO 37951
37965: POP
37966: POP
// end ;
37967: LD_VAR 0 2
37971: RET
// export function ResetHc ; begin
37972: LD_INT 0
37974: PPUSH
// InitHc ;
37975: CALL_OW 19
// hc_importance := 0 ;
37979: LD_ADDR_OWVAR 32
37983: PUSH
37984: LD_INT 0
37986: ST_TO_ADDR
// end ;
37987: LD_VAR 0 1
37991: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37992: LD_INT 0
37994: PPUSH
37995: PPUSH
37996: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37997: LD_ADDR_VAR 0 6
38001: PUSH
38002: LD_VAR 0 1
38006: PUSH
38007: LD_VAR 0 3
38011: PLUS
38012: PUSH
38013: LD_INT 2
38015: DIV
38016: ST_TO_ADDR
// if _x < 0 then
38017: LD_VAR 0 6
38021: PUSH
38022: LD_INT 0
38024: LESS
38025: IFFALSE 38042
// _x := _x * - 1 ;
38027: LD_ADDR_VAR 0 6
38031: PUSH
38032: LD_VAR 0 6
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: MUL
38041: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38042: LD_ADDR_VAR 0 7
38046: PUSH
38047: LD_VAR 0 2
38051: PUSH
38052: LD_VAR 0 4
38056: PLUS
38057: PUSH
38058: LD_INT 2
38060: DIV
38061: ST_TO_ADDR
// if _y < 0 then
38062: LD_VAR 0 7
38066: PUSH
38067: LD_INT 0
38069: LESS
38070: IFFALSE 38087
// _y := _y * - 1 ;
38072: LD_ADDR_VAR 0 7
38076: PUSH
38077: LD_VAR 0 7
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: MUL
38086: ST_TO_ADDR
// result := [ _x , _y ] ;
38087: LD_ADDR_VAR 0 5
38091: PUSH
38092: LD_VAR 0 6
38096: PUSH
38097: LD_VAR 0 7
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: ST_TO_ADDR
// end ;
38106: LD_VAR 0 5
38110: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38111: LD_INT 0
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
// task := GetTaskList ( unit ) ;
38117: LD_ADDR_VAR 0 7
38121: PUSH
38122: LD_VAR 0 1
38126: PPUSH
38127: CALL_OW 437
38131: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38132: LD_VAR 0 7
38136: NOT
38137: PUSH
38138: LD_VAR 0 1
38142: PPUSH
38143: LD_VAR 0 2
38147: PPUSH
38148: CALL_OW 308
38152: NOT
38153: AND
38154: IFFALSE 38158
// exit ;
38156: GO 38276
// if IsInArea ( unit , area ) then
38158: LD_VAR 0 1
38162: PPUSH
38163: LD_VAR 0 2
38167: PPUSH
38168: CALL_OW 308
38172: IFFALSE 38190
// begin ComMoveToArea ( unit , goAway ) ;
38174: LD_VAR 0 1
38178: PPUSH
38179: LD_VAR 0 3
38183: PPUSH
38184: CALL_OW 113
// exit ;
38188: GO 38276
// end ; if task [ 1 ] [ 1 ] <> M then
38190: LD_VAR 0 7
38194: PUSH
38195: LD_INT 1
38197: ARRAY
38198: PUSH
38199: LD_INT 1
38201: ARRAY
38202: PUSH
38203: LD_STRING M
38205: NONEQUAL
38206: IFFALSE 38210
// exit ;
38208: GO 38276
// x := task [ 1 ] [ 2 ] ;
38210: LD_ADDR_VAR 0 5
38214: PUSH
38215: LD_VAR 0 7
38219: PUSH
38220: LD_INT 1
38222: ARRAY
38223: PUSH
38224: LD_INT 2
38226: ARRAY
38227: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38228: LD_ADDR_VAR 0 6
38232: PUSH
38233: LD_VAR 0 7
38237: PUSH
38238: LD_INT 1
38240: ARRAY
38241: PUSH
38242: LD_INT 3
38244: ARRAY
38245: ST_TO_ADDR
// if InArea ( x , y , area ) then
38246: LD_VAR 0 5
38250: PPUSH
38251: LD_VAR 0 6
38255: PPUSH
38256: LD_VAR 0 2
38260: PPUSH
38261: CALL_OW 309
38265: IFFALSE 38276
// ComStop ( unit ) ;
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 141
// end ;
38276: LD_VAR 0 4
38280: RET
// export function Abs ( value ) ; begin
38281: LD_INT 0
38283: PPUSH
// result := value ;
38284: LD_ADDR_VAR 0 2
38288: PUSH
38289: LD_VAR 0 1
38293: ST_TO_ADDR
// if value < 0 then
38294: LD_VAR 0 1
38298: PUSH
38299: LD_INT 0
38301: LESS
38302: IFFALSE 38319
// result := value * - 1 ;
38304: LD_ADDR_VAR 0 2
38308: PUSH
38309: LD_VAR 0 1
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: MUL
38318: ST_TO_ADDR
// end ;
38319: LD_VAR 0 2
38323: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38324: LD_INT 0
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
// if not unit or not building then
38334: LD_VAR 0 1
38338: NOT
38339: PUSH
38340: LD_VAR 0 2
38344: NOT
38345: OR
38346: IFFALSE 38350
// exit ;
38348: GO 38576
// x := GetX ( building ) ;
38350: LD_ADDR_VAR 0 4
38354: PUSH
38355: LD_VAR 0 2
38359: PPUSH
38360: CALL_OW 250
38364: ST_TO_ADDR
// y := GetY ( building ) ;
38365: LD_ADDR_VAR 0 6
38369: PUSH
38370: LD_VAR 0 2
38374: PPUSH
38375: CALL_OW 251
38379: ST_TO_ADDR
// d := GetDir ( building ) ;
38380: LD_ADDR_VAR 0 8
38384: PUSH
38385: LD_VAR 0 2
38389: PPUSH
38390: CALL_OW 254
38394: ST_TO_ADDR
// r := 4 ;
38395: LD_ADDR_VAR 0 9
38399: PUSH
38400: LD_INT 4
38402: ST_TO_ADDR
// for i := 1 to 5 do
38403: LD_ADDR_VAR 0 10
38407: PUSH
38408: DOUBLE
38409: LD_INT 1
38411: DEC
38412: ST_TO_ADDR
38413: LD_INT 5
38415: PUSH
38416: FOR_TO
38417: IFFALSE 38574
// begin _x := ShiftX ( x , d , r + i ) ;
38419: LD_ADDR_VAR 0 5
38423: PUSH
38424: LD_VAR 0 4
38428: PPUSH
38429: LD_VAR 0 8
38433: PPUSH
38434: LD_VAR 0 9
38438: PUSH
38439: LD_VAR 0 10
38443: PLUS
38444: PPUSH
38445: CALL_OW 272
38449: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38450: LD_ADDR_VAR 0 7
38454: PUSH
38455: LD_VAR 0 6
38459: PPUSH
38460: LD_VAR 0 8
38464: PPUSH
38465: LD_VAR 0 9
38469: PUSH
38470: LD_VAR 0 10
38474: PLUS
38475: PPUSH
38476: CALL_OW 273
38480: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38481: LD_VAR 0 5
38485: PPUSH
38486: LD_VAR 0 7
38490: PPUSH
38491: CALL_OW 488
38495: PUSH
38496: LD_VAR 0 5
38500: PPUSH
38501: LD_VAR 0 7
38505: PPUSH
38506: CALL_OW 428
38510: PPUSH
38511: CALL_OW 247
38515: PUSH
38516: LD_INT 3
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: IN
38526: NOT
38527: AND
38528: IFFALSE 38572
// begin ComMoveXY ( unit , _x , _y ) ;
38530: LD_VAR 0 1
38534: PPUSH
38535: LD_VAR 0 5
38539: PPUSH
38540: LD_VAR 0 7
38544: PPUSH
38545: CALL_OW 111
// result := [ _x , _y ] ;
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_VAR 0 5
38558: PUSH
38559: LD_VAR 0 7
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: ST_TO_ADDR
// exit ;
38568: POP
38569: POP
38570: GO 38576
// end ; end ;
38572: GO 38416
38574: POP
38575: POP
// end ;
38576: LD_VAR 0 3
38580: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38581: LD_INT 0
38583: PPUSH
38584: PPUSH
38585: PPUSH
// result := 0 ;
38586: LD_ADDR_VAR 0 3
38590: PUSH
38591: LD_INT 0
38593: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38594: LD_VAR 0 1
38598: PUSH
38599: LD_INT 0
38601: LESS
38602: PUSH
38603: LD_VAR 0 1
38607: PUSH
38608: LD_INT 8
38610: GREATER
38611: OR
38612: PUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_INT 0
38620: LESS
38621: OR
38622: PUSH
38623: LD_VAR 0 2
38627: PUSH
38628: LD_INT 8
38630: GREATER
38631: OR
38632: IFFALSE 38636
// exit ;
38634: GO 38711
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38636: LD_ADDR_VAR 0 4
38640: PUSH
38641: LD_INT 22
38643: PUSH
38644: LD_VAR 0 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PPUSH
38653: CALL_OW 69
38657: PUSH
38658: FOR_IN
38659: IFFALSE 38709
// begin un := UnitShoot ( i ) ;
38661: LD_ADDR_VAR 0 5
38665: PUSH
38666: LD_VAR 0 4
38670: PPUSH
38671: CALL_OW 504
38675: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38676: LD_VAR 0 5
38680: PPUSH
38681: CALL_OW 255
38685: PUSH
38686: LD_VAR 0 1
38690: EQUAL
38691: IFFALSE 38707
// begin result := un ;
38693: LD_ADDR_VAR 0 3
38697: PUSH
38698: LD_VAR 0 5
38702: ST_TO_ADDR
// exit ;
38703: POP
38704: POP
38705: GO 38711
// end ; end ;
38707: GO 38658
38709: POP
38710: POP
// end ;
38711: LD_VAR 0 3
38715: RET
// export function GetCargoBay ( units ) ; begin
38716: LD_INT 0
38718: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38719: LD_ADDR_VAR 0 2
38723: PUSH
38724: LD_VAR 0 1
38728: PPUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 34
38734: PUSH
38735: LD_INT 12
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 34
38744: PUSH
38745: LD_INT 51
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 34
38754: PUSH
38755: LD_INT 32
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 34
38764: PUSH
38765: LD_INT 89
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: PPUSH
38779: CALL_OW 72
38783: ST_TO_ADDR
// end ;
38784: LD_VAR 0 2
38788: RET
// export function Negate ( value ) ; begin
38789: LD_INT 0
38791: PPUSH
// result := not value ;
38792: LD_ADDR_VAR 0 2
38796: PUSH
38797: LD_VAR 0 1
38801: NOT
38802: ST_TO_ADDR
// end ;
38803: LD_VAR 0 2
38807: RET
// export function Inc ( value ) ; begin
38808: LD_INT 0
38810: PPUSH
// result := value + 1 ;
38811: LD_ADDR_VAR 0 2
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: LD_INT 1
38823: PLUS
38824: ST_TO_ADDR
// end ;
38825: LD_VAR 0 2
38829: RET
// export function Dec ( value ) ; begin
38830: LD_INT 0
38832: PPUSH
// result := value - 1 ;
38833: LD_ADDR_VAR 0 2
38837: PUSH
38838: LD_VAR 0 1
38842: PUSH
38843: LD_INT 1
38845: MINUS
38846: ST_TO_ADDR
// end ;
38847: LD_VAR 0 2
38851: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38852: LD_INT 0
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: CALL_OW 488
38876: NOT
38877: PUSH
38878: LD_VAR 0 3
38882: PPUSH
38883: LD_VAR 0 4
38887: PPUSH
38888: CALL_OW 488
38892: NOT
38893: OR
38894: IFFALSE 38907
// begin result := - 1 ;
38896: LD_ADDR_VAR 0 5
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: ST_TO_ADDR
// exit ;
38905: GO 39142
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
38907: LD_ADDR_VAR 0 12
38911: PUSH
38912: LD_VAR 0 1
38916: PPUSH
38917: LD_VAR 0 2
38921: PPUSH
38922: LD_VAR 0 3
38926: PPUSH
38927: LD_VAR 0 4
38931: PPUSH
38932: CALL 37992 0 4
38936: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
38937: LD_ADDR_VAR 0 11
38941: PUSH
38942: LD_VAR 0 1
38946: PPUSH
38947: LD_VAR 0 2
38951: PPUSH
38952: LD_VAR 0 12
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PPUSH
38961: LD_VAR 0 12
38965: PUSH
38966: LD_INT 2
38968: ARRAY
38969: PPUSH
38970: CALL_OW 298
38974: ST_TO_ADDR
// distance := 9999 ;
38975: LD_ADDR_VAR 0 10
38979: PUSH
38980: LD_INT 9999
38982: ST_TO_ADDR
// for i := 0 to 5 do
38983: LD_ADDR_VAR 0 6
38987: PUSH
38988: DOUBLE
38989: LD_INT 0
38991: DEC
38992: ST_TO_ADDR
38993: LD_INT 5
38995: PUSH
38996: FOR_TO
38997: IFFALSE 39140
// begin _x := ShiftX ( x1 , i , centerDist ) ;
38999: LD_ADDR_VAR 0 7
39003: PUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: LD_VAR 0 6
39013: PPUSH
39014: LD_VAR 0 11
39018: PPUSH
39019: CALL_OW 272
39023: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39024: LD_ADDR_VAR 0 8
39028: PUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: LD_VAR 0 6
39038: PPUSH
39039: LD_VAR 0 11
39043: PPUSH
39044: CALL_OW 273
39048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39049: LD_VAR 0 7
39053: PPUSH
39054: LD_VAR 0 8
39058: PPUSH
39059: CALL_OW 488
39063: NOT
39064: IFFALSE 39068
// continue ;
39066: GO 38996
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39068: LD_ADDR_VAR 0 9
39072: PUSH
39073: LD_VAR 0 12
39077: PUSH
39078: LD_INT 1
39080: ARRAY
39081: PPUSH
39082: LD_VAR 0 12
39086: PUSH
39087: LD_INT 2
39089: ARRAY
39090: PPUSH
39091: LD_VAR 0 7
39095: PPUSH
39096: LD_VAR 0 8
39100: PPUSH
39101: CALL_OW 298
39105: ST_TO_ADDR
// if tmp < distance then
39106: LD_VAR 0 9
39110: PUSH
39111: LD_VAR 0 10
39115: LESS
39116: IFFALSE 39138
// begin result := i ;
39118: LD_ADDR_VAR 0 5
39122: PUSH
39123: LD_VAR 0 6
39127: ST_TO_ADDR
// distance := tmp ;
39128: LD_ADDR_VAR 0 10
39132: PUSH
39133: LD_VAR 0 9
39137: ST_TO_ADDR
// end ; end ;
39138: GO 38996
39140: POP
39141: POP
// end ;
39142: LD_VAR 0 5
39146: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39147: LD_INT 0
39149: PPUSH
39150: PPUSH
// if not driver or not IsInUnit ( driver ) then
39151: LD_VAR 0 1
39155: NOT
39156: PUSH
39157: LD_VAR 0 1
39161: PPUSH
39162: CALL_OW 310
39166: NOT
39167: OR
39168: IFFALSE 39172
// exit ;
39170: GO 39262
// vehicle := IsInUnit ( driver ) ;
39172: LD_ADDR_VAR 0 3
39176: PUSH
39177: LD_VAR 0 1
39181: PPUSH
39182: CALL_OW 310
39186: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39187: LD_VAR 0 1
39191: PPUSH
39192: LD_STRING \
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: PUSH
39222: LD_STRING E
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_VAR 0 3
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PPUSH
39258: CALL_OW 446
// end ;
39262: LD_VAR 0 2
39266: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39267: LD_INT 0
39269: PPUSH
39270: PPUSH
// if not driver or not IsInUnit ( driver ) then
39271: LD_VAR 0 1
39275: NOT
39276: PUSH
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL_OW 310
39286: NOT
39287: OR
39288: IFFALSE 39292
// exit ;
39290: GO 39382
// vehicle := IsInUnit ( driver ) ;
39292: LD_ADDR_VAR 0 3
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: CALL_OW 310
39306: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39307: LD_VAR 0 1
39311: PPUSH
39312: LD_STRING \
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_STRING E
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_VAR 0 3
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PPUSH
39378: CALL_OW 447
// end ;
39382: LD_VAR 0 2
39386: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39387: LD_INT 0
39389: PPUSH
39390: PPUSH
39391: PPUSH
// tmp := [ ] ;
39392: LD_ADDR_VAR 0 5
39396: PUSH
39397: EMPTY
39398: ST_TO_ADDR
// for i in units do
39399: LD_ADDR_VAR 0 4
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: FOR_IN
39410: IFFALSE 39448
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39412: LD_ADDR_VAR 0 5
39416: PUSH
39417: LD_VAR 0 5
39421: PPUSH
39422: LD_VAR 0 5
39426: PUSH
39427: LD_INT 1
39429: PLUS
39430: PPUSH
39431: LD_VAR 0 4
39435: PPUSH
39436: CALL_OW 256
39440: PPUSH
39441: CALL_OW 2
39445: ST_TO_ADDR
39446: GO 39409
39448: POP
39449: POP
// if not tmp then
39450: LD_VAR 0 5
39454: NOT
39455: IFFALSE 39459
// exit ;
39457: GO 39507
// if asc then
39459: LD_VAR 0 2
39463: IFFALSE 39487
// result := SortListByListAsc ( units , tmp ) else
39465: LD_ADDR_VAR 0 3
39469: PUSH
39470: LD_VAR 0 1
39474: PPUSH
39475: LD_VAR 0 5
39479: PPUSH
39480: CALL_OW 76
39484: ST_TO_ADDR
39485: GO 39507
// result := SortListByListDesc ( units , tmp ) ;
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: LD_VAR 0 5
39501: PPUSH
39502: CALL_OW 77
39506: ST_TO_ADDR
// end ;
39507: LD_VAR 0 3
39511: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39512: LD_INT 0
39514: PPUSH
39515: PPUSH
// task := GetTaskList ( mech ) ;
39516: LD_ADDR_VAR 0 4
39520: PUSH
39521: LD_VAR 0 1
39525: PPUSH
39526: CALL_OW 437
39530: ST_TO_ADDR
// if not task then
39531: LD_VAR 0 4
39535: NOT
39536: IFFALSE 39540
// exit ;
39538: GO 39582
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39540: LD_ADDR_VAR 0 3
39544: PUSH
39545: LD_VAR 0 4
39549: PUSH
39550: LD_INT 1
39552: ARRAY
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: PUSH
39558: LD_STRING r
39560: EQUAL
39561: PUSH
39562: LD_VAR 0 4
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: PUSH
39571: LD_INT 4
39573: ARRAY
39574: PUSH
39575: LD_VAR 0 2
39579: EQUAL
39580: AND
39581: ST_TO_ADDR
// end ;
39582: LD_VAR 0 3
39586: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39587: LD_INT 0
39589: PPUSH
// SetDir ( unit , d ) ;
39590: LD_VAR 0 1
39594: PPUSH
39595: LD_VAR 0 4
39599: PPUSH
39600: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39604: LD_VAR 0 1
39608: PPUSH
39609: LD_VAR 0 2
39613: PPUSH
39614: LD_VAR 0 3
39618: PPUSH
39619: LD_VAR 0 5
39623: PPUSH
39624: CALL_OW 48
// end ;
39628: LD_VAR 0 6
39632: RET
// export function ToNaturalNumber ( number ) ; begin
39633: LD_INT 0
39635: PPUSH
// result := number div 1 ;
39636: LD_ADDR_VAR 0 2
39640: PUSH
39641: LD_VAR 0 1
39645: PUSH
39646: LD_INT 1
39648: DIV
39649: ST_TO_ADDR
// if number < 0 then
39650: LD_VAR 0 1
39654: PUSH
39655: LD_INT 0
39657: LESS
39658: IFFALSE 39668
// result := 0 ;
39660: LD_ADDR_VAR 0 2
39664: PUSH
39665: LD_INT 0
39667: ST_TO_ADDR
// end ;
39668: LD_VAR 0 2
39672: RET
// export function SortByClass ( units , class ) ; var un ; begin
39673: LD_INT 0
39675: PPUSH
39676: PPUSH
// if not units or not class then
39677: LD_VAR 0 1
39681: NOT
39682: PUSH
39683: LD_VAR 0 2
39687: NOT
39688: OR
39689: IFFALSE 39693
// exit ;
39691: GO 39788
// result := [ ] ;
39693: LD_ADDR_VAR 0 3
39697: PUSH
39698: EMPTY
39699: ST_TO_ADDR
// for un in units do
39700: LD_ADDR_VAR 0 4
39704: PUSH
39705: LD_VAR 0 1
39709: PUSH
39710: FOR_IN
39711: IFFALSE 39786
// if GetClass ( un ) = class then
39713: LD_VAR 0 4
39717: PPUSH
39718: CALL_OW 257
39722: PUSH
39723: LD_VAR 0 2
39727: EQUAL
39728: IFFALSE 39755
// result := Insert ( result , 1 , un ) else
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: LD_VAR 0 3
39739: PPUSH
39740: LD_INT 1
39742: PPUSH
39743: LD_VAR 0 4
39747: PPUSH
39748: CALL_OW 2
39752: ST_TO_ADDR
39753: GO 39784
// result := Replace ( result , result + 1 , un ) ;
39755: LD_ADDR_VAR 0 3
39759: PUSH
39760: LD_VAR 0 3
39764: PPUSH
39765: LD_VAR 0 3
39769: PUSH
39770: LD_INT 1
39772: PLUS
39773: PPUSH
39774: LD_VAR 0 4
39778: PPUSH
39779: CALL_OW 1
39783: ST_TO_ADDR
39784: GO 39710
39786: POP
39787: POP
// end ;
39788: LD_VAR 0 3
39792: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39793: LD_INT 0
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
// result := [ ] ;
39802: LD_ADDR_VAR 0 4
39806: PUSH
39807: EMPTY
39808: ST_TO_ADDR
// if x - r < 0 then
39809: LD_VAR 0 1
39813: PUSH
39814: LD_VAR 0 3
39818: MINUS
39819: PUSH
39820: LD_INT 0
39822: LESS
39823: IFFALSE 39835
// min_x := 0 else
39825: LD_ADDR_VAR 0 8
39829: PUSH
39830: LD_INT 0
39832: ST_TO_ADDR
39833: GO 39851
// min_x := x - r ;
39835: LD_ADDR_VAR 0 8
39839: PUSH
39840: LD_VAR 0 1
39844: PUSH
39845: LD_VAR 0 3
39849: MINUS
39850: ST_TO_ADDR
// if y - r < 0 then
39851: LD_VAR 0 2
39855: PUSH
39856: LD_VAR 0 3
39860: MINUS
39861: PUSH
39862: LD_INT 0
39864: LESS
39865: IFFALSE 39877
// min_y := 0 else
39867: LD_ADDR_VAR 0 7
39871: PUSH
39872: LD_INT 0
39874: ST_TO_ADDR
39875: GO 39893
// min_y := y - r ;
39877: LD_ADDR_VAR 0 7
39881: PUSH
39882: LD_VAR 0 2
39886: PUSH
39887: LD_VAR 0 3
39891: MINUS
39892: ST_TO_ADDR
// max_x := x + r ;
39893: LD_ADDR_VAR 0 9
39897: PUSH
39898: LD_VAR 0 1
39902: PUSH
39903: LD_VAR 0 3
39907: PLUS
39908: ST_TO_ADDR
// max_y := y + r ;
39909: LD_ADDR_VAR 0 10
39913: PUSH
39914: LD_VAR 0 2
39918: PUSH
39919: LD_VAR 0 3
39923: PLUS
39924: ST_TO_ADDR
// for _x = min_x to max_x do
39925: LD_ADDR_VAR 0 5
39929: PUSH
39930: DOUBLE
39931: LD_VAR 0 8
39935: DEC
39936: ST_TO_ADDR
39937: LD_VAR 0 9
39941: PUSH
39942: FOR_TO
39943: IFFALSE 40044
// for _y = min_y to max_y do
39945: LD_ADDR_VAR 0 6
39949: PUSH
39950: DOUBLE
39951: LD_VAR 0 7
39955: DEC
39956: ST_TO_ADDR
39957: LD_VAR 0 10
39961: PUSH
39962: FOR_TO
39963: IFFALSE 40040
// begin if not ValidHex ( _x , _y ) then
39965: LD_VAR 0 5
39969: PPUSH
39970: LD_VAR 0 6
39974: PPUSH
39975: CALL_OW 488
39979: NOT
39980: IFFALSE 39984
// continue ;
39982: GO 39962
// if GetResourceTypeXY ( _x , _y ) then
39984: LD_VAR 0 5
39988: PPUSH
39989: LD_VAR 0 6
39993: PPUSH
39994: CALL_OW 283
39998: IFFALSE 40038
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40000: LD_ADDR_VAR 0 4
40004: PUSH
40005: LD_VAR 0 4
40009: PPUSH
40010: LD_VAR 0 4
40014: PUSH
40015: LD_INT 1
40017: PLUS
40018: PPUSH
40019: LD_VAR 0 5
40023: PUSH
40024: LD_VAR 0 6
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PPUSH
40033: CALL_OW 1
40037: ST_TO_ADDR
// end ;
40038: GO 39962
40040: POP
40041: POP
40042: GO 39942
40044: POP
40045: POP
// end ;
40046: LD_VAR 0 4
40050: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40051: LD_INT 0
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
// if not units then
40061: LD_VAR 0 1
40065: NOT
40066: IFFALSE 40070
// exit ;
40068: GO 40594
// result := UnitFilter ( units , [ f_ok ] ) ;
40070: LD_ADDR_VAR 0 3
40074: PUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: LD_INT 50
40082: PUSH
40083: EMPTY
40084: LIST
40085: PPUSH
40086: CALL_OW 72
40090: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40091: LD_ADDR_VAR 0 8
40095: PUSH
40096: LD_VAR 0 1
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PPUSH
40105: CALL_OW 255
40109: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40110: LD_ADDR_VAR 0 10
40114: PUSH
40115: LD_INT 29
40117: PUSH
40118: LD_INT 91
40120: PUSH
40121: LD_INT 49
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: ST_TO_ADDR
// if not result then
40129: LD_VAR 0 3
40133: NOT
40134: IFFALSE 40138
// exit ;
40136: GO 40594
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40138: LD_ADDR_VAR 0 5
40142: PUSH
40143: LD_INT 81
40145: PUSH
40146: LD_VAR 0 8
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PPUSH
40155: CALL_OW 69
40159: ST_TO_ADDR
// for i in result do
40160: LD_ADDR_VAR 0 4
40164: PUSH
40165: LD_VAR 0 3
40169: PUSH
40170: FOR_IN
40171: IFFALSE 40592
// begin tag := GetTag ( i ) + 1 ;
40173: LD_ADDR_VAR 0 9
40177: PUSH
40178: LD_VAR 0 4
40182: PPUSH
40183: CALL_OW 110
40187: PUSH
40188: LD_INT 1
40190: PLUS
40191: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40192: LD_ADDR_VAR 0 7
40196: PUSH
40197: LD_VAR 0 4
40201: PPUSH
40202: CALL_OW 250
40206: PPUSH
40207: LD_VAR 0 4
40211: PPUSH
40212: CALL_OW 251
40216: PPUSH
40217: LD_INT 6
40219: PPUSH
40220: CALL 39793 0 3
40224: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40225: LD_VAR 0 4
40229: PPUSH
40230: CALL_OW 247
40234: PUSH
40235: LD_INT 2
40237: EQUAL
40238: PUSH
40239: LD_VAR 0 7
40243: AND
40244: PUSH
40245: LD_VAR 0 4
40249: PPUSH
40250: CALL_OW 264
40254: PUSH
40255: LD_VAR 0 10
40259: IN
40260: NOT
40261: AND
40262: IFFALSE 40301
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40264: LD_VAR 0 4
40268: PPUSH
40269: LD_VAR 0 7
40273: PUSH
40274: LD_INT 1
40276: ARRAY
40277: PUSH
40278: LD_INT 1
40280: ARRAY
40281: PPUSH
40282: LD_VAR 0 7
40286: PUSH
40287: LD_INT 1
40289: ARRAY
40290: PUSH
40291: LD_INT 2
40293: ARRAY
40294: PPUSH
40295: CALL_OW 116
40299: GO 40590
// if path > tag then
40301: LD_VAR 0 2
40305: PUSH
40306: LD_VAR 0 9
40310: GREATER
40311: IFFALSE 40519
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40313: LD_ADDR_VAR 0 6
40317: PUSH
40318: LD_VAR 0 5
40322: PPUSH
40323: LD_INT 91
40325: PUSH
40326: LD_VAR 0 4
40330: PUSH
40331: LD_INT 8
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: PPUSH
40339: CALL_OW 72
40343: ST_TO_ADDR
// if nearEnemy then
40344: LD_VAR 0 6
40348: IFFALSE 40417
// begin if GetWeapon ( i ) = ru_time_lapser then
40350: LD_VAR 0 4
40354: PPUSH
40355: CALL_OW 264
40359: PUSH
40360: LD_INT 49
40362: EQUAL
40363: IFFALSE 40391
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40365: LD_VAR 0 4
40369: PPUSH
40370: LD_VAR 0 6
40374: PPUSH
40375: LD_VAR 0 4
40379: PPUSH
40380: CALL_OW 74
40384: PPUSH
40385: CALL_OW 112
40389: GO 40415
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40391: LD_VAR 0 4
40395: PPUSH
40396: LD_VAR 0 6
40400: PPUSH
40401: LD_VAR 0 4
40405: PPUSH
40406: CALL_OW 74
40410: PPUSH
40411: CALL 41519 0 2
// end else
40415: GO 40517
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40417: LD_VAR 0 4
40421: PPUSH
40422: LD_VAR 0 2
40426: PUSH
40427: LD_VAR 0 9
40431: ARRAY
40432: PUSH
40433: LD_INT 1
40435: ARRAY
40436: PPUSH
40437: LD_VAR 0 2
40441: PUSH
40442: LD_VAR 0 9
40446: ARRAY
40447: PUSH
40448: LD_INT 2
40450: ARRAY
40451: PPUSH
40452: CALL_OW 297
40456: PUSH
40457: LD_INT 6
40459: GREATER
40460: IFFALSE 40503
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40462: LD_VAR 0 4
40466: PPUSH
40467: LD_VAR 0 2
40471: PUSH
40472: LD_VAR 0 9
40476: ARRAY
40477: PUSH
40478: LD_INT 1
40480: ARRAY
40481: PPUSH
40482: LD_VAR 0 2
40486: PUSH
40487: LD_VAR 0 9
40491: ARRAY
40492: PUSH
40493: LD_INT 2
40495: ARRAY
40496: PPUSH
40497: CALL_OW 114
40501: GO 40517
// SetTag ( i , tag ) ;
40503: LD_VAR 0 4
40507: PPUSH
40508: LD_VAR 0 9
40512: PPUSH
40513: CALL_OW 109
// end else
40517: GO 40590
// if enemy then
40519: LD_VAR 0 5
40523: IFFALSE 40590
// begin if GetWeapon ( i ) = ru_time_lapser then
40525: LD_VAR 0 4
40529: PPUSH
40530: CALL_OW 264
40534: PUSH
40535: LD_INT 49
40537: EQUAL
40538: IFFALSE 40566
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40540: LD_VAR 0 4
40544: PPUSH
40545: LD_VAR 0 5
40549: PPUSH
40550: LD_VAR 0 4
40554: PPUSH
40555: CALL_OW 74
40559: PPUSH
40560: CALL_OW 112
40564: GO 40590
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40566: LD_VAR 0 4
40570: PPUSH
40571: LD_VAR 0 5
40575: PPUSH
40576: LD_VAR 0 4
40580: PPUSH
40581: CALL_OW 74
40585: PPUSH
40586: CALL 41519 0 2
// end ; end ;
40590: GO 40170
40592: POP
40593: POP
// end ;
40594: LD_VAR 0 3
40598: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40599: LD_INT 0
40601: PPUSH
40602: PPUSH
40603: PPUSH
// if not unit or IsInUnit ( unit ) then
40604: LD_VAR 0 1
40608: NOT
40609: PUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 310
40619: OR
40620: IFFALSE 40624
// exit ;
40622: GO 40715
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40624: LD_ADDR_VAR 0 4
40628: PUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: CALL_OW 250
40638: PPUSH
40639: LD_VAR 0 2
40643: PPUSH
40644: LD_INT 1
40646: PPUSH
40647: CALL_OW 272
40651: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40652: LD_ADDR_VAR 0 5
40656: PUSH
40657: LD_VAR 0 1
40661: PPUSH
40662: CALL_OW 251
40666: PPUSH
40667: LD_VAR 0 2
40671: PPUSH
40672: LD_INT 1
40674: PPUSH
40675: CALL_OW 273
40679: ST_TO_ADDR
// if ValidHex ( x , y ) then
40680: LD_VAR 0 4
40684: PPUSH
40685: LD_VAR 0 5
40689: PPUSH
40690: CALL_OW 488
40694: IFFALSE 40715
// ComTurnXY ( unit , x , y ) ;
40696: LD_VAR 0 1
40700: PPUSH
40701: LD_VAR 0 4
40705: PPUSH
40706: LD_VAR 0 5
40710: PPUSH
40711: CALL_OW 118
// end ;
40715: LD_VAR 0 3
40719: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40720: LD_INT 0
40722: PPUSH
40723: PPUSH
// result := false ;
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_INT 0
40731: ST_TO_ADDR
// if not units then
40732: LD_VAR 0 2
40736: NOT
40737: IFFALSE 40741
// exit ;
40739: GO 40786
// for i in units do
40741: LD_ADDR_VAR 0 4
40745: PUSH
40746: LD_VAR 0 2
40750: PUSH
40751: FOR_IN
40752: IFFALSE 40784
// if See ( side , i ) then
40754: LD_VAR 0 1
40758: PPUSH
40759: LD_VAR 0 4
40763: PPUSH
40764: CALL_OW 292
40768: IFFALSE 40782
// begin result := true ;
40770: LD_ADDR_VAR 0 3
40774: PUSH
40775: LD_INT 1
40777: ST_TO_ADDR
// exit ;
40778: POP
40779: POP
40780: GO 40786
// end ;
40782: GO 40751
40784: POP
40785: POP
// end ;
40786: LD_VAR 0 3
40790: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40791: LD_INT 0
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
// if not unit or not points then
40797: LD_VAR 0 1
40801: NOT
40802: PUSH
40803: LD_VAR 0 2
40807: NOT
40808: OR
40809: IFFALSE 40813
// exit ;
40811: GO 40903
// dist := 99999 ;
40813: LD_ADDR_VAR 0 5
40817: PUSH
40818: LD_INT 99999
40820: ST_TO_ADDR
// for i in points do
40821: LD_ADDR_VAR 0 4
40825: PUSH
40826: LD_VAR 0 2
40830: PUSH
40831: FOR_IN
40832: IFFALSE 40901
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40834: LD_ADDR_VAR 0 6
40838: PUSH
40839: LD_VAR 0 1
40843: PPUSH
40844: LD_VAR 0 4
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: PPUSH
40853: LD_VAR 0 4
40857: PUSH
40858: LD_INT 2
40860: ARRAY
40861: PPUSH
40862: CALL_OW 297
40866: ST_TO_ADDR
// if tmpDist < dist then
40867: LD_VAR 0 6
40871: PUSH
40872: LD_VAR 0 5
40876: LESS
40877: IFFALSE 40899
// begin result := i ;
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_VAR 0 4
40888: ST_TO_ADDR
// dist := tmpDist ;
40889: LD_ADDR_VAR 0 5
40893: PUSH
40894: LD_VAR 0 6
40898: ST_TO_ADDR
// end ; end ;
40899: GO 40831
40901: POP
40902: POP
// end ;
40903: LD_VAR 0 3
40907: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
40908: LD_INT 0
40910: PPUSH
// uc_side := side ;
40911: LD_ADDR_OWVAR 20
40915: PUSH
40916: LD_VAR 0 1
40920: ST_TO_ADDR
// uc_nation := 3 ;
40921: LD_ADDR_OWVAR 21
40925: PUSH
40926: LD_INT 3
40928: ST_TO_ADDR
// vc_chassis := 25 ;
40929: LD_ADDR_OWVAR 37
40933: PUSH
40934: LD_INT 25
40936: ST_TO_ADDR
// vc_engine := engine_siberite ;
40937: LD_ADDR_OWVAR 39
40941: PUSH
40942: LD_INT 3
40944: ST_TO_ADDR
// vc_control := control_computer ;
40945: LD_ADDR_OWVAR 38
40949: PUSH
40950: LD_INT 3
40952: ST_TO_ADDR
// vc_weapon := 59 ;
40953: LD_ADDR_OWVAR 40
40957: PUSH
40958: LD_INT 59
40960: ST_TO_ADDR
// result := CreateVehicle ;
40961: LD_ADDR_VAR 0 5
40965: PUSH
40966: CALL_OW 45
40970: ST_TO_ADDR
// SetDir ( result , d ) ;
40971: LD_VAR 0 5
40975: PPUSH
40976: LD_VAR 0 4
40980: PPUSH
40981: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
40985: LD_VAR 0 5
40989: PPUSH
40990: LD_VAR 0 2
40994: PPUSH
40995: LD_VAR 0 3
40999: PPUSH
41000: LD_INT 0
41002: PPUSH
41003: CALL_OW 48
// end ;
41007: LD_VAR 0 5
41011: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41012: LD_INT 0
41014: PPUSH
41015: PPUSH
41016: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41017: LD_ADDR_VAR 0 2
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41040: LD_VAR 0 1
41044: NOT
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 264
41055: PUSH
41056: LD_INT 12
41058: PUSH
41059: LD_INT 51
41061: PUSH
41062: LD_INT 32
41064: PUSH
41065: LD_INT 89
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: IN
41074: NOT
41075: OR
41076: IFFALSE 41080
// exit ;
41078: GO 41178
// for i := 1 to 3 do
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: DOUBLE
41086: LD_INT 1
41088: DEC
41089: ST_TO_ADDR
41090: LD_INT 3
41092: PUSH
41093: FOR_TO
41094: IFFALSE 41176
// begin tmp := GetCargo ( cargo , i ) ;
41096: LD_ADDR_VAR 0 4
41100: PUSH
41101: LD_VAR 0 1
41105: PPUSH
41106: LD_VAR 0 3
41110: PPUSH
41111: CALL_OW 289
41115: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41116: LD_ADDR_VAR 0 2
41120: PUSH
41121: LD_VAR 0 2
41125: PPUSH
41126: LD_VAR 0 3
41130: PPUSH
41131: LD_VAR 0 4
41135: PPUSH
41136: CALL_OW 1
41140: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41141: LD_ADDR_VAR 0 2
41145: PUSH
41146: LD_VAR 0 2
41150: PPUSH
41151: LD_INT 4
41153: PPUSH
41154: LD_VAR 0 2
41158: PUSH
41159: LD_INT 4
41161: ARRAY
41162: PUSH
41163: LD_VAR 0 4
41167: PLUS
41168: PPUSH
41169: CALL_OW 1
41173: ST_TO_ADDR
// end ;
41174: GO 41093
41176: POP
41177: POP
// end ;
41178: LD_VAR 0 2
41182: RET
// export function Length ( array ) ; begin
41183: LD_INT 0
41185: PPUSH
// result := array + 0 ;
41186: LD_ADDR_VAR 0 2
41190: PUSH
41191: LD_VAR 0 1
41195: PUSH
41196: LD_INT 0
41198: PLUS
41199: ST_TO_ADDR
// end ;
41200: LD_VAR 0 2
41204: RET
// export function PrepareArray ( array ) ; begin
41205: LD_INT 0
41207: PPUSH
// result := array diff 0 ;
41208: LD_ADDR_VAR 0 2
41212: PUSH
41213: LD_VAR 0 1
41217: PUSH
41218: LD_INT 0
41220: DIFF
41221: ST_TO_ADDR
// if not result [ 1 ] then
41222: LD_VAR 0 2
41226: PUSH
41227: LD_INT 1
41229: ARRAY
41230: NOT
41231: IFFALSE 41251
// result := Delete ( result , 1 ) ;
41233: LD_ADDR_VAR 0 2
41237: PUSH
41238: LD_VAR 0 2
41242: PPUSH
41243: LD_INT 1
41245: PPUSH
41246: CALL_OW 3
41250: ST_TO_ADDR
// end ;
41251: LD_VAR 0 2
41255: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41256: LD_INT 0
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
// sibRocketRange := 25 ;
41262: LD_ADDR_VAR 0 6
41266: PUSH
41267: LD_INT 25
41269: ST_TO_ADDR
// result := false ;
41270: LD_ADDR_VAR 0 4
41274: PUSH
41275: LD_INT 0
41277: ST_TO_ADDR
// for i := 0 to 5 do
41278: LD_ADDR_VAR 0 5
41282: PUSH
41283: DOUBLE
41284: LD_INT 0
41286: DEC
41287: ST_TO_ADDR
41288: LD_INT 5
41290: PUSH
41291: FOR_TO
41292: IFFALSE 41359
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41294: LD_VAR 0 1
41298: PPUSH
41299: LD_VAR 0 5
41303: PPUSH
41304: LD_VAR 0 6
41308: PPUSH
41309: CALL_OW 272
41313: PPUSH
41314: LD_VAR 0 2
41318: PPUSH
41319: LD_VAR 0 5
41323: PPUSH
41324: LD_VAR 0 6
41328: PPUSH
41329: CALL_OW 273
41333: PPUSH
41334: LD_VAR 0 3
41338: PPUSH
41339: CALL_OW 309
41343: IFFALSE 41357
// begin result := true ;
41345: LD_ADDR_VAR 0 4
41349: PUSH
41350: LD_INT 1
41352: ST_TO_ADDR
// exit ;
41353: POP
41354: POP
41355: GO 41361
// end ;
41357: GO 41291
41359: POP
41360: POP
// end ;
41361: LD_VAR 0 4
41365: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41366: LD_INT 0
41368: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41369: LD_VAR 0 1
41373: PPUSH
41374: LD_VAR 0 2
41378: PPUSH
41379: LD_INT 0
41381: PPUSH
41382: LD_INT 0
41384: PPUSH
41385: LD_INT 1
41387: PPUSH
41388: LD_INT 0
41390: PPUSH
41391: CALL_OW 587
// end ;
41395: LD_VAR 0 3
41399: RET
// export function CenterOnNow ( unit ) ; begin
41400: LD_INT 0
41402: PPUSH
// result := IsInUnit ( unit ) ;
41403: LD_ADDR_VAR 0 2
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: CALL_OW 310
41417: ST_TO_ADDR
// if not result then
41418: LD_VAR 0 2
41422: NOT
41423: IFFALSE 41435
// result := unit ;
41425: LD_ADDR_VAR 0 2
41429: PUSH
41430: LD_VAR 0 1
41434: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41435: LD_VAR 0 1
41439: PPUSH
41440: CALL_OW 87
// end ;
41444: LD_VAR 0 2
41448: RET
// export function ComMoveHex ( unit , hex ) ; begin
41449: LD_INT 0
41451: PPUSH
// if not hex then
41452: LD_VAR 0 2
41456: NOT
41457: IFFALSE 41461
// exit ;
41459: GO 41514
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41461: LD_VAR 0 2
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: PPUSH
41470: LD_VAR 0 2
41474: PUSH
41475: LD_INT 2
41477: ARRAY
41478: PPUSH
41479: CALL_OW 428
41483: IFFALSE 41487
// exit ;
41485: GO 41514
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41487: LD_VAR 0 1
41491: PPUSH
41492: LD_VAR 0 2
41496: PUSH
41497: LD_INT 1
41499: ARRAY
41500: PPUSH
41501: LD_VAR 0 2
41505: PUSH
41506: LD_INT 2
41508: ARRAY
41509: PPUSH
41510: CALL_OW 111
// end ;
41514: LD_VAR 0 3
41518: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
41519: LD_INT 0
41521: PPUSH
41522: PPUSH
41523: PPUSH
// if not unit or not enemy then
41524: LD_VAR 0 1
41528: NOT
41529: PUSH
41530: LD_VAR 0 2
41534: NOT
41535: OR
41536: IFFALSE 41540
// exit ;
41538: GO 41664
// x := GetX ( enemy ) ;
41540: LD_ADDR_VAR 0 4
41544: PUSH
41545: LD_VAR 0 2
41549: PPUSH
41550: CALL_OW 250
41554: ST_TO_ADDR
// y := GetY ( enemy ) ;
41555: LD_ADDR_VAR 0 5
41559: PUSH
41560: LD_VAR 0 2
41564: PPUSH
41565: CALL_OW 251
41569: ST_TO_ADDR
// if ValidHex ( x , y ) then
41570: LD_VAR 0 4
41574: PPUSH
41575: LD_VAR 0 5
41579: PPUSH
41580: CALL_OW 488
41584: IFFALSE 41664
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
41586: LD_VAR 0 2
41590: PPUSH
41591: CALL_OW 247
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: IN
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL_OW 255
41616: PPUSH
41617: LD_VAR 0 2
41621: PPUSH
41622: CALL_OW 292
41626: AND
41627: IFFALSE 41645
// ComAttackUnit ( unit , enemy ) else
41629: LD_VAR 0 1
41633: PPUSH
41634: LD_VAR 0 2
41638: PPUSH
41639: CALL_OW 115
41643: GO 41664
// ComAgressiveMove ( unit , x , y ) ;
41645: LD_VAR 0 1
41649: PPUSH
41650: LD_VAR 0 4
41654: PPUSH
41655: LD_VAR 0 5
41659: PPUSH
41660: CALL_OW 114
// end ;
41664: LD_VAR 0 3
41668: RET
