// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp3 do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 4
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5705
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// DialogueOn ;
5446: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5450: LD_EXP 17
5454: PPUSH
5455: LD_STRING DO-olaf-1
5457: PPUSH
5458: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5462: LD_EXP 16
5466: PPUSH
5467: LD_STRING DH-olaf-1
5469: PPUSH
5470: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5474: LD_EXP 17
5478: PPUSH
5479: LD_STRING DO-olaf-2
5481: PPUSH
5482: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5486: LD_EXP 16
5490: PPUSH
5491: LD_STRING DH-olaf-2
5493: PPUSH
5494: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING DO-olaf-3
5505: PPUSH
5506: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DO-olaf-4
5517: PPUSH
5518: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5522: LD_EXP 16
5526: PPUSH
5527: LD_STRING DH-olaf-4
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5534: LD_EXP 17
5538: PPUSH
5539: LD_STRING DO-olaf-5
5541: PPUSH
5542: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5546: LD_EXP 16
5550: PPUSH
5551: LD_STRING DH-olaf-5
5553: PPUSH
5554: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5558: LD_EXP 17
5562: PPUSH
5563: LD_STRING DO-olaf-6
5565: PPUSH
5566: CALL_OW 88
// if russianSpotted or johnnySaved then
5570: LD_EXP 9
5574: PUSH
5575: LD_EXP 4
5579: OR
5580: IFFALSE 5608
// begin Say ( Heike , DH-olaf-6a ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-6a
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-7a
5601: PPUSH
5602: CALL_OW 88
// end else
5606: GO 5632
// begin Say ( Heike , DH-olaf-6b ) ;
5608: LD_EXP 16
5612: PPUSH
5613: LD_STRING DH-olaf-6b
5615: PPUSH
5616: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5620: LD_EXP 17
5624: PPUSH
5625: LD_STRING DO-olaf-7b
5627: PPUSH
5628: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-8
5639: PPUSH
5640: CALL_OW 88
// DialogueOff ;
5644: CALL_OW 7
// InGameOff ;
5648: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5652: LD_STRING O3_camp_cont
5654: PPUSH
5655: CALL_OW 337
// if not johnnySaved then
5659: LD_EXP 4
5663: NOT
5664: IFFALSE 5675
// KillUnit ( Johnny ) ;
5666: LD_EXP 25
5670: PPUSH
5671: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5675: LD_EXP 17
5679: PPUSH
5680: LD_INT 52
5682: PPUSH
5683: LD_INT 90
5685: PPUSH
5686: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 53
5697: PPUSH
5698: LD_INT 89
5700: PPUSH
5701: CALL_OW 178
// end ;
5705: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5706: LD_EXP 8
5710: NOT
5711: PUSH
5712: LD_EXP 16
5716: PPUSH
5717: LD_EXP 18
5721: PPUSH
5722: CALL_OW 296
5726: PUSH
5727: LD_INT 36
5729: LESS
5730: AND
5731: IFFALSE 5751
5733: GO 5735
5735: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5736: LD_EXP 17
5740: PPUSH
5741: LD_INT 39
5743: PPUSH
5744: LD_INT 71
5746: PPUSH
5747: CALL_OW 111
5751: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5752: LD_EXP 7
5756: NOT
5757: PUSH
5758: LD_INT 2
5760: PPUSH
5761: LD_EXP 19
5765: PPUSH
5766: CALL_OW 292
5770: PUSH
5771: LD_INT 2
5773: PPUSH
5774: LD_EXP 18
5778: PPUSH
5779: CALL_OW 292
5783: OR
5784: AND
5785: IFFALSE 7106
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
5793: PPUSH
5794: PPUSH
// begin if not johnnySaved then
5795: LD_EXP 4
5799: NOT
5800: IFFALSE 5811
// KillUnit ( Johnny ) ;
5802: LD_EXP 25
5806: PPUSH
5807: CALL_OW 66
// mercenariesSpotted := true ;
5811: LD_ADDR_EXP 7
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5819: LD_STRING O4_camp_cont
5821: PPUSH
5822: CALL_OW 337
// InGameOn ;
5826: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5830: LD_INT 53
5832: PPUSH
5833: LD_INT 89
5835: PPUSH
5836: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5840: LD_INT 53
5842: PPUSH
5843: LD_INT 89
5845: PPUSH
5846: LD_INT 2
5848: PPUSH
5849: LD_INT 8
5851: NEG
5852: PPUSH
5853: CALL_OW 330
// if olafSpotted then
5857: LD_EXP 8
5861: IFFALSE 5979
// begin AddComTurnUnit ( Olaf , Heike ) ;
5863: LD_EXP 17
5867: PPUSH
5868: LD_EXP 16
5872: PPUSH
5873: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 51
5884: PPUSH
5885: LD_INT 86
5887: PPUSH
5888: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_EXP 17
5901: PPUSH
5902: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5906: LD_EXP 17
5910: PPUSH
5911: LD_STRING DO-camp-1
5913: PPUSH
5914: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5918: LD_EXP 18
5922: PUSH
5923: LD_EXP 19
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PPUSH
5932: LD_EXP 16
5936: PPUSH
5937: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5941: LD_EXP 18
5945: PPUSH
5946: LD_STRING DG-camp-1
5948: PPUSH
5949: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5953: LD_EXP 16
5957: PPUSH
5958: LD_STRING DH-camp-1
5960: PPUSH
5961: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5965: LD_EXP 17
5969: PPUSH
5970: LD_STRING DO-camp-2
5972: PPUSH
5973: CALL_OW 88
// end else
5977: GO 6374
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5979: LD_EXP 16
5983: PPUSH
5984: LD_INT 51
5986: PPUSH
5987: LD_INT 86
5989: PPUSH
5990: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_EXP 18
6003: PPUSH
6004: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6008: LD_EXP 18
6012: PUSH
6013: LD_EXP 19
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PPUSH
6022: LD_EXP 16
6026: PPUSH
6027: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6031: LD_EXP 18
6035: PPUSH
6036: LD_STRING DG-camp-1a
6038: PPUSH
6039: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6043: LD_EXP 16
6047: PPUSH
6048: LD_STRING DH-camp-1a
6050: PPUSH
6051: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6055: LD_INT 1
6057: PPUSH
6058: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6062: LD_EXP 19
6066: PPUSH
6067: LD_EXP 17
6071: PPUSH
6072: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6076: LD_EXP 19
6080: PPUSH
6081: LD_STRING DM-camp-1a
6083: PPUSH
6084: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6088: LD_EXP 17
6092: PPUSH
6093: LD_INT 52
6095: PPUSH
6096: LD_INT 90
6098: PPUSH
6099: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6103: LD_EXP 19
6107: PPUSH
6108: LD_EXP 16
6112: PPUSH
6113: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6117: LD_EXP 18
6121: PPUSH
6122: LD_STRING DG-camp-2a
6124: PPUSH
6125: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6129: LD_EXP 16
6133: PPUSH
6134: LD_STRING DH-camp-2a
6136: PPUSH
6137: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6141: LD_EXP 19
6145: PPUSH
6146: LD_STRING DM-camp-2a
6148: PPUSH
6149: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6153: LD_INT 35
6155: PPUSH
6156: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6160: LD_EXP 17
6164: PPUSH
6165: LD_EXP 16
6169: PPUSH
6170: CALL_OW 296
6174: PUSH
6175: LD_INT 10
6177: LESS
6178: IFFALSE 6153
// AddComTurnUnit ( Olaf , Heike ) ;
6180: LD_EXP 17
6184: PPUSH
6185: LD_EXP 16
6189: PPUSH
6190: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6194: LD_EXP 19
6198: PPUSH
6199: LD_EXP 16
6203: PPUSH
6204: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6208: LD_EXP 17
6212: PPUSH
6213: LD_STRING DO-camp-2a
6215: PPUSH
6216: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6220: LD_EXP 16
6224: PPUSH
6225: LD_EXP 17
6229: PPUSH
6230: CALL_OW 119
// if russianSpotted then
6234: LD_EXP 9
6238: IFFALSE 6278
// begin Say ( Heike , DH-camp-2aa ) ;
6240: LD_EXP 16
6244: PPUSH
6245: LD_STRING DH-camp-2aa
6247: PPUSH
6248: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6252: LD_EXP 18
6256: PPUSH
6257: LD_STRING DG-camp-2aa
6259: PPUSH
6260: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6264: LD_EXP 19
6268: PPUSH
6269: LD_STRING DM-camp-2aa
6271: PPUSH
6272: CALL_OW 88
// end else
6276: GO 6302
// begin Say ( Heike , DH-camp-2ab ) ;
6278: LD_EXP 16
6282: PPUSH
6283: LD_STRING DH-camp-2ab
6285: PPUSH
6286: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6290: LD_EXP 19
6294: PPUSH
6295: LD_STRING DM-camp-2ab
6297: PPUSH
6298: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6302: LD_EXP 16
6306: PPUSH
6307: LD_STRING DH-camp-3a
6309: PPUSH
6310: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6314: LD_EXP 17
6318: PPUSH
6319: LD_STRING DO-camp-3a
6321: PPUSH
6322: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6326: LD_EXP 18
6330: PPUSH
6331: LD_STRING DG-camp-3a
6333: PPUSH
6334: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6338: LD_EXP 16
6342: PPUSH
6343: LD_STRING DH-camp-4aa
6345: PPUSH
6346: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6350: LD_EXP 19
6354: PPUSH
6355: LD_STRING DM-camp-4aa
6357: PPUSH
6358: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING DO-camp-4a
6369: PPUSH
6370: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6374: LD_EXP 17
6378: PPUSH
6379: LD_STRING DO-camp-3
6381: PPUSH
6382: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6386: LD_EXP 17
6390: PPUSH
6391: LD_STRING DO-camp-4
6393: PPUSH
6394: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6398: LD_EXP 18
6402: PPUSH
6403: LD_EXP 17
6407: PPUSH
6408: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6412: LD_EXP 18
6416: PPUSH
6417: LD_STRING DG-camp-4
6419: PPUSH
6420: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6424: LD_EXP 16
6428: PPUSH
6429: LD_EXP 18
6433: PPUSH
6434: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6438: LD_EXP 16
6442: PPUSH
6443: LD_STRING DH-camp-4
6445: PPUSH
6446: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6450: LD_EXP 19
6454: PUSH
6455: LD_EXP 17
6459: PUSH
6460: LD_EXP 18
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: PPUSH
6470: LD_EXP 16
6474: PPUSH
6475: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6479: LD_EXP 18
6483: PPUSH
6484: LD_STRING DG-camp-5
6486: PPUSH
6487: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6491: LD_EXP 18
6495: PPUSH
6496: LD_STRING DG-camp-6
6498: PPUSH
6499: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6503: LD_EXP 16
6507: PPUSH
6508: LD_STRING DH-camp-6
6510: PPUSH
6511: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6515: LD_EXP 18
6519: PPUSH
6520: LD_STRING DG-camp-7
6522: PPUSH
6523: CALL_OW 88
// if DogTagFound then
6527: LD_EXP 6
6531: IFFALSE 6571
// begin Say ( Heike , DH-quest-1a ) ;
6533: LD_EXP 16
6537: PPUSH
6538: LD_STRING DH-quest-1a
6540: PPUSH
6541: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6545: LD_EXP 18
6549: PPUSH
6550: LD_STRING DG-quest-1a
6552: PPUSH
6553: CALL_OW 88
// mercenariesQuestDone := true ;
6557: LD_ADDR_EXP 11
6561: PUSH
6562: LD_INT 1
6564: ST_TO_ADDR
// InGameOff ;
6565: CALL_OW 9
// end else
6569: GO 6737
// begin Say ( Heike , DH-camp-7 ) ;
6571: LD_EXP 16
6575: PPUSH
6576: LD_STRING DH-camp-7
6578: PPUSH
6579: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6583: LD_EXP 16
6587: PPUSH
6588: CALL_OW 256
6592: PUSH
6593: LD_INT 1000
6595: LESS
6596: IFFALSE 6688
// begin Say ( Olaf , DO-heal-1 ) ;
6598: LD_EXP 17
6602: PPUSH
6603: LD_STRING DO-heal-1
6605: PPUSH
6606: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6610: LD_EXP 16
6614: PPUSH
6615: LD_INT 51
6617: PPUSH
6618: LD_INT 88
6620: PPUSH
6621: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6625: LD_INT 35
6627: PPUSH
6628: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6632: LD_EXP 16
6636: PPUSH
6637: LD_EXP 17
6641: PPUSH
6642: CALL_OW 296
6646: PUSH
6647: LD_INT 4
6649: LESS
6650: PUSH
6651: LD_EXP 16
6655: PPUSH
6656: LD_INT 51
6658: PPUSH
6659: LD_INT 88
6661: PPUSH
6662: CALL_OW 307
6666: OR
6667: IFFALSE 6625
// SetLives ( Heike , 1000 ) ;
6669: LD_EXP 16
6673: PPUSH
6674: LD_INT 1000
6676: PPUSH
6677: CALL_OW 234
// wait ( 0 0$2 ) ;
6681: LD_INT 70
6683: PPUSH
6684: CALL_OW 67
// end ; InGameOff ;
6688: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6692: LD_EXP 17
6696: PUSH
6697: LD_EXP 18
6701: PUSH
6702: LD_EXP 19
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: PPUSH
6712: LD_INT 53
6714: PPUSH
6715: LD_INT 89
6717: PPUSH
6718: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6722: LD_STRING O5_proof_cont
6724: PPUSH
6725: CALL_OW 337
// mercenariesQuestReady := true ;
6729: LD_ADDR_EXP 10
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6737: LD_EXP 10
6741: NOT
6742: IFFALSE 6746
// exit ;
6744: GO 7106
// wait ( 0 0$35 ) ;
6746: LD_INT 1225
6748: PPUSH
6749: CALL_OW 67
// driver := PreparePatrolTank ;
6753: LD_ADDR_VAR 0 2
6757: PUSH
6758: CALL 2814 0 0
6762: ST_TO_ADDR
// if not driver then
6763: LD_VAR 0 2
6767: NOT
6768: IFFALSE 6772
// exit ;
6770: GO 7106
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6772: LD_INT 2
6774: PPUSH
6775: LD_INT 1
6777: PPUSH
6778: LD_INT 2
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6788: LD_ADDR_VAR 0 3
6792: PUSH
6793: LD_VAR 0 2
6797: PPUSH
6798: CALL_OW 310
6802: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_INT 500
6810: PPUSH
6811: CALL_OW 234
// SetLives ( driver , 450 ) ;
6815: LD_VAR 0 2
6819: PPUSH
6820: LD_INT 450
6822: PPUSH
6823: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6827: LD_VAR 0 2
6831: PPUSH
6832: LD_INT 59
6834: PPUSH
6835: LD_INT 60
6837: PPUSH
6838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6842: LD_INT 35
6844: PPUSH
6845: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6849: LD_VAR 0 3
6853: PPUSH
6854: LD_INT 59
6856: PPUSH
6857: LD_INT 60
6859: PPUSH
6860: CALL_OW 307
6864: IFFALSE 6842
// if not See ( 1 , Heike ) then
6866: LD_INT 1
6868: PPUSH
6869: LD_EXP 16
6873: PPUSH
6874: CALL_OW 292
6878: NOT
6879: IFFALSE 7003
// begin if Difficulty < 3 then
6881: LD_OWVAR 67
6885: PUSH
6886: LD_INT 3
6888: LESS
6889: IFFALSE 6907
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 60
6896: PPUSH
6897: LD_INT 2
6899: PPUSH
6900: LD_INT 6
6902: PPUSH
6903: CALL_OW 330
// ComExitVehicle ( driver ) ;
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL_OW 121
// wait ( 0 0$1 ) ;
6916: LD_INT 35
6918: PPUSH
6919: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6923: LD_VAR 0 2
6927: PPUSH
6928: LD_INT 58
6930: PPUSH
6931: LD_INT 54
6933: PPUSH
6934: CALL_OW 171
// wait ( 0 0$1 ) ;
6938: LD_INT 35
6940: PPUSH
6941: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6945: LD_VAR 0 2
6949: PPUSH
6950: LD_INT 57
6952: PPUSH
6953: LD_INT 53
6955: PPUSH
6956: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 350
6967: PPUSH
6968: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6972: LD_VAR 0 2
6976: PPUSH
6977: LD_VAR 0 3
6981: PPUSH
6982: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 107
6993: PPUSH
6994: LD_INT 118
6996: PPUSH
6997: CALL_OW 171
// end else
7001: GO 7018
// begin ComMoveXY ( driver , 107 , 118 ) ;
7003: LD_VAR 0 2
7007: PPUSH
7008: LD_INT 107
7010: PPUSH
7011: LD_INT 118
7013: PPUSH
7014: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7018: LD_INT 35
7020: PPUSH
7021: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7025: LD_VAR 0 3
7029: PPUSH
7030: LD_INT 107
7032: PPUSH
7033: LD_INT 118
7035: PPUSH
7036: CALL_OW 307
7040: PUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 301
7050: OR
7051: IFFALSE 7018
// if IsDead ( driver [ 1 ] ) then
7053: LD_VAR 0 2
7057: PUSH
7058: LD_INT 1
7060: ARRAY
7061: PPUSH
7062: CALL_OW 301
7066: IFFALSE 7070
// exit ;
7068: GO 7106
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7070: LD_ADDR_VAR 0 1
7074: PUSH
7075: LD_INT 22
7077: PUSH
7078: LD_INT 1
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7104
// RemoveUnit ( i ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL_OW 64
7102: GO 7090
7104: POP
7105: POP
// end ;
7106: PPOPN 3
7108: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7109: LD_INT 10
7111: PPUSH
7112: LD_INT 22
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 21
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 70
7140: IFFALSE 7214
7142: GO 7144
7144: DISABLE
// begin InGameOn ;
7145: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7149: LD_EXP 17
7153: PUSH
7154: LD_EXP 19
7158: PUSH
7159: LD_EXP 18
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: PPUSH
7169: LD_EXP 16
7173: PPUSH
7174: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7178: LD_EXP 19
7182: PPUSH
7183: LD_STRING DM-quest-1
7185: PPUSH
7186: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7190: LD_EXP 18
7194: PPUSH
7195: LD_STRING DG-quest-1
7197: PPUSH
7198: CALL_OW 88
// InGameOff ;
7202: CALL_OW 9
// mercenariesQuestDone := true ;
7206: LD_ADDR_EXP 11
7210: PUSH
7211: LD_INT 1
7213: ST_TO_ADDR
// end ;
7214: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7215: LD_EXP 16
7219: PPUSH
7220: LD_INT 10
7222: PPUSH
7223: CALL_OW 308
7227: PUSH
7228: LD_EXP 6
7232: AND
7233: PUSH
7234: LD_EXP 10
7238: AND
7239: PUSH
7240: LD_INT 10
7242: PPUSH
7243: LD_INT 22
7245: PUSH
7246: LD_INT 2
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 21
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 70
7271: NOT
7272: AND
7273: IFFALSE 7445
7275: GO 7277
7277: DISABLE
7278: LD_INT 0
7280: PPUSH
// begin InGameOn ;
7281: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7285: LD_EXP 17
7289: PUSH
7290: LD_EXP 19
7294: PUSH
7295: LD_EXP 18
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PPUSH
7305: LD_EXP 16
7309: PPUSH
7310: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7314: LD_EXP 16
7318: PPUSH
7319: LD_INT 54
7321: PPUSH
7322: LD_INT 86
7324: PPUSH
7325: CALL_OW 111
// p := p + 1 ;
7329: LD_ADDR_VAR 0 1
7333: PUSH
7334: LD_VAR 0 1
7338: PUSH
7339: LD_INT 1
7341: PLUS
7342: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7343: LD_INT 35
7345: PPUSH
7346: CALL_OW 67
// p := p + 1 ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_VAR 0 1
7359: PUSH
7360: LD_INT 1
7362: PLUS
7363: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7364: LD_EXP 16
7368: PPUSH
7369: LD_EXP 18
7373: PPUSH
7374: CALL_OW 296
7378: PUSH
7379: LD_INT 4
7381: LESS
7382: PUSH
7383: LD_VAR 0 1
7387: PUSH
7388: LD_INT 5
7390: GREATER
7391: OR
7392: IFFALSE 7343
// Say ( Mike , DM-quest-1 ) ;
7394: LD_EXP 19
7398: PPUSH
7399: LD_STRING DM-quest-1
7401: PPUSH
7402: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7406: LD_EXP 18
7410: PPUSH
7411: LD_STRING DG-quest-1
7413: PPUSH
7414: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7418: LD_EXP 16
7422: PPUSH
7423: LD_INT 55
7425: PPUSH
7426: LD_INT 87
7428: PPUSH
7429: CALL_OW 111
// InGameOff ;
7433: CALL_OW 9
// mercenariesQuestDone := true ;
7437: LD_ADDR_EXP 11
7441: PUSH
7442: LD_INT 1
7444: ST_TO_ADDR
// end ;
7445: PPOPN 1
7447: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7448: LD_EXP 16
7452: PUSH
7453: LD_INT 55
7455: PUSH
7456: EMPTY
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: IN
7464: IFFALSE 7504
7466: GO 7468
7468: DISABLE
// begin if Difficulty < 3 then
7469: LD_OWVAR 67
7473: PUSH
7474: LD_INT 3
7476: LESS
7477: IFFALSE 7492
// RemoveSeeing ( 59 , 60 , 2 ) ;
7479: LD_INT 59
7481: PPUSH
7482: LD_INT 60
7484: PPUSH
7485: LD_INT 2
7487: PPUSH
7488: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7492: LD_EXP 16
7496: PPUSH
7497: LD_STRING DH-driver
7499: PPUSH
7500: CALL_OW 88
// end ;
7504: END
// every 0 0$1 trigger mercenariesQuestDone do
7505: LD_EXP 11
7509: IFFALSE 7997
7511: GO 7513
7513: DISABLE
// begin if mercenariesQuestReady then
7514: LD_EXP 10
7518: IFFALSE 7527
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7520: LD_STRING O5_proof_cont_out
7522: PPUSH
7523: CALL_OW 337
// InGameOn ;
7527: CALL_OW 8
// if IsInUnit ( Heike ) then
7531: LD_EXP 16
7535: PPUSH
7536: CALL_OW 310
7540: IFFALSE 7551
// ComExitVehicle ( Heike ) ;
7542: LD_EXP 16
7546: PPUSH
7547: CALL_OW 121
// wait ( 3 ) ;
7551: LD_INT 3
7553: PPUSH
7554: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7558: LD_EXP 16
7562: PPUSH
7563: LD_EXP 18
7567: PPUSH
7568: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7572: LD_EXP 17
7576: PUSH
7577: LD_EXP 19
7581: PUSH
7582: LD_EXP 18
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: PPUSH
7592: LD_EXP 16
7596: PPUSH
7597: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7601: LD_EXP 16
7605: PPUSH
7606: LD_STRING DH-quest-done-1
7608: PPUSH
7609: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7613: LD_EXP 19
7617: PPUSH
7618: LD_STRING DM-quest-done-1
7620: PPUSH
7621: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7625: LD_EXP 18
7629: PPUSH
7630: LD_STRING DG-quest-done-1
7632: PPUSH
7633: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7637: LD_EXP 16
7641: PPUSH
7642: LD_EXP 17
7646: PPUSH
7647: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7651: LD_EXP 16
7655: PPUSH
7656: LD_STRING DH-quest-done-2
7658: PPUSH
7659: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7663: LD_EXP 17
7667: PPUSH
7668: LD_STRING DO-quest-done-2
7670: PPUSH
7671: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7675: LD_EXP 17
7679: PPUSH
7680: LD_STRING DO-quest-done-3
7682: PPUSH
7683: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7687: LD_EXP 18
7691: PPUSH
7692: LD_INT 51
7694: PPUSH
7695: LD_INT 90
7697: PPUSH
7698: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 50
7709: PPUSH
7710: LD_INT 89
7712: PPUSH
7713: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7717: LD_EXP 16
7721: PPUSH
7722: LD_EXP 18
7726: PPUSH
7727: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7731: LD_EXP 18
7735: PPUSH
7736: LD_STRING DG-quest-done-4
7738: PPUSH
7739: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7743: LD_EXP 18
7747: PPUSH
7748: LD_EXP 16
7752: PPUSH
7753: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7757: LD_EXP 16
7761: PPUSH
7762: CALL_OW 256
7766: PUSH
7767: LD_INT 1000
7769: LESS
7770: IFFALSE 7862
// begin Say ( Olaf , DO-heal-1 ) ;
7772: LD_EXP 17
7776: PPUSH
7777: LD_STRING DO-heal-1
7779: PPUSH
7780: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7784: LD_EXP 16
7788: PPUSH
7789: LD_INT 51
7791: PPUSH
7792: LD_INT 88
7794: PPUSH
7795: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7799: LD_INT 35
7801: PPUSH
7802: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7806: LD_EXP 16
7810: PPUSH
7811: LD_EXP 17
7815: PPUSH
7816: CALL_OW 296
7820: PUSH
7821: LD_INT 4
7823: LESS
7824: PUSH
7825: LD_EXP 16
7829: PPUSH
7830: LD_INT 51
7832: PPUSH
7833: LD_INT 88
7835: PPUSH
7836: CALL_OW 307
7840: OR
7841: IFFALSE 7799
// SetLives ( Heike , 1000 ) ;
7843: LD_EXP 16
7847: PPUSH
7848: LD_INT 1000
7850: PPUSH
7851: CALL_OW 234
// wait ( 0 0$2 ) ;
7855: LD_INT 70
7857: PPUSH
7858: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7862: LD_EXP 16
7866: PPUSH
7867: LD_STRING DH-quest-done-4
7869: PPUSH
7870: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7874: LD_EXP 17
7878: PPUSH
7879: LD_STRING DO-quest-done-4
7881: PPUSH
7882: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7886: LD_EXP 16
7890: PPUSH
7891: LD_EXP 17
7895: PPUSH
7896: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7900: LD_EXP 16
7904: PPUSH
7905: LD_STRING DH-quest-done-5
7907: PPUSH
7908: CALL_OW 88
// InGameOff ;
7912: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7916: LD_STRING O6_end_cont
7918: PPUSH
7919: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7923: LD_EXP 18
7927: PPUSH
7928: LD_INT 2
7930: PPUSH
7931: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7935: LD_EXP 19
7939: PPUSH
7940: LD_INT 2
7942: PPUSH
7943: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7947: LD_INT 42
7949: PPUSH
7950: LD_INT 2
7952: PPUSH
7953: LD_INT 2
7955: PPUSH
7956: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7960: LD_EXP 17
7964: PPUSH
7965: LD_INT 53
7967: PPUSH
7968: LD_INT 89
7970: PPUSH
7971: CALL_OW 118
// lastObjectiveActive := true ;
7975: LD_ADDR_EXP 12
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 424
// PreparePrison ;
7993: CALL 1164 0 0
// end ;
7997: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7998: LD_INT 22
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 91
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PPUSH
8026: CALL_OW 69
8030: IFFALSE 8212
8032: GO 8034
8034: DISABLE
8035: LD_INT 0
8037: PPUSH
8038: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8039: LD_INT 245
8041: PUSH
8042: LD_INT 210
8044: PUSH
8045: LD_INT 210
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PUSH
8053: LD_OWVAR 67
8057: ARRAY
8058: PPUSH
8059: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 25
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 54
8090: PUSH
8091: EMPTY
8092: LIST
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: ST_TO_ADDR
// if not tmp then
8104: LD_VAR 0 2
8108: NOT
8109: IFFALSE 8113
// exit ;
8111: GO 8212
// for i in tmp do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8152
// begin ComExitBuilding ( i ) ;
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: LD_INT 121
8142: PPUSH
8143: LD_INT 22
8145: PPUSH
8146: CALL_OW 174
// end ;
8150: GO 8123
8152: POP
8153: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8154: LD_EXP 23
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8169: LD_EXP 24
8173: PPUSH
8174: LD_INT 121
8176: PPUSH
8177: LD_INT 22
8179: PPUSH
8180: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8184: LD_EXP 23
8188: PPUSH
8189: LD_EXP 16
8193: PPUSH
8194: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8198: LD_EXP 24
8202: PPUSH
8203: LD_EXP 16
8207: PPUSH
8208: CALL_OW 175
// end ;
8212: PPOPN 2
8214: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8215: LD_INT 22
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 91
8227: PUSH
8228: LD_INT 8
8230: PUSH
8231: LD_INT 4
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 69
8247: IFFALSE 8429
8249: GO 8251
8251: DISABLE
8252: LD_INT 0
8254: PPUSH
8255: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8256: LD_INT 280
8258: PUSH
8259: LD_INT 245
8261: PUSH
8262: LD_INT 210
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PPUSH
8276: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8280: LD_ADDR_VAR 0 2
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_INT 3
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 1
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 54
8307: PUSH
8308: EMPTY
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: PPUSH
8316: CALL_OW 69
8320: ST_TO_ADDR
// if not tmp then
8321: LD_VAR 0 2
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8429
// for i in tmp do
8330: LD_ADDR_VAR 0 1
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: FOR_IN
8341: IFFALSE 8369
// begin ComExitBuilding ( i ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8352: LD_VAR 0 1
8356: PPUSH
8357: LD_INT 142
8359: PPUSH
8360: LD_INT 71
8362: PPUSH
8363: CALL_OW 174
// end ;
8367: GO 8340
8369: POP
8370: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8371: LD_EXP 23
8375: PPUSH
8376: LD_INT 142
8378: PPUSH
8379: LD_INT 71
8381: PPUSH
8382: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8386: LD_EXP 24
8390: PPUSH
8391: LD_INT 142
8393: PPUSH
8394: LD_INT 71
8396: PPUSH
8397: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8401: LD_EXP 23
8405: PPUSH
8406: LD_EXP 16
8410: PPUSH
8411: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8415: LD_EXP 24
8419: PPUSH
8420: LD_EXP 16
8424: PPUSH
8425: CALL_OW 175
// end ;
8429: PPOPN 2
8431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8432: LD_INT 22
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 21
8444: PUSH
8445: LD_INT 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 58
8454: PUSH
8455: EMPTY
8456: LIST
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: LD_INT 1000
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 91
8477: PUSH
8478: LD_EXP 17
8482: PUSH
8483: LD_INT 8
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL_OW 69
8502: PUSH
8503: LD_EXP 17
8507: PPUSH
8508: CALL_OW 302
8512: AND
8513: IFFALSE 8627
8515: GO 8517
8517: DISABLE
// begin enable ;
8518: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8519: LD_EXP 17
8523: PPUSH
8524: LD_INT 22
8526: PUSH
8527: LD_INT 2
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 58
8546: PUSH
8547: EMPTY
8548: LIST
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: LD_INT 24
8555: PUSH
8556: LD_INT 1000
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 91
8569: PUSH
8570: LD_EXP 17
8574: PUSH
8575: LD_INT 8
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: PUSH
8595: LD_INT 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8603: LD_EXP 17
8607: PPUSH
8608: LD_INT 52
8610: PPUSH
8611: LD_INT 90
8613: PPUSH
8614: CALL_OW 171
// AddComHold ( Olaf ) ;
8618: LD_EXP 17
8622: PPUSH
8623: CALL_OW 200
// end ;
8627: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8628: LD_EXP 12
8632: PUSH
8633: LD_INT 2
8635: PPUSH
8636: CALL_OW 302
8640: NOT
8641: AND
8642: PUSH
8643: LD_OWVAR 67
8647: PUSH
8648: LD_INT 1
8650: EQUAL
8651: AND
8652: PUSH
8653: LD_EXP 13
8657: NOT
8658: AND
8659: IFFALSE 8676
8661: GO 8663
8663: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8664: LD_EXP 16
8668: PPUSH
8669: LD_STRING DH-prison-missing
8671: PPUSH
8672: CALL_OW 88
// end ;
8676: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8677: LD_EXP 12
8681: PUSH
8682: LD_INT 8
8684: PPUSH
8685: CALL_OW 302
8689: NOT
8690: AND
8691: PUSH
8692: LD_OWVAR 67
8696: PUSH
8697: LD_INT 1
8699: GREATER
8700: AND
8701: PUSH
8702: LD_EXP 13
8706: NOT
8707: AND
8708: IFFALSE 8725
8710: GO 8712
8712: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8713: LD_EXP 16
8717: PPUSH
8718: LD_STRING DH-prison-missing
8720: PPUSH
8721: CALL_OW 88
// end ;
8725: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8726: LD_EXP 12
8730: PUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 302
8738: NOT
8739: AND
8740: PUSH
8741: LD_EXP 13
8745: NOT
8746: AND
8747: IFFALSE 8764
8749: GO 8751
8751: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8752: LD_EXP 16
8756: PPUSH
8757: LD_STRING DH-prison-missing-a
8759: PPUSH
8760: CALL_OW 88
// end ;
8764: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8765: LD_EXP 12
8769: PUSH
8770: LD_INT 10
8772: PPUSH
8773: CALL_OW 302
8777: NOT
8778: AND
8779: PUSH
8780: LD_EXP 13
8784: NOT
8785: AND
8786: IFFALSE 8803
8788: GO 8790
8790: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8791: LD_EXP 16
8795: PPUSH
8796: LD_STRING DH-prison-missing-a
8798: PPUSH
8799: CALL_OW 88
// end ;
8803: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8804: LD_EXP 13
8808: NOT
8809: PUSH
8810: LD_EXP 12
8814: AND
8815: PUSH
8816: LD_INT 2
8818: PPUSH
8819: LD_EXP 20
8823: PPUSH
8824: CALL_OW 292
8828: AND
8829: IFFALSE 8916
8831: GO 8833
8833: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8834: LD_EXP 20
8838: PPUSH
8839: LD_EXP 16
8843: PPUSH
8844: CALL_OW 119
// DialogueOn ;
8848: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8852: LD_EXP 20
8856: PPUSH
8857: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8861: LD_EXP 20
8865: PPUSH
8866: LD_STRING DK-prison-found
8868: PPUSH
8869: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8873: LD_EXP 16
8877: PPUSH
8878: LD_STRING DH-prison-found
8880: PPUSH
8881: CALL_OW 88
// DialogueOff ;
8885: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8889: LD_EXP 20
8893: PPUSH
8894: LD_INT 2
8896: PPUSH
8897: CALL_OW 235
// prisonFound := true ;
8901: LD_ADDR_EXP 13
8905: PUSH
8906: LD_INT 1
8908: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8909: LD_STRING O6_prison_out
8911: PPUSH
8912: CALL_OW 337
// end ;
8916: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8917: LD_EXP 16
8921: PPUSH
8922: CALL_OW 256
8926: PUSH
8927: LD_INT 500
8929: LESS
8930: IFFALSE 8943
8932: GO 8934
8934: DISABLE
// heikeHurt := true ;
8935: LD_ADDR_EXP 14
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
8943: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8944: LD_INT 22
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 21
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: IFFALSE 9288
8974: GO 8976
8976: DISABLE
8977: LD_INT 0
8979: PPUSH
8980: PPUSH
8981: PPUSH
// begin uc_side := 3 ;
8982: LD_ADDR_OWVAR 20
8986: PUSH
8987: LD_INT 3
8989: ST_TO_ADDR
// uc_nation := 3 ;
8990: LD_ADDR_OWVAR 21
8994: PUSH
8995: LD_INT 3
8997: ST_TO_ADDR
// tmp := [ ] ;
8998: LD_ADDR_VAR 0 2
9002: PUSH
9003: EMPTY
9004: ST_TO_ADDR
// for i := 1 to 8 do
9005: LD_ADDR_VAR 0 1
9009: PUSH
9010: DOUBLE
9011: LD_INT 1
9013: DEC
9014: ST_TO_ADDR
9015: LD_INT 8
9017: PUSH
9018: FOR_TO
9019: IFFALSE 9127
// begin PrepareHuman ( false , 1 , 4 ) ;
9021: LD_INT 0
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: LD_INT 4
9029: PPUSH
9030: CALL_OW 380
// un := CreateHuman ;
9034: LD_ADDR_VAR 0 3
9038: PUSH
9039: CALL_OW 44
9043: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9044: LD_VAR 0 3
9048: PPUSH
9049: LD_INT 4
9051: PPUSH
9052: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9056: LD_VAR 0 3
9060: PPUSH
9061: LD_INT 158
9063: PPUSH
9064: LD_INT 80
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9074: LD_VAR 0 3
9078: PPUSH
9079: LD_INT 147
9081: PPUSH
9082: LD_INT 75
9084: PPUSH
9085: CALL_OW 111
// wait ( 0 0$1 ) ;
9089: LD_INT 35
9091: PPUSH
9092: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9096: LD_ADDR_VAR 0 2
9100: PUSH
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_VAR 0 2
9110: PUSH
9111: LD_INT 1
9113: PLUS
9114: PPUSH
9115: LD_VAR 0 3
9119: PPUSH
9120: CALL_OW 1
9124: ST_TO_ADDR
// end ;
9125: GO 9018
9127: POP
9128: POP
// repeat wait ( 0 0$1 ) ;
9129: LD_INT 35
9131: PPUSH
9132: CALL_OW 67
// for i in tmp do
9136: LD_ADDR_VAR 0 1
9140: PUSH
9141: LD_VAR 0 2
9145: PUSH
9146: FOR_IN
9147: IFFALSE 9268
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9149: LD_ADDR_VAR 0 3
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_INT 3
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PPUSH
9169: LD_VAR 0 1
9173: PPUSH
9174: CALL_OW 74
9178: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9179: LD_VAR 0 3
9183: PUSH
9184: LD_INT 1
9186: ARRAY
9187: PPUSH
9188: CALL_OW 250
9192: PPUSH
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PPUSH
9202: CALL_OW 251
9206: PPUSH
9207: CALL_OW 428
9211: IFFALSE 9252
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9213: LD_VAR 0 1
9217: PPUSH
9218: LD_VAR 0 3
9222: PUSH
9223: LD_INT 1
9225: ARRAY
9226: PPUSH
9227: CALL_OW 250
9231: PPUSH
9232: LD_VAR 0 3
9236: PUSH
9237: LD_INT 1
9239: ARRAY
9240: PPUSH
9241: CALL_OW 251
9245: PPUSH
9246: CALL_OW 114
9250: GO 9266
// ComAttackUnit ( i , Heike ) ;
9252: LD_VAR 0 1
9256: PPUSH
9257: LD_EXP 16
9261: PPUSH
9262: CALL_OW 115
// end ;
9266: GO 9146
9268: POP
9269: POP
// until IsDead ( Heike ) or not tmp ;
9270: LD_EXP 16
9274: PPUSH
9275: CALL_OW 301
9279: PUSH
9280: LD_VAR 0 2
9284: NOT
9285: OR
9286: IFFALSE 9129
// end ;
9288: PPOPN 3
9290: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9291: LD_EXP 12
9295: PUSH
9296: LD_EXP 16
9300: PPUSH
9301: CALL_OW 302
9305: AND
9306: PUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_INT 21
9312: PUSH
9313: LD_INT 1
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 22
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 50
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 71
9345: PUSH
9346: LD_INT 0
9348: EQUAL
9349: AND
9350: IFFALSE 9694
9352: GO 9354
9354: DISABLE
9355: LD_INT 0
9357: PPUSH
// begin if not heikeHurt then
9358: LD_EXP 14
9362: NOT
9363: IFFALSE 9372
// SetAchievement ( ACH_INVINCIBLE ) ;
9365: LD_STRING ACH_INVINCIBLE
9367: PPUSH
9368: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9372: LD_STRING enableBioCharacter(BIO_GIVI)
9374: PPUSH
9375: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9379: LD_STRING enableBioCharacter(BIO_MIKE)
9381: PPUSH
9382: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9386: LD_ADDR_VAR 0 1
9390: PUSH
9391: LD_INT 22
9393: PUSH
9394: LD_INT 2
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 1
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 50
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: PPUSH
9422: CALL_OW 69
9426: ST_TO_ADDR
// if prisonFound then
9427: LD_EXP 13
9431: IFFALSE 9445
// AddMedal ( med1 , 1 ) else
9433: LD_STRING med1
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 101
9443: GO 9456
// AddMedal ( med1 , - 1 ) ;
9445: LD_STRING med1
9447: PPUSH
9448: LD_INT 1
9450: NEG
9451: PPUSH
9452: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9456: LD_VAR 0 1
9460: PUSH
9461: LD_INT 3
9463: LESS
9464: PUSH
9465: LD_EXP 13
9469: NOT
9470: AND
9471: PUSH
9472: LD_VAR 0 1
9476: PUSH
9477: LD_INT 4
9479: LESS
9480: PUSH
9481: LD_EXP 13
9485: AND
9486: OR
9487: IFFALSE 9502
// AddMedal ( med2 , - 1 ) else
9489: LD_STRING med2
9491: PPUSH
9492: LD_INT 1
9494: NEG
9495: PPUSH
9496: CALL_OW 101
9500: GO 9512
// AddMedal ( med2 , 1 ) ;
9502: LD_STRING med2
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9512: LD_EXP 13
9516: PUSH
9517: LD_EXP 4
9521: AND
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_INT 4
9530: GREATEREQUAL
9531: AND
9532: IFFALSE 9546
// AddMedal ( med3 , 1 ) else
9534: LD_STRING med3
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 101
9544: GO 9557
// AddMedal ( med3 , - 1 ) ;
9546: LD_STRING med3
9548: PPUSH
9549: LD_INT 1
9551: NEG
9552: PPUSH
9553: CALL_OW 101
// GiveMedals ( MAIN ) ;
9557: LD_STRING MAIN
9559: PPUSH
9560: CALL_OW 102
// RewardPeople ( tmp ) ;
9564: LD_VAR 0 1
9568: PPUSH
9569: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9573: LD_EXP 16
9577: PPUSH
9578: LD_STRING 01_Heike
9580: PPUSH
9581: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9585: LD_EXP 18
9589: PPUSH
9590: CALL_OW 302
9594: PUSH
9595: LD_EXP 18
9599: PUSH
9600: LD_VAR 0 1
9604: IN
9605: AND
9606: IFFALSE 9620
// SaveCharacters ( Givi , 01_Givi ) ;
9608: LD_EXP 18
9612: PPUSH
9613: LD_STRING 01_Givi
9615: PPUSH
9616: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9620: LD_EXP 19
9624: PPUSH
9625: CALL_OW 302
9629: PUSH
9630: LD_EXP 19
9634: PUSH
9635: LD_VAR 0 1
9639: IN
9640: AND
9641: IFFALSE 9655
// SaveCharacters ( Mike , 01_Mike ) ;
9643: LD_EXP 19
9647: PPUSH
9648: LD_STRING 01_Mike
9650: PPUSH
9651: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9655: LD_EXP 20
9659: PPUSH
9660: CALL_OW 302
9664: PUSH
9665: LD_EXP 20
9669: PUSH
9670: LD_VAR 0 1
9674: IN
9675: AND
9676: IFFALSE 9690
// SaveCharacters ( Kamil , 01_Kamil ) ;
9678: LD_EXP 20
9682: PPUSH
9683: LD_STRING 01_Kamil
9685: PPUSH
9686: CALL_OW 38
// YouWin ;
9690: CALL_OW 103
// end ; end_of_file
9694: PPOPN 1
9696: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9697: LD_VAR 0 1
9701: PUSH
9702: LD_EXP 16
9706: EQUAL
9707: IFFALSE 9716
// YouLost ( Heike ) ;
9709: LD_STRING Heike
9711: PPUSH
9712: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9716: LD_VAR 0 1
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 3
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 25
9733: PUSH
9734: LD_INT 1
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: IN
9750: IFFALSE 9856
// begin if un in russianPatrol then
9752: LD_VAR 0 1
9756: PUSH
9757: LD_EXP 21
9761: IN
9762: IFFALSE 9780
// russianPatrol := russianPatrol diff un ;
9764: LD_ADDR_EXP 21
9768: PUSH
9769: LD_EXP 21
9773: PUSH
9774: LD_VAR 0 1
9778: DIFF
9779: ST_TO_ADDR
// if un in russianForestPatrol then
9780: LD_VAR 0 1
9784: PUSH
9785: LD_EXP 22
9789: IN
9790: IFFALSE 9808
// russianForestPatrol := russianForestPatrol diff un ;
9792: LD_ADDR_EXP 22
9796: PUSH
9797: LD_EXP 22
9801: PUSH
9802: LD_VAR 0 1
9806: DIFF
9807: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9808: LD_ADDR_EXP 5
9812: PUSH
9813: LD_EXP 5
9817: PPUSH
9818: LD_EXP 5
9822: PUSH
9823: LD_INT 1
9825: PLUS
9826: PPUSH
9827: LD_VAR 0 1
9831: PPUSH
9832: CALL_OW 250
9836: PUSH
9837: LD_VAR 0 1
9841: PPUSH
9842: CALL_OW 251
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 1
9855: ST_TO_ADDR
// end ; end ;
9856: PPOPN 1
9858: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_EXP 16
9868: EQUAL
9869: IFFALSE 9878
// YouLost ( Heike ) ;
9871: LD_STRING Heike
9873: PPUSH
9874: CALL_OW 104
// end ;
9878: PPOPN 1
9880: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9881: LD_VAR 0 1
9885: PUSH
9886: LD_INT 2
9888: EQUAL
9889: PUSH
9890: LD_VAR 0 2
9894: PUSH
9895: LD_INT 5
9897: EQUAL
9898: AND
9899: IFFALSE 9908
// YouLost ( FriendlyFire ) ;
9901: LD_STRING FriendlyFire
9903: PPUSH
9904: CALL_OW 104
// end ;
9908: PPOPN 2
9910: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9911: LD_EXP 17
9915: PPUSH
9916: CALL_OW 256
9920: PUSH
9921: LD_INT 250
9923: LESS
9924: IFFALSE 9936
9926: GO 9928
9928: DISABLE
// YouLost ( Olaf ) ; end_of_file
9929: LD_STRING Olaf
9931: PPUSH
9932: CALL_OW 104
9936: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9937: LD_INT 0
9939: PPUSH
// if p2 = 100 then
9940: LD_VAR 0 2
9944: PUSH
9945: LD_INT 100
9947: EQUAL
9948: IFFALSE 10897
// begin if not StreamModeActive then
9950: LD_EXP 26
9954: NOT
9955: IFFALSE 9965
// StreamModeActive := true ;
9957: LD_ADDR_EXP 26
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// if p3 = 0 then
9965: LD_VAR 0 3
9969: PUSH
9970: LD_INT 0
9972: EQUAL
9973: IFFALSE 9979
// InitStreamMode ;
9975: CALL 11057 0 0
// if p3 = 1 then
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: IFFALSE 9997
// sRocket := true ;
9989: LD_ADDR_EXP 31
9993: PUSH
9994: LD_INT 1
9996: ST_TO_ADDR
// if p3 = 2 then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 2
10004: EQUAL
10005: IFFALSE 10015
// sSpeed := true ;
10007: LD_ADDR_EXP 30
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// if p3 = 3 then
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 3
10022: EQUAL
10023: IFFALSE 10033
// sEngine := true ;
10025: LD_ADDR_EXP 32
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// if p3 = 4 then
10033: LD_VAR 0 3
10037: PUSH
10038: LD_INT 4
10040: EQUAL
10041: IFFALSE 10051
// sSpec := true ;
10043: LD_ADDR_EXP 29
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// if p3 = 5 then
10051: LD_VAR 0 3
10055: PUSH
10056: LD_INT 5
10058: EQUAL
10059: IFFALSE 10069
// sLevel := true ;
10061: LD_ADDR_EXP 33
10065: PUSH
10066: LD_INT 1
10068: ST_TO_ADDR
// if p3 = 6 then
10069: LD_VAR 0 3
10073: PUSH
10074: LD_INT 6
10076: EQUAL
10077: IFFALSE 10087
// sArmoury := true ;
10079: LD_ADDR_EXP 34
10083: PUSH
10084: LD_INT 1
10086: ST_TO_ADDR
// if p3 = 7 then
10087: LD_VAR 0 3
10091: PUSH
10092: LD_INT 7
10094: EQUAL
10095: IFFALSE 10105
// sRadar := true ;
10097: LD_ADDR_EXP 35
10101: PUSH
10102: LD_INT 1
10104: ST_TO_ADDR
// if p3 = 8 then
10105: LD_VAR 0 3
10109: PUSH
10110: LD_INT 8
10112: EQUAL
10113: IFFALSE 10123
// sBunker := true ;
10115: LD_ADDR_EXP 36
10119: PUSH
10120: LD_INT 1
10122: ST_TO_ADDR
// if p3 = 9 then
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 9
10130: EQUAL
10131: IFFALSE 10141
// sHack := true ;
10133: LD_ADDR_EXP 37
10137: PUSH
10138: LD_INT 1
10140: ST_TO_ADDR
// if p3 = 10 then
10141: LD_VAR 0 3
10145: PUSH
10146: LD_INT 10
10148: EQUAL
10149: IFFALSE 10159
// sFire := true ;
10151: LD_ADDR_EXP 38
10155: PUSH
10156: LD_INT 1
10158: ST_TO_ADDR
// if p3 = 11 then
10159: LD_VAR 0 3
10163: PUSH
10164: LD_INT 11
10166: EQUAL
10167: IFFALSE 10177
// sRefresh := true ;
10169: LD_ADDR_EXP 39
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
// if p3 = 12 then
10177: LD_VAR 0 3
10181: PUSH
10182: LD_INT 12
10184: EQUAL
10185: IFFALSE 10195
// sExp := true ;
10187: LD_ADDR_EXP 40
10191: PUSH
10192: LD_INT 1
10194: ST_TO_ADDR
// if p3 = 13 then
10195: LD_VAR 0 3
10199: PUSH
10200: LD_INT 13
10202: EQUAL
10203: IFFALSE 10213
// sDepot := true ;
10205: LD_ADDR_EXP 41
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// if p3 = 14 then
10213: LD_VAR 0 3
10217: PUSH
10218: LD_INT 14
10220: EQUAL
10221: IFFALSE 10231
// sFlag := true ;
10223: LD_ADDR_EXP 42
10227: PUSH
10228: LD_INT 1
10230: ST_TO_ADDR
// if p3 = 15 then
10231: LD_VAR 0 3
10235: PUSH
10236: LD_INT 15
10238: EQUAL
10239: IFFALSE 10249
// sKamikadze := true ;
10241: LD_ADDR_EXP 50
10245: PUSH
10246: LD_INT 1
10248: ST_TO_ADDR
// if p3 = 16 then
10249: LD_VAR 0 3
10253: PUSH
10254: LD_INT 16
10256: EQUAL
10257: IFFALSE 10267
// sTroll := true ;
10259: LD_ADDR_EXP 51
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
// if p3 = 17 then
10267: LD_VAR 0 3
10271: PUSH
10272: LD_INT 17
10274: EQUAL
10275: IFFALSE 10285
// sSlow := true ;
10277: LD_ADDR_EXP 52
10281: PUSH
10282: LD_INT 1
10284: ST_TO_ADDR
// if p3 = 18 then
10285: LD_VAR 0 3
10289: PUSH
10290: LD_INT 18
10292: EQUAL
10293: IFFALSE 10303
// sLack := true ;
10295: LD_ADDR_EXP 53
10299: PUSH
10300: LD_INT 1
10302: ST_TO_ADDR
// if p3 = 19 then
10303: LD_VAR 0 3
10307: PUSH
10308: LD_INT 19
10310: EQUAL
10311: IFFALSE 10321
// sTank := true ;
10313: LD_ADDR_EXP 55
10317: PUSH
10318: LD_INT 1
10320: ST_TO_ADDR
// if p3 = 20 then
10321: LD_VAR 0 3
10325: PUSH
10326: LD_INT 20
10328: EQUAL
10329: IFFALSE 10339
// sRemote := true ;
10331: LD_ADDR_EXP 56
10335: PUSH
10336: LD_INT 1
10338: ST_TO_ADDR
// if p3 = 21 then
10339: LD_VAR 0 3
10343: PUSH
10344: LD_INT 21
10346: EQUAL
10347: IFFALSE 10357
// sPowell := true ;
10349: LD_ADDR_EXP 57
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// if p3 = 22 then
10357: LD_VAR 0 3
10361: PUSH
10362: LD_INT 22
10364: EQUAL
10365: IFFALSE 10375
// sTeleport := true ;
10367: LD_ADDR_EXP 60
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// if p3 = 23 then
10375: LD_VAR 0 3
10379: PUSH
10380: LD_INT 23
10382: EQUAL
10383: IFFALSE 10393
// sOilTower := true ;
10385: LD_ADDR_EXP 62
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// if p3 = 24 then
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 24
10400: EQUAL
10401: IFFALSE 10411
// sShovel := true ;
10403: LD_ADDR_EXP 63
10407: PUSH
10408: LD_INT 1
10410: ST_TO_ADDR
// if p3 = 25 then
10411: LD_VAR 0 3
10415: PUSH
10416: LD_INT 25
10418: EQUAL
10419: IFFALSE 10429
// sSheik := true ;
10421: LD_ADDR_EXP 64
10425: PUSH
10426: LD_INT 1
10428: ST_TO_ADDR
// if p3 = 26 then
10429: LD_VAR 0 3
10433: PUSH
10434: LD_INT 26
10436: EQUAL
10437: IFFALSE 10447
// sEarthquake := true ;
10439: LD_ADDR_EXP 66
10443: PUSH
10444: LD_INT 1
10446: ST_TO_ADDR
// if p3 = 27 then
10447: LD_VAR 0 3
10451: PUSH
10452: LD_INT 27
10454: EQUAL
10455: IFFALSE 10465
// sAI := true ;
10457: LD_ADDR_EXP 67
10461: PUSH
10462: LD_INT 1
10464: ST_TO_ADDR
// if p3 = 28 then
10465: LD_VAR 0 3
10469: PUSH
10470: LD_INT 28
10472: EQUAL
10473: IFFALSE 10483
// sCargo := true ;
10475: LD_ADDR_EXP 70
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// if p3 = 29 then
10483: LD_VAR 0 3
10487: PUSH
10488: LD_INT 29
10490: EQUAL
10491: IFFALSE 10501
// sDLaser := true ;
10493: LD_ADDR_EXP 71
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// if p3 = 30 then
10501: LD_VAR 0 3
10505: PUSH
10506: LD_INT 30
10508: EQUAL
10509: IFFALSE 10519
// sExchange := true ;
10511: LD_ADDR_EXP 72
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// if p3 = 31 then
10519: LD_VAR 0 3
10523: PUSH
10524: LD_INT 31
10526: EQUAL
10527: IFFALSE 10537
// sFac := true ;
10529: LD_ADDR_EXP 73
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// if p3 = 32 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_INT 32
10544: EQUAL
10545: IFFALSE 10555
// sPower := true ;
10547: LD_ADDR_EXP 74
10551: PUSH
10552: LD_INT 1
10554: ST_TO_ADDR
// if p3 = 33 then
10555: LD_VAR 0 3
10559: PUSH
10560: LD_INT 33
10562: EQUAL
10563: IFFALSE 10573
// sRandom := true ;
10565: LD_ADDR_EXP 75
10569: PUSH
10570: LD_INT 1
10572: ST_TO_ADDR
// if p3 = 34 then
10573: LD_VAR 0 3
10577: PUSH
10578: LD_INT 34
10580: EQUAL
10581: IFFALSE 10591
// sShield := true ;
10583: LD_ADDR_EXP 76
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// if p3 = 35 then
10591: LD_VAR 0 3
10595: PUSH
10596: LD_INT 35
10598: EQUAL
10599: IFFALSE 10609
// sTime := true ;
10601: LD_ADDR_EXP 77
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// if p3 = 36 then
10609: LD_VAR 0 3
10613: PUSH
10614: LD_INT 36
10616: EQUAL
10617: IFFALSE 10627
// sTools := true ;
10619: LD_ADDR_EXP 78
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// if p3 = 101 then
10627: LD_VAR 0 3
10631: PUSH
10632: LD_INT 101
10634: EQUAL
10635: IFFALSE 10645
// sSold := true ;
10637: LD_ADDR_EXP 43
10641: PUSH
10642: LD_INT 1
10644: ST_TO_ADDR
// if p3 = 102 then
10645: LD_VAR 0 3
10649: PUSH
10650: LD_INT 102
10652: EQUAL
10653: IFFALSE 10663
// sDiff := true ;
10655: LD_ADDR_EXP 44
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// if p3 = 103 then
10663: LD_VAR 0 3
10667: PUSH
10668: LD_INT 103
10670: EQUAL
10671: IFFALSE 10681
// sFog := true ;
10673: LD_ADDR_EXP 47
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// if p3 = 104 then
10681: LD_VAR 0 3
10685: PUSH
10686: LD_INT 104
10688: EQUAL
10689: IFFALSE 10699
// sReset := true ;
10691: LD_ADDR_EXP 48
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// if p3 = 105 then
10699: LD_VAR 0 3
10703: PUSH
10704: LD_INT 105
10706: EQUAL
10707: IFFALSE 10717
// sSun := true ;
10709: LD_ADDR_EXP 49
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// if p3 = 106 then
10717: LD_VAR 0 3
10721: PUSH
10722: LD_INT 106
10724: EQUAL
10725: IFFALSE 10735
// sTiger := true ;
10727: LD_ADDR_EXP 45
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// if p3 = 107 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 107
10742: EQUAL
10743: IFFALSE 10753
// sBomb := true ;
10745: LD_ADDR_EXP 46
10749: PUSH
10750: LD_INT 1
10752: ST_TO_ADDR
// if p3 = 108 then
10753: LD_VAR 0 3
10757: PUSH
10758: LD_INT 108
10760: EQUAL
10761: IFFALSE 10771
// sWound := true ;
10763: LD_ADDR_EXP 54
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// if p3 = 109 then
10771: LD_VAR 0 3
10775: PUSH
10776: LD_INT 109
10778: EQUAL
10779: IFFALSE 10789
// sBetray := true ;
10781: LD_ADDR_EXP 58
10785: PUSH
10786: LD_INT 1
10788: ST_TO_ADDR
// if p3 = 110 then
10789: LD_VAR 0 3
10793: PUSH
10794: LD_INT 110
10796: EQUAL
10797: IFFALSE 10807
// sContamin := true ;
10799: LD_ADDR_EXP 59
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// if p3 = 111 then
10807: LD_VAR 0 3
10811: PUSH
10812: LD_INT 111
10814: EQUAL
10815: IFFALSE 10825
// sOil := true ;
10817: LD_ADDR_EXP 61
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// if p3 = 112 then
10825: LD_VAR 0 3
10829: PUSH
10830: LD_INT 112
10832: EQUAL
10833: IFFALSE 10843
// sStu := true ;
10835: LD_ADDR_EXP 65
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// if p3 = 113 then
10843: LD_VAR 0 3
10847: PUSH
10848: LD_INT 113
10850: EQUAL
10851: IFFALSE 10861
// sBazooka := true ;
10853: LD_ADDR_EXP 68
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// if p3 = 114 then
10861: LD_VAR 0 3
10865: PUSH
10866: LD_INT 114
10868: EQUAL
10869: IFFALSE 10879
// sMortar := true ;
10871: LD_ADDR_EXP 69
10875: PUSH
10876: LD_INT 1
10878: ST_TO_ADDR
// if p3 = 115 then
10879: LD_VAR 0 3
10883: PUSH
10884: LD_INT 115
10886: EQUAL
10887: IFFALSE 10897
// sRanger := true ;
10889: LD_ADDR_EXP 79
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// end ; if p2 = 101 then
10897: LD_VAR 0 2
10901: PUSH
10902: LD_INT 101
10904: EQUAL
10905: IFFALSE 11033
// begin case p3 of 1 :
10907: LD_VAR 0 3
10911: PUSH
10912: LD_INT 1
10914: DOUBLE
10915: EQUAL
10916: IFTRUE 10920
10918: GO 10927
10920: POP
// hHackUnlimitedResources ; 2 :
10921: CALL 22070 0 0
10925: GO 11033
10927: LD_INT 2
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10935
10933: GO 10942
10935: POP
// hHackSetLevel10 ; 3 :
10936: CALL 22203 0 0
10940: GO 11033
10942: LD_INT 3
10944: DOUBLE
10945: EQUAL
10946: IFTRUE 10950
10948: GO 10957
10950: POP
// hHackSetLevel10YourUnits ; 4 :
10951: CALL 22288 0 0
10955: GO 11033
10957: LD_INT 4
10959: DOUBLE
10960: EQUAL
10961: IFTRUE 10965
10963: GO 10972
10965: POP
// hHackInvincible ; 5 :
10966: CALL 22736 0 0
10970: GO 11033
10972: LD_INT 5
10974: DOUBLE
10975: EQUAL
10976: IFTRUE 10980
10978: GO 10987
10980: POP
// hHackInvisible ; 6 :
10981: CALL 22847 0 0
10985: GO 11033
10987: LD_INT 6
10989: DOUBLE
10990: EQUAL
10991: IFTRUE 10995
10993: GO 11002
10995: POP
// hHackChangeYourSide ; 7 :
10996: CALL 22904 0 0
11000: GO 11033
11002: LD_INT 7
11004: DOUBLE
11005: EQUAL
11006: IFTRUE 11010
11008: GO 11017
11010: POP
// hHackChangeUnitSide ; 8 :
11011: CALL 22946 0 0
11015: GO 11033
11017: LD_INT 8
11019: DOUBLE
11020: EQUAL
11021: IFTRUE 11025
11023: GO 11032
11025: POP
// hHackFog ; end ;
11026: CALL 23047 0 0
11030: GO 11033
11032: POP
// end ; end ;
11033: LD_VAR 0 7
11037: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11038: GO 11040
11040: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11041: LD_STRING initStreamRollete();
11043: PPUSH
11044: CALL_OW 559
// InitStreamMode ;
11048: CALL 11057 0 0
// DefineStreamItems ( ) ;
11052: CALL 11497 0 0
// end ;
11056: END
// function InitStreamMode ; begin
11057: LD_INT 0
11059: PPUSH
// streamModeActive := false ;
11060: LD_ADDR_EXP 26
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// normalCounter := 36 ;
11068: LD_ADDR_EXP 27
11072: PUSH
11073: LD_INT 36
11075: ST_TO_ADDR
// hardcoreCounter := 16 ;
11076: LD_ADDR_EXP 28
11080: PUSH
11081: LD_INT 16
11083: ST_TO_ADDR
// sRocket := false ;
11084: LD_ADDR_EXP 31
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// sSpeed := false ;
11092: LD_ADDR_EXP 30
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// sEngine := false ;
11100: LD_ADDR_EXP 32
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// sSpec := false ;
11108: LD_ADDR_EXP 29
11112: PUSH
11113: LD_INT 0
11115: ST_TO_ADDR
// sLevel := false ;
11116: LD_ADDR_EXP 33
11120: PUSH
11121: LD_INT 0
11123: ST_TO_ADDR
// sArmoury := false ;
11124: LD_ADDR_EXP 34
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// sRadar := false ;
11132: LD_ADDR_EXP 35
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// sBunker := false ;
11140: LD_ADDR_EXP 36
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// sHack := false ;
11148: LD_ADDR_EXP 37
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// sFire := false ;
11156: LD_ADDR_EXP 38
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// sRefresh := false ;
11164: LD_ADDR_EXP 39
11168: PUSH
11169: LD_INT 0
11171: ST_TO_ADDR
// sExp := false ;
11172: LD_ADDR_EXP 40
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// sDepot := false ;
11180: LD_ADDR_EXP 41
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// sFlag := false ;
11188: LD_ADDR_EXP 42
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// sKamikadze := false ;
11196: LD_ADDR_EXP 50
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// sTroll := false ;
11204: LD_ADDR_EXP 51
11208: PUSH
11209: LD_INT 0
11211: ST_TO_ADDR
// sSlow := false ;
11212: LD_ADDR_EXP 52
11216: PUSH
11217: LD_INT 0
11219: ST_TO_ADDR
// sLack := false ;
11220: LD_ADDR_EXP 53
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// sTank := false ;
11228: LD_ADDR_EXP 55
11232: PUSH
11233: LD_INT 0
11235: ST_TO_ADDR
// sRemote := false ;
11236: LD_ADDR_EXP 56
11240: PUSH
11241: LD_INT 0
11243: ST_TO_ADDR
// sPowell := false ;
11244: LD_ADDR_EXP 57
11248: PUSH
11249: LD_INT 0
11251: ST_TO_ADDR
// sTeleport := false ;
11252: LD_ADDR_EXP 60
11256: PUSH
11257: LD_INT 0
11259: ST_TO_ADDR
// sOilTower := false ;
11260: LD_ADDR_EXP 62
11264: PUSH
11265: LD_INT 0
11267: ST_TO_ADDR
// sShovel := false ;
11268: LD_ADDR_EXP 63
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// sSheik := false ;
11276: LD_ADDR_EXP 64
11280: PUSH
11281: LD_INT 0
11283: ST_TO_ADDR
// sEarthquake := false ;
11284: LD_ADDR_EXP 66
11288: PUSH
11289: LD_INT 0
11291: ST_TO_ADDR
// sAI := false ;
11292: LD_ADDR_EXP 67
11296: PUSH
11297: LD_INT 0
11299: ST_TO_ADDR
// sCargo := false ;
11300: LD_ADDR_EXP 70
11304: PUSH
11305: LD_INT 0
11307: ST_TO_ADDR
// sDLaser := false ;
11308: LD_ADDR_EXP 71
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// sExchange := false ;
11316: LD_ADDR_EXP 72
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// sFac := false ;
11324: LD_ADDR_EXP 73
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// sPower := false ;
11332: LD_ADDR_EXP 74
11336: PUSH
11337: LD_INT 0
11339: ST_TO_ADDR
// sRandom := false ;
11340: LD_ADDR_EXP 75
11344: PUSH
11345: LD_INT 0
11347: ST_TO_ADDR
// sShield := false ;
11348: LD_ADDR_EXP 76
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// sTime := false ;
11356: LD_ADDR_EXP 77
11360: PUSH
11361: LD_INT 0
11363: ST_TO_ADDR
// sTools := false ;
11364: LD_ADDR_EXP 78
11368: PUSH
11369: LD_INT 0
11371: ST_TO_ADDR
// sSold := false ;
11372: LD_ADDR_EXP 43
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// sDiff := false ;
11380: LD_ADDR_EXP 44
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// sFog := false ;
11388: LD_ADDR_EXP 47
11392: PUSH
11393: LD_INT 0
11395: ST_TO_ADDR
// sReset := false ;
11396: LD_ADDR_EXP 48
11400: PUSH
11401: LD_INT 0
11403: ST_TO_ADDR
// sSun := false ;
11404: LD_ADDR_EXP 49
11408: PUSH
11409: LD_INT 0
11411: ST_TO_ADDR
// sTiger := false ;
11412: LD_ADDR_EXP 45
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// sBomb := false ;
11420: LD_ADDR_EXP 46
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// sWound := false ;
11428: LD_ADDR_EXP 54
11432: PUSH
11433: LD_INT 0
11435: ST_TO_ADDR
// sBetray := false ;
11436: LD_ADDR_EXP 58
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// sContamin := false ;
11444: LD_ADDR_EXP 59
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// sOil := false ;
11452: LD_ADDR_EXP 61
11456: PUSH
11457: LD_INT 0
11459: ST_TO_ADDR
// sStu := false ;
11460: LD_ADDR_EXP 65
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// sBazooka := false ;
11468: LD_ADDR_EXP 68
11472: PUSH
11473: LD_INT 0
11475: ST_TO_ADDR
// sMortar := false ;
11476: LD_ADDR_EXP 69
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// sRanger := false ;
11484: LD_ADDR_EXP 79
11488: PUSH
11489: LD_INT 0
11491: ST_TO_ADDR
// end ;
11492: LD_VAR 0 1
11496: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
11501: PPUSH
11502: PPUSH
11503: PPUSH
// result := [ ] ;
11504: LD_ADDR_VAR 0 1
11508: PUSH
11509: EMPTY
11510: ST_TO_ADDR
// if campaign_id = 1 then
11511: LD_OWVAR 69
11515: PUSH
11516: LD_INT 1
11518: EQUAL
11519: IFFALSE 14457
// begin case mission_number of 1 :
11521: LD_OWVAR 70
11525: PUSH
11526: LD_INT 1
11528: DOUBLE
11529: EQUAL
11530: IFTRUE 11534
11532: GO 11598
11534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11535: LD_ADDR_VAR 0 1
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: LD_INT 4
11545: PUSH
11546: LD_INT 11
11548: PUSH
11549: LD_INT 12
11551: PUSH
11552: LD_INT 15
11554: PUSH
11555: LD_INT 16
11557: PUSH
11558: LD_INT 22
11560: PUSH
11561: LD_INT 23
11563: PUSH
11564: LD_INT 26
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 101
11580: PUSH
11581: LD_INT 102
11583: PUSH
11584: LD_INT 106
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: ST_TO_ADDR
11596: GO 14455
11598: LD_INT 2
11600: DOUBLE
11601: EQUAL
11602: IFTRUE 11606
11604: GO 11678
11606: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_INT 2
11614: PUSH
11615: LD_INT 4
11617: PUSH
11618: LD_INT 11
11620: PUSH
11621: LD_INT 12
11623: PUSH
11624: LD_INT 15
11626: PUSH
11627: LD_INT 16
11629: PUSH
11630: LD_INT 22
11632: PUSH
11633: LD_INT 23
11635: PUSH
11636: LD_INT 26
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 101
11652: PUSH
11653: LD_INT 102
11655: PUSH
11656: LD_INT 105
11658: PUSH
11659: LD_INT 106
11661: PUSH
11662: LD_INT 108
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 14455
11678: LD_INT 3
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11762
11686: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11687: LD_ADDR_VAR 0 1
11691: PUSH
11692: LD_INT 2
11694: PUSH
11695: LD_INT 4
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: LD_INT 11
11703: PUSH
11704: LD_INT 12
11706: PUSH
11707: LD_INT 15
11709: PUSH
11710: LD_INT 16
11712: PUSH
11713: LD_INT 22
11715: PUSH
11716: LD_INT 26
11718: PUSH
11719: LD_INT 36
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 101
11736: PUSH
11737: LD_INT 102
11739: PUSH
11740: LD_INT 105
11742: PUSH
11743: LD_INT 106
11745: PUSH
11746: LD_INT 108
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: ST_TO_ADDR
11760: GO 14455
11762: LD_INT 4
11764: DOUBLE
11765: EQUAL
11766: IFTRUE 11770
11768: GO 11854
11770: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11771: LD_ADDR_VAR 0 1
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: LD_INT 4
11781: PUSH
11782: LD_INT 5
11784: PUSH
11785: LD_INT 8
11787: PUSH
11788: LD_INT 11
11790: PUSH
11791: LD_INT 12
11793: PUSH
11794: LD_INT 15
11796: PUSH
11797: LD_INT 16
11799: PUSH
11800: LD_INT 22
11802: PUSH
11803: LD_INT 23
11805: PUSH
11806: LD_INT 26
11808: PUSH
11809: LD_INT 36
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 101
11828: PUSH
11829: LD_INT 102
11831: PUSH
11832: LD_INT 105
11834: PUSH
11835: LD_INT 106
11837: PUSH
11838: LD_INT 108
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: ST_TO_ADDR
11852: GO 14455
11854: LD_INT 5
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11962
11862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11863: LD_ADDR_VAR 0 1
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 6
11879: PUSH
11880: LD_INT 8
11882: PUSH
11883: LD_INT 11
11885: PUSH
11886: LD_INT 12
11888: PUSH
11889: LD_INT 15
11891: PUSH
11892: LD_INT 16
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 23
11900: PUSH
11901: LD_INT 25
11903: PUSH
11904: LD_INT 26
11906: PUSH
11907: LD_INT 36
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 101
11928: PUSH
11929: LD_INT 102
11931: PUSH
11932: LD_INT 105
11934: PUSH
11935: LD_INT 106
11937: PUSH
11938: LD_INT 108
11940: PUSH
11941: LD_INT 109
11943: PUSH
11944: LD_INT 112
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: ST_TO_ADDR
11960: GO 14455
11962: LD_INT 6
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 12090
11970: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11971: LD_ADDR_VAR 0 1
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 4
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: LD_INT 6
11987: PUSH
11988: LD_INT 8
11990: PUSH
11991: LD_INT 11
11993: PUSH
11994: LD_INT 12
11996: PUSH
11997: LD_INT 15
11999: PUSH
12000: LD_INT 16
12002: PUSH
12003: LD_INT 20
12005: PUSH
12006: LD_INT 21
12008: PUSH
12009: LD_INT 22
12011: PUSH
12012: LD_INT 23
12014: PUSH
12015: LD_INT 25
12017: PUSH
12018: LD_INT 26
12020: PUSH
12021: LD_INT 30
12023: PUSH
12024: LD_INT 31
12026: PUSH
12027: LD_INT 32
12029: PUSH
12030: LD_INT 36
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 101
12056: PUSH
12057: LD_INT 102
12059: PUSH
12060: LD_INT 105
12062: PUSH
12063: LD_INT 106
12065: PUSH
12066: LD_INT 108
12068: PUSH
12069: LD_INT 109
12071: PUSH
12072: LD_INT 112
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: ST_TO_ADDR
12088: GO 14455
12090: LD_INT 7
12092: DOUBLE
12093: EQUAL
12094: IFTRUE 12098
12096: GO 12198
12098: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12099: LD_ADDR_VAR 0 1
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: LD_INT 4
12109: PUSH
12110: LD_INT 5
12112: PUSH
12113: LD_INT 7
12115: PUSH
12116: LD_INT 11
12118: PUSH
12119: LD_INT 12
12121: PUSH
12122: LD_INT 15
12124: PUSH
12125: LD_INT 16
12127: PUSH
12128: LD_INT 20
12130: PUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 22
12136: PUSH
12137: LD_INT 23
12139: PUSH
12140: LD_INT 25
12142: PUSH
12143: LD_INT 26
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 101
12164: PUSH
12165: LD_INT 102
12167: PUSH
12168: LD_INT 103
12170: PUSH
12171: LD_INT 105
12173: PUSH
12174: LD_INT 106
12176: PUSH
12177: LD_INT 108
12179: PUSH
12180: LD_INT 112
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: ST_TO_ADDR
12196: GO 14455
12198: LD_INT 8
12200: DOUBLE
12201: EQUAL
12202: IFTRUE 12206
12204: GO 12334
12206: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12207: LD_ADDR_VAR 0 1
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: LD_INT 4
12217: PUSH
12218: LD_INT 5
12220: PUSH
12221: LD_INT 6
12223: PUSH
12224: LD_INT 7
12226: PUSH
12227: LD_INT 8
12229: PUSH
12230: LD_INT 11
12232: PUSH
12233: LD_INT 12
12235: PUSH
12236: LD_INT 15
12238: PUSH
12239: LD_INT 16
12241: PUSH
12242: LD_INT 20
12244: PUSH
12245: LD_INT 21
12247: PUSH
12248: LD_INT 22
12250: PUSH
12251: LD_INT 23
12253: PUSH
12254: LD_INT 25
12256: PUSH
12257: LD_INT 26
12259: PUSH
12260: LD_INT 30
12262: PUSH
12263: LD_INT 31
12265: PUSH
12266: LD_INT 32
12268: PUSH
12269: LD_INT 36
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 101
12296: PUSH
12297: LD_INT 102
12299: PUSH
12300: LD_INT 103
12302: PUSH
12303: LD_INT 105
12305: PUSH
12306: LD_INT 106
12308: PUSH
12309: LD_INT 108
12311: PUSH
12312: LD_INT 109
12314: PUSH
12315: LD_INT 112
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: ST_TO_ADDR
12332: GO 14455
12334: LD_INT 9
12336: DOUBLE
12337: EQUAL
12338: IFTRUE 12342
12340: GO 12478
12342: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12343: LD_ADDR_VAR 0 1
12347: PUSH
12348: LD_INT 2
12350: PUSH
12351: LD_INT 4
12353: PUSH
12354: LD_INT 5
12356: PUSH
12357: LD_INT 6
12359: PUSH
12360: LD_INT 7
12362: PUSH
12363: LD_INT 8
12365: PUSH
12366: LD_INT 11
12368: PUSH
12369: LD_INT 12
12371: PUSH
12372: LD_INT 15
12374: PUSH
12375: LD_INT 16
12377: PUSH
12378: LD_INT 20
12380: PUSH
12381: LD_INT 21
12383: PUSH
12384: LD_INT 22
12386: PUSH
12387: LD_INT 23
12389: PUSH
12390: LD_INT 25
12392: PUSH
12393: LD_INT 26
12395: PUSH
12396: LD_INT 28
12398: PUSH
12399: LD_INT 30
12401: PUSH
12402: LD_INT 31
12404: PUSH
12405: LD_INT 32
12407: PUSH
12408: LD_INT 36
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 101
12436: PUSH
12437: LD_INT 102
12439: PUSH
12440: LD_INT 103
12442: PUSH
12443: LD_INT 105
12445: PUSH
12446: LD_INT 106
12448: PUSH
12449: LD_INT 108
12451: PUSH
12452: LD_INT 109
12454: PUSH
12455: LD_INT 112
12457: PUSH
12458: LD_INT 114
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: ST_TO_ADDR
12476: GO 14455
12478: LD_INT 10
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12670
12486: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 2
12494: PUSH
12495: LD_INT 4
12497: PUSH
12498: LD_INT 5
12500: PUSH
12501: LD_INT 6
12503: PUSH
12504: LD_INT 7
12506: PUSH
12507: LD_INT 8
12509: PUSH
12510: LD_INT 9
12512: PUSH
12513: LD_INT 10
12515: PUSH
12516: LD_INT 11
12518: PUSH
12519: LD_INT 12
12521: PUSH
12522: LD_INT 13
12524: PUSH
12525: LD_INT 14
12527: PUSH
12528: LD_INT 15
12530: PUSH
12531: LD_INT 16
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 18
12539: PUSH
12540: LD_INT 19
12542: PUSH
12543: LD_INT 20
12545: PUSH
12546: LD_INT 21
12548: PUSH
12549: LD_INT 22
12551: PUSH
12552: LD_INT 23
12554: PUSH
12555: LD_INT 24
12557: PUSH
12558: LD_INT 25
12560: PUSH
12561: LD_INT 26
12563: PUSH
12564: LD_INT 28
12566: PUSH
12567: LD_INT 30
12569: PUSH
12570: LD_INT 31
12572: PUSH
12573: LD_INT 32
12575: PUSH
12576: LD_INT 36
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 101
12612: PUSH
12613: LD_INT 102
12615: PUSH
12616: LD_INT 103
12618: PUSH
12619: LD_INT 104
12621: PUSH
12622: LD_INT 105
12624: PUSH
12625: LD_INT 106
12627: PUSH
12628: LD_INT 107
12630: PUSH
12631: LD_INT 108
12633: PUSH
12634: LD_INT 109
12636: PUSH
12637: LD_INT 110
12639: PUSH
12640: LD_INT 111
12642: PUSH
12643: LD_INT 112
12645: PUSH
12646: LD_INT 114
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: ST_TO_ADDR
12668: GO 14455
12670: LD_INT 11
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12870
12678: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12679: LD_ADDR_VAR 0 1
12683: PUSH
12684: LD_INT 2
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: LD_INT 4
12692: PUSH
12693: LD_INT 5
12695: PUSH
12696: LD_INT 6
12698: PUSH
12699: LD_INT 7
12701: PUSH
12702: LD_INT 8
12704: PUSH
12705: LD_INT 9
12707: PUSH
12708: LD_INT 10
12710: PUSH
12711: LD_INT 11
12713: PUSH
12714: LD_INT 12
12716: PUSH
12717: LD_INT 13
12719: PUSH
12720: LD_INT 14
12722: PUSH
12723: LD_INT 15
12725: PUSH
12726: LD_INT 16
12728: PUSH
12729: LD_INT 17
12731: PUSH
12732: LD_INT 18
12734: PUSH
12735: LD_INT 19
12737: PUSH
12738: LD_INT 20
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 23
12749: PUSH
12750: LD_INT 24
12752: PUSH
12753: LD_INT 25
12755: PUSH
12756: LD_INT 26
12758: PUSH
12759: LD_INT 28
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 31
12767: PUSH
12768: LD_INT 32
12770: PUSH
12771: LD_INT 34
12773: PUSH
12774: LD_INT 36
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 101
12812: PUSH
12813: LD_INT 102
12815: PUSH
12816: LD_INT 103
12818: PUSH
12819: LD_INT 104
12821: PUSH
12822: LD_INT 105
12824: PUSH
12825: LD_INT 106
12827: PUSH
12828: LD_INT 107
12830: PUSH
12831: LD_INT 108
12833: PUSH
12834: LD_INT 109
12836: PUSH
12837: LD_INT 110
12839: PUSH
12840: LD_INT 111
12842: PUSH
12843: LD_INT 112
12845: PUSH
12846: LD_INT 114
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: ST_TO_ADDR
12868: GO 14455
12870: LD_INT 12
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 13086
12878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12879: LD_ADDR_VAR 0 1
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 4
12895: PUSH
12896: LD_INT 5
12898: PUSH
12899: LD_INT 6
12901: PUSH
12902: LD_INT 7
12904: PUSH
12905: LD_INT 8
12907: PUSH
12908: LD_INT 9
12910: PUSH
12911: LD_INT 10
12913: PUSH
12914: LD_INT 11
12916: PUSH
12917: LD_INT 12
12919: PUSH
12920: LD_INT 13
12922: PUSH
12923: LD_INT 14
12925: PUSH
12926: LD_INT 15
12928: PUSH
12929: LD_INT 16
12931: PUSH
12932: LD_INT 17
12934: PUSH
12935: LD_INT 18
12937: PUSH
12938: LD_INT 19
12940: PUSH
12941: LD_INT 20
12943: PUSH
12944: LD_INT 21
12946: PUSH
12947: LD_INT 22
12949: PUSH
12950: LD_INT 23
12952: PUSH
12953: LD_INT 24
12955: PUSH
12956: LD_INT 25
12958: PUSH
12959: LD_INT 26
12961: PUSH
12962: LD_INT 27
12964: PUSH
12965: LD_INT 28
12967: PUSH
12968: LD_INT 30
12970: PUSH
12971: LD_INT 31
12973: PUSH
12974: LD_INT 32
12976: PUSH
12977: LD_INT 33
12979: PUSH
12980: LD_INT 34
12982: PUSH
12983: LD_INT 36
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 102
13027: PUSH
13028: LD_INT 103
13030: PUSH
13031: LD_INT 104
13033: PUSH
13034: LD_INT 105
13036: PUSH
13037: LD_INT 106
13039: PUSH
13040: LD_INT 107
13042: PUSH
13043: LD_INT 108
13045: PUSH
13046: LD_INT 109
13048: PUSH
13049: LD_INT 110
13051: PUSH
13052: LD_INT 111
13054: PUSH
13055: LD_INT 112
13057: PUSH
13058: LD_INT 113
13060: PUSH
13061: LD_INT 114
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: ST_TO_ADDR
13084: GO 14455
13086: LD_INT 13
13088: DOUBLE
13089: EQUAL
13090: IFTRUE 13094
13092: GO 13290
13094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13095: LD_ADDR_VAR 0 1
13099: PUSH
13100: LD_INT 1
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: LD_INT 4
13111: PUSH
13112: LD_INT 5
13114: PUSH
13115: LD_INT 8
13117: PUSH
13118: LD_INT 9
13120: PUSH
13121: LD_INT 10
13123: PUSH
13124: LD_INT 11
13126: PUSH
13127: LD_INT 12
13129: PUSH
13130: LD_INT 14
13132: PUSH
13133: LD_INT 15
13135: PUSH
13136: LD_INT 16
13138: PUSH
13139: LD_INT 17
13141: PUSH
13142: LD_INT 18
13144: PUSH
13145: LD_INT 19
13147: PUSH
13148: LD_INT 20
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 22
13156: PUSH
13157: LD_INT 23
13159: PUSH
13160: LD_INT 24
13162: PUSH
13163: LD_INT 25
13165: PUSH
13166: LD_INT 26
13168: PUSH
13169: LD_INT 27
13171: PUSH
13172: LD_INT 28
13174: PUSH
13175: LD_INT 30
13177: PUSH
13178: LD_INT 31
13180: PUSH
13181: LD_INT 32
13183: PUSH
13184: LD_INT 33
13186: PUSH
13187: LD_INT 34
13189: PUSH
13190: LD_INT 36
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 101
13228: PUSH
13229: LD_INT 102
13231: PUSH
13232: LD_INT 103
13234: PUSH
13235: LD_INT 104
13237: PUSH
13238: LD_INT 105
13240: PUSH
13241: LD_INT 106
13243: PUSH
13244: LD_INT 107
13246: PUSH
13247: LD_INT 108
13249: PUSH
13250: LD_INT 109
13252: PUSH
13253: LD_INT 110
13255: PUSH
13256: LD_INT 111
13258: PUSH
13259: LD_INT 112
13261: PUSH
13262: LD_INT 113
13264: PUSH
13265: LD_INT 114
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: ST_TO_ADDR
13288: GO 14455
13290: LD_INT 14
13292: DOUBLE
13293: EQUAL
13294: IFTRUE 13298
13296: GO 13510
13298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13299: LD_ADDR_VAR 0 1
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 3
13312: PUSH
13313: LD_INT 4
13315: PUSH
13316: LD_INT 5
13318: PUSH
13319: LD_INT 6
13321: PUSH
13322: LD_INT 7
13324: PUSH
13325: LD_INT 8
13327: PUSH
13328: LD_INT 9
13330: PUSH
13331: LD_INT 10
13333: PUSH
13334: LD_INT 11
13336: PUSH
13337: LD_INT 12
13339: PUSH
13340: LD_INT 13
13342: PUSH
13343: LD_INT 14
13345: PUSH
13346: LD_INT 15
13348: PUSH
13349: LD_INT 16
13351: PUSH
13352: LD_INT 17
13354: PUSH
13355: LD_INT 18
13357: PUSH
13358: LD_INT 19
13360: PUSH
13361: LD_INT 20
13363: PUSH
13364: LD_INT 21
13366: PUSH
13367: LD_INT 22
13369: PUSH
13370: LD_INT 23
13372: PUSH
13373: LD_INT 24
13375: PUSH
13376: LD_INT 25
13378: PUSH
13379: LD_INT 26
13381: PUSH
13382: LD_INT 27
13384: PUSH
13385: LD_INT 28
13387: PUSH
13388: LD_INT 29
13390: PUSH
13391: LD_INT 30
13393: PUSH
13394: LD_INT 31
13396: PUSH
13397: LD_INT 32
13399: PUSH
13400: LD_INT 33
13402: PUSH
13403: LD_INT 34
13405: PUSH
13406: LD_INT 36
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 101
13448: PUSH
13449: LD_INT 102
13451: PUSH
13452: LD_INT 103
13454: PUSH
13455: LD_INT 104
13457: PUSH
13458: LD_INT 105
13460: PUSH
13461: LD_INT 106
13463: PUSH
13464: LD_INT 107
13466: PUSH
13467: LD_INT 108
13469: PUSH
13470: LD_INT 109
13472: PUSH
13473: LD_INT 110
13475: PUSH
13476: LD_INT 111
13478: PUSH
13479: LD_INT 112
13481: PUSH
13482: LD_INT 113
13484: PUSH
13485: LD_INT 114
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: ST_TO_ADDR
13508: GO 14455
13510: LD_INT 15
13512: DOUBLE
13513: EQUAL
13514: IFTRUE 13518
13516: GO 13730
13518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13519: LD_ADDR_VAR 0 1
13523: PUSH
13524: LD_INT 1
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: LD_INT 3
13532: PUSH
13533: LD_INT 4
13535: PUSH
13536: LD_INT 5
13538: PUSH
13539: LD_INT 6
13541: PUSH
13542: LD_INT 7
13544: PUSH
13545: LD_INT 8
13547: PUSH
13548: LD_INT 9
13550: PUSH
13551: LD_INT 10
13553: PUSH
13554: LD_INT 11
13556: PUSH
13557: LD_INT 12
13559: PUSH
13560: LD_INT 13
13562: PUSH
13563: LD_INT 14
13565: PUSH
13566: LD_INT 15
13568: PUSH
13569: LD_INT 16
13571: PUSH
13572: LD_INT 17
13574: PUSH
13575: LD_INT 18
13577: PUSH
13578: LD_INT 19
13580: PUSH
13581: LD_INT 20
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 22
13589: PUSH
13590: LD_INT 23
13592: PUSH
13593: LD_INT 24
13595: PUSH
13596: LD_INT 25
13598: PUSH
13599: LD_INT 26
13601: PUSH
13602: LD_INT 27
13604: PUSH
13605: LD_INT 28
13607: PUSH
13608: LD_INT 29
13610: PUSH
13611: LD_INT 30
13613: PUSH
13614: LD_INT 31
13616: PUSH
13617: LD_INT 32
13619: PUSH
13620: LD_INT 33
13622: PUSH
13623: LD_INT 34
13625: PUSH
13626: LD_INT 36
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 101
13668: PUSH
13669: LD_INT 102
13671: PUSH
13672: LD_INT 103
13674: PUSH
13675: LD_INT 104
13677: PUSH
13678: LD_INT 105
13680: PUSH
13681: LD_INT 106
13683: PUSH
13684: LD_INT 107
13686: PUSH
13687: LD_INT 108
13689: PUSH
13690: LD_INT 109
13692: PUSH
13693: LD_INT 110
13695: PUSH
13696: LD_INT 111
13698: PUSH
13699: LD_INT 112
13701: PUSH
13702: LD_INT 113
13704: PUSH
13705: LD_INT 114
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: ST_TO_ADDR
13728: GO 14455
13730: LD_INT 16
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13862
13738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13739: LD_ADDR_VAR 0 1
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 7
13755: PUSH
13756: LD_INT 11
13758: PUSH
13759: LD_INT 12
13761: PUSH
13762: LD_INT 15
13764: PUSH
13765: LD_INT 16
13767: PUSH
13768: LD_INT 20
13770: PUSH
13771: LD_INT 21
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_INT 23
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 26
13785: PUSH
13786: LD_INT 30
13788: PUSH
13789: LD_INT 31
13791: PUSH
13792: LD_INT 32
13794: PUSH
13795: LD_INT 33
13797: PUSH
13798: LD_INT 34
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 101
13824: PUSH
13825: LD_INT 102
13827: PUSH
13828: LD_INT 103
13830: PUSH
13831: LD_INT 106
13833: PUSH
13834: LD_INT 108
13836: PUSH
13837: LD_INT 112
13839: PUSH
13840: LD_INT 113
13842: PUSH
13843: LD_INT 114
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: ST_TO_ADDR
13860: GO 14455
13862: LD_INT 17
13864: DOUBLE
13865: EQUAL
13866: IFTRUE 13870
13868: GO 14082
13870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13871: LD_ADDR_VAR 0 1
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: LD_INT 2
13881: PUSH
13882: LD_INT 3
13884: PUSH
13885: LD_INT 4
13887: PUSH
13888: LD_INT 5
13890: PUSH
13891: LD_INT 6
13893: PUSH
13894: LD_INT 7
13896: PUSH
13897: LD_INT 8
13899: PUSH
13900: LD_INT 9
13902: PUSH
13903: LD_INT 10
13905: PUSH
13906: LD_INT 11
13908: PUSH
13909: LD_INT 12
13911: PUSH
13912: LD_INT 13
13914: PUSH
13915: LD_INT 14
13917: PUSH
13918: LD_INT 15
13920: PUSH
13921: LD_INT 16
13923: PUSH
13924: LD_INT 17
13926: PUSH
13927: LD_INT 18
13929: PUSH
13930: LD_INT 19
13932: PUSH
13933: LD_INT 20
13935: PUSH
13936: LD_INT 21
13938: PUSH
13939: LD_INT 22
13941: PUSH
13942: LD_INT 23
13944: PUSH
13945: LD_INT 24
13947: PUSH
13948: LD_INT 25
13950: PUSH
13951: LD_INT 26
13953: PUSH
13954: LD_INT 27
13956: PUSH
13957: LD_INT 28
13959: PUSH
13960: LD_INT 29
13962: PUSH
13963: LD_INT 30
13965: PUSH
13966: LD_INT 31
13968: PUSH
13969: LD_INT 32
13971: PUSH
13972: LD_INT 33
13974: PUSH
13975: LD_INT 34
13977: PUSH
13978: LD_INT 36
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 101
14020: PUSH
14021: LD_INT 102
14023: PUSH
14024: LD_INT 103
14026: PUSH
14027: LD_INT 104
14029: PUSH
14030: LD_INT 105
14032: PUSH
14033: LD_INT 106
14035: PUSH
14036: LD_INT 107
14038: PUSH
14039: LD_INT 108
14041: PUSH
14042: LD_INT 109
14044: PUSH
14045: LD_INT 110
14047: PUSH
14048: LD_INT 111
14050: PUSH
14051: LD_INT 112
14053: PUSH
14054: LD_INT 113
14056: PUSH
14057: LD_INT 114
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: ST_TO_ADDR
14080: GO 14455
14082: LD_INT 18
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14226
14090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14091: LD_ADDR_VAR 0 1
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: LD_INT 4
14101: PUSH
14102: LD_INT 5
14104: PUSH
14105: LD_INT 7
14107: PUSH
14108: LD_INT 11
14110: PUSH
14111: LD_INT 12
14113: PUSH
14114: LD_INT 15
14116: PUSH
14117: LD_INT 16
14119: PUSH
14120: LD_INT 20
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 25
14134: PUSH
14135: LD_INT 26
14137: PUSH
14138: LD_INT 30
14140: PUSH
14141: LD_INT 31
14143: PUSH
14144: LD_INT 32
14146: PUSH
14147: LD_INT 33
14149: PUSH
14150: LD_INT 34
14152: PUSH
14153: LD_INT 35
14155: PUSH
14156: LD_INT 36
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 101
14184: PUSH
14185: LD_INT 102
14187: PUSH
14188: LD_INT 103
14190: PUSH
14191: LD_INT 106
14193: PUSH
14194: LD_INT 108
14196: PUSH
14197: LD_INT 112
14199: PUSH
14200: LD_INT 113
14202: PUSH
14203: LD_INT 114
14205: PUSH
14206: LD_INT 115
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: ST_TO_ADDR
14224: GO 14455
14226: LD_INT 19
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14454
14234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: LD_INT 1
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: LD_INT 4
14251: PUSH
14252: LD_INT 5
14254: PUSH
14255: LD_INT 6
14257: PUSH
14258: LD_INT 7
14260: PUSH
14261: LD_INT 8
14263: PUSH
14264: LD_INT 9
14266: PUSH
14267: LD_INT 10
14269: PUSH
14270: LD_INT 11
14272: PUSH
14273: LD_INT 12
14275: PUSH
14276: LD_INT 13
14278: PUSH
14279: LD_INT 14
14281: PUSH
14282: LD_INT 15
14284: PUSH
14285: LD_INT 16
14287: PUSH
14288: LD_INT 17
14290: PUSH
14291: LD_INT 18
14293: PUSH
14294: LD_INT 19
14296: PUSH
14297: LD_INT 20
14299: PUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 22
14305: PUSH
14306: LD_INT 23
14308: PUSH
14309: LD_INT 24
14311: PUSH
14312: LD_INT 25
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: LD_INT 27
14320: PUSH
14321: LD_INT 28
14323: PUSH
14324: LD_INT 29
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: LD_INT 31
14332: PUSH
14333: LD_INT 32
14335: PUSH
14336: LD_INT 33
14338: PUSH
14339: LD_INT 34
14341: PUSH
14342: LD_INT 35
14344: PUSH
14345: LD_INT 36
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 101
14388: PUSH
14389: LD_INT 102
14391: PUSH
14392: LD_INT 103
14394: PUSH
14395: LD_INT 104
14397: PUSH
14398: LD_INT 105
14400: PUSH
14401: LD_INT 106
14403: PUSH
14404: LD_INT 107
14406: PUSH
14407: LD_INT 108
14409: PUSH
14410: LD_INT 109
14412: PUSH
14413: LD_INT 110
14415: PUSH
14416: LD_INT 111
14418: PUSH
14419: LD_INT 112
14421: PUSH
14422: LD_INT 113
14424: PUSH
14425: LD_INT 114
14427: PUSH
14428: LD_INT 115
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: ST_TO_ADDR
14452: GO 14455
14454: POP
// end else
14455: GO 14674
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 1
14464: PUSH
14465: LD_INT 2
14467: PUSH
14468: LD_INT 3
14470: PUSH
14471: LD_INT 4
14473: PUSH
14474: LD_INT 5
14476: PUSH
14477: LD_INT 6
14479: PUSH
14480: LD_INT 7
14482: PUSH
14483: LD_INT 8
14485: PUSH
14486: LD_INT 9
14488: PUSH
14489: LD_INT 10
14491: PUSH
14492: LD_INT 11
14494: PUSH
14495: LD_INT 12
14497: PUSH
14498: LD_INT 13
14500: PUSH
14501: LD_INT 14
14503: PUSH
14504: LD_INT 15
14506: PUSH
14507: LD_INT 16
14509: PUSH
14510: LD_INT 17
14512: PUSH
14513: LD_INT 18
14515: PUSH
14516: LD_INT 19
14518: PUSH
14519: LD_INT 20
14521: PUSH
14522: LD_INT 21
14524: PUSH
14525: LD_INT 22
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: LD_INT 24
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 26
14539: PUSH
14540: LD_INT 27
14542: PUSH
14543: LD_INT 28
14545: PUSH
14546: LD_INT 29
14548: PUSH
14549: LD_INT 30
14551: PUSH
14552: LD_INT 31
14554: PUSH
14555: LD_INT 32
14557: PUSH
14558: LD_INT 33
14560: PUSH
14561: LD_INT 34
14563: PUSH
14564: LD_INT 35
14566: PUSH
14567: LD_INT 36
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 101
14610: PUSH
14611: LD_INT 102
14613: PUSH
14614: LD_INT 103
14616: PUSH
14617: LD_INT 104
14619: PUSH
14620: LD_INT 105
14622: PUSH
14623: LD_INT 106
14625: PUSH
14626: LD_INT 107
14628: PUSH
14629: LD_INT 108
14631: PUSH
14632: LD_INT 109
14634: PUSH
14635: LD_INT 110
14637: PUSH
14638: LD_INT 111
14640: PUSH
14641: LD_INT 112
14643: PUSH
14644: LD_INT 113
14646: PUSH
14647: LD_INT 114
14649: PUSH
14650: LD_INT 115
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: ST_TO_ADDR
// if result then
14674: LD_VAR 0 1
14678: IFFALSE 14967
// begin normal :=  ;
14680: LD_ADDR_VAR 0 3
14684: PUSH
14685: LD_STRING 
14687: ST_TO_ADDR
// hardcore :=  ;
14688: LD_ADDR_VAR 0 4
14692: PUSH
14693: LD_STRING 
14695: ST_TO_ADDR
// for i = 1 to normalCounter do
14696: LD_ADDR_VAR 0 5
14700: PUSH
14701: DOUBLE
14702: LD_INT 1
14704: DEC
14705: ST_TO_ADDR
14706: LD_EXP 27
14710: PUSH
14711: FOR_TO
14712: IFFALSE 14813
// begin tmp := 0 ;
14714: LD_ADDR_VAR 0 2
14718: PUSH
14719: LD_STRING 0
14721: ST_TO_ADDR
// if result [ 1 ] then
14722: LD_VAR 0 1
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: IFFALSE 14795
// if result [ 1 ] [ 1 ] = i then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PUSH
14745: LD_VAR 0 5
14749: EQUAL
14750: IFFALSE 14795
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14752: LD_ADDR_VAR 0 1
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_INT 1
14764: PPUSH
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 3
14781: PPUSH
14782: CALL_OW 1
14786: ST_TO_ADDR
// tmp := 1 ;
14787: LD_ADDR_VAR 0 2
14791: PUSH
14792: LD_STRING 1
14794: ST_TO_ADDR
// end ; normal := normal & tmp ;
14795: LD_ADDR_VAR 0 3
14799: PUSH
14800: LD_VAR 0 3
14804: PUSH
14805: LD_VAR 0 2
14809: STR
14810: ST_TO_ADDR
// end ;
14811: GO 14711
14813: POP
14814: POP
// for i = 1 to hardcoreCounter do
14815: LD_ADDR_VAR 0 5
14819: PUSH
14820: DOUBLE
14821: LD_INT 1
14823: DEC
14824: ST_TO_ADDR
14825: LD_EXP 28
14829: PUSH
14830: FOR_TO
14831: IFFALSE 14936
// begin tmp := 0 ;
14833: LD_ADDR_VAR 0 2
14837: PUSH
14838: LD_STRING 0
14840: ST_TO_ADDR
// if result [ 2 ] then
14841: LD_VAR 0 1
14845: PUSH
14846: LD_INT 2
14848: ARRAY
14849: IFFALSE 14918
// if result [ 2 ] [ 1 ] = 100 + i then
14851: LD_VAR 0 1
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: PUSH
14860: LD_INT 1
14862: ARRAY
14863: PUSH
14864: LD_INT 100
14866: PUSH
14867: LD_VAR 0 5
14871: PLUS
14872: EQUAL
14873: IFFALSE 14918
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14875: LD_ADDR_VAR 0 1
14879: PUSH
14880: LD_VAR 0 1
14884: PPUSH
14885: LD_INT 2
14887: PPUSH
14888: LD_VAR 0 1
14892: PUSH
14893: LD_INT 2
14895: ARRAY
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: CALL_OW 3
14904: PPUSH
14905: CALL_OW 1
14909: ST_TO_ADDR
// tmp := 1 ;
14910: LD_ADDR_VAR 0 2
14914: PUSH
14915: LD_STRING 1
14917: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14918: LD_ADDR_VAR 0 4
14922: PUSH
14923: LD_VAR 0 4
14927: PUSH
14928: LD_VAR 0 2
14932: STR
14933: ST_TO_ADDR
// end ;
14934: GO 14830
14936: POP
14937: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14938: LD_STRING getStreamItemsFromMission("
14940: PUSH
14941: LD_VAR 0 3
14945: STR
14946: PUSH
14947: LD_STRING ","
14949: STR
14950: PUSH
14951: LD_VAR 0 4
14955: STR
14956: PUSH
14957: LD_STRING ")
14959: STR
14960: PPUSH
14961: CALL_OW 559
// end else
14965: GO 14974
// ToLua ( getStreamItemsFromMission("","") ) ;
14967: LD_STRING getStreamItemsFromMission("","")
14969: PPUSH
14970: CALL_OW 559
// end ;
14974: LD_VAR 0 1
14978: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14979: LD_EXP 26
14983: PUSH
14984: LD_EXP 31
14988: AND
14989: IFFALSE 15113
14991: GO 14993
14993: DISABLE
14994: LD_INT 0
14996: PPUSH
14997: PPUSH
// begin enable ;
14998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14999: LD_ADDR_VAR 0 2
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_OWVAR 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 2
15018: PUSH
15019: LD_INT 34
15021: PUSH
15022: LD_INT 7
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 34
15031: PUSH
15032: LD_INT 45
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 34
15041: PUSH
15042: LD_INT 28
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 34
15051: PUSH
15052: LD_INT 47
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PPUSH
15070: CALL_OW 69
15074: ST_TO_ADDR
// if not tmp then
15075: LD_VAR 0 2
15079: NOT
15080: IFFALSE 15084
// exit ;
15082: GO 15113
// for i in tmp do
15084: LD_ADDR_VAR 0 1
15088: PUSH
15089: LD_VAR 0 2
15093: PUSH
15094: FOR_IN
15095: IFFALSE 15111
// begin SetLives ( i , 0 ) ;
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_INT 0
15104: PPUSH
15105: CALL_OW 234
// end ;
15109: GO 15094
15111: POP
15112: POP
// end ;
15113: PPOPN 2
15115: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15116: LD_EXP 26
15120: PUSH
15121: LD_EXP 32
15125: AND
15126: IFFALSE 15210
15128: GO 15130
15130: DISABLE
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
// begin enable ;
15135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_OWVAR 2
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 32
15155: PUSH
15156: LD_INT 3
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PPUSH
15167: CALL_OW 69
15171: ST_TO_ADDR
// if not tmp then
15172: LD_VAR 0 2
15176: NOT
15177: IFFALSE 15181
// exit ;
15179: GO 15210
// for i in tmp do
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: LD_VAR 0 2
15190: PUSH
15191: FOR_IN
15192: IFFALSE 15208
// begin SetLives ( i , 0 ) ;
15194: LD_VAR 0 1
15198: PPUSH
15199: LD_INT 0
15201: PPUSH
15202: CALL_OW 234
// end ;
15206: GO 15191
15208: POP
15209: POP
// end ;
15210: PPOPN 2
15212: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15213: LD_EXP 26
15217: PUSH
15218: LD_EXP 29
15222: AND
15223: IFFALSE 15316
15225: GO 15227
15227: DISABLE
15228: LD_INT 0
15230: PPUSH
// begin enable ;
15231: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15232: LD_ADDR_VAR 0 1
15236: PUSH
15237: LD_INT 22
15239: PUSH
15240: LD_OWVAR 2
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 2
15251: PUSH
15252: LD_INT 25
15254: PUSH
15255: LD_INT 5
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 9
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 25
15274: PUSH
15275: LD_INT 8
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PPUSH
15292: CALL_OW 69
15296: PUSH
15297: FOR_IN
15298: IFFALSE 15314
// begin SetClass ( i , 1 ) ;
15300: LD_VAR 0 1
15304: PPUSH
15305: LD_INT 1
15307: PPUSH
15308: CALL_OW 336
// end ;
15312: GO 15297
15314: POP
15315: POP
// end ;
15316: PPOPN 1
15318: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15319: LD_EXP 26
15323: PUSH
15324: LD_EXP 30
15328: AND
15329: PUSH
15330: LD_OWVAR 65
15334: PUSH
15335: LD_INT 7
15337: LESS
15338: AND
15339: IFFALSE 15353
15341: GO 15343
15343: DISABLE
// begin enable ;
15344: ENABLE
// game_speed := 7 ;
15345: LD_ADDR_OWVAR 65
15349: PUSH
15350: LD_INT 7
15352: ST_TO_ADDR
// end ;
15353: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15354: LD_EXP 26
15358: PUSH
15359: LD_EXP 33
15363: AND
15364: IFFALSE 15566
15366: GO 15368
15368: DISABLE
15369: LD_INT 0
15371: PPUSH
15372: PPUSH
15373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15374: LD_ADDR_VAR 0 3
15378: PUSH
15379: LD_INT 81
15381: PUSH
15382: LD_OWVAR 2
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 21
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PPUSH
15405: CALL_OW 69
15409: ST_TO_ADDR
// if not tmp then
15410: LD_VAR 0 3
15414: NOT
15415: IFFALSE 15419
// exit ;
15417: GO 15566
// if tmp > 5 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 5
15426: GREATER
15427: IFFALSE 15439
// k := 5 else
15429: LD_ADDR_VAR 0 2
15433: PUSH
15434: LD_INT 5
15436: ST_TO_ADDR
15437: GO 15449
// k := tmp ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_VAR 0 3
15448: ST_TO_ADDR
// for i := 1 to k do
15449: LD_ADDR_VAR 0 1
15453: PUSH
15454: DOUBLE
15455: LD_INT 1
15457: DEC
15458: ST_TO_ADDR
15459: LD_VAR 0 2
15463: PUSH
15464: FOR_TO
15465: IFFALSE 15564
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15467: LD_VAR 0 3
15471: PUSH
15472: LD_VAR 0 1
15476: ARRAY
15477: PPUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 4
15485: MOD
15486: PUSH
15487: LD_INT 1
15489: PLUS
15490: PPUSH
15491: CALL_OW 259
15495: PUSH
15496: LD_INT 10
15498: LESS
15499: IFFALSE 15562
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15501: LD_VAR 0 3
15505: PUSH
15506: LD_VAR 0 1
15510: ARRAY
15511: PPUSH
15512: LD_VAR 0 1
15516: PUSH
15517: LD_INT 4
15519: MOD
15520: PUSH
15521: LD_INT 1
15523: PLUS
15524: PPUSH
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: ARRAY
15535: PPUSH
15536: LD_VAR 0 1
15540: PUSH
15541: LD_INT 4
15543: MOD
15544: PUSH
15545: LD_INT 1
15547: PLUS
15548: PPUSH
15549: CALL_OW 259
15553: PUSH
15554: LD_INT 1
15556: PLUS
15557: PPUSH
15558: CALL_OW 237
15562: GO 15464
15564: POP
15565: POP
// end ;
15566: PPOPN 3
15568: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15569: LD_EXP 26
15573: PUSH
15574: LD_EXP 34
15578: AND
15579: IFFALSE 15599
15581: GO 15583
15583: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15584: LD_INT 4
15586: PPUSH
15587: LD_OWVAR 2
15591: PPUSH
15592: LD_INT 0
15594: PPUSH
15595: CALL_OW 324
15599: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15600: LD_EXP 26
15604: PUSH
15605: LD_EXP 63
15609: AND
15610: IFFALSE 15630
15612: GO 15614
15614: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15615: LD_INT 19
15617: PPUSH
15618: LD_OWVAR 2
15622: PPUSH
15623: LD_INT 0
15625: PPUSH
15626: CALL_OW 324
15630: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15631: LD_EXP 26
15635: PUSH
15636: LD_EXP 35
15640: AND
15641: IFFALSE 15743
15643: GO 15645
15645: DISABLE
15646: LD_INT 0
15648: PPUSH
15649: PPUSH
// begin enable ;
15650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15651: LD_ADDR_VAR 0 2
15655: PUSH
15656: LD_INT 22
15658: PUSH
15659: LD_OWVAR 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 34
15673: PUSH
15674: LD_INT 11
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 34
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: ST_TO_ADDR
// if not tmp then
15705: LD_VAR 0 2
15709: NOT
15710: IFFALSE 15714
// exit ;
15712: GO 15743
// for i in tmp do
15714: LD_ADDR_VAR 0 1
15718: PUSH
15719: LD_VAR 0 2
15723: PUSH
15724: FOR_IN
15725: IFFALSE 15741
// begin SetLives ( i , 0 ) ;
15727: LD_VAR 0 1
15731: PPUSH
15732: LD_INT 0
15734: PPUSH
15735: CALL_OW 234
// end ;
15739: GO 15724
15741: POP
15742: POP
// end ;
15743: PPOPN 2
15745: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15746: LD_EXP 26
15750: PUSH
15751: LD_EXP 36
15755: AND
15756: IFFALSE 15776
15758: GO 15760
15760: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15761: LD_INT 32
15763: PPUSH
15764: LD_OWVAR 2
15768: PPUSH
15769: LD_INT 0
15771: PPUSH
15772: CALL_OW 324
15776: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15777: LD_EXP 26
15781: PUSH
15782: LD_EXP 37
15786: AND
15787: IFFALSE 15968
15789: GO 15791
15791: DISABLE
15792: LD_INT 0
15794: PPUSH
15795: PPUSH
15796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15797: LD_ADDR_VAR 0 2
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_OWVAR 2
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 33
15816: PUSH
15817: LD_INT 3
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PPUSH
15828: CALL_OW 69
15832: ST_TO_ADDR
// if not tmp then
15833: LD_VAR 0 2
15837: NOT
15838: IFFALSE 15842
// exit ;
15840: GO 15968
// side := 0 ;
15842: LD_ADDR_VAR 0 3
15846: PUSH
15847: LD_INT 0
15849: ST_TO_ADDR
// for i := 1 to 8 do
15850: LD_ADDR_VAR 0 1
15854: PUSH
15855: DOUBLE
15856: LD_INT 1
15858: DEC
15859: ST_TO_ADDR
15860: LD_INT 8
15862: PUSH
15863: FOR_TO
15864: IFFALSE 15912
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15866: LD_OWVAR 2
15870: PUSH
15871: LD_VAR 0 1
15875: NONEQUAL
15876: PUSH
15877: LD_OWVAR 2
15881: PPUSH
15882: LD_VAR 0 1
15886: PPUSH
15887: CALL_OW 81
15891: PUSH
15892: LD_INT 2
15894: EQUAL
15895: AND
15896: IFFALSE 15910
// begin side := i ;
15898: LD_ADDR_VAR 0 3
15902: PUSH
15903: LD_VAR 0 1
15907: ST_TO_ADDR
// break ;
15908: GO 15912
// end ;
15910: GO 15863
15912: POP
15913: POP
// if not side then
15914: LD_VAR 0 3
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 15968
// for i := 1 to tmp do
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: DOUBLE
15929: LD_INT 1
15931: DEC
15932: ST_TO_ADDR
15933: LD_VAR 0 2
15937: PUSH
15938: FOR_TO
15939: IFFALSE 15966
// if Prob ( 60 ) then
15941: LD_INT 60
15943: PPUSH
15944: CALL_OW 13
15948: IFFALSE 15964
// SetSide ( i , side ) ;
15950: LD_VAR 0 1
15954: PPUSH
15955: LD_VAR 0 3
15959: PPUSH
15960: CALL_OW 235
15964: GO 15938
15966: POP
15967: POP
// end ;
15968: PPOPN 3
15970: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15971: LD_EXP 26
15975: PUSH
15976: LD_EXP 39
15980: AND
15981: IFFALSE 16100
15983: GO 15985
15985: DISABLE
15986: LD_INT 0
15988: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15989: LD_ADDR_VAR 0 1
15993: PUSH
15994: LD_INT 22
15996: PUSH
15997: LD_OWVAR 2
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 21
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 3
16018: PUSH
16019: LD_INT 23
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: PPUSH
16038: CALL_OW 69
16042: PUSH
16043: FOR_IN
16044: IFFALSE 16098
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 257
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: IN
16074: IFFALSE 16096
// SetClass ( un , rand ( 1 , 4 ) ) ;
16076: LD_VAR 0 1
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: LD_INT 4
16086: PPUSH
16087: CALL_OW 12
16091: PPUSH
16092: CALL_OW 336
16096: GO 16043
16098: POP
16099: POP
// end ;
16100: PPOPN 1
16102: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16103: LD_EXP 26
16107: PUSH
16108: LD_EXP 38
16112: AND
16113: IFFALSE 16192
16115: GO 16117
16117: DISABLE
16118: LD_INT 0
16120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16121: LD_ADDR_VAR 0 1
16125: PUSH
16126: LD_INT 22
16128: PUSH
16129: LD_OWVAR 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 21
16140: PUSH
16141: LD_INT 3
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PPUSH
16152: CALL_OW 69
16156: ST_TO_ADDR
// if not tmp then
16157: LD_VAR 0 1
16161: NOT
16162: IFFALSE 16166
// exit ;
16164: GO 16192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16166: LD_VAR 0 1
16170: PUSH
16171: LD_INT 1
16173: PPUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 12
16183: ARRAY
16184: PPUSH
16185: LD_INT 100
16187: PPUSH
16188: CALL_OW 234
// end ;
16192: PPOPN 1
16194: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16195: LD_EXP 26
16199: PUSH
16200: LD_EXP 40
16204: AND
16205: IFFALSE 16303
16207: GO 16209
16209: DISABLE
16210: LD_INT 0
16212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16213: LD_ADDR_VAR 0 1
16217: PUSH
16218: LD_INT 22
16220: PUSH
16221: LD_OWVAR 2
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 21
16232: PUSH
16233: LD_INT 1
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PPUSH
16244: CALL_OW 69
16248: ST_TO_ADDR
// if not tmp then
16249: LD_VAR 0 1
16253: NOT
16254: IFFALSE 16258
// exit ;
16256: GO 16303
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16258: LD_VAR 0 1
16262: PUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 12
16275: ARRAY
16276: PPUSH
16277: LD_INT 1
16279: PPUSH
16280: LD_INT 4
16282: PPUSH
16283: CALL_OW 12
16287: PPUSH
16288: LD_INT 3000
16290: PPUSH
16291: LD_INT 9000
16293: PPUSH
16294: CALL_OW 12
16298: PPUSH
16299: CALL_OW 492
// end ;
16303: PPOPN 1
16305: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16306: LD_EXP 26
16310: PUSH
16311: LD_EXP 41
16315: AND
16316: IFFALSE 16336
16318: GO 16320
16320: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16321: LD_INT 1
16323: PPUSH
16324: LD_OWVAR 2
16328: PPUSH
16329: LD_INT 0
16331: PPUSH
16332: CALL_OW 324
16336: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16337: LD_EXP 26
16341: PUSH
16342: LD_EXP 42
16346: AND
16347: IFFALSE 16430
16349: GO 16351
16351: DISABLE
16352: LD_INT 0
16354: PPUSH
16355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 21
16375: PUSH
16376: LD_INT 3
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 69
16391: ST_TO_ADDR
// if not tmp then
16392: LD_VAR 0 2
16396: NOT
16397: IFFALSE 16401
// exit ;
16399: GO 16430
// for i in tmp do
16401: LD_ADDR_VAR 0 1
16405: PUSH
16406: LD_VAR 0 2
16410: PUSH
16411: FOR_IN
16412: IFFALSE 16428
// SetBLevel ( i , 10 ) ;
16414: LD_VAR 0 1
16418: PPUSH
16419: LD_INT 10
16421: PPUSH
16422: CALL_OW 241
16426: GO 16411
16428: POP
16429: POP
// end ;
16430: PPOPN 2
16432: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16433: LD_EXP 26
16437: PUSH
16438: LD_EXP 43
16442: AND
16443: IFFALSE 16554
16445: GO 16447
16447: DISABLE
16448: LD_INT 0
16450: PPUSH
16451: PPUSH
16452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_OWVAR 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 25
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 69
16488: ST_TO_ADDR
// if not tmp then
16489: LD_VAR 0 3
16493: NOT
16494: IFFALSE 16498
// exit ;
16496: GO 16554
// un := tmp [ rand ( 1 , tmp ) ] ;
16498: LD_ADDR_VAR 0 2
16502: PUSH
16503: LD_VAR 0 3
16507: PUSH
16508: LD_INT 1
16510: PPUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: CALL_OW 12
16520: ARRAY
16521: ST_TO_ADDR
// if Crawls ( un ) then
16522: LD_VAR 0 2
16526: PPUSH
16527: CALL_OW 318
16531: IFFALSE 16542
// ComWalk ( un ) ;
16533: LD_VAR 0 2
16537: PPUSH
16538: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16542: LD_VAR 0 2
16546: PPUSH
16547: LD_INT 5
16549: PPUSH
16550: CALL_OW 336
// end ;
16554: PPOPN 3
16556: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16557: LD_EXP 26
16561: PUSH
16562: LD_EXP 44
16566: AND
16567: PUSH
16568: LD_OWVAR 67
16572: PUSH
16573: LD_INT 3
16575: LESS
16576: AND
16577: IFFALSE 16596
16579: GO 16581
16581: DISABLE
// Difficulty := Difficulty + 1 ;
16582: LD_ADDR_OWVAR 67
16586: PUSH
16587: LD_OWVAR 67
16591: PUSH
16592: LD_INT 1
16594: PLUS
16595: ST_TO_ADDR
16596: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16597: LD_EXP 26
16601: PUSH
16602: LD_EXP 45
16606: AND
16607: IFFALSE 16710
16609: GO 16611
16611: DISABLE
16612: LD_INT 0
16614: PPUSH
// begin for i := 1 to 5 do
16615: LD_ADDR_VAR 0 1
16619: PUSH
16620: DOUBLE
16621: LD_INT 1
16623: DEC
16624: ST_TO_ADDR
16625: LD_INT 5
16627: PUSH
16628: FOR_TO
16629: IFFALSE 16708
// begin uc_nation := nation_nature ;
16631: LD_ADDR_OWVAR 21
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// uc_side := 0 ;
16639: LD_ADDR_OWVAR 20
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16647: LD_ADDR_OWVAR 29
16651: PUSH
16652: LD_INT 12
16654: PUSH
16655: LD_INT 12
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: ST_TO_ADDR
// hc_agressivity := 20 ;
16662: LD_ADDR_OWVAR 35
16666: PUSH
16667: LD_INT 20
16669: ST_TO_ADDR
// hc_class := class_tiger ;
16670: LD_ADDR_OWVAR 28
16674: PUSH
16675: LD_INT 14
16677: ST_TO_ADDR
// hc_gallery :=  ;
16678: LD_ADDR_OWVAR 33
16682: PUSH
16683: LD_STRING 
16685: ST_TO_ADDR
// hc_name :=  ;
16686: LD_ADDR_OWVAR 26
16690: PUSH
16691: LD_STRING 
16693: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16694: CALL_OW 44
16698: PPUSH
16699: LD_INT 0
16701: PPUSH
16702: CALL_OW 51
// end ;
16706: GO 16628
16708: POP
16709: POP
// end ;
16710: PPOPN 1
16712: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16713: LD_EXP 26
16717: PUSH
16718: LD_EXP 46
16722: AND
16723: IFFALSE 16732
16725: GO 16727
16727: DISABLE
// StreamSibBomb ;
16728: CALL 16733 0 0
16732: END
// export function StreamSibBomb ; var i , x , y ; begin
16733: LD_INT 0
16735: PPUSH
16736: PPUSH
16737: PPUSH
16738: PPUSH
// result := false ;
16739: LD_ADDR_VAR 0 1
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
// for i := 1 to 16 do
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: DOUBLE
16753: LD_INT 1
16755: DEC
16756: ST_TO_ADDR
16757: LD_INT 16
16759: PUSH
16760: FOR_TO
16761: IFFALSE 16960
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16763: LD_ADDR_VAR 0 3
16767: PUSH
16768: LD_INT 10
16770: PUSH
16771: LD_INT 20
16773: PUSH
16774: LD_INT 30
16776: PUSH
16777: LD_INT 40
16779: PUSH
16780: LD_INT 50
16782: PUSH
16783: LD_INT 60
16785: PUSH
16786: LD_INT 70
16788: PUSH
16789: LD_INT 80
16791: PUSH
16792: LD_INT 90
16794: PUSH
16795: LD_INT 100
16797: PUSH
16798: LD_INT 110
16800: PUSH
16801: LD_INT 120
16803: PUSH
16804: LD_INT 130
16806: PUSH
16807: LD_INT 140
16809: PUSH
16810: LD_INT 150
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: PPUSH
16833: LD_INT 15
16835: PPUSH
16836: CALL_OW 12
16840: ARRAY
16841: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16842: LD_ADDR_VAR 0 4
16846: PUSH
16847: LD_INT 10
16849: PUSH
16850: LD_INT 20
16852: PUSH
16853: LD_INT 30
16855: PUSH
16856: LD_INT 40
16858: PUSH
16859: LD_INT 50
16861: PUSH
16862: LD_INT 60
16864: PUSH
16865: LD_INT 70
16867: PUSH
16868: LD_INT 80
16870: PUSH
16871: LD_INT 90
16873: PUSH
16874: LD_INT 100
16876: PUSH
16877: LD_INT 110
16879: PUSH
16880: LD_INT 120
16882: PUSH
16883: LD_INT 130
16885: PUSH
16886: LD_INT 140
16888: PUSH
16889: LD_INT 150
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 1
16911: PPUSH
16912: LD_INT 15
16914: PPUSH
16915: CALL_OW 12
16919: ARRAY
16920: ST_TO_ADDR
// if ValidHex ( x , y ) then
16921: LD_VAR 0 3
16925: PPUSH
16926: LD_VAR 0 4
16930: PPUSH
16931: CALL_OW 488
16935: IFFALSE 16958
// begin result := [ x , y ] ;
16937: LD_ADDR_VAR 0 1
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_VAR 0 4
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: ST_TO_ADDR
// break ;
16956: GO 16960
// end ; end ;
16958: GO 16760
16960: POP
16961: POP
// if result then
16962: LD_VAR 0 1
16966: IFFALSE 17026
// begin ToLua ( playSibBomb() ) ;
16968: LD_STRING playSibBomb()
16970: PPUSH
16971: CALL_OW 559
// wait ( 0 0$14 ) ;
16975: LD_INT 490
16977: PPUSH
16978: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16982: LD_VAR 0 1
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: LD_VAR 0 1
16995: PUSH
16996: LD_INT 2
16998: ARRAY
16999: PPUSH
17000: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17004: LD_VAR 0 1
17008: PUSH
17009: LD_INT 1
17011: ARRAY
17012: PPUSH
17013: LD_VAR 0 1
17017: PUSH
17018: LD_INT 2
17020: ARRAY
17021: PPUSH
17022: CALL_OW 429
// end ; end ;
17026: LD_VAR 0 1
17030: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17031: LD_EXP 26
17035: PUSH
17036: LD_EXP 48
17040: AND
17041: IFFALSE 17053
17043: GO 17045
17045: DISABLE
// YouLost (  ) ;
17046: LD_STRING 
17048: PPUSH
17049: CALL_OW 104
17053: END
// every 0 0$1 trigger StreamModeActive and sFog do
17054: LD_EXP 26
17058: PUSH
17059: LD_EXP 47
17063: AND
17064: IFFALSE 17078
17066: GO 17068
17068: DISABLE
// FogOff ( your_side ) ;
17069: LD_OWVAR 2
17073: PPUSH
17074: CALL_OW 344
17078: END
// every 0 0$1 trigger StreamModeActive and sSun do
17079: LD_EXP 26
17083: PUSH
17084: LD_EXP 49
17088: AND
17089: IFFALSE 17117
17091: GO 17093
17093: DISABLE
// begin solar_recharge_percent := 0 ;
17094: LD_ADDR_OWVAR 79
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17102: LD_INT 10500
17104: PPUSH
17105: CALL_OW 67
// solar_recharge_percent := 100 ;
17109: LD_ADDR_OWVAR 79
17113: PUSH
17114: LD_INT 100
17116: ST_TO_ADDR
// end ;
17117: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17118: LD_EXP 26
17122: PUSH
17123: LD_EXP 50
17127: AND
17128: IFFALSE 17367
17130: GO 17132
17132: DISABLE
17133: LD_INT 0
17135: PPUSH
17136: PPUSH
17137: PPUSH
// begin tmp := [ ] ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: EMPTY
17144: ST_TO_ADDR
// for i := 1 to 6 do
17145: LD_ADDR_VAR 0 1
17149: PUSH
17150: DOUBLE
17151: LD_INT 1
17153: DEC
17154: ST_TO_ADDR
17155: LD_INT 6
17157: PUSH
17158: FOR_TO
17159: IFFALSE 17264
// begin uc_nation := nation_nature ;
17161: LD_ADDR_OWVAR 21
17165: PUSH
17166: LD_INT 0
17168: ST_TO_ADDR
// uc_side := 0 ;
17169: LD_ADDR_OWVAR 20
17173: PUSH
17174: LD_INT 0
17176: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17177: LD_ADDR_OWVAR 29
17181: PUSH
17182: LD_INT 12
17184: PUSH
17185: LD_INT 12
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: ST_TO_ADDR
// hc_agressivity := 20 ;
17192: LD_ADDR_OWVAR 35
17196: PUSH
17197: LD_INT 20
17199: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17200: LD_ADDR_OWVAR 28
17204: PUSH
17205: LD_INT 17
17207: ST_TO_ADDR
// hc_gallery :=  ;
17208: LD_ADDR_OWVAR 33
17212: PUSH
17213: LD_STRING 
17215: ST_TO_ADDR
// hc_name :=  ;
17216: LD_ADDR_OWVAR 26
17220: PUSH
17221: LD_STRING 
17223: ST_TO_ADDR
// un := CreateHuman ;
17224: LD_ADDR_VAR 0 2
17228: PUSH
17229: CALL_OW 44
17233: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17234: LD_VAR 0 2
17238: PPUSH
17239: LD_INT 1
17241: PPUSH
17242: CALL_OW 51
// tmp := tmp ^ un ;
17246: LD_ADDR_VAR 0 3
17250: PUSH
17251: LD_VAR 0 3
17255: PUSH
17256: LD_VAR 0 2
17260: ADD
17261: ST_TO_ADDR
// end ;
17262: GO 17158
17264: POP
17265: POP
// repeat wait ( 0 0$1 ) ;
17266: LD_INT 35
17268: PPUSH
17269: CALL_OW 67
// for un in tmp do
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_VAR 0 3
17282: PUSH
17283: FOR_IN
17284: IFFALSE 17358
// begin if IsDead ( un ) then
17286: LD_VAR 0 2
17290: PPUSH
17291: CALL_OW 301
17295: IFFALSE 17315
// begin tmp := tmp diff un ;
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_VAR 0 3
17306: PUSH
17307: LD_VAR 0 2
17311: DIFF
17312: ST_TO_ADDR
// continue ;
17313: GO 17283
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17315: LD_VAR 0 2
17319: PPUSH
17320: LD_INT 3
17322: PUSH
17323: LD_INT 22
17325: PUSH
17326: LD_INT 0
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PPUSH
17337: CALL_OW 69
17341: PPUSH
17342: LD_VAR 0 2
17346: PPUSH
17347: CALL_OW 74
17351: PPUSH
17352: CALL_OW 115
// end ;
17356: GO 17283
17358: POP
17359: POP
// until not tmp ;
17360: LD_VAR 0 3
17364: NOT
17365: IFFALSE 17266
// end ;
17367: PPOPN 3
17369: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17370: LD_EXP 26
17374: PUSH
17375: LD_EXP 51
17379: AND
17380: IFFALSE 17434
17382: GO 17384
17384: DISABLE
// begin ToLua ( displayTroll(); ) ;
17385: LD_STRING displayTroll();
17387: PPUSH
17388: CALL_OW 559
// wait ( 3 3$00 ) ;
17392: LD_INT 6300
17394: PPUSH
17395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17399: LD_STRING hideTroll();
17401: PPUSH
17402: CALL_OW 559
// wait ( 1 1$00 ) ;
17406: LD_INT 2100
17408: PPUSH
17409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17413: LD_STRING displayTroll();
17415: PPUSH
17416: CALL_OW 559
// wait ( 1 1$00 ) ;
17420: LD_INT 2100
17422: PPUSH
17423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17427: LD_STRING hideTroll();
17429: PPUSH
17430: CALL_OW 559
// end ;
17434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17435: LD_EXP 26
17439: PUSH
17440: LD_EXP 52
17444: AND
17445: IFFALSE 17508
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
// begin p := 0 ;
17453: LD_ADDR_VAR 0 1
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// repeat game_speed := 1 ;
17461: LD_ADDR_OWVAR 65
17465: PUSH
17466: LD_INT 1
17468: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17469: LD_INT 35
17471: PPUSH
17472: CALL_OW 67
// p := p + 1 ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_VAR 0 1
17485: PUSH
17486: LD_INT 1
17488: PLUS
17489: ST_TO_ADDR
// until p >= 60 ;
17490: LD_VAR 0 1
17494: PUSH
17495: LD_INT 60
17497: GREATEREQUAL
17498: IFFALSE 17461
// game_speed := 4 ;
17500: LD_ADDR_OWVAR 65
17504: PUSH
17505: LD_INT 4
17507: ST_TO_ADDR
// end ;
17508: PPOPN 1
17510: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17511: LD_EXP 26
17515: PUSH
17516: LD_EXP 53
17520: AND
17521: IFFALSE 17667
17523: GO 17525
17525: DISABLE
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 30
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PPUSH
17579: CALL_OW 69
17583: ST_TO_ADDR
// if not depot then
17584: LD_VAR 0 1
17588: NOT
17589: IFFALSE 17593
// exit ;
17591: GO 17667
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 1
17605: PPUSH
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 12
17615: ARRAY
17616: PPUSH
17617: CALL_OW 274
17621: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17622: LD_VAR 0 2
17626: PPUSH
17627: LD_INT 1
17629: PPUSH
17630: LD_INT 0
17632: PPUSH
17633: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17637: LD_VAR 0 2
17641: PPUSH
17642: LD_INT 2
17644: PPUSH
17645: LD_INT 0
17647: PPUSH
17648: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17652: LD_VAR 0 2
17656: PPUSH
17657: LD_INT 3
17659: PPUSH
17660: LD_INT 0
17662: PPUSH
17663: CALL_OW 277
// end ;
17667: PPOPN 2
17669: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17670: LD_EXP 26
17674: PUSH
17675: LD_EXP 54
17679: AND
17680: IFFALSE 17777
17682: GO 17684
17684: DISABLE
17685: LD_INT 0
17687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17688: LD_ADDR_VAR 0 1
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_OWVAR 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 21
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 3
17717: PUSH
17718: LD_INT 23
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: ST_TO_ADDR
// if not tmp then
17742: LD_VAR 0 1
17746: NOT
17747: IFFALSE 17751
// exit ;
17749: GO 17777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17751: LD_VAR 0 1
17755: PUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 12
17768: ARRAY
17769: PPUSH
17770: LD_INT 200
17772: PPUSH
17773: CALL_OW 234
// end ;
17777: PPOPN 1
17779: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17780: LD_EXP 26
17784: PUSH
17785: LD_EXP 55
17789: AND
17790: IFFALSE 17869
17792: GO 17794
17794: DISABLE
17795: LD_INT 0
17797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17798: LD_ADDR_VAR 0 1
17802: PUSH
17803: LD_INT 22
17805: PUSH
17806: LD_OWVAR 2
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 21
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if not tmp then
17834: LD_VAR 0 1
17838: NOT
17839: IFFALSE 17843
// exit ;
17841: GO 17869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17843: LD_VAR 0 1
17847: PUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_VAR 0 1
17855: PPUSH
17856: CALL_OW 12
17860: ARRAY
17861: PPUSH
17862: LD_INT 60
17864: PPUSH
17865: CALL_OW 234
// end ;
17869: PPOPN 1
17871: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17872: LD_EXP 26
17876: PUSH
17877: LD_EXP 56
17881: AND
17882: IFFALSE 17981
17884: GO 17886
17886: DISABLE
17887: LD_INT 0
17889: PPUSH
17890: PPUSH
// begin enable ;
17891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17892: LD_ADDR_VAR 0 1
17896: PUSH
17897: LD_INT 22
17899: PUSH
17900: LD_OWVAR 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 61
17911: PUSH
17912: EMPTY
17913: LIST
17914: PUSH
17915: LD_INT 33
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL_OW 69
17934: ST_TO_ADDR
// if not tmp then
17935: LD_VAR 0 1
17939: NOT
17940: IFFALSE 17944
// exit ;
17942: GO 17981
// for i in tmp do
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_VAR 0 1
17953: PUSH
17954: FOR_IN
17955: IFFALSE 17979
// if IsControledBy ( i ) then
17957: LD_VAR 0 2
17961: PPUSH
17962: CALL_OW 312
17966: IFFALSE 17977
// ComUnlink ( i ) ;
17968: LD_VAR 0 2
17972: PPUSH
17973: CALL_OW 136
17977: GO 17954
17979: POP
17980: POP
// end ;
17981: PPOPN 2
17983: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17984: LD_EXP 26
17988: PUSH
17989: LD_EXP 57
17993: AND
17994: IFFALSE 18134
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
// begin ToLua ( displayPowell(); ) ;
18003: LD_STRING displayPowell();
18005: PPUSH
18006: CALL_OW 559
// uc_side := 0 ;
18010: LD_ADDR_OWVAR 20
18014: PUSH
18015: LD_INT 0
18017: ST_TO_ADDR
// uc_nation := 2 ;
18018: LD_ADDR_OWVAR 21
18022: PUSH
18023: LD_INT 2
18025: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18026: LD_ADDR_OWVAR 37
18030: PUSH
18031: LD_INT 14
18033: ST_TO_ADDR
// vc_engine := engine_siberite ;
18034: LD_ADDR_OWVAR 39
18038: PUSH
18039: LD_INT 3
18041: ST_TO_ADDR
// vc_control := control_apeman ;
18042: LD_ADDR_OWVAR 38
18046: PUSH
18047: LD_INT 5
18049: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18050: LD_ADDR_OWVAR 40
18054: PUSH
18055: LD_INT 29
18057: ST_TO_ADDR
// un := CreateVehicle ;
18058: LD_ADDR_VAR 0 2
18062: PUSH
18063: CALL_OW 45
18067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18068: LD_VAR 0 2
18072: PPUSH
18073: LD_INT 1
18075: PPUSH
18076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18080: LD_INT 35
18082: PPUSH
18083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18087: LD_VAR 0 2
18091: PPUSH
18092: LD_INT 22
18094: PUSH
18095: LD_OWVAR 2
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PPUSH
18104: CALL_OW 69
18108: PPUSH
18109: LD_VAR 0 2
18113: PPUSH
18114: CALL_OW 74
18118: PPUSH
18119: CALL_OW 115
// until IsDead ( un ) ;
18123: LD_VAR 0 2
18127: PPUSH
18128: CALL_OW 301
18132: IFFALSE 18080
// end ;
18134: PPOPN 2
18136: END
// every 0 0$1 trigger StreamModeActive and sStu do
18137: LD_EXP 26
18141: PUSH
18142: LD_EXP 65
18146: AND
18147: IFFALSE 18163
18149: GO 18151
18151: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18152: LD_STRING displayStucuk();
18154: PPUSH
18155: CALL_OW 559
// ResetFog ;
18159: CALL_OW 335
// end ;
18163: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18164: LD_EXP 26
18168: PUSH
18169: LD_EXP 58
18173: AND
18174: IFFALSE 18315
18176: GO 18178
18178: DISABLE
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_OWVAR 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 21
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PPUSH
18214: CALL_OW 69
18218: ST_TO_ADDR
// if not tmp then
18219: LD_VAR 0 2
18223: NOT
18224: IFFALSE 18228
// exit ;
18226: GO 18315
// un := tmp [ rand ( 1 , tmp ) ] ;
18228: LD_ADDR_VAR 0 1
18232: PUSH
18233: LD_VAR 0 2
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL_OW 12
18250: ARRAY
18251: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18252: LD_VAR 0 1
18256: PPUSH
18257: LD_INT 0
18259: PPUSH
18260: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18264: LD_VAR 0 1
18268: PPUSH
18269: LD_OWVAR 3
18273: PUSH
18274: LD_VAR 0 1
18278: DIFF
18279: PPUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 74
18289: PPUSH
18290: CALL_OW 115
// wait ( 0 0$20 ) ;
18294: LD_INT 700
18296: PPUSH
18297: CALL_OW 67
// SetSide ( un , your_side ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_OWVAR 2
18310: PPUSH
18311: CALL_OW 235
// end ;
18315: PPOPN 2
18317: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18318: LD_EXP 26
18322: PUSH
18323: LD_EXP 59
18327: AND
18328: IFFALSE 18434
18330: GO 18332
18332: DISABLE
18333: LD_INT 0
18335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18336: LD_ADDR_VAR 0 1
18340: PUSH
18341: LD_INT 22
18343: PUSH
18344: LD_OWVAR 2
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 30
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 30
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PPUSH
18385: CALL_OW 69
18389: ST_TO_ADDR
// if not depot then
18390: LD_VAR 0 1
18394: NOT
18395: IFFALSE 18399
// exit ;
18397: GO 18434
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18399: LD_VAR 0 1
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: CALL_OW 250
18412: PPUSH
18413: LD_VAR 0 1
18417: PUSH
18418: LD_INT 1
18420: ARRAY
18421: PPUSH
18422: CALL_OW 251
18426: PPUSH
18427: LD_INT 70
18429: PPUSH
18430: CALL_OW 495
// end ;
18434: PPOPN 1
18436: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18437: LD_EXP 26
18441: PUSH
18442: LD_EXP 60
18446: AND
18447: IFFALSE 18658
18449: GO 18451
18451: DISABLE
18452: LD_INT 0
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18459: LD_ADDR_VAR 0 5
18463: PUSH
18464: LD_INT 22
18466: PUSH
18467: LD_OWVAR 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 21
18478: PUSH
18479: LD_INT 1
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 69
18494: ST_TO_ADDR
// if not tmp then
18495: LD_VAR 0 5
18499: NOT
18500: IFFALSE 18504
// exit ;
18502: GO 18658
// for i in tmp do
18504: LD_ADDR_VAR 0 1
18508: PUSH
18509: LD_VAR 0 5
18513: PUSH
18514: FOR_IN
18515: IFFALSE 18656
// begin d := rand ( 0 , 5 ) ;
18517: LD_ADDR_VAR 0 4
18521: PUSH
18522: LD_INT 0
18524: PPUSH
18525: LD_INT 5
18527: PPUSH
18528: CALL_OW 12
18532: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18533: LD_ADDR_VAR 0 2
18537: PUSH
18538: LD_VAR 0 1
18542: PPUSH
18543: CALL_OW 250
18547: PPUSH
18548: LD_VAR 0 4
18552: PPUSH
18553: LD_INT 3
18555: PPUSH
18556: LD_INT 12
18558: PPUSH
18559: CALL_OW 12
18563: PPUSH
18564: CALL_OW 272
18568: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18569: LD_ADDR_VAR 0 3
18573: PUSH
18574: LD_VAR 0 1
18578: PPUSH
18579: CALL_OW 251
18583: PPUSH
18584: LD_VAR 0 4
18588: PPUSH
18589: LD_INT 3
18591: PPUSH
18592: LD_INT 12
18594: PPUSH
18595: CALL_OW 12
18599: PPUSH
18600: CALL_OW 273
18604: ST_TO_ADDR
// if ValidHex ( x , y ) then
18605: LD_VAR 0 2
18609: PPUSH
18610: LD_VAR 0 3
18614: PPUSH
18615: CALL_OW 488
18619: IFFALSE 18654
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: LD_VAR 0 3
18635: PPUSH
18636: LD_INT 3
18638: PPUSH
18639: LD_INT 6
18641: PPUSH
18642: CALL_OW 12
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 483
// end ;
18654: GO 18514
18656: POP
18657: POP
// end ;
18658: PPOPN 5
18660: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18661: LD_EXP 26
18665: PUSH
18666: LD_EXP 61
18670: AND
18671: IFFALSE 18765
18673: GO 18675
18675: DISABLE
18676: LD_INT 0
18678: PPUSH
18679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18680: LD_ADDR_VAR 0 2
18684: PUSH
18685: LD_INT 22
18687: PUSH
18688: LD_OWVAR 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 32
18699: PUSH
18700: LD_INT 1
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 21
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: PPUSH
18722: CALL_OW 69
18726: ST_TO_ADDR
// if not tmp then
18727: LD_VAR 0 2
18731: NOT
18732: IFFALSE 18736
// exit ;
18734: GO 18765
// for i in tmp do
18736: LD_ADDR_VAR 0 1
18740: PUSH
18741: LD_VAR 0 2
18745: PUSH
18746: FOR_IN
18747: IFFALSE 18763
// SetFuel ( i , 0 ) ;
18749: LD_VAR 0 1
18753: PPUSH
18754: LD_INT 0
18756: PPUSH
18757: CALL_OW 240
18761: GO 18746
18763: POP
18764: POP
// end ;
18765: PPOPN 2
18767: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18768: LD_EXP 26
18772: PUSH
18773: LD_EXP 62
18777: AND
18778: IFFALSE 18844
18780: GO 18782
18782: DISABLE
18783: LD_INT 0
18785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18786: LD_ADDR_VAR 0 1
18790: PUSH
18791: LD_INT 22
18793: PUSH
18794: LD_OWVAR 2
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 30
18805: PUSH
18806: LD_INT 29
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PPUSH
18817: CALL_OW 69
18821: ST_TO_ADDR
// if not tmp then
18822: LD_VAR 0 1
18826: NOT
18827: IFFALSE 18831
// exit ;
18829: GO 18844
// DestroyUnit ( tmp [ 1 ] ) ;
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 1
18838: ARRAY
18839: PPUSH
18840: CALL_OW 65
// end ;
18844: PPOPN 1
18846: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18847: LD_EXP 26
18851: PUSH
18852: LD_EXP 64
18856: AND
18857: IFFALSE 18986
18859: GO 18861
18861: DISABLE
18862: LD_INT 0
18864: PPUSH
// begin uc_side := 0 ;
18865: LD_ADDR_OWVAR 20
18869: PUSH
18870: LD_INT 0
18872: ST_TO_ADDR
// uc_nation := nation_arabian ;
18873: LD_ADDR_OWVAR 21
18877: PUSH
18878: LD_INT 2
18880: ST_TO_ADDR
// hc_gallery :=  ;
18881: LD_ADDR_OWVAR 33
18885: PUSH
18886: LD_STRING 
18888: ST_TO_ADDR
// hc_name :=  ;
18889: LD_ADDR_OWVAR 26
18893: PUSH
18894: LD_STRING 
18896: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18897: LD_INT 1
18899: PPUSH
18900: LD_INT 11
18902: PPUSH
18903: LD_INT 10
18905: PPUSH
18906: CALL_OW 380
// un := CreateHuman ;
18910: LD_ADDR_VAR 0 1
18914: PUSH
18915: CALL_OW 44
18919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18920: LD_VAR 0 1
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18932: LD_INT 35
18934: PPUSH
18935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_INT 22
18946: PUSH
18947: LD_OWVAR 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: PPUSH
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL_OW 74
18970: PPUSH
18971: CALL_OW 115
// until IsDead ( un ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: CALL_OW 301
18984: IFFALSE 18932
// end ;
18986: PPOPN 1
18988: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18989: LD_EXP 26
18993: PUSH
18994: LD_EXP 66
18998: AND
18999: IFFALSE 19011
19001: GO 19003
19003: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19004: LD_STRING earthquake(getX(game), 0, 32)
19006: PPUSH
19007: CALL_OW 559
19011: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19012: LD_EXP 26
19016: PUSH
19017: LD_EXP 67
19021: AND
19022: IFFALSE 19113
19024: GO 19026
19026: DISABLE
19027: LD_INT 0
19029: PPUSH
// begin enable ;
19030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19031: LD_ADDR_VAR 0 1
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_OWVAR 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 21
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 33
19060: PUSH
19061: LD_INT 3
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: LIST
19072: PPUSH
19073: CALL_OW 69
19077: ST_TO_ADDR
// if not tmp then
19078: LD_VAR 0 1
19082: NOT
19083: IFFALSE 19087
// exit ;
19085: GO 19113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19087: LD_VAR 0 1
19091: PUSH
19092: LD_INT 1
19094: PPUSH
19095: LD_VAR 0 1
19099: PPUSH
19100: CALL_OW 12
19104: ARRAY
19105: PPUSH
19106: LD_INT 1
19108: PPUSH
19109: CALL_OW 234
// end ;
19113: PPOPN 1
19115: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19116: LD_EXP 26
19120: PUSH
19121: LD_EXP 68
19125: AND
19126: IFFALSE 19267
19128: GO 19130
19130: DISABLE
19131: LD_INT 0
19133: PPUSH
19134: PPUSH
19135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_INT 22
19143: PUSH
19144: LD_OWVAR 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 25
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 69
19171: ST_TO_ADDR
// if not tmp then
19172: LD_VAR 0 3
19176: NOT
19177: IFFALSE 19181
// exit ;
19179: GO 19267
// un := tmp [ rand ( 1 , tmp ) ] ;
19181: LD_ADDR_VAR 0 2
19185: PUSH
19186: LD_VAR 0 3
19190: PUSH
19191: LD_INT 1
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: CALL_OW 12
19203: ARRAY
19204: ST_TO_ADDR
// if Crawls ( un ) then
19205: LD_VAR 0 2
19209: PPUSH
19210: CALL_OW 318
19214: IFFALSE 19225
// ComWalk ( un ) ;
19216: LD_VAR 0 2
19220: PPUSH
19221: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19225: LD_VAR 0 2
19229: PPUSH
19230: LD_INT 9
19232: PPUSH
19233: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19237: LD_INT 28
19239: PPUSH
19240: LD_OWVAR 2
19244: PPUSH
19245: LD_INT 2
19247: PPUSH
19248: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19252: LD_INT 29
19254: PPUSH
19255: LD_OWVAR 2
19259: PPUSH
19260: LD_INT 2
19262: PPUSH
19263: CALL_OW 322
// end ;
19267: PPOPN 3
19269: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19270: LD_EXP 26
19274: PUSH
19275: LD_EXP 69
19279: AND
19280: IFFALSE 19391
19282: GO 19284
19284: DISABLE
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
19289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19290: LD_ADDR_VAR 0 3
19294: PUSH
19295: LD_INT 22
19297: PUSH
19298: LD_OWVAR 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 25
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PPUSH
19321: CALL_OW 69
19325: ST_TO_ADDR
// if not tmp then
19326: LD_VAR 0 3
19330: NOT
19331: IFFALSE 19335
// exit ;
19333: GO 19391
// un := tmp [ rand ( 1 , tmp ) ] ;
19335: LD_ADDR_VAR 0 2
19339: PUSH
19340: LD_VAR 0 3
19344: PUSH
19345: LD_INT 1
19347: PPUSH
19348: LD_VAR 0 3
19352: PPUSH
19353: CALL_OW 12
19357: ARRAY
19358: ST_TO_ADDR
// if Crawls ( un ) then
19359: LD_VAR 0 2
19363: PPUSH
19364: CALL_OW 318
19368: IFFALSE 19379
// ComWalk ( un ) ;
19370: LD_VAR 0 2
19374: PPUSH
19375: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19379: LD_VAR 0 2
19383: PPUSH
19384: LD_INT 8
19386: PPUSH
19387: CALL_OW 336
// end ;
19391: PPOPN 3
19393: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19394: LD_EXP 26
19398: PUSH
19399: LD_EXP 70
19403: AND
19404: IFFALSE 19548
19406: GO 19408
19408: DISABLE
19409: LD_INT 0
19411: PPUSH
19412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19413: LD_ADDR_VAR 0 2
19417: PUSH
19418: LD_INT 22
19420: PUSH
19421: LD_OWVAR 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 21
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: LD_INT 34
19445: PUSH
19446: LD_INT 12
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 34
19455: PUSH
19456: LD_INT 51
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 34
19465: PUSH
19466: LD_INT 32
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: ST_TO_ADDR
// if not tmp then
19489: LD_VAR 0 2
19493: NOT
19494: IFFALSE 19498
// exit ;
19496: GO 19548
// for i in tmp do
19498: LD_ADDR_VAR 0 1
19502: PUSH
19503: LD_VAR 0 2
19507: PUSH
19508: FOR_IN
19509: IFFALSE 19546
// if GetCargo ( i , mat_artifact ) = 0 then
19511: LD_VAR 0 1
19515: PPUSH
19516: LD_INT 4
19518: PPUSH
19519: CALL_OW 289
19523: PUSH
19524: LD_INT 0
19526: EQUAL
19527: IFFALSE 19544
// SetCargo ( i , mat_siberit , 100 ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_INT 3
19536: PPUSH
19537: LD_INT 100
19539: PPUSH
19540: CALL_OW 290
19544: GO 19508
19546: POP
19547: POP
// end ;
19548: PPOPN 2
19550: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19551: LD_EXP 26
19555: PUSH
19556: LD_EXP 71
19560: AND
19561: IFFALSE 19744
19563: GO 19565
19565: DISABLE
19566: LD_INT 0
19568: PPUSH
19569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19570: LD_ADDR_VAR 0 2
19574: PUSH
19575: LD_INT 22
19577: PUSH
19578: LD_OWVAR 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: ST_TO_ADDR
// if not tmp then
19592: LD_VAR 0 2
19596: NOT
19597: IFFALSE 19601
// exit ;
19599: GO 19744
// for i := 1 to 2 do
19601: LD_ADDR_VAR 0 1
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_INT 2
19613: PUSH
19614: FOR_TO
19615: IFFALSE 19742
// begin uc_side := your_side ;
19617: LD_ADDR_OWVAR 20
19621: PUSH
19622: LD_OWVAR 2
19626: ST_TO_ADDR
// uc_nation := nation_american ;
19627: LD_ADDR_OWVAR 21
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// vc_chassis := us_morphling ;
19635: LD_ADDR_OWVAR 37
19639: PUSH
19640: LD_INT 5
19642: ST_TO_ADDR
// vc_engine := engine_siberite ;
19643: LD_ADDR_OWVAR 39
19647: PUSH
19648: LD_INT 3
19650: ST_TO_ADDR
// vc_control := control_computer ;
19651: LD_ADDR_OWVAR 38
19655: PUSH
19656: LD_INT 3
19658: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19659: LD_ADDR_OWVAR 40
19663: PUSH
19664: LD_INT 10
19666: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19667: LD_VAR 0 2
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: PPUSH
19676: CALL_OW 310
19680: NOT
19681: IFFALSE 19728
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19683: CALL_OW 45
19687: PPUSH
19688: LD_VAR 0 2
19692: PUSH
19693: LD_INT 1
19695: ARRAY
19696: PPUSH
19697: CALL_OW 250
19701: PPUSH
19702: LD_VAR 0 2
19706: PUSH
19707: LD_INT 1
19709: ARRAY
19710: PPUSH
19711: CALL_OW 251
19715: PPUSH
19716: LD_INT 12
19718: PPUSH
19719: LD_INT 1
19721: PPUSH
19722: CALL_OW 50
19726: GO 19740
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19728: CALL_OW 45
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 51
// end ;
19740: GO 19614
19742: POP
19743: POP
// end ;
19744: PPOPN 2
19746: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19747: LD_EXP 26
19751: PUSH
19752: LD_EXP 72
19756: AND
19757: IFFALSE 19979
19759: GO 19761
19761: DISABLE
19762: LD_INT 0
19764: PPUSH
19765: PPUSH
19766: PPUSH
19767: PPUSH
19768: PPUSH
19769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19770: LD_ADDR_VAR 0 6
19774: PUSH
19775: LD_INT 22
19777: PUSH
19778: LD_OWVAR 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 21
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 3
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: ST_TO_ADDR
// if not tmp then
19824: LD_VAR 0 6
19828: NOT
19829: IFFALSE 19833
// exit ;
19831: GO 19979
// s1 := rand ( 1 , 4 ) ;
19833: LD_ADDR_VAR 0 2
19837: PUSH
19838: LD_INT 1
19840: PPUSH
19841: LD_INT 4
19843: PPUSH
19844: CALL_OW 12
19848: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19849: LD_ADDR_VAR 0 4
19853: PUSH
19854: LD_VAR 0 6
19858: PUSH
19859: LD_INT 1
19861: ARRAY
19862: PPUSH
19863: LD_VAR 0 2
19867: PPUSH
19868: CALL_OW 259
19872: ST_TO_ADDR
// if s1 = 1 then
19873: LD_VAR 0 2
19877: PUSH
19878: LD_INT 1
19880: EQUAL
19881: IFFALSE 19901
// s2 := rand ( 2 , 4 ) else
19883: LD_ADDR_VAR 0 3
19887: PUSH
19888: LD_INT 2
19890: PPUSH
19891: LD_INT 4
19893: PPUSH
19894: CALL_OW 12
19898: ST_TO_ADDR
19899: GO 19909
// s2 := 1 ;
19901: LD_ADDR_VAR 0 3
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19909: LD_ADDR_VAR 0 5
19913: PUSH
19914: LD_VAR 0 6
19918: PUSH
19919: LD_INT 1
19921: ARRAY
19922: PPUSH
19923: LD_VAR 0 3
19927: PPUSH
19928: CALL_OW 259
19932: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19933: LD_VAR 0 6
19937: PUSH
19938: LD_INT 1
19940: ARRAY
19941: PPUSH
19942: LD_VAR 0 2
19946: PPUSH
19947: LD_VAR 0 5
19951: PPUSH
19952: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19956: LD_VAR 0 6
19960: PUSH
19961: LD_INT 1
19963: ARRAY
19964: PPUSH
19965: LD_VAR 0 3
19969: PPUSH
19970: LD_VAR 0 4
19974: PPUSH
19975: CALL_OW 237
// end ;
19979: PPOPN 6
19981: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19982: LD_EXP 26
19986: PUSH
19987: LD_EXP 73
19991: AND
19992: IFFALSE 20071
19994: GO 19996
19996: DISABLE
19997: LD_INT 0
19999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20000: LD_ADDR_VAR 0 1
20004: PUSH
20005: LD_INT 22
20007: PUSH
20008: LD_OWVAR 2
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 30
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 69
20035: ST_TO_ADDR
// if not tmp then
20036: LD_VAR 0 1
20040: NOT
20041: IFFALSE 20045
// exit ;
20043: GO 20071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20045: LD_VAR 0 1
20049: PUSH
20050: LD_INT 1
20052: PPUSH
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 12
20062: ARRAY
20063: PPUSH
20064: LD_INT 1
20066: PPUSH
20067: CALL_OW 234
// end ;
20071: PPOPN 1
20073: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20074: LD_EXP 26
20078: PUSH
20079: LD_EXP 74
20083: AND
20084: IFFALSE 20196
20086: GO 20088
20088: DISABLE
20089: LD_INT 0
20091: PPUSH
20092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20093: LD_ADDR_VAR 0 2
20097: PUSH
20098: LD_INT 22
20100: PUSH
20101: LD_OWVAR 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: LD_INT 30
20115: PUSH
20116: LD_INT 27
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 30
20125: PUSH
20126: LD_INT 26
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 30
20135: PUSH
20136: LD_INT 28
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 69
20157: ST_TO_ADDR
// if not tmp then
20158: LD_VAR 0 2
20162: NOT
20163: IFFALSE 20167
// exit ;
20165: GO 20196
// for i in tmp do
20167: LD_ADDR_VAR 0 1
20171: PUSH
20172: LD_VAR 0 2
20176: PUSH
20177: FOR_IN
20178: IFFALSE 20194
// SetLives ( i , 1 ) ;
20180: LD_VAR 0 1
20184: PPUSH
20185: LD_INT 1
20187: PPUSH
20188: CALL_OW 234
20192: GO 20177
20194: POP
20195: POP
// end ;
20196: PPOPN 2
20198: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20199: LD_EXP 26
20203: PUSH
20204: LD_EXP 75
20208: AND
20209: IFFALSE 20483
20211: GO 20213
20213: DISABLE
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
// begin i := rand ( 1 , 7 ) ;
20219: LD_ADDR_VAR 0 1
20223: PUSH
20224: LD_INT 1
20226: PPUSH
20227: LD_INT 7
20229: PPUSH
20230: CALL_OW 12
20234: ST_TO_ADDR
// case i of 1 :
20235: LD_VAR 0 1
20239: PUSH
20240: LD_INT 1
20242: DOUBLE
20243: EQUAL
20244: IFTRUE 20248
20246: GO 20258
20248: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20249: LD_STRING earthquake(getX(game), 0, 32)
20251: PPUSH
20252: CALL_OW 559
20256: GO 20483
20258: LD_INT 2
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20280
20266: POP
// begin ToLua ( displayStucuk(); ) ;
20267: LD_STRING displayStucuk();
20269: PPUSH
20270: CALL_OW 559
// ResetFog ;
20274: CALL_OW 335
// end ; 3 :
20278: GO 20483
20280: LD_INT 3
20282: DOUBLE
20283: EQUAL
20284: IFTRUE 20288
20286: GO 20392
20288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20289: LD_ADDR_VAR 0 2
20293: PUSH
20294: LD_INT 22
20296: PUSH
20297: LD_OWVAR 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 25
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PPUSH
20320: CALL_OW 69
20324: ST_TO_ADDR
// if not tmp then
20325: LD_VAR 0 2
20329: NOT
20330: IFFALSE 20334
// exit ;
20332: GO 20483
// un := tmp [ rand ( 1 , tmp ) ] ;
20334: LD_ADDR_VAR 0 3
20338: PUSH
20339: LD_VAR 0 2
20343: PUSH
20344: LD_INT 1
20346: PPUSH
20347: LD_VAR 0 2
20351: PPUSH
20352: CALL_OW 12
20356: ARRAY
20357: ST_TO_ADDR
// if Crawls ( un ) then
20358: LD_VAR 0 3
20362: PPUSH
20363: CALL_OW 318
20367: IFFALSE 20378
// ComWalk ( un ) ;
20369: LD_VAR 0 3
20373: PPUSH
20374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20378: LD_VAR 0 3
20382: PPUSH
20383: LD_INT 8
20385: PPUSH
20386: CALL_OW 336
// end ; 4 :
20390: GO 20483
20392: LD_INT 4
20394: DOUBLE
20395: EQUAL
20396: IFTRUE 20400
20398: GO 20461
20400: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20401: LD_ADDR_VAR 0 2
20405: PUSH
20406: LD_INT 22
20408: PUSH
20409: LD_OWVAR 2
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 30
20420: PUSH
20421: LD_INT 29
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 69
20436: ST_TO_ADDR
// if not tmp then
20437: LD_VAR 0 2
20441: NOT
20442: IFFALSE 20446
// exit ;
20444: GO 20483
// DestroyUnit ( tmp [ 1 ] ) ;
20446: LD_VAR 0 2
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: CALL_OW 65
// end ; 5 .. 7 :
20459: GO 20483
20461: LD_INT 5
20463: DOUBLE
20464: GREATEREQUAL
20465: IFFALSE 20473
20467: LD_INT 7
20469: DOUBLE
20470: LESSEQUAL
20471: IFTRUE 20475
20473: GO 20482
20475: POP
// StreamSibBomb ; end ;
20476: CALL 16733 0 0
20480: GO 20483
20482: POP
// end ;
20483: PPOPN 3
20485: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20486: LD_EXP 26
20490: PUSH
20491: LD_EXP 76
20495: AND
20496: IFFALSE 20652
20498: GO 20500
20500: DISABLE
20501: LD_INT 0
20503: PPUSH
20504: PPUSH
20505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20506: LD_ADDR_VAR 0 2
20510: PUSH
20511: LD_INT 81
20513: PUSH
20514: LD_OWVAR 2
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 21
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: ST_TO_ADDR
// if not tmp then
20560: LD_VAR 0 2
20564: NOT
20565: IFFALSE 20569
// exit ;
20567: GO 20652
// p := 0 ;
20569: LD_ADDR_VAR 0 3
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20577: LD_INT 35
20579: PPUSH
20580: CALL_OW 67
// p := p + 1 ;
20584: LD_ADDR_VAR 0 3
20588: PUSH
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 1
20596: PLUS
20597: ST_TO_ADDR
// for i in tmp do
20598: LD_ADDR_VAR 0 1
20602: PUSH
20603: LD_VAR 0 2
20607: PUSH
20608: FOR_IN
20609: IFFALSE 20640
// if GetLives ( i ) < 1000 then
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 256
20620: PUSH
20621: LD_INT 1000
20623: LESS
20624: IFFALSE 20638
// SetLives ( i , 1000 ) ;
20626: LD_VAR 0 1
20630: PPUSH
20631: LD_INT 1000
20633: PPUSH
20634: CALL_OW 234
20638: GO 20608
20640: POP
20641: POP
// until p > 20 ;
20642: LD_VAR 0 3
20646: PUSH
20647: LD_INT 20
20649: GREATER
20650: IFFALSE 20577
// end ;
20652: PPOPN 3
20654: END
// every 0 0$1 trigger StreamModeActive and sTime do
20655: LD_EXP 26
20659: PUSH
20660: LD_EXP 77
20664: AND
20665: IFFALSE 20700
20667: GO 20669
20669: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20670: LD_INT 28
20672: PPUSH
20673: LD_OWVAR 2
20677: PPUSH
20678: LD_INT 2
20680: PPUSH
20681: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20685: LD_INT 30
20687: PPUSH
20688: LD_OWVAR 2
20692: PPUSH
20693: LD_INT 2
20695: PPUSH
20696: CALL_OW 322
// end ;
20700: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20701: LD_EXP 26
20705: PUSH
20706: LD_EXP 78
20710: AND
20711: IFFALSE 20832
20713: GO 20715
20715: DISABLE
20716: LD_INT 0
20718: PPUSH
20719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20720: LD_ADDR_VAR 0 2
20724: PUSH
20725: LD_INT 22
20727: PUSH
20728: LD_OWVAR 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 3
20749: PUSH
20750: LD_INT 23
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: PPUSH
20769: CALL_OW 69
20773: ST_TO_ADDR
// if not tmp then
20774: LD_VAR 0 2
20778: NOT
20779: IFFALSE 20783
// exit ;
20781: GO 20832
// for i in tmp do
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_VAR 0 2
20792: PUSH
20793: FOR_IN
20794: IFFALSE 20830
// begin if Crawls ( i ) then
20796: LD_VAR 0 1
20800: PPUSH
20801: CALL_OW 318
20805: IFFALSE 20816
// ComWalk ( i ) ;
20807: LD_VAR 0 1
20811: PPUSH
20812: CALL_OW 138
// SetClass ( i , 2 ) ;
20816: LD_VAR 0 1
20820: PPUSH
20821: LD_INT 2
20823: PPUSH
20824: CALL_OW 336
// end ;
20828: GO 20793
20830: POP
20831: POP
// end ;
20832: PPOPN 2
20834: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20835: LD_EXP 26
20839: PUSH
20840: LD_EXP 79
20844: AND
20845: IFFALSE 21126
20847: GO 20849
20849: DISABLE
20850: LD_INT 0
20852: PPUSH
20853: PPUSH
20854: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20855: LD_OWVAR 2
20859: PPUSH
20860: LD_INT 9
20862: PPUSH
20863: LD_INT 1
20865: PPUSH
20866: LD_INT 1
20868: PPUSH
20869: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20873: LD_INT 9
20875: PPUSH
20876: LD_OWVAR 2
20880: PPUSH
20881: CALL_OW 343
// uc_side := 9 ;
20885: LD_ADDR_OWVAR 20
20889: PUSH
20890: LD_INT 9
20892: ST_TO_ADDR
// uc_nation := 2 ;
20893: LD_ADDR_OWVAR 21
20897: PUSH
20898: LD_INT 2
20900: ST_TO_ADDR
// hc_name := Dark Warrior ;
20901: LD_ADDR_OWVAR 26
20905: PUSH
20906: LD_STRING Dark Warrior
20908: ST_TO_ADDR
// hc_gallery :=  ;
20909: LD_ADDR_OWVAR 33
20913: PUSH
20914: LD_STRING 
20916: ST_TO_ADDR
// hc_noskilllimit := true ;
20917: LD_ADDR_OWVAR 76
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20925: LD_ADDR_OWVAR 31
20929: PUSH
20930: LD_INT 30
20932: PUSH
20933: LD_INT 30
20935: PUSH
20936: LD_INT 30
20938: PUSH
20939: LD_INT 30
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: ST_TO_ADDR
// un := CreateHuman ;
20948: LD_ADDR_VAR 0 3
20952: PUSH
20953: CALL_OW 44
20957: ST_TO_ADDR
// hc_noskilllimit := false ;
20958: LD_ADDR_OWVAR 76
20962: PUSH
20963: LD_INT 0
20965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20966: LD_VAR 0 3
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 51
// p := 0 ;
20978: LD_ADDR_VAR 0 2
20982: PUSH
20983: LD_INT 0
20985: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20986: LD_INT 35
20988: PPUSH
20989: CALL_OW 67
// p := p + 1 ;
20993: LD_ADDR_VAR 0 2
20997: PUSH
20998: LD_VAR 0 2
21002: PUSH
21003: LD_INT 1
21005: PLUS
21006: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21007: LD_VAR 0 3
21011: PPUSH
21012: CALL_OW 256
21016: PUSH
21017: LD_INT 1000
21019: LESS
21020: IFFALSE 21034
// SetLives ( un , 1000 ) ;
21022: LD_VAR 0 3
21026: PPUSH
21027: LD_INT 1000
21029: PPUSH
21030: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21034: LD_VAR 0 3
21038: PPUSH
21039: LD_INT 81
21041: PUSH
21042: LD_OWVAR 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 91
21053: PUSH
21054: LD_VAR 0 3
21058: PUSH
21059: LD_INT 30
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PPUSH
21071: CALL_OW 69
21075: PPUSH
21076: LD_VAR 0 3
21080: PPUSH
21081: CALL_OW 74
21085: PPUSH
21086: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21090: LD_VAR 0 2
21094: PUSH
21095: LD_INT 60
21097: GREATER
21098: PUSH
21099: LD_VAR 0 3
21103: PPUSH
21104: CALL_OW 301
21108: OR
21109: IFFALSE 20986
// if un then
21111: LD_VAR 0 3
21115: IFFALSE 21126
// RemoveUnit ( un ) ;
21117: LD_VAR 0 3
21121: PPUSH
21122: CALL_OW 64
// end ;
21126: PPOPN 3
21128: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21129: LD_INT 0
21131: PPUSH
// case cmd of 301 :
21132: LD_VAR 0 1
21136: PUSH
21137: LD_INT 301
21139: DOUBLE
21140: EQUAL
21141: IFTRUE 21145
21143: GO 21177
21145: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21146: LD_VAR 0 6
21150: PPUSH
21151: LD_VAR 0 7
21155: PPUSH
21156: LD_VAR 0 8
21160: PPUSH
21161: LD_VAR 0 4
21165: PPUSH
21166: LD_VAR 0 5
21170: PPUSH
21171: CALL 22378 0 5
21175: GO 21298
21177: LD_INT 302
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21222
21185: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21186: LD_VAR 0 6
21190: PPUSH
21191: LD_VAR 0 7
21195: PPUSH
21196: LD_VAR 0 8
21200: PPUSH
21201: LD_VAR 0 9
21205: PPUSH
21206: LD_VAR 0 4
21210: PPUSH
21211: LD_VAR 0 5
21215: PPUSH
21216: CALL 22469 0 6
21220: GO 21298
21222: LD_INT 303
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21267
21230: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21231: LD_VAR 0 6
21235: PPUSH
21236: LD_VAR 0 7
21240: PPUSH
21241: LD_VAR 0 8
21245: PPUSH
21246: LD_VAR 0 9
21250: PPUSH
21251: LD_VAR 0 4
21255: PPUSH
21256: LD_VAR 0 5
21260: PPUSH
21261: CALL 21303 0 6
21265: GO 21298
21267: LD_INT 304
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21297
21275: POP
// hHackTeleport ( unit , x , y ) ; end ;
21276: LD_VAR 0 2
21280: PPUSH
21281: LD_VAR 0 4
21285: PPUSH
21286: LD_VAR 0 5
21290: PPUSH
21291: CALL 23062 0 3
21295: GO 21298
21297: POP
// end ;
21298: LD_VAR 0 12
21302: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21303: LD_INT 0
21305: PPUSH
21306: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21307: LD_VAR 0 1
21311: PUSH
21312: LD_INT 1
21314: LESS
21315: PUSH
21316: LD_VAR 0 1
21320: PUSH
21321: LD_INT 3
21323: GREATER
21324: OR
21325: PUSH
21326: LD_VAR 0 5
21330: PPUSH
21331: LD_VAR 0 6
21335: PPUSH
21336: CALL_OW 428
21340: OR
21341: IFFALSE 21345
// exit ;
21343: GO 22065
// uc_side := your_side ;
21345: LD_ADDR_OWVAR 20
21349: PUSH
21350: LD_OWVAR 2
21354: ST_TO_ADDR
// uc_nation := nation ;
21355: LD_ADDR_OWVAR 21
21359: PUSH
21360: LD_VAR 0 1
21364: ST_TO_ADDR
// bc_level = 1 ;
21365: LD_ADDR_OWVAR 43
21369: PUSH
21370: LD_INT 1
21372: ST_TO_ADDR
// case btype of 1 :
21373: LD_VAR 0 2
21377: PUSH
21378: LD_INT 1
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21397
21386: POP
// bc_type := b_depot ; 2 :
21387: LD_ADDR_OWVAR 42
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
21395: GO 22009
21397: LD_INT 2
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21416
21405: POP
// bc_type := b_warehouse ; 3 :
21406: LD_ADDR_OWVAR 42
21410: PUSH
21411: LD_INT 1
21413: ST_TO_ADDR
21414: GO 22009
21416: LD_INT 3
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21435
21424: POP
// bc_type := b_lab ; 4 .. 9 :
21425: LD_ADDR_OWVAR 42
21429: PUSH
21430: LD_INT 6
21432: ST_TO_ADDR
21433: GO 22009
21435: LD_INT 4
21437: DOUBLE
21438: GREATEREQUAL
21439: IFFALSE 21447
21441: LD_INT 9
21443: DOUBLE
21444: LESSEQUAL
21445: IFTRUE 21449
21447: GO 21501
21449: POP
// begin bc_type := b_lab_half ;
21450: LD_ADDR_OWVAR 42
21454: PUSH
21455: LD_INT 7
21457: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21458: LD_ADDR_OWVAR 44
21462: PUSH
21463: LD_INT 10
21465: PUSH
21466: LD_INT 11
21468: PUSH
21469: LD_INT 12
21471: PUSH
21472: LD_INT 15
21474: PUSH
21475: LD_INT 14
21477: PUSH
21478: LD_INT 13
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: PUSH
21489: LD_VAR 0 2
21493: PUSH
21494: LD_INT 3
21496: MINUS
21497: ARRAY
21498: ST_TO_ADDR
// end ; 10 .. 13 :
21499: GO 22009
21501: LD_INT 10
21503: DOUBLE
21504: GREATEREQUAL
21505: IFFALSE 21513
21507: LD_INT 13
21509: DOUBLE
21510: LESSEQUAL
21511: IFTRUE 21515
21513: GO 21592
21515: POP
// begin bc_type := b_lab_full ;
21516: LD_ADDR_OWVAR 42
21520: PUSH
21521: LD_INT 8
21523: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21524: LD_ADDR_OWVAR 44
21528: PUSH
21529: LD_INT 10
21531: PUSH
21532: LD_INT 12
21534: PUSH
21535: LD_INT 14
21537: PUSH
21538: LD_INT 13
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: PUSH
21547: LD_VAR 0 2
21551: PUSH
21552: LD_INT 9
21554: MINUS
21555: ARRAY
21556: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21557: LD_ADDR_OWVAR 45
21561: PUSH
21562: LD_INT 11
21564: PUSH
21565: LD_INT 15
21567: PUSH
21568: LD_INT 12
21570: PUSH
21571: LD_INT 15
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: LD_VAR 0 2
21584: PUSH
21585: LD_INT 9
21587: MINUS
21588: ARRAY
21589: ST_TO_ADDR
// end ; 14 :
21590: GO 22009
21592: LD_INT 14
21594: DOUBLE
21595: EQUAL
21596: IFTRUE 21600
21598: GO 21611
21600: POP
// bc_type := b_workshop ; 15 :
21601: LD_ADDR_OWVAR 42
21605: PUSH
21606: LD_INT 2
21608: ST_TO_ADDR
21609: GO 22009
21611: LD_INT 15
21613: DOUBLE
21614: EQUAL
21615: IFTRUE 21619
21617: GO 21630
21619: POP
// bc_type := b_factory ; 16 :
21620: LD_ADDR_OWVAR 42
21624: PUSH
21625: LD_INT 3
21627: ST_TO_ADDR
21628: GO 22009
21630: LD_INT 16
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21649
21638: POP
// bc_type := b_ext_gun ; 17 :
21639: LD_ADDR_OWVAR 42
21643: PUSH
21644: LD_INT 17
21646: ST_TO_ADDR
21647: GO 22009
21649: LD_INT 17
21651: DOUBLE
21652: EQUAL
21653: IFTRUE 21657
21655: GO 21685
21657: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21658: LD_ADDR_OWVAR 42
21662: PUSH
21663: LD_INT 19
21665: PUSH
21666: LD_INT 23
21668: PUSH
21669: LD_INT 19
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: LD_VAR 0 1
21681: ARRAY
21682: ST_TO_ADDR
21683: GO 22009
21685: LD_INT 18
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21704
21693: POP
// bc_type := b_ext_radar ; 19 :
21694: LD_ADDR_OWVAR 42
21698: PUSH
21699: LD_INT 20
21701: ST_TO_ADDR
21702: GO 22009
21704: LD_INT 19
21706: DOUBLE
21707: EQUAL
21708: IFTRUE 21712
21710: GO 21723
21712: POP
// bc_type := b_ext_radio ; 20 :
21713: LD_ADDR_OWVAR 42
21717: PUSH
21718: LD_INT 22
21720: ST_TO_ADDR
21721: GO 22009
21723: LD_INT 20
21725: DOUBLE
21726: EQUAL
21727: IFTRUE 21731
21729: GO 21742
21731: POP
// bc_type := b_ext_siberium ; 21 :
21732: LD_ADDR_OWVAR 42
21736: PUSH
21737: LD_INT 21
21739: ST_TO_ADDR
21740: GO 22009
21742: LD_INT 21
21744: DOUBLE
21745: EQUAL
21746: IFTRUE 21750
21748: GO 21761
21750: POP
// bc_type := b_ext_computer ; 22 :
21751: LD_ADDR_OWVAR 42
21755: PUSH
21756: LD_INT 24
21758: ST_TO_ADDR
21759: GO 22009
21761: LD_INT 22
21763: DOUBLE
21764: EQUAL
21765: IFTRUE 21769
21767: GO 21780
21769: POP
// bc_type := b_ext_track ; 23 :
21770: LD_ADDR_OWVAR 42
21774: PUSH
21775: LD_INT 16
21777: ST_TO_ADDR
21778: GO 22009
21780: LD_INT 23
21782: DOUBLE
21783: EQUAL
21784: IFTRUE 21788
21786: GO 21799
21788: POP
// bc_type := b_ext_laser ; 24 :
21789: LD_ADDR_OWVAR 42
21793: PUSH
21794: LD_INT 25
21796: ST_TO_ADDR
21797: GO 22009
21799: LD_INT 24
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21818
21807: POP
// bc_type := b_control_tower ; 25 :
21808: LD_ADDR_OWVAR 42
21812: PUSH
21813: LD_INT 36
21815: ST_TO_ADDR
21816: GO 22009
21818: LD_INT 25
21820: DOUBLE
21821: EQUAL
21822: IFTRUE 21826
21824: GO 21837
21826: POP
// bc_type := b_breastwork ; 26 :
21827: LD_ADDR_OWVAR 42
21831: PUSH
21832: LD_INT 31
21834: ST_TO_ADDR
21835: GO 22009
21837: LD_INT 26
21839: DOUBLE
21840: EQUAL
21841: IFTRUE 21845
21843: GO 21856
21845: POP
// bc_type := b_bunker ; 27 :
21846: LD_ADDR_OWVAR 42
21850: PUSH
21851: LD_INT 32
21853: ST_TO_ADDR
21854: GO 22009
21856: LD_INT 27
21858: DOUBLE
21859: EQUAL
21860: IFTRUE 21864
21862: GO 21875
21864: POP
// bc_type := b_turret ; 28 :
21865: LD_ADDR_OWVAR 42
21869: PUSH
21870: LD_INT 33
21872: ST_TO_ADDR
21873: GO 22009
21875: LD_INT 28
21877: DOUBLE
21878: EQUAL
21879: IFTRUE 21883
21881: GO 21894
21883: POP
// bc_type := b_armoury ; 29 :
21884: LD_ADDR_OWVAR 42
21888: PUSH
21889: LD_INT 4
21891: ST_TO_ADDR
21892: GO 22009
21894: LD_INT 29
21896: DOUBLE
21897: EQUAL
21898: IFTRUE 21902
21900: GO 21913
21902: POP
// bc_type := b_barracks ; 30 :
21903: LD_ADDR_OWVAR 42
21907: PUSH
21908: LD_INT 5
21910: ST_TO_ADDR
21911: GO 22009
21913: LD_INT 30
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21932
21921: POP
// bc_type := b_solar_power ; 31 :
21922: LD_ADDR_OWVAR 42
21926: PUSH
21927: LD_INT 27
21929: ST_TO_ADDR
21930: GO 22009
21932: LD_INT 31
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 21951
21940: POP
// bc_type := b_oil_power ; 32 :
21941: LD_ADDR_OWVAR 42
21945: PUSH
21946: LD_INT 26
21948: ST_TO_ADDR
21949: GO 22009
21951: LD_INT 32
21953: DOUBLE
21954: EQUAL
21955: IFTRUE 21959
21957: GO 21970
21959: POP
// bc_type := b_siberite_power ; 33 :
21960: LD_ADDR_OWVAR 42
21964: PUSH
21965: LD_INT 28
21967: ST_TO_ADDR
21968: GO 22009
21970: LD_INT 33
21972: DOUBLE
21973: EQUAL
21974: IFTRUE 21978
21976: GO 21989
21978: POP
// bc_type := b_oil_mine ; 34 :
21979: LD_ADDR_OWVAR 42
21983: PUSH
21984: LD_INT 29
21986: ST_TO_ADDR
21987: GO 22009
21989: LD_INT 34
21991: DOUBLE
21992: EQUAL
21993: IFTRUE 21997
21995: GO 22008
21997: POP
// bc_type := b_siberite_mine ; end ;
21998: LD_ADDR_OWVAR 42
22002: PUSH
22003: LD_INT 30
22005: ST_TO_ADDR
22006: GO 22009
22008: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22009: LD_ADDR_VAR 0 8
22013: PUSH
22014: LD_VAR 0 5
22018: PPUSH
22019: LD_VAR 0 6
22023: PPUSH
22024: LD_VAR 0 3
22028: PPUSH
22029: CALL_OW 47
22033: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22034: LD_OWVAR 42
22038: PUSH
22039: LD_INT 32
22041: PUSH
22042: LD_INT 33
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: IN
22049: IFFALSE 22065
// PlaceWeaponTurret ( b , weapon ) ;
22051: LD_VAR 0 8
22055: PPUSH
22056: LD_VAR 0 4
22060: PPUSH
22061: CALL_OW 431
// end ;
22065: LD_VAR 0 7
22069: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22076: LD_ADDR_VAR 0 4
22080: PUSH
22081: LD_INT 22
22083: PUSH
22084: LD_OWVAR 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: LD_INT 30
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 30
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PPUSH
22125: CALL_OW 69
22129: ST_TO_ADDR
// if not tmp then
22130: LD_VAR 0 4
22134: NOT
22135: IFFALSE 22139
// exit ;
22137: GO 22198
// for i in tmp do
22139: LD_ADDR_VAR 0 2
22143: PUSH
22144: LD_VAR 0 4
22148: PUSH
22149: FOR_IN
22150: IFFALSE 22196
// for j = 1 to 3 do
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: DOUBLE
22158: LD_INT 1
22160: DEC
22161: ST_TO_ADDR
22162: LD_INT 3
22164: PUSH
22165: FOR_TO
22166: IFFALSE 22192
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22168: LD_VAR 0 2
22172: PPUSH
22173: CALL_OW 274
22177: PPUSH
22178: LD_VAR 0 3
22182: PPUSH
22183: LD_INT 99999
22185: PPUSH
22186: CALL_OW 277
22190: GO 22165
22192: POP
22193: POP
22194: GO 22149
22196: POP
22197: POP
// end ;
22198: LD_VAR 0 1
22202: RET
// export function hHackSetLevel10 ; var i , j ; begin
22203: LD_INT 0
22205: PPUSH
22206: PPUSH
22207: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22208: LD_ADDR_VAR 0 2
22212: PUSH
22213: LD_INT 21
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PPUSH
22223: CALL_OW 69
22227: PUSH
22228: FOR_IN
22229: IFFALSE 22281
// if IsSelected ( i ) then
22231: LD_VAR 0 2
22235: PPUSH
22236: CALL_OW 306
22240: IFFALSE 22279
// begin for j := 1 to 4 do
22242: LD_ADDR_VAR 0 3
22246: PUSH
22247: DOUBLE
22248: LD_INT 1
22250: DEC
22251: ST_TO_ADDR
22252: LD_INT 4
22254: PUSH
22255: FOR_TO
22256: IFFALSE 22277
// SetSkill ( i , j , 10 ) ;
22258: LD_VAR 0 2
22262: PPUSH
22263: LD_VAR 0 3
22267: PPUSH
22268: LD_INT 10
22270: PPUSH
22271: CALL_OW 237
22275: GO 22255
22277: POP
22278: POP
// end ;
22279: GO 22228
22281: POP
22282: POP
// end ;
22283: LD_VAR 0 1
22287: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22288: LD_INT 0
22290: PPUSH
22291: PPUSH
22292: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22293: LD_ADDR_VAR 0 2
22297: PUSH
22298: LD_INT 22
22300: PUSH
22301: LD_OWVAR 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 21
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PPUSH
22324: CALL_OW 69
22328: PUSH
22329: FOR_IN
22330: IFFALSE 22371
// begin for j := 1 to 4 do
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: DOUBLE
22338: LD_INT 1
22340: DEC
22341: ST_TO_ADDR
22342: LD_INT 4
22344: PUSH
22345: FOR_TO
22346: IFFALSE 22367
// SetSkill ( i , j , 10 ) ;
22348: LD_VAR 0 2
22352: PPUSH
22353: LD_VAR 0 3
22357: PPUSH
22358: LD_INT 10
22360: PPUSH
22361: CALL_OW 237
22365: GO 22345
22367: POP
22368: POP
// end ;
22369: GO 22329
22371: POP
22372: POP
// end ;
22373: LD_VAR 0 1
22377: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22378: LD_INT 0
22380: PPUSH
// uc_side := your_side ;
22381: LD_ADDR_OWVAR 20
22385: PUSH
22386: LD_OWVAR 2
22390: ST_TO_ADDR
// uc_nation := nation ;
22391: LD_ADDR_OWVAR 21
22395: PUSH
22396: LD_VAR 0 1
22400: ST_TO_ADDR
// InitHc ;
22401: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22405: LD_INT 0
22407: PPUSH
22408: LD_VAR 0 2
22412: PPUSH
22413: LD_VAR 0 3
22417: PPUSH
22418: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22422: LD_VAR 0 4
22426: PPUSH
22427: LD_VAR 0 5
22431: PPUSH
22432: CALL_OW 428
22436: PUSH
22437: LD_INT 0
22439: EQUAL
22440: IFFALSE 22464
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22442: CALL_OW 44
22446: PPUSH
22447: LD_VAR 0 4
22451: PPUSH
22452: LD_VAR 0 5
22456: PPUSH
22457: LD_INT 1
22459: PPUSH
22460: CALL_OW 48
// end ;
22464: LD_VAR 0 6
22468: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22469: LD_INT 0
22471: PPUSH
22472: PPUSH
// uc_side := your_side ;
22473: LD_ADDR_OWVAR 20
22477: PUSH
22478: LD_OWVAR 2
22482: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22483: LD_VAR 0 1
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 3
22496: PUSH
22497: LD_INT 4
22499: PUSH
22500: LD_INT 5
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: IN
22510: IFFALSE 22522
// uc_nation := nation_american else
22512: LD_ADDR_OWVAR 21
22516: PUSH
22517: LD_INT 1
22519: ST_TO_ADDR
22520: GO 22565
// if chassis in [ 11 , 12 , 13 , 14 ] then
22522: LD_VAR 0 1
22526: PUSH
22527: LD_INT 11
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 13
22535: PUSH
22536: LD_INT 14
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: IN
22545: IFFALSE 22557
// uc_nation := nation_arabian else
22547: LD_ADDR_OWVAR 21
22551: PUSH
22552: LD_INT 2
22554: ST_TO_ADDR
22555: GO 22565
// uc_nation := nation_russian ;
22557: LD_ADDR_OWVAR 21
22561: PUSH
22562: LD_INT 3
22564: ST_TO_ADDR
// vc_chassis := chassis ;
22565: LD_ADDR_OWVAR 37
22569: PUSH
22570: LD_VAR 0 1
22574: ST_TO_ADDR
// vc_engine := engine ;
22575: LD_ADDR_OWVAR 39
22579: PUSH
22580: LD_VAR 0 2
22584: ST_TO_ADDR
// vc_control := control ;
22585: LD_ADDR_OWVAR 38
22589: PUSH
22590: LD_VAR 0 3
22594: ST_TO_ADDR
// vc_weapon := weapon ;
22595: LD_ADDR_OWVAR 40
22599: PUSH
22600: LD_VAR 0 4
22604: ST_TO_ADDR
// un := CreateVehicle ;
22605: LD_ADDR_VAR 0 8
22609: PUSH
22610: CALL_OW 45
22614: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22615: LD_VAR 0 8
22619: PPUSH
22620: LD_INT 0
22622: PPUSH
22623: LD_INT 5
22625: PPUSH
22626: CALL_OW 12
22630: PPUSH
22631: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22635: LD_VAR 0 8
22639: PPUSH
22640: LD_VAR 0 5
22644: PPUSH
22645: LD_VAR 0 6
22649: PPUSH
22650: LD_INT 1
22652: PPUSH
22653: CALL_OW 48
// end ;
22657: LD_VAR 0 7
22661: RET
// export hInvincible ; every 1 do
22662: GO 22664
22664: DISABLE
// hInvincible := [ ] ;
22665: LD_ADDR_EXP 80
22669: PUSH
22670: EMPTY
22671: ST_TO_ADDR
22672: END
// every 10 do var i ;
22673: GO 22675
22675: DISABLE
22676: LD_INT 0
22678: PPUSH
// begin enable ;
22679: ENABLE
// if not hInvincible then
22680: LD_EXP 80
22684: NOT
22685: IFFALSE 22689
// exit ;
22687: GO 22733
// for i in hInvincible do
22689: LD_ADDR_VAR 0 1
22693: PUSH
22694: LD_EXP 80
22698: PUSH
22699: FOR_IN
22700: IFFALSE 22731
// if GetLives ( i ) < 1000 then
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 256
22711: PUSH
22712: LD_INT 1000
22714: LESS
22715: IFFALSE 22729
// SetLives ( i , 1000 ) ;
22717: LD_VAR 0 1
22721: PPUSH
22722: LD_INT 1000
22724: PPUSH
22725: CALL_OW 234
22729: GO 22699
22731: POP
22732: POP
// end ;
22733: PPOPN 1
22735: END
// export function hHackInvincible ; var i ; begin
22736: LD_INT 0
22738: PPUSH
22739: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22740: LD_ADDR_VAR 0 2
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 21
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 21
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: PPUSH
22773: CALL_OW 69
22777: PUSH
22778: FOR_IN
22779: IFFALSE 22840
// if IsSelected ( i ) then
22781: LD_VAR 0 2
22785: PPUSH
22786: CALL_OW 306
22790: IFFALSE 22838
// begin if i in hInvincible then
22792: LD_VAR 0 2
22796: PUSH
22797: LD_EXP 80
22801: IN
22802: IFFALSE 22822
// hInvincible := hInvincible diff i else
22804: LD_ADDR_EXP 80
22808: PUSH
22809: LD_EXP 80
22813: PUSH
22814: LD_VAR 0 2
22818: DIFF
22819: ST_TO_ADDR
22820: GO 22838
// hInvincible := hInvincible union i ;
22822: LD_ADDR_EXP 80
22826: PUSH
22827: LD_EXP 80
22831: PUSH
22832: LD_VAR 0 2
22836: UNION
22837: ST_TO_ADDR
// end ;
22838: GO 22778
22840: POP
22841: POP
// end ;
22842: LD_VAR 0 1
22846: RET
// export function hHackInvisible ; var i , j ; begin
22847: LD_INT 0
22849: PPUSH
22850: PPUSH
22851: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22852: LD_ADDR_VAR 0 2
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PPUSH
22867: CALL_OW 69
22871: PUSH
22872: FOR_IN
22873: IFFALSE 22897
// if IsSelected ( i ) then
22875: LD_VAR 0 2
22879: PPUSH
22880: CALL_OW 306
22884: IFFALSE 22895
// ComForceInvisible ( i ) ;
22886: LD_VAR 0 2
22890: PPUSH
22891: CALL_OW 496
22895: GO 22872
22897: POP
22898: POP
// end ;
22899: LD_VAR 0 1
22903: RET
// export function hHackChangeYourSide ; begin
22904: LD_INT 0
22906: PPUSH
// if your_side = 8 then
22907: LD_OWVAR 2
22911: PUSH
22912: LD_INT 8
22914: EQUAL
22915: IFFALSE 22927
// your_side := 0 else
22917: LD_ADDR_OWVAR 2
22921: PUSH
22922: LD_INT 0
22924: ST_TO_ADDR
22925: GO 22941
// your_side := your_side + 1 ;
22927: LD_ADDR_OWVAR 2
22931: PUSH
22932: LD_OWVAR 2
22936: PUSH
22937: LD_INT 1
22939: PLUS
22940: ST_TO_ADDR
// end ;
22941: LD_VAR 0 1
22945: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22946: LD_INT 0
22948: PPUSH
22949: PPUSH
22950: PPUSH
// for i in all_units do
22951: LD_ADDR_VAR 0 2
22955: PUSH
22956: LD_OWVAR 3
22960: PUSH
22961: FOR_IN
22962: IFFALSE 23040
// if IsSelected ( i ) then
22964: LD_VAR 0 2
22968: PPUSH
22969: CALL_OW 306
22973: IFFALSE 23038
// begin j := GetSide ( i ) ;
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: LD_VAR 0 2
22984: PPUSH
22985: CALL_OW 255
22989: ST_TO_ADDR
// if j = 8 then
22990: LD_VAR 0 3
22994: PUSH
22995: LD_INT 8
22997: EQUAL
22998: IFFALSE 23010
// j := 0 else
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: LD_INT 0
23007: ST_TO_ADDR
23008: GO 23024
// j := j + 1 ;
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_VAR 0 3
23019: PUSH
23020: LD_INT 1
23022: PLUS
23023: ST_TO_ADDR
// SetSide ( i , j ) ;
23024: LD_VAR 0 2
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: CALL_OW 235
// end ;
23038: GO 22961
23040: POP
23041: POP
// end ;
23042: LD_VAR 0 1
23046: RET
// export function hHackFog ; begin
23047: LD_INT 0
23049: PPUSH
// FogOff ( true ) ;
23050: LD_INT 1
23052: PPUSH
23053: CALL_OW 344
// end ;
23057: LD_VAR 0 1
23061: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23062: LD_INT 0
23064: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23065: LD_VAR 0 1
23069: PPUSH
23070: LD_VAR 0 2
23074: PPUSH
23075: LD_VAR 0 3
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 483
// CenterOnXY ( x , y ) ;
23090: LD_VAR 0 2
23094: PPUSH
23095: LD_VAR 0 3
23099: PPUSH
23100: CALL_OW 84
// end ; end_of_file end_of_file
23104: LD_VAR 0 4
23108: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23109: LD_INT 0
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 264
23124: PUSH
23125: LD_EXP 97
23129: EQUAL
23130: IFFALSE 23202
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23132: LD_INT 68
23134: PPUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 255
23144: PPUSH
23145: CALL_OW 321
23149: PUSH
23150: LD_INT 2
23152: EQUAL
23153: IFFALSE 23165
// eff := 70 else
23155: LD_ADDR_VAR 0 4
23159: PUSH
23160: LD_INT 70
23162: ST_TO_ADDR
23163: GO 23173
// eff := 30 ;
23165: LD_ADDR_VAR 0 4
23169: PUSH
23170: LD_INT 30
23172: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: LD_VAR 0 4
23197: PPUSH
23198: CALL_OW 495
// end ; end ;
23202: LD_VAR 0 2
23206: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23207: LD_INT 0
23209: PPUSH
// end ;
23210: LD_VAR 0 4
23214: RET
// export function SOS_Command ( cmd ) ; begin
23215: LD_INT 0
23217: PPUSH
// end ;
23218: LD_VAR 0 2
23222: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23223: LD_INT 0
23225: PPUSH
// if cmd = 121 then
23226: LD_VAR 0 1
23230: PUSH
23231: LD_INT 121
23233: EQUAL
23234: IFFALSE 23236
// end ;
23236: LD_VAR 0 6
23240: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23241: LD_INT 0
23243: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23244: LD_VAR 0 1
23248: PUSH
23249: LD_INT 250
23251: EQUAL
23252: PUSH
23253: LD_VAR 0 2
23257: PPUSH
23258: CALL_OW 264
23262: PUSH
23263: LD_EXP 100
23267: EQUAL
23268: AND
23269: IFFALSE 23290
// MinerPlaceMine ( unit , x , y ) ;
23271: LD_VAR 0 2
23275: PPUSH
23276: LD_VAR 0 4
23280: PPUSH
23281: LD_VAR 0 5
23285: PPUSH
23286: CALL 25639 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23290: LD_VAR 0 1
23294: PUSH
23295: LD_INT 251
23297: EQUAL
23298: PUSH
23299: LD_VAR 0 2
23303: PPUSH
23304: CALL_OW 264
23308: PUSH
23309: LD_EXP 100
23313: EQUAL
23314: AND
23315: IFFALSE 23336
// MinerDetonateMine ( unit , x , y ) ;
23317: LD_VAR 0 2
23321: PPUSH
23322: LD_VAR 0 4
23326: PPUSH
23327: LD_VAR 0 5
23331: PPUSH
23332: CALL 25916 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23336: LD_VAR 0 1
23340: PUSH
23341: LD_INT 252
23343: EQUAL
23344: PUSH
23345: LD_VAR 0 2
23349: PPUSH
23350: CALL_OW 264
23354: PUSH
23355: LD_EXP 100
23359: EQUAL
23360: AND
23361: IFFALSE 23382
// MinerCreateMinefield ( unit , x , y ) ;
23363: LD_VAR 0 2
23367: PPUSH
23368: LD_VAR 0 4
23372: PPUSH
23373: LD_VAR 0 5
23377: PPUSH
23378: CALL 26333 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23382: LD_VAR 0 1
23386: PUSH
23387: LD_INT 253
23389: EQUAL
23390: PUSH
23391: LD_VAR 0 2
23395: PPUSH
23396: CALL_OW 257
23400: PUSH
23401: LD_INT 5
23403: EQUAL
23404: AND
23405: IFFALSE 23426
// ComBinocular ( unit , x , y ) ;
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_VAR 0 4
23416: PPUSH
23417: LD_VAR 0 5
23421: PPUSH
23422: CALL 26704 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23426: LD_VAR 0 1
23430: PUSH
23431: LD_INT 254
23433: EQUAL
23434: PUSH
23435: LD_VAR 0 2
23439: PPUSH
23440: CALL_OW 264
23444: PUSH
23445: LD_EXP 95
23449: EQUAL
23450: AND
23451: PUSH
23452: LD_VAR 0 3
23456: PPUSH
23457: CALL_OW 263
23461: PUSH
23462: LD_INT 3
23464: EQUAL
23465: AND
23466: IFFALSE 23482
// HackDestroyVehicle ( unit , selectedUnit ) ;
23468: LD_VAR 0 2
23472: PPUSH
23473: LD_VAR 0 3
23477: PPUSH
23478: CALL 24999 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23482: LD_VAR 0 1
23486: PUSH
23487: LD_INT 255
23489: EQUAL
23490: PUSH
23491: LD_VAR 0 2
23495: PPUSH
23496: CALL_OW 264
23500: PUSH
23501: LD_INT 14
23503: PUSH
23504: LD_INT 53
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: IN
23511: AND
23512: PUSH
23513: LD_VAR 0 4
23517: PPUSH
23518: LD_VAR 0 5
23522: PPUSH
23523: CALL_OW 488
23527: AND
23528: IFFALSE 23552
// CutTreeXYR ( unit , x , y , 12 ) ;
23530: LD_VAR 0 2
23534: PPUSH
23535: LD_VAR 0 4
23539: PPUSH
23540: LD_VAR 0 5
23544: PPUSH
23545: LD_INT 12
23547: PPUSH
23548: CALL 23565 0 4
// end ;
23552: LD_VAR 0 6
23556: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23557: LD_INT 0
23559: PPUSH
// end ;
23560: LD_VAR 0 4
23564: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23565: LD_INT 0
23567: PPUSH
23568: PPUSH
23569: PPUSH
23570: PPUSH
23571: PPUSH
23572: PPUSH
23573: PPUSH
23574: PPUSH
23575: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23576: LD_VAR 0 1
23580: NOT
23581: PUSH
23582: LD_VAR 0 2
23586: PPUSH
23587: LD_VAR 0 3
23591: PPUSH
23592: CALL_OW 488
23596: NOT
23597: OR
23598: PUSH
23599: LD_VAR 0 4
23603: NOT
23604: OR
23605: IFFALSE 23609
// exit ;
23607: GO 23949
// list := [ ] ;
23609: LD_ADDR_VAR 0 13
23613: PUSH
23614: EMPTY
23615: ST_TO_ADDR
// if x - r < 0 then
23616: LD_VAR 0 2
23620: PUSH
23621: LD_VAR 0 4
23625: MINUS
23626: PUSH
23627: LD_INT 0
23629: LESS
23630: IFFALSE 23642
// min_x := 0 else
23632: LD_ADDR_VAR 0 7
23636: PUSH
23637: LD_INT 0
23639: ST_TO_ADDR
23640: GO 23658
// min_x := x - r ;
23642: LD_ADDR_VAR 0 7
23646: PUSH
23647: LD_VAR 0 2
23651: PUSH
23652: LD_VAR 0 4
23656: MINUS
23657: ST_TO_ADDR
// if y - r < 0 then
23658: LD_VAR 0 3
23662: PUSH
23663: LD_VAR 0 4
23667: MINUS
23668: PUSH
23669: LD_INT 0
23671: LESS
23672: IFFALSE 23684
// min_y := 0 else
23674: LD_ADDR_VAR 0 8
23678: PUSH
23679: LD_INT 0
23681: ST_TO_ADDR
23682: GO 23700
// min_y := y - r ;
23684: LD_ADDR_VAR 0 8
23688: PUSH
23689: LD_VAR 0 3
23693: PUSH
23694: LD_VAR 0 4
23698: MINUS
23699: ST_TO_ADDR
// max_x := x + r ;
23700: LD_ADDR_VAR 0 9
23704: PUSH
23705: LD_VAR 0 2
23709: PUSH
23710: LD_VAR 0 4
23714: PLUS
23715: ST_TO_ADDR
// max_y := y + r ;
23716: LD_ADDR_VAR 0 10
23720: PUSH
23721: LD_VAR 0 3
23725: PUSH
23726: LD_VAR 0 4
23730: PLUS
23731: ST_TO_ADDR
// for _x = min_x to max_x do
23732: LD_ADDR_VAR 0 11
23736: PUSH
23737: DOUBLE
23738: LD_VAR 0 7
23742: DEC
23743: ST_TO_ADDR
23744: LD_VAR 0 9
23748: PUSH
23749: FOR_TO
23750: IFFALSE 23867
// for _y = min_y to max_y do
23752: LD_ADDR_VAR 0 12
23756: PUSH
23757: DOUBLE
23758: LD_VAR 0 8
23762: DEC
23763: ST_TO_ADDR
23764: LD_VAR 0 10
23768: PUSH
23769: FOR_TO
23770: IFFALSE 23863
// begin if not ValidHex ( _x , _y ) then
23772: LD_VAR 0 11
23776: PPUSH
23777: LD_VAR 0 12
23781: PPUSH
23782: CALL_OW 488
23786: NOT
23787: IFFALSE 23791
// continue ;
23789: GO 23769
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23791: LD_VAR 0 11
23795: PPUSH
23796: LD_VAR 0 12
23800: PPUSH
23801: CALL_OW 351
23805: PUSH
23806: LD_VAR 0 11
23810: PPUSH
23811: LD_VAR 0 12
23815: PPUSH
23816: CALL_OW 554
23820: AND
23821: IFFALSE 23861
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23823: LD_ADDR_VAR 0 13
23827: PUSH
23828: LD_VAR 0 13
23832: PPUSH
23833: LD_VAR 0 13
23837: PUSH
23838: LD_INT 1
23840: PLUS
23841: PPUSH
23842: LD_VAR 0 11
23846: PUSH
23847: LD_VAR 0 12
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PPUSH
23856: CALL_OW 2
23860: ST_TO_ADDR
// end ;
23861: GO 23769
23863: POP
23864: POP
23865: GO 23749
23867: POP
23868: POP
// if not list then
23869: LD_VAR 0 13
23873: NOT
23874: IFFALSE 23878
// exit ;
23876: GO 23949
// for i in list do
23878: LD_ADDR_VAR 0 6
23882: PUSH
23883: LD_VAR 0 13
23887: PUSH
23888: FOR_IN
23889: IFFALSE 23947
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23891: LD_VAR 0 1
23895: PPUSH
23896: LD_STRING M
23898: PUSH
23899: LD_VAR 0 6
23903: PUSH
23904: LD_INT 1
23906: ARRAY
23907: PUSH
23908: LD_VAR 0 6
23912: PUSH
23913: LD_INT 2
23915: ARRAY
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: PUSH
23938: EMPTY
23939: LIST
23940: PPUSH
23941: CALL_OW 447
23945: GO 23888
23947: POP
23948: POP
// end ;
23949: LD_VAR 0 5
23953: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23954: LD_EXP 83
23958: NOT
23959: IFFALSE 24009
23961: GO 23963
23963: DISABLE
// begin initHack := true ;
23964: LD_ADDR_EXP 83
23968: PUSH
23969: LD_INT 1
23971: ST_TO_ADDR
// hackTanks := [ ] ;
23972: LD_ADDR_EXP 84
23976: PUSH
23977: EMPTY
23978: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23979: LD_ADDR_EXP 85
23983: PUSH
23984: EMPTY
23985: ST_TO_ADDR
// hackLimit := 3 ;
23986: LD_ADDR_EXP 86
23990: PUSH
23991: LD_INT 3
23993: ST_TO_ADDR
// hackDist := 12 ;
23994: LD_ADDR_EXP 87
23998: PUSH
23999: LD_INT 12
24001: ST_TO_ADDR
// hackCounter := [ ] ;
24002: LD_ADDR_EXP 88
24006: PUSH
24007: EMPTY
24008: ST_TO_ADDR
// end ;
24009: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24010: LD_EXP 83
24014: PUSH
24015: LD_INT 34
24017: PUSH
24018: LD_EXP 95
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: CALL_OW 69
24031: AND
24032: IFFALSE 24287
24034: GO 24036
24036: DISABLE
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
// begin enable ;
24041: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24042: LD_ADDR_VAR 0 1
24046: PUSH
24047: LD_INT 34
24049: PUSH
24050: LD_EXP 95
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 69
24063: PUSH
24064: FOR_IN
24065: IFFALSE 24285
// begin if not i in hackTanks then
24067: LD_VAR 0 1
24071: PUSH
24072: LD_EXP 84
24076: IN
24077: NOT
24078: IFFALSE 24161
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24080: LD_ADDR_EXP 84
24084: PUSH
24085: LD_EXP 84
24089: PPUSH
24090: LD_EXP 84
24094: PUSH
24095: LD_INT 1
24097: PLUS
24098: PPUSH
24099: LD_VAR 0 1
24103: PPUSH
24104: CALL_OW 1
24108: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24109: LD_ADDR_EXP 85
24113: PUSH
24114: LD_EXP 85
24118: PPUSH
24119: LD_EXP 85
24123: PUSH
24124: LD_INT 1
24126: PLUS
24127: PPUSH
24128: EMPTY
24129: PPUSH
24130: CALL_OW 1
24134: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24135: LD_ADDR_EXP 88
24139: PUSH
24140: LD_EXP 88
24144: PPUSH
24145: LD_EXP 88
24149: PUSH
24150: LD_INT 1
24152: PLUS
24153: PPUSH
24154: EMPTY
24155: PPUSH
24156: CALL_OW 1
24160: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24161: LD_VAR 0 1
24165: PPUSH
24166: CALL_OW 302
24170: NOT
24171: IFFALSE 24184
// begin HackUnlinkAll ( i ) ;
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL 24290 0 1
// continue ;
24182: GO 24064
// end ; HackCheckCapturedStatus ( i ) ;
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL 24733 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24193: LD_ADDR_VAR 0 2
24197: PUSH
24198: LD_INT 81
24200: PUSH
24201: LD_VAR 0 1
24205: PPUSH
24206: CALL_OW 255
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 33
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 91
24227: PUSH
24228: LD_VAR 0 1
24232: PUSH
24233: LD_EXP 87
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 50
24245: PUSH
24246: EMPTY
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 69
24259: ST_TO_ADDR
// if not tmp then
24260: LD_VAR 0 2
24264: NOT
24265: IFFALSE 24269
// continue ;
24267: GO 24064
// HackLink ( i , tmp ) ;
24269: LD_VAR 0 1
24273: PPUSH
24274: LD_VAR 0 2
24278: PPUSH
24279: CALL 24426 0 2
// end ;
24283: GO 24064
24285: POP
24286: POP
// end ;
24287: PPOPN 2
24289: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24290: LD_INT 0
24292: PPUSH
24293: PPUSH
24294: PPUSH
// if not hack in hackTanks then
24295: LD_VAR 0 1
24299: PUSH
24300: LD_EXP 84
24304: IN
24305: NOT
24306: IFFALSE 24310
// exit ;
24308: GO 24421
// index := GetElementIndex ( hackTanks , hack ) ;
24310: LD_ADDR_VAR 0 4
24314: PUSH
24315: LD_EXP 84
24319: PPUSH
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL 32023 0 2
24329: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24330: LD_EXP 85
24334: PUSH
24335: LD_VAR 0 4
24339: ARRAY
24340: IFFALSE 24421
// begin for i in hackTanksCaptured [ index ] do
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_EXP 85
24351: PUSH
24352: LD_VAR 0 4
24356: ARRAY
24357: PUSH
24358: FOR_IN
24359: IFFALSE 24385
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24361: LD_VAR 0 3
24365: PUSH
24366: LD_INT 1
24368: ARRAY
24369: PPUSH
24370: LD_VAR 0 3
24374: PUSH
24375: LD_INT 2
24377: ARRAY
24378: PPUSH
24379: CALL_OW 235
24383: GO 24358
24385: POP
24386: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24387: LD_ADDR_EXP 85
24391: PUSH
24392: LD_EXP 85
24396: PPUSH
24397: LD_VAR 0 4
24401: PPUSH
24402: EMPTY
24403: PPUSH
24404: CALL_OW 1
24408: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24409: LD_VAR 0 1
24413: PPUSH
24414: LD_INT 0
24416: PPUSH
24417: CALL_OW 505
// end ; end ;
24421: LD_VAR 0 2
24425: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24426: LD_INT 0
24428: PPUSH
24429: PPUSH
24430: PPUSH
// if not hack in hackTanks or not vehicles then
24431: LD_VAR 0 1
24435: PUSH
24436: LD_EXP 84
24440: IN
24441: NOT
24442: PUSH
24443: LD_VAR 0 2
24447: NOT
24448: OR
24449: IFFALSE 24453
// exit ;
24451: GO 24728
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24453: LD_ADDR_VAR 0 2
24457: PUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: LD_VAR 0 2
24467: PPUSH
24468: LD_INT 1
24470: PPUSH
24471: LD_INT 1
24473: PPUSH
24474: CALL 32673 0 4
24478: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24479: LD_ADDR_VAR 0 5
24483: PUSH
24484: LD_EXP 84
24488: PPUSH
24489: LD_VAR 0 1
24493: PPUSH
24494: CALL 32023 0 2
24498: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24499: LD_EXP 85
24503: PUSH
24504: LD_VAR 0 5
24508: ARRAY
24509: PUSH
24510: LD_EXP 86
24514: LESS
24515: IFFALSE 24704
// begin for i := 1 to vehicles do
24517: LD_ADDR_VAR 0 4
24521: PUSH
24522: DOUBLE
24523: LD_INT 1
24525: DEC
24526: ST_TO_ADDR
24527: LD_VAR 0 2
24531: PUSH
24532: FOR_TO
24533: IFFALSE 24702
// begin if hackTanksCaptured [ index ] = hackLimit then
24535: LD_EXP 85
24539: PUSH
24540: LD_VAR 0 5
24544: ARRAY
24545: PUSH
24546: LD_EXP 86
24550: EQUAL
24551: IFFALSE 24555
// break ;
24553: GO 24702
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24555: LD_ADDR_EXP 88
24559: PUSH
24560: LD_EXP 88
24564: PPUSH
24565: LD_VAR 0 5
24569: PPUSH
24570: LD_EXP 88
24574: PUSH
24575: LD_VAR 0 5
24579: ARRAY
24580: PUSH
24581: LD_INT 1
24583: PLUS
24584: PPUSH
24585: CALL_OW 1
24589: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24590: LD_ADDR_EXP 85
24594: PUSH
24595: LD_EXP 85
24599: PPUSH
24600: LD_VAR 0 5
24604: PUSH
24605: LD_EXP 85
24609: PUSH
24610: LD_VAR 0 5
24614: ARRAY
24615: PUSH
24616: LD_INT 1
24618: PLUS
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PPUSH
24624: LD_VAR 0 2
24628: PUSH
24629: LD_VAR 0 4
24633: ARRAY
24634: PUSH
24635: LD_VAR 0 2
24639: PUSH
24640: LD_VAR 0 4
24644: ARRAY
24645: PPUSH
24646: CALL_OW 255
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PPUSH
24655: CALL 32238 0 3
24659: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24660: LD_VAR 0 2
24664: PUSH
24665: LD_VAR 0 4
24669: ARRAY
24670: PPUSH
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 255
24680: PPUSH
24681: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24685: LD_VAR 0 2
24689: PUSH
24690: LD_VAR 0 4
24694: ARRAY
24695: PPUSH
24696: CALL_OW 141
// end ;
24700: GO 24532
24702: POP
24703: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24704: LD_VAR 0 1
24708: PPUSH
24709: LD_EXP 85
24713: PUSH
24714: LD_VAR 0 5
24718: ARRAY
24719: PUSH
24720: LD_INT 0
24722: PLUS
24723: PPUSH
24724: CALL_OW 505
// end ;
24728: LD_VAR 0 3
24732: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24733: LD_INT 0
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
// if not hack in hackTanks then
24739: LD_VAR 0 1
24743: PUSH
24744: LD_EXP 84
24748: IN
24749: NOT
24750: IFFALSE 24754
// exit ;
24752: GO 24994
// index := GetElementIndex ( hackTanks , hack ) ;
24754: LD_ADDR_VAR 0 4
24758: PUSH
24759: LD_EXP 84
24763: PPUSH
24764: LD_VAR 0 1
24768: PPUSH
24769: CALL 32023 0 2
24773: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24774: LD_ADDR_VAR 0 3
24778: PUSH
24779: DOUBLE
24780: LD_EXP 85
24784: PUSH
24785: LD_VAR 0 4
24789: ARRAY
24790: INC
24791: ST_TO_ADDR
24792: LD_INT 1
24794: PUSH
24795: FOR_DOWNTO
24796: IFFALSE 24968
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24798: LD_ADDR_VAR 0 5
24802: PUSH
24803: LD_EXP 85
24807: PUSH
24808: LD_VAR 0 4
24812: ARRAY
24813: PUSH
24814: LD_VAR 0 3
24818: ARRAY
24819: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24820: LD_VAR 0 5
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: CALL_OW 302
24833: NOT
24834: PUSH
24835: LD_VAR 0 5
24839: PUSH
24840: LD_INT 1
24842: ARRAY
24843: PPUSH
24844: CALL_OW 255
24848: PUSH
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 255
24858: NONEQUAL
24859: OR
24860: IFFALSE 24966
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24862: LD_VAR 0 5
24866: PUSH
24867: LD_INT 1
24869: ARRAY
24870: PPUSH
24871: CALL_OW 305
24875: PUSH
24876: LD_VAR 0 5
24880: PUSH
24881: LD_INT 1
24883: ARRAY
24884: PPUSH
24885: CALL_OW 255
24889: PUSH
24890: LD_VAR 0 1
24894: PPUSH
24895: CALL_OW 255
24899: EQUAL
24900: AND
24901: IFFALSE 24925
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24903: LD_VAR 0 5
24907: PUSH
24908: LD_INT 1
24910: ARRAY
24911: PPUSH
24912: LD_VAR 0 5
24916: PUSH
24917: LD_INT 2
24919: ARRAY
24920: PPUSH
24921: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24925: LD_ADDR_EXP 85
24929: PUSH
24930: LD_EXP 85
24934: PPUSH
24935: LD_VAR 0 4
24939: PPUSH
24940: LD_EXP 85
24944: PUSH
24945: LD_VAR 0 4
24949: ARRAY
24950: PPUSH
24951: LD_VAR 0 3
24955: PPUSH
24956: CALL_OW 3
24960: PPUSH
24961: CALL_OW 1
24965: ST_TO_ADDR
// end ; end ;
24966: GO 24795
24968: POP
24969: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24970: LD_VAR 0 1
24974: PPUSH
24975: LD_EXP 85
24979: PUSH
24980: LD_VAR 0 4
24984: ARRAY
24985: PUSH
24986: LD_INT 0
24988: PLUS
24989: PPUSH
24990: CALL_OW 505
// end ;
24994: LD_VAR 0 2
24998: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24999: LD_INT 0
25001: PPUSH
25002: PPUSH
25003: PPUSH
25004: PPUSH
// if not hack in hackTanks then
25005: LD_VAR 0 1
25009: PUSH
25010: LD_EXP 84
25014: IN
25015: NOT
25016: IFFALSE 25020
// exit ;
25018: GO 25105
// index := GetElementIndex ( hackTanks , hack ) ;
25020: LD_ADDR_VAR 0 5
25024: PUSH
25025: LD_EXP 84
25029: PPUSH
25030: LD_VAR 0 1
25034: PPUSH
25035: CALL 32023 0 2
25039: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25040: LD_ADDR_VAR 0 4
25044: PUSH
25045: DOUBLE
25046: LD_INT 1
25048: DEC
25049: ST_TO_ADDR
25050: LD_EXP 85
25054: PUSH
25055: LD_VAR 0 5
25059: ARRAY
25060: PUSH
25061: FOR_TO
25062: IFFALSE 25103
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25064: LD_EXP 85
25068: PUSH
25069: LD_VAR 0 5
25073: ARRAY
25074: PUSH
25075: LD_VAR 0 4
25079: ARRAY
25080: PUSH
25081: LD_INT 1
25083: ARRAY
25084: PUSH
25085: LD_VAR 0 2
25089: EQUAL
25090: IFFALSE 25101
// KillUnit ( vehicle ) ;
25092: LD_VAR 0 2
25096: PPUSH
25097: CALL_OW 66
25101: GO 25061
25103: POP
25104: POP
// end ;
25105: LD_VAR 0 3
25109: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25110: LD_EXP 89
25114: NOT
25115: IFFALSE 25150
25117: GO 25119
25119: DISABLE
// begin initMiner := true ;
25120: LD_ADDR_EXP 89
25124: PUSH
25125: LD_INT 1
25127: ST_TO_ADDR
// minersList := [ ] ;
25128: LD_ADDR_EXP 90
25132: PUSH
25133: EMPTY
25134: ST_TO_ADDR
// minerMinesList := [ ] ;
25135: LD_ADDR_EXP 91
25139: PUSH
25140: EMPTY
25141: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25142: LD_ADDR_EXP 92
25146: PUSH
25147: LD_INT 5
25149: ST_TO_ADDR
// end ;
25150: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25151: LD_EXP 89
25155: PUSH
25156: LD_INT 34
25158: PUSH
25159: LD_EXP 100
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PPUSH
25168: CALL_OW 69
25172: AND
25173: IFFALSE 25636
25175: GO 25177
25177: DISABLE
25178: LD_INT 0
25180: PPUSH
25181: PPUSH
25182: PPUSH
25183: PPUSH
// begin enable ;
25184: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25185: LD_ADDR_VAR 0 1
25189: PUSH
25190: LD_INT 34
25192: PUSH
25193: LD_EXP 100
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: PUSH
25207: FOR_IN
25208: IFFALSE 25280
// begin if not i in minersList then
25210: LD_VAR 0 1
25214: PUSH
25215: LD_EXP 90
25219: IN
25220: NOT
25221: IFFALSE 25278
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25223: LD_ADDR_EXP 90
25227: PUSH
25228: LD_EXP 90
25232: PPUSH
25233: LD_EXP 90
25237: PUSH
25238: LD_INT 1
25240: PLUS
25241: PPUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 1
25251: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25252: LD_ADDR_EXP 91
25256: PUSH
25257: LD_EXP 91
25261: PPUSH
25262: LD_EXP 91
25266: PUSH
25267: LD_INT 1
25269: PLUS
25270: PPUSH
25271: EMPTY
25272: PPUSH
25273: CALL_OW 1
25277: ST_TO_ADDR
// end end ;
25278: GO 25207
25280: POP
25281: POP
// for i := minerMinesList downto 1 do
25282: LD_ADDR_VAR 0 1
25286: PUSH
25287: DOUBLE
25288: LD_EXP 91
25292: INC
25293: ST_TO_ADDR
25294: LD_INT 1
25296: PUSH
25297: FOR_DOWNTO
25298: IFFALSE 25634
// begin if IsLive ( minersList [ i ] ) then
25300: LD_EXP 90
25304: PUSH
25305: LD_VAR 0 1
25309: ARRAY
25310: PPUSH
25311: CALL_OW 300
25315: IFFALSE 25343
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25317: LD_EXP 90
25321: PUSH
25322: LD_VAR 0 1
25326: ARRAY
25327: PPUSH
25328: LD_EXP 91
25332: PUSH
25333: LD_VAR 0 1
25337: ARRAY
25338: PPUSH
25339: CALL_OW 505
// if not minerMinesList [ i ] then
25343: LD_EXP 91
25347: PUSH
25348: LD_VAR 0 1
25352: ARRAY
25353: NOT
25354: IFFALSE 25358
// continue ;
25356: GO 25297
// for j := minerMinesList [ i ] downto 1 do
25358: LD_ADDR_VAR 0 2
25362: PUSH
25363: DOUBLE
25364: LD_EXP 91
25368: PUSH
25369: LD_VAR 0 1
25373: ARRAY
25374: INC
25375: ST_TO_ADDR
25376: LD_INT 1
25378: PUSH
25379: FOR_DOWNTO
25380: IFFALSE 25630
// begin side := GetSide ( minersList [ i ] ) ;
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_EXP 90
25391: PUSH
25392: LD_VAR 0 1
25396: ARRAY
25397: PPUSH
25398: CALL_OW 255
25402: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25403: LD_ADDR_VAR 0 4
25407: PUSH
25408: LD_EXP 91
25412: PUSH
25413: LD_VAR 0 1
25417: ARRAY
25418: PUSH
25419: LD_VAR 0 2
25423: ARRAY
25424: PUSH
25425: LD_INT 1
25427: ARRAY
25428: PPUSH
25429: LD_EXP 91
25433: PUSH
25434: LD_VAR 0 1
25438: ARRAY
25439: PUSH
25440: LD_VAR 0 2
25444: ARRAY
25445: PUSH
25446: LD_INT 2
25448: ARRAY
25449: PPUSH
25450: CALL_OW 428
25454: ST_TO_ADDR
// if not tmp then
25455: LD_VAR 0 4
25459: NOT
25460: IFFALSE 25464
// continue ;
25462: GO 25379
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25464: LD_VAR 0 4
25468: PUSH
25469: LD_INT 81
25471: PUSH
25472: LD_VAR 0 3
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PPUSH
25481: CALL_OW 69
25485: IN
25486: PUSH
25487: LD_EXP 91
25491: PUSH
25492: LD_VAR 0 1
25496: ARRAY
25497: PUSH
25498: LD_VAR 0 2
25502: ARRAY
25503: PUSH
25504: LD_INT 1
25506: ARRAY
25507: PPUSH
25508: LD_EXP 91
25512: PUSH
25513: LD_VAR 0 1
25517: ARRAY
25518: PUSH
25519: LD_VAR 0 2
25523: ARRAY
25524: PUSH
25525: LD_INT 2
25527: ARRAY
25528: PPUSH
25529: CALL_OW 458
25533: AND
25534: IFFALSE 25628
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25536: LD_EXP 91
25540: PUSH
25541: LD_VAR 0 1
25545: ARRAY
25546: PUSH
25547: LD_VAR 0 2
25551: ARRAY
25552: PUSH
25553: LD_INT 1
25555: ARRAY
25556: PPUSH
25557: LD_EXP 91
25561: PUSH
25562: LD_VAR 0 1
25566: ARRAY
25567: PUSH
25568: LD_VAR 0 2
25572: ARRAY
25573: PUSH
25574: LD_INT 2
25576: ARRAY
25577: PPUSH
25578: LD_VAR 0 3
25582: PPUSH
25583: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25587: LD_ADDR_EXP 91
25591: PUSH
25592: LD_EXP 91
25596: PPUSH
25597: LD_VAR 0 1
25601: PPUSH
25602: LD_EXP 91
25606: PUSH
25607: LD_VAR 0 1
25611: ARRAY
25612: PPUSH
25613: LD_VAR 0 2
25617: PPUSH
25618: CALL_OW 3
25622: PPUSH
25623: CALL_OW 1
25627: ST_TO_ADDR
// end ; end ;
25628: GO 25379
25630: POP
25631: POP
// end ;
25632: GO 25297
25634: POP
25635: POP
// end ;
25636: PPOPN 4
25638: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
// result := false ;
25643: LD_ADDR_VAR 0 4
25647: PUSH
25648: LD_INT 0
25650: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL_OW 264
25660: PUSH
25661: LD_EXP 100
25665: EQUAL
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25911
// index := GetElementIndex ( minersList , unit ) ;
25671: LD_ADDR_VAR 0 5
25675: PUSH
25676: LD_EXP 90
25680: PPUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL 32023 0 2
25690: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25691: LD_EXP 91
25695: PUSH
25696: LD_VAR 0 5
25700: ARRAY
25701: PUSH
25702: LD_EXP 92
25706: GREATEREQUAL
25707: IFFALSE 25711
// exit ;
25709: GO 25911
// ComMoveXY ( unit , x , y ) ;
25711: LD_VAR 0 1
25715: PPUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25730: LD_INT 35
25732: PPUSH
25733: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25737: LD_VAR 0 1
25741: PPUSH
25742: LD_VAR 0 2
25746: PPUSH
25747: LD_VAR 0 3
25751: PPUSH
25752: CALL 62420 0 3
25756: NOT
25757: PUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 314
25767: AND
25768: IFFALSE 25772
// exit ;
25770: GO 25911
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25772: LD_VAR 0 2
25776: PPUSH
25777: LD_VAR 0 3
25781: PPUSH
25782: CALL_OW 428
25786: PUSH
25787: LD_VAR 0 1
25791: EQUAL
25792: PUSH
25793: LD_VAR 0 1
25797: PPUSH
25798: CALL_OW 314
25802: NOT
25803: AND
25804: IFFALSE 25730
// PlaySoundXY ( x , y , PlantMine ) ;
25806: LD_VAR 0 2
25810: PPUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: LD_STRING PlantMine
25818: PPUSH
25819: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25823: LD_VAR 0 2
25827: PPUSH
25828: LD_VAR 0 3
25832: PPUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: CALL_OW 255
25842: PPUSH
25843: LD_INT 0
25845: PPUSH
25846: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25850: LD_ADDR_EXP 91
25854: PUSH
25855: LD_EXP 91
25859: PPUSH
25860: LD_VAR 0 5
25864: PUSH
25865: LD_EXP 91
25869: PUSH
25870: LD_VAR 0 5
25874: ARRAY
25875: PUSH
25876: LD_INT 1
25878: PLUS
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PPUSH
25884: LD_VAR 0 2
25888: PUSH
25889: LD_VAR 0 3
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PPUSH
25898: CALL 32238 0 3
25902: ST_TO_ADDR
// result := true ;
25903: LD_ADDR_VAR 0 4
25907: PUSH
25908: LD_INT 1
25910: ST_TO_ADDR
// end ;
25911: LD_VAR 0 4
25915: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
// if not unit in minersList then
25921: LD_VAR 0 1
25925: PUSH
25926: LD_EXP 90
25930: IN
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 26328
// index := GetElementIndex ( minersList , unit ) ;
25936: LD_ADDR_VAR 0 6
25940: PUSH
25941: LD_EXP 90
25945: PPUSH
25946: LD_VAR 0 1
25950: PPUSH
25951: CALL 32023 0 2
25955: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25956: LD_ADDR_VAR 0 5
25960: PUSH
25961: DOUBLE
25962: LD_EXP 91
25966: PUSH
25967: LD_VAR 0 6
25971: ARRAY
25972: INC
25973: ST_TO_ADDR
25974: LD_INT 1
25976: PUSH
25977: FOR_DOWNTO
25978: IFFALSE 26139
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25980: LD_EXP 91
25984: PUSH
25985: LD_VAR 0 6
25989: ARRAY
25990: PUSH
25991: LD_VAR 0 5
25995: ARRAY
25996: PUSH
25997: LD_INT 1
25999: ARRAY
26000: PUSH
26001: LD_VAR 0 2
26005: EQUAL
26006: PUSH
26007: LD_EXP 91
26011: PUSH
26012: LD_VAR 0 6
26016: ARRAY
26017: PUSH
26018: LD_VAR 0 5
26022: ARRAY
26023: PUSH
26024: LD_INT 2
26026: ARRAY
26027: PUSH
26028: LD_VAR 0 3
26032: EQUAL
26033: AND
26034: IFFALSE 26137
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26036: LD_EXP 91
26040: PUSH
26041: LD_VAR 0 6
26045: ARRAY
26046: PUSH
26047: LD_VAR 0 5
26051: ARRAY
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: LD_EXP 91
26061: PUSH
26062: LD_VAR 0 6
26066: ARRAY
26067: PUSH
26068: LD_VAR 0 5
26072: ARRAY
26073: PUSH
26074: LD_INT 2
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: CALL_OW 255
26087: PPUSH
26088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26092: LD_ADDR_EXP 91
26096: PUSH
26097: LD_EXP 91
26101: PPUSH
26102: LD_VAR 0 6
26106: PPUSH
26107: LD_EXP 91
26111: PUSH
26112: LD_VAR 0 6
26116: ARRAY
26117: PPUSH
26118: LD_VAR 0 5
26122: PPUSH
26123: CALL_OW 3
26127: PPUSH
26128: CALL_OW 1
26132: ST_TO_ADDR
// exit ;
26133: POP
26134: POP
26135: GO 26328
// end ; end ;
26137: GO 25977
26139: POP
26140: POP
// for i := minerMinesList [ index ] downto 1 do
26141: LD_ADDR_VAR 0 5
26145: PUSH
26146: DOUBLE
26147: LD_EXP 91
26151: PUSH
26152: LD_VAR 0 6
26156: ARRAY
26157: INC
26158: ST_TO_ADDR
26159: LD_INT 1
26161: PUSH
26162: FOR_DOWNTO
26163: IFFALSE 26326
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26165: LD_EXP 91
26169: PUSH
26170: LD_VAR 0 6
26174: ARRAY
26175: PUSH
26176: LD_VAR 0 5
26180: ARRAY
26181: PUSH
26182: LD_INT 1
26184: ARRAY
26185: PPUSH
26186: LD_EXP 91
26190: PUSH
26191: LD_VAR 0 6
26195: ARRAY
26196: PUSH
26197: LD_VAR 0 5
26201: ARRAY
26202: PUSH
26203: LD_INT 2
26205: ARRAY
26206: PPUSH
26207: LD_VAR 0 2
26211: PPUSH
26212: LD_VAR 0 3
26216: PPUSH
26217: CALL_OW 298
26221: PUSH
26222: LD_INT 6
26224: LESS
26225: IFFALSE 26324
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26227: LD_EXP 91
26231: PUSH
26232: LD_VAR 0 6
26236: ARRAY
26237: PUSH
26238: LD_VAR 0 5
26242: ARRAY
26243: PUSH
26244: LD_INT 1
26246: ARRAY
26247: PPUSH
26248: LD_EXP 91
26252: PUSH
26253: LD_VAR 0 6
26257: ARRAY
26258: PUSH
26259: LD_VAR 0 5
26263: ARRAY
26264: PUSH
26265: LD_INT 2
26267: ARRAY
26268: PPUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 255
26278: PPUSH
26279: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26283: LD_ADDR_EXP 91
26287: PUSH
26288: LD_EXP 91
26292: PPUSH
26293: LD_VAR 0 6
26297: PPUSH
26298: LD_EXP 91
26302: PUSH
26303: LD_VAR 0 6
26307: ARRAY
26308: PPUSH
26309: LD_VAR 0 5
26313: PPUSH
26314: CALL_OW 3
26318: PPUSH
26319: CALL_OW 1
26323: ST_TO_ADDR
// end ; end ;
26324: GO 26162
26326: POP
26327: POP
// end ;
26328: LD_VAR 0 4
26332: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26333: LD_INT 0
26335: PPUSH
26336: PPUSH
26337: PPUSH
26338: PPUSH
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26344: LD_VAR 0 1
26348: PPUSH
26349: CALL_OW 264
26353: PUSH
26354: LD_EXP 100
26358: EQUAL
26359: NOT
26360: PUSH
26361: LD_VAR 0 1
26365: PUSH
26366: LD_EXP 90
26370: IN
26371: NOT
26372: OR
26373: IFFALSE 26377
// exit ;
26375: GO 26699
// index := GetElementIndex ( minersList , unit ) ;
26377: LD_ADDR_VAR 0 6
26381: PUSH
26382: LD_EXP 90
26386: PPUSH
26387: LD_VAR 0 1
26391: PPUSH
26392: CALL 32023 0 2
26396: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26397: LD_ADDR_VAR 0 8
26401: PUSH
26402: LD_EXP 92
26406: PUSH
26407: LD_EXP 91
26411: PUSH
26412: LD_VAR 0 6
26416: ARRAY
26417: MINUS
26418: ST_TO_ADDR
// if not minesFreeAmount then
26419: LD_VAR 0 8
26423: NOT
26424: IFFALSE 26428
// exit ;
26426: GO 26699
// tmp := [ ] ;
26428: LD_ADDR_VAR 0 7
26432: PUSH
26433: EMPTY
26434: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26435: LD_ADDR_VAR 0 5
26439: PUSH
26440: DOUBLE
26441: LD_INT 1
26443: DEC
26444: ST_TO_ADDR
26445: LD_VAR 0 8
26449: PUSH
26450: FOR_TO
26451: IFFALSE 26646
// begin _d := rand ( 0 , 5 ) ;
26453: LD_ADDR_VAR 0 11
26457: PUSH
26458: LD_INT 0
26460: PPUSH
26461: LD_INT 5
26463: PPUSH
26464: CALL_OW 12
26468: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26469: LD_ADDR_VAR 0 12
26473: PUSH
26474: LD_INT 2
26476: PPUSH
26477: LD_INT 6
26479: PPUSH
26480: CALL_OW 12
26484: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26485: LD_ADDR_VAR 0 9
26489: PUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_VAR 0 11
26499: PPUSH
26500: LD_VAR 0 12
26504: PPUSH
26505: CALL_OW 272
26509: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26510: LD_ADDR_VAR 0 10
26514: PUSH
26515: LD_VAR 0 3
26519: PPUSH
26520: LD_VAR 0 11
26524: PPUSH
26525: LD_VAR 0 12
26529: PPUSH
26530: CALL_OW 273
26534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26535: LD_VAR 0 9
26539: PPUSH
26540: LD_VAR 0 10
26544: PPUSH
26545: CALL_OW 488
26549: PUSH
26550: LD_VAR 0 9
26554: PUSH
26555: LD_VAR 0 10
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_VAR 0 7
26568: IN
26569: NOT
26570: AND
26571: PUSH
26572: LD_VAR 0 9
26576: PPUSH
26577: LD_VAR 0 10
26581: PPUSH
26582: CALL_OW 458
26586: NOT
26587: AND
26588: IFFALSE 26630
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26590: LD_ADDR_VAR 0 7
26594: PUSH
26595: LD_VAR 0 7
26599: PPUSH
26600: LD_VAR 0 7
26604: PUSH
26605: LD_INT 1
26607: PLUS
26608: PPUSH
26609: LD_VAR 0 9
26613: PUSH
26614: LD_VAR 0 10
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PPUSH
26623: CALL_OW 1
26627: ST_TO_ADDR
26628: GO 26644
// i := i - 1 ;
26630: LD_ADDR_VAR 0 5
26634: PUSH
26635: LD_VAR 0 5
26639: PUSH
26640: LD_INT 1
26642: MINUS
26643: ST_TO_ADDR
// end ;
26644: GO 26450
26646: POP
26647: POP
// for i in tmp do
26648: LD_ADDR_VAR 0 5
26652: PUSH
26653: LD_VAR 0 7
26657: PUSH
26658: FOR_IN
26659: IFFALSE 26697
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26661: LD_VAR 0 1
26665: PPUSH
26666: LD_VAR 0 5
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: PPUSH
26675: LD_VAR 0 5
26679: PUSH
26680: LD_INT 2
26682: ARRAY
26683: PPUSH
26684: CALL 25639 0 3
26688: NOT
26689: IFFALSE 26695
// exit ;
26691: POP
26692: POP
26693: GO 26699
26695: GO 26658
26697: POP
26698: POP
// end ;
26699: LD_VAR 0 4
26703: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
// if not GetClass ( unit ) = class_sniper then
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 257
26722: PUSH
26723: LD_INT 5
26725: EQUAL
26726: NOT
26727: IFFALSE 26731
// exit ;
26729: GO 27119
// dist := 8 ;
26731: LD_ADDR_VAR 0 5
26735: PUSH
26736: LD_INT 8
26738: ST_TO_ADDR
// viewRange := 12 ;
26739: LD_ADDR_VAR 0 7
26743: PUSH
26744: LD_INT 12
26746: ST_TO_ADDR
// side := GetSide ( unit ) ;
26747: LD_ADDR_VAR 0 6
26751: PUSH
26752: LD_VAR 0 1
26756: PPUSH
26757: CALL_OW 255
26761: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26762: LD_INT 61
26764: PPUSH
26765: LD_VAR 0 6
26769: PPUSH
26770: CALL_OW 321
26774: PUSH
26775: LD_INT 2
26777: EQUAL
26778: IFFALSE 26788
// viewRange := 16 ;
26780: LD_ADDR_VAR 0 7
26784: PUSH
26785: LD_INT 16
26787: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26788: LD_VAR 0 1
26792: PPUSH
26793: LD_VAR 0 2
26797: PPUSH
26798: LD_VAR 0 3
26802: PPUSH
26803: CALL_OW 297
26807: PUSH
26808: LD_VAR 0 5
26812: GREATER
26813: IFFALSE 26892
// begin ComMoveXY ( unit , x , y ) ;
26815: LD_VAR 0 1
26819: PPUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: LD_VAR 0 3
26829: PPUSH
26830: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26834: LD_INT 35
26836: PPUSH
26837: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26841: LD_VAR 0 1
26845: PPUSH
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: CALL 62420 0 3
26860: NOT
26861: IFFALSE 26865
// exit ;
26863: GO 27119
// until GetDistUnitXY ( unit , x , y ) < dist ;
26865: LD_VAR 0 1
26869: PPUSH
26870: LD_VAR 0 2
26874: PPUSH
26875: LD_VAR 0 3
26879: PPUSH
26880: CALL_OW 297
26884: PUSH
26885: LD_VAR 0 5
26889: LESS
26890: IFFALSE 26834
// end ; ComTurnXY ( unit , x , y ) ;
26892: LD_VAR 0 1
26896: PPUSH
26897: LD_VAR 0 2
26901: PPUSH
26902: LD_VAR 0 3
26906: PPUSH
26907: CALL_OW 118
// wait ( 5 ) ;
26911: LD_INT 5
26913: PPUSH
26914: CALL_OW 67
// _d := GetDir ( unit ) ;
26918: LD_ADDR_VAR 0 10
26922: PUSH
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 254
26932: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26933: LD_ADDR_VAR 0 8
26937: PUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 250
26947: PPUSH
26948: LD_VAR 0 10
26952: PPUSH
26953: LD_VAR 0 5
26957: PPUSH
26958: CALL_OW 272
26962: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26963: LD_ADDR_VAR 0 9
26967: PUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 251
26977: PPUSH
26978: LD_VAR 0 10
26982: PPUSH
26983: LD_VAR 0 5
26987: PPUSH
26988: CALL_OW 273
26992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26993: LD_VAR 0 8
26997: PPUSH
26998: LD_VAR 0 9
27002: PPUSH
27003: CALL_OW 488
27007: NOT
27008: IFFALSE 27012
// exit ;
27010: GO 27119
// ComAnimCustom ( unit , 1 ) ;
27012: LD_VAR 0 1
27016: PPUSH
27017: LD_INT 1
27019: PPUSH
27020: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27024: LD_VAR 0 8
27028: PPUSH
27029: LD_VAR 0 9
27033: PPUSH
27034: LD_VAR 0 6
27038: PPUSH
27039: LD_VAR 0 7
27043: PPUSH
27044: CALL_OW 330
// repeat wait ( 1 ) ;
27048: LD_INT 1
27050: PPUSH
27051: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27055: LD_VAR 0 1
27059: PPUSH
27060: CALL_OW 316
27064: PUSH
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 314
27074: OR
27075: PUSH
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 302
27085: NOT
27086: OR
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 301
27097: OR
27098: IFFALSE 27048
// RemoveSeeing ( _x , _y , side ) ;
27100: LD_VAR 0 8
27104: PPUSH
27105: LD_VAR 0 9
27109: PPUSH
27110: LD_VAR 0 6
27114: PPUSH
27115: CALL_OW 331
// end ; end_of_file
27119: LD_VAR 0 4
27123: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27124: LD_INT 0
27126: PPUSH
// ar_miner := 81 ;
27127: LD_ADDR_EXP 100
27131: PUSH
27132: LD_INT 81
27134: ST_TO_ADDR
// ar_crane := 88 ;
27135: LD_ADDR_EXP 99
27139: PUSH
27140: LD_INT 88
27142: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27143: LD_ADDR_EXP 94
27147: PUSH
27148: LD_INT 89
27150: ST_TO_ADDR
// us_hack := 99 ;
27151: LD_ADDR_EXP 95
27155: PUSH
27156: LD_INT 99
27158: ST_TO_ADDR
// us_artillery := 97 ;
27159: LD_ADDR_EXP 96
27163: PUSH
27164: LD_INT 97
27166: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27167: LD_ADDR_EXP 97
27171: PUSH
27172: LD_INT 91
27174: ST_TO_ADDR
// ar_mortar := 92 ;
27175: LD_ADDR_EXP 98
27179: PUSH
27180: LD_INT 92
27182: ST_TO_ADDR
// ru_radar := 98 ;
27183: LD_ADDR_EXP 93
27187: PUSH
27188: LD_INT 98
27190: ST_TO_ADDR
// tech_Artillery := 80 ;
27191: LD_ADDR_EXP 101
27195: PUSH
27196: LD_INT 80
27198: ST_TO_ADDR
// tech_RadMat := 81 ;
27199: LD_ADDR_EXP 102
27203: PUSH
27204: LD_INT 81
27206: ST_TO_ADDR
// tech_BasicTools := 82 ;
27207: LD_ADDR_EXP 103
27211: PUSH
27212: LD_INT 82
27214: ST_TO_ADDR
// tech_Cargo := 83 ;
27215: LD_ADDR_EXP 104
27219: PUSH
27220: LD_INT 83
27222: ST_TO_ADDR
// tech_Track := 84 ;
27223: LD_ADDR_EXP 105
27227: PUSH
27228: LD_INT 84
27230: ST_TO_ADDR
// tech_Crane := 85 ;
27231: LD_ADDR_EXP 106
27235: PUSH
27236: LD_INT 85
27238: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27239: LD_ADDR_EXP 107
27243: PUSH
27244: LD_INT 86
27246: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27247: LD_ADDR_EXP 108
27251: PUSH
27252: LD_INT 87
27254: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27255: LD_ADDR_EXP 109
27259: PUSH
27260: LD_INT 88
27262: ST_TO_ADDR
// class_mastodont := 31 ;
27263: LD_ADDR_EXP 110
27267: PUSH
27268: LD_INT 31
27270: ST_TO_ADDR
// class_horse := 21 ;
27271: LD_ADDR_EXP 111
27275: PUSH
27276: LD_INT 21
27278: ST_TO_ADDR
// end ;
27279: LD_VAR 0 1
27283: RET
// every 1 do
27284: GO 27286
27286: DISABLE
// InitGlobalVariables ; end_of_file
27287: CALL 27124 0 0
27291: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27292: LD_INT 0
27294: PPUSH
27295: PPUSH
// if exist_mode then
27296: LD_VAR 0 2
27300: IFFALSE 27325
// unit := CreateCharacter ( prefix & ident ) else
27302: LD_ADDR_VAR 0 5
27306: PUSH
27307: LD_VAR 0 3
27311: PUSH
27312: LD_VAR 0 1
27316: STR
27317: PPUSH
27318: CALL_OW 34
27322: ST_TO_ADDR
27323: GO 27340
// unit := NewCharacter ( ident ) ;
27325: LD_ADDR_VAR 0 5
27329: PUSH
27330: LD_VAR 0 1
27334: PPUSH
27335: CALL_OW 25
27339: ST_TO_ADDR
// result := unit ;
27340: LD_ADDR_VAR 0 4
27344: PUSH
27345: LD_VAR 0 5
27349: ST_TO_ADDR
// end ;
27350: LD_VAR 0 4
27354: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27355: LD_INT 0
27357: PPUSH
27358: PPUSH
// if not side or not nation then
27359: LD_VAR 0 1
27363: NOT
27364: PUSH
27365: LD_VAR 0 2
27369: NOT
27370: OR
27371: IFFALSE 27375
// exit ;
27373: GO 28139
// case nation of nation_american :
27375: LD_VAR 0 2
27379: PUSH
27380: LD_INT 1
27382: DOUBLE
27383: EQUAL
27384: IFTRUE 27388
27386: GO 27602
27388: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27389: LD_ADDR_VAR 0 4
27393: PUSH
27394: LD_INT 35
27396: PUSH
27397: LD_INT 45
27399: PUSH
27400: LD_INT 46
27402: PUSH
27403: LD_INT 47
27405: PUSH
27406: LD_INT 82
27408: PUSH
27409: LD_INT 83
27411: PUSH
27412: LD_INT 84
27414: PUSH
27415: LD_INT 85
27417: PUSH
27418: LD_INT 86
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 6
27429: PUSH
27430: LD_INT 15
27432: PUSH
27433: LD_INT 16
27435: PUSH
27436: LD_INT 7
27438: PUSH
27439: LD_INT 12
27441: PUSH
27442: LD_INT 13
27444: PUSH
27445: LD_INT 10
27447: PUSH
27448: LD_INT 14
27450: PUSH
27451: LD_INT 20
27453: PUSH
27454: LD_INT 21
27456: PUSH
27457: LD_INT 22
27459: PUSH
27460: LD_INT 25
27462: PUSH
27463: LD_INT 32
27465: PUSH
27466: LD_INT 27
27468: PUSH
27469: LD_INT 36
27471: PUSH
27472: LD_INT 69
27474: PUSH
27475: LD_INT 39
27477: PUSH
27478: LD_INT 34
27480: PUSH
27481: LD_INT 40
27483: PUSH
27484: LD_INT 48
27486: PUSH
27487: LD_INT 49
27489: PUSH
27490: LD_INT 50
27492: PUSH
27493: LD_INT 51
27495: PUSH
27496: LD_INT 52
27498: PUSH
27499: LD_INT 53
27501: PUSH
27502: LD_INT 54
27504: PUSH
27505: LD_INT 55
27507: PUSH
27508: LD_INT 56
27510: PUSH
27511: LD_INT 57
27513: PUSH
27514: LD_INT 58
27516: PUSH
27517: LD_INT 59
27519: PUSH
27520: LD_INT 60
27522: PUSH
27523: LD_INT 61
27525: PUSH
27526: LD_INT 62
27528: PUSH
27529: LD_INT 80
27531: PUSH
27532: LD_INT 82
27534: PUSH
27535: LD_INT 83
27537: PUSH
27538: LD_INT 84
27540: PUSH
27541: LD_INT 85
27543: PUSH
27544: LD_INT 86
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
27600: GO 28063
27602: LD_INT 2
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27832
27610: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27611: LD_ADDR_VAR 0 4
27615: PUSH
27616: LD_INT 35
27618: PUSH
27619: LD_INT 45
27621: PUSH
27622: LD_INT 46
27624: PUSH
27625: LD_INT 47
27627: PUSH
27628: LD_INT 82
27630: PUSH
27631: LD_INT 83
27633: PUSH
27634: LD_INT 84
27636: PUSH
27637: LD_INT 85
27639: PUSH
27640: LD_INT 87
27642: PUSH
27643: LD_INT 70
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 11
27651: PUSH
27652: LD_INT 3
27654: PUSH
27655: LD_INT 4
27657: PUSH
27658: LD_INT 5
27660: PUSH
27661: LD_INT 6
27663: PUSH
27664: LD_INT 15
27666: PUSH
27667: LD_INT 18
27669: PUSH
27670: LD_INT 7
27672: PUSH
27673: LD_INT 17
27675: PUSH
27676: LD_INT 8
27678: PUSH
27679: LD_INT 20
27681: PUSH
27682: LD_INT 21
27684: PUSH
27685: LD_INT 22
27687: PUSH
27688: LD_INT 72
27690: PUSH
27691: LD_INT 26
27693: PUSH
27694: LD_INT 69
27696: PUSH
27697: LD_INT 39
27699: PUSH
27700: LD_INT 40
27702: PUSH
27703: LD_INT 41
27705: PUSH
27706: LD_INT 42
27708: PUSH
27709: LD_INT 43
27711: PUSH
27712: LD_INT 48
27714: PUSH
27715: LD_INT 49
27717: PUSH
27718: LD_INT 50
27720: PUSH
27721: LD_INT 51
27723: PUSH
27724: LD_INT 52
27726: PUSH
27727: LD_INT 53
27729: PUSH
27730: LD_INT 54
27732: PUSH
27733: LD_INT 55
27735: PUSH
27736: LD_INT 56
27738: PUSH
27739: LD_INT 60
27741: PUSH
27742: LD_INT 61
27744: PUSH
27745: LD_INT 62
27747: PUSH
27748: LD_INT 66
27750: PUSH
27751: LD_INT 67
27753: PUSH
27754: LD_INT 68
27756: PUSH
27757: LD_INT 81
27759: PUSH
27760: LD_INT 82
27762: PUSH
27763: LD_INT 83
27765: PUSH
27766: LD_INT 84
27768: PUSH
27769: LD_INT 85
27771: PUSH
27772: LD_INT 87
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: ST_TO_ADDR
27830: GO 28063
27832: LD_INT 3
27834: DOUBLE
27835: EQUAL
27836: IFTRUE 27840
27838: GO 28062
27840: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27841: LD_ADDR_VAR 0 4
27845: PUSH
27846: LD_INT 46
27848: PUSH
27849: LD_INT 47
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 82
27860: PUSH
27861: LD_INT 83
27863: PUSH
27864: LD_INT 84
27866: PUSH
27867: LD_INT 85
27869: PUSH
27870: LD_INT 86
27872: PUSH
27873: LD_INT 11
27875: PUSH
27876: LD_INT 9
27878: PUSH
27879: LD_INT 20
27881: PUSH
27882: LD_INT 19
27884: PUSH
27885: LD_INT 21
27887: PUSH
27888: LD_INT 24
27890: PUSH
27891: LD_INT 22
27893: PUSH
27894: LD_INT 25
27896: PUSH
27897: LD_INT 28
27899: PUSH
27900: LD_INT 29
27902: PUSH
27903: LD_INT 30
27905: PUSH
27906: LD_INT 31
27908: PUSH
27909: LD_INT 37
27911: PUSH
27912: LD_INT 38
27914: PUSH
27915: LD_INT 32
27917: PUSH
27918: LD_INT 27
27920: PUSH
27921: LD_INT 33
27923: PUSH
27924: LD_INT 69
27926: PUSH
27927: LD_INT 39
27929: PUSH
27930: LD_INT 34
27932: PUSH
27933: LD_INT 40
27935: PUSH
27936: LD_INT 71
27938: PUSH
27939: LD_INT 23
27941: PUSH
27942: LD_INT 44
27944: PUSH
27945: LD_INT 48
27947: PUSH
27948: LD_INT 49
27950: PUSH
27951: LD_INT 50
27953: PUSH
27954: LD_INT 51
27956: PUSH
27957: LD_INT 52
27959: PUSH
27960: LD_INT 53
27962: PUSH
27963: LD_INT 54
27965: PUSH
27966: LD_INT 55
27968: PUSH
27969: LD_INT 56
27971: PUSH
27972: LD_INT 57
27974: PUSH
27975: LD_INT 58
27977: PUSH
27978: LD_INT 59
27980: PUSH
27981: LD_INT 63
27983: PUSH
27984: LD_INT 64
27986: PUSH
27987: LD_INT 65
27989: PUSH
27990: LD_INT 82
27992: PUSH
27993: LD_INT 83
27995: PUSH
27996: LD_INT 84
27998: PUSH
27999: LD_INT 85
28001: PUSH
28002: LD_INT 86
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: ST_TO_ADDR
28060: GO 28063
28062: POP
// if state > - 1 and state < 3 then
28063: LD_VAR 0 3
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: GREATER
28072: PUSH
28073: LD_VAR 0 3
28077: PUSH
28078: LD_INT 3
28080: LESS
28081: AND
28082: IFFALSE 28139
// for i in result do
28084: LD_ADDR_VAR 0 5
28088: PUSH
28089: LD_VAR 0 4
28093: PUSH
28094: FOR_IN
28095: IFFALSE 28137
// if GetTech ( i , side ) <> state then
28097: LD_VAR 0 5
28101: PPUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: CALL_OW 321
28111: PUSH
28112: LD_VAR 0 3
28116: NONEQUAL
28117: IFFALSE 28135
// result := result diff i ;
28119: LD_ADDR_VAR 0 4
28123: PUSH
28124: LD_VAR 0 4
28128: PUSH
28129: LD_VAR 0 5
28133: DIFF
28134: ST_TO_ADDR
28135: GO 28094
28137: POP
28138: POP
// end ;
28139: LD_VAR 0 4
28143: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28144: LD_INT 0
28146: PPUSH
28147: PPUSH
28148: PPUSH
// result := true ;
28149: LD_ADDR_VAR 0 3
28153: PUSH
28154: LD_INT 1
28156: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28157: LD_ADDR_VAR 0 5
28161: PUSH
28162: LD_VAR 0 2
28166: PPUSH
28167: CALL_OW 480
28171: ST_TO_ADDR
// if not tmp then
28172: LD_VAR 0 5
28176: NOT
28177: IFFALSE 28181
// exit ;
28179: GO 28230
// for i in tmp do
28181: LD_ADDR_VAR 0 4
28185: PUSH
28186: LD_VAR 0 5
28190: PUSH
28191: FOR_IN
28192: IFFALSE 28228
// if GetTech ( i , side ) <> state_researched then
28194: LD_VAR 0 4
28198: PPUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: CALL_OW 321
28208: PUSH
28209: LD_INT 2
28211: NONEQUAL
28212: IFFALSE 28226
// begin result := false ;
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: LD_INT 0
28221: ST_TO_ADDR
// exit ;
28222: POP
28223: POP
28224: GO 28230
// end ;
28226: GO 28191
28228: POP
28229: POP
// end ;
28230: LD_VAR 0 3
28234: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28235: LD_INT 0
28237: PPUSH
28238: PPUSH
28239: PPUSH
28240: PPUSH
28241: PPUSH
28242: PPUSH
28243: PPUSH
28244: PPUSH
28245: PPUSH
28246: PPUSH
28247: PPUSH
28248: PPUSH
28249: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28250: LD_VAR 0 1
28254: NOT
28255: PUSH
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL_OW 257
28265: PUSH
28266: LD_INT 9
28268: NONEQUAL
28269: OR
28270: IFFALSE 28274
// exit ;
28272: GO 28847
// side := GetSide ( unit ) ;
28274: LD_ADDR_VAR 0 9
28278: PUSH
28279: LD_VAR 0 1
28283: PPUSH
28284: CALL_OW 255
28288: ST_TO_ADDR
// tech_space := tech_spacanom ;
28289: LD_ADDR_VAR 0 12
28293: PUSH
28294: LD_INT 29
28296: ST_TO_ADDR
// tech_time := tech_taurad ;
28297: LD_ADDR_VAR 0 13
28301: PUSH
28302: LD_INT 28
28304: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28305: LD_ADDR_VAR 0 11
28309: PUSH
28310: LD_VAR 0 1
28314: PPUSH
28315: CALL_OW 310
28319: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28320: LD_VAR 0 11
28324: PPUSH
28325: CALL_OW 247
28329: PUSH
28330: LD_INT 2
28332: EQUAL
28333: IFFALSE 28337
// exit ;
28335: GO 28847
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28337: LD_ADDR_VAR 0 8
28341: PUSH
28342: LD_INT 81
28344: PUSH
28345: LD_VAR 0 9
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: LD_INT 21
28359: PUSH
28360: LD_INT 3
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PPUSH
28375: CALL_OW 69
28379: ST_TO_ADDR
// if not tmp then
28380: LD_VAR 0 8
28384: NOT
28385: IFFALSE 28389
// exit ;
28387: GO 28847
// if in_unit then
28389: LD_VAR 0 11
28393: IFFALSE 28417
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28395: LD_ADDR_VAR 0 10
28399: PUSH
28400: LD_VAR 0 8
28404: PPUSH
28405: LD_VAR 0 11
28409: PPUSH
28410: CALL_OW 74
28414: ST_TO_ADDR
28415: GO 28437
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28417: LD_ADDR_VAR 0 10
28421: PUSH
28422: LD_VAR 0 8
28426: PPUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 74
28436: ST_TO_ADDR
// if not enemy then
28437: LD_VAR 0 10
28441: NOT
28442: IFFALSE 28446
// exit ;
28444: GO 28847
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28446: LD_VAR 0 11
28450: PUSH
28451: LD_VAR 0 11
28455: PPUSH
28456: LD_VAR 0 10
28460: PPUSH
28461: CALL_OW 296
28465: PUSH
28466: LD_INT 13
28468: GREATER
28469: AND
28470: PUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: LD_VAR 0 10
28480: PPUSH
28481: CALL_OW 296
28485: PUSH
28486: LD_INT 12
28488: GREATER
28489: OR
28490: IFFALSE 28494
// exit ;
28492: GO 28847
// missile := [ 1 ] ;
28494: LD_ADDR_VAR 0 14
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28505: LD_VAR 0 9
28509: PPUSH
28510: LD_VAR 0 12
28514: PPUSH
28515: CALL_OW 325
28519: IFFALSE 28548
// missile := Insert ( missile , missile + 1 , 2 ) ;
28521: LD_ADDR_VAR 0 14
28525: PUSH
28526: LD_VAR 0 14
28530: PPUSH
28531: LD_VAR 0 14
28535: PUSH
28536: LD_INT 1
28538: PLUS
28539: PPUSH
28540: LD_INT 2
28542: PPUSH
28543: CALL_OW 2
28547: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28548: LD_VAR 0 9
28552: PPUSH
28553: LD_VAR 0 13
28557: PPUSH
28558: CALL_OW 325
28562: PUSH
28563: LD_VAR 0 10
28567: PPUSH
28568: CALL_OW 255
28572: PPUSH
28573: LD_VAR 0 13
28577: PPUSH
28578: CALL_OW 325
28582: NOT
28583: AND
28584: IFFALSE 28613
// missile := Insert ( missile , missile + 1 , 3 ) ;
28586: LD_ADDR_VAR 0 14
28590: PUSH
28591: LD_VAR 0 14
28595: PPUSH
28596: LD_VAR 0 14
28600: PUSH
28601: LD_INT 1
28603: PLUS
28604: PPUSH
28605: LD_INT 3
28607: PPUSH
28608: CALL_OW 2
28612: ST_TO_ADDR
// if missile < 2 then
28613: LD_VAR 0 14
28617: PUSH
28618: LD_INT 2
28620: LESS
28621: IFFALSE 28625
// exit ;
28623: GO 28847
// x := GetX ( enemy ) ;
28625: LD_ADDR_VAR 0 4
28629: PUSH
28630: LD_VAR 0 10
28634: PPUSH
28635: CALL_OW 250
28639: ST_TO_ADDR
// y := GetY ( enemy ) ;
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_VAR 0 10
28649: PPUSH
28650: CALL_OW 251
28654: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28655: LD_ADDR_VAR 0 6
28659: PUSH
28660: LD_VAR 0 4
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PPUSH
28669: LD_INT 1
28671: PPUSH
28672: CALL_OW 12
28676: PLUS
28677: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28678: LD_ADDR_VAR 0 7
28682: PUSH
28683: LD_VAR 0 5
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PPUSH
28692: LD_INT 1
28694: PPUSH
28695: CALL_OW 12
28699: PLUS
28700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28701: LD_VAR 0 6
28705: PPUSH
28706: LD_VAR 0 7
28710: PPUSH
28711: CALL_OW 488
28715: NOT
28716: IFFALSE 28738
// begin _x := x ;
28718: LD_ADDR_VAR 0 6
28722: PUSH
28723: LD_VAR 0 4
28727: ST_TO_ADDR
// _y := y ;
28728: LD_ADDR_VAR 0 7
28732: PUSH
28733: LD_VAR 0 5
28737: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28738: LD_ADDR_VAR 0 3
28742: PUSH
28743: LD_INT 1
28745: PPUSH
28746: LD_VAR 0 14
28750: PPUSH
28751: CALL_OW 12
28755: ST_TO_ADDR
// case i of 1 :
28756: LD_VAR 0 3
28760: PUSH
28761: LD_INT 1
28763: DOUBLE
28764: EQUAL
28765: IFTRUE 28769
28767: GO 28786
28769: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28770: LD_VAR 0 1
28774: PPUSH
28775: LD_VAR 0 10
28779: PPUSH
28780: CALL_OW 115
28784: GO 28847
28786: LD_INT 2
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 28816
28794: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_VAR 0 6
28804: PPUSH
28805: LD_VAR 0 7
28809: PPUSH
28810: CALL_OW 153
28814: GO 28847
28816: LD_INT 3
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28824
28822: GO 28846
28824: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28825: LD_VAR 0 1
28829: PPUSH
28830: LD_VAR 0 6
28834: PPUSH
28835: LD_VAR 0 7
28839: PPUSH
28840: CALL_OW 154
28844: GO 28847
28846: POP
// end ;
28847: LD_VAR 0 2
28851: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28852: LD_INT 0
28854: PPUSH
28855: PPUSH
28856: PPUSH
28857: PPUSH
28858: PPUSH
28859: PPUSH
// if not unit or not building then
28860: LD_VAR 0 1
28864: NOT
28865: PUSH
28866: LD_VAR 0 2
28870: NOT
28871: OR
28872: IFFALSE 28876
// exit ;
28874: GO 29034
// x := GetX ( building ) ;
28876: LD_ADDR_VAR 0 5
28880: PUSH
28881: LD_VAR 0 2
28885: PPUSH
28886: CALL_OW 250
28890: ST_TO_ADDR
// y := GetY ( building ) ;
28891: LD_ADDR_VAR 0 6
28895: PUSH
28896: LD_VAR 0 2
28900: PPUSH
28901: CALL_OW 251
28905: ST_TO_ADDR
// for i = 0 to 5 do
28906: LD_ADDR_VAR 0 4
28910: PUSH
28911: DOUBLE
28912: LD_INT 0
28914: DEC
28915: ST_TO_ADDR
28916: LD_INT 5
28918: PUSH
28919: FOR_TO
28920: IFFALSE 29032
// begin _x := ShiftX ( x , i , 3 ) ;
28922: LD_ADDR_VAR 0 7
28926: PUSH
28927: LD_VAR 0 5
28931: PPUSH
28932: LD_VAR 0 4
28936: PPUSH
28937: LD_INT 3
28939: PPUSH
28940: CALL_OW 272
28944: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28945: LD_ADDR_VAR 0 8
28949: PUSH
28950: LD_VAR 0 6
28954: PPUSH
28955: LD_VAR 0 4
28959: PPUSH
28960: LD_INT 3
28962: PPUSH
28963: CALL_OW 273
28967: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28968: LD_VAR 0 7
28972: PPUSH
28973: LD_VAR 0 8
28977: PPUSH
28978: CALL_OW 488
28982: NOT
28983: IFFALSE 28987
// continue ;
28985: GO 28919
// if HexInfo ( _x , _y ) = 0 then
28987: LD_VAR 0 7
28991: PPUSH
28992: LD_VAR 0 8
28996: PPUSH
28997: CALL_OW 428
29001: PUSH
29002: LD_INT 0
29004: EQUAL
29005: IFFALSE 29030
// begin ComMoveXY ( unit , _x , _y ) ;
29007: LD_VAR 0 1
29011: PPUSH
29012: LD_VAR 0 7
29016: PPUSH
29017: LD_VAR 0 8
29021: PPUSH
29022: CALL_OW 111
// exit ;
29026: POP
29027: POP
29028: GO 29034
// end ; end ;
29030: GO 28919
29032: POP
29033: POP
// end ;
29034: LD_VAR 0 3
29038: RET
// export function ScanBase ( side , base_area ) ; begin
29039: LD_INT 0
29041: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29042: LD_ADDR_VAR 0 3
29046: PUSH
29047: LD_VAR 0 2
29051: PPUSH
29052: LD_INT 81
29054: PUSH
29055: LD_VAR 0 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PPUSH
29064: CALL_OW 70
29068: ST_TO_ADDR
// end ;
29069: LD_VAR 0 3
29073: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29074: LD_INT 0
29076: PPUSH
29077: PPUSH
29078: PPUSH
29079: PPUSH
// result := false ;
29080: LD_ADDR_VAR 0 2
29084: PUSH
29085: LD_INT 0
29087: ST_TO_ADDR
// side := GetSide ( unit ) ;
29088: LD_ADDR_VAR 0 3
29092: PUSH
29093: LD_VAR 0 1
29097: PPUSH
29098: CALL_OW 255
29102: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29103: LD_ADDR_VAR 0 4
29107: PUSH
29108: LD_VAR 0 1
29112: PPUSH
29113: CALL_OW 248
29117: ST_TO_ADDR
// case nat of 1 :
29118: LD_VAR 0 4
29122: PUSH
29123: LD_INT 1
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29142
29131: POP
// tech := tech_lassight ; 2 :
29132: LD_ADDR_VAR 0 5
29136: PUSH
29137: LD_INT 12
29139: ST_TO_ADDR
29140: GO 29181
29142: LD_INT 2
29144: DOUBLE
29145: EQUAL
29146: IFTRUE 29150
29148: GO 29161
29150: POP
// tech := tech_mortar ; 3 :
29151: LD_ADDR_VAR 0 5
29155: PUSH
29156: LD_INT 41
29158: ST_TO_ADDR
29159: GO 29181
29161: LD_INT 3
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29169
29167: GO 29180
29169: POP
// tech := tech_bazooka ; end ;
29170: LD_ADDR_VAR 0 5
29174: PUSH
29175: LD_INT 44
29177: ST_TO_ADDR
29178: GO 29181
29180: POP
// if Researched ( side , tech ) then
29181: LD_VAR 0 3
29185: PPUSH
29186: LD_VAR 0 5
29190: PPUSH
29191: CALL_OW 325
29195: IFFALSE 29222
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_INT 5
29204: PUSH
29205: LD_INT 8
29207: PUSH
29208: LD_INT 9
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: LIST
29215: PUSH
29216: LD_VAR 0 4
29220: ARRAY
29221: ST_TO_ADDR
// end ;
29222: LD_VAR 0 2
29226: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29227: LD_INT 0
29229: PPUSH
29230: PPUSH
29231: PPUSH
// if not mines then
29232: LD_VAR 0 2
29236: NOT
29237: IFFALSE 29241
// exit ;
29239: GO 29385
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29241: LD_ADDR_VAR 0 5
29245: PUSH
29246: LD_INT 81
29248: PUSH
29249: LD_VAR 0 1
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: LD_INT 21
29263: PUSH
29264: LD_INT 3
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PPUSH
29279: CALL_OW 69
29283: ST_TO_ADDR
// for i in mines do
29284: LD_ADDR_VAR 0 4
29288: PUSH
29289: LD_VAR 0 2
29293: PUSH
29294: FOR_IN
29295: IFFALSE 29383
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29297: LD_VAR 0 4
29301: PUSH
29302: LD_INT 1
29304: ARRAY
29305: PPUSH
29306: LD_VAR 0 4
29310: PUSH
29311: LD_INT 2
29313: ARRAY
29314: PPUSH
29315: CALL_OW 458
29319: NOT
29320: IFFALSE 29324
// continue ;
29322: GO 29294
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29324: LD_VAR 0 4
29328: PUSH
29329: LD_INT 1
29331: ARRAY
29332: PPUSH
29333: LD_VAR 0 4
29337: PUSH
29338: LD_INT 2
29340: ARRAY
29341: PPUSH
29342: CALL_OW 428
29346: PUSH
29347: LD_VAR 0 5
29351: IN
29352: IFFALSE 29381
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29354: LD_VAR 0 4
29358: PUSH
29359: LD_INT 1
29361: ARRAY
29362: PPUSH
29363: LD_VAR 0 4
29367: PUSH
29368: LD_INT 2
29370: ARRAY
29371: PPUSH
29372: LD_VAR 0 1
29376: PPUSH
29377: CALL_OW 456
// end ;
29381: GO 29294
29383: POP
29384: POP
// end ;
29385: LD_VAR 0 3
29389: RET
// export function Count ( array ) ; var i ; begin
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
// result := 0 ;
29394: LD_ADDR_VAR 0 2
29398: PUSH
29399: LD_INT 0
29401: ST_TO_ADDR
// for i in array do
29402: LD_ADDR_VAR 0 3
29406: PUSH
29407: LD_VAR 0 1
29411: PUSH
29412: FOR_IN
29413: IFFALSE 29437
// if i then
29415: LD_VAR 0 3
29419: IFFALSE 29435
// result := result + 1 ;
29421: LD_ADDR_VAR 0 2
29425: PUSH
29426: LD_VAR 0 2
29430: PUSH
29431: LD_INT 1
29433: PLUS
29434: ST_TO_ADDR
29435: GO 29412
29437: POP
29438: POP
// end ;
29439: LD_VAR 0 2
29443: RET
// export function IsEmpty ( building ) ; begin
29444: LD_INT 0
29446: PPUSH
// if not building then
29447: LD_VAR 0 1
29451: NOT
29452: IFFALSE 29456
// exit ;
29454: GO 29499
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29456: LD_ADDR_VAR 0 2
29460: PUSH
29461: LD_VAR 0 1
29465: PUSH
29466: LD_INT 22
29468: PUSH
29469: LD_VAR 0 1
29473: PPUSH
29474: CALL_OW 255
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 58
29485: PUSH
29486: EMPTY
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PPUSH
29493: CALL_OW 69
29497: IN
29498: ST_TO_ADDR
// end ;
29499: LD_VAR 0 2
29503: RET
// export function IsNotFull ( building ) ; begin
29504: LD_INT 0
29506: PPUSH
// if not building then
29507: LD_VAR 0 1
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29535
// result := UnitsInside ( building ) < 6 ;
29516: LD_ADDR_VAR 0 2
29520: PUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 313
29530: PUSH
29531: LD_INT 6
29533: LESS
29534: ST_TO_ADDR
// end ;
29535: LD_VAR 0 2
29539: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29540: LD_INT 0
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
// tmp := [ ] ;
29546: LD_ADDR_VAR 0 3
29550: PUSH
29551: EMPTY
29552: ST_TO_ADDR
// list := [ ] ;
29553: LD_ADDR_VAR 0 5
29557: PUSH
29558: EMPTY
29559: ST_TO_ADDR
// for i = 16 to 25 do
29560: LD_ADDR_VAR 0 4
29564: PUSH
29565: DOUBLE
29566: LD_INT 16
29568: DEC
29569: ST_TO_ADDR
29570: LD_INT 25
29572: PUSH
29573: FOR_TO
29574: IFFALSE 29647
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_VAR 0 3
29585: PUSH
29586: LD_INT 22
29588: PUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 255
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 91
29605: PUSH
29606: LD_VAR 0 1
29610: PUSH
29611: LD_INT 6
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 30
29621: PUSH
29622: LD_VAR 0 4
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: PPUSH
29639: CALL_OW 69
29643: ADD
29644: ST_TO_ADDR
29645: GO 29573
29647: POP
29648: POP
// for i = 1 to tmp do
29649: LD_ADDR_VAR 0 4
29653: PUSH
29654: DOUBLE
29655: LD_INT 1
29657: DEC
29658: ST_TO_ADDR
29659: LD_VAR 0 3
29663: PUSH
29664: FOR_TO
29665: IFFALSE 29753
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29667: LD_ADDR_VAR 0 5
29671: PUSH
29672: LD_VAR 0 5
29676: PUSH
29677: LD_VAR 0 3
29681: PUSH
29682: LD_VAR 0 4
29686: ARRAY
29687: PPUSH
29688: CALL_OW 266
29692: PUSH
29693: LD_VAR 0 3
29697: PUSH
29698: LD_VAR 0 4
29702: ARRAY
29703: PPUSH
29704: CALL_OW 250
29708: PUSH
29709: LD_VAR 0 3
29713: PUSH
29714: LD_VAR 0 4
29718: ARRAY
29719: PPUSH
29720: CALL_OW 251
29724: PUSH
29725: LD_VAR 0 3
29729: PUSH
29730: LD_VAR 0 4
29734: ARRAY
29735: PPUSH
29736: CALL_OW 254
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: ADD
29750: ST_TO_ADDR
29751: GO 29664
29753: POP
29754: POP
// result := list ;
29755: LD_ADDR_VAR 0 2
29759: PUSH
29760: LD_VAR 0 5
29764: ST_TO_ADDR
// end ;
29765: LD_VAR 0 2
29769: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29770: LD_INT 0
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
// if not factory then
29779: LD_VAR 0 1
29783: NOT
29784: IFFALSE 29788
// exit ;
29786: GO 30381
// if control = control_apeman then
29788: LD_VAR 0 4
29792: PUSH
29793: LD_INT 5
29795: EQUAL
29796: IFFALSE 29905
// begin tmp := UnitsInside ( factory ) ;
29798: LD_ADDR_VAR 0 8
29802: PUSH
29803: LD_VAR 0 1
29807: PPUSH
29808: CALL_OW 313
29812: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29813: LD_VAR 0 8
29817: PPUSH
29818: LD_INT 25
29820: PUSH
29821: LD_INT 12
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PPUSH
29828: CALL_OW 72
29832: NOT
29833: IFFALSE 29843
// control := control_manual ;
29835: LD_ADDR_VAR 0 4
29839: PUSH
29840: LD_INT 1
29842: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29843: LD_ADDR_VAR 0 8
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL 29540 0 1
29857: ST_TO_ADDR
// if tmp then
29858: LD_VAR 0 8
29862: IFFALSE 29905
// begin for i in tmp do
29864: LD_ADDR_VAR 0 7
29868: PUSH
29869: LD_VAR 0 8
29873: PUSH
29874: FOR_IN
29875: IFFALSE 29903
// if i [ 1 ] = b_ext_radio then
29877: LD_VAR 0 7
29881: PUSH
29882: LD_INT 1
29884: ARRAY
29885: PUSH
29886: LD_INT 22
29888: EQUAL
29889: IFFALSE 29901
// begin control := control_remote ;
29891: LD_ADDR_VAR 0 4
29895: PUSH
29896: LD_INT 2
29898: ST_TO_ADDR
// break ;
29899: GO 29903
// end ;
29901: GO 29874
29903: POP
29904: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29905: LD_VAR 0 1
29909: PPUSH
29910: LD_VAR 0 2
29914: PPUSH
29915: LD_VAR 0 3
29919: PPUSH
29920: LD_VAR 0 4
29924: PPUSH
29925: LD_VAR 0 5
29929: PPUSH
29930: CALL_OW 448
29934: IFFALSE 29969
// begin result := [ chassis , engine , control , weapon ] ;
29936: LD_ADDR_VAR 0 6
29940: PUSH
29941: LD_VAR 0 2
29945: PUSH
29946: LD_VAR 0 3
29950: PUSH
29951: LD_VAR 0 4
29955: PUSH
29956: LD_VAR 0 5
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
// exit ;
29967: GO 30381
// end ; _chassis := AvailableChassisList ( factory ) ;
29969: LD_ADDR_VAR 0 9
29973: PUSH
29974: LD_VAR 0 1
29978: PPUSH
29979: CALL_OW 475
29983: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29984: LD_ADDR_VAR 0 11
29988: PUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 476
29998: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29999: LD_ADDR_VAR 0 12
30003: PUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 477
30013: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30014: LD_ADDR_VAR 0 10
30018: PUSH
30019: LD_VAR 0 1
30023: PPUSH
30024: CALL_OW 478
30028: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30029: LD_VAR 0 9
30033: NOT
30034: PUSH
30035: LD_VAR 0 11
30039: NOT
30040: OR
30041: PUSH
30042: LD_VAR 0 12
30046: NOT
30047: OR
30048: PUSH
30049: LD_VAR 0 10
30053: NOT
30054: OR
30055: IFFALSE 30090
// begin result := [ chassis , engine , control , weapon ] ;
30057: LD_ADDR_VAR 0 6
30061: PUSH
30062: LD_VAR 0 2
30066: PUSH
30067: LD_VAR 0 3
30071: PUSH
30072: LD_VAR 0 4
30076: PUSH
30077: LD_VAR 0 5
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// exit ;
30088: GO 30381
// end ; if not chassis in _chassis then
30090: LD_VAR 0 2
30094: PUSH
30095: LD_VAR 0 9
30099: IN
30100: NOT
30101: IFFALSE 30127
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30103: LD_ADDR_VAR 0 2
30107: PUSH
30108: LD_VAR 0 9
30112: PUSH
30113: LD_INT 1
30115: PPUSH
30116: LD_VAR 0 9
30120: PPUSH
30121: CALL_OW 12
30125: ARRAY
30126: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30127: LD_VAR 0 2
30131: PPUSH
30132: LD_VAR 0 3
30136: PPUSH
30137: CALL 30386 0 2
30141: NOT
30142: IFFALSE 30201
// repeat engine := _engine [ 1 ] ;
30144: LD_ADDR_VAR 0 3
30148: PUSH
30149: LD_VAR 0 11
30153: PUSH
30154: LD_INT 1
30156: ARRAY
30157: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30158: LD_ADDR_VAR 0 11
30162: PUSH
30163: LD_VAR 0 11
30167: PPUSH
30168: LD_INT 1
30170: PPUSH
30171: CALL_OW 3
30175: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30176: LD_VAR 0 2
30180: PPUSH
30181: LD_VAR 0 3
30185: PPUSH
30186: CALL 30386 0 2
30190: PUSH
30191: LD_VAR 0 11
30195: PUSH
30196: EMPTY
30197: EQUAL
30198: OR
30199: IFFALSE 30144
// if not control in _control then
30201: LD_VAR 0 4
30205: PUSH
30206: LD_VAR 0 12
30210: IN
30211: NOT
30212: IFFALSE 30238
// control := _control [ rand ( 1 , _control ) ] ;
30214: LD_ADDR_VAR 0 4
30218: PUSH
30219: LD_VAR 0 12
30223: PUSH
30224: LD_INT 1
30226: PPUSH
30227: LD_VAR 0 12
30231: PPUSH
30232: CALL_OW 12
30236: ARRAY
30237: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_VAR 0 5
30247: PPUSH
30248: CALL 30606 0 2
30252: NOT
30253: IFFALSE 30312
// repeat weapon := _weapon [ 1 ] ;
30255: LD_ADDR_VAR 0 5
30259: PUSH
30260: LD_VAR 0 10
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30269: LD_ADDR_VAR 0 10
30273: PUSH
30274: LD_VAR 0 10
30278: PPUSH
30279: LD_INT 1
30281: PPUSH
30282: CALL_OW 3
30286: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30287: LD_VAR 0 2
30291: PPUSH
30292: LD_VAR 0 5
30296: PPUSH
30297: CALL 30606 0 2
30301: PUSH
30302: LD_VAR 0 10
30306: PUSH
30307: EMPTY
30308: EQUAL
30309: OR
30310: IFFALSE 30255
// result := [ ] ;
30312: LD_ADDR_VAR 0 6
30316: PUSH
30317: EMPTY
30318: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30319: LD_VAR 0 1
30323: PPUSH
30324: LD_VAR 0 2
30328: PPUSH
30329: LD_VAR 0 3
30333: PPUSH
30334: LD_VAR 0 4
30338: PPUSH
30339: LD_VAR 0 5
30343: PPUSH
30344: CALL_OW 448
30348: IFFALSE 30381
// result := [ chassis , engine , control , weapon ] ;
30350: LD_ADDR_VAR 0 6
30354: PUSH
30355: LD_VAR 0 2
30359: PUSH
30360: LD_VAR 0 3
30364: PUSH
30365: LD_VAR 0 4
30369: PUSH
30370: LD_VAR 0 5
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// end ;
30381: LD_VAR 0 6
30385: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30386: LD_INT 0
30388: PPUSH
// if not chassis or not engine then
30389: LD_VAR 0 1
30393: NOT
30394: PUSH
30395: LD_VAR 0 2
30399: NOT
30400: OR
30401: IFFALSE 30405
// exit ;
30403: GO 30601
// case engine of engine_solar :
30405: LD_VAR 0 2
30409: PUSH
30410: LD_INT 2
30412: DOUBLE
30413: EQUAL
30414: IFTRUE 30418
30416: GO 30456
30418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30419: LD_ADDR_VAR 0 3
30423: PUSH
30424: LD_INT 11
30426: PUSH
30427: LD_INT 12
30429: PUSH
30430: LD_INT 13
30432: PUSH
30433: LD_INT 14
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: ST_TO_ADDR
30454: GO 30585
30456: LD_INT 1
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30526
30464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: LD_INT 11
30472: PUSH
30473: LD_INT 12
30475: PUSH
30476: LD_INT 13
30478: PUSH
30479: LD_INT 14
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 4
30493: PUSH
30494: LD_INT 5
30496: PUSH
30497: LD_INT 21
30499: PUSH
30500: LD_INT 23
30502: PUSH
30503: LD_INT 22
30505: PUSH
30506: LD_INT 24
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
30524: GO 30585
30526: LD_INT 3
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30584
30534: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30535: LD_ADDR_VAR 0 3
30539: PUSH
30540: LD_INT 13
30542: PUSH
30543: LD_INT 14
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: LD_INT 3
30551: PUSH
30552: LD_INT 4
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: LD_INT 21
30560: PUSH
30561: LD_INT 22
30563: PUSH
30564: LD_INT 23
30566: PUSH
30567: LD_INT 24
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: ST_TO_ADDR
30582: GO 30585
30584: POP
// result := ( chassis in result ) ;
30585: LD_ADDR_VAR 0 3
30589: PUSH
30590: LD_VAR 0 1
30594: PUSH
30595: LD_VAR 0 3
30599: IN
30600: ST_TO_ADDR
// end ;
30601: LD_VAR 0 3
30605: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30606: LD_INT 0
30608: PPUSH
// if not chassis or not weapon then
30609: LD_VAR 0 1
30613: NOT
30614: PUSH
30615: LD_VAR 0 2
30619: NOT
30620: OR
30621: IFFALSE 30625
// exit ;
30623: GO 31651
// case weapon of us_machine_gun :
30625: LD_VAR 0 2
30629: PUSH
30630: LD_INT 2
30632: DOUBLE
30633: EQUAL
30634: IFTRUE 30638
30636: GO 30668
30638: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30639: LD_ADDR_VAR 0 3
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: LD_INT 3
30652: PUSH
30653: LD_INT 4
30655: PUSH
30656: LD_INT 5
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
30666: GO 31635
30668: LD_INT 3
30670: DOUBLE
30671: EQUAL
30672: IFTRUE 30676
30674: GO 30706
30676: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30677: LD_ADDR_VAR 0 3
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: LD_INT 4
30693: PUSH
30694: LD_INT 5
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: ST_TO_ADDR
30704: GO 31635
30706: LD_INT 11
30708: DOUBLE
30709: EQUAL
30710: IFTRUE 30714
30712: GO 30744
30714: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30715: LD_ADDR_VAR 0 3
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 5
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
30742: GO 31635
30744: LD_INT 4
30746: DOUBLE
30747: EQUAL
30748: IFTRUE 30752
30750: GO 30778
30752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 3
30763: PUSH
30764: LD_INT 4
30766: PUSH
30767: LD_INT 5
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: ST_TO_ADDR
30776: GO 31635
30778: LD_INT 5
30780: DOUBLE
30781: EQUAL
30782: IFTRUE 30786
30784: GO 30812
30786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30787: LD_ADDR_VAR 0 3
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: LD_INT 3
30797: PUSH
30798: LD_INT 4
30800: PUSH
30801: LD_INT 5
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: ST_TO_ADDR
30810: GO 31635
30812: LD_INT 9
30814: DOUBLE
30815: EQUAL
30816: IFTRUE 30820
30818: GO 30846
30820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30821: LD_ADDR_VAR 0 3
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: LD_INT 4
30834: PUSH
30835: LD_INT 5
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
30844: GO 31635
30846: LD_INT 7
30848: DOUBLE
30849: EQUAL
30850: IFTRUE 30854
30852: GO 30880
30854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30855: LD_ADDR_VAR 0 3
30859: PUSH
30860: LD_INT 2
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: LD_INT 4
30868: PUSH
30869: LD_INT 5
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: ST_TO_ADDR
30878: GO 31635
30880: LD_INT 12
30882: DOUBLE
30883: EQUAL
30884: IFTRUE 30888
30886: GO 30914
30888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30889: LD_ADDR_VAR 0 3
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: LD_INT 3
30899: PUSH
30900: LD_INT 4
30902: PUSH
30903: LD_INT 5
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: ST_TO_ADDR
30912: GO 31635
30914: LD_INT 13
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30948
30922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30923: LD_ADDR_VAR 0 3
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: LD_INT 4
30936: PUSH
30937: LD_INT 5
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
30946: GO 31635
30948: LD_INT 14
30950: DOUBLE
30951: EQUAL
30952: IFTRUE 30956
30954: GO 30974
30956: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30957: LD_ADDR_VAR 0 3
30961: PUSH
30962: LD_INT 4
30964: PUSH
30965: LD_INT 5
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: ST_TO_ADDR
30972: GO 31635
30974: LD_INT 6
30976: DOUBLE
30977: EQUAL
30978: IFTRUE 30982
30980: GO 31000
30982: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30983: LD_ADDR_VAR 0 3
30987: PUSH
30988: LD_INT 4
30990: PUSH
30991: LD_INT 5
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: ST_TO_ADDR
30998: GO 31635
31000: LD_INT 10
31002: DOUBLE
31003: EQUAL
31004: IFTRUE 31008
31006: GO 31026
31008: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31009: LD_ADDR_VAR 0 3
31013: PUSH
31014: LD_INT 4
31016: PUSH
31017: LD_INT 5
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: ST_TO_ADDR
31024: GO 31635
31026: LD_INT 22
31028: DOUBLE
31029: EQUAL
31030: IFTRUE 31034
31032: GO 31060
31034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31035: LD_ADDR_VAR 0 3
31039: PUSH
31040: LD_INT 11
31042: PUSH
31043: LD_INT 12
31045: PUSH
31046: LD_INT 13
31048: PUSH
31049: LD_INT 14
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
31058: GO 31635
31060: LD_INT 23
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31094
31068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: LD_INT 11
31076: PUSH
31077: LD_INT 12
31079: PUSH
31080: LD_INT 13
31082: PUSH
31083: LD_INT 14
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
31092: GO 31635
31094: LD_INT 24
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31102
31100: GO 31128
31102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31103: LD_ADDR_VAR 0 3
31107: PUSH
31108: LD_INT 11
31110: PUSH
31111: LD_INT 12
31113: PUSH
31114: LD_INT 13
31116: PUSH
31117: LD_INT 14
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: ST_TO_ADDR
31126: GO 31635
31128: LD_INT 30
31130: DOUBLE
31131: EQUAL
31132: IFTRUE 31136
31134: GO 31162
31136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31137: LD_ADDR_VAR 0 3
31141: PUSH
31142: LD_INT 11
31144: PUSH
31145: LD_INT 12
31147: PUSH
31148: LD_INT 13
31150: PUSH
31151: LD_INT 14
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: ST_TO_ADDR
31160: GO 31635
31162: LD_INT 25
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31188
31170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31171: LD_ADDR_VAR 0 3
31175: PUSH
31176: LD_INT 13
31178: PUSH
31179: LD_INT 14
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: ST_TO_ADDR
31186: GO 31635
31188: LD_INT 27
31190: DOUBLE
31191: EQUAL
31192: IFTRUE 31196
31194: GO 31214
31196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31197: LD_ADDR_VAR 0 3
31201: PUSH
31202: LD_INT 13
31204: PUSH
31205: LD_INT 14
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: ST_TO_ADDR
31212: GO 31635
31214: LD_INT 28
31216: DOUBLE
31217: EQUAL
31218: IFTRUE 31222
31220: GO 31240
31222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31223: LD_ADDR_VAR 0 3
31227: PUSH
31228: LD_INT 13
31230: PUSH
31231: LD_INT 14
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: ST_TO_ADDR
31238: GO 31635
31240: LD_INT 29
31242: DOUBLE
31243: EQUAL
31244: IFTRUE 31248
31246: GO 31266
31248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31249: LD_ADDR_VAR 0 3
31253: PUSH
31254: LD_INT 13
31256: PUSH
31257: LD_INT 14
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: ST_TO_ADDR
31264: GO 31635
31266: LD_INT 31
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31274
31272: GO 31292
31274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31275: LD_ADDR_VAR 0 3
31279: PUSH
31280: LD_INT 13
31282: PUSH
31283: LD_INT 14
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: ST_TO_ADDR
31290: GO 31635
31292: LD_INT 26
31294: DOUBLE
31295: EQUAL
31296: IFTRUE 31300
31298: GO 31318
31300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31301: LD_ADDR_VAR 0 3
31305: PUSH
31306: LD_INT 13
31308: PUSH
31309: LD_INT 14
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: ST_TO_ADDR
31316: GO 31635
31318: LD_INT 42
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31352
31326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31327: LD_ADDR_VAR 0 3
31331: PUSH
31332: LD_INT 21
31334: PUSH
31335: LD_INT 22
31337: PUSH
31338: LD_INT 23
31340: PUSH
31341: LD_INT 24
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: ST_TO_ADDR
31350: GO 31635
31352: LD_INT 43
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31386
31360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31361: LD_ADDR_VAR 0 3
31365: PUSH
31366: LD_INT 21
31368: PUSH
31369: LD_INT 22
31371: PUSH
31372: LD_INT 23
31374: PUSH
31375: LD_INT 24
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: ST_TO_ADDR
31384: GO 31635
31386: LD_INT 44
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31420
31394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31395: LD_ADDR_VAR 0 3
31399: PUSH
31400: LD_INT 21
31402: PUSH
31403: LD_INT 22
31405: PUSH
31406: LD_INT 23
31408: PUSH
31409: LD_INT 24
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
31418: GO 31635
31420: LD_INT 45
31422: DOUBLE
31423: EQUAL
31424: IFTRUE 31428
31426: GO 31454
31428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31429: LD_ADDR_VAR 0 3
31433: PUSH
31434: LD_INT 21
31436: PUSH
31437: LD_INT 22
31439: PUSH
31440: LD_INT 23
31442: PUSH
31443: LD_INT 24
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
31452: GO 31635
31454: LD_INT 49
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31462
31460: GO 31488
31462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31463: LD_ADDR_VAR 0 3
31467: PUSH
31468: LD_INT 21
31470: PUSH
31471: LD_INT 22
31473: PUSH
31474: LD_INT 23
31476: PUSH
31477: LD_INT 24
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
31486: GO 31635
31488: LD_INT 51
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31522
31496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31497: LD_ADDR_VAR 0 3
31501: PUSH
31502: LD_INT 21
31504: PUSH
31505: LD_INT 22
31507: PUSH
31508: LD_INT 23
31510: PUSH
31511: LD_INT 24
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
31520: GO 31635
31522: LD_INT 52
31524: DOUBLE
31525: EQUAL
31526: IFTRUE 31530
31528: GO 31556
31530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31531: LD_ADDR_VAR 0 3
31535: PUSH
31536: LD_INT 21
31538: PUSH
31539: LD_INT 22
31541: PUSH
31542: LD_INT 23
31544: PUSH
31545: LD_INT 24
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: ST_TO_ADDR
31554: GO 31635
31556: LD_INT 53
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31582
31564: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31565: LD_ADDR_VAR 0 3
31569: PUSH
31570: LD_INT 23
31572: PUSH
31573: LD_INT 24
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: ST_TO_ADDR
31580: GO 31635
31582: LD_INT 46
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 31608
31590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: LD_INT 23
31598: PUSH
31599: LD_INT 24
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: ST_TO_ADDR
31606: GO 31635
31608: LD_INT 47
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31634
31616: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31617: LD_ADDR_VAR 0 3
31621: PUSH
31622: LD_INT 23
31624: PUSH
31625: LD_INT 24
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: ST_TO_ADDR
31632: GO 31635
31634: POP
// result := ( chassis in result ) ;
31635: LD_ADDR_VAR 0 3
31639: PUSH
31640: LD_VAR 0 1
31644: PUSH
31645: LD_VAR 0 3
31649: IN
31650: ST_TO_ADDR
// end ;
31651: LD_VAR 0 3
31655: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
// result := array ;
31665: LD_ADDR_VAR 0 5
31669: PUSH
31670: LD_VAR 0 1
31674: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31675: LD_VAR 0 1
31679: NOT
31680: PUSH
31681: LD_VAR 0 2
31685: NOT
31686: OR
31687: PUSH
31688: LD_VAR 0 3
31692: NOT
31693: OR
31694: PUSH
31695: LD_VAR 0 2
31699: PUSH
31700: LD_VAR 0 1
31704: GREATER
31705: OR
31706: PUSH
31707: LD_VAR 0 3
31711: PUSH
31712: LD_VAR 0 1
31716: GREATER
31717: OR
31718: IFFALSE 31722
// exit ;
31720: GO 32018
// if direction then
31722: LD_VAR 0 4
31726: IFFALSE 31790
// begin d := 1 ;
31728: LD_ADDR_VAR 0 9
31732: PUSH
31733: LD_INT 1
31735: ST_TO_ADDR
// if i_from > i_to then
31736: LD_VAR 0 2
31740: PUSH
31741: LD_VAR 0 3
31745: GREATER
31746: IFFALSE 31772
// length := ( array - i_from ) + i_to else
31748: LD_ADDR_VAR 0 11
31752: PUSH
31753: LD_VAR 0 1
31757: PUSH
31758: LD_VAR 0 2
31762: MINUS
31763: PUSH
31764: LD_VAR 0 3
31768: PLUS
31769: ST_TO_ADDR
31770: GO 31788
// length := i_to - i_from ;
31772: LD_ADDR_VAR 0 11
31776: PUSH
31777: LD_VAR 0 3
31781: PUSH
31782: LD_VAR 0 2
31786: MINUS
31787: ST_TO_ADDR
// end else
31788: GO 31851
// begin d := - 1 ;
31790: LD_ADDR_VAR 0 9
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: ST_TO_ADDR
// if i_from > i_to then
31799: LD_VAR 0 2
31803: PUSH
31804: LD_VAR 0 3
31808: GREATER
31809: IFFALSE 31829
// length := i_from - i_to else
31811: LD_ADDR_VAR 0 11
31815: PUSH
31816: LD_VAR 0 2
31820: PUSH
31821: LD_VAR 0 3
31825: MINUS
31826: ST_TO_ADDR
31827: GO 31851
// length := ( array - i_to ) + i_from ;
31829: LD_ADDR_VAR 0 11
31833: PUSH
31834: LD_VAR 0 1
31838: PUSH
31839: LD_VAR 0 3
31843: MINUS
31844: PUSH
31845: LD_VAR 0 2
31849: PLUS
31850: ST_TO_ADDR
// end ; if not length then
31851: LD_VAR 0 11
31855: NOT
31856: IFFALSE 31860
// exit ;
31858: GO 32018
// tmp := array ;
31860: LD_ADDR_VAR 0 10
31864: PUSH
31865: LD_VAR 0 1
31869: ST_TO_ADDR
// for i = 1 to length do
31870: LD_ADDR_VAR 0 6
31874: PUSH
31875: DOUBLE
31876: LD_INT 1
31878: DEC
31879: ST_TO_ADDR
31880: LD_VAR 0 11
31884: PUSH
31885: FOR_TO
31886: IFFALSE 32006
// begin for j = 1 to array do
31888: LD_ADDR_VAR 0 7
31892: PUSH
31893: DOUBLE
31894: LD_INT 1
31896: DEC
31897: ST_TO_ADDR
31898: LD_VAR 0 1
31902: PUSH
31903: FOR_TO
31904: IFFALSE 31992
// begin k := j + d ;
31906: LD_ADDR_VAR 0 8
31910: PUSH
31911: LD_VAR 0 7
31915: PUSH
31916: LD_VAR 0 9
31920: PLUS
31921: ST_TO_ADDR
// if k > array then
31922: LD_VAR 0 8
31926: PUSH
31927: LD_VAR 0 1
31931: GREATER
31932: IFFALSE 31942
// k := 1 ;
31934: LD_ADDR_VAR 0 8
31938: PUSH
31939: LD_INT 1
31941: ST_TO_ADDR
// if not k then
31942: LD_VAR 0 8
31946: NOT
31947: IFFALSE 31959
// k := array ;
31949: LD_ADDR_VAR 0 8
31953: PUSH
31954: LD_VAR 0 1
31958: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31959: LD_ADDR_VAR 0 10
31963: PUSH
31964: LD_VAR 0 10
31968: PPUSH
31969: LD_VAR 0 8
31973: PPUSH
31974: LD_VAR 0 1
31978: PUSH
31979: LD_VAR 0 7
31983: ARRAY
31984: PPUSH
31985: CALL_OW 1
31989: ST_TO_ADDR
// end ;
31990: GO 31903
31992: POP
31993: POP
// array := tmp ;
31994: LD_ADDR_VAR 0 1
31998: PUSH
31999: LD_VAR 0 10
32003: ST_TO_ADDR
// end ;
32004: GO 31885
32006: POP
32007: POP
// result := array ;
32008: LD_ADDR_VAR 0 5
32012: PUSH
32013: LD_VAR 0 1
32017: ST_TO_ADDR
// end ;
32018: LD_VAR 0 5
32022: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32023: LD_INT 0
32025: PPUSH
32026: PPUSH
// result := 0 ;
32027: LD_ADDR_VAR 0 3
32031: PUSH
32032: LD_INT 0
32034: ST_TO_ADDR
// if not array or not value in array then
32035: LD_VAR 0 1
32039: NOT
32040: PUSH
32041: LD_VAR 0 2
32045: PUSH
32046: LD_VAR 0 1
32050: IN
32051: NOT
32052: OR
32053: IFFALSE 32057
// exit ;
32055: GO 32111
// for i = 1 to array do
32057: LD_ADDR_VAR 0 4
32061: PUSH
32062: DOUBLE
32063: LD_INT 1
32065: DEC
32066: ST_TO_ADDR
32067: LD_VAR 0 1
32071: PUSH
32072: FOR_TO
32073: IFFALSE 32109
// if value = array [ i ] then
32075: LD_VAR 0 2
32079: PUSH
32080: LD_VAR 0 1
32084: PUSH
32085: LD_VAR 0 4
32089: ARRAY
32090: EQUAL
32091: IFFALSE 32107
// begin result := i ;
32093: LD_ADDR_VAR 0 3
32097: PUSH
32098: LD_VAR 0 4
32102: ST_TO_ADDR
// exit ;
32103: POP
32104: POP
32105: GO 32111
// end ;
32107: GO 32072
32109: POP
32110: POP
// end ;
32111: LD_VAR 0 3
32115: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32116: LD_INT 0
32118: PPUSH
// vc_chassis := chassis ;
32119: LD_ADDR_OWVAR 37
32123: PUSH
32124: LD_VAR 0 1
32128: ST_TO_ADDR
// vc_engine := engine ;
32129: LD_ADDR_OWVAR 39
32133: PUSH
32134: LD_VAR 0 2
32138: ST_TO_ADDR
// vc_control := control ;
32139: LD_ADDR_OWVAR 38
32143: PUSH
32144: LD_VAR 0 3
32148: ST_TO_ADDR
// vc_weapon := weapon ;
32149: LD_ADDR_OWVAR 40
32153: PUSH
32154: LD_VAR 0 4
32158: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32159: LD_ADDR_OWVAR 41
32163: PUSH
32164: LD_VAR 0 5
32168: ST_TO_ADDR
// end ;
32169: LD_VAR 0 6
32173: RET
// export function WantPlant ( unit ) ; var task ; begin
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
// result := false ;
32178: LD_ADDR_VAR 0 2
32182: PUSH
32183: LD_INT 0
32185: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32186: LD_ADDR_VAR 0 3
32190: PUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 437
32200: ST_TO_ADDR
// if task then
32201: LD_VAR 0 3
32205: IFFALSE 32233
// if task [ 1 ] [ 1 ] = p then
32207: LD_VAR 0 3
32211: PUSH
32212: LD_INT 1
32214: ARRAY
32215: PUSH
32216: LD_INT 1
32218: ARRAY
32219: PUSH
32220: LD_STRING p
32222: EQUAL
32223: IFFALSE 32233
// result := true ;
32225: LD_ADDR_VAR 0 2
32229: PUSH
32230: LD_INT 1
32232: ST_TO_ADDR
// end ;
32233: LD_VAR 0 2
32237: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32238: LD_INT 0
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
// if pos < 1 then
32244: LD_VAR 0 2
32248: PUSH
32249: LD_INT 1
32251: LESS
32252: IFFALSE 32256
// exit ;
32254: GO 32559
// if pos = 1 then
32256: LD_VAR 0 2
32260: PUSH
32261: LD_INT 1
32263: EQUAL
32264: IFFALSE 32297
// result := Replace ( arr , pos [ 1 ] , value ) else
32266: LD_ADDR_VAR 0 4
32270: PUSH
32271: LD_VAR 0 1
32275: PPUSH
32276: LD_VAR 0 2
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: PPUSH
32285: LD_VAR 0 3
32289: PPUSH
32290: CALL_OW 1
32294: ST_TO_ADDR
32295: GO 32559
// begin tmp := arr ;
32297: LD_ADDR_VAR 0 6
32301: PUSH
32302: LD_VAR 0 1
32306: ST_TO_ADDR
// s_arr := [ tmp ] ;
32307: LD_ADDR_VAR 0 7
32311: PUSH
32312: LD_VAR 0 6
32316: PUSH
32317: EMPTY
32318: LIST
32319: ST_TO_ADDR
// for i = 1 to pos - 1 do
32320: LD_ADDR_VAR 0 5
32324: PUSH
32325: DOUBLE
32326: LD_INT 1
32328: DEC
32329: ST_TO_ADDR
32330: LD_VAR 0 2
32334: PUSH
32335: LD_INT 1
32337: MINUS
32338: PUSH
32339: FOR_TO
32340: IFFALSE 32385
// begin tmp := tmp [ pos [ i ] ] ;
32342: LD_ADDR_VAR 0 6
32346: PUSH
32347: LD_VAR 0 6
32351: PUSH
32352: LD_VAR 0 2
32356: PUSH
32357: LD_VAR 0 5
32361: ARRAY
32362: ARRAY
32363: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32364: LD_ADDR_VAR 0 7
32368: PUSH
32369: LD_VAR 0 7
32373: PUSH
32374: LD_VAR 0 6
32378: PUSH
32379: EMPTY
32380: LIST
32381: ADD
32382: ST_TO_ADDR
// end ;
32383: GO 32339
32385: POP
32386: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32387: LD_ADDR_VAR 0 6
32391: PUSH
32392: LD_VAR 0 6
32396: PPUSH
32397: LD_VAR 0 2
32401: PUSH
32402: LD_VAR 0 2
32406: ARRAY
32407: PPUSH
32408: LD_VAR 0 3
32412: PPUSH
32413: CALL_OW 1
32417: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32418: LD_ADDR_VAR 0 7
32422: PUSH
32423: LD_VAR 0 7
32427: PPUSH
32428: LD_VAR 0 7
32432: PPUSH
32433: LD_VAR 0 6
32437: PPUSH
32438: CALL_OW 1
32442: ST_TO_ADDR
// for i = s_arr downto 2 do
32443: LD_ADDR_VAR 0 5
32447: PUSH
32448: DOUBLE
32449: LD_VAR 0 7
32453: INC
32454: ST_TO_ADDR
32455: LD_INT 2
32457: PUSH
32458: FOR_DOWNTO
32459: IFFALSE 32543
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32461: LD_ADDR_VAR 0 6
32465: PUSH
32466: LD_VAR 0 7
32470: PUSH
32471: LD_VAR 0 5
32475: PUSH
32476: LD_INT 1
32478: MINUS
32479: ARRAY
32480: PPUSH
32481: LD_VAR 0 2
32485: PUSH
32486: LD_VAR 0 5
32490: PUSH
32491: LD_INT 1
32493: MINUS
32494: ARRAY
32495: PPUSH
32496: LD_VAR 0 7
32500: PUSH
32501: LD_VAR 0 5
32505: ARRAY
32506: PPUSH
32507: CALL_OW 1
32511: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32512: LD_ADDR_VAR 0 7
32516: PUSH
32517: LD_VAR 0 7
32521: PPUSH
32522: LD_VAR 0 5
32526: PUSH
32527: LD_INT 1
32529: MINUS
32530: PPUSH
32531: LD_VAR 0 6
32535: PPUSH
32536: CALL_OW 1
32540: ST_TO_ADDR
// end ;
32541: GO 32458
32543: POP
32544: POP
// result := s_arr [ 1 ] ;
32545: LD_ADDR_VAR 0 4
32549: PUSH
32550: LD_VAR 0 7
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: ST_TO_ADDR
// end ; end ;
32559: LD_VAR 0 4
32563: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32564: LD_INT 0
32566: PPUSH
32567: PPUSH
// if not list then
32568: LD_VAR 0 1
32572: NOT
32573: IFFALSE 32577
// exit ;
32575: GO 32668
// i := list [ pos1 ] ;
32577: LD_ADDR_VAR 0 5
32581: PUSH
32582: LD_VAR 0 1
32586: PUSH
32587: LD_VAR 0 2
32591: ARRAY
32592: ST_TO_ADDR
// if not i then
32593: LD_VAR 0 5
32597: NOT
32598: IFFALSE 32602
// exit ;
32600: GO 32668
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32602: LD_ADDR_VAR 0 1
32606: PUSH
32607: LD_VAR 0 1
32611: PPUSH
32612: LD_VAR 0 2
32616: PPUSH
32617: LD_VAR 0 1
32621: PUSH
32622: LD_VAR 0 3
32626: ARRAY
32627: PPUSH
32628: CALL_OW 1
32632: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32633: LD_ADDR_VAR 0 1
32637: PUSH
32638: LD_VAR 0 1
32642: PPUSH
32643: LD_VAR 0 3
32647: PPUSH
32648: LD_VAR 0 5
32652: PPUSH
32653: CALL_OW 1
32657: ST_TO_ADDR
// result := list ;
32658: LD_ADDR_VAR 0 4
32662: PUSH
32663: LD_VAR 0 1
32667: ST_TO_ADDR
// end ;
32668: LD_VAR 0 4
32672: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32673: LD_INT 0
32675: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32676: LD_ADDR_VAR 0 5
32680: PUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 250
32690: PPUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: CALL_OW 251
32700: PPUSH
32701: LD_VAR 0 2
32705: PPUSH
32706: LD_VAR 0 3
32710: PPUSH
32711: LD_VAR 0 4
32715: PPUSH
32716: CALL 32726 0 5
32720: ST_TO_ADDR
// end ;
32721: LD_VAR 0 5
32725: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32726: LD_INT 0
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
// if not list then
32732: LD_VAR 0 3
32736: NOT
32737: IFFALSE 32741
// exit ;
32739: GO 33129
// result := [ ] ;
32741: LD_ADDR_VAR 0 6
32745: PUSH
32746: EMPTY
32747: ST_TO_ADDR
// for i in list do
32748: LD_ADDR_VAR 0 7
32752: PUSH
32753: LD_VAR 0 3
32757: PUSH
32758: FOR_IN
32759: IFFALSE 32961
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32761: LD_ADDR_VAR 0 9
32765: PUSH
32766: LD_VAR 0 7
32770: PPUSH
32771: LD_VAR 0 1
32775: PPUSH
32776: LD_VAR 0 2
32780: PPUSH
32781: CALL_OW 297
32785: ST_TO_ADDR
// if not result then
32786: LD_VAR 0 6
32790: NOT
32791: IFFALSE 32817
// result := [ [ i , tmp ] ] else
32793: LD_ADDR_VAR 0 6
32797: PUSH
32798: LD_VAR 0 7
32802: PUSH
32803: LD_VAR 0 9
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: EMPTY
32813: LIST
32814: ST_TO_ADDR
32815: GO 32959
// begin if result [ result ] [ 2 ] < tmp then
32817: LD_VAR 0 6
32821: PUSH
32822: LD_VAR 0 6
32826: ARRAY
32827: PUSH
32828: LD_INT 2
32830: ARRAY
32831: PUSH
32832: LD_VAR 0 9
32836: LESS
32837: IFFALSE 32879
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32839: LD_ADDR_VAR 0 6
32843: PUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_VAR 0 6
32853: PUSH
32854: LD_INT 1
32856: PLUS
32857: PPUSH
32858: LD_VAR 0 7
32862: PUSH
32863: LD_VAR 0 9
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PPUSH
32872: CALL_OW 2
32876: ST_TO_ADDR
32877: GO 32959
// for j = 1 to result do
32879: LD_ADDR_VAR 0 8
32883: PUSH
32884: DOUBLE
32885: LD_INT 1
32887: DEC
32888: ST_TO_ADDR
32889: LD_VAR 0 6
32893: PUSH
32894: FOR_TO
32895: IFFALSE 32957
// begin if tmp < result [ j ] [ 2 ] then
32897: LD_VAR 0 9
32901: PUSH
32902: LD_VAR 0 6
32906: PUSH
32907: LD_VAR 0 8
32911: ARRAY
32912: PUSH
32913: LD_INT 2
32915: ARRAY
32916: LESS
32917: IFFALSE 32955
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32919: LD_ADDR_VAR 0 6
32923: PUSH
32924: LD_VAR 0 6
32928: PPUSH
32929: LD_VAR 0 8
32933: PPUSH
32934: LD_VAR 0 7
32938: PUSH
32939: LD_VAR 0 9
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PPUSH
32948: CALL_OW 2
32952: ST_TO_ADDR
// break ;
32953: GO 32957
// end ; end ;
32955: GO 32894
32957: POP
32958: POP
// end ; end ;
32959: GO 32758
32961: POP
32962: POP
// if result and not asc then
32963: LD_VAR 0 6
32967: PUSH
32968: LD_VAR 0 4
32972: NOT
32973: AND
32974: IFFALSE 33049
// begin tmp := result ;
32976: LD_ADDR_VAR 0 9
32980: PUSH
32981: LD_VAR 0 6
32985: ST_TO_ADDR
// for i = tmp downto 1 do
32986: LD_ADDR_VAR 0 7
32990: PUSH
32991: DOUBLE
32992: LD_VAR 0 9
32996: INC
32997: ST_TO_ADDR
32998: LD_INT 1
33000: PUSH
33001: FOR_DOWNTO
33002: IFFALSE 33047
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33004: LD_ADDR_VAR 0 6
33008: PUSH
33009: LD_VAR 0 6
33013: PPUSH
33014: LD_VAR 0 9
33018: PUSH
33019: LD_VAR 0 7
33023: MINUS
33024: PUSH
33025: LD_INT 1
33027: PLUS
33028: PPUSH
33029: LD_VAR 0 9
33033: PUSH
33034: LD_VAR 0 7
33038: ARRAY
33039: PPUSH
33040: CALL_OW 1
33044: ST_TO_ADDR
33045: GO 33001
33047: POP
33048: POP
// end ; tmp := [ ] ;
33049: LD_ADDR_VAR 0 9
33053: PUSH
33054: EMPTY
33055: ST_TO_ADDR
// if mode then
33056: LD_VAR 0 5
33060: IFFALSE 33129
// begin for i = 1 to result do
33062: LD_ADDR_VAR 0 7
33066: PUSH
33067: DOUBLE
33068: LD_INT 1
33070: DEC
33071: ST_TO_ADDR
33072: LD_VAR 0 6
33076: PUSH
33077: FOR_TO
33078: IFFALSE 33117
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33080: LD_ADDR_VAR 0 9
33084: PUSH
33085: LD_VAR 0 9
33089: PPUSH
33090: LD_VAR 0 7
33094: PPUSH
33095: LD_VAR 0 6
33099: PUSH
33100: LD_VAR 0 7
33104: ARRAY
33105: PUSH
33106: LD_INT 1
33108: ARRAY
33109: PPUSH
33110: CALL_OW 1
33114: ST_TO_ADDR
33115: GO 33077
33117: POP
33118: POP
// result := tmp ;
33119: LD_ADDR_VAR 0 6
33123: PUSH
33124: LD_VAR 0 9
33128: ST_TO_ADDR
// end ; end ;
33129: LD_VAR 0 6
33133: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33134: LD_INT 0
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
33141: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33142: LD_ADDR_VAR 0 5
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
// if not x or not y then
33164: LD_VAR 0 2
33168: NOT
33169: PUSH
33170: LD_VAR 0 3
33174: NOT
33175: OR
33176: IFFALSE 33180
// exit ;
33178: GO 34826
// if not range then
33180: LD_VAR 0 4
33184: NOT
33185: IFFALSE 33195
// range := 10 ;
33187: LD_ADDR_VAR 0 4
33191: PUSH
33192: LD_INT 10
33194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33195: LD_ADDR_VAR 0 8
33199: PUSH
33200: LD_INT 81
33202: PUSH
33203: LD_VAR 0 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 92
33214: PUSH
33215: LD_VAR 0 2
33219: PUSH
33220: LD_VAR 0 3
33224: PUSH
33225: LD_VAR 0 4
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: LD_INT 21
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: LIST
33257: PPUSH
33258: CALL_OW 69
33262: ST_TO_ADDR
// if not tmp then
33263: LD_VAR 0 8
33267: NOT
33268: IFFALSE 33272
// exit ;
33270: GO 34826
// for i in tmp do
33272: LD_ADDR_VAR 0 6
33276: PUSH
33277: LD_VAR 0 8
33281: PUSH
33282: FOR_IN
33283: IFFALSE 34801
// begin points := [ 0 , 0 , 0 ] ;
33285: LD_ADDR_VAR 0 9
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: ST_TO_ADDR
// bpoints := 1 ;
33304: LD_ADDR_VAR 0 10
33308: PUSH
33309: LD_INT 1
33311: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33312: LD_VAR 0 6
33316: PPUSH
33317: CALL_OW 247
33321: PUSH
33322: LD_INT 1
33324: DOUBLE
33325: EQUAL
33326: IFTRUE 33330
33328: GO 33908
33330: POP
// begin if GetClass ( i ) = 1 then
33331: LD_VAR 0 6
33335: PPUSH
33336: CALL_OW 257
33340: PUSH
33341: LD_INT 1
33343: EQUAL
33344: IFFALSE 33365
// points := [ 10 , 5 , 3 ] ;
33346: LD_ADDR_VAR 0 9
33350: PUSH
33351: LD_INT 10
33353: PUSH
33354: LD_INT 5
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33365: LD_VAR 0 6
33369: PPUSH
33370: CALL_OW 257
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: LD_INT 4
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: IN
33389: IFFALSE 33410
// points := [ 3 , 2 , 1 ] ;
33391: LD_ADDR_VAR 0 9
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33410: LD_VAR 0 6
33414: PPUSH
33415: CALL_OW 257
33419: PUSH
33420: LD_INT 5
33422: EQUAL
33423: IFFALSE 33444
// points := [ 130 , 5 , 2 ] ;
33425: LD_ADDR_VAR 0 9
33429: PUSH
33430: LD_INT 130
33432: PUSH
33433: LD_INT 5
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33444: LD_VAR 0 6
33448: PPUSH
33449: CALL_OW 257
33453: PUSH
33454: LD_INT 8
33456: EQUAL
33457: IFFALSE 33478
// points := [ 35 , 35 , 30 ] ;
33459: LD_ADDR_VAR 0 9
33463: PUSH
33464: LD_INT 35
33466: PUSH
33467: LD_INT 35
33469: PUSH
33470: LD_INT 30
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33478: LD_VAR 0 6
33482: PPUSH
33483: CALL_OW 257
33487: PUSH
33488: LD_INT 9
33490: EQUAL
33491: IFFALSE 33512
// points := [ 20 , 55 , 40 ] ;
33493: LD_ADDR_VAR 0 9
33497: PUSH
33498: LD_INT 20
33500: PUSH
33501: LD_INT 55
33503: PUSH
33504: LD_INT 40
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33512: LD_VAR 0 6
33516: PPUSH
33517: CALL_OW 257
33521: PUSH
33522: LD_INT 12
33524: PUSH
33525: LD_INT 16
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: IN
33532: IFFALSE 33553
// points := [ 5 , 3 , 2 ] ;
33534: LD_ADDR_VAR 0 9
33538: PUSH
33539: LD_INT 5
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33553: LD_VAR 0 6
33557: PPUSH
33558: CALL_OW 257
33562: PUSH
33563: LD_INT 17
33565: EQUAL
33566: IFFALSE 33587
// points := [ 100 , 50 , 75 ] ;
33568: LD_ADDR_VAR 0 9
33572: PUSH
33573: LD_INT 100
33575: PUSH
33576: LD_INT 50
33578: PUSH
33579: LD_INT 75
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33587: LD_VAR 0 6
33591: PPUSH
33592: CALL_OW 257
33596: PUSH
33597: LD_INT 15
33599: EQUAL
33600: IFFALSE 33621
// points := [ 10 , 5 , 3 ] ;
33602: LD_ADDR_VAR 0 9
33606: PUSH
33607: LD_INT 10
33609: PUSH
33610: LD_INT 5
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33621: LD_VAR 0 6
33625: PPUSH
33626: CALL_OW 257
33630: PUSH
33631: LD_INT 14
33633: EQUAL
33634: IFFALSE 33655
// points := [ 10 , 0 , 0 ] ;
33636: LD_ADDR_VAR 0 9
33640: PUSH
33641: LD_INT 10
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33655: LD_VAR 0 6
33659: PPUSH
33660: CALL_OW 257
33664: PUSH
33665: LD_INT 11
33667: EQUAL
33668: IFFALSE 33689
// points := [ 30 , 10 , 5 ] ;
33670: LD_ADDR_VAR 0 9
33674: PUSH
33675: LD_INT 30
33677: PUSH
33678: LD_INT 10
33680: PUSH
33681: LD_INT 5
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33689: LD_VAR 0 1
33693: PPUSH
33694: LD_INT 5
33696: PPUSH
33697: CALL_OW 321
33701: PUSH
33702: LD_INT 2
33704: EQUAL
33705: IFFALSE 33722
// bpoints := bpoints * 1.8 ;
33707: LD_ADDR_VAR 0 10
33711: PUSH
33712: LD_VAR 0 10
33716: PUSH
33717: LD_REAL  1.80000000000000E+0000
33720: MUL
33721: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33722: LD_VAR 0 6
33726: PPUSH
33727: CALL_OW 257
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: LD_INT 4
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: IN
33750: PUSH
33751: LD_VAR 0 1
33755: PPUSH
33756: LD_INT 51
33758: PPUSH
33759: CALL_OW 321
33763: PUSH
33764: LD_INT 2
33766: EQUAL
33767: AND
33768: IFFALSE 33785
// bpoints := bpoints * 1.2 ;
33770: LD_ADDR_VAR 0 10
33774: PUSH
33775: LD_VAR 0 10
33779: PUSH
33780: LD_REAL  1.20000000000000E+0000
33783: MUL
33784: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33785: LD_VAR 0 6
33789: PPUSH
33790: CALL_OW 257
33794: PUSH
33795: LD_INT 5
33797: PUSH
33798: LD_INT 7
33800: PUSH
33801: LD_INT 9
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: IN
33809: PUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: LD_INT 52
33817: PPUSH
33818: CALL_OW 321
33822: PUSH
33823: LD_INT 2
33825: EQUAL
33826: AND
33827: IFFALSE 33844
// bpoints := bpoints * 1.5 ;
33829: LD_ADDR_VAR 0 10
33833: PUSH
33834: LD_VAR 0 10
33838: PUSH
33839: LD_REAL  1.50000000000000E+0000
33842: MUL
33843: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33844: LD_VAR 0 1
33848: PPUSH
33849: LD_INT 66
33851: PPUSH
33852: CALL_OW 321
33856: PUSH
33857: LD_INT 2
33859: EQUAL
33860: IFFALSE 33877
// bpoints := bpoints * 1.1 ;
33862: LD_ADDR_VAR 0 10
33866: PUSH
33867: LD_VAR 0 10
33871: PUSH
33872: LD_REAL  1.10000000000000E+0000
33875: MUL
33876: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33877: LD_ADDR_VAR 0 10
33881: PUSH
33882: LD_VAR 0 10
33886: PUSH
33887: LD_VAR 0 6
33891: PPUSH
33892: LD_INT 1
33894: PPUSH
33895: CALL_OW 259
33899: PUSH
33900: LD_REAL  1.15000000000000E+0000
33903: MUL
33904: MUL
33905: ST_TO_ADDR
// end ; unit_vehicle :
33906: GO 34730
33908: LD_INT 2
33910: DOUBLE
33911: EQUAL
33912: IFTRUE 33916
33914: GO 34718
33916: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33917: LD_VAR 0 6
33921: PPUSH
33922: CALL_OW 264
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 42
33932: PUSH
33933: LD_INT 24
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: IN
33941: IFFALSE 33962
// points := [ 25 , 5 , 3 ] ;
33943: LD_ADDR_VAR 0 9
33947: PUSH
33948: LD_INT 25
33950: PUSH
33951: LD_INT 5
33953: PUSH
33954: LD_INT 3
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33962: LD_VAR 0 6
33966: PPUSH
33967: CALL_OW 264
33971: PUSH
33972: LD_INT 4
33974: PUSH
33975: LD_INT 43
33977: PUSH
33978: LD_INT 25
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: IN
33986: IFFALSE 34007
// points := [ 40 , 15 , 5 ] ;
33988: LD_ADDR_VAR 0 9
33992: PUSH
33993: LD_INT 40
33995: PUSH
33996: LD_INT 15
33998: PUSH
33999: LD_INT 5
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34007: LD_VAR 0 6
34011: PPUSH
34012: CALL_OW 264
34016: PUSH
34017: LD_INT 3
34019: PUSH
34020: LD_INT 23
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: IN
34027: IFFALSE 34048
// points := [ 7 , 25 , 8 ] ;
34029: LD_ADDR_VAR 0 9
34033: PUSH
34034: LD_INT 7
34036: PUSH
34037: LD_INT 25
34039: PUSH
34040: LD_INT 8
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34048: LD_VAR 0 6
34052: PPUSH
34053: CALL_OW 264
34057: PUSH
34058: LD_INT 5
34060: PUSH
34061: LD_INT 27
34063: PUSH
34064: LD_INT 44
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: IN
34072: IFFALSE 34093
// points := [ 14 , 50 , 16 ] ;
34074: LD_ADDR_VAR 0 9
34078: PUSH
34079: LD_INT 14
34081: PUSH
34082: LD_INT 50
34084: PUSH
34085: LD_INT 16
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34093: LD_VAR 0 6
34097: PPUSH
34098: CALL_OW 264
34102: PUSH
34103: LD_INT 6
34105: PUSH
34106: LD_INT 46
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: IN
34113: IFFALSE 34134
// points := [ 32 , 120 , 70 ] ;
34115: LD_ADDR_VAR 0 9
34119: PUSH
34120: LD_INT 32
34122: PUSH
34123: LD_INT 120
34125: PUSH
34126: LD_INT 70
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34134: LD_VAR 0 6
34138: PPUSH
34139: CALL_OW 264
34143: PUSH
34144: LD_INT 7
34146: PUSH
34147: LD_INT 28
34149: PUSH
34150: LD_INT 45
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: IN
34158: IFFALSE 34179
// points := [ 35 , 20 , 45 ] ;
34160: LD_ADDR_VAR 0 9
34164: PUSH
34165: LD_INT 35
34167: PUSH
34168: LD_INT 20
34170: PUSH
34171: LD_INT 45
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34179: LD_VAR 0 6
34183: PPUSH
34184: CALL_OW 264
34188: PUSH
34189: LD_INT 47
34191: PUSH
34192: EMPTY
34193: LIST
34194: IN
34195: IFFALSE 34216
// points := [ 67 , 45 , 75 ] ;
34197: LD_ADDR_VAR 0 9
34201: PUSH
34202: LD_INT 67
34204: PUSH
34205: LD_INT 45
34207: PUSH
34208: LD_INT 75
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34216: LD_VAR 0 6
34220: PPUSH
34221: CALL_OW 264
34225: PUSH
34226: LD_INT 26
34228: PUSH
34229: EMPTY
34230: LIST
34231: IN
34232: IFFALSE 34253
// points := [ 120 , 30 , 80 ] ;
34234: LD_ADDR_VAR 0 9
34238: PUSH
34239: LD_INT 120
34241: PUSH
34242: LD_INT 30
34244: PUSH
34245: LD_INT 80
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34253: LD_VAR 0 6
34257: PPUSH
34258: CALL_OW 264
34262: PUSH
34263: LD_INT 22
34265: PUSH
34266: EMPTY
34267: LIST
34268: IN
34269: IFFALSE 34290
// points := [ 40 , 1 , 1 ] ;
34271: LD_ADDR_VAR 0 9
34275: PUSH
34276: LD_INT 40
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34290: LD_VAR 0 6
34294: PPUSH
34295: CALL_OW 264
34299: PUSH
34300: LD_INT 29
34302: PUSH
34303: EMPTY
34304: LIST
34305: IN
34306: IFFALSE 34327
// points := [ 70 , 200 , 400 ] ;
34308: LD_ADDR_VAR 0 9
34312: PUSH
34313: LD_INT 70
34315: PUSH
34316: LD_INT 200
34318: PUSH
34319: LD_INT 400
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: LIST
34326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34327: LD_VAR 0 6
34331: PPUSH
34332: CALL_OW 264
34336: PUSH
34337: LD_INT 14
34339: PUSH
34340: LD_INT 53
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: IN
34347: IFFALSE 34368
// points := [ 40 , 10 , 20 ] ;
34349: LD_ADDR_VAR 0 9
34353: PUSH
34354: LD_INT 40
34356: PUSH
34357: LD_INT 10
34359: PUSH
34360: LD_INT 20
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34368: LD_VAR 0 6
34372: PPUSH
34373: CALL_OW 264
34377: PUSH
34378: LD_INT 9
34380: PUSH
34381: EMPTY
34382: LIST
34383: IN
34384: IFFALSE 34405
// points := [ 5 , 70 , 20 ] ;
34386: LD_ADDR_VAR 0 9
34390: PUSH
34391: LD_INT 5
34393: PUSH
34394: LD_INT 70
34396: PUSH
34397: LD_INT 20
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34405: LD_VAR 0 6
34409: PPUSH
34410: CALL_OW 264
34414: PUSH
34415: LD_INT 10
34417: PUSH
34418: EMPTY
34419: LIST
34420: IN
34421: IFFALSE 34442
// points := [ 35 , 110 , 70 ] ;
34423: LD_ADDR_VAR 0 9
34427: PUSH
34428: LD_INT 35
34430: PUSH
34431: LD_INT 110
34433: PUSH
34434: LD_INT 70
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34442: LD_VAR 0 6
34446: PPUSH
34447: CALL_OW 265
34451: PUSH
34452: LD_INT 25
34454: EQUAL
34455: IFFALSE 34476
// points := [ 80 , 65 , 100 ] ;
34457: LD_ADDR_VAR 0 9
34461: PUSH
34462: LD_INT 80
34464: PUSH
34465: LD_INT 65
34467: PUSH
34468: LD_INT 100
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34476: LD_VAR 0 6
34480: PPUSH
34481: CALL_OW 263
34485: PUSH
34486: LD_INT 1
34488: EQUAL
34489: IFFALSE 34524
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34491: LD_ADDR_VAR 0 10
34495: PUSH
34496: LD_VAR 0 10
34500: PUSH
34501: LD_VAR 0 6
34505: PPUSH
34506: CALL_OW 311
34510: PPUSH
34511: LD_INT 3
34513: PPUSH
34514: CALL_OW 259
34518: PUSH
34519: LD_INT 4
34521: MUL
34522: MUL
34523: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34524: LD_VAR 0 6
34528: PPUSH
34529: CALL_OW 263
34533: PUSH
34534: LD_INT 2
34536: EQUAL
34537: IFFALSE 34588
// begin j := IsControledBy ( i ) ;
34539: LD_ADDR_VAR 0 7
34543: PUSH
34544: LD_VAR 0 6
34548: PPUSH
34549: CALL_OW 312
34553: ST_TO_ADDR
// if j then
34554: LD_VAR 0 7
34558: IFFALSE 34588
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34560: LD_ADDR_VAR 0 10
34564: PUSH
34565: LD_VAR 0 10
34569: PUSH
34570: LD_VAR 0 7
34574: PPUSH
34575: LD_INT 3
34577: PPUSH
34578: CALL_OW 259
34582: PUSH
34583: LD_INT 3
34585: MUL
34586: MUL
34587: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34588: LD_VAR 0 6
34592: PPUSH
34593: CALL_OW 264
34597: PUSH
34598: LD_INT 5
34600: PUSH
34601: LD_INT 6
34603: PUSH
34604: LD_INT 46
34606: PUSH
34607: LD_INT 44
34609: PUSH
34610: LD_INT 47
34612: PUSH
34613: LD_INT 45
34615: PUSH
34616: LD_INT 28
34618: PUSH
34619: LD_INT 7
34621: PUSH
34622: LD_INT 27
34624: PUSH
34625: LD_INT 29
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: IN
34640: PUSH
34641: LD_VAR 0 1
34645: PPUSH
34646: LD_INT 52
34648: PPUSH
34649: CALL_OW 321
34653: PUSH
34654: LD_INT 2
34656: EQUAL
34657: AND
34658: IFFALSE 34675
// bpoints := bpoints * 1.2 ;
34660: LD_ADDR_VAR 0 10
34664: PUSH
34665: LD_VAR 0 10
34669: PUSH
34670: LD_REAL  1.20000000000000E+0000
34673: MUL
34674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34675: LD_VAR 0 6
34679: PPUSH
34680: CALL_OW 264
34684: PUSH
34685: LD_INT 6
34687: PUSH
34688: LD_INT 46
34690: PUSH
34691: LD_INT 47
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: LIST
34698: IN
34699: IFFALSE 34716
// bpoints := bpoints * 1.2 ;
34701: LD_ADDR_VAR 0 10
34705: PUSH
34706: LD_VAR 0 10
34710: PUSH
34711: LD_REAL  1.20000000000000E+0000
34714: MUL
34715: ST_TO_ADDR
// end ; unit_building :
34716: GO 34730
34718: LD_INT 3
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34729
34726: POP
// ; end ;
34727: GO 34730
34729: POP
// for j = 1 to 3 do
34730: LD_ADDR_VAR 0 7
34734: PUSH
34735: DOUBLE
34736: LD_INT 1
34738: DEC
34739: ST_TO_ADDR
34740: LD_INT 3
34742: PUSH
34743: FOR_TO
34744: IFFALSE 34797
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34746: LD_ADDR_VAR 0 5
34750: PUSH
34751: LD_VAR 0 5
34755: PPUSH
34756: LD_VAR 0 7
34760: PPUSH
34761: LD_VAR 0 5
34765: PUSH
34766: LD_VAR 0 7
34770: ARRAY
34771: PUSH
34772: LD_VAR 0 9
34776: PUSH
34777: LD_VAR 0 7
34781: ARRAY
34782: PUSH
34783: LD_VAR 0 10
34787: MUL
34788: PLUS
34789: PPUSH
34790: CALL_OW 1
34794: ST_TO_ADDR
34795: GO 34743
34797: POP
34798: POP
// end ;
34799: GO 33282
34801: POP
34802: POP
// result := Replace ( result , 4 , tmp ) ;
34803: LD_ADDR_VAR 0 5
34807: PUSH
34808: LD_VAR 0 5
34812: PPUSH
34813: LD_INT 4
34815: PPUSH
34816: LD_VAR 0 8
34820: PPUSH
34821: CALL_OW 1
34825: ST_TO_ADDR
// end ;
34826: LD_VAR 0 5
34830: RET
// export function DangerAtRange ( unit , range ) ; begin
34831: LD_INT 0
34833: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34834: LD_ADDR_VAR 0 3
34838: PUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: CALL_OW 255
34848: PPUSH
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL_OW 250
34858: PPUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 251
34868: PPUSH
34869: LD_VAR 0 2
34873: PPUSH
34874: CALL 33134 0 4
34878: ST_TO_ADDR
// end ;
34879: LD_VAR 0 3
34883: RET
// export function DangerInArea ( side , area ) ; begin
34884: LD_INT 0
34886: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_VAR 0 2
34896: PPUSH
34897: LD_INT 81
34899: PUSH
34900: LD_VAR 0 1
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PPUSH
34909: CALL_OW 70
34913: ST_TO_ADDR
// end ;
34914: LD_VAR 0 3
34918: RET
// export function IsExtension ( b ) ; begin
34919: LD_INT 0
34921: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34922: LD_ADDR_VAR 0 2
34926: PUSH
34927: LD_VAR 0 1
34931: PUSH
34932: LD_INT 23
34934: PUSH
34935: LD_INT 20
34937: PUSH
34938: LD_INT 22
34940: PUSH
34941: LD_INT 17
34943: PUSH
34944: LD_INT 24
34946: PUSH
34947: LD_INT 21
34949: PUSH
34950: LD_INT 19
34952: PUSH
34953: LD_INT 16
34955: PUSH
34956: LD_INT 25
34958: PUSH
34959: LD_INT 18
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: IN
34974: ST_TO_ADDR
// end ;
34975: LD_VAR 0 2
34979: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34980: LD_INT 0
34982: PPUSH
34983: PPUSH
34984: PPUSH
// result := [ ] ;
34985: LD_ADDR_VAR 0 4
34989: PUSH
34990: EMPTY
34991: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34992: LD_ADDR_VAR 0 5
34996: PUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: LD_INT 21
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PPUSH
35012: CALL_OW 70
35016: ST_TO_ADDR
// if not tmp then
35017: LD_VAR 0 5
35021: NOT
35022: IFFALSE 35026
// exit ;
35024: GO 35090
// if checkLink then
35026: LD_VAR 0 3
35030: IFFALSE 35080
// begin for i in tmp do
35032: LD_ADDR_VAR 0 6
35036: PUSH
35037: LD_VAR 0 5
35041: PUSH
35042: FOR_IN
35043: IFFALSE 35078
// if GetBase ( i ) <> base then
35045: LD_VAR 0 6
35049: PPUSH
35050: CALL_OW 274
35054: PUSH
35055: LD_VAR 0 1
35059: NONEQUAL
35060: IFFALSE 35076
// ComLinkToBase ( base , i ) ;
35062: LD_VAR 0 1
35066: PPUSH
35067: LD_VAR 0 6
35071: PPUSH
35072: CALL_OW 169
35076: GO 35042
35078: POP
35079: POP
// end ; result := tmp ;
35080: LD_ADDR_VAR 0 4
35084: PUSH
35085: LD_VAR 0 5
35089: ST_TO_ADDR
// end ;
35090: LD_VAR 0 4
35094: RET
// export function ComComplete ( units , b ) ; var i ; begin
35095: LD_INT 0
35097: PPUSH
35098: PPUSH
// if not units then
35099: LD_VAR 0 1
35103: NOT
35104: IFFALSE 35108
// exit ;
35106: GO 35198
// for i in units do
35108: LD_ADDR_VAR 0 4
35112: PUSH
35113: LD_VAR 0 1
35117: PUSH
35118: FOR_IN
35119: IFFALSE 35196
// if BuildingStatus ( b ) = bs_build then
35121: LD_VAR 0 2
35125: PPUSH
35126: CALL_OW 461
35130: PUSH
35131: LD_INT 1
35133: EQUAL
35134: IFFALSE 35194
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35136: LD_VAR 0 4
35140: PPUSH
35141: LD_STRING h
35143: PUSH
35144: LD_VAR 0 2
35148: PPUSH
35149: CALL_OW 250
35153: PUSH
35154: LD_VAR 0 2
35158: PPUSH
35159: CALL_OW 251
35163: PUSH
35164: LD_VAR 0 2
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: PUSH
35187: EMPTY
35188: LIST
35189: PPUSH
35190: CALL_OW 446
35194: GO 35118
35196: POP
35197: POP
// end ;
35198: LD_VAR 0 3
35202: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35203: LD_INT 0
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35211: LD_VAR 0 1
35215: NOT
35216: PUSH
35217: LD_VAR 0 1
35221: PPUSH
35222: CALL_OW 263
35226: PUSH
35227: LD_INT 2
35229: EQUAL
35230: NOT
35231: OR
35232: IFFALSE 35236
// exit ;
35234: GO 35552
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35236: LD_ADDR_VAR 0 6
35240: PUSH
35241: LD_INT 22
35243: PUSH
35244: LD_VAR 0 1
35248: PPUSH
35249: CALL_OW 255
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 30
35263: PUSH
35264: LD_INT 36
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 34
35273: PUSH
35274: LD_INT 31
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PPUSH
35290: CALL_OW 69
35294: ST_TO_ADDR
// if not tmp then
35295: LD_VAR 0 6
35299: NOT
35300: IFFALSE 35304
// exit ;
35302: GO 35552
// result := [ ] ;
35304: LD_ADDR_VAR 0 2
35308: PUSH
35309: EMPTY
35310: ST_TO_ADDR
// for i in tmp do
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_VAR 0 6
35320: PUSH
35321: FOR_IN
35322: IFFALSE 35393
// begin t := UnitsInside ( i ) ;
35324: LD_ADDR_VAR 0 4
35328: PUSH
35329: LD_VAR 0 3
35333: PPUSH
35334: CALL_OW 313
35338: ST_TO_ADDR
// if t then
35339: LD_VAR 0 4
35343: IFFALSE 35391
// for j in t do
35345: LD_ADDR_VAR 0 7
35349: PUSH
35350: LD_VAR 0 4
35354: PUSH
35355: FOR_IN
35356: IFFALSE 35389
// result := Insert ( result , result + 1 , j ) ;
35358: LD_ADDR_VAR 0 2
35362: PUSH
35363: LD_VAR 0 2
35367: PPUSH
35368: LD_VAR 0 2
35372: PUSH
35373: LD_INT 1
35375: PLUS
35376: PPUSH
35377: LD_VAR 0 7
35381: PPUSH
35382: CALL_OW 2
35386: ST_TO_ADDR
35387: GO 35355
35389: POP
35390: POP
// end ;
35391: GO 35321
35393: POP
35394: POP
// if not result then
35395: LD_VAR 0 2
35399: NOT
35400: IFFALSE 35404
// exit ;
35402: GO 35552
// mech := result [ 1 ] ;
35404: LD_ADDR_VAR 0 5
35408: PUSH
35409: LD_VAR 0 2
35413: PUSH
35414: LD_INT 1
35416: ARRAY
35417: ST_TO_ADDR
// if result > 1 then
35418: LD_VAR 0 2
35422: PUSH
35423: LD_INT 1
35425: GREATER
35426: IFFALSE 35538
// for i = 2 to result do
35428: LD_ADDR_VAR 0 3
35432: PUSH
35433: DOUBLE
35434: LD_INT 2
35436: DEC
35437: ST_TO_ADDR
35438: LD_VAR 0 2
35442: PUSH
35443: FOR_TO
35444: IFFALSE 35536
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35446: LD_ADDR_VAR 0 4
35450: PUSH
35451: LD_VAR 0 2
35455: PUSH
35456: LD_VAR 0 3
35460: ARRAY
35461: PPUSH
35462: LD_INT 3
35464: PPUSH
35465: CALL_OW 259
35469: PUSH
35470: LD_VAR 0 2
35474: PUSH
35475: LD_VAR 0 3
35479: ARRAY
35480: PPUSH
35481: CALL_OW 432
35485: MINUS
35486: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35487: LD_VAR 0 4
35491: PUSH
35492: LD_VAR 0 5
35496: PPUSH
35497: LD_INT 3
35499: PPUSH
35500: CALL_OW 259
35504: PUSH
35505: LD_VAR 0 5
35509: PPUSH
35510: CALL_OW 432
35514: MINUS
35515: GREATEREQUAL
35516: IFFALSE 35534
// mech := result [ i ] ;
35518: LD_ADDR_VAR 0 5
35522: PUSH
35523: LD_VAR 0 2
35527: PUSH
35528: LD_VAR 0 3
35532: ARRAY
35533: ST_TO_ADDR
// end ;
35534: GO 35443
35536: POP
35537: POP
// ComLinkTo ( vehicle , mech ) ;
35538: LD_VAR 0 1
35542: PPUSH
35543: LD_VAR 0 5
35547: PPUSH
35548: CALL_OW 135
// end ;
35552: LD_VAR 0 2
35556: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35557: LD_INT 0
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
35567: PPUSH
35568: PPUSH
35569: PPUSH
35570: PPUSH
35571: PPUSH
// result := [ ] ;
35572: LD_ADDR_VAR 0 7
35576: PUSH
35577: EMPTY
35578: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35579: LD_VAR 0 1
35583: PPUSH
35584: CALL_OW 266
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: IN
35599: NOT
35600: IFFALSE 35604
// exit ;
35602: GO 37238
// if name then
35604: LD_VAR 0 3
35608: IFFALSE 35624
// SetBName ( base_dep , name ) ;
35610: LD_VAR 0 1
35614: PPUSH
35615: LD_VAR 0 3
35619: PPUSH
35620: CALL_OW 500
// base := GetBase ( base_dep ) ;
35624: LD_ADDR_VAR 0 15
35628: PUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL_OW 274
35638: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35639: LD_ADDR_VAR 0 16
35643: PUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL_OW 255
35653: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35654: LD_ADDR_VAR 0 17
35658: PUSH
35659: LD_VAR 0 1
35663: PPUSH
35664: CALL_OW 248
35668: ST_TO_ADDR
// if sources then
35669: LD_VAR 0 5
35673: IFFALSE 35720
// for i = 1 to 3 do
35675: LD_ADDR_VAR 0 8
35679: PUSH
35680: DOUBLE
35681: LD_INT 1
35683: DEC
35684: ST_TO_ADDR
35685: LD_INT 3
35687: PUSH
35688: FOR_TO
35689: IFFALSE 35718
// AddResourceType ( base , i , sources [ i ] ) ;
35691: LD_VAR 0 15
35695: PPUSH
35696: LD_VAR 0 8
35700: PPUSH
35701: LD_VAR 0 5
35705: PUSH
35706: LD_VAR 0 8
35710: ARRAY
35711: PPUSH
35712: CALL_OW 276
35716: GO 35688
35718: POP
35719: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35720: LD_ADDR_VAR 0 18
35724: PUSH
35725: LD_VAR 0 15
35729: PPUSH
35730: LD_VAR 0 2
35734: PPUSH
35735: LD_INT 1
35737: PPUSH
35738: CALL 34980 0 3
35742: ST_TO_ADDR
// InitHc ;
35743: CALL_OW 19
// InitUc ;
35747: CALL_OW 18
// uc_side := side ;
35751: LD_ADDR_OWVAR 20
35755: PUSH
35756: LD_VAR 0 16
35760: ST_TO_ADDR
// uc_nation := nation ;
35761: LD_ADDR_OWVAR 21
35765: PUSH
35766: LD_VAR 0 17
35770: ST_TO_ADDR
// if buildings then
35771: LD_VAR 0 18
35775: IFFALSE 37097
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35777: LD_ADDR_VAR 0 19
35781: PUSH
35782: LD_VAR 0 18
35786: PPUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 30
35792: PUSH
35793: LD_INT 29
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 30
35802: PUSH
35803: LD_INT 30
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: PPUSH
35815: CALL_OW 72
35819: ST_TO_ADDR
// if tmp then
35820: LD_VAR 0 19
35824: IFFALSE 35872
// for i in tmp do
35826: LD_ADDR_VAR 0 8
35830: PUSH
35831: LD_VAR 0 19
35835: PUSH
35836: FOR_IN
35837: IFFALSE 35870
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35839: LD_VAR 0 8
35843: PPUSH
35844: CALL_OW 250
35848: PPUSH
35849: LD_VAR 0 8
35853: PPUSH
35854: CALL_OW 251
35858: PPUSH
35859: LD_VAR 0 16
35863: PPUSH
35864: CALL_OW 441
35868: GO 35836
35870: POP
35871: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35872: LD_VAR 0 18
35876: PPUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 30
35882: PUSH
35883: LD_INT 32
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 30
35892: PUSH
35893: LD_INT 33
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: PPUSH
35905: CALL_OW 72
35909: IFFALSE 35997
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35911: LD_ADDR_VAR 0 8
35915: PUSH
35916: LD_VAR 0 18
35920: PPUSH
35921: LD_INT 2
35923: PUSH
35924: LD_INT 30
35926: PUSH
35927: LD_INT 32
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 30
35936: PUSH
35937: LD_INT 33
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: PPUSH
35949: CALL_OW 72
35953: PUSH
35954: FOR_IN
35955: IFFALSE 35995
// begin if not GetBWeapon ( i ) then
35957: LD_VAR 0 8
35961: PPUSH
35962: CALL_OW 269
35966: NOT
35967: IFFALSE 35993
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35969: LD_VAR 0 8
35973: PPUSH
35974: LD_VAR 0 8
35978: PPUSH
35979: LD_VAR 0 2
35983: PPUSH
35984: CALL 37243 0 2
35988: PPUSH
35989: CALL_OW 431
// end ;
35993: GO 35954
35995: POP
35996: POP
// end ; for i = 1 to personel do
35997: LD_ADDR_VAR 0 8
36001: PUSH
36002: DOUBLE
36003: LD_INT 1
36005: DEC
36006: ST_TO_ADDR
36007: LD_VAR 0 6
36011: PUSH
36012: FOR_TO
36013: IFFALSE 37077
// begin if i > 4 then
36015: LD_VAR 0 8
36019: PUSH
36020: LD_INT 4
36022: GREATER
36023: IFFALSE 36027
// break ;
36025: GO 37077
// case i of 1 :
36027: LD_VAR 0 8
36031: PUSH
36032: LD_INT 1
36034: DOUBLE
36035: EQUAL
36036: IFTRUE 36040
36038: GO 36120
36040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36041: LD_ADDR_VAR 0 12
36045: PUSH
36046: LD_VAR 0 18
36050: PPUSH
36051: LD_INT 22
36053: PUSH
36054: LD_VAR 0 16
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 58
36065: PUSH
36066: EMPTY
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: LD_INT 30
36074: PUSH
36075: LD_INT 32
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 30
36084: PUSH
36085: LD_INT 4
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 30
36094: PUSH
36095: LD_INT 5
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: PPUSH
36113: CALL_OW 72
36117: ST_TO_ADDR
36118: GO 36342
36120: LD_INT 2
36122: DOUBLE
36123: EQUAL
36124: IFTRUE 36128
36126: GO 36190
36128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36129: LD_ADDR_VAR 0 12
36133: PUSH
36134: LD_VAR 0 18
36138: PPUSH
36139: LD_INT 22
36141: PUSH
36142: LD_VAR 0 16
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: LD_INT 30
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 30
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PPUSH
36183: CALL_OW 72
36187: ST_TO_ADDR
36188: GO 36342
36190: LD_INT 3
36192: DOUBLE
36193: EQUAL
36194: IFTRUE 36198
36196: GO 36260
36198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36199: LD_ADDR_VAR 0 12
36203: PUSH
36204: LD_VAR 0 18
36208: PPUSH
36209: LD_INT 22
36211: PUSH
36212: LD_VAR 0 16
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 30
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 30
36236: PUSH
36237: LD_INT 3
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PPUSH
36253: CALL_OW 72
36257: ST_TO_ADDR
36258: GO 36342
36260: LD_INT 4
36262: DOUBLE
36263: EQUAL
36264: IFTRUE 36268
36266: GO 36341
36268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36269: LD_ADDR_VAR 0 12
36273: PUSH
36274: LD_VAR 0 18
36278: PPUSH
36279: LD_INT 22
36281: PUSH
36282: LD_VAR 0 16
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 30
36296: PUSH
36297: LD_INT 6
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 30
36306: PUSH
36307: LD_INT 7
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 30
36316: PUSH
36317: LD_INT 8
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PPUSH
36334: CALL_OW 72
36338: ST_TO_ADDR
36339: GO 36342
36341: POP
// if i = 1 then
36342: LD_VAR 0 8
36346: PUSH
36347: LD_INT 1
36349: EQUAL
36350: IFFALSE 36461
// begin tmp := [ ] ;
36352: LD_ADDR_VAR 0 19
36356: PUSH
36357: EMPTY
36358: ST_TO_ADDR
// for j in f do
36359: LD_ADDR_VAR 0 9
36363: PUSH
36364: LD_VAR 0 12
36368: PUSH
36369: FOR_IN
36370: IFFALSE 36443
// if GetBType ( j ) = b_bunker then
36372: LD_VAR 0 9
36376: PPUSH
36377: CALL_OW 266
36381: PUSH
36382: LD_INT 32
36384: EQUAL
36385: IFFALSE 36412
// tmp := Insert ( tmp , 1 , j ) else
36387: LD_ADDR_VAR 0 19
36391: PUSH
36392: LD_VAR 0 19
36396: PPUSH
36397: LD_INT 1
36399: PPUSH
36400: LD_VAR 0 9
36404: PPUSH
36405: CALL_OW 2
36409: ST_TO_ADDR
36410: GO 36441
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36412: LD_ADDR_VAR 0 19
36416: PUSH
36417: LD_VAR 0 19
36421: PPUSH
36422: LD_VAR 0 19
36426: PUSH
36427: LD_INT 1
36429: PLUS
36430: PPUSH
36431: LD_VAR 0 9
36435: PPUSH
36436: CALL_OW 2
36440: ST_TO_ADDR
36441: GO 36369
36443: POP
36444: POP
// if tmp then
36445: LD_VAR 0 19
36449: IFFALSE 36461
// f := tmp ;
36451: LD_ADDR_VAR 0 12
36455: PUSH
36456: LD_VAR 0 19
36460: ST_TO_ADDR
// end ; x := personel [ i ] ;
36461: LD_ADDR_VAR 0 13
36465: PUSH
36466: LD_VAR 0 6
36470: PUSH
36471: LD_VAR 0 8
36475: ARRAY
36476: ST_TO_ADDR
// if x = - 1 then
36477: LD_VAR 0 13
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: EQUAL
36486: IFFALSE 36695
// begin for j in f do
36488: LD_ADDR_VAR 0 9
36492: PUSH
36493: LD_VAR 0 12
36497: PUSH
36498: FOR_IN
36499: IFFALSE 36691
// repeat InitHc ;
36501: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36505: LD_VAR 0 9
36509: PPUSH
36510: CALL_OW 266
36514: PUSH
36515: LD_INT 5
36517: EQUAL
36518: IFFALSE 36588
// begin if UnitsInside ( j ) < 3 then
36520: LD_VAR 0 9
36524: PPUSH
36525: CALL_OW 313
36529: PUSH
36530: LD_INT 3
36532: LESS
36533: IFFALSE 36569
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36535: LD_INT 0
36537: PPUSH
36538: LD_INT 5
36540: PUSH
36541: LD_INT 8
36543: PUSH
36544: LD_INT 9
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: PUSH
36552: LD_VAR 0 17
36556: ARRAY
36557: PPUSH
36558: LD_VAR 0 4
36562: PPUSH
36563: CALL_OW 380
36567: GO 36586
// PrepareHuman ( false , i , skill ) ;
36569: LD_INT 0
36571: PPUSH
36572: LD_VAR 0 8
36576: PPUSH
36577: LD_VAR 0 4
36581: PPUSH
36582: CALL_OW 380
// end else
36586: GO 36605
// PrepareHuman ( false , i , skill ) ;
36588: LD_INT 0
36590: PPUSH
36591: LD_VAR 0 8
36595: PPUSH
36596: LD_VAR 0 4
36600: PPUSH
36601: CALL_OW 380
// un := CreateHuman ;
36605: LD_ADDR_VAR 0 14
36609: PUSH
36610: CALL_OW 44
36614: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36615: LD_ADDR_VAR 0 7
36619: PUSH
36620: LD_VAR 0 7
36624: PPUSH
36625: LD_INT 1
36627: PPUSH
36628: LD_VAR 0 14
36632: PPUSH
36633: CALL_OW 2
36637: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36638: LD_VAR 0 14
36642: PPUSH
36643: LD_VAR 0 9
36647: PPUSH
36648: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36652: LD_VAR 0 9
36656: PPUSH
36657: CALL_OW 313
36661: PUSH
36662: LD_INT 6
36664: EQUAL
36665: PUSH
36666: LD_VAR 0 9
36670: PPUSH
36671: CALL_OW 266
36675: PUSH
36676: LD_INT 32
36678: PUSH
36679: LD_INT 31
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: IN
36686: OR
36687: IFFALSE 36501
36689: GO 36498
36691: POP
36692: POP
// end else
36693: GO 37075
// for j = 1 to x do
36695: LD_ADDR_VAR 0 9
36699: PUSH
36700: DOUBLE
36701: LD_INT 1
36703: DEC
36704: ST_TO_ADDR
36705: LD_VAR 0 13
36709: PUSH
36710: FOR_TO
36711: IFFALSE 37073
// begin InitHc ;
36713: CALL_OW 19
// if not f then
36717: LD_VAR 0 12
36721: NOT
36722: IFFALSE 36811
// begin PrepareHuman ( false , i , skill ) ;
36724: LD_INT 0
36726: PPUSH
36727: LD_VAR 0 8
36731: PPUSH
36732: LD_VAR 0 4
36736: PPUSH
36737: CALL_OW 380
// un := CreateHuman ;
36741: LD_ADDR_VAR 0 14
36745: PUSH
36746: CALL_OW 44
36750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36751: LD_ADDR_VAR 0 7
36755: PUSH
36756: LD_VAR 0 7
36760: PPUSH
36761: LD_INT 1
36763: PPUSH
36764: LD_VAR 0 14
36768: PPUSH
36769: CALL_OW 2
36773: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36774: LD_VAR 0 14
36778: PPUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 250
36788: PPUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 251
36798: PPUSH
36799: LD_INT 10
36801: PPUSH
36802: LD_INT 0
36804: PPUSH
36805: CALL_OW 50
// continue ;
36809: GO 36710
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36811: LD_VAR 0 12
36815: PUSH
36816: LD_INT 1
36818: ARRAY
36819: PPUSH
36820: CALL_OW 313
36824: PUSH
36825: LD_VAR 0 12
36829: PUSH
36830: LD_INT 1
36832: ARRAY
36833: PPUSH
36834: CALL_OW 266
36838: PUSH
36839: LD_INT 32
36841: PUSH
36842: LD_INT 31
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: IN
36849: AND
36850: PUSH
36851: LD_VAR 0 12
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: CALL_OW 313
36864: PUSH
36865: LD_INT 6
36867: EQUAL
36868: OR
36869: IFFALSE 36889
// f := Delete ( f , 1 ) ;
36871: LD_ADDR_VAR 0 12
36875: PUSH
36876: LD_VAR 0 12
36880: PPUSH
36881: LD_INT 1
36883: PPUSH
36884: CALL_OW 3
36888: ST_TO_ADDR
// if not f then
36889: LD_VAR 0 12
36893: NOT
36894: IFFALSE 36912
// begin x := x + 2 ;
36896: LD_ADDR_VAR 0 13
36900: PUSH
36901: LD_VAR 0 13
36905: PUSH
36906: LD_INT 2
36908: PLUS
36909: ST_TO_ADDR
// continue ;
36910: GO 36710
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36912: LD_VAR 0 12
36916: PUSH
36917: LD_INT 1
36919: ARRAY
36920: PPUSH
36921: CALL_OW 266
36925: PUSH
36926: LD_INT 5
36928: EQUAL
36929: IFFALSE 37003
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36931: LD_VAR 0 12
36935: PUSH
36936: LD_INT 1
36938: ARRAY
36939: PPUSH
36940: CALL_OW 313
36944: PUSH
36945: LD_INT 3
36947: LESS
36948: IFFALSE 36984
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36950: LD_INT 0
36952: PPUSH
36953: LD_INT 5
36955: PUSH
36956: LD_INT 8
36958: PUSH
36959: LD_INT 9
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: PUSH
36967: LD_VAR 0 17
36971: ARRAY
36972: PPUSH
36973: LD_VAR 0 4
36977: PPUSH
36978: CALL_OW 380
36982: GO 37001
// PrepareHuman ( false , i , skill ) ;
36984: LD_INT 0
36986: PPUSH
36987: LD_VAR 0 8
36991: PPUSH
36992: LD_VAR 0 4
36996: PPUSH
36997: CALL_OW 380
// end else
37001: GO 37020
// PrepareHuman ( false , i , skill ) ;
37003: LD_INT 0
37005: PPUSH
37006: LD_VAR 0 8
37010: PPUSH
37011: LD_VAR 0 4
37015: PPUSH
37016: CALL_OW 380
// un := CreateHuman ;
37020: LD_ADDR_VAR 0 14
37024: PUSH
37025: CALL_OW 44
37029: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37030: LD_ADDR_VAR 0 7
37034: PUSH
37035: LD_VAR 0 7
37039: PPUSH
37040: LD_INT 1
37042: PPUSH
37043: LD_VAR 0 14
37047: PPUSH
37048: CALL_OW 2
37052: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37053: LD_VAR 0 14
37057: PPUSH
37058: LD_VAR 0 12
37062: PUSH
37063: LD_INT 1
37065: ARRAY
37066: PPUSH
37067: CALL_OW 52
// end ;
37071: GO 36710
37073: POP
37074: POP
// end ;
37075: GO 36012
37077: POP
37078: POP
// result := result ^ buildings ;
37079: LD_ADDR_VAR 0 7
37083: PUSH
37084: LD_VAR 0 7
37088: PUSH
37089: LD_VAR 0 18
37093: ADD
37094: ST_TO_ADDR
// end else
37095: GO 37238
// begin for i = 1 to personel do
37097: LD_ADDR_VAR 0 8
37101: PUSH
37102: DOUBLE
37103: LD_INT 1
37105: DEC
37106: ST_TO_ADDR
37107: LD_VAR 0 6
37111: PUSH
37112: FOR_TO
37113: IFFALSE 37236
// begin if i > 4 then
37115: LD_VAR 0 8
37119: PUSH
37120: LD_INT 4
37122: GREATER
37123: IFFALSE 37127
// break ;
37125: GO 37236
// x := personel [ i ] ;
37127: LD_ADDR_VAR 0 13
37131: PUSH
37132: LD_VAR 0 6
37136: PUSH
37137: LD_VAR 0 8
37141: ARRAY
37142: ST_TO_ADDR
// if x = - 1 then
37143: LD_VAR 0 13
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: EQUAL
37152: IFFALSE 37156
// continue ;
37154: GO 37112
// PrepareHuman ( false , i , skill ) ;
37156: LD_INT 0
37158: PPUSH
37159: LD_VAR 0 8
37163: PPUSH
37164: LD_VAR 0 4
37168: PPUSH
37169: CALL_OW 380
// un := CreateHuman ;
37173: LD_ADDR_VAR 0 14
37177: PUSH
37178: CALL_OW 44
37182: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37183: LD_VAR 0 14
37187: PPUSH
37188: LD_VAR 0 1
37192: PPUSH
37193: CALL_OW 250
37197: PPUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 251
37207: PPUSH
37208: LD_INT 10
37210: PPUSH
37211: LD_INT 0
37213: PPUSH
37214: CALL_OW 50
// result := result ^ un ;
37218: LD_ADDR_VAR 0 7
37222: PUSH
37223: LD_VAR 0 7
37227: PUSH
37228: LD_VAR 0 14
37232: ADD
37233: ST_TO_ADDR
// end ;
37234: GO 37112
37236: POP
37237: POP
// end ; end ;
37238: LD_VAR 0 7
37242: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37243: LD_INT 0
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
37259: PPUSH
37260: PPUSH
// result := false ;
37261: LD_ADDR_VAR 0 3
37265: PUSH
37266: LD_INT 0
37268: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37269: LD_VAR 0 1
37273: NOT
37274: PUSH
37275: LD_VAR 0 1
37279: PPUSH
37280: CALL_OW 266
37284: PUSH
37285: LD_INT 32
37287: PUSH
37288: LD_INT 33
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: IN
37295: NOT
37296: OR
37297: IFFALSE 37301
// exit ;
37299: GO 38440
// nat := GetNation ( tower ) ;
37301: LD_ADDR_VAR 0 12
37305: PUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 248
37315: ST_TO_ADDR
// side := GetSide ( tower ) ;
37316: LD_ADDR_VAR 0 16
37320: PUSH
37321: LD_VAR 0 1
37325: PPUSH
37326: CALL_OW 255
37330: ST_TO_ADDR
// x := GetX ( tower ) ;
37331: LD_ADDR_VAR 0 10
37335: PUSH
37336: LD_VAR 0 1
37340: PPUSH
37341: CALL_OW 250
37345: ST_TO_ADDR
// y := GetY ( tower ) ;
37346: LD_ADDR_VAR 0 11
37350: PUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 251
37360: ST_TO_ADDR
// if not x or not y then
37361: LD_VAR 0 10
37365: NOT
37366: PUSH
37367: LD_VAR 0 11
37371: NOT
37372: OR
37373: IFFALSE 37377
// exit ;
37375: GO 38440
// weapon := 0 ;
37377: LD_ADDR_VAR 0 18
37381: PUSH
37382: LD_INT 0
37384: ST_TO_ADDR
// fac_list := [ ] ;
37385: LD_ADDR_VAR 0 17
37389: PUSH
37390: EMPTY
37391: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37392: LD_ADDR_VAR 0 6
37396: PUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 274
37406: PPUSH
37407: LD_VAR 0 2
37411: PPUSH
37412: LD_INT 0
37414: PPUSH
37415: CALL 34980 0 3
37419: PPUSH
37420: LD_INT 30
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PPUSH
37430: CALL_OW 72
37434: ST_TO_ADDR
// if not factories then
37435: LD_VAR 0 6
37439: NOT
37440: IFFALSE 37444
// exit ;
37442: GO 38440
// for i in factories do
37444: LD_ADDR_VAR 0 8
37448: PUSH
37449: LD_VAR 0 6
37453: PUSH
37454: FOR_IN
37455: IFFALSE 37480
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37457: LD_ADDR_VAR 0 17
37461: PUSH
37462: LD_VAR 0 17
37466: PUSH
37467: LD_VAR 0 8
37471: PPUSH
37472: CALL_OW 478
37476: UNION
37477: ST_TO_ADDR
37478: GO 37454
37480: POP
37481: POP
// if not fac_list then
37482: LD_VAR 0 17
37486: NOT
37487: IFFALSE 37491
// exit ;
37489: GO 38440
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37491: LD_ADDR_VAR 0 5
37495: PUSH
37496: LD_INT 4
37498: PUSH
37499: LD_INT 5
37501: PUSH
37502: LD_INT 9
37504: PUSH
37505: LD_INT 10
37507: PUSH
37508: LD_INT 6
37510: PUSH
37511: LD_INT 7
37513: PUSH
37514: LD_INT 11
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 27
37528: PUSH
37529: LD_INT 28
37531: PUSH
37532: LD_INT 26
37534: PUSH
37535: LD_INT 30
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 43
37546: PUSH
37547: LD_INT 44
37549: PUSH
37550: LD_INT 46
37552: PUSH
37553: LD_INT 45
37555: PUSH
37556: LD_INT 47
37558: PUSH
37559: LD_INT 49
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: PUSH
37575: LD_VAR 0 12
37579: ARRAY
37580: ST_TO_ADDR
// for i in list do
37581: LD_ADDR_VAR 0 8
37585: PUSH
37586: LD_VAR 0 5
37590: PUSH
37591: FOR_IN
37592: IFFALSE 37625
// if not i in fac_list then
37594: LD_VAR 0 8
37598: PUSH
37599: LD_VAR 0 17
37603: IN
37604: NOT
37605: IFFALSE 37623
// list := list diff i ;
37607: LD_ADDR_VAR 0 5
37611: PUSH
37612: LD_VAR 0 5
37616: PUSH
37617: LD_VAR 0 8
37621: DIFF
37622: ST_TO_ADDR
37623: GO 37591
37625: POP
37626: POP
// if not list then
37627: LD_VAR 0 5
37631: NOT
37632: IFFALSE 37636
// exit ;
37634: GO 38440
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37636: LD_VAR 0 12
37640: PUSH
37641: LD_INT 3
37643: EQUAL
37644: PUSH
37645: LD_INT 49
37647: PUSH
37648: LD_VAR 0 5
37652: IN
37653: AND
37654: PUSH
37655: LD_INT 31
37657: PPUSH
37658: LD_VAR 0 16
37662: PPUSH
37663: CALL_OW 321
37667: PUSH
37668: LD_INT 2
37670: EQUAL
37671: AND
37672: IFFALSE 37732
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37674: LD_INT 22
37676: PUSH
37677: LD_VAR 0 16
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 35
37688: PUSH
37689: LD_INT 49
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 91
37698: PUSH
37699: LD_VAR 0 1
37703: PUSH
37704: LD_INT 10
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: LIST
37716: PPUSH
37717: CALL_OW 69
37721: NOT
37722: IFFALSE 37732
// weapon := ru_time_lapser ;
37724: LD_ADDR_VAR 0 18
37728: PUSH
37729: LD_INT 49
37731: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37732: LD_VAR 0 12
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: IN
37747: PUSH
37748: LD_INT 11
37750: PUSH
37751: LD_VAR 0 5
37755: IN
37756: PUSH
37757: LD_INT 30
37759: PUSH
37760: LD_VAR 0 5
37764: IN
37765: OR
37766: AND
37767: PUSH
37768: LD_INT 6
37770: PPUSH
37771: LD_VAR 0 16
37775: PPUSH
37776: CALL_OW 321
37780: PUSH
37781: LD_INT 2
37783: EQUAL
37784: AND
37785: IFFALSE 37950
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37787: LD_INT 22
37789: PUSH
37790: LD_VAR 0 16
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 35
37804: PUSH
37805: LD_INT 11
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 35
37814: PUSH
37815: LD_INT 30
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 91
37829: PUSH
37830: LD_VAR 0 1
37834: PUSH
37835: LD_INT 18
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: PPUSH
37848: CALL_OW 69
37852: NOT
37853: PUSH
37854: LD_INT 22
37856: PUSH
37857: LD_VAR 0 16
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: LD_INT 30
37871: PUSH
37872: LD_INT 32
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 30
37881: PUSH
37882: LD_INT 33
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 91
37896: PUSH
37897: LD_VAR 0 1
37901: PUSH
37902: LD_INT 12
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: PUSH
37915: EMPTY
37916: LIST
37917: PPUSH
37918: CALL_OW 69
37922: PUSH
37923: LD_INT 2
37925: GREATER
37926: AND
37927: IFFALSE 37950
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37929: LD_ADDR_VAR 0 18
37933: PUSH
37934: LD_INT 11
37936: PUSH
37937: LD_INT 30
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_VAR 0 12
37948: ARRAY
37949: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37950: LD_VAR 0 18
37954: NOT
37955: PUSH
37956: LD_INT 40
37958: PPUSH
37959: LD_VAR 0 16
37963: PPUSH
37964: CALL_OW 321
37968: PUSH
37969: LD_INT 2
37971: EQUAL
37972: AND
37973: PUSH
37974: LD_INT 7
37976: PUSH
37977: LD_VAR 0 5
37981: IN
37982: PUSH
37983: LD_INT 28
37985: PUSH
37986: LD_VAR 0 5
37990: IN
37991: OR
37992: PUSH
37993: LD_INT 45
37995: PUSH
37996: LD_VAR 0 5
38000: IN
38001: OR
38002: AND
38003: IFFALSE 38257
// begin hex := GetHexInfo ( x , y ) ;
38005: LD_ADDR_VAR 0 4
38009: PUSH
38010: LD_VAR 0 10
38014: PPUSH
38015: LD_VAR 0 11
38019: PPUSH
38020: CALL_OW 546
38024: ST_TO_ADDR
// if hex [ 1 ] then
38025: LD_VAR 0 4
38029: PUSH
38030: LD_INT 1
38032: ARRAY
38033: IFFALSE 38037
// exit ;
38035: GO 38440
// height := hex [ 2 ] ;
38037: LD_ADDR_VAR 0 15
38041: PUSH
38042: LD_VAR 0 4
38046: PUSH
38047: LD_INT 2
38049: ARRAY
38050: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38051: LD_ADDR_VAR 0 14
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: LD_INT 5
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: ST_TO_ADDR
// for i in tmp do
38074: LD_ADDR_VAR 0 8
38078: PUSH
38079: LD_VAR 0 14
38083: PUSH
38084: FOR_IN
38085: IFFALSE 38255
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38087: LD_ADDR_VAR 0 9
38091: PUSH
38092: LD_VAR 0 10
38096: PPUSH
38097: LD_VAR 0 8
38101: PPUSH
38102: LD_INT 5
38104: PPUSH
38105: CALL_OW 272
38109: PUSH
38110: LD_VAR 0 11
38114: PPUSH
38115: LD_VAR 0 8
38119: PPUSH
38120: LD_INT 5
38122: PPUSH
38123: CALL_OW 273
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38132: LD_VAR 0 9
38136: PUSH
38137: LD_INT 1
38139: ARRAY
38140: PPUSH
38141: LD_VAR 0 9
38145: PUSH
38146: LD_INT 2
38148: ARRAY
38149: PPUSH
38150: CALL_OW 488
38154: IFFALSE 38253
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38156: LD_ADDR_VAR 0 4
38160: PUSH
38161: LD_VAR 0 9
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: LD_VAR 0 9
38174: PUSH
38175: LD_INT 2
38177: ARRAY
38178: PPUSH
38179: CALL_OW 546
38183: ST_TO_ADDR
// if hex [ 1 ] then
38184: LD_VAR 0 4
38188: PUSH
38189: LD_INT 1
38191: ARRAY
38192: IFFALSE 38196
// continue ;
38194: GO 38084
// h := hex [ 2 ] ;
38196: LD_ADDR_VAR 0 13
38200: PUSH
38201: LD_VAR 0 4
38205: PUSH
38206: LD_INT 2
38208: ARRAY
38209: ST_TO_ADDR
// if h + 7 < height then
38210: LD_VAR 0 13
38214: PUSH
38215: LD_INT 7
38217: PLUS
38218: PUSH
38219: LD_VAR 0 15
38223: LESS
38224: IFFALSE 38253
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38226: LD_ADDR_VAR 0 18
38230: PUSH
38231: LD_INT 7
38233: PUSH
38234: LD_INT 28
38236: PUSH
38237: LD_INT 45
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: PUSH
38245: LD_VAR 0 12
38249: ARRAY
38250: ST_TO_ADDR
// break ;
38251: GO 38255
// end ; end ; end ;
38253: GO 38084
38255: POP
38256: POP
// end ; if not weapon then
38257: LD_VAR 0 18
38261: NOT
38262: IFFALSE 38322
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38264: LD_ADDR_VAR 0 5
38268: PUSH
38269: LD_VAR 0 5
38273: PUSH
38274: LD_INT 11
38276: PUSH
38277: LD_INT 30
38279: PUSH
38280: LD_INT 49
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: DIFF
38288: ST_TO_ADDR
// if not list then
38289: LD_VAR 0 5
38293: NOT
38294: IFFALSE 38298
// exit ;
38296: GO 38440
// weapon := list [ rand ( 1 , list ) ] ;
38298: LD_ADDR_VAR 0 18
38302: PUSH
38303: LD_VAR 0 5
38307: PUSH
38308: LD_INT 1
38310: PPUSH
38311: LD_VAR 0 5
38315: PPUSH
38316: CALL_OW 12
38320: ARRAY
38321: ST_TO_ADDR
// end ; if weapon then
38322: LD_VAR 0 18
38326: IFFALSE 38440
// begin tmp := CostOfWeapon ( weapon ) ;
38328: LD_ADDR_VAR 0 14
38332: PUSH
38333: LD_VAR 0 18
38337: PPUSH
38338: CALL_OW 451
38342: ST_TO_ADDR
// j := GetBase ( tower ) ;
38343: LD_ADDR_VAR 0 9
38347: PUSH
38348: LD_VAR 0 1
38352: PPUSH
38353: CALL_OW 274
38357: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38358: LD_VAR 0 9
38362: PPUSH
38363: LD_INT 1
38365: PPUSH
38366: CALL_OW 275
38370: PUSH
38371: LD_VAR 0 14
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: GREATEREQUAL
38380: PUSH
38381: LD_VAR 0 9
38385: PPUSH
38386: LD_INT 2
38388: PPUSH
38389: CALL_OW 275
38393: PUSH
38394: LD_VAR 0 14
38398: PUSH
38399: LD_INT 2
38401: ARRAY
38402: GREATEREQUAL
38403: AND
38404: PUSH
38405: LD_VAR 0 9
38409: PPUSH
38410: LD_INT 3
38412: PPUSH
38413: CALL_OW 275
38417: PUSH
38418: LD_VAR 0 14
38422: PUSH
38423: LD_INT 3
38425: ARRAY
38426: GREATEREQUAL
38427: AND
38428: IFFALSE 38440
// result := weapon ;
38430: LD_ADDR_VAR 0 3
38434: PUSH
38435: LD_VAR 0 18
38439: ST_TO_ADDR
// end ; end ;
38440: LD_VAR 0 3
38444: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38445: LD_INT 0
38447: PPUSH
38448: PPUSH
// result := true ;
38449: LD_ADDR_VAR 0 3
38453: PUSH
38454: LD_INT 1
38456: ST_TO_ADDR
// if array1 = array2 then
38457: LD_VAR 0 1
38461: PUSH
38462: LD_VAR 0 2
38466: EQUAL
38467: IFFALSE 38527
// begin for i = 1 to array1 do
38469: LD_ADDR_VAR 0 4
38473: PUSH
38474: DOUBLE
38475: LD_INT 1
38477: DEC
38478: ST_TO_ADDR
38479: LD_VAR 0 1
38483: PUSH
38484: FOR_TO
38485: IFFALSE 38523
// if array1 [ i ] <> array2 [ i ] then
38487: LD_VAR 0 1
38491: PUSH
38492: LD_VAR 0 4
38496: ARRAY
38497: PUSH
38498: LD_VAR 0 2
38502: PUSH
38503: LD_VAR 0 4
38507: ARRAY
38508: NONEQUAL
38509: IFFALSE 38521
// begin result := false ;
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_INT 0
38518: ST_TO_ADDR
// break ;
38519: GO 38523
// end ;
38521: GO 38484
38523: POP
38524: POP
// end else
38525: GO 38535
// result := false ;
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_INT 0
38534: ST_TO_ADDR
// end ;
38535: LD_VAR 0 3
38539: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38540: LD_INT 0
38542: PPUSH
38543: PPUSH
// if not array1 or not array2 then
38544: LD_VAR 0 1
38548: NOT
38549: PUSH
38550: LD_VAR 0 2
38554: NOT
38555: OR
38556: IFFALSE 38560
// exit ;
38558: GO 38624
// result := true ;
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_INT 1
38567: ST_TO_ADDR
// for i = 1 to array1 do
38568: LD_ADDR_VAR 0 4
38572: PUSH
38573: DOUBLE
38574: LD_INT 1
38576: DEC
38577: ST_TO_ADDR
38578: LD_VAR 0 1
38582: PUSH
38583: FOR_TO
38584: IFFALSE 38622
// if array1 [ i ] <> array2 [ i ] then
38586: LD_VAR 0 1
38590: PUSH
38591: LD_VAR 0 4
38595: ARRAY
38596: PUSH
38597: LD_VAR 0 2
38601: PUSH
38602: LD_VAR 0 4
38606: ARRAY
38607: NONEQUAL
38608: IFFALSE 38620
// begin result := false ;
38610: LD_ADDR_VAR 0 3
38614: PUSH
38615: LD_INT 0
38617: ST_TO_ADDR
// break ;
38618: GO 38622
// end ;
38620: GO 38583
38622: POP
38623: POP
// end ;
38624: LD_VAR 0 3
38628: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38629: LD_INT 0
38631: PPUSH
38632: PPUSH
38633: PPUSH
// pom := GetBase ( fac ) ;
38634: LD_ADDR_VAR 0 5
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 274
38648: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38649: LD_ADDR_VAR 0 4
38653: PUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: PPUSH
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 2
38670: ARRAY
38671: PPUSH
38672: LD_VAR 0 2
38676: PUSH
38677: LD_INT 3
38679: ARRAY
38680: PPUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 4
38688: ARRAY
38689: PPUSH
38690: CALL_OW 449
38694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38695: LD_ADDR_VAR 0 3
38699: PUSH
38700: LD_VAR 0 5
38704: PPUSH
38705: LD_INT 1
38707: PPUSH
38708: CALL_OW 275
38712: PUSH
38713: LD_VAR 0 4
38717: PUSH
38718: LD_INT 1
38720: ARRAY
38721: GREATEREQUAL
38722: PUSH
38723: LD_VAR 0 5
38727: PPUSH
38728: LD_INT 2
38730: PPUSH
38731: CALL_OW 275
38735: PUSH
38736: LD_VAR 0 4
38740: PUSH
38741: LD_INT 2
38743: ARRAY
38744: GREATEREQUAL
38745: AND
38746: PUSH
38747: LD_VAR 0 5
38751: PPUSH
38752: LD_INT 3
38754: PPUSH
38755: CALL_OW 275
38759: PUSH
38760: LD_VAR 0 4
38764: PUSH
38765: LD_INT 3
38767: ARRAY
38768: GREATEREQUAL
38769: AND
38770: ST_TO_ADDR
// end ;
38771: LD_VAR 0 3
38775: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
// pom := GetBase ( building ) ;
38782: LD_ADDR_VAR 0 3
38786: PUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: CALL_OW 274
38796: ST_TO_ADDR
// if not pom then
38797: LD_VAR 0 3
38801: NOT
38802: IFFALSE 38806
// exit ;
38804: GO 38976
// btype := GetBType ( building ) ;
38806: LD_ADDR_VAR 0 5
38810: PUSH
38811: LD_VAR 0 1
38815: PPUSH
38816: CALL_OW 266
38820: ST_TO_ADDR
// if btype = b_armoury then
38821: LD_VAR 0 5
38825: PUSH
38826: LD_INT 4
38828: EQUAL
38829: IFFALSE 38839
// btype := b_barracks ;
38831: LD_ADDR_VAR 0 5
38835: PUSH
38836: LD_INT 5
38838: ST_TO_ADDR
// if btype = b_depot then
38839: LD_VAR 0 5
38843: PUSH
38844: LD_INT 0
38846: EQUAL
38847: IFFALSE 38857
// btype := b_warehouse ;
38849: LD_ADDR_VAR 0 5
38853: PUSH
38854: LD_INT 1
38856: ST_TO_ADDR
// if btype = b_workshop then
38857: LD_VAR 0 5
38861: PUSH
38862: LD_INT 2
38864: EQUAL
38865: IFFALSE 38875
// btype := b_factory ;
38867: LD_ADDR_VAR 0 5
38871: PUSH
38872: LD_INT 3
38874: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38875: LD_ADDR_VAR 0 4
38879: PUSH
38880: LD_VAR 0 5
38884: PPUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 248
38894: PPUSH
38895: CALL_OW 450
38899: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38900: LD_ADDR_VAR 0 2
38904: PUSH
38905: LD_VAR 0 3
38909: PPUSH
38910: LD_INT 1
38912: PPUSH
38913: CALL_OW 275
38917: PUSH
38918: LD_VAR 0 4
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: GREATEREQUAL
38927: PUSH
38928: LD_VAR 0 3
38932: PPUSH
38933: LD_INT 2
38935: PPUSH
38936: CALL_OW 275
38940: PUSH
38941: LD_VAR 0 4
38945: PUSH
38946: LD_INT 2
38948: ARRAY
38949: GREATEREQUAL
38950: AND
38951: PUSH
38952: LD_VAR 0 3
38956: PPUSH
38957: LD_INT 3
38959: PPUSH
38960: CALL_OW 275
38964: PUSH
38965: LD_VAR 0 4
38969: PUSH
38970: LD_INT 3
38972: ARRAY
38973: GREATEREQUAL
38974: AND
38975: ST_TO_ADDR
// end ;
38976: LD_VAR 0 2
38980: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38981: LD_INT 0
38983: PPUSH
38984: PPUSH
38985: PPUSH
// pom := GetBase ( building ) ;
38986: LD_ADDR_VAR 0 4
38990: PUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: CALL_OW 274
39000: ST_TO_ADDR
// if not pom then
39001: LD_VAR 0 4
39005: NOT
39006: IFFALSE 39010
// exit ;
39008: GO 39111
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39010: LD_ADDR_VAR 0 5
39014: PUSH
39015: LD_VAR 0 2
39019: PPUSH
39020: LD_VAR 0 1
39024: PPUSH
39025: CALL_OW 248
39029: PPUSH
39030: CALL_OW 450
39034: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39035: LD_ADDR_VAR 0 3
39039: PUSH
39040: LD_VAR 0 4
39044: PPUSH
39045: LD_INT 1
39047: PPUSH
39048: CALL_OW 275
39052: PUSH
39053: LD_VAR 0 5
39057: PUSH
39058: LD_INT 1
39060: ARRAY
39061: GREATEREQUAL
39062: PUSH
39063: LD_VAR 0 4
39067: PPUSH
39068: LD_INT 2
39070: PPUSH
39071: CALL_OW 275
39075: PUSH
39076: LD_VAR 0 5
39080: PUSH
39081: LD_INT 2
39083: ARRAY
39084: GREATEREQUAL
39085: AND
39086: PUSH
39087: LD_VAR 0 4
39091: PPUSH
39092: LD_INT 3
39094: PPUSH
39095: CALL_OW 275
39099: PUSH
39100: LD_VAR 0 5
39104: PUSH
39105: LD_INT 3
39107: ARRAY
39108: GREATEREQUAL
39109: AND
39110: ST_TO_ADDR
// end ;
39111: LD_VAR 0 3
39115: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39116: LD_INT 0
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
// result := false ;
39129: LD_ADDR_VAR 0 8
39133: PUSH
39134: LD_INT 0
39136: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39137: LD_VAR 0 5
39141: NOT
39142: PUSH
39143: LD_VAR 0 1
39147: NOT
39148: OR
39149: PUSH
39150: LD_VAR 0 2
39154: NOT
39155: OR
39156: PUSH
39157: LD_VAR 0 3
39161: NOT
39162: OR
39163: IFFALSE 39167
// exit ;
39165: GO 39981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39167: LD_ADDR_VAR 0 14
39171: PUSH
39172: LD_VAR 0 1
39176: PPUSH
39177: LD_VAR 0 2
39181: PPUSH
39182: LD_VAR 0 3
39186: PPUSH
39187: LD_VAR 0 4
39191: PPUSH
39192: LD_VAR 0 5
39196: PUSH
39197: LD_INT 1
39199: ARRAY
39200: PPUSH
39201: CALL_OW 248
39205: PPUSH
39206: LD_INT 0
39208: PPUSH
39209: CALL 40818 0 6
39213: ST_TO_ADDR
// if not hexes then
39214: LD_VAR 0 14
39218: NOT
39219: IFFALSE 39223
// exit ;
39221: GO 39981
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39223: LD_ADDR_VAR 0 17
39227: PUSH
39228: LD_VAR 0 5
39232: PPUSH
39233: LD_INT 22
39235: PUSH
39236: LD_VAR 0 13
39240: PPUSH
39241: CALL_OW 255
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 30
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 30
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PPUSH
39282: CALL_OW 72
39286: ST_TO_ADDR
// for i = 1 to hexes do
39287: LD_ADDR_VAR 0 9
39291: PUSH
39292: DOUBLE
39293: LD_INT 1
39295: DEC
39296: ST_TO_ADDR
39297: LD_VAR 0 14
39301: PUSH
39302: FOR_TO
39303: IFFALSE 39979
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39305: LD_ADDR_VAR 0 13
39309: PUSH
39310: LD_VAR 0 14
39314: PUSH
39315: LD_VAR 0 9
39319: ARRAY
39320: PUSH
39321: LD_INT 1
39323: ARRAY
39324: PPUSH
39325: LD_VAR 0 14
39329: PUSH
39330: LD_VAR 0 9
39334: ARRAY
39335: PUSH
39336: LD_INT 2
39338: ARRAY
39339: PPUSH
39340: CALL_OW 428
39344: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39345: LD_VAR 0 14
39349: PUSH
39350: LD_VAR 0 9
39354: ARRAY
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: PPUSH
39360: LD_VAR 0 14
39364: PUSH
39365: LD_VAR 0 9
39369: ARRAY
39370: PUSH
39371: LD_INT 2
39373: ARRAY
39374: PPUSH
39375: CALL_OW 351
39379: PUSH
39380: LD_VAR 0 14
39384: PUSH
39385: LD_VAR 0 9
39389: ARRAY
39390: PUSH
39391: LD_INT 1
39393: ARRAY
39394: PPUSH
39395: LD_VAR 0 14
39399: PUSH
39400: LD_VAR 0 9
39404: ARRAY
39405: PUSH
39406: LD_INT 2
39408: ARRAY
39409: PPUSH
39410: CALL_OW 488
39414: NOT
39415: OR
39416: PUSH
39417: LD_VAR 0 13
39421: PPUSH
39422: CALL_OW 247
39426: PUSH
39427: LD_INT 3
39429: EQUAL
39430: OR
39431: IFFALSE 39437
// exit ;
39433: POP
39434: POP
39435: GO 39981
// if not tmp then
39437: LD_VAR 0 13
39441: NOT
39442: IFFALSE 39446
// continue ;
39444: GO 39302
// result := true ;
39446: LD_ADDR_VAR 0 8
39450: PUSH
39451: LD_INT 1
39453: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39454: LD_VAR 0 6
39458: PUSH
39459: LD_VAR 0 13
39463: PPUSH
39464: CALL_OW 247
39468: PUSH
39469: LD_INT 2
39471: EQUAL
39472: AND
39473: PUSH
39474: LD_VAR 0 13
39478: PPUSH
39479: CALL_OW 263
39483: PUSH
39484: LD_INT 1
39486: EQUAL
39487: AND
39488: IFFALSE 39652
// begin if IsDrivenBy ( tmp ) then
39490: LD_VAR 0 13
39494: PPUSH
39495: CALL_OW 311
39499: IFFALSE 39503
// continue ;
39501: GO 39302
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39503: LD_VAR 0 6
39507: PPUSH
39508: LD_INT 3
39510: PUSH
39511: LD_INT 60
39513: PUSH
39514: EMPTY
39515: LIST
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: LD_INT 55
39526: PUSH
39527: EMPTY
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PPUSH
39538: CALL_OW 72
39542: IFFALSE 39650
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39544: LD_ADDR_VAR 0 18
39548: PUSH
39549: LD_VAR 0 6
39553: PPUSH
39554: LD_INT 3
39556: PUSH
39557: LD_INT 60
39559: PUSH
39560: EMPTY
39561: LIST
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: PUSH
39570: LD_INT 55
39572: PUSH
39573: EMPTY
39574: LIST
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PPUSH
39584: CALL_OW 72
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: ST_TO_ADDR
// if IsInUnit ( driver ) then
39593: LD_VAR 0 18
39597: PPUSH
39598: CALL_OW 310
39602: IFFALSE 39613
// ComExit ( driver ) ;
39604: LD_VAR 0 18
39608: PPUSH
39609: CALL 64002 0 1
// AddComEnterUnit ( driver , tmp ) ;
39613: LD_VAR 0 18
39617: PPUSH
39618: LD_VAR 0 13
39622: PPUSH
39623: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39627: LD_VAR 0 18
39631: PPUSH
39632: LD_VAR 0 7
39636: PPUSH
39637: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39641: LD_VAR 0 18
39645: PPUSH
39646: CALL_OW 181
// end ; continue ;
39650: GO 39302
// end ; if not cleaners or not tmp in cleaners then
39652: LD_VAR 0 6
39656: NOT
39657: PUSH
39658: LD_VAR 0 13
39662: PUSH
39663: LD_VAR 0 6
39667: IN
39668: NOT
39669: OR
39670: IFFALSE 39977
// begin if dep then
39672: LD_VAR 0 17
39676: IFFALSE 39812
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39678: LD_ADDR_VAR 0 16
39682: PUSH
39683: LD_VAR 0 17
39687: PUSH
39688: LD_INT 1
39690: ARRAY
39691: PPUSH
39692: CALL_OW 250
39696: PPUSH
39697: LD_VAR 0 17
39701: PUSH
39702: LD_INT 1
39704: ARRAY
39705: PPUSH
39706: CALL_OW 254
39710: PPUSH
39711: LD_INT 5
39713: PPUSH
39714: CALL_OW 272
39718: PUSH
39719: LD_VAR 0 17
39723: PUSH
39724: LD_INT 1
39726: ARRAY
39727: PPUSH
39728: CALL_OW 251
39732: PPUSH
39733: LD_VAR 0 17
39737: PUSH
39738: LD_INT 1
39740: ARRAY
39741: PPUSH
39742: CALL_OW 254
39746: PPUSH
39747: LD_INT 5
39749: PPUSH
39750: CALL_OW 273
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39759: LD_VAR 0 16
39763: PUSH
39764: LD_INT 1
39766: ARRAY
39767: PPUSH
39768: LD_VAR 0 16
39772: PUSH
39773: LD_INT 2
39775: ARRAY
39776: PPUSH
39777: CALL_OW 488
39781: IFFALSE 39812
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39783: LD_VAR 0 13
39787: PPUSH
39788: LD_VAR 0 16
39792: PUSH
39793: LD_INT 1
39795: ARRAY
39796: PPUSH
39797: LD_VAR 0 16
39801: PUSH
39802: LD_INT 2
39804: ARRAY
39805: PPUSH
39806: CALL_OW 111
// continue ;
39810: GO 39302
// end ; end ; r := GetDir ( tmp ) ;
39812: LD_ADDR_VAR 0 15
39816: PUSH
39817: LD_VAR 0 13
39821: PPUSH
39822: CALL_OW 254
39826: ST_TO_ADDR
// if r = 5 then
39827: LD_VAR 0 15
39831: PUSH
39832: LD_INT 5
39834: EQUAL
39835: IFFALSE 39845
// r := 0 ;
39837: LD_ADDR_VAR 0 15
39841: PUSH
39842: LD_INT 0
39844: ST_TO_ADDR
// for j = r to 5 do
39845: LD_ADDR_VAR 0 10
39849: PUSH
39850: DOUBLE
39851: LD_VAR 0 15
39855: DEC
39856: ST_TO_ADDR
39857: LD_INT 5
39859: PUSH
39860: FOR_TO
39861: IFFALSE 39975
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39863: LD_ADDR_VAR 0 11
39867: PUSH
39868: LD_VAR 0 13
39872: PPUSH
39873: CALL_OW 250
39877: PPUSH
39878: LD_VAR 0 10
39882: PPUSH
39883: LD_INT 2
39885: PPUSH
39886: CALL_OW 272
39890: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39891: LD_ADDR_VAR 0 12
39895: PUSH
39896: LD_VAR 0 13
39900: PPUSH
39901: CALL_OW 251
39905: PPUSH
39906: LD_VAR 0 10
39910: PPUSH
39911: LD_INT 2
39913: PPUSH
39914: CALL_OW 273
39918: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39919: LD_VAR 0 11
39923: PPUSH
39924: LD_VAR 0 12
39928: PPUSH
39929: CALL_OW 488
39933: PUSH
39934: LD_VAR 0 11
39938: PPUSH
39939: LD_VAR 0 12
39943: PPUSH
39944: CALL_OW 428
39948: NOT
39949: AND
39950: IFFALSE 39973
// begin ComMoveXY ( tmp , _x , _y ) ;
39952: LD_VAR 0 13
39956: PPUSH
39957: LD_VAR 0 11
39961: PPUSH
39962: LD_VAR 0 12
39966: PPUSH
39967: CALL_OW 111
// break ;
39971: GO 39975
// end ; end ;
39973: GO 39860
39975: POP
39976: POP
// end ; end ;
39977: GO 39302
39979: POP
39980: POP
// end ;
39981: LD_VAR 0 8
39985: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39986: LD_INT 0
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
// result := false ;
39998: LD_ADDR_VAR 0 6
40002: PUSH
40003: LD_INT 0
40005: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40006: LD_VAR 0 1
40010: NOT
40011: PUSH
40012: LD_VAR 0 1
40016: PPUSH
40017: CALL_OW 266
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: IN
40032: NOT
40033: OR
40034: PUSH
40035: LD_VAR 0 2
40039: NOT
40040: OR
40041: PUSH
40042: LD_VAR 0 5
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: LD_INT 4
40061: PUSH
40062: LD_INT 5
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: IN
40073: NOT
40074: OR
40075: PUSH
40076: LD_VAR 0 3
40080: PPUSH
40081: LD_VAR 0 4
40085: PPUSH
40086: CALL_OW 488
40090: NOT
40091: OR
40092: IFFALSE 40096
// exit ;
40094: GO 40813
// pom := GetBase ( depot ) ;
40096: LD_ADDR_VAR 0 10
40100: PUSH
40101: LD_VAR 0 1
40105: PPUSH
40106: CALL_OW 274
40110: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40111: LD_ADDR_VAR 0 11
40115: PUSH
40116: LD_VAR 0 2
40120: PPUSH
40121: LD_VAR 0 1
40125: PPUSH
40126: CALL_OW 248
40130: PPUSH
40131: CALL_OW 450
40135: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40136: LD_VAR 0 10
40140: PPUSH
40141: LD_INT 1
40143: PPUSH
40144: CALL_OW 275
40148: PUSH
40149: LD_VAR 0 11
40153: PUSH
40154: LD_INT 1
40156: ARRAY
40157: GREATEREQUAL
40158: PUSH
40159: LD_VAR 0 10
40163: PPUSH
40164: LD_INT 2
40166: PPUSH
40167: CALL_OW 275
40171: PUSH
40172: LD_VAR 0 11
40176: PUSH
40177: LD_INT 2
40179: ARRAY
40180: GREATEREQUAL
40181: AND
40182: PUSH
40183: LD_VAR 0 10
40187: PPUSH
40188: LD_INT 3
40190: PPUSH
40191: CALL_OW 275
40195: PUSH
40196: LD_VAR 0 11
40200: PUSH
40201: LD_INT 3
40203: ARRAY
40204: GREATEREQUAL
40205: AND
40206: NOT
40207: IFFALSE 40211
// exit ;
40209: GO 40813
// if GetBType ( depot ) = b_depot then
40211: LD_VAR 0 1
40215: PPUSH
40216: CALL_OW 266
40220: PUSH
40221: LD_INT 0
40223: EQUAL
40224: IFFALSE 40236
// dist := 28 else
40226: LD_ADDR_VAR 0 14
40230: PUSH
40231: LD_INT 28
40233: ST_TO_ADDR
40234: GO 40244
// dist := 36 ;
40236: LD_ADDR_VAR 0 14
40240: PUSH
40241: LD_INT 36
40243: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40244: LD_VAR 0 1
40248: PPUSH
40249: LD_VAR 0 3
40253: PPUSH
40254: LD_VAR 0 4
40258: PPUSH
40259: CALL_OW 297
40263: PUSH
40264: LD_VAR 0 14
40268: GREATER
40269: IFFALSE 40273
// exit ;
40271: GO 40813
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40273: LD_ADDR_VAR 0 12
40277: PUSH
40278: LD_VAR 0 2
40282: PPUSH
40283: LD_VAR 0 3
40287: PPUSH
40288: LD_VAR 0 4
40292: PPUSH
40293: LD_VAR 0 5
40297: PPUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 248
40307: PPUSH
40308: LD_INT 0
40310: PPUSH
40311: CALL 40818 0 6
40315: ST_TO_ADDR
// if not hexes then
40316: LD_VAR 0 12
40320: NOT
40321: IFFALSE 40325
// exit ;
40323: GO 40813
// hex := GetHexInfo ( x , y ) ;
40325: LD_ADDR_VAR 0 15
40329: PUSH
40330: LD_VAR 0 3
40334: PPUSH
40335: LD_VAR 0 4
40339: PPUSH
40340: CALL_OW 546
40344: ST_TO_ADDR
// if hex [ 1 ] then
40345: LD_VAR 0 15
40349: PUSH
40350: LD_INT 1
40352: ARRAY
40353: IFFALSE 40357
// exit ;
40355: GO 40813
// height := hex [ 2 ] ;
40357: LD_ADDR_VAR 0 13
40361: PUSH
40362: LD_VAR 0 15
40366: PUSH
40367: LD_INT 2
40369: ARRAY
40370: ST_TO_ADDR
// for i = 1 to hexes do
40371: LD_ADDR_VAR 0 7
40375: PUSH
40376: DOUBLE
40377: LD_INT 1
40379: DEC
40380: ST_TO_ADDR
40381: LD_VAR 0 12
40385: PUSH
40386: FOR_TO
40387: IFFALSE 40717
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40389: LD_VAR 0 12
40393: PUSH
40394: LD_VAR 0 7
40398: ARRAY
40399: PUSH
40400: LD_INT 1
40402: ARRAY
40403: PPUSH
40404: LD_VAR 0 12
40408: PUSH
40409: LD_VAR 0 7
40413: ARRAY
40414: PUSH
40415: LD_INT 2
40417: ARRAY
40418: PPUSH
40419: CALL_OW 488
40423: NOT
40424: PUSH
40425: LD_VAR 0 12
40429: PUSH
40430: LD_VAR 0 7
40434: ARRAY
40435: PUSH
40436: LD_INT 1
40438: ARRAY
40439: PPUSH
40440: LD_VAR 0 12
40444: PUSH
40445: LD_VAR 0 7
40449: ARRAY
40450: PUSH
40451: LD_INT 2
40453: ARRAY
40454: PPUSH
40455: CALL_OW 428
40459: PUSH
40460: LD_INT 0
40462: GREATER
40463: OR
40464: PUSH
40465: LD_VAR 0 12
40469: PUSH
40470: LD_VAR 0 7
40474: ARRAY
40475: PUSH
40476: LD_INT 1
40478: ARRAY
40479: PPUSH
40480: LD_VAR 0 12
40484: PUSH
40485: LD_VAR 0 7
40489: ARRAY
40490: PUSH
40491: LD_INT 2
40493: ARRAY
40494: PPUSH
40495: CALL_OW 351
40499: OR
40500: IFFALSE 40506
// exit ;
40502: POP
40503: POP
40504: GO 40813
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40506: LD_ADDR_VAR 0 8
40510: PUSH
40511: LD_VAR 0 12
40515: PUSH
40516: LD_VAR 0 7
40520: ARRAY
40521: PUSH
40522: LD_INT 1
40524: ARRAY
40525: PPUSH
40526: LD_VAR 0 12
40530: PUSH
40531: LD_VAR 0 7
40535: ARRAY
40536: PUSH
40537: LD_INT 2
40539: ARRAY
40540: PPUSH
40541: CALL_OW 546
40545: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40546: LD_VAR 0 8
40550: PUSH
40551: LD_INT 1
40553: ARRAY
40554: PUSH
40555: LD_VAR 0 8
40559: PUSH
40560: LD_INT 2
40562: ARRAY
40563: PUSH
40564: LD_VAR 0 13
40568: PUSH
40569: LD_INT 2
40571: PLUS
40572: GREATER
40573: OR
40574: PUSH
40575: LD_VAR 0 8
40579: PUSH
40580: LD_INT 2
40582: ARRAY
40583: PUSH
40584: LD_VAR 0 13
40588: PUSH
40589: LD_INT 2
40591: MINUS
40592: LESS
40593: OR
40594: PUSH
40595: LD_VAR 0 8
40599: PUSH
40600: LD_INT 3
40602: ARRAY
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_INT 8
40609: PUSH
40610: LD_INT 9
40612: PUSH
40613: LD_INT 10
40615: PUSH
40616: LD_INT 11
40618: PUSH
40619: LD_INT 12
40621: PUSH
40622: LD_INT 13
40624: PUSH
40625: LD_INT 16
40627: PUSH
40628: LD_INT 17
40630: PUSH
40631: LD_INT 18
40633: PUSH
40634: LD_INT 19
40636: PUSH
40637: LD_INT 20
40639: PUSH
40640: LD_INT 21
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: IN
40658: NOT
40659: OR
40660: PUSH
40661: LD_VAR 0 8
40665: PUSH
40666: LD_INT 5
40668: ARRAY
40669: NOT
40670: OR
40671: PUSH
40672: LD_VAR 0 8
40676: PUSH
40677: LD_INT 6
40679: ARRAY
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 7
40689: PUSH
40690: LD_INT 9
40692: PUSH
40693: LD_INT 10
40695: PUSH
40696: LD_INT 11
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: IN
40707: NOT
40708: OR
40709: IFFALSE 40715
// exit ;
40711: POP
40712: POP
40713: GO 40813
// end ;
40715: GO 40386
40717: POP
40718: POP
// side := GetSide ( depot ) ;
40719: LD_ADDR_VAR 0 9
40723: PUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 255
40733: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40734: LD_VAR 0 9
40738: PPUSH
40739: LD_VAR 0 3
40743: PPUSH
40744: LD_VAR 0 4
40748: PPUSH
40749: LD_INT 20
40751: PPUSH
40752: CALL 33134 0 4
40756: PUSH
40757: LD_INT 4
40759: ARRAY
40760: IFFALSE 40764
// exit ;
40762: GO 40813
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40764: LD_VAR 0 2
40768: PUSH
40769: LD_INT 29
40771: PUSH
40772: LD_INT 30
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: IN
40779: PUSH
40780: LD_VAR 0 3
40784: PPUSH
40785: LD_VAR 0 4
40789: PPUSH
40790: LD_VAR 0 9
40794: PPUSH
40795: CALL_OW 440
40799: NOT
40800: AND
40801: IFFALSE 40805
// exit ;
40803: GO 40813
// result := true ;
40805: LD_ADDR_VAR 0 6
40809: PUSH
40810: LD_INT 1
40812: ST_TO_ADDR
// end ;
40813: LD_VAR 0 6
40817: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40818: LD_INT 0
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
// result = [ ] ;
40878: LD_ADDR_VAR 0 7
40882: PUSH
40883: EMPTY
40884: ST_TO_ADDR
// temp_list = [ ] ;
40885: LD_ADDR_VAR 0 9
40889: PUSH
40890: EMPTY
40891: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40892: LD_VAR 0 4
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 4
40911: PUSH
40912: LD_INT 5
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: IN
40923: NOT
40924: PUSH
40925: LD_VAR 0 1
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: IN
40940: PUSH
40941: LD_VAR 0 5
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: IN
40960: NOT
40961: AND
40962: OR
40963: IFFALSE 40967
// exit ;
40965: GO 59358
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40967: LD_VAR 0 1
40971: PUSH
40972: LD_INT 6
40974: PUSH
40975: LD_INT 7
40977: PUSH
40978: LD_INT 8
40980: PUSH
40981: LD_INT 13
40983: PUSH
40984: LD_INT 12
40986: PUSH
40987: LD_INT 15
40989: PUSH
40990: LD_INT 11
40992: PUSH
40993: LD_INT 14
40995: PUSH
40996: LD_INT 10
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: IN
41010: IFFALSE 41020
// btype = b_lab ;
41012: LD_ADDR_VAR 0 1
41016: PUSH
41017: LD_INT 6
41019: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41020: LD_VAR 0 6
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: IN
41039: NOT
41040: PUSH
41041: LD_VAR 0 1
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 6
41060: PUSH
41061: LD_INT 36
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: LD_INT 5
41069: PUSH
41070: LD_INT 31
41072: PUSH
41073: LD_INT 32
41075: PUSH
41076: LD_INT 33
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: IN
41092: NOT
41093: PUSH
41094: LD_VAR 0 6
41098: PUSH
41099: LD_INT 1
41101: EQUAL
41102: AND
41103: OR
41104: PUSH
41105: LD_VAR 0 1
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 3
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: IN
41120: NOT
41121: PUSH
41122: LD_VAR 0 6
41126: PUSH
41127: LD_INT 2
41129: EQUAL
41130: AND
41131: OR
41132: IFFALSE 41142
// mode = 0 ;
41134: LD_ADDR_VAR 0 6
41138: PUSH
41139: LD_INT 0
41141: ST_TO_ADDR
// case mode of 0 :
41142: LD_VAR 0 6
41146: PUSH
41147: LD_INT 0
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 52608
41155: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41156: LD_ADDR_VAR 0 11
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 3
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 3
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41349: LD_ADDR_VAR 0 12
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41545: LD_ADDR_VAR 0 13
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: LD_INT 3
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 3
41716: NEG
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41744: LD_ADDR_VAR 0 14
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 3
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 3
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41940: LD_ADDR_VAR 0 15
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 3
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42133: LD_ADDR_VAR 0 16
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 3
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: LD_INT 3
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42326: LD_ADDR_VAR 0 17
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42556: LD_ADDR_VAR 0 18
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42786: LD_ADDR_VAR 0 19
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43016: LD_ADDR_VAR 0 20
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43246: LD_ADDR_VAR 0 21
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43476: LD_ADDR_VAR 0 22
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43706: LD_ADDR_VAR 0 23
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: LD_INT 3
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 3
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43986: LD_ADDR_VAR 0 24
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44262: LD_ADDR_VAR 0 25
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44536: LD_ADDR_VAR 0 26
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 3
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 3
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44812: LD_ADDR_VAR 0 27
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45092: LD_ADDR_VAR 0 28
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 3
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45374: LD_ADDR_VAR 0 29
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45653: LD_ADDR_VAR 0 30
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45931: LD_ADDR_VAR 0 31
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 3
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46209: LD_ADDR_VAR 0 32
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 3
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46487: LD_ADDR_VAR 0 33
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46766: LD_ADDR_VAR 0 34
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47046: LD_ADDR_VAR 0 35
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47158: LD_ADDR_VAR 0 36
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47270: LD_ADDR_VAR 0 37
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47382: LD_ADDR_VAR 0 38
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47494: LD_ADDR_VAR 0 39
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47606: LD_ADDR_VAR 0 40
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47718: LD_ADDR_VAR 0 41
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 3
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 3
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 3
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48068: LD_ADDR_VAR 0 42
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48418: LD_ADDR_VAR 0 43
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 3
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48766: LD_ADDR_VAR 0 44
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49116: LD_ADDR_VAR 0 45
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 3
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 3
49425: NEG
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49466: LD_ADDR_VAR 0 46
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 3
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49814: LD_ADDR_VAR 0 47
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49965: LD_ADDR_VAR 0 48
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50112: LD_ADDR_VAR 0 49
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50256: LD_ADDR_VAR 0 50
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50400: LD_ADDR_VAR 0 51
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50547: LD_ADDR_VAR 0 52
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50698: LD_ADDR_VAR 0 53
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50928: LD_ADDR_VAR 0 54
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51158: LD_ADDR_VAR 0 55
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51388: LD_ADDR_VAR 0 56
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51618: LD_ADDR_VAR 0 57
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51848: LD_ADDR_VAR 0 58
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52078: LD_ADDR_VAR 0 59
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52166: LD_ADDR_VAR 0 60
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52254: LD_ADDR_VAR 0 61
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52342: LD_ADDR_VAR 0 62
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52430: LD_ADDR_VAR 0 63
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52518: LD_ADDR_VAR 0 64
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// end ; 1 :
52606: GO 58503
52608: LD_INT 1
52610: DOUBLE
52611: EQUAL
52612: IFTRUE 52616
52614: GO 55239
52616: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52617: LD_ADDR_VAR 0 11
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52661: LD_ADDR_VAR 0 12
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52702: LD_ADDR_VAR 0 13
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52742: LD_ADDR_VAR 0 14
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52783: LD_ADDR_VAR 0 15
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 3
52801: NEG
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: LIST
52826: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52827: LD_ADDR_VAR 0 16
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: LD_INT 3
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52873: LD_ADDR_VAR 0 17
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52917: LD_ADDR_VAR 0 18
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52958: LD_ADDR_VAR 0 19
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52998: LD_ADDR_VAR 0 20
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53039: LD_ADDR_VAR 0 21
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 3
53057: NEG
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53083: LD_ADDR_VAR 0 22
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53129: LD_ADDR_VAR 0 23
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53173: LD_ADDR_VAR 0 24
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 4
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53214: LD_ADDR_VAR 0 25
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 4
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53254: LD_ADDR_VAR 0 26
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 4
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53295: LD_ADDR_VAR 0 27
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53339: LD_ADDR_VAR 0 28
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 4
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 4
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53385: LD_ADDR_VAR 0 29
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 4
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 4
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 5
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 5
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 4
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 6
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 6
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 5
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53540: LD_ADDR_VAR 0 30
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 4
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 4
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 4
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 5
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 5
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 5
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 6
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 6
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53683: LD_ADDR_VAR 0 31
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 4
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 4
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 5
53750: PUSH
53751: LD_INT 4
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: LD_INT 5
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: LD_INT 5
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 6
53780: PUSH
53781: LD_INT 5
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 6
53790: PUSH
53791: LD_INT 6
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 5
53800: PUSH
53801: LD_INT 6
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53822: LD_ADDR_VAR 0 32
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 4
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 4
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 5
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 5
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 6
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 6
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 5
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53965: LD_ADDR_VAR 0 33
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 3
53983: NEG
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 4
54017: NEG
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 4
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 4
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 5
54051: NEG
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 5
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 5
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 6
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 6
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54120: LD_ADDR_VAR 0 34
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 4
54175: NEG
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 4
54187: NEG
54188: PUSH
54189: LD_INT 4
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 4
54199: NEG
54200: PUSH
54201: LD_INT 5
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: LD_INT 4
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 5
54223: NEG
54224: PUSH
54225: LD_INT 5
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 5
54235: NEG
54236: PUSH
54237: LD_INT 6
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 6
54247: NEG
54248: PUSH
54249: LD_INT 5
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 6
54259: NEG
54260: PUSH
54261: LD_INT 6
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54283: LD_ADDR_VAR 0 41
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 3
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54327: LD_ADDR_VAR 0 42
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54368: LD_ADDR_VAR 0 43
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54408: LD_ADDR_VAR 0 44
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54449: LD_ADDR_VAR 0 45
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54493: LD_ADDR_VAR 0 46
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54539: LD_ADDR_VAR 0 47
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54572: LD_ADDR_VAR 0 48
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54603: LD_ADDR_VAR 0 49
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54632: LD_ADDR_VAR 0 50
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54661: LD_ADDR_VAR 0 51
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54692: LD_ADDR_VAR 0 52
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54725: LD_ADDR_VAR 0 53
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54769: LD_ADDR_VAR 0 54
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54810: LD_ADDR_VAR 0 55
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54850: LD_ADDR_VAR 0 56
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 3
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54891: LD_ADDR_VAR 0 57
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54935: LD_ADDR_VAR 0 58
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: NEG
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54981: LD_ADDR_VAR 0 59
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55025: LD_ADDR_VAR 0 60
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55066: LD_ADDR_VAR 0 61
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55106: LD_ADDR_VAR 0 62
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55147: LD_ADDR_VAR 0 63
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55191: LD_ADDR_VAR 0 64
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: LIST
55236: ST_TO_ADDR
// end ; 2 :
55237: GO 58503
55239: LD_INT 2
55241: DOUBLE
55242: EQUAL
55243: IFTRUE 55247
55245: GO 58502
55247: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55248: LD_ADDR_VAR 0 29
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 4
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 5
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 5
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 4
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: LD_INT 4
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: LD_INT 4
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 4
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 4
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 4
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 5
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 5
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 5
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 4
55587: NEG
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 4
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 4
55633: NEG
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 4
55645: NEG
55646: PUSH
55647: LD_INT 5
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: LD_INT 4
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 4
55681: NEG
55682: PUSH
55683: LD_INT 3
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 5
55693: NEG
55694: PUSH
55695: LD_INT 4
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 5
55705: NEG
55706: PUSH
55707: LD_INT 5
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: LD_INT 5
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 5
55729: NEG
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55786: LD_ADDR_VAR 0 30
55790: PUSH
55791: LD_INT 4
55793: PUSH
55794: LD_INT 4
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: LD_INT 5
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: LD_INT 4
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 5
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: LD_INT 5
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 4
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 4
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 4
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 4
55976: NEG
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 4
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 5
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 5
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 5
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 4
56138: NEG
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 4
56150: NEG
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 4
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 5
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 4
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 4
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 5
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 5
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56333: LD_ADDR_VAR 0 31
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 4
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 4
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 5
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 5
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 5
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 4
56512: NEG
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 4
56535: NEG
56536: PUSH
56537: LD_INT 4
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 4
56547: NEG
56548: PUSH
56549: LD_INT 5
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: LD_INT 4
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 5
56595: NEG
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 5
56607: NEG
56608: PUSH
56609: LD_INT 5
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: LD_INT 5
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 5
56631: NEG
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 4
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 3
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 4
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 4
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 4
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 5
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 5
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56883: LD_ADDR_VAR 0 32
56887: PUSH
56888: LD_INT 4
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 5
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 5
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 5
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: LD_INT 4
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 4
57052: NEG
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 4
57064: NEG
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 4
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 4
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 4
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 5
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 4
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 5
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 5
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 4
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 5
57315: PUSH
57316: LD_INT 4
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 5
57325: PUSH
57326: LD_INT 5
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 4
57335: PUSH
57336: LD_INT 5
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: LD_INT 4
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 5
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: LD_INT 5
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57430: LD_ADDR_VAR 0 33
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 4
57449: NEG
57450: PUSH
57451: LD_INT 5
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: LD_INT 4
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 5
57497: NEG
57498: PUSH
57499: LD_INT 4
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 5
57509: NEG
57510: PUSH
57511: LD_INT 5
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: LD_INT 5
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 5
57533: NEG
57534: PUSH
57535: LD_INT 3
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 4
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 3
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 4
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 4
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 5
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 5
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 5
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 4
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: LD_INT 4
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: LD_INT 4
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 4
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 5
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 4
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 5
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57968: LD_ADDR_VAR 0 34
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 5
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 4
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 4
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 5
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: LD_INT 5
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 4
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 4
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 4
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 5
58190: PUSH
58191: LD_INT 4
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 5
58200: PUSH
58201: LD_INT 5
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 4
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 4
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 5
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: LD_INT 5
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 4
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 4
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 5
58409: NEG
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 5
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 5
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// end ; end ;
58500: GO 58503
58502: POP
// case btype of b_depot , b_warehouse :
58503: LD_VAR 0 1
58507: PUSH
58508: LD_INT 0
58510: DOUBLE
58511: EQUAL
58512: IFTRUE 58522
58514: LD_INT 1
58516: DOUBLE
58517: EQUAL
58518: IFTRUE 58522
58520: GO 58723
58522: POP
// case nation of nation_american :
58523: LD_VAR 0 5
58527: PUSH
58528: LD_INT 1
58530: DOUBLE
58531: EQUAL
58532: IFTRUE 58536
58534: GO 58592
58536: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58537: LD_ADDR_VAR 0 9
58541: PUSH
58542: LD_VAR 0 11
58546: PUSH
58547: LD_VAR 0 12
58551: PUSH
58552: LD_VAR 0 13
58556: PUSH
58557: LD_VAR 0 14
58561: PUSH
58562: LD_VAR 0 15
58566: PUSH
58567: LD_VAR 0 16
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: PUSH
58580: LD_VAR 0 4
58584: PUSH
58585: LD_INT 1
58587: PLUS
58588: ARRAY
58589: ST_TO_ADDR
58590: GO 58721
58592: LD_INT 2
58594: DOUBLE
58595: EQUAL
58596: IFTRUE 58600
58598: GO 58656
58600: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58601: LD_ADDR_VAR 0 9
58605: PUSH
58606: LD_VAR 0 17
58610: PUSH
58611: LD_VAR 0 18
58615: PUSH
58616: LD_VAR 0 19
58620: PUSH
58621: LD_VAR 0 20
58625: PUSH
58626: LD_VAR 0 21
58630: PUSH
58631: LD_VAR 0 22
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: PUSH
58644: LD_VAR 0 4
58648: PUSH
58649: LD_INT 1
58651: PLUS
58652: ARRAY
58653: ST_TO_ADDR
58654: GO 58721
58656: LD_INT 3
58658: DOUBLE
58659: EQUAL
58660: IFTRUE 58664
58662: GO 58720
58664: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58665: LD_ADDR_VAR 0 9
58669: PUSH
58670: LD_VAR 0 23
58674: PUSH
58675: LD_VAR 0 24
58679: PUSH
58680: LD_VAR 0 25
58684: PUSH
58685: LD_VAR 0 26
58689: PUSH
58690: LD_VAR 0 27
58694: PUSH
58695: LD_VAR 0 28
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: PUSH
58708: LD_VAR 0 4
58712: PUSH
58713: LD_INT 1
58715: PLUS
58716: ARRAY
58717: ST_TO_ADDR
58718: GO 58721
58720: POP
58721: GO 59276
58723: LD_INT 2
58725: DOUBLE
58726: EQUAL
58727: IFTRUE 58737
58729: LD_INT 3
58731: DOUBLE
58732: EQUAL
58733: IFTRUE 58737
58735: GO 58793
58737: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58738: LD_ADDR_VAR 0 9
58742: PUSH
58743: LD_VAR 0 29
58747: PUSH
58748: LD_VAR 0 30
58752: PUSH
58753: LD_VAR 0 31
58757: PUSH
58758: LD_VAR 0 32
58762: PUSH
58763: LD_VAR 0 33
58767: PUSH
58768: LD_VAR 0 34
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: PUSH
58781: LD_VAR 0 4
58785: PUSH
58786: LD_INT 1
58788: PLUS
58789: ARRAY
58790: ST_TO_ADDR
58791: GO 59276
58793: LD_INT 16
58795: DOUBLE
58796: EQUAL
58797: IFTRUE 58855
58799: LD_INT 17
58801: DOUBLE
58802: EQUAL
58803: IFTRUE 58855
58805: LD_INT 18
58807: DOUBLE
58808: EQUAL
58809: IFTRUE 58855
58811: LD_INT 19
58813: DOUBLE
58814: EQUAL
58815: IFTRUE 58855
58817: LD_INT 22
58819: DOUBLE
58820: EQUAL
58821: IFTRUE 58855
58823: LD_INT 20
58825: DOUBLE
58826: EQUAL
58827: IFTRUE 58855
58829: LD_INT 21
58831: DOUBLE
58832: EQUAL
58833: IFTRUE 58855
58835: LD_INT 23
58837: DOUBLE
58838: EQUAL
58839: IFTRUE 58855
58841: LD_INT 24
58843: DOUBLE
58844: EQUAL
58845: IFTRUE 58855
58847: LD_INT 25
58849: DOUBLE
58850: EQUAL
58851: IFTRUE 58855
58853: GO 58911
58855: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58856: LD_ADDR_VAR 0 9
58860: PUSH
58861: LD_VAR 0 35
58865: PUSH
58866: LD_VAR 0 36
58870: PUSH
58871: LD_VAR 0 37
58875: PUSH
58876: LD_VAR 0 38
58880: PUSH
58881: LD_VAR 0 39
58885: PUSH
58886: LD_VAR 0 40
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: LD_VAR 0 4
58903: PUSH
58904: LD_INT 1
58906: PLUS
58907: ARRAY
58908: ST_TO_ADDR
58909: GO 59276
58911: LD_INT 6
58913: DOUBLE
58914: EQUAL
58915: IFTRUE 58967
58917: LD_INT 7
58919: DOUBLE
58920: EQUAL
58921: IFTRUE 58967
58923: LD_INT 8
58925: DOUBLE
58926: EQUAL
58927: IFTRUE 58967
58929: LD_INT 13
58931: DOUBLE
58932: EQUAL
58933: IFTRUE 58967
58935: LD_INT 12
58937: DOUBLE
58938: EQUAL
58939: IFTRUE 58967
58941: LD_INT 15
58943: DOUBLE
58944: EQUAL
58945: IFTRUE 58967
58947: LD_INT 11
58949: DOUBLE
58950: EQUAL
58951: IFTRUE 58967
58953: LD_INT 14
58955: DOUBLE
58956: EQUAL
58957: IFTRUE 58967
58959: LD_INT 10
58961: DOUBLE
58962: EQUAL
58963: IFTRUE 58967
58965: GO 59023
58967: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58968: LD_ADDR_VAR 0 9
58972: PUSH
58973: LD_VAR 0 41
58977: PUSH
58978: LD_VAR 0 42
58982: PUSH
58983: LD_VAR 0 43
58987: PUSH
58988: LD_VAR 0 44
58992: PUSH
58993: LD_VAR 0 45
58997: PUSH
58998: LD_VAR 0 46
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: PUSH
59011: LD_VAR 0 4
59015: PUSH
59016: LD_INT 1
59018: PLUS
59019: ARRAY
59020: ST_TO_ADDR
59021: GO 59276
59023: LD_INT 36
59025: DOUBLE
59026: EQUAL
59027: IFTRUE 59031
59029: GO 59087
59031: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59032: LD_ADDR_VAR 0 9
59036: PUSH
59037: LD_VAR 0 47
59041: PUSH
59042: LD_VAR 0 48
59046: PUSH
59047: LD_VAR 0 49
59051: PUSH
59052: LD_VAR 0 50
59056: PUSH
59057: LD_VAR 0 51
59061: PUSH
59062: LD_VAR 0 52
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: PUSH
59075: LD_VAR 0 4
59079: PUSH
59080: LD_INT 1
59082: PLUS
59083: ARRAY
59084: ST_TO_ADDR
59085: GO 59276
59087: LD_INT 4
59089: DOUBLE
59090: EQUAL
59091: IFTRUE 59113
59093: LD_INT 5
59095: DOUBLE
59096: EQUAL
59097: IFTRUE 59113
59099: LD_INT 34
59101: DOUBLE
59102: EQUAL
59103: IFTRUE 59113
59105: LD_INT 37
59107: DOUBLE
59108: EQUAL
59109: IFTRUE 59113
59111: GO 59169
59113: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59114: LD_ADDR_VAR 0 9
59118: PUSH
59119: LD_VAR 0 53
59123: PUSH
59124: LD_VAR 0 54
59128: PUSH
59129: LD_VAR 0 55
59133: PUSH
59134: LD_VAR 0 56
59138: PUSH
59139: LD_VAR 0 57
59143: PUSH
59144: LD_VAR 0 58
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: PUSH
59157: LD_VAR 0 4
59161: PUSH
59162: LD_INT 1
59164: PLUS
59165: ARRAY
59166: ST_TO_ADDR
59167: GO 59276
59169: LD_INT 31
59171: DOUBLE
59172: EQUAL
59173: IFTRUE 59219
59175: LD_INT 32
59177: DOUBLE
59178: EQUAL
59179: IFTRUE 59219
59181: LD_INT 33
59183: DOUBLE
59184: EQUAL
59185: IFTRUE 59219
59187: LD_INT 27
59189: DOUBLE
59190: EQUAL
59191: IFTRUE 59219
59193: LD_INT 26
59195: DOUBLE
59196: EQUAL
59197: IFTRUE 59219
59199: LD_INT 28
59201: DOUBLE
59202: EQUAL
59203: IFTRUE 59219
59205: LD_INT 29
59207: DOUBLE
59208: EQUAL
59209: IFTRUE 59219
59211: LD_INT 30
59213: DOUBLE
59214: EQUAL
59215: IFTRUE 59219
59217: GO 59275
59219: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59220: LD_ADDR_VAR 0 9
59224: PUSH
59225: LD_VAR 0 59
59229: PUSH
59230: LD_VAR 0 60
59234: PUSH
59235: LD_VAR 0 61
59239: PUSH
59240: LD_VAR 0 62
59244: PUSH
59245: LD_VAR 0 63
59249: PUSH
59250: LD_VAR 0 64
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: PUSH
59263: LD_VAR 0 4
59267: PUSH
59268: LD_INT 1
59270: PLUS
59271: ARRAY
59272: ST_TO_ADDR
59273: GO 59276
59275: POP
// temp_list2 = [ ] ;
59276: LD_ADDR_VAR 0 10
59280: PUSH
59281: EMPTY
59282: ST_TO_ADDR
// for i in temp_list do
59283: LD_ADDR_VAR 0 8
59287: PUSH
59288: LD_VAR 0 9
59292: PUSH
59293: FOR_IN
59294: IFFALSE 59346
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59296: LD_ADDR_VAR 0 10
59300: PUSH
59301: LD_VAR 0 10
59305: PUSH
59306: LD_VAR 0 8
59310: PUSH
59311: LD_INT 1
59313: ARRAY
59314: PUSH
59315: LD_VAR 0 2
59319: PLUS
59320: PUSH
59321: LD_VAR 0 8
59325: PUSH
59326: LD_INT 2
59328: ARRAY
59329: PUSH
59330: LD_VAR 0 3
59334: PLUS
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: EMPTY
59341: LIST
59342: ADD
59343: ST_TO_ADDR
59344: GO 59293
59346: POP
59347: POP
// result = temp_list2 ;
59348: LD_ADDR_VAR 0 7
59352: PUSH
59353: LD_VAR 0 10
59357: ST_TO_ADDR
// end ;
59358: LD_VAR 0 7
59362: RET
// export function EnemyInRange ( unit , dist ) ; begin
59363: LD_INT 0
59365: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59366: LD_ADDR_VAR 0 3
59370: PUSH
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 255
59380: PPUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: CALL_OW 250
59390: PPUSH
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 251
59400: PPUSH
59401: LD_VAR 0 2
59405: PPUSH
59406: CALL 33134 0 4
59410: PUSH
59411: LD_INT 4
59413: ARRAY
59414: ST_TO_ADDR
// end ;
59415: LD_VAR 0 3
59419: RET
// export function PlayerSeeMe ( unit ) ; begin
59420: LD_INT 0
59422: PPUSH
// result := See ( your_side , unit ) ;
59423: LD_ADDR_VAR 0 2
59427: PUSH
59428: LD_OWVAR 2
59432: PPUSH
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 292
59442: ST_TO_ADDR
// end ;
59443: LD_VAR 0 2
59447: RET
// export function ReverseDir ( unit ) ; begin
59448: LD_INT 0
59450: PPUSH
// if not unit then
59451: LD_VAR 0 1
59455: NOT
59456: IFFALSE 59460
// exit ;
59458: GO 59483
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59460: LD_ADDR_VAR 0 2
59464: PUSH
59465: LD_VAR 0 1
59469: PPUSH
59470: CALL_OW 254
59474: PUSH
59475: LD_INT 3
59477: PLUS
59478: PUSH
59479: LD_INT 6
59481: MOD
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 2
59487: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59488: LD_INT 0
59490: PPUSH
59491: PPUSH
59492: PPUSH
59493: PPUSH
59494: PPUSH
// if not hexes then
59495: LD_VAR 0 2
59499: NOT
59500: IFFALSE 59504
// exit ;
59502: GO 59652
// dist := 9999 ;
59504: LD_ADDR_VAR 0 5
59508: PUSH
59509: LD_INT 9999
59511: ST_TO_ADDR
// for i = 1 to hexes do
59512: LD_ADDR_VAR 0 4
59516: PUSH
59517: DOUBLE
59518: LD_INT 1
59520: DEC
59521: ST_TO_ADDR
59522: LD_VAR 0 2
59526: PUSH
59527: FOR_TO
59528: IFFALSE 59640
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59530: LD_VAR 0 1
59534: PPUSH
59535: LD_VAR 0 2
59539: PUSH
59540: LD_VAR 0 4
59544: ARRAY
59545: PUSH
59546: LD_INT 1
59548: ARRAY
59549: PPUSH
59550: LD_VAR 0 2
59554: PUSH
59555: LD_VAR 0 4
59559: ARRAY
59560: PUSH
59561: LD_INT 2
59563: ARRAY
59564: PPUSH
59565: CALL_OW 297
59569: PUSH
59570: LD_VAR 0 5
59574: LESS
59575: IFFALSE 59638
// begin hex := hexes [ i ] ;
59577: LD_ADDR_VAR 0 7
59581: PUSH
59582: LD_VAR 0 2
59586: PUSH
59587: LD_VAR 0 4
59591: ARRAY
59592: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59593: LD_ADDR_VAR 0 5
59597: PUSH
59598: LD_VAR 0 1
59602: PPUSH
59603: LD_VAR 0 2
59607: PUSH
59608: LD_VAR 0 4
59612: ARRAY
59613: PUSH
59614: LD_INT 1
59616: ARRAY
59617: PPUSH
59618: LD_VAR 0 2
59622: PUSH
59623: LD_VAR 0 4
59627: ARRAY
59628: PUSH
59629: LD_INT 2
59631: ARRAY
59632: PPUSH
59633: CALL_OW 297
59637: ST_TO_ADDR
// end ; end ;
59638: GO 59527
59640: POP
59641: POP
// result := hex ;
59642: LD_ADDR_VAR 0 3
59646: PUSH
59647: LD_VAR 0 7
59651: ST_TO_ADDR
// end ;
59652: LD_VAR 0 3
59656: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59657: LD_INT 0
59659: PPUSH
59660: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59661: LD_VAR 0 1
59665: NOT
59666: PUSH
59667: LD_VAR 0 1
59671: PUSH
59672: LD_INT 21
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 23
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PPUSH
59696: CALL_OW 69
59700: IN
59701: NOT
59702: OR
59703: IFFALSE 59707
// exit ;
59705: GO 59754
// for i = 1 to 3 do
59707: LD_ADDR_VAR 0 3
59711: PUSH
59712: DOUBLE
59713: LD_INT 1
59715: DEC
59716: ST_TO_ADDR
59717: LD_INT 3
59719: PUSH
59720: FOR_TO
59721: IFFALSE 59752
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59723: LD_VAR 0 1
59727: PPUSH
59728: CALL_OW 250
59732: PPUSH
59733: LD_VAR 0 1
59737: PPUSH
59738: CALL_OW 251
59742: PPUSH
59743: LD_INT 1
59745: PPUSH
59746: CALL_OW 453
59750: GO 59720
59752: POP
59753: POP
// end ;
59754: LD_VAR 0 2
59758: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59759: LD_INT 0
59761: PPUSH
59762: PPUSH
59763: PPUSH
59764: PPUSH
59765: PPUSH
59766: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59767: LD_VAR 0 1
59771: NOT
59772: PUSH
59773: LD_VAR 0 2
59777: NOT
59778: OR
59779: PUSH
59780: LD_VAR 0 1
59784: PPUSH
59785: CALL_OW 314
59789: OR
59790: IFFALSE 59794
// exit ;
59792: GO 60235
// x := GetX ( enemy_unit ) ;
59794: LD_ADDR_VAR 0 7
59798: PUSH
59799: LD_VAR 0 2
59803: PPUSH
59804: CALL_OW 250
59808: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59809: LD_ADDR_VAR 0 8
59813: PUSH
59814: LD_VAR 0 2
59818: PPUSH
59819: CALL_OW 251
59823: ST_TO_ADDR
// if not x or not y then
59824: LD_VAR 0 7
59828: NOT
59829: PUSH
59830: LD_VAR 0 8
59834: NOT
59835: OR
59836: IFFALSE 59840
// exit ;
59838: GO 60235
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59840: LD_ADDR_VAR 0 6
59844: PUSH
59845: LD_VAR 0 7
59849: PPUSH
59850: LD_INT 0
59852: PPUSH
59853: LD_INT 4
59855: PPUSH
59856: CALL_OW 272
59860: PUSH
59861: LD_VAR 0 8
59865: PPUSH
59866: LD_INT 0
59868: PPUSH
59869: LD_INT 4
59871: PPUSH
59872: CALL_OW 273
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_VAR 0 7
59885: PPUSH
59886: LD_INT 1
59888: PPUSH
59889: LD_INT 4
59891: PPUSH
59892: CALL_OW 272
59896: PUSH
59897: LD_VAR 0 8
59901: PPUSH
59902: LD_INT 1
59904: PPUSH
59905: LD_INT 4
59907: PPUSH
59908: CALL_OW 273
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_VAR 0 7
59921: PPUSH
59922: LD_INT 2
59924: PPUSH
59925: LD_INT 4
59927: PPUSH
59928: CALL_OW 272
59932: PUSH
59933: LD_VAR 0 8
59937: PPUSH
59938: LD_INT 2
59940: PPUSH
59941: LD_INT 4
59943: PPUSH
59944: CALL_OW 273
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_VAR 0 7
59957: PPUSH
59958: LD_INT 3
59960: PPUSH
59961: LD_INT 4
59963: PPUSH
59964: CALL_OW 272
59968: PUSH
59969: LD_VAR 0 8
59973: PPUSH
59974: LD_INT 3
59976: PPUSH
59977: LD_INT 4
59979: PPUSH
59980: CALL_OW 273
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_VAR 0 7
59993: PPUSH
59994: LD_INT 4
59996: PPUSH
59997: LD_INT 4
59999: PPUSH
60000: CALL_OW 272
60004: PUSH
60005: LD_VAR 0 8
60009: PPUSH
60010: LD_INT 4
60012: PPUSH
60013: LD_INT 4
60015: PPUSH
60016: CALL_OW 273
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_VAR 0 7
60029: PPUSH
60030: LD_INT 5
60032: PPUSH
60033: LD_INT 4
60035: PPUSH
60036: CALL_OW 272
60040: PUSH
60041: LD_VAR 0 8
60045: PPUSH
60046: LD_INT 5
60048: PPUSH
60049: LD_INT 4
60051: PPUSH
60052: CALL_OW 273
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: ST_TO_ADDR
// for i = tmp downto 1 do
60069: LD_ADDR_VAR 0 4
60073: PUSH
60074: DOUBLE
60075: LD_VAR 0 6
60079: INC
60080: ST_TO_ADDR
60081: LD_INT 1
60083: PUSH
60084: FOR_DOWNTO
60085: IFFALSE 60186
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60087: LD_VAR 0 6
60091: PUSH
60092: LD_VAR 0 4
60096: ARRAY
60097: PUSH
60098: LD_INT 1
60100: ARRAY
60101: PPUSH
60102: LD_VAR 0 6
60106: PUSH
60107: LD_VAR 0 4
60111: ARRAY
60112: PUSH
60113: LD_INT 2
60115: ARRAY
60116: PPUSH
60117: CALL_OW 488
60121: NOT
60122: PUSH
60123: LD_VAR 0 6
60127: PUSH
60128: LD_VAR 0 4
60132: ARRAY
60133: PUSH
60134: LD_INT 1
60136: ARRAY
60137: PPUSH
60138: LD_VAR 0 6
60142: PUSH
60143: LD_VAR 0 4
60147: ARRAY
60148: PUSH
60149: LD_INT 2
60151: ARRAY
60152: PPUSH
60153: CALL_OW 428
60157: PUSH
60158: LD_INT 0
60160: NONEQUAL
60161: OR
60162: IFFALSE 60184
// tmp := Delete ( tmp , i ) ;
60164: LD_ADDR_VAR 0 6
60168: PUSH
60169: LD_VAR 0 6
60173: PPUSH
60174: LD_VAR 0 4
60178: PPUSH
60179: CALL_OW 3
60183: ST_TO_ADDR
60184: GO 60084
60186: POP
60187: POP
// j := GetClosestHex ( unit , tmp ) ;
60188: LD_ADDR_VAR 0 5
60192: PUSH
60193: LD_VAR 0 1
60197: PPUSH
60198: LD_VAR 0 6
60202: PPUSH
60203: CALL 59488 0 2
60207: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60208: LD_VAR 0 1
60212: PPUSH
60213: LD_VAR 0 5
60217: PUSH
60218: LD_INT 1
60220: ARRAY
60221: PPUSH
60222: LD_VAR 0 5
60226: PUSH
60227: LD_INT 2
60229: ARRAY
60230: PPUSH
60231: CALL_OW 111
// end ;
60235: LD_VAR 0 3
60239: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60240: LD_INT 0
60242: PPUSH
60243: PPUSH
60244: PPUSH
// uc_side = 0 ;
60245: LD_ADDR_OWVAR 20
60249: PUSH
60250: LD_INT 0
60252: ST_TO_ADDR
// uc_nation = 0 ;
60253: LD_ADDR_OWVAR 21
60257: PUSH
60258: LD_INT 0
60260: ST_TO_ADDR
// InitHc_All ( ) ;
60261: CALL_OW 584
// InitVc ;
60265: CALL_OW 20
// if mastodonts then
60269: LD_VAR 0 6
60273: IFFALSE 60340
// for i = 1 to mastodonts do
60275: LD_ADDR_VAR 0 11
60279: PUSH
60280: DOUBLE
60281: LD_INT 1
60283: DEC
60284: ST_TO_ADDR
60285: LD_VAR 0 6
60289: PUSH
60290: FOR_TO
60291: IFFALSE 60338
// begin vc_chassis := 31 ;
60293: LD_ADDR_OWVAR 37
60297: PUSH
60298: LD_INT 31
60300: ST_TO_ADDR
// vc_control := control_rider ;
60301: LD_ADDR_OWVAR 38
60305: PUSH
60306: LD_INT 4
60308: ST_TO_ADDR
// animal := CreateVehicle ;
60309: LD_ADDR_VAR 0 12
60313: PUSH
60314: CALL_OW 45
60318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60319: LD_VAR 0 12
60323: PPUSH
60324: LD_VAR 0 8
60328: PPUSH
60329: LD_INT 0
60331: PPUSH
60332: CALL 62528 0 3
// end ;
60336: GO 60290
60338: POP
60339: POP
// if horses then
60340: LD_VAR 0 5
60344: IFFALSE 60411
// for i = 1 to horses do
60346: LD_ADDR_VAR 0 11
60350: PUSH
60351: DOUBLE
60352: LD_INT 1
60354: DEC
60355: ST_TO_ADDR
60356: LD_VAR 0 5
60360: PUSH
60361: FOR_TO
60362: IFFALSE 60409
// begin hc_class := 21 ;
60364: LD_ADDR_OWVAR 28
60368: PUSH
60369: LD_INT 21
60371: ST_TO_ADDR
// hc_gallery :=  ;
60372: LD_ADDR_OWVAR 33
60376: PUSH
60377: LD_STRING 
60379: ST_TO_ADDR
// animal := CreateHuman ;
60380: LD_ADDR_VAR 0 12
60384: PUSH
60385: CALL_OW 44
60389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60390: LD_VAR 0 12
60394: PPUSH
60395: LD_VAR 0 8
60399: PPUSH
60400: LD_INT 0
60402: PPUSH
60403: CALL 62528 0 3
// end ;
60407: GO 60361
60409: POP
60410: POP
// if birds then
60411: LD_VAR 0 1
60415: IFFALSE 60482
// for i = 1 to birds do
60417: LD_ADDR_VAR 0 11
60421: PUSH
60422: DOUBLE
60423: LD_INT 1
60425: DEC
60426: ST_TO_ADDR
60427: LD_VAR 0 1
60431: PUSH
60432: FOR_TO
60433: IFFALSE 60480
// begin hc_class = 18 ;
60435: LD_ADDR_OWVAR 28
60439: PUSH
60440: LD_INT 18
60442: ST_TO_ADDR
// hc_gallery =  ;
60443: LD_ADDR_OWVAR 33
60447: PUSH
60448: LD_STRING 
60450: ST_TO_ADDR
// animal := CreateHuman ;
60451: LD_ADDR_VAR 0 12
60455: PUSH
60456: CALL_OW 44
60460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60461: LD_VAR 0 12
60465: PPUSH
60466: LD_VAR 0 8
60470: PPUSH
60471: LD_INT 0
60473: PPUSH
60474: CALL 62528 0 3
// end ;
60478: GO 60432
60480: POP
60481: POP
// if tigers then
60482: LD_VAR 0 2
60486: IFFALSE 60570
// for i = 1 to tigers do
60488: LD_ADDR_VAR 0 11
60492: PUSH
60493: DOUBLE
60494: LD_INT 1
60496: DEC
60497: ST_TO_ADDR
60498: LD_VAR 0 2
60502: PUSH
60503: FOR_TO
60504: IFFALSE 60568
// begin hc_class = class_tiger ;
60506: LD_ADDR_OWVAR 28
60510: PUSH
60511: LD_INT 14
60513: ST_TO_ADDR
// hc_gallery =  ;
60514: LD_ADDR_OWVAR 33
60518: PUSH
60519: LD_STRING 
60521: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60522: LD_ADDR_OWVAR 35
60526: PUSH
60527: LD_INT 7
60529: NEG
60530: PPUSH
60531: LD_INT 7
60533: PPUSH
60534: CALL_OW 12
60538: ST_TO_ADDR
// animal := CreateHuman ;
60539: LD_ADDR_VAR 0 12
60543: PUSH
60544: CALL_OW 44
60548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60549: LD_VAR 0 12
60553: PPUSH
60554: LD_VAR 0 8
60558: PPUSH
60559: LD_INT 0
60561: PPUSH
60562: CALL 62528 0 3
// end ;
60566: GO 60503
60568: POP
60569: POP
// if apemans then
60570: LD_VAR 0 3
60574: IFFALSE 60697
// for i = 1 to apemans do
60576: LD_ADDR_VAR 0 11
60580: PUSH
60581: DOUBLE
60582: LD_INT 1
60584: DEC
60585: ST_TO_ADDR
60586: LD_VAR 0 3
60590: PUSH
60591: FOR_TO
60592: IFFALSE 60695
// begin hc_class = class_apeman ;
60594: LD_ADDR_OWVAR 28
60598: PUSH
60599: LD_INT 12
60601: ST_TO_ADDR
// hc_gallery =  ;
60602: LD_ADDR_OWVAR 33
60606: PUSH
60607: LD_STRING 
60609: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60610: LD_ADDR_OWVAR 35
60614: PUSH
60615: LD_INT 5
60617: NEG
60618: PPUSH
60619: LD_INT 5
60621: PPUSH
60622: CALL_OW 12
60626: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60627: LD_ADDR_OWVAR 31
60631: PUSH
60632: LD_INT 1
60634: PPUSH
60635: LD_INT 3
60637: PPUSH
60638: CALL_OW 12
60642: PUSH
60643: LD_INT 1
60645: PPUSH
60646: LD_INT 3
60648: PPUSH
60649: CALL_OW 12
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: ST_TO_ADDR
// animal := CreateHuman ;
60666: LD_ADDR_VAR 0 12
60670: PUSH
60671: CALL_OW 44
60675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60676: LD_VAR 0 12
60680: PPUSH
60681: LD_VAR 0 8
60685: PPUSH
60686: LD_INT 0
60688: PPUSH
60689: CALL 62528 0 3
// end ;
60693: GO 60591
60695: POP
60696: POP
// if enchidnas then
60697: LD_VAR 0 4
60701: IFFALSE 60768
// for i = 1 to enchidnas do
60703: LD_ADDR_VAR 0 11
60707: PUSH
60708: DOUBLE
60709: LD_INT 1
60711: DEC
60712: ST_TO_ADDR
60713: LD_VAR 0 4
60717: PUSH
60718: FOR_TO
60719: IFFALSE 60766
// begin hc_class = 13 ;
60721: LD_ADDR_OWVAR 28
60725: PUSH
60726: LD_INT 13
60728: ST_TO_ADDR
// hc_gallery =  ;
60729: LD_ADDR_OWVAR 33
60733: PUSH
60734: LD_STRING 
60736: ST_TO_ADDR
// animal := CreateHuman ;
60737: LD_ADDR_VAR 0 12
60741: PUSH
60742: CALL_OW 44
60746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60747: LD_VAR 0 12
60751: PPUSH
60752: LD_VAR 0 8
60756: PPUSH
60757: LD_INT 0
60759: PPUSH
60760: CALL 62528 0 3
// end ;
60764: GO 60718
60766: POP
60767: POP
// if fishes then
60768: LD_VAR 0 7
60772: IFFALSE 60839
// for i = 1 to fishes do
60774: LD_ADDR_VAR 0 11
60778: PUSH
60779: DOUBLE
60780: LD_INT 1
60782: DEC
60783: ST_TO_ADDR
60784: LD_VAR 0 7
60788: PUSH
60789: FOR_TO
60790: IFFALSE 60837
// begin hc_class = 20 ;
60792: LD_ADDR_OWVAR 28
60796: PUSH
60797: LD_INT 20
60799: ST_TO_ADDR
// hc_gallery =  ;
60800: LD_ADDR_OWVAR 33
60804: PUSH
60805: LD_STRING 
60807: ST_TO_ADDR
// animal := CreateHuman ;
60808: LD_ADDR_VAR 0 12
60812: PUSH
60813: CALL_OW 44
60817: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60818: LD_VAR 0 12
60822: PPUSH
60823: LD_VAR 0 9
60827: PPUSH
60828: LD_INT 0
60830: PPUSH
60831: CALL 62528 0 3
// end ;
60835: GO 60789
60837: POP
60838: POP
// end ;
60839: LD_VAR 0 10
60843: RET
// export function WantHeal ( sci , unit ) ; begin
60844: LD_INT 0
60846: PPUSH
// if GetTaskList ( sci ) > 0 then
60847: LD_VAR 0 1
60851: PPUSH
60852: CALL_OW 437
60856: PUSH
60857: LD_INT 0
60859: GREATER
60860: IFFALSE 60930
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60862: LD_VAR 0 1
60866: PPUSH
60867: CALL_OW 437
60871: PUSH
60872: LD_INT 1
60874: ARRAY
60875: PUSH
60876: LD_INT 1
60878: ARRAY
60879: PUSH
60880: LD_STRING l
60882: EQUAL
60883: PUSH
60884: LD_VAR 0 1
60888: PPUSH
60889: CALL_OW 437
60893: PUSH
60894: LD_INT 1
60896: ARRAY
60897: PUSH
60898: LD_INT 4
60900: ARRAY
60901: PUSH
60902: LD_VAR 0 2
60906: EQUAL
60907: AND
60908: IFFALSE 60920
// result := true else
60910: LD_ADDR_VAR 0 3
60914: PUSH
60915: LD_INT 1
60917: ST_TO_ADDR
60918: GO 60928
// result := false ;
60920: LD_ADDR_VAR 0 3
60924: PUSH
60925: LD_INT 0
60927: ST_TO_ADDR
// end else
60928: GO 60938
// result := false ;
60930: LD_ADDR_VAR 0 3
60934: PUSH
60935: LD_INT 0
60937: ST_TO_ADDR
// end ;
60938: LD_VAR 0 3
60942: RET
// export function HealTarget ( sci ) ; begin
60943: LD_INT 0
60945: PPUSH
// if not sci then
60946: LD_VAR 0 1
60950: NOT
60951: IFFALSE 60955
// exit ;
60953: GO 61020
// result := 0 ;
60955: LD_ADDR_VAR 0 2
60959: PUSH
60960: LD_INT 0
60962: ST_TO_ADDR
// if GetTaskList ( sci ) then
60963: LD_VAR 0 1
60967: PPUSH
60968: CALL_OW 437
60972: IFFALSE 61020
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60974: LD_VAR 0 1
60978: PPUSH
60979: CALL_OW 437
60983: PUSH
60984: LD_INT 1
60986: ARRAY
60987: PUSH
60988: LD_INT 1
60990: ARRAY
60991: PUSH
60992: LD_STRING l
60994: EQUAL
60995: IFFALSE 61020
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60997: LD_ADDR_VAR 0 2
61001: PUSH
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL_OW 437
61011: PUSH
61012: LD_INT 1
61014: ARRAY
61015: PUSH
61016: LD_INT 4
61018: ARRAY
61019: ST_TO_ADDR
// end ;
61020: LD_VAR 0 2
61024: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61025: LD_INT 0
61027: PPUSH
61028: PPUSH
61029: PPUSH
61030: PPUSH
// if not base_units then
61031: LD_VAR 0 1
61035: NOT
61036: IFFALSE 61040
// exit ;
61038: GO 61127
// result := false ;
61040: LD_ADDR_VAR 0 2
61044: PUSH
61045: LD_INT 0
61047: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61048: LD_ADDR_VAR 0 5
61052: PUSH
61053: LD_VAR 0 1
61057: PPUSH
61058: LD_INT 21
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PPUSH
61068: CALL_OW 72
61072: ST_TO_ADDR
// if not tmp then
61073: LD_VAR 0 5
61077: NOT
61078: IFFALSE 61082
// exit ;
61080: GO 61127
// for i in tmp do
61082: LD_ADDR_VAR 0 3
61086: PUSH
61087: LD_VAR 0 5
61091: PUSH
61092: FOR_IN
61093: IFFALSE 61125
// begin result := EnemyInRange ( i , 22 ) ;
61095: LD_ADDR_VAR 0 2
61099: PUSH
61100: LD_VAR 0 3
61104: PPUSH
61105: LD_INT 22
61107: PPUSH
61108: CALL 59363 0 2
61112: ST_TO_ADDR
// if result then
61113: LD_VAR 0 2
61117: IFFALSE 61123
// exit ;
61119: POP
61120: POP
61121: GO 61127
// end ;
61123: GO 61092
61125: POP
61126: POP
// end ;
61127: LD_VAR 0 2
61131: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61132: LD_INT 0
61134: PPUSH
61135: PPUSH
// if not units then
61136: LD_VAR 0 1
61140: NOT
61141: IFFALSE 61145
// exit ;
61143: GO 61215
// result := [ ] ;
61145: LD_ADDR_VAR 0 3
61149: PUSH
61150: EMPTY
61151: ST_TO_ADDR
// for i in units do
61152: LD_ADDR_VAR 0 4
61156: PUSH
61157: LD_VAR 0 1
61161: PUSH
61162: FOR_IN
61163: IFFALSE 61213
// if GetTag ( i ) = tag then
61165: LD_VAR 0 4
61169: PPUSH
61170: CALL_OW 110
61174: PUSH
61175: LD_VAR 0 2
61179: EQUAL
61180: IFFALSE 61211
// result := Insert ( result , result + 1 , i ) ;
61182: LD_ADDR_VAR 0 3
61186: PUSH
61187: LD_VAR 0 3
61191: PPUSH
61192: LD_VAR 0 3
61196: PUSH
61197: LD_INT 1
61199: PLUS
61200: PPUSH
61201: LD_VAR 0 4
61205: PPUSH
61206: CALL_OW 2
61210: ST_TO_ADDR
61211: GO 61162
61213: POP
61214: POP
// end ;
61215: LD_VAR 0 3
61219: RET
// export function IsDriver ( un ) ; begin
61220: LD_INT 0
61222: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61223: LD_ADDR_VAR 0 2
61227: PUSH
61228: LD_VAR 0 1
61232: PUSH
61233: LD_INT 55
61235: PUSH
61236: EMPTY
61237: LIST
61238: PPUSH
61239: CALL_OW 69
61243: IN
61244: ST_TO_ADDR
// end ;
61245: LD_VAR 0 2
61249: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61250: LD_INT 0
61252: PPUSH
61253: PPUSH
// list := [ ] ;
61254: LD_ADDR_VAR 0 5
61258: PUSH
61259: EMPTY
61260: ST_TO_ADDR
// case d of 0 :
61261: LD_VAR 0 3
61265: PUSH
61266: LD_INT 0
61268: DOUBLE
61269: EQUAL
61270: IFTRUE 61274
61272: GO 61407
61274: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61275: LD_ADDR_VAR 0 5
61279: PUSH
61280: LD_VAR 0 1
61284: PUSH
61285: LD_INT 4
61287: MINUS
61288: PUSH
61289: LD_VAR 0 2
61293: PUSH
61294: LD_INT 4
61296: MINUS
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: LIST
61305: PUSH
61306: LD_VAR 0 1
61310: PUSH
61311: LD_INT 3
61313: MINUS
61314: PUSH
61315: LD_VAR 0 2
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: PUSH
61328: LD_VAR 0 1
61332: PUSH
61333: LD_INT 4
61335: PLUS
61336: PUSH
61337: LD_VAR 0 2
61341: PUSH
61342: LD_INT 4
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: PUSH
61350: LD_VAR 0 1
61354: PUSH
61355: LD_INT 3
61357: PLUS
61358: PUSH
61359: LD_VAR 0 2
61363: PUSH
61364: LD_INT 3
61366: PLUS
61367: PUSH
61368: LD_INT 5
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: LIST
61375: PUSH
61376: LD_VAR 0 1
61380: PUSH
61381: LD_VAR 0 2
61385: PUSH
61386: LD_INT 4
61388: PLUS
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: ST_TO_ADDR
// end ; 1 :
61405: GO 62105
61407: LD_INT 1
61409: DOUBLE
61410: EQUAL
61411: IFTRUE 61415
61413: GO 61548
61415: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61416: LD_ADDR_VAR 0 5
61420: PUSH
61421: LD_VAR 0 1
61425: PUSH
61426: LD_VAR 0 2
61430: PUSH
61431: LD_INT 4
61433: MINUS
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: PUSH
61443: LD_VAR 0 1
61447: PUSH
61448: LD_INT 3
61450: MINUS
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: LD_INT 3
61459: MINUS
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 1
61473: PUSH
61474: LD_INT 4
61476: MINUS
61477: PUSH
61478: LD_VAR 0 2
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: PUSH
61491: LD_VAR 0 1
61495: PUSH
61496: LD_VAR 0 2
61500: PUSH
61501: LD_INT 3
61503: PLUS
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: PUSH
61513: LD_VAR 0 1
61517: PUSH
61518: LD_INT 4
61520: PLUS
61521: PUSH
61522: LD_VAR 0 2
61526: PUSH
61527: LD_INT 4
61529: PLUS
61530: PUSH
61531: LD_INT 5
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: ST_TO_ADDR
// end ; 2 :
61546: GO 62105
61548: LD_INT 2
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61556
61554: GO 61685
61556: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61557: LD_ADDR_VAR 0 5
61561: PUSH
61562: LD_VAR 0 1
61566: PUSH
61567: LD_VAR 0 2
61571: PUSH
61572: LD_INT 3
61574: MINUS
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: LD_VAR 0 1
61588: PUSH
61589: LD_INT 4
61591: PLUS
61592: PUSH
61593: LD_VAR 0 2
61597: PUSH
61598: LD_INT 4
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: PUSH
61606: LD_VAR 0 1
61610: PUSH
61611: LD_VAR 0 2
61615: PUSH
61616: LD_INT 4
61618: PLUS
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: PUSH
61628: LD_VAR 0 1
61632: PUSH
61633: LD_INT 3
61635: MINUS
61636: PUSH
61637: LD_VAR 0 2
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: LIST
61649: PUSH
61650: LD_VAR 0 1
61654: PUSH
61655: LD_INT 4
61657: MINUS
61658: PUSH
61659: LD_VAR 0 2
61663: PUSH
61664: LD_INT 4
61666: MINUS
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: ST_TO_ADDR
// end ; 3 :
61683: GO 62105
61685: LD_INT 3
61687: DOUBLE
61688: EQUAL
61689: IFTRUE 61693
61691: GO 61826
61693: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61694: LD_ADDR_VAR 0 5
61698: PUSH
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 3
61706: PLUS
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 4
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: PUSH
61721: LD_VAR 0 1
61725: PUSH
61726: LD_INT 4
61728: PLUS
61729: PUSH
61730: LD_VAR 0 2
61734: PUSH
61735: LD_INT 4
61737: PLUS
61738: PUSH
61739: LD_INT 5
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: PUSH
61747: LD_VAR 0 1
61751: PUSH
61752: LD_INT 4
61754: MINUS
61755: PUSH
61756: LD_VAR 0 2
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: PUSH
61769: LD_VAR 0 1
61773: PUSH
61774: LD_VAR 0 2
61778: PUSH
61779: LD_INT 4
61781: MINUS
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: LIST
61790: PUSH
61791: LD_VAR 0 1
61795: PUSH
61796: LD_INT 3
61798: MINUS
61799: PUSH
61800: LD_VAR 0 2
61804: PUSH
61805: LD_INT 3
61807: MINUS
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: LIST
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: ST_TO_ADDR
// end ; 4 :
61824: GO 62105
61826: LD_INT 4
61828: DOUBLE
61829: EQUAL
61830: IFTRUE 61834
61832: GO 61967
61834: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61835: LD_ADDR_VAR 0 5
61839: PUSH
61840: LD_VAR 0 1
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: LD_INT 4
61852: PLUS
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: PUSH
61862: LD_VAR 0 1
61866: PUSH
61867: LD_INT 3
61869: PLUS
61870: PUSH
61871: LD_VAR 0 2
61875: PUSH
61876: LD_INT 3
61878: PLUS
61879: PUSH
61880: LD_INT 5
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_VAR 0 1
61892: PUSH
61893: LD_INT 4
61895: PLUS
61896: PUSH
61897: LD_VAR 0 2
61901: PUSH
61902: LD_INT 4
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: PUSH
61910: LD_VAR 0 1
61914: PUSH
61915: LD_VAR 0 2
61919: PUSH
61920: LD_INT 3
61922: MINUS
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: LIST
61931: PUSH
61932: LD_VAR 0 1
61936: PUSH
61937: LD_INT 4
61939: MINUS
61940: PUSH
61941: LD_VAR 0 2
61945: PUSH
61946: LD_INT 4
61948: MINUS
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: ST_TO_ADDR
// end ; 5 :
61965: GO 62105
61967: LD_INT 5
61969: DOUBLE
61970: EQUAL
61971: IFTRUE 61975
61973: GO 62104
61975: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61976: LD_ADDR_VAR 0 5
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_INT 4
61988: MINUS
61989: PUSH
61990: LD_VAR 0 2
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: PUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_VAR 0 2
62012: PUSH
62013: LD_INT 4
62015: MINUS
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: LD_VAR 0 1
62029: PUSH
62030: LD_INT 4
62032: PLUS
62033: PUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_INT 4
62041: PLUS
62042: PUSH
62043: LD_INT 5
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_INT 3
62058: PLUS
62059: PUSH
62060: LD_VAR 0 2
62064: PUSH
62065: LD_INT 4
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: LD_VAR 0 1
62077: PUSH
62078: LD_VAR 0 2
62082: PUSH
62083: LD_INT 3
62085: PLUS
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: LIST
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: ST_TO_ADDR
// end ; end ;
62102: GO 62105
62104: POP
// result := list ;
62105: LD_ADDR_VAR 0 4
62109: PUSH
62110: LD_VAR 0 5
62114: ST_TO_ADDR
// end ;
62115: LD_VAR 0 4
62119: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62120: LD_INT 0
62122: PPUSH
62123: PPUSH
62124: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62125: LD_VAR 0 1
62129: NOT
62130: PUSH
62131: LD_VAR 0 2
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: LD_INT 4
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: IN
62154: NOT
62155: OR
62156: IFFALSE 62160
// exit ;
62158: GO 62252
// tmp := [ ] ;
62160: LD_ADDR_VAR 0 5
62164: PUSH
62165: EMPTY
62166: ST_TO_ADDR
// for i in units do
62167: LD_ADDR_VAR 0 4
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: FOR_IN
62178: IFFALSE 62221
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62180: LD_ADDR_VAR 0 5
62184: PUSH
62185: LD_VAR 0 5
62189: PPUSH
62190: LD_VAR 0 5
62194: PUSH
62195: LD_INT 1
62197: PLUS
62198: PPUSH
62199: LD_VAR 0 4
62203: PPUSH
62204: LD_VAR 0 2
62208: PPUSH
62209: CALL_OW 259
62213: PPUSH
62214: CALL_OW 2
62218: ST_TO_ADDR
62219: GO 62177
62221: POP
62222: POP
// if not tmp then
62223: LD_VAR 0 5
62227: NOT
62228: IFFALSE 62232
// exit ;
62230: GO 62252
// result := SortListByListDesc ( units , tmp ) ;
62232: LD_ADDR_VAR 0 3
62236: PUSH
62237: LD_VAR 0 1
62241: PPUSH
62242: LD_VAR 0 5
62246: PPUSH
62247: CALL_OW 77
62251: ST_TO_ADDR
// end ;
62252: LD_VAR 0 3
62256: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62257: LD_INT 0
62259: PPUSH
62260: PPUSH
62261: PPUSH
// result := false ;
62262: LD_ADDR_VAR 0 3
62266: PUSH
62267: LD_INT 0
62269: ST_TO_ADDR
// x := GetX ( building ) ;
62270: LD_ADDR_VAR 0 4
62274: PUSH
62275: LD_VAR 0 2
62279: PPUSH
62280: CALL_OW 250
62284: ST_TO_ADDR
// y := GetY ( building ) ;
62285: LD_ADDR_VAR 0 5
62289: PUSH
62290: LD_VAR 0 2
62294: PPUSH
62295: CALL_OW 251
62299: ST_TO_ADDR
// if not building or not x or not y then
62300: LD_VAR 0 2
62304: NOT
62305: PUSH
62306: LD_VAR 0 4
62310: NOT
62311: OR
62312: PUSH
62313: LD_VAR 0 5
62317: NOT
62318: OR
62319: IFFALSE 62323
// exit ;
62321: GO 62415
// if GetTaskList ( unit ) then
62323: LD_VAR 0 1
62327: PPUSH
62328: CALL_OW 437
62332: IFFALSE 62415
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62334: LD_STRING e
62336: PUSH
62337: LD_VAR 0 1
62341: PPUSH
62342: CALL_OW 437
62346: PUSH
62347: LD_INT 1
62349: ARRAY
62350: PUSH
62351: LD_INT 1
62353: ARRAY
62354: EQUAL
62355: PUSH
62356: LD_VAR 0 4
62360: PUSH
62361: LD_VAR 0 1
62365: PPUSH
62366: CALL_OW 437
62370: PUSH
62371: LD_INT 1
62373: ARRAY
62374: PUSH
62375: LD_INT 2
62377: ARRAY
62378: EQUAL
62379: AND
62380: PUSH
62381: LD_VAR 0 5
62385: PUSH
62386: LD_VAR 0 1
62390: PPUSH
62391: CALL_OW 437
62395: PUSH
62396: LD_INT 1
62398: ARRAY
62399: PUSH
62400: LD_INT 3
62402: ARRAY
62403: EQUAL
62404: AND
62405: IFFALSE 62415
// result := true end ;
62407: LD_ADDR_VAR 0 3
62411: PUSH
62412: LD_INT 1
62414: ST_TO_ADDR
// end ;
62415: LD_VAR 0 3
62419: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62420: LD_INT 0
62422: PPUSH
// result := false ;
62423: LD_ADDR_VAR 0 4
62427: PUSH
62428: LD_INT 0
62430: ST_TO_ADDR
// if GetTaskList ( unit ) then
62431: LD_VAR 0 1
62435: PPUSH
62436: CALL_OW 437
62440: IFFALSE 62523
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62442: LD_STRING M
62444: PUSH
62445: LD_VAR 0 1
62449: PPUSH
62450: CALL_OW 437
62454: PUSH
62455: LD_INT 1
62457: ARRAY
62458: PUSH
62459: LD_INT 1
62461: ARRAY
62462: EQUAL
62463: PUSH
62464: LD_VAR 0 2
62468: PUSH
62469: LD_VAR 0 1
62473: PPUSH
62474: CALL_OW 437
62478: PUSH
62479: LD_INT 1
62481: ARRAY
62482: PUSH
62483: LD_INT 2
62485: ARRAY
62486: EQUAL
62487: AND
62488: PUSH
62489: LD_VAR 0 3
62493: PUSH
62494: LD_VAR 0 1
62498: PPUSH
62499: CALL_OW 437
62503: PUSH
62504: LD_INT 1
62506: ARRAY
62507: PUSH
62508: LD_INT 3
62510: ARRAY
62511: EQUAL
62512: AND
62513: IFFALSE 62523
// result := true ;
62515: LD_ADDR_VAR 0 4
62519: PUSH
62520: LD_INT 1
62522: ST_TO_ADDR
// end ; end ;
62523: LD_VAR 0 4
62527: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62528: LD_INT 0
62530: PPUSH
62531: PPUSH
62532: PPUSH
62533: PPUSH
// if not unit or not area then
62534: LD_VAR 0 1
62538: NOT
62539: PUSH
62540: LD_VAR 0 2
62544: NOT
62545: OR
62546: IFFALSE 62550
// exit ;
62548: GO 62714
// tmp := AreaToList ( area , i ) ;
62550: LD_ADDR_VAR 0 6
62554: PUSH
62555: LD_VAR 0 2
62559: PPUSH
62560: LD_VAR 0 5
62564: PPUSH
62565: CALL_OW 517
62569: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62570: LD_ADDR_VAR 0 5
62574: PUSH
62575: DOUBLE
62576: LD_INT 1
62578: DEC
62579: ST_TO_ADDR
62580: LD_VAR 0 6
62584: PUSH
62585: LD_INT 1
62587: ARRAY
62588: PUSH
62589: FOR_TO
62590: IFFALSE 62712
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62592: LD_ADDR_VAR 0 7
62596: PUSH
62597: LD_VAR 0 6
62601: PUSH
62602: LD_INT 1
62604: ARRAY
62605: PUSH
62606: LD_VAR 0 5
62610: ARRAY
62611: PUSH
62612: LD_VAR 0 6
62616: PUSH
62617: LD_INT 2
62619: ARRAY
62620: PUSH
62621: LD_VAR 0 5
62625: ARRAY
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62631: LD_VAR 0 7
62635: PUSH
62636: LD_INT 1
62638: ARRAY
62639: PPUSH
62640: LD_VAR 0 7
62644: PUSH
62645: LD_INT 2
62647: ARRAY
62648: PPUSH
62649: CALL_OW 428
62653: PUSH
62654: LD_INT 0
62656: EQUAL
62657: IFFALSE 62710
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62659: LD_VAR 0 1
62663: PPUSH
62664: LD_VAR 0 7
62668: PUSH
62669: LD_INT 1
62671: ARRAY
62672: PPUSH
62673: LD_VAR 0 7
62677: PUSH
62678: LD_INT 2
62680: ARRAY
62681: PPUSH
62682: LD_VAR 0 3
62686: PPUSH
62687: CALL_OW 48
// result := IsPlaced ( unit ) ;
62691: LD_ADDR_VAR 0 4
62695: PUSH
62696: LD_VAR 0 1
62700: PPUSH
62701: CALL_OW 305
62705: ST_TO_ADDR
// exit ;
62706: POP
62707: POP
62708: GO 62714
// end ; end ;
62710: GO 62589
62712: POP
62713: POP
// end ;
62714: LD_VAR 0 4
62718: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62719: LD_INT 0
62721: PPUSH
62722: PPUSH
62723: PPUSH
// if not side or side > 8 then
62724: LD_VAR 0 1
62728: NOT
62729: PUSH
62730: LD_VAR 0 1
62734: PUSH
62735: LD_INT 8
62737: GREATER
62738: OR
62739: IFFALSE 62743
// exit ;
62741: GO 62930
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62743: LD_ADDR_VAR 0 4
62747: PUSH
62748: LD_INT 22
62750: PUSH
62751: LD_VAR 0 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 21
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PPUSH
62774: CALL_OW 69
62778: ST_TO_ADDR
// if not tmp then
62779: LD_VAR 0 4
62783: NOT
62784: IFFALSE 62788
// exit ;
62786: GO 62930
// enable_addtolog := true ;
62788: LD_ADDR_OWVAR 81
62792: PUSH
62793: LD_INT 1
62795: ST_TO_ADDR
// AddToLog ( [ ) ;
62796: LD_STRING [
62798: PPUSH
62799: CALL_OW 561
// for i in tmp do
62803: LD_ADDR_VAR 0 3
62807: PUSH
62808: LD_VAR 0 4
62812: PUSH
62813: FOR_IN
62814: IFFALSE 62921
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62816: LD_STRING [
62818: PUSH
62819: LD_VAR 0 3
62823: PPUSH
62824: CALL_OW 266
62828: STR
62829: PUSH
62830: LD_STRING , 
62832: STR
62833: PUSH
62834: LD_VAR 0 3
62838: PPUSH
62839: CALL_OW 250
62843: STR
62844: PUSH
62845: LD_STRING , 
62847: STR
62848: PUSH
62849: LD_VAR 0 3
62853: PPUSH
62854: CALL_OW 251
62858: STR
62859: PUSH
62860: LD_STRING , 
62862: STR
62863: PUSH
62864: LD_VAR 0 3
62868: PPUSH
62869: CALL_OW 254
62873: STR
62874: PUSH
62875: LD_STRING , 
62877: STR
62878: PUSH
62879: LD_VAR 0 3
62883: PPUSH
62884: LD_INT 1
62886: PPUSH
62887: CALL_OW 268
62891: STR
62892: PUSH
62893: LD_STRING , 
62895: STR
62896: PUSH
62897: LD_VAR 0 3
62901: PPUSH
62902: LD_INT 2
62904: PPUSH
62905: CALL_OW 268
62909: STR
62910: PUSH
62911: LD_STRING ],
62913: STR
62914: PPUSH
62915: CALL_OW 561
// end ;
62919: GO 62813
62921: POP
62922: POP
// AddToLog ( ]; ) ;
62923: LD_STRING ];
62925: PPUSH
62926: CALL_OW 561
// end ;
62930: LD_VAR 0 2
62934: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62935: LD_INT 0
62937: PPUSH
62938: PPUSH
62939: PPUSH
62940: PPUSH
62941: PPUSH
// if not area or not rate or not max then
62942: LD_VAR 0 1
62946: NOT
62947: PUSH
62948: LD_VAR 0 2
62952: NOT
62953: OR
62954: PUSH
62955: LD_VAR 0 4
62959: NOT
62960: OR
62961: IFFALSE 62965
// exit ;
62963: GO 63157
// while 1 do
62965: LD_INT 1
62967: IFFALSE 63157
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62969: LD_ADDR_VAR 0 9
62973: PUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: LD_INT 1
62981: PPUSH
62982: CALL_OW 287
62986: PUSH
62987: LD_INT 10
62989: MUL
62990: ST_TO_ADDR
// r := rate / 10 ;
62991: LD_ADDR_VAR 0 7
62995: PUSH
62996: LD_VAR 0 2
63000: PUSH
63001: LD_INT 10
63003: DIVREAL
63004: ST_TO_ADDR
// time := 1 1$00 ;
63005: LD_ADDR_VAR 0 8
63009: PUSH
63010: LD_INT 2100
63012: ST_TO_ADDR
// if amount < min then
63013: LD_VAR 0 9
63017: PUSH
63018: LD_VAR 0 3
63022: LESS
63023: IFFALSE 63041
// r := r * 2 else
63025: LD_ADDR_VAR 0 7
63029: PUSH
63030: LD_VAR 0 7
63034: PUSH
63035: LD_INT 2
63037: MUL
63038: ST_TO_ADDR
63039: GO 63067
// if amount > max then
63041: LD_VAR 0 9
63045: PUSH
63046: LD_VAR 0 4
63050: GREATER
63051: IFFALSE 63067
// r := r / 2 ;
63053: LD_ADDR_VAR 0 7
63057: PUSH
63058: LD_VAR 0 7
63062: PUSH
63063: LD_INT 2
63065: DIVREAL
63066: ST_TO_ADDR
// time := time / r ;
63067: LD_ADDR_VAR 0 8
63071: PUSH
63072: LD_VAR 0 8
63076: PUSH
63077: LD_VAR 0 7
63081: DIVREAL
63082: ST_TO_ADDR
// if time < 0 then
63083: LD_VAR 0 8
63087: PUSH
63088: LD_INT 0
63090: LESS
63091: IFFALSE 63108
// time := time * - 1 ;
63093: LD_ADDR_VAR 0 8
63097: PUSH
63098: LD_VAR 0 8
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: MUL
63107: ST_TO_ADDR
// wait ( time ) ;
63108: LD_VAR 0 8
63112: PPUSH
63113: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63117: LD_INT 35
63119: PPUSH
63120: LD_INT 875
63122: PPUSH
63123: CALL_OW 12
63127: PPUSH
63128: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63132: LD_INT 1
63134: PPUSH
63135: LD_INT 5
63137: PPUSH
63138: CALL_OW 12
63142: PPUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: LD_INT 1
63150: PPUSH
63151: CALL_OW 55
// end ;
63155: GO 62965
// end ;
63157: LD_VAR 0 5
63161: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63162: LD_INT 0
63164: PPUSH
63165: PPUSH
63166: PPUSH
63167: PPUSH
63168: PPUSH
63169: PPUSH
63170: PPUSH
63171: PPUSH
// if not turrets or not factories then
63172: LD_VAR 0 1
63176: NOT
63177: PUSH
63178: LD_VAR 0 2
63182: NOT
63183: OR
63184: IFFALSE 63188
// exit ;
63186: GO 63495
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63188: LD_ADDR_VAR 0 10
63192: PUSH
63193: LD_INT 5
63195: PUSH
63196: LD_INT 6
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: LD_INT 4
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 3
63215: PUSH
63216: LD_INT 5
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 24
63230: PUSH
63231: LD_INT 25
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 23
63240: PUSH
63241: LD_INT 27
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 42
63254: PUSH
63255: LD_INT 43
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 44
63264: PUSH
63265: LD_INT 46
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 45
63274: PUSH
63275: LD_INT 47
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: LIST
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: ST_TO_ADDR
// result := [ ] ;
63292: LD_ADDR_VAR 0 3
63296: PUSH
63297: EMPTY
63298: ST_TO_ADDR
// for i in turrets do
63299: LD_ADDR_VAR 0 4
63303: PUSH
63304: LD_VAR 0 1
63308: PUSH
63309: FOR_IN
63310: IFFALSE 63493
// begin nat := GetNation ( i ) ;
63312: LD_ADDR_VAR 0 7
63316: PUSH
63317: LD_VAR 0 4
63321: PPUSH
63322: CALL_OW 248
63326: ST_TO_ADDR
// weapon := 0 ;
63327: LD_ADDR_VAR 0 8
63331: PUSH
63332: LD_INT 0
63334: ST_TO_ADDR
// if not nat then
63335: LD_VAR 0 7
63339: NOT
63340: IFFALSE 63344
// continue ;
63342: GO 63309
// for j in list [ nat ] do
63344: LD_ADDR_VAR 0 5
63348: PUSH
63349: LD_VAR 0 10
63353: PUSH
63354: LD_VAR 0 7
63358: ARRAY
63359: PUSH
63360: FOR_IN
63361: IFFALSE 63402
// if GetBWeapon ( i ) = j [ 1 ] then
63363: LD_VAR 0 4
63367: PPUSH
63368: CALL_OW 269
63372: PUSH
63373: LD_VAR 0 5
63377: PUSH
63378: LD_INT 1
63380: ARRAY
63381: EQUAL
63382: IFFALSE 63400
// begin weapon := j [ 2 ] ;
63384: LD_ADDR_VAR 0 8
63388: PUSH
63389: LD_VAR 0 5
63393: PUSH
63394: LD_INT 2
63396: ARRAY
63397: ST_TO_ADDR
// break ;
63398: GO 63402
// end ;
63400: GO 63360
63402: POP
63403: POP
// if not weapon then
63404: LD_VAR 0 8
63408: NOT
63409: IFFALSE 63413
// continue ;
63411: GO 63309
// for k in factories do
63413: LD_ADDR_VAR 0 6
63417: PUSH
63418: LD_VAR 0 2
63422: PUSH
63423: FOR_IN
63424: IFFALSE 63489
// begin weapons := AvailableWeaponList ( k ) ;
63426: LD_ADDR_VAR 0 9
63430: PUSH
63431: LD_VAR 0 6
63435: PPUSH
63436: CALL_OW 478
63440: ST_TO_ADDR
// if not weapons then
63441: LD_VAR 0 9
63445: NOT
63446: IFFALSE 63450
// continue ;
63448: GO 63423
// if weapon in weapons then
63450: LD_VAR 0 8
63454: PUSH
63455: LD_VAR 0 9
63459: IN
63460: IFFALSE 63487
// begin result := [ i , weapon ] ;
63462: LD_ADDR_VAR 0 3
63466: PUSH
63467: LD_VAR 0 4
63471: PUSH
63472: LD_VAR 0 8
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: ST_TO_ADDR
// exit ;
63481: POP
63482: POP
63483: POP
63484: POP
63485: GO 63495
// end ; end ;
63487: GO 63423
63489: POP
63490: POP
// end ;
63491: GO 63309
63493: POP
63494: POP
// end ;
63495: LD_VAR 0 3
63499: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63500: LD_INT 0
63502: PPUSH
// if not side or side > 8 then
63503: LD_VAR 0 3
63507: NOT
63508: PUSH
63509: LD_VAR 0 3
63513: PUSH
63514: LD_INT 8
63516: GREATER
63517: OR
63518: IFFALSE 63522
// exit ;
63520: GO 63581
// if not range then
63522: LD_VAR 0 4
63526: NOT
63527: IFFALSE 63538
// range := - 12 ;
63529: LD_ADDR_VAR 0 4
63533: PUSH
63534: LD_INT 12
63536: NEG
63537: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63538: LD_VAR 0 1
63542: PPUSH
63543: LD_VAR 0 2
63547: PPUSH
63548: LD_VAR 0 3
63552: PPUSH
63553: LD_VAR 0 4
63557: PPUSH
63558: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63562: LD_VAR 0 1
63566: PPUSH
63567: LD_VAR 0 2
63571: PPUSH
63572: LD_VAR 0 3
63576: PPUSH
63577: CALL_OW 331
// end ;
63581: LD_VAR 0 5
63585: RET
// export function Video ( mode ) ; begin
63586: LD_INT 0
63588: PPUSH
// ingame_video = mode ;
63589: LD_ADDR_OWVAR 52
63593: PUSH
63594: LD_VAR 0 1
63598: ST_TO_ADDR
// interface_hidden = mode ;
63599: LD_ADDR_OWVAR 54
63603: PUSH
63604: LD_VAR 0 1
63608: ST_TO_ADDR
// end ;
63609: LD_VAR 0 2
63613: RET
// export function Join ( array , element ) ; begin
63614: LD_INT 0
63616: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63617: LD_ADDR_VAR 0 3
63621: PUSH
63622: LD_VAR 0 1
63626: PPUSH
63627: LD_VAR 0 1
63631: PUSH
63632: LD_INT 1
63634: PLUS
63635: PPUSH
63636: LD_VAR 0 2
63640: PPUSH
63641: CALL_OW 1
63645: ST_TO_ADDR
// end ;
63646: LD_VAR 0 3
63650: RET
// export function JoinUnion ( array , element ) ; begin
63651: LD_INT 0
63653: PPUSH
// result := array union element ;
63654: LD_ADDR_VAR 0 3
63658: PUSH
63659: LD_VAR 0 1
63663: PUSH
63664: LD_VAR 0 2
63668: UNION
63669: ST_TO_ADDR
// end ;
63670: LD_VAR 0 3
63674: RET
// export function GetBehemoths ( side ) ; begin
63675: LD_INT 0
63677: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63678: LD_ADDR_VAR 0 2
63682: PUSH
63683: LD_INT 22
63685: PUSH
63686: LD_VAR 0 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 31
63697: PUSH
63698: LD_INT 25
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PPUSH
63709: CALL_OW 69
63713: ST_TO_ADDR
// end ;
63714: LD_VAR 0 2
63718: RET
// export function Shuffle ( array ) ; var i , index ; begin
63719: LD_INT 0
63721: PPUSH
63722: PPUSH
63723: PPUSH
// result := [ ] ;
63724: LD_ADDR_VAR 0 2
63728: PUSH
63729: EMPTY
63730: ST_TO_ADDR
// if not array then
63731: LD_VAR 0 1
63735: NOT
63736: IFFALSE 63740
// exit ;
63738: GO 63839
// Randomize ;
63740: CALL_OW 10
// for i = array downto 1 do
63744: LD_ADDR_VAR 0 3
63748: PUSH
63749: DOUBLE
63750: LD_VAR 0 1
63754: INC
63755: ST_TO_ADDR
63756: LD_INT 1
63758: PUSH
63759: FOR_DOWNTO
63760: IFFALSE 63837
// begin index := rand ( 1 , array ) ;
63762: LD_ADDR_VAR 0 4
63766: PUSH
63767: LD_INT 1
63769: PPUSH
63770: LD_VAR 0 1
63774: PPUSH
63775: CALL_OW 12
63779: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63780: LD_ADDR_VAR 0 2
63784: PUSH
63785: LD_VAR 0 2
63789: PPUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_INT 1
63797: PLUS
63798: PPUSH
63799: LD_VAR 0 1
63803: PUSH
63804: LD_VAR 0 4
63808: ARRAY
63809: PPUSH
63810: CALL_OW 2
63814: ST_TO_ADDR
// array := Delete ( array , index ) ;
63815: LD_ADDR_VAR 0 1
63819: PUSH
63820: LD_VAR 0 1
63824: PPUSH
63825: LD_VAR 0 4
63829: PPUSH
63830: CALL_OW 3
63834: ST_TO_ADDR
// end ;
63835: GO 63759
63837: POP
63838: POP
// end ;
63839: LD_VAR 0 2
63843: RET
// export function GetBaseMaterials ( base ) ; begin
63844: LD_INT 0
63846: PPUSH
// result := [ 0 , 0 , 0 ] ;
63847: LD_ADDR_VAR 0 2
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: ST_TO_ADDR
// if not base then
63866: LD_VAR 0 1
63870: NOT
63871: IFFALSE 63875
// exit ;
63873: GO 63924
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63875: LD_ADDR_VAR 0 2
63879: PUSH
63880: LD_VAR 0 1
63884: PPUSH
63885: LD_INT 1
63887: PPUSH
63888: CALL_OW 275
63892: PUSH
63893: LD_VAR 0 1
63897: PPUSH
63898: LD_INT 2
63900: PPUSH
63901: CALL_OW 275
63905: PUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: LD_INT 3
63913: PPUSH
63914: CALL_OW 275
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: ST_TO_ADDR
// end ;
63924: LD_VAR 0 2
63928: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63929: LD_INT 0
63931: PPUSH
63932: PPUSH
// result := array ;
63933: LD_ADDR_VAR 0 3
63937: PUSH
63938: LD_VAR 0 1
63942: ST_TO_ADDR
// if size > 0 then
63943: LD_VAR 0 2
63947: PUSH
63948: LD_INT 0
63950: GREATER
63951: IFFALSE 63997
// for i := array downto size do
63953: LD_ADDR_VAR 0 4
63957: PUSH
63958: DOUBLE
63959: LD_VAR 0 1
63963: INC
63964: ST_TO_ADDR
63965: LD_VAR 0 2
63969: PUSH
63970: FOR_DOWNTO
63971: IFFALSE 63995
// result := Delete ( result , result ) ;
63973: LD_ADDR_VAR 0 3
63977: PUSH
63978: LD_VAR 0 3
63982: PPUSH
63983: LD_VAR 0 3
63987: PPUSH
63988: CALL_OW 3
63992: ST_TO_ADDR
63993: GO 63970
63995: POP
63996: POP
// end ;
63997: LD_VAR 0 3
64001: RET
// export function ComExit ( unit ) ; var tmp ; begin
64002: LD_INT 0
64004: PPUSH
64005: PPUSH
// if not IsInUnit ( unit ) then
64006: LD_VAR 0 1
64010: PPUSH
64011: CALL_OW 310
64015: NOT
64016: IFFALSE 64020
// exit ;
64018: GO 64080
// tmp := IsInUnit ( unit ) ;
64020: LD_ADDR_VAR 0 3
64024: PUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 310
64034: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64035: LD_VAR 0 3
64039: PPUSH
64040: CALL_OW 247
64044: PUSH
64045: LD_INT 2
64047: EQUAL
64048: IFFALSE 64061
// ComExitVehicle ( unit ) else
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 121
64059: GO 64070
// ComExitBuilding ( unit ) ;
64061: LD_VAR 0 1
64065: PPUSH
64066: CALL_OW 122
// result := tmp ;
64070: LD_ADDR_VAR 0 2
64074: PUSH
64075: LD_VAR 0 3
64079: ST_TO_ADDR
// end ;
64080: LD_VAR 0 2
64084: RET
// export function ComExitAll ( units ) ; var i ; begin
64085: LD_INT 0
64087: PPUSH
64088: PPUSH
// if not units then
64089: LD_VAR 0 1
64093: NOT
64094: IFFALSE 64098
// exit ;
64096: GO 64124
// for i in units do
64098: LD_ADDR_VAR 0 3
64102: PUSH
64103: LD_VAR 0 1
64107: PUSH
64108: FOR_IN
64109: IFFALSE 64122
// ComExit ( i ) ;
64111: LD_VAR 0 3
64115: PPUSH
64116: CALL 64002 0 1
64120: GO 64108
64122: POP
64123: POP
// end ;
64124: LD_VAR 0 2
64128: RET
// export function ResetHc ; begin
64129: LD_INT 0
64131: PPUSH
// InitHc ;
64132: CALL_OW 19
// hc_importance := 0 ;
64136: LD_ADDR_OWVAR 32
64140: PUSH
64141: LD_INT 0
64143: ST_TO_ADDR
// end ;
64144: LD_VAR 0 1
64148: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64149: LD_INT 0
64151: PPUSH
64152: PPUSH
64153: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64154: LD_ADDR_VAR 0 6
64158: PUSH
64159: LD_VAR 0 1
64163: PUSH
64164: LD_VAR 0 3
64168: PLUS
64169: PUSH
64170: LD_INT 2
64172: DIV
64173: ST_TO_ADDR
// if _x < 0 then
64174: LD_VAR 0 6
64178: PUSH
64179: LD_INT 0
64181: LESS
64182: IFFALSE 64199
// _x := _x * - 1 ;
64184: LD_ADDR_VAR 0 6
64188: PUSH
64189: LD_VAR 0 6
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: MUL
64198: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64199: LD_ADDR_VAR 0 7
64203: PUSH
64204: LD_VAR 0 2
64208: PUSH
64209: LD_VAR 0 4
64213: PLUS
64214: PUSH
64215: LD_INT 2
64217: DIV
64218: ST_TO_ADDR
// if _y < 0 then
64219: LD_VAR 0 7
64223: PUSH
64224: LD_INT 0
64226: LESS
64227: IFFALSE 64244
// _y := _y * - 1 ;
64229: LD_ADDR_VAR 0 7
64233: PUSH
64234: LD_VAR 0 7
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: MUL
64243: ST_TO_ADDR
// result := [ _x , _y ] ;
64244: LD_ADDR_VAR 0 5
64248: PUSH
64249: LD_VAR 0 6
64253: PUSH
64254: LD_VAR 0 7
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: ST_TO_ADDR
// end ;
64263: LD_VAR 0 5
64267: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64268: LD_INT 0
64270: PPUSH
64271: PPUSH
64272: PPUSH
64273: PPUSH
// task := GetTaskList ( unit ) ;
64274: LD_ADDR_VAR 0 7
64278: PUSH
64279: LD_VAR 0 1
64283: PPUSH
64284: CALL_OW 437
64288: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64289: LD_VAR 0 7
64293: NOT
64294: PUSH
64295: LD_VAR 0 1
64299: PPUSH
64300: LD_VAR 0 2
64304: PPUSH
64305: CALL_OW 308
64309: NOT
64310: AND
64311: IFFALSE 64315
// exit ;
64313: GO 64433
// if IsInArea ( unit , area ) then
64315: LD_VAR 0 1
64319: PPUSH
64320: LD_VAR 0 2
64324: PPUSH
64325: CALL_OW 308
64329: IFFALSE 64347
// begin ComMoveToArea ( unit , goAway ) ;
64331: LD_VAR 0 1
64335: PPUSH
64336: LD_VAR 0 3
64340: PPUSH
64341: CALL_OW 113
// exit ;
64345: GO 64433
// end ; if task [ 1 ] [ 1 ] <> M then
64347: LD_VAR 0 7
64351: PUSH
64352: LD_INT 1
64354: ARRAY
64355: PUSH
64356: LD_INT 1
64358: ARRAY
64359: PUSH
64360: LD_STRING M
64362: NONEQUAL
64363: IFFALSE 64367
// exit ;
64365: GO 64433
// x := task [ 1 ] [ 2 ] ;
64367: LD_ADDR_VAR 0 5
64371: PUSH
64372: LD_VAR 0 7
64376: PUSH
64377: LD_INT 1
64379: ARRAY
64380: PUSH
64381: LD_INT 2
64383: ARRAY
64384: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64385: LD_ADDR_VAR 0 6
64389: PUSH
64390: LD_VAR 0 7
64394: PUSH
64395: LD_INT 1
64397: ARRAY
64398: PUSH
64399: LD_INT 3
64401: ARRAY
64402: ST_TO_ADDR
// if InArea ( x , y , area ) then
64403: LD_VAR 0 5
64407: PPUSH
64408: LD_VAR 0 6
64412: PPUSH
64413: LD_VAR 0 2
64417: PPUSH
64418: CALL_OW 309
64422: IFFALSE 64433
// ComStop ( unit ) ;
64424: LD_VAR 0 1
64428: PPUSH
64429: CALL_OW 141
// end ;
64433: LD_VAR 0 4
64437: RET
// export function Abs ( value ) ; begin
64438: LD_INT 0
64440: PPUSH
// result := value ;
64441: LD_ADDR_VAR 0 2
64445: PUSH
64446: LD_VAR 0 1
64450: ST_TO_ADDR
// if value < 0 then
64451: LD_VAR 0 1
64455: PUSH
64456: LD_INT 0
64458: LESS
64459: IFFALSE 64476
// result := value * - 1 ;
64461: LD_ADDR_VAR 0 2
64465: PUSH
64466: LD_VAR 0 1
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: MUL
64475: ST_TO_ADDR
// end ;
64476: LD_VAR 0 2
64480: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64481: LD_INT 0
64483: PPUSH
64484: PPUSH
64485: PPUSH
64486: PPUSH
64487: PPUSH
64488: PPUSH
64489: PPUSH
64490: PPUSH
// if not unit or not building then
64491: LD_VAR 0 1
64495: NOT
64496: PUSH
64497: LD_VAR 0 2
64501: NOT
64502: OR
64503: IFFALSE 64507
// exit ;
64505: GO 64733
// x := GetX ( building ) ;
64507: LD_ADDR_VAR 0 4
64511: PUSH
64512: LD_VAR 0 2
64516: PPUSH
64517: CALL_OW 250
64521: ST_TO_ADDR
// y := GetY ( building ) ;
64522: LD_ADDR_VAR 0 6
64526: PUSH
64527: LD_VAR 0 2
64531: PPUSH
64532: CALL_OW 251
64536: ST_TO_ADDR
// d := GetDir ( building ) ;
64537: LD_ADDR_VAR 0 8
64541: PUSH
64542: LD_VAR 0 2
64546: PPUSH
64547: CALL_OW 254
64551: ST_TO_ADDR
// r := 4 ;
64552: LD_ADDR_VAR 0 9
64556: PUSH
64557: LD_INT 4
64559: ST_TO_ADDR
// for i := 1 to 5 do
64560: LD_ADDR_VAR 0 10
64564: PUSH
64565: DOUBLE
64566: LD_INT 1
64568: DEC
64569: ST_TO_ADDR
64570: LD_INT 5
64572: PUSH
64573: FOR_TO
64574: IFFALSE 64731
// begin _x := ShiftX ( x , d , r + i ) ;
64576: LD_ADDR_VAR 0 5
64580: PUSH
64581: LD_VAR 0 4
64585: PPUSH
64586: LD_VAR 0 8
64590: PPUSH
64591: LD_VAR 0 9
64595: PUSH
64596: LD_VAR 0 10
64600: PLUS
64601: PPUSH
64602: CALL_OW 272
64606: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64607: LD_ADDR_VAR 0 7
64611: PUSH
64612: LD_VAR 0 6
64616: PPUSH
64617: LD_VAR 0 8
64621: PPUSH
64622: LD_VAR 0 9
64626: PUSH
64627: LD_VAR 0 10
64631: PLUS
64632: PPUSH
64633: CALL_OW 273
64637: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64638: LD_VAR 0 5
64642: PPUSH
64643: LD_VAR 0 7
64647: PPUSH
64648: CALL_OW 488
64652: PUSH
64653: LD_VAR 0 5
64657: PPUSH
64658: LD_VAR 0 7
64662: PPUSH
64663: CALL_OW 428
64667: PPUSH
64668: CALL_OW 247
64672: PUSH
64673: LD_INT 3
64675: PUSH
64676: LD_INT 2
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: IN
64683: NOT
64684: AND
64685: IFFALSE 64729
// begin ComMoveXY ( unit , _x , _y ) ;
64687: LD_VAR 0 1
64691: PPUSH
64692: LD_VAR 0 5
64696: PPUSH
64697: LD_VAR 0 7
64701: PPUSH
64702: CALL_OW 111
// result := [ _x , _y ] ;
64706: LD_ADDR_VAR 0 3
64710: PUSH
64711: LD_VAR 0 5
64715: PUSH
64716: LD_VAR 0 7
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: ST_TO_ADDR
// exit ;
64725: POP
64726: POP
64727: GO 64733
// end ; end ;
64729: GO 64573
64731: POP
64732: POP
// end ;
64733: LD_VAR 0 3
64737: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64738: LD_INT 0
64740: PPUSH
64741: PPUSH
64742: PPUSH
// result := 0 ;
64743: LD_ADDR_VAR 0 3
64747: PUSH
64748: LD_INT 0
64750: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64751: LD_VAR 0 1
64755: PUSH
64756: LD_INT 0
64758: LESS
64759: PUSH
64760: LD_VAR 0 1
64764: PUSH
64765: LD_INT 8
64767: GREATER
64768: OR
64769: PUSH
64770: LD_VAR 0 2
64774: PUSH
64775: LD_INT 0
64777: LESS
64778: OR
64779: PUSH
64780: LD_VAR 0 2
64784: PUSH
64785: LD_INT 8
64787: GREATER
64788: OR
64789: IFFALSE 64793
// exit ;
64791: GO 64868
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64793: LD_ADDR_VAR 0 4
64797: PUSH
64798: LD_INT 22
64800: PUSH
64801: LD_VAR 0 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PPUSH
64810: CALL_OW 69
64814: PUSH
64815: FOR_IN
64816: IFFALSE 64866
// begin un := UnitShoot ( i ) ;
64818: LD_ADDR_VAR 0 5
64822: PUSH
64823: LD_VAR 0 4
64827: PPUSH
64828: CALL_OW 504
64832: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64833: LD_VAR 0 5
64837: PPUSH
64838: CALL_OW 255
64842: PUSH
64843: LD_VAR 0 1
64847: EQUAL
64848: IFFALSE 64864
// begin result := un ;
64850: LD_ADDR_VAR 0 3
64854: PUSH
64855: LD_VAR 0 5
64859: ST_TO_ADDR
// exit ;
64860: POP
64861: POP
64862: GO 64868
// end ; end ;
64864: GO 64815
64866: POP
64867: POP
// end ;
64868: LD_VAR 0 3
64872: RET
// export function GetCargoBay ( units ) ; begin
64873: LD_INT 0
64875: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64876: LD_ADDR_VAR 0 2
64880: PUSH
64881: LD_VAR 0 1
64885: PPUSH
64886: LD_INT 2
64888: PUSH
64889: LD_INT 34
64891: PUSH
64892: LD_INT 12
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 34
64901: PUSH
64902: LD_INT 51
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 34
64911: PUSH
64912: LD_INT 32
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 34
64921: PUSH
64922: LD_EXP 94
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: PPUSH
64938: CALL_OW 72
64942: ST_TO_ADDR
// end ; end_of_file
64943: LD_VAR 0 2
64947: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64948: LD_VAR 0 1
64952: PUSH
64953: LD_INT 200
64955: DOUBLE
64956: GREATEREQUAL
64957: IFFALSE 64965
64959: LD_INT 299
64961: DOUBLE
64962: LESSEQUAL
64963: IFTRUE 64967
64965: GO 64999
64967: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64968: LD_VAR 0 1
64972: PPUSH
64973: LD_VAR 0 2
64977: PPUSH
64978: LD_VAR 0 3
64982: PPUSH
64983: LD_VAR 0 4
64987: PPUSH
64988: LD_VAR 0 5
64992: PPUSH
64993: CALL 23241 0 5
64997: GO 65076
64999: LD_INT 300
65001: DOUBLE
65002: GREATEREQUAL
65003: IFFALSE 65011
65005: LD_INT 399
65007: DOUBLE
65008: LESSEQUAL
65009: IFTRUE 65013
65011: GO 65075
65013: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65014: LD_VAR 0 1
65018: PPUSH
65019: LD_VAR 0 2
65023: PPUSH
65024: LD_VAR 0 3
65028: PPUSH
65029: LD_VAR 0 4
65033: PPUSH
65034: LD_VAR 0 5
65038: PPUSH
65039: LD_VAR 0 6
65043: PPUSH
65044: LD_VAR 0 7
65048: PPUSH
65049: LD_VAR 0 8
65053: PPUSH
65054: LD_VAR 0 9
65058: PPUSH
65059: LD_VAR 0 10
65063: PPUSH
65064: LD_VAR 0 11
65068: PPUSH
65069: CALL 21129 0 11
65073: GO 65076
65075: POP
// end ;
65076: PPOPN 11
65078: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65079: LD_VAR 0 1
65083: PPUSH
65084: LD_VAR 0 2
65088: PPUSH
65089: LD_VAR 0 3
65093: PPUSH
65094: LD_VAR 0 4
65098: PPUSH
65099: LD_VAR 0 5
65103: PPUSH
65104: CALL 23223 0 5
// end ; end_of_file
65108: PPOPN 5
65110: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65111: LD_VAR 0 1
65115: PPUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: LD_VAR 0 3
65125: PPUSH
65126: LD_VAR 0 4
65130: PPUSH
65131: LD_VAR 0 5
65135: PPUSH
65136: LD_VAR 0 6
65140: PPUSH
65141: CALL 9937 0 6
// end ;
65145: PPOPN 6
65147: END
