// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8231
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8231
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8203: LD_EXP 23
8207: PPUSH
8208: LD_EXP 16
8212: PPUSH
8213: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8217: LD_EXP 24
8221: PPUSH
8222: LD_EXP 16
8226: PPUSH
8227: CALL_OW 175
// end ;
8231: PPOPN 2
8233: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8234: LD_INT 22
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 91
8246: PUSH
8247: LD_INT 8
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IFFALSE 8452
8268: GO 8270
8270: DISABLE
8271: LD_INT 0
8273: PPUSH
8274: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8275: LD_INT 280
8277: PUSH
8278: LD_INT 245
8280: PUSH
8281: LD_INT 210
8283: PUSH
8284: LD_INT 175
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_OWVAR 67
8297: ARRAY
8298: PPUSH
8299: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_INT 22
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 25
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 54
8330: PUSH
8331: EMPTY
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 2
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8452
// for i in tmp do
8353: LD_ADDR_VAR 0 1
8357: PUSH
8358: LD_VAR 0 2
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8392
// begin ComExitBuilding ( i ) ;
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_INT 142
8382: PPUSH
8383: LD_INT 71
8385: PPUSH
8386: CALL_OW 174
// end ;
8390: GO 8363
8392: POP
8393: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8394: LD_EXP 23
8398: PPUSH
8399: LD_INT 142
8401: PPUSH
8402: LD_INT 71
8404: PPUSH
8405: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8409: LD_EXP 24
8413: PPUSH
8414: LD_INT 142
8416: PPUSH
8417: LD_INT 71
8419: PPUSH
8420: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8424: LD_EXP 23
8428: PPUSH
8429: LD_EXP 16
8433: PPUSH
8434: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8438: LD_EXP 24
8442: PPUSH
8443: LD_EXP 16
8447: PPUSH
8448: CALL_OW 175
// end ;
8452: PPOPN 2
8454: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8455: LD_INT 22
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 58
8477: PUSH
8478: EMPTY
8479: LIST
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: LD_INT 24
8486: PUSH
8487: LD_INT 1000
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 91
8500: PUSH
8501: LD_EXP 17
8505: PUSH
8506: LD_INT 8
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 69
8525: PUSH
8526: LD_EXP 17
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: IFFALSE 8650
8538: GO 8540
8540: DISABLE
// begin enable ;
8541: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8542: LD_EXP 17
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 58
8569: PUSH
8570: EMPTY
8571: LIST
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 24
8578: PUSH
8579: LD_INT 1000
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 91
8592: PUSH
8593: LD_EXP 17
8597: PUSH
8598: LD_INT 8
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 90
8636: PPUSH
8637: CALL_OW 171
// AddComHold ( Olaf ) ;
8641: LD_EXP 17
8645: PPUSH
8646: CALL_OW 200
// end ;
8650: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8651: LD_EXP 12
8655: PUSH
8656: LD_INT 2
8658: PPUSH
8659: CALL_OW 302
8663: NOT
8664: AND
8665: PUSH
8666: LD_OWVAR 67
8670: PUSH
8671: LD_INT 1
8673: EQUAL
8674: AND
8675: PUSH
8676: LD_EXP 13
8680: NOT
8681: AND
8682: IFFALSE 8699
8684: GO 8686
8686: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8687: LD_EXP 16
8691: PPUSH
8692: LD_STRING DH-prison-missing
8694: PPUSH
8695: CALL_OW 88
// end ;
8699: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8700: LD_EXP 12
8704: PUSH
8705: LD_INT 8
8707: PPUSH
8708: CALL_OW 302
8712: NOT
8713: AND
8714: PUSH
8715: LD_OWVAR 67
8719: PUSH
8720: LD_INT 1
8722: GREATER
8723: AND
8724: PUSH
8725: LD_EXP 13
8729: NOT
8730: AND
8731: IFFALSE 8748
8733: GO 8735
8735: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8736: LD_EXP 16
8740: PPUSH
8741: LD_STRING DH-prison-missing
8743: PPUSH
8744: CALL_OW 88
// end ;
8748: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8749: LD_EXP 12
8753: PUSH
8754: LD_INT 3
8756: PPUSH
8757: CALL_OW 302
8761: NOT
8762: AND
8763: PUSH
8764: LD_EXP 13
8768: NOT
8769: AND
8770: IFFALSE 8787
8772: GO 8774
8774: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8775: LD_EXP 16
8779: PPUSH
8780: LD_STRING DH-prison-missing-a
8782: PPUSH
8783: CALL_OW 88
// end ;
8787: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8788: LD_EXP 12
8792: PUSH
8793: LD_INT 10
8795: PPUSH
8796: CALL_OW 302
8800: NOT
8801: AND
8802: PUSH
8803: LD_EXP 13
8807: NOT
8808: AND
8809: IFFALSE 8826
8811: GO 8813
8813: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8814: LD_EXP 16
8818: PPUSH
8819: LD_STRING DH-prison-missing-a
8821: PPUSH
8822: CALL_OW 88
// end ;
8826: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8827: LD_EXP 13
8831: NOT
8832: PUSH
8833: LD_EXP 12
8837: AND
8838: PUSH
8839: LD_INT 2
8841: PPUSH
8842: LD_EXP 20
8846: PPUSH
8847: CALL_OW 292
8851: AND
8852: IFFALSE 8939
8854: GO 8856
8856: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8857: LD_EXP 20
8861: PPUSH
8862: LD_EXP 16
8866: PPUSH
8867: CALL_OW 119
// DialogueOn ;
8871: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8875: LD_EXP 20
8879: PPUSH
8880: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8884: LD_EXP 20
8888: PPUSH
8889: LD_STRING DK-prison-found
8891: PPUSH
8892: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8896: LD_EXP 16
8900: PPUSH
8901: LD_STRING DH-prison-found
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8912: LD_EXP 20
8916: PPUSH
8917: LD_INT 2
8919: PPUSH
8920: CALL_OW 235
// prisonFound := true ;
8924: LD_ADDR_EXP 13
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8932: LD_STRING O6_prison_out
8934: PPUSH
8935: CALL_OW 337
// end ;
8939: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8940: LD_EXP 16
8944: PPUSH
8945: CALL_OW 256
8949: PUSH
8950: LD_INT 500
8952: LESS
8953: IFFALSE 8966
8955: GO 8957
8957: DISABLE
// heikeHurt := true ;
8958: LD_ADDR_EXP 14
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
8966: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8967: LD_INT 22
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 21
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: IFFALSE 9311
8997: GO 8999
8999: DISABLE
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
9004: PPUSH
// begin uc_side := 3 ;
9005: LD_ADDR_OWVAR 20
9009: PUSH
9010: LD_INT 3
9012: ST_TO_ADDR
// uc_nation := 3 ;
9013: LD_ADDR_OWVAR 21
9017: PUSH
9018: LD_INT 3
9020: ST_TO_ADDR
// tmp := [ ] ;
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: EMPTY
9027: ST_TO_ADDR
// for i := 1 to 8 do
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: DOUBLE
9034: LD_INT 1
9036: DEC
9037: ST_TO_ADDR
9038: LD_INT 8
9040: PUSH
9041: FOR_TO
9042: IFFALSE 9150
// begin PrepareHuman ( false , 1 , 4 ) ;
9044: LD_INT 0
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: LD_INT 4
9052: PPUSH
9053: CALL_OW 380
// un := CreateHuman ;
9057: LD_ADDR_VAR 0 3
9061: PUSH
9062: CALL_OW 44
9066: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_INT 4
9074: PPUSH
9075: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9079: LD_VAR 0 3
9083: PPUSH
9084: LD_INT 158
9086: PPUSH
9087: LD_INT 80
9089: PPUSH
9090: LD_INT 0
9092: PPUSH
9093: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9097: LD_VAR 0 3
9101: PPUSH
9102: LD_INT 147
9104: PPUSH
9105: LD_INT 75
9107: PPUSH
9108: CALL_OW 111
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 2
9133: PUSH
9134: LD_INT 1
9136: PLUS
9137: PPUSH
9138: LD_VAR 0 3
9142: PPUSH
9143: CALL_OW 1
9147: ST_TO_ADDR
// end ;
9148: GO 9041
9150: POP
9151: POP
// repeat wait ( 0 0$1 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// for i in tmp do
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 2
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9291
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9172: LD_ADDR_VAR 0 3
9176: PUSH
9177: LD_INT 22
9179: PUSH
9180: LD_INT 3
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 69
9191: PPUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 74
9201: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 250
9215: PPUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 251
9229: PPUSH
9230: CALL_OW 428
9234: IFFALSE 9275
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_VAR 0 3
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: CALL_OW 250
9254: PPUSH
9255: LD_VAR 0 3
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: CALL_OW 251
9268: PPUSH
9269: CALL_OW 114
9273: GO 9289
// ComAttackUnit ( i , Heike ) ;
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_EXP 16
9284: PPUSH
9285: CALL_OW 115
// end ;
9289: GO 9169
9291: POP
9292: POP
// until IsDead ( Heike ) or not tmp ;
9293: LD_EXP 16
9297: PPUSH
9298: CALL_OW 301
9302: PUSH
9303: LD_VAR 0 2
9307: NOT
9308: OR
9309: IFFALSE 9152
// end ;
9311: PPOPN 3
9313: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9314: LD_EXP 12
9318: PUSH
9319: LD_EXP 16
9323: PPUSH
9324: CALL_OW 302
9328: AND
9329: PUSH
9330: LD_INT 1
9332: PPUSH
9333: LD_INT 21
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 50
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 71
9368: PUSH
9369: LD_INT 0
9371: EQUAL
9372: AND
9373: IFFALSE 9724
9375: GO 9377
9377: DISABLE
9378: LD_INT 0
9380: PPUSH
// begin if not heikeHurt then
9381: LD_EXP 14
9385: NOT
9386: IFFALSE 9395
// SetAchievement ( ACH_INVINCIBLE ) ;
9388: LD_STRING ACH_INVINCIBLE
9390: PPUSH
9391: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9395: LD_STRING enableBioCharacter(BIO_GIVI)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9402: LD_STRING enableBioCharacter(BIO_MIKE)
9404: PPUSH
9405: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9409: LD_STRING enableBioCharacter(BIO_OLAF)
9411: PPUSH
9412: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9416: LD_ADDR_VAR 0 1
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 50
9443: PUSH
9444: EMPTY
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 69
9456: ST_TO_ADDR
// if prisonFound then
9457: LD_EXP 13
9461: IFFALSE 9475
// AddMedal ( med1 , 1 ) else
9463: LD_STRING med1
9465: PPUSH
9466: LD_INT 1
9468: PPUSH
9469: CALL_OW 101
9473: GO 9486
// AddMedal ( med1 , - 1 ) ;
9475: LD_STRING med1
9477: PPUSH
9478: LD_INT 1
9480: NEG
9481: PPUSH
9482: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9486: LD_VAR 0 1
9490: PUSH
9491: LD_INT 3
9493: LESS
9494: PUSH
9495: LD_EXP 13
9499: NOT
9500: AND
9501: PUSH
9502: LD_VAR 0 1
9506: PUSH
9507: LD_INT 4
9509: LESS
9510: PUSH
9511: LD_EXP 13
9515: AND
9516: OR
9517: IFFALSE 9532
// AddMedal ( med2 , - 1 ) else
9519: LD_STRING med2
9521: PPUSH
9522: LD_INT 1
9524: NEG
9525: PPUSH
9526: CALL_OW 101
9530: GO 9542
// AddMedal ( med2 , 1 ) ;
9532: LD_STRING med2
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9542: LD_EXP 13
9546: PUSH
9547: LD_EXP 4
9551: AND
9552: PUSH
9553: LD_VAR 0 1
9557: PUSH
9558: LD_INT 4
9560: GREATEREQUAL
9561: AND
9562: IFFALSE 9576
// AddMedal ( med3 , 1 ) else
9564: LD_STRING med3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 101
9574: GO 9587
// AddMedal ( med3 , - 1 ) ;
9576: LD_STRING med3
9578: PPUSH
9579: LD_INT 1
9581: NEG
9582: PPUSH
9583: CALL_OW 101
// GiveMedals ( MAIN ) ;
9587: LD_STRING MAIN
9589: PPUSH
9590: CALL_OW 102
// RewardPeople ( tmp ) ;
9594: LD_VAR 0 1
9598: PPUSH
9599: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9603: LD_EXP 16
9607: PPUSH
9608: LD_STRING 01_Heike
9610: PPUSH
9611: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9615: LD_EXP 18
9619: PPUSH
9620: CALL_OW 302
9624: PUSH
9625: LD_EXP 18
9629: PUSH
9630: LD_VAR 0 1
9634: IN
9635: AND
9636: IFFALSE 9650
// SaveCharacters ( Givi , 01_Givi ) ;
9638: LD_EXP 18
9642: PPUSH
9643: LD_STRING 01_Givi
9645: PPUSH
9646: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9650: LD_EXP 19
9654: PPUSH
9655: CALL_OW 302
9659: PUSH
9660: LD_EXP 19
9664: PUSH
9665: LD_VAR 0 1
9669: IN
9670: AND
9671: IFFALSE 9685
// SaveCharacters ( Mike , 01_Mike ) ;
9673: LD_EXP 19
9677: PPUSH
9678: LD_STRING 01_Mike
9680: PPUSH
9681: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9685: LD_EXP 20
9689: PPUSH
9690: CALL_OW 302
9694: PUSH
9695: LD_EXP 20
9699: PUSH
9700: LD_VAR 0 1
9704: IN
9705: AND
9706: IFFALSE 9720
// SaveCharacters ( Kamil , 01_Kamil ) ;
9708: LD_EXP 20
9712: PPUSH
9713: LD_STRING 01_Kamil
9715: PPUSH
9716: CALL_OW 38
// YouWin ;
9720: CALL_OW 103
// end ; end_of_file
9724: PPOPN 1
9726: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9727: LD_VAR 0 1
9731: PUSH
9732: LD_EXP 16
9736: EQUAL
9737: IFFALSE 9746
// YouLost ( Heike ) ;
9739: LD_STRING Heike
9741: PPUSH
9742: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9746: LD_VAR 0 1
9750: PUSH
9751: LD_INT 22
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 25
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: IN
9780: IFFALSE 9886
// begin if un in russianPatrol then
9782: LD_VAR 0 1
9786: PUSH
9787: LD_EXP 21
9791: IN
9792: IFFALSE 9810
// russianPatrol := russianPatrol diff un ;
9794: LD_ADDR_EXP 21
9798: PUSH
9799: LD_EXP 21
9803: PUSH
9804: LD_VAR 0 1
9808: DIFF
9809: ST_TO_ADDR
// if un in russianForestPatrol then
9810: LD_VAR 0 1
9814: PUSH
9815: LD_EXP 22
9819: IN
9820: IFFALSE 9838
// russianForestPatrol := russianForestPatrol diff un ;
9822: LD_ADDR_EXP 22
9826: PUSH
9827: LD_EXP 22
9831: PUSH
9832: LD_VAR 0 1
9836: DIFF
9837: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9838: LD_ADDR_EXP 5
9842: PUSH
9843: LD_EXP 5
9847: PPUSH
9848: LD_EXP 5
9852: PUSH
9853: LD_INT 1
9855: PLUS
9856: PPUSH
9857: LD_VAR 0 1
9861: PPUSH
9862: CALL_OW 250
9866: PUSH
9867: LD_VAR 0 1
9871: PPUSH
9872: CALL_OW 251
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 1
9885: ST_TO_ADDR
// end ; end ;
9886: PPOPN 1
9888: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9889: LD_VAR 0 1
9893: PUSH
9894: LD_EXP 16
9898: EQUAL
9899: IFFALSE 9908
// YouLost ( Heike ) ;
9901: LD_STRING Heike
9903: PPUSH
9904: CALL_OW 104
// if un = Olaf then
9908: LD_VAR 0 1
9912: PUSH
9913: LD_EXP 17
9917: EQUAL
9918: IFFALSE 9927
// YouLost ( Olaf ) ;
9920: LD_STRING Olaf
9922: PPUSH
9923: CALL_OW 104
// end ;
9927: PPOPN 1
9929: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_INT 2
9937: EQUAL
9938: PUSH
9939: LD_VAR 0 2
9943: PUSH
9944: LD_INT 5
9946: EQUAL
9947: AND
9948: IFFALSE 9957
// YouLost ( FriendlyFire ) ;
9950: LD_STRING FriendlyFire
9952: PPUSH
9953: CALL_OW 104
// end ; end_of_file
9957: PPOPN 2
9959: END
// every 0 0$1 do
9960: GO 9962
9962: DISABLE
// begin enable ;
9963: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9964: LD_STRING updateTimer(
9966: PUSH
9967: LD_OWVAR 1
9971: STR
9972: PUSH
9973: LD_STRING );
9975: STR
9976: PPUSH
9977: CALL_OW 559
// end ;
9981: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9982: LD_INT 0
9984: PPUSH
// if p2 = 100 then
9985: LD_VAR 0 2
9989: PUSH
9990: LD_INT 100
9992: EQUAL
9993: IFFALSE 10996
// begin if not StreamModeActive then
9995: LD_EXP 26
9999: NOT
10000: IFFALSE 10010
// StreamModeActive := true ;
10002: LD_ADDR_EXP 26
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if p3 = 0 then
10010: LD_VAR 0 3
10014: PUSH
10015: LD_INT 0
10017: EQUAL
10018: IFFALSE 10024
// InitStreamMode ;
10020: CALL 11156 0 0
// if p3 = 1 then
10024: LD_VAR 0 3
10028: PUSH
10029: LD_INT 1
10031: EQUAL
10032: IFFALSE 10042
// sRocket := true ;
10034: LD_ADDR_EXP 31
10038: PUSH
10039: LD_INT 1
10041: ST_TO_ADDR
// if p3 = 2 then
10042: LD_VAR 0 3
10046: PUSH
10047: LD_INT 2
10049: EQUAL
10050: IFFALSE 10060
// sSpeed := true ;
10052: LD_ADDR_EXP 30
10056: PUSH
10057: LD_INT 1
10059: ST_TO_ADDR
// if p3 = 3 then
10060: LD_VAR 0 3
10064: PUSH
10065: LD_INT 3
10067: EQUAL
10068: IFFALSE 10078
// sEngine := true ;
10070: LD_ADDR_EXP 32
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// if p3 = 4 then
10078: LD_VAR 0 3
10082: PUSH
10083: LD_INT 4
10085: EQUAL
10086: IFFALSE 10096
// sSpec := true ;
10088: LD_ADDR_EXP 29
10092: PUSH
10093: LD_INT 1
10095: ST_TO_ADDR
// if p3 = 5 then
10096: LD_VAR 0 3
10100: PUSH
10101: LD_INT 5
10103: EQUAL
10104: IFFALSE 10114
// sLevel := true ;
10106: LD_ADDR_EXP 33
10110: PUSH
10111: LD_INT 1
10113: ST_TO_ADDR
// if p3 = 6 then
10114: LD_VAR 0 3
10118: PUSH
10119: LD_INT 6
10121: EQUAL
10122: IFFALSE 10132
// sArmoury := true ;
10124: LD_ADDR_EXP 34
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// if p3 = 7 then
10132: LD_VAR 0 3
10136: PUSH
10137: LD_INT 7
10139: EQUAL
10140: IFFALSE 10150
// sRadar := true ;
10142: LD_ADDR_EXP 35
10146: PUSH
10147: LD_INT 1
10149: ST_TO_ADDR
// if p3 = 8 then
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 8
10157: EQUAL
10158: IFFALSE 10168
// sBunker := true ;
10160: LD_ADDR_EXP 36
10164: PUSH
10165: LD_INT 1
10167: ST_TO_ADDR
// if p3 = 9 then
10168: LD_VAR 0 3
10172: PUSH
10173: LD_INT 9
10175: EQUAL
10176: IFFALSE 10186
// sHack := true ;
10178: LD_ADDR_EXP 37
10182: PUSH
10183: LD_INT 1
10185: ST_TO_ADDR
// if p3 = 10 then
10186: LD_VAR 0 3
10190: PUSH
10191: LD_INT 10
10193: EQUAL
10194: IFFALSE 10204
// sFire := true ;
10196: LD_ADDR_EXP 38
10200: PUSH
10201: LD_INT 1
10203: ST_TO_ADDR
// if p3 = 11 then
10204: LD_VAR 0 3
10208: PUSH
10209: LD_INT 11
10211: EQUAL
10212: IFFALSE 10222
// sRefresh := true ;
10214: LD_ADDR_EXP 39
10218: PUSH
10219: LD_INT 1
10221: ST_TO_ADDR
// if p3 = 12 then
10222: LD_VAR 0 3
10226: PUSH
10227: LD_INT 12
10229: EQUAL
10230: IFFALSE 10240
// sExp := true ;
10232: LD_ADDR_EXP 40
10236: PUSH
10237: LD_INT 1
10239: ST_TO_ADDR
// if p3 = 13 then
10240: LD_VAR 0 3
10244: PUSH
10245: LD_INT 13
10247: EQUAL
10248: IFFALSE 10258
// sDepot := true ;
10250: LD_ADDR_EXP 41
10254: PUSH
10255: LD_INT 1
10257: ST_TO_ADDR
// if p3 = 14 then
10258: LD_VAR 0 3
10262: PUSH
10263: LD_INT 14
10265: EQUAL
10266: IFFALSE 10276
// sFlag := true ;
10268: LD_ADDR_EXP 42
10272: PUSH
10273: LD_INT 1
10275: ST_TO_ADDR
// if p3 = 15 then
10276: LD_VAR 0 3
10280: PUSH
10281: LD_INT 15
10283: EQUAL
10284: IFFALSE 10294
// sKamikadze := true ;
10286: LD_ADDR_EXP 50
10290: PUSH
10291: LD_INT 1
10293: ST_TO_ADDR
// if p3 = 16 then
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 16
10301: EQUAL
10302: IFFALSE 10312
// sTroll := true ;
10304: LD_ADDR_EXP 51
10308: PUSH
10309: LD_INT 1
10311: ST_TO_ADDR
// if p3 = 17 then
10312: LD_VAR 0 3
10316: PUSH
10317: LD_INT 17
10319: EQUAL
10320: IFFALSE 10330
// sSlow := true ;
10322: LD_ADDR_EXP 52
10326: PUSH
10327: LD_INT 1
10329: ST_TO_ADDR
// if p3 = 18 then
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 18
10337: EQUAL
10338: IFFALSE 10348
// sLack := true ;
10340: LD_ADDR_EXP 53
10344: PUSH
10345: LD_INT 1
10347: ST_TO_ADDR
// if p3 = 19 then
10348: LD_VAR 0 3
10352: PUSH
10353: LD_INT 19
10355: EQUAL
10356: IFFALSE 10366
// sTank := true ;
10358: LD_ADDR_EXP 55
10362: PUSH
10363: LD_INT 1
10365: ST_TO_ADDR
// if p3 = 20 then
10366: LD_VAR 0 3
10370: PUSH
10371: LD_INT 20
10373: EQUAL
10374: IFFALSE 10384
// sRemote := true ;
10376: LD_ADDR_EXP 56
10380: PUSH
10381: LD_INT 1
10383: ST_TO_ADDR
// if p3 = 21 then
10384: LD_VAR 0 3
10388: PUSH
10389: LD_INT 21
10391: EQUAL
10392: IFFALSE 10402
// sPowell := true ;
10394: LD_ADDR_EXP 57
10398: PUSH
10399: LD_INT 1
10401: ST_TO_ADDR
// if p3 = 22 then
10402: LD_VAR 0 3
10406: PUSH
10407: LD_INT 22
10409: EQUAL
10410: IFFALSE 10420
// sTeleport := true ;
10412: LD_ADDR_EXP 60
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// if p3 = 23 then
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 23
10427: EQUAL
10428: IFFALSE 10438
// sOilTower := true ;
10430: LD_ADDR_EXP 62
10434: PUSH
10435: LD_INT 1
10437: ST_TO_ADDR
// if p3 = 24 then
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 24
10445: EQUAL
10446: IFFALSE 10456
// sShovel := true ;
10448: LD_ADDR_EXP 63
10452: PUSH
10453: LD_INT 1
10455: ST_TO_ADDR
// if p3 = 25 then
10456: LD_VAR 0 3
10460: PUSH
10461: LD_INT 25
10463: EQUAL
10464: IFFALSE 10474
// sSheik := true ;
10466: LD_ADDR_EXP 64
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// if p3 = 26 then
10474: LD_VAR 0 3
10478: PUSH
10479: LD_INT 26
10481: EQUAL
10482: IFFALSE 10492
// sEarthquake := true ;
10484: LD_ADDR_EXP 66
10488: PUSH
10489: LD_INT 1
10491: ST_TO_ADDR
// if p3 = 27 then
10492: LD_VAR 0 3
10496: PUSH
10497: LD_INT 27
10499: EQUAL
10500: IFFALSE 10510
// sAI := true ;
10502: LD_ADDR_EXP 67
10506: PUSH
10507: LD_INT 1
10509: ST_TO_ADDR
// if p3 = 28 then
10510: LD_VAR 0 3
10514: PUSH
10515: LD_INT 28
10517: EQUAL
10518: IFFALSE 10528
// sCargo := true ;
10520: LD_ADDR_EXP 70
10524: PUSH
10525: LD_INT 1
10527: ST_TO_ADDR
// if p3 = 29 then
10528: LD_VAR 0 3
10532: PUSH
10533: LD_INT 29
10535: EQUAL
10536: IFFALSE 10546
// sDLaser := true ;
10538: LD_ADDR_EXP 71
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// if p3 = 30 then
10546: LD_VAR 0 3
10550: PUSH
10551: LD_INT 30
10553: EQUAL
10554: IFFALSE 10564
// sExchange := true ;
10556: LD_ADDR_EXP 72
10560: PUSH
10561: LD_INT 1
10563: ST_TO_ADDR
// if p3 = 31 then
10564: LD_VAR 0 3
10568: PUSH
10569: LD_INT 31
10571: EQUAL
10572: IFFALSE 10582
// sFac := true ;
10574: LD_ADDR_EXP 73
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// if p3 = 32 then
10582: LD_VAR 0 3
10586: PUSH
10587: LD_INT 32
10589: EQUAL
10590: IFFALSE 10600
// sPower := true ;
10592: LD_ADDR_EXP 74
10596: PUSH
10597: LD_INT 1
10599: ST_TO_ADDR
// if p3 = 33 then
10600: LD_VAR 0 3
10604: PUSH
10605: LD_INT 33
10607: EQUAL
10608: IFFALSE 10618
// sRandom := true ;
10610: LD_ADDR_EXP 75
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
// if p3 = 34 then
10618: LD_VAR 0 3
10622: PUSH
10623: LD_INT 34
10625: EQUAL
10626: IFFALSE 10636
// sShield := true ;
10628: LD_ADDR_EXP 76
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// if p3 = 35 then
10636: LD_VAR 0 3
10640: PUSH
10641: LD_INT 35
10643: EQUAL
10644: IFFALSE 10654
// sTime := true ;
10646: LD_ADDR_EXP 77
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// if p3 = 36 then
10654: LD_VAR 0 3
10658: PUSH
10659: LD_INT 36
10661: EQUAL
10662: IFFALSE 10672
// sTools := true ;
10664: LD_ADDR_EXP 78
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// if p3 = 101 then
10672: LD_VAR 0 3
10676: PUSH
10677: LD_INT 101
10679: EQUAL
10680: IFFALSE 10690
// sSold := true ;
10682: LD_ADDR_EXP 43
10686: PUSH
10687: LD_INT 1
10689: ST_TO_ADDR
// if p3 = 102 then
10690: LD_VAR 0 3
10694: PUSH
10695: LD_INT 102
10697: EQUAL
10698: IFFALSE 10708
// sDiff := true ;
10700: LD_ADDR_EXP 44
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// if p3 = 103 then
10708: LD_VAR 0 3
10712: PUSH
10713: LD_INT 103
10715: EQUAL
10716: IFFALSE 10726
// sFog := true ;
10718: LD_ADDR_EXP 47
10722: PUSH
10723: LD_INT 1
10725: ST_TO_ADDR
// if p3 = 104 then
10726: LD_VAR 0 3
10730: PUSH
10731: LD_INT 104
10733: EQUAL
10734: IFFALSE 10744
// sReset := true ;
10736: LD_ADDR_EXP 48
10740: PUSH
10741: LD_INT 1
10743: ST_TO_ADDR
// if p3 = 105 then
10744: LD_VAR 0 3
10748: PUSH
10749: LD_INT 105
10751: EQUAL
10752: IFFALSE 10762
// sSun := true ;
10754: LD_ADDR_EXP 49
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// if p3 = 106 then
10762: LD_VAR 0 3
10766: PUSH
10767: LD_INT 106
10769: EQUAL
10770: IFFALSE 10780
// sTiger := true ;
10772: LD_ADDR_EXP 45
10776: PUSH
10777: LD_INT 1
10779: ST_TO_ADDR
// if p3 = 107 then
10780: LD_VAR 0 3
10784: PUSH
10785: LD_INT 107
10787: EQUAL
10788: IFFALSE 10798
// sBomb := true ;
10790: LD_ADDR_EXP 46
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// if p3 = 108 then
10798: LD_VAR 0 3
10802: PUSH
10803: LD_INT 108
10805: EQUAL
10806: IFFALSE 10816
// sWound := true ;
10808: LD_ADDR_EXP 54
10812: PUSH
10813: LD_INT 1
10815: ST_TO_ADDR
// if p3 = 109 then
10816: LD_VAR 0 3
10820: PUSH
10821: LD_INT 109
10823: EQUAL
10824: IFFALSE 10834
// sBetray := true ;
10826: LD_ADDR_EXP 58
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// if p3 = 110 then
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 110
10841: EQUAL
10842: IFFALSE 10852
// sContamin := true ;
10844: LD_ADDR_EXP 59
10848: PUSH
10849: LD_INT 1
10851: ST_TO_ADDR
// if p3 = 111 then
10852: LD_VAR 0 3
10856: PUSH
10857: LD_INT 111
10859: EQUAL
10860: IFFALSE 10870
// sOil := true ;
10862: LD_ADDR_EXP 61
10866: PUSH
10867: LD_INT 1
10869: ST_TO_ADDR
// if p3 = 112 then
10870: LD_VAR 0 3
10874: PUSH
10875: LD_INT 112
10877: EQUAL
10878: IFFALSE 10888
// sStu := true ;
10880: LD_ADDR_EXP 65
10884: PUSH
10885: LD_INT 1
10887: ST_TO_ADDR
// if p3 = 113 then
10888: LD_VAR 0 3
10892: PUSH
10893: LD_INT 113
10895: EQUAL
10896: IFFALSE 10906
// sBazooka := true ;
10898: LD_ADDR_EXP 68
10902: PUSH
10903: LD_INT 1
10905: ST_TO_ADDR
// if p3 = 114 then
10906: LD_VAR 0 3
10910: PUSH
10911: LD_INT 114
10913: EQUAL
10914: IFFALSE 10924
// sMortar := true ;
10916: LD_ADDR_EXP 69
10920: PUSH
10921: LD_INT 1
10923: ST_TO_ADDR
// if p3 = 115 then
10924: LD_VAR 0 3
10928: PUSH
10929: LD_INT 115
10931: EQUAL
10932: IFFALSE 10942
// sRanger := true ;
10934: LD_ADDR_EXP 79
10938: PUSH
10939: LD_INT 1
10941: ST_TO_ADDR
// if p3 = 116 then
10942: LD_VAR 0 3
10946: PUSH
10947: LD_INT 116
10949: EQUAL
10950: IFFALSE 10960
// sComputer := true ;
10952: LD_ADDR_EXP 80
10956: PUSH
10957: LD_INT 1
10959: ST_TO_ADDR
// if p3 = 117 then
10960: LD_VAR 0 3
10964: PUSH
10965: LD_INT 117
10967: EQUAL
10968: IFFALSE 10978
// s30 := true ;
10970: LD_ADDR_EXP 81
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// if p3 = 118 then
10978: LD_VAR 0 3
10982: PUSH
10983: LD_INT 118
10985: EQUAL
10986: IFFALSE 10996
// s60 := true ;
10988: LD_ADDR_EXP 82
10992: PUSH
10993: LD_INT 1
10995: ST_TO_ADDR
// end ; if p2 = 101 then
10996: LD_VAR 0 2
11000: PUSH
11001: LD_INT 101
11003: EQUAL
11004: IFFALSE 11132
// begin case p3 of 1 :
11006: LD_VAR 0 3
11010: PUSH
11011: LD_INT 1
11013: DOUBLE
11014: EQUAL
11015: IFTRUE 11019
11017: GO 11026
11019: POP
// hHackUnlimitedResources ; 2 :
11020: CALL 22728 0 0
11024: GO 11132
11026: LD_INT 2
11028: DOUBLE
11029: EQUAL
11030: IFTRUE 11034
11032: GO 11041
11034: POP
// hHackSetLevel10 ; 3 :
11035: CALL 22861 0 0
11039: GO 11132
11041: LD_INT 3
11043: DOUBLE
11044: EQUAL
11045: IFTRUE 11049
11047: GO 11056
11049: POP
// hHackSetLevel10YourUnits ; 4 :
11050: CALL 22946 0 0
11054: GO 11132
11056: LD_INT 4
11058: DOUBLE
11059: EQUAL
11060: IFTRUE 11064
11062: GO 11071
11064: POP
// hHackInvincible ; 5 :
11065: CALL 23394 0 0
11069: GO 11132
11071: LD_INT 5
11073: DOUBLE
11074: EQUAL
11075: IFTRUE 11079
11077: GO 11086
11079: POP
// hHackInvisible ; 6 :
11080: CALL 23505 0 0
11084: GO 11132
11086: LD_INT 6
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11101
11094: POP
// hHackChangeYourSide ; 7 :
11095: CALL 23562 0 0
11099: GO 11132
11101: LD_INT 7
11103: DOUBLE
11104: EQUAL
11105: IFTRUE 11109
11107: GO 11116
11109: POP
// hHackChangeUnitSide ; 8 :
11110: CALL 23604 0 0
11114: GO 11132
11116: LD_INT 8
11118: DOUBLE
11119: EQUAL
11120: IFTRUE 11124
11122: GO 11131
11124: POP
// hHackFog ; end ;
11125: CALL 23705 0 0
11129: GO 11132
11131: POP
// end ; end ;
11132: LD_VAR 0 7
11136: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11137: GO 11139
11139: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11140: LD_STRING initStreamRollete();
11142: PPUSH
11143: CALL_OW 559
// InitStreamMode ;
11147: CALL 11156 0 0
// DefineStreamItems ( ) ;
11151: CALL 11620 0 0
// end ;
11155: END
// function InitStreamMode ; begin
11156: LD_INT 0
11158: PPUSH
// streamModeActive := false ;
11159: LD_ADDR_EXP 26
11163: PUSH
11164: LD_INT 0
11166: ST_TO_ADDR
// normalCounter := 36 ;
11167: LD_ADDR_EXP 27
11171: PUSH
11172: LD_INT 36
11174: ST_TO_ADDR
// hardcoreCounter := 16 ;
11175: LD_ADDR_EXP 28
11179: PUSH
11180: LD_INT 16
11182: ST_TO_ADDR
// sRocket := false ;
11183: LD_ADDR_EXP 31
11187: PUSH
11188: LD_INT 0
11190: ST_TO_ADDR
// sSpeed := false ;
11191: LD_ADDR_EXP 30
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
// sEngine := false ;
11199: LD_ADDR_EXP 32
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// sSpec := false ;
11207: LD_ADDR_EXP 29
11211: PUSH
11212: LD_INT 0
11214: ST_TO_ADDR
// sLevel := false ;
11215: LD_ADDR_EXP 33
11219: PUSH
11220: LD_INT 0
11222: ST_TO_ADDR
// sArmoury := false ;
11223: LD_ADDR_EXP 34
11227: PUSH
11228: LD_INT 0
11230: ST_TO_ADDR
// sRadar := false ;
11231: LD_ADDR_EXP 35
11235: PUSH
11236: LD_INT 0
11238: ST_TO_ADDR
// sBunker := false ;
11239: LD_ADDR_EXP 36
11243: PUSH
11244: LD_INT 0
11246: ST_TO_ADDR
// sHack := false ;
11247: LD_ADDR_EXP 37
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// sFire := false ;
11255: LD_ADDR_EXP 38
11259: PUSH
11260: LD_INT 0
11262: ST_TO_ADDR
// sRefresh := false ;
11263: LD_ADDR_EXP 39
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// sExp := false ;
11271: LD_ADDR_EXP 40
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// sDepot := false ;
11279: LD_ADDR_EXP 41
11283: PUSH
11284: LD_INT 0
11286: ST_TO_ADDR
// sFlag := false ;
11287: LD_ADDR_EXP 42
11291: PUSH
11292: LD_INT 0
11294: ST_TO_ADDR
// sKamikadze := false ;
11295: LD_ADDR_EXP 50
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// sTroll := false ;
11303: LD_ADDR_EXP 51
11307: PUSH
11308: LD_INT 0
11310: ST_TO_ADDR
// sSlow := false ;
11311: LD_ADDR_EXP 52
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// sLack := false ;
11319: LD_ADDR_EXP 53
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// sTank := false ;
11327: LD_ADDR_EXP 55
11331: PUSH
11332: LD_INT 0
11334: ST_TO_ADDR
// sRemote := false ;
11335: LD_ADDR_EXP 56
11339: PUSH
11340: LD_INT 0
11342: ST_TO_ADDR
// sPowell := false ;
11343: LD_ADDR_EXP 57
11347: PUSH
11348: LD_INT 0
11350: ST_TO_ADDR
// sTeleport := false ;
11351: LD_ADDR_EXP 60
11355: PUSH
11356: LD_INT 0
11358: ST_TO_ADDR
// sOilTower := false ;
11359: LD_ADDR_EXP 62
11363: PUSH
11364: LD_INT 0
11366: ST_TO_ADDR
// sShovel := false ;
11367: LD_ADDR_EXP 63
11371: PUSH
11372: LD_INT 0
11374: ST_TO_ADDR
// sSheik := false ;
11375: LD_ADDR_EXP 64
11379: PUSH
11380: LD_INT 0
11382: ST_TO_ADDR
// sEarthquake := false ;
11383: LD_ADDR_EXP 66
11387: PUSH
11388: LD_INT 0
11390: ST_TO_ADDR
// sAI := false ;
11391: LD_ADDR_EXP 67
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// sCargo := false ;
11399: LD_ADDR_EXP 70
11403: PUSH
11404: LD_INT 0
11406: ST_TO_ADDR
// sDLaser := false ;
11407: LD_ADDR_EXP 71
11411: PUSH
11412: LD_INT 0
11414: ST_TO_ADDR
// sExchange := false ;
11415: LD_ADDR_EXP 72
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// sFac := false ;
11423: LD_ADDR_EXP 73
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// sPower := false ;
11431: LD_ADDR_EXP 74
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// sRandom := false ;
11439: LD_ADDR_EXP 75
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// sShield := false ;
11447: LD_ADDR_EXP 76
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// sTime := false ;
11455: LD_ADDR_EXP 77
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// sTools := false ;
11463: LD_ADDR_EXP 78
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// sSold := false ;
11471: LD_ADDR_EXP 43
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// sDiff := false ;
11479: LD_ADDR_EXP 44
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// sFog := false ;
11487: LD_ADDR_EXP 47
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// sReset := false ;
11495: LD_ADDR_EXP 48
11499: PUSH
11500: LD_INT 0
11502: ST_TO_ADDR
// sSun := false ;
11503: LD_ADDR_EXP 49
11507: PUSH
11508: LD_INT 0
11510: ST_TO_ADDR
// sTiger := false ;
11511: LD_ADDR_EXP 45
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sBomb := false ;
11519: LD_ADDR_EXP 46
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sWound := false ;
11527: LD_ADDR_EXP 54
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sBetray := false ;
11535: LD_ADDR_EXP 58
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sContamin := false ;
11543: LD_ADDR_EXP 59
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sOil := false ;
11551: LD_ADDR_EXP 61
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sStu := false ;
11559: LD_ADDR_EXP 65
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sBazooka := false ;
11567: LD_ADDR_EXP 68
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// sMortar := false ;
11575: LD_ADDR_EXP 69
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// sRanger := false ;
11583: LD_ADDR_EXP 79
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// sComputer := false ;
11591: LD_ADDR_EXP 80
11595: PUSH
11596: LD_INT 0
11598: ST_TO_ADDR
// s30 := false ;
11599: LD_ADDR_EXP 81
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// s60 := false ;
11607: LD_ADDR_EXP 82
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// end ;
11615: LD_VAR 0 1
11619: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11620: LD_INT 0
11622: PPUSH
11623: PPUSH
11624: PPUSH
11625: PPUSH
11626: PPUSH
// result := [ ] ;
11627: LD_ADDR_VAR 0 1
11631: PUSH
11632: EMPTY
11633: ST_TO_ADDR
// if campaign_id = 1 then
11634: LD_OWVAR 69
11638: PUSH
11639: LD_INT 1
11641: EQUAL
11642: IFFALSE 14808
// begin case mission_number of 1 :
11644: LD_OWVAR 70
11648: PUSH
11649: LD_INT 1
11651: DOUBLE
11652: EQUAL
11653: IFTRUE 11657
11655: GO 11733
11657: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11658: LD_ADDR_VAR 0 1
11662: PUSH
11663: LD_INT 2
11665: PUSH
11666: LD_INT 4
11668: PUSH
11669: LD_INT 11
11671: PUSH
11672: LD_INT 12
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: LD_INT 16
11680: PUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 23
11686: PUSH
11687: LD_INT 26
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 101
11703: PUSH
11704: LD_INT 102
11706: PUSH
11707: LD_INT 106
11709: PUSH
11710: LD_INT 116
11712: PUSH
11713: LD_INT 117
11715: PUSH
11716: LD_INT 118
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: ST_TO_ADDR
11731: GO 14806
11733: LD_INT 2
11735: DOUBLE
11736: EQUAL
11737: IFTRUE 11741
11739: GO 11825
11741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11742: LD_ADDR_VAR 0 1
11746: PUSH
11747: LD_INT 2
11749: PUSH
11750: LD_INT 4
11752: PUSH
11753: LD_INT 11
11755: PUSH
11756: LD_INT 12
11758: PUSH
11759: LD_INT 15
11761: PUSH
11762: LD_INT 16
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 23
11770: PUSH
11771: LD_INT 26
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 101
11787: PUSH
11788: LD_INT 102
11790: PUSH
11791: LD_INT 105
11793: PUSH
11794: LD_INT 106
11796: PUSH
11797: LD_INT 108
11799: PUSH
11800: LD_INT 116
11802: PUSH
11803: LD_INT 117
11805: PUSH
11806: LD_INT 118
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: ST_TO_ADDR
11823: GO 14806
11825: LD_INT 3
11827: DOUBLE
11828: EQUAL
11829: IFTRUE 11833
11831: GO 11921
11833: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: LD_INT 4
11844: PUSH
11845: LD_INT 5
11847: PUSH
11848: LD_INT 11
11850: PUSH
11851: LD_INT 12
11853: PUSH
11854: LD_INT 15
11856: PUSH
11857: LD_INT 16
11859: PUSH
11860: LD_INT 22
11862: PUSH
11863: LD_INT 26
11865: PUSH
11866: LD_INT 36
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 101
11883: PUSH
11884: LD_INT 102
11886: PUSH
11887: LD_INT 105
11889: PUSH
11890: LD_INT 106
11892: PUSH
11893: LD_INT 108
11895: PUSH
11896: LD_INT 116
11898: PUSH
11899: LD_INT 117
11901: PUSH
11902: LD_INT 118
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: ST_TO_ADDR
11919: GO 14806
11921: LD_INT 4
11923: DOUBLE
11924: EQUAL
11925: IFTRUE 11929
11927: GO 12025
11929: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11930: LD_ADDR_VAR 0 1
11934: PUSH
11935: LD_INT 2
11937: PUSH
11938: LD_INT 4
11940: PUSH
11941: LD_INT 5
11943: PUSH
11944: LD_INT 8
11946: PUSH
11947: LD_INT 11
11949: PUSH
11950: LD_INT 12
11952: PUSH
11953: LD_INT 15
11955: PUSH
11956: LD_INT 16
11958: PUSH
11959: LD_INT 22
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 26
11967: PUSH
11968: LD_INT 36
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 101
11987: PUSH
11988: LD_INT 102
11990: PUSH
11991: LD_INT 105
11993: PUSH
11994: LD_INT 106
11996: PUSH
11997: LD_INT 108
11999: PUSH
12000: LD_INT 116
12002: PUSH
12003: LD_INT 117
12005: PUSH
12006: LD_INT 118
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: ST_TO_ADDR
12023: GO 14806
12025: LD_INT 5
12027: DOUBLE
12028: EQUAL
12029: IFTRUE 12033
12031: GO 12145
12033: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: PUSH
12042: LD_INT 4
12044: PUSH
12045: LD_INT 5
12047: PUSH
12048: LD_INT 6
12050: PUSH
12051: LD_INT 8
12053: PUSH
12054: LD_INT 11
12056: PUSH
12057: LD_INT 12
12059: PUSH
12060: LD_INT 15
12062: PUSH
12063: LD_INT 16
12065: PUSH
12066: LD_INT 22
12068: PUSH
12069: LD_INT 23
12071: PUSH
12072: LD_INT 25
12074: PUSH
12075: LD_INT 26
12077: PUSH
12078: LD_INT 36
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 101
12099: PUSH
12100: LD_INT 102
12102: PUSH
12103: LD_INT 105
12105: PUSH
12106: LD_INT 106
12108: PUSH
12109: LD_INT 108
12111: PUSH
12112: LD_INT 109
12114: PUSH
12115: LD_INT 112
12117: PUSH
12118: LD_INT 116
12120: PUSH
12121: LD_INT 117
12123: PUSH
12124: LD_INT 118
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: ST_TO_ADDR
12143: GO 14806
12145: LD_INT 6
12147: DOUBLE
12148: EQUAL
12149: IFTRUE 12153
12151: GO 12285
12153: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12154: LD_ADDR_VAR 0 1
12158: PUSH
12159: LD_INT 2
12161: PUSH
12162: LD_INT 4
12164: PUSH
12165: LD_INT 5
12167: PUSH
12168: LD_INT 6
12170: PUSH
12171: LD_INT 8
12173: PUSH
12174: LD_INT 11
12176: PUSH
12177: LD_INT 12
12179: PUSH
12180: LD_INT 15
12182: PUSH
12183: LD_INT 16
12185: PUSH
12186: LD_INT 20
12188: PUSH
12189: LD_INT 21
12191: PUSH
12192: LD_INT 22
12194: PUSH
12195: LD_INT 23
12197: PUSH
12198: LD_INT 25
12200: PUSH
12201: LD_INT 26
12203: PUSH
12204: LD_INT 30
12206: PUSH
12207: LD_INT 31
12209: PUSH
12210: LD_INT 32
12212: PUSH
12213: LD_INT 36
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 101
12239: PUSH
12240: LD_INT 102
12242: PUSH
12243: LD_INT 105
12245: PUSH
12246: LD_INT 106
12248: PUSH
12249: LD_INT 108
12251: PUSH
12252: LD_INT 109
12254: PUSH
12255: LD_INT 112
12257: PUSH
12258: LD_INT 116
12260: PUSH
12261: LD_INT 117
12263: PUSH
12264: LD_INT 118
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: ST_TO_ADDR
12283: GO 14806
12285: LD_INT 7
12287: DOUBLE
12288: EQUAL
12289: IFTRUE 12293
12291: GO 12405
12293: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12294: LD_ADDR_VAR 0 1
12298: PUSH
12299: LD_INT 2
12301: PUSH
12302: LD_INT 4
12304: PUSH
12305: LD_INT 5
12307: PUSH
12308: LD_INT 7
12310: PUSH
12311: LD_INT 11
12313: PUSH
12314: LD_INT 12
12316: PUSH
12317: LD_INT 15
12319: PUSH
12320: LD_INT 16
12322: PUSH
12323: LD_INT 20
12325: PUSH
12326: LD_INT 21
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 23
12334: PUSH
12335: LD_INT 25
12337: PUSH
12338: LD_INT 26
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 101
12359: PUSH
12360: LD_INT 102
12362: PUSH
12363: LD_INT 103
12365: PUSH
12366: LD_INT 105
12368: PUSH
12369: LD_INT 106
12371: PUSH
12372: LD_INT 108
12374: PUSH
12375: LD_INT 112
12377: PUSH
12378: LD_INT 116
12380: PUSH
12381: LD_INT 117
12383: PUSH
12384: LD_INT 118
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: ST_TO_ADDR
12403: GO 14806
12405: LD_INT 8
12407: DOUBLE
12408: EQUAL
12409: IFTRUE 12413
12411: GO 12553
12413: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12414: LD_ADDR_VAR 0 1
12418: PUSH
12419: LD_INT 2
12421: PUSH
12422: LD_INT 4
12424: PUSH
12425: LD_INT 5
12427: PUSH
12428: LD_INT 6
12430: PUSH
12431: LD_INT 7
12433: PUSH
12434: LD_INT 8
12436: PUSH
12437: LD_INT 11
12439: PUSH
12440: LD_INT 12
12442: PUSH
12443: LD_INT 15
12445: PUSH
12446: LD_INT 16
12448: PUSH
12449: LD_INT 20
12451: PUSH
12452: LD_INT 21
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_INT 23
12460: PUSH
12461: LD_INT 25
12463: PUSH
12464: LD_INT 26
12466: PUSH
12467: LD_INT 30
12469: PUSH
12470: LD_INT 31
12472: PUSH
12473: LD_INT 32
12475: PUSH
12476: LD_INT 36
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 101
12503: PUSH
12504: LD_INT 102
12506: PUSH
12507: LD_INT 103
12509: PUSH
12510: LD_INT 105
12512: PUSH
12513: LD_INT 106
12515: PUSH
12516: LD_INT 108
12518: PUSH
12519: LD_INT 109
12521: PUSH
12522: LD_INT 112
12524: PUSH
12525: LD_INT 116
12527: PUSH
12528: LD_INT 117
12530: PUSH
12531: LD_INT 118
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: ST_TO_ADDR
12551: GO 14806
12553: LD_INT 9
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12709
12561: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12562: LD_ADDR_VAR 0 1
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: LD_INT 4
12572: PUSH
12573: LD_INT 5
12575: PUSH
12576: LD_INT 6
12578: PUSH
12579: LD_INT 7
12581: PUSH
12582: LD_INT 8
12584: PUSH
12585: LD_INT 11
12587: PUSH
12588: LD_INT 12
12590: PUSH
12591: LD_INT 15
12593: PUSH
12594: LD_INT 16
12596: PUSH
12597: LD_INT 20
12599: PUSH
12600: LD_INT 21
12602: PUSH
12603: LD_INT 22
12605: PUSH
12606: LD_INT 23
12608: PUSH
12609: LD_INT 25
12611: PUSH
12612: LD_INT 26
12614: PUSH
12615: LD_INT 28
12617: PUSH
12618: LD_INT 30
12620: PUSH
12621: LD_INT 31
12623: PUSH
12624: LD_INT 32
12626: PUSH
12627: LD_INT 36
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 101
12655: PUSH
12656: LD_INT 102
12658: PUSH
12659: LD_INT 103
12661: PUSH
12662: LD_INT 105
12664: PUSH
12665: LD_INT 106
12667: PUSH
12668: LD_INT 108
12670: PUSH
12671: LD_INT 109
12673: PUSH
12674: LD_INT 112
12676: PUSH
12677: LD_INT 114
12679: PUSH
12680: LD_INT 116
12682: PUSH
12683: LD_INT 117
12685: PUSH
12686: LD_INT 118
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: ST_TO_ADDR
12707: GO 14806
12709: LD_INT 10
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12913
12717: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12718: LD_ADDR_VAR 0 1
12722: PUSH
12723: LD_INT 2
12725: PUSH
12726: LD_INT 4
12728: PUSH
12729: LD_INT 5
12731: PUSH
12732: LD_INT 6
12734: PUSH
12735: LD_INT 7
12737: PUSH
12738: LD_INT 8
12740: PUSH
12741: LD_INT 9
12743: PUSH
12744: LD_INT 10
12746: PUSH
12747: LD_INT 11
12749: PUSH
12750: LD_INT 12
12752: PUSH
12753: LD_INT 13
12755: PUSH
12756: LD_INT 14
12758: PUSH
12759: LD_INT 15
12761: PUSH
12762: LD_INT 16
12764: PUSH
12765: LD_INT 17
12767: PUSH
12768: LD_INT 18
12770: PUSH
12771: LD_INT 19
12773: PUSH
12774: LD_INT 20
12776: PUSH
12777: LD_INT 21
12779: PUSH
12780: LD_INT 22
12782: PUSH
12783: LD_INT 23
12785: PUSH
12786: LD_INT 24
12788: PUSH
12789: LD_INT 25
12791: PUSH
12792: LD_INT 26
12794: PUSH
12795: LD_INT 28
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 31
12803: PUSH
12804: LD_INT 32
12806: PUSH
12807: LD_INT 36
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 101
12843: PUSH
12844: LD_INT 102
12846: PUSH
12847: LD_INT 103
12849: PUSH
12850: LD_INT 104
12852: PUSH
12853: LD_INT 105
12855: PUSH
12856: LD_INT 106
12858: PUSH
12859: LD_INT 107
12861: PUSH
12862: LD_INT 108
12864: PUSH
12865: LD_INT 109
12867: PUSH
12868: LD_INT 110
12870: PUSH
12871: LD_INT 111
12873: PUSH
12874: LD_INT 112
12876: PUSH
12877: LD_INT 114
12879: PUSH
12880: LD_INT 116
12882: PUSH
12883: LD_INT 117
12885: PUSH
12886: LD_INT 118
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: ST_TO_ADDR
12911: GO 14806
12913: LD_INT 11
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 13125
12921: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12922: LD_ADDR_VAR 0 1
12926: PUSH
12927: LD_INT 2
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: LD_INT 4
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: LD_INT 6
12941: PUSH
12942: LD_INT 7
12944: PUSH
12945: LD_INT 8
12947: PUSH
12948: LD_INT 9
12950: PUSH
12951: LD_INT 10
12953: PUSH
12954: LD_INT 11
12956: PUSH
12957: LD_INT 12
12959: PUSH
12960: LD_INT 13
12962: PUSH
12963: LD_INT 14
12965: PUSH
12966: LD_INT 15
12968: PUSH
12969: LD_INT 16
12971: PUSH
12972: LD_INT 17
12974: PUSH
12975: LD_INT 18
12977: PUSH
12978: LD_INT 19
12980: PUSH
12981: LD_INT 20
12983: PUSH
12984: LD_INT 21
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_INT 23
12992: PUSH
12993: LD_INT 24
12995: PUSH
12996: LD_INT 25
12998: PUSH
12999: LD_INT 26
13001: PUSH
13002: LD_INT 28
13004: PUSH
13005: LD_INT 30
13007: PUSH
13008: LD_INT 31
13010: PUSH
13011: LD_INT 32
13013: PUSH
13014: LD_INT 34
13016: PUSH
13017: LD_INT 36
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 101
13055: PUSH
13056: LD_INT 102
13058: PUSH
13059: LD_INT 103
13061: PUSH
13062: LD_INT 104
13064: PUSH
13065: LD_INT 105
13067: PUSH
13068: LD_INT 106
13070: PUSH
13071: LD_INT 107
13073: PUSH
13074: LD_INT 108
13076: PUSH
13077: LD_INT 109
13079: PUSH
13080: LD_INT 110
13082: PUSH
13083: LD_INT 111
13085: PUSH
13086: LD_INT 112
13088: PUSH
13089: LD_INT 114
13091: PUSH
13092: LD_INT 116
13094: PUSH
13095: LD_INT 117
13097: PUSH
13098: LD_INT 118
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: ST_TO_ADDR
13123: GO 14806
13125: LD_INT 12
13127: DOUBLE
13128: EQUAL
13129: IFTRUE 13133
13131: GO 13353
13133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_INT 1
13141: PUSH
13142: LD_INT 2
13144: PUSH
13145: LD_INT 3
13147: PUSH
13148: LD_INT 4
13150: PUSH
13151: LD_INT 5
13153: PUSH
13154: LD_INT 6
13156: PUSH
13157: LD_INT 7
13159: PUSH
13160: LD_INT 8
13162: PUSH
13163: LD_INT 9
13165: PUSH
13166: LD_INT 10
13168: PUSH
13169: LD_INT 11
13171: PUSH
13172: LD_INT 12
13174: PUSH
13175: LD_INT 13
13177: PUSH
13178: LD_INT 14
13180: PUSH
13181: LD_INT 15
13183: PUSH
13184: LD_INT 16
13186: PUSH
13187: LD_INT 17
13189: PUSH
13190: LD_INT 18
13192: PUSH
13193: LD_INT 19
13195: PUSH
13196: LD_INT 20
13198: PUSH
13199: LD_INT 21
13201: PUSH
13202: LD_INT 22
13204: PUSH
13205: LD_INT 23
13207: PUSH
13208: LD_INT 24
13210: PUSH
13211: LD_INT 25
13213: PUSH
13214: LD_INT 26
13216: PUSH
13217: LD_INT 27
13219: PUSH
13220: LD_INT 28
13222: PUSH
13223: LD_INT 30
13225: PUSH
13226: LD_INT 31
13228: PUSH
13229: LD_INT 32
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 34
13237: PUSH
13238: LD_INT 36
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 101
13279: PUSH
13280: LD_INT 102
13282: PUSH
13283: LD_INT 103
13285: PUSH
13286: LD_INT 104
13288: PUSH
13289: LD_INT 105
13291: PUSH
13292: LD_INT 106
13294: PUSH
13295: LD_INT 107
13297: PUSH
13298: LD_INT 108
13300: PUSH
13301: LD_INT 109
13303: PUSH
13304: LD_INT 110
13306: PUSH
13307: LD_INT 111
13309: PUSH
13310: LD_INT 112
13312: PUSH
13313: LD_INT 113
13315: PUSH
13316: LD_INT 114
13318: PUSH
13319: LD_INT 116
13321: PUSH
13322: LD_INT 117
13324: PUSH
13325: LD_INT 118
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: ST_TO_ADDR
13351: GO 14806
13353: LD_INT 13
13355: DOUBLE
13356: EQUAL
13357: IFTRUE 13361
13359: GO 13569
13361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13362: LD_ADDR_VAR 0 1
13366: PUSH
13367: LD_INT 1
13369: PUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 3
13375: PUSH
13376: LD_INT 4
13378: PUSH
13379: LD_INT 5
13381: PUSH
13382: LD_INT 8
13384: PUSH
13385: LD_INT 9
13387: PUSH
13388: LD_INT 10
13390: PUSH
13391: LD_INT 11
13393: PUSH
13394: LD_INT 12
13396: PUSH
13397: LD_INT 14
13399: PUSH
13400: LD_INT 15
13402: PUSH
13403: LD_INT 16
13405: PUSH
13406: LD_INT 17
13408: PUSH
13409: LD_INT 18
13411: PUSH
13412: LD_INT 19
13414: PUSH
13415: LD_INT 20
13417: PUSH
13418: LD_INT 21
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 24
13429: PUSH
13430: LD_INT 25
13432: PUSH
13433: LD_INT 26
13435: PUSH
13436: LD_INT 27
13438: PUSH
13439: LD_INT 28
13441: PUSH
13442: LD_INT 30
13444: PUSH
13445: LD_INT 31
13447: PUSH
13448: LD_INT 32
13450: PUSH
13451: LD_INT 33
13453: PUSH
13454: LD_INT 34
13456: PUSH
13457: LD_INT 36
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 101
13495: PUSH
13496: LD_INT 102
13498: PUSH
13499: LD_INT 103
13501: PUSH
13502: LD_INT 104
13504: PUSH
13505: LD_INT 105
13507: PUSH
13508: LD_INT 106
13510: PUSH
13511: LD_INT 107
13513: PUSH
13514: LD_INT 108
13516: PUSH
13517: LD_INT 109
13519: PUSH
13520: LD_INT 110
13522: PUSH
13523: LD_INT 111
13525: PUSH
13526: LD_INT 112
13528: PUSH
13529: LD_INT 113
13531: PUSH
13532: LD_INT 114
13534: PUSH
13535: LD_INT 116
13537: PUSH
13538: LD_INT 117
13540: PUSH
13541: LD_INT 118
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: ST_TO_ADDR
13567: GO 14806
13569: LD_INT 14
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13801
13577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13578: LD_ADDR_VAR 0 1
13582: PUSH
13583: LD_INT 1
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: LD_INT 3
13591: PUSH
13592: LD_INT 4
13594: PUSH
13595: LD_INT 5
13597: PUSH
13598: LD_INT 6
13600: PUSH
13601: LD_INT 7
13603: PUSH
13604: LD_INT 8
13606: PUSH
13607: LD_INT 9
13609: PUSH
13610: LD_INT 10
13612: PUSH
13613: LD_INT 11
13615: PUSH
13616: LD_INT 12
13618: PUSH
13619: LD_INT 13
13621: PUSH
13622: LD_INT 14
13624: PUSH
13625: LD_INT 15
13627: PUSH
13628: LD_INT 16
13630: PUSH
13631: LD_INT 17
13633: PUSH
13634: LD_INT 18
13636: PUSH
13637: LD_INT 19
13639: PUSH
13640: LD_INT 20
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 22
13648: PUSH
13649: LD_INT 23
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 26
13660: PUSH
13661: LD_INT 27
13663: PUSH
13664: LD_INT 28
13666: PUSH
13667: LD_INT 29
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: LD_INT 32
13678: PUSH
13679: LD_INT 33
13681: PUSH
13682: LD_INT 34
13684: PUSH
13685: LD_INT 36
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 101
13727: PUSH
13728: LD_INT 102
13730: PUSH
13731: LD_INT 103
13733: PUSH
13734: LD_INT 104
13736: PUSH
13737: LD_INT 105
13739: PUSH
13740: LD_INT 106
13742: PUSH
13743: LD_INT 107
13745: PUSH
13746: LD_INT 108
13748: PUSH
13749: LD_INT 109
13751: PUSH
13752: LD_INT 110
13754: PUSH
13755: LD_INT 111
13757: PUSH
13758: LD_INT 112
13760: PUSH
13761: LD_INT 113
13763: PUSH
13764: LD_INT 114
13766: PUSH
13767: LD_INT 116
13769: PUSH
13770: LD_INT 117
13772: PUSH
13773: LD_INT 118
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: ST_TO_ADDR
13799: GO 14806
13801: LD_INT 15
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 14033
13809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13810: LD_ADDR_VAR 0 1
13814: PUSH
13815: LD_INT 1
13817: PUSH
13818: LD_INT 2
13820: PUSH
13821: LD_INT 3
13823: PUSH
13824: LD_INT 4
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: LD_INT 6
13832: PUSH
13833: LD_INT 7
13835: PUSH
13836: LD_INT 8
13838: PUSH
13839: LD_INT 9
13841: PUSH
13842: LD_INT 10
13844: PUSH
13845: LD_INT 11
13847: PUSH
13848: LD_INT 12
13850: PUSH
13851: LD_INT 13
13853: PUSH
13854: LD_INT 14
13856: PUSH
13857: LD_INT 15
13859: PUSH
13860: LD_INT 16
13862: PUSH
13863: LD_INT 17
13865: PUSH
13866: LD_INT 18
13868: PUSH
13869: LD_INT 19
13871: PUSH
13872: LD_INT 20
13874: PUSH
13875: LD_INT 21
13877: PUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 23
13883: PUSH
13884: LD_INT 24
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 26
13892: PUSH
13893: LD_INT 27
13895: PUSH
13896: LD_INT 28
13898: PUSH
13899: LD_INT 29
13901: PUSH
13902: LD_INT 30
13904: PUSH
13905: LD_INT 31
13907: PUSH
13908: LD_INT 32
13910: PUSH
13911: LD_INT 33
13913: PUSH
13914: LD_INT 34
13916: PUSH
13917: LD_INT 36
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 101
13959: PUSH
13960: LD_INT 102
13962: PUSH
13963: LD_INT 103
13965: PUSH
13966: LD_INT 104
13968: PUSH
13969: LD_INT 105
13971: PUSH
13972: LD_INT 106
13974: PUSH
13975: LD_INT 107
13977: PUSH
13978: LD_INT 108
13980: PUSH
13981: LD_INT 109
13983: PUSH
13984: LD_INT 110
13986: PUSH
13987: LD_INT 111
13989: PUSH
13990: LD_INT 112
13992: PUSH
13993: LD_INT 113
13995: PUSH
13996: LD_INT 114
13998: PUSH
13999: LD_INT 116
14001: PUSH
14002: LD_INT 117
14004: PUSH
14005: LD_INT 118
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: ST_TO_ADDR
14031: GO 14806
14033: LD_INT 16
14035: DOUBLE
14036: EQUAL
14037: IFTRUE 14041
14039: GO 14177
14041: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: LD_INT 4
14052: PUSH
14053: LD_INT 5
14055: PUSH
14056: LD_INT 7
14058: PUSH
14059: LD_INT 11
14061: PUSH
14062: LD_INT 12
14064: PUSH
14065: LD_INT 15
14067: PUSH
14068: LD_INT 16
14070: PUSH
14071: LD_INT 20
14073: PUSH
14074: LD_INT 21
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_INT 23
14082: PUSH
14083: LD_INT 25
14085: PUSH
14086: LD_INT 26
14088: PUSH
14089: LD_INT 30
14091: PUSH
14092: LD_INT 31
14094: PUSH
14095: LD_INT 32
14097: PUSH
14098: LD_INT 33
14100: PUSH
14101: LD_INT 34
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 101
14127: PUSH
14128: LD_INT 102
14130: PUSH
14131: LD_INT 103
14133: PUSH
14134: LD_INT 106
14136: PUSH
14137: LD_INT 108
14139: PUSH
14140: LD_INT 112
14142: PUSH
14143: LD_INT 113
14145: PUSH
14146: LD_INT 114
14148: PUSH
14149: LD_INT 116
14151: PUSH
14152: LD_INT 117
14154: PUSH
14155: LD_INT 118
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: ST_TO_ADDR
14175: GO 14806
14177: LD_INT 17
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14409
14185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14186: LD_ADDR_VAR 0 1
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: LD_INT 2
14196: PUSH
14197: LD_INT 3
14199: PUSH
14200: LD_INT 4
14202: PUSH
14203: LD_INT 5
14205: PUSH
14206: LD_INT 6
14208: PUSH
14209: LD_INT 7
14211: PUSH
14212: LD_INT 8
14214: PUSH
14215: LD_INT 9
14217: PUSH
14218: LD_INT 10
14220: PUSH
14221: LD_INT 11
14223: PUSH
14224: LD_INT 12
14226: PUSH
14227: LD_INT 13
14229: PUSH
14230: LD_INT 14
14232: PUSH
14233: LD_INT 15
14235: PUSH
14236: LD_INT 16
14238: PUSH
14239: LD_INT 17
14241: PUSH
14242: LD_INT 18
14244: PUSH
14245: LD_INT 19
14247: PUSH
14248: LD_INT 20
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 22
14256: PUSH
14257: LD_INT 23
14259: PUSH
14260: LD_INT 24
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 26
14268: PUSH
14269: LD_INT 27
14271: PUSH
14272: LD_INT 28
14274: PUSH
14275: LD_INT 29
14277: PUSH
14278: LD_INT 30
14280: PUSH
14281: LD_INT 31
14283: PUSH
14284: LD_INT 32
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 34
14292: PUSH
14293: LD_INT 36
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 101
14335: PUSH
14336: LD_INT 102
14338: PUSH
14339: LD_INT 103
14341: PUSH
14342: LD_INT 104
14344: PUSH
14345: LD_INT 105
14347: PUSH
14348: LD_INT 106
14350: PUSH
14351: LD_INT 107
14353: PUSH
14354: LD_INT 108
14356: PUSH
14357: LD_INT 109
14359: PUSH
14360: LD_INT 110
14362: PUSH
14363: LD_INT 111
14365: PUSH
14366: LD_INT 112
14368: PUSH
14369: LD_INT 113
14371: PUSH
14372: LD_INT 114
14374: PUSH
14375: LD_INT 116
14377: PUSH
14378: LD_INT 117
14380: PUSH
14381: LD_INT 118
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: ST_TO_ADDR
14407: GO 14806
14409: LD_INT 18
14411: DOUBLE
14412: EQUAL
14413: IFTRUE 14417
14415: GO 14565
14417: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14418: LD_ADDR_VAR 0 1
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: LD_INT 4
14428: PUSH
14429: LD_INT 5
14431: PUSH
14432: LD_INT 7
14434: PUSH
14435: LD_INT 11
14437: PUSH
14438: LD_INT 12
14440: PUSH
14441: LD_INT 15
14443: PUSH
14444: LD_INT 16
14446: PUSH
14447: LD_INT 20
14449: PUSH
14450: LD_INT 21
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_INT 23
14458: PUSH
14459: LD_INT 25
14461: PUSH
14462: LD_INT 26
14464: PUSH
14465: LD_INT 30
14467: PUSH
14468: LD_INT 31
14470: PUSH
14471: LD_INT 32
14473: PUSH
14474: LD_INT 33
14476: PUSH
14477: LD_INT 34
14479: PUSH
14480: LD_INT 35
14482: PUSH
14483: LD_INT 36
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 101
14511: PUSH
14512: LD_INT 102
14514: PUSH
14515: LD_INT 103
14517: PUSH
14518: LD_INT 106
14520: PUSH
14521: LD_INT 108
14523: PUSH
14524: LD_INT 112
14526: PUSH
14527: LD_INT 113
14529: PUSH
14530: LD_INT 114
14532: PUSH
14533: LD_INT 115
14535: PUSH
14536: LD_INT 116
14538: PUSH
14539: LD_INT 117
14541: PUSH
14542: LD_INT 118
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: ST_TO_ADDR
14563: GO 14806
14565: LD_INT 19
14567: DOUBLE
14568: EQUAL
14569: IFTRUE 14573
14571: GO 14805
14573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14574: LD_ADDR_VAR 0 1
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: LD_INT 6
14596: PUSH
14597: LD_INT 7
14599: PUSH
14600: LD_INT 8
14602: PUSH
14603: LD_INT 9
14605: PUSH
14606: LD_INT 10
14608: PUSH
14609: LD_INT 11
14611: PUSH
14612: LD_INT 12
14614: PUSH
14615: LD_INT 13
14617: PUSH
14618: LD_INT 14
14620: PUSH
14621: LD_INT 15
14623: PUSH
14624: LD_INT 16
14626: PUSH
14627: LD_INT 17
14629: PUSH
14630: LD_INT 18
14632: PUSH
14633: LD_INT 19
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 23
14647: PUSH
14648: LD_INT 24
14650: PUSH
14651: LD_INT 25
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: LD_INT 27
14659: PUSH
14660: LD_INT 28
14662: PUSH
14663: LD_INT 29
14665: PUSH
14666: LD_INT 30
14668: PUSH
14669: LD_INT 31
14671: PUSH
14672: LD_INT 32
14674: PUSH
14675: LD_INT 33
14677: PUSH
14678: LD_INT 34
14680: PUSH
14681: LD_INT 35
14683: PUSH
14684: LD_INT 36
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 101
14727: PUSH
14728: LD_INT 102
14730: PUSH
14731: LD_INT 103
14733: PUSH
14734: LD_INT 104
14736: PUSH
14737: LD_INT 105
14739: PUSH
14740: LD_INT 106
14742: PUSH
14743: LD_INT 107
14745: PUSH
14746: LD_INT 108
14748: PUSH
14749: LD_INT 109
14751: PUSH
14752: LD_INT 110
14754: PUSH
14755: LD_INT 111
14757: PUSH
14758: LD_INT 112
14760: PUSH
14761: LD_INT 113
14763: PUSH
14764: LD_INT 114
14766: PUSH
14767: LD_INT 115
14769: PUSH
14770: LD_INT 116
14772: PUSH
14773: LD_INT 117
14775: PUSH
14776: LD_INT 118
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: ST_TO_ADDR
14803: GO 14806
14805: POP
// end else
14806: GO 15037
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: LD_INT 1
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 3
14821: PUSH
14822: LD_INT 4
14824: PUSH
14825: LD_INT 5
14827: PUSH
14828: LD_INT 6
14830: PUSH
14831: LD_INT 7
14833: PUSH
14834: LD_INT 8
14836: PUSH
14837: LD_INT 9
14839: PUSH
14840: LD_INT 10
14842: PUSH
14843: LD_INT 11
14845: PUSH
14846: LD_INT 12
14848: PUSH
14849: LD_INT 13
14851: PUSH
14852: LD_INT 14
14854: PUSH
14855: LD_INT 15
14857: PUSH
14858: LD_INT 16
14860: PUSH
14861: LD_INT 17
14863: PUSH
14864: LD_INT 18
14866: PUSH
14867: LD_INT 19
14869: PUSH
14870: LD_INT 20
14872: PUSH
14873: LD_INT 21
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_INT 23
14881: PUSH
14882: LD_INT 24
14884: PUSH
14885: LD_INT 25
14887: PUSH
14888: LD_INT 26
14890: PUSH
14891: LD_INT 27
14893: PUSH
14894: LD_INT 28
14896: PUSH
14897: LD_INT 29
14899: PUSH
14900: LD_INT 30
14902: PUSH
14903: LD_INT 31
14905: PUSH
14906: LD_INT 32
14908: PUSH
14909: LD_INT 33
14911: PUSH
14912: LD_INT 34
14914: PUSH
14915: LD_INT 35
14917: PUSH
14918: LD_INT 36
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 101
14961: PUSH
14962: LD_INT 102
14964: PUSH
14965: LD_INT 103
14967: PUSH
14968: LD_INT 104
14970: PUSH
14971: LD_INT 105
14973: PUSH
14974: LD_INT 106
14976: PUSH
14977: LD_INT 107
14979: PUSH
14980: LD_INT 108
14982: PUSH
14983: LD_INT 109
14985: PUSH
14986: LD_INT 110
14988: PUSH
14989: LD_INT 111
14991: PUSH
14992: LD_INT 112
14994: PUSH
14995: LD_INT 113
14997: PUSH
14998: LD_INT 114
15000: PUSH
15001: LD_INT 115
15003: PUSH
15004: LD_INT 116
15006: PUSH
15007: LD_INT 117
15009: PUSH
15010: LD_INT 118
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: ST_TO_ADDR
// if result then
15037: LD_VAR 0 1
15041: IFFALSE 15330
// begin normal :=  ;
15043: LD_ADDR_VAR 0 3
15047: PUSH
15048: LD_STRING 
15050: ST_TO_ADDR
// hardcore :=  ;
15051: LD_ADDR_VAR 0 4
15055: PUSH
15056: LD_STRING 
15058: ST_TO_ADDR
// for i = 1 to normalCounter do
15059: LD_ADDR_VAR 0 5
15063: PUSH
15064: DOUBLE
15065: LD_INT 1
15067: DEC
15068: ST_TO_ADDR
15069: LD_EXP 27
15073: PUSH
15074: FOR_TO
15075: IFFALSE 15176
// begin tmp := 0 ;
15077: LD_ADDR_VAR 0 2
15081: PUSH
15082: LD_STRING 0
15084: ST_TO_ADDR
// if result [ 1 ] then
15085: LD_VAR 0 1
15089: PUSH
15090: LD_INT 1
15092: ARRAY
15093: IFFALSE 15158
// if result [ 1 ] [ 1 ] = i then
15095: LD_VAR 0 1
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: PUSH
15104: LD_INT 1
15106: ARRAY
15107: PUSH
15108: LD_VAR 0 5
15112: EQUAL
15113: IFFALSE 15158
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15115: LD_ADDR_VAR 0 1
15119: PUSH
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: LD_VAR 0 1
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 3
15144: PPUSH
15145: CALL_OW 1
15149: ST_TO_ADDR
// tmp := 1 ;
15150: LD_ADDR_VAR 0 2
15154: PUSH
15155: LD_STRING 1
15157: ST_TO_ADDR
// end ; normal := normal & tmp ;
15158: LD_ADDR_VAR 0 3
15162: PUSH
15163: LD_VAR 0 3
15167: PUSH
15168: LD_VAR 0 2
15172: STR
15173: ST_TO_ADDR
// end ;
15174: GO 15074
15176: POP
15177: POP
// for i = 1 to hardcoreCounter do
15178: LD_ADDR_VAR 0 5
15182: PUSH
15183: DOUBLE
15184: LD_INT 1
15186: DEC
15187: ST_TO_ADDR
15188: LD_EXP 28
15192: PUSH
15193: FOR_TO
15194: IFFALSE 15299
// begin tmp := 0 ;
15196: LD_ADDR_VAR 0 2
15200: PUSH
15201: LD_STRING 0
15203: ST_TO_ADDR
// if result [ 2 ] then
15204: LD_VAR 0 1
15208: PUSH
15209: LD_INT 2
15211: ARRAY
15212: IFFALSE 15281
// if result [ 2 ] [ 1 ] = 100 + i then
15214: LD_VAR 0 1
15218: PUSH
15219: LD_INT 2
15221: ARRAY
15222: PUSH
15223: LD_INT 1
15225: ARRAY
15226: PUSH
15227: LD_INT 100
15229: PUSH
15230: LD_VAR 0 5
15234: PLUS
15235: EQUAL
15236: IFFALSE 15281
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: LD_VAR 0 1
15247: PPUSH
15248: LD_INT 2
15250: PPUSH
15251: LD_VAR 0 1
15255: PUSH
15256: LD_INT 2
15258: ARRAY
15259: PPUSH
15260: LD_INT 1
15262: PPUSH
15263: CALL_OW 3
15267: PPUSH
15268: CALL_OW 1
15272: ST_TO_ADDR
// tmp := 1 ;
15273: LD_ADDR_VAR 0 2
15277: PUSH
15278: LD_STRING 1
15280: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15281: LD_ADDR_VAR 0 4
15285: PUSH
15286: LD_VAR 0 4
15290: PUSH
15291: LD_VAR 0 2
15295: STR
15296: ST_TO_ADDR
// end ;
15297: GO 15193
15299: POP
15300: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15301: LD_STRING getStreamItemsFromMission("
15303: PUSH
15304: LD_VAR 0 3
15308: STR
15309: PUSH
15310: LD_STRING ","
15312: STR
15313: PUSH
15314: LD_VAR 0 4
15318: STR
15319: PUSH
15320: LD_STRING ")
15322: STR
15323: PPUSH
15324: CALL_OW 559
// end else
15328: GO 15337
// ToLua ( getStreamItemsFromMission("","") ) ;
15330: LD_STRING getStreamItemsFromMission("","")
15332: PPUSH
15333: CALL_OW 559
// end ;
15337: LD_VAR 0 1
15341: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15342: LD_EXP 26
15346: PUSH
15347: LD_EXP 31
15351: AND
15352: IFFALSE 15476
15354: GO 15356
15356: DISABLE
15357: LD_INT 0
15359: PPUSH
15360: PPUSH
// begin enable ;
15361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15362: LD_ADDR_VAR 0 2
15366: PUSH
15367: LD_INT 22
15369: PUSH
15370: LD_OWVAR 2
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 2
15381: PUSH
15382: LD_INT 34
15384: PUSH
15385: LD_INT 7
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 34
15394: PUSH
15395: LD_INT 45
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 34
15404: PUSH
15405: LD_INT 28
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 34
15414: PUSH
15415: LD_INT 47
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: ST_TO_ADDR
// if not tmp then
15438: LD_VAR 0 2
15442: NOT
15443: IFFALSE 15447
// exit ;
15445: GO 15476
// for i in tmp do
15447: LD_ADDR_VAR 0 1
15451: PUSH
15452: LD_VAR 0 2
15456: PUSH
15457: FOR_IN
15458: IFFALSE 15474
// begin SetLives ( i , 0 ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 0
15467: PPUSH
15468: CALL_OW 234
// end ;
15472: GO 15457
15474: POP
15475: POP
// end ;
15476: PPOPN 2
15478: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15479: LD_EXP 26
15483: PUSH
15484: LD_EXP 32
15488: AND
15489: IFFALSE 15573
15491: GO 15493
15493: DISABLE
15494: LD_INT 0
15496: PPUSH
15497: PPUSH
// begin enable ;
15498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15499: LD_ADDR_VAR 0 2
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_OWVAR 2
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 32
15518: PUSH
15519: LD_INT 3
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 69
15534: ST_TO_ADDR
// if not tmp then
15535: LD_VAR 0 2
15539: NOT
15540: IFFALSE 15544
// exit ;
15542: GO 15573
// for i in tmp do
15544: LD_ADDR_VAR 0 1
15548: PUSH
15549: LD_VAR 0 2
15553: PUSH
15554: FOR_IN
15555: IFFALSE 15571
// begin SetLives ( i , 0 ) ;
15557: LD_VAR 0 1
15561: PPUSH
15562: LD_INT 0
15564: PPUSH
15565: CALL_OW 234
// end ;
15569: GO 15554
15571: POP
15572: POP
// end ;
15573: PPOPN 2
15575: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15576: LD_EXP 26
15580: PUSH
15581: LD_EXP 29
15585: AND
15586: IFFALSE 15679
15588: GO 15590
15590: DISABLE
15591: LD_INT 0
15593: PPUSH
// begin enable ;
15594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15595: LD_ADDR_VAR 0 1
15599: PUSH
15600: LD_INT 22
15602: PUSH
15603: LD_OWVAR 2
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: LD_INT 25
15617: PUSH
15618: LD_INT 5
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 25
15627: PUSH
15628: LD_INT 9
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 25
15637: PUSH
15638: LD_INT 8
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: PUSH
15660: FOR_IN
15661: IFFALSE 15677
// begin SetClass ( i , 1 ) ;
15663: LD_VAR 0 1
15667: PPUSH
15668: LD_INT 1
15670: PPUSH
15671: CALL_OW 336
// end ;
15675: GO 15660
15677: POP
15678: POP
// end ;
15679: PPOPN 1
15681: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15682: LD_EXP 26
15686: PUSH
15687: LD_EXP 30
15691: AND
15692: PUSH
15693: LD_OWVAR 65
15697: PUSH
15698: LD_INT 7
15700: LESS
15701: AND
15702: IFFALSE 15716
15704: GO 15706
15706: DISABLE
// begin enable ;
15707: ENABLE
// game_speed := 7 ;
15708: LD_ADDR_OWVAR 65
15712: PUSH
15713: LD_INT 7
15715: ST_TO_ADDR
// end ;
15716: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15717: LD_EXP 26
15721: PUSH
15722: LD_EXP 33
15726: AND
15727: IFFALSE 15929
15729: GO 15731
15731: DISABLE
15732: LD_INT 0
15734: PPUSH
15735: PPUSH
15736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15737: LD_ADDR_VAR 0 3
15741: PUSH
15742: LD_INT 81
15744: PUSH
15745: LD_OWVAR 2
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 21
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: ST_TO_ADDR
// if not tmp then
15773: LD_VAR 0 3
15777: NOT
15778: IFFALSE 15782
// exit ;
15780: GO 15929
// if tmp > 5 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 5
15789: GREATER
15790: IFFALSE 15802
// k := 5 else
15792: LD_ADDR_VAR 0 2
15796: PUSH
15797: LD_INT 5
15799: ST_TO_ADDR
15800: GO 15812
// k := tmp ;
15802: LD_ADDR_VAR 0 2
15806: PUSH
15807: LD_VAR 0 3
15811: ST_TO_ADDR
// for i := 1 to k do
15812: LD_ADDR_VAR 0 1
15816: PUSH
15817: DOUBLE
15818: LD_INT 1
15820: DEC
15821: ST_TO_ADDR
15822: LD_VAR 0 2
15826: PUSH
15827: FOR_TO
15828: IFFALSE 15927
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15830: LD_VAR 0 3
15834: PUSH
15835: LD_VAR 0 1
15839: ARRAY
15840: PPUSH
15841: LD_VAR 0 1
15845: PUSH
15846: LD_INT 4
15848: MOD
15849: PUSH
15850: LD_INT 1
15852: PLUS
15853: PPUSH
15854: CALL_OW 259
15858: PUSH
15859: LD_INT 10
15861: LESS
15862: IFFALSE 15925
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15864: LD_VAR 0 3
15868: PUSH
15869: LD_VAR 0 1
15873: ARRAY
15874: PPUSH
15875: LD_VAR 0 1
15879: PUSH
15880: LD_INT 4
15882: MOD
15883: PUSH
15884: LD_INT 1
15886: PLUS
15887: PPUSH
15888: LD_VAR 0 3
15892: PUSH
15893: LD_VAR 0 1
15897: ARRAY
15898: PPUSH
15899: LD_VAR 0 1
15903: PUSH
15904: LD_INT 4
15906: MOD
15907: PUSH
15908: LD_INT 1
15910: PLUS
15911: PPUSH
15912: CALL_OW 259
15916: PUSH
15917: LD_INT 1
15919: PLUS
15920: PPUSH
15921: CALL_OW 237
15925: GO 15827
15927: POP
15928: POP
// end ;
15929: PPOPN 3
15931: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15932: LD_EXP 26
15936: PUSH
15937: LD_EXP 34
15941: AND
15942: IFFALSE 15962
15944: GO 15946
15946: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15947: LD_INT 4
15949: PPUSH
15950: LD_OWVAR 2
15954: PPUSH
15955: LD_INT 0
15957: PPUSH
15958: CALL_OW 324
15962: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15963: LD_EXP 26
15967: PUSH
15968: LD_EXP 63
15972: AND
15973: IFFALSE 15993
15975: GO 15977
15977: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15978: LD_INT 19
15980: PPUSH
15981: LD_OWVAR 2
15985: PPUSH
15986: LD_INT 0
15988: PPUSH
15989: CALL_OW 324
15993: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15994: LD_EXP 26
15998: PUSH
15999: LD_EXP 35
16003: AND
16004: IFFALSE 16106
16006: GO 16008
16008: DISABLE
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
// begin enable ;
16013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_INT 22
16021: PUSH
16022: LD_OWVAR 2
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 2
16033: PUSH
16034: LD_INT 34
16036: PUSH
16037: LD_INT 11
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 34
16046: PUSH
16047: LD_INT 30
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PPUSH
16063: CALL_OW 69
16067: ST_TO_ADDR
// if not tmp then
16068: LD_VAR 0 2
16072: NOT
16073: IFFALSE 16077
// exit ;
16075: GO 16106
// for i in tmp do
16077: LD_ADDR_VAR 0 1
16081: PUSH
16082: LD_VAR 0 2
16086: PUSH
16087: FOR_IN
16088: IFFALSE 16104
// begin SetLives ( i , 0 ) ;
16090: LD_VAR 0 1
16094: PPUSH
16095: LD_INT 0
16097: PPUSH
16098: CALL_OW 234
// end ;
16102: GO 16087
16104: POP
16105: POP
// end ;
16106: PPOPN 2
16108: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16109: LD_EXP 26
16113: PUSH
16114: LD_EXP 36
16118: AND
16119: IFFALSE 16139
16121: GO 16123
16123: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16124: LD_INT 32
16126: PPUSH
16127: LD_OWVAR 2
16131: PPUSH
16132: LD_INT 0
16134: PPUSH
16135: CALL_OW 324
16139: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16140: LD_EXP 26
16144: PUSH
16145: LD_EXP 37
16149: AND
16150: IFFALSE 16331
16152: GO 16154
16154: DISABLE
16155: LD_INT 0
16157: PPUSH
16158: PPUSH
16159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16160: LD_ADDR_VAR 0 2
16164: PUSH
16165: LD_INT 22
16167: PUSH
16168: LD_OWVAR 2
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 33
16179: PUSH
16180: LD_INT 3
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: ST_TO_ADDR
// if not tmp then
16196: LD_VAR 0 2
16200: NOT
16201: IFFALSE 16205
// exit ;
16203: GO 16331
// side := 0 ;
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_INT 0
16212: ST_TO_ADDR
// for i := 1 to 8 do
16213: LD_ADDR_VAR 0 1
16217: PUSH
16218: DOUBLE
16219: LD_INT 1
16221: DEC
16222: ST_TO_ADDR
16223: LD_INT 8
16225: PUSH
16226: FOR_TO
16227: IFFALSE 16275
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16229: LD_OWVAR 2
16233: PUSH
16234: LD_VAR 0 1
16238: NONEQUAL
16239: PUSH
16240: LD_OWVAR 2
16244: PPUSH
16245: LD_VAR 0 1
16249: PPUSH
16250: CALL_OW 81
16254: PUSH
16255: LD_INT 2
16257: EQUAL
16258: AND
16259: IFFALSE 16273
// begin side := i ;
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_VAR 0 1
16270: ST_TO_ADDR
// break ;
16271: GO 16275
// end ;
16273: GO 16226
16275: POP
16276: POP
// if not side then
16277: LD_VAR 0 3
16281: NOT
16282: IFFALSE 16286
// exit ;
16284: GO 16331
// for i := 1 to tmp do
16286: LD_ADDR_VAR 0 1
16290: PUSH
16291: DOUBLE
16292: LD_INT 1
16294: DEC
16295: ST_TO_ADDR
16296: LD_VAR 0 2
16300: PUSH
16301: FOR_TO
16302: IFFALSE 16329
// if Prob ( 60 ) then
16304: LD_INT 60
16306: PPUSH
16307: CALL_OW 13
16311: IFFALSE 16327
// SetSide ( i , side ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_VAR 0 3
16322: PPUSH
16323: CALL_OW 235
16327: GO 16301
16329: POP
16330: POP
// end ;
16331: PPOPN 3
16333: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16334: LD_EXP 26
16338: PUSH
16339: LD_EXP 39
16343: AND
16344: IFFALSE 16463
16346: GO 16348
16348: DISABLE
16349: LD_INT 0
16351: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16352: LD_ADDR_VAR 0 1
16356: PUSH
16357: LD_INT 22
16359: PUSH
16360: LD_OWVAR 2
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 21
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: LD_INT 23
16384: PUSH
16385: LD_INT 0
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: PPUSH
16401: CALL_OW 69
16405: PUSH
16406: FOR_IN
16407: IFFALSE 16461
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 257
16418: PUSH
16419: LD_INT 1
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: LD_INT 3
16427: PUSH
16428: LD_INT 4
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: IN
16437: IFFALSE 16459
// SetClass ( un , rand ( 1 , 4 ) ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_INT 1
16446: PPUSH
16447: LD_INT 4
16449: PPUSH
16450: CALL_OW 12
16454: PPUSH
16455: CALL_OW 336
16459: GO 16406
16461: POP
16462: POP
// end ;
16463: PPOPN 1
16465: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16466: LD_EXP 26
16470: PUSH
16471: LD_EXP 38
16475: AND
16476: IFFALSE 16555
16478: GO 16480
16480: DISABLE
16481: LD_INT 0
16483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16484: LD_ADDR_VAR 0 1
16488: PUSH
16489: LD_INT 22
16491: PUSH
16492: LD_OWVAR 2
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 21
16503: PUSH
16504: LD_INT 3
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: ST_TO_ADDR
// if not tmp then
16520: LD_VAR 0 1
16524: NOT
16525: IFFALSE 16529
// exit ;
16527: GO 16555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16529: LD_VAR 0 1
16533: PUSH
16534: LD_INT 1
16536: PPUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 12
16546: ARRAY
16547: PPUSH
16548: LD_INT 100
16550: PPUSH
16551: CALL_OW 234
// end ;
16555: PPOPN 1
16557: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16558: LD_EXP 26
16562: PUSH
16563: LD_EXP 40
16567: AND
16568: IFFALSE 16666
16570: GO 16572
16572: DISABLE
16573: LD_INT 0
16575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_OWVAR 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// if not tmp then
16612: LD_VAR 0 1
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16666
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16621: LD_VAR 0 1
16625: PUSH
16626: LD_INT 1
16628: PPUSH
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 12
16638: ARRAY
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: LD_INT 4
16645: PPUSH
16646: CALL_OW 12
16650: PPUSH
16651: LD_INT 3000
16653: PPUSH
16654: LD_INT 9000
16656: PPUSH
16657: CALL_OW 12
16661: PPUSH
16662: CALL_OW 492
// end ;
16666: PPOPN 1
16668: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16669: LD_EXP 26
16673: PUSH
16674: LD_EXP 41
16678: AND
16679: IFFALSE 16699
16681: GO 16683
16683: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16684: LD_INT 1
16686: PPUSH
16687: LD_OWVAR 2
16691: PPUSH
16692: LD_INT 0
16694: PPUSH
16695: CALL_OW 324
16699: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16700: LD_EXP 26
16704: PUSH
16705: LD_EXP 42
16709: AND
16710: IFFALSE 16793
16712: GO 16714
16714: DISABLE
16715: LD_INT 0
16717: PPUSH
16718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_INT 22
16726: PUSH
16727: LD_OWVAR 2
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 21
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PPUSH
16750: CALL_OW 69
16754: ST_TO_ADDR
// if not tmp then
16755: LD_VAR 0 2
16759: NOT
16760: IFFALSE 16764
// exit ;
16762: GO 16793
// for i in tmp do
16764: LD_ADDR_VAR 0 1
16768: PUSH
16769: LD_VAR 0 2
16773: PUSH
16774: FOR_IN
16775: IFFALSE 16791
// SetBLevel ( i , 10 ) ;
16777: LD_VAR 0 1
16781: PPUSH
16782: LD_INT 10
16784: PPUSH
16785: CALL_OW 241
16789: GO 16774
16791: POP
16792: POP
// end ;
16793: PPOPN 2
16795: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16796: LD_EXP 26
16800: PUSH
16801: LD_EXP 43
16805: AND
16806: IFFALSE 16917
16808: GO 16810
16810: DISABLE
16811: LD_INT 0
16813: PPUSH
16814: PPUSH
16815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: LD_INT 22
16823: PUSH
16824: LD_OWVAR 2
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 25
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PPUSH
16847: CALL_OW 69
16851: ST_TO_ADDR
// if not tmp then
16852: LD_VAR 0 3
16856: NOT
16857: IFFALSE 16861
// exit ;
16859: GO 16917
// un := tmp [ rand ( 1 , tmp ) ] ;
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 1
16873: PPUSH
16874: LD_VAR 0 3
16878: PPUSH
16879: CALL_OW 12
16883: ARRAY
16884: ST_TO_ADDR
// if Crawls ( un ) then
16885: LD_VAR 0 2
16889: PPUSH
16890: CALL_OW 318
16894: IFFALSE 16905
// ComWalk ( un ) ;
16896: LD_VAR 0 2
16900: PPUSH
16901: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16905: LD_VAR 0 2
16909: PPUSH
16910: LD_INT 5
16912: PPUSH
16913: CALL_OW 336
// end ;
16917: PPOPN 3
16919: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16920: LD_EXP 26
16924: PUSH
16925: LD_EXP 44
16929: AND
16930: PUSH
16931: LD_OWVAR 67
16935: PUSH
16936: LD_INT 4
16938: LESS
16939: AND
16940: IFFALSE 16959
16942: GO 16944
16944: DISABLE
// begin Difficulty := Difficulty + 1 ;
16945: LD_ADDR_OWVAR 67
16949: PUSH
16950: LD_OWVAR 67
16954: PUSH
16955: LD_INT 1
16957: PLUS
16958: ST_TO_ADDR
// end ;
16959: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16960: LD_EXP 26
16964: PUSH
16965: LD_EXP 45
16969: AND
16970: IFFALSE 17073
16972: GO 16974
16974: DISABLE
16975: LD_INT 0
16977: PPUSH
// begin for i := 1 to 5 do
16978: LD_ADDR_VAR 0 1
16982: PUSH
16983: DOUBLE
16984: LD_INT 1
16986: DEC
16987: ST_TO_ADDR
16988: LD_INT 5
16990: PUSH
16991: FOR_TO
16992: IFFALSE 17071
// begin uc_nation := nation_nature ;
16994: LD_ADDR_OWVAR 21
16998: PUSH
16999: LD_INT 0
17001: ST_TO_ADDR
// uc_side := 0 ;
17002: LD_ADDR_OWVAR 20
17006: PUSH
17007: LD_INT 0
17009: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17010: LD_ADDR_OWVAR 29
17014: PUSH
17015: LD_INT 12
17017: PUSH
17018: LD_INT 12
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: ST_TO_ADDR
// hc_agressivity := 20 ;
17025: LD_ADDR_OWVAR 35
17029: PUSH
17030: LD_INT 20
17032: ST_TO_ADDR
// hc_class := class_tiger ;
17033: LD_ADDR_OWVAR 28
17037: PUSH
17038: LD_INT 14
17040: ST_TO_ADDR
// hc_gallery :=  ;
17041: LD_ADDR_OWVAR 33
17045: PUSH
17046: LD_STRING 
17048: ST_TO_ADDR
// hc_name :=  ;
17049: LD_ADDR_OWVAR 26
17053: PUSH
17054: LD_STRING 
17056: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17057: CALL_OW 44
17061: PPUSH
17062: LD_INT 0
17064: PPUSH
17065: CALL_OW 51
// end ;
17069: GO 16991
17071: POP
17072: POP
// end ;
17073: PPOPN 1
17075: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17076: LD_EXP 26
17080: PUSH
17081: LD_EXP 46
17085: AND
17086: IFFALSE 17095
17088: GO 17090
17090: DISABLE
// StreamSibBomb ;
17091: CALL 17096 0 0
17095: END
// export function StreamSibBomb ; var i , x , y ; begin
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
// result := false ;
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: LD_INT 0
17109: ST_TO_ADDR
// for i := 1 to 16 do
17110: LD_ADDR_VAR 0 2
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_INT 16
17122: PUSH
17123: FOR_TO
17124: IFFALSE 17323
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17126: LD_ADDR_VAR 0 3
17130: PUSH
17131: LD_INT 10
17133: PUSH
17134: LD_INT 20
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 40
17142: PUSH
17143: LD_INT 50
17145: PUSH
17146: LD_INT 60
17148: PUSH
17149: LD_INT 70
17151: PUSH
17152: LD_INT 80
17154: PUSH
17155: LD_INT 90
17157: PUSH
17158: LD_INT 100
17160: PUSH
17161: LD_INT 110
17163: PUSH
17164: LD_INT 120
17166: PUSH
17167: LD_INT 130
17169: PUSH
17170: LD_INT 140
17172: PUSH
17173: LD_INT 150
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 1
17195: PPUSH
17196: LD_INT 15
17198: PPUSH
17199: CALL_OW 12
17203: ARRAY
17204: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17205: LD_ADDR_VAR 0 4
17209: PUSH
17210: LD_INT 10
17212: PUSH
17213: LD_INT 20
17215: PUSH
17216: LD_INT 30
17218: PUSH
17219: LD_INT 40
17221: PUSH
17222: LD_INT 50
17224: PUSH
17225: LD_INT 60
17227: PUSH
17228: LD_INT 70
17230: PUSH
17231: LD_INT 80
17233: PUSH
17234: LD_INT 90
17236: PUSH
17237: LD_INT 100
17239: PUSH
17240: LD_INT 110
17242: PUSH
17243: LD_INT 120
17245: PUSH
17246: LD_INT 130
17248: PUSH
17249: LD_INT 140
17251: PUSH
17252: LD_INT 150
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 1
17274: PPUSH
17275: LD_INT 15
17277: PPUSH
17278: CALL_OW 12
17282: ARRAY
17283: ST_TO_ADDR
// if ValidHex ( x , y ) then
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_VAR 0 4
17293: PPUSH
17294: CALL_OW 488
17298: IFFALSE 17321
// begin result := [ x , y ] ;
17300: LD_ADDR_VAR 0 1
17304: PUSH
17305: LD_VAR 0 3
17309: PUSH
17310: LD_VAR 0 4
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: ST_TO_ADDR
// break ;
17319: GO 17323
// end ; end ;
17321: GO 17123
17323: POP
17324: POP
// if result then
17325: LD_VAR 0 1
17329: IFFALSE 17389
// begin ToLua ( playSibBomb() ) ;
17331: LD_STRING playSibBomb()
17333: PPUSH
17334: CALL_OW 559
// wait ( 0 0$14 ) ;
17338: LD_INT 490
17340: PPUSH
17341: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17345: LD_VAR 0 1
17349: PUSH
17350: LD_INT 1
17352: ARRAY
17353: PPUSH
17354: LD_VAR 0 1
17358: PUSH
17359: LD_INT 2
17361: ARRAY
17362: PPUSH
17363: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17367: LD_VAR 0 1
17371: PUSH
17372: LD_INT 1
17374: ARRAY
17375: PPUSH
17376: LD_VAR 0 1
17380: PUSH
17381: LD_INT 2
17383: ARRAY
17384: PPUSH
17385: CALL_OW 429
// end ; end ;
17389: LD_VAR 0 1
17393: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17394: LD_EXP 26
17398: PUSH
17399: LD_EXP 48
17403: AND
17404: IFFALSE 17416
17406: GO 17408
17408: DISABLE
// YouLost (  ) ;
17409: LD_STRING 
17411: PPUSH
17412: CALL_OW 104
17416: END
// every 0 0$1 trigger StreamModeActive and sFog do
17417: LD_EXP 26
17421: PUSH
17422: LD_EXP 47
17426: AND
17427: IFFALSE 17441
17429: GO 17431
17431: DISABLE
// FogOff ( your_side ) ;
17432: LD_OWVAR 2
17436: PPUSH
17437: CALL_OW 344
17441: END
// every 0 0$1 trigger StreamModeActive and sSun do
17442: LD_EXP 26
17446: PUSH
17447: LD_EXP 49
17451: AND
17452: IFFALSE 17480
17454: GO 17456
17456: DISABLE
// begin solar_recharge_percent := 0 ;
17457: LD_ADDR_OWVAR 79
17461: PUSH
17462: LD_INT 0
17464: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17465: LD_INT 10500
17467: PPUSH
17468: CALL_OW 67
// solar_recharge_percent := 100 ;
17472: LD_ADDR_OWVAR 79
17476: PUSH
17477: LD_INT 100
17479: ST_TO_ADDR
// end ;
17480: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17481: LD_EXP 26
17485: PUSH
17486: LD_EXP 50
17490: AND
17491: IFFALSE 17730
17493: GO 17495
17495: DISABLE
17496: LD_INT 0
17498: PPUSH
17499: PPUSH
17500: PPUSH
// begin tmp := [ ] ;
17501: LD_ADDR_VAR 0 3
17505: PUSH
17506: EMPTY
17507: ST_TO_ADDR
// for i := 1 to 6 do
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: DOUBLE
17514: LD_INT 1
17516: DEC
17517: ST_TO_ADDR
17518: LD_INT 6
17520: PUSH
17521: FOR_TO
17522: IFFALSE 17627
// begin uc_nation := nation_nature ;
17524: LD_ADDR_OWVAR 21
17528: PUSH
17529: LD_INT 0
17531: ST_TO_ADDR
// uc_side := 0 ;
17532: LD_ADDR_OWVAR 20
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17540: LD_ADDR_OWVAR 29
17544: PUSH
17545: LD_INT 12
17547: PUSH
17548: LD_INT 12
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: ST_TO_ADDR
// hc_agressivity := 20 ;
17555: LD_ADDR_OWVAR 35
17559: PUSH
17560: LD_INT 20
17562: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17563: LD_ADDR_OWVAR 28
17567: PUSH
17568: LD_INT 17
17570: ST_TO_ADDR
// hc_gallery :=  ;
17571: LD_ADDR_OWVAR 33
17575: PUSH
17576: LD_STRING 
17578: ST_TO_ADDR
// hc_name :=  ;
17579: LD_ADDR_OWVAR 26
17583: PUSH
17584: LD_STRING 
17586: ST_TO_ADDR
// un := CreateHuman ;
17587: LD_ADDR_VAR 0 2
17591: PUSH
17592: CALL_OW 44
17596: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 51
// tmp := tmp ^ un ;
17609: LD_ADDR_VAR 0 3
17613: PUSH
17614: LD_VAR 0 3
17618: PUSH
17619: LD_VAR 0 2
17623: ADD
17624: ST_TO_ADDR
// end ;
17625: GO 17521
17627: POP
17628: POP
// repeat wait ( 0 0$1 ) ;
17629: LD_INT 35
17631: PPUSH
17632: CALL_OW 67
// for un in tmp do
17636: LD_ADDR_VAR 0 2
17640: PUSH
17641: LD_VAR 0 3
17645: PUSH
17646: FOR_IN
17647: IFFALSE 17721
// begin if IsDead ( un ) then
17649: LD_VAR 0 2
17653: PPUSH
17654: CALL_OW 301
17658: IFFALSE 17678
// begin tmp := tmp diff un ;
17660: LD_ADDR_VAR 0 3
17664: PUSH
17665: LD_VAR 0 3
17669: PUSH
17670: LD_VAR 0 2
17674: DIFF
17675: ST_TO_ADDR
// continue ;
17676: GO 17646
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: LD_INT 3
17685: PUSH
17686: LD_INT 22
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: PPUSH
17705: LD_VAR 0 2
17709: PPUSH
17710: CALL_OW 74
17714: PPUSH
17715: CALL_OW 115
// end ;
17719: GO 17646
17721: POP
17722: POP
// until not tmp ;
17723: LD_VAR 0 3
17727: NOT
17728: IFFALSE 17629
// end ;
17730: PPOPN 3
17732: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17733: LD_EXP 26
17737: PUSH
17738: LD_EXP 51
17742: AND
17743: IFFALSE 17797
17745: GO 17747
17747: DISABLE
// begin ToLua ( displayTroll(); ) ;
17748: LD_STRING displayTroll();
17750: PPUSH
17751: CALL_OW 559
// wait ( 3 3$00 ) ;
17755: LD_INT 6300
17757: PPUSH
17758: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17762: LD_STRING hideTroll();
17764: PPUSH
17765: CALL_OW 559
// wait ( 1 1$00 ) ;
17769: LD_INT 2100
17771: PPUSH
17772: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17776: LD_STRING displayTroll();
17778: PPUSH
17779: CALL_OW 559
// wait ( 1 1$00 ) ;
17783: LD_INT 2100
17785: PPUSH
17786: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17790: LD_STRING hideTroll();
17792: PPUSH
17793: CALL_OW 559
// end ;
17797: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 52
17807: AND
17808: IFFALSE 17871
17810: GO 17812
17812: DISABLE
17813: LD_INT 0
17815: PPUSH
// begin p := 0 ;
17816: LD_ADDR_VAR 0 1
17820: PUSH
17821: LD_INT 0
17823: ST_TO_ADDR
// repeat game_speed := 1 ;
17824: LD_ADDR_OWVAR 65
17828: PUSH
17829: LD_INT 1
17831: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17832: LD_INT 35
17834: PPUSH
17835: CALL_OW 67
// p := p + 1 ;
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 1
17848: PUSH
17849: LD_INT 1
17851: PLUS
17852: ST_TO_ADDR
// until p >= 60 ;
17853: LD_VAR 0 1
17857: PUSH
17858: LD_INT 60
17860: GREATEREQUAL
17861: IFFALSE 17824
// game_speed := 4 ;
17863: LD_ADDR_OWVAR 65
17867: PUSH
17868: LD_INT 4
17870: ST_TO_ADDR
// end ;
17871: PPOPN 1
17873: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17874: LD_EXP 26
17878: PUSH
17879: LD_EXP 53
17883: AND
17884: IFFALSE 18030
17886: GO 17888
17888: DISABLE
17889: LD_INT 0
17891: PPUSH
17892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17893: LD_ADDR_VAR 0 1
17897: PUSH
17898: LD_INT 22
17900: PUSH
17901: LD_OWVAR 2
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: LD_INT 30
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 30
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PPUSH
17942: CALL_OW 69
17946: ST_TO_ADDR
// if not depot then
17947: LD_VAR 0 1
17951: NOT
17952: IFFALSE 17956
// exit ;
17954: GO 18030
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_VAR 0 1
17965: PUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 12
17978: ARRAY
17979: PPUSH
17980: CALL_OW 274
17984: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17985: LD_VAR 0 2
17989: PPUSH
17990: LD_INT 1
17992: PPUSH
17993: LD_INT 0
17995: PPUSH
17996: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18000: LD_VAR 0 2
18004: PPUSH
18005: LD_INT 2
18007: PPUSH
18008: LD_INT 0
18010: PPUSH
18011: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18015: LD_VAR 0 2
18019: PPUSH
18020: LD_INT 3
18022: PPUSH
18023: LD_INT 0
18025: PPUSH
18026: CALL_OW 277
// end ;
18030: PPOPN 2
18032: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18033: LD_EXP 26
18037: PUSH
18038: LD_EXP 54
18042: AND
18043: IFFALSE 18140
18045: GO 18047
18047: DISABLE
18048: LD_INT 0
18050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_INT 22
18058: PUSH
18059: LD_OWVAR 2
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 21
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 3
18080: PUSH
18081: LD_INT 23
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: PPUSH
18100: CALL_OW 69
18104: ST_TO_ADDR
// if not tmp then
18105: LD_VAR 0 1
18109: NOT
18110: IFFALSE 18114
// exit ;
18112: GO 18140
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18114: LD_VAR 0 1
18118: PUSH
18119: LD_INT 1
18121: PPUSH
18122: LD_VAR 0 1
18126: PPUSH
18127: CALL_OW 12
18131: ARRAY
18132: PPUSH
18133: LD_INT 200
18135: PPUSH
18136: CALL_OW 234
// end ;
18140: PPOPN 1
18142: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18143: LD_EXP 26
18147: PUSH
18148: LD_EXP 55
18152: AND
18153: IFFALSE 18232
18155: GO 18157
18157: DISABLE
18158: LD_INT 0
18160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18161: LD_ADDR_VAR 0 1
18165: PUSH
18166: LD_INT 22
18168: PUSH
18169: LD_OWVAR 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 21
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PPUSH
18192: CALL_OW 69
18196: ST_TO_ADDR
// if not tmp then
18197: LD_VAR 0 1
18201: NOT
18202: IFFALSE 18206
// exit ;
18204: GO 18232
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18206: LD_VAR 0 1
18210: PUSH
18211: LD_INT 1
18213: PPUSH
18214: LD_VAR 0 1
18218: PPUSH
18219: CALL_OW 12
18223: ARRAY
18224: PPUSH
18225: LD_INT 60
18227: PPUSH
18228: CALL_OW 234
// end ;
18232: PPOPN 1
18234: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18235: LD_EXP 26
18239: PUSH
18240: LD_EXP 56
18244: AND
18245: IFFALSE 18344
18247: GO 18249
18249: DISABLE
18250: LD_INT 0
18252: PPUSH
18253: PPUSH
// begin enable ;
18254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18255: LD_ADDR_VAR 0 1
18259: PUSH
18260: LD_INT 22
18262: PUSH
18263: LD_OWVAR 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 61
18274: PUSH
18275: EMPTY
18276: LIST
18277: PUSH
18278: LD_INT 33
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: PPUSH
18293: CALL_OW 69
18297: ST_TO_ADDR
// if not tmp then
18298: LD_VAR 0 1
18302: NOT
18303: IFFALSE 18307
// exit ;
18305: GO 18344
// for i in tmp do
18307: LD_ADDR_VAR 0 2
18311: PUSH
18312: LD_VAR 0 1
18316: PUSH
18317: FOR_IN
18318: IFFALSE 18342
// if IsControledBy ( i ) then
18320: LD_VAR 0 2
18324: PPUSH
18325: CALL_OW 312
18329: IFFALSE 18340
// ComUnlink ( i ) ;
18331: LD_VAR 0 2
18335: PPUSH
18336: CALL_OW 136
18340: GO 18317
18342: POP
18343: POP
// end ;
18344: PPOPN 2
18346: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18347: LD_EXP 26
18351: PUSH
18352: LD_EXP 57
18356: AND
18357: IFFALSE 18497
18359: GO 18361
18361: DISABLE
18362: LD_INT 0
18364: PPUSH
18365: PPUSH
// begin ToLua ( displayPowell(); ) ;
18366: LD_STRING displayPowell();
18368: PPUSH
18369: CALL_OW 559
// uc_side := 0 ;
18373: LD_ADDR_OWVAR 20
18377: PUSH
18378: LD_INT 0
18380: ST_TO_ADDR
// uc_nation := 2 ;
18381: LD_ADDR_OWVAR 21
18385: PUSH
18386: LD_INT 2
18388: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18389: LD_ADDR_OWVAR 37
18393: PUSH
18394: LD_INT 14
18396: ST_TO_ADDR
// vc_engine := engine_siberite ;
18397: LD_ADDR_OWVAR 39
18401: PUSH
18402: LD_INT 3
18404: ST_TO_ADDR
// vc_control := control_apeman ;
18405: LD_ADDR_OWVAR 38
18409: PUSH
18410: LD_INT 5
18412: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18413: LD_ADDR_OWVAR 40
18417: PUSH
18418: LD_INT 29
18420: ST_TO_ADDR
// un := CreateVehicle ;
18421: LD_ADDR_VAR 0 2
18425: PUSH
18426: CALL_OW 45
18430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18431: LD_VAR 0 2
18435: PPUSH
18436: LD_INT 1
18438: PPUSH
18439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18443: LD_INT 35
18445: PPUSH
18446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_INT 22
18457: PUSH
18458: LD_OWVAR 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PPUSH
18472: LD_VAR 0 2
18476: PPUSH
18477: CALL_OW 74
18481: PPUSH
18482: CALL_OW 115
// until IsDead ( un ) ;
18486: LD_VAR 0 2
18490: PPUSH
18491: CALL_OW 301
18495: IFFALSE 18443
// end ;
18497: PPOPN 2
18499: END
// every 0 0$1 trigger StreamModeActive and sStu do
18500: LD_EXP 26
18504: PUSH
18505: LD_EXP 65
18509: AND
18510: IFFALSE 18526
18512: GO 18514
18514: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18515: LD_STRING displayStucuk();
18517: PPUSH
18518: CALL_OW 559
// ResetFog ;
18522: CALL_OW 335
// end ;
18526: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18527: LD_EXP 26
18531: PUSH
18532: LD_EXP 58
18536: AND
18537: IFFALSE 18678
18539: GO 18541
18541: DISABLE
18542: LD_INT 0
18544: PPUSH
18545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18546: LD_ADDR_VAR 0 2
18550: PUSH
18551: LD_INT 22
18553: PUSH
18554: LD_OWVAR 2
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 21
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PPUSH
18577: CALL_OW 69
18581: ST_TO_ADDR
// if not tmp then
18582: LD_VAR 0 2
18586: NOT
18587: IFFALSE 18591
// exit ;
18589: GO 18678
// un := tmp [ rand ( 1 , tmp ) ] ;
18591: LD_ADDR_VAR 0 1
18595: PUSH
18596: LD_VAR 0 2
18600: PUSH
18601: LD_INT 1
18603: PPUSH
18604: LD_VAR 0 2
18608: PPUSH
18609: CALL_OW 12
18613: ARRAY
18614: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18615: LD_VAR 0 1
18619: PPUSH
18620: LD_INT 0
18622: PPUSH
18623: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18627: LD_VAR 0 1
18631: PPUSH
18632: LD_OWVAR 3
18636: PUSH
18637: LD_VAR 0 1
18641: DIFF
18642: PPUSH
18643: LD_VAR 0 1
18647: PPUSH
18648: CALL_OW 74
18652: PPUSH
18653: CALL_OW 115
// wait ( 0 0$20 ) ;
18657: LD_INT 700
18659: PPUSH
18660: CALL_OW 67
// SetSide ( un , your_side ) ;
18664: LD_VAR 0 1
18668: PPUSH
18669: LD_OWVAR 2
18673: PPUSH
18674: CALL_OW 235
// end ;
18678: PPOPN 2
18680: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18681: LD_EXP 26
18685: PUSH
18686: LD_EXP 59
18690: AND
18691: IFFALSE 18797
18693: GO 18695
18695: DISABLE
18696: LD_INT 0
18698: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18699: LD_ADDR_VAR 0 1
18703: PUSH
18704: LD_INT 22
18706: PUSH
18707: LD_OWVAR 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 30
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: ST_TO_ADDR
// if not depot then
18753: LD_VAR 0 1
18757: NOT
18758: IFFALSE 18762
// exit ;
18760: GO 18797
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18762: LD_VAR 0 1
18766: PUSH
18767: LD_INT 1
18769: ARRAY
18770: PPUSH
18771: CALL_OW 250
18775: PPUSH
18776: LD_VAR 0 1
18780: PUSH
18781: LD_INT 1
18783: ARRAY
18784: PPUSH
18785: CALL_OW 251
18789: PPUSH
18790: LD_INT 70
18792: PPUSH
18793: CALL_OW 495
// end ;
18797: PPOPN 1
18799: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18800: LD_EXP 26
18804: PUSH
18805: LD_EXP 60
18809: AND
18810: IFFALSE 19021
18812: GO 18814
18814: DISABLE
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
18819: PPUSH
18820: PPUSH
18821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18822: LD_ADDR_VAR 0 5
18826: PUSH
18827: LD_INT 22
18829: PUSH
18830: LD_OWVAR 2
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 21
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 69
18857: ST_TO_ADDR
// if not tmp then
18858: LD_VAR 0 5
18862: NOT
18863: IFFALSE 18867
// exit ;
18865: GO 19021
// for i in tmp do
18867: LD_ADDR_VAR 0 1
18871: PUSH
18872: LD_VAR 0 5
18876: PUSH
18877: FOR_IN
18878: IFFALSE 19019
// begin d := rand ( 0 , 5 ) ;
18880: LD_ADDR_VAR 0 4
18884: PUSH
18885: LD_INT 0
18887: PPUSH
18888: LD_INT 5
18890: PPUSH
18891: CALL_OW 12
18895: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18896: LD_ADDR_VAR 0 2
18900: PUSH
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 250
18910: PPUSH
18911: LD_VAR 0 4
18915: PPUSH
18916: LD_INT 3
18918: PPUSH
18919: LD_INT 12
18921: PPUSH
18922: CALL_OW 12
18926: PPUSH
18927: CALL_OW 272
18931: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18932: LD_ADDR_VAR 0 3
18936: PUSH
18937: LD_VAR 0 1
18941: PPUSH
18942: CALL_OW 251
18946: PPUSH
18947: LD_VAR 0 4
18951: PPUSH
18952: LD_INT 3
18954: PPUSH
18955: LD_INT 12
18957: PPUSH
18958: CALL_OW 12
18962: PPUSH
18963: CALL_OW 273
18967: ST_TO_ADDR
// if ValidHex ( x , y ) then
18968: LD_VAR 0 2
18972: PPUSH
18973: LD_VAR 0 3
18977: PPUSH
18978: CALL_OW 488
18982: IFFALSE 19017
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_VAR 0 2
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: LD_INT 3
19001: PPUSH
19002: LD_INT 6
19004: PPUSH
19005: CALL_OW 12
19009: PPUSH
19010: LD_INT 1
19012: PPUSH
19013: CALL_OW 483
// end ;
19017: GO 18877
19019: POP
19020: POP
// end ;
19021: PPOPN 5
19023: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19024: LD_EXP 26
19028: PUSH
19029: LD_EXP 61
19033: AND
19034: IFFALSE 19128
19036: GO 19038
19038: DISABLE
19039: LD_INT 0
19041: PPUSH
19042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19043: LD_ADDR_VAR 0 2
19047: PUSH
19048: LD_INT 22
19050: PUSH
19051: LD_OWVAR 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 32
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 21
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: PPUSH
19085: CALL_OW 69
19089: ST_TO_ADDR
// if not tmp then
19090: LD_VAR 0 2
19094: NOT
19095: IFFALSE 19099
// exit ;
19097: GO 19128
// for i in tmp do
19099: LD_ADDR_VAR 0 1
19103: PUSH
19104: LD_VAR 0 2
19108: PUSH
19109: FOR_IN
19110: IFFALSE 19126
// SetFuel ( i , 0 ) ;
19112: LD_VAR 0 1
19116: PPUSH
19117: LD_INT 0
19119: PPUSH
19120: CALL_OW 240
19124: GO 19109
19126: POP
19127: POP
// end ;
19128: PPOPN 2
19130: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19131: LD_EXP 26
19135: PUSH
19136: LD_EXP 62
19140: AND
19141: IFFALSE 19207
19143: GO 19145
19145: DISABLE
19146: LD_INT 0
19148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19149: LD_ADDR_VAR 0 1
19153: PUSH
19154: LD_INT 22
19156: PUSH
19157: LD_OWVAR 2
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 30
19168: PUSH
19169: LD_INT 29
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PPUSH
19180: CALL_OW 69
19184: ST_TO_ADDR
// if not tmp then
19185: LD_VAR 0 1
19189: NOT
19190: IFFALSE 19194
// exit ;
19192: GO 19207
// DestroyUnit ( tmp [ 1 ] ) ;
19194: LD_VAR 0 1
19198: PUSH
19199: LD_INT 1
19201: ARRAY
19202: PPUSH
19203: CALL_OW 65
// end ;
19207: PPOPN 1
19209: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19210: LD_EXP 26
19214: PUSH
19215: LD_EXP 64
19219: AND
19220: IFFALSE 19349
19222: GO 19224
19224: DISABLE
19225: LD_INT 0
19227: PPUSH
// begin uc_side := 0 ;
19228: LD_ADDR_OWVAR 20
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// uc_nation := nation_arabian ;
19236: LD_ADDR_OWVAR 21
19240: PUSH
19241: LD_INT 2
19243: ST_TO_ADDR
// hc_gallery :=  ;
19244: LD_ADDR_OWVAR 33
19248: PUSH
19249: LD_STRING 
19251: ST_TO_ADDR
// hc_name :=  ;
19252: LD_ADDR_OWVAR 26
19256: PUSH
19257: LD_STRING 
19259: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19260: LD_INT 1
19262: PPUSH
19263: LD_INT 11
19265: PPUSH
19266: LD_INT 10
19268: PPUSH
19269: CALL_OW 380
// un := CreateHuman ;
19273: LD_ADDR_VAR 0 1
19277: PUSH
19278: CALL_OW 44
19282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19295: LD_INT 35
19297: PPUSH
19298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19302: LD_VAR 0 1
19306: PPUSH
19307: LD_INT 22
19309: PUSH
19310: LD_OWVAR 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PPUSH
19319: CALL_OW 69
19323: PPUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 74
19333: PPUSH
19334: CALL_OW 115
// until IsDead ( un ) ;
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 301
19347: IFFALSE 19295
// end ;
19349: PPOPN 1
19351: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19352: LD_EXP 26
19356: PUSH
19357: LD_EXP 66
19361: AND
19362: IFFALSE 19374
19364: GO 19366
19366: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19367: LD_STRING earthquake(getX(game), 0, 32)
19369: PPUSH
19370: CALL_OW 559
19374: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19375: LD_EXP 26
19379: PUSH
19380: LD_EXP 67
19384: AND
19385: IFFALSE 19476
19387: GO 19389
19389: DISABLE
19390: LD_INT 0
19392: PPUSH
// begin enable ;
19393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19394: LD_ADDR_VAR 0 1
19398: PUSH
19399: LD_INT 22
19401: PUSH
19402: LD_OWVAR 2
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 21
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 33
19423: PUSH
19424: LD_INT 3
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL_OW 69
19440: ST_TO_ADDR
// if not tmp then
19441: LD_VAR 0 1
19445: NOT
19446: IFFALSE 19450
// exit ;
19448: GO 19476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19450: LD_VAR 0 1
19454: PUSH
19455: LD_INT 1
19457: PPUSH
19458: LD_VAR 0 1
19462: PPUSH
19463: CALL_OW 12
19467: ARRAY
19468: PPUSH
19469: LD_INT 1
19471: PPUSH
19472: CALL_OW 234
// end ;
19476: PPOPN 1
19478: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19479: LD_EXP 26
19483: PUSH
19484: LD_EXP 68
19488: AND
19489: IFFALSE 19630
19491: GO 19493
19493: DISABLE
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
19498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19499: LD_ADDR_VAR 0 3
19503: PUSH
19504: LD_INT 22
19506: PUSH
19507: LD_OWVAR 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: ST_TO_ADDR
// if not tmp then
19535: LD_VAR 0 3
19539: NOT
19540: IFFALSE 19544
// exit ;
19542: GO 19630
// un := tmp [ rand ( 1 , tmp ) ] ;
19544: LD_ADDR_VAR 0 2
19548: PUSH
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 1
19556: PPUSH
19557: LD_VAR 0 3
19561: PPUSH
19562: CALL_OW 12
19566: ARRAY
19567: ST_TO_ADDR
// if Crawls ( un ) then
19568: LD_VAR 0 2
19572: PPUSH
19573: CALL_OW 318
19577: IFFALSE 19588
// ComWalk ( un ) ;
19579: LD_VAR 0 2
19583: PPUSH
19584: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19588: LD_VAR 0 2
19592: PPUSH
19593: LD_INT 9
19595: PPUSH
19596: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19600: LD_INT 28
19602: PPUSH
19603: LD_OWVAR 2
19607: PPUSH
19608: LD_INT 2
19610: PPUSH
19611: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19615: LD_INT 29
19617: PPUSH
19618: LD_OWVAR 2
19622: PPUSH
19623: LD_INT 2
19625: PPUSH
19626: CALL_OW 322
// end ;
19630: PPOPN 3
19632: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19633: LD_EXP 26
19637: PUSH
19638: LD_EXP 69
19642: AND
19643: IFFALSE 19754
19645: GO 19647
19647: DISABLE
19648: LD_INT 0
19650: PPUSH
19651: PPUSH
19652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_OWVAR 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 25
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PPUSH
19684: CALL_OW 69
19688: ST_TO_ADDR
// if not tmp then
19689: LD_VAR 0 3
19693: NOT
19694: IFFALSE 19698
// exit ;
19696: GO 19754
// un := tmp [ rand ( 1 , tmp ) ] ;
19698: LD_ADDR_VAR 0 2
19702: PUSH
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 1
19710: PPUSH
19711: LD_VAR 0 3
19715: PPUSH
19716: CALL_OW 12
19720: ARRAY
19721: ST_TO_ADDR
// if Crawls ( un ) then
19722: LD_VAR 0 2
19726: PPUSH
19727: CALL_OW 318
19731: IFFALSE 19742
// ComWalk ( un ) ;
19733: LD_VAR 0 2
19737: PPUSH
19738: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19742: LD_VAR 0 2
19746: PPUSH
19747: LD_INT 8
19749: PPUSH
19750: CALL_OW 336
// end ;
19754: PPOPN 3
19756: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19757: LD_EXP 26
19761: PUSH
19762: LD_EXP 70
19766: AND
19767: IFFALSE 19911
19769: GO 19771
19771: DISABLE
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19776: LD_ADDR_VAR 0 2
19780: PUSH
19781: LD_INT 22
19783: PUSH
19784: LD_OWVAR 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 21
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: LD_INT 34
19808: PUSH
19809: LD_INT 12
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 34
19818: PUSH
19819: LD_INT 51
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 34
19828: PUSH
19829: LD_INT 32
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: PPUSH
19847: CALL_OW 69
19851: ST_TO_ADDR
// if not tmp then
19852: LD_VAR 0 2
19856: NOT
19857: IFFALSE 19861
// exit ;
19859: GO 19911
// for i in tmp do
19861: LD_ADDR_VAR 0 1
19865: PUSH
19866: LD_VAR 0 2
19870: PUSH
19871: FOR_IN
19872: IFFALSE 19909
// if GetCargo ( i , mat_artifact ) = 0 then
19874: LD_VAR 0 1
19878: PPUSH
19879: LD_INT 4
19881: PPUSH
19882: CALL_OW 289
19886: PUSH
19887: LD_INT 0
19889: EQUAL
19890: IFFALSE 19907
// SetCargo ( i , mat_siberit , 100 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_INT 3
19899: PPUSH
19900: LD_INT 100
19902: PPUSH
19903: CALL_OW 290
19907: GO 19871
19909: POP
19910: POP
// end ;
19911: PPOPN 2
19913: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19914: LD_EXP 26
19918: PUSH
19919: LD_EXP 71
19923: AND
19924: IFFALSE 20107
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_INT 22
19940: PUSH
19941: LD_OWVAR 2
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 69
19954: ST_TO_ADDR
// if not tmp then
19955: LD_VAR 0 2
19959: NOT
19960: IFFALSE 19964
// exit ;
19962: GO 20107
// for i := 1 to 2 do
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: DOUBLE
19970: LD_INT 1
19972: DEC
19973: ST_TO_ADDR
19974: LD_INT 2
19976: PUSH
19977: FOR_TO
19978: IFFALSE 20105
// begin uc_side := your_side ;
19980: LD_ADDR_OWVAR 20
19984: PUSH
19985: LD_OWVAR 2
19989: ST_TO_ADDR
// uc_nation := nation_american ;
19990: LD_ADDR_OWVAR 21
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
// vc_chassis := us_morphling ;
19998: LD_ADDR_OWVAR 37
20002: PUSH
20003: LD_INT 5
20005: ST_TO_ADDR
// vc_engine := engine_siberite ;
20006: LD_ADDR_OWVAR 39
20010: PUSH
20011: LD_INT 3
20013: ST_TO_ADDR
// vc_control := control_computer ;
20014: LD_ADDR_OWVAR 38
20018: PUSH
20019: LD_INT 3
20021: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20022: LD_ADDR_OWVAR 40
20026: PUSH
20027: LD_INT 10
20029: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20030: LD_VAR 0 2
20034: PUSH
20035: LD_INT 1
20037: ARRAY
20038: PPUSH
20039: CALL_OW 310
20043: NOT
20044: IFFALSE 20091
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20046: CALL_OW 45
20050: PPUSH
20051: LD_VAR 0 2
20055: PUSH
20056: LD_INT 1
20058: ARRAY
20059: PPUSH
20060: CALL_OW 250
20064: PPUSH
20065: LD_VAR 0 2
20069: PUSH
20070: LD_INT 1
20072: ARRAY
20073: PPUSH
20074: CALL_OW 251
20078: PPUSH
20079: LD_INT 12
20081: PPUSH
20082: LD_INT 1
20084: PPUSH
20085: CALL_OW 50
20089: GO 20103
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20091: CALL_OW 45
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 51
// end ;
20103: GO 19977
20105: POP
20106: POP
// end ;
20107: PPOPN 2
20109: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20110: LD_EXP 26
20114: PUSH
20115: LD_EXP 72
20119: AND
20120: IFFALSE 20342
20122: GO 20124
20124: DISABLE
20125: LD_INT 0
20127: PPUSH
20128: PPUSH
20129: PPUSH
20130: PPUSH
20131: PPUSH
20132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20133: LD_ADDR_VAR 0 6
20137: PUSH
20138: LD_INT 22
20140: PUSH
20141: LD_OWVAR 2
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 21
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 3
20162: PUSH
20163: LD_INT 23
20165: PUSH
20166: LD_INT 0
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: PPUSH
20182: CALL_OW 69
20186: ST_TO_ADDR
// if not tmp then
20187: LD_VAR 0 6
20191: NOT
20192: IFFALSE 20196
// exit ;
20194: GO 20342
// s1 := rand ( 1 , 4 ) ;
20196: LD_ADDR_VAR 0 2
20200: PUSH
20201: LD_INT 1
20203: PPUSH
20204: LD_INT 4
20206: PPUSH
20207: CALL_OW 12
20211: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20212: LD_ADDR_VAR 0 4
20216: PUSH
20217: LD_VAR 0 6
20221: PUSH
20222: LD_INT 1
20224: ARRAY
20225: PPUSH
20226: LD_VAR 0 2
20230: PPUSH
20231: CALL_OW 259
20235: ST_TO_ADDR
// if s1 = 1 then
20236: LD_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: EQUAL
20244: IFFALSE 20264
// s2 := rand ( 2 , 4 ) else
20246: LD_ADDR_VAR 0 3
20250: PUSH
20251: LD_INT 2
20253: PPUSH
20254: LD_INT 4
20256: PPUSH
20257: CALL_OW 12
20261: ST_TO_ADDR
20262: GO 20272
// s2 := 1 ;
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: LD_INT 1
20271: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20272: LD_ADDR_VAR 0 5
20276: PUSH
20277: LD_VAR 0 6
20281: PUSH
20282: LD_INT 1
20284: ARRAY
20285: PPUSH
20286: LD_VAR 0 3
20290: PPUSH
20291: CALL_OW 259
20295: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20296: LD_VAR 0 6
20300: PUSH
20301: LD_INT 1
20303: ARRAY
20304: PPUSH
20305: LD_VAR 0 2
20309: PPUSH
20310: LD_VAR 0 5
20314: PPUSH
20315: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20319: LD_VAR 0 6
20323: PUSH
20324: LD_INT 1
20326: ARRAY
20327: PPUSH
20328: LD_VAR 0 3
20332: PPUSH
20333: LD_VAR 0 4
20337: PPUSH
20338: CALL_OW 237
// end ;
20342: PPOPN 6
20344: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20345: LD_EXP 26
20349: PUSH
20350: LD_EXP 73
20354: AND
20355: IFFALSE 20434
20357: GO 20359
20359: DISABLE
20360: LD_INT 0
20362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20363: LD_ADDR_VAR 0 1
20367: PUSH
20368: LD_INT 22
20370: PUSH
20371: LD_OWVAR 2
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 30
20382: PUSH
20383: LD_INT 3
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PPUSH
20394: CALL_OW 69
20398: ST_TO_ADDR
// if not tmp then
20399: LD_VAR 0 1
20403: NOT
20404: IFFALSE 20408
// exit ;
20406: GO 20434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20408: LD_VAR 0 1
20412: PUSH
20413: LD_INT 1
20415: PPUSH
20416: LD_VAR 0 1
20420: PPUSH
20421: CALL_OW 12
20425: ARRAY
20426: PPUSH
20427: LD_INT 1
20429: PPUSH
20430: CALL_OW 234
// end ;
20434: PPOPN 1
20436: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20437: LD_EXP 26
20441: PUSH
20442: LD_EXP 74
20446: AND
20447: IFFALSE 20559
20449: GO 20451
20451: DISABLE
20452: LD_INT 0
20454: PPUSH
20455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20456: LD_ADDR_VAR 0 2
20460: PUSH
20461: LD_INT 22
20463: PUSH
20464: LD_OWVAR 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: LD_INT 30
20478: PUSH
20479: LD_INT 27
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 30
20488: PUSH
20489: LD_INT 26
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 30
20498: PUSH
20499: LD_INT 28
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PPUSH
20516: CALL_OW 69
20520: ST_TO_ADDR
// if not tmp then
20521: LD_VAR 0 2
20525: NOT
20526: IFFALSE 20530
// exit ;
20528: GO 20559
// for i in tmp do
20530: LD_ADDR_VAR 0 1
20534: PUSH
20535: LD_VAR 0 2
20539: PUSH
20540: FOR_IN
20541: IFFALSE 20557
// SetLives ( i , 1 ) ;
20543: LD_VAR 0 1
20547: PPUSH
20548: LD_INT 1
20550: PPUSH
20551: CALL_OW 234
20555: GO 20540
20557: POP
20558: POP
// end ;
20559: PPOPN 2
20561: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20562: LD_EXP 26
20566: PUSH
20567: LD_EXP 75
20571: AND
20572: IFFALSE 20859
20574: GO 20576
20576: DISABLE
20577: LD_INT 0
20579: PPUSH
20580: PPUSH
20581: PPUSH
// begin i := rand ( 1 , 7 ) ;
20582: LD_ADDR_VAR 0 1
20586: PUSH
20587: LD_INT 1
20589: PPUSH
20590: LD_INT 7
20592: PPUSH
20593: CALL_OW 12
20597: ST_TO_ADDR
// case i of 1 :
20598: LD_VAR 0 1
20602: PUSH
20603: LD_INT 1
20605: DOUBLE
20606: EQUAL
20607: IFTRUE 20611
20609: GO 20621
20611: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20612: LD_STRING earthquake(getX(game), 0, 32)
20614: PPUSH
20615: CALL_OW 559
20619: GO 20859
20621: LD_INT 2
20623: DOUBLE
20624: EQUAL
20625: IFTRUE 20629
20627: GO 20643
20629: POP
// begin ToLua ( displayStucuk(); ) ;
20630: LD_STRING displayStucuk();
20632: PPUSH
20633: CALL_OW 559
// ResetFog ;
20637: CALL_OW 335
// end ; 3 :
20641: GO 20859
20643: LD_INT 3
20645: DOUBLE
20646: EQUAL
20647: IFTRUE 20651
20649: GO 20755
20651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20652: LD_ADDR_VAR 0 2
20656: PUSH
20657: LD_INT 22
20659: PUSH
20660: LD_OWVAR 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 25
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 69
20687: ST_TO_ADDR
// if not tmp then
20688: LD_VAR 0 2
20692: NOT
20693: IFFALSE 20697
// exit ;
20695: GO 20859
// un := tmp [ rand ( 1 , tmp ) ] ;
20697: LD_ADDR_VAR 0 3
20701: PUSH
20702: LD_VAR 0 2
20706: PUSH
20707: LD_INT 1
20709: PPUSH
20710: LD_VAR 0 2
20714: PPUSH
20715: CALL_OW 12
20719: ARRAY
20720: ST_TO_ADDR
// if Crawls ( un ) then
20721: LD_VAR 0 3
20725: PPUSH
20726: CALL_OW 318
20730: IFFALSE 20741
// ComWalk ( un ) ;
20732: LD_VAR 0 3
20736: PPUSH
20737: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20741: LD_VAR 0 3
20745: PPUSH
20746: LD_INT 8
20748: PPUSH
20749: CALL_OW 336
// end ; 4 :
20753: GO 20859
20755: LD_INT 4
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20837
20763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20764: LD_ADDR_VAR 0 2
20768: PUSH
20769: LD_INT 22
20771: PUSH
20772: LD_OWVAR 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 30
20783: PUSH
20784: LD_INT 29
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PPUSH
20795: CALL_OW 69
20799: ST_TO_ADDR
// if not tmp then
20800: LD_VAR 0 2
20804: NOT
20805: IFFALSE 20809
// exit ;
20807: GO 20859
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 1
20816: ARRAY
20817: PPUSH
20818: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20822: LD_VAR 0 2
20826: PUSH
20827: LD_INT 1
20829: ARRAY
20830: PPUSH
20831: CALL_OW 65
// end ; 5 .. 7 :
20835: GO 20859
20837: LD_INT 5
20839: DOUBLE
20840: GREATEREQUAL
20841: IFFALSE 20849
20843: LD_INT 7
20845: DOUBLE
20846: LESSEQUAL
20847: IFTRUE 20851
20849: GO 20858
20851: POP
// StreamSibBomb ; end ;
20852: CALL 17096 0 0
20856: GO 20859
20858: POP
// end ;
20859: PPOPN 3
20861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20862: LD_EXP 26
20866: PUSH
20867: LD_EXP 76
20871: AND
20872: IFFALSE 21028
20874: GO 20876
20876: DISABLE
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
20881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20882: LD_ADDR_VAR 0 2
20886: PUSH
20887: LD_INT 81
20889: PUSH
20890: LD_OWVAR 2
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 21
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 21
20914: PUSH
20915: LD_INT 2
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PPUSH
20931: CALL_OW 69
20935: ST_TO_ADDR
// if not tmp then
20936: LD_VAR 0 2
20940: NOT
20941: IFFALSE 20945
// exit ;
20943: GO 21028
// p := 0 ;
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20953: LD_INT 35
20955: PPUSH
20956: CALL_OW 67
// p := p + 1 ;
20960: LD_ADDR_VAR 0 3
20964: PUSH
20965: LD_VAR 0 3
20969: PUSH
20970: LD_INT 1
20972: PLUS
20973: ST_TO_ADDR
// for i in tmp do
20974: LD_ADDR_VAR 0 1
20978: PUSH
20979: LD_VAR 0 2
20983: PUSH
20984: FOR_IN
20985: IFFALSE 21016
// if GetLives ( i ) < 1000 then
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 256
20996: PUSH
20997: LD_INT 1000
20999: LESS
21000: IFFALSE 21014
// SetLives ( i , 1000 ) ;
21002: LD_VAR 0 1
21006: PPUSH
21007: LD_INT 1000
21009: PPUSH
21010: CALL_OW 234
21014: GO 20984
21016: POP
21017: POP
// until p > 20 ;
21018: LD_VAR 0 3
21022: PUSH
21023: LD_INT 20
21025: GREATER
21026: IFFALSE 20953
// end ;
21028: PPOPN 3
21030: END
// every 0 0$1 trigger StreamModeActive and sTime do
21031: LD_EXP 26
21035: PUSH
21036: LD_EXP 77
21040: AND
21041: IFFALSE 21076
21043: GO 21045
21045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21046: LD_INT 28
21048: PPUSH
21049: LD_OWVAR 2
21053: PPUSH
21054: LD_INT 2
21056: PPUSH
21057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21061: LD_INT 30
21063: PPUSH
21064: LD_OWVAR 2
21068: PPUSH
21069: LD_INT 2
21071: PPUSH
21072: CALL_OW 322
// end ;
21076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21077: LD_EXP 26
21081: PUSH
21082: LD_EXP 78
21086: AND
21087: IFFALSE 21208
21089: GO 21091
21091: DISABLE
21092: LD_INT 0
21094: PPUSH
21095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21096: LD_ADDR_VAR 0 2
21100: PUSH
21101: LD_INT 22
21103: PUSH
21104: LD_OWVAR 2
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 21
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 3
21125: PUSH
21126: LD_INT 23
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: ST_TO_ADDR
// if not tmp then
21150: LD_VAR 0 2
21154: NOT
21155: IFFALSE 21159
// exit ;
21157: GO 21208
// for i in tmp do
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 2
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21206
// begin if Crawls ( i ) then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 318
21181: IFFALSE 21192
// ComWalk ( i ) ;
21183: LD_VAR 0 1
21187: PPUSH
21188: CALL_OW 138
// SetClass ( i , 2 ) ;
21192: LD_VAR 0 1
21196: PPUSH
21197: LD_INT 2
21199: PPUSH
21200: CALL_OW 336
// end ;
21204: GO 21169
21206: POP
21207: POP
// end ;
21208: PPOPN 2
21210: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21211: LD_EXP 26
21215: PUSH
21216: LD_EXP 79
21220: AND
21221: IFFALSE 21509
21223: GO 21225
21225: DISABLE
21226: LD_INT 0
21228: PPUSH
21229: PPUSH
21230: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21231: LD_OWVAR 2
21235: PPUSH
21236: LD_INT 9
21238: PPUSH
21239: LD_INT 1
21241: PPUSH
21242: LD_INT 1
21244: PPUSH
21245: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21249: LD_INT 9
21251: PPUSH
21252: LD_OWVAR 2
21256: PPUSH
21257: CALL_OW 343
// uc_side := 9 ;
21261: LD_ADDR_OWVAR 20
21265: PUSH
21266: LD_INT 9
21268: ST_TO_ADDR
// uc_nation := 2 ;
21269: LD_ADDR_OWVAR 21
21273: PUSH
21274: LD_INT 2
21276: ST_TO_ADDR
// hc_name := Dark Warrior ;
21277: LD_ADDR_OWVAR 26
21281: PUSH
21282: LD_STRING Dark Warrior
21284: ST_TO_ADDR
// hc_gallery :=  ;
21285: LD_ADDR_OWVAR 33
21289: PUSH
21290: LD_STRING 
21292: ST_TO_ADDR
// hc_noskilllimit := true ;
21293: LD_ADDR_OWVAR 76
21297: PUSH
21298: LD_INT 1
21300: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21301: LD_ADDR_OWVAR 31
21305: PUSH
21306: LD_INT 30
21308: PUSH
21309: LD_INT 30
21311: PUSH
21312: LD_INT 30
21314: PUSH
21315: LD_INT 30
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: ST_TO_ADDR
// un := CreateHuman ;
21324: LD_ADDR_VAR 0 3
21328: PUSH
21329: CALL_OW 44
21333: ST_TO_ADDR
// hc_noskilllimit := false ;
21334: LD_ADDR_OWVAR 76
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21342: LD_VAR 0 3
21346: PPUSH
21347: LD_INT 1
21349: PPUSH
21350: CALL_OW 51
// ToLua ( playRanger() ) ;
21354: LD_STRING playRanger()
21356: PPUSH
21357: CALL_OW 559
// p := 0 ;
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21369: LD_INT 35
21371: PPUSH
21372: CALL_OW 67
// p := p + 1 ;
21376: LD_ADDR_VAR 0 2
21380: PUSH
21381: LD_VAR 0 2
21385: PUSH
21386: LD_INT 1
21388: PLUS
21389: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21390: LD_VAR 0 3
21394: PPUSH
21395: CALL_OW 256
21399: PUSH
21400: LD_INT 1000
21402: LESS
21403: IFFALSE 21417
// SetLives ( un , 1000 ) ;
21405: LD_VAR 0 3
21409: PPUSH
21410: LD_INT 1000
21412: PPUSH
21413: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21417: LD_VAR 0 3
21421: PPUSH
21422: LD_INT 81
21424: PUSH
21425: LD_OWVAR 2
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 91
21436: PUSH
21437: LD_VAR 0 3
21441: PUSH
21442: LD_INT 30
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PPUSH
21459: LD_VAR 0 3
21463: PPUSH
21464: CALL_OW 74
21468: PPUSH
21469: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21473: LD_VAR 0 2
21477: PUSH
21478: LD_INT 80
21480: GREATER
21481: PUSH
21482: LD_VAR 0 3
21486: PPUSH
21487: CALL_OW 301
21491: OR
21492: IFFALSE 21369
// if un then
21494: LD_VAR 0 3
21498: IFFALSE 21509
// RemoveUnit ( un ) ;
21500: LD_VAR 0 3
21504: PPUSH
21505: CALL_OW 64
// end ;
21509: PPOPN 3
21511: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21512: LD_EXP 80
21516: IFFALSE 21632
21518: GO 21520
21520: DISABLE
21521: LD_INT 0
21523: PPUSH
21524: PPUSH
21525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 81
21533: PUSH
21534: LD_OWVAR 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 21
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PPUSH
21557: CALL_OW 69
21561: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21562: LD_STRING playComputer()
21564: PPUSH
21565: CALL_OW 559
// if not tmp then
21569: LD_VAR 0 2
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 21632
// for i in tmp do
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21630
// for j := 1 to 4 do
21591: LD_ADDR_VAR 0 3
21595: PUSH
21596: DOUBLE
21597: LD_INT 1
21599: DEC
21600: ST_TO_ADDR
21601: LD_INT 4
21603: PUSH
21604: FOR_TO
21605: IFFALSE 21626
// SetSkill ( i , j , 10 ) ;
21607: LD_VAR 0 1
21611: PPUSH
21612: LD_VAR 0 3
21616: PPUSH
21617: LD_INT 10
21619: PPUSH
21620: CALL_OW 237
21624: GO 21604
21626: POP
21627: POP
21628: GO 21588
21630: POP
21631: POP
// end ;
21632: PPOPN 3
21634: END
// every 0 0$1 trigger s30 do var i , tmp ;
21635: LD_EXP 81
21639: IFFALSE 21708
21641: GO 21643
21643: DISABLE
21644: LD_INT 0
21646: PPUSH
21647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21648: LD_ADDR_VAR 0 2
21652: PUSH
21653: LD_INT 22
21655: PUSH
21656: LD_OWVAR 2
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: ST_TO_ADDR
// if not tmp then
21670: LD_VAR 0 2
21674: NOT
21675: IFFALSE 21679
// exit ;
21677: GO 21708
// for i in tmp do
21679: LD_ADDR_VAR 0 1
21683: PUSH
21684: LD_VAR 0 2
21688: PUSH
21689: FOR_IN
21690: IFFALSE 21706
// SetLives ( i , 300 ) ;
21692: LD_VAR 0 1
21696: PPUSH
21697: LD_INT 300
21699: PPUSH
21700: CALL_OW 234
21704: GO 21689
21706: POP
21707: POP
// end ;
21708: PPOPN 2
21710: END
// every 0 0$1 trigger s60 do var i , tmp ;
21711: LD_EXP 82
21715: IFFALSE 21784
21717: GO 21719
21719: DISABLE
21720: LD_INT 0
21722: PPUSH
21723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21724: LD_ADDR_VAR 0 2
21728: PUSH
21729: LD_INT 22
21731: PUSH
21732: LD_OWVAR 2
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PPUSH
21741: CALL_OW 69
21745: ST_TO_ADDR
// if not tmp then
21746: LD_VAR 0 2
21750: NOT
21751: IFFALSE 21755
// exit ;
21753: GO 21784
// for i in tmp do
21755: LD_ADDR_VAR 0 1
21759: PUSH
21760: LD_VAR 0 2
21764: PUSH
21765: FOR_IN
21766: IFFALSE 21782
// SetLives ( i , 600 ) ;
21768: LD_VAR 0 1
21772: PPUSH
21773: LD_INT 600
21775: PPUSH
21776: CALL_OW 234
21780: GO 21765
21782: POP
21783: POP
// end ;
21784: PPOPN 2
21786: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21787: LD_INT 0
21789: PPUSH
// case cmd of 301 :
21790: LD_VAR 0 1
21794: PUSH
21795: LD_INT 301
21797: DOUBLE
21798: EQUAL
21799: IFTRUE 21803
21801: GO 21835
21803: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21804: LD_VAR 0 6
21808: PPUSH
21809: LD_VAR 0 7
21813: PPUSH
21814: LD_VAR 0 8
21818: PPUSH
21819: LD_VAR 0 4
21823: PPUSH
21824: LD_VAR 0 5
21828: PPUSH
21829: CALL 23036 0 5
21833: GO 21956
21835: LD_INT 302
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 21880
21843: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21844: LD_VAR 0 6
21848: PPUSH
21849: LD_VAR 0 7
21853: PPUSH
21854: LD_VAR 0 8
21858: PPUSH
21859: LD_VAR 0 9
21863: PPUSH
21864: LD_VAR 0 4
21868: PPUSH
21869: LD_VAR 0 5
21873: PPUSH
21874: CALL 23127 0 6
21878: GO 21956
21880: LD_INT 303
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 21925
21888: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21889: LD_VAR 0 6
21893: PPUSH
21894: LD_VAR 0 7
21898: PPUSH
21899: LD_VAR 0 8
21903: PPUSH
21904: LD_VAR 0 9
21908: PPUSH
21909: LD_VAR 0 4
21913: PPUSH
21914: LD_VAR 0 5
21918: PPUSH
21919: CALL 21961 0 6
21923: GO 21956
21925: LD_INT 304
21927: DOUBLE
21928: EQUAL
21929: IFTRUE 21933
21931: GO 21955
21933: POP
// hHackTeleport ( unit , x , y ) ; end ;
21934: LD_VAR 0 2
21938: PPUSH
21939: LD_VAR 0 4
21943: PPUSH
21944: LD_VAR 0 5
21948: PPUSH
21949: CALL 23720 0 3
21953: GO 21956
21955: POP
// end ;
21956: LD_VAR 0 12
21960: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21965: LD_VAR 0 1
21969: PUSH
21970: LD_INT 1
21972: LESS
21973: PUSH
21974: LD_VAR 0 1
21978: PUSH
21979: LD_INT 3
21981: GREATER
21982: OR
21983: PUSH
21984: LD_VAR 0 5
21988: PPUSH
21989: LD_VAR 0 6
21993: PPUSH
21994: CALL_OW 428
21998: OR
21999: IFFALSE 22003
// exit ;
22001: GO 22723
// uc_side := your_side ;
22003: LD_ADDR_OWVAR 20
22007: PUSH
22008: LD_OWVAR 2
22012: ST_TO_ADDR
// uc_nation := nation ;
22013: LD_ADDR_OWVAR 21
22017: PUSH
22018: LD_VAR 0 1
22022: ST_TO_ADDR
// bc_level = 1 ;
22023: LD_ADDR_OWVAR 43
22027: PUSH
22028: LD_INT 1
22030: ST_TO_ADDR
// case btype of 1 :
22031: LD_VAR 0 2
22035: PUSH
22036: LD_INT 1
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22055
22044: POP
// bc_type := b_depot ; 2 :
22045: LD_ADDR_OWVAR 42
22049: PUSH
22050: LD_INT 0
22052: ST_TO_ADDR
22053: GO 22667
22055: LD_INT 2
22057: DOUBLE
22058: EQUAL
22059: IFTRUE 22063
22061: GO 22074
22063: POP
// bc_type := b_warehouse ; 3 :
22064: LD_ADDR_OWVAR 42
22068: PUSH
22069: LD_INT 1
22071: ST_TO_ADDR
22072: GO 22667
22074: LD_INT 3
22076: DOUBLE
22077: EQUAL
22078: IFTRUE 22082
22080: GO 22093
22082: POP
// bc_type := b_lab ; 4 .. 9 :
22083: LD_ADDR_OWVAR 42
22087: PUSH
22088: LD_INT 6
22090: ST_TO_ADDR
22091: GO 22667
22093: LD_INT 4
22095: DOUBLE
22096: GREATEREQUAL
22097: IFFALSE 22105
22099: LD_INT 9
22101: DOUBLE
22102: LESSEQUAL
22103: IFTRUE 22107
22105: GO 22159
22107: POP
// begin bc_type := b_lab_half ;
22108: LD_ADDR_OWVAR 42
22112: PUSH
22113: LD_INT 7
22115: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22116: LD_ADDR_OWVAR 44
22120: PUSH
22121: LD_INT 10
22123: PUSH
22124: LD_INT 11
22126: PUSH
22127: LD_INT 12
22129: PUSH
22130: LD_INT 15
22132: PUSH
22133: LD_INT 14
22135: PUSH
22136: LD_INT 13
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: PUSH
22147: LD_VAR 0 2
22151: PUSH
22152: LD_INT 3
22154: MINUS
22155: ARRAY
22156: ST_TO_ADDR
// end ; 10 .. 13 :
22157: GO 22667
22159: LD_INT 10
22161: DOUBLE
22162: GREATEREQUAL
22163: IFFALSE 22171
22165: LD_INT 13
22167: DOUBLE
22168: LESSEQUAL
22169: IFTRUE 22173
22171: GO 22250
22173: POP
// begin bc_type := b_lab_full ;
22174: LD_ADDR_OWVAR 42
22178: PUSH
22179: LD_INT 8
22181: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22182: LD_ADDR_OWVAR 44
22186: PUSH
22187: LD_INT 10
22189: PUSH
22190: LD_INT 12
22192: PUSH
22193: LD_INT 14
22195: PUSH
22196: LD_INT 13
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: PUSH
22205: LD_VAR 0 2
22209: PUSH
22210: LD_INT 9
22212: MINUS
22213: ARRAY
22214: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22215: LD_ADDR_OWVAR 45
22219: PUSH
22220: LD_INT 11
22222: PUSH
22223: LD_INT 15
22225: PUSH
22226: LD_INT 12
22228: PUSH
22229: LD_INT 15
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: PUSH
22238: LD_VAR 0 2
22242: PUSH
22243: LD_INT 9
22245: MINUS
22246: ARRAY
22247: ST_TO_ADDR
// end ; 14 :
22248: GO 22667
22250: LD_INT 14
22252: DOUBLE
22253: EQUAL
22254: IFTRUE 22258
22256: GO 22269
22258: POP
// bc_type := b_workshop ; 15 :
22259: LD_ADDR_OWVAR 42
22263: PUSH
22264: LD_INT 2
22266: ST_TO_ADDR
22267: GO 22667
22269: LD_INT 15
22271: DOUBLE
22272: EQUAL
22273: IFTRUE 22277
22275: GO 22288
22277: POP
// bc_type := b_factory ; 16 :
22278: LD_ADDR_OWVAR 42
22282: PUSH
22283: LD_INT 3
22285: ST_TO_ADDR
22286: GO 22667
22288: LD_INT 16
22290: DOUBLE
22291: EQUAL
22292: IFTRUE 22296
22294: GO 22307
22296: POP
// bc_type := b_ext_gun ; 17 :
22297: LD_ADDR_OWVAR 42
22301: PUSH
22302: LD_INT 17
22304: ST_TO_ADDR
22305: GO 22667
22307: LD_INT 17
22309: DOUBLE
22310: EQUAL
22311: IFTRUE 22315
22313: GO 22343
22315: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22316: LD_ADDR_OWVAR 42
22320: PUSH
22321: LD_INT 19
22323: PUSH
22324: LD_INT 23
22326: PUSH
22327: LD_INT 19
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: PUSH
22335: LD_VAR 0 1
22339: ARRAY
22340: ST_TO_ADDR
22341: GO 22667
22343: LD_INT 18
22345: DOUBLE
22346: EQUAL
22347: IFTRUE 22351
22349: GO 22362
22351: POP
// bc_type := b_ext_radar ; 19 :
22352: LD_ADDR_OWVAR 42
22356: PUSH
22357: LD_INT 20
22359: ST_TO_ADDR
22360: GO 22667
22362: LD_INT 19
22364: DOUBLE
22365: EQUAL
22366: IFTRUE 22370
22368: GO 22381
22370: POP
// bc_type := b_ext_radio ; 20 :
22371: LD_ADDR_OWVAR 42
22375: PUSH
22376: LD_INT 22
22378: ST_TO_ADDR
22379: GO 22667
22381: LD_INT 20
22383: DOUBLE
22384: EQUAL
22385: IFTRUE 22389
22387: GO 22400
22389: POP
// bc_type := b_ext_siberium ; 21 :
22390: LD_ADDR_OWVAR 42
22394: PUSH
22395: LD_INT 21
22397: ST_TO_ADDR
22398: GO 22667
22400: LD_INT 21
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22419
22408: POP
// bc_type := b_ext_computer ; 22 :
22409: LD_ADDR_OWVAR 42
22413: PUSH
22414: LD_INT 24
22416: ST_TO_ADDR
22417: GO 22667
22419: LD_INT 22
22421: DOUBLE
22422: EQUAL
22423: IFTRUE 22427
22425: GO 22438
22427: POP
// bc_type := b_ext_track ; 23 :
22428: LD_ADDR_OWVAR 42
22432: PUSH
22433: LD_INT 16
22435: ST_TO_ADDR
22436: GO 22667
22438: LD_INT 23
22440: DOUBLE
22441: EQUAL
22442: IFTRUE 22446
22444: GO 22457
22446: POP
// bc_type := b_ext_laser ; 24 :
22447: LD_ADDR_OWVAR 42
22451: PUSH
22452: LD_INT 25
22454: ST_TO_ADDR
22455: GO 22667
22457: LD_INT 24
22459: DOUBLE
22460: EQUAL
22461: IFTRUE 22465
22463: GO 22476
22465: POP
// bc_type := b_control_tower ; 25 :
22466: LD_ADDR_OWVAR 42
22470: PUSH
22471: LD_INT 36
22473: ST_TO_ADDR
22474: GO 22667
22476: LD_INT 25
22478: DOUBLE
22479: EQUAL
22480: IFTRUE 22484
22482: GO 22495
22484: POP
// bc_type := b_breastwork ; 26 :
22485: LD_ADDR_OWVAR 42
22489: PUSH
22490: LD_INT 31
22492: ST_TO_ADDR
22493: GO 22667
22495: LD_INT 26
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22514
22503: POP
// bc_type := b_bunker ; 27 :
22504: LD_ADDR_OWVAR 42
22508: PUSH
22509: LD_INT 32
22511: ST_TO_ADDR
22512: GO 22667
22514: LD_INT 27
22516: DOUBLE
22517: EQUAL
22518: IFTRUE 22522
22520: GO 22533
22522: POP
// bc_type := b_turret ; 28 :
22523: LD_ADDR_OWVAR 42
22527: PUSH
22528: LD_INT 33
22530: ST_TO_ADDR
22531: GO 22667
22533: LD_INT 28
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22552
22541: POP
// bc_type := b_armoury ; 29 :
22542: LD_ADDR_OWVAR 42
22546: PUSH
22547: LD_INT 4
22549: ST_TO_ADDR
22550: GO 22667
22552: LD_INT 29
22554: DOUBLE
22555: EQUAL
22556: IFTRUE 22560
22558: GO 22571
22560: POP
// bc_type := b_barracks ; 30 :
22561: LD_ADDR_OWVAR 42
22565: PUSH
22566: LD_INT 5
22568: ST_TO_ADDR
22569: GO 22667
22571: LD_INT 30
22573: DOUBLE
22574: EQUAL
22575: IFTRUE 22579
22577: GO 22590
22579: POP
// bc_type := b_solar_power ; 31 :
22580: LD_ADDR_OWVAR 42
22584: PUSH
22585: LD_INT 27
22587: ST_TO_ADDR
22588: GO 22667
22590: LD_INT 31
22592: DOUBLE
22593: EQUAL
22594: IFTRUE 22598
22596: GO 22609
22598: POP
// bc_type := b_oil_power ; 32 :
22599: LD_ADDR_OWVAR 42
22603: PUSH
22604: LD_INT 26
22606: ST_TO_ADDR
22607: GO 22667
22609: LD_INT 32
22611: DOUBLE
22612: EQUAL
22613: IFTRUE 22617
22615: GO 22628
22617: POP
// bc_type := b_siberite_power ; 33 :
22618: LD_ADDR_OWVAR 42
22622: PUSH
22623: LD_INT 28
22625: ST_TO_ADDR
22626: GO 22667
22628: LD_INT 33
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22647
22636: POP
// bc_type := b_oil_mine ; 34 :
22637: LD_ADDR_OWVAR 42
22641: PUSH
22642: LD_INT 29
22644: ST_TO_ADDR
22645: GO 22667
22647: LD_INT 34
22649: DOUBLE
22650: EQUAL
22651: IFTRUE 22655
22653: GO 22666
22655: POP
// bc_type := b_siberite_mine ; end ;
22656: LD_ADDR_OWVAR 42
22660: PUSH
22661: LD_INT 30
22663: ST_TO_ADDR
22664: GO 22667
22666: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22667: LD_ADDR_VAR 0 8
22671: PUSH
22672: LD_VAR 0 5
22676: PPUSH
22677: LD_VAR 0 6
22681: PPUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 47
22691: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22692: LD_OWVAR 42
22696: PUSH
22697: LD_INT 32
22699: PUSH
22700: LD_INT 33
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: IN
22707: IFFALSE 22723
// PlaceWeaponTurret ( b , weapon ) ;
22709: LD_VAR 0 8
22713: PPUSH
22714: LD_VAR 0 4
22718: PPUSH
22719: CALL_OW 431
// end ;
22723: LD_VAR 0 7
22727: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22728: LD_INT 0
22730: PPUSH
22731: PPUSH
22732: PPUSH
22733: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22734: LD_ADDR_VAR 0 4
22738: PUSH
22739: LD_INT 22
22741: PUSH
22742: LD_OWVAR 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: LD_INT 30
22756: PUSH
22757: LD_INT 0
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 30
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PPUSH
22783: CALL_OW 69
22787: ST_TO_ADDR
// if not tmp then
22788: LD_VAR 0 4
22792: NOT
22793: IFFALSE 22797
// exit ;
22795: GO 22856
// for i in tmp do
22797: LD_ADDR_VAR 0 2
22801: PUSH
22802: LD_VAR 0 4
22806: PUSH
22807: FOR_IN
22808: IFFALSE 22854
// for j = 1 to 3 do
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: DOUBLE
22816: LD_INT 1
22818: DEC
22819: ST_TO_ADDR
22820: LD_INT 3
22822: PUSH
22823: FOR_TO
22824: IFFALSE 22850
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22826: LD_VAR 0 2
22830: PPUSH
22831: CALL_OW 274
22835: PPUSH
22836: LD_VAR 0 3
22840: PPUSH
22841: LD_INT 99999
22843: PPUSH
22844: CALL_OW 277
22848: GO 22823
22850: POP
22851: POP
22852: GO 22807
22854: POP
22855: POP
// end ;
22856: LD_VAR 0 1
22860: RET
// export function hHackSetLevel10 ; var i , j ; begin
22861: LD_INT 0
22863: PPUSH
22864: PPUSH
22865: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22866: LD_ADDR_VAR 0 2
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PPUSH
22881: CALL_OW 69
22885: PUSH
22886: FOR_IN
22887: IFFALSE 22939
// if IsSelected ( i ) then
22889: LD_VAR 0 2
22893: PPUSH
22894: CALL_OW 306
22898: IFFALSE 22937
// begin for j := 1 to 4 do
22900: LD_ADDR_VAR 0 3
22904: PUSH
22905: DOUBLE
22906: LD_INT 1
22908: DEC
22909: ST_TO_ADDR
22910: LD_INT 4
22912: PUSH
22913: FOR_TO
22914: IFFALSE 22935
// SetSkill ( i , j , 10 ) ;
22916: LD_VAR 0 2
22920: PPUSH
22921: LD_VAR 0 3
22925: PPUSH
22926: LD_INT 10
22928: PPUSH
22929: CALL_OW 237
22933: GO 22913
22935: POP
22936: POP
// end ;
22937: GO 22886
22939: POP
22940: POP
// end ;
22941: LD_VAR 0 1
22945: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22946: LD_INT 0
22948: PPUSH
22949: PPUSH
22950: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22951: LD_ADDR_VAR 0 2
22955: PUSH
22956: LD_INT 22
22958: PUSH
22959: LD_OWVAR 2
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 21
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PPUSH
22982: CALL_OW 69
22986: PUSH
22987: FOR_IN
22988: IFFALSE 23029
// begin for j := 1 to 4 do
22990: LD_ADDR_VAR 0 3
22994: PUSH
22995: DOUBLE
22996: LD_INT 1
22998: DEC
22999: ST_TO_ADDR
23000: LD_INT 4
23002: PUSH
23003: FOR_TO
23004: IFFALSE 23025
// SetSkill ( i , j , 10 ) ;
23006: LD_VAR 0 2
23010: PPUSH
23011: LD_VAR 0 3
23015: PPUSH
23016: LD_INT 10
23018: PPUSH
23019: CALL_OW 237
23023: GO 23003
23025: POP
23026: POP
// end ;
23027: GO 22987
23029: POP
23030: POP
// end ;
23031: LD_VAR 0 1
23035: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23036: LD_INT 0
23038: PPUSH
// uc_side := your_side ;
23039: LD_ADDR_OWVAR 20
23043: PUSH
23044: LD_OWVAR 2
23048: ST_TO_ADDR
// uc_nation := nation ;
23049: LD_ADDR_OWVAR 21
23053: PUSH
23054: LD_VAR 0 1
23058: ST_TO_ADDR
// InitHc ;
23059: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23063: LD_INT 0
23065: PPUSH
23066: LD_VAR 0 2
23070: PPUSH
23071: LD_VAR 0 3
23075: PPUSH
23076: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23080: LD_VAR 0 4
23084: PPUSH
23085: LD_VAR 0 5
23089: PPUSH
23090: CALL_OW 428
23094: PUSH
23095: LD_INT 0
23097: EQUAL
23098: IFFALSE 23122
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23100: CALL_OW 44
23104: PPUSH
23105: LD_VAR 0 4
23109: PPUSH
23110: LD_VAR 0 5
23114: PPUSH
23115: LD_INT 1
23117: PPUSH
23118: CALL_OW 48
// end ;
23122: LD_VAR 0 6
23126: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23127: LD_INT 0
23129: PPUSH
23130: PPUSH
// uc_side := your_side ;
23131: LD_ADDR_OWVAR 20
23135: PUSH
23136: LD_OWVAR 2
23140: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 4
23157: PUSH
23158: LD_INT 5
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: IN
23168: IFFALSE 23180
// uc_nation := nation_american else
23170: LD_ADDR_OWVAR 21
23174: PUSH
23175: LD_INT 1
23177: ST_TO_ADDR
23178: GO 23223
// if chassis in [ 11 , 12 , 13 , 14 ] then
23180: LD_VAR 0 1
23184: PUSH
23185: LD_INT 11
23187: PUSH
23188: LD_INT 12
23190: PUSH
23191: LD_INT 13
23193: PUSH
23194: LD_INT 14
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: IN
23203: IFFALSE 23215
// uc_nation := nation_arabian else
23205: LD_ADDR_OWVAR 21
23209: PUSH
23210: LD_INT 2
23212: ST_TO_ADDR
23213: GO 23223
// uc_nation := nation_russian ;
23215: LD_ADDR_OWVAR 21
23219: PUSH
23220: LD_INT 3
23222: ST_TO_ADDR
// vc_chassis := chassis ;
23223: LD_ADDR_OWVAR 37
23227: PUSH
23228: LD_VAR 0 1
23232: ST_TO_ADDR
// vc_engine := engine ;
23233: LD_ADDR_OWVAR 39
23237: PUSH
23238: LD_VAR 0 2
23242: ST_TO_ADDR
// vc_control := control ;
23243: LD_ADDR_OWVAR 38
23247: PUSH
23248: LD_VAR 0 3
23252: ST_TO_ADDR
// vc_weapon := weapon ;
23253: LD_ADDR_OWVAR 40
23257: PUSH
23258: LD_VAR 0 4
23262: ST_TO_ADDR
// un := CreateVehicle ;
23263: LD_ADDR_VAR 0 8
23267: PUSH
23268: CALL_OW 45
23272: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23273: LD_VAR 0 8
23277: PPUSH
23278: LD_INT 0
23280: PPUSH
23281: LD_INT 5
23283: PPUSH
23284: CALL_OW 12
23288: PPUSH
23289: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23293: LD_VAR 0 8
23297: PPUSH
23298: LD_VAR 0 5
23302: PPUSH
23303: LD_VAR 0 6
23307: PPUSH
23308: LD_INT 1
23310: PPUSH
23311: CALL_OW 48
// end ;
23315: LD_VAR 0 7
23319: RET
// export hInvincible ; every 1 do
23320: GO 23322
23322: DISABLE
// hInvincible := [ ] ;
23323: LD_ADDR_EXP 83
23327: PUSH
23328: EMPTY
23329: ST_TO_ADDR
23330: END
// every 10 do var i ;
23331: GO 23333
23333: DISABLE
23334: LD_INT 0
23336: PPUSH
// begin enable ;
23337: ENABLE
// if not hInvincible then
23338: LD_EXP 83
23342: NOT
23343: IFFALSE 23347
// exit ;
23345: GO 23391
// for i in hInvincible do
23347: LD_ADDR_VAR 0 1
23351: PUSH
23352: LD_EXP 83
23356: PUSH
23357: FOR_IN
23358: IFFALSE 23389
// if GetLives ( i ) < 1000 then
23360: LD_VAR 0 1
23364: PPUSH
23365: CALL_OW 256
23369: PUSH
23370: LD_INT 1000
23372: LESS
23373: IFFALSE 23387
// SetLives ( i , 1000 ) ;
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_INT 1000
23382: PPUSH
23383: CALL_OW 234
23387: GO 23357
23389: POP
23390: POP
// end ;
23391: PPOPN 1
23393: END
// export function hHackInvincible ; var i ; begin
23394: LD_INT 0
23396: PPUSH
23397: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23398: LD_ADDR_VAR 0 2
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: LD_INT 21
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 21
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: LIST
23430: PPUSH
23431: CALL_OW 69
23435: PUSH
23436: FOR_IN
23437: IFFALSE 23498
// if IsSelected ( i ) then
23439: LD_VAR 0 2
23443: PPUSH
23444: CALL_OW 306
23448: IFFALSE 23496
// begin if i in hInvincible then
23450: LD_VAR 0 2
23454: PUSH
23455: LD_EXP 83
23459: IN
23460: IFFALSE 23480
// hInvincible := hInvincible diff i else
23462: LD_ADDR_EXP 83
23466: PUSH
23467: LD_EXP 83
23471: PUSH
23472: LD_VAR 0 2
23476: DIFF
23477: ST_TO_ADDR
23478: GO 23496
// hInvincible := hInvincible union i ;
23480: LD_ADDR_EXP 83
23484: PUSH
23485: LD_EXP 83
23489: PUSH
23490: LD_VAR 0 2
23494: UNION
23495: ST_TO_ADDR
// end ;
23496: GO 23436
23498: POP
23499: POP
// end ;
23500: LD_VAR 0 1
23504: RET
// export function hHackInvisible ; var i , j ; begin
23505: LD_INT 0
23507: PPUSH
23508: PPUSH
23509: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23510: LD_ADDR_VAR 0 2
23514: PUSH
23515: LD_INT 21
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PPUSH
23525: CALL_OW 69
23529: PUSH
23530: FOR_IN
23531: IFFALSE 23555
// if IsSelected ( i ) then
23533: LD_VAR 0 2
23537: PPUSH
23538: CALL_OW 306
23542: IFFALSE 23553
// ComForceInvisible ( i ) ;
23544: LD_VAR 0 2
23548: PPUSH
23549: CALL_OW 496
23553: GO 23530
23555: POP
23556: POP
// end ;
23557: LD_VAR 0 1
23561: RET
// export function hHackChangeYourSide ; begin
23562: LD_INT 0
23564: PPUSH
// if your_side = 8 then
23565: LD_OWVAR 2
23569: PUSH
23570: LD_INT 8
23572: EQUAL
23573: IFFALSE 23585
// your_side := 0 else
23575: LD_ADDR_OWVAR 2
23579: PUSH
23580: LD_INT 0
23582: ST_TO_ADDR
23583: GO 23599
// your_side := your_side + 1 ;
23585: LD_ADDR_OWVAR 2
23589: PUSH
23590: LD_OWVAR 2
23594: PUSH
23595: LD_INT 1
23597: PLUS
23598: ST_TO_ADDR
// end ;
23599: LD_VAR 0 1
23603: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23604: LD_INT 0
23606: PPUSH
23607: PPUSH
23608: PPUSH
// for i in all_units do
23609: LD_ADDR_VAR 0 2
23613: PUSH
23614: LD_OWVAR 3
23618: PUSH
23619: FOR_IN
23620: IFFALSE 23698
// if IsSelected ( i ) then
23622: LD_VAR 0 2
23626: PPUSH
23627: CALL_OW 306
23631: IFFALSE 23696
// begin j := GetSide ( i ) ;
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: LD_VAR 0 2
23642: PPUSH
23643: CALL_OW 255
23647: ST_TO_ADDR
// if j = 8 then
23648: LD_VAR 0 3
23652: PUSH
23653: LD_INT 8
23655: EQUAL
23656: IFFALSE 23668
// j := 0 else
23658: LD_ADDR_VAR 0 3
23662: PUSH
23663: LD_INT 0
23665: ST_TO_ADDR
23666: GO 23682
// j := j + 1 ;
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_VAR 0 3
23677: PUSH
23678: LD_INT 1
23680: PLUS
23681: ST_TO_ADDR
// SetSide ( i , j ) ;
23682: LD_VAR 0 2
23686: PPUSH
23687: LD_VAR 0 3
23691: PPUSH
23692: CALL_OW 235
// end ;
23696: GO 23619
23698: POP
23699: POP
// end ;
23700: LD_VAR 0 1
23704: RET
// export function hHackFog ; begin
23705: LD_INT 0
23707: PPUSH
// FogOff ( true ) ;
23708: LD_INT 1
23710: PPUSH
23711: CALL_OW 344
// end ;
23715: LD_VAR 0 1
23719: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23720: LD_INT 0
23722: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23723: LD_VAR 0 1
23727: PPUSH
23728: LD_VAR 0 2
23732: PPUSH
23733: LD_VAR 0 3
23737: PPUSH
23738: LD_INT 1
23740: PPUSH
23741: LD_INT 1
23743: PPUSH
23744: CALL_OW 483
// CenterOnXY ( x , y ) ;
23748: LD_VAR 0 2
23752: PPUSH
23753: LD_VAR 0 3
23757: PPUSH
23758: CALL_OW 84
// end ; end_of_file end_of_file
23762: LD_VAR 0 4
23766: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23767: LD_INT 0
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23773: LD_VAR 0 1
23777: PPUSH
23778: CALL_OW 264
23782: PUSH
23783: LD_EXP 100
23787: EQUAL
23788: IFFALSE 23860
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23790: LD_INT 68
23792: PPUSH
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 255
23802: PPUSH
23803: CALL_OW 321
23807: PUSH
23808: LD_INT 2
23810: EQUAL
23811: IFFALSE 23823
// eff := 70 else
23813: LD_ADDR_VAR 0 4
23817: PUSH
23818: LD_INT 70
23820: ST_TO_ADDR
23821: GO 23831
// eff := 30 ;
23823: LD_ADDR_VAR 0 4
23827: PUSH
23828: LD_INT 30
23830: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23831: LD_VAR 0 1
23835: PPUSH
23836: CALL_OW 250
23840: PPUSH
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL_OW 251
23850: PPUSH
23851: LD_VAR 0 4
23855: PPUSH
23856: CALL_OW 495
// end ; end ;
23860: LD_VAR 0 2
23864: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23865: LD_INT 0
23867: PPUSH
// end ;
23868: LD_VAR 0 4
23872: RET
// export function SOS_Command ( cmd ) ; begin
23873: LD_INT 0
23875: PPUSH
// end ;
23876: LD_VAR 0 2
23880: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23881: LD_INT 0
23883: PPUSH
// end ;
23884: LD_VAR 0 6
23888: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23889: LD_INT 0
23891: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23892: LD_VAR 0 1
23896: PUSH
23897: LD_INT 250
23899: EQUAL
23900: PUSH
23901: LD_VAR 0 2
23905: PPUSH
23906: CALL_OW 264
23910: PUSH
23911: LD_EXP 103
23915: EQUAL
23916: AND
23917: IFFALSE 23938
// MinerPlaceMine ( unit , x , y ) ;
23919: LD_VAR 0 2
23923: PPUSH
23924: LD_VAR 0 4
23928: PPUSH
23929: LD_VAR 0 5
23933: PPUSH
23934: CALL 26287 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23938: LD_VAR 0 1
23942: PUSH
23943: LD_INT 251
23945: EQUAL
23946: PUSH
23947: LD_VAR 0 2
23951: PPUSH
23952: CALL_OW 264
23956: PUSH
23957: LD_EXP 103
23961: EQUAL
23962: AND
23963: IFFALSE 23984
// MinerDetonateMine ( unit , x , y ) ;
23965: LD_VAR 0 2
23969: PPUSH
23970: LD_VAR 0 4
23974: PPUSH
23975: LD_VAR 0 5
23979: PPUSH
23980: CALL 26564 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23984: LD_VAR 0 1
23988: PUSH
23989: LD_INT 252
23991: EQUAL
23992: PUSH
23993: LD_VAR 0 2
23997: PPUSH
23998: CALL_OW 264
24002: PUSH
24003: LD_EXP 103
24007: EQUAL
24008: AND
24009: IFFALSE 24030
// MinerCreateMinefield ( unit , x , y ) ;
24011: LD_VAR 0 2
24015: PPUSH
24016: LD_VAR 0 4
24020: PPUSH
24021: LD_VAR 0 5
24025: PPUSH
24026: CALL 26981 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24030: LD_VAR 0 1
24034: PUSH
24035: LD_INT 253
24037: EQUAL
24038: PUSH
24039: LD_VAR 0 2
24043: PPUSH
24044: CALL_OW 257
24048: PUSH
24049: LD_INT 5
24051: EQUAL
24052: AND
24053: IFFALSE 24074
// ComBinocular ( unit , x , y ) ;
24055: LD_VAR 0 2
24059: PPUSH
24060: LD_VAR 0 4
24064: PPUSH
24065: LD_VAR 0 5
24069: PPUSH
24070: CALL 27352 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24074: LD_VAR 0 1
24078: PUSH
24079: LD_INT 254
24081: EQUAL
24082: PUSH
24083: LD_VAR 0 2
24087: PPUSH
24088: CALL_OW 264
24092: PUSH
24093: LD_EXP 98
24097: EQUAL
24098: AND
24099: PUSH
24100: LD_VAR 0 3
24104: PPUSH
24105: CALL_OW 263
24109: PUSH
24110: LD_INT 3
24112: EQUAL
24113: AND
24114: IFFALSE 24130
// HackDestroyVehicle ( unit , selectedUnit ) ;
24116: LD_VAR 0 2
24120: PPUSH
24121: LD_VAR 0 3
24125: PPUSH
24126: CALL 25647 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24130: LD_VAR 0 1
24134: PUSH
24135: LD_INT 255
24137: EQUAL
24138: PUSH
24139: LD_VAR 0 2
24143: PPUSH
24144: CALL_OW 264
24148: PUSH
24149: LD_INT 14
24151: PUSH
24152: LD_INT 53
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: IN
24159: AND
24160: PUSH
24161: LD_VAR 0 4
24165: PPUSH
24166: LD_VAR 0 5
24170: PPUSH
24171: CALL_OW 488
24175: AND
24176: IFFALSE 24200
// CutTreeXYR ( unit , x , y , 12 ) ;
24178: LD_VAR 0 2
24182: PPUSH
24183: LD_VAR 0 4
24187: PPUSH
24188: LD_VAR 0 5
24192: PPUSH
24193: LD_INT 12
24195: PPUSH
24196: CALL 24213 0 4
// end ;
24200: LD_VAR 0 6
24204: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24205: LD_INT 0
24207: PPUSH
// end ;
24208: LD_VAR 0 4
24212: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
24223: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24224: LD_VAR 0 1
24228: NOT
24229: PUSH
24230: LD_VAR 0 2
24234: PPUSH
24235: LD_VAR 0 3
24239: PPUSH
24240: CALL_OW 488
24244: NOT
24245: OR
24246: PUSH
24247: LD_VAR 0 4
24251: NOT
24252: OR
24253: IFFALSE 24257
// exit ;
24255: GO 24597
// list := [ ] ;
24257: LD_ADDR_VAR 0 13
24261: PUSH
24262: EMPTY
24263: ST_TO_ADDR
// if x - r < 0 then
24264: LD_VAR 0 2
24268: PUSH
24269: LD_VAR 0 4
24273: MINUS
24274: PUSH
24275: LD_INT 0
24277: LESS
24278: IFFALSE 24290
// min_x := 0 else
24280: LD_ADDR_VAR 0 7
24284: PUSH
24285: LD_INT 0
24287: ST_TO_ADDR
24288: GO 24306
// min_x := x - r ;
24290: LD_ADDR_VAR 0 7
24294: PUSH
24295: LD_VAR 0 2
24299: PUSH
24300: LD_VAR 0 4
24304: MINUS
24305: ST_TO_ADDR
// if y - r < 0 then
24306: LD_VAR 0 3
24310: PUSH
24311: LD_VAR 0 4
24315: MINUS
24316: PUSH
24317: LD_INT 0
24319: LESS
24320: IFFALSE 24332
// min_y := 0 else
24322: LD_ADDR_VAR 0 8
24326: PUSH
24327: LD_INT 0
24329: ST_TO_ADDR
24330: GO 24348
// min_y := y - r ;
24332: LD_ADDR_VAR 0 8
24336: PUSH
24337: LD_VAR 0 3
24341: PUSH
24342: LD_VAR 0 4
24346: MINUS
24347: ST_TO_ADDR
// max_x := x + r ;
24348: LD_ADDR_VAR 0 9
24352: PUSH
24353: LD_VAR 0 2
24357: PUSH
24358: LD_VAR 0 4
24362: PLUS
24363: ST_TO_ADDR
// max_y := y + r ;
24364: LD_ADDR_VAR 0 10
24368: PUSH
24369: LD_VAR 0 3
24373: PUSH
24374: LD_VAR 0 4
24378: PLUS
24379: ST_TO_ADDR
// for _x = min_x to max_x do
24380: LD_ADDR_VAR 0 11
24384: PUSH
24385: DOUBLE
24386: LD_VAR 0 7
24390: DEC
24391: ST_TO_ADDR
24392: LD_VAR 0 9
24396: PUSH
24397: FOR_TO
24398: IFFALSE 24515
// for _y = min_y to max_y do
24400: LD_ADDR_VAR 0 12
24404: PUSH
24405: DOUBLE
24406: LD_VAR 0 8
24410: DEC
24411: ST_TO_ADDR
24412: LD_VAR 0 10
24416: PUSH
24417: FOR_TO
24418: IFFALSE 24511
// begin if not ValidHex ( _x , _y ) then
24420: LD_VAR 0 11
24424: PPUSH
24425: LD_VAR 0 12
24429: PPUSH
24430: CALL_OW 488
24434: NOT
24435: IFFALSE 24439
// continue ;
24437: GO 24417
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24439: LD_VAR 0 11
24443: PPUSH
24444: LD_VAR 0 12
24448: PPUSH
24449: CALL_OW 351
24453: PUSH
24454: LD_VAR 0 11
24458: PPUSH
24459: LD_VAR 0 12
24463: PPUSH
24464: CALL_OW 554
24468: AND
24469: IFFALSE 24509
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24471: LD_ADDR_VAR 0 13
24475: PUSH
24476: LD_VAR 0 13
24480: PPUSH
24481: LD_VAR 0 13
24485: PUSH
24486: LD_INT 1
24488: PLUS
24489: PPUSH
24490: LD_VAR 0 11
24494: PUSH
24495: LD_VAR 0 12
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PPUSH
24504: CALL_OW 2
24508: ST_TO_ADDR
// end ;
24509: GO 24417
24511: POP
24512: POP
24513: GO 24397
24515: POP
24516: POP
// if not list then
24517: LD_VAR 0 13
24521: NOT
24522: IFFALSE 24526
// exit ;
24524: GO 24597
// for i in list do
24526: LD_ADDR_VAR 0 6
24530: PUSH
24531: LD_VAR 0 13
24535: PUSH
24536: FOR_IN
24537: IFFALSE 24595
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24539: LD_VAR 0 1
24543: PPUSH
24544: LD_STRING M
24546: PUSH
24547: LD_VAR 0 6
24551: PUSH
24552: LD_INT 1
24554: ARRAY
24555: PUSH
24556: LD_VAR 0 6
24560: PUSH
24561: LD_INT 2
24563: ARRAY
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: PUSH
24586: EMPTY
24587: LIST
24588: PPUSH
24589: CALL_OW 447
24593: GO 24536
24595: POP
24596: POP
// end ;
24597: LD_VAR 0 5
24601: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24602: LD_EXP 86
24606: NOT
24607: IFFALSE 24657
24609: GO 24611
24611: DISABLE
// begin initHack := true ;
24612: LD_ADDR_EXP 86
24616: PUSH
24617: LD_INT 1
24619: ST_TO_ADDR
// hackTanks := [ ] ;
24620: LD_ADDR_EXP 87
24624: PUSH
24625: EMPTY
24626: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24627: LD_ADDR_EXP 88
24631: PUSH
24632: EMPTY
24633: ST_TO_ADDR
// hackLimit := 3 ;
24634: LD_ADDR_EXP 89
24638: PUSH
24639: LD_INT 3
24641: ST_TO_ADDR
// hackDist := 12 ;
24642: LD_ADDR_EXP 90
24646: PUSH
24647: LD_INT 12
24649: ST_TO_ADDR
// hackCounter := [ ] ;
24650: LD_ADDR_EXP 91
24654: PUSH
24655: EMPTY
24656: ST_TO_ADDR
// end ;
24657: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24658: LD_EXP 86
24662: PUSH
24663: LD_INT 34
24665: PUSH
24666: LD_EXP 98
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PPUSH
24675: CALL_OW 69
24679: AND
24680: IFFALSE 24935
24682: GO 24684
24684: DISABLE
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
// begin enable ;
24689: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24690: LD_ADDR_VAR 0 1
24694: PUSH
24695: LD_INT 34
24697: PUSH
24698: LD_EXP 98
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24933
// begin if not i in hackTanks then
24715: LD_VAR 0 1
24719: PUSH
24720: LD_EXP 87
24724: IN
24725: NOT
24726: IFFALSE 24809
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24728: LD_ADDR_EXP 87
24732: PUSH
24733: LD_EXP 87
24737: PPUSH
24738: LD_EXP 87
24742: PUSH
24743: LD_INT 1
24745: PLUS
24746: PPUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 1
24756: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24757: LD_ADDR_EXP 88
24761: PUSH
24762: LD_EXP 88
24766: PPUSH
24767: LD_EXP 88
24771: PUSH
24772: LD_INT 1
24774: PLUS
24775: PPUSH
24776: EMPTY
24777: PPUSH
24778: CALL_OW 1
24782: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24783: LD_ADDR_EXP 91
24787: PUSH
24788: LD_EXP 91
24792: PPUSH
24793: LD_EXP 91
24797: PUSH
24798: LD_INT 1
24800: PLUS
24801: PPUSH
24802: EMPTY
24803: PPUSH
24804: CALL_OW 1
24808: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24809: LD_VAR 0 1
24813: PPUSH
24814: CALL_OW 302
24818: NOT
24819: IFFALSE 24832
// begin HackUnlinkAll ( i ) ;
24821: LD_VAR 0 1
24825: PPUSH
24826: CALL 24938 0 1
// continue ;
24830: GO 24712
// end ; HackCheckCapturedStatus ( i ) ;
24832: LD_VAR 0 1
24836: PPUSH
24837: CALL 25381 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24841: LD_ADDR_VAR 0 2
24845: PUSH
24846: LD_INT 81
24848: PUSH
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 255
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 33
24865: PUSH
24866: LD_INT 3
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 91
24875: PUSH
24876: LD_VAR 0 1
24880: PUSH
24881: LD_EXP 90
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 50
24893: PUSH
24894: EMPTY
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: ST_TO_ADDR
// if not tmp then
24908: LD_VAR 0 2
24912: NOT
24913: IFFALSE 24917
// continue ;
24915: GO 24712
// HackLink ( i , tmp ) ;
24917: LD_VAR 0 1
24921: PPUSH
24922: LD_VAR 0 2
24926: PPUSH
24927: CALL 25074 0 2
// end ;
24931: GO 24712
24933: POP
24934: POP
// end ;
24935: PPOPN 2
24937: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24938: LD_INT 0
24940: PPUSH
24941: PPUSH
24942: PPUSH
// if not hack in hackTanks then
24943: LD_VAR 0 1
24947: PUSH
24948: LD_EXP 87
24952: IN
24953: NOT
24954: IFFALSE 24958
// exit ;
24956: GO 25069
// index := GetElementIndex ( hackTanks , hack ) ;
24958: LD_ADDR_VAR 0 4
24962: PUSH
24963: LD_EXP 87
24967: PPUSH
24968: LD_VAR 0 1
24972: PPUSH
24973: CALL 32711 0 2
24977: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24978: LD_EXP 88
24982: PUSH
24983: LD_VAR 0 4
24987: ARRAY
24988: IFFALSE 25069
// begin for i in hackTanksCaptured [ index ] do
24990: LD_ADDR_VAR 0 3
24994: PUSH
24995: LD_EXP 88
24999: PUSH
25000: LD_VAR 0 4
25004: ARRAY
25005: PUSH
25006: FOR_IN
25007: IFFALSE 25033
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25009: LD_VAR 0 3
25013: PUSH
25014: LD_INT 1
25016: ARRAY
25017: PPUSH
25018: LD_VAR 0 3
25022: PUSH
25023: LD_INT 2
25025: ARRAY
25026: PPUSH
25027: CALL_OW 235
25031: GO 25006
25033: POP
25034: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25035: LD_ADDR_EXP 88
25039: PUSH
25040: LD_EXP 88
25044: PPUSH
25045: LD_VAR 0 4
25049: PPUSH
25050: EMPTY
25051: PPUSH
25052: CALL_OW 1
25056: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25057: LD_VAR 0 1
25061: PPUSH
25062: LD_INT 0
25064: PPUSH
25065: CALL_OW 505
// end ; end ;
25069: LD_VAR 0 2
25073: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25074: LD_INT 0
25076: PPUSH
25077: PPUSH
25078: PPUSH
// if not hack in hackTanks or not vehicles then
25079: LD_VAR 0 1
25083: PUSH
25084: LD_EXP 87
25088: IN
25089: NOT
25090: PUSH
25091: LD_VAR 0 2
25095: NOT
25096: OR
25097: IFFALSE 25101
// exit ;
25099: GO 25376
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25101: LD_ADDR_VAR 0 2
25105: PUSH
25106: LD_VAR 0 1
25110: PPUSH
25111: LD_VAR 0 2
25115: PPUSH
25116: LD_INT 1
25118: PPUSH
25119: LD_INT 1
25121: PPUSH
25122: CALL 33361 0 4
25126: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25127: LD_ADDR_VAR 0 5
25131: PUSH
25132: LD_EXP 87
25136: PPUSH
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL 32711 0 2
25146: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25147: LD_EXP 88
25151: PUSH
25152: LD_VAR 0 5
25156: ARRAY
25157: PUSH
25158: LD_EXP 89
25162: LESS
25163: IFFALSE 25352
// begin for i := 1 to vehicles do
25165: LD_ADDR_VAR 0 4
25169: PUSH
25170: DOUBLE
25171: LD_INT 1
25173: DEC
25174: ST_TO_ADDR
25175: LD_VAR 0 2
25179: PUSH
25180: FOR_TO
25181: IFFALSE 25350
// begin if hackTanksCaptured [ index ] = hackLimit then
25183: LD_EXP 88
25187: PUSH
25188: LD_VAR 0 5
25192: ARRAY
25193: PUSH
25194: LD_EXP 89
25198: EQUAL
25199: IFFALSE 25203
// break ;
25201: GO 25350
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25203: LD_ADDR_EXP 91
25207: PUSH
25208: LD_EXP 91
25212: PPUSH
25213: LD_VAR 0 5
25217: PPUSH
25218: LD_EXP 91
25222: PUSH
25223: LD_VAR 0 5
25227: ARRAY
25228: PUSH
25229: LD_INT 1
25231: PLUS
25232: PPUSH
25233: CALL_OW 1
25237: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25238: LD_ADDR_EXP 88
25242: PUSH
25243: LD_EXP 88
25247: PPUSH
25248: LD_VAR 0 5
25252: PUSH
25253: LD_EXP 88
25257: PUSH
25258: LD_VAR 0 5
25262: ARRAY
25263: PUSH
25264: LD_INT 1
25266: PLUS
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PPUSH
25272: LD_VAR 0 2
25276: PUSH
25277: LD_VAR 0 4
25281: ARRAY
25282: PUSH
25283: LD_VAR 0 2
25287: PUSH
25288: LD_VAR 0 4
25292: ARRAY
25293: PPUSH
25294: CALL_OW 255
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PPUSH
25303: CALL 32926 0 3
25307: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25308: LD_VAR 0 2
25312: PUSH
25313: LD_VAR 0 4
25317: ARRAY
25318: PPUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL_OW 255
25328: PPUSH
25329: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25333: LD_VAR 0 2
25337: PUSH
25338: LD_VAR 0 4
25342: ARRAY
25343: PPUSH
25344: CALL_OW 141
// end ;
25348: GO 25180
25350: POP
25351: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25352: LD_VAR 0 1
25356: PPUSH
25357: LD_EXP 88
25361: PUSH
25362: LD_VAR 0 5
25366: ARRAY
25367: PUSH
25368: LD_INT 0
25370: PLUS
25371: PPUSH
25372: CALL_OW 505
// end ;
25376: LD_VAR 0 3
25380: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
// if not hack in hackTanks then
25387: LD_VAR 0 1
25391: PUSH
25392: LD_EXP 87
25396: IN
25397: NOT
25398: IFFALSE 25402
// exit ;
25400: GO 25642
// index := GetElementIndex ( hackTanks , hack ) ;
25402: LD_ADDR_VAR 0 4
25406: PUSH
25407: LD_EXP 87
25411: PPUSH
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL 32711 0 2
25421: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: DOUBLE
25428: LD_EXP 88
25432: PUSH
25433: LD_VAR 0 4
25437: ARRAY
25438: INC
25439: ST_TO_ADDR
25440: LD_INT 1
25442: PUSH
25443: FOR_DOWNTO
25444: IFFALSE 25616
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25446: LD_ADDR_VAR 0 5
25450: PUSH
25451: LD_EXP 88
25455: PUSH
25456: LD_VAR 0 4
25460: ARRAY
25461: PUSH
25462: LD_VAR 0 3
25466: ARRAY
25467: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25468: LD_VAR 0 5
25472: PUSH
25473: LD_INT 1
25475: ARRAY
25476: PPUSH
25477: CALL_OW 302
25481: NOT
25482: PUSH
25483: LD_VAR 0 5
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: PPUSH
25492: CALL_OW 255
25496: PUSH
25497: LD_VAR 0 1
25501: PPUSH
25502: CALL_OW 255
25506: NONEQUAL
25507: OR
25508: IFFALSE 25614
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25510: LD_VAR 0 5
25514: PUSH
25515: LD_INT 1
25517: ARRAY
25518: PPUSH
25519: CALL_OW 305
25523: PUSH
25524: LD_VAR 0 5
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PPUSH
25533: CALL_OW 255
25537: PUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 255
25547: EQUAL
25548: AND
25549: IFFALSE 25573
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25551: LD_VAR 0 5
25555: PUSH
25556: LD_INT 1
25558: ARRAY
25559: PPUSH
25560: LD_VAR 0 5
25564: PUSH
25565: LD_INT 2
25567: ARRAY
25568: PPUSH
25569: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25573: LD_ADDR_EXP 88
25577: PUSH
25578: LD_EXP 88
25582: PPUSH
25583: LD_VAR 0 4
25587: PPUSH
25588: LD_EXP 88
25592: PUSH
25593: LD_VAR 0 4
25597: ARRAY
25598: PPUSH
25599: LD_VAR 0 3
25603: PPUSH
25604: CALL_OW 3
25608: PPUSH
25609: CALL_OW 1
25613: ST_TO_ADDR
// end ; end ;
25614: GO 25443
25616: POP
25617: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25618: LD_VAR 0 1
25622: PPUSH
25623: LD_EXP 88
25627: PUSH
25628: LD_VAR 0 4
25632: ARRAY
25633: PUSH
25634: LD_INT 0
25636: PLUS
25637: PPUSH
25638: CALL_OW 505
// end ;
25642: LD_VAR 0 2
25646: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25647: LD_INT 0
25649: PPUSH
25650: PPUSH
25651: PPUSH
25652: PPUSH
// if not hack in hackTanks then
25653: LD_VAR 0 1
25657: PUSH
25658: LD_EXP 87
25662: IN
25663: NOT
25664: IFFALSE 25668
// exit ;
25666: GO 25753
// index := GetElementIndex ( hackTanks , hack ) ;
25668: LD_ADDR_VAR 0 5
25672: PUSH
25673: LD_EXP 87
25677: PPUSH
25678: LD_VAR 0 1
25682: PPUSH
25683: CALL 32711 0 2
25687: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25688: LD_ADDR_VAR 0 4
25692: PUSH
25693: DOUBLE
25694: LD_INT 1
25696: DEC
25697: ST_TO_ADDR
25698: LD_EXP 88
25702: PUSH
25703: LD_VAR 0 5
25707: ARRAY
25708: PUSH
25709: FOR_TO
25710: IFFALSE 25751
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25712: LD_EXP 88
25716: PUSH
25717: LD_VAR 0 5
25721: ARRAY
25722: PUSH
25723: LD_VAR 0 4
25727: ARRAY
25728: PUSH
25729: LD_INT 1
25731: ARRAY
25732: PUSH
25733: LD_VAR 0 2
25737: EQUAL
25738: IFFALSE 25749
// KillUnit ( vehicle ) ;
25740: LD_VAR 0 2
25744: PPUSH
25745: CALL_OW 66
25749: GO 25709
25751: POP
25752: POP
// end ;
25753: LD_VAR 0 3
25757: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25758: LD_EXP 92
25762: NOT
25763: IFFALSE 25798
25765: GO 25767
25767: DISABLE
// begin initMiner := true ;
25768: LD_ADDR_EXP 92
25772: PUSH
25773: LD_INT 1
25775: ST_TO_ADDR
// minersList := [ ] ;
25776: LD_ADDR_EXP 93
25780: PUSH
25781: EMPTY
25782: ST_TO_ADDR
// minerMinesList := [ ] ;
25783: LD_ADDR_EXP 94
25787: PUSH
25788: EMPTY
25789: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25790: LD_ADDR_EXP 95
25794: PUSH
25795: LD_INT 5
25797: ST_TO_ADDR
// end ;
25798: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25799: LD_EXP 92
25803: PUSH
25804: LD_INT 34
25806: PUSH
25807: LD_EXP 103
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PPUSH
25816: CALL_OW 69
25820: AND
25821: IFFALSE 26284
25823: GO 25825
25825: DISABLE
25826: LD_INT 0
25828: PPUSH
25829: PPUSH
25830: PPUSH
25831: PPUSH
// begin enable ;
25832: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25833: LD_ADDR_VAR 0 1
25837: PUSH
25838: LD_INT 34
25840: PUSH
25841: LD_EXP 103
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 69
25854: PUSH
25855: FOR_IN
25856: IFFALSE 25928
// begin if not i in minersList then
25858: LD_VAR 0 1
25862: PUSH
25863: LD_EXP 93
25867: IN
25868: NOT
25869: IFFALSE 25926
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25871: LD_ADDR_EXP 93
25875: PUSH
25876: LD_EXP 93
25880: PPUSH
25881: LD_EXP 93
25885: PUSH
25886: LD_INT 1
25888: PLUS
25889: PPUSH
25890: LD_VAR 0 1
25894: PPUSH
25895: CALL_OW 1
25899: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25900: LD_ADDR_EXP 94
25904: PUSH
25905: LD_EXP 94
25909: PPUSH
25910: LD_EXP 94
25914: PUSH
25915: LD_INT 1
25917: PLUS
25918: PPUSH
25919: EMPTY
25920: PPUSH
25921: CALL_OW 1
25925: ST_TO_ADDR
// end end ;
25926: GO 25855
25928: POP
25929: POP
// for i := minerMinesList downto 1 do
25930: LD_ADDR_VAR 0 1
25934: PUSH
25935: DOUBLE
25936: LD_EXP 94
25940: INC
25941: ST_TO_ADDR
25942: LD_INT 1
25944: PUSH
25945: FOR_DOWNTO
25946: IFFALSE 26282
// begin if IsLive ( minersList [ i ] ) then
25948: LD_EXP 93
25952: PUSH
25953: LD_VAR 0 1
25957: ARRAY
25958: PPUSH
25959: CALL_OW 300
25963: IFFALSE 25991
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25965: LD_EXP 93
25969: PUSH
25970: LD_VAR 0 1
25974: ARRAY
25975: PPUSH
25976: LD_EXP 94
25980: PUSH
25981: LD_VAR 0 1
25985: ARRAY
25986: PPUSH
25987: CALL_OW 505
// if not minerMinesList [ i ] then
25991: LD_EXP 94
25995: PUSH
25996: LD_VAR 0 1
26000: ARRAY
26001: NOT
26002: IFFALSE 26006
// continue ;
26004: GO 25945
// for j := minerMinesList [ i ] downto 1 do
26006: LD_ADDR_VAR 0 2
26010: PUSH
26011: DOUBLE
26012: LD_EXP 94
26016: PUSH
26017: LD_VAR 0 1
26021: ARRAY
26022: INC
26023: ST_TO_ADDR
26024: LD_INT 1
26026: PUSH
26027: FOR_DOWNTO
26028: IFFALSE 26278
// begin side := GetSide ( minersList [ i ] ) ;
26030: LD_ADDR_VAR 0 3
26034: PUSH
26035: LD_EXP 93
26039: PUSH
26040: LD_VAR 0 1
26044: ARRAY
26045: PPUSH
26046: CALL_OW 255
26050: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26051: LD_ADDR_VAR 0 4
26055: PUSH
26056: LD_EXP 94
26060: PUSH
26061: LD_VAR 0 1
26065: ARRAY
26066: PUSH
26067: LD_VAR 0 2
26071: ARRAY
26072: PUSH
26073: LD_INT 1
26075: ARRAY
26076: PPUSH
26077: LD_EXP 94
26081: PUSH
26082: LD_VAR 0 1
26086: ARRAY
26087: PUSH
26088: LD_VAR 0 2
26092: ARRAY
26093: PUSH
26094: LD_INT 2
26096: ARRAY
26097: PPUSH
26098: CALL_OW 428
26102: ST_TO_ADDR
// if not tmp then
26103: LD_VAR 0 4
26107: NOT
26108: IFFALSE 26112
// continue ;
26110: GO 26027
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26112: LD_VAR 0 4
26116: PUSH
26117: LD_INT 81
26119: PUSH
26120: LD_VAR 0 3
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PPUSH
26129: CALL_OW 69
26133: IN
26134: PUSH
26135: LD_EXP 94
26139: PUSH
26140: LD_VAR 0 1
26144: ARRAY
26145: PUSH
26146: LD_VAR 0 2
26150: ARRAY
26151: PUSH
26152: LD_INT 1
26154: ARRAY
26155: PPUSH
26156: LD_EXP 94
26160: PUSH
26161: LD_VAR 0 1
26165: ARRAY
26166: PUSH
26167: LD_VAR 0 2
26171: ARRAY
26172: PUSH
26173: LD_INT 2
26175: ARRAY
26176: PPUSH
26177: CALL_OW 458
26181: AND
26182: IFFALSE 26276
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26184: LD_EXP 94
26188: PUSH
26189: LD_VAR 0 1
26193: ARRAY
26194: PUSH
26195: LD_VAR 0 2
26199: ARRAY
26200: PUSH
26201: LD_INT 1
26203: ARRAY
26204: PPUSH
26205: LD_EXP 94
26209: PUSH
26210: LD_VAR 0 1
26214: ARRAY
26215: PUSH
26216: LD_VAR 0 2
26220: ARRAY
26221: PUSH
26222: LD_INT 2
26224: ARRAY
26225: PPUSH
26226: LD_VAR 0 3
26230: PPUSH
26231: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26235: LD_ADDR_EXP 94
26239: PUSH
26240: LD_EXP 94
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: LD_EXP 94
26254: PUSH
26255: LD_VAR 0 1
26259: ARRAY
26260: PPUSH
26261: LD_VAR 0 2
26265: PPUSH
26266: CALL_OW 3
26270: PPUSH
26271: CALL_OW 1
26275: ST_TO_ADDR
// end ; end ;
26276: GO 26027
26278: POP
26279: POP
// end ;
26280: GO 25945
26282: POP
26283: POP
// end ;
26284: PPOPN 4
26286: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
// result := false ;
26291: LD_ADDR_VAR 0 4
26295: PUSH
26296: LD_INT 0
26298: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 264
26308: PUSH
26309: LD_EXP 103
26313: EQUAL
26314: NOT
26315: IFFALSE 26319
// exit ;
26317: GO 26559
// index := GetElementIndex ( minersList , unit ) ;
26319: LD_ADDR_VAR 0 5
26323: PUSH
26324: LD_EXP 93
26328: PPUSH
26329: LD_VAR 0 1
26333: PPUSH
26334: CALL 32711 0 2
26338: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26339: LD_EXP 94
26343: PUSH
26344: LD_VAR 0 5
26348: ARRAY
26349: PUSH
26350: LD_EXP 95
26354: GREATEREQUAL
26355: IFFALSE 26359
// exit ;
26357: GO 26559
// ComMoveXY ( unit , x , y ) ;
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_VAR 0 2
26368: PPUSH
26369: LD_VAR 0 3
26373: PPUSH
26374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26378: LD_INT 35
26380: PPUSH
26381: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26385: LD_VAR 0 1
26389: PPUSH
26390: LD_VAR 0 2
26394: PPUSH
26395: LD_VAR 0 3
26399: PPUSH
26400: CALL 63483 0 3
26404: NOT
26405: PUSH
26406: LD_VAR 0 1
26410: PPUSH
26411: CALL_OW 314
26415: AND
26416: IFFALSE 26420
// exit ;
26418: GO 26559
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26420: LD_VAR 0 2
26424: PPUSH
26425: LD_VAR 0 3
26429: PPUSH
26430: CALL_OW 428
26434: PUSH
26435: LD_VAR 0 1
26439: EQUAL
26440: PUSH
26441: LD_VAR 0 1
26445: PPUSH
26446: CALL_OW 314
26450: NOT
26451: AND
26452: IFFALSE 26378
// PlaySoundXY ( x , y , PlantMine ) ;
26454: LD_VAR 0 2
26458: PPUSH
26459: LD_VAR 0 3
26463: PPUSH
26464: LD_STRING PlantMine
26466: PPUSH
26467: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26471: LD_VAR 0 2
26475: PPUSH
26476: LD_VAR 0 3
26480: PPUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 255
26490: PPUSH
26491: LD_INT 0
26493: PPUSH
26494: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26498: LD_ADDR_EXP 94
26502: PUSH
26503: LD_EXP 94
26507: PPUSH
26508: LD_VAR 0 5
26512: PUSH
26513: LD_EXP 94
26517: PUSH
26518: LD_VAR 0 5
26522: ARRAY
26523: PUSH
26524: LD_INT 1
26526: PLUS
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PPUSH
26532: LD_VAR 0 2
26536: PUSH
26537: LD_VAR 0 3
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PPUSH
26546: CALL 32926 0 3
26550: ST_TO_ADDR
// result := true ;
26551: LD_ADDR_VAR 0 4
26555: PUSH
26556: LD_INT 1
26558: ST_TO_ADDR
// end ;
26559: LD_VAR 0 4
26563: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26564: LD_INT 0
26566: PPUSH
26567: PPUSH
26568: PPUSH
// if not unit in minersList then
26569: LD_VAR 0 1
26573: PUSH
26574: LD_EXP 93
26578: IN
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26976
// index := GetElementIndex ( minersList , unit ) ;
26584: LD_ADDR_VAR 0 6
26588: PUSH
26589: LD_EXP 93
26593: PPUSH
26594: LD_VAR 0 1
26598: PPUSH
26599: CALL 32711 0 2
26603: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: DOUBLE
26610: LD_EXP 94
26614: PUSH
26615: LD_VAR 0 6
26619: ARRAY
26620: INC
26621: ST_TO_ADDR
26622: LD_INT 1
26624: PUSH
26625: FOR_DOWNTO
26626: IFFALSE 26787
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26628: LD_EXP 94
26632: PUSH
26633: LD_VAR 0 6
26637: ARRAY
26638: PUSH
26639: LD_VAR 0 5
26643: ARRAY
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PUSH
26649: LD_VAR 0 2
26653: EQUAL
26654: PUSH
26655: LD_EXP 94
26659: PUSH
26660: LD_VAR 0 6
26664: ARRAY
26665: PUSH
26666: LD_VAR 0 5
26670: ARRAY
26671: PUSH
26672: LD_INT 2
26674: ARRAY
26675: PUSH
26676: LD_VAR 0 3
26680: EQUAL
26681: AND
26682: IFFALSE 26785
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26684: LD_EXP 94
26688: PUSH
26689: LD_VAR 0 6
26693: ARRAY
26694: PUSH
26695: LD_VAR 0 5
26699: ARRAY
26700: PUSH
26701: LD_INT 1
26703: ARRAY
26704: PPUSH
26705: LD_EXP 94
26709: PUSH
26710: LD_VAR 0 6
26714: ARRAY
26715: PUSH
26716: LD_VAR 0 5
26720: ARRAY
26721: PUSH
26722: LD_INT 2
26724: ARRAY
26725: PPUSH
26726: LD_VAR 0 1
26730: PPUSH
26731: CALL_OW 255
26735: PPUSH
26736: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26740: LD_ADDR_EXP 94
26744: PUSH
26745: LD_EXP 94
26749: PPUSH
26750: LD_VAR 0 6
26754: PPUSH
26755: LD_EXP 94
26759: PUSH
26760: LD_VAR 0 6
26764: ARRAY
26765: PPUSH
26766: LD_VAR 0 5
26770: PPUSH
26771: CALL_OW 3
26775: PPUSH
26776: CALL_OW 1
26780: ST_TO_ADDR
// exit ;
26781: POP
26782: POP
26783: GO 26976
// end ; end ;
26785: GO 26625
26787: POP
26788: POP
// for i := minerMinesList [ index ] downto 1 do
26789: LD_ADDR_VAR 0 5
26793: PUSH
26794: DOUBLE
26795: LD_EXP 94
26799: PUSH
26800: LD_VAR 0 6
26804: ARRAY
26805: INC
26806: ST_TO_ADDR
26807: LD_INT 1
26809: PUSH
26810: FOR_DOWNTO
26811: IFFALSE 26974
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26813: LD_EXP 94
26817: PUSH
26818: LD_VAR 0 6
26822: ARRAY
26823: PUSH
26824: LD_VAR 0 5
26828: ARRAY
26829: PUSH
26830: LD_INT 1
26832: ARRAY
26833: PPUSH
26834: LD_EXP 94
26838: PUSH
26839: LD_VAR 0 6
26843: ARRAY
26844: PUSH
26845: LD_VAR 0 5
26849: ARRAY
26850: PUSH
26851: LD_INT 2
26853: ARRAY
26854: PPUSH
26855: LD_VAR 0 2
26859: PPUSH
26860: LD_VAR 0 3
26864: PPUSH
26865: CALL_OW 298
26869: PUSH
26870: LD_INT 6
26872: LESS
26873: IFFALSE 26972
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26875: LD_EXP 94
26879: PUSH
26880: LD_VAR 0 6
26884: ARRAY
26885: PUSH
26886: LD_VAR 0 5
26890: ARRAY
26891: PUSH
26892: LD_INT 1
26894: ARRAY
26895: PPUSH
26896: LD_EXP 94
26900: PUSH
26901: LD_VAR 0 6
26905: ARRAY
26906: PUSH
26907: LD_VAR 0 5
26911: ARRAY
26912: PUSH
26913: LD_INT 2
26915: ARRAY
26916: PPUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: CALL_OW 255
26926: PPUSH
26927: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26931: LD_ADDR_EXP 94
26935: PUSH
26936: LD_EXP 94
26940: PPUSH
26941: LD_VAR 0 6
26945: PPUSH
26946: LD_EXP 94
26950: PUSH
26951: LD_VAR 0 6
26955: ARRAY
26956: PPUSH
26957: LD_VAR 0 5
26961: PPUSH
26962: CALL_OW 3
26966: PPUSH
26967: CALL_OW 1
26971: ST_TO_ADDR
// end ; end ;
26972: GO 26810
26974: POP
26975: POP
// end ;
26976: LD_VAR 0 4
26980: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26981: LD_INT 0
26983: PPUSH
26984: PPUSH
26985: PPUSH
26986: PPUSH
26987: PPUSH
26988: PPUSH
26989: PPUSH
26990: PPUSH
26991: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL_OW 264
27001: PUSH
27002: LD_EXP 103
27006: EQUAL
27007: NOT
27008: PUSH
27009: LD_VAR 0 1
27013: PUSH
27014: LD_EXP 93
27018: IN
27019: NOT
27020: OR
27021: IFFALSE 27025
// exit ;
27023: GO 27347
// index := GetElementIndex ( minersList , unit ) ;
27025: LD_ADDR_VAR 0 6
27029: PUSH
27030: LD_EXP 93
27034: PPUSH
27035: LD_VAR 0 1
27039: PPUSH
27040: CALL 32711 0 2
27044: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27045: LD_ADDR_VAR 0 8
27049: PUSH
27050: LD_EXP 95
27054: PUSH
27055: LD_EXP 94
27059: PUSH
27060: LD_VAR 0 6
27064: ARRAY
27065: MINUS
27066: ST_TO_ADDR
// if not minesFreeAmount then
27067: LD_VAR 0 8
27071: NOT
27072: IFFALSE 27076
// exit ;
27074: GO 27347
// tmp := [ ] ;
27076: LD_ADDR_VAR 0 7
27080: PUSH
27081: EMPTY
27082: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27083: LD_ADDR_VAR 0 5
27087: PUSH
27088: DOUBLE
27089: LD_INT 1
27091: DEC
27092: ST_TO_ADDR
27093: LD_VAR 0 8
27097: PUSH
27098: FOR_TO
27099: IFFALSE 27294
// begin _d := rand ( 0 , 5 ) ;
27101: LD_ADDR_VAR 0 11
27105: PUSH
27106: LD_INT 0
27108: PPUSH
27109: LD_INT 5
27111: PPUSH
27112: CALL_OW 12
27116: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27117: LD_ADDR_VAR 0 12
27121: PUSH
27122: LD_INT 2
27124: PPUSH
27125: LD_INT 6
27127: PPUSH
27128: CALL_OW 12
27132: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27133: LD_ADDR_VAR 0 9
27137: PUSH
27138: LD_VAR 0 2
27142: PPUSH
27143: LD_VAR 0 11
27147: PPUSH
27148: LD_VAR 0 12
27152: PPUSH
27153: CALL_OW 272
27157: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27158: LD_ADDR_VAR 0 10
27162: PUSH
27163: LD_VAR 0 3
27167: PPUSH
27168: LD_VAR 0 11
27172: PPUSH
27173: LD_VAR 0 12
27177: PPUSH
27178: CALL_OW 273
27182: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27183: LD_VAR 0 9
27187: PPUSH
27188: LD_VAR 0 10
27192: PPUSH
27193: CALL_OW 488
27197: PUSH
27198: LD_VAR 0 9
27202: PUSH
27203: LD_VAR 0 10
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_VAR 0 7
27216: IN
27217: NOT
27218: AND
27219: PUSH
27220: LD_VAR 0 9
27224: PPUSH
27225: LD_VAR 0 10
27229: PPUSH
27230: CALL_OW 458
27234: NOT
27235: AND
27236: IFFALSE 27278
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27238: LD_ADDR_VAR 0 7
27242: PUSH
27243: LD_VAR 0 7
27247: PPUSH
27248: LD_VAR 0 7
27252: PUSH
27253: LD_INT 1
27255: PLUS
27256: PPUSH
27257: LD_VAR 0 9
27261: PUSH
27262: LD_VAR 0 10
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PPUSH
27271: CALL_OW 1
27275: ST_TO_ADDR
27276: GO 27292
// i := i - 1 ;
27278: LD_ADDR_VAR 0 5
27282: PUSH
27283: LD_VAR 0 5
27287: PUSH
27288: LD_INT 1
27290: MINUS
27291: ST_TO_ADDR
// end ;
27292: GO 27098
27294: POP
27295: POP
// for i in tmp do
27296: LD_ADDR_VAR 0 5
27300: PUSH
27301: LD_VAR 0 7
27305: PUSH
27306: FOR_IN
27307: IFFALSE 27345
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27309: LD_VAR 0 1
27313: PPUSH
27314: LD_VAR 0 5
27318: PUSH
27319: LD_INT 1
27321: ARRAY
27322: PPUSH
27323: LD_VAR 0 5
27327: PUSH
27328: LD_INT 2
27330: ARRAY
27331: PPUSH
27332: CALL 26287 0 3
27336: NOT
27337: IFFALSE 27343
// exit ;
27339: POP
27340: POP
27341: GO 27347
27343: GO 27306
27345: POP
27346: POP
// end ;
27347: LD_VAR 0 4
27351: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27352: LD_INT 0
27354: PPUSH
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
// if not GetClass ( unit ) = class_sniper then
27361: LD_VAR 0 1
27365: PPUSH
27366: CALL_OW 257
27370: PUSH
27371: LD_INT 5
27373: EQUAL
27374: NOT
27375: IFFALSE 27379
// exit ;
27377: GO 27767
// dist := 8 ;
27379: LD_ADDR_VAR 0 5
27383: PUSH
27384: LD_INT 8
27386: ST_TO_ADDR
// viewRange := 12 ;
27387: LD_ADDR_VAR 0 7
27391: PUSH
27392: LD_INT 12
27394: ST_TO_ADDR
// side := GetSide ( unit ) ;
27395: LD_ADDR_VAR 0 6
27399: PUSH
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 255
27409: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27410: LD_INT 61
27412: PPUSH
27413: LD_VAR 0 6
27417: PPUSH
27418: CALL_OW 321
27422: PUSH
27423: LD_INT 2
27425: EQUAL
27426: IFFALSE 27436
// viewRange := 16 ;
27428: LD_ADDR_VAR 0 7
27432: PUSH
27433: LD_INT 16
27435: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27436: LD_VAR 0 1
27440: PPUSH
27441: LD_VAR 0 2
27445: PPUSH
27446: LD_VAR 0 3
27450: PPUSH
27451: CALL_OW 297
27455: PUSH
27456: LD_VAR 0 5
27460: GREATER
27461: IFFALSE 27540
// begin ComMoveXY ( unit , x , y ) ;
27463: LD_VAR 0 1
27467: PPUSH
27468: LD_VAR 0 2
27472: PPUSH
27473: LD_VAR 0 3
27477: PPUSH
27478: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27482: LD_INT 35
27484: PPUSH
27485: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27489: LD_VAR 0 1
27493: PPUSH
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_VAR 0 3
27503: PPUSH
27504: CALL 63483 0 3
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 27767
// until GetDistUnitXY ( unit , x , y ) < dist ;
27513: LD_VAR 0 1
27517: PPUSH
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_VAR 0 3
27527: PPUSH
27528: CALL_OW 297
27532: PUSH
27533: LD_VAR 0 5
27537: LESS
27538: IFFALSE 27482
// end ; ComTurnXY ( unit , x , y ) ;
27540: LD_VAR 0 1
27544: PPUSH
27545: LD_VAR 0 2
27549: PPUSH
27550: LD_VAR 0 3
27554: PPUSH
27555: CALL_OW 118
// wait ( 5 ) ;
27559: LD_INT 5
27561: PPUSH
27562: CALL_OW 67
// _d := GetDir ( unit ) ;
27566: LD_ADDR_VAR 0 10
27570: PUSH
27571: LD_VAR 0 1
27575: PPUSH
27576: CALL_OW 254
27580: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27581: LD_ADDR_VAR 0 8
27585: PUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 250
27595: PPUSH
27596: LD_VAR 0 10
27600: PPUSH
27601: LD_VAR 0 5
27605: PPUSH
27606: CALL_OW 272
27610: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27611: LD_ADDR_VAR 0 9
27615: PUSH
27616: LD_VAR 0 1
27620: PPUSH
27621: CALL_OW 251
27625: PPUSH
27626: LD_VAR 0 10
27630: PPUSH
27631: LD_VAR 0 5
27635: PPUSH
27636: CALL_OW 273
27640: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27641: LD_VAR 0 8
27645: PPUSH
27646: LD_VAR 0 9
27650: PPUSH
27651: CALL_OW 488
27655: NOT
27656: IFFALSE 27660
// exit ;
27658: GO 27767
// ComAnimCustom ( unit , 1 ) ;
27660: LD_VAR 0 1
27664: PPUSH
27665: LD_INT 1
27667: PPUSH
27668: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27672: LD_VAR 0 8
27676: PPUSH
27677: LD_VAR 0 9
27681: PPUSH
27682: LD_VAR 0 6
27686: PPUSH
27687: LD_VAR 0 7
27691: PPUSH
27692: CALL_OW 330
// repeat wait ( 1 ) ;
27696: LD_INT 1
27698: PPUSH
27699: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27703: LD_VAR 0 1
27707: PPUSH
27708: CALL_OW 316
27712: PUSH
27713: LD_VAR 0 1
27717: PPUSH
27718: CALL_OW 314
27722: OR
27723: PUSH
27724: LD_VAR 0 1
27728: PPUSH
27729: CALL_OW 302
27733: NOT
27734: OR
27735: PUSH
27736: LD_VAR 0 1
27740: PPUSH
27741: CALL_OW 301
27745: OR
27746: IFFALSE 27696
// RemoveSeeing ( _x , _y , side ) ;
27748: LD_VAR 0 8
27752: PPUSH
27753: LD_VAR 0 9
27757: PPUSH
27758: LD_VAR 0 6
27762: PPUSH
27763: CALL_OW 331
// end ; end_of_file
27767: LD_VAR 0 4
27771: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27772: LD_INT 0
27774: PPUSH
// ar_miner := 81 ;
27775: LD_ADDR_EXP 103
27779: PUSH
27780: LD_INT 81
27782: ST_TO_ADDR
// ar_crane := 88 ;
27783: LD_ADDR_EXP 102
27787: PUSH
27788: LD_INT 88
27790: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27791: LD_ADDR_EXP 97
27795: PUSH
27796: LD_INT 89
27798: ST_TO_ADDR
// us_hack := 99 ;
27799: LD_ADDR_EXP 98
27803: PUSH
27804: LD_INT 99
27806: ST_TO_ADDR
// us_artillery := 97 ;
27807: LD_ADDR_EXP 99
27811: PUSH
27812: LD_INT 97
27814: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27815: LD_ADDR_EXP 100
27819: PUSH
27820: LD_INT 91
27822: ST_TO_ADDR
// ar_mortar := 92 ;
27823: LD_ADDR_EXP 101
27827: PUSH
27828: LD_INT 92
27830: ST_TO_ADDR
// ru_radar := 98 ;
27831: LD_ADDR_EXP 96
27835: PUSH
27836: LD_INT 98
27838: ST_TO_ADDR
// tech_Artillery := 80 ;
27839: LD_ADDR_EXP 104
27843: PUSH
27844: LD_INT 80
27846: ST_TO_ADDR
// tech_RadMat := 81 ;
27847: LD_ADDR_EXP 105
27851: PUSH
27852: LD_INT 81
27854: ST_TO_ADDR
// tech_BasicTools := 82 ;
27855: LD_ADDR_EXP 106
27859: PUSH
27860: LD_INT 82
27862: ST_TO_ADDR
// tech_Cargo := 83 ;
27863: LD_ADDR_EXP 107
27867: PUSH
27868: LD_INT 83
27870: ST_TO_ADDR
// tech_Track := 84 ;
27871: LD_ADDR_EXP 108
27875: PUSH
27876: LD_INT 84
27878: ST_TO_ADDR
// tech_Crane := 85 ;
27879: LD_ADDR_EXP 109
27883: PUSH
27884: LD_INT 85
27886: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27887: LD_ADDR_EXP 110
27891: PUSH
27892: LD_INT 86
27894: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27895: LD_ADDR_EXP 111
27899: PUSH
27900: LD_INT 87
27902: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27903: LD_ADDR_EXP 112
27907: PUSH
27908: LD_INT 88
27910: ST_TO_ADDR
// class_mastodont := 31 ;
27911: LD_ADDR_EXP 113
27915: PUSH
27916: LD_INT 31
27918: ST_TO_ADDR
// class_horse := 21 ;
27919: LD_ADDR_EXP 114
27923: PUSH
27924: LD_INT 21
27926: ST_TO_ADDR
// end ;
27927: LD_VAR 0 1
27931: RET
// every 1 do
27932: GO 27934
27934: DISABLE
// InitGlobalVariables ; end_of_file
27935: CALL 27772 0 0
27939: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
// if exist_mode then
27944: LD_VAR 0 2
27948: IFFALSE 27973
// unit := CreateCharacter ( prefix & ident ) else
27950: LD_ADDR_VAR 0 5
27954: PUSH
27955: LD_VAR 0 3
27959: PUSH
27960: LD_VAR 0 1
27964: STR
27965: PPUSH
27966: CALL_OW 34
27970: ST_TO_ADDR
27971: GO 27988
// unit := NewCharacter ( ident ) ;
27973: LD_ADDR_VAR 0 5
27977: PUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: CALL_OW 25
27987: ST_TO_ADDR
// result := unit ;
27988: LD_ADDR_VAR 0 4
27992: PUSH
27993: LD_VAR 0 5
27997: ST_TO_ADDR
// end ;
27998: LD_VAR 0 4
28002: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28003: LD_INT 0
28005: PPUSH
28006: PPUSH
// if not side or not nation then
28007: LD_VAR 0 1
28011: NOT
28012: PUSH
28013: LD_VAR 0 2
28017: NOT
28018: OR
28019: IFFALSE 28023
// exit ;
28021: GO 28791
// case nation of nation_american :
28023: LD_VAR 0 2
28027: PUSH
28028: LD_INT 1
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28036
28034: GO 28250
28036: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28037: LD_ADDR_VAR 0 4
28041: PUSH
28042: LD_INT 35
28044: PUSH
28045: LD_INT 45
28047: PUSH
28048: LD_INT 46
28050: PUSH
28051: LD_INT 47
28053: PUSH
28054: LD_INT 82
28056: PUSH
28057: LD_INT 83
28059: PUSH
28060: LD_INT 84
28062: PUSH
28063: LD_INT 85
28065: PUSH
28066: LD_INT 86
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: LD_INT 6
28077: PUSH
28078: LD_INT 15
28080: PUSH
28081: LD_INT 16
28083: PUSH
28084: LD_INT 7
28086: PUSH
28087: LD_INT 12
28089: PUSH
28090: LD_INT 13
28092: PUSH
28093: LD_INT 10
28095: PUSH
28096: LD_INT 14
28098: PUSH
28099: LD_INT 20
28101: PUSH
28102: LD_INT 21
28104: PUSH
28105: LD_INT 22
28107: PUSH
28108: LD_INT 25
28110: PUSH
28111: LD_INT 32
28113: PUSH
28114: LD_INT 27
28116: PUSH
28117: LD_INT 36
28119: PUSH
28120: LD_INT 69
28122: PUSH
28123: LD_INT 39
28125: PUSH
28126: LD_INT 34
28128: PUSH
28129: LD_INT 40
28131: PUSH
28132: LD_INT 48
28134: PUSH
28135: LD_INT 49
28137: PUSH
28138: LD_INT 50
28140: PUSH
28141: LD_INT 51
28143: PUSH
28144: LD_INT 52
28146: PUSH
28147: LD_INT 53
28149: PUSH
28150: LD_INT 54
28152: PUSH
28153: LD_INT 55
28155: PUSH
28156: LD_INT 56
28158: PUSH
28159: LD_INT 57
28161: PUSH
28162: LD_INT 58
28164: PUSH
28165: LD_INT 59
28167: PUSH
28168: LD_INT 60
28170: PUSH
28171: LD_INT 61
28173: PUSH
28174: LD_INT 62
28176: PUSH
28177: LD_INT 80
28179: PUSH
28180: LD_INT 82
28182: PUSH
28183: LD_INT 83
28185: PUSH
28186: LD_INT 84
28188: PUSH
28189: LD_INT 85
28191: PUSH
28192: LD_INT 86
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
28248: GO 28715
28250: LD_INT 2
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28258
28256: GO 28484
28258: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28259: LD_ADDR_VAR 0 4
28263: PUSH
28264: LD_INT 35
28266: PUSH
28267: LD_INT 45
28269: PUSH
28270: LD_INT 46
28272: PUSH
28273: LD_INT 47
28275: PUSH
28276: LD_INT 82
28278: PUSH
28279: LD_INT 83
28281: PUSH
28282: LD_INT 84
28284: PUSH
28285: LD_INT 85
28287: PUSH
28288: LD_INT 87
28290: PUSH
28291: LD_INT 70
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: LD_INT 11
28299: PUSH
28300: LD_INT 3
28302: PUSH
28303: LD_INT 4
28305: PUSH
28306: LD_INT 5
28308: PUSH
28309: LD_INT 6
28311: PUSH
28312: LD_INT 15
28314: PUSH
28315: LD_INT 18
28317: PUSH
28318: LD_INT 7
28320: PUSH
28321: LD_INT 17
28323: PUSH
28324: LD_INT 8
28326: PUSH
28327: LD_INT 20
28329: PUSH
28330: LD_INT 21
28332: PUSH
28333: LD_INT 22
28335: PUSH
28336: LD_INT 72
28338: PUSH
28339: LD_INT 26
28341: PUSH
28342: LD_INT 69
28344: PUSH
28345: LD_INT 39
28347: PUSH
28348: LD_INT 40
28350: PUSH
28351: LD_INT 41
28353: PUSH
28354: LD_INT 42
28356: PUSH
28357: LD_INT 43
28359: PUSH
28360: LD_INT 48
28362: PUSH
28363: LD_INT 49
28365: PUSH
28366: LD_INT 50
28368: PUSH
28369: LD_INT 51
28371: PUSH
28372: LD_INT 52
28374: PUSH
28375: LD_INT 53
28377: PUSH
28378: LD_INT 54
28380: PUSH
28381: LD_INT 55
28383: PUSH
28384: LD_INT 56
28386: PUSH
28387: LD_INT 60
28389: PUSH
28390: LD_INT 61
28392: PUSH
28393: LD_INT 62
28395: PUSH
28396: LD_INT 66
28398: PUSH
28399: LD_INT 67
28401: PUSH
28402: LD_INT 68
28404: PUSH
28405: LD_INT 81
28407: PUSH
28408: LD_INT 82
28410: PUSH
28411: LD_INT 83
28413: PUSH
28414: LD_INT 84
28416: PUSH
28417: LD_INT 85
28419: PUSH
28420: LD_INT 87
28422: PUSH
28423: LD_INT 88
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: ST_TO_ADDR
28482: GO 28715
28484: LD_INT 3
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28714
28492: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28493: LD_ADDR_VAR 0 4
28497: PUSH
28498: LD_INT 46
28500: PUSH
28501: LD_INT 47
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: LD_INT 82
28512: PUSH
28513: LD_INT 83
28515: PUSH
28516: LD_INT 84
28518: PUSH
28519: LD_INT 85
28521: PUSH
28522: LD_INT 86
28524: PUSH
28525: LD_INT 11
28527: PUSH
28528: LD_INT 9
28530: PUSH
28531: LD_INT 20
28533: PUSH
28534: LD_INT 19
28536: PUSH
28537: LD_INT 21
28539: PUSH
28540: LD_INT 24
28542: PUSH
28543: LD_INT 22
28545: PUSH
28546: LD_INT 25
28548: PUSH
28549: LD_INT 28
28551: PUSH
28552: LD_INT 29
28554: PUSH
28555: LD_INT 30
28557: PUSH
28558: LD_INT 31
28560: PUSH
28561: LD_INT 37
28563: PUSH
28564: LD_INT 38
28566: PUSH
28567: LD_INT 32
28569: PUSH
28570: LD_INT 27
28572: PUSH
28573: LD_INT 33
28575: PUSH
28576: LD_INT 69
28578: PUSH
28579: LD_INT 39
28581: PUSH
28582: LD_INT 34
28584: PUSH
28585: LD_INT 40
28587: PUSH
28588: LD_INT 71
28590: PUSH
28591: LD_INT 23
28593: PUSH
28594: LD_INT 44
28596: PUSH
28597: LD_INT 48
28599: PUSH
28600: LD_INT 49
28602: PUSH
28603: LD_INT 50
28605: PUSH
28606: LD_INT 51
28608: PUSH
28609: LD_INT 52
28611: PUSH
28612: LD_INT 53
28614: PUSH
28615: LD_INT 54
28617: PUSH
28618: LD_INT 55
28620: PUSH
28621: LD_INT 56
28623: PUSH
28624: LD_INT 57
28626: PUSH
28627: LD_INT 58
28629: PUSH
28630: LD_INT 59
28632: PUSH
28633: LD_INT 63
28635: PUSH
28636: LD_INT 64
28638: PUSH
28639: LD_INT 65
28641: PUSH
28642: LD_INT 82
28644: PUSH
28645: LD_INT 83
28647: PUSH
28648: LD_INT 84
28650: PUSH
28651: LD_INT 85
28653: PUSH
28654: LD_INT 86
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: ST_TO_ADDR
28712: GO 28715
28714: POP
// if state > - 1 and state < 3 then
28715: LD_VAR 0 3
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: GREATER
28724: PUSH
28725: LD_VAR 0 3
28729: PUSH
28730: LD_INT 3
28732: LESS
28733: AND
28734: IFFALSE 28791
// for i in result do
28736: LD_ADDR_VAR 0 5
28740: PUSH
28741: LD_VAR 0 4
28745: PUSH
28746: FOR_IN
28747: IFFALSE 28789
// if GetTech ( i , side ) <> state then
28749: LD_VAR 0 5
28753: PPUSH
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL_OW 321
28763: PUSH
28764: LD_VAR 0 3
28768: NONEQUAL
28769: IFFALSE 28787
// result := result diff i ;
28771: LD_ADDR_VAR 0 4
28775: PUSH
28776: LD_VAR 0 4
28780: PUSH
28781: LD_VAR 0 5
28785: DIFF
28786: ST_TO_ADDR
28787: GO 28746
28789: POP
28790: POP
// end ;
28791: LD_VAR 0 4
28795: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28796: LD_INT 0
28798: PPUSH
28799: PPUSH
28800: PPUSH
// result := true ;
28801: LD_ADDR_VAR 0 3
28805: PUSH
28806: LD_INT 1
28808: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28809: LD_ADDR_VAR 0 5
28813: PUSH
28814: LD_VAR 0 2
28818: PPUSH
28819: CALL_OW 480
28823: ST_TO_ADDR
// if not tmp then
28824: LD_VAR 0 5
28828: NOT
28829: IFFALSE 28833
// exit ;
28831: GO 28882
// for i in tmp do
28833: LD_ADDR_VAR 0 4
28837: PUSH
28838: LD_VAR 0 5
28842: PUSH
28843: FOR_IN
28844: IFFALSE 28880
// if GetTech ( i , side ) <> state_researched then
28846: LD_VAR 0 4
28850: PPUSH
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 321
28860: PUSH
28861: LD_INT 2
28863: NONEQUAL
28864: IFFALSE 28878
// begin result := false ;
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 0
28873: ST_TO_ADDR
// exit ;
28874: POP
28875: POP
28876: GO 28882
// end ;
28878: GO 28843
28880: POP
28881: POP
// end ;
28882: LD_VAR 0 3
28886: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28887: LD_INT 0
28889: PPUSH
28890: PPUSH
28891: PPUSH
28892: PPUSH
28893: PPUSH
28894: PPUSH
28895: PPUSH
28896: PPUSH
28897: PPUSH
28898: PPUSH
28899: PPUSH
28900: PPUSH
28901: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28902: LD_VAR 0 1
28906: NOT
28907: PUSH
28908: LD_VAR 0 1
28912: PPUSH
28913: CALL_OW 257
28917: PUSH
28918: LD_INT 9
28920: NONEQUAL
28921: OR
28922: IFFALSE 28926
// exit ;
28924: GO 29499
// side := GetSide ( unit ) ;
28926: LD_ADDR_VAR 0 9
28930: PUSH
28931: LD_VAR 0 1
28935: PPUSH
28936: CALL_OW 255
28940: ST_TO_ADDR
// tech_space := tech_spacanom ;
28941: LD_ADDR_VAR 0 12
28945: PUSH
28946: LD_INT 29
28948: ST_TO_ADDR
// tech_time := tech_taurad ;
28949: LD_ADDR_VAR 0 13
28953: PUSH
28954: LD_INT 28
28956: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28957: LD_ADDR_VAR 0 11
28961: PUSH
28962: LD_VAR 0 1
28966: PPUSH
28967: CALL_OW 310
28971: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28972: LD_VAR 0 11
28976: PPUSH
28977: CALL_OW 247
28981: PUSH
28982: LD_INT 2
28984: EQUAL
28985: IFFALSE 28989
// exit ;
28987: GO 29499
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28989: LD_ADDR_VAR 0 8
28993: PUSH
28994: LD_INT 81
28996: PUSH
28997: LD_VAR 0 9
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 3
29008: PUSH
29009: LD_INT 21
29011: PUSH
29012: LD_INT 3
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PPUSH
29027: CALL_OW 69
29031: ST_TO_ADDR
// if not tmp then
29032: LD_VAR 0 8
29036: NOT
29037: IFFALSE 29041
// exit ;
29039: GO 29499
// if in_unit then
29041: LD_VAR 0 11
29045: IFFALSE 29069
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29047: LD_ADDR_VAR 0 10
29051: PUSH
29052: LD_VAR 0 8
29056: PPUSH
29057: LD_VAR 0 11
29061: PPUSH
29062: CALL_OW 74
29066: ST_TO_ADDR
29067: GO 29089
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29069: LD_ADDR_VAR 0 10
29073: PUSH
29074: LD_VAR 0 8
29078: PPUSH
29079: LD_VAR 0 1
29083: PPUSH
29084: CALL_OW 74
29088: ST_TO_ADDR
// if not enemy then
29089: LD_VAR 0 10
29093: NOT
29094: IFFALSE 29098
// exit ;
29096: GO 29499
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29098: LD_VAR 0 11
29102: PUSH
29103: LD_VAR 0 11
29107: PPUSH
29108: LD_VAR 0 10
29112: PPUSH
29113: CALL_OW 296
29117: PUSH
29118: LD_INT 13
29120: GREATER
29121: AND
29122: PUSH
29123: LD_VAR 0 1
29127: PPUSH
29128: LD_VAR 0 10
29132: PPUSH
29133: CALL_OW 296
29137: PUSH
29138: LD_INT 12
29140: GREATER
29141: OR
29142: IFFALSE 29146
// exit ;
29144: GO 29499
// missile := [ 1 ] ;
29146: LD_ADDR_VAR 0 14
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29157: LD_VAR 0 9
29161: PPUSH
29162: LD_VAR 0 12
29166: PPUSH
29167: CALL_OW 325
29171: IFFALSE 29200
// missile := Insert ( missile , missile + 1 , 2 ) ;
29173: LD_ADDR_VAR 0 14
29177: PUSH
29178: LD_VAR 0 14
29182: PPUSH
29183: LD_VAR 0 14
29187: PUSH
29188: LD_INT 1
29190: PLUS
29191: PPUSH
29192: LD_INT 2
29194: PPUSH
29195: CALL_OW 2
29199: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29200: LD_VAR 0 9
29204: PPUSH
29205: LD_VAR 0 13
29209: PPUSH
29210: CALL_OW 325
29214: PUSH
29215: LD_VAR 0 10
29219: PPUSH
29220: CALL_OW 255
29224: PPUSH
29225: LD_VAR 0 13
29229: PPUSH
29230: CALL_OW 325
29234: NOT
29235: AND
29236: IFFALSE 29265
// missile := Insert ( missile , missile + 1 , 3 ) ;
29238: LD_ADDR_VAR 0 14
29242: PUSH
29243: LD_VAR 0 14
29247: PPUSH
29248: LD_VAR 0 14
29252: PUSH
29253: LD_INT 1
29255: PLUS
29256: PPUSH
29257: LD_INT 3
29259: PPUSH
29260: CALL_OW 2
29264: ST_TO_ADDR
// if missile < 2 then
29265: LD_VAR 0 14
29269: PUSH
29270: LD_INT 2
29272: LESS
29273: IFFALSE 29277
// exit ;
29275: GO 29499
// x := GetX ( enemy ) ;
29277: LD_ADDR_VAR 0 4
29281: PUSH
29282: LD_VAR 0 10
29286: PPUSH
29287: CALL_OW 250
29291: ST_TO_ADDR
// y := GetY ( enemy ) ;
29292: LD_ADDR_VAR 0 5
29296: PUSH
29297: LD_VAR 0 10
29301: PPUSH
29302: CALL_OW 251
29306: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29307: LD_ADDR_VAR 0 6
29311: PUSH
29312: LD_VAR 0 4
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PPUSH
29321: LD_INT 1
29323: PPUSH
29324: CALL_OW 12
29328: PLUS
29329: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29330: LD_ADDR_VAR 0 7
29334: PUSH
29335: LD_VAR 0 5
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PPUSH
29344: LD_INT 1
29346: PPUSH
29347: CALL_OW 12
29351: PLUS
29352: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29353: LD_VAR 0 6
29357: PPUSH
29358: LD_VAR 0 7
29362: PPUSH
29363: CALL_OW 488
29367: NOT
29368: IFFALSE 29390
// begin _x := x ;
29370: LD_ADDR_VAR 0 6
29374: PUSH
29375: LD_VAR 0 4
29379: ST_TO_ADDR
// _y := y ;
29380: LD_ADDR_VAR 0 7
29384: PUSH
29385: LD_VAR 0 5
29389: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29390: LD_ADDR_VAR 0 3
29394: PUSH
29395: LD_INT 1
29397: PPUSH
29398: LD_VAR 0 14
29402: PPUSH
29403: CALL_OW 12
29407: ST_TO_ADDR
// case i of 1 :
29408: LD_VAR 0 3
29412: PUSH
29413: LD_INT 1
29415: DOUBLE
29416: EQUAL
29417: IFTRUE 29421
29419: GO 29438
29421: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29422: LD_VAR 0 1
29426: PPUSH
29427: LD_VAR 0 10
29431: PPUSH
29432: CALL_OW 115
29436: GO 29499
29438: LD_INT 2
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29446
29444: GO 29468
29446: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29447: LD_VAR 0 1
29451: PPUSH
29452: LD_VAR 0 6
29456: PPUSH
29457: LD_VAR 0 7
29461: PPUSH
29462: CALL_OW 153
29466: GO 29499
29468: LD_INT 3
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29476
29474: GO 29498
29476: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_VAR 0 6
29486: PPUSH
29487: LD_VAR 0 7
29491: PPUSH
29492: CALL_OW 154
29496: GO 29499
29498: POP
// end ;
29499: LD_VAR 0 2
29503: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29504: LD_INT 0
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
// if not unit or not building then
29512: LD_VAR 0 1
29516: NOT
29517: PUSH
29518: LD_VAR 0 2
29522: NOT
29523: OR
29524: IFFALSE 29528
// exit ;
29526: GO 29686
// x := GetX ( building ) ;
29528: LD_ADDR_VAR 0 5
29532: PUSH
29533: LD_VAR 0 2
29537: PPUSH
29538: CALL_OW 250
29542: ST_TO_ADDR
// y := GetY ( building ) ;
29543: LD_ADDR_VAR 0 6
29547: PUSH
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 251
29557: ST_TO_ADDR
// for i = 0 to 5 do
29558: LD_ADDR_VAR 0 4
29562: PUSH
29563: DOUBLE
29564: LD_INT 0
29566: DEC
29567: ST_TO_ADDR
29568: LD_INT 5
29570: PUSH
29571: FOR_TO
29572: IFFALSE 29684
// begin _x := ShiftX ( x , i , 3 ) ;
29574: LD_ADDR_VAR 0 7
29578: PUSH
29579: LD_VAR 0 5
29583: PPUSH
29584: LD_VAR 0 4
29588: PPUSH
29589: LD_INT 3
29591: PPUSH
29592: CALL_OW 272
29596: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29597: LD_ADDR_VAR 0 8
29601: PUSH
29602: LD_VAR 0 6
29606: PPUSH
29607: LD_VAR 0 4
29611: PPUSH
29612: LD_INT 3
29614: PPUSH
29615: CALL_OW 273
29619: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29620: LD_VAR 0 7
29624: PPUSH
29625: LD_VAR 0 8
29629: PPUSH
29630: CALL_OW 488
29634: NOT
29635: IFFALSE 29639
// continue ;
29637: GO 29571
// if HexInfo ( _x , _y ) = 0 then
29639: LD_VAR 0 7
29643: PPUSH
29644: LD_VAR 0 8
29648: PPUSH
29649: CALL_OW 428
29653: PUSH
29654: LD_INT 0
29656: EQUAL
29657: IFFALSE 29682
// begin ComMoveXY ( unit , _x , _y ) ;
29659: LD_VAR 0 1
29663: PPUSH
29664: LD_VAR 0 7
29668: PPUSH
29669: LD_VAR 0 8
29673: PPUSH
29674: CALL_OW 111
// exit ;
29678: POP
29679: POP
29680: GO 29686
// end ; end ;
29682: GO 29571
29684: POP
29685: POP
// end ;
29686: LD_VAR 0 3
29690: RET
// export function ScanBase ( side , base_area ) ; begin
29691: LD_INT 0
29693: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29694: LD_ADDR_VAR 0 3
29698: PUSH
29699: LD_VAR 0 2
29703: PPUSH
29704: LD_INT 81
29706: PUSH
29707: LD_VAR 0 1
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PPUSH
29716: CALL_OW 70
29720: ST_TO_ADDR
// end ;
29721: LD_VAR 0 3
29725: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29726: LD_INT 0
29728: PPUSH
29729: PPUSH
29730: PPUSH
29731: PPUSH
// result := false ;
29732: LD_ADDR_VAR 0 2
29736: PUSH
29737: LD_INT 0
29739: ST_TO_ADDR
// side := GetSide ( unit ) ;
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL_OW 255
29754: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29755: LD_ADDR_VAR 0 4
29759: PUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: CALL_OW 248
29769: ST_TO_ADDR
// case nat of 1 :
29770: LD_VAR 0 4
29774: PUSH
29775: LD_INT 1
29777: DOUBLE
29778: EQUAL
29779: IFTRUE 29783
29781: GO 29794
29783: POP
// tech := tech_lassight ; 2 :
29784: LD_ADDR_VAR 0 5
29788: PUSH
29789: LD_INT 12
29791: ST_TO_ADDR
29792: GO 29833
29794: LD_INT 2
29796: DOUBLE
29797: EQUAL
29798: IFTRUE 29802
29800: GO 29813
29802: POP
// tech := tech_mortar ; 3 :
29803: LD_ADDR_VAR 0 5
29807: PUSH
29808: LD_INT 41
29810: ST_TO_ADDR
29811: GO 29833
29813: LD_INT 3
29815: DOUBLE
29816: EQUAL
29817: IFTRUE 29821
29819: GO 29832
29821: POP
// tech := tech_bazooka ; end ;
29822: LD_ADDR_VAR 0 5
29826: PUSH
29827: LD_INT 44
29829: ST_TO_ADDR
29830: GO 29833
29832: POP
// if Researched ( side , tech ) then
29833: LD_VAR 0 3
29837: PPUSH
29838: LD_VAR 0 5
29842: PPUSH
29843: CALL_OW 325
29847: IFFALSE 29874
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29849: LD_ADDR_VAR 0 2
29853: PUSH
29854: LD_INT 5
29856: PUSH
29857: LD_INT 8
29859: PUSH
29860: LD_INT 9
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: PUSH
29868: LD_VAR 0 4
29872: ARRAY
29873: ST_TO_ADDR
// end ;
29874: LD_VAR 0 2
29878: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
29883: PPUSH
// if not mines then
29884: LD_VAR 0 2
29888: NOT
29889: IFFALSE 29893
// exit ;
29891: GO 30037
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29893: LD_ADDR_VAR 0 5
29897: PUSH
29898: LD_INT 81
29900: PUSH
29901: LD_VAR 0 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: LD_INT 21
29915: PUSH
29916: LD_INT 3
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PPUSH
29931: CALL_OW 69
29935: ST_TO_ADDR
// for i in mines do
29936: LD_ADDR_VAR 0 4
29940: PUSH
29941: LD_VAR 0 2
29945: PUSH
29946: FOR_IN
29947: IFFALSE 30035
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29949: LD_VAR 0 4
29953: PUSH
29954: LD_INT 1
29956: ARRAY
29957: PPUSH
29958: LD_VAR 0 4
29962: PUSH
29963: LD_INT 2
29965: ARRAY
29966: PPUSH
29967: CALL_OW 458
29971: NOT
29972: IFFALSE 29976
// continue ;
29974: GO 29946
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29976: LD_VAR 0 4
29980: PUSH
29981: LD_INT 1
29983: ARRAY
29984: PPUSH
29985: LD_VAR 0 4
29989: PUSH
29990: LD_INT 2
29992: ARRAY
29993: PPUSH
29994: CALL_OW 428
29998: PUSH
29999: LD_VAR 0 5
30003: IN
30004: IFFALSE 30033
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30006: LD_VAR 0 4
30010: PUSH
30011: LD_INT 1
30013: ARRAY
30014: PPUSH
30015: LD_VAR 0 4
30019: PUSH
30020: LD_INT 2
30022: ARRAY
30023: PPUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 456
// end ;
30033: GO 29946
30035: POP
30036: POP
// end ;
30037: LD_VAR 0 3
30041: RET
// export function Count ( array ) ; var i ; begin
30042: LD_INT 0
30044: PPUSH
30045: PPUSH
// result := 0 ;
30046: LD_ADDR_VAR 0 2
30050: PUSH
30051: LD_INT 0
30053: ST_TO_ADDR
// for i in array do
30054: LD_ADDR_VAR 0 3
30058: PUSH
30059: LD_VAR 0 1
30063: PUSH
30064: FOR_IN
30065: IFFALSE 30089
// if i then
30067: LD_VAR 0 3
30071: IFFALSE 30087
// result := result + 1 ;
30073: LD_ADDR_VAR 0 2
30077: PUSH
30078: LD_VAR 0 2
30082: PUSH
30083: LD_INT 1
30085: PLUS
30086: ST_TO_ADDR
30087: GO 30064
30089: POP
30090: POP
// end ;
30091: LD_VAR 0 2
30095: RET
// export function IsEmpty ( building ) ; begin
30096: LD_INT 0
30098: PPUSH
// if not building then
30099: LD_VAR 0 1
30103: NOT
30104: IFFALSE 30108
// exit ;
30106: GO 30151
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30108: LD_ADDR_VAR 0 2
30112: PUSH
30113: LD_VAR 0 1
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_VAR 0 1
30125: PPUSH
30126: CALL_OW 255
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 58
30137: PUSH
30138: EMPTY
30139: LIST
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PPUSH
30145: CALL_OW 69
30149: IN
30150: ST_TO_ADDR
// end ;
30151: LD_VAR 0 2
30155: RET
// export function IsNotFull ( building ) ; begin
30156: LD_INT 0
30158: PPUSH
// if not building then
30159: LD_VAR 0 1
30163: NOT
30164: IFFALSE 30168
// exit ;
30166: GO 30187
// result := UnitsInside ( building ) < 6 ;
30168: LD_ADDR_VAR 0 2
30172: PUSH
30173: LD_VAR 0 1
30177: PPUSH
30178: CALL_OW 313
30182: PUSH
30183: LD_INT 6
30185: LESS
30186: ST_TO_ADDR
// end ;
30187: LD_VAR 0 2
30191: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30192: LD_INT 0
30194: PPUSH
30195: PPUSH
30196: PPUSH
30197: PPUSH
// tmp := [ ] ;
30198: LD_ADDR_VAR 0 3
30202: PUSH
30203: EMPTY
30204: ST_TO_ADDR
// list := [ ] ;
30205: LD_ADDR_VAR 0 5
30209: PUSH
30210: EMPTY
30211: ST_TO_ADDR
// for i = 16 to 25 do
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: DOUBLE
30218: LD_INT 16
30220: DEC
30221: ST_TO_ADDR
30222: LD_INT 25
30224: PUSH
30225: FOR_TO
30226: IFFALSE 30299
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30228: LD_ADDR_VAR 0 3
30232: PUSH
30233: LD_VAR 0 3
30237: PUSH
30238: LD_INT 22
30240: PUSH
30241: LD_VAR 0 1
30245: PPUSH
30246: CALL_OW 255
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 91
30257: PUSH
30258: LD_VAR 0 1
30262: PUSH
30263: LD_INT 6
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 30
30273: PUSH
30274: LD_VAR 0 4
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: ADD
30296: ST_TO_ADDR
30297: GO 30225
30299: POP
30300: POP
// for i = 1 to tmp do
30301: LD_ADDR_VAR 0 4
30305: PUSH
30306: DOUBLE
30307: LD_INT 1
30309: DEC
30310: ST_TO_ADDR
30311: LD_VAR 0 3
30315: PUSH
30316: FOR_TO
30317: IFFALSE 30405
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30319: LD_ADDR_VAR 0 5
30323: PUSH
30324: LD_VAR 0 5
30328: PUSH
30329: LD_VAR 0 3
30333: PUSH
30334: LD_VAR 0 4
30338: ARRAY
30339: PPUSH
30340: CALL_OW 266
30344: PUSH
30345: LD_VAR 0 3
30349: PUSH
30350: LD_VAR 0 4
30354: ARRAY
30355: PPUSH
30356: CALL_OW 250
30360: PUSH
30361: LD_VAR 0 3
30365: PUSH
30366: LD_VAR 0 4
30370: ARRAY
30371: PPUSH
30372: CALL_OW 251
30376: PUSH
30377: LD_VAR 0 3
30381: PUSH
30382: LD_VAR 0 4
30386: ARRAY
30387: PPUSH
30388: CALL_OW 254
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: ADD
30402: ST_TO_ADDR
30403: GO 30316
30405: POP
30406: POP
// result := list ;
30407: LD_ADDR_VAR 0 2
30411: PUSH
30412: LD_VAR 0 5
30416: ST_TO_ADDR
// end ;
30417: LD_VAR 0 2
30421: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30422: LD_INT 0
30424: PPUSH
30425: PPUSH
30426: PPUSH
30427: PPUSH
30428: PPUSH
30429: PPUSH
30430: PPUSH
// if not factory then
30431: LD_VAR 0 1
30435: NOT
30436: IFFALSE 30440
// exit ;
30438: GO 31033
// if control = control_apeman then
30440: LD_VAR 0 4
30444: PUSH
30445: LD_INT 5
30447: EQUAL
30448: IFFALSE 30557
// begin tmp := UnitsInside ( factory ) ;
30450: LD_ADDR_VAR 0 8
30454: PUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: CALL_OW 313
30464: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30465: LD_VAR 0 8
30469: PPUSH
30470: LD_INT 25
30472: PUSH
30473: LD_INT 12
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PPUSH
30480: CALL_OW 72
30484: NOT
30485: IFFALSE 30495
// control := control_manual ;
30487: LD_ADDR_VAR 0 4
30491: PUSH
30492: LD_INT 1
30494: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30495: LD_ADDR_VAR 0 8
30499: PUSH
30500: LD_VAR 0 1
30504: PPUSH
30505: CALL 30192 0 1
30509: ST_TO_ADDR
// if tmp then
30510: LD_VAR 0 8
30514: IFFALSE 30557
// begin for i in tmp do
30516: LD_ADDR_VAR 0 7
30520: PUSH
30521: LD_VAR 0 8
30525: PUSH
30526: FOR_IN
30527: IFFALSE 30555
// if i [ 1 ] = b_ext_radio then
30529: LD_VAR 0 7
30533: PUSH
30534: LD_INT 1
30536: ARRAY
30537: PUSH
30538: LD_INT 22
30540: EQUAL
30541: IFFALSE 30553
// begin control := control_remote ;
30543: LD_ADDR_VAR 0 4
30547: PUSH
30548: LD_INT 2
30550: ST_TO_ADDR
// break ;
30551: GO 30555
// end ;
30553: GO 30526
30555: POP
30556: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30557: LD_VAR 0 1
30561: PPUSH
30562: LD_VAR 0 2
30566: PPUSH
30567: LD_VAR 0 3
30571: PPUSH
30572: LD_VAR 0 4
30576: PPUSH
30577: LD_VAR 0 5
30581: PPUSH
30582: CALL_OW 448
30586: IFFALSE 30621
// begin result := [ chassis , engine , control , weapon ] ;
30588: LD_ADDR_VAR 0 6
30592: PUSH
30593: LD_VAR 0 2
30597: PUSH
30598: LD_VAR 0 3
30602: PUSH
30603: LD_VAR 0 4
30607: PUSH
30608: LD_VAR 0 5
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
// exit ;
30619: GO 31033
// end ; _chassis := AvailableChassisList ( factory ) ;
30621: LD_ADDR_VAR 0 9
30625: PUSH
30626: LD_VAR 0 1
30630: PPUSH
30631: CALL_OW 475
30635: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30636: LD_ADDR_VAR 0 11
30640: PUSH
30641: LD_VAR 0 1
30645: PPUSH
30646: CALL_OW 476
30650: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30651: LD_ADDR_VAR 0 12
30655: PUSH
30656: LD_VAR 0 1
30660: PPUSH
30661: CALL_OW 477
30665: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30666: LD_ADDR_VAR 0 10
30670: PUSH
30671: LD_VAR 0 1
30675: PPUSH
30676: CALL_OW 478
30680: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30681: LD_VAR 0 9
30685: NOT
30686: PUSH
30687: LD_VAR 0 11
30691: NOT
30692: OR
30693: PUSH
30694: LD_VAR 0 12
30698: NOT
30699: OR
30700: PUSH
30701: LD_VAR 0 10
30705: NOT
30706: OR
30707: IFFALSE 30742
// begin result := [ chassis , engine , control , weapon ] ;
30709: LD_ADDR_VAR 0 6
30713: PUSH
30714: LD_VAR 0 2
30718: PUSH
30719: LD_VAR 0 3
30723: PUSH
30724: LD_VAR 0 4
30728: PUSH
30729: LD_VAR 0 5
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
// exit ;
30740: GO 31033
// end ; if not chassis in _chassis then
30742: LD_VAR 0 2
30746: PUSH
30747: LD_VAR 0 9
30751: IN
30752: NOT
30753: IFFALSE 30779
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30755: LD_ADDR_VAR 0 2
30759: PUSH
30760: LD_VAR 0 9
30764: PUSH
30765: LD_INT 1
30767: PPUSH
30768: LD_VAR 0 9
30772: PPUSH
30773: CALL_OW 12
30777: ARRAY
30778: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30779: LD_VAR 0 2
30783: PPUSH
30784: LD_VAR 0 3
30788: PPUSH
30789: CALL 31038 0 2
30793: NOT
30794: IFFALSE 30853
// repeat engine := _engine [ 1 ] ;
30796: LD_ADDR_VAR 0 3
30800: PUSH
30801: LD_VAR 0 11
30805: PUSH
30806: LD_INT 1
30808: ARRAY
30809: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30810: LD_ADDR_VAR 0 11
30814: PUSH
30815: LD_VAR 0 11
30819: PPUSH
30820: LD_INT 1
30822: PPUSH
30823: CALL_OW 3
30827: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30828: LD_VAR 0 2
30832: PPUSH
30833: LD_VAR 0 3
30837: PPUSH
30838: CALL 31038 0 2
30842: PUSH
30843: LD_VAR 0 11
30847: PUSH
30848: EMPTY
30849: EQUAL
30850: OR
30851: IFFALSE 30796
// if not control in _control then
30853: LD_VAR 0 4
30857: PUSH
30858: LD_VAR 0 12
30862: IN
30863: NOT
30864: IFFALSE 30890
// control := _control [ rand ( 1 , _control ) ] ;
30866: LD_ADDR_VAR 0 4
30870: PUSH
30871: LD_VAR 0 12
30875: PUSH
30876: LD_INT 1
30878: PPUSH
30879: LD_VAR 0 12
30883: PPUSH
30884: CALL_OW 12
30888: ARRAY
30889: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30890: LD_VAR 0 2
30894: PPUSH
30895: LD_VAR 0 5
30899: PPUSH
30900: CALL 31258 0 2
30904: NOT
30905: IFFALSE 30964
// repeat weapon := _weapon [ 1 ] ;
30907: LD_ADDR_VAR 0 5
30911: PUSH
30912: LD_VAR 0 10
30916: PUSH
30917: LD_INT 1
30919: ARRAY
30920: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30921: LD_ADDR_VAR 0 10
30925: PUSH
30926: LD_VAR 0 10
30930: PPUSH
30931: LD_INT 1
30933: PPUSH
30934: CALL_OW 3
30938: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30939: LD_VAR 0 2
30943: PPUSH
30944: LD_VAR 0 5
30948: PPUSH
30949: CALL 31258 0 2
30953: PUSH
30954: LD_VAR 0 10
30958: PUSH
30959: EMPTY
30960: EQUAL
30961: OR
30962: IFFALSE 30907
// result := [ ] ;
30964: LD_ADDR_VAR 0 6
30968: PUSH
30969: EMPTY
30970: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30971: LD_VAR 0 1
30975: PPUSH
30976: LD_VAR 0 2
30980: PPUSH
30981: LD_VAR 0 3
30985: PPUSH
30986: LD_VAR 0 4
30990: PPUSH
30991: LD_VAR 0 5
30995: PPUSH
30996: CALL_OW 448
31000: IFFALSE 31033
// result := [ chassis , engine , control , weapon ] ;
31002: LD_ADDR_VAR 0 6
31006: PUSH
31007: LD_VAR 0 2
31011: PUSH
31012: LD_VAR 0 3
31016: PUSH
31017: LD_VAR 0 4
31021: PUSH
31022: LD_VAR 0 5
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// end ;
31033: LD_VAR 0 6
31037: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31038: LD_INT 0
31040: PPUSH
// if not chassis or not engine then
31041: LD_VAR 0 1
31045: NOT
31046: PUSH
31047: LD_VAR 0 2
31051: NOT
31052: OR
31053: IFFALSE 31057
// exit ;
31055: GO 31253
// case engine of engine_solar :
31057: LD_VAR 0 2
31061: PUSH
31062: LD_INT 2
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31108
31070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_INT 11
31078: PUSH
31079: LD_INT 12
31081: PUSH
31082: LD_INT 13
31084: PUSH
31085: LD_INT 14
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: LD_INT 3
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: ST_TO_ADDR
31106: GO 31237
31108: LD_INT 1
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31178
31116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: LD_INT 11
31124: PUSH
31125: LD_INT 12
31127: PUSH
31128: LD_INT 13
31130: PUSH
31131: LD_INT 14
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 2
31139: PUSH
31140: LD_INT 3
31142: PUSH
31143: LD_INT 4
31145: PUSH
31146: LD_INT 5
31148: PUSH
31149: LD_INT 21
31151: PUSH
31152: LD_INT 23
31154: PUSH
31155: LD_INT 22
31157: PUSH
31158: LD_INT 24
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
31176: GO 31237
31178: LD_INT 3
31180: DOUBLE
31181: EQUAL
31182: IFTRUE 31186
31184: GO 31236
31186: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31187: LD_ADDR_VAR 0 3
31191: PUSH
31192: LD_INT 13
31194: PUSH
31195: LD_INT 14
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: LD_INT 4
31206: PUSH
31207: LD_INT 5
31209: PUSH
31210: LD_INT 21
31212: PUSH
31213: LD_INT 22
31215: PUSH
31216: LD_INT 23
31218: PUSH
31219: LD_INT 24
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: ST_TO_ADDR
31234: GO 31237
31236: POP
// result := ( chassis in result ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 1
31246: PUSH
31247: LD_VAR 0 3
31251: IN
31252: ST_TO_ADDR
// end ;
31253: LD_VAR 0 3
31257: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31258: LD_INT 0
31260: PPUSH
// if not chassis or not weapon then
31261: LD_VAR 0 1
31265: NOT
31266: PUSH
31267: LD_VAR 0 2
31271: NOT
31272: OR
31273: IFFALSE 31277
// exit ;
31275: GO 32339
// case weapon of us_machine_gun :
31277: LD_VAR 0 2
31281: PUSH
31282: LD_INT 2
31284: DOUBLE
31285: EQUAL
31286: IFTRUE 31290
31288: GO 31320
31290: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31291: LD_ADDR_VAR 0 3
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 4
31307: PUSH
31308: LD_INT 5
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
31318: GO 32323
31320: LD_INT 3
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31358
31328: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: LD_INT 3
31342: PUSH
31343: LD_INT 4
31345: PUSH
31346: LD_INT 5
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
31356: GO 32323
31358: LD_INT 11
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31396
31366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31367: LD_ADDR_VAR 0 3
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: LD_INT 4
31383: PUSH
31384: LD_INT 5
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: ST_TO_ADDR
31394: GO 32323
31396: LD_INT 4
31398: DOUBLE
31399: EQUAL
31400: IFTRUE 31404
31402: GO 31430
31404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31405: LD_ADDR_VAR 0 3
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: LD_INT 4
31418: PUSH
31419: LD_INT 5
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: ST_TO_ADDR
31428: GO 32323
31430: LD_INT 5
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31438
31436: GO 31464
31438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31439: LD_ADDR_VAR 0 3
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 3
31449: PUSH
31450: LD_INT 4
31452: PUSH
31453: LD_INT 5
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: ST_TO_ADDR
31462: GO 32323
31464: LD_INT 9
31466: DOUBLE
31467: EQUAL
31468: IFTRUE 31472
31470: GO 31498
31472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31473: LD_ADDR_VAR 0 3
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: LD_INT 4
31486: PUSH
31487: LD_INT 5
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: ST_TO_ADDR
31496: GO 32323
31498: LD_INT 7
31500: DOUBLE
31501: EQUAL
31502: IFTRUE 31506
31504: GO 31532
31506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 3
31517: PUSH
31518: LD_INT 4
31520: PUSH
31521: LD_INT 5
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: ST_TO_ADDR
31530: GO 32323
31532: LD_INT 12
31534: DOUBLE
31535: EQUAL
31536: IFTRUE 31540
31538: GO 31566
31540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31541: LD_ADDR_VAR 0 3
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: LD_INT 3
31551: PUSH
31552: LD_INT 4
31554: PUSH
31555: LD_INT 5
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
31564: GO 32323
31566: LD_INT 13
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31600
31574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: LD_INT 3
31585: PUSH
31586: LD_INT 4
31588: PUSH
31589: LD_INT 5
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
31598: GO 32323
31600: LD_INT 14
31602: DOUBLE
31603: EQUAL
31604: IFTRUE 31608
31606: GO 31626
31608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31609: LD_ADDR_VAR 0 3
31613: PUSH
31614: LD_INT 4
31616: PUSH
31617: LD_INT 5
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: ST_TO_ADDR
31624: GO 32323
31626: LD_INT 6
31628: DOUBLE
31629: EQUAL
31630: IFTRUE 31634
31632: GO 31652
31634: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31635: LD_ADDR_VAR 0 3
31639: PUSH
31640: LD_INT 4
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: ST_TO_ADDR
31650: GO 32323
31652: LD_INT 10
31654: DOUBLE
31655: EQUAL
31656: IFTRUE 31660
31658: GO 31678
31660: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31661: LD_ADDR_VAR 0 3
31665: PUSH
31666: LD_INT 4
31668: PUSH
31669: LD_INT 5
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: ST_TO_ADDR
31676: GO 32323
31678: LD_INT 22
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31712
31686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31687: LD_ADDR_VAR 0 3
31691: PUSH
31692: LD_INT 11
31694: PUSH
31695: LD_INT 12
31697: PUSH
31698: LD_INT 13
31700: PUSH
31701: LD_INT 14
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: ST_TO_ADDR
31710: GO 32323
31712: LD_INT 23
31714: DOUBLE
31715: EQUAL
31716: IFTRUE 31720
31718: GO 31746
31720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31721: LD_ADDR_VAR 0 3
31725: PUSH
31726: LD_INT 11
31728: PUSH
31729: LD_INT 12
31731: PUSH
31732: LD_INT 13
31734: PUSH
31735: LD_INT 14
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: ST_TO_ADDR
31744: GO 32323
31746: LD_INT 24
31748: DOUBLE
31749: EQUAL
31750: IFTRUE 31754
31752: GO 31780
31754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31755: LD_ADDR_VAR 0 3
31759: PUSH
31760: LD_INT 11
31762: PUSH
31763: LD_INT 12
31765: PUSH
31766: LD_INT 13
31768: PUSH
31769: LD_INT 14
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
31778: GO 32323
31780: LD_INT 30
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31788
31786: GO 31814
31788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31789: LD_ADDR_VAR 0 3
31793: PUSH
31794: LD_INT 11
31796: PUSH
31797: LD_INT 12
31799: PUSH
31800: LD_INT 13
31802: PUSH
31803: LD_INT 14
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: ST_TO_ADDR
31812: GO 32323
31814: LD_INT 25
31816: DOUBLE
31817: EQUAL
31818: IFTRUE 31822
31820: GO 31840
31822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31823: LD_ADDR_VAR 0 3
31827: PUSH
31828: LD_INT 13
31830: PUSH
31831: LD_INT 14
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: ST_TO_ADDR
31838: GO 32323
31840: LD_INT 27
31842: DOUBLE
31843: EQUAL
31844: IFTRUE 31848
31846: GO 31866
31848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31849: LD_ADDR_VAR 0 3
31853: PUSH
31854: LD_INT 13
31856: PUSH
31857: LD_INT 14
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: ST_TO_ADDR
31864: GO 32323
31866: LD_EXP 101
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31902
31876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31877: LD_ADDR_VAR 0 3
31881: PUSH
31882: LD_INT 11
31884: PUSH
31885: LD_INT 12
31887: PUSH
31888: LD_INT 13
31890: PUSH
31891: LD_INT 14
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: ST_TO_ADDR
31900: GO 32323
31902: LD_INT 28
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31928
31910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31911: LD_ADDR_VAR 0 3
31915: PUSH
31916: LD_INT 13
31918: PUSH
31919: LD_INT 14
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: ST_TO_ADDR
31926: GO 32323
31928: LD_INT 29
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31936
31934: GO 31954
31936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31937: LD_ADDR_VAR 0 3
31941: PUSH
31942: LD_INT 13
31944: PUSH
31945: LD_INT 14
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: ST_TO_ADDR
31952: GO 32323
31954: LD_INT 31
31956: DOUBLE
31957: EQUAL
31958: IFTRUE 31962
31960: GO 31980
31962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31963: LD_ADDR_VAR 0 3
31967: PUSH
31968: LD_INT 13
31970: PUSH
31971: LD_INT 14
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: ST_TO_ADDR
31978: GO 32323
31980: LD_INT 26
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 32006
31988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31989: LD_ADDR_VAR 0 3
31993: PUSH
31994: LD_INT 13
31996: PUSH
31997: LD_INT 14
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: ST_TO_ADDR
32004: GO 32323
32006: LD_INT 42
32008: DOUBLE
32009: EQUAL
32010: IFTRUE 32014
32012: GO 32040
32014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32015: LD_ADDR_VAR 0 3
32019: PUSH
32020: LD_INT 21
32022: PUSH
32023: LD_INT 22
32025: PUSH
32026: LD_INT 23
32028: PUSH
32029: LD_INT 24
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
32038: GO 32323
32040: LD_INT 43
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32074
32048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_INT 21
32056: PUSH
32057: LD_INT 22
32059: PUSH
32060: LD_INT 23
32062: PUSH
32063: LD_INT 24
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: ST_TO_ADDR
32072: GO 32323
32074: LD_INT 44
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32108
32082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_INT 21
32090: PUSH
32091: LD_INT 22
32093: PUSH
32094: LD_INT 23
32096: PUSH
32097: LD_INT 24
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 32323
32108: LD_INT 45
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32142
32116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 21
32124: PUSH
32125: LD_INT 22
32127: PUSH
32128: LD_INT 23
32130: PUSH
32131: LD_INT 24
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: ST_TO_ADDR
32140: GO 32323
32142: LD_INT 49
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32176
32150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32151: LD_ADDR_VAR 0 3
32155: PUSH
32156: LD_INT 21
32158: PUSH
32159: LD_INT 22
32161: PUSH
32162: LD_INT 23
32164: PUSH
32165: LD_INT 24
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
32174: GO 32323
32176: LD_INT 51
32178: DOUBLE
32179: EQUAL
32180: IFTRUE 32184
32182: GO 32210
32184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32185: LD_ADDR_VAR 0 3
32189: PUSH
32190: LD_INT 21
32192: PUSH
32193: LD_INT 22
32195: PUSH
32196: LD_INT 23
32198: PUSH
32199: LD_INT 24
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
32208: GO 32323
32210: LD_INT 52
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32244
32218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32219: LD_ADDR_VAR 0 3
32223: PUSH
32224: LD_INT 21
32226: PUSH
32227: LD_INT 22
32229: PUSH
32230: LD_INT 23
32232: PUSH
32233: LD_INT 24
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
32242: GO 32323
32244: LD_INT 53
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32270
32252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32253: LD_ADDR_VAR 0 3
32257: PUSH
32258: LD_INT 23
32260: PUSH
32261: LD_INT 24
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: ST_TO_ADDR
32268: GO 32323
32270: LD_INT 46
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32296
32278: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_INT 23
32286: PUSH
32287: LD_INT 24
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: ST_TO_ADDR
32294: GO 32323
32296: LD_INT 47
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32322
32304: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32305: LD_ADDR_VAR 0 3
32309: PUSH
32310: LD_INT 23
32312: PUSH
32313: LD_INT 24
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: ST_TO_ADDR
32320: GO 32323
32322: POP
// result := ( chassis in result ) ;
32323: LD_ADDR_VAR 0 3
32327: PUSH
32328: LD_VAR 0 1
32332: PUSH
32333: LD_VAR 0 3
32337: IN
32338: ST_TO_ADDR
// end ;
32339: LD_VAR 0 3
32343: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32344: LD_INT 0
32346: PPUSH
32347: PPUSH
32348: PPUSH
32349: PPUSH
32350: PPUSH
32351: PPUSH
32352: PPUSH
// result := array ;
32353: LD_ADDR_VAR 0 5
32357: PUSH
32358: LD_VAR 0 1
32362: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32363: LD_VAR 0 1
32367: NOT
32368: PUSH
32369: LD_VAR 0 2
32373: NOT
32374: OR
32375: PUSH
32376: LD_VAR 0 3
32380: NOT
32381: OR
32382: PUSH
32383: LD_VAR 0 2
32387: PUSH
32388: LD_VAR 0 1
32392: GREATER
32393: OR
32394: PUSH
32395: LD_VAR 0 3
32399: PUSH
32400: LD_VAR 0 1
32404: GREATER
32405: OR
32406: IFFALSE 32410
// exit ;
32408: GO 32706
// if direction then
32410: LD_VAR 0 4
32414: IFFALSE 32478
// begin d := 1 ;
32416: LD_ADDR_VAR 0 9
32420: PUSH
32421: LD_INT 1
32423: ST_TO_ADDR
// if i_from > i_to then
32424: LD_VAR 0 2
32428: PUSH
32429: LD_VAR 0 3
32433: GREATER
32434: IFFALSE 32460
// length := ( array - i_from ) + i_to else
32436: LD_ADDR_VAR 0 11
32440: PUSH
32441: LD_VAR 0 1
32445: PUSH
32446: LD_VAR 0 2
32450: MINUS
32451: PUSH
32452: LD_VAR 0 3
32456: PLUS
32457: ST_TO_ADDR
32458: GO 32476
// length := i_to - i_from ;
32460: LD_ADDR_VAR 0 11
32464: PUSH
32465: LD_VAR 0 3
32469: PUSH
32470: LD_VAR 0 2
32474: MINUS
32475: ST_TO_ADDR
// end else
32476: GO 32539
// begin d := - 1 ;
32478: LD_ADDR_VAR 0 9
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: ST_TO_ADDR
// if i_from > i_to then
32487: LD_VAR 0 2
32491: PUSH
32492: LD_VAR 0 3
32496: GREATER
32497: IFFALSE 32517
// length := i_from - i_to else
32499: LD_ADDR_VAR 0 11
32503: PUSH
32504: LD_VAR 0 2
32508: PUSH
32509: LD_VAR 0 3
32513: MINUS
32514: ST_TO_ADDR
32515: GO 32539
// length := ( array - i_to ) + i_from ;
32517: LD_ADDR_VAR 0 11
32521: PUSH
32522: LD_VAR 0 1
32526: PUSH
32527: LD_VAR 0 3
32531: MINUS
32532: PUSH
32533: LD_VAR 0 2
32537: PLUS
32538: ST_TO_ADDR
// end ; if not length then
32539: LD_VAR 0 11
32543: NOT
32544: IFFALSE 32548
// exit ;
32546: GO 32706
// tmp := array ;
32548: LD_ADDR_VAR 0 10
32552: PUSH
32553: LD_VAR 0 1
32557: ST_TO_ADDR
// for i = 1 to length do
32558: LD_ADDR_VAR 0 6
32562: PUSH
32563: DOUBLE
32564: LD_INT 1
32566: DEC
32567: ST_TO_ADDR
32568: LD_VAR 0 11
32572: PUSH
32573: FOR_TO
32574: IFFALSE 32694
// begin for j = 1 to array do
32576: LD_ADDR_VAR 0 7
32580: PUSH
32581: DOUBLE
32582: LD_INT 1
32584: DEC
32585: ST_TO_ADDR
32586: LD_VAR 0 1
32590: PUSH
32591: FOR_TO
32592: IFFALSE 32680
// begin k := j + d ;
32594: LD_ADDR_VAR 0 8
32598: PUSH
32599: LD_VAR 0 7
32603: PUSH
32604: LD_VAR 0 9
32608: PLUS
32609: ST_TO_ADDR
// if k > array then
32610: LD_VAR 0 8
32614: PUSH
32615: LD_VAR 0 1
32619: GREATER
32620: IFFALSE 32630
// k := 1 ;
32622: LD_ADDR_VAR 0 8
32626: PUSH
32627: LD_INT 1
32629: ST_TO_ADDR
// if not k then
32630: LD_VAR 0 8
32634: NOT
32635: IFFALSE 32647
// k := array ;
32637: LD_ADDR_VAR 0 8
32641: PUSH
32642: LD_VAR 0 1
32646: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32647: LD_ADDR_VAR 0 10
32651: PUSH
32652: LD_VAR 0 10
32656: PPUSH
32657: LD_VAR 0 8
32661: PPUSH
32662: LD_VAR 0 1
32666: PUSH
32667: LD_VAR 0 7
32671: ARRAY
32672: PPUSH
32673: CALL_OW 1
32677: ST_TO_ADDR
// end ;
32678: GO 32591
32680: POP
32681: POP
// array := tmp ;
32682: LD_ADDR_VAR 0 1
32686: PUSH
32687: LD_VAR 0 10
32691: ST_TO_ADDR
// end ;
32692: GO 32573
32694: POP
32695: POP
// result := array ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 1
32705: ST_TO_ADDR
// end ;
32706: LD_VAR 0 5
32710: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32711: LD_INT 0
32713: PPUSH
32714: PPUSH
// result := 0 ;
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 0
32722: ST_TO_ADDR
// if not array or not value in array then
32723: LD_VAR 0 1
32727: NOT
32728: PUSH
32729: LD_VAR 0 2
32733: PUSH
32734: LD_VAR 0 1
32738: IN
32739: NOT
32740: OR
32741: IFFALSE 32745
// exit ;
32743: GO 32799
// for i = 1 to array do
32745: LD_ADDR_VAR 0 4
32749: PUSH
32750: DOUBLE
32751: LD_INT 1
32753: DEC
32754: ST_TO_ADDR
32755: LD_VAR 0 1
32759: PUSH
32760: FOR_TO
32761: IFFALSE 32797
// if value = array [ i ] then
32763: LD_VAR 0 2
32767: PUSH
32768: LD_VAR 0 1
32772: PUSH
32773: LD_VAR 0 4
32777: ARRAY
32778: EQUAL
32779: IFFALSE 32795
// begin result := i ;
32781: LD_ADDR_VAR 0 3
32785: PUSH
32786: LD_VAR 0 4
32790: ST_TO_ADDR
// exit ;
32791: POP
32792: POP
32793: GO 32799
// end ;
32795: GO 32760
32797: POP
32798: POP
// end ;
32799: LD_VAR 0 3
32803: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32804: LD_INT 0
32806: PPUSH
// vc_chassis := chassis ;
32807: LD_ADDR_OWVAR 37
32811: PUSH
32812: LD_VAR 0 1
32816: ST_TO_ADDR
// vc_engine := engine ;
32817: LD_ADDR_OWVAR 39
32821: PUSH
32822: LD_VAR 0 2
32826: ST_TO_ADDR
// vc_control := control ;
32827: LD_ADDR_OWVAR 38
32831: PUSH
32832: LD_VAR 0 3
32836: ST_TO_ADDR
// vc_weapon := weapon ;
32837: LD_ADDR_OWVAR 40
32841: PUSH
32842: LD_VAR 0 4
32846: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32847: LD_ADDR_OWVAR 41
32851: PUSH
32852: LD_VAR 0 5
32856: ST_TO_ADDR
// end ;
32857: LD_VAR 0 6
32861: RET
// export function WantPlant ( unit ) ; var task ; begin
32862: LD_INT 0
32864: PPUSH
32865: PPUSH
// result := false ;
32866: LD_ADDR_VAR 0 2
32870: PUSH
32871: LD_INT 0
32873: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_VAR 0 1
32883: PPUSH
32884: CALL_OW 437
32888: ST_TO_ADDR
// if task then
32889: LD_VAR 0 3
32893: IFFALSE 32921
// if task [ 1 ] [ 1 ] = p then
32895: LD_VAR 0 3
32899: PUSH
32900: LD_INT 1
32902: ARRAY
32903: PUSH
32904: LD_INT 1
32906: ARRAY
32907: PUSH
32908: LD_STRING p
32910: EQUAL
32911: IFFALSE 32921
// result := true ;
32913: LD_ADDR_VAR 0 2
32917: PUSH
32918: LD_INT 1
32920: ST_TO_ADDR
// end ;
32921: LD_VAR 0 2
32925: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32926: LD_INT 0
32928: PPUSH
32929: PPUSH
32930: PPUSH
32931: PPUSH
// if pos < 1 then
32932: LD_VAR 0 2
32936: PUSH
32937: LD_INT 1
32939: LESS
32940: IFFALSE 32944
// exit ;
32942: GO 33247
// if pos = 1 then
32944: LD_VAR 0 2
32948: PUSH
32949: LD_INT 1
32951: EQUAL
32952: IFFALSE 32985
// result := Replace ( arr , pos [ 1 ] , value ) else
32954: LD_ADDR_VAR 0 4
32958: PUSH
32959: LD_VAR 0 1
32963: PPUSH
32964: LD_VAR 0 2
32968: PUSH
32969: LD_INT 1
32971: ARRAY
32972: PPUSH
32973: LD_VAR 0 3
32977: PPUSH
32978: CALL_OW 1
32982: ST_TO_ADDR
32983: GO 33247
// begin tmp := arr ;
32985: LD_ADDR_VAR 0 6
32989: PUSH
32990: LD_VAR 0 1
32994: ST_TO_ADDR
// s_arr := [ tmp ] ;
32995: LD_ADDR_VAR 0 7
32999: PUSH
33000: LD_VAR 0 6
33004: PUSH
33005: EMPTY
33006: LIST
33007: ST_TO_ADDR
// for i = 1 to pos - 1 do
33008: LD_ADDR_VAR 0 5
33012: PUSH
33013: DOUBLE
33014: LD_INT 1
33016: DEC
33017: ST_TO_ADDR
33018: LD_VAR 0 2
33022: PUSH
33023: LD_INT 1
33025: MINUS
33026: PUSH
33027: FOR_TO
33028: IFFALSE 33073
// begin tmp := tmp [ pos [ i ] ] ;
33030: LD_ADDR_VAR 0 6
33034: PUSH
33035: LD_VAR 0 6
33039: PUSH
33040: LD_VAR 0 2
33044: PUSH
33045: LD_VAR 0 5
33049: ARRAY
33050: ARRAY
33051: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33052: LD_ADDR_VAR 0 7
33056: PUSH
33057: LD_VAR 0 7
33061: PUSH
33062: LD_VAR 0 6
33066: PUSH
33067: EMPTY
33068: LIST
33069: ADD
33070: ST_TO_ADDR
// end ;
33071: GO 33027
33073: POP
33074: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33075: LD_ADDR_VAR 0 6
33079: PUSH
33080: LD_VAR 0 6
33084: PPUSH
33085: LD_VAR 0 2
33089: PUSH
33090: LD_VAR 0 2
33094: ARRAY
33095: PPUSH
33096: LD_VAR 0 3
33100: PPUSH
33101: CALL_OW 1
33105: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33106: LD_ADDR_VAR 0 7
33110: PUSH
33111: LD_VAR 0 7
33115: PPUSH
33116: LD_VAR 0 7
33120: PPUSH
33121: LD_VAR 0 6
33125: PPUSH
33126: CALL_OW 1
33130: ST_TO_ADDR
// for i = s_arr downto 2 do
33131: LD_ADDR_VAR 0 5
33135: PUSH
33136: DOUBLE
33137: LD_VAR 0 7
33141: INC
33142: ST_TO_ADDR
33143: LD_INT 2
33145: PUSH
33146: FOR_DOWNTO
33147: IFFALSE 33231
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33149: LD_ADDR_VAR 0 6
33153: PUSH
33154: LD_VAR 0 7
33158: PUSH
33159: LD_VAR 0 5
33163: PUSH
33164: LD_INT 1
33166: MINUS
33167: ARRAY
33168: PPUSH
33169: LD_VAR 0 2
33173: PUSH
33174: LD_VAR 0 5
33178: PUSH
33179: LD_INT 1
33181: MINUS
33182: ARRAY
33183: PPUSH
33184: LD_VAR 0 7
33188: PUSH
33189: LD_VAR 0 5
33193: ARRAY
33194: PPUSH
33195: CALL_OW 1
33199: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33200: LD_ADDR_VAR 0 7
33204: PUSH
33205: LD_VAR 0 7
33209: PPUSH
33210: LD_VAR 0 5
33214: PUSH
33215: LD_INT 1
33217: MINUS
33218: PPUSH
33219: LD_VAR 0 6
33223: PPUSH
33224: CALL_OW 1
33228: ST_TO_ADDR
// end ;
33229: GO 33146
33231: POP
33232: POP
// result := s_arr [ 1 ] ;
33233: LD_ADDR_VAR 0 4
33237: PUSH
33238: LD_VAR 0 7
33242: PUSH
33243: LD_INT 1
33245: ARRAY
33246: ST_TO_ADDR
// end ; end ;
33247: LD_VAR 0 4
33251: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33252: LD_INT 0
33254: PPUSH
33255: PPUSH
// if not list then
33256: LD_VAR 0 1
33260: NOT
33261: IFFALSE 33265
// exit ;
33263: GO 33356
// i := list [ pos1 ] ;
33265: LD_ADDR_VAR 0 5
33269: PUSH
33270: LD_VAR 0 1
33274: PUSH
33275: LD_VAR 0 2
33279: ARRAY
33280: ST_TO_ADDR
// if not i then
33281: LD_VAR 0 5
33285: NOT
33286: IFFALSE 33290
// exit ;
33288: GO 33356
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33290: LD_ADDR_VAR 0 1
33294: PUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: LD_VAR 0 2
33304: PPUSH
33305: LD_VAR 0 1
33309: PUSH
33310: LD_VAR 0 3
33314: ARRAY
33315: PPUSH
33316: CALL_OW 1
33320: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33321: LD_ADDR_VAR 0 1
33325: PUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: LD_VAR 0 3
33335: PPUSH
33336: LD_VAR 0 5
33340: PPUSH
33341: CALL_OW 1
33345: ST_TO_ADDR
// result := list ;
33346: LD_ADDR_VAR 0 4
33350: PUSH
33351: LD_VAR 0 1
33355: ST_TO_ADDR
// end ;
33356: LD_VAR 0 4
33360: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33361: LD_INT 0
33363: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33364: LD_ADDR_VAR 0 5
33368: PUSH
33369: LD_VAR 0 1
33373: PPUSH
33374: CALL_OW 250
33378: PPUSH
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL_OW 251
33388: PPUSH
33389: LD_VAR 0 2
33393: PPUSH
33394: LD_VAR 0 3
33398: PPUSH
33399: LD_VAR 0 4
33403: PPUSH
33404: CALL 33414 0 5
33408: ST_TO_ADDR
// end ;
33409: LD_VAR 0 5
33413: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33414: LD_INT 0
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
// if not list then
33420: LD_VAR 0 3
33424: NOT
33425: IFFALSE 33429
// exit ;
33427: GO 33817
// result := [ ] ;
33429: LD_ADDR_VAR 0 6
33433: PUSH
33434: EMPTY
33435: ST_TO_ADDR
// for i in list do
33436: LD_ADDR_VAR 0 7
33440: PUSH
33441: LD_VAR 0 3
33445: PUSH
33446: FOR_IN
33447: IFFALSE 33649
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33449: LD_ADDR_VAR 0 9
33453: PUSH
33454: LD_VAR 0 7
33458: PPUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: LD_VAR 0 2
33468: PPUSH
33469: CALL_OW 297
33473: ST_TO_ADDR
// if not result then
33474: LD_VAR 0 6
33478: NOT
33479: IFFALSE 33505
// result := [ [ i , tmp ] ] else
33481: LD_ADDR_VAR 0 6
33485: PUSH
33486: LD_VAR 0 7
33490: PUSH
33491: LD_VAR 0 9
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: ST_TO_ADDR
33503: GO 33647
// begin if result [ result ] [ 2 ] < tmp then
33505: LD_VAR 0 6
33509: PUSH
33510: LD_VAR 0 6
33514: ARRAY
33515: PUSH
33516: LD_INT 2
33518: ARRAY
33519: PUSH
33520: LD_VAR 0 9
33524: LESS
33525: IFFALSE 33567
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33527: LD_ADDR_VAR 0 6
33531: PUSH
33532: LD_VAR 0 6
33536: PPUSH
33537: LD_VAR 0 6
33541: PUSH
33542: LD_INT 1
33544: PLUS
33545: PPUSH
33546: LD_VAR 0 7
33550: PUSH
33551: LD_VAR 0 9
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PPUSH
33560: CALL_OW 2
33564: ST_TO_ADDR
33565: GO 33647
// for j = 1 to result do
33567: LD_ADDR_VAR 0 8
33571: PUSH
33572: DOUBLE
33573: LD_INT 1
33575: DEC
33576: ST_TO_ADDR
33577: LD_VAR 0 6
33581: PUSH
33582: FOR_TO
33583: IFFALSE 33645
// begin if tmp < result [ j ] [ 2 ] then
33585: LD_VAR 0 9
33589: PUSH
33590: LD_VAR 0 6
33594: PUSH
33595: LD_VAR 0 8
33599: ARRAY
33600: PUSH
33601: LD_INT 2
33603: ARRAY
33604: LESS
33605: IFFALSE 33643
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33607: LD_ADDR_VAR 0 6
33611: PUSH
33612: LD_VAR 0 6
33616: PPUSH
33617: LD_VAR 0 8
33621: PPUSH
33622: LD_VAR 0 7
33626: PUSH
33627: LD_VAR 0 9
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PPUSH
33636: CALL_OW 2
33640: ST_TO_ADDR
// break ;
33641: GO 33645
// end ; end ;
33643: GO 33582
33645: POP
33646: POP
// end ; end ;
33647: GO 33446
33649: POP
33650: POP
// if result and not asc then
33651: LD_VAR 0 6
33655: PUSH
33656: LD_VAR 0 4
33660: NOT
33661: AND
33662: IFFALSE 33737
// begin tmp := result ;
33664: LD_ADDR_VAR 0 9
33668: PUSH
33669: LD_VAR 0 6
33673: ST_TO_ADDR
// for i = tmp downto 1 do
33674: LD_ADDR_VAR 0 7
33678: PUSH
33679: DOUBLE
33680: LD_VAR 0 9
33684: INC
33685: ST_TO_ADDR
33686: LD_INT 1
33688: PUSH
33689: FOR_DOWNTO
33690: IFFALSE 33735
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33692: LD_ADDR_VAR 0 6
33696: PUSH
33697: LD_VAR 0 6
33701: PPUSH
33702: LD_VAR 0 9
33706: PUSH
33707: LD_VAR 0 7
33711: MINUS
33712: PUSH
33713: LD_INT 1
33715: PLUS
33716: PPUSH
33717: LD_VAR 0 9
33721: PUSH
33722: LD_VAR 0 7
33726: ARRAY
33727: PPUSH
33728: CALL_OW 1
33732: ST_TO_ADDR
33733: GO 33689
33735: POP
33736: POP
// end ; tmp := [ ] ;
33737: LD_ADDR_VAR 0 9
33741: PUSH
33742: EMPTY
33743: ST_TO_ADDR
// if mode then
33744: LD_VAR 0 5
33748: IFFALSE 33817
// begin for i = 1 to result do
33750: LD_ADDR_VAR 0 7
33754: PUSH
33755: DOUBLE
33756: LD_INT 1
33758: DEC
33759: ST_TO_ADDR
33760: LD_VAR 0 6
33764: PUSH
33765: FOR_TO
33766: IFFALSE 33805
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33768: LD_ADDR_VAR 0 9
33772: PUSH
33773: LD_VAR 0 9
33777: PPUSH
33778: LD_VAR 0 7
33782: PPUSH
33783: LD_VAR 0 6
33787: PUSH
33788: LD_VAR 0 7
33792: ARRAY
33793: PUSH
33794: LD_INT 1
33796: ARRAY
33797: PPUSH
33798: CALL_OW 1
33802: ST_TO_ADDR
33803: GO 33765
33805: POP
33806: POP
// result := tmp ;
33807: LD_ADDR_VAR 0 6
33811: PUSH
33812: LD_VAR 0 9
33816: ST_TO_ADDR
// end ; end ;
33817: LD_VAR 0 6
33821: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33822: LD_INT 0
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33830: LD_ADDR_VAR 0 5
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: ST_TO_ADDR
// if not x or not y then
33852: LD_VAR 0 2
33856: NOT
33857: PUSH
33858: LD_VAR 0 3
33862: NOT
33863: OR
33864: IFFALSE 33868
// exit ;
33866: GO 35520
// if not range then
33868: LD_VAR 0 4
33872: NOT
33873: IFFALSE 33883
// range := 10 ;
33875: LD_ADDR_VAR 0 4
33879: PUSH
33880: LD_INT 10
33882: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33883: LD_ADDR_VAR 0 8
33887: PUSH
33888: LD_INT 81
33890: PUSH
33891: LD_VAR 0 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 92
33902: PUSH
33903: LD_VAR 0 2
33907: PUSH
33908: LD_VAR 0 3
33912: PUSH
33913: LD_VAR 0 4
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: LD_INT 21
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: PPUSH
33946: CALL_OW 69
33950: ST_TO_ADDR
// if not tmp then
33951: LD_VAR 0 8
33955: NOT
33956: IFFALSE 33960
// exit ;
33958: GO 35520
// for i in tmp do
33960: LD_ADDR_VAR 0 6
33964: PUSH
33965: LD_VAR 0 8
33969: PUSH
33970: FOR_IN
33971: IFFALSE 35495
// begin points := [ 0 , 0 , 0 ] ;
33973: LD_ADDR_VAR 0 9
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: ST_TO_ADDR
// bpoints := 1 ;
33992: LD_ADDR_VAR 0 10
33996: PUSH
33997: LD_INT 1
33999: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34000: LD_VAR 0 6
34004: PPUSH
34005: CALL_OW 247
34009: PUSH
34010: LD_INT 1
34012: DOUBLE
34013: EQUAL
34014: IFTRUE 34018
34016: GO 34596
34018: POP
// begin if GetClass ( i ) = 1 then
34019: LD_VAR 0 6
34023: PPUSH
34024: CALL_OW 257
34028: PUSH
34029: LD_INT 1
34031: EQUAL
34032: IFFALSE 34053
// points := [ 10 , 5 , 3 ] ;
34034: LD_ADDR_VAR 0 9
34038: PUSH
34039: LD_INT 10
34041: PUSH
34042: LD_INT 5
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34053: LD_VAR 0 6
34057: PPUSH
34058: CALL_OW 257
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: LD_INT 3
34068: PUSH
34069: LD_INT 4
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: IN
34077: IFFALSE 34098
// points := [ 3 , 2 , 1 ] ;
34079: LD_ADDR_VAR 0 9
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: LIST
34097: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34098: LD_VAR 0 6
34102: PPUSH
34103: CALL_OW 257
34107: PUSH
34108: LD_INT 5
34110: EQUAL
34111: IFFALSE 34132
// points := [ 130 , 5 , 2 ] ;
34113: LD_ADDR_VAR 0 9
34117: PUSH
34118: LD_INT 130
34120: PUSH
34121: LD_INT 5
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34132: LD_VAR 0 6
34136: PPUSH
34137: CALL_OW 257
34141: PUSH
34142: LD_INT 8
34144: EQUAL
34145: IFFALSE 34166
// points := [ 35 , 35 , 30 ] ;
34147: LD_ADDR_VAR 0 9
34151: PUSH
34152: LD_INT 35
34154: PUSH
34155: LD_INT 35
34157: PUSH
34158: LD_INT 30
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34166: LD_VAR 0 6
34170: PPUSH
34171: CALL_OW 257
34175: PUSH
34176: LD_INT 9
34178: EQUAL
34179: IFFALSE 34200
// points := [ 20 , 55 , 40 ] ;
34181: LD_ADDR_VAR 0 9
34185: PUSH
34186: LD_INT 20
34188: PUSH
34189: LD_INT 55
34191: PUSH
34192: LD_INT 40
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34200: LD_VAR 0 6
34204: PPUSH
34205: CALL_OW 257
34209: PUSH
34210: LD_INT 12
34212: PUSH
34213: LD_INT 16
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: IN
34220: IFFALSE 34241
// points := [ 5 , 3 , 2 ] ;
34222: LD_ADDR_VAR 0 9
34226: PUSH
34227: LD_INT 5
34229: PUSH
34230: LD_INT 3
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34241: LD_VAR 0 6
34245: PPUSH
34246: CALL_OW 257
34250: PUSH
34251: LD_INT 17
34253: EQUAL
34254: IFFALSE 34275
// points := [ 100 , 50 , 75 ] ;
34256: LD_ADDR_VAR 0 9
34260: PUSH
34261: LD_INT 100
34263: PUSH
34264: LD_INT 50
34266: PUSH
34267: LD_INT 75
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: LIST
34274: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34275: LD_VAR 0 6
34279: PPUSH
34280: CALL_OW 257
34284: PUSH
34285: LD_INT 15
34287: EQUAL
34288: IFFALSE 34309
// points := [ 10 , 5 , 3 ] ;
34290: LD_ADDR_VAR 0 9
34294: PUSH
34295: LD_INT 10
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: LD_INT 3
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34309: LD_VAR 0 6
34313: PPUSH
34314: CALL_OW 257
34318: PUSH
34319: LD_INT 14
34321: EQUAL
34322: IFFALSE 34343
// points := [ 10 , 0 , 0 ] ;
34324: LD_ADDR_VAR 0 9
34328: PUSH
34329: LD_INT 10
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34343: LD_VAR 0 6
34347: PPUSH
34348: CALL_OW 257
34352: PUSH
34353: LD_INT 11
34355: EQUAL
34356: IFFALSE 34377
// points := [ 30 , 10 , 5 ] ;
34358: LD_ADDR_VAR 0 9
34362: PUSH
34363: LD_INT 30
34365: PUSH
34366: LD_INT 10
34368: PUSH
34369: LD_INT 5
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34377: LD_VAR 0 1
34381: PPUSH
34382: LD_INT 5
34384: PPUSH
34385: CALL_OW 321
34389: PUSH
34390: LD_INT 2
34392: EQUAL
34393: IFFALSE 34410
// bpoints := bpoints * 1.8 ;
34395: LD_ADDR_VAR 0 10
34399: PUSH
34400: LD_VAR 0 10
34404: PUSH
34405: LD_REAL  1.80000000000000E+0000
34408: MUL
34409: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34410: LD_VAR 0 6
34414: PPUSH
34415: CALL_OW 257
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 3
34428: PUSH
34429: LD_INT 4
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: IN
34438: PUSH
34439: LD_VAR 0 1
34443: PPUSH
34444: LD_INT 51
34446: PPUSH
34447: CALL_OW 321
34451: PUSH
34452: LD_INT 2
34454: EQUAL
34455: AND
34456: IFFALSE 34473
// bpoints := bpoints * 1.2 ;
34458: LD_ADDR_VAR 0 10
34462: PUSH
34463: LD_VAR 0 10
34467: PUSH
34468: LD_REAL  1.20000000000000E+0000
34471: MUL
34472: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34473: LD_VAR 0 6
34477: PPUSH
34478: CALL_OW 257
34482: PUSH
34483: LD_INT 5
34485: PUSH
34486: LD_INT 7
34488: PUSH
34489: LD_INT 9
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: IN
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: LD_INT 52
34505: PPUSH
34506: CALL_OW 321
34510: PUSH
34511: LD_INT 2
34513: EQUAL
34514: AND
34515: IFFALSE 34532
// bpoints := bpoints * 1.5 ;
34517: LD_ADDR_VAR 0 10
34521: PUSH
34522: LD_VAR 0 10
34526: PUSH
34527: LD_REAL  1.50000000000000E+0000
34530: MUL
34531: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34532: LD_VAR 0 1
34536: PPUSH
34537: LD_INT 66
34539: PPUSH
34540: CALL_OW 321
34544: PUSH
34545: LD_INT 2
34547: EQUAL
34548: IFFALSE 34565
// bpoints := bpoints * 1.1 ;
34550: LD_ADDR_VAR 0 10
34554: PUSH
34555: LD_VAR 0 10
34559: PUSH
34560: LD_REAL  1.10000000000000E+0000
34563: MUL
34564: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34565: LD_ADDR_VAR 0 10
34569: PUSH
34570: LD_VAR 0 10
34574: PUSH
34575: LD_VAR 0 6
34579: PPUSH
34580: LD_INT 1
34582: PPUSH
34583: CALL_OW 259
34587: PUSH
34588: LD_REAL  1.15000000000000E+0000
34591: MUL
34592: MUL
34593: ST_TO_ADDR
// end ; unit_vehicle :
34594: GO 35424
34596: LD_INT 2
34598: DOUBLE
34599: EQUAL
34600: IFTRUE 34604
34602: GO 35412
34604: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34605: LD_VAR 0 6
34609: PPUSH
34610: CALL_OW 264
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 42
34620: PUSH
34621: LD_INT 24
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: LIST
34628: IN
34629: IFFALSE 34650
// points := [ 25 , 5 , 3 ] ;
34631: LD_ADDR_VAR 0 9
34635: PUSH
34636: LD_INT 25
34638: PUSH
34639: LD_INT 5
34641: PUSH
34642: LD_INT 3
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: LIST
34649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34650: LD_VAR 0 6
34654: PPUSH
34655: CALL_OW 264
34659: PUSH
34660: LD_INT 4
34662: PUSH
34663: LD_INT 43
34665: PUSH
34666: LD_INT 25
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: IN
34674: IFFALSE 34695
// points := [ 40 , 15 , 5 ] ;
34676: LD_ADDR_VAR 0 9
34680: PUSH
34681: LD_INT 40
34683: PUSH
34684: LD_INT 15
34686: PUSH
34687: LD_INT 5
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34695: LD_VAR 0 6
34699: PPUSH
34700: CALL_OW 264
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: LD_INT 23
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: IN
34715: IFFALSE 34736
// points := [ 7 , 25 , 8 ] ;
34717: LD_ADDR_VAR 0 9
34721: PUSH
34722: LD_INT 7
34724: PUSH
34725: LD_INT 25
34727: PUSH
34728: LD_INT 8
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34736: LD_VAR 0 6
34740: PPUSH
34741: CALL_OW 264
34745: PUSH
34746: LD_INT 5
34748: PUSH
34749: LD_INT 27
34751: PUSH
34752: LD_INT 44
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: LIST
34759: IN
34760: IFFALSE 34781
// points := [ 14 , 50 , 16 ] ;
34762: LD_ADDR_VAR 0 9
34766: PUSH
34767: LD_INT 14
34769: PUSH
34770: LD_INT 50
34772: PUSH
34773: LD_INT 16
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34781: LD_VAR 0 6
34785: PPUSH
34786: CALL_OW 264
34790: PUSH
34791: LD_INT 6
34793: PUSH
34794: LD_INT 46
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: IN
34801: IFFALSE 34822
// points := [ 32 , 120 , 70 ] ;
34803: LD_ADDR_VAR 0 9
34807: PUSH
34808: LD_INT 32
34810: PUSH
34811: LD_INT 120
34813: PUSH
34814: LD_INT 70
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34822: LD_VAR 0 6
34826: PPUSH
34827: CALL_OW 264
34831: PUSH
34832: LD_INT 7
34834: PUSH
34835: LD_INT 28
34837: PUSH
34838: LD_INT 45
34840: PUSH
34841: LD_EXP 101
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: IN
34852: IFFALSE 34873
// points := [ 35 , 20 , 45 ] ;
34854: LD_ADDR_VAR 0 9
34858: PUSH
34859: LD_INT 35
34861: PUSH
34862: LD_INT 20
34864: PUSH
34865: LD_INT 45
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34873: LD_VAR 0 6
34877: PPUSH
34878: CALL_OW 264
34882: PUSH
34883: LD_INT 47
34885: PUSH
34886: EMPTY
34887: LIST
34888: IN
34889: IFFALSE 34910
// points := [ 67 , 45 , 75 ] ;
34891: LD_ADDR_VAR 0 9
34895: PUSH
34896: LD_INT 67
34898: PUSH
34899: LD_INT 45
34901: PUSH
34902: LD_INT 75
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34910: LD_VAR 0 6
34914: PPUSH
34915: CALL_OW 264
34919: PUSH
34920: LD_INT 26
34922: PUSH
34923: EMPTY
34924: LIST
34925: IN
34926: IFFALSE 34947
// points := [ 120 , 30 , 80 ] ;
34928: LD_ADDR_VAR 0 9
34932: PUSH
34933: LD_INT 120
34935: PUSH
34936: LD_INT 30
34938: PUSH
34939: LD_INT 80
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34947: LD_VAR 0 6
34951: PPUSH
34952: CALL_OW 264
34956: PUSH
34957: LD_INT 22
34959: PUSH
34960: EMPTY
34961: LIST
34962: IN
34963: IFFALSE 34984
// points := [ 40 , 1 , 1 ] ;
34965: LD_ADDR_VAR 0 9
34969: PUSH
34970: LD_INT 40
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34984: LD_VAR 0 6
34988: PPUSH
34989: CALL_OW 264
34993: PUSH
34994: LD_INT 29
34996: PUSH
34997: EMPTY
34998: LIST
34999: IN
35000: IFFALSE 35021
// points := [ 70 , 200 , 400 ] ;
35002: LD_ADDR_VAR 0 9
35006: PUSH
35007: LD_INT 70
35009: PUSH
35010: LD_INT 200
35012: PUSH
35013: LD_INT 400
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35021: LD_VAR 0 6
35025: PPUSH
35026: CALL_OW 264
35030: PUSH
35031: LD_INT 14
35033: PUSH
35034: LD_INT 53
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: IN
35041: IFFALSE 35062
// points := [ 40 , 10 , 20 ] ;
35043: LD_ADDR_VAR 0 9
35047: PUSH
35048: LD_INT 40
35050: PUSH
35051: LD_INT 10
35053: PUSH
35054: LD_INT 20
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35062: LD_VAR 0 6
35066: PPUSH
35067: CALL_OW 264
35071: PUSH
35072: LD_INT 9
35074: PUSH
35075: EMPTY
35076: LIST
35077: IN
35078: IFFALSE 35099
// points := [ 5 , 70 , 20 ] ;
35080: LD_ADDR_VAR 0 9
35084: PUSH
35085: LD_INT 5
35087: PUSH
35088: LD_INT 70
35090: PUSH
35091: LD_INT 20
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35099: LD_VAR 0 6
35103: PPUSH
35104: CALL_OW 264
35108: PUSH
35109: LD_INT 10
35111: PUSH
35112: EMPTY
35113: LIST
35114: IN
35115: IFFALSE 35136
// points := [ 35 , 110 , 70 ] ;
35117: LD_ADDR_VAR 0 9
35121: PUSH
35122: LD_INT 35
35124: PUSH
35125: LD_INT 110
35127: PUSH
35128: LD_INT 70
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35136: LD_VAR 0 6
35140: PPUSH
35141: CALL_OW 265
35145: PUSH
35146: LD_INT 25
35148: EQUAL
35149: IFFALSE 35170
// points := [ 80 , 65 , 100 ] ;
35151: LD_ADDR_VAR 0 9
35155: PUSH
35156: LD_INT 80
35158: PUSH
35159: LD_INT 65
35161: PUSH
35162: LD_INT 100
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35170: LD_VAR 0 6
35174: PPUSH
35175: CALL_OW 263
35179: PUSH
35180: LD_INT 1
35182: EQUAL
35183: IFFALSE 35218
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35185: LD_ADDR_VAR 0 10
35189: PUSH
35190: LD_VAR 0 10
35194: PUSH
35195: LD_VAR 0 6
35199: PPUSH
35200: CALL_OW 311
35204: PPUSH
35205: LD_INT 3
35207: PPUSH
35208: CALL_OW 259
35212: PUSH
35213: LD_INT 4
35215: MUL
35216: MUL
35217: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35218: LD_VAR 0 6
35222: PPUSH
35223: CALL_OW 263
35227: PUSH
35228: LD_INT 2
35230: EQUAL
35231: IFFALSE 35282
// begin j := IsControledBy ( i ) ;
35233: LD_ADDR_VAR 0 7
35237: PUSH
35238: LD_VAR 0 6
35242: PPUSH
35243: CALL_OW 312
35247: ST_TO_ADDR
// if j then
35248: LD_VAR 0 7
35252: IFFALSE 35282
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35254: LD_ADDR_VAR 0 10
35258: PUSH
35259: LD_VAR 0 10
35263: PUSH
35264: LD_VAR 0 7
35268: PPUSH
35269: LD_INT 3
35271: PPUSH
35272: CALL_OW 259
35276: PUSH
35277: LD_INT 3
35279: MUL
35280: MUL
35281: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35282: LD_VAR 0 6
35286: PPUSH
35287: CALL_OW 264
35291: PUSH
35292: LD_INT 5
35294: PUSH
35295: LD_INT 6
35297: PUSH
35298: LD_INT 46
35300: PUSH
35301: LD_INT 44
35303: PUSH
35304: LD_INT 47
35306: PUSH
35307: LD_INT 45
35309: PUSH
35310: LD_INT 28
35312: PUSH
35313: LD_INT 7
35315: PUSH
35316: LD_INT 27
35318: PUSH
35319: LD_INT 29
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: IN
35334: PUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: LD_INT 52
35342: PPUSH
35343: CALL_OW 321
35347: PUSH
35348: LD_INT 2
35350: EQUAL
35351: AND
35352: IFFALSE 35369
// bpoints := bpoints * 1.2 ;
35354: LD_ADDR_VAR 0 10
35358: PUSH
35359: LD_VAR 0 10
35363: PUSH
35364: LD_REAL  1.20000000000000E+0000
35367: MUL
35368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35369: LD_VAR 0 6
35373: PPUSH
35374: CALL_OW 264
35378: PUSH
35379: LD_INT 6
35381: PUSH
35382: LD_INT 46
35384: PUSH
35385: LD_INT 47
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: IN
35393: IFFALSE 35410
// bpoints := bpoints * 1.2 ;
35395: LD_ADDR_VAR 0 10
35399: PUSH
35400: LD_VAR 0 10
35404: PUSH
35405: LD_REAL  1.20000000000000E+0000
35408: MUL
35409: ST_TO_ADDR
// end ; unit_building :
35410: GO 35424
35412: LD_INT 3
35414: DOUBLE
35415: EQUAL
35416: IFTRUE 35420
35418: GO 35423
35420: POP
// ; end ;
35421: GO 35424
35423: POP
// for j = 1 to 3 do
35424: LD_ADDR_VAR 0 7
35428: PUSH
35429: DOUBLE
35430: LD_INT 1
35432: DEC
35433: ST_TO_ADDR
35434: LD_INT 3
35436: PUSH
35437: FOR_TO
35438: IFFALSE 35491
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35440: LD_ADDR_VAR 0 5
35444: PUSH
35445: LD_VAR 0 5
35449: PPUSH
35450: LD_VAR 0 7
35454: PPUSH
35455: LD_VAR 0 5
35459: PUSH
35460: LD_VAR 0 7
35464: ARRAY
35465: PUSH
35466: LD_VAR 0 9
35470: PUSH
35471: LD_VAR 0 7
35475: ARRAY
35476: PUSH
35477: LD_VAR 0 10
35481: MUL
35482: PLUS
35483: PPUSH
35484: CALL_OW 1
35488: ST_TO_ADDR
35489: GO 35437
35491: POP
35492: POP
// end ;
35493: GO 33970
35495: POP
35496: POP
// result := Replace ( result , 4 , tmp ) ;
35497: LD_ADDR_VAR 0 5
35501: PUSH
35502: LD_VAR 0 5
35506: PPUSH
35507: LD_INT 4
35509: PPUSH
35510: LD_VAR 0 8
35514: PPUSH
35515: CALL_OW 1
35519: ST_TO_ADDR
// end ;
35520: LD_VAR 0 5
35524: RET
// export function DangerAtRange ( unit , range ) ; begin
35525: LD_INT 0
35527: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35528: LD_ADDR_VAR 0 3
35532: PUSH
35533: LD_VAR 0 1
35537: PPUSH
35538: CALL_OW 255
35542: PPUSH
35543: LD_VAR 0 1
35547: PPUSH
35548: CALL_OW 250
35552: PPUSH
35553: LD_VAR 0 1
35557: PPUSH
35558: CALL_OW 251
35562: PPUSH
35563: LD_VAR 0 2
35567: PPUSH
35568: CALL 33822 0 4
35572: ST_TO_ADDR
// end ;
35573: LD_VAR 0 3
35577: RET
// export function DangerInArea ( side , area ) ; begin
35578: LD_INT 0
35580: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35581: LD_ADDR_VAR 0 3
35585: PUSH
35586: LD_VAR 0 2
35590: PPUSH
35591: LD_INT 81
35593: PUSH
35594: LD_VAR 0 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PPUSH
35603: CALL_OW 70
35607: ST_TO_ADDR
// end ;
35608: LD_VAR 0 3
35612: RET
// export function IsExtension ( b ) ; begin
35613: LD_INT 0
35615: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35616: LD_ADDR_VAR 0 2
35620: PUSH
35621: LD_VAR 0 1
35625: PUSH
35626: LD_INT 23
35628: PUSH
35629: LD_INT 20
35631: PUSH
35632: LD_INT 22
35634: PUSH
35635: LD_INT 17
35637: PUSH
35638: LD_INT 24
35640: PUSH
35641: LD_INT 21
35643: PUSH
35644: LD_INT 19
35646: PUSH
35647: LD_INT 16
35649: PUSH
35650: LD_INT 25
35652: PUSH
35653: LD_INT 18
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: IN
35668: ST_TO_ADDR
// end ;
35669: LD_VAR 0 2
35673: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35674: LD_INT 0
35676: PPUSH
35677: PPUSH
35678: PPUSH
// result := [ ] ;
35679: LD_ADDR_VAR 0 4
35683: PUSH
35684: EMPTY
35685: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35686: LD_ADDR_VAR 0 5
35690: PUSH
35691: LD_VAR 0 2
35695: PPUSH
35696: LD_INT 21
35698: PUSH
35699: LD_INT 3
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PPUSH
35706: CALL_OW 70
35710: ST_TO_ADDR
// if not tmp then
35711: LD_VAR 0 5
35715: NOT
35716: IFFALSE 35720
// exit ;
35718: GO 35784
// if checkLink then
35720: LD_VAR 0 3
35724: IFFALSE 35774
// begin for i in tmp do
35726: LD_ADDR_VAR 0 6
35730: PUSH
35731: LD_VAR 0 5
35735: PUSH
35736: FOR_IN
35737: IFFALSE 35772
// if GetBase ( i ) <> base then
35739: LD_VAR 0 6
35743: PPUSH
35744: CALL_OW 274
35748: PUSH
35749: LD_VAR 0 1
35753: NONEQUAL
35754: IFFALSE 35770
// ComLinkToBase ( base , i ) ;
35756: LD_VAR 0 1
35760: PPUSH
35761: LD_VAR 0 6
35765: PPUSH
35766: CALL_OW 169
35770: GO 35736
35772: POP
35773: POP
// end ; result := tmp ;
35774: LD_ADDR_VAR 0 4
35778: PUSH
35779: LD_VAR 0 5
35783: ST_TO_ADDR
// end ;
35784: LD_VAR 0 4
35788: RET
// export function ComComplete ( units , b ) ; var i ; begin
35789: LD_INT 0
35791: PPUSH
35792: PPUSH
// if not units then
35793: LD_VAR 0 1
35797: NOT
35798: IFFALSE 35802
// exit ;
35800: GO 35892
// for i in units do
35802: LD_ADDR_VAR 0 4
35806: PUSH
35807: LD_VAR 0 1
35811: PUSH
35812: FOR_IN
35813: IFFALSE 35890
// if BuildingStatus ( b ) = bs_build then
35815: LD_VAR 0 2
35819: PPUSH
35820: CALL_OW 461
35824: PUSH
35825: LD_INT 1
35827: EQUAL
35828: IFFALSE 35888
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35830: LD_VAR 0 4
35834: PPUSH
35835: LD_STRING h
35837: PUSH
35838: LD_VAR 0 2
35842: PPUSH
35843: CALL_OW 250
35847: PUSH
35848: LD_VAR 0 2
35852: PPUSH
35853: CALL_OW 251
35857: PUSH
35858: LD_VAR 0 2
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: PPUSH
35884: CALL_OW 446
35888: GO 35812
35890: POP
35891: POP
// end ;
35892: LD_VAR 0 3
35896: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35897: LD_INT 0
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35905: LD_VAR 0 1
35909: NOT
35910: PUSH
35911: LD_VAR 0 1
35915: PPUSH
35916: CALL_OW 263
35920: PUSH
35921: LD_INT 2
35923: NONEQUAL
35924: OR
35925: IFFALSE 35929
// exit ;
35927: GO 36245
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35929: LD_ADDR_VAR 0 6
35933: PUSH
35934: LD_INT 22
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL_OW 255
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: LD_INT 30
35956: PUSH
35957: LD_INT 36
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 34
35966: PUSH
35967: LD_INT 31
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PPUSH
35983: CALL_OW 69
35987: ST_TO_ADDR
// if not tmp then
35988: LD_VAR 0 6
35992: NOT
35993: IFFALSE 35997
// exit ;
35995: GO 36245
// result := [ ] ;
35997: LD_ADDR_VAR 0 2
36001: PUSH
36002: EMPTY
36003: ST_TO_ADDR
// for i in tmp do
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_VAR 0 6
36013: PUSH
36014: FOR_IN
36015: IFFALSE 36086
// begin t := UnitsInside ( i ) ;
36017: LD_ADDR_VAR 0 4
36021: PUSH
36022: LD_VAR 0 3
36026: PPUSH
36027: CALL_OW 313
36031: ST_TO_ADDR
// if t then
36032: LD_VAR 0 4
36036: IFFALSE 36084
// for j in t do
36038: LD_ADDR_VAR 0 7
36042: PUSH
36043: LD_VAR 0 4
36047: PUSH
36048: FOR_IN
36049: IFFALSE 36082
// result := Replace ( result , result + 1 , j ) ;
36051: LD_ADDR_VAR 0 2
36055: PUSH
36056: LD_VAR 0 2
36060: PPUSH
36061: LD_VAR 0 2
36065: PUSH
36066: LD_INT 1
36068: PLUS
36069: PPUSH
36070: LD_VAR 0 7
36074: PPUSH
36075: CALL_OW 1
36079: ST_TO_ADDR
36080: GO 36048
36082: POP
36083: POP
// end ;
36084: GO 36014
36086: POP
36087: POP
// if not result then
36088: LD_VAR 0 2
36092: NOT
36093: IFFALSE 36097
// exit ;
36095: GO 36245
// mech := result [ 1 ] ;
36097: LD_ADDR_VAR 0 5
36101: PUSH
36102: LD_VAR 0 2
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: ST_TO_ADDR
// if result > 1 then
36111: LD_VAR 0 2
36115: PUSH
36116: LD_INT 1
36118: GREATER
36119: IFFALSE 36231
// begin for i = 2 to result do
36121: LD_ADDR_VAR 0 3
36125: PUSH
36126: DOUBLE
36127: LD_INT 2
36129: DEC
36130: ST_TO_ADDR
36131: LD_VAR 0 2
36135: PUSH
36136: FOR_TO
36137: IFFALSE 36229
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36139: LD_ADDR_VAR 0 4
36143: PUSH
36144: LD_VAR 0 2
36148: PUSH
36149: LD_VAR 0 3
36153: ARRAY
36154: PPUSH
36155: LD_INT 3
36157: PPUSH
36158: CALL_OW 259
36162: PUSH
36163: LD_VAR 0 2
36167: PUSH
36168: LD_VAR 0 3
36172: ARRAY
36173: PPUSH
36174: CALL_OW 432
36178: MINUS
36179: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36180: LD_VAR 0 4
36184: PUSH
36185: LD_VAR 0 5
36189: PPUSH
36190: LD_INT 3
36192: PPUSH
36193: CALL_OW 259
36197: PUSH
36198: LD_VAR 0 5
36202: PPUSH
36203: CALL_OW 432
36207: MINUS
36208: GREATEREQUAL
36209: IFFALSE 36227
// mech := result [ i ] ;
36211: LD_ADDR_VAR 0 5
36215: PUSH
36216: LD_VAR 0 2
36220: PUSH
36221: LD_VAR 0 3
36225: ARRAY
36226: ST_TO_ADDR
// end ;
36227: GO 36136
36229: POP
36230: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36231: LD_VAR 0 1
36235: PPUSH
36236: LD_VAR 0 5
36240: PPUSH
36241: CALL_OW 135
// end ;
36245: LD_VAR 0 2
36249: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36250: LD_INT 0
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
36263: PPUSH
36264: PPUSH
// result := [ ] ;
36265: LD_ADDR_VAR 0 7
36269: PUSH
36270: EMPTY
36271: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 266
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: IN
36292: NOT
36293: IFFALSE 36297
// exit ;
36295: GO 37931
// if name then
36297: LD_VAR 0 3
36301: IFFALSE 36317
// SetBName ( base_dep , name ) ;
36303: LD_VAR 0 1
36307: PPUSH
36308: LD_VAR 0 3
36312: PPUSH
36313: CALL_OW 500
// base := GetBase ( base_dep ) ;
36317: LD_ADDR_VAR 0 15
36321: PUSH
36322: LD_VAR 0 1
36326: PPUSH
36327: CALL_OW 274
36331: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36332: LD_ADDR_VAR 0 16
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 255
36346: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36347: LD_ADDR_VAR 0 17
36351: PUSH
36352: LD_VAR 0 1
36356: PPUSH
36357: CALL_OW 248
36361: ST_TO_ADDR
// if sources then
36362: LD_VAR 0 5
36366: IFFALSE 36413
// for i = 1 to 3 do
36368: LD_ADDR_VAR 0 8
36372: PUSH
36373: DOUBLE
36374: LD_INT 1
36376: DEC
36377: ST_TO_ADDR
36378: LD_INT 3
36380: PUSH
36381: FOR_TO
36382: IFFALSE 36411
// AddResourceType ( base , i , sources [ i ] ) ;
36384: LD_VAR 0 15
36388: PPUSH
36389: LD_VAR 0 8
36393: PPUSH
36394: LD_VAR 0 5
36398: PUSH
36399: LD_VAR 0 8
36403: ARRAY
36404: PPUSH
36405: CALL_OW 276
36409: GO 36381
36411: POP
36412: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36413: LD_ADDR_VAR 0 18
36417: PUSH
36418: LD_VAR 0 15
36422: PPUSH
36423: LD_VAR 0 2
36427: PPUSH
36428: LD_INT 1
36430: PPUSH
36431: CALL 35674 0 3
36435: ST_TO_ADDR
// InitHc ;
36436: CALL_OW 19
// InitUc ;
36440: CALL_OW 18
// uc_side := side ;
36444: LD_ADDR_OWVAR 20
36448: PUSH
36449: LD_VAR 0 16
36453: ST_TO_ADDR
// uc_nation := nation ;
36454: LD_ADDR_OWVAR 21
36458: PUSH
36459: LD_VAR 0 17
36463: ST_TO_ADDR
// if buildings then
36464: LD_VAR 0 18
36468: IFFALSE 37790
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36470: LD_ADDR_VAR 0 19
36474: PUSH
36475: LD_VAR 0 18
36479: PPUSH
36480: LD_INT 2
36482: PUSH
36483: LD_INT 30
36485: PUSH
36486: LD_INT 29
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 30
36495: PUSH
36496: LD_INT 30
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: PPUSH
36508: CALL_OW 72
36512: ST_TO_ADDR
// if tmp then
36513: LD_VAR 0 19
36517: IFFALSE 36565
// for i in tmp do
36519: LD_ADDR_VAR 0 8
36523: PUSH
36524: LD_VAR 0 19
36528: PUSH
36529: FOR_IN
36530: IFFALSE 36563
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36532: LD_VAR 0 8
36536: PPUSH
36537: CALL_OW 250
36541: PPUSH
36542: LD_VAR 0 8
36546: PPUSH
36547: CALL_OW 251
36551: PPUSH
36552: LD_VAR 0 16
36556: PPUSH
36557: CALL_OW 441
36561: GO 36529
36563: POP
36564: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36565: LD_VAR 0 18
36569: PPUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 30
36575: PUSH
36576: LD_INT 32
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 30
36585: PUSH
36586: LD_INT 33
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: PPUSH
36598: CALL_OW 72
36602: IFFALSE 36690
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36604: LD_ADDR_VAR 0 8
36608: PUSH
36609: LD_VAR 0 18
36613: PPUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 30
36619: PUSH
36620: LD_INT 32
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 30
36629: PUSH
36630: LD_INT 33
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: PPUSH
36642: CALL_OW 72
36646: PUSH
36647: FOR_IN
36648: IFFALSE 36688
// begin if not GetBWeapon ( i ) then
36650: LD_VAR 0 8
36654: PPUSH
36655: CALL_OW 269
36659: NOT
36660: IFFALSE 36686
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36662: LD_VAR 0 8
36666: PPUSH
36667: LD_VAR 0 8
36671: PPUSH
36672: LD_VAR 0 2
36676: PPUSH
36677: CALL 37936 0 2
36681: PPUSH
36682: CALL_OW 431
// end ;
36686: GO 36647
36688: POP
36689: POP
// end ; for i = 1 to personel do
36690: LD_ADDR_VAR 0 8
36694: PUSH
36695: DOUBLE
36696: LD_INT 1
36698: DEC
36699: ST_TO_ADDR
36700: LD_VAR 0 6
36704: PUSH
36705: FOR_TO
36706: IFFALSE 37770
// begin if i > 4 then
36708: LD_VAR 0 8
36712: PUSH
36713: LD_INT 4
36715: GREATER
36716: IFFALSE 36720
// break ;
36718: GO 37770
// case i of 1 :
36720: LD_VAR 0 8
36724: PUSH
36725: LD_INT 1
36727: DOUBLE
36728: EQUAL
36729: IFTRUE 36733
36731: GO 36813
36733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36734: LD_ADDR_VAR 0 12
36738: PUSH
36739: LD_VAR 0 18
36743: PPUSH
36744: LD_INT 22
36746: PUSH
36747: LD_VAR 0 16
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 58
36758: PUSH
36759: EMPTY
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 30
36767: PUSH
36768: LD_INT 32
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 30
36777: PUSH
36778: LD_INT 4
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 30
36787: PUSH
36788: LD_INT 5
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: PPUSH
36806: CALL_OW 72
36810: ST_TO_ADDR
36811: GO 37035
36813: LD_INT 2
36815: DOUBLE
36816: EQUAL
36817: IFTRUE 36821
36819: GO 36883
36821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36822: LD_ADDR_VAR 0 12
36826: PUSH
36827: LD_VAR 0 18
36831: PPUSH
36832: LD_INT 22
36834: PUSH
36835: LD_VAR 0 16
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: LD_INT 30
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 30
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PPUSH
36876: CALL_OW 72
36880: ST_TO_ADDR
36881: GO 37035
36883: LD_INT 3
36885: DOUBLE
36886: EQUAL
36887: IFTRUE 36891
36889: GO 36953
36891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36892: LD_ADDR_VAR 0 12
36896: PUSH
36897: LD_VAR 0 18
36901: PPUSH
36902: LD_INT 22
36904: PUSH
36905: LD_VAR 0 16
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 30
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 30
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PPUSH
36946: CALL_OW 72
36950: ST_TO_ADDR
36951: GO 37035
36953: LD_INT 4
36955: DOUBLE
36956: EQUAL
36957: IFTRUE 36961
36959: GO 37034
36961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36962: LD_ADDR_VAR 0 12
36966: PUSH
36967: LD_VAR 0 18
36971: PPUSH
36972: LD_INT 22
36974: PUSH
36975: LD_VAR 0 16
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: LD_INT 30
36989: PUSH
36990: LD_INT 6
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 30
36999: PUSH
37000: LD_INT 7
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 30
37009: PUSH
37010: LD_INT 8
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PPUSH
37027: CALL_OW 72
37031: ST_TO_ADDR
37032: GO 37035
37034: POP
// if i = 1 then
37035: LD_VAR 0 8
37039: PUSH
37040: LD_INT 1
37042: EQUAL
37043: IFFALSE 37154
// begin tmp := [ ] ;
37045: LD_ADDR_VAR 0 19
37049: PUSH
37050: EMPTY
37051: ST_TO_ADDR
// for j in f do
37052: LD_ADDR_VAR 0 9
37056: PUSH
37057: LD_VAR 0 12
37061: PUSH
37062: FOR_IN
37063: IFFALSE 37136
// if GetBType ( j ) = b_bunker then
37065: LD_VAR 0 9
37069: PPUSH
37070: CALL_OW 266
37074: PUSH
37075: LD_INT 32
37077: EQUAL
37078: IFFALSE 37105
// tmp := Insert ( tmp , 1 , j ) else
37080: LD_ADDR_VAR 0 19
37084: PUSH
37085: LD_VAR 0 19
37089: PPUSH
37090: LD_INT 1
37092: PPUSH
37093: LD_VAR 0 9
37097: PPUSH
37098: CALL_OW 2
37102: ST_TO_ADDR
37103: GO 37134
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37105: LD_ADDR_VAR 0 19
37109: PUSH
37110: LD_VAR 0 19
37114: PPUSH
37115: LD_VAR 0 19
37119: PUSH
37120: LD_INT 1
37122: PLUS
37123: PPUSH
37124: LD_VAR 0 9
37128: PPUSH
37129: CALL_OW 2
37133: ST_TO_ADDR
37134: GO 37062
37136: POP
37137: POP
// if tmp then
37138: LD_VAR 0 19
37142: IFFALSE 37154
// f := tmp ;
37144: LD_ADDR_VAR 0 12
37148: PUSH
37149: LD_VAR 0 19
37153: ST_TO_ADDR
// end ; x := personel [ i ] ;
37154: LD_ADDR_VAR 0 13
37158: PUSH
37159: LD_VAR 0 6
37163: PUSH
37164: LD_VAR 0 8
37168: ARRAY
37169: ST_TO_ADDR
// if x = - 1 then
37170: LD_VAR 0 13
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: EQUAL
37179: IFFALSE 37388
// begin for j in f do
37181: LD_ADDR_VAR 0 9
37185: PUSH
37186: LD_VAR 0 12
37190: PUSH
37191: FOR_IN
37192: IFFALSE 37384
// repeat InitHc ;
37194: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37198: LD_VAR 0 9
37202: PPUSH
37203: CALL_OW 266
37207: PUSH
37208: LD_INT 5
37210: EQUAL
37211: IFFALSE 37281
// begin if UnitsInside ( j ) < 3 then
37213: LD_VAR 0 9
37217: PPUSH
37218: CALL_OW 313
37222: PUSH
37223: LD_INT 3
37225: LESS
37226: IFFALSE 37262
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37228: LD_INT 0
37230: PPUSH
37231: LD_INT 5
37233: PUSH
37234: LD_INT 8
37236: PUSH
37237: LD_INT 9
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: PUSH
37245: LD_VAR 0 17
37249: ARRAY
37250: PPUSH
37251: LD_VAR 0 4
37255: PPUSH
37256: CALL_OW 380
37260: GO 37279
// PrepareHuman ( false , i , skill ) ;
37262: LD_INT 0
37264: PPUSH
37265: LD_VAR 0 8
37269: PPUSH
37270: LD_VAR 0 4
37274: PPUSH
37275: CALL_OW 380
// end else
37279: GO 37298
// PrepareHuman ( false , i , skill ) ;
37281: LD_INT 0
37283: PPUSH
37284: LD_VAR 0 8
37288: PPUSH
37289: LD_VAR 0 4
37293: PPUSH
37294: CALL_OW 380
// un := CreateHuman ;
37298: LD_ADDR_VAR 0 14
37302: PUSH
37303: CALL_OW 44
37307: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37308: LD_ADDR_VAR 0 7
37312: PUSH
37313: LD_VAR 0 7
37317: PPUSH
37318: LD_INT 1
37320: PPUSH
37321: LD_VAR 0 14
37325: PPUSH
37326: CALL_OW 2
37330: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37331: LD_VAR 0 14
37335: PPUSH
37336: LD_VAR 0 9
37340: PPUSH
37341: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37345: LD_VAR 0 9
37349: PPUSH
37350: CALL_OW 313
37354: PUSH
37355: LD_INT 6
37357: EQUAL
37358: PUSH
37359: LD_VAR 0 9
37363: PPUSH
37364: CALL_OW 266
37368: PUSH
37369: LD_INT 32
37371: PUSH
37372: LD_INT 31
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: IN
37379: OR
37380: IFFALSE 37194
37382: GO 37191
37384: POP
37385: POP
// end else
37386: GO 37768
// for j = 1 to x do
37388: LD_ADDR_VAR 0 9
37392: PUSH
37393: DOUBLE
37394: LD_INT 1
37396: DEC
37397: ST_TO_ADDR
37398: LD_VAR 0 13
37402: PUSH
37403: FOR_TO
37404: IFFALSE 37766
// begin InitHc ;
37406: CALL_OW 19
// if not f then
37410: LD_VAR 0 12
37414: NOT
37415: IFFALSE 37504
// begin PrepareHuman ( false , i , skill ) ;
37417: LD_INT 0
37419: PPUSH
37420: LD_VAR 0 8
37424: PPUSH
37425: LD_VAR 0 4
37429: PPUSH
37430: CALL_OW 380
// un := CreateHuman ;
37434: LD_ADDR_VAR 0 14
37438: PUSH
37439: CALL_OW 44
37443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37444: LD_ADDR_VAR 0 7
37448: PUSH
37449: LD_VAR 0 7
37453: PPUSH
37454: LD_INT 1
37456: PPUSH
37457: LD_VAR 0 14
37461: PPUSH
37462: CALL_OW 2
37466: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37467: LD_VAR 0 14
37471: PPUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 250
37481: PPUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 251
37491: PPUSH
37492: LD_INT 10
37494: PPUSH
37495: LD_INT 0
37497: PPUSH
37498: CALL_OW 50
// continue ;
37502: GO 37403
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37504: LD_VAR 0 12
37508: PUSH
37509: LD_INT 1
37511: ARRAY
37512: PPUSH
37513: CALL_OW 313
37517: PUSH
37518: LD_VAR 0 12
37522: PUSH
37523: LD_INT 1
37525: ARRAY
37526: PPUSH
37527: CALL_OW 266
37531: PUSH
37532: LD_INT 32
37534: PUSH
37535: LD_INT 31
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: IN
37542: AND
37543: PUSH
37544: LD_VAR 0 12
37548: PUSH
37549: LD_INT 1
37551: ARRAY
37552: PPUSH
37553: CALL_OW 313
37557: PUSH
37558: LD_INT 6
37560: EQUAL
37561: OR
37562: IFFALSE 37582
// f := Delete ( f , 1 ) ;
37564: LD_ADDR_VAR 0 12
37568: PUSH
37569: LD_VAR 0 12
37573: PPUSH
37574: LD_INT 1
37576: PPUSH
37577: CALL_OW 3
37581: ST_TO_ADDR
// if not f then
37582: LD_VAR 0 12
37586: NOT
37587: IFFALSE 37605
// begin x := x + 2 ;
37589: LD_ADDR_VAR 0 13
37593: PUSH
37594: LD_VAR 0 13
37598: PUSH
37599: LD_INT 2
37601: PLUS
37602: ST_TO_ADDR
// continue ;
37603: GO 37403
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37605: LD_VAR 0 12
37609: PUSH
37610: LD_INT 1
37612: ARRAY
37613: PPUSH
37614: CALL_OW 266
37618: PUSH
37619: LD_INT 5
37621: EQUAL
37622: IFFALSE 37696
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37624: LD_VAR 0 12
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: PPUSH
37633: CALL_OW 313
37637: PUSH
37638: LD_INT 3
37640: LESS
37641: IFFALSE 37677
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37643: LD_INT 0
37645: PPUSH
37646: LD_INT 5
37648: PUSH
37649: LD_INT 8
37651: PUSH
37652: LD_INT 9
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: PUSH
37660: LD_VAR 0 17
37664: ARRAY
37665: PPUSH
37666: LD_VAR 0 4
37670: PPUSH
37671: CALL_OW 380
37675: GO 37694
// PrepareHuman ( false , i , skill ) ;
37677: LD_INT 0
37679: PPUSH
37680: LD_VAR 0 8
37684: PPUSH
37685: LD_VAR 0 4
37689: PPUSH
37690: CALL_OW 380
// end else
37694: GO 37713
// PrepareHuman ( false , i , skill ) ;
37696: LD_INT 0
37698: PPUSH
37699: LD_VAR 0 8
37703: PPUSH
37704: LD_VAR 0 4
37708: PPUSH
37709: CALL_OW 380
// un := CreateHuman ;
37713: LD_ADDR_VAR 0 14
37717: PUSH
37718: CALL_OW 44
37722: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37723: LD_ADDR_VAR 0 7
37727: PUSH
37728: LD_VAR 0 7
37732: PPUSH
37733: LD_INT 1
37735: PPUSH
37736: LD_VAR 0 14
37740: PPUSH
37741: CALL_OW 2
37745: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37746: LD_VAR 0 14
37750: PPUSH
37751: LD_VAR 0 12
37755: PUSH
37756: LD_INT 1
37758: ARRAY
37759: PPUSH
37760: CALL_OW 52
// end ;
37764: GO 37403
37766: POP
37767: POP
// end ;
37768: GO 36705
37770: POP
37771: POP
// result := result ^ buildings ;
37772: LD_ADDR_VAR 0 7
37776: PUSH
37777: LD_VAR 0 7
37781: PUSH
37782: LD_VAR 0 18
37786: ADD
37787: ST_TO_ADDR
// end else
37788: GO 37931
// begin for i = 1 to personel do
37790: LD_ADDR_VAR 0 8
37794: PUSH
37795: DOUBLE
37796: LD_INT 1
37798: DEC
37799: ST_TO_ADDR
37800: LD_VAR 0 6
37804: PUSH
37805: FOR_TO
37806: IFFALSE 37929
// begin if i > 4 then
37808: LD_VAR 0 8
37812: PUSH
37813: LD_INT 4
37815: GREATER
37816: IFFALSE 37820
// break ;
37818: GO 37929
// x := personel [ i ] ;
37820: LD_ADDR_VAR 0 13
37824: PUSH
37825: LD_VAR 0 6
37829: PUSH
37830: LD_VAR 0 8
37834: ARRAY
37835: ST_TO_ADDR
// if x = - 1 then
37836: LD_VAR 0 13
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: EQUAL
37845: IFFALSE 37849
// continue ;
37847: GO 37805
// PrepareHuman ( false , i , skill ) ;
37849: LD_INT 0
37851: PPUSH
37852: LD_VAR 0 8
37856: PPUSH
37857: LD_VAR 0 4
37861: PPUSH
37862: CALL_OW 380
// un := CreateHuman ;
37866: LD_ADDR_VAR 0 14
37870: PUSH
37871: CALL_OW 44
37875: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37876: LD_VAR 0 14
37880: PPUSH
37881: LD_VAR 0 1
37885: PPUSH
37886: CALL_OW 250
37890: PPUSH
37891: LD_VAR 0 1
37895: PPUSH
37896: CALL_OW 251
37900: PPUSH
37901: LD_INT 10
37903: PPUSH
37904: LD_INT 0
37906: PPUSH
37907: CALL_OW 50
// result := result ^ un ;
37911: LD_ADDR_VAR 0 7
37915: PUSH
37916: LD_VAR 0 7
37920: PUSH
37921: LD_VAR 0 14
37925: ADD
37926: ST_TO_ADDR
// end ;
37927: GO 37805
37929: POP
37930: POP
// end ; end ;
37931: LD_VAR 0 7
37935: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37936: LD_INT 0
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
37948: PPUSH
37949: PPUSH
37950: PPUSH
37951: PPUSH
37952: PPUSH
37953: PPUSH
// result := false ;
37954: LD_ADDR_VAR 0 3
37958: PUSH
37959: LD_INT 0
37961: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37962: LD_VAR 0 1
37966: NOT
37967: PUSH
37968: LD_VAR 0 1
37972: PPUSH
37973: CALL_OW 266
37977: PUSH
37978: LD_INT 32
37980: PUSH
37981: LD_INT 33
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: IN
37988: NOT
37989: OR
37990: IFFALSE 37994
// exit ;
37992: GO 39103
// nat := GetNation ( tower ) ;
37994: LD_ADDR_VAR 0 12
37998: PUSH
37999: LD_VAR 0 1
38003: PPUSH
38004: CALL_OW 248
38008: ST_TO_ADDR
// side := GetSide ( tower ) ;
38009: LD_ADDR_VAR 0 16
38013: PUSH
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 255
38023: ST_TO_ADDR
// x := GetX ( tower ) ;
38024: LD_ADDR_VAR 0 10
38028: PUSH
38029: LD_VAR 0 1
38033: PPUSH
38034: CALL_OW 250
38038: ST_TO_ADDR
// y := GetY ( tower ) ;
38039: LD_ADDR_VAR 0 11
38043: PUSH
38044: LD_VAR 0 1
38048: PPUSH
38049: CALL_OW 251
38053: ST_TO_ADDR
// if not x or not y then
38054: LD_VAR 0 10
38058: NOT
38059: PUSH
38060: LD_VAR 0 11
38064: NOT
38065: OR
38066: IFFALSE 38070
// exit ;
38068: GO 39103
// weapon := 0 ;
38070: LD_ADDR_VAR 0 18
38074: PUSH
38075: LD_INT 0
38077: ST_TO_ADDR
// fac_list := [ ] ;
38078: LD_ADDR_VAR 0 17
38082: PUSH
38083: EMPTY
38084: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38085: LD_ADDR_VAR 0 6
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 274
38099: PPUSH
38100: LD_VAR 0 2
38104: PPUSH
38105: LD_INT 0
38107: PPUSH
38108: CALL 35674 0 3
38112: PPUSH
38113: LD_INT 30
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PPUSH
38123: CALL_OW 72
38127: ST_TO_ADDR
// if not factories then
38128: LD_VAR 0 6
38132: NOT
38133: IFFALSE 38137
// exit ;
38135: GO 39103
// for i in factories do
38137: LD_ADDR_VAR 0 8
38141: PUSH
38142: LD_VAR 0 6
38146: PUSH
38147: FOR_IN
38148: IFFALSE 38173
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38150: LD_ADDR_VAR 0 17
38154: PUSH
38155: LD_VAR 0 17
38159: PUSH
38160: LD_VAR 0 8
38164: PPUSH
38165: CALL_OW 478
38169: UNION
38170: ST_TO_ADDR
38171: GO 38147
38173: POP
38174: POP
// if not fac_list then
38175: LD_VAR 0 17
38179: NOT
38180: IFFALSE 38184
// exit ;
38182: GO 39103
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38184: LD_ADDR_VAR 0 5
38188: PUSH
38189: LD_INT 4
38191: PUSH
38192: LD_INT 5
38194: PUSH
38195: LD_INT 9
38197: PUSH
38198: LD_INT 10
38200: PUSH
38201: LD_INT 6
38203: PUSH
38204: LD_INT 7
38206: PUSH
38207: LD_INT 11
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 27
38221: PUSH
38222: LD_INT 28
38224: PUSH
38225: LD_INT 26
38227: PUSH
38228: LD_INT 30
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 43
38239: PUSH
38240: LD_INT 44
38242: PUSH
38243: LD_INT 46
38245: PUSH
38246: LD_INT 45
38248: PUSH
38249: LD_INT 47
38251: PUSH
38252: LD_INT 49
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: PUSH
38268: LD_VAR 0 12
38272: ARRAY
38273: ST_TO_ADDR
// list := list isect fac_list ;
38274: LD_ADDR_VAR 0 5
38278: PUSH
38279: LD_VAR 0 5
38283: PUSH
38284: LD_VAR 0 17
38288: ISECT
38289: ST_TO_ADDR
// if not list then
38290: LD_VAR 0 5
38294: NOT
38295: IFFALSE 38299
// exit ;
38297: GO 39103
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38299: LD_VAR 0 12
38303: PUSH
38304: LD_INT 3
38306: EQUAL
38307: PUSH
38308: LD_INT 49
38310: PUSH
38311: LD_VAR 0 5
38315: IN
38316: AND
38317: PUSH
38318: LD_INT 31
38320: PPUSH
38321: LD_VAR 0 16
38325: PPUSH
38326: CALL_OW 321
38330: PUSH
38331: LD_INT 2
38333: EQUAL
38334: AND
38335: IFFALSE 38395
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38337: LD_INT 22
38339: PUSH
38340: LD_VAR 0 16
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 35
38351: PUSH
38352: LD_INT 49
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 91
38361: PUSH
38362: LD_VAR 0 1
38366: PUSH
38367: LD_INT 10
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: PPUSH
38380: CALL_OW 69
38384: NOT
38385: IFFALSE 38395
// weapon := ru_time_lapser ;
38387: LD_ADDR_VAR 0 18
38391: PUSH
38392: LD_INT 49
38394: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38395: LD_VAR 0 12
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: IN
38410: PUSH
38411: LD_INT 11
38413: PUSH
38414: LD_VAR 0 5
38418: IN
38419: PUSH
38420: LD_INT 30
38422: PUSH
38423: LD_VAR 0 5
38427: IN
38428: OR
38429: AND
38430: PUSH
38431: LD_INT 6
38433: PPUSH
38434: LD_VAR 0 16
38438: PPUSH
38439: CALL_OW 321
38443: PUSH
38444: LD_INT 2
38446: EQUAL
38447: AND
38448: IFFALSE 38613
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38450: LD_INT 22
38452: PUSH
38453: LD_VAR 0 16
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: PUSH
38465: LD_INT 35
38467: PUSH
38468: LD_INT 11
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 35
38477: PUSH
38478: LD_INT 30
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 91
38492: PUSH
38493: LD_VAR 0 1
38497: PUSH
38498: LD_INT 18
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: PPUSH
38511: CALL_OW 69
38515: NOT
38516: PUSH
38517: LD_INT 22
38519: PUSH
38520: LD_VAR 0 16
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 30
38534: PUSH
38535: LD_INT 32
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 30
38544: PUSH
38545: LD_INT 33
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 91
38559: PUSH
38560: LD_VAR 0 1
38564: PUSH
38565: LD_INT 12
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: PPUSH
38581: CALL_OW 69
38585: PUSH
38586: LD_INT 2
38588: GREATER
38589: AND
38590: IFFALSE 38613
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38592: LD_ADDR_VAR 0 18
38596: PUSH
38597: LD_INT 11
38599: PUSH
38600: LD_INT 30
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_VAR 0 12
38611: ARRAY
38612: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38613: LD_VAR 0 18
38617: NOT
38618: PUSH
38619: LD_INT 40
38621: PPUSH
38622: LD_VAR 0 16
38626: PPUSH
38627: CALL_OW 321
38631: PUSH
38632: LD_INT 2
38634: EQUAL
38635: AND
38636: PUSH
38637: LD_INT 7
38639: PUSH
38640: LD_VAR 0 5
38644: IN
38645: PUSH
38646: LD_INT 28
38648: PUSH
38649: LD_VAR 0 5
38653: IN
38654: OR
38655: PUSH
38656: LD_INT 45
38658: PUSH
38659: LD_VAR 0 5
38663: IN
38664: OR
38665: AND
38666: IFFALSE 38920
// begin hex := GetHexInfo ( x , y ) ;
38668: LD_ADDR_VAR 0 4
38672: PUSH
38673: LD_VAR 0 10
38677: PPUSH
38678: LD_VAR 0 11
38682: PPUSH
38683: CALL_OW 546
38687: ST_TO_ADDR
// if hex [ 1 ] then
38688: LD_VAR 0 4
38692: PUSH
38693: LD_INT 1
38695: ARRAY
38696: IFFALSE 38700
// exit ;
38698: GO 39103
// height := hex [ 2 ] ;
38700: LD_ADDR_VAR 0 15
38704: PUSH
38705: LD_VAR 0 4
38709: PUSH
38710: LD_INT 2
38712: ARRAY
38713: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38714: LD_ADDR_VAR 0 14
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: LD_INT 5
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// for i in tmp do
38737: LD_ADDR_VAR 0 8
38741: PUSH
38742: LD_VAR 0 14
38746: PUSH
38747: FOR_IN
38748: IFFALSE 38918
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38750: LD_ADDR_VAR 0 9
38754: PUSH
38755: LD_VAR 0 10
38759: PPUSH
38760: LD_VAR 0 8
38764: PPUSH
38765: LD_INT 5
38767: PPUSH
38768: CALL_OW 272
38772: PUSH
38773: LD_VAR 0 11
38777: PPUSH
38778: LD_VAR 0 8
38782: PPUSH
38783: LD_INT 5
38785: PPUSH
38786: CALL_OW 273
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38795: LD_VAR 0 9
38799: PUSH
38800: LD_INT 1
38802: ARRAY
38803: PPUSH
38804: LD_VAR 0 9
38808: PUSH
38809: LD_INT 2
38811: ARRAY
38812: PPUSH
38813: CALL_OW 488
38817: IFFALSE 38916
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38819: LD_ADDR_VAR 0 4
38823: PUSH
38824: LD_VAR 0 9
38828: PUSH
38829: LD_INT 1
38831: ARRAY
38832: PPUSH
38833: LD_VAR 0 9
38837: PUSH
38838: LD_INT 2
38840: ARRAY
38841: PPUSH
38842: CALL_OW 546
38846: ST_TO_ADDR
// if hex [ 1 ] then
38847: LD_VAR 0 4
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: IFFALSE 38859
// continue ;
38857: GO 38747
// h := hex [ 2 ] ;
38859: LD_ADDR_VAR 0 13
38863: PUSH
38864: LD_VAR 0 4
38868: PUSH
38869: LD_INT 2
38871: ARRAY
38872: ST_TO_ADDR
// if h + 7 < height then
38873: LD_VAR 0 13
38877: PUSH
38878: LD_INT 7
38880: PLUS
38881: PUSH
38882: LD_VAR 0 15
38886: LESS
38887: IFFALSE 38916
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38889: LD_ADDR_VAR 0 18
38893: PUSH
38894: LD_INT 7
38896: PUSH
38897: LD_INT 28
38899: PUSH
38900: LD_INT 45
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_VAR 0 12
38912: ARRAY
38913: ST_TO_ADDR
// break ;
38914: GO 38918
// end ; end ; end ;
38916: GO 38747
38918: POP
38919: POP
// end ; if not weapon then
38920: LD_VAR 0 18
38924: NOT
38925: IFFALSE 38985
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38927: LD_ADDR_VAR 0 5
38931: PUSH
38932: LD_VAR 0 5
38936: PUSH
38937: LD_INT 11
38939: PUSH
38940: LD_INT 30
38942: PUSH
38943: LD_INT 49
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: DIFF
38951: ST_TO_ADDR
// if not list then
38952: LD_VAR 0 5
38956: NOT
38957: IFFALSE 38961
// exit ;
38959: GO 39103
// weapon := list [ rand ( 1 , list ) ] ;
38961: LD_ADDR_VAR 0 18
38965: PUSH
38966: LD_VAR 0 5
38970: PUSH
38971: LD_INT 1
38973: PPUSH
38974: LD_VAR 0 5
38978: PPUSH
38979: CALL_OW 12
38983: ARRAY
38984: ST_TO_ADDR
// end ; if weapon then
38985: LD_VAR 0 18
38989: IFFALSE 39103
// begin tmp := CostOfWeapon ( weapon ) ;
38991: LD_ADDR_VAR 0 14
38995: PUSH
38996: LD_VAR 0 18
39000: PPUSH
39001: CALL_OW 451
39005: ST_TO_ADDR
// j := GetBase ( tower ) ;
39006: LD_ADDR_VAR 0 9
39010: PUSH
39011: LD_VAR 0 1
39015: PPUSH
39016: CALL_OW 274
39020: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39021: LD_VAR 0 9
39025: PPUSH
39026: LD_INT 1
39028: PPUSH
39029: CALL_OW 275
39033: PUSH
39034: LD_VAR 0 14
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: GREATEREQUAL
39043: PUSH
39044: LD_VAR 0 9
39048: PPUSH
39049: LD_INT 2
39051: PPUSH
39052: CALL_OW 275
39056: PUSH
39057: LD_VAR 0 14
39061: PUSH
39062: LD_INT 2
39064: ARRAY
39065: GREATEREQUAL
39066: AND
39067: PUSH
39068: LD_VAR 0 9
39072: PPUSH
39073: LD_INT 3
39075: PPUSH
39076: CALL_OW 275
39080: PUSH
39081: LD_VAR 0 14
39085: PUSH
39086: LD_INT 3
39088: ARRAY
39089: GREATEREQUAL
39090: AND
39091: IFFALSE 39103
// result := weapon ;
39093: LD_ADDR_VAR 0 3
39097: PUSH
39098: LD_VAR 0 18
39102: ST_TO_ADDR
// end ; end ;
39103: LD_VAR 0 3
39107: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39108: LD_INT 0
39110: PPUSH
39111: PPUSH
// result := true ;
39112: LD_ADDR_VAR 0 3
39116: PUSH
39117: LD_INT 1
39119: ST_TO_ADDR
// if array1 = array2 then
39120: LD_VAR 0 1
39124: PUSH
39125: LD_VAR 0 2
39129: EQUAL
39130: IFFALSE 39190
// begin for i = 1 to array1 do
39132: LD_ADDR_VAR 0 4
39136: PUSH
39137: DOUBLE
39138: LD_INT 1
39140: DEC
39141: ST_TO_ADDR
39142: LD_VAR 0 1
39146: PUSH
39147: FOR_TO
39148: IFFALSE 39186
// if array1 [ i ] <> array2 [ i ] then
39150: LD_VAR 0 1
39154: PUSH
39155: LD_VAR 0 4
39159: ARRAY
39160: PUSH
39161: LD_VAR 0 2
39165: PUSH
39166: LD_VAR 0 4
39170: ARRAY
39171: NONEQUAL
39172: IFFALSE 39184
// begin result := false ;
39174: LD_ADDR_VAR 0 3
39178: PUSH
39179: LD_INT 0
39181: ST_TO_ADDR
// break ;
39182: GO 39186
// end ;
39184: GO 39147
39186: POP
39187: POP
// end else
39188: GO 39198
// result := false ;
39190: LD_ADDR_VAR 0 3
39194: PUSH
39195: LD_INT 0
39197: ST_TO_ADDR
// end ;
39198: LD_VAR 0 3
39202: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39203: LD_INT 0
39205: PPUSH
39206: PPUSH
// if not array1 or not array2 then
39207: LD_VAR 0 1
39211: NOT
39212: PUSH
39213: LD_VAR 0 2
39217: NOT
39218: OR
39219: IFFALSE 39223
// exit ;
39221: GO 39287
// result := true ;
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_INT 1
39230: ST_TO_ADDR
// for i = 1 to array1 do
39231: LD_ADDR_VAR 0 4
39235: PUSH
39236: DOUBLE
39237: LD_INT 1
39239: DEC
39240: ST_TO_ADDR
39241: LD_VAR 0 1
39245: PUSH
39246: FOR_TO
39247: IFFALSE 39285
// if array1 [ i ] <> array2 [ i ] then
39249: LD_VAR 0 1
39253: PUSH
39254: LD_VAR 0 4
39258: ARRAY
39259: PUSH
39260: LD_VAR 0 2
39264: PUSH
39265: LD_VAR 0 4
39269: ARRAY
39270: NONEQUAL
39271: IFFALSE 39283
// begin result := false ;
39273: LD_ADDR_VAR 0 3
39277: PUSH
39278: LD_INT 0
39280: ST_TO_ADDR
// break ;
39281: GO 39285
// end ;
39283: GO 39246
39285: POP
39286: POP
// end ;
39287: LD_VAR 0 3
39291: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39292: LD_INT 0
39294: PPUSH
39295: PPUSH
39296: PPUSH
// pom := GetBase ( fac ) ;
39297: LD_ADDR_VAR 0 5
39301: PUSH
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 274
39311: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39312: LD_ADDR_VAR 0 4
39316: PUSH
39317: LD_VAR 0 2
39321: PUSH
39322: LD_INT 1
39324: ARRAY
39325: PPUSH
39326: LD_VAR 0 2
39330: PUSH
39331: LD_INT 2
39333: ARRAY
39334: PPUSH
39335: LD_VAR 0 2
39339: PUSH
39340: LD_INT 3
39342: ARRAY
39343: PPUSH
39344: LD_VAR 0 2
39348: PUSH
39349: LD_INT 4
39351: ARRAY
39352: PPUSH
39353: CALL_OW 449
39357: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39358: LD_ADDR_VAR 0 3
39362: PUSH
39363: LD_VAR 0 5
39367: PPUSH
39368: LD_INT 1
39370: PPUSH
39371: CALL_OW 275
39375: PUSH
39376: LD_VAR 0 4
39380: PUSH
39381: LD_INT 1
39383: ARRAY
39384: GREATEREQUAL
39385: PUSH
39386: LD_VAR 0 5
39390: PPUSH
39391: LD_INT 2
39393: PPUSH
39394: CALL_OW 275
39398: PUSH
39399: LD_VAR 0 4
39403: PUSH
39404: LD_INT 2
39406: ARRAY
39407: GREATEREQUAL
39408: AND
39409: PUSH
39410: LD_VAR 0 5
39414: PPUSH
39415: LD_INT 3
39417: PPUSH
39418: CALL_OW 275
39422: PUSH
39423: LD_VAR 0 4
39427: PUSH
39428: LD_INT 3
39430: ARRAY
39431: GREATEREQUAL
39432: AND
39433: ST_TO_ADDR
// end ;
39434: LD_VAR 0 3
39438: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39439: LD_INT 0
39441: PPUSH
39442: PPUSH
39443: PPUSH
39444: PPUSH
// pom := GetBase ( building ) ;
39445: LD_ADDR_VAR 0 3
39449: PUSH
39450: LD_VAR 0 1
39454: PPUSH
39455: CALL_OW 274
39459: ST_TO_ADDR
// if not pom then
39460: LD_VAR 0 3
39464: NOT
39465: IFFALSE 39469
// exit ;
39467: GO 39639
// btype := GetBType ( building ) ;
39469: LD_ADDR_VAR 0 5
39473: PUSH
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 266
39483: ST_TO_ADDR
// if btype = b_armoury then
39484: LD_VAR 0 5
39488: PUSH
39489: LD_INT 4
39491: EQUAL
39492: IFFALSE 39502
// btype := b_barracks ;
39494: LD_ADDR_VAR 0 5
39498: PUSH
39499: LD_INT 5
39501: ST_TO_ADDR
// if btype = b_depot then
39502: LD_VAR 0 5
39506: PUSH
39507: LD_INT 0
39509: EQUAL
39510: IFFALSE 39520
// btype := b_warehouse ;
39512: LD_ADDR_VAR 0 5
39516: PUSH
39517: LD_INT 1
39519: ST_TO_ADDR
// if btype = b_workshop then
39520: LD_VAR 0 5
39524: PUSH
39525: LD_INT 2
39527: EQUAL
39528: IFFALSE 39538
// btype := b_factory ;
39530: LD_ADDR_VAR 0 5
39534: PUSH
39535: LD_INT 3
39537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39538: LD_ADDR_VAR 0 4
39542: PUSH
39543: LD_VAR 0 5
39547: PPUSH
39548: LD_VAR 0 1
39552: PPUSH
39553: CALL_OW 248
39557: PPUSH
39558: CALL_OW 450
39562: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39563: LD_ADDR_VAR 0 2
39567: PUSH
39568: LD_VAR 0 3
39572: PPUSH
39573: LD_INT 1
39575: PPUSH
39576: CALL_OW 275
39580: PUSH
39581: LD_VAR 0 4
39585: PUSH
39586: LD_INT 1
39588: ARRAY
39589: GREATEREQUAL
39590: PUSH
39591: LD_VAR 0 3
39595: PPUSH
39596: LD_INT 2
39598: PPUSH
39599: CALL_OW 275
39603: PUSH
39604: LD_VAR 0 4
39608: PUSH
39609: LD_INT 2
39611: ARRAY
39612: GREATEREQUAL
39613: AND
39614: PUSH
39615: LD_VAR 0 3
39619: PPUSH
39620: LD_INT 3
39622: PPUSH
39623: CALL_OW 275
39627: PUSH
39628: LD_VAR 0 4
39632: PUSH
39633: LD_INT 3
39635: ARRAY
39636: GREATEREQUAL
39637: AND
39638: ST_TO_ADDR
// end ;
39639: LD_VAR 0 2
39643: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39644: LD_INT 0
39646: PPUSH
39647: PPUSH
39648: PPUSH
// pom := GetBase ( building ) ;
39649: LD_ADDR_VAR 0 4
39653: PUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: CALL_OW 274
39663: ST_TO_ADDR
// if not pom then
39664: LD_VAR 0 4
39668: NOT
39669: IFFALSE 39673
// exit ;
39671: GO 39774
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 2
39682: PPUSH
39683: LD_VAR 0 1
39687: PPUSH
39688: CALL_OW 248
39692: PPUSH
39693: CALL_OW 450
39697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39698: LD_ADDR_VAR 0 3
39702: PUSH
39703: LD_VAR 0 4
39707: PPUSH
39708: LD_INT 1
39710: PPUSH
39711: CALL_OW 275
39715: PUSH
39716: LD_VAR 0 5
39720: PUSH
39721: LD_INT 1
39723: ARRAY
39724: GREATEREQUAL
39725: PUSH
39726: LD_VAR 0 4
39730: PPUSH
39731: LD_INT 2
39733: PPUSH
39734: CALL_OW 275
39738: PUSH
39739: LD_VAR 0 5
39743: PUSH
39744: LD_INT 2
39746: ARRAY
39747: GREATEREQUAL
39748: AND
39749: PUSH
39750: LD_VAR 0 4
39754: PPUSH
39755: LD_INT 3
39757: PPUSH
39758: CALL_OW 275
39762: PUSH
39763: LD_VAR 0 5
39767: PUSH
39768: LD_INT 3
39770: ARRAY
39771: GREATEREQUAL
39772: AND
39773: ST_TO_ADDR
// end ;
39774: LD_VAR 0 3
39778: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39779: LD_INT 0
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
// result := false ;
39792: LD_ADDR_VAR 0 8
39796: PUSH
39797: LD_INT 0
39799: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39800: LD_VAR 0 5
39804: NOT
39805: PUSH
39806: LD_VAR 0 1
39810: NOT
39811: OR
39812: PUSH
39813: LD_VAR 0 2
39817: NOT
39818: OR
39819: PUSH
39820: LD_VAR 0 3
39824: NOT
39825: OR
39826: IFFALSE 39830
// exit ;
39828: GO 40644
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39830: LD_ADDR_VAR 0 14
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: LD_VAR 0 2
39844: PPUSH
39845: LD_VAR 0 3
39849: PPUSH
39850: LD_VAR 0 4
39854: PPUSH
39855: LD_VAR 0 5
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: PPUSH
39864: CALL_OW 248
39868: PPUSH
39869: LD_INT 0
39871: PPUSH
39872: CALL 41881 0 6
39876: ST_TO_ADDR
// if not hexes then
39877: LD_VAR 0 14
39881: NOT
39882: IFFALSE 39886
// exit ;
39884: GO 40644
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39886: LD_ADDR_VAR 0 17
39890: PUSH
39891: LD_VAR 0 5
39895: PPUSH
39896: LD_INT 22
39898: PUSH
39899: LD_VAR 0 13
39903: PPUSH
39904: CALL_OW 255
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 30
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 30
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PPUSH
39945: CALL_OW 72
39949: ST_TO_ADDR
// for i = 1 to hexes do
39950: LD_ADDR_VAR 0 9
39954: PUSH
39955: DOUBLE
39956: LD_INT 1
39958: DEC
39959: ST_TO_ADDR
39960: LD_VAR 0 14
39964: PUSH
39965: FOR_TO
39966: IFFALSE 40642
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39968: LD_ADDR_VAR 0 13
39972: PUSH
39973: LD_VAR 0 14
39977: PUSH
39978: LD_VAR 0 9
39982: ARRAY
39983: PUSH
39984: LD_INT 1
39986: ARRAY
39987: PPUSH
39988: LD_VAR 0 14
39992: PUSH
39993: LD_VAR 0 9
39997: ARRAY
39998: PUSH
39999: LD_INT 2
40001: ARRAY
40002: PPUSH
40003: CALL_OW 428
40007: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40008: LD_VAR 0 14
40012: PUSH
40013: LD_VAR 0 9
40017: ARRAY
40018: PUSH
40019: LD_INT 1
40021: ARRAY
40022: PPUSH
40023: LD_VAR 0 14
40027: PUSH
40028: LD_VAR 0 9
40032: ARRAY
40033: PUSH
40034: LD_INT 2
40036: ARRAY
40037: PPUSH
40038: CALL_OW 351
40042: PUSH
40043: LD_VAR 0 14
40047: PUSH
40048: LD_VAR 0 9
40052: ARRAY
40053: PUSH
40054: LD_INT 1
40056: ARRAY
40057: PPUSH
40058: LD_VAR 0 14
40062: PUSH
40063: LD_VAR 0 9
40067: ARRAY
40068: PUSH
40069: LD_INT 2
40071: ARRAY
40072: PPUSH
40073: CALL_OW 488
40077: NOT
40078: OR
40079: PUSH
40080: LD_VAR 0 13
40084: PPUSH
40085: CALL_OW 247
40089: PUSH
40090: LD_INT 3
40092: EQUAL
40093: OR
40094: IFFALSE 40100
// exit ;
40096: POP
40097: POP
40098: GO 40644
// if not tmp then
40100: LD_VAR 0 13
40104: NOT
40105: IFFALSE 40109
// continue ;
40107: GO 39965
// result := true ;
40109: LD_ADDR_VAR 0 8
40113: PUSH
40114: LD_INT 1
40116: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40117: LD_VAR 0 6
40121: PUSH
40122: LD_VAR 0 13
40126: PPUSH
40127: CALL_OW 247
40131: PUSH
40132: LD_INT 2
40134: EQUAL
40135: AND
40136: PUSH
40137: LD_VAR 0 13
40141: PPUSH
40142: CALL_OW 263
40146: PUSH
40147: LD_INT 1
40149: EQUAL
40150: AND
40151: IFFALSE 40315
// begin if IsDrivenBy ( tmp ) then
40153: LD_VAR 0 13
40157: PPUSH
40158: CALL_OW 311
40162: IFFALSE 40166
// continue ;
40164: GO 39965
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40166: LD_VAR 0 6
40170: PPUSH
40171: LD_INT 3
40173: PUSH
40174: LD_INT 60
40176: PUSH
40177: EMPTY
40178: LIST
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: PUSH
40187: LD_INT 55
40189: PUSH
40190: EMPTY
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PPUSH
40201: CALL_OW 72
40205: IFFALSE 40313
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40207: LD_ADDR_VAR 0 18
40211: PUSH
40212: LD_VAR 0 6
40216: PPUSH
40217: LD_INT 3
40219: PUSH
40220: LD_INT 60
40222: PUSH
40223: EMPTY
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: LD_INT 55
40235: PUSH
40236: EMPTY
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PPUSH
40247: CALL_OW 72
40251: PUSH
40252: LD_INT 1
40254: ARRAY
40255: ST_TO_ADDR
// if IsInUnit ( driver ) then
40256: LD_VAR 0 18
40260: PPUSH
40261: CALL_OW 310
40265: IFFALSE 40276
// ComExit ( driver ) ;
40267: LD_VAR 0 18
40271: PPUSH
40272: CALL 65065 0 1
// AddComEnterUnit ( driver , tmp ) ;
40276: LD_VAR 0 18
40280: PPUSH
40281: LD_VAR 0 13
40285: PPUSH
40286: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40290: LD_VAR 0 18
40294: PPUSH
40295: LD_VAR 0 7
40299: PPUSH
40300: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40304: LD_VAR 0 18
40308: PPUSH
40309: CALL_OW 181
// end ; continue ;
40313: GO 39965
// end ; if not cleaners or not tmp in cleaners then
40315: LD_VAR 0 6
40319: NOT
40320: PUSH
40321: LD_VAR 0 13
40325: PUSH
40326: LD_VAR 0 6
40330: IN
40331: NOT
40332: OR
40333: IFFALSE 40640
// begin if dep then
40335: LD_VAR 0 17
40339: IFFALSE 40475
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40341: LD_ADDR_VAR 0 16
40345: PUSH
40346: LD_VAR 0 17
40350: PUSH
40351: LD_INT 1
40353: ARRAY
40354: PPUSH
40355: CALL_OW 250
40359: PPUSH
40360: LD_VAR 0 17
40364: PUSH
40365: LD_INT 1
40367: ARRAY
40368: PPUSH
40369: CALL_OW 254
40373: PPUSH
40374: LD_INT 5
40376: PPUSH
40377: CALL_OW 272
40381: PUSH
40382: LD_VAR 0 17
40386: PUSH
40387: LD_INT 1
40389: ARRAY
40390: PPUSH
40391: CALL_OW 251
40395: PPUSH
40396: LD_VAR 0 17
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: PPUSH
40405: CALL_OW 254
40409: PPUSH
40410: LD_INT 5
40412: PPUSH
40413: CALL_OW 273
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40422: LD_VAR 0 16
40426: PUSH
40427: LD_INT 1
40429: ARRAY
40430: PPUSH
40431: LD_VAR 0 16
40435: PUSH
40436: LD_INT 2
40438: ARRAY
40439: PPUSH
40440: CALL_OW 488
40444: IFFALSE 40475
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40446: LD_VAR 0 13
40450: PPUSH
40451: LD_VAR 0 16
40455: PUSH
40456: LD_INT 1
40458: ARRAY
40459: PPUSH
40460: LD_VAR 0 16
40464: PUSH
40465: LD_INT 2
40467: ARRAY
40468: PPUSH
40469: CALL_OW 111
// continue ;
40473: GO 39965
// end ; end ; r := GetDir ( tmp ) ;
40475: LD_ADDR_VAR 0 15
40479: PUSH
40480: LD_VAR 0 13
40484: PPUSH
40485: CALL_OW 254
40489: ST_TO_ADDR
// if r = 5 then
40490: LD_VAR 0 15
40494: PUSH
40495: LD_INT 5
40497: EQUAL
40498: IFFALSE 40508
// r := 0 ;
40500: LD_ADDR_VAR 0 15
40504: PUSH
40505: LD_INT 0
40507: ST_TO_ADDR
// for j = r to 5 do
40508: LD_ADDR_VAR 0 10
40512: PUSH
40513: DOUBLE
40514: LD_VAR 0 15
40518: DEC
40519: ST_TO_ADDR
40520: LD_INT 5
40522: PUSH
40523: FOR_TO
40524: IFFALSE 40638
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40526: LD_ADDR_VAR 0 11
40530: PUSH
40531: LD_VAR 0 13
40535: PPUSH
40536: CALL_OW 250
40540: PPUSH
40541: LD_VAR 0 10
40545: PPUSH
40546: LD_INT 2
40548: PPUSH
40549: CALL_OW 272
40553: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40554: LD_ADDR_VAR 0 12
40558: PUSH
40559: LD_VAR 0 13
40563: PPUSH
40564: CALL_OW 251
40568: PPUSH
40569: LD_VAR 0 10
40573: PPUSH
40574: LD_INT 2
40576: PPUSH
40577: CALL_OW 273
40581: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40582: LD_VAR 0 11
40586: PPUSH
40587: LD_VAR 0 12
40591: PPUSH
40592: CALL_OW 488
40596: PUSH
40597: LD_VAR 0 11
40601: PPUSH
40602: LD_VAR 0 12
40606: PPUSH
40607: CALL_OW 428
40611: NOT
40612: AND
40613: IFFALSE 40636
// begin ComMoveXY ( tmp , _x , _y ) ;
40615: LD_VAR 0 13
40619: PPUSH
40620: LD_VAR 0 11
40624: PPUSH
40625: LD_VAR 0 12
40629: PPUSH
40630: CALL_OW 111
// break ;
40634: GO 40638
// end ; end ;
40636: GO 40523
40638: POP
40639: POP
// end ; end ;
40640: GO 39965
40642: POP
40643: POP
// end ;
40644: LD_VAR 0 8
40648: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40649: LD_INT 0
40651: PPUSH
// result := true ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_INT 1
40659: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40660: LD_VAR 0 2
40664: PUSH
40665: LD_INT 24
40667: DOUBLE
40668: EQUAL
40669: IFTRUE 40679
40671: LD_INT 33
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40704
40679: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_INT 32
40687: PPUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 321
40697: PUSH
40698: LD_INT 2
40700: EQUAL
40701: ST_TO_ADDR
40702: GO 41024
40704: LD_INT 20
40706: DOUBLE
40707: EQUAL
40708: IFTRUE 40712
40710: GO 40737
40712: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40713: LD_ADDR_VAR 0 3
40717: PUSH
40718: LD_INT 6
40720: PPUSH
40721: LD_VAR 0 1
40725: PPUSH
40726: CALL_OW 321
40730: PUSH
40731: LD_INT 2
40733: EQUAL
40734: ST_TO_ADDR
40735: GO 41024
40737: LD_INT 22
40739: DOUBLE
40740: EQUAL
40741: IFTRUE 40751
40743: LD_INT 36
40745: DOUBLE
40746: EQUAL
40747: IFTRUE 40751
40749: GO 40776
40751: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40752: LD_ADDR_VAR 0 3
40756: PUSH
40757: LD_INT 15
40759: PPUSH
40760: LD_VAR 0 1
40764: PPUSH
40765: CALL_OW 321
40769: PUSH
40770: LD_INT 2
40772: EQUAL
40773: ST_TO_ADDR
40774: GO 41024
40776: LD_INT 30
40778: DOUBLE
40779: EQUAL
40780: IFTRUE 40784
40782: GO 40809
40784: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40785: LD_ADDR_VAR 0 3
40789: PUSH
40790: LD_INT 20
40792: PPUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 321
40802: PUSH
40803: LD_INT 2
40805: EQUAL
40806: ST_TO_ADDR
40807: GO 41024
40809: LD_INT 28
40811: DOUBLE
40812: EQUAL
40813: IFTRUE 40823
40815: LD_INT 21
40817: DOUBLE
40818: EQUAL
40819: IFTRUE 40823
40821: GO 40848
40823: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40824: LD_ADDR_VAR 0 3
40828: PUSH
40829: LD_INT 21
40831: PPUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: CALL_OW 321
40841: PUSH
40842: LD_INT 2
40844: EQUAL
40845: ST_TO_ADDR
40846: GO 41024
40848: LD_INT 16
40850: DOUBLE
40851: EQUAL
40852: IFTRUE 40856
40854: GO 40883
40856: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40857: LD_ADDR_VAR 0 3
40861: PUSH
40862: LD_EXP 108
40866: PPUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 321
40876: PUSH
40877: LD_INT 2
40879: EQUAL
40880: ST_TO_ADDR
40881: GO 41024
40883: LD_INT 19
40885: DOUBLE
40886: EQUAL
40887: IFTRUE 40897
40889: LD_INT 23
40891: DOUBLE
40892: EQUAL
40893: IFTRUE 40897
40895: GO 40924
40897: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40898: LD_ADDR_VAR 0 3
40902: PUSH
40903: LD_EXP 107
40907: PPUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 321
40917: PUSH
40918: LD_INT 2
40920: EQUAL
40921: ST_TO_ADDR
40922: GO 41024
40924: LD_INT 17
40926: DOUBLE
40927: EQUAL
40928: IFTRUE 40932
40930: GO 40957
40932: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40933: LD_ADDR_VAR 0 3
40937: PUSH
40938: LD_INT 39
40940: PPUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 321
40950: PUSH
40951: LD_INT 2
40953: EQUAL
40954: ST_TO_ADDR
40955: GO 41024
40957: LD_INT 18
40959: DOUBLE
40960: EQUAL
40961: IFTRUE 40965
40963: GO 40990
40965: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40966: LD_ADDR_VAR 0 3
40970: PUSH
40971: LD_INT 40
40973: PPUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: CALL_OW 321
40983: PUSH
40984: LD_INT 2
40986: EQUAL
40987: ST_TO_ADDR
40988: GO 41024
40990: LD_INT 27
40992: DOUBLE
40993: EQUAL
40994: IFTRUE 40998
40996: GO 41023
40998: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40999: LD_ADDR_VAR 0 3
41003: PUSH
41004: LD_INT 35
41006: PPUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 321
41016: PUSH
41017: LD_INT 2
41019: EQUAL
41020: ST_TO_ADDR
41021: GO 41024
41023: POP
// end ;
41024: LD_VAR 0 3
41028: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41029: LD_INT 0
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
41039: PPUSH
41040: PPUSH
41041: PPUSH
// result := false ;
41042: LD_ADDR_VAR 0 6
41046: PUSH
41047: LD_INT 0
41049: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41050: LD_VAR 0 1
41054: NOT
41055: PUSH
41056: LD_VAR 0 1
41060: PPUSH
41061: CALL_OW 266
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: IN
41076: NOT
41077: OR
41078: PUSH
41079: LD_VAR 0 2
41083: NOT
41084: OR
41085: PUSH
41086: LD_VAR 0 5
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 3
41102: PUSH
41103: LD_INT 4
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: IN
41117: NOT
41118: OR
41119: PUSH
41120: LD_VAR 0 3
41124: PPUSH
41125: LD_VAR 0 4
41129: PPUSH
41130: CALL_OW 488
41134: NOT
41135: OR
41136: IFFALSE 41140
// exit ;
41138: GO 41876
// side := GetSide ( depot ) ;
41140: LD_ADDR_VAR 0 9
41144: PUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 255
41154: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41155: LD_VAR 0 9
41159: PPUSH
41160: LD_VAR 0 2
41164: PPUSH
41165: CALL 40649 0 2
41169: NOT
41170: IFFALSE 41174
// exit ;
41172: GO 41876
// pom := GetBase ( depot ) ;
41174: LD_ADDR_VAR 0 10
41178: PUSH
41179: LD_VAR 0 1
41183: PPUSH
41184: CALL_OW 274
41188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41189: LD_ADDR_VAR 0 11
41193: PUSH
41194: LD_VAR 0 2
41198: PPUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: CALL_OW 248
41208: PPUSH
41209: CALL_OW 450
41213: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41214: LD_VAR 0 10
41218: PPUSH
41219: LD_INT 1
41221: PPUSH
41222: CALL_OW 275
41226: PUSH
41227: LD_VAR 0 11
41231: PUSH
41232: LD_INT 1
41234: ARRAY
41235: GREATEREQUAL
41236: PUSH
41237: LD_VAR 0 10
41241: PPUSH
41242: LD_INT 2
41244: PPUSH
41245: CALL_OW 275
41249: PUSH
41250: LD_VAR 0 11
41254: PUSH
41255: LD_INT 2
41257: ARRAY
41258: GREATEREQUAL
41259: AND
41260: PUSH
41261: LD_VAR 0 10
41265: PPUSH
41266: LD_INT 3
41268: PPUSH
41269: CALL_OW 275
41273: PUSH
41274: LD_VAR 0 11
41278: PUSH
41279: LD_INT 3
41281: ARRAY
41282: GREATEREQUAL
41283: AND
41284: NOT
41285: IFFALSE 41289
// exit ;
41287: GO 41876
// if GetBType ( depot ) = b_depot then
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 266
41298: PUSH
41299: LD_INT 0
41301: EQUAL
41302: IFFALSE 41314
// dist := 28 else
41304: LD_ADDR_VAR 0 14
41308: PUSH
41309: LD_INT 28
41311: ST_TO_ADDR
41312: GO 41322
// dist := 36 ;
41314: LD_ADDR_VAR 0 14
41318: PUSH
41319: LD_INT 36
41321: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41322: LD_VAR 0 1
41326: PPUSH
41327: LD_VAR 0 3
41331: PPUSH
41332: LD_VAR 0 4
41336: PPUSH
41337: CALL_OW 297
41341: PUSH
41342: LD_VAR 0 14
41346: GREATER
41347: IFFALSE 41351
// exit ;
41349: GO 41876
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41351: LD_ADDR_VAR 0 12
41355: PUSH
41356: LD_VAR 0 2
41360: PPUSH
41361: LD_VAR 0 3
41365: PPUSH
41366: LD_VAR 0 4
41370: PPUSH
41371: LD_VAR 0 5
41375: PPUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 248
41385: PPUSH
41386: LD_INT 0
41388: PPUSH
41389: CALL 41881 0 6
41393: ST_TO_ADDR
// if not hexes then
41394: LD_VAR 0 12
41398: NOT
41399: IFFALSE 41403
// exit ;
41401: GO 41876
// hex := GetHexInfo ( x , y ) ;
41403: LD_ADDR_VAR 0 15
41407: PUSH
41408: LD_VAR 0 3
41412: PPUSH
41413: LD_VAR 0 4
41417: PPUSH
41418: CALL_OW 546
41422: ST_TO_ADDR
// if hex [ 1 ] then
41423: LD_VAR 0 15
41427: PUSH
41428: LD_INT 1
41430: ARRAY
41431: IFFALSE 41435
// exit ;
41433: GO 41876
// height := hex [ 2 ] ;
41435: LD_ADDR_VAR 0 13
41439: PUSH
41440: LD_VAR 0 15
41444: PUSH
41445: LD_INT 2
41447: ARRAY
41448: ST_TO_ADDR
// for i = 1 to hexes do
41449: LD_ADDR_VAR 0 7
41453: PUSH
41454: DOUBLE
41455: LD_INT 1
41457: DEC
41458: ST_TO_ADDR
41459: LD_VAR 0 12
41463: PUSH
41464: FOR_TO
41465: IFFALSE 41795
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41467: LD_VAR 0 12
41471: PUSH
41472: LD_VAR 0 7
41476: ARRAY
41477: PUSH
41478: LD_INT 1
41480: ARRAY
41481: PPUSH
41482: LD_VAR 0 12
41486: PUSH
41487: LD_VAR 0 7
41491: ARRAY
41492: PUSH
41493: LD_INT 2
41495: ARRAY
41496: PPUSH
41497: CALL_OW 488
41501: NOT
41502: PUSH
41503: LD_VAR 0 12
41507: PUSH
41508: LD_VAR 0 7
41512: ARRAY
41513: PUSH
41514: LD_INT 1
41516: ARRAY
41517: PPUSH
41518: LD_VAR 0 12
41522: PUSH
41523: LD_VAR 0 7
41527: ARRAY
41528: PUSH
41529: LD_INT 2
41531: ARRAY
41532: PPUSH
41533: CALL_OW 428
41537: PUSH
41538: LD_INT 0
41540: GREATER
41541: OR
41542: PUSH
41543: LD_VAR 0 12
41547: PUSH
41548: LD_VAR 0 7
41552: ARRAY
41553: PUSH
41554: LD_INT 1
41556: ARRAY
41557: PPUSH
41558: LD_VAR 0 12
41562: PUSH
41563: LD_VAR 0 7
41567: ARRAY
41568: PUSH
41569: LD_INT 2
41571: ARRAY
41572: PPUSH
41573: CALL_OW 351
41577: OR
41578: IFFALSE 41584
// exit ;
41580: POP
41581: POP
41582: GO 41876
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41584: LD_ADDR_VAR 0 8
41588: PUSH
41589: LD_VAR 0 12
41593: PUSH
41594: LD_VAR 0 7
41598: ARRAY
41599: PUSH
41600: LD_INT 1
41602: ARRAY
41603: PPUSH
41604: LD_VAR 0 12
41608: PUSH
41609: LD_VAR 0 7
41613: ARRAY
41614: PUSH
41615: LD_INT 2
41617: ARRAY
41618: PPUSH
41619: CALL_OW 546
41623: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41624: LD_VAR 0 8
41628: PUSH
41629: LD_INT 1
41631: ARRAY
41632: PUSH
41633: LD_VAR 0 8
41637: PUSH
41638: LD_INT 2
41640: ARRAY
41641: PUSH
41642: LD_VAR 0 13
41646: PUSH
41647: LD_INT 2
41649: PLUS
41650: GREATER
41651: OR
41652: PUSH
41653: LD_VAR 0 8
41657: PUSH
41658: LD_INT 2
41660: ARRAY
41661: PUSH
41662: LD_VAR 0 13
41666: PUSH
41667: LD_INT 2
41669: MINUS
41670: LESS
41671: OR
41672: PUSH
41673: LD_VAR 0 8
41677: PUSH
41678: LD_INT 3
41680: ARRAY
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 8
41687: PUSH
41688: LD_INT 9
41690: PUSH
41691: LD_INT 10
41693: PUSH
41694: LD_INT 11
41696: PUSH
41697: LD_INT 12
41699: PUSH
41700: LD_INT 13
41702: PUSH
41703: LD_INT 16
41705: PUSH
41706: LD_INT 17
41708: PUSH
41709: LD_INT 18
41711: PUSH
41712: LD_INT 19
41714: PUSH
41715: LD_INT 20
41717: PUSH
41718: LD_INT 21
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: IN
41736: NOT
41737: OR
41738: PUSH
41739: LD_VAR 0 8
41743: PUSH
41744: LD_INT 5
41746: ARRAY
41747: NOT
41748: OR
41749: PUSH
41750: LD_VAR 0 8
41754: PUSH
41755: LD_INT 6
41757: ARRAY
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: LD_INT 7
41767: PUSH
41768: LD_INT 9
41770: PUSH
41771: LD_INT 10
41773: PUSH
41774: LD_INT 11
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: IN
41785: NOT
41786: OR
41787: IFFALSE 41793
// exit ;
41789: POP
41790: POP
41791: GO 41876
// end ;
41793: GO 41464
41795: POP
41796: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41797: LD_VAR 0 9
41801: PPUSH
41802: LD_VAR 0 3
41806: PPUSH
41807: LD_VAR 0 4
41811: PPUSH
41812: LD_INT 20
41814: PPUSH
41815: CALL 33822 0 4
41819: PUSH
41820: LD_INT 4
41822: ARRAY
41823: IFFALSE 41827
// exit ;
41825: GO 41876
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41827: LD_VAR 0 2
41831: PUSH
41832: LD_INT 29
41834: PUSH
41835: LD_INT 30
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: IN
41842: PUSH
41843: LD_VAR 0 3
41847: PPUSH
41848: LD_VAR 0 4
41852: PPUSH
41853: LD_VAR 0 9
41857: PPUSH
41858: CALL_OW 440
41862: NOT
41863: AND
41864: IFFALSE 41868
// exit ;
41866: GO 41876
// result := true ;
41868: LD_ADDR_VAR 0 6
41872: PUSH
41873: LD_INT 1
41875: ST_TO_ADDR
// end ;
41876: LD_VAR 0 6
41880: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41881: LD_INT 0
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
// result = [ ] ;
41941: LD_ADDR_VAR 0 7
41945: PUSH
41946: EMPTY
41947: ST_TO_ADDR
// temp_list = [ ] ;
41948: LD_ADDR_VAR 0 9
41952: PUSH
41953: EMPTY
41954: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41955: LD_VAR 0 4
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 3
41971: PUSH
41972: LD_INT 4
41974: PUSH
41975: LD_INT 5
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: IN
41986: NOT
41987: PUSH
41988: LD_VAR 0 1
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: IN
42003: PUSH
42004: LD_VAR 0 5
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: IN
42023: NOT
42024: AND
42025: OR
42026: IFFALSE 42030
// exit ;
42028: GO 60421
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42030: LD_VAR 0 1
42034: PUSH
42035: LD_INT 6
42037: PUSH
42038: LD_INT 7
42040: PUSH
42041: LD_INT 8
42043: PUSH
42044: LD_INT 13
42046: PUSH
42047: LD_INT 12
42049: PUSH
42050: LD_INT 15
42052: PUSH
42053: LD_INT 11
42055: PUSH
42056: LD_INT 14
42058: PUSH
42059: LD_INT 10
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: IN
42073: IFFALSE 42083
// btype = b_lab ;
42075: LD_ADDR_VAR 0 1
42079: PUSH
42080: LD_INT 6
42082: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42083: LD_VAR 0 6
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: IN
42102: NOT
42103: PUSH
42104: LD_VAR 0 1
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 3
42120: PUSH
42121: LD_INT 6
42123: PUSH
42124: LD_INT 36
42126: PUSH
42127: LD_INT 4
42129: PUSH
42130: LD_INT 5
42132: PUSH
42133: LD_INT 31
42135: PUSH
42136: LD_INT 32
42138: PUSH
42139: LD_INT 33
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: IN
42155: NOT
42156: PUSH
42157: LD_VAR 0 6
42161: PUSH
42162: LD_INT 1
42164: EQUAL
42165: AND
42166: OR
42167: PUSH
42168: LD_VAR 0 1
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: IN
42183: NOT
42184: PUSH
42185: LD_VAR 0 6
42189: PUSH
42190: LD_INT 2
42192: EQUAL
42193: AND
42194: OR
42195: IFFALSE 42205
// mode = 0 ;
42197: LD_ADDR_VAR 0 6
42201: PUSH
42202: LD_INT 0
42204: ST_TO_ADDR
// case mode of 0 :
42205: LD_VAR 0 6
42209: PUSH
42210: LD_INT 0
42212: DOUBLE
42213: EQUAL
42214: IFTRUE 42218
42216: GO 53671
42218: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42219: LD_ADDR_VAR 0 11
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42412: LD_ADDR_VAR 0 12
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42608: LD_ADDR_VAR 0 13
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 3
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 3
42767: NEG
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: NEG
42780: PUSH
42781: LD_INT 3
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42807: LD_ADDR_VAR 0 14
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 3
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 3
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 2
42979: NEG
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43003: LD_ADDR_VAR 0 15
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: NEG
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43196: LD_ADDR_VAR 0 16
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43389: LD_ADDR_VAR 0 17
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43619: LD_ADDR_VAR 0 18
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43849: LD_ADDR_VAR 0 19
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44079: LD_ADDR_VAR 0 20
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44309: LD_ADDR_VAR 0 21
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44539: LD_ADDR_VAR 0 22
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44769: LD_ADDR_VAR 0 23
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 3
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45049: LD_ADDR_VAR 0 24
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45325: LD_ADDR_VAR 0 25
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 3
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45599: LD_ADDR_VAR 0 26
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: LD_INT 3
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45875: LD_ADDR_VAR 0 27
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46155: LD_ADDR_VAR 0 28
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46437: LD_ADDR_VAR 0 29
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46716: LD_ADDR_VAR 0 30
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 3
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: NEG
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46994: LD_ADDR_VAR 0 31
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47272: LD_ADDR_VAR 0 32
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 3
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47550: LD_ADDR_VAR 0 33
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47829: LD_ADDR_VAR 0 34
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 3
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: NEG
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48109: LD_ADDR_VAR 0 35
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48221: LD_ADDR_VAR 0 36
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48333: LD_ADDR_VAR 0 37
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48445: LD_ADDR_VAR 0 38
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48557: LD_ADDR_VAR 0 39
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48669: LD_ADDR_VAR 0 40
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48781: LD_ADDR_VAR 0 41
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: LD_INT 3
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 3
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 3
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 3
49090: NEG
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49131: LD_ADDR_VAR 0 42
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 3
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 3
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: LD_INT 3
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: LD_INT 3
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49481: LD_ADDR_VAR 0 43
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: NEG
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: NEG
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49829: LD_ADDR_VAR 0 44
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 3
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50179: LD_ADDR_VAR 0 45
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 3
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50529: LD_ADDR_VAR 0 46
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50877: LD_ADDR_VAR 0 47
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51028: LD_ADDR_VAR 0 48
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51175: LD_ADDR_VAR 0 49
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51319: LD_ADDR_VAR 0 50
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51463: LD_ADDR_VAR 0 51
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51610: LD_ADDR_VAR 0 52
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51761: LD_ADDR_VAR 0 53
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51991: LD_ADDR_VAR 0 54
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52221: LD_ADDR_VAR 0 55
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52451: LD_ADDR_VAR 0 56
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52681: LD_ADDR_VAR 0 57
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52911: LD_ADDR_VAR 0 58
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53141: LD_ADDR_VAR 0 59
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53229: LD_ADDR_VAR 0 60
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53317: LD_ADDR_VAR 0 61
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53405: LD_ADDR_VAR 0 62
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53493: LD_ADDR_VAR 0 63
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53581: LD_ADDR_VAR 0 64
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// end ; 1 :
53669: GO 59566
53671: LD_INT 1
53673: DOUBLE
53674: EQUAL
53675: IFTRUE 53679
53677: GO 56302
53679: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53680: LD_ADDR_VAR 0 11
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53724: LD_ADDR_VAR 0 12
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53765: LD_ADDR_VAR 0 13
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: LIST
53804: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53805: LD_ADDR_VAR 0 14
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53846: LD_ADDR_VAR 0 15
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53890: LD_ADDR_VAR 0 16
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53936: LD_ADDR_VAR 0 17
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53980: LD_ADDR_VAR 0 18
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54021: LD_ADDR_VAR 0 19
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 3
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: LD_INT 3
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54061: LD_ADDR_VAR 0 20
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54102: LD_ADDR_VAR 0 21
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54146: LD_ADDR_VAR 0 22
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 3
54165: NEG
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: NEG
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: LIST
54191: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54192: LD_ADDR_VAR 0 23
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 4
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54236: LD_ADDR_VAR 0 24
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 4
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54277: LD_ADDR_VAR 0 25
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 4
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 4
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54317: LD_ADDR_VAR 0 26
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 4
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54358: LD_ADDR_VAR 0 27
54362: PUSH
54363: LD_INT 3
54365: NEG
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 4
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54402: LD_ADDR_VAR 0 28
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: LD_INT 4
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 4
54433: NEG
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54448: LD_ADDR_VAR 0 29
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 4
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 4
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 5
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 5
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 4
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 6
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 6
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 5
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54603: LD_ADDR_VAR 0 30
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 4
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 6
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 6
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54746: LD_ADDR_VAR 0 31
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 3
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: LD_INT 3
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 4
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: LD_INT 4
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 5
54813: PUSH
54814: LD_INT 4
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 5
54823: PUSH
54824: LD_INT 5
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 4
54833: PUSH
54834: LD_INT 5
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 6
54843: PUSH
54844: LD_INT 5
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 6
54853: PUSH
54854: LD_INT 6
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 5
54863: PUSH
54864: LD_INT 6
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54885: LD_ADDR_VAR 0 32
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 4
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 4
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 5
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 5
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 6
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 6
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: LD_INT 5
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55028: LD_ADDR_VAR 0 33
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 4
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 4
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 4
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 5
55114: NEG
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 5
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 5
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 6
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 6
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55183: LD_ADDR_VAR 0 34
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 3
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 4
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 4
55238: NEG
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: LD_INT 4
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 4
55262: NEG
55263: PUSH
55264: LD_INT 5
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 5
55274: NEG
55275: PUSH
55276: LD_INT 4
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 5
55286: NEG
55287: PUSH
55288: LD_INT 5
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 5
55298: NEG
55299: PUSH
55300: LD_INT 6
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 6
55310: NEG
55311: PUSH
55312: LD_INT 5
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 6
55322: NEG
55323: PUSH
55324: LD_INT 6
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55346: LD_ADDR_VAR 0 41
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55390: LD_ADDR_VAR 0 42
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55431: LD_ADDR_VAR 0 43
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 3
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: LIST
55470: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55471: LD_ADDR_VAR 0 44
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55512: LD_ADDR_VAR 0 45
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55556: LD_ADDR_VAR 0 46
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 3
55587: NEG
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55602: LD_ADDR_VAR 0 47
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55635: LD_ADDR_VAR 0 48
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55666: LD_ADDR_VAR 0 49
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55695: LD_ADDR_VAR 0 50
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55724: LD_ADDR_VAR 0 51
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55755: LD_ADDR_VAR 0 52
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55788: LD_ADDR_VAR 0 53
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55832: LD_ADDR_VAR 0 54
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55873: LD_ADDR_VAR 0 55
55877: PUSH
55878: LD_INT 3
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55913: LD_ADDR_VAR 0 56
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55954: LD_ADDR_VAR 0 57
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55998: LD_ADDR_VAR 0 58
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 3
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 3
56017: NEG
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56044: LD_ADDR_VAR 0 59
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56088: LD_ADDR_VAR 0 60
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56129: LD_ADDR_VAR 0 61
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56169: LD_ADDR_VAR 0 62
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56210: LD_ADDR_VAR 0 63
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56254: LD_ADDR_VAR 0 64
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// end ; 2 :
56300: GO 59566
56302: LD_INT 2
56304: DOUBLE
56305: EQUAL
56306: IFTRUE 56310
56308: GO 59565
56310: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56311: LD_ADDR_VAR 0 29
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 5
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: LD_INT 4
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: LD_INT 4
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 4
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 4
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 4
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 5
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 3
56605: NEG
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 4
56650: NEG
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 4
56661: NEG
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 4
56673: NEG
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 4
56696: NEG
56697: PUSH
56698: LD_INT 4
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 4
56708: NEG
56709: PUSH
56710: LD_INT 5
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 4
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: NEG
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 5
56756: NEG
56757: PUSH
56758: LD_INT 4
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 5
56768: NEG
56769: PUSH
56770: LD_INT 5
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: LD_INT 5
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 5
56792: NEG
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56849: LD_ADDR_VAR 0 30
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: LD_INT 4
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 4
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 5
56876: PUSH
56877: LD_INT 4
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 5
56886: PUSH
56887: LD_INT 5
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 4
56896: PUSH
56897: LD_INT 5
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: LD_INT 4
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 5
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 5
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 4
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 4
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 4
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 4
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 4
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 5
57095: NEG
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 5
57106: NEG
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 4
57201: NEG
57202: PUSH
57203: LD_INT 3
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: LD_INT 4
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 4
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 4
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 5
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 5
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: LD_INT 5
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57396: LD_ADDR_VAR 0 31
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 4
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 4
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 5
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 5
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 5
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 4
57552: NEG
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 4
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 4
57575: NEG
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 4
57598: NEG
57599: PUSH
57600: LD_INT 4
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: NEG
57611: PUSH
57612: LD_INT 5
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 3
57622: NEG
57623: PUSH
57624: LD_INT 4
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 5
57658: NEG
57659: PUSH
57660: LD_INT 4
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 5
57670: NEG
57671: PUSH
57672: LD_INT 5
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 5
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 5
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 4
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 4
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 4
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 4
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 4
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 5
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 5
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 5
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57946: LD_ADDR_VAR 0 32
57950: PUSH
57951: LD_INT 4
57953: NEG
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 4
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 4
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 5
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 5
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 5
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 4
58115: NEG
58116: PUSH
58117: LD_INT 3
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 4
58127: NEG
58128: PUSH
58129: LD_INT 4
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 4
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 4
58151: NEG
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 4
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 5
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 3
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 4
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 5
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: LD_INT 5
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 4
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 4
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: PUSH
58359: LD_INT 4
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 4
58368: PUSH
58369: LD_INT 3
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 5
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 5
58388: PUSH
58389: LD_INT 5
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: LD_INT 5
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 5
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 5
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58493: LD_ADDR_VAR 0 33
58497: PUSH
58498: LD_INT 4
58500: NEG
58501: PUSH
58502: LD_INT 4
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 4
58512: NEG
58513: PUSH
58514: LD_INT 5
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 4
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 4
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 5
58560: NEG
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 5
58572: NEG
58573: PUSH
58574: LD_INT 5
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 5
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 5
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 4
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 3
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 4
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 4
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 5
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 5
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 4
58833: PUSH
58834: LD_INT 4
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 4
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: LD_INT 4
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 3
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 4
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 4
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 5
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59031: LD_ADDR_VAR 0 34
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 5
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: LD_INT 4
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 4
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 5
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: LD_INT 5
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 4
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 4
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 3
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 4
59233: PUSH
59234: LD_INT 4
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 5
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 5
59263: PUSH
59264: LD_INT 5
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: LD_INT 5
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: LD_INT 4
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 5
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: LD_INT 5
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 3
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 4
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: LD_INT 4
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 4
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 5
59472: NEG
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 5
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 5
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: ST_TO_ADDR
// end ; end ;
59563: GO 59566
59565: POP
// case btype of b_depot , b_warehouse :
59566: LD_VAR 0 1
59570: PUSH
59571: LD_INT 0
59573: DOUBLE
59574: EQUAL
59575: IFTRUE 59585
59577: LD_INT 1
59579: DOUBLE
59580: EQUAL
59581: IFTRUE 59585
59583: GO 59786
59585: POP
// case nation of nation_american :
59586: LD_VAR 0 5
59590: PUSH
59591: LD_INT 1
59593: DOUBLE
59594: EQUAL
59595: IFTRUE 59599
59597: GO 59655
59599: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59600: LD_ADDR_VAR 0 9
59604: PUSH
59605: LD_VAR 0 11
59609: PUSH
59610: LD_VAR 0 12
59614: PUSH
59615: LD_VAR 0 13
59619: PUSH
59620: LD_VAR 0 14
59624: PUSH
59625: LD_VAR 0 15
59629: PUSH
59630: LD_VAR 0 16
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: PUSH
59643: LD_VAR 0 4
59647: PUSH
59648: LD_INT 1
59650: PLUS
59651: ARRAY
59652: ST_TO_ADDR
59653: GO 59784
59655: LD_INT 2
59657: DOUBLE
59658: EQUAL
59659: IFTRUE 59663
59661: GO 59719
59663: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59664: LD_ADDR_VAR 0 9
59668: PUSH
59669: LD_VAR 0 17
59673: PUSH
59674: LD_VAR 0 18
59678: PUSH
59679: LD_VAR 0 19
59683: PUSH
59684: LD_VAR 0 20
59688: PUSH
59689: LD_VAR 0 21
59693: PUSH
59694: LD_VAR 0 22
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: PUSH
59707: LD_VAR 0 4
59711: PUSH
59712: LD_INT 1
59714: PLUS
59715: ARRAY
59716: ST_TO_ADDR
59717: GO 59784
59719: LD_INT 3
59721: DOUBLE
59722: EQUAL
59723: IFTRUE 59727
59725: GO 59783
59727: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59728: LD_ADDR_VAR 0 9
59732: PUSH
59733: LD_VAR 0 23
59737: PUSH
59738: LD_VAR 0 24
59742: PUSH
59743: LD_VAR 0 25
59747: PUSH
59748: LD_VAR 0 26
59752: PUSH
59753: LD_VAR 0 27
59757: PUSH
59758: LD_VAR 0 28
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: PUSH
59771: LD_VAR 0 4
59775: PUSH
59776: LD_INT 1
59778: PLUS
59779: ARRAY
59780: ST_TO_ADDR
59781: GO 59784
59783: POP
59784: GO 60339
59786: LD_INT 2
59788: DOUBLE
59789: EQUAL
59790: IFTRUE 59800
59792: LD_INT 3
59794: DOUBLE
59795: EQUAL
59796: IFTRUE 59800
59798: GO 59856
59800: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59801: LD_ADDR_VAR 0 9
59805: PUSH
59806: LD_VAR 0 29
59810: PUSH
59811: LD_VAR 0 30
59815: PUSH
59816: LD_VAR 0 31
59820: PUSH
59821: LD_VAR 0 32
59825: PUSH
59826: LD_VAR 0 33
59830: PUSH
59831: LD_VAR 0 34
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: PUSH
59844: LD_VAR 0 4
59848: PUSH
59849: LD_INT 1
59851: PLUS
59852: ARRAY
59853: ST_TO_ADDR
59854: GO 60339
59856: LD_INT 16
59858: DOUBLE
59859: EQUAL
59860: IFTRUE 59918
59862: LD_INT 17
59864: DOUBLE
59865: EQUAL
59866: IFTRUE 59918
59868: LD_INT 18
59870: DOUBLE
59871: EQUAL
59872: IFTRUE 59918
59874: LD_INT 19
59876: DOUBLE
59877: EQUAL
59878: IFTRUE 59918
59880: LD_INT 22
59882: DOUBLE
59883: EQUAL
59884: IFTRUE 59918
59886: LD_INT 20
59888: DOUBLE
59889: EQUAL
59890: IFTRUE 59918
59892: LD_INT 21
59894: DOUBLE
59895: EQUAL
59896: IFTRUE 59918
59898: LD_INT 23
59900: DOUBLE
59901: EQUAL
59902: IFTRUE 59918
59904: LD_INT 24
59906: DOUBLE
59907: EQUAL
59908: IFTRUE 59918
59910: LD_INT 25
59912: DOUBLE
59913: EQUAL
59914: IFTRUE 59918
59916: GO 59974
59918: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59919: LD_ADDR_VAR 0 9
59923: PUSH
59924: LD_VAR 0 35
59928: PUSH
59929: LD_VAR 0 36
59933: PUSH
59934: LD_VAR 0 37
59938: PUSH
59939: LD_VAR 0 38
59943: PUSH
59944: LD_VAR 0 39
59948: PUSH
59949: LD_VAR 0 40
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: PUSH
59962: LD_VAR 0 4
59966: PUSH
59967: LD_INT 1
59969: PLUS
59970: ARRAY
59971: ST_TO_ADDR
59972: GO 60339
59974: LD_INT 6
59976: DOUBLE
59977: EQUAL
59978: IFTRUE 60030
59980: LD_INT 7
59982: DOUBLE
59983: EQUAL
59984: IFTRUE 60030
59986: LD_INT 8
59988: DOUBLE
59989: EQUAL
59990: IFTRUE 60030
59992: LD_INT 13
59994: DOUBLE
59995: EQUAL
59996: IFTRUE 60030
59998: LD_INT 12
60000: DOUBLE
60001: EQUAL
60002: IFTRUE 60030
60004: LD_INT 15
60006: DOUBLE
60007: EQUAL
60008: IFTRUE 60030
60010: LD_INT 11
60012: DOUBLE
60013: EQUAL
60014: IFTRUE 60030
60016: LD_INT 14
60018: DOUBLE
60019: EQUAL
60020: IFTRUE 60030
60022: LD_INT 10
60024: DOUBLE
60025: EQUAL
60026: IFTRUE 60030
60028: GO 60086
60030: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60031: LD_ADDR_VAR 0 9
60035: PUSH
60036: LD_VAR 0 41
60040: PUSH
60041: LD_VAR 0 42
60045: PUSH
60046: LD_VAR 0 43
60050: PUSH
60051: LD_VAR 0 44
60055: PUSH
60056: LD_VAR 0 45
60060: PUSH
60061: LD_VAR 0 46
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: PUSH
60074: LD_VAR 0 4
60078: PUSH
60079: LD_INT 1
60081: PLUS
60082: ARRAY
60083: ST_TO_ADDR
60084: GO 60339
60086: LD_INT 36
60088: DOUBLE
60089: EQUAL
60090: IFTRUE 60094
60092: GO 60150
60094: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60095: LD_ADDR_VAR 0 9
60099: PUSH
60100: LD_VAR 0 47
60104: PUSH
60105: LD_VAR 0 48
60109: PUSH
60110: LD_VAR 0 49
60114: PUSH
60115: LD_VAR 0 50
60119: PUSH
60120: LD_VAR 0 51
60124: PUSH
60125: LD_VAR 0 52
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: PUSH
60138: LD_VAR 0 4
60142: PUSH
60143: LD_INT 1
60145: PLUS
60146: ARRAY
60147: ST_TO_ADDR
60148: GO 60339
60150: LD_INT 4
60152: DOUBLE
60153: EQUAL
60154: IFTRUE 60176
60156: LD_INT 5
60158: DOUBLE
60159: EQUAL
60160: IFTRUE 60176
60162: LD_INT 34
60164: DOUBLE
60165: EQUAL
60166: IFTRUE 60176
60168: LD_INT 37
60170: DOUBLE
60171: EQUAL
60172: IFTRUE 60176
60174: GO 60232
60176: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60177: LD_ADDR_VAR 0 9
60181: PUSH
60182: LD_VAR 0 53
60186: PUSH
60187: LD_VAR 0 54
60191: PUSH
60192: LD_VAR 0 55
60196: PUSH
60197: LD_VAR 0 56
60201: PUSH
60202: LD_VAR 0 57
60206: PUSH
60207: LD_VAR 0 58
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: PUSH
60220: LD_VAR 0 4
60224: PUSH
60225: LD_INT 1
60227: PLUS
60228: ARRAY
60229: ST_TO_ADDR
60230: GO 60339
60232: LD_INT 31
60234: DOUBLE
60235: EQUAL
60236: IFTRUE 60282
60238: LD_INT 32
60240: DOUBLE
60241: EQUAL
60242: IFTRUE 60282
60244: LD_INT 33
60246: DOUBLE
60247: EQUAL
60248: IFTRUE 60282
60250: LD_INT 27
60252: DOUBLE
60253: EQUAL
60254: IFTRUE 60282
60256: LD_INT 26
60258: DOUBLE
60259: EQUAL
60260: IFTRUE 60282
60262: LD_INT 28
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60282
60268: LD_INT 29
60270: DOUBLE
60271: EQUAL
60272: IFTRUE 60282
60274: LD_INT 30
60276: DOUBLE
60277: EQUAL
60278: IFTRUE 60282
60280: GO 60338
60282: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60283: LD_ADDR_VAR 0 9
60287: PUSH
60288: LD_VAR 0 59
60292: PUSH
60293: LD_VAR 0 60
60297: PUSH
60298: LD_VAR 0 61
60302: PUSH
60303: LD_VAR 0 62
60307: PUSH
60308: LD_VAR 0 63
60312: PUSH
60313: LD_VAR 0 64
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: PUSH
60326: LD_VAR 0 4
60330: PUSH
60331: LD_INT 1
60333: PLUS
60334: ARRAY
60335: ST_TO_ADDR
60336: GO 60339
60338: POP
// temp_list2 = [ ] ;
60339: LD_ADDR_VAR 0 10
60343: PUSH
60344: EMPTY
60345: ST_TO_ADDR
// for i in temp_list do
60346: LD_ADDR_VAR 0 8
60350: PUSH
60351: LD_VAR 0 9
60355: PUSH
60356: FOR_IN
60357: IFFALSE 60409
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60359: LD_ADDR_VAR 0 10
60363: PUSH
60364: LD_VAR 0 10
60368: PUSH
60369: LD_VAR 0 8
60373: PUSH
60374: LD_INT 1
60376: ARRAY
60377: PUSH
60378: LD_VAR 0 2
60382: PLUS
60383: PUSH
60384: LD_VAR 0 8
60388: PUSH
60389: LD_INT 2
60391: ARRAY
60392: PUSH
60393: LD_VAR 0 3
60397: PLUS
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: ADD
60406: ST_TO_ADDR
60407: GO 60356
60409: POP
60410: POP
// result = temp_list2 ;
60411: LD_ADDR_VAR 0 7
60415: PUSH
60416: LD_VAR 0 10
60420: ST_TO_ADDR
// end ;
60421: LD_VAR 0 7
60425: RET
// export function EnemyInRange ( unit , dist ) ; begin
60426: LD_INT 0
60428: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60429: LD_ADDR_VAR 0 3
60433: PUSH
60434: LD_VAR 0 1
60438: PPUSH
60439: CALL_OW 255
60443: PPUSH
60444: LD_VAR 0 1
60448: PPUSH
60449: CALL_OW 250
60453: PPUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 251
60463: PPUSH
60464: LD_VAR 0 2
60468: PPUSH
60469: CALL 33822 0 4
60473: PUSH
60474: LD_INT 4
60476: ARRAY
60477: ST_TO_ADDR
// end ;
60478: LD_VAR 0 3
60482: RET
// export function PlayerSeeMe ( unit ) ; begin
60483: LD_INT 0
60485: PPUSH
// result := See ( your_side , unit ) ;
60486: LD_ADDR_VAR 0 2
60490: PUSH
60491: LD_OWVAR 2
60495: PPUSH
60496: LD_VAR 0 1
60500: PPUSH
60501: CALL_OW 292
60505: ST_TO_ADDR
// end ;
60506: LD_VAR 0 2
60510: RET
// export function ReverseDir ( unit ) ; begin
60511: LD_INT 0
60513: PPUSH
// if not unit then
60514: LD_VAR 0 1
60518: NOT
60519: IFFALSE 60523
// exit ;
60521: GO 60546
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60523: LD_ADDR_VAR 0 2
60527: PUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: CALL_OW 254
60537: PUSH
60538: LD_INT 3
60540: PLUS
60541: PUSH
60542: LD_INT 6
60544: MOD
60545: ST_TO_ADDR
// end ;
60546: LD_VAR 0 2
60550: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60551: LD_INT 0
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
60557: PPUSH
// if not hexes then
60558: LD_VAR 0 2
60562: NOT
60563: IFFALSE 60567
// exit ;
60565: GO 60715
// dist := 9999 ;
60567: LD_ADDR_VAR 0 5
60571: PUSH
60572: LD_INT 9999
60574: ST_TO_ADDR
// for i = 1 to hexes do
60575: LD_ADDR_VAR 0 4
60579: PUSH
60580: DOUBLE
60581: LD_INT 1
60583: DEC
60584: ST_TO_ADDR
60585: LD_VAR 0 2
60589: PUSH
60590: FOR_TO
60591: IFFALSE 60703
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60593: LD_VAR 0 1
60597: PPUSH
60598: LD_VAR 0 2
60602: PUSH
60603: LD_VAR 0 4
60607: ARRAY
60608: PUSH
60609: LD_INT 1
60611: ARRAY
60612: PPUSH
60613: LD_VAR 0 2
60617: PUSH
60618: LD_VAR 0 4
60622: ARRAY
60623: PUSH
60624: LD_INT 2
60626: ARRAY
60627: PPUSH
60628: CALL_OW 297
60632: PUSH
60633: LD_VAR 0 5
60637: LESS
60638: IFFALSE 60701
// begin hex := hexes [ i ] ;
60640: LD_ADDR_VAR 0 7
60644: PUSH
60645: LD_VAR 0 2
60649: PUSH
60650: LD_VAR 0 4
60654: ARRAY
60655: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60656: LD_ADDR_VAR 0 5
60660: PUSH
60661: LD_VAR 0 1
60665: PPUSH
60666: LD_VAR 0 2
60670: PUSH
60671: LD_VAR 0 4
60675: ARRAY
60676: PUSH
60677: LD_INT 1
60679: ARRAY
60680: PPUSH
60681: LD_VAR 0 2
60685: PUSH
60686: LD_VAR 0 4
60690: ARRAY
60691: PUSH
60692: LD_INT 2
60694: ARRAY
60695: PPUSH
60696: CALL_OW 297
60700: ST_TO_ADDR
// end ; end ;
60701: GO 60590
60703: POP
60704: POP
// result := hex ;
60705: LD_ADDR_VAR 0 3
60709: PUSH
60710: LD_VAR 0 7
60714: ST_TO_ADDR
// end ;
60715: LD_VAR 0 3
60719: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60720: LD_INT 0
60722: PPUSH
60723: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60724: LD_VAR 0 1
60728: NOT
60729: PUSH
60730: LD_VAR 0 1
60734: PUSH
60735: LD_INT 21
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 23
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PPUSH
60759: CALL_OW 69
60763: IN
60764: NOT
60765: OR
60766: IFFALSE 60770
// exit ;
60768: GO 60817
// for i = 1 to 3 do
60770: LD_ADDR_VAR 0 3
60774: PUSH
60775: DOUBLE
60776: LD_INT 1
60778: DEC
60779: ST_TO_ADDR
60780: LD_INT 3
60782: PUSH
60783: FOR_TO
60784: IFFALSE 60815
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60786: LD_VAR 0 1
60790: PPUSH
60791: CALL_OW 250
60795: PPUSH
60796: LD_VAR 0 1
60800: PPUSH
60801: CALL_OW 251
60805: PPUSH
60806: LD_INT 1
60808: PPUSH
60809: CALL_OW 453
60813: GO 60783
60815: POP
60816: POP
// end ;
60817: LD_VAR 0 2
60821: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60822: LD_INT 0
60824: PPUSH
60825: PPUSH
60826: PPUSH
60827: PPUSH
60828: PPUSH
60829: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60830: LD_VAR 0 1
60834: NOT
60835: PUSH
60836: LD_VAR 0 2
60840: NOT
60841: OR
60842: PUSH
60843: LD_VAR 0 1
60847: PPUSH
60848: CALL_OW 314
60852: OR
60853: IFFALSE 60857
// exit ;
60855: GO 61298
// x := GetX ( enemy_unit ) ;
60857: LD_ADDR_VAR 0 7
60861: PUSH
60862: LD_VAR 0 2
60866: PPUSH
60867: CALL_OW 250
60871: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60872: LD_ADDR_VAR 0 8
60876: PUSH
60877: LD_VAR 0 2
60881: PPUSH
60882: CALL_OW 251
60886: ST_TO_ADDR
// if not x or not y then
60887: LD_VAR 0 7
60891: NOT
60892: PUSH
60893: LD_VAR 0 8
60897: NOT
60898: OR
60899: IFFALSE 60903
// exit ;
60901: GO 61298
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60903: LD_ADDR_VAR 0 6
60907: PUSH
60908: LD_VAR 0 7
60912: PPUSH
60913: LD_INT 0
60915: PPUSH
60916: LD_INT 4
60918: PPUSH
60919: CALL_OW 272
60923: PUSH
60924: LD_VAR 0 8
60928: PPUSH
60929: LD_INT 0
60931: PPUSH
60932: LD_INT 4
60934: PPUSH
60935: CALL_OW 273
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 7
60948: PPUSH
60949: LD_INT 1
60951: PPUSH
60952: LD_INT 4
60954: PPUSH
60955: CALL_OW 272
60959: PUSH
60960: LD_VAR 0 8
60964: PPUSH
60965: LD_INT 1
60967: PPUSH
60968: LD_INT 4
60970: PPUSH
60971: CALL_OW 273
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_VAR 0 7
60984: PPUSH
60985: LD_INT 2
60987: PPUSH
60988: LD_INT 4
60990: PPUSH
60991: CALL_OW 272
60995: PUSH
60996: LD_VAR 0 8
61000: PPUSH
61001: LD_INT 2
61003: PPUSH
61004: LD_INT 4
61006: PPUSH
61007: CALL_OW 273
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_VAR 0 7
61020: PPUSH
61021: LD_INT 3
61023: PPUSH
61024: LD_INT 4
61026: PPUSH
61027: CALL_OW 272
61031: PUSH
61032: LD_VAR 0 8
61036: PPUSH
61037: LD_INT 3
61039: PPUSH
61040: LD_INT 4
61042: PPUSH
61043: CALL_OW 273
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_VAR 0 7
61056: PPUSH
61057: LD_INT 4
61059: PPUSH
61060: LD_INT 4
61062: PPUSH
61063: CALL_OW 272
61067: PUSH
61068: LD_VAR 0 8
61072: PPUSH
61073: LD_INT 4
61075: PPUSH
61076: LD_INT 4
61078: PPUSH
61079: CALL_OW 273
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_VAR 0 7
61092: PPUSH
61093: LD_INT 5
61095: PPUSH
61096: LD_INT 4
61098: PPUSH
61099: CALL_OW 272
61103: PUSH
61104: LD_VAR 0 8
61108: PPUSH
61109: LD_INT 5
61111: PPUSH
61112: LD_INT 4
61114: PPUSH
61115: CALL_OW 273
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// for i = tmp downto 1 do
61132: LD_ADDR_VAR 0 4
61136: PUSH
61137: DOUBLE
61138: LD_VAR 0 6
61142: INC
61143: ST_TO_ADDR
61144: LD_INT 1
61146: PUSH
61147: FOR_DOWNTO
61148: IFFALSE 61249
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61150: LD_VAR 0 6
61154: PUSH
61155: LD_VAR 0 4
61159: ARRAY
61160: PUSH
61161: LD_INT 1
61163: ARRAY
61164: PPUSH
61165: LD_VAR 0 6
61169: PUSH
61170: LD_VAR 0 4
61174: ARRAY
61175: PUSH
61176: LD_INT 2
61178: ARRAY
61179: PPUSH
61180: CALL_OW 488
61184: NOT
61185: PUSH
61186: LD_VAR 0 6
61190: PUSH
61191: LD_VAR 0 4
61195: ARRAY
61196: PUSH
61197: LD_INT 1
61199: ARRAY
61200: PPUSH
61201: LD_VAR 0 6
61205: PUSH
61206: LD_VAR 0 4
61210: ARRAY
61211: PUSH
61212: LD_INT 2
61214: ARRAY
61215: PPUSH
61216: CALL_OW 428
61220: PUSH
61221: LD_INT 0
61223: NONEQUAL
61224: OR
61225: IFFALSE 61247
// tmp := Delete ( tmp , i ) ;
61227: LD_ADDR_VAR 0 6
61231: PUSH
61232: LD_VAR 0 6
61236: PPUSH
61237: LD_VAR 0 4
61241: PPUSH
61242: CALL_OW 3
61246: ST_TO_ADDR
61247: GO 61147
61249: POP
61250: POP
// j := GetClosestHex ( unit , tmp ) ;
61251: LD_ADDR_VAR 0 5
61255: PUSH
61256: LD_VAR 0 1
61260: PPUSH
61261: LD_VAR 0 6
61265: PPUSH
61266: CALL 60551 0 2
61270: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61271: LD_VAR 0 1
61275: PPUSH
61276: LD_VAR 0 5
61280: PUSH
61281: LD_INT 1
61283: ARRAY
61284: PPUSH
61285: LD_VAR 0 5
61289: PUSH
61290: LD_INT 2
61292: ARRAY
61293: PPUSH
61294: CALL_OW 111
// end ;
61298: LD_VAR 0 3
61302: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61303: LD_INT 0
61305: PPUSH
61306: PPUSH
61307: PPUSH
// uc_side = 0 ;
61308: LD_ADDR_OWVAR 20
61312: PUSH
61313: LD_INT 0
61315: ST_TO_ADDR
// uc_nation = 0 ;
61316: LD_ADDR_OWVAR 21
61320: PUSH
61321: LD_INT 0
61323: ST_TO_ADDR
// InitHc_All ( ) ;
61324: CALL_OW 584
// InitVc ;
61328: CALL_OW 20
// if mastodonts then
61332: LD_VAR 0 6
61336: IFFALSE 61403
// for i = 1 to mastodonts do
61338: LD_ADDR_VAR 0 11
61342: PUSH
61343: DOUBLE
61344: LD_INT 1
61346: DEC
61347: ST_TO_ADDR
61348: LD_VAR 0 6
61352: PUSH
61353: FOR_TO
61354: IFFALSE 61401
// begin vc_chassis := 31 ;
61356: LD_ADDR_OWVAR 37
61360: PUSH
61361: LD_INT 31
61363: ST_TO_ADDR
// vc_control := control_rider ;
61364: LD_ADDR_OWVAR 38
61368: PUSH
61369: LD_INT 4
61371: ST_TO_ADDR
// animal := CreateVehicle ;
61372: LD_ADDR_VAR 0 12
61376: PUSH
61377: CALL_OW 45
61381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61382: LD_VAR 0 12
61386: PPUSH
61387: LD_VAR 0 8
61391: PPUSH
61392: LD_INT 0
61394: PPUSH
61395: CALL 63591 0 3
// end ;
61399: GO 61353
61401: POP
61402: POP
// if horses then
61403: LD_VAR 0 5
61407: IFFALSE 61474
// for i = 1 to horses do
61409: LD_ADDR_VAR 0 11
61413: PUSH
61414: DOUBLE
61415: LD_INT 1
61417: DEC
61418: ST_TO_ADDR
61419: LD_VAR 0 5
61423: PUSH
61424: FOR_TO
61425: IFFALSE 61472
// begin hc_class := 21 ;
61427: LD_ADDR_OWVAR 28
61431: PUSH
61432: LD_INT 21
61434: ST_TO_ADDR
// hc_gallery :=  ;
61435: LD_ADDR_OWVAR 33
61439: PUSH
61440: LD_STRING 
61442: ST_TO_ADDR
// animal := CreateHuman ;
61443: LD_ADDR_VAR 0 12
61447: PUSH
61448: CALL_OW 44
61452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61453: LD_VAR 0 12
61457: PPUSH
61458: LD_VAR 0 8
61462: PPUSH
61463: LD_INT 0
61465: PPUSH
61466: CALL 63591 0 3
// end ;
61470: GO 61424
61472: POP
61473: POP
// if birds then
61474: LD_VAR 0 1
61478: IFFALSE 61545
// for i = 1 to birds do
61480: LD_ADDR_VAR 0 11
61484: PUSH
61485: DOUBLE
61486: LD_INT 1
61488: DEC
61489: ST_TO_ADDR
61490: LD_VAR 0 1
61494: PUSH
61495: FOR_TO
61496: IFFALSE 61543
// begin hc_class = 18 ;
61498: LD_ADDR_OWVAR 28
61502: PUSH
61503: LD_INT 18
61505: ST_TO_ADDR
// hc_gallery =  ;
61506: LD_ADDR_OWVAR 33
61510: PUSH
61511: LD_STRING 
61513: ST_TO_ADDR
// animal := CreateHuman ;
61514: LD_ADDR_VAR 0 12
61518: PUSH
61519: CALL_OW 44
61523: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61524: LD_VAR 0 12
61528: PPUSH
61529: LD_VAR 0 8
61533: PPUSH
61534: LD_INT 0
61536: PPUSH
61537: CALL 63591 0 3
// end ;
61541: GO 61495
61543: POP
61544: POP
// if tigers then
61545: LD_VAR 0 2
61549: IFFALSE 61633
// for i = 1 to tigers do
61551: LD_ADDR_VAR 0 11
61555: PUSH
61556: DOUBLE
61557: LD_INT 1
61559: DEC
61560: ST_TO_ADDR
61561: LD_VAR 0 2
61565: PUSH
61566: FOR_TO
61567: IFFALSE 61631
// begin hc_class = class_tiger ;
61569: LD_ADDR_OWVAR 28
61573: PUSH
61574: LD_INT 14
61576: ST_TO_ADDR
// hc_gallery =  ;
61577: LD_ADDR_OWVAR 33
61581: PUSH
61582: LD_STRING 
61584: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61585: LD_ADDR_OWVAR 35
61589: PUSH
61590: LD_INT 7
61592: NEG
61593: PPUSH
61594: LD_INT 7
61596: PPUSH
61597: CALL_OW 12
61601: ST_TO_ADDR
// animal := CreateHuman ;
61602: LD_ADDR_VAR 0 12
61606: PUSH
61607: CALL_OW 44
61611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61612: LD_VAR 0 12
61616: PPUSH
61617: LD_VAR 0 8
61621: PPUSH
61622: LD_INT 0
61624: PPUSH
61625: CALL 63591 0 3
// end ;
61629: GO 61566
61631: POP
61632: POP
// if apemans then
61633: LD_VAR 0 3
61637: IFFALSE 61760
// for i = 1 to apemans do
61639: LD_ADDR_VAR 0 11
61643: PUSH
61644: DOUBLE
61645: LD_INT 1
61647: DEC
61648: ST_TO_ADDR
61649: LD_VAR 0 3
61653: PUSH
61654: FOR_TO
61655: IFFALSE 61758
// begin hc_class = class_apeman ;
61657: LD_ADDR_OWVAR 28
61661: PUSH
61662: LD_INT 12
61664: ST_TO_ADDR
// hc_gallery =  ;
61665: LD_ADDR_OWVAR 33
61669: PUSH
61670: LD_STRING 
61672: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61673: LD_ADDR_OWVAR 35
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PPUSH
61682: LD_INT 2
61684: PPUSH
61685: CALL_OW 12
61689: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61690: LD_ADDR_OWVAR 31
61694: PUSH
61695: LD_INT 1
61697: PPUSH
61698: LD_INT 3
61700: PPUSH
61701: CALL_OW 12
61705: PUSH
61706: LD_INT 1
61708: PPUSH
61709: LD_INT 3
61711: PPUSH
61712: CALL_OW 12
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: ST_TO_ADDR
// animal := CreateHuman ;
61729: LD_ADDR_VAR 0 12
61733: PUSH
61734: CALL_OW 44
61738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61739: LD_VAR 0 12
61743: PPUSH
61744: LD_VAR 0 8
61748: PPUSH
61749: LD_INT 0
61751: PPUSH
61752: CALL 63591 0 3
// end ;
61756: GO 61654
61758: POP
61759: POP
// if enchidnas then
61760: LD_VAR 0 4
61764: IFFALSE 61831
// for i = 1 to enchidnas do
61766: LD_ADDR_VAR 0 11
61770: PUSH
61771: DOUBLE
61772: LD_INT 1
61774: DEC
61775: ST_TO_ADDR
61776: LD_VAR 0 4
61780: PUSH
61781: FOR_TO
61782: IFFALSE 61829
// begin hc_class = 13 ;
61784: LD_ADDR_OWVAR 28
61788: PUSH
61789: LD_INT 13
61791: ST_TO_ADDR
// hc_gallery =  ;
61792: LD_ADDR_OWVAR 33
61796: PUSH
61797: LD_STRING 
61799: ST_TO_ADDR
// animal := CreateHuman ;
61800: LD_ADDR_VAR 0 12
61804: PUSH
61805: CALL_OW 44
61809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61810: LD_VAR 0 12
61814: PPUSH
61815: LD_VAR 0 8
61819: PPUSH
61820: LD_INT 0
61822: PPUSH
61823: CALL 63591 0 3
// end ;
61827: GO 61781
61829: POP
61830: POP
// if fishes then
61831: LD_VAR 0 7
61835: IFFALSE 61902
// for i = 1 to fishes do
61837: LD_ADDR_VAR 0 11
61841: PUSH
61842: DOUBLE
61843: LD_INT 1
61845: DEC
61846: ST_TO_ADDR
61847: LD_VAR 0 7
61851: PUSH
61852: FOR_TO
61853: IFFALSE 61900
// begin hc_class = 20 ;
61855: LD_ADDR_OWVAR 28
61859: PUSH
61860: LD_INT 20
61862: ST_TO_ADDR
// hc_gallery =  ;
61863: LD_ADDR_OWVAR 33
61867: PUSH
61868: LD_STRING 
61870: ST_TO_ADDR
// animal := CreateHuman ;
61871: LD_ADDR_VAR 0 12
61875: PUSH
61876: CALL_OW 44
61880: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61881: LD_VAR 0 12
61885: PPUSH
61886: LD_VAR 0 9
61890: PPUSH
61891: LD_INT 0
61893: PPUSH
61894: CALL 63591 0 3
// end ;
61898: GO 61852
61900: POP
61901: POP
// end ;
61902: LD_VAR 0 10
61906: RET
// export function WantHeal ( sci , unit ) ; begin
61907: LD_INT 0
61909: PPUSH
// if GetTaskList ( sci ) > 0 then
61910: LD_VAR 0 1
61914: PPUSH
61915: CALL_OW 437
61919: PUSH
61920: LD_INT 0
61922: GREATER
61923: IFFALSE 61993
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61925: LD_VAR 0 1
61929: PPUSH
61930: CALL_OW 437
61934: PUSH
61935: LD_INT 1
61937: ARRAY
61938: PUSH
61939: LD_INT 1
61941: ARRAY
61942: PUSH
61943: LD_STRING l
61945: EQUAL
61946: PUSH
61947: LD_VAR 0 1
61951: PPUSH
61952: CALL_OW 437
61956: PUSH
61957: LD_INT 1
61959: ARRAY
61960: PUSH
61961: LD_INT 4
61963: ARRAY
61964: PUSH
61965: LD_VAR 0 2
61969: EQUAL
61970: AND
61971: IFFALSE 61983
// result := true else
61973: LD_ADDR_VAR 0 3
61977: PUSH
61978: LD_INT 1
61980: ST_TO_ADDR
61981: GO 61991
// result := false ;
61983: LD_ADDR_VAR 0 3
61987: PUSH
61988: LD_INT 0
61990: ST_TO_ADDR
// end else
61991: GO 62001
// result := false ;
61993: LD_ADDR_VAR 0 3
61997: PUSH
61998: LD_INT 0
62000: ST_TO_ADDR
// end ;
62001: LD_VAR 0 3
62005: RET
// export function HealTarget ( sci ) ; begin
62006: LD_INT 0
62008: PPUSH
// if not sci then
62009: LD_VAR 0 1
62013: NOT
62014: IFFALSE 62018
// exit ;
62016: GO 62083
// result := 0 ;
62018: LD_ADDR_VAR 0 2
62022: PUSH
62023: LD_INT 0
62025: ST_TO_ADDR
// if GetTaskList ( sci ) then
62026: LD_VAR 0 1
62030: PPUSH
62031: CALL_OW 437
62035: IFFALSE 62083
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62037: LD_VAR 0 1
62041: PPUSH
62042: CALL_OW 437
62046: PUSH
62047: LD_INT 1
62049: ARRAY
62050: PUSH
62051: LD_INT 1
62053: ARRAY
62054: PUSH
62055: LD_STRING l
62057: EQUAL
62058: IFFALSE 62083
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62060: LD_ADDR_VAR 0 2
62064: PUSH
62065: LD_VAR 0 1
62069: PPUSH
62070: CALL_OW 437
62074: PUSH
62075: LD_INT 1
62077: ARRAY
62078: PUSH
62079: LD_INT 4
62081: ARRAY
62082: ST_TO_ADDR
// end ;
62083: LD_VAR 0 2
62087: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62088: LD_INT 0
62090: PPUSH
62091: PPUSH
62092: PPUSH
62093: PPUSH
// if not base_units then
62094: LD_VAR 0 1
62098: NOT
62099: IFFALSE 62103
// exit ;
62101: GO 62190
// result := false ;
62103: LD_ADDR_VAR 0 2
62107: PUSH
62108: LD_INT 0
62110: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62111: LD_ADDR_VAR 0 5
62115: PUSH
62116: LD_VAR 0 1
62120: PPUSH
62121: LD_INT 21
62123: PUSH
62124: LD_INT 3
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PPUSH
62131: CALL_OW 72
62135: ST_TO_ADDR
// if not tmp then
62136: LD_VAR 0 5
62140: NOT
62141: IFFALSE 62145
// exit ;
62143: GO 62190
// for i in tmp do
62145: LD_ADDR_VAR 0 3
62149: PUSH
62150: LD_VAR 0 5
62154: PUSH
62155: FOR_IN
62156: IFFALSE 62188
// begin result := EnemyInRange ( i , 22 ) ;
62158: LD_ADDR_VAR 0 2
62162: PUSH
62163: LD_VAR 0 3
62167: PPUSH
62168: LD_INT 22
62170: PPUSH
62171: CALL 60426 0 2
62175: ST_TO_ADDR
// if result then
62176: LD_VAR 0 2
62180: IFFALSE 62186
// exit ;
62182: POP
62183: POP
62184: GO 62190
// end ;
62186: GO 62155
62188: POP
62189: POP
// end ;
62190: LD_VAR 0 2
62194: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62195: LD_INT 0
62197: PPUSH
62198: PPUSH
// if not units then
62199: LD_VAR 0 1
62203: NOT
62204: IFFALSE 62208
// exit ;
62206: GO 62278
// result := [ ] ;
62208: LD_ADDR_VAR 0 3
62212: PUSH
62213: EMPTY
62214: ST_TO_ADDR
// for i in units do
62215: LD_ADDR_VAR 0 4
62219: PUSH
62220: LD_VAR 0 1
62224: PUSH
62225: FOR_IN
62226: IFFALSE 62276
// if GetTag ( i ) = tag then
62228: LD_VAR 0 4
62232: PPUSH
62233: CALL_OW 110
62237: PUSH
62238: LD_VAR 0 2
62242: EQUAL
62243: IFFALSE 62274
// result := Replace ( result , result + 1 , i ) ;
62245: LD_ADDR_VAR 0 3
62249: PUSH
62250: LD_VAR 0 3
62254: PPUSH
62255: LD_VAR 0 3
62259: PUSH
62260: LD_INT 1
62262: PLUS
62263: PPUSH
62264: LD_VAR 0 4
62268: PPUSH
62269: CALL_OW 1
62273: ST_TO_ADDR
62274: GO 62225
62276: POP
62277: POP
// end ;
62278: LD_VAR 0 3
62282: RET
// export function IsDriver ( un ) ; begin
62283: LD_INT 0
62285: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62286: LD_ADDR_VAR 0 2
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: LD_INT 55
62298: PUSH
62299: EMPTY
62300: LIST
62301: PPUSH
62302: CALL_OW 69
62306: IN
62307: ST_TO_ADDR
// end ;
62308: LD_VAR 0 2
62312: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62313: LD_INT 0
62315: PPUSH
62316: PPUSH
// list := [ ] ;
62317: LD_ADDR_VAR 0 5
62321: PUSH
62322: EMPTY
62323: ST_TO_ADDR
// case d of 0 :
62324: LD_VAR 0 3
62328: PUSH
62329: LD_INT 0
62331: DOUBLE
62332: EQUAL
62333: IFTRUE 62337
62335: GO 62470
62337: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62338: LD_ADDR_VAR 0 5
62342: PUSH
62343: LD_VAR 0 1
62347: PUSH
62348: LD_INT 4
62350: MINUS
62351: PUSH
62352: LD_VAR 0 2
62356: PUSH
62357: LD_INT 4
62359: MINUS
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: PUSH
62369: LD_VAR 0 1
62373: PUSH
62374: LD_INT 3
62376: MINUS
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: PUSH
62391: LD_VAR 0 1
62395: PUSH
62396: LD_INT 4
62398: PLUS
62399: PUSH
62400: LD_VAR 0 2
62404: PUSH
62405: LD_INT 4
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: LIST
62412: PUSH
62413: LD_VAR 0 1
62417: PUSH
62418: LD_INT 3
62420: PLUS
62421: PUSH
62422: LD_VAR 0 2
62426: PUSH
62427: LD_INT 3
62429: PLUS
62430: PUSH
62431: LD_INT 5
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: PUSH
62439: LD_VAR 0 1
62443: PUSH
62444: LD_VAR 0 2
62448: PUSH
62449: LD_INT 4
62451: PLUS
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: ST_TO_ADDR
// end ; 1 :
62468: GO 63168
62470: LD_INT 1
62472: DOUBLE
62473: EQUAL
62474: IFTRUE 62478
62476: GO 62611
62478: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62479: LD_ADDR_VAR 0 5
62483: PUSH
62484: LD_VAR 0 1
62488: PUSH
62489: LD_VAR 0 2
62493: PUSH
62494: LD_INT 4
62496: MINUS
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: LIST
62505: PUSH
62506: LD_VAR 0 1
62510: PUSH
62511: LD_INT 3
62513: MINUS
62514: PUSH
62515: LD_VAR 0 2
62519: PUSH
62520: LD_INT 3
62522: MINUS
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: PUSH
62532: LD_VAR 0 1
62536: PUSH
62537: LD_INT 4
62539: MINUS
62540: PUSH
62541: LD_VAR 0 2
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: PUSH
62554: LD_VAR 0 1
62558: PUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_INT 3
62566: PLUS
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: LIST
62575: PUSH
62576: LD_VAR 0 1
62580: PUSH
62581: LD_INT 4
62583: PLUS
62584: PUSH
62585: LD_VAR 0 2
62589: PUSH
62590: LD_INT 4
62592: PLUS
62593: PUSH
62594: LD_INT 5
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// end ; 2 :
62609: GO 63168
62611: LD_INT 2
62613: DOUBLE
62614: EQUAL
62615: IFTRUE 62619
62617: GO 62748
62619: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62620: LD_ADDR_VAR 0 5
62624: PUSH
62625: LD_VAR 0 1
62629: PUSH
62630: LD_VAR 0 2
62634: PUSH
62635: LD_INT 3
62637: MINUS
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: PUSH
62647: LD_VAR 0 1
62651: PUSH
62652: LD_INT 4
62654: PLUS
62655: PUSH
62656: LD_VAR 0 2
62660: PUSH
62661: LD_INT 4
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: PUSH
62669: LD_VAR 0 1
62673: PUSH
62674: LD_VAR 0 2
62678: PUSH
62679: LD_INT 4
62681: PLUS
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: PUSH
62691: LD_VAR 0 1
62695: PUSH
62696: LD_INT 3
62698: MINUS
62699: PUSH
62700: LD_VAR 0 2
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: LIST
62712: PUSH
62713: LD_VAR 0 1
62717: PUSH
62718: LD_INT 4
62720: MINUS
62721: PUSH
62722: LD_VAR 0 2
62726: PUSH
62727: LD_INT 4
62729: MINUS
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: ST_TO_ADDR
// end ; 3 :
62746: GO 63168
62748: LD_INT 3
62750: DOUBLE
62751: EQUAL
62752: IFTRUE 62756
62754: GO 62889
62756: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62757: LD_ADDR_VAR 0 5
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: LD_INT 3
62769: PLUS
62770: PUSH
62771: LD_VAR 0 2
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: PUSH
62784: LD_VAR 0 1
62788: PUSH
62789: LD_INT 4
62791: PLUS
62792: PUSH
62793: LD_VAR 0 2
62797: PUSH
62798: LD_INT 4
62800: PLUS
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: PUSH
62810: LD_VAR 0 1
62814: PUSH
62815: LD_INT 4
62817: MINUS
62818: PUSH
62819: LD_VAR 0 2
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: PUSH
62832: LD_VAR 0 1
62836: PUSH
62837: LD_VAR 0 2
62841: PUSH
62842: LD_INT 4
62844: MINUS
62845: PUSH
62846: LD_INT 3
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: LIST
62853: PUSH
62854: LD_VAR 0 1
62858: PUSH
62859: LD_INT 3
62861: MINUS
62862: PUSH
62863: LD_VAR 0 2
62867: PUSH
62868: LD_INT 3
62870: MINUS
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: LIST
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: ST_TO_ADDR
// end ; 4 :
62887: GO 63168
62889: LD_INT 4
62891: DOUBLE
62892: EQUAL
62893: IFTRUE 62897
62895: GO 63030
62897: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62898: LD_ADDR_VAR 0 5
62902: PUSH
62903: LD_VAR 0 1
62907: PUSH
62908: LD_VAR 0 2
62912: PUSH
62913: LD_INT 4
62915: PLUS
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: PUSH
62925: LD_VAR 0 1
62929: PUSH
62930: LD_INT 3
62932: PLUS
62933: PUSH
62934: LD_VAR 0 2
62938: PUSH
62939: LD_INT 3
62941: PLUS
62942: PUSH
62943: LD_INT 5
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: LIST
62950: PUSH
62951: LD_VAR 0 1
62955: PUSH
62956: LD_INT 4
62958: PLUS
62959: PUSH
62960: LD_VAR 0 2
62964: PUSH
62965: LD_INT 4
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: PUSH
62973: LD_VAR 0 1
62977: PUSH
62978: LD_VAR 0 2
62982: PUSH
62983: LD_INT 3
62985: MINUS
62986: PUSH
62987: LD_INT 3
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: PUSH
62995: LD_VAR 0 1
62999: PUSH
63000: LD_INT 4
63002: MINUS
63003: PUSH
63004: LD_VAR 0 2
63008: PUSH
63009: LD_INT 4
63011: MINUS
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: ST_TO_ADDR
// end ; 5 :
63028: GO 63168
63030: LD_INT 5
63032: DOUBLE
63033: EQUAL
63034: IFTRUE 63038
63036: GO 63167
63038: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63039: LD_ADDR_VAR 0 5
63043: PUSH
63044: LD_VAR 0 1
63048: PUSH
63049: LD_INT 4
63051: MINUS
63052: PUSH
63053: LD_VAR 0 2
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: LIST
63065: PUSH
63066: LD_VAR 0 1
63070: PUSH
63071: LD_VAR 0 2
63075: PUSH
63076: LD_INT 4
63078: MINUS
63079: PUSH
63080: LD_INT 3
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: PUSH
63088: LD_VAR 0 1
63092: PUSH
63093: LD_INT 4
63095: PLUS
63096: PUSH
63097: LD_VAR 0 2
63101: PUSH
63102: LD_INT 4
63104: PLUS
63105: PUSH
63106: LD_INT 5
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: PUSH
63114: LD_VAR 0 1
63118: PUSH
63119: LD_INT 3
63121: PLUS
63122: PUSH
63123: LD_VAR 0 2
63127: PUSH
63128: LD_INT 4
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: PUSH
63136: LD_VAR 0 1
63140: PUSH
63141: LD_VAR 0 2
63145: PUSH
63146: LD_INT 3
63148: PLUS
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: LIST
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: ST_TO_ADDR
// end ; end ;
63165: GO 63168
63167: POP
// result := list ;
63168: LD_ADDR_VAR 0 4
63172: PUSH
63173: LD_VAR 0 5
63177: ST_TO_ADDR
// end ;
63178: LD_VAR 0 4
63182: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63183: LD_INT 0
63185: PPUSH
63186: PPUSH
63187: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63188: LD_VAR 0 1
63192: NOT
63193: PUSH
63194: LD_VAR 0 2
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: LD_INT 4
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: IN
63217: NOT
63218: OR
63219: IFFALSE 63223
// exit ;
63221: GO 63315
// tmp := [ ] ;
63223: LD_ADDR_VAR 0 5
63227: PUSH
63228: EMPTY
63229: ST_TO_ADDR
// for i in units do
63230: LD_ADDR_VAR 0 4
63234: PUSH
63235: LD_VAR 0 1
63239: PUSH
63240: FOR_IN
63241: IFFALSE 63284
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63243: LD_ADDR_VAR 0 5
63247: PUSH
63248: LD_VAR 0 5
63252: PPUSH
63253: LD_VAR 0 5
63257: PUSH
63258: LD_INT 1
63260: PLUS
63261: PPUSH
63262: LD_VAR 0 4
63266: PPUSH
63267: LD_VAR 0 2
63271: PPUSH
63272: CALL_OW 259
63276: PPUSH
63277: CALL_OW 2
63281: ST_TO_ADDR
63282: GO 63240
63284: POP
63285: POP
// if not tmp then
63286: LD_VAR 0 5
63290: NOT
63291: IFFALSE 63295
// exit ;
63293: GO 63315
// result := SortListByListDesc ( units , tmp ) ;
63295: LD_ADDR_VAR 0 3
63299: PUSH
63300: LD_VAR 0 1
63304: PPUSH
63305: LD_VAR 0 5
63309: PPUSH
63310: CALL_OW 77
63314: ST_TO_ADDR
// end ;
63315: LD_VAR 0 3
63319: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63320: LD_INT 0
63322: PPUSH
63323: PPUSH
63324: PPUSH
// result := false ;
63325: LD_ADDR_VAR 0 3
63329: PUSH
63330: LD_INT 0
63332: ST_TO_ADDR
// x := GetX ( building ) ;
63333: LD_ADDR_VAR 0 4
63337: PUSH
63338: LD_VAR 0 2
63342: PPUSH
63343: CALL_OW 250
63347: ST_TO_ADDR
// y := GetY ( building ) ;
63348: LD_ADDR_VAR 0 5
63352: PUSH
63353: LD_VAR 0 2
63357: PPUSH
63358: CALL_OW 251
63362: ST_TO_ADDR
// if not building or not x or not y then
63363: LD_VAR 0 2
63367: NOT
63368: PUSH
63369: LD_VAR 0 4
63373: NOT
63374: OR
63375: PUSH
63376: LD_VAR 0 5
63380: NOT
63381: OR
63382: IFFALSE 63386
// exit ;
63384: GO 63478
// if GetTaskList ( unit ) then
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 437
63395: IFFALSE 63478
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63397: LD_STRING e
63399: PUSH
63400: LD_VAR 0 1
63404: PPUSH
63405: CALL_OW 437
63409: PUSH
63410: LD_INT 1
63412: ARRAY
63413: PUSH
63414: LD_INT 1
63416: ARRAY
63417: EQUAL
63418: PUSH
63419: LD_VAR 0 4
63423: PUSH
63424: LD_VAR 0 1
63428: PPUSH
63429: CALL_OW 437
63433: PUSH
63434: LD_INT 1
63436: ARRAY
63437: PUSH
63438: LD_INT 2
63440: ARRAY
63441: EQUAL
63442: AND
63443: PUSH
63444: LD_VAR 0 5
63448: PUSH
63449: LD_VAR 0 1
63453: PPUSH
63454: CALL_OW 437
63458: PUSH
63459: LD_INT 1
63461: ARRAY
63462: PUSH
63463: LD_INT 3
63465: ARRAY
63466: EQUAL
63467: AND
63468: IFFALSE 63478
// result := true end ;
63470: LD_ADDR_VAR 0 3
63474: PUSH
63475: LD_INT 1
63477: ST_TO_ADDR
// end ;
63478: LD_VAR 0 3
63482: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63483: LD_INT 0
63485: PPUSH
// result := false ;
63486: LD_ADDR_VAR 0 4
63490: PUSH
63491: LD_INT 0
63493: ST_TO_ADDR
// if GetTaskList ( unit ) then
63494: LD_VAR 0 1
63498: PPUSH
63499: CALL_OW 437
63503: IFFALSE 63586
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63505: LD_STRING M
63507: PUSH
63508: LD_VAR 0 1
63512: PPUSH
63513: CALL_OW 437
63517: PUSH
63518: LD_INT 1
63520: ARRAY
63521: PUSH
63522: LD_INT 1
63524: ARRAY
63525: EQUAL
63526: PUSH
63527: LD_VAR 0 2
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: CALL_OW 437
63541: PUSH
63542: LD_INT 1
63544: ARRAY
63545: PUSH
63546: LD_INT 2
63548: ARRAY
63549: EQUAL
63550: AND
63551: PUSH
63552: LD_VAR 0 3
63556: PUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 437
63566: PUSH
63567: LD_INT 1
63569: ARRAY
63570: PUSH
63571: LD_INT 3
63573: ARRAY
63574: EQUAL
63575: AND
63576: IFFALSE 63586
// result := true ;
63578: LD_ADDR_VAR 0 4
63582: PUSH
63583: LD_INT 1
63585: ST_TO_ADDR
// end ; end ;
63586: LD_VAR 0 4
63590: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63591: LD_INT 0
63593: PPUSH
63594: PPUSH
63595: PPUSH
63596: PPUSH
// if not unit or not area then
63597: LD_VAR 0 1
63601: NOT
63602: PUSH
63603: LD_VAR 0 2
63607: NOT
63608: OR
63609: IFFALSE 63613
// exit ;
63611: GO 63777
// tmp := AreaToList ( area , i ) ;
63613: LD_ADDR_VAR 0 6
63617: PUSH
63618: LD_VAR 0 2
63622: PPUSH
63623: LD_VAR 0 5
63627: PPUSH
63628: CALL_OW 517
63632: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63633: LD_ADDR_VAR 0 5
63637: PUSH
63638: DOUBLE
63639: LD_INT 1
63641: DEC
63642: ST_TO_ADDR
63643: LD_VAR 0 6
63647: PUSH
63648: LD_INT 1
63650: ARRAY
63651: PUSH
63652: FOR_TO
63653: IFFALSE 63775
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63655: LD_ADDR_VAR 0 7
63659: PUSH
63660: LD_VAR 0 6
63664: PUSH
63665: LD_INT 1
63667: ARRAY
63668: PUSH
63669: LD_VAR 0 5
63673: ARRAY
63674: PUSH
63675: LD_VAR 0 6
63679: PUSH
63680: LD_INT 2
63682: ARRAY
63683: PUSH
63684: LD_VAR 0 5
63688: ARRAY
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63694: LD_VAR 0 7
63698: PUSH
63699: LD_INT 1
63701: ARRAY
63702: PPUSH
63703: LD_VAR 0 7
63707: PUSH
63708: LD_INT 2
63710: ARRAY
63711: PPUSH
63712: CALL_OW 428
63716: PUSH
63717: LD_INT 0
63719: EQUAL
63720: IFFALSE 63773
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63722: LD_VAR 0 1
63726: PPUSH
63727: LD_VAR 0 7
63731: PUSH
63732: LD_INT 1
63734: ARRAY
63735: PPUSH
63736: LD_VAR 0 7
63740: PUSH
63741: LD_INT 2
63743: ARRAY
63744: PPUSH
63745: LD_VAR 0 3
63749: PPUSH
63750: CALL_OW 48
// result := IsPlaced ( unit ) ;
63754: LD_ADDR_VAR 0 4
63758: PUSH
63759: LD_VAR 0 1
63763: PPUSH
63764: CALL_OW 305
63768: ST_TO_ADDR
// exit ;
63769: POP
63770: POP
63771: GO 63777
// end ; end ;
63773: GO 63652
63775: POP
63776: POP
// end ;
63777: LD_VAR 0 4
63781: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63782: LD_INT 0
63784: PPUSH
63785: PPUSH
63786: PPUSH
// if not side or side > 8 then
63787: LD_VAR 0 1
63791: NOT
63792: PUSH
63793: LD_VAR 0 1
63797: PUSH
63798: LD_INT 8
63800: GREATER
63801: OR
63802: IFFALSE 63806
// exit ;
63804: GO 63993
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63806: LD_ADDR_VAR 0 4
63810: PUSH
63811: LD_INT 22
63813: PUSH
63814: LD_VAR 0 1
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 21
63825: PUSH
63826: LD_INT 3
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PPUSH
63837: CALL_OW 69
63841: ST_TO_ADDR
// if not tmp then
63842: LD_VAR 0 4
63846: NOT
63847: IFFALSE 63851
// exit ;
63849: GO 63993
// enable_addtolog := true ;
63851: LD_ADDR_OWVAR 81
63855: PUSH
63856: LD_INT 1
63858: ST_TO_ADDR
// AddToLog ( [ ) ;
63859: LD_STRING [
63861: PPUSH
63862: CALL_OW 561
// for i in tmp do
63866: LD_ADDR_VAR 0 3
63870: PUSH
63871: LD_VAR 0 4
63875: PUSH
63876: FOR_IN
63877: IFFALSE 63984
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63879: LD_STRING [
63881: PUSH
63882: LD_VAR 0 3
63886: PPUSH
63887: CALL_OW 266
63891: STR
63892: PUSH
63893: LD_STRING , 
63895: STR
63896: PUSH
63897: LD_VAR 0 3
63901: PPUSH
63902: CALL_OW 250
63906: STR
63907: PUSH
63908: LD_STRING , 
63910: STR
63911: PUSH
63912: LD_VAR 0 3
63916: PPUSH
63917: CALL_OW 251
63921: STR
63922: PUSH
63923: LD_STRING , 
63925: STR
63926: PUSH
63927: LD_VAR 0 3
63931: PPUSH
63932: CALL_OW 254
63936: STR
63937: PUSH
63938: LD_STRING , 
63940: STR
63941: PUSH
63942: LD_VAR 0 3
63946: PPUSH
63947: LD_INT 1
63949: PPUSH
63950: CALL_OW 268
63954: STR
63955: PUSH
63956: LD_STRING , 
63958: STR
63959: PUSH
63960: LD_VAR 0 3
63964: PPUSH
63965: LD_INT 2
63967: PPUSH
63968: CALL_OW 268
63972: STR
63973: PUSH
63974: LD_STRING ],
63976: STR
63977: PPUSH
63978: CALL_OW 561
// end ;
63982: GO 63876
63984: POP
63985: POP
// AddToLog ( ]; ) ;
63986: LD_STRING ];
63988: PPUSH
63989: CALL_OW 561
// end ;
63993: LD_VAR 0 2
63997: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63998: LD_INT 0
64000: PPUSH
64001: PPUSH
64002: PPUSH
64003: PPUSH
64004: PPUSH
// if not area or not rate or not max then
64005: LD_VAR 0 1
64009: NOT
64010: PUSH
64011: LD_VAR 0 2
64015: NOT
64016: OR
64017: PUSH
64018: LD_VAR 0 4
64022: NOT
64023: OR
64024: IFFALSE 64028
// exit ;
64026: GO 64220
// while 1 do
64028: LD_INT 1
64030: IFFALSE 64220
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64032: LD_ADDR_VAR 0 9
64036: PUSH
64037: LD_VAR 0 1
64041: PPUSH
64042: LD_INT 1
64044: PPUSH
64045: CALL_OW 287
64049: PUSH
64050: LD_INT 10
64052: MUL
64053: ST_TO_ADDR
// r := rate / 10 ;
64054: LD_ADDR_VAR 0 7
64058: PUSH
64059: LD_VAR 0 2
64063: PUSH
64064: LD_INT 10
64066: DIVREAL
64067: ST_TO_ADDR
// time := 1 1$00 ;
64068: LD_ADDR_VAR 0 8
64072: PUSH
64073: LD_INT 2100
64075: ST_TO_ADDR
// if amount < min then
64076: LD_VAR 0 9
64080: PUSH
64081: LD_VAR 0 3
64085: LESS
64086: IFFALSE 64104
// r := r * 2 else
64088: LD_ADDR_VAR 0 7
64092: PUSH
64093: LD_VAR 0 7
64097: PUSH
64098: LD_INT 2
64100: MUL
64101: ST_TO_ADDR
64102: GO 64130
// if amount > max then
64104: LD_VAR 0 9
64108: PUSH
64109: LD_VAR 0 4
64113: GREATER
64114: IFFALSE 64130
// r := r / 2 ;
64116: LD_ADDR_VAR 0 7
64120: PUSH
64121: LD_VAR 0 7
64125: PUSH
64126: LD_INT 2
64128: DIVREAL
64129: ST_TO_ADDR
// time := time / r ;
64130: LD_ADDR_VAR 0 8
64134: PUSH
64135: LD_VAR 0 8
64139: PUSH
64140: LD_VAR 0 7
64144: DIVREAL
64145: ST_TO_ADDR
// if time < 0 then
64146: LD_VAR 0 8
64150: PUSH
64151: LD_INT 0
64153: LESS
64154: IFFALSE 64171
// time := time * - 1 ;
64156: LD_ADDR_VAR 0 8
64160: PUSH
64161: LD_VAR 0 8
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: MUL
64170: ST_TO_ADDR
// wait ( time ) ;
64171: LD_VAR 0 8
64175: PPUSH
64176: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64180: LD_INT 35
64182: PPUSH
64183: LD_INT 875
64185: PPUSH
64186: CALL_OW 12
64190: PPUSH
64191: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64195: LD_INT 1
64197: PPUSH
64198: LD_INT 5
64200: PPUSH
64201: CALL_OW 12
64205: PPUSH
64206: LD_VAR 0 1
64210: PPUSH
64211: LD_INT 1
64213: PPUSH
64214: CALL_OW 55
// end ;
64218: GO 64028
// end ;
64220: LD_VAR 0 5
64224: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64225: LD_INT 0
64227: PPUSH
64228: PPUSH
64229: PPUSH
64230: PPUSH
64231: PPUSH
64232: PPUSH
64233: PPUSH
64234: PPUSH
// if not turrets or not factories then
64235: LD_VAR 0 1
64239: NOT
64240: PUSH
64241: LD_VAR 0 2
64245: NOT
64246: OR
64247: IFFALSE 64251
// exit ;
64249: GO 64558
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64251: LD_ADDR_VAR 0 10
64255: PUSH
64256: LD_INT 5
64258: PUSH
64259: LD_INT 6
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: LD_INT 4
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 3
64278: PUSH
64279: LD_INT 5
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 24
64293: PUSH
64294: LD_INT 25
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 23
64303: PUSH
64304: LD_INT 27
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 42
64317: PUSH
64318: LD_INT 43
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 44
64327: PUSH
64328: LD_INT 46
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 45
64337: PUSH
64338: LD_INT 47
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// result := [ ] ;
64355: LD_ADDR_VAR 0 3
64359: PUSH
64360: EMPTY
64361: ST_TO_ADDR
// for i in turrets do
64362: LD_ADDR_VAR 0 4
64366: PUSH
64367: LD_VAR 0 1
64371: PUSH
64372: FOR_IN
64373: IFFALSE 64556
// begin nat := GetNation ( i ) ;
64375: LD_ADDR_VAR 0 7
64379: PUSH
64380: LD_VAR 0 4
64384: PPUSH
64385: CALL_OW 248
64389: ST_TO_ADDR
// weapon := 0 ;
64390: LD_ADDR_VAR 0 8
64394: PUSH
64395: LD_INT 0
64397: ST_TO_ADDR
// if not nat then
64398: LD_VAR 0 7
64402: NOT
64403: IFFALSE 64407
// continue ;
64405: GO 64372
// for j in list [ nat ] do
64407: LD_ADDR_VAR 0 5
64411: PUSH
64412: LD_VAR 0 10
64416: PUSH
64417: LD_VAR 0 7
64421: ARRAY
64422: PUSH
64423: FOR_IN
64424: IFFALSE 64465
// if GetBWeapon ( i ) = j [ 1 ] then
64426: LD_VAR 0 4
64430: PPUSH
64431: CALL_OW 269
64435: PUSH
64436: LD_VAR 0 5
64440: PUSH
64441: LD_INT 1
64443: ARRAY
64444: EQUAL
64445: IFFALSE 64463
// begin weapon := j [ 2 ] ;
64447: LD_ADDR_VAR 0 8
64451: PUSH
64452: LD_VAR 0 5
64456: PUSH
64457: LD_INT 2
64459: ARRAY
64460: ST_TO_ADDR
// break ;
64461: GO 64465
// end ;
64463: GO 64423
64465: POP
64466: POP
// if not weapon then
64467: LD_VAR 0 8
64471: NOT
64472: IFFALSE 64476
// continue ;
64474: GO 64372
// for k in factories do
64476: LD_ADDR_VAR 0 6
64480: PUSH
64481: LD_VAR 0 2
64485: PUSH
64486: FOR_IN
64487: IFFALSE 64552
// begin weapons := AvailableWeaponList ( k ) ;
64489: LD_ADDR_VAR 0 9
64493: PUSH
64494: LD_VAR 0 6
64498: PPUSH
64499: CALL_OW 478
64503: ST_TO_ADDR
// if not weapons then
64504: LD_VAR 0 9
64508: NOT
64509: IFFALSE 64513
// continue ;
64511: GO 64486
// if weapon in weapons then
64513: LD_VAR 0 8
64517: PUSH
64518: LD_VAR 0 9
64522: IN
64523: IFFALSE 64550
// begin result := [ i , weapon ] ;
64525: LD_ADDR_VAR 0 3
64529: PUSH
64530: LD_VAR 0 4
64534: PUSH
64535: LD_VAR 0 8
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: ST_TO_ADDR
// exit ;
64544: POP
64545: POP
64546: POP
64547: POP
64548: GO 64558
// end ; end ;
64550: GO 64486
64552: POP
64553: POP
// end ;
64554: GO 64372
64556: POP
64557: POP
// end ;
64558: LD_VAR 0 3
64562: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64563: LD_INT 0
64565: PPUSH
// if not side or side > 8 then
64566: LD_VAR 0 3
64570: NOT
64571: PUSH
64572: LD_VAR 0 3
64576: PUSH
64577: LD_INT 8
64579: GREATER
64580: OR
64581: IFFALSE 64585
// exit ;
64583: GO 64644
// if not range then
64585: LD_VAR 0 4
64589: NOT
64590: IFFALSE 64601
// range := - 12 ;
64592: LD_ADDR_VAR 0 4
64596: PUSH
64597: LD_INT 12
64599: NEG
64600: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64601: LD_VAR 0 1
64605: PPUSH
64606: LD_VAR 0 2
64610: PPUSH
64611: LD_VAR 0 3
64615: PPUSH
64616: LD_VAR 0 4
64620: PPUSH
64621: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64625: LD_VAR 0 1
64629: PPUSH
64630: LD_VAR 0 2
64634: PPUSH
64635: LD_VAR 0 3
64639: PPUSH
64640: CALL_OW 331
// end ;
64644: LD_VAR 0 5
64648: RET
// export function Video ( mode ) ; begin
64649: LD_INT 0
64651: PPUSH
// ingame_video = mode ;
64652: LD_ADDR_OWVAR 52
64656: PUSH
64657: LD_VAR 0 1
64661: ST_TO_ADDR
// interface_hidden = mode ;
64662: LD_ADDR_OWVAR 54
64666: PUSH
64667: LD_VAR 0 1
64671: ST_TO_ADDR
// end ;
64672: LD_VAR 0 2
64676: RET
// export function Join ( array , element ) ; begin
64677: LD_INT 0
64679: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64680: LD_ADDR_VAR 0 3
64684: PUSH
64685: LD_VAR 0 1
64689: PPUSH
64690: LD_VAR 0 1
64694: PUSH
64695: LD_INT 1
64697: PLUS
64698: PPUSH
64699: LD_VAR 0 2
64703: PPUSH
64704: CALL_OW 1
64708: ST_TO_ADDR
// end ;
64709: LD_VAR 0 3
64713: RET
// export function JoinUnion ( array , element ) ; begin
64714: LD_INT 0
64716: PPUSH
// result := array union element ;
64717: LD_ADDR_VAR 0 3
64721: PUSH
64722: LD_VAR 0 1
64726: PUSH
64727: LD_VAR 0 2
64731: UNION
64732: ST_TO_ADDR
// end ;
64733: LD_VAR 0 3
64737: RET
// export function GetBehemoths ( side ) ; begin
64738: LD_INT 0
64740: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64741: LD_ADDR_VAR 0 2
64745: PUSH
64746: LD_INT 22
64748: PUSH
64749: LD_VAR 0 1
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 31
64760: PUSH
64761: LD_INT 25
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PPUSH
64772: CALL_OW 69
64776: ST_TO_ADDR
// end ;
64777: LD_VAR 0 2
64781: RET
// export function Shuffle ( array ) ; var i , index ; begin
64782: LD_INT 0
64784: PPUSH
64785: PPUSH
64786: PPUSH
// result := [ ] ;
64787: LD_ADDR_VAR 0 2
64791: PUSH
64792: EMPTY
64793: ST_TO_ADDR
// if not array then
64794: LD_VAR 0 1
64798: NOT
64799: IFFALSE 64803
// exit ;
64801: GO 64902
// Randomize ;
64803: CALL_OW 10
// for i = array downto 1 do
64807: LD_ADDR_VAR 0 3
64811: PUSH
64812: DOUBLE
64813: LD_VAR 0 1
64817: INC
64818: ST_TO_ADDR
64819: LD_INT 1
64821: PUSH
64822: FOR_DOWNTO
64823: IFFALSE 64900
// begin index := rand ( 1 , array ) ;
64825: LD_ADDR_VAR 0 4
64829: PUSH
64830: LD_INT 1
64832: PPUSH
64833: LD_VAR 0 1
64837: PPUSH
64838: CALL_OW 12
64842: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64843: LD_ADDR_VAR 0 2
64847: PUSH
64848: LD_VAR 0 2
64852: PPUSH
64853: LD_VAR 0 2
64857: PUSH
64858: LD_INT 1
64860: PLUS
64861: PPUSH
64862: LD_VAR 0 1
64866: PUSH
64867: LD_VAR 0 4
64871: ARRAY
64872: PPUSH
64873: CALL_OW 2
64877: ST_TO_ADDR
// array := Delete ( array , index ) ;
64878: LD_ADDR_VAR 0 1
64882: PUSH
64883: LD_VAR 0 1
64887: PPUSH
64888: LD_VAR 0 4
64892: PPUSH
64893: CALL_OW 3
64897: ST_TO_ADDR
// end ;
64898: GO 64822
64900: POP
64901: POP
// end ;
64902: LD_VAR 0 2
64906: RET
// export function GetBaseMaterials ( base ) ; begin
64907: LD_INT 0
64909: PPUSH
// result := [ 0 , 0 , 0 ] ;
64910: LD_ADDR_VAR 0 2
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: LIST
64928: ST_TO_ADDR
// if not base then
64929: LD_VAR 0 1
64933: NOT
64934: IFFALSE 64938
// exit ;
64936: GO 64987
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64938: LD_ADDR_VAR 0 2
64942: PUSH
64943: LD_VAR 0 1
64947: PPUSH
64948: LD_INT 1
64950: PPUSH
64951: CALL_OW 275
64955: PUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: LD_INT 2
64963: PPUSH
64964: CALL_OW 275
64968: PUSH
64969: LD_VAR 0 1
64973: PPUSH
64974: LD_INT 3
64976: PPUSH
64977: CALL_OW 275
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: ST_TO_ADDR
// end ;
64987: LD_VAR 0 2
64991: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64992: LD_INT 0
64994: PPUSH
64995: PPUSH
// result := array ;
64996: LD_ADDR_VAR 0 3
65000: PUSH
65001: LD_VAR 0 1
65005: ST_TO_ADDR
// if size > 0 then
65006: LD_VAR 0 2
65010: PUSH
65011: LD_INT 0
65013: GREATER
65014: IFFALSE 65060
// for i := array downto size do
65016: LD_ADDR_VAR 0 4
65020: PUSH
65021: DOUBLE
65022: LD_VAR 0 1
65026: INC
65027: ST_TO_ADDR
65028: LD_VAR 0 2
65032: PUSH
65033: FOR_DOWNTO
65034: IFFALSE 65058
// result := Delete ( result , result ) ;
65036: LD_ADDR_VAR 0 3
65040: PUSH
65041: LD_VAR 0 3
65045: PPUSH
65046: LD_VAR 0 3
65050: PPUSH
65051: CALL_OW 3
65055: ST_TO_ADDR
65056: GO 65033
65058: POP
65059: POP
// end ;
65060: LD_VAR 0 3
65064: RET
// export function ComExit ( unit ) ; var tmp ; begin
65065: LD_INT 0
65067: PPUSH
65068: PPUSH
// if not IsInUnit ( unit ) then
65069: LD_VAR 0 1
65073: PPUSH
65074: CALL_OW 310
65078: NOT
65079: IFFALSE 65083
// exit ;
65081: GO 65143
// tmp := IsInUnit ( unit ) ;
65083: LD_ADDR_VAR 0 3
65087: PUSH
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 310
65097: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65098: LD_VAR 0 3
65102: PPUSH
65103: CALL_OW 247
65107: PUSH
65108: LD_INT 2
65110: EQUAL
65111: IFFALSE 65124
// ComExitVehicle ( unit ) else
65113: LD_VAR 0 1
65117: PPUSH
65118: CALL_OW 121
65122: GO 65133
// ComExitBuilding ( unit ) ;
65124: LD_VAR 0 1
65128: PPUSH
65129: CALL_OW 122
// result := tmp ;
65133: LD_ADDR_VAR 0 2
65137: PUSH
65138: LD_VAR 0 3
65142: ST_TO_ADDR
// end ;
65143: LD_VAR 0 2
65147: RET
// export function ComExitAll ( units ) ; var i ; begin
65148: LD_INT 0
65150: PPUSH
65151: PPUSH
// if not units then
65152: LD_VAR 0 1
65156: NOT
65157: IFFALSE 65161
// exit ;
65159: GO 65187
// for i in units do
65161: LD_ADDR_VAR 0 3
65165: PUSH
65166: LD_VAR 0 1
65170: PUSH
65171: FOR_IN
65172: IFFALSE 65185
// ComExit ( i ) ;
65174: LD_VAR 0 3
65178: PPUSH
65179: CALL 65065 0 1
65183: GO 65171
65185: POP
65186: POP
// end ;
65187: LD_VAR 0 2
65191: RET
// export function ResetHc ; begin
65192: LD_INT 0
65194: PPUSH
// InitHc ;
65195: CALL_OW 19
// hc_importance := 0 ;
65199: LD_ADDR_OWVAR 32
65203: PUSH
65204: LD_INT 0
65206: ST_TO_ADDR
// end ;
65207: LD_VAR 0 1
65211: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65212: LD_INT 0
65214: PPUSH
65215: PPUSH
65216: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65217: LD_ADDR_VAR 0 6
65221: PUSH
65222: LD_VAR 0 1
65226: PUSH
65227: LD_VAR 0 3
65231: PLUS
65232: PUSH
65233: LD_INT 2
65235: DIV
65236: ST_TO_ADDR
// if _x < 0 then
65237: LD_VAR 0 6
65241: PUSH
65242: LD_INT 0
65244: LESS
65245: IFFALSE 65262
// _x := _x * - 1 ;
65247: LD_ADDR_VAR 0 6
65251: PUSH
65252: LD_VAR 0 6
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: MUL
65261: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65262: LD_ADDR_VAR 0 7
65266: PUSH
65267: LD_VAR 0 2
65271: PUSH
65272: LD_VAR 0 4
65276: PLUS
65277: PUSH
65278: LD_INT 2
65280: DIV
65281: ST_TO_ADDR
// if _y < 0 then
65282: LD_VAR 0 7
65286: PUSH
65287: LD_INT 0
65289: LESS
65290: IFFALSE 65307
// _y := _y * - 1 ;
65292: LD_ADDR_VAR 0 7
65296: PUSH
65297: LD_VAR 0 7
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: MUL
65306: ST_TO_ADDR
// result := [ _x , _y ] ;
65307: LD_ADDR_VAR 0 5
65311: PUSH
65312: LD_VAR 0 6
65316: PUSH
65317: LD_VAR 0 7
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// end ;
65326: LD_VAR 0 5
65330: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65331: LD_INT 0
65333: PPUSH
65334: PPUSH
65335: PPUSH
65336: PPUSH
// task := GetTaskList ( unit ) ;
65337: LD_ADDR_VAR 0 7
65341: PUSH
65342: LD_VAR 0 1
65346: PPUSH
65347: CALL_OW 437
65351: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65352: LD_VAR 0 7
65356: NOT
65357: PUSH
65358: LD_VAR 0 1
65362: PPUSH
65363: LD_VAR 0 2
65367: PPUSH
65368: CALL_OW 308
65372: NOT
65373: AND
65374: IFFALSE 65378
// exit ;
65376: GO 65496
// if IsInArea ( unit , area ) then
65378: LD_VAR 0 1
65382: PPUSH
65383: LD_VAR 0 2
65387: PPUSH
65388: CALL_OW 308
65392: IFFALSE 65410
// begin ComMoveToArea ( unit , goAway ) ;
65394: LD_VAR 0 1
65398: PPUSH
65399: LD_VAR 0 3
65403: PPUSH
65404: CALL_OW 113
// exit ;
65408: GO 65496
// end ; if task [ 1 ] [ 1 ] <> M then
65410: LD_VAR 0 7
65414: PUSH
65415: LD_INT 1
65417: ARRAY
65418: PUSH
65419: LD_INT 1
65421: ARRAY
65422: PUSH
65423: LD_STRING M
65425: NONEQUAL
65426: IFFALSE 65430
// exit ;
65428: GO 65496
// x := task [ 1 ] [ 2 ] ;
65430: LD_ADDR_VAR 0 5
65434: PUSH
65435: LD_VAR 0 7
65439: PUSH
65440: LD_INT 1
65442: ARRAY
65443: PUSH
65444: LD_INT 2
65446: ARRAY
65447: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65448: LD_ADDR_VAR 0 6
65452: PUSH
65453: LD_VAR 0 7
65457: PUSH
65458: LD_INT 1
65460: ARRAY
65461: PUSH
65462: LD_INT 3
65464: ARRAY
65465: ST_TO_ADDR
// if InArea ( x , y , area ) then
65466: LD_VAR 0 5
65470: PPUSH
65471: LD_VAR 0 6
65475: PPUSH
65476: LD_VAR 0 2
65480: PPUSH
65481: CALL_OW 309
65485: IFFALSE 65496
// ComStop ( unit ) ;
65487: LD_VAR 0 1
65491: PPUSH
65492: CALL_OW 141
// end ;
65496: LD_VAR 0 4
65500: RET
// export function Abs ( value ) ; begin
65501: LD_INT 0
65503: PPUSH
// result := value ;
65504: LD_ADDR_VAR 0 2
65508: PUSH
65509: LD_VAR 0 1
65513: ST_TO_ADDR
// if value < 0 then
65514: LD_VAR 0 1
65518: PUSH
65519: LD_INT 0
65521: LESS
65522: IFFALSE 65539
// result := value * - 1 ;
65524: LD_ADDR_VAR 0 2
65528: PUSH
65529: LD_VAR 0 1
65533: PUSH
65534: LD_INT 1
65536: NEG
65537: MUL
65538: ST_TO_ADDR
// end ;
65539: LD_VAR 0 2
65543: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65544: LD_INT 0
65546: PPUSH
65547: PPUSH
65548: PPUSH
65549: PPUSH
65550: PPUSH
65551: PPUSH
65552: PPUSH
65553: PPUSH
// if not unit or not building then
65554: LD_VAR 0 1
65558: NOT
65559: PUSH
65560: LD_VAR 0 2
65564: NOT
65565: OR
65566: IFFALSE 65570
// exit ;
65568: GO 65796
// x := GetX ( building ) ;
65570: LD_ADDR_VAR 0 4
65574: PUSH
65575: LD_VAR 0 2
65579: PPUSH
65580: CALL_OW 250
65584: ST_TO_ADDR
// y := GetY ( building ) ;
65585: LD_ADDR_VAR 0 6
65589: PUSH
65590: LD_VAR 0 2
65594: PPUSH
65595: CALL_OW 251
65599: ST_TO_ADDR
// d := GetDir ( building ) ;
65600: LD_ADDR_VAR 0 8
65604: PUSH
65605: LD_VAR 0 2
65609: PPUSH
65610: CALL_OW 254
65614: ST_TO_ADDR
// r := 4 ;
65615: LD_ADDR_VAR 0 9
65619: PUSH
65620: LD_INT 4
65622: ST_TO_ADDR
// for i := 1 to 5 do
65623: LD_ADDR_VAR 0 10
65627: PUSH
65628: DOUBLE
65629: LD_INT 1
65631: DEC
65632: ST_TO_ADDR
65633: LD_INT 5
65635: PUSH
65636: FOR_TO
65637: IFFALSE 65794
// begin _x := ShiftX ( x , d , r + i ) ;
65639: LD_ADDR_VAR 0 5
65643: PUSH
65644: LD_VAR 0 4
65648: PPUSH
65649: LD_VAR 0 8
65653: PPUSH
65654: LD_VAR 0 9
65658: PUSH
65659: LD_VAR 0 10
65663: PLUS
65664: PPUSH
65665: CALL_OW 272
65669: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65670: LD_ADDR_VAR 0 7
65674: PUSH
65675: LD_VAR 0 6
65679: PPUSH
65680: LD_VAR 0 8
65684: PPUSH
65685: LD_VAR 0 9
65689: PUSH
65690: LD_VAR 0 10
65694: PLUS
65695: PPUSH
65696: CALL_OW 273
65700: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65701: LD_VAR 0 5
65705: PPUSH
65706: LD_VAR 0 7
65710: PPUSH
65711: CALL_OW 488
65715: PUSH
65716: LD_VAR 0 5
65720: PPUSH
65721: LD_VAR 0 7
65725: PPUSH
65726: CALL_OW 428
65730: PPUSH
65731: CALL_OW 247
65735: PUSH
65736: LD_INT 3
65738: PUSH
65739: LD_INT 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: IN
65746: NOT
65747: AND
65748: IFFALSE 65792
// begin ComMoveXY ( unit , _x , _y ) ;
65750: LD_VAR 0 1
65754: PPUSH
65755: LD_VAR 0 5
65759: PPUSH
65760: LD_VAR 0 7
65764: PPUSH
65765: CALL_OW 111
// result := [ _x , _y ] ;
65769: LD_ADDR_VAR 0 3
65773: PUSH
65774: LD_VAR 0 5
65778: PUSH
65779: LD_VAR 0 7
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: ST_TO_ADDR
// exit ;
65788: POP
65789: POP
65790: GO 65796
// end ; end ;
65792: GO 65636
65794: POP
65795: POP
// end ;
65796: LD_VAR 0 3
65800: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65801: LD_INT 0
65803: PPUSH
65804: PPUSH
65805: PPUSH
// result := 0 ;
65806: LD_ADDR_VAR 0 3
65810: PUSH
65811: LD_INT 0
65813: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65814: LD_VAR 0 1
65818: PUSH
65819: LD_INT 0
65821: LESS
65822: PUSH
65823: LD_VAR 0 1
65827: PUSH
65828: LD_INT 8
65830: GREATER
65831: OR
65832: PUSH
65833: LD_VAR 0 2
65837: PUSH
65838: LD_INT 0
65840: LESS
65841: OR
65842: PUSH
65843: LD_VAR 0 2
65847: PUSH
65848: LD_INT 8
65850: GREATER
65851: OR
65852: IFFALSE 65856
// exit ;
65854: GO 65931
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65856: LD_ADDR_VAR 0 4
65860: PUSH
65861: LD_INT 22
65863: PUSH
65864: LD_VAR 0 2
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PPUSH
65873: CALL_OW 69
65877: PUSH
65878: FOR_IN
65879: IFFALSE 65929
// begin un := UnitShoot ( i ) ;
65881: LD_ADDR_VAR 0 5
65885: PUSH
65886: LD_VAR 0 4
65890: PPUSH
65891: CALL_OW 504
65895: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65896: LD_VAR 0 5
65900: PPUSH
65901: CALL_OW 255
65905: PUSH
65906: LD_VAR 0 1
65910: EQUAL
65911: IFFALSE 65927
// begin result := un ;
65913: LD_ADDR_VAR 0 3
65917: PUSH
65918: LD_VAR 0 5
65922: ST_TO_ADDR
// exit ;
65923: POP
65924: POP
65925: GO 65931
// end ; end ;
65927: GO 65878
65929: POP
65930: POP
// end ;
65931: LD_VAR 0 3
65935: RET
// export function GetCargoBay ( units ) ; begin
65936: LD_INT 0
65938: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65939: LD_ADDR_VAR 0 2
65943: PUSH
65944: LD_VAR 0 1
65948: PPUSH
65949: LD_INT 2
65951: PUSH
65952: LD_INT 34
65954: PUSH
65955: LD_INT 12
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 34
65964: PUSH
65965: LD_INT 51
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 34
65974: PUSH
65975: LD_INT 32
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 34
65984: PUSH
65985: LD_EXP 97
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: PPUSH
66001: CALL_OW 72
66005: ST_TO_ADDR
// end ;
66006: LD_VAR 0 2
66010: RET
// export function Negate ( value ) ; begin
66011: LD_INT 0
66013: PPUSH
// result := not value ;
66014: LD_ADDR_VAR 0 2
66018: PUSH
66019: LD_VAR 0 1
66023: NOT
66024: ST_TO_ADDR
// end ;
66025: LD_VAR 0 2
66029: RET
// export function Inc ( value ) ; begin
66030: LD_INT 0
66032: PPUSH
// result := value + 1 ;
66033: LD_ADDR_VAR 0 2
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: LD_INT 1
66045: PLUS
66046: ST_TO_ADDR
// end ;
66047: LD_VAR 0 2
66051: RET
// export function Dec ( value ) ; begin
66052: LD_INT 0
66054: PPUSH
// result := value - 1 ;
66055: LD_ADDR_VAR 0 2
66059: PUSH
66060: LD_VAR 0 1
66064: PUSH
66065: LD_INT 1
66067: MINUS
66068: ST_TO_ADDR
// end ;
66069: LD_VAR 0 2
66073: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66074: LD_INT 0
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66084: LD_VAR 0 1
66088: PPUSH
66089: LD_VAR 0 2
66093: PPUSH
66094: CALL_OW 488
66098: NOT
66099: PUSH
66100: LD_VAR 0 3
66104: PPUSH
66105: LD_VAR 0 4
66109: PPUSH
66110: CALL_OW 488
66114: NOT
66115: OR
66116: IFFALSE 66129
// begin result := - 1 ;
66118: LD_ADDR_VAR 0 5
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: ST_TO_ADDR
// exit ;
66127: GO 66364
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66129: LD_ADDR_VAR 0 12
66133: PUSH
66134: LD_VAR 0 1
66138: PPUSH
66139: LD_VAR 0 2
66143: PPUSH
66144: LD_VAR 0 3
66148: PPUSH
66149: LD_VAR 0 4
66153: PPUSH
66154: CALL 65212 0 4
66158: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66159: LD_ADDR_VAR 0 11
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: LD_VAR 0 2
66173: PPUSH
66174: LD_VAR 0 12
66178: PUSH
66179: LD_INT 1
66181: ARRAY
66182: PPUSH
66183: LD_VAR 0 12
66187: PUSH
66188: LD_INT 2
66190: ARRAY
66191: PPUSH
66192: CALL_OW 298
66196: ST_TO_ADDR
// distance := 9999 ;
66197: LD_ADDR_VAR 0 10
66201: PUSH
66202: LD_INT 9999
66204: ST_TO_ADDR
// for i := 0 to 5 do
66205: LD_ADDR_VAR 0 6
66209: PUSH
66210: DOUBLE
66211: LD_INT 0
66213: DEC
66214: ST_TO_ADDR
66215: LD_INT 5
66217: PUSH
66218: FOR_TO
66219: IFFALSE 66362
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66221: LD_ADDR_VAR 0 7
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: LD_VAR 0 6
66235: PPUSH
66236: LD_VAR 0 11
66240: PPUSH
66241: CALL_OW 272
66245: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66246: LD_ADDR_VAR 0 8
66250: PUSH
66251: LD_VAR 0 2
66255: PPUSH
66256: LD_VAR 0 6
66260: PPUSH
66261: LD_VAR 0 11
66265: PPUSH
66266: CALL_OW 273
66270: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66271: LD_VAR 0 7
66275: PPUSH
66276: LD_VAR 0 8
66280: PPUSH
66281: CALL_OW 488
66285: NOT
66286: IFFALSE 66290
// continue ;
66288: GO 66218
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66290: LD_ADDR_VAR 0 9
66294: PUSH
66295: LD_VAR 0 12
66299: PUSH
66300: LD_INT 1
66302: ARRAY
66303: PPUSH
66304: LD_VAR 0 12
66308: PUSH
66309: LD_INT 2
66311: ARRAY
66312: PPUSH
66313: LD_VAR 0 7
66317: PPUSH
66318: LD_VAR 0 8
66322: PPUSH
66323: CALL_OW 298
66327: ST_TO_ADDR
// if tmp < distance then
66328: LD_VAR 0 9
66332: PUSH
66333: LD_VAR 0 10
66337: LESS
66338: IFFALSE 66360
// begin result := i ;
66340: LD_ADDR_VAR 0 5
66344: PUSH
66345: LD_VAR 0 6
66349: ST_TO_ADDR
// distance := tmp ;
66350: LD_ADDR_VAR 0 10
66354: PUSH
66355: LD_VAR 0 9
66359: ST_TO_ADDR
// end ; end ;
66360: GO 66218
66362: POP
66363: POP
// end ;
66364: LD_VAR 0 5
66368: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66369: LD_INT 0
66371: PPUSH
66372: PPUSH
// if not driver or not IsInUnit ( driver ) then
66373: LD_VAR 0 1
66377: NOT
66378: PUSH
66379: LD_VAR 0 1
66383: PPUSH
66384: CALL_OW 310
66388: NOT
66389: OR
66390: IFFALSE 66394
// exit ;
66392: GO 66484
// vehicle := IsInUnit ( driver ) ;
66394: LD_ADDR_VAR 0 3
66398: PUSH
66399: LD_VAR 0 1
66403: PPUSH
66404: CALL_OW 310
66408: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66409: LD_VAR 0 1
66413: PPUSH
66414: LD_STRING \
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: PUSH
66444: LD_STRING E
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: LD_VAR 0 3
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PPUSH
66480: CALL_OW 446
// end ;
66484: LD_VAR 0 2
66488: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66489: LD_INT 0
66491: PPUSH
66492: PPUSH
// if not driver or not IsInUnit ( driver ) then
66493: LD_VAR 0 1
66497: NOT
66498: PUSH
66499: LD_VAR 0 1
66503: PPUSH
66504: CALL_OW 310
66508: NOT
66509: OR
66510: IFFALSE 66514
// exit ;
66512: GO 66604
// vehicle := IsInUnit ( driver ) ;
66514: LD_ADDR_VAR 0 3
66518: PUSH
66519: LD_VAR 0 1
66523: PPUSH
66524: CALL_OW 310
66528: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66529: LD_VAR 0 1
66533: PPUSH
66534: LD_STRING \
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: PUSH
66564: LD_STRING E
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_VAR 0 3
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PPUSH
66600: CALL_OW 447
// end ;
66604: LD_VAR 0 2
66608: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66609: LD_INT 0
66611: PPUSH
66612: PPUSH
66613: PPUSH
// tmp := [ ] ;
66614: LD_ADDR_VAR 0 5
66618: PUSH
66619: EMPTY
66620: ST_TO_ADDR
// for i in units do
66621: LD_ADDR_VAR 0 4
66625: PUSH
66626: LD_VAR 0 1
66630: PUSH
66631: FOR_IN
66632: IFFALSE 66670
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66634: LD_ADDR_VAR 0 5
66638: PUSH
66639: LD_VAR 0 5
66643: PPUSH
66644: LD_VAR 0 5
66648: PUSH
66649: LD_INT 1
66651: PLUS
66652: PPUSH
66653: LD_VAR 0 4
66657: PPUSH
66658: CALL_OW 256
66662: PPUSH
66663: CALL_OW 2
66667: ST_TO_ADDR
66668: GO 66631
66670: POP
66671: POP
// if not tmp then
66672: LD_VAR 0 5
66676: NOT
66677: IFFALSE 66681
// exit ;
66679: GO 66729
// if asc then
66681: LD_VAR 0 2
66685: IFFALSE 66709
// result := SortListByListAsc ( units , tmp ) else
66687: LD_ADDR_VAR 0 3
66691: PUSH
66692: LD_VAR 0 1
66696: PPUSH
66697: LD_VAR 0 5
66701: PPUSH
66702: CALL_OW 76
66706: ST_TO_ADDR
66707: GO 66729
// result := SortListByListDesc ( units , tmp ) ;
66709: LD_ADDR_VAR 0 3
66713: PUSH
66714: LD_VAR 0 1
66718: PPUSH
66719: LD_VAR 0 5
66723: PPUSH
66724: CALL_OW 77
66728: ST_TO_ADDR
// end ;
66729: LD_VAR 0 3
66733: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66734: LD_INT 0
66736: PPUSH
66737: PPUSH
// task := GetTaskList ( mech ) ;
66738: LD_ADDR_VAR 0 4
66742: PUSH
66743: LD_VAR 0 1
66747: PPUSH
66748: CALL_OW 437
66752: ST_TO_ADDR
// if not task then
66753: LD_VAR 0 4
66757: NOT
66758: IFFALSE 66762
// exit ;
66760: GO 66804
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66762: LD_ADDR_VAR 0 3
66766: PUSH
66767: LD_VAR 0 4
66771: PUSH
66772: LD_INT 1
66774: ARRAY
66775: PUSH
66776: LD_INT 1
66778: ARRAY
66779: PUSH
66780: LD_STRING r
66782: EQUAL
66783: PUSH
66784: LD_VAR 0 4
66788: PUSH
66789: LD_INT 1
66791: ARRAY
66792: PUSH
66793: LD_INT 4
66795: ARRAY
66796: PUSH
66797: LD_VAR 0 2
66801: EQUAL
66802: AND
66803: ST_TO_ADDR
// end ;
66804: LD_VAR 0 3
66808: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66809: LD_INT 0
66811: PPUSH
// SetDir ( unit , d ) ;
66812: LD_VAR 0 1
66816: PPUSH
66817: LD_VAR 0 4
66821: PPUSH
66822: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66826: LD_VAR 0 1
66830: PPUSH
66831: LD_VAR 0 2
66835: PPUSH
66836: LD_VAR 0 3
66840: PPUSH
66841: LD_VAR 0 5
66845: PPUSH
66846: CALL_OW 48
// end ;
66850: LD_VAR 0 6
66854: RET
// export function ToNaturalNumber ( number ) ; begin
66855: LD_INT 0
66857: PPUSH
// result := number div 1 ;
66858: LD_ADDR_VAR 0 2
66862: PUSH
66863: LD_VAR 0 1
66867: PUSH
66868: LD_INT 1
66870: DIV
66871: ST_TO_ADDR
// if number < 0 then
66872: LD_VAR 0 1
66876: PUSH
66877: LD_INT 0
66879: LESS
66880: IFFALSE 66890
// result := 0 ;
66882: LD_ADDR_VAR 0 2
66886: PUSH
66887: LD_INT 0
66889: ST_TO_ADDR
// end ;
66890: LD_VAR 0 2
66894: RET
// export function SortByClass ( units , class ) ; var un ; begin
66895: LD_INT 0
66897: PPUSH
66898: PPUSH
// if not units or not class then
66899: LD_VAR 0 1
66903: NOT
66904: PUSH
66905: LD_VAR 0 2
66909: NOT
66910: OR
66911: IFFALSE 66915
// exit ;
66913: GO 67010
// result := [ ] ;
66915: LD_ADDR_VAR 0 3
66919: PUSH
66920: EMPTY
66921: ST_TO_ADDR
// for un in units do
66922: LD_ADDR_VAR 0 4
66926: PUSH
66927: LD_VAR 0 1
66931: PUSH
66932: FOR_IN
66933: IFFALSE 67008
// if GetClass ( un ) = class then
66935: LD_VAR 0 4
66939: PPUSH
66940: CALL_OW 257
66944: PUSH
66945: LD_VAR 0 2
66949: EQUAL
66950: IFFALSE 66977
// result := Insert ( result , 1 , un ) else
66952: LD_ADDR_VAR 0 3
66956: PUSH
66957: LD_VAR 0 3
66961: PPUSH
66962: LD_INT 1
66964: PPUSH
66965: LD_VAR 0 4
66969: PPUSH
66970: CALL_OW 2
66974: ST_TO_ADDR
66975: GO 67006
// result := Replace ( result , result + 1 , un ) ;
66977: LD_ADDR_VAR 0 3
66981: PUSH
66982: LD_VAR 0 3
66986: PPUSH
66987: LD_VAR 0 3
66991: PUSH
66992: LD_INT 1
66994: PLUS
66995: PPUSH
66996: LD_VAR 0 4
67000: PPUSH
67001: CALL_OW 1
67005: ST_TO_ADDR
67006: GO 66932
67008: POP
67009: POP
// end ;
67010: LD_VAR 0 3
67014: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67015: LD_INT 0
67017: PPUSH
67018: PPUSH
67019: PPUSH
67020: PPUSH
67021: PPUSH
67022: PPUSH
67023: PPUSH
// result := [ ] ;
67024: LD_ADDR_VAR 0 4
67028: PUSH
67029: EMPTY
67030: ST_TO_ADDR
// if x - r < 0 then
67031: LD_VAR 0 1
67035: PUSH
67036: LD_VAR 0 3
67040: MINUS
67041: PUSH
67042: LD_INT 0
67044: LESS
67045: IFFALSE 67057
// min_x := 0 else
67047: LD_ADDR_VAR 0 8
67051: PUSH
67052: LD_INT 0
67054: ST_TO_ADDR
67055: GO 67073
// min_x := x - r ;
67057: LD_ADDR_VAR 0 8
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_VAR 0 3
67071: MINUS
67072: ST_TO_ADDR
// if y - r < 0 then
67073: LD_VAR 0 2
67077: PUSH
67078: LD_VAR 0 3
67082: MINUS
67083: PUSH
67084: LD_INT 0
67086: LESS
67087: IFFALSE 67099
// min_y := 0 else
67089: LD_ADDR_VAR 0 7
67093: PUSH
67094: LD_INT 0
67096: ST_TO_ADDR
67097: GO 67115
// min_y := y - r ;
67099: LD_ADDR_VAR 0 7
67103: PUSH
67104: LD_VAR 0 2
67108: PUSH
67109: LD_VAR 0 3
67113: MINUS
67114: ST_TO_ADDR
// max_x := x + r ;
67115: LD_ADDR_VAR 0 9
67119: PUSH
67120: LD_VAR 0 1
67124: PUSH
67125: LD_VAR 0 3
67129: PLUS
67130: ST_TO_ADDR
// max_y := y + r ;
67131: LD_ADDR_VAR 0 10
67135: PUSH
67136: LD_VAR 0 2
67140: PUSH
67141: LD_VAR 0 3
67145: PLUS
67146: ST_TO_ADDR
// for _x = min_x to max_x do
67147: LD_ADDR_VAR 0 5
67151: PUSH
67152: DOUBLE
67153: LD_VAR 0 8
67157: DEC
67158: ST_TO_ADDR
67159: LD_VAR 0 9
67163: PUSH
67164: FOR_TO
67165: IFFALSE 67266
// for _y = min_y to max_y do
67167: LD_ADDR_VAR 0 6
67171: PUSH
67172: DOUBLE
67173: LD_VAR 0 7
67177: DEC
67178: ST_TO_ADDR
67179: LD_VAR 0 10
67183: PUSH
67184: FOR_TO
67185: IFFALSE 67262
// begin if not ValidHex ( _x , _y ) then
67187: LD_VAR 0 5
67191: PPUSH
67192: LD_VAR 0 6
67196: PPUSH
67197: CALL_OW 488
67201: NOT
67202: IFFALSE 67206
// continue ;
67204: GO 67184
// if GetResourceTypeXY ( _x , _y ) then
67206: LD_VAR 0 5
67210: PPUSH
67211: LD_VAR 0 6
67215: PPUSH
67216: CALL_OW 283
67220: IFFALSE 67260
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67222: LD_ADDR_VAR 0 4
67226: PUSH
67227: LD_VAR 0 4
67231: PPUSH
67232: LD_VAR 0 4
67236: PUSH
67237: LD_INT 1
67239: PLUS
67240: PPUSH
67241: LD_VAR 0 5
67245: PUSH
67246: LD_VAR 0 6
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PPUSH
67255: CALL_OW 1
67259: ST_TO_ADDR
// end ;
67260: GO 67184
67262: POP
67263: POP
67264: GO 67164
67266: POP
67267: POP
// end ;
67268: LD_VAR 0 4
67272: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67273: LD_INT 0
67275: PPUSH
67276: PPUSH
67277: PPUSH
67278: PPUSH
67279: PPUSH
67280: PPUSH
67281: PPUSH
67282: PPUSH
// if not units then
67283: LD_VAR 0 1
67287: NOT
67288: IFFALSE 67292
// exit ;
67290: GO 67717
// result := UnitFilter ( units , [ f_ok ] ) ;
67292: LD_ADDR_VAR 0 3
67296: PUSH
67297: LD_VAR 0 1
67301: PPUSH
67302: LD_INT 50
67304: PUSH
67305: EMPTY
67306: LIST
67307: PPUSH
67308: CALL_OW 72
67312: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67313: LD_ADDR_VAR 0 8
67317: PUSH
67318: LD_VAR 0 1
67322: PUSH
67323: LD_INT 1
67325: ARRAY
67326: PPUSH
67327: CALL_OW 255
67331: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67332: LD_ADDR_VAR 0 10
67336: PUSH
67337: LD_INT 29
67339: PUSH
67340: LD_EXP 100
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: ST_TO_ADDR
// if not result then
67349: LD_VAR 0 3
67353: NOT
67354: IFFALSE 67358
// exit ;
67356: GO 67717
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67358: LD_ADDR_VAR 0 5
67362: PUSH
67363: LD_INT 81
67365: PUSH
67366: LD_VAR 0 8
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PPUSH
67375: CALL_OW 69
67379: ST_TO_ADDR
// for i in result do
67380: LD_ADDR_VAR 0 4
67384: PUSH
67385: LD_VAR 0 3
67389: PUSH
67390: FOR_IN
67391: IFFALSE 67715
// begin tag := GetTag ( i ) + 1 ;
67393: LD_ADDR_VAR 0 9
67397: PUSH
67398: LD_VAR 0 4
67402: PPUSH
67403: CALL_OW 110
67407: PUSH
67408: LD_INT 1
67410: PLUS
67411: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67412: LD_ADDR_VAR 0 7
67416: PUSH
67417: LD_VAR 0 4
67421: PPUSH
67422: CALL_OW 250
67426: PPUSH
67427: LD_VAR 0 4
67431: PPUSH
67432: CALL_OW 251
67436: PPUSH
67437: LD_INT 6
67439: PPUSH
67440: CALL 67015 0 3
67444: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67445: LD_VAR 0 7
67449: PUSH
67450: LD_VAR 0 4
67454: PPUSH
67455: CALL_OW 264
67459: PUSH
67460: LD_VAR 0 10
67464: IN
67465: NOT
67466: AND
67467: IFFALSE 67506
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67469: LD_VAR 0 4
67473: PPUSH
67474: LD_VAR 0 7
67478: PUSH
67479: LD_INT 1
67481: ARRAY
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: PPUSH
67487: LD_VAR 0 7
67491: PUSH
67492: LD_INT 1
67494: ARRAY
67495: PUSH
67496: LD_INT 2
67498: ARRAY
67499: PPUSH
67500: CALL_OW 116
67504: GO 67713
// if path > tag then
67506: LD_VAR 0 2
67510: PUSH
67511: LD_VAR 0 9
67515: GREATER
67516: IFFALSE 67683
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
67518: LD_ADDR_VAR 0 6
67522: PUSH
67523: LD_VAR 0 5
67527: PPUSH
67528: LD_INT 91
67530: PUSH
67531: LD_VAR 0 4
67535: PUSH
67536: LD_INT 12
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: LIST
67543: PPUSH
67544: CALL_OW 72
67548: ST_TO_ADDR
// if nearEnemy then
67549: LD_VAR 0 6
67553: IFFALSE 67581
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67555: LD_VAR 0 4
67559: PPUSH
67560: LD_VAR 0 6
67564: PPUSH
67565: LD_VAR 0 4
67569: PPUSH
67570: CALL_OW 74
67574: PPUSH
67575: CALL_OW 115
67579: GO 67681
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67581: LD_VAR 0 4
67585: PPUSH
67586: LD_VAR 0 2
67590: PUSH
67591: LD_VAR 0 9
67595: ARRAY
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: PPUSH
67601: LD_VAR 0 2
67605: PUSH
67606: LD_VAR 0 9
67610: ARRAY
67611: PUSH
67612: LD_INT 2
67614: ARRAY
67615: PPUSH
67616: CALL_OW 297
67620: PUSH
67621: LD_INT 6
67623: GREATER
67624: IFFALSE 67667
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67626: LD_VAR 0 4
67630: PPUSH
67631: LD_VAR 0 2
67635: PUSH
67636: LD_VAR 0 9
67640: ARRAY
67641: PUSH
67642: LD_INT 1
67644: ARRAY
67645: PPUSH
67646: LD_VAR 0 2
67650: PUSH
67651: LD_VAR 0 9
67655: ARRAY
67656: PUSH
67657: LD_INT 2
67659: ARRAY
67660: PPUSH
67661: CALL_OW 114
67665: GO 67681
// SetTag ( i , tag ) ;
67667: LD_VAR 0 4
67671: PPUSH
67672: LD_VAR 0 9
67676: PPUSH
67677: CALL_OW 109
// end else
67681: GO 67713
// if enemy then
67683: LD_VAR 0 5
67687: IFFALSE 67713
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67689: LD_VAR 0 4
67693: PPUSH
67694: LD_VAR 0 5
67698: PPUSH
67699: LD_VAR 0 4
67703: PPUSH
67704: CALL_OW 74
67708: PPUSH
67709: CALL_OW 115
// end ;
67713: GO 67390
67715: POP
67716: POP
// end ;
67717: LD_VAR 0 3
67721: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67722: LD_INT 0
67724: PPUSH
67725: PPUSH
67726: PPUSH
// if not unit or IsInUnit ( unit ) then
67727: LD_VAR 0 1
67731: NOT
67732: PUSH
67733: LD_VAR 0 1
67737: PPUSH
67738: CALL_OW 310
67742: OR
67743: IFFALSE 67747
// exit ;
67745: GO 67838
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67747: LD_ADDR_VAR 0 4
67751: PUSH
67752: LD_VAR 0 1
67756: PPUSH
67757: CALL_OW 250
67761: PPUSH
67762: LD_VAR 0 2
67766: PPUSH
67767: LD_INT 1
67769: PPUSH
67770: CALL_OW 272
67774: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67775: LD_ADDR_VAR 0 5
67779: PUSH
67780: LD_VAR 0 1
67784: PPUSH
67785: CALL_OW 251
67789: PPUSH
67790: LD_VAR 0 2
67794: PPUSH
67795: LD_INT 1
67797: PPUSH
67798: CALL_OW 273
67802: ST_TO_ADDR
// if ValidHex ( x , y ) then
67803: LD_VAR 0 4
67807: PPUSH
67808: LD_VAR 0 5
67812: PPUSH
67813: CALL_OW 488
67817: IFFALSE 67838
// ComTurnXY ( unit , x , y ) ;
67819: LD_VAR 0 1
67823: PPUSH
67824: LD_VAR 0 4
67828: PPUSH
67829: LD_VAR 0 5
67833: PPUSH
67834: CALL_OW 118
// end ;
67838: LD_VAR 0 3
67842: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67843: LD_INT 0
67845: PPUSH
67846: PPUSH
// result := false ;
67847: LD_ADDR_VAR 0 3
67851: PUSH
67852: LD_INT 0
67854: ST_TO_ADDR
// if not units then
67855: LD_VAR 0 2
67859: NOT
67860: IFFALSE 67864
// exit ;
67862: GO 67909
// for i in units do
67864: LD_ADDR_VAR 0 4
67868: PUSH
67869: LD_VAR 0 2
67873: PUSH
67874: FOR_IN
67875: IFFALSE 67907
// if See ( side , i ) then
67877: LD_VAR 0 1
67881: PPUSH
67882: LD_VAR 0 4
67886: PPUSH
67887: CALL_OW 292
67891: IFFALSE 67905
// begin result := true ;
67893: LD_ADDR_VAR 0 3
67897: PUSH
67898: LD_INT 1
67900: ST_TO_ADDR
// exit ;
67901: POP
67902: POP
67903: GO 67909
// end ;
67905: GO 67874
67907: POP
67908: POP
// end ;
67909: LD_VAR 0 3
67913: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67914: LD_INT 0
67916: PPUSH
67917: PPUSH
67918: PPUSH
67919: PPUSH
// if not unit or not points then
67920: LD_VAR 0 1
67924: NOT
67925: PUSH
67926: LD_VAR 0 2
67930: NOT
67931: OR
67932: IFFALSE 67936
// exit ;
67934: GO 68026
// dist := 99999 ;
67936: LD_ADDR_VAR 0 5
67940: PUSH
67941: LD_INT 99999
67943: ST_TO_ADDR
// for i in points do
67944: LD_ADDR_VAR 0 4
67948: PUSH
67949: LD_VAR 0 2
67953: PUSH
67954: FOR_IN
67955: IFFALSE 68024
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67957: LD_ADDR_VAR 0 6
67961: PUSH
67962: LD_VAR 0 1
67966: PPUSH
67967: LD_VAR 0 4
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: PPUSH
67976: LD_VAR 0 4
67980: PUSH
67981: LD_INT 2
67983: ARRAY
67984: PPUSH
67985: CALL_OW 297
67989: ST_TO_ADDR
// if tmpDist < dist then
67990: LD_VAR 0 6
67994: PUSH
67995: LD_VAR 0 5
67999: LESS
68000: IFFALSE 68022
// begin result := i ;
68002: LD_ADDR_VAR 0 3
68006: PUSH
68007: LD_VAR 0 4
68011: ST_TO_ADDR
// dist := tmpDist ;
68012: LD_ADDR_VAR 0 5
68016: PUSH
68017: LD_VAR 0 6
68021: ST_TO_ADDR
// end ; end ;
68022: GO 67954
68024: POP
68025: POP
// end ; end_of_file
68026: LD_VAR 0 3
68030: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68031: LD_VAR 0 1
68035: PUSH
68036: LD_INT 200
68038: DOUBLE
68039: GREATEREQUAL
68040: IFFALSE 68048
68042: LD_INT 299
68044: DOUBLE
68045: LESSEQUAL
68046: IFTRUE 68050
68048: GO 68082
68050: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68051: LD_VAR 0 1
68055: PPUSH
68056: LD_VAR 0 2
68060: PPUSH
68061: LD_VAR 0 3
68065: PPUSH
68066: LD_VAR 0 4
68070: PPUSH
68071: LD_VAR 0 5
68075: PPUSH
68076: CALL 23889 0 5
68080: GO 68159
68082: LD_INT 300
68084: DOUBLE
68085: GREATEREQUAL
68086: IFFALSE 68094
68088: LD_INT 399
68090: DOUBLE
68091: LESSEQUAL
68092: IFTRUE 68096
68094: GO 68158
68096: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68097: LD_VAR 0 1
68101: PPUSH
68102: LD_VAR 0 2
68106: PPUSH
68107: LD_VAR 0 3
68111: PPUSH
68112: LD_VAR 0 4
68116: PPUSH
68117: LD_VAR 0 5
68121: PPUSH
68122: LD_VAR 0 6
68126: PPUSH
68127: LD_VAR 0 7
68131: PPUSH
68132: LD_VAR 0 8
68136: PPUSH
68137: LD_VAR 0 9
68141: PPUSH
68142: LD_VAR 0 10
68146: PPUSH
68147: LD_VAR 0 11
68151: PPUSH
68152: CALL 21787 0 11
68156: GO 68159
68158: POP
// end ;
68159: PPOPN 11
68161: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68162: LD_VAR 0 1
68166: PPUSH
68167: LD_VAR 0 2
68171: PPUSH
68172: LD_VAR 0 3
68176: PPUSH
68177: LD_VAR 0 4
68181: PPUSH
68182: LD_VAR 0 5
68186: PPUSH
68187: CALL 23881 0 5
// end ; end_of_file
68191: PPOPN 5
68193: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68194: LD_VAR 0 1
68198: PPUSH
68199: LD_VAR 0 2
68203: PPUSH
68204: LD_VAR 0 3
68208: PPUSH
68209: LD_VAR 0 4
68213: PPUSH
68214: LD_VAR 0 5
68218: PPUSH
68219: LD_VAR 0 6
68223: PPUSH
68224: CALL 9982 0 6
// end ;
68228: PPOPN 6
68230: END
