// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 191 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1364 0 0
// PrepareArabian ;
  50: CALL 934 0 0
// PrepareHeike ;
  54: CALL 869 0 0
// Action ;
  58: CALL 2626 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// end ;
 169: LD_VAR 0 1
 173: RET
// every 0 0$1 trigger debug do
 174: LD_EXP 2
 178: IFFALSE 190
 180: GO 182
 182: DISABLE
// FogOff ( 2 ) ; end_of_file
 183: LD_INT 2
 185: PPUSH
 186: CALL_OW 344
 190: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 0 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// uc_nation = 0 ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// InitHc ;
 212: CALL_OW 19
// InitVc ;
 216: CALL_OW 20
// if mastodonts then
 220: LD_VAR 0 6
 224: IFFALSE 291
// for i = 1 to mastodonts do
 226: LD_ADDR_VAR 0 11
 230: PUSH
 231: DOUBLE
 232: LD_INT 1
 234: DEC
 235: ST_TO_ADDR
 236: LD_VAR 0 6
 240: PUSH
 241: FOR_TO
 242: IFFALSE 289
// begin vc_chassis := 31 ;
 244: LD_ADDR_OWVAR 37
 248: PUSH
 249: LD_INT 31
 251: ST_TO_ADDR
// vc_control := control_rider ;
 252: LD_ADDR_OWVAR 38
 256: PUSH
 257: LD_INT 4
 259: ST_TO_ADDR
// animal := CreateVehicle ;
 260: LD_ADDR_VAR 0 12
 264: PUSH
 265: CALL_OW 45
 269: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 270: LD_VAR 0 12
 274: PPUSH
 275: LD_VAR 0 8
 279: PPUSH
 280: LD_INT 0
 282: PPUSH
 283: CALL_OW 49
// end ;
 287: GO 241
 289: POP
 290: POP
// if horses then
 291: LD_VAR 0 5
 295: IFFALSE 362
// for i = 1 to horses do
 297: LD_ADDR_VAR 0 11
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_VAR 0 5
 311: PUSH
 312: FOR_TO
 313: IFFALSE 360
// begin hc_class := 21 ;
 315: LD_ADDR_OWVAR 28
 319: PUSH
 320: LD_INT 21
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// animal := CreateHuman ;
 331: LD_ADDR_VAR 0 12
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 341: LD_VAR 0 12
 345: PPUSH
 346: LD_VAR 0 8
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 312
 360: POP
 361: POP
// if birds then
 362: LD_VAR 0 1
 366: IFFALSE 433
// for i = 1 to birds do
 368: LD_ADDR_VAR 0 11
 372: PUSH
 373: DOUBLE
 374: LD_INT 1
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 1
 382: PUSH
 383: FOR_TO
 384: IFFALSE 431
// begin hc_class = 18 ;
 386: LD_ADDR_OWVAR 28
 390: PUSH
 391: LD_INT 18
 393: ST_TO_ADDR
// hc_gallery =  ;
 394: LD_ADDR_OWVAR 33
 398: PUSH
 399: LD_STRING 
 401: ST_TO_ADDR
// animal := CreateHuman ;
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 412: LD_VAR 0 12
 416: PPUSH
 417: LD_VAR 0 8
 421: PPUSH
 422: LD_INT 0
 424: PPUSH
 425: CALL_OW 49
// end ;
 429: GO 383
 431: POP
 432: POP
// if tigers then
 433: LD_VAR 0 2
 437: IFFALSE 521
// for i = 1 to tigers do
 439: LD_ADDR_VAR 0 11
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_VAR 0 2
 453: PUSH
 454: FOR_TO
 455: IFFALSE 519
// begin hc_class = class_tiger ;
 457: LD_ADDR_OWVAR 28
 461: PUSH
 462: LD_INT 14
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 473: LD_ADDR_OWVAR 35
 477: PUSH
 478: LD_INT 7
 480: NEG
 481: PPUSH
 482: LD_INT 7
 484: PPUSH
 485: CALL_OW 12
 489: ST_TO_ADDR
// animal := CreateHuman ;
 490: LD_ADDR_VAR 0 12
 494: PUSH
 495: CALL_OW 44
 499: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 500: LD_VAR 0 12
 504: PPUSH
 505: LD_VAR 0 8
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 454
 519: POP
 520: POP
// if apemans then
 521: LD_VAR 0 3
 525: IFFALSE 648
// for i = 1 to apemans do
 527: LD_ADDR_VAR 0 11
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 3
 541: PUSH
 542: FOR_TO
 543: IFFALSE 646
// begin hc_class = class_apeman ;
 545: LD_ADDR_OWVAR 28
 549: PUSH
 550: LD_INT 12
 552: ST_TO_ADDR
// hc_gallery =  ;
 553: LD_ADDR_OWVAR 33
 557: PUSH
 558: LD_STRING 
 560: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 578: LD_ADDR_OWVAR 31
 582: PUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 12
 593: PUSH
 594: LD_INT 1
 596: PPUSH
 597: LD_INT 3
 599: PPUSH
 600: CALL_OW 12
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// animal := CreateHuman ;
 617: LD_ADDR_VAR 0 12
 621: PUSH
 622: CALL_OW 44
 626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 627: LD_VAR 0 12
 631: PPUSH
 632: LD_VAR 0 8
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 542
 646: POP
 647: POP
// if enchidnas then
 648: LD_VAR 0 4
 652: IFFALSE 719
// for i = 1 to enchidnas do
 654: LD_ADDR_VAR 0 11
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_VAR 0 4
 668: PUSH
 669: FOR_TO
 670: IFFALSE 717
// begin hc_class = 13 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 13
 679: ST_TO_ADDR
// hc_gallery =  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// animal := CreateHuman ;
 688: LD_ADDR_VAR 0 12
 692: PUSH
 693: CALL_OW 44
 697: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 698: LD_VAR 0 12
 702: PPUSH
 703: LD_VAR 0 8
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// end ;
 715: GO 669
 717: POP
 718: POP
// if fishes then
 719: LD_VAR 0 7
 723: IFFALSE 790
// for i = 1 to fishes do
 725: LD_ADDR_VAR 0 11
 729: PUSH
 730: DOUBLE
 731: LD_INT 1
 733: DEC
 734: ST_TO_ADDR
 735: LD_VAR 0 7
 739: PUSH
 740: FOR_TO
 741: IFFALSE 788
// begin hc_class = 20 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 20
 750: ST_TO_ADDR
// hc_gallery =  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// animal := CreateHuman ;
 759: LD_ADDR_VAR 0 12
 763: PUSH
 764: CALL_OW 44
 768: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 769: LD_VAR 0 12
 773: PPUSH
 774: LD_VAR 0 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// end ;
 786: GO 740
 788: POP
 789: POP
// end ;
 790: LD_VAR 0 10
 794: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
 799: PPUSH
// if not observer or not unit then
 800: LD_VAR 0 1
 804: NOT
 805: PUSH
 806: LD_VAR 0 2
 810: NOT
 811: OR
 812: IFFALSE 816
// exit ;
 814: GO 864
// if not See ( GetSide ( observer ) , unit ) then
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 255
 825: PPUSH
 826: LD_VAR 0 2
 830: PPUSH
 831: CALL_OW 292
 835: NOT
 836: IFFALSE 840
// exit ;
 838: GO 864
// result := GetDistUnits ( observer , unit ) < 12 ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: CALL_OW 296
 859: PUSH
 860: LD_INT 12
 862: LESS
 863: ST_TO_ADDR
// end ; end_of_file
 864: LD_VAR 0 3
 868: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 869: LD_INT 0
 871: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 872: LD_INT 66
 874: PPUSH
 875: LD_INT 26
 877: PPUSH
 878: CALL_OW 86
// uc_side := 2 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 2
 889: ST_TO_ADDR
// uc_nation := 2 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 2
 897: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 898: LD_ADDR_EXP 14
 902: PUSH
 903: LD_STRING Heike
 905: PPUSH
 906: CALL_OW 25
 910: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 911: LD_EXP 14
 915: PPUSH
 916: LD_INT 66
 918: PPUSH
 919: LD_INT 26
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL_OW 48
// end ;
 929: LD_VAR 0 1
 933: RET
// export function PrepareArabian ; begin
 934: LD_INT 0
 936: PPUSH
// uc_side := 5 ;
 937: LD_ADDR_OWVAR 20
 941: PUSH
 942: LD_INT 5
 944: ST_TO_ADDR
// uc_nation := 2 ;
 945: LD_ADDR_OWVAR 21
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 953: LD_ADDR_EXP 15
 957: PUSH
 958: LD_STRING Olaf
 960: PPUSH
 961: CALL_OW 25
 965: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 966: LD_EXP 15
 970: PPUSH
 971: LD_INT 39
 973: PPUSH
 974: LD_INT 52
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
 984: LD_ADDR_EXP 16
 988: PUSH
 989: LD_STRING Givi
 991: PPUSH
 992: CALL_OW 25
 996: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 997: LD_EXP 16
1001: PPUSH
1002: LD_INT 55
1004: PPUSH
1005: LD_INT 90
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1015: LD_EXP 16
1019: PPUSH
1020: LD_INT 53
1022: PPUSH
1023: LD_INT 89
1025: PPUSH
1026: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1030: LD_ADDR_EXP 17
1034: PUSH
1035: LD_STRING Mike
1037: PPUSH
1038: CALL_OW 25
1042: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1043: LD_EXP 17
1047: PPUSH
1048: LD_INT 53
1050: PPUSH
1051: LD_INT 87
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1061: LD_EXP 17
1065: PPUSH
1066: LD_INT 53
1068: PPUSH
1069: LD_INT 89
1071: PPUSH
1072: CALL_OW 118
// end ;
1076: LD_VAR 0 1
1080: RET
// export function PreparePrison ; begin
1081: LD_INT 0
1083: PPUSH
// uc_side := 5 ;
1084: LD_ADDR_OWVAR 20
1088: PUSH
1089: LD_INT 5
1091: ST_TO_ADDR
// uc_nation := 2 ;
1092: LD_ADDR_OWVAR 21
1096: PUSH
1097: LD_INT 2
1099: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1100: LD_ADDR_EXP 18
1104: PUSH
1105: LD_STRING Kamil
1107: PPUSH
1108: CALL_OW 25
1112: ST_TO_ADDR
// if Difficulty > 1 then
1113: LD_OWVAR 67
1117: PUSH
1118: LD_INT 1
1120: GREATER
1121: IFFALSE 1137
// PlaceHumanInUnit ( Kamil , northDep ) else
1123: LD_EXP 18
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: CALL_OW 52
1135: GO 1149
// PlaceHumanInUnit ( Kamil , southDep ) ;
1137: LD_EXP 18
1141: PPUSH
1142: LD_INT 8
1144: PPUSH
1145: CALL_OW 52
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1165: LD_INT 0
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 380
// if Difficulty > 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: GREATER
1186: IFFALSE 1202
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1188: CALL_OW 44
1192: PPUSH
1193: LD_INT 8
1195: PPUSH
1196: CALL_OW 52
1200: GO 1214
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1202: CALL_OW 44
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: CALL_OW 52
// end ; end_of_file
1214: LD_VAR 0 1
1218: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
1223: PPUSH
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := 3 ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// russianPatrol := [ ] ;
1240: LD_ADDR_EXP 19
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for i = 1 to 3 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 3
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1357
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: CALL_OW 12
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1309: LD_ADDR_EXP 19
1313: PUSH
1314: LD_EXP 19
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1334: LD_VAR 0 3
1338: PPUSH
1339: LD_INT 26
1341: PPUSH
1342: LD_INT 22
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 50
// end ;
1355: GO 1260
1357: POP
1358: POP
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareRussian ; var i , un , xy ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
// uc_side := 3 ;
1370: LD_ADDR_OWVAR 20
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// uc_nation := 3 ;
1378: LD_ADDR_OWVAR 21
1382: PUSH
1383: LD_INT 3
1385: ST_TO_ADDR
// russianForces := [ ] ;
1386: LD_ADDR_EXP 21
1390: PUSH
1391: EMPTY
1392: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1393: LD_ADDR_EXP 20
1397: PUSH
1398: EMPTY
1399: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1400: LD_ADDR_VAR 0 4
1404: PUSH
1405: LD_INT 11
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 517
1415: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: LD_INT 21
1423: PUSH
1424: LD_INT 0
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 69
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1481
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 274
1448: PPUSH
1449: LD_INT 1
1451: PPUSH
1452: LD_INT 200
1454: PPUSH
1455: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: CALL_OW 274
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 10
1474: PPUSH
1475: CALL_OW 277
// end ;
1479: GO 1436
1481: POP
1482: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1483: LD_ADDR_VAR 0 2
1487: PUSH
1488: LD_INT 30
1490: PUSH
1491: LD_INT 31
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PPUSH
1498: CALL_OW 69
1502: PUSH
1503: FOR_IN
1504: IFFALSE 1578
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1506: LD_INT 0
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: LD_OWVAR 67
1516: PUSH
1517: LD_INT 1
1519: MINUS
1520: PPUSH
1521: CALL_OW 380
// un := CreateHuman ;
1525: LD_ADDR_VAR 0 3
1529: PUSH
1530: CALL_OW 44
1534: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1535: LD_VAR 0 3
1539: PPUSH
1540: LD_VAR 0 2
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: LD_INT 3
1552: MINUS
1553: PUSH
1554: LD_INT 6
1556: MOD
1557: PPUSH
1558: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1562: LD_VAR 0 3
1566: PPUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 52
// end ;
1576: GO 1503
1578: POP
1579: POP
// for i = 1 to 5 do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_INT 5
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1676
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1596: LD_INT 0
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_OWVAR 67
1606: PPUSH
1607: CALL_OW 380
// un := CreateHuman ;
1611: LD_ADDR_VAR 0 3
1615: PUSH
1616: CALL_OW 44
1620: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1621: LD_VAR 0 3
1625: PPUSH
1626: LD_INT 9
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: CALL_OW 49
// ComHold ( un ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1645: LD_ADDR_EXP 21
1649: PUSH
1650: LD_EXP 21
1654: PPUSH
1655: LD_EXP 21
1659: PUSH
1660: LD_INT 1
1662: PLUS
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: CALL_OW 1
1673: ST_TO_ADDR
// end ;
1674: GO 1593
1676: POP
1677: POP
// for i := 1 to Difficulty + 1 do
1678: LD_ADDR_VAR 0 2
1682: PUSH
1683: DOUBLE
1684: LD_INT 1
1686: DEC
1687: ST_TO_ADDR
1688: LD_OWVAR 67
1692: PUSH
1693: LD_INT 1
1695: PLUS
1696: PUSH
1697: FOR_TO
1698: IFFALSE 1798
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1700: LD_INT 0
1702: PPUSH
1703: LD_INT 1
1705: PPUSH
1706: LD_OWVAR 67
1710: PPUSH
1711: CALL_OW 380
// un := CreateHuman ;
1715: LD_ADDR_VAR 0 3
1719: PUSH
1720: CALL_OW 44
1724: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1725: LD_VAR 0 3
1729: PPUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 1
1737: ARRAY
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PUSH
1750: LD_INT 2
1752: ARRAY
1753: PUSH
1754: LD_VAR 0 2
1758: ARRAY
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1767: LD_ADDR_EXP 20
1771: PUSH
1772: LD_EXP 20
1776: PPUSH
1777: LD_EXP 20
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: PPUSH
1786: LD_VAR 0 3
1790: PPUSH
1791: CALL_OW 1
1795: ST_TO_ADDR
// end ;
1796: GO 1697
1798: POP
1799: POP
// vc_chassis := ru_medium_wheeled ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 21
1807: ST_TO_ADDR
// vc_engine := engine_combustion ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control := control_manual ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 42
1831: ST_TO_ADDR
// russianTank := CreateVehicle ;
1832: LD_ADDR_EXP 22
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1842: LD_EXP 22
1846: PPUSH
1847: LD_INT 121
1849: PPUSH
1850: LD_INT 25
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1860: LD_INT 0
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: LD_OWVAR 67
1870: PPUSH
1871: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1875: CALL_OW 44
1879: PPUSH
1880: LD_EXP 22
1884: PPUSH
1885: CALL_OW 52
// end ;
1889: LD_VAR 0 1
1893: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y ;
1894: LD_EXP 20
1898: IFFALSE 2105
1900: GO 1902
1902: DISABLE
1903: LD_INT 0
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
// begin enable ;
1910: ENABLE
// for i in russianForestPatrol do
1911: LD_ADDR_VAR 0 1
1915: PUSH
1916: LD_EXP 20
1920: PUSH
1921: FOR_IN
1922: IFFALSE 2103
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
1924: LD_VAR 0 1
1928: PPUSH
1929: LD_INT 53
1931: PPUSH
1932: LD_INT 89
1934: PPUSH
1935: CALL_OW 297
1939: PUSH
1940: LD_INT 30
1942: LESS
1943: IFFALSE 1962
// begin ComMoveXY ( i , 114 , 80 ) ;
1945: LD_VAR 0 1
1949: PPUSH
1950: LD_INT 114
1952: PPUSH
1953: LD_INT 80
1955: PPUSH
1956: CALL_OW 111
// continue ;
1960: GO 1921
// end ; if not HasTask ( i ) then
1962: LD_VAR 0 1
1966: PPUSH
1967: CALL_OW 314
1971: NOT
1972: IFFALSE 2101
// begin d := rand ( 0 , 5 ) ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_INT 0
1981: PPUSH
1982: LD_INT 5
1984: PPUSH
1985: CALL_OW 12
1989: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
1990: LD_ADDR_VAR 0 3
1994: PUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 12
2005: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: LD_VAR 0 1
2015: PPUSH
2016: CALL_OW 250
2020: PPUSH
2021: LD_VAR 0 2
2025: PPUSH
2026: LD_VAR 0 3
2030: PPUSH
2031: CALL_OW 272
2035: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2036: LD_ADDR_VAR 0 5
2040: PUSH
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 251
2050: PPUSH
2051: LD_VAR 0 2
2055: PPUSH
2056: LD_VAR 0 3
2060: PPUSH
2061: CALL_OW 273
2065: ST_TO_ADDR
// if ValidHex ( x , y ) then
2066: LD_VAR 0 4
2070: PPUSH
2071: LD_VAR 0 5
2075: PPUSH
2076: CALL_OW 488
2080: IFFALSE 2101
// ComAgressiveMove ( i , x , y ) ;
2082: LD_VAR 0 1
2086: PPUSH
2087: LD_VAR 0 4
2091: PPUSH
2092: LD_VAR 0 5
2096: PPUSH
2097: CALL_OW 114
// end ; end ;
2101: GO 1921
2103: POP
2104: POP
// end ;
2105: PPOPN 5
2107: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2108: LD_EXP 22
2112: PPUSH
2113: CALL_OW 302
2117: PUSH
2118: LD_EXP 22
2122: PPUSH
2123: CALL_OW 255
2127: PUSH
2128: LD_INT 3
2130: EQUAL
2131: AND
2132: IFFALSE 2399
2134: GO 2136
2136: DISABLE
// begin enable ;
2137: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2138: LD_EXP 22
2142: PPUSH
2143: LD_INT 124
2145: PPUSH
2146: LD_INT 25
2148: PPUSH
2149: CALL_OW 307
2153: IFFALSE 2167
// SetFuel ( russianTank , 100 ) ;
2155: LD_EXP 22
2159: PPUSH
2160: LD_INT 100
2162: PPUSH
2163: CALL_OW 240
// if HasTask ( russianTank ) then
2167: LD_EXP 22
2171: PPUSH
2172: CALL_OW 314
2176: IFFALSE 2180
// exit ;
2178: GO 2399
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2180: LD_EXP 22
2184: PPUSH
2185: LD_INT 121
2187: PPUSH
2188: LD_INT 25
2190: PPUSH
2191: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2195: LD_EXP 22
2199: PPUSH
2200: LD_INT 122
2202: PPUSH
2203: LD_INT 48
2205: PPUSH
2206: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2210: LD_EXP 22
2214: PPUSH
2215: LD_INT 70
2217: PPUSH
2218: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2222: LD_EXP 22
2226: PPUSH
2227: LD_INT 107
2229: PPUSH
2230: LD_INT 57
2232: PPUSH
2233: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2237: LD_EXP 22
2241: PPUSH
2242: LD_INT 70
2244: PPUSH
2245: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2249: LD_EXP 22
2253: PPUSH
2254: LD_INT 100
2256: PPUSH
2257: LD_INT 61
2259: PPUSH
2260: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2264: LD_EXP 22
2268: PPUSH
2269: LD_INT 105
2271: PPUSH
2272: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2276: LD_EXP 22
2280: PPUSH
2281: LD_INT 78
2283: PPUSH
2284: LD_INT 64
2286: PPUSH
2287: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2291: LD_EXP 22
2295: PPUSH
2296: LD_INT 140
2298: PPUSH
2299: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2303: LD_EXP 22
2307: PPUSH
2308: LD_INT 100
2310: PPUSH
2311: LD_INT 61
2313: PPUSH
2314: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2318: LD_EXP 22
2322: PPUSH
2323: LD_INT 105
2325: PPUSH
2326: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2330: LD_EXP 22
2334: PPUSH
2335: LD_INT 107
2337: PPUSH
2338: LD_INT 57
2340: PPUSH
2341: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2345: LD_EXP 22
2349: PPUSH
2350: LD_INT 70
2352: PPUSH
2353: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2357: LD_EXP 22
2361: PPUSH
2362: LD_INT 122
2364: PPUSH
2365: LD_INT 48
2367: PPUSH
2368: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2372: LD_EXP 22
2376: PPUSH
2377: LD_INT 70
2379: PPUSH
2380: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2384: LD_EXP 22
2388: PPUSH
2389: LD_INT 124
2391: PPUSH
2392: LD_INT 25
2394: PPUSH
2395: CALL_OW 171
// end ; end_of_file
2399: END
// export Johnny ; export function PrepareJohnny ; begin
2400: LD_INT 0
2402: PPUSH
// uc_side := 1 ;
2403: LD_ADDR_OWVAR 20
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// uc_nation := 1 ;
2411: LD_ADDR_OWVAR 21
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2419: LD_ADDR_EXP 23
2423: PUSH
2424: LD_STRING Harris
2426: PPUSH
2427: CALL_OW 25
2431: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2432: LD_EXP 23
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2444: LD_EXP 23
2448: PPUSH
2449: LD_INT 8
2451: PPUSH
2452: LD_INT 0
2454: PPUSH
2455: CALL_OW 49
// ComCrawl ( Johnny ) ;
2459: LD_EXP 23
2463: PPUSH
2464: CALL_OW 137
// end ;
2468: LD_VAR 0 1
2472: RET
// export function PreparePatrolTank ; var veh , un ; begin
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
// uc_side := 1 ;
2478: LD_ADDR_OWVAR 20
2482: PUSH
2483: LD_INT 1
2485: ST_TO_ADDR
// uc_nation := 1 ;
2486: LD_ADDR_OWVAR 21
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 380
// un := CreateHuman ;
2507: LD_ADDR_VAR 0 3
2511: PUSH
2512: CALL_OW 44
2516: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2517: LD_ADDR_OWVAR 37
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// vc_engine := engine_combustion ;
2525: LD_ADDR_OWVAR 39
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_control := control_manual ;
2533: LD_ADDR_OWVAR 38
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 2
2548: ST_TO_ADDR
// vc_fuel_battery := 22 ;
2549: LD_ADDR_OWVAR 41
2553: PUSH
2554: LD_INT 22
2556: ST_TO_ADDR
// veh := CreateVehicle ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: CALL_OW 45
2566: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2567: LD_VAR 0 2
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 31
2586: PPUSH
2587: LD_INT 58
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: CALL_OW 52
// result := un ;
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: LD_VAR 0 3
2620: ST_TO_ADDR
// end ; end_of_file
2621: LD_VAR 0 1
2625: RET
// export function Action ; begin
2626: LD_INT 0
2628: PPUSH
// InGameOn ;
2629: CALL_OW 8
// wait ( 0 0$4 ) ;
2633: LD_INT 140
2635: PPUSH
2636: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2640: LD_EXP 14
2644: PPUSH
2645: LD_STRING DH-start-1
2647: PPUSH
2648: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2652: LD_EXP 14
2656: PPUSH
2657: LD_INT 71
2659: PPUSH
2660: LD_INT 29
2662: PPUSH
2663: CALL_OW 111
// wait ( 0 0$4 ) ;
2667: LD_INT 140
2669: PPUSH
2670: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2674: LD_EXP 14
2678: PPUSH
2679: LD_INT 71
2681: PPUSH
2682: LD_INT 33
2684: PPUSH
2685: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2689: LD_EXP 14
2693: PPUSH
2694: LD_INT 71
2696: PPUSH
2697: LD_INT 34
2699: PPUSH
2700: CALL_OW 178
// wait ( 0 0$4 ) ;
2704: LD_INT 140
2706: PPUSH
2707: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
2711: LD_EXP 14
2715: PPUSH
2716: LD_STRING DH-start-2
2718: PPUSH
2719: CALL_OW 88
// wait ( 0 0$4 ) ;
2723: LD_INT 140
2725: PPUSH
2726: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
2730: LD_EXP 14
2734: PPUSH
2735: LD_INT 65
2737: PPUSH
2738: LD_INT 26
2740: PPUSH
2741: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
2745: LD_EXP 14
2749: PPUSH
2750: LD_STRING DH-start-3
2752: PPUSH
2753: CALL_OW 88
// InGameOff ;
2757: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
2761: LD_STRING O1_cont
2763: PPUSH
2764: CALL_OW 337
// SaveForQuickRestart ;
2768: CALL_OW 22
// missionStarted := true ;
2772: LD_ADDR_EXP 1
2776: PUSH
2777: LD_INT 1
2779: ST_TO_ADDR
// PrepareJohnny ;
2780: CALL 2400 0 0
// end ;
2784: LD_VAR 0 1
2788: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny do
2789: LD_EXP 8
2793: NOT
2794: PUSH
2795: LD_EXP 7
2799: NOT
2800: AND
2801: PUSH
2802: LD_INT 2
2804: PPUSH
2805: LD_EXP 23
2809: PPUSH
2810: CALL_OW 292
2814: AND
2815: PUSH
2816: LD_INT 22
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PPUSH
2831: LD_EXP 14
2835: PPUSH
2836: CALL_OW 74
2840: PUSH
2841: LD_EXP 23
2845: EQUAL
2846: AND
2847: IFFALSE 3759
2849: GO 2851
2851: DISABLE
// begin InGameOn ;
2852: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
2865: LD_EXP 23
2869: PPUSH
2870: LD_STRING DJ-ambush-1
2872: PPUSH
2873: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2877: LD_INT 10
2879: PPUSH
2880: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
2884: LD_EXP 14
2888: PPUSH
2889: LD_EXP 23
2893: PPUSH
2894: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
2898: LD_EXP 14
2902: PPUSH
2903: LD_STRING DH-ambush-1
2905: PPUSH
2906: CALL_OW 88
// wait ( 0 0$1 ) ;
2910: LD_INT 35
2912: PPUSH
2913: CALL_OW 67
// ComWalk ( Johnny ) ;
2917: LD_EXP 23
2921: PPUSH
2922: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
2926: LD_EXP 23
2930: PPUSH
2931: LD_EXP 14
2935: PPUSH
2936: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2940: LD_INT 35
2942: PPUSH
2943: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
2947: LD_EXP 23
2951: PPUSH
2952: LD_EXP 14
2956: PPUSH
2957: CALL_OW 296
2961: PUSH
2962: LD_INT 4
2964: LESS
2965: IFFALSE 2940
// ComTurnUnit ( Johnny , Heike ) ;
2967: LD_EXP 23
2971: PPUSH
2972: LD_EXP 14
2976: PPUSH
2977: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
2981: LD_EXP 23
2985: PPUSH
2986: LD_STRING DJ-ambush-2
2988: PPUSH
2989: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
2993: LD_EXP 14
2997: PPUSH
2998: LD_STRING DH-ambush-2
3000: PPUSH
3001: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3005: LD_EXP 23
3009: PPUSH
3010: LD_STRING DJ-ambush-3
3012: PPUSH
3013: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3017: LD_EXP 14
3021: PPUSH
3022: LD_STRING DH-ambush-3
3024: PPUSH
3025: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3029: LD_EXP 23
3033: PPUSH
3034: LD_STRING DJ-ambush-4
3036: PPUSH
3037: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3041: LD_EXP 14
3045: PPUSH
3046: LD_INT 39
3048: PPUSH
3049: LD_INT 22
3051: PPUSH
3052: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3056: LD_EXP 14
3060: PPUSH
3061: LD_STRING DH-ambush-4
3063: PPUSH
3064: CALL_OW 88
// PrepareRussianPatrol ;
3068: CALL 1219 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3072: LD_INT 39
3074: PPUSH
3075: LD_INT 22
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: LD_INT 12
3083: NEG
3084: PPUSH
3085: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 22
3094: PPUSH
3095: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3099: LD_EXP 19
3103: PPUSH
3104: LD_INT 39
3106: PPUSH
3107: LD_INT 23
3109: PPUSH
3110: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3114: LD_EXP 14
3118: PUSH
3119: LD_EXP 23
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PPUSH
3128: LD_INT 39
3130: PPUSH
3131: LD_INT 7
3133: PPUSH
3134: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3138: LD_EXP 14
3142: PUSH
3143: LD_EXP 23
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: LD_EXP 19
3156: PUSH
3157: LD_INT 1
3159: ARRAY
3160: PPUSH
3161: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3165: LD_EXP 19
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING DR-ambush-5
3176: PPUSH
3177: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3181: LD_EXP 19
3185: PUSH
3186: LD_INT 2
3188: ARRAY
3189: PPUSH
3190: LD_STRING DR1-ambush-5
3192: PPUSH
3193: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3197: LD_INT 35
3199: PPUSH
3200: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3204: LD_EXP 14
3208: PPUSH
3209: LD_INT 39
3211: PPUSH
3212: LD_INT 7
3214: PPUSH
3215: CALL_OW 297
3219: PUSH
3220: LD_INT 6
3222: LESS
3223: IFFALSE 3197
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3225: LD_EXP 14
3229: PPUSH
3230: LD_EXP 19
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3243: LD_EXP 23
3247: PPUSH
3248: LD_EXP 14
3252: PPUSH
3253: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3257: LD_EXP 23
3261: PPUSH
3262: LD_STRING DJ-ambush-6
3264: PPUSH
3265: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3269: LD_EXP 14
3273: PPUSH
3274: LD_STRING DH-ambush-6
3276: PPUSH
3277: CALL_OW 88
// InGameOff ;
3281: CALL_OW 9
// meetJohnny := true ;
3285: LD_ADDR_EXP 3
3289: PUSH
3290: LD_INT 1
3292: ST_TO_ADDR
// ComFree ( Johnny ) ;
3293: LD_EXP 23
3297: PPUSH
3298: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3302: LD_STRING O2_ambush_cont
3304: PPUSH
3305: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3309: LD_EXP 19
3313: PUSH
3314: LD_EXP 19
3318: ARRAY
3319: PPUSH
3320: LD_INT 29
3322: PPUSH
3323: LD_INT 15
3325: PPUSH
3326: CALL_OW 111
// wait ( 0 0$2 ) ;
3330: LD_INT 70
3332: PPUSH
3333: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3337: LD_INT 3
3339: PPUSH
3340: LD_EXP 14
3344: PPUSH
3345: CALL_OW 292
3349: NOT
3350: PUSH
3351: LD_INT 3
3353: PPUSH
3354: LD_EXP 23
3358: PPUSH
3359: CALL_OW 292
3363: NOT
3364: AND
3365: IFFALSE 3386
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3367: LD_EXP 19
3371: PUSH
3372: LD_INT 1
3374: ARRAY
3375: PPUSH
3376: LD_INT 58
3378: PPUSH
3379: LD_INT 32
3381: PPUSH
3382: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3386: LD_INT 1750
3388: PUSH
3389: LD_INT 1400
3391: PUSH
3392: LD_INT 1225
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: PUSH
3400: LD_OWVAR 67
3404: ARRAY
3405: PPUSH
3406: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3410: LD_EXP 19
3414: PPUSH
3415: LD_INT 43
3417: PPUSH
3418: LD_INT 13
3420: PPUSH
3421: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3425: LD_INT 35
3427: PPUSH
3428: CALL_OW 67
// until not russianPatrol ;
3432: LD_EXP 19
3436: NOT
3437: IFFALSE 3425
// RemoveSeeing ( 39 , 22 , 2 ) ;
3439: LD_INT 39
3441: PPUSH
3442: LD_INT 22
3444: PPUSH
3445: LD_INT 2
3447: PPUSH
3448: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3452: LD_INT 1
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 81
3462: PUSH
3463: LD_INT 2
3465: EQUAL
3466: IFFALSE 3470
// exit ;
3468: GO 3759
// if not IsOk ( Johnny ) then
3470: LD_EXP 23
3474: PPUSH
3475: CALL_OW 302
3479: NOT
3480: IFFALSE 3491
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3482: LD_STRING O2_ambush_out_cont
3484: PPUSH
3485: CALL_OW 337
// exit ;
3489: GO 3759
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3491: LD_EXP 14
3495: PPUSH
3496: LD_EXP 23
3500: PPUSH
3501: CALL_OW 296
3505: PUSH
3506: LD_INT 10
3508: GREATER
3509: IFFALSE 3552
// begin ComMoveUnit ( Johnny , Heike ) ;
3511: LD_EXP 23
3515: PPUSH
3516: LD_EXP 14
3520: PPUSH
3521: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3525: LD_INT 35
3527: PPUSH
3528: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3532: LD_EXP 23
3536: PPUSH
3537: LD_EXP 14
3541: PPUSH
3542: CALL_OW 296
3546: PUSH
3547: LD_INT 6
3549: LESS
3550: IFFALSE 3525
// end ; CenterNowOnUnits ( Heike ) ;
3552: LD_EXP 14
3556: PPUSH
3557: CALL_OW 87
// InGameOn ;
3561: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3565: LD_EXP 14
3569: PPUSH
3570: LD_EXP 23
3574: PPUSH
3575: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3579: LD_EXP 23
3583: PPUSH
3584: LD_EXP 14
3588: PPUSH
3589: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3593: LD_EXP 23
3597: PPUSH
3598: LD_STRING DJ-thanks-1
3600: PPUSH
3601: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3605: LD_EXP 14
3609: PPUSH
3610: LD_STRING DH-thanks-1
3612: PPUSH
3613: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3617: LD_EXP 23
3621: PPUSH
3622: LD_STRING DJ-thanks-2
3624: PPUSH
3625: CALL_OW 88
// Say ( Heike , DH-thanks-2 ) ;
3629: LD_EXP 14
3633: PPUSH
3634: LD_STRING DH-thanks-2
3636: PPUSH
3637: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3641: LD_EXP 23
3645: PPUSH
3646: LD_INT 4
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3656: LD_INT 35
3658: PPUSH
3659: CALL_OW 67
// until not See ( 2 , Johnny ) ;
3663: LD_INT 2
3665: PPUSH
3666: LD_EXP 23
3670: PPUSH
3671: CALL_OW 292
3675: NOT
3676: IFFALSE 3656
// Say ( Heike , DH-thanks-2a ) ;
3678: LD_EXP 14
3682: PPUSH
3683: LD_STRING DH-thanks-2a
3685: PPUSH
3686: CALL_OW 88
// RemoveUnit ( Johnny ) ;
3690: LD_EXP 23
3694: PPUSH
3695: CALL_OW 64
// InGameOff ;
3699: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3703: LD_STRING O2_ambush_out_cont
3705: PPUSH
3706: CALL_OW 337
// johnnySaved := true ;
3710: LD_ADDR_EXP 4
3714: PUSH
3715: LD_INT 1
3717: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
3718: LD_EXP 14
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: LD_INT 600
3728: PPUSH
3729: CALL_OW 492
// if IsOk ( Olaf ) then
3733: LD_EXP 15
3737: PPUSH
3738: CALL_OW 302
3742: IFFALSE 3759
// ComMoveXY ( Olaf , 44 , 25 ) ;
3744: LD_EXP 15
3748: PPUSH
3749: LD_INT 44
3751: PPUSH
3752: LD_INT 25
3754: PPUSH
3755: CALL_OW 111
// end ;
3759: END
// every 0 0$1 trigger russianPatrol do var i ;
3760: LD_EXP 19
3764: IFFALSE 3832
3766: GO 3768
3768: DISABLE
3769: LD_INT 0
3771: PPUSH
// begin enable ;
3772: ENABLE
// for i in russianPatrol do
3773: LD_ADDR_VAR 0 1
3777: PUSH
3778: LD_EXP 19
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3830
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
3786: LD_VAR 0 1
3790: PPUSH
3791: CALL_OW 256
3795: PUSH
3796: LD_INT 1000
3798: LESS
3799: PUSH
3800: LD_VAR 0 1
3804: PPUSH
3805: CALL_OW 314
3809: NOT
3810: AND
3811: IFFALSE 3828
// ComAgressiveMove ( i , 42 , 12 ) ;
3813: LD_VAR 0 1
3817: PPUSH
3818: LD_INT 42
3820: PPUSH
3821: LD_INT 12
3823: PPUSH
3824: CALL_OW 114
3828: GO 3783
3830: POP
3831: POP
// end ;
3832: PPOPN 1
3834: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 81
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: PUSH
3850: LD_EXP 23
3854: PPUSH
3855: CALL_OW 302
3859: AND
3860: IFFALSE 3877
3862: GO 3864
3864: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
3865: LD_EXP 23
3869: PPUSH
3870: LD_STRING DJ-fire-1
3872: PPUSH
3873: CALL_OW 88
3877: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
3878: LD_EXP 7
3882: NOT
3883: PUSH
3884: LD_EXP 21
3888: PPUSH
3889: LD_INT 101
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 72
3903: AND
3904: IFFALSE 4012
3906: GO 3908
3908: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
3909: LD_EXP 14
3913: PPUSH
3914: CALL_OW 87
// DialogueOn ;
3918: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
3922: LD_EXP 14
3926: PPUSH
3927: LD_STRING DH-see-enemy-patrol-1
3929: PPUSH
3930: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
3934: LD_EXP 21
3938: PPUSH
3939: LD_INT 26
3941: PUSH
3942: LD_INT 1
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 72
3953: PUSH
3954: LD_INT 1
3956: ARRAY
3957: PPUSH
3958: LD_STRING DR-see-enemy-patrol-1
3960: PPUSH
3961: CALL_OW 88
// DialogueOff ;
3965: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
3969: LD_EXP 21
3973: PPUSH
3974: LD_INT 66
3976: PPUSH
3977: LD_INT 22
3979: PPUSH
3980: CALL_OW 114
// wait ( 0 0$10 ) ;
3984: LD_INT 350
3986: PPUSH
3987: CALL_OW 67
// ComMoveToArea ( russianForces , russianEastPatrolArea ) ;
3991: LD_EXP 21
3995: PPUSH
3996: LD_INT 9
3998: PPUSH
3999: CALL_OW 113
// AddComHold ( russianForces ) ;
4003: LD_EXP 21
4007: PPUSH
4008: CALL_OW 200
// end ;
4012: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4013: LD_EXP 1
4017: PUSH
4018: LD_EXP 8
4022: NOT
4023: AND
4024: PUSH
4025: LD_EXP 7
4029: NOT
4030: AND
4031: PUSH
4032: LD_EXP 14
4036: PPUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 14
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PPUSH
4047: CALL_OW 69
4051: PPUSH
4052: LD_EXP 14
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 296
4066: PUSH
4067: LD_INT 6
4069: LESS
4070: AND
4071: IFFALSE 4088
4073: GO 4075
4075: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
4076: LD_EXP 14
4080: PPUSH
4081: LD_STRING DH-tiger-1
4083: PPUSH
4084: CALL_OW 88
4088: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4089: LD_EXP 1
4093: PUSH
4094: LD_EXP 8
4098: NOT
4099: AND
4100: PUSH
4101: LD_EXP 7
4105: NOT
4106: AND
4107: PUSH
4108: LD_EXP 14
4112: PPUSH
4113: LD_INT 25
4115: PUSH
4116: LD_INT 12
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PPUSH
4123: CALL_OW 69
4127: PPUSH
4128: LD_EXP 14
4132: PPUSH
4133: CALL_OW 74
4137: PPUSH
4138: CALL_OW 296
4142: PUSH
4143: LD_INT 6
4145: LESS
4146: AND
4147: IFFALSE 4164
4149: GO 4151
4151: DISABLE
// Say ( Heike , DH-ape-1 ) ;
4152: LD_EXP 14
4156: PPUSH
4157: LD_STRING DH-ape-1
4159: PPUSH
4160: CALL_OW 88
4164: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4165: LD_EXP 1
4169: PUSH
4170: LD_EXP 8
4174: NOT
4175: AND
4176: PUSH
4177: LD_EXP 7
4181: NOT
4182: AND
4183: PUSH
4184: LD_EXP 14
4188: PPUSH
4189: LD_INT 25
4191: PUSH
4192: LD_INT 18
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 69
4203: PPUSH
4204: LD_EXP 14
4208: PPUSH
4209: CALL_OW 74
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: AND
4223: IFFALSE 4240
4225: GO 4227
4227: DISABLE
// Say ( Heike , DH-bird-1 ) ;
4228: LD_EXP 14
4232: PPUSH
4233: LD_STRING DH-bird-1
4235: PPUSH
4236: CALL_OW 88
4240: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4241: LD_INT 22
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PUSH
4251: LD_INT 101
4253: PUSH
4254: LD_INT 3
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 69
4269: IFFALSE 4282
4271: GO 4273
4273: DISABLE
// russianSpotted := true ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: LD_INT 1
4281: ST_TO_ADDR
4282: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4283: LD_EXP 14
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 69
4316: PPUSH
4317: LD_EXP 14
4321: PPUSH
4322: CALL_OW 74
4326: PPUSH
4327: CALL_OW 296
4331: PUSH
4332: LD_INT 8
4334: LESS
4335: IFFALSE 4352
4337: GO 4339
4339: DISABLE
// Say ( Heike , DH-enemy-base ) ;
4340: LD_EXP 14
4344: PPUSH
4345: LD_STRING DH-enemy-base
4347: PPUSH
4348: CALL_OW 88
4352: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not mercenariesQuestDone do var i ;
4353: LD_EXP 23
4357: PPUSH
4358: CALL_OW 305
4362: NOT
4363: PUSH
4364: LD_EXP 6
4368: NOT
4369: AND
4370: PUSH
4371: LD_EXP 5
4375: AND
4376: PUSH
4377: LD_EXP 11
4381: NOT
4382: AND
4383: IFFALSE 4534
4385: GO 4387
4387: DISABLE
4388: LD_INT 0
4390: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4391: LD_INT 35
4393: PPUSH
4394: CALL_OW 67
// for i in dogTag do
4398: LD_ADDR_VAR 0 1
4402: PUSH
4403: LD_EXP 5
4407: PUSH
4408: FOR_IN
4409: IFFALSE 4458
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
4411: LD_EXP 14
4415: PPUSH
4416: LD_VAR 0 1
4420: PUSH
4421: LD_INT 1
4423: ARRAY
4424: PPUSH
4425: LD_VAR 0 1
4429: PUSH
4430: LD_INT 2
4432: ARRAY
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 3
4441: LESS
4442: IFFALSE 4456
// begin dogTagFound := i ;
4444: LD_ADDR_EXP 6
4448: PUSH
4449: LD_VAR 0 1
4453: ST_TO_ADDR
// break ;
4454: GO 4458
// end ;
4456: GO 4408
4458: POP
4459: POP
// until dogTagFound ;
4460: LD_EXP 6
4464: IFFALSE 4391
// CenterNowOnUnits ( Heike ) ;
4466: LD_EXP 14
4470: PPUSH
4471: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
4475: LD_EXP 14
4479: PPUSH
4480: LD_EXP 6
4484: PUSH
4485: LD_INT 1
4487: ARRAY
4488: PPUSH
4489: LD_EXP 6
4493: PUSH
4494: LD_INT 2
4496: ARRAY
4497: PPUSH
4498: CALL_OW 111
// if mercenariesQuestReady then
4502: LD_EXP 10
4506: IFFALSE 4522
// Say ( Heike , DH-dogtag-found-quest ) else
4508: LD_EXP 14
4512: PPUSH
4513: LD_STRING DH-dogtag-found-quest
4515: PPUSH
4516: CALL_OW 88
4520: GO 4534
// Say ( Heike , DH-dogtag-found ) ;
4522: LD_EXP 14
4526: PPUSH
4527: LD_STRING DH-dogtag-found
4529: PPUSH
4530: CALL_OW 88
// end ;
4534: PPOPN 1
4536: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
4537: LD_EXP 8
4541: NOT
4542: PUSH
4543: LD_EXP 7
4547: NOT
4548: AND
4549: PUSH
4550: LD_INT 5
4552: PPUSH
4553: LD_EXP 14
4557: PPUSH
4558: CALL_OW 292
4562: AND
4563: PUSH
4564: LD_EXP 14
4568: PPUSH
4569: LD_EXP 15
4573: PPUSH
4574: CALL_OW 296
4578: PUSH
4579: LD_INT 8
4581: LESS
4582: AND
4583: IFFALSE 4944
4585: GO 4587
4587: DISABLE
// begin olafSpotted := true ;
4588: LD_ADDR_EXP 8
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// if HasTask ( Olaf ) then
4596: LD_EXP 15
4600: PPUSH
4601: CALL_OW 314
4605: IFFALSE 4616
// ComStop ( Olaf ) ;
4607: LD_EXP 15
4611: PPUSH
4612: CALL_OW 141
// InGameOn ;
4616: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
4620: LD_EXP 15
4624: PPUSH
4625: LD_EXP 14
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 8
4637: GREATER
4638: IFFALSE 4654
// ComMoveUnit ( Olaf , Heike ) ;
4640: LD_EXP 15
4644: PPUSH
4645: LD_EXP 14
4649: PPUSH
4650: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
4654: LD_INT 35
4656: PPUSH
4657: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
4661: LD_EXP 15
4665: PPUSH
4666: LD_EXP 14
4670: PPUSH
4671: CALL_OW 296
4675: PUSH
4676: LD_INT 8
4678: LESSEQUAL
4679: IFFALSE 4654
// ComTurnUnit ( Heike , Olaf ) ;
4681: LD_EXP 14
4685: PPUSH
4686: LD_EXP 15
4690: PPUSH
4691: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
4695: LD_EXP 15
4699: PPUSH
4700: LD_EXP 14
4704: PPUSH
4705: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
4709: LD_EXP 15
4713: PPUSH
4714: LD_STRING DO-olaf-1
4716: PPUSH
4717: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
4721: LD_EXP 14
4725: PPUSH
4726: LD_STRING DH-olaf-1
4728: PPUSH
4729: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
4733: LD_EXP 15
4737: PPUSH
4738: LD_STRING DO-olaf-2
4740: PPUSH
4741: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
4745: LD_EXP 14
4749: PPUSH
4750: LD_STRING DH-olaf-2
4752: PPUSH
4753: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
4757: LD_EXP 15
4761: PPUSH
4762: LD_STRING DO-olaf-3
4764: PPUSH
4765: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
4769: LD_EXP 15
4773: PPUSH
4774: LD_STRING DO-olaf-4
4776: PPUSH
4777: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
4781: LD_EXP 14
4785: PPUSH
4786: LD_STRING DH-olaf-4
4788: PPUSH
4789: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
4793: LD_EXP 15
4797: PPUSH
4798: LD_STRING DO-olaf-5
4800: PPUSH
4801: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
4805: LD_EXP 14
4809: PPUSH
4810: LD_STRING DH-olaf-5
4812: PPUSH
4813: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
4817: LD_EXP 15
4821: PPUSH
4822: LD_STRING DO-olaf-6
4824: PPUSH
4825: CALL_OW 88
// if russianSpotted or johnnySaved then
4829: LD_EXP 9
4833: PUSH
4834: LD_EXP 4
4838: OR
4839: IFFALSE 4867
// begin Say ( Heike , DH-olaf-6a ) ;
4841: LD_EXP 14
4845: PPUSH
4846: LD_STRING DH-olaf-6a
4848: PPUSH
4849: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
4853: LD_EXP 15
4857: PPUSH
4858: LD_STRING DO-olaf-7a
4860: PPUSH
4861: CALL_OW 88
// end else
4865: GO 4891
// begin Say ( Heike , DH-olaf-6b ) ;
4867: LD_EXP 14
4871: PPUSH
4872: LD_STRING DH-olaf-6b
4874: PPUSH
4875: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
4879: LD_EXP 15
4883: PPUSH
4884: LD_STRING DO-olaf-7b
4886: PPUSH
4887: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
4891: LD_EXP 15
4895: PPUSH
4896: LD_STRING DO-olaf-8
4898: PPUSH
4899: CALL_OW 88
// InGameOff ;
4903: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
4907: LD_STRING O3_camp_cont
4909: PPUSH
4910: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
4914: LD_EXP 15
4918: PPUSH
4919: LD_INT 52
4921: PPUSH
4922: LD_INT 90
4924: PPUSH
4925: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
4929: LD_EXP 15
4933: PPUSH
4934: LD_INT 53
4936: PPUSH
4937: LD_INT 89
4939: PPUSH
4940: CALL_OW 178
// end ;
4944: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
4945: LD_EXP 8
4949: NOT
4950: PUSH
4951: LD_EXP 14
4955: PPUSH
4956: LD_EXP 16
4960: PPUSH
4961: CALL_OW 296
4965: PUSH
4966: LD_INT 36
4968: LESS
4969: AND
4970: IFFALSE 4990
4972: GO 4974
4974: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
4975: LD_EXP 15
4979: PPUSH
4980: LD_INT 39
4982: PPUSH
4983: LD_INT 71
4985: PPUSH
4986: CALL_OW 111
4990: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
4991: LD_EXP 7
4995: NOT
4996: PUSH
4997: LD_INT 2
4999: PPUSH
5000: LD_EXP 17
5004: PPUSH
5005: CALL_OW 292
5009: PUSH
5010: LD_INT 2
5012: PPUSH
5013: LD_EXP 16
5017: PPUSH
5018: CALL_OW 292
5022: OR
5023: AND
5024: IFFALSE 6349
5026: GO 5028
5028: DISABLE
5029: LD_INT 0
5031: PPUSH
5032: PPUSH
5033: PPUSH
// begin if IsLive ( Johnny ) then
5034: LD_EXP 23
5038: PPUSH
5039: CALL_OW 300
5043: IFFALSE 5054
// KillUnit ( Johnny ) ;
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 66
// mercenariesSpotted := true ;
5054: LD_ADDR_EXP 7
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5062: LD_STRING O4_camp_cont
5064: PPUSH
5065: CALL_OW 337
// InGameOn ;
5069: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5073: LD_INT 53
5075: PPUSH
5076: LD_INT 89
5078: PPUSH
5079: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5083: LD_INT 53
5085: PPUSH
5086: LD_INT 89
5088: PPUSH
5089: LD_INT 2
5091: PPUSH
5092: LD_INT 8
5094: NEG
5095: PPUSH
5096: CALL_OW 330
// if olafSpotted then
5100: LD_EXP 8
5104: IFFALSE 5222
// begin AddComTurnUnit ( Olaf , Heike ) ;
5106: LD_EXP 15
5110: PPUSH
5111: LD_EXP 14
5115: PPUSH
5116: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5120: LD_EXP 14
5124: PPUSH
5125: LD_INT 51
5127: PPUSH
5128: LD_INT 86
5130: PPUSH
5131: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5135: LD_EXP 14
5139: PPUSH
5140: LD_EXP 15
5144: PPUSH
5145: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5149: LD_EXP 15
5153: PPUSH
5154: LD_STRING DO-camp-1
5156: PPUSH
5157: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5161: LD_EXP 16
5165: PUSH
5166: LD_EXP 17
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: LD_EXP 14
5179: PPUSH
5180: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5184: LD_EXP 16
5188: PPUSH
5189: LD_STRING DG-camp-1
5191: PPUSH
5192: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5196: LD_EXP 14
5200: PPUSH
5201: LD_STRING DH-camp-1
5203: PPUSH
5204: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5208: LD_EXP 15
5212: PPUSH
5213: LD_STRING DO-camp-2
5215: PPUSH
5216: CALL_OW 88
// end else
5220: GO 5617
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5222: LD_EXP 14
5226: PPUSH
5227: LD_INT 51
5229: PPUSH
5230: LD_INT 86
5232: PPUSH
5233: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5237: LD_EXP 14
5241: PPUSH
5242: LD_EXP 16
5246: PPUSH
5247: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5251: LD_EXP 16
5255: PUSH
5256: LD_EXP 17
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: LD_EXP 14
5269: PPUSH
5270: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DG-camp-1a
5281: PPUSH
5282: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5286: LD_EXP 14
5290: PPUSH
5291: LD_STRING DH-camp-1a
5293: PPUSH
5294: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
5305: LD_EXP 17
5309: PPUSH
5310: LD_EXP 15
5314: PPUSH
5315: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
5319: LD_EXP 17
5323: PPUSH
5324: LD_STRING DM-camp-1a
5326: PPUSH
5327: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
5331: LD_EXP 15
5335: PPUSH
5336: LD_INT 52
5338: PPUSH
5339: LD_INT 90
5341: PPUSH
5342: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
5346: LD_EXP 17
5350: PPUSH
5351: LD_EXP 14
5355: PPUSH
5356: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING DG-camp-2a
5367: PPUSH
5368: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
5372: LD_EXP 14
5376: PPUSH
5377: LD_STRING DH-camp-2a
5379: PPUSH
5380: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
5384: LD_EXP 17
5388: PPUSH
5389: LD_STRING DM-camp-2a
5391: PPUSH
5392: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5396: LD_INT 35
5398: PPUSH
5399: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
5403: LD_EXP 15
5407: PPUSH
5408: LD_EXP 14
5412: PPUSH
5413: CALL_OW 296
5417: PUSH
5418: LD_INT 10
5420: LESS
5421: IFFALSE 5396
// AddComTurnUnit ( Olaf , Heike ) ;
5423: LD_EXP 15
5427: PPUSH
5428: LD_EXP 14
5432: PPUSH
5433: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
5437: LD_EXP 17
5441: PPUSH
5442: LD_EXP 14
5446: PPUSH
5447: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
5451: LD_EXP 15
5455: PPUSH
5456: LD_STRING DO-camp-2a
5458: PPUSH
5459: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
5463: LD_EXP 14
5467: PPUSH
5468: LD_EXP 15
5472: PPUSH
5473: CALL_OW 119
// if russianSpotted then
5477: LD_EXP 9
5481: IFFALSE 5521
// begin Say ( Heike , DH-camp-2aa ) ;
5483: LD_EXP 14
5487: PPUSH
5488: LD_STRING DH-camp-2aa
5490: PPUSH
5491: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
5495: LD_EXP 16
5499: PPUSH
5500: LD_STRING DG-camp-2aa
5502: PPUSH
5503: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
5507: LD_EXP 17
5511: PPUSH
5512: LD_STRING DM-camp-2aa
5514: PPUSH
5515: CALL_OW 88
// end else
5519: GO 5545
// begin Say ( Heike , DH-camp-2ab ) ;
5521: LD_EXP 14
5525: PPUSH
5526: LD_STRING DH-camp-2ab
5528: PPUSH
5529: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
5533: LD_EXP 17
5537: PPUSH
5538: LD_STRING DM-camp-2ab
5540: PPUSH
5541: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
5545: LD_EXP 14
5549: PPUSH
5550: LD_STRING DH-camp-3a
5552: PPUSH
5553: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
5557: LD_EXP 15
5561: PPUSH
5562: LD_STRING DO-camp-3a
5564: PPUSH
5565: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
5569: LD_EXP 16
5573: PPUSH
5574: LD_STRING DG-camp-3a
5576: PPUSH
5577: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
5581: LD_EXP 14
5585: PPUSH
5586: LD_STRING DH-camp-4aa
5588: PPUSH
5589: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
5593: LD_EXP 17
5597: PPUSH
5598: LD_STRING DM-camp-4aa
5600: PPUSH
5601: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
5605: LD_EXP 15
5609: PPUSH
5610: LD_STRING DO-camp-4a
5612: PPUSH
5613: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
5617: LD_EXP 15
5621: PPUSH
5622: LD_STRING DO-camp-3
5624: PPUSH
5625: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
5629: LD_EXP 15
5633: PPUSH
5634: LD_STRING DO-camp-4
5636: PPUSH
5637: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
5641: LD_EXP 16
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DG-camp-4
5662: PPUSH
5663: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
5667: LD_EXP 14
5671: PPUSH
5672: LD_EXP 16
5676: PPUSH
5677: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
5681: LD_EXP 14
5685: PPUSH
5686: LD_STRING DH-camp-4
5688: PPUSH
5689: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
5693: LD_EXP 17
5697: PUSH
5698: LD_EXP 15
5702: PUSH
5703: LD_EXP 16
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: PPUSH
5713: LD_EXP 14
5717: PPUSH
5718: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
5722: LD_EXP 16
5726: PPUSH
5727: LD_STRING DG-camp-5
5729: PPUSH
5730: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
5734: LD_EXP 16
5738: PPUSH
5739: LD_STRING DG-camp-6
5741: PPUSH
5742: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
5746: LD_EXP 14
5750: PPUSH
5751: LD_STRING DH-camp-6
5753: PPUSH
5754: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
5758: LD_EXP 16
5762: PPUSH
5763: LD_STRING DG-camp-7
5765: PPUSH
5766: CALL_OW 88
// if DogTagFound then
5770: LD_EXP 6
5774: IFFALSE 5814
// begin Say ( Heike , DH-quest-1a ) ;
5776: LD_EXP 14
5780: PPUSH
5781: LD_STRING DH-quest-1a
5783: PPUSH
5784: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
5788: LD_EXP 16
5792: PPUSH
5793: LD_STRING DG-quest-1a
5795: PPUSH
5796: CALL_OW 88
// mercenariesQuestDone := true ;
5800: LD_ADDR_EXP 11
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// InGameOff ;
5808: CALL_OW 9
// end else
5812: GO 5980
// begin Say ( Heike , DH-camp-7 ) ;
5814: LD_EXP 14
5818: PPUSH
5819: LD_STRING DH-camp-7
5821: PPUSH
5822: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
5826: LD_EXP 14
5830: PPUSH
5831: CALL_OW 256
5835: PUSH
5836: LD_INT 1000
5838: LESS
5839: IFFALSE 5931
// begin Say ( Olaf , DO-heal-1 ) ;
5841: LD_EXP 15
5845: PPUSH
5846: LD_STRING DO-heal-1
5848: PPUSH
5849: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
5853: LD_EXP 14
5857: PPUSH
5858: LD_INT 51
5860: PPUSH
5861: LD_INT 88
5863: PPUSH
5864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5868: LD_INT 35
5870: PPUSH
5871: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
5875: LD_EXP 14
5879: PPUSH
5880: LD_EXP 15
5884: PPUSH
5885: CALL_OW 296
5889: PUSH
5890: LD_INT 4
5892: LESS
5893: PUSH
5894: LD_EXP 14
5898: PPUSH
5899: LD_INT 51
5901: PPUSH
5902: LD_INT 88
5904: PPUSH
5905: CALL_OW 307
5909: OR
5910: IFFALSE 5868
// SetLives ( Heike , 1000 ) ;
5912: LD_EXP 14
5916: PPUSH
5917: LD_INT 1000
5919: PPUSH
5920: CALL_OW 234
// wait ( 0 0$2 ) ;
5924: LD_INT 70
5926: PPUSH
5927: CALL_OW 67
// end ; InGameOff ;
5931: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
5935: LD_EXP 15
5939: PUSH
5940: LD_EXP 16
5944: PUSH
5945: LD_EXP 17
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: LD_INT 53
5957: PPUSH
5958: LD_INT 89
5960: PPUSH
5961: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
5965: LD_STRING O5_proof_cont
5967: PPUSH
5968: CALL_OW 337
// mercenariesQuestReady := true ;
5972: LD_ADDR_EXP 10
5976: PUSH
5977: LD_INT 1
5979: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
5980: LD_EXP 10
5984: NOT
5985: IFFALSE 5989
// exit ;
5987: GO 6349
// wait ( 0 0$35 ) ;
5989: LD_INT 1225
5991: PPUSH
5992: CALL_OW 67
// driver := PreparePatrolTank ;
5996: LD_ADDR_VAR 0 2
6000: PUSH
6001: CALL 2473 0 0
6005: ST_TO_ADDR
// if not driver then
6006: LD_VAR 0 2
6010: NOT
6011: IFFALSE 6015
// exit ;
6013: GO 6349
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6015: LD_INT 2
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: LD_INT 2
6023: PPUSH
6024: LD_INT 1
6026: PPUSH
6027: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: CALL_OW 310
6045: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_INT 500
6053: PPUSH
6054: CALL_OW 234
// SetLives ( driver , 450 ) ;
6058: LD_VAR 0 2
6062: PPUSH
6063: LD_INT 450
6065: PPUSH
6066: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6070: LD_VAR 0 2
6074: PPUSH
6075: LD_INT 59
6077: PPUSH
6078: LD_INT 60
6080: PPUSH
6081: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6085: LD_INT 35
6087: PPUSH
6088: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6092: LD_VAR 0 3
6096: PPUSH
6097: LD_INT 59
6099: PPUSH
6100: LD_INT 60
6102: PPUSH
6103: CALL_OW 307
6107: IFFALSE 6085
// if not See ( 1 , Heike ) then
6109: LD_INT 1
6111: PPUSH
6112: LD_EXP 14
6116: PPUSH
6117: CALL_OW 292
6121: NOT
6122: IFFALSE 6246
// begin if Difficulty < 3 then
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 3
6131: LESS
6132: IFFALSE 6150
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6134: LD_INT 59
6136: PPUSH
6137: LD_INT 60
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: LD_INT 6
6145: PPUSH
6146: CALL_OW 330
// ComExitVehicle ( driver ) ;
6150: LD_VAR 0 2
6154: PPUSH
6155: CALL_OW 121
// wait ( 0 0$1 ) ;
6159: LD_INT 35
6161: PPUSH
6162: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6166: LD_VAR 0 2
6170: PPUSH
6171: LD_INT 58
6173: PPUSH
6174: LD_INT 54
6176: PPUSH
6177: CALL_OW 171
// wait ( 0 0$1 ) ;
6181: LD_INT 35
6183: PPUSH
6184: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6188: LD_VAR 0 2
6192: PPUSH
6193: LD_INT 57
6195: PPUSH
6196: LD_INT 53
6198: PPUSH
6199: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6203: LD_VAR 0 2
6207: PPUSH
6208: LD_INT 350
6210: PPUSH
6211: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_VAR 0 3
6224: PPUSH
6225: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6229: LD_VAR 0 2
6233: PPUSH
6234: LD_INT 107
6236: PPUSH
6237: LD_INT 118
6239: PPUSH
6240: CALL_OW 171
// end else
6244: GO 6261
// begin ComMoveXY ( driver , 107 , 118 ) ;
6246: LD_VAR 0 2
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 118
6256: PPUSH
6257: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6268: LD_VAR 0 3
6272: PPUSH
6273: LD_INT 107
6275: PPUSH
6276: LD_INT 118
6278: PPUSH
6279: CALL_OW 307
6283: PUSH
6284: LD_VAR 0 2
6288: PPUSH
6289: CALL_OW 301
6293: OR
6294: IFFALSE 6261
// if IsDead ( driver [ 1 ] ) then
6296: LD_VAR 0 2
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: CALL_OW 301
6309: IFFALSE 6313
// exit ;
6311: GO 6349
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6313: LD_ADDR_VAR 0 1
6317: PUSH
6318: LD_INT 22
6320: PUSH
6321: LD_INT 1
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6347
// RemoveUnit ( i ) ;
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 64
6345: GO 6333
6347: POP
6348: POP
// end ;
6349: PPOPN 3
6351: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
6352: LD_INT 10
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 21
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 70
6383: IFFALSE 6457
6385: GO 6387
6387: DISABLE
// begin InGameOn ;
6388: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6392: LD_EXP 15
6396: PUSH
6397: LD_EXP 17
6401: PUSH
6402: LD_EXP 16
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PPUSH
6412: LD_EXP 14
6416: PPUSH
6417: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
6421: LD_EXP 17
6425: PPUSH
6426: LD_STRING DM-quest-1
6428: PPUSH
6429: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
6433: LD_EXP 16
6437: PPUSH
6438: LD_STRING DG-quest-1
6440: PPUSH
6441: CALL_OW 88
// InGameOff ;
6445: CALL_OW 9
// mercenariesQuestDone := true ;
6449: LD_ADDR_EXP 11
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// end ;
6457: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady do var p ;
6458: LD_EXP 14
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: CALL_OW 308
6470: PUSH
6471: LD_EXP 6
6475: AND
6476: PUSH
6477: LD_EXP 10
6481: AND
6482: IFFALSE 6654
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
// begin InGameOn ;
6490: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6494: LD_EXP 15
6498: PUSH
6499: LD_EXP 17
6503: PUSH
6504: LD_EXP 16
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: LD_EXP 14
6518: PPUSH
6519: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
6523: LD_EXP 14
6527: PPUSH
6528: LD_INT 54
6530: PPUSH
6531: LD_INT 86
6533: PPUSH
6534: CALL_OW 111
// p := p + 1 ;
6538: LD_ADDR_VAR 0 1
6542: PUSH
6543: LD_VAR 0 1
6547: PUSH
6548: LD_INT 1
6550: PLUS
6551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6552: LD_INT 35
6554: PPUSH
6555: CALL_OW 67
// p := p + 1 ;
6559: LD_ADDR_VAR 0 1
6563: PUSH
6564: LD_VAR 0 1
6568: PUSH
6569: LD_INT 1
6571: PLUS
6572: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
6573: LD_EXP 14
6577: PPUSH
6578: LD_EXP 16
6582: PPUSH
6583: CALL_OW 296
6587: PUSH
6588: LD_INT 4
6590: LESS
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: LD_INT 5
6599: GREATER
6600: OR
6601: IFFALSE 6552
// Say ( Mike , DM-quest-1 ) ;
6603: LD_EXP 17
6607: PPUSH
6608: LD_STRING DM-quest-1
6610: PPUSH
6611: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
6615: LD_EXP 16
6619: PPUSH
6620: LD_STRING DG-quest-1
6622: PPUSH
6623: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
6627: LD_EXP 14
6631: PPUSH
6632: LD_INT 55
6634: PPUSH
6635: LD_INT 87
6637: PPUSH
6638: CALL_OW 111
// InGameOff ;
6642: CALL_OW 9
// mercenariesQuestDone := true ;
6646: LD_ADDR_EXP 11
6650: PUSH
6651: LD_INT 1
6653: ST_TO_ADDR
// end ;
6654: PPOPN 1
6656: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
6657: LD_EXP 14
6661: PUSH
6662: LD_INT 55
6664: PUSH
6665: EMPTY
6666: LIST
6667: PPUSH
6668: CALL_OW 69
6672: IN
6673: IFFALSE 6713
6675: GO 6677
6677: DISABLE
// begin if Difficulty < 3 then
6678: LD_OWVAR 67
6682: PUSH
6683: LD_INT 3
6685: LESS
6686: IFFALSE 6701
// RemoveSeeing ( 59 , 60 , 2 ) ;
6688: LD_INT 59
6690: PPUSH
6691: LD_INT 60
6693: PPUSH
6694: LD_INT 2
6696: PPUSH
6697: CALL_OW 331
// Say ( Heike , DH-driver ) ;
6701: LD_EXP 14
6705: PPUSH
6706: LD_STRING DH-driver
6708: PPUSH
6709: CALL_OW 88
// end ;
6713: END
// every 0 0$1 trigger mercenariesQuestDone do
6714: LD_EXP 11
6718: IFFALSE 7101
6720: GO 6722
6722: DISABLE
// begin if mercenariesQuestReady then
6723: LD_EXP 10
6727: IFFALSE 6736
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
6729: LD_STRING O5_proof_cont_out
6731: PPUSH
6732: CALL_OW 337
// InGameOn ;
6736: CALL_OW 8
// if IsInUnit ( Heike ) then
6740: LD_EXP 14
6744: PPUSH
6745: CALL_OW 310
6749: IFFALSE 6760
// ComExitVehicle ( Heike ) ;
6751: LD_EXP 14
6755: PPUSH
6756: CALL_OW 121
// wait ( 3 ) ;
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
6767: LD_EXP 14
6771: PPUSH
6772: LD_EXP 16
6776: PPUSH
6777: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6781: LD_EXP 15
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 16
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PPUSH
6801: LD_EXP 14
6805: PPUSH
6806: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
6810: LD_EXP 14
6814: PPUSH
6815: LD_STRING DH-quest-done-1
6817: PPUSH
6818: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
6822: LD_EXP 17
6826: PPUSH
6827: LD_STRING DM-quest-done-1
6829: PPUSH
6830: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
6834: LD_EXP 16
6838: PPUSH
6839: LD_STRING DG-quest-done-1
6841: PPUSH
6842: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6846: LD_EXP 14
6850: PPUSH
6851: LD_EXP 15
6855: PPUSH
6856: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
6860: LD_EXP 14
6864: PPUSH
6865: LD_STRING DH-quest-done-2
6867: PPUSH
6868: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
6872: LD_EXP 15
6876: PPUSH
6877: LD_STRING DO-quest-done-2
6879: PPUSH
6880: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
6884: LD_EXP 15
6888: PPUSH
6889: LD_STRING DO-quest-done-3
6891: PPUSH
6892: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
6896: LD_EXP 16
6900: PPUSH
6901: LD_INT 51
6903: PPUSH
6904: LD_INT 90
6906: PPUSH
6907: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
6911: LD_EXP 16
6915: PPUSH
6916: LD_INT 50
6918: PPUSH
6919: LD_INT 89
6921: PPUSH
6922: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
6926: LD_EXP 14
6930: PPUSH
6931: LD_EXP 16
6935: PPUSH
6936: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
6940: LD_EXP 16
6944: PPUSH
6945: LD_STRING DG-quest-done-4
6947: PPUSH
6948: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
6952: LD_EXP 16
6956: PPUSH
6957: LD_EXP 14
6961: PPUSH
6962: CALL_OW 119
// Say ( Heike , DH-quest-done-4 ) ;
6966: LD_EXP 14
6970: PPUSH
6971: LD_STRING DH-quest-done-4
6973: PPUSH
6974: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
6978: LD_EXP 15
6982: PPUSH
6983: LD_STRING DO-quest-done-4
6985: PPUSH
6986: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6990: LD_EXP 14
6994: PPUSH
6995: LD_EXP 15
6999: PPUSH
7000: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7004: LD_EXP 14
7008: PPUSH
7009: LD_STRING DH-quest-done-5
7011: PPUSH
7012: CALL_OW 88
// InGameOff ;
7016: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7020: LD_STRING O6_end_cont
7022: PPUSH
7023: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7027: LD_EXP 16
7031: PPUSH
7032: LD_INT 2
7034: PPUSH
7035: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7039: LD_EXP 17
7043: PPUSH
7044: LD_INT 2
7046: PPUSH
7047: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7051: LD_INT 42
7053: PPUSH
7054: LD_INT 2
7056: PPUSH
7057: LD_INT 2
7059: PPUSH
7060: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7064: LD_EXP 15
7068: PPUSH
7069: LD_INT 53
7071: PPUSH
7072: LD_INT 89
7074: PPUSH
7075: CALL_OW 118
// lastObjectiveActive := true ;
7079: LD_ADDR_EXP 12
7083: PUSH
7084: LD_INT 1
7086: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7087: LD_INT 1
7089: PPUSH
7090: LD_INT 1
7092: PPUSH
7093: CALL_OW 424
// PreparePrison ;
7097: CALL 1081 0 0
// end ;
7101: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 7 ] ] ) do var i , tmp ;
7102: LD_INT 22
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 91
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 7
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: LIST
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PPUSH
7130: CALL_OW 69
7134: IFFALSE 7278
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7143: LD_ADDR_VAR 0 2
7147: PUSH
7148: LD_INT 22
7150: PUSH
7151: LD_INT 3
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 25
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 54
7170: PUSH
7171: EMPTY
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 69
7183: ST_TO_ADDR
// if not tmp then
7184: LD_VAR 0 2
7188: NOT
7189: IFFALSE 7193
// exit ;
7191: GO 7278
// for i in tmp do
7193: LD_ADDR_VAR 0 1
7197: PUSH
7198: LD_VAR 0 2
7202: PUSH
7203: FOR_IN
7204: IFFALSE 7232
// begin ComExitBuilding ( i ) ;
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
7215: LD_VAR 0 1
7219: PPUSH
7220: LD_INT 121
7222: PPUSH
7223: LD_INT 22
7225: PPUSH
7226: CALL_OW 174
// end ;
7230: GO 7203
7232: POP
7233: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
7234: LD_EXP 21
7238: PPUSH
7239: LD_INT 121
7241: PPUSH
7242: LD_INT 22
7244: PPUSH
7245: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
7249: LD_EXP 22
7253: PPUSH
7254: LD_INT 121
7256: PPUSH
7257: LD_INT 22
7259: PPUSH
7260: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7264: LD_EXP 22
7268: PPUSH
7269: LD_EXP 14
7273: PPUSH
7274: CALL_OW 175
// end ;
7278: PPOPN 2
7280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 7 ] ] ) do var i , tmp ;
7281: LD_INT 22
7283: PUSH
7284: LD_INT 2
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 91
7293: PUSH
7294: LD_INT 8
7296: PUSH
7297: LD_INT 7
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PPUSH
7309: CALL_OW 69
7313: IFFALSE 7457
7315: GO 7317
7317: DISABLE
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7322: LD_ADDR_VAR 0 2
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 25
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 54
7349: PUSH
7350: EMPTY
7351: LIST
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: PPUSH
7358: CALL_OW 69
7362: ST_TO_ADDR
// if not tmp then
7363: LD_VAR 0 2
7367: NOT
7368: IFFALSE 7372
// exit ;
7370: GO 7457
// for i in tmp do
7372: LD_ADDR_VAR 0 1
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: FOR_IN
7383: IFFALSE 7411
// begin ComExitBuilding ( i ) ;
7385: LD_VAR 0 1
7389: PPUSH
7390: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 142
7401: PPUSH
7402: LD_INT 71
7404: PPUSH
7405: CALL_OW 174
// end ;
7409: GO 7382
7411: POP
7412: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
7413: LD_EXP 21
7417: PPUSH
7418: LD_INT 142
7420: PPUSH
7421: LD_INT 71
7423: PPUSH
7424: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
7428: LD_EXP 22
7432: PPUSH
7433: LD_INT 142
7435: PPUSH
7436: LD_INT 71
7438: PPUSH
7439: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7443: LD_EXP 22
7447: PPUSH
7448: LD_EXP 14
7452: PPUSH
7453: CALL_OW 175
// end ;
7457: PPOPN 2
7459: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
7460: LD_EXP 12
7464: PUSH
7465: LD_INT 2
7467: PPUSH
7468: CALL_OW 302
7472: NOT
7473: AND
7474: PUSH
7475: LD_OWVAR 67
7479: PUSH
7480: LD_INT 1
7482: EQUAL
7483: AND
7484: PUSH
7485: LD_EXP 13
7489: NOT
7490: AND
7491: IFFALSE 7508
7493: GO 7495
7495: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DH-prison-missing
7503: PPUSH
7504: CALL_OW 88
// end ;
7508: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
7509: LD_EXP 12
7513: PUSH
7514: LD_INT 8
7516: PPUSH
7517: CALL_OW 302
7521: NOT
7522: AND
7523: PUSH
7524: LD_OWVAR 67
7528: PUSH
7529: LD_INT 1
7531: GREATER
7532: AND
7533: PUSH
7534: LD_EXP 13
7538: NOT
7539: AND
7540: IFFALSE 7557
7542: GO 7544
7544: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
7545: LD_EXP 14
7549: PPUSH
7550: LD_STRING DH-prison-missing
7552: PPUSH
7553: CALL_OW 88
// end ;
7557: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
7558: LD_EXP 12
7562: PUSH
7563: LD_INT 3
7565: PPUSH
7566: CALL_OW 302
7570: NOT
7571: AND
7572: PUSH
7573: LD_EXP 13
7577: NOT
7578: AND
7579: IFFALSE 7596
7581: GO 7583
7583: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
7584: LD_EXP 14
7588: PPUSH
7589: LD_STRING DH-prison-missing-a
7591: PPUSH
7592: CALL_OW 88
// end ;
7596: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
7597: LD_EXP 12
7601: PUSH
7602: LD_INT 10
7604: PPUSH
7605: CALL_OW 302
7609: NOT
7610: AND
7611: PUSH
7612: LD_EXP 13
7616: NOT
7617: AND
7618: IFFALSE 7635
7620: GO 7622
7622: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
7623: LD_EXP 14
7627: PPUSH
7628: LD_STRING DH-prison-missing-a
7630: PPUSH
7631: CALL_OW 88
// end ;
7635: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
7636: LD_EXP 13
7640: NOT
7641: PUSH
7642: LD_EXP 12
7646: AND
7647: PUSH
7648: LD_INT 2
7650: PPUSH
7651: LD_EXP 18
7655: PPUSH
7656: CALL_OW 292
7660: AND
7661: IFFALSE 7748
7663: GO 7665
7665: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
7666: LD_EXP 18
7670: PPUSH
7671: LD_EXP 14
7675: PPUSH
7676: CALL_OW 119
// DialogueOn ;
7680: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
7684: LD_EXP 18
7688: PPUSH
7689: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
7693: LD_EXP 18
7697: PPUSH
7698: LD_STRING DK-prison-found
7700: PPUSH
7701: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
7705: LD_EXP 14
7709: PPUSH
7710: LD_STRING DH-prison-found
7712: PPUSH
7713: CALL_OW 88
// DialogueOff ;
7717: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
7721: LD_EXP 18
7725: PPUSH
7726: LD_INT 2
7728: PPUSH
7729: CALL_OW 235
// prisonFound := true ;
7733: LD_ADDR_EXP 13
7737: PUSH
7738: LD_INT 1
7740: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
7741: LD_STRING O6_prison_out
7743: PPUSH
7744: CALL_OW 337
// end ;
7748: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) = 0 do var tmp ;
7749: LD_EXP 12
7753: PUSH
7754: LD_EXP 14
7758: PPUSH
7759: CALL_OW 302
7763: AND
7764: PUSH
7765: LD_INT 1
7767: PPUSH
7768: LD_INT 21
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 22
7780: PUSH
7781: LD_INT 2
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 71
7796: PUSH
7797: LD_INT 0
7799: EQUAL
7800: AND
7801: IFFALSE 8110
7803: GO 7805
7805: DISABLE
7806: LD_INT 0
7808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
7809: LD_ADDR_VAR 0 1
7813: PUSH
7814: LD_INT 22
7816: PUSH
7817: LD_INT 2
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 21
7826: PUSH
7827: LD_INT 1
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 69
7842: ST_TO_ADDR
// if prisonFound then
7843: LD_EXP 13
7847: IFFALSE 7861
// AddMedal ( med1 , 1 ) else
7849: LD_STRING med1
7851: PPUSH
7852: LD_INT 1
7854: PPUSH
7855: CALL_OW 101
7859: GO 7872
// AddMedal ( med1 , - 1 ) ;
7861: LD_STRING med1
7863: PPUSH
7864: LD_INT 1
7866: NEG
7867: PPUSH
7868: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
7872: LD_VAR 0 1
7876: PUSH
7877: LD_INT 3
7879: LESS
7880: PUSH
7881: LD_EXP 13
7885: NOT
7886: AND
7887: PUSH
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: PUSH
7897: LD_EXP 13
7901: AND
7902: OR
7903: IFFALSE 7918
// AddMedal ( med2 , - 1 ) else
7905: LD_STRING med2
7907: PPUSH
7908: LD_INT 1
7910: NEG
7911: PPUSH
7912: CALL_OW 101
7916: GO 7928
// AddMedal ( med2 , 1 ) ;
7918: LD_STRING med2
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
7928: LD_EXP 13
7932: PUSH
7933: LD_EXP 4
7937: AND
7938: PUSH
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 4
7946: GREATEREQUAL
7947: AND
7948: IFFALSE 7962
// AddMedal ( med3 , 1 ) else
7950: LD_STRING med3
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: CALL_OW 101
7960: GO 7973
// AddMedal ( med3 , - 1 ) ;
7962: LD_STRING med3
7964: PPUSH
7965: LD_INT 1
7967: NEG
7968: PPUSH
7969: CALL_OW 101
// GiveMedals ( MAIN ) ;
7973: LD_STRING MAIN
7975: PPUSH
7976: CALL_OW 102
// RewardPeople ( tmp ) ;
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
7989: LD_EXP 14
7993: PPUSH
7994: LD_STRING 01_Heike
7996: PPUSH
7997: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
8001: LD_EXP 16
8005: PPUSH
8006: CALL_OW 302
8010: PUSH
8011: LD_EXP 16
8015: PUSH
8016: LD_VAR 0 1
8020: IN
8021: AND
8022: IFFALSE 8036
// SaveCharacters ( Givi , 01_Givi ) ;
8024: LD_EXP 16
8028: PPUSH
8029: LD_STRING 01_Givi
8031: PPUSH
8032: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
8036: LD_EXP 17
8040: PPUSH
8041: CALL_OW 302
8045: PUSH
8046: LD_EXP 17
8050: PUSH
8051: LD_VAR 0 1
8055: IN
8056: AND
8057: IFFALSE 8071
// SaveCharacters ( Mike , 01_Mike ) ;
8059: LD_EXP 17
8063: PPUSH
8064: LD_STRING 01_Mike
8066: PPUSH
8067: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
8071: LD_EXP 18
8075: PPUSH
8076: CALL_OW 302
8080: PUSH
8081: LD_EXP 18
8085: PUSH
8086: LD_VAR 0 1
8090: IN
8091: AND
8092: IFFALSE 8106
// SaveCharacters ( Kamil , 01_Kamil ) ;
8094: LD_EXP 18
8098: PPUSH
8099: LD_STRING 01_Kamil
8101: PPUSH
8102: CALL_OW 38
// YouWin ;
8106: CALL_OW 103
// end ; end_of_file
8110: PPOPN 1
8112: END
// on UnitDestroyed ( un ) do begin if un = Heike then
8113: LD_VAR 0 1
8117: PUSH
8118: LD_EXP 14
8122: EQUAL
8123: IFFALSE 8132
// YouLost ( Heike ) ;
8125: LD_STRING Heike
8127: PPUSH
8128: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
8132: LD_VAR 0 1
8136: PUSH
8137: LD_INT 22
8139: PUSH
8140: LD_INT 3
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 25
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PPUSH
8161: CALL_OW 69
8165: IN
8166: IFFALSE 8272
// begin if un in russianPatrol then
8168: LD_VAR 0 1
8172: PUSH
8173: LD_EXP 19
8177: IN
8178: IFFALSE 8196
// russianPatrol := russianPatrol diff un ;
8180: LD_ADDR_EXP 19
8184: PUSH
8185: LD_EXP 19
8189: PUSH
8190: LD_VAR 0 1
8194: DIFF
8195: ST_TO_ADDR
// if un in russianForestPatrol then
8196: LD_VAR 0 1
8200: PUSH
8201: LD_EXP 20
8205: IN
8206: IFFALSE 8224
// russianForestPatrol := russianForestPatrol diff un ;
8208: LD_ADDR_EXP 20
8212: PUSH
8213: LD_EXP 20
8217: PUSH
8218: LD_VAR 0 1
8222: DIFF
8223: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
8224: LD_ADDR_EXP 5
8228: PUSH
8229: LD_EXP 5
8233: PPUSH
8234: LD_EXP 5
8238: PUSH
8239: LD_INT 1
8241: PLUS
8242: PPUSH
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL_OW 250
8252: PUSH
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL_OW 251
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PPUSH
8267: CALL_OW 1
8271: ST_TO_ADDR
// end ; end ;
8272: PPOPN 1
8274: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
8275: LD_VAR 0 1
8279: PUSH
8280: LD_EXP 14
8284: EQUAL
8285: IFFALSE 8294
// YouLost ( Heike ) ;
8287: LD_STRING Heike
8289: PPUSH
8290: CALL_OW 104
// end ;
8294: PPOPN 1
8296: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
8297: LD_VAR 0 1
8301: PUSH
8302: LD_INT 2
8304: PUSH
8305: LD_INT 5
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: IN
8312: PUSH
8313: LD_VAR 0 2
8317: PUSH
8318: LD_INT 5
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: IN
8328: AND
8329: IFFALSE 8338
// YouLost ( FriendlyFire ) ;
8331: LD_STRING FriendlyFire
8333: PPUSH
8334: CALL_OW 104
// end ; end_of_file
8338: PPOPN 2
8340: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8341: GO 8343
8343: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8344: LD_STRING initStreamRollete();
8346: PPUSH
8347: CALL_OW 559
// InitStreamMode ;
8351: CALL 8360 0 0
// DefineStreamItems ( ) ;
8355: CALL 8800 0 0
// end ;
8359: END
// function InitStreamMode ; begin
8360: LD_INT 0
8362: PPUSH
// streamModeActive := false ;
8363: LD_ADDR_EXP 24
8367: PUSH
8368: LD_INT 0
8370: ST_TO_ADDR
// normalCounter := 36 ;
8371: LD_ADDR_EXP 25
8375: PUSH
8376: LD_INT 36
8378: ST_TO_ADDR
// hardcoreCounter := 16 ;
8379: LD_ADDR_EXP 26
8383: PUSH
8384: LD_INT 16
8386: ST_TO_ADDR
// sRocket := false ;
8387: LD_ADDR_EXP 29
8391: PUSH
8392: LD_INT 0
8394: ST_TO_ADDR
// sSpeed := false ;
8395: LD_ADDR_EXP 28
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// sEngine := false ;
8403: LD_ADDR_EXP 30
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// sSpec := false ;
8411: LD_ADDR_EXP 27
8415: PUSH
8416: LD_INT 0
8418: ST_TO_ADDR
// sLevel := false ;
8419: LD_ADDR_EXP 31
8423: PUSH
8424: LD_INT 0
8426: ST_TO_ADDR
// sArmoury := false ;
8427: LD_ADDR_EXP 32
8431: PUSH
8432: LD_INT 0
8434: ST_TO_ADDR
// sRadar := false ;
8435: LD_ADDR_EXP 33
8439: PUSH
8440: LD_INT 0
8442: ST_TO_ADDR
// sBunker := false ;
8443: LD_ADDR_EXP 34
8447: PUSH
8448: LD_INT 0
8450: ST_TO_ADDR
// sHack := false ;
8451: LD_ADDR_EXP 35
8455: PUSH
8456: LD_INT 0
8458: ST_TO_ADDR
// sFire := false ;
8459: LD_ADDR_EXP 36
8463: PUSH
8464: LD_INT 0
8466: ST_TO_ADDR
// sRefresh := false ;
8467: LD_ADDR_EXP 37
8471: PUSH
8472: LD_INT 0
8474: ST_TO_ADDR
// sExp := false ;
8475: LD_ADDR_EXP 38
8479: PUSH
8480: LD_INT 0
8482: ST_TO_ADDR
// sDepot := false ;
8483: LD_ADDR_EXP 39
8487: PUSH
8488: LD_INT 0
8490: ST_TO_ADDR
// sFlag := false ;
8491: LD_ADDR_EXP 40
8495: PUSH
8496: LD_INT 0
8498: ST_TO_ADDR
// sKamikadze := false ;
8499: LD_ADDR_EXP 48
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// sTroll := false ;
8507: LD_ADDR_EXP 49
8511: PUSH
8512: LD_INT 0
8514: ST_TO_ADDR
// sSlow := false ;
8515: LD_ADDR_EXP 50
8519: PUSH
8520: LD_INT 0
8522: ST_TO_ADDR
// sLack := false ;
8523: LD_ADDR_EXP 51
8527: PUSH
8528: LD_INT 0
8530: ST_TO_ADDR
// sTank := false ;
8531: LD_ADDR_EXP 53
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// sRemote := false ;
8539: LD_ADDR_EXP 54
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// sPowell := false ;
8547: LD_ADDR_EXP 55
8551: PUSH
8552: LD_INT 0
8554: ST_TO_ADDR
// sTeleport := false ;
8555: LD_ADDR_EXP 58
8559: PUSH
8560: LD_INT 0
8562: ST_TO_ADDR
// sOilTower := false ;
8563: LD_ADDR_EXP 60
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// sShovel := false ;
8571: LD_ADDR_EXP 61
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// sSheik := false ;
8579: LD_ADDR_EXP 62
8583: PUSH
8584: LD_INT 0
8586: ST_TO_ADDR
// sEarthquake := false ;
8587: LD_ADDR_EXP 64
8591: PUSH
8592: LD_INT 0
8594: ST_TO_ADDR
// sAI := false ;
8595: LD_ADDR_EXP 65
8599: PUSH
8600: LD_INT 0
8602: ST_TO_ADDR
// sCargo := false ;
8603: LD_ADDR_EXP 68
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// sDLaser := false ;
8611: LD_ADDR_EXP 69
8615: PUSH
8616: LD_INT 0
8618: ST_TO_ADDR
// sExchange := false ;
8619: LD_ADDR_EXP 70
8623: PUSH
8624: LD_INT 0
8626: ST_TO_ADDR
// sFac := false ;
8627: LD_ADDR_EXP 71
8631: PUSH
8632: LD_INT 0
8634: ST_TO_ADDR
// sPower := false ;
8635: LD_ADDR_EXP 72
8639: PUSH
8640: LD_INT 0
8642: ST_TO_ADDR
// sRandom := false ;
8643: LD_ADDR_EXP 73
8647: PUSH
8648: LD_INT 0
8650: ST_TO_ADDR
// sShield := false ;
8651: LD_ADDR_EXP 74
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// sTime := false ;
8659: LD_ADDR_EXP 75
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// sTools := false ;
8667: LD_ADDR_EXP 76
8671: PUSH
8672: LD_INT 0
8674: ST_TO_ADDR
// sSold := false ;
8675: LD_ADDR_EXP 41
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// sDiff := false ;
8683: LD_ADDR_EXP 42
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// sFog := false ;
8691: LD_ADDR_EXP 45
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// sReset := false ;
8699: LD_ADDR_EXP 46
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// sSun := false ;
8707: LD_ADDR_EXP 47
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// sTiger := false ;
8715: LD_ADDR_EXP 43
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// sBomb := false ;
8723: LD_ADDR_EXP 44
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// sWound := false ;
8731: LD_ADDR_EXP 52
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// sBetray := false ;
8739: LD_ADDR_EXP 56
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// sContamin := false ;
8747: LD_ADDR_EXP 57
8751: PUSH
8752: LD_INT 0
8754: ST_TO_ADDR
// sOil := false ;
8755: LD_ADDR_EXP 59
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// sStu := false ;
8763: LD_ADDR_EXP 63
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// sBazooka := false ;
8771: LD_ADDR_EXP 66
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// sMortar := false ;
8779: LD_ADDR_EXP 67
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// sRanger := false ;
8787: LD_ADDR_EXP 77
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// end ;
8795: LD_VAR 0 1
8799: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8800: LD_INT 0
8802: PPUSH
8803: PPUSH
8804: PPUSH
8805: PPUSH
8806: PPUSH
// result := [ ] ;
8807: LD_ADDR_VAR 0 1
8811: PUSH
8812: EMPTY
8813: ST_TO_ADDR
// if campaign_id = 1 then
8814: LD_OWVAR 69
8818: PUSH
8819: LD_INT 1
8821: EQUAL
8822: IFFALSE 11760
// begin case mission_number of 1 :
8824: LD_OWVAR 70
8828: PUSH
8829: LD_INT 1
8831: DOUBLE
8832: EQUAL
8833: IFTRUE 8837
8835: GO 8901
8837: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8838: LD_ADDR_VAR 0 1
8842: PUSH
8843: LD_INT 2
8845: PUSH
8846: LD_INT 4
8848: PUSH
8849: LD_INT 11
8851: PUSH
8852: LD_INT 12
8854: PUSH
8855: LD_INT 15
8857: PUSH
8858: LD_INT 16
8860: PUSH
8861: LD_INT 22
8863: PUSH
8864: LD_INT 23
8866: PUSH
8867: LD_INT 26
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 101
8883: PUSH
8884: LD_INT 102
8886: PUSH
8887: LD_INT 106
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: ST_TO_ADDR
8899: GO 11758
8901: LD_INT 2
8903: DOUBLE
8904: EQUAL
8905: IFTRUE 8909
8907: GO 8981
8909: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8910: LD_ADDR_VAR 0 1
8914: PUSH
8915: LD_INT 2
8917: PUSH
8918: LD_INT 4
8920: PUSH
8921: LD_INT 11
8923: PUSH
8924: LD_INT 12
8926: PUSH
8927: LD_INT 15
8929: PUSH
8930: LD_INT 16
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 23
8938: PUSH
8939: LD_INT 26
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 101
8955: PUSH
8956: LD_INT 102
8958: PUSH
8959: LD_INT 105
8961: PUSH
8962: LD_INT 106
8964: PUSH
8965: LD_INT 108
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
8979: GO 11758
8981: LD_INT 3
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9065
8989: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8990: LD_ADDR_VAR 0 1
8994: PUSH
8995: LD_INT 2
8997: PUSH
8998: LD_INT 4
9000: PUSH
9001: LD_INT 5
9003: PUSH
9004: LD_INT 11
9006: PUSH
9007: LD_INT 12
9009: PUSH
9010: LD_INT 15
9012: PUSH
9013: LD_INT 16
9015: PUSH
9016: LD_INT 22
9018: PUSH
9019: LD_INT 26
9021: PUSH
9022: LD_INT 36
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 101
9039: PUSH
9040: LD_INT 102
9042: PUSH
9043: LD_INT 105
9045: PUSH
9046: LD_INT 106
9048: PUSH
9049: LD_INT 108
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: ST_TO_ADDR
9063: GO 11758
9065: LD_INT 4
9067: DOUBLE
9068: EQUAL
9069: IFTRUE 9073
9071: GO 9157
9073: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9074: LD_ADDR_VAR 0 1
9078: PUSH
9079: LD_INT 2
9081: PUSH
9082: LD_INT 4
9084: PUSH
9085: LD_INT 5
9087: PUSH
9088: LD_INT 8
9090: PUSH
9091: LD_INT 11
9093: PUSH
9094: LD_INT 12
9096: PUSH
9097: LD_INT 15
9099: PUSH
9100: LD_INT 16
9102: PUSH
9103: LD_INT 22
9105: PUSH
9106: LD_INT 23
9108: PUSH
9109: LD_INT 26
9111: PUSH
9112: LD_INT 36
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 101
9131: PUSH
9132: LD_INT 102
9134: PUSH
9135: LD_INT 105
9137: PUSH
9138: LD_INT 106
9140: PUSH
9141: LD_INT 108
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: ST_TO_ADDR
9155: GO 11758
9157: LD_INT 5
9159: DOUBLE
9160: EQUAL
9161: IFTRUE 9165
9163: GO 9265
9165: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9166: LD_ADDR_VAR 0 1
9170: PUSH
9171: LD_INT 2
9173: PUSH
9174: LD_INT 4
9176: PUSH
9177: LD_INT 5
9179: PUSH
9180: LD_INT 6
9182: PUSH
9183: LD_INT 8
9185: PUSH
9186: LD_INT 11
9188: PUSH
9189: LD_INT 12
9191: PUSH
9192: LD_INT 15
9194: PUSH
9195: LD_INT 16
9197: PUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 23
9203: PUSH
9204: LD_INT 25
9206: PUSH
9207: LD_INT 26
9209: PUSH
9210: LD_INT 36
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 101
9231: PUSH
9232: LD_INT 102
9234: PUSH
9235: LD_INT 105
9237: PUSH
9238: LD_INT 106
9240: PUSH
9241: LD_INT 108
9243: PUSH
9244: LD_INT 109
9246: PUSH
9247: LD_INT 112
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: ST_TO_ADDR
9263: GO 11758
9265: LD_INT 6
9267: DOUBLE
9268: EQUAL
9269: IFTRUE 9273
9271: GO 9393
9273: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9274: LD_ADDR_VAR 0 1
9278: PUSH
9279: LD_INT 2
9281: PUSH
9282: LD_INT 4
9284: PUSH
9285: LD_INT 5
9287: PUSH
9288: LD_INT 6
9290: PUSH
9291: LD_INT 8
9293: PUSH
9294: LD_INT 11
9296: PUSH
9297: LD_INT 12
9299: PUSH
9300: LD_INT 15
9302: PUSH
9303: LD_INT 16
9305: PUSH
9306: LD_INT 20
9308: PUSH
9309: LD_INT 21
9311: PUSH
9312: LD_INT 22
9314: PUSH
9315: LD_INT 23
9317: PUSH
9318: LD_INT 25
9320: PUSH
9321: LD_INT 26
9323: PUSH
9324: LD_INT 30
9326: PUSH
9327: LD_INT 31
9329: PUSH
9330: LD_INT 32
9332: PUSH
9333: LD_INT 36
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 101
9359: PUSH
9360: LD_INT 102
9362: PUSH
9363: LD_INT 105
9365: PUSH
9366: LD_INT 106
9368: PUSH
9369: LD_INT 108
9371: PUSH
9372: LD_INT 109
9374: PUSH
9375: LD_INT 112
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: ST_TO_ADDR
9391: GO 11758
9393: LD_INT 7
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9501
9401: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9402: LD_ADDR_VAR 0 1
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 4
9412: PUSH
9413: LD_INT 5
9415: PUSH
9416: LD_INT 7
9418: PUSH
9419: LD_INT 11
9421: PUSH
9422: LD_INT 12
9424: PUSH
9425: LD_INT 15
9427: PUSH
9428: LD_INT 16
9430: PUSH
9431: LD_INT 20
9433: PUSH
9434: LD_INT 21
9436: PUSH
9437: LD_INT 22
9439: PUSH
9440: LD_INT 23
9442: PUSH
9443: LD_INT 25
9445: PUSH
9446: LD_INT 26
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 101
9467: PUSH
9468: LD_INT 102
9470: PUSH
9471: LD_INT 103
9473: PUSH
9474: LD_INT 105
9476: PUSH
9477: LD_INT 106
9479: PUSH
9480: LD_INT 108
9482: PUSH
9483: LD_INT 112
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: ST_TO_ADDR
9499: GO 11758
9501: LD_INT 8
9503: DOUBLE
9504: EQUAL
9505: IFTRUE 9509
9507: GO 9637
9509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9510: LD_ADDR_VAR 0 1
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: LD_INT 4
9520: PUSH
9521: LD_INT 5
9523: PUSH
9524: LD_INT 6
9526: PUSH
9527: LD_INT 7
9529: PUSH
9530: LD_INT 8
9532: PUSH
9533: LD_INT 11
9535: PUSH
9536: LD_INT 12
9538: PUSH
9539: LD_INT 15
9541: PUSH
9542: LD_INT 16
9544: PUSH
9545: LD_INT 20
9547: PUSH
9548: LD_INT 21
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_INT 23
9556: PUSH
9557: LD_INT 25
9559: PUSH
9560: LD_INT 26
9562: PUSH
9563: LD_INT 30
9565: PUSH
9566: LD_INT 31
9568: PUSH
9569: LD_INT 32
9571: PUSH
9572: LD_INT 36
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 101
9599: PUSH
9600: LD_INT 102
9602: PUSH
9603: LD_INT 103
9605: PUSH
9606: LD_INT 105
9608: PUSH
9609: LD_INT 106
9611: PUSH
9612: LD_INT 108
9614: PUSH
9615: LD_INT 109
9617: PUSH
9618: LD_INT 112
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: ST_TO_ADDR
9635: GO 11758
9637: LD_INT 9
9639: DOUBLE
9640: EQUAL
9641: IFTRUE 9645
9643: GO 9781
9645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9646: LD_ADDR_VAR 0 1
9650: PUSH
9651: LD_INT 2
9653: PUSH
9654: LD_INT 4
9656: PUSH
9657: LD_INT 5
9659: PUSH
9660: LD_INT 6
9662: PUSH
9663: LD_INT 7
9665: PUSH
9666: LD_INT 8
9668: PUSH
9669: LD_INT 11
9671: PUSH
9672: LD_INT 12
9674: PUSH
9675: LD_INT 15
9677: PUSH
9678: LD_INT 16
9680: PUSH
9681: LD_INT 20
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_INT 23
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 26
9698: PUSH
9699: LD_INT 28
9701: PUSH
9702: LD_INT 30
9704: PUSH
9705: LD_INT 31
9707: PUSH
9708: LD_INT 32
9710: PUSH
9711: LD_INT 36
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 101
9739: PUSH
9740: LD_INT 102
9742: PUSH
9743: LD_INT 103
9745: PUSH
9746: LD_INT 105
9748: PUSH
9749: LD_INT 106
9751: PUSH
9752: LD_INT 108
9754: PUSH
9755: LD_INT 109
9757: PUSH
9758: LD_INT 112
9760: PUSH
9761: LD_INT 114
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: ST_TO_ADDR
9779: GO 11758
9781: LD_INT 10
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9973
9789: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9790: LD_ADDR_VAR 0 1
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 4
9800: PUSH
9801: LD_INT 5
9803: PUSH
9804: LD_INT 6
9806: PUSH
9807: LD_INT 7
9809: PUSH
9810: LD_INT 8
9812: PUSH
9813: LD_INT 9
9815: PUSH
9816: LD_INT 10
9818: PUSH
9819: LD_INT 11
9821: PUSH
9822: LD_INT 12
9824: PUSH
9825: LD_INT 13
9827: PUSH
9828: LD_INT 14
9830: PUSH
9831: LD_INT 15
9833: PUSH
9834: LD_INT 16
9836: PUSH
9837: LD_INT 17
9839: PUSH
9840: LD_INT 18
9842: PUSH
9843: LD_INT 19
9845: PUSH
9846: LD_INT 20
9848: PUSH
9849: LD_INT 21
9851: PUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 23
9857: PUSH
9858: LD_INT 24
9860: PUSH
9861: LD_INT 25
9863: PUSH
9864: LD_INT 26
9866: PUSH
9867: LD_INT 28
9869: PUSH
9870: LD_INT 30
9872: PUSH
9873: LD_INT 31
9875: PUSH
9876: LD_INT 32
9878: PUSH
9879: LD_INT 36
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 101
9915: PUSH
9916: LD_INT 102
9918: PUSH
9919: LD_INT 103
9921: PUSH
9922: LD_INT 104
9924: PUSH
9925: LD_INT 105
9927: PUSH
9928: LD_INT 106
9930: PUSH
9931: LD_INT 107
9933: PUSH
9934: LD_INT 108
9936: PUSH
9937: LD_INT 109
9939: PUSH
9940: LD_INT 110
9942: PUSH
9943: LD_INT 111
9945: PUSH
9946: LD_INT 112
9948: PUSH
9949: LD_INT 114
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: ST_TO_ADDR
9971: GO 11758
9973: LD_INT 11
9975: DOUBLE
9976: EQUAL
9977: IFTRUE 9981
9979: GO 10173
9981: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9982: LD_ADDR_VAR 0 1
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: LD_INT 3
9992: PUSH
9993: LD_INT 4
9995: PUSH
9996: LD_INT 5
9998: PUSH
9999: LD_INT 6
10001: PUSH
10002: LD_INT 7
10004: PUSH
10005: LD_INT 8
10007: PUSH
10008: LD_INT 9
10010: PUSH
10011: LD_INT 10
10013: PUSH
10014: LD_INT 11
10016: PUSH
10017: LD_INT 12
10019: PUSH
10020: LD_INT 13
10022: PUSH
10023: LD_INT 14
10025: PUSH
10026: LD_INT 15
10028: PUSH
10029: LD_INT 16
10031: PUSH
10032: LD_INT 17
10034: PUSH
10035: LD_INT 18
10037: PUSH
10038: LD_INT 19
10040: PUSH
10041: LD_INT 20
10043: PUSH
10044: LD_INT 21
10046: PUSH
10047: LD_INT 22
10049: PUSH
10050: LD_INT 23
10052: PUSH
10053: LD_INT 24
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 26
10061: PUSH
10062: LD_INT 28
10064: PUSH
10065: LD_INT 30
10067: PUSH
10068: LD_INT 31
10070: PUSH
10071: LD_INT 32
10073: PUSH
10074: LD_INT 34
10076: PUSH
10077: LD_INT 36
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 101
10115: PUSH
10116: LD_INT 102
10118: PUSH
10119: LD_INT 103
10121: PUSH
10122: LD_INT 104
10124: PUSH
10125: LD_INT 105
10127: PUSH
10128: LD_INT 106
10130: PUSH
10131: LD_INT 107
10133: PUSH
10134: LD_INT 108
10136: PUSH
10137: LD_INT 109
10139: PUSH
10140: LD_INT 110
10142: PUSH
10143: LD_INT 111
10145: PUSH
10146: LD_INT 112
10148: PUSH
10149: LD_INT 114
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: ST_TO_ADDR
10171: GO 11758
10173: LD_INT 12
10175: DOUBLE
10176: EQUAL
10177: IFTRUE 10181
10179: GO 10389
10181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10182: LD_ADDR_VAR 0 1
10186: PUSH
10187: LD_INT 1
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: LD_INT 3
10195: PUSH
10196: LD_INT 4
10198: PUSH
10199: LD_INT 5
10201: PUSH
10202: LD_INT 6
10204: PUSH
10205: LD_INT 7
10207: PUSH
10208: LD_INT 8
10210: PUSH
10211: LD_INT 9
10213: PUSH
10214: LD_INT 10
10216: PUSH
10217: LD_INT 11
10219: PUSH
10220: LD_INT 12
10222: PUSH
10223: LD_INT 13
10225: PUSH
10226: LD_INT 14
10228: PUSH
10229: LD_INT 15
10231: PUSH
10232: LD_INT 16
10234: PUSH
10235: LD_INT 17
10237: PUSH
10238: LD_INT 18
10240: PUSH
10241: LD_INT 19
10243: PUSH
10244: LD_INT 20
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 22
10252: PUSH
10253: LD_INT 23
10255: PUSH
10256: LD_INT 24
10258: PUSH
10259: LD_INT 25
10261: PUSH
10262: LD_INT 26
10264: PUSH
10265: LD_INT 27
10267: PUSH
10268: LD_INT 28
10270: PUSH
10271: LD_INT 30
10273: PUSH
10274: LD_INT 31
10276: PUSH
10277: LD_INT 32
10279: PUSH
10280: LD_INT 33
10282: PUSH
10283: LD_INT 34
10285: PUSH
10286: LD_INT 36
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 101
10327: PUSH
10328: LD_INT 102
10330: PUSH
10331: LD_INT 103
10333: PUSH
10334: LD_INT 104
10336: PUSH
10337: LD_INT 105
10339: PUSH
10340: LD_INT 106
10342: PUSH
10343: LD_INT 107
10345: PUSH
10346: LD_INT 108
10348: PUSH
10349: LD_INT 109
10351: PUSH
10352: LD_INT 110
10354: PUSH
10355: LD_INT 111
10357: PUSH
10358: LD_INT 112
10360: PUSH
10361: LD_INT 113
10363: PUSH
10364: LD_INT 114
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: ST_TO_ADDR
10387: GO 11758
10389: LD_INT 13
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10593
10397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10398: LD_ADDR_VAR 0 1
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: LD_INT 2
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: LD_INT 4
10414: PUSH
10415: LD_INT 5
10417: PUSH
10418: LD_INT 8
10420: PUSH
10421: LD_INT 9
10423: PUSH
10424: LD_INT 10
10426: PUSH
10427: LD_INT 11
10429: PUSH
10430: LD_INT 12
10432: PUSH
10433: LD_INT 14
10435: PUSH
10436: LD_INT 15
10438: PUSH
10439: LD_INT 16
10441: PUSH
10442: LD_INT 17
10444: PUSH
10445: LD_INT 18
10447: PUSH
10448: LD_INT 19
10450: PUSH
10451: LD_INT 20
10453: PUSH
10454: LD_INT 21
10456: PUSH
10457: LD_INT 22
10459: PUSH
10460: LD_INT 23
10462: PUSH
10463: LD_INT 24
10465: PUSH
10466: LD_INT 25
10468: PUSH
10469: LD_INT 26
10471: PUSH
10472: LD_INT 27
10474: PUSH
10475: LD_INT 28
10477: PUSH
10478: LD_INT 30
10480: PUSH
10481: LD_INT 31
10483: PUSH
10484: LD_INT 32
10486: PUSH
10487: LD_INT 33
10489: PUSH
10490: LD_INT 34
10492: PUSH
10493: LD_INT 36
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 101
10531: PUSH
10532: LD_INT 102
10534: PUSH
10535: LD_INT 103
10537: PUSH
10538: LD_INT 104
10540: PUSH
10541: LD_INT 105
10543: PUSH
10544: LD_INT 106
10546: PUSH
10547: LD_INT 107
10549: PUSH
10550: LD_INT 108
10552: PUSH
10553: LD_INT 109
10555: PUSH
10556: LD_INT 110
10558: PUSH
10559: LD_INT 111
10561: PUSH
10562: LD_INT 112
10564: PUSH
10565: LD_INT 113
10567: PUSH
10568: LD_INT 114
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: ST_TO_ADDR
10591: GO 11758
10593: LD_INT 14
10595: DOUBLE
10596: EQUAL
10597: IFTRUE 10601
10599: GO 10813
10601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10602: LD_ADDR_VAR 0 1
10606: PUSH
10607: LD_INT 1
10609: PUSH
10610: LD_INT 2
10612: PUSH
10613: LD_INT 3
10615: PUSH
10616: LD_INT 4
10618: PUSH
10619: LD_INT 5
10621: PUSH
10622: LD_INT 6
10624: PUSH
10625: LD_INT 7
10627: PUSH
10628: LD_INT 8
10630: PUSH
10631: LD_INT 9
10633: PUSH
10634: LD_INT 10
10636: PUSH
10637: LD_INT 11
10639: PUSH
10640: LD_INT 12
10642: PUSH
10643: LD_INT 13
10645: PUSH
10646: LD_INT 14
10648: PUSH
10649: LD_INT 15
10651: PUSH
10652: LD_INT 16
10654: PUSH
10655: LD_INT 17
10657: PUSH
10658: LD_INT 18
10660: PUSH
10661: LD_INT 19
10663: PUSH
10664: LD_INT 20
10666: PUSH
10667: LD_INT 21
10669: PUSH
10670: LD_INT 22
10672: PUSH
10673: LD_INT 23
10675: PUSH
10676: LD_INT 24
10678: PUSH
10679: LD_INT 25
10681: PUSH
10682: LD_INT 26
10684: PUSH
10685: LD_INT 27
10687: PUSH
10688: LD_INT 28
10690: PUSH
10691: LD_INT 29
10693: PUSH
10694: LD_INT 30
10696: PUSH
10697: LD_INT 31
10699: PUSH
10700: LD_INT 32
10702: PUSH
10703: LD_INT 33
10705: PUSH
10706: LD_INT 34
10708: PUSH
10709: LD_INT 36
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 101
10751: PUSH
10752: LD_INT 102
10754: PUSH
10755: LD_INT 103
10757: PUSH
10758: LD_INT 104
10760: PUSH
10761: LD_INT 105
10763: PUSH
10764: LD_INT 106
10766: PUSH
10767: LD_INT 107
10769: PUSH
10770: LD_INT 108
10772: PUSH
10773: LD_INT 109
10775: PUSH
10776: LD_INT 110
10778: PUSH
10779: LD_INT 111
10781: PUSH
10782: LD_INT 112
10784: PUSH
10785: LD_INT 113
10787: PUSH
10788: LD_INT 114
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: ST_TO_ADDR
10811: GO 11758
10813: LD_INT 15
10815: DOUBLE
10816: EQUAL
10817: IFTRUE 10821
10819: GO 11033
10821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10822: LD_ADDR_VAR 0 1
10826: PUSH
10827: LD_INT 1
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: LD_INT 3
10835: PUSH
10836: LD_INT 4
10838: PUSH
10839: LD_INT 5
10841: PUSH
10842: LD_INT 6
10844: PUSH
10845: LD_INT 7
10847: PUSH
10848: LD_INT 8
10850: PUSH
10851: LD_INT 9
10853: PUSH
10854: LD_INT 10
10856: PUSH
10857: LD_INT 11
10859: PUSH
10860: LD_INT 12
10862: PUSH
10863: LD_INT 13
10865: PUSH
10866: LD_INT 14
10868: PUSH
10869: LD_INT 15
10871: PUSH
10872: LD_INT 16
10874: PUSH
10875: LD_INT 17
10877: PUSH
10878: LD_INT 18
10880: PUSH
10881: LD_INT 19
10883: PUSH
10884: LD_INT 20
10886: PUSH
10887: LD_INT 21
10889: PUSH
10890: LD_INT 22
10892: PUSH
10893: LD_INT 23
10895: PUSH
10896: LD_INT 24
10898: PUSH
10899: LD_INT 25
10901: PUSH
10902: LD_INT 26
10904: PUSH
10905: LD_INT 27
10907: PUSH
10908: LD_INT 28
10910: PUSH
10911: LD_INT 29
10913: PUSH
10914: LD_INT 30
10916: PUSH
10917: LD_INT 31
10919: PUSH
10920: LD_INT 32
10922: PUSH
10923: LD_INT 33
10925: PUSH
10926: LD_INT 34
10928: PUSH
10929: LD_INT 36
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 101
10971: PUSH
10972: LD_INT 102
10974: PUSH
10975: LD_INT 103
10977: PUSH
10978: LD_INT 104
10980: PUSH
10981: LD_INT 105
10983: PUSH
10984: LD_INT 106
10986: PUSH
10987: LD_INT 107
10989: PUSH
10990: LD_INT 108
10992: PUSH
10993: LD_INT 109
10995: PUSH
10996: LD_INT 110
10998: PUSH
10999: LD_INT 111
11001: PUSH
11002: LD_INT 112
11004: PUSH
11005: LD_INT 113
11007: PUSH
11008: LD_INT 114
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: ST_TO_ADDR
11031: GO 11758
11033: LD_INT 16
11035: DOUBLE
11036: EQUAL
11037: IFTRUE 11041
11039: GO 11165
11041: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11042: LD_ADDR_VAR 0 1
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: LD_INT 4
11052: PUSH
11053: LD_INT 5
11055: PUSH
11056: LD_INT 7
11058: PUSH
11059: LD_INT 11
11061: PUSH
11062: LD_INT 12
11064: PUSH
11065: LD_INT 15
11067: PUSH
11068: LD_INT 16
11070: PUSH
11071: LD_INT 20
11073: PUSH
11074: LD_INT 21
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 23
11082: PUSH
11083: LD_INT 25
11085: PUSH
11086: LD_INT 26
11088: PUSH
11089: LD_INT 30
11091: PUSH
11092: LD_INT 31
11094: PUSH
11095: LD_INT 32
11097: PUSH
11098: LD_INT 33
11100: PUSH
11101: LD_INT 34
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 101
11127: PUSH
11128: LD_INT 102
11130: PUSH
11131: LD_INT 103
11133: PUSH
11134: LD_INT 106
11136: PUSH
11137: LD_INT 108
11139: PUSH
11140: LD_INT 112
11142: PUSH
11143: LD_INT 113
11145: PUSH
11146: LD_INT 114
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: ST_TO_ADDR
11163: GO 11758
11165: LD_INT 17
11167: DOUBLE
11168: EQUAL
11169: IFTRUE 11173
11171: GO 11385
11173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11174: LD_ADDR_VAR 0 1
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: LD_INT 2
11184: PUSH
11185: LD_INT 3
11187: PUSH
11188: LD_INT 4
11190: PUSH
11191: LD_INT 5
11193: PUSH
11194: LD_INT 6
11196: PUSH
11197: LD_INT 7
11199: PUSH
11200: LD_INT 8
11202: PUSH
11203: LD_INT 9
11205: PUSH
11206: LD_INT 10
11208: PUSH
11209: LD_INT 11
11211: PUSH
11212: LD_INT 12
11214: PUSH
11215: LD_INT 13
11217: PUSH
11218: LD_INT 14
11220: PUSH
11221: LD_INT 15
11223: PUSH
11224: LD_INT 16
11226: PUSH
11227: LD_INT 17
11229: PUSH
11230: LD_INT 18
11232: PUSH
11233: LD_INT 19
11235: PUSH
11236: LD_INT 20
11238: PUSH
11239: LD_INT 21
11241: PUSH
11242: LD_INT 22
11244: PUSH
11245: LD_INT 23
11247: PUSH
11248: LD_INT 24
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 26
11256: PUSH
11257: LD_INT 27
11259: PUSH
11260: LD_INT 28
11262: PUSH
11263: LD_INT 29
11265: PUSH
11266: LD_INT 30
11268: PUSH
11269: LD_INT 31
11271: PUSH
11272: LD_INT 32
11274: PUSH
11275: LD_INT 33
11277: PUSH
11278: LD_INT 34
11280: PUSH
11281: LD_INT 36
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 101
11323: PUSH
11324: LD_INT 102
11326: PUSH
11327: LD_INT 103
11329: PUSH
11330: LD_INT 104
11332: PUSH
11333: LD_INT 105
11335: PUSH
11336: LD_INT 106
11338: PUSH
11339: LD_INT 107
11341: PUSH
11342: LD_INT 108
11344: PUSH
11345: LD_INT 109
11347: PUSH
11348: LD_INT 110
11350: PUSH
11351: LD_INT 111
11353: PUSH
11354: LD_INT 112
11356: PUSH
11357: LD_INT 113
11359: PUSH
11360: LD_INT 114
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: ST_TO_ADDR
11383: GO 11758
11385: LD_INT 18
11387: DOUBLE
11388: EQUAL
11389: IFTRUE 11393
11391: GO 11529
11393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: LD_INT 2
11401: PUSH
11402: LD_INT 4
11404: PUSH
11405: LD_INT 5
11407: PUSH
11408: LD_INT 7
11410: PUSH
11411: LD_INT 11
11413: PUSH
11414: LD_INT 12
11416: PUSH
11417: LD_INT 15
11419: PUSH
11420: LD_INT 16
11422: PUSH
11423: LD_INT 20
11425: PUSH
11426: LD_INT 21
11428: PUSH
11429: LD_INT 22
11431: PUSH
11432: LD_INT 23
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 26
11440: PUSH
11441: LD_INT 30
11443: PUSH
11444: LD_INT 31
11446: PUSH
11447: LD_INT 32
11449: PUSH
11450: LD_INT 33
11452: PUSH
11453: LD_INT 34
11455: PUSH
11456: LD_INT 35
11458: PUSH
11459: LD_INT 36
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 101
11487: PUSH
11488: LD_INT 102
11490: PUSH
11491: LD_INT 103
11493: PUSH
11494: LD_INT 106
11496: PUSH
11497: LD_INT 108
11499: PUSH
11500: LD_INT 112
11502: PUSH
11503: LD_INT 113
11505: PUSH
11506: LD_INT 114
11508: PUSH
11509: LD_INT 115
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: ST_TO_ADDR
11527: GO 11758
11529: LD_INT 19
11531: DOUBLE
11532: EQUAL
11533: IFTRUE 11537
11535: GO 11757
11537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: LD_INT 4
11554: PUSH
11555: LD_INT 5
11557: PUSH
11558: LD_INT 6
11560: PUSH
11561: LD_INT 7
11563: PUSH
11564: LD_INT 8
11566: PUSH
11567: LD_INT 9
11569: PUSH
11570: LD_INT 10
11572: PUSH
11573: LD_INT 11
11575: PUSH
11576: LD_INT 12
11578: PUSH
11579: LD_INT 13
11581: PUSH
11582: LD_INT 14
11584: PUSH
11585: LD_INT 15
11587: PUSH
11588: LD_INT 16
11590: PUSH
11591: LD_INT 17
11593: PUSH
11594: LD_INT 18
11596: PUSH
11597: LD_INT 19
11599: PUSH
11600: LD_INT 20
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 22
11608: PUSH
11609: LD_INT 23
11611: PUSH
11612: LD_INT 24
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 26
11620: PUSH
11621: LD_INT 27
11623: PUSH
11624: LD_INT 28
11626: PUSH
11627: LD_INT 29
11629: PUSH
11630: LD_INT 30
11632: PUSH
11633: LD_INT 31
11635: PUSH
11636: LD_INT 32
11638: PUSH
11639: LD_INT 33
11641: PUSH
11642: LD_INT 34
11644: PUSH
11645: LD_INT 35
11647: PUSH
11648: LD_INT 36
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 101
11691: PUSH
11692: LD_INT 102
11694: PUSH
11695: LD_INT 103
11697: PUSH
11698: LD_INT 104
11700: PUSH
11701: LD_INT 105
11703: PUSH
11704: LD_INT 106
11706: PUSH
11707: LD_INT 107
11709: PUSH
11710: LD_INT 108
11712: PUSH
11713: LD_INT 109
11715: PUSH
11716: LD_INT 110
11718: PUSH
11719: LD_INT 111
11721: PUSH
11722: LD_INT 112
11724: PUSH
11725: LD_INT 113
11727: PUSH
11728: LD_INT 114
11730: PUSH
11731: LD_INT 115
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: ST_TO_ADDR
11755: GO 11758
11757: POP
// end else
11758: GO 11795
// if campaign_id = 5 then
11760: LD_OWVAR 69
11764: PUSH
11765: LD_INT 5
11767: EQUAL
11768: IFFALSE 11795
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
11770: LD_ADDR_VAR 0 1
11774: PUSH
11775: LD_INT 1
11777: PUSH
11778: LD_INT 2
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 100
11787: PUSH
11788: EMPTY
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: ST_TO_ADDR
// end ; if result then
11795: LD_VAR 0 1
11799: IFFALSE 12088
// begin normal :=  ;
11801: LD_ADDR_VAR 0 3
11805: PUSH
11806: LD_STRING 
11808: ST_TO_ADDR
// hardcore :=  ;
11809: LD_ADDR_VAR 0 4
11813: PUSH
11814: LD_STRING 
11816: ST_TO_ADDR
// for i = 1 to normalCounter do
11817: LD_ADDR_VAR 0 5
11821: PUSH
11822: DOUBLE
11823: LD_INT 1
11825: DEC
11826: ST_TO_ADDR
11827: LD_EXP 25
11831: PUSH
11832: FOR_TO
11833: IFFALSE 11934
// begin tmp := 0 ;
11835: LD_ADDR_VAR 0 2
11839: PUSH
11840: LD_STRING 0
11842: ST_TO_ADDR
// if result [ 1 ] then
11843: LD_VAR 0 1
11847: PUSH
11848: LD_INT 1
11850: ARRAY
11851: IFFALSE 11916
// if result [ 1 ] [ 1 ] = i then
11853: LD_VAR 0 1
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: PUSH
11862: LD_INT 1
11864: ARRAY
11865: PUSH
11866: LD_VAR 0 5
11870: EQUAL
11871: IFFALSE 11916
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11873: LD_ADDR_VAR 0 1
11877: PUSH
11878: LD_VAR 0 1
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: LD_VAR 0 1
11890: PUSH
11891: LD_INT 1
11893: ARRAY
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 3
11902: PPUSH
11903: CALL_OW 1
11907: ST_TO_ADDR
// tmp := 1 ;
11908: LD_ADDR_VAR 0 2
11912: PUSH
11913: LD_STRING 1
11915: ST_TO_ADDR
// end ; normal := normal & tmp ;
11916: LD_ADDR_VAR 0 3
11920: PUSH
11921: LD_VAR 0 3
11925: PUSH
11926: LD_VAR 0 2
11930: STR
11931: ST_TO_ADDR
// end ;
11932: GO 11832
11934: POP
11935: POP
// for i = 1 to hardcoreCounter do
11936: LD_ADDR_VAR 0 5
11940: PUSH
11941: DOUBLE
11942: LD_INT 1
11944: DEC
11945: ST_TO_ADDR
11946: LD_EXP 26
11950: PUSH
11951: FOR_TO
11952: IFFALSE 12057
// begin tmp := 0 ;
11954: LD_ADDR_VAR 0 2
11958: PUSH
11959: LD_STRING 0
11961: ST_TO_ADDR
// if result [ 2 ] then
11962: LD_VAR 0 1
11966: PUSH
11967: LD_INT 2
11969: ARRAY
11970: IFFALSE 12039
// if result [ 2 ] [ 1 ] = 100 + i then
11972: LD_VAR 0 1
11976: PUSH
11977: LD_INT 2
11979: ARRAY
11980: PUSH
11981: LD_INT 1
11983: ARRAY
11984: PUSH
11985: LD_INT 100
11987: PUSH
11988: LD_VAR 0 5
11992: PLUS
11993: EQUAL
11994: IFFALSE 12039
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11996: LD_ADDR_VAR 0 1
12000: PUSH
12001: LD_VAR 0 1
12005: PPUSH
12006: LD_INT 2
12008: PPUSH
12009: LD_VAR 0 1
12013: PUSH
12014: LD_INT 2
12016: ARRAY
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: CALL_OW 3
12025: PPUSH
12026: CALL_OW 1
12030: ST_TO_ADDR
// tmp := 1 ;
12031: LD_ADDR_VAR 0 2
12035: PUSH
12036: LD_STRING 1
12038: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12039: LD_ADDR_VAR 0 4
12043: PUSH
12044: LD_VAR 0 4
12048: PUSH
12049: LD_VAR 0 2
12053: STR
12054: ST_TO_ADDR
// end ;
12055: GO 11951
12057: POP
12058: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12059: LD_STRING getStreamItemsFromMission("
12061: PUSH
12062: LD_VAR 0 3
12066: STR
12067: PUSH
12068: LD_STRING ","
12070: STR
12071: PUSH
12072: LD_VAR 0 4
12076: STR
12077: PUSH
12078: LD_STRING ")
12080: STR
12081: PPUSH
12082: CALL_OW 559
// end else
12086: GO 12095
// ToLua ( getStreamItemsFromMission("","") ) ;
12088: LD_STRING getStreamItemsFromMission("","")
12090: PPUSH
12091: CALL_OW 559
// end ;
12095: LD_VAR 0 1
12099: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12100: LD_VAR 0 2
12104: PUSH
12105: LD_INT 100
12107: EQUAL
12108: IFFALSE 13057
// begin if not StreamModeActive then
12110: LD_EXP 24
12114: NOT
12115: IFFALSE 12125
// StreamModeActive := true ;
12117: LD_ADDR_EXP 24
12121: PUSH
12122: LD_INT 1
12124: ST_TO_ADDR
// if p3 = 0 then
12125: LD_VAR 0 3
12129: PUSH
12130: LD_INT 0
12132: EQUAL
12133: IFFALSE 12139
// InitStreamMode ;
12135: CALL 8360 0 0
// if p3 = 1 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 1
12146: EQUAL
12147: IFFALSE 12157
// sRocket := true ;
12149: LD_ADDR_EXP 29
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 2 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 2
12164: EQUAL
12165: IFFALSE 12175
// sSpeed := true ;
12167: LD_ADDR_EXP 28
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 3 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 3
12182: EQUAL
12183: IFFALSE 12193
// sEngine := true ;
12185: LD_ADDR_EXP 30
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 4 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 4
12200: EQUAL
12201: IFFALSE 12211
// sSpec := true ;
12203: LD_ADDR_EXP 27
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// if p3 = 5 then
12211: LD_VAR 0 3
12215: PUSH
12216: LD_INT 5
12218: EQUAL
12219: IFFALSE 12229
// sLevel := true ;
12221: LD_ADDR_EXP 31
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if p3 = 6 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 6
12236: EQUAL
12237: IFFALSE 12247
// sArmoury := true ;
12239: LD_ADDR_EXP 32
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 7 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 7
12254: EQUAL
12255: IFFALSE 12265
// sRadar := true ;
12257: LD_ADDR_EXP 33
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// if p3 = 8 then
12265: LD_VAR 0 3
12269: PUSH
12270: LD_INT 8
12272: EQUAL
12273: IFFALSE 12283
// sBunker := true ;
12275: LD_ADDR_EXP 34
12279: PUSH
12280: LD_INT 1
12282: ST_TO_ADDR
// if p3 = 9 then
12283: LD_VAR 0 3
12287: PUSH
12288: LD_INT 9
12290: EQUAL
12291: IFFALSE 12301
// sHack := true ;
12293: LD_ADDR_EXP 35
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if p3 = 10 then
12301: LD_VAR 0 3
12305: PUSH
12306: LD_INT 10
12308: EQUAL
12309: IFFALSE 12319
// sFire := true ;
12311: LD_ADDR_EXP 36
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// if p3 = 11 then
12319: LD_VAR 0 3
12323: PUSH
12324: LD_INT 11
12326: EQUAL
12327: IFFALSE 12337
// sRefresh := true ;
12329: LD_ADDR_EXP 37
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// if p3 = 12 then
12337: LD_VAR 0 3
12341: PUSH
12342: LD_INT 12
12344: EQUAL
12345: IFFALSE 12355
// sExp := true ;
12347: LD_ADDR_EXP 38
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// if p3 = 13 then
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 13
12362: EQUAL
12363: IFFALSE 12373
// sDepot := true ;
12365: LD_ADDR_EXP 39
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// if p3 = 14 then
12373: LD_VAR 0 3
12377: PUSH
12378: LD_INT 14
12380: EQUAL
12381: IFFALSE 12391
// sFlag := true ;
12383: LD_ADDR_EXP 40
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// if p3 = 15 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 15
12398: EQUAL
12399: IFFALSE 12409
// sKamikadze := true ;
12401: LD_ADDR_EXP 48
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// if p3 = 16 then
12409: LD_VAR 0 3
12413: PUSH
12414: LD_INT 16
12416: EQUAL
12417: IFFALSE 12427
// sTroll := true ;
12419: LD_ADDR_EXP 49
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 17 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 17
12434: EQUAL
12435: IFFALSE 12445
// sSlow := true ;
12437: LD_ADDR_EXP 50
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// if p3 = 18 then
12445: LD_VAR 0 3
12449: PUSH
12450: LD_INT 18
12452: EQUAL
12453: IFFALSE 12463
// sLack := true ;
12455: LD_ADDR_EXP 51
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// if p3 = 19 then
12463: LD_VAR 0 3
12467: PUSH
12468: LD_INT 19
12470: EQUAL
12471: IFFALSE 12481
// sTank := true ;
12473: LD_ADDR_EXP 53
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// if p3 = 20 then
12481: LD_VAR 0 3
12485: PUSH
12486: LD_INT 20
12488: EQUAL
12489: IFFALSE 12499
// sRemote := true ;
12491: LD_ADDR_EXP 54
12495: PUSH
12496: LD_INT 1
12498: ST_TO_ADDR
// if p3 = 21 then
12499: LD_VAR 0 3
12503: PUSH
12504: LD_INT 21
12506: EQUAL
12507: IFFALSE 12517
// sPowell := true ;
12509: LD_ADDR_EXP 55
12513: PUSH
12514: LD_INT 1
12516: ST_TO_ADDR
// if p3 = 22 then
12517: LD_VAR 0 3
12521: PUSH
12522: LD_INT 22
12524: EQUAL
12525: IFFALSE 12535
// sTeleport := true ;
12527: LD_ADDR_EXP 58
12531: PUSH
12532: LD_INT 1
12534: ST_TO_ADDR
// if p3 = 23 then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 23
12542: EQUAL
12543: IFFALSE 12553
// sOilTower := true ;
12545: LD_ADDR_EXP 60
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
// if p3 = 24 then
12553: LD_VAR 0 3
12557: PUSH
12558: LD_INT 24
12560: EQUAL
12561: IFFALSE 12571
// sShovel := true ;
12563: LD_ADDR_EXP 61
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// if p3 = 25 then
12571: LD_VAR 0 3
12575: PUSH
12576: LD_INT 25
12578: EQUAL
12579: IFFALSE 12589
// sSheik := true ;
12581: LD_ADDR_EXP 62
12585: PUSH
12586: LD_INT 1
12588: ST_TO_ADDR
// if p3 = 26 then
12589: LD_VAR 0 3
12593: PUSH
12594: LD_INT 26
12596: EQUAL
12597: IFFALSE 12607
// sEarthquake := true ;
12599: LD_ADDR_EXP 64
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// if p3 = 27 then
12607: LD_VAR 0 3
12611: PUSH
12612: LD_INT 27
12614: EQUAL
12615: IFFALSE 12625
// sAI := true ;
12617: LD_ADDR_EXP 65
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// if p3 = 28 then
12625: LD_VAR 0 3
12629: PUSH
12630: LD_INT 28
12632: EQUAL
12633: IFFALSE 12643
// sCargo := true ;
12635: LD_ADDR_EXP 68
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// if p3 = 29 then
12643: LD_VAR 0 3
12647: PUSH
12648: LD_INT 29
12650: EQUAL
12651: IFFALSE 12661
// sDLaser := true ;
12653: LD_ADDR_EXP 69
12657: PUSH
12658: LD_INT 1
12660: ST_TO_ADDR
// if p3 = 30 then
12661: LD_VAR 0 3
12665: PUSH
12666: LD_INT 30
12668: EQUAL
12669: IFFALSE 12679
// sExchange := true ;
12671: LD_ADDR_EXP 70
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// if p3 = 31 then
12679: LD_VAR 0 3
12683: PUSH
12684: LD_INT 31
12686: EQUAL
12687: IFFALSE 12697
// sFac := true ;
12689: LD_ADDR_EXP 71
12693: PUSH
12694: LD_INT 1
12696: ST_TO_ADDR
// if p3 = 32 then
12697: LD_VAR 0 3
12701: PUSH
12702: LD_INT 32
12704: EQUAL
12705: IFFALSE 12715
// sPower := true ;
12707: LD_ADDR_EXP 72
12711: PUSH
12712: LD_INT 1
12714: ST_TO_ADDR
// if p3 = 33 then
12715: LD_VAR 0 3
12719: PUSH
12720: LD_INT 33
12722: EQUAL
12723: IFFALSE 12733
// sRandom := true ;
12725: LD_ADDR_EXP 73
12729: PUSH
12730: LD_INT 1
12732: ST_TO_ADDR
// if p3 = 34 then
12733: LD_VAR 0 3
12737: PUSH
12738: LD_INT 34
12740: EQUAL
12741: IFFALSE 12751
// sShield := true ;
12743: LD_ADDR_EXP 74
12747: PUSH
12748: LD_INT 1
12750: ST_TO_ADDR
// if p3 = 35 then
12751: LD_VAR 0 3
12755: PUSH
12756: LD_INT 35
12758: EQUAL
12759: IFFALSE 12769
// sTime := true ;
12761: LD_ADDR_EXP 75
12765: PUSH
12766: LD_INT 1
12768: ST_TO_ADDR
// if p3 = 36 then
12769: LD_VAR 0 3
12773: PUSH
12774: LD_INT 36
12776: EQUAL
12777: IFFALSE 12787
// sTools := true ;
12779: LD_ADDR_EXP 76
12783: PUSH
12784: LD_INT 1
12786: ST_TO_ADDR
// if p3 = 101 then
12787: LD_VAR 0 3
12791: PUSH
12792: LD_INT 101
12794: EQUAL
12795: IFFALSE 12805
// sSold := true ;
12797: LD_ADDR_EXP 41
12801: PUSH
12802: LD_INT 1
12804: ST_TO_ADDR
// if p3 = 102 then
12805: LD_VAR 0 3
12809: PUSH
12810: LD_INT 102
12812: EQUAL
12813: IFFALSE 12823
// sDiff := true ;
12815: LD_ADDR_EXP 42
12819: PUSH
12820: LD_INT 1
12822: ST_TO_ADDR
// if p3 = 103 then
12823: LD_VAR 0 3
12827: PUSH
12828: LD_INT 103
12830: EQUAL
12831: IFFALSE 12841
// sFog := true ;
12833: LD_ADDR_EXP 45
12837: PUSH
12838: LD_INT 1
12840: ST_TO_ADDR
// if p3 = 104 then
12841: LD_VAR 0 3
12845: PUSH
12846: LD_INT 104
12848: EQUAL
12849: IFFALSE 12859
// sReset := true ;
12851: LD_ADDR_EXP 46
12855: PUSH
12856: LD_INT 1
12858: ST_TO_ADDR
// if p3 = 105 then
12859: LD_VAR 0 3
12863: PUSH
12864: LD_INT 105
12866: EQUAL
12867: IFFALSE 12877
// sSun := true ;
12869: LD_ADDR_EXP 47
12873: PUSH
12874: LD_INT 1
12876: ST_TO_ADDR
// if p3 = 106 then
12877: LD_VAR 0 3
12881: PUSH
12882: LD_INT 106
12884: EQUAL
12885: IFFALSE 12895
// sTiger := true ;
12887: LD_ADDR_EXP 43
12891: PUSH
12892: LD_INT 1
12894: ST_TO_ADDR
// if p3 = 107 then
12895: LD_VAR 0 3
12899: PUSH
12900: LD_INT 107
12902: EQUAL
12903: IFFALSE 12913
// sBomb := true ;
12905: LD_ADDR_EXP 44
12909: PUSH
12910: LD_INT 1
12912: ST_TO_ADDR
// if p3 = 108 then
12913: LD_VAR 0 3
12917: PUSH
12918: LD_INT 108
12920: EQUAL
12921: IFFALSE 12931
// sWound := true ;
12923: LD_ADDR_EXP 52
12927: PUSH
12928: LD_INT 1
12930: ST_TO_ADDR
// if p3 = 109 then
12931: LD_VAR 0 3
12935: PUSH
12936: LD_INT 109
12938: EQUAL
12939: IFFALSE 12949
// sBetray := true ;
12941: LD_ADDR_EXP 56
12945: PUSH
12946: LD_INT 1
12948: ST_TO_ADDR
// if p3 = 110 then
12949: LD_VAR 0 3
12953: PUSH
12954: LD_INT 110
12956: EQUAL
12957: IFFALSE 12967
// sContamin := true ;
12959: LD_ADDR_EXP 57
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// if p3 = 111 then
12967: LD_VAR 0 3
12971: PUSH
12972: LD_INT 111
12974: EQUAL
12975: IFFALSE 12985
// sOil := true ;
12977: LD_ADDR_EXP 59
12981: PUSH
12982: LD_INT 1
12984: ST_TO_ADDR
// if p3 = 112 then
12985: LD_VAR 0 3
12989: PUSH
12990: LD_INT 112
12992: EQUAL
12993: IFFALSE 13003
// sStu := true ;
12995: LD_ADDR_EXP 63
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// if p3 = 113 then
13003: LD_VAR 0 3
13007: PUSH
13008: LD_INT 113
13010: EQUAL
13011: IFFALSE 13021
// sBazooka := true ;
13013: LD_ADDR_EXP 66
13017: PUSH
13018: LD_INT 1
13020: ST_TO_ADDR
// if p3 = 114 then
13021: LD_VAR 0 3
13025: PUSH
13026: LD_INT 114
13028: EQUAL
13029: IFFALSE 13039
// sMortar := true ;
13031: LD_ADDR_EXP 67
13035: PUSH
13036: LD_INT 1
13038: ST_TO_ADDR
// if p3 = 115 then
13039: LD_VAR 0 3
13043: PUSH
13044: LD_INT 115
13046: EQUAL
13047: IFFALSE 13057
// sRanger := true ;
13049: LD_ADDR_EXP 77
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// end ; end ;
13057: PPOPN 6
13059: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13060: LD_EXP 24
13064: PUSH
13065: LD_EXP 29
13069: AND
13070: IFFALSE 13194
13072: GO 13074
13074: DISABLE
13075: LD_INT 0
13077: PPUSH
13078: PPUSH
// begin enable ;
13079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13080: LD_ADDR_VAR 0 2
13084: PUSH
13085: LD_INT 22
13087: PUSH
13088: LD_OWVAR 2
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 34
13102: PUSH
13103: LD_INT 7
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 34
13112: PUSH
13113: LD_INT 45
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 34
13122: PUSH
13123: LD_INT 28
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 34
13132: PUSH
13133: LD_INT 47
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: ST_TO_ADDR
// if not tmp then
13156: LD_VAR 0 2
13160: NOT
13161: IFFALSE 13165
// exit ;
13163: GO 13194
// for i in tmp do
13165: LD_ADDR_VAR 0 1
13169: PUSH
13170: LD_VAR 0 2
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13192
// begin SetLives ( i , 0 ) ;
13178: LD_VAR 0 1
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: CALL_OW 234
// end ;
13190: GO 13175
13192: POP
13193: POP
// end ;
13194: PPOPN 2
13196: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13197: LD_EXP 24
13201: PUSH
13202: LD_EXP 30
13206: AND
13207: IFFALSE 13291
13209: GO 13211
13211: DISABLE
13212: LD_INT 0
13214: PPUSH
13215: PPUSH
// begin enable ;
13216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13217: LD_ADDR_VAR 0 2
13221: PUSH
13222: LD_INT 22
13224: PUSH
13225: LD_OWVAR 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 32
13236: PUSH
13237: LD_INT 3
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PPUSH
13248: CALL_OW 69
13252: ST_TO_ADDR
// if not tmp then
13253: LD_VAR 0 2
13257: NOT
13258: IFFALSE 13262
// exit ;
13260: GO 13291
// for i in tmp do
13262: LD_ADDR_VAR 0 1
13266: PUSH
13267: LD_VAR 0 2
13271: PUSH
13272: FOR_IN
13273: IFFALSE 13289
// begin SetLives ( i , 0 ) ;
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_INT 0
13282: PPUSH
13283: CALL_OW 234
// end ;
13287: GO 13272
13289: POP
13290: POP
// end ;
13291: PPOPN 2
13293: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13294: LD_EXP 24
13298: PUSH
13299: LD_EXP 27
13303: AND
13304: IFFALSE 13397
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
// begin enable ;
13312: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13313: LD_ADDR_VAR 0 1
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_OWVAR 2
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 2
13332: PUSH
13333: LD_INT 25
13335: PUSH
13336: LD_INT 5
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 9
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 25
13355: PUSH
13356: LD_INT 8
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: PUSH
13378: FOR_IN
13379: IFFALSE 13395
// begin SetClass ( i , 1 ) ;
13381: LD_VAR 0 1
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: CALL_OW 336
// end ;
13393: GO 13378
13395: POP
13396: POP
// end ;
13397: PPOPN 1
13399: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13400: LD_EXP 24
13404: PUSH
13405: LD_EXP 28
13409: AND
13410: PUSH
13411: LD_OWVAR 65
13415: PUSH
13416: LD_INT 7
13418: LESS
13419: AND
13420: IFFALSE 13434
13422: GO 13424
13424: DISABLE
// begin enable ;
13425: ENABLE
// game_speed := 7 ;
13426: LD_ADDR_OWVAR 65
13430: PUSH
13431: LD_INT 7
13433: ST_TO_ADDR
// end ;
13434: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13435: LD_EXP 24
13439: PUSH
13440: LD_EXP 31
13444: AND
13445: IFFALSE 13647
13447: GO 13449
13449: DISABLE
13450: LD_INT 0
13452: PPUSH
13453: PPUSH
13454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13455: LD_ADDR_VAR 0 3
13459: PUSH
13460: LD_INT 81
13462: PUSH
13463: LD_OWVAR 2
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: LD_INT 21
13474: PUSH
13475: LD_INT 1
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PPUSH
13486: CALL_OW 69
13490: ST_TO_ADDR
// if not tmp then
13491: LD_VAR 0 3
13495: NOT
13496: IFFALSE 13500
// exit ;
13498: GO 13647
// if tmp > 5 then
13500: LD_VAR 0 3
13504: PUSH
13505: LD_INT 5
13507: GREATER
13508: IFFALSE 13520
// k := 5 else
13510: LD_ADDR_VAR 0 2
13514: PUSH
13515: LD_INT 5
13517: ST_TO_ADDR
13518: GO 13530
// k := tmp ;
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: LD_VAR 0 3
13529: ST_TO_ADDR
// for i := 1 to k do
13530: LD_ADDR_VAR 0 1
13534: PUSH
13535: DOUBLE
13536: LD_INT 1
13538: DEC
13539: ST_TO_ADDR
13540: LD_VAR 0 2
13544: PUSH
13545: FOR_TO
13546: IFFALSE 13645
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13548: LD_VAR 0 3
13552: PUSH
13553: LD_VAR 0 1
13557: ARRAY
13558: PPUSH
13559: LD_VAR 0 1
13563: PUSH
13564: LD_INT 4
13566: MOD
13567: PUSH
13568: LD_INT 1
13570: PLUS
13571: PPUSH
13572: CALL_OW 259
13576: PUSH
13577: LD_INT 10
13579: LESS
13580: IFFALSE 13643
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13582: LD_VAR 0 3
13586: PUSH
13587: LD_VAR 0 1
13591: ARRAY
13592: PPUSH
13593: LD_VAR 0 1
13597: PUSH
13598: LD_INT 4
13600: MOD
13601: PUSH
13602: LD_INT 1
13604: PLUS
13605: PPUSH
13606: LD_VAR 0 3
13610: PUSH
13611: LD_VAR 0 1
13615: ARRAY
13616: PPUSH
13617: LD_VAR 0 1
13621: PUSH
13622: LD_INT 4
13624: MOD
13625: PUSH
13626: LD_INT 1
13628: PLUS
13629: PPUSH
13630: CALL_OW 259
13634: PUSH
13635: LD_INT 1
13637: PLUS
13638: PPUSH
13639: CALL_OW 237
13643: GO 13545
13645: POP
13646: POP
// end ;
13647: PPOPN 3
13649: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13650: LD_EXP 24
13654: PUSH
13655: LD_EXP 32
13659: AND
13660: IFFALSE 13680
13662: GO 13664
13664: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13665: LD_INT 4
13667: PPUSH
13668: LD_OWVAR 2
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: CALL_OW 324
13680: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13681: LD_EXP 24
13685: PUSH
13686: LD_EXP 61
13690: AND
13691: IFFALSE 13711
13693: GO 13695
13695: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13696: LD_INT 19
13698: PPUSH
13699: LD_OWVAR 2
13703: PPUSH
13704: LD_INT 0
13706: PPUSH
13707: CALL_OW 324
13711: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13712: LD_EXP 24
13716: PUSH
13717: LD_EXP 33
13721: AND
13722: IFFALSE 13824
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
13730: PPUSH
// begin enable ;
13731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13732: LD_ADDR_VAR 0 2
13736: PUSH
13737: LD_INT 22
13739: PUSH
13740: LD_OWVAR 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 2
13751: PUSH
13752: LD_INT 34
13754: PUSH
13755: LD_INT 11
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 34
13764: PUSH
13765: LD_INT 30
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PPUSH
13781: CALL_OW 69
13785: ST_TO_ADDR
// if not tmp then
13786: LD_VAR 0 2
13790: NOT
13791: IFFALSE 13795
// exit ;
13793: GO 13824
// for i in tmp do
13795: LD_ADDR_VAR 0 1
13799: PUSH
13800: LD_VAR 0 2
13804: PUSH
13805: FOR_IN
13806: IFFALSE 13822
// begin SetLives ( i , 0 ) ;
13808: LD_VAR 0 1
13812: PPUSH
13813: LD_INT 0
13815: PPUSH
13816: CALL_OW 234
// end ;
13820: GO 13805
13822: POP
13823: POP
// end ;
13824: PPOPN 2
13826: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13827: LD_EXP 24
13831: PUSH
13832: LD_EXP 34
13836: AND
13837: IFFALSE 13857
13839: GO 13841
13841: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13842: LD_INT 32
13844: PPUSH
13845: LD_OWVAR 2
13849: PPUSH
13850: LD_INT 0
13852: PPUSH
13853: CALL_OW 324
13857: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13858: LD_EXP 24
13862: PUSH
13863: LD_EXP 35
13867: AND
13868: IFFALSE 14049
13870: GO 13872
13872: DISABLE
13873: LD_INT 0
13875: PPUSH
13876: PPUSH
13877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13878: LD_ADDR_VAR 0 2
13882: PUSH
13883: LD_INT 22
13885: PUSH
13886: LD_OWVAR 2
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 33
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: ST_TO_ADDR
// if not tmp then
13914: LD_VAR 0 2
13918: NOT
13919: IFFALSE 13923
// exit ;
13921: GO 14049
// side := 0 ;
13923: LD_ADDR_VAR 0 3
13927: PUSH
13928: LD_INT 0
13930: ST_TO_ADDR
// for i := 1 to 8 do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: DOUBLE
13937: LD_INT 1
13939: DEC
13940: ST_TO_ADDR
13941: LD_INT 8
13943: PUSH
13944: FOR_TO
13945: IFFALSE 13993
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13947: LD_OWVAR 2
13951: PUSH
13952: LD_VAR 0 1
13956: NONEQUAL
13957: PUSH
13958: LD_OWVAR 2
13962: PPUSH
13963: LD_VAR 0 1
13967: PPUSH
13968: CALL_OW 81
13972: PUSH
13973: LD_INT 2
13975: EQUAL
13976: AND
13977: IFFALSE 13991
// begin side := i ;
13979: LD_ADDR_VAR 0 3
13983: PUSH
13984: LD_VAR 0 1
13988: ST_TO_ADDR
// break ;
13989: GO 13993
// end ;
13991: GO 13944
13993: POP
13994: POP
// if not side then
13995: LD_VAR 0 3
13999: NOT
14000: IFFALSE 14004
// exit ;
14002: GO 14049
// for i := 1 to tmp do
14004: LD_ADDR_VAR 0 1
14008: PUSH
14009: DOUBLE
14010: LD_INT 1
14012: DEC
14013: ST_TO_ADDR
14014: LD_VAR 0 2
14018: PUSH
14019: FOR_TO
14020: IFFALSE 14047
// if Prob ( 60 ) then
14022: LD_INT 60
14024: PPUSH
14025: CALL_OW 13
14029: IFFALSE 14045
// SetSide ( i , side ) ;
14031: LD_VAR 0 1
14035: PPUSH
14036: LD_VAR 0 3
14040: PPUSH
14041: CALL_OW 235
14045: GO 14019
14047: POP
14048: POP
// end ;
14049: PPOPN 3
14051: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14052: LD_EXP 24
14056: PUSH
14057: LD_EXP 37
14061: AND
14062: IFFALSE 14181
14064: GO 14066
14066: DISABLE
14067: LD_INT 0
14069: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14070: LD_ADDR_VAR 0 1
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_OWVAR 2
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: LD_INT 21
14089: PUSH
14090: LD_INT 1
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 3
14099: PUSH
14100: LD_INT 23
14102: PUSH
14103: LD_INT 0
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PUSH
14124: FOR_IN
14125: IFFALSE 14179
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14127: LD_VAR 0 1
14131: PPUSH
14132: CALL_OW 257
14136: PUSH
14137: LD_INT 1
14139: PUSH
14140: LD_INT 2
14142: PUSH
14143: LD_INT 3
14145: PUSH
14146: LD_INT 4
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: IN
14155: IFFALSE 14177
// SetClass ( un , rand ( 1 , 4 ) ) ;
14157: LD_VAR 0 1
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: LD_INT 4
14167: PPUSH
14168: CALL_OW 12
14172: PPUSH
14173: CALL_OW 336
14177: GO 14124
14179: POP
14180: POP
// end ;
14181: PPOPN 1
14183: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14184: LD_EXP 24
14188: PUSH
14189: LD_EXP 36
14193: AND
14194: IFFALSE 14273
14196: GO 14198
14198: DISABLE
14199: LD_INT 0
14201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14202: LD_ADDR_VAR 0 1
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_OWVAR 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 21
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 69
14237: ST_TO_ADDR
// if not tmp then
14238: LD_VAR 0 1
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14247: LD_VAR 0 1
14251: PUSH
14252: LD_INT 1
14254: PPUSH
14255: LD_VAR 0 1
14259: PPUSH
14260: CALL_OW 12
14264: ARRAY
14265: PPUSH
14266: LD_INT 100
14268: PPUSH
14269: CALL_OW 234
// end ;
14273: PPOPN 1
14275: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14276: LD_EXP 24
14280: PUSH
14281: LD_EXP 38
14285: AND
14286: IFFALSE 14384
14288: GO 14290
14290: DISABLE
14291: LD_INT 0
14293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14294: LD_ADDR_VAR 0 1
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 21
14313: PUSH
14314: LD_INT 1
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: ST_TO_ADDR
// if not tmp then
14330: LD_VAR 0 1
14334: NOT
14335: IFFALSE 14339
// exit ;
14337: GO 14384
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14339: LD_VAR 0 1
14343: PUSH
14344: LD_INT 1
14346: PPUSH
14347: LD_VAR 0 1
14351: PPUSH
14352: CALL_OW 12
14356: ARRAY
14357: PPUSH
14358: LD_INT 1
14360: PPUSH
14361: LD_INT 4
14363: PPUSH
14364: CALL_OW 12
14368: PPUSH
14369: LD_INT 3000
14371: PPUSH
14372: LD_INT 9000
14374: PPUSH
14375: CALL_OW 12
14379: PPUSH
14380: CALL_OW 492
// end ;
14384: PPOPN 1
14386: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14387: LD_EXP 24
14391: PUSH
14392: LD_EXP 39
14396: AND
14397: IFFALSE 14417
14399: GO 14401
14401: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14402: LD_INT 1
14404: PPUSH
14405: LD_OWVAR 2
14409: PPUSH
14410: LD_INT 0
14412: PPUSH
14413: CALL_OW 324
14417: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14418: LD_EXP 24
14422: PUSH
14423: LD_EXP 40
14427: AND
14428: IFFALSE 14511
14430: GO 14432
14432: DISABLE
14433: LD_INT 0
14435: PPUSH
14436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14437: LD_ADDR_VAR 0 2
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_OWVAR 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 21
14456: PUSH
14457: LD_INT 3
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: ST_TO_ADDR
// if not tmp then
14473: LD_VAR 0 2
14477: NOT
14478: IFFALSE 14482
// exit ;
14480: GO 14511
// for i in tmp do
14482: LD_ADDR_VAR 0 1
14486: PUSH
14487: LD_VAR 0 2
14491: PUSH
14492: FOR_IN
14493: IFFALSE 14509
// SetBLevel ( i , 10 ) ;
14495: LD_VAR 0 1
14499: PPUSH
14500: LD_INT 10
14502: PPUSH
14503: CALL_OW 241
14507: GO 14492
14509: POP
14510: POP
// end ;
14511: PPOPN 2
14513: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14514: LD_EXP 24
14518: PUSH
14519: LD_EXP 41
14523: AND
14524: IFFALSE 14635
14526: GO 14528
14528: DISABLE
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
14533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14534: LD_ADDR_VAR 0 3
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_OWVAR 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 69
14569: ST_TO_ADDR
// if not tmp then
14570: LD_VAR 0 3
14574: NOT
14575: IFFALSE 14579
// exit ;
14577: GO 14635
// un := tmp [ rand ( 1 , tmp ) ] ;
14579: LD_ADDR_VAR 0 2
14583: PUSH
14584: LD_VAR 0 3
14588: PUSH
14589: LD_INT 1
14591: PPUSH
14592: LD_VAR 0 3
14596: PPUSH
14597: CALL_OW 12
14601: ARRAY
14602: ST_TO_ADDR
// if Crawls ( un ) then
14603: LD_VAR 0 2
14607: PPUSH
14608: CALL_OW 318
14612: IFFALSE 14623
// ComWalk ( un ) ;
14614: LD_VAR 0 2
14618: PPUSH
14619: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14623: LD_VAR 0 2
14627: PPUSH
14628: LD_INT 5
14630: PPUSH
14631: CALL_OW 336
// end ;
14635: PPOPN 3
14637: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14638: LD_EXP 24
14642: PUSH
14643: LD_EXP 42
14647: AND
14648: PUSH
14649: LD_OWVAR 67
14653: PUSH
14654: LD_INT 3
14656: LESS
14657: AND
14658: IFFALSE 14677
14660: GO 14662
14662: DISABLE
// Difficulty := Difficulty + 1 ;
14663: LD_ADDR_OWVAR 67
14667: PUSH
14668: LD_OWVAR 67
14672: PUSH
14673: LD_INT 1
14675: PLUS
14676: ST_TO_ADDR
14677: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14678: LD_EXP 24
14682: PUSH
14683: LD_EXP 43
14687: AND
14688: IFFALSE 14791
14690: GO 14692
14692: DISABLE
14693: LD_INT 0
14695: PPUSH
// begin for i := 1 to 5 do
14696: LD_ADDR_VAR 0 1
14700: PUSH
14701: DOUBLE
14702: LD_INT 1
14704: DEC
14705: ST_TO_ADDR
14706: LD_INT 5
14708: PUSH
14709: FOR_TO
14710: IFFALSE 14789
// begin uc_nation := nation_nature ;
14712: LD_ADDR_OWVAR 21
14716: PUSH
14717: LD_INT 0
14719: ST_TO_ADDR
// uc_side := 0 ;
14720: LD_ADDR_OWVAR 20
14724: PUSH
14725: LD_INT 0
14727: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14728: LD_ADDR_OWVAR 29
14732: PUSH
14733: LD_INT 12
14735: PUSH
14736: LD_INT 12
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: ST_TO_ADDR
// hc_agressivity := 20 ;
14743: LD_ADDR_OWVAR 35
14747: PUSH
14748: LD_INT 20
14750: ST_TO_ADDR
// hc_class := class_tiger ;
14751: LD_ADDR_OWVAR 28
14755: PUSH
14756: LD_INT 14
14758: ST_TO_ADDR
// hc_gallery :=  ;
14759: LD_ADDR_OWVAR 33
14763: PUSH
14764: LD_STRING 
14766: ST_TO_ADDR
// hc_name :=  ;
14767: LD_ADDR_OWVAR 26
14771: PUSH
14772: LD_STRING 
14774: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14775: CALL_OW 44
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 51
// end ;
14787: GO 14709
14789: POP
14790: POP
// end ;
14791: PPOPN 1
14793: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14794: LD_EXP 24
14798: PUSH
14799: LD_EXP 44
14803: AND
14804: IFFALSE 14813
14806: GO 14808
14808: DISABLE
// StreamSibBomb ;
14809: CALL 14814 0 0
14813: END
// export function StreamSibBomb ; var i , x , y ; begin
14814: LD_INT 0
14816: PPUSH
14817: PPUSH
14818: PPUSH
14819: PPUSH
// result := false ;
14820: LD_ADDR_VAR 0 1
14824: PUSH
14825: LD_INT 0
14827: ST_TO_ADDR
// for i := 1 to 16 do
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: DOUBLE
14834: LD_INT 1
14836: DEC
14837: ST_TO_ADDR
14838: LD_INT 16
14840: PUSH
14841: FOR_TO
14842: IFFALSE 15041
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14844: LD_ADDR_VAR 0 3
14848: PUSH
14849: LD_INT 10
14851: PUSH
14852: LD_INT 20
14854: PUSH
14855: LD_INT 30
14857: PUSH
14858: LD_INT 40
14860: PUSH
14861: LD_INT 50
14863: PUSH
14864: LD_INT 60
14866: PUSH
14867: LD_INT 70
14869: PUSH
14870: LD_INT 80
14872: PUSH
14873: LD_INT 90
14875: PUSH
14876: LD_INT 100
14878: PUSH
14879: LD_INT 110
14881: PUSH
14882: LD_INT 120
14884: PUSH
14885: LD_INT 130
14887: PUSH
14888: LD_INT 140
14890: PUSH
14891: LD_INT 150
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 1
14913: PPUSH
14914: LD_INT 15
14916: PPUSH
14917: CALL_OW 12
14921: ARRAY
14922: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14923: LD_ADDR_VAR 0 4
14927: PUSH
14928: LD_INT 10
14930: PUSH
14931: LD_INT 20
14933: PUSH
14934: LD_INT 30
14936: PUSH
14937: LD_INT 40
14939: PUSH
14940: LD_INT 50
14942: PUSH
14943: LD_INT 60
14945: PUSH
14946: LD_INT 70
14948: PUSH
14949: LD_INT 80
14951: PUSH
14952: LD_INT 90
14954: PUSH
14955: LD_INT 100
14957: PUSH
14958: LD_INT 110
14960: PUSH
14961: LD_INT 120
14963: PUSH
14964: LD_INT 130
14966: PUSH
14967: LD_INT 140
14969: PUSH
14970: LD_INT 150
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 1
14992: PPUSH
14993: LD_INT 15
14995: PPUSH
14996: CALL_OW 12
15000: ARRAY
15001: ST_TO_ADDR
// if ValidHex ( x , y ) then
15002: LD_VAR 0 3
15006: PPUSH
15007: LD_VAR 0 4
15011: PPUSH
15012: CALL_OW 488
15016: IFFALSE 15039
// begin result := [ x , y ] ;
15018: LD_ADDR_VAR 0 1
15022: PUSH
15023: LD_VAR 0 3
15027: PUSH
15028: LD_VAR 0 4
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: ST_TO_ADDR
// break ;
15037: GO 15041
// end ; end ;
15039: GO 14841
15041: POP
15042: POP
// if result then
15043: LD_VAR 0 1
15047: IFFALSE 15107
// begin ToLua ( playSibBomb() ) ;
15049: LD_STRING playSibBomb()
15051: PPUSH
15052: CALL_OW 559
// wait ( 0 0$14 ) ;
15056: LD_INT 490
15058: PPUSH
15059: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15063: LD_VAR 0 1
15067: PUSH
15068: LD_INT 1
15070: ARRAY
15071: PPUSH
15072: LD_VAR 0 1
15076: PUSH
15077: LD_INT 2
15079: ARRAY
15080: PPUSH
15081: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15085: LD_VAR 0 1
15089: PUSH
15090: LD_INT 1
15092: ARRAY
15093: PPUSH
15094: LD_VAR 0 1
15098: PUSH
15099: LD_INT 2
15101: ARRAY
15102: PPUSH
15103: CALL_OW 429
// end ; end ;
15107: LD_VAR 0 1
15111: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15112: LD_EXP 24
15116: PUSH
15117: LD_EXP 46
15121: AND
15122: IFFALSE 15134
15124: GO 15126
15126: DISABLE
// YouLost (  ) ;
15127: LD_STRING 
15129: PPUSH
15130: CALL_OW 104
15134: END
// every 0 0$1 trigger StreamModeActive and sFog do
15135: LD_EXP 24
15139: PUSH
15140: LD_EXP 45
15144: AND
15145: IFFALSE 15159
15147: GO 15149
15149: DISABLE
// FogOff ( your_side ) ;
15150: LD_OWVAR 2
15154: PPUSH
15155: CALL_OW 344
15159: END
// every 0 0$1 trigger StreamModeActive and sSun do
15160: LD_EXP 24
15164: PUSH
15165: LD_EXP 47
15169: AND
15170: IFFALSE 15198
15172: GO 15174
15174: DISABLE
// begin solar_recharge_percent := 0 ;
15175: LD_ADDR_OWVAR 79
15179: PUSH
15180: LD_INT 0
15182: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15183: LD_INT 10500
15185: PPUSH
15186: CALL_OW 67
// solar_recharge_percent := 100 ;
15190: LD_ADDR_OWVAR 79
15194: PUSH
15195: LD_INT 100
15197: ST_TO_ADDR
// end ;
15198: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15199: LD_EXP 24
15203: PUSH
15204: LD_EXP 48
15208: AND
15209: IFFALSE 15448
15211: GO 15213
15213: DISABLE
15214: LD_INT 0
15216: PPUSH
15217: PPUSH
15218: PPUSH
// begin tmp := [ ] ;
15219: LD_ADDR_VAR 0 3
15223: PUSH
15224: EMPTY
15225: ST_TO_ADDR
// for i := 1 to 6 do
15226: LD_ADDR_VAR 0 1
15230: PUSH
15231: DOUBLE
15232: LD_INT 1
15234: DEC
15235: ST_TO_ADDR
15236: LD_INT 6
15238: PUSH
15239: FOR_TO
15240: IFFALSE 15345
// begin uc_nation := nation_nature ;
15242: LD_ADDR_OWVAR 21
15246: PUSH
15247: LD_INT 0
15249: ST_TO_ADDR
// uc_side := 0 ;
15250: LD_ADDR_OWVAR 20
15254: PUSH
15255: LD_INT 0
15257: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15258: LD_ADDR_OWVAR 29
15262: PUSH
15263: LD_INT 12
15265: PUSH
15266: LD_INT 12
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: ST_TO_ADDR
// hc_agressivity := 20 ;
15273: LD_ADDR_OWVAR 35
15277: PUSH
15278: LD_INT 20
15280: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15281: LD_ADDR_OWVAR 28
15285: PUSH
15286: LD_INT 17
15288: ST_TO_ADDR
// hc_gallery :=  ;
15289: LD_ADDR_OWVAR 33
15293: PUSH
15294: LD_STRING 
15296: ST_TO_ADDR
// hc_name :=  ;
15297: LD_ADDR_OWVAR 26
15301: PUSH
15302: LD_STRING 
15304: ST_TO_ADDR
// un := CreateHuman ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: CALL_OW 44
15314: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15315: LD_VAR 0 2
15319: PPUSH
15320: LD_INT 1
15322: PPUSH
15323: CALL_OW 51
// tmp := tmp ^ un ;
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_VAR 0 3
15336: PUSH
15337: LD_VAR 0 2
15341: ADD
15342: ST_TO_ADDR
// end ;
15343: GO 15239
15345: POP
15346: POP
// repeat wait ( 0 0$1 ) ;
15347: LD_INT 35
15349: PPUSH
15350: CALL_OW 67
// for un in tmp do
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_VAR 0 3
15363: PUSH
15364: FOR_IN
15365: IFFALSE 15439
// begin if IsDead ( un ) then
15367: LD_VAR 0 2
15371: PPUSH
15372: CALL_OW 301
15376: IFFALSE 15396
// begin tmp := tmp diff un ;
15378: LD_ADDR_VAR 0 3
15382: PUSH
15383: LD_VAR 0 3
15387: PUSH
15388: LD_VAR 0 2
15392: DIFF
15393: ST_TO_ADDR
// continue ;
15394: GO 15364
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15396: LD_VAR 0 2
15400: PPUSH
15401: LD_INT 3
15403: PUSH
15404: LD_INT 22
15406: PUSH
15407: LD_INT 0
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 69
15422: PPUSH
15423: LD_VAR 0 2
15427: PPUSH
15428: CALL_OW 74
15432: PPUSH
15433: CALL_OW 115
// end ;
15437: GO 15364
15439: POP
15440: POP
// until not tmp ;
15441: LD_VAR 0 3
15445: NOT
15446: IFFALSE 15347
// end ;
15448: PPOPN 3
15450: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15451: LD_EXP 24
15455: PUSH
15456: LD_EXP 49
15460: AND
15461: IFFALSE 15515
15463: GO 15465
15465: DISABLE
// begin ToLua ( displayTroll(); ) ;
15466: LD_STRING displayTroll();
15468: PPUSH
15469: CALL_OW 559
// wait ( 3 3$00 ) ;
15473: LD_INT 6300
15475: PPUSH
15476: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15480: LD_STRING hideTroll();
15482: PPUSH
15483: CALL_OW 559
// wait ( 1 1$00 ) ;
15487: LD_INT 2100
15489: PPUSH
15490: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15494: LD_STRING displayTroll();
15496: PPUSH
15497: CALL_OW 559
// wait ( 1 1$00 ) ;
15501: LD_INT 2100
15503: PPUSH
15504: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15508: LD_STRING hideTroll();
15510: PPUSH
15511: CALL_OW 559
// end ;
15515: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15516: LD_EXP 24
15520: PUSH
15521: LD_EXP 50
15525: AND
15526: IFFALSE 15589
15528: GO 15530
15530: DISABLE
15531: LD_INT 0
15533: PPUSH
// begin p := 0 ;
15534: LD_ADDR_VAR 0 1
15538: PUSH
15539: LD_INT 0
15541: ST_TO_ADDR
// repeat game_speed := 1 ;
15542: LD_ADDR_OWVAR 65
15546: PUSH
15547: LD_INT 1
15549: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15550: LD_INT 35
15552: PPUSH
15553: CALL_OW 67
// p := p + 1 ;
15557: LD_ADDR_VAR 0 1
15561: PUSH
15562: LD_VAR 0 1
15566: PUSH
15567: LD_INT 1
15569: PLUS
15570: ST_TO_ADDR
// until p >= 60 ;
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 60
15578: GREATEREQUAL
15579: IFFALSE 15542
// game_speed := 4 ;
15581: LD_ADDR_OWVAR 65
15585: PUSH
15586: LD_INT 4
15588: ST_TO_ADDR
// end ;
15589: PPOPN 1
15591: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15592: LD_EXP 24
15596: PUSH
15597: LD_EXP 51
15601: AND
15602: IFFALSE 15748
15604: GO 15606
15606: DISABLE
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15611: LD_ADDR_VAR 0 1
15615: PUSH
15616: LD_INT 22
15618: PUSH
15619: LD_OWVAR 2
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 2
15630: PUSH
15631: LD_INT 30
15633: PUSH
15634: LD_INT 0
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 30
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 69
15664: ST_TO_ADDR
// if not depot then
15665: LD_VAR 0 1
15669: NOT
15670: IFFALSE 15674
// exit ;
15672: GO 15748
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 1
15686: PPUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 12
15696: ARRAY
15697: PPUSH
15698: CALL_OW 274
15702: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15703: LD_VAR 0 2
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: LD_INT 0
15713: PPUSH
15714: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15718: LD_VAR 0 2
15722: PPUSH
15723: LD_INT 2
15725: PPUSH
15726: LD_INT 0
15728: PPUSH
15729: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15733: LD_VAR 0 2
15737: PPUSH
15738: LD_INT 3
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL_OW 277
// end ;
15748: PPOPN 2
15750: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15751: LD_EXP 24
15755: PUSH
15756: LD_EXP 52
15760: AND
15761: IFFALSE 15858
15763: GO 15765
15765: DISABLE
15766: LD_INT 0
15768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15769: LD_ADDR_VAR 0 1
15773: PUSH
15774: LD_INT 22
15776: PUSH
15777: LD_OWVAR 2
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 3
15798: PUSH
15799: LD_INT 23
15801: PUSH
15802: LD_INT 0
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: ST_TO_ADDR
// if not tmp then
15823: LD_VAR 0 1
15827: NOT
15828: IFFALSE 15832
// exit ;
15830: GO 15858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15832: LD_VAR 0 1
15836: PUSH
15837: LD_INT 1
15839: PPUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 12
15849: ARRAY
15850: PPUSH
15851: LD_INT 200
15853: PPUSH
15854: CALL_OW 234
// end ;
15858: PPOPN 1
15860: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15861: LD_EXP 24
15865: PUSH
15866: LD_EXP 53
15870: AND
15871: IFFALSE 15950
15873: GO 15875
15875: DISABLE
15876: LD_INT 0
15878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15879: LD_ADDR_VAR 0 1
15883: PUSH
15884: LD_INT 22
15886: PUSH
15887: LD_OWVAR 2
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 21
15898: PUSH
15899: LD_INT 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PPUSH
15910: CALL_OW 69
15914: ST_TO_ADDR
// if not tmp then
15915: LD_VAR 0 1
15919: NOT
15920: IFFALSE 15924
// exit ;
15922: GO 15950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15924: LD_VAR 0 1
15928: PUSH
15929: LD_INT 1
15931: PPUSH
15932: LD_VAR 0 1
15936: PPUSH
15937: CALL_OW 12
15941: ARRAY
15942: PPUSH
15943: LD_INT 60
15945: PPUSH
15946: CALL_OW 234
// end ;
15950: PPOPN 1
15952: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15953: LD_EXP 24
15957: PUSH
15958: LD_EXP 54
15962: AND
15963: IFFALSE 16062
15965: GO 15967
15967: DISABLE
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
// begin enable ;
15972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15973: LD_ADDR_VAR 0 1
15977: PUSH
15978: LD_INT 22
15980: PUSH
15981: LD_OWVAR 2
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 61
15992: PUSH
15993: EMPTY
15994: LIST
15995: PUSH
15996: LD_INT 33
15998: PUSH
15999: LD_INT 2
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: ST_TO_ADDR
// if not tmp then
16016: LD_VAR 0 1
16020: NOT
16021: IFFALSE 16025
// exit ;
16023: GO 16062
// for i in tmp do
16025: LD_ADDR_VAR 0 2
16029: PUSH
16030: LD_VAR 0 1
16034: PUSH
16035: FOR_IN
16036: IFFALSE 16060
// if IsControledBy ( i ) then
16038: LD_VAR 0 2
16042: PPUSH
16043: CALL_OW 312
16047: IFFALSE 16058
// ComUnlink ( i ) ;
16049: LD_VAR 0 2
16053: PPUSH
16054: CALL_OW 136
16058: GO 16035
16060: POP
16061: POP
// end ;
16062: PPOPN 2
16064: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16065: LD_EXP 24
16069: PUSH
16070: LD_EXP 55
16074: AND
16075: IFFALSE 16215
16077: GO 16079
16079: DISABLE
16080: LD_INT 0
16082: PPUSH
16083: PPUSH
// begin ToLua ( displayPowell(); ) ;
16084: LD_STRING displayPowell();
16086: PPUSH
16087: CALL_OW 559
// uc_side := 0 ;
16091: LD_ADDR_OWVAR 20
16095: PUSH
16096: LD_INT 0
16098: ST_TO_ADDR
// uc_nation := 2 ;
16099: LD_ADDR_OWVAR 21
16103: PUSH
16104: LD_INT 2
16106: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16107: LD_ADDR_OWVAR 37
16111: PUSH
16112: LD_INT 14
16114: ST_TO_ADDR
// vc_engine := engine_siberite ;
16115: LD_ADDR_OWVAR 39
16119: PUSH
16120: LD_INT 3
16122: ST_TO_ADDR
// vc_control := control_apeman ;
16123: LD_ADDR_OWVAR 38
16127: PUSH
16128: LD_INT 5
16130: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16131: LD_ADDR_OWVAR 40
16135: PUSH
16136: LD_INT 29
16138: ST_TO_ADDR
// un := CreateVehicle ;
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: CALL_OW 45
16148: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16149: LD_VAR 0 2
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16161: LD_INT 35
16163: PPUSH
16164: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16168: LD_VAR 0 2
16172: PPUSH
16173: LD_INT 22
16175: PUSH
16176: LD_OWVAR 2
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PPUSH
16185: CALL_OW 69
16189: PPUSH
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 74
16199: PPUSH
16200: CALL_OW 115
// until IsDead ( un ) ;
16204: LD_VAR 0 2
16208: PPUSH
16209: CALL_OW 301
16213: IFFALSE 16161
// end ;
16215: PPOPN 2
16217: END
// every 0 0$1 trigger StreamModeActive and sStu do
16218: LD_EXP 24
16222: PUSH
16223: LD_EXP 63
16227: AND
16228: IFFALSE 16244
16230: GO 16232
16232: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16233: LD_STRING displayStucuk();
16235: PPUSH
16236: CALL_OW 559
// ResetFog ;
16240: CALL_OW 335
// end ;
16244: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16245: LD_EXP 24
16249: PUSH
16250: LD_EXP 56
16254: AND
16255: IFFALSE 16396
16257: GO 16259
16259: DISABLE
16260: LD_INT 0
16262: PPUSH
16263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_INT 22
16271: PUSH
16272: LD_OWVAR 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PPUSH
16295: CALL_OW 69
16299: ST_TO_ADDR
// if not tmp then
16300: LD_VAR 0 2
16304: NOT
16305: IFFALSE 16309
// exit ;
16307: GO 16396
// un := tmp [ rand ( 1 , tmp ) ] ;
16309: LD_ADDR_VAR 0 1
16313: PUSH
16314: LD_VAR 0 2
16318: PUSH
16319: LD_INT 1
16321: PPUSH
16322: LD_VAR 0 2
16326: PPUSH
16327: CALL_OW 12
16331: ARRAY
16332: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_INT 0
16340: PPUSH
16341: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16345: LD_VAR 0 1
16349: PPUSH
16350: LD_OWVAR 3
16354: PUSH
16355: LD_VAR 0 1
16359: DIFF
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 74
16370: PPUSH
16371: CALL_OW 115
// wait ( 0 0$20 ) ;
16375: LD_INT 700
16377: PPUSH
16378: CALL_OW 67
// SetSide ( un , your_side ) ;
16382: LD_VAR 0 1
16386: PPUSH
16387: LD_OWVAR 2
16391: PPUSH
16392: CALL_OW 235
// end ;
16396: PPOPN 2
16398: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16399: LD_EXP 24
16403: PUSH
16404: LD_EXP 57
16408: AND
16409: IFFALSE 16515
16411: GO 16413
16413: DISABLE
16414: LD_INT 0
16416: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_OWVAR 2
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 2
16436: PUSH
16437: LD_INT 30
16439: PUSH
16440: LD_INT 0
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 30
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// if not depot then
16471: LD_VAR 0 1
16475: NOT
16476: IFFALSE 16480
// exit ;
16478: GO 16515
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16480: LD_VAR 0 1
16484: PUSH
16485: LD_INT 1
16487: ARRAY
16488: PPUSH
16489: CALL_OW 250
16493: PPUSH
16494: LD_VAR 0 1
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: CALL_OW 251
16507: PPUSH
16508: LD_INT 70
16510: PPUSH
16511: CALL_OW 495
// end ;
16515: PPOPN 1
16517: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16518: LD_EXP 24
16522: PUSH
16523: LD_EXP 58
16527: AND
16528: IFFALSE 16739
16530: GO 16532
16532: DISABLE
16533: LD_INT 0
16535: PPUSH
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16540: LD_ADDR_VAR 0 5
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 21
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// if not tmp then
16576: LD_VAR 0 5
16580: NOT
16581: IFFALSE 16585
// exit ;
16583: GO 16739
// for i in tmp do
16585: LD_ADDR_VAR 0 1
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: FOR_IN
16596: IFFALSE 16737
// begin d := rand ( 0 , 5 ) ;
16598: LD_ADDR_VAR 0 4
16602: PUSH
16603: LD_INT 0
16605: PPUSH
16606: LD_INT 5
16608: PPUSH
16609: CALL_OW 12
16613: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16614: LD_ADDR_VAR 0 2
16618: PUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 250
16628: PPUSH
16629: LD_VAR 0 4
16633: PPUSH
16634: LD_INT 3
16636: PPUSH
16637: LD_INT 12
16639: PPUSH
16640: CALL_OW 12
16644: PPUSH
16645: CALL_OW 272
16649: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_VAR 0 1
16659: PPUSH
16660: CALL_OW 251
16664: PPUSH
16665: LD_VAR 0 4
16669: PPUSH
16670: LD_INT 3
16672: PPUSH
16673: LD_INT 12
16675: PPUSH
16676: CALL_OW 12
16680: PPUSH
16681: CALL_OW 273
16685: ST_TO_ADDR
// if ValidHex ( x , y ) then
16686: LD_VAR 0 2
16690: PPUSH
16691: LD_VAR 0 3
16695: PPUSH
16696: CALL_OW 488
16700: IFFALSE 16735
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_VAR 0 2
16711: PPUSH
16712: LD_VAR 0 3
16716: PPUSH
16717: LD_INT 3
16719: PPUSH
16720: LD_INT 6
16722: PPUSH
16723: CALL_OW 12
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 483
// end ;
16735: GO 16595
16737: POP
16738: POP
// end ;
16739: PPOPN 5
16741: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16742: LD_EXP 24
16746: PUSH
16747: LD_EXP 59
16751: AND
16752: IFFALSE 16846
16754: GO 16756
16756: DISABLE
16757: LD_INT 0
16759: PPUSH
16760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16761: LD_ADDR_VAR 0 2
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_OWVAR 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 32
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 21
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 69
16807: ST_TO_ADDR
// if not tmp then
16808: LD_VAR 0 2
16812: NOT
16813: IFFALSE 16817
// exit ;
16815: GO 16846
// for i in tmp do
16817: LD_ADDR_VAR 0 1
16821: PUSH
16822: LD_VAR 0 2
16826: PUSH
16827: FOR_IN
16828: IFFALSE 16844
// SetFuel ( i , 0 ) ;
16830: LD_VAR 0 1
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: CALL_OW 240
16842: GO 16827
16844: POP
16845: POP
// end ;
16846: PPOPN 2
16848: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16849: LD_EXP 24
16853: PUSH
16854: LD_EXP 60
16858: AND
16859: IFFALSE 16925
16861: GO 16863
16863: DISABLE
16864: LD_INT 0
16866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16867: LD_ADDR_VAR 0 1
16871: PUSH
16872: LD_INT 22
16874: PUSH
16875: LD_OWVAR 2
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 30
16886: PUSH
16887: LD_INT 29
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PPUSH
16898: CALL_OW 69
16902: ST_TO_ADDR
// if not tmp then
16903: LD_VAR 0 1
16907: NOT
16908: IFFALSE 16912
// exit ;
16910: GO 16925
// DestroyUnit ( tmp [ 1 ] ) ;
16912: LD_VAR 0 1
16916: PUSH
16917: LD_INT 1
16919: ARRAY
16920: PPUSH
16921: CALL_OW 65
// end ;
16925: PPOPN 1
16927: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16928: LD_EXP 24
16932: PUSH
16933: LD_EXP 62
16937: AND
16938: IFFALSE 17067
16940: GO 16942
16942: DISABLE
16943: LD_INT 0
16945: PPUSH
// begin uc_side := 0 ;
16946: LD_ADDR_OWVAR 20
16950: PUSH
16951: LD_INT 0
16953: ST_TO_ADDR
// uc_nation := nation_arabian ;
16954: LD_ADDR_OWVAR 21
16958: PUSH
16959: LD_INT 2
16961: ST_TO_ADDR
// hc_gallery :=  ;
16962: LD_ADDR_OWVAR 33
16966: PUSH
16967: LD_STRING 
16969: ST_TO_ADDR
// hc_name :=  ;
16970: LD_ADDR_OWVAR 26
16974: PUSH
16975: LD_STRING 
16977: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16978: LD_INT 1
16980: PPUSH
16981: LD_INT 11
16983: PPUSH
16984: LD_INT 10
16986: PPUSH
16987: CALL_OW 380
// un := CreateHuman ;
16991: LD_ADDR_VAR 0 1
16995: PUSH
16996: CALL_OW 44
17000: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17001: LD_VAR 0 1
17005: PPUSH
17006: LD_INT 1
17008: PPUSH
17009: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17013: LD_INT 35
17015: PPUSH
17016: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_INT 22
17027: PUSH
17028: LD_OWVAR 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PPUSH
17037: CALL_OW 69
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 74
17051: PPUSH
17052: CALL_OW 115
// until IsDead ( un ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 301
17065: IFFALSE 17013
// end ;
17067: PPOPN 1
17069: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17070: LD_EXP 24
17074: PUSH
17075: LD_EXP 64
17079: AND
17080: IFFALSE 17092
17082: GO 17084
17084: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17085: LD_STRING earthquake(getX(game), 0, 32)
17087: PPUSH
17088: CALL_OW 559
17092: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17093: LD_EXP 24
17097: PUSH
17098: LD_EXP 65
17102: AND
17103: IFFALSE 17194
17105: GO 17107
17107: DISABLE
17108: LD_INT 0
17110: PPUSH
// begin enable ;
17111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17112: LD_ADDR_VAR 0 1
17116: PUSH
17117: LD_INT 22
17119: PUSH
17120: LD_OWVAR 2
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 21
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 33
17141: PUSH
17142: LD_INT 3
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: PPUSH
17154: CALL_OW 69
17158: ST_TO_ADDR
// if not tmp then
17159: LD_VAR 0 1
17163: NOT
17164: IFFALSE 17168
// exit ;
17166: GO 17194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17168: LD_VAR 0 1
17172: PUSH
17173: LD_INT 1
17175: PPUSH
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 12
17185: ARRAY
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 234
// end ;
17194: PPOPN 1
17196: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17197: LD_EXP 24
17201: PUSH
17202: LD_EXP 66
17206: AND
17207: IFFALSE 17348
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 25
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: ST_TO_ADDR
// if not tmp then
17253: LD_VAR 0 3
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17348
// un := tmp [ rand ( 1 , tmp ) ] ;
17262: LD_ADDR_VAR 0 2
17266: PUSH
17267: LD_VAR 0 3
17271: PUSH
17272: LD_INT 1
17274: PPUSH
17275: LD_VAR 0 3
17279: PPUSH
17280: CALL_OW 12
17284: ARRAY
17285: ST_TO_ADDR
// if Crawls ( un ) then
17286: LD_VAR 0 2
17290: PPUSH
17291: CALL_OW 318
17295: IFFALSE 17306
// ComWalk ( un ) ;
17297: LD_VAR 0 2
17301: PPUSH
17302: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17306: LD_VAR 0 2
17310: PPUSH
17311: LD_INT 9
17313: PPUSH
17314: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17318: LD_INT 28
17320: PPUSH
17321: LD_OWVAR 2
17325: PPUSH
17326: LD_INT 2
17328: PPUSH
17329: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17333: LD_INT 29
17335: PPUSH
17336: LD_OWVAR 2
17340: PPUSH
17341: LD_INT 2
17343: PPUSH
17344: CALL_OW 322
// end ;
17348: PPOPN 3
17350: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17351: LD_EXP 24
17355: PUSH
17356: LD_EXP 67
17360: AND
17361: IFFALSE 17472
17363: GO 17365
17365: DISABLE
17366: LD_INT 0
17368: PPUSH
17369: PPUSH
17370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_INT 22
17378: PUSH
17379: LD_OWVAR 2
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 25
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PPUSH
17402: CALL_OW 69
17406: ST_TO_ADDR
// if not tmp then
17407: LD_VAR 0 3
17411: NOT
17412: IFFALSE 17416
// exit ;
17414: GO 17472
// un := tmp [ rand ( 1 , tmp ) ] ;
17416: LD_ADDR_VAR 0 2
17420: PUSH
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 1
17428: PPUSH
17429: LD_VAR 0 3
17433: PPUSH
17434: CALL_OW 12
17438: ARRAY
17439: ST_TO_ADDR
// if Crawls ( un ) then
17440: LD_VAR 0 2
17444: PPUSH
17445: CALL_OW 318
17449: IFFALSE 17460
// ComWalk ( un ) ;
17451: LD_VAR 0 2
17455: PPUSH
17456: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17460: LD_VAR 0 2
17464: PPUSH
17465: LD_INT 8
17467: PPUSH
17468: CALL_OW 336
// end ;
17472: PPOPN 3
17474: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17475: LD_EXP 24
17479: PUSH
17480: LD_EXP 68
17484: AND
17485: IFFALSE 17629
17487: GO 17489
17489: DISABLE
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17494: LD_ADDR_VAR 0 2
17498: PUSH
17499: LD_INT 22
17501: PUSH
17502: LD_OWVAR 2
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 2
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 2
17523: PUSH
17524: LD_INT 34
17526: PUSH
17527: LD_INT 12
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 34
17536: PUSH
17537: LD_INT 51
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 34
17546: PUSH
17547: LD_INT 32
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: PPUSH
17565: CALL_OW 69
17569: ST_TO_ADDR
// if not tmp then
17570: LD_VAR 0 2
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17629
// for i in tmp do
17579: LD_ADDR_VAR 0 1
17583: PUSH
17584: LD_VAR 0 2
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17627
// if GetCargo ( i , mat_artifact ) = 0 then
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_INT 4
17599: PPUSH
17600: CALL_OW 289
17604: PUSH
17605: LD_INT 0
17607: EQUAL
17608: IFFALSE 17625
// SetCargo ( i , mat_siberit , 100 ) ;
17610: LD_VAR 0 1
17614: PPUSH
17615: LD_INT 3
17617: PPUSH
17618: LD_INT 100
17620: PPUSH
17621: CALL_OW 290
17625: GO 17589
17627: POP
17628: POP
// end ;
17629: PPOPN 2
17631: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17632: LD_EXP 24
17636: PUSH
17637: LD_EXP 69
17641: AND
17642: IFFALSE 17795
17644: GO 17646
17646: DISABLE
17647: LD_INT 0
17649: PPUSH
17650: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17651: LD_ADDR_VAR 0 2
17655: PUSH
17656: LD_INT 22
17658: PUSH
17659: LD_OWVAR 2
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PPUSH
17668: CALL_OW 69
17672: ST_TO_ADDR
// if not tmp then
17673: LD_VAR 0 2
17677: NOT
17678: IFFALSE 17682
// exit ;
17680: GO 17795
// for i := 1 to 2 do
17682: LD_ADDR_VAR 0 1
17686: PUSH
17687: DOUBLE
17688: LD_INT 1
17690: DEC
17691: ST_TO_ADDR
17692: LD_INT 2
17694: PUSH
17695: FOR_TO
17696: IFFALSE 17793
// begin uc_side := your_side ;
17698: LD_ADDR_OWVAR 20
17702: PUSH
17703: LD_OWVAR 2
17707: ST_TO_ADDR
// uc_nation := nation_american ;
17708: LD_ADDR_OWVAR 21
17712: PUSH
17713: LD_INT 1
17715: ST_TO_ADDR
// vc_chassis := us_morphling ;
17716: LD_ADDR_OWVAR 37
17720: PUSH
17721: LD_INT 5
17723: ST_TO_ADDR
// vc_engine := engine_siberite ;
17724: LD_ADDR_OWVAR 39
17728: PUSH
17729: LD_INT 3
17731: ST_TO_ADDR
// vc_control := control_computer ;
17732: LD_ADDR_OWVAR 38
17736: PUSH
17737: LD_INT 3
17739: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17740: LD_ADDR_OWVAR 40
17744: PUSH
17745: LD_INT 10
17747: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
17748: CALL_OW 45
17752: PPUSH
17753: LD_VAR 0 2
17757: PUSH
17758: LD_INT 1
17760: ARRAY
17761: PPUSH
17762: CALL_OW 250
17766: PPUSH
17767: LD_VAR 0 2
17771: PUSH
17772: LD_INT 1
17774: ARRAY
17775: PPUSH
17776: CALL_OW 251
17780: PPUSH
17781: LD_INT 12
17783: PPUSH
17784: LD_INT 1
17786: PPUSH
17787: CALL_OW 50
// end ;
17791: GO 17695
17793: POP
17794: POP
// end ;
17795: PPOPN 2
17797: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17798: LD_EXP 24
17802: PUSH
17803: LD_EXP 70
17807: AND
17808: IFFALSE 18030
17810: GO 17812
17812: DISABLE
17813: LD_INT 0
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
17819: PPUSH
17820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17821: LD_ADDR_VAR 0 6
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_OWVAR 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 3
17850: PUSH
17851: LD_INT 23
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: LIST
17869: PPUSH
17870: CALL_OW 69
17874: ST_TO_ADDR
// if not tmp then
17875: LD_VAR 0 6
17879: NOT
17880: IFFALSE 17884
// exit ;
17882: GO 18030
// s1 := rand ( 1 , 4 ) ;
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: LD_INT 1
17891: PPUSH
17892: LD_INT 4
17894: PPUSH
17895: CALL_OW 12
17899: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17900: LD_ADDR_VAR 0 4
17904: PUSH
17905: LD_VAR 0 6
17909: PUSH
17910: LD_INT 1
17912: ARRAY
17913: PPUSH
17914: LD_VAR 0 2
17918: PPUSH
17919: CALL_OW 259
17923: ST_TO_ADDR
// if s1 = 1 then
17924: LD_VAR 0 2
17928: PUSH
17929: LD_INT 1
17931: EQUAL
17932: IFFALSE 17952
// s2 := rand ( 2 , 4 ) else
17934: LD_ADDR_VAR 0 3
17938: PUSH
17939: LD_INT 2
17941: PPUSH
17942: LD_INT 4
17944: PPUSH
17945: CALL_OW 12
17949: ST_TO_ADDR
17950: GO 17960
// s2 := 1 ;
17952: LD_ADDR_VAR 0 3
17956: PUSH
17957: LD_INT 1
17959: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17960: LD_ADDR_VAR 0 5
17964: PUSH
17965: LD_VAR 0 6
17969: PUSH
17970: LD_INT 1
17972: ARRAY
17973: PPUSH
17974: LD_VAR 0 3
17978: PPUSH
17979: CALL_OW 259
17983: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17984: LD_VAR 0 6
17988: PUSH
17989: LD_INT 1
17991: ARRAY
17992: PPUSH
17993: LD_VAR 0 2
17997: PPUSH
17998: LD_VAR 0 5
18002: PPUSH
18003: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18007: LD_VAR 0 6
18011: PUSH
18012: LD_INT 1
18014: ARRAY
18015: PPUSH
18016: LD_VAR 0 3
18020: PPUSH
18021: LD_VAR 0 4
18025: PPUSH
18026: CALL_OW 237
// end ;
18030: PPOPN 6
18032: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18033: LD_EXP 24
18037: PUSH
18038: LD_EXP 71
18042: AND
18043: IFFALSE 18122
18045: GO 18047
18047: DISABLE
18048: LD_INT 0
18050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_INT 22
18058: PUSH
18059: LD_OWVAR 2
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 30
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PPUSH
18082: CALL_OW 69
18086: ST_TO_ADDR
// if not tmp then
18087: LD_VAR 0 1
18091: NOT
18092: IFFALSE 18096
// exit ;
18094: GO 18122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18096: LD_VAR 0 1
18100: PUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_VAR 0 1
18108: PPUSH
18109: CALL_OW 12
18113: ARRAY
18114: PPUSH
18115: LD_INT 1
18117: PPUSH
18118: CALL_OW 234
// end ;
18122: PPOPN 1
18124: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18125: LD_EXP 24
18129: PUSH
18130: LD_EXP 72
18134: AND
18135: IFFALSE 18247
18137: GO 18139
18139: DISABLE
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18144: LD_ADDR_VAR 0 2
18148: PUSH
18149: LD_INT 22
18151: PUSH
18152: LD_OWVAR 2
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 2
18163: PUSH
18164: LD_INT 30
18166: PUSH
18167: LD_INT 27
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 30
18176: PUSH
18177: LD_INT 26
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 30
18186: PUSH
18187: LD_INT 28
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PPUSH
18204: CALL_OW 69
18208: ST_TO_ADDR
// if not tmp then
18209: LD_VAR 0 2
18213: NOT
18214: IFFALSE 18218
// exit ;
18216: GO 18247
// for i in tmp do
18218: LD_ADDR_VAR 0 1
18222: PUSH
18223: LD_VAR 0 2
18227: PUSH
18228: FOR_IN
18229: IFFALSE 18245
// SetLives ( i , 1 ) ;
18231: LD_VAR 0 1
18235: PPUSH
18236: LD_INT 1
18238: PPUSH
18239: CALL_OW 234
18243: GO 18228
18245: POP
18246: POP
// end ;
18247: PPOPN 2
18249: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18250: LD_EXP 24
18254: PUSH
18255: LD_EXP 73
18259: AND
18260: IFFALSE 18534
18262: GO 18264
18264: DISABLE
18265: LD_INT 0
18267: PPUSH
18268: PPUSH
18269: PPUSH
// begin i := rand ( 1 , 7 ) ;
18270: LD_ADDR_VAR 0 1
18274: PUSH
18275: LD_INT 1
18277: PPUSH
18278: LD_INT 7
18280: PPUSH
18281: CALL_OW 12
18285: ST_TO_ADDR
// case i of 1 :
18286: LD_VAR 0 1
18290: PUSH
18291: LD_INT 1
18293: DOUBLE
18294: EQUAL
18295: IFTRUE 18299
18297: GO 18309
18299: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18300: LD_STRING earthquake(getX(game), 0, 32)
18302: PPUSH
18303: CALL_OW 559
18307: GO 18534
18309: LD_INT 2
18311: DOUBLE
18312: EQUAL
18313: IFTRUE 18317
18315: GO 18331
18317: POP
// begin ToLua ( displayStucuk(); ) ;
18318: LD_STRING displayStucuk();
18320: PPUSH
18321: CALL_OW 559
// ResetFog ;
18325: CALL_OW 335
// end ; 3 :
18329: GO 18534
18331: LD_INT 3
18333: DOUBLE
18334: EQUAL
18335: IFTRUE 18339
18337: GO 18443
18339: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18340: LD_ADDR_VAR 0 2
18344: PUSH
18345: LD_INT 22
18347: PUSH
18348: LD_OWVAR 2
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 25
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL_OW 69
18375: ST_TO_ADDR
// if not tmp then
18376: LD_VAR 0 2
18380: NOT
18381: IFFALSE 18385
// exit ;
18383: GO 18534
// un := tmp [ rand ( 1 , tmp ) ] ;
18385: LD_ADDR_VAR 0 3
18389: PUSH
18390: LD_VAR 0 2
18394: PUSH
18395: LD_INT 1
18397: PPUSH
18398: LD_VAR 0 2
18402: PPUSH
18403: CALL_OW 12
18407: ARRAY
18408: ST_TO_ADDR
// if Crawls ( un ) then
18409: LD_VAR 0 3
18413: PPUSH
18414: CALL_OW 318
18418: IFFALSE 18429
// ComWalk ( un ) ;
18420: LD_VAR 0 3
18424: PPUSH
18425: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18429: LD_VAR 0 3
18433: PPUSH
18434: LD_INT 8
18436: PPUSH
18437: CALL_OW 336
// end ; 4 :
18441: GO 18534
18443: LD_INT 4
18445: DOUBLE
18446: EQUAL
18447: IFTRUE 18451
18449: GO 18512
18451: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18452: LD_ADDR_VAR 0 2
18456: PUSH
18457: LD_INT 22
18459: PUSH
18460: LD_OWVAR 2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 30
18471: PUSH
18472: LD_INT 29
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PPUSH
18483: CALL_OW 69
18487: ST_TO_ADDR
// if not tmp then
18488: LD_VAR 0 2
18492: NOT
18493: IFFALSE 18497
// exit ;
18495: GO 18534
// DestroyUnit ( tmp [ 1 ] ) ;
18497: LD_VAR 0 2
18501: PUSH
18502: LD_INT 1
18504: ARRAY
18505: PPUSH
18506: CALL_OW 65
// end ; 5 .. 7 :
18510: GO 18534
18512: LD_INT 5
18514: DOUBLE
18515: GREATEREQUAL
18516: IFFALSE 18524
18518: LD_INT 7
18520: DOUBLE
18521: LESSEQUAL
18522: IFTRUE 18526
18524: GO 18533
18526: POP
// StreamSibBomb ; end ;
18527: CALL 14814 0 0
18531: GO 18534
18533: POP
// end ;
18534: PPOPN 3
18536: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18537: LD_EXP 24
18541: PUSH
18542: LD_EXP 74
18546: AND
18547: IFFALSE 18703
18549: GO 18551
18551: DISABLE
18552: LD_INT 0
18554: PPUSH
18555: PPUSH
18556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18557: LD_ADDR_VAR 0 2
18561: PUSH
18562: LD_INT 81
18564: PUSH
18565: LD_OWVAR 2
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 21
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 21
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PPUSH
18606: CALL_OW 69
18610: ST_TO_ADDR
// if not tmp then
18611: LD_VAR 0 2
18615: NOT
18616: IFFALSE 18620
// exit ;
18618: GO 18703
// p := 0 ;
18620: LD_ADDR_VAR 0 3
18624: PUSH
18625: LD_INT 0
18627: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18628: LD_INT 35
18630: PPUSH
18631: CALL_OW 67
// p := p + 1 ;
18635: LD_ADDR_VAR 0 3
18639: PUSH
18640: LD_VAR 0 3
18644: PUSH
18645: LD_INT 1
18647: PLUS
18648: ST_TO_ADDR
// for i in tmp do
18649: LD_ADDR_VAR 0 1
18653: PUSH
18654: LD_VAR 0 2
18658: PUSH
18659: FOR_IN
18660: IFFALSE 18691
// if GetLives ( i ) < 1000 then
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 256
18671: PUSH
18672: LD_INT 1000
18674: LESS
18675: IFFALSE 18689
// SetLives ( i , 1000 ) ;
18677: LD_VAR 0 1
18681: PPUSH
18682: LD_INT 1000
18684: PPUSH
18685: CALL_OW 234
18689: GO 18659
18691: POP
18692: POP
// until p > 20 ;
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 20
18700: GREATER
18701: IFFALSE 18628
// end ;
18703: PPOPN 3
18705: END
// every 0 0$1 trigger StreamModeActive and sTime do
18706: LD_EXP 24
18710: PUSH
18711: LD_EXP 75
18715: AND
18716: IFFALSE 18751
18718: GO 18720
18720: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18721: LD_INT 28
18723: PPUSH
18724: LD_OWVAR 2
18728: PPUSH
18729: LD_INT 2
18731: PPUSH
18732: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18736: LD_INT 30
18738: PPUSH
18739: LD_OWVAR 2
18743: PPUSH
18744: LD_INT 2
18746: PPUSH
18747: CALL_OW 322
// end ;
18751: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18752: LD_EXP 24
18756: PUSH
18757: LD_EXP 76
18761: AND
18762: IFFALSE 18883
18764: GO 18766
18766: DISABLE
18767: LD_INT 0
18769: PPUSH
18770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18771: LD_ADDR_VAR 0 2
18775: PUSH
18776: LD_INT 22
18778: PUSH
18779: LD_OWVAR 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 21
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 3
18800: PUSH
18801: LD_INT 23
18803: PUSH
18804: LD_INT 0
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: PPUSH
18820: CALL_OW 69
18824: ST_TO_ADDR
// if not tmp then
18825: LD_VAR 0 2
18829: NOT
18830: IFFALSE 18834
// exit ;
18832: GO 18883
// for i in tmp do
18834: LD_ADDR_VAR 0 1
18838: PUSH
18839: LD_VAR 0 2
18843: PUSH
18844: FOR_IN
18845: IFFALSE 18881
// begin if Crawls ( i ) then
18847: LD_VAR 0 1
18851: PPUSH
18852: CALL_OW 318
18856: IFFALSE 18867
// ComWalk ( i ) ;
18858: LD_VAR 0 1
18862: PPUSH
18863: CALL_OW 138
// SetClass ( i , 2 ) ;
18867: LD_VAR 0 1
18871: PPUSH
18872: LD_INT 2
18874: PPUSH
18875: CALL_OW 336
// end ;
18879: GO 18844
18881: POP
18882: POP
// end ;
18883: PPOPN 2
18885: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18886: LD_EXP 24
18890: PUSH
18891: LD_EXP 77
18895: AND
18896: IFFALSE 19177
18898: GO 18900
18900: DISABLE
18901: LD_INT 0
18903: PPUSH
18904: PPUSH
18905: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18906: LD_OWVAR 2
18910: PPUSH
18911: LD_INT 9
18913: PPUSH
18914: LD_INT 1
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18924: LD_INT 9
18926: PPUSH
18927: LD_OWVAR 2
18931: PPUSH
18932: CALL_OW 343
// uc_side := 9 ;
18936: LD_ADDR_OWVAR 20
18940: PUSH
18941: LD_INT 9
18943: ST_TO_ADDR
// uc_nation := 2 ;
18944: LD_ADDR_OWVAR 21
18948: PUSH
18949: LD_INT 2
18951: ST_TO_ADDR
// hc_name := Dark Warrior ;
18952: LD_ADDR_OWVAR 26
18956: PUSH
18957: LD_STRING Dark Warrior
18959: ST_TO_ADDR
// hc_gallery :=  ;
18960: LD_ADDR_OWVAR 33
18964: PUSH
18965: LD_STRING 
18967: ST_TO_ADDR
// hc_noskilllimit := true ;
18968: LD_ADDR_OWVAR 76
18972: PUSH
18973: LD_INT 1
18975: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18976: LD_ADDR_OWVAR 31
18980: PUSH
18981: LD_INT 30
18983: PUSH
18984: LD_INT 30
18986: PUSH
18987: LD_INT 30
18989: PUSH
18990: LD_INT 30
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: ST_TO_ADDR
// un := CreateHuman ;
18999: LD_ADDR_VAR 0 3
19003: PUSH
19004: CALL_OW 44
19008: ST_TO_ADDR
// hc_noskilllimit := false ;
19009: LD_ADDR_OWVAR 76
19013: PUSH
19014: LD_INT 0
19016: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19017: LD_VAR 0 3
19021: PPUSH
19022: LD_INT 1
19024: PPUSH
19025: CALL_OW 51
// p := 0 ;
19029: LD_ADDR_VAR 0 2
19033: PUSH
19034: LD_INT 0
19036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19037: LD_INT 35
19039: PPUSH
19040: CALL_OW 67
// p := p + 1 ;
19044: LD_ADDR_VAR 0 2
19048: PUSH
19049: LD_VAR 0 2
19053: PUSH
19054: LD_INT 1
19056: PLUS
19057: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19058: LD_VAR 0 3
19062: PPUSH
19063: CALL_OW 256
19067: PUSH
19068: LD_INT 1000
19070: LESS
19071: IFFALSE 19085
// SetLives ( un , 1000 ) ;
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 1000
19080: PPUSH
19081: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19085: LD_VAR 0 3
19089: PPUSH
19090: LD_INT 81
19092: PUSH
19093: LD_OWVAR 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 91
19104: PUSH
19105: LD_VAR 0 3
19109: PUSH
19110: LD_INT 30
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 69
19126: PPUSH
19127: LD_VAR 0 3
19131: PPUSH
19132: CALL_OW 74
19136: PPUSH
19137: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19141: LD_VAR 0 2
19145: PUSH
19146: LD_INT 60
19148: GREATER
19149: PUSH
19150: LD_VAR 0 3
19154: PPUSH
19155: CALL_OW 301
19159: OR
19160: IFFALSE 19037
// if un then
19162: LD_VAR 0 3
19166: IFFALSE 19177
// RemoveUnit ( un ) ;
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 64
// end ; end_of_file end_of_file
19177: PPOPN 3
19179: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19180: LD_INT 0
19182: PPUSH
19183: PPUSH
19184: PPUSH
19185: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19186: LD_VAR 0 1
19190: PPUSH
19191: CALL_OW 264
19195: PUSH
19196: LD_EXP 82
19200: EQUAL
19201: IFFALSE 19273
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19203: LD_INT 68
19205: PPUSH
19206: LD_VAR 0 1
19210: PPUSH
19211: CALL_OW 255
19215: PPUSH
19216: CALL_OW 321
19220: PUSH
19221: LD_INT 2
19223: EQUAL
19224: IFFALSE 19236
// eff := 70 else
19226: LD_ADDR_VAR 0 4
19230: PUSH
19231: LD_INT 70
19233: ST_TO_ADDR
19234: GO 19244
// eff := 30 ;
19236: LD_ADDR_VAR 0 4
19240: PUSH
19241: LD_INT 30
19243: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 250
19253: PPUSH
19254: LD_VAR 0 1
19258: PPUSH
19259: CALL_OW 251
19263: PPUSH
19264: LD_VAR 0 4
19268: PPUSH
19269: CALL_OW 495
// end ; end ;
19273: LD_VAR 0 2
19277: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19278: LD_INT 0
19280: PPUSH
// end ;
19281: LD_VAR 0 4
19285: RET
// export function SOS_Command ( cmd ) ; begin
19286: LD_INT 0
19288: PPUSH
// end ;
19289: LD_VAR 0 2
19293: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19294: LD_VAR 0 1
19298: PUSH
19299: LD_INT 255
19301: EQUAL
19302: PUSH
19303: LD_VAR 0 2
19307: PPUSH
19308: CALL_OW 264
19312: PUSH
19313: LD_INT 14
19315: PUSH
19316: LD_INT 53
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: IN
19323: AND
19324: PUSH
19325: LD_VAR 0 4
19329: PPUSH
19330: LD_VAR 0 5
19334: PPUSH
19335: CALL_OW 488
19339: AND
19340: IFFALSE 19364
// CutTreeXYR ( unit , x , y , 12 ) ;
19342: LD_VAR 0 2
19346: PPUSH
19347: LD_VAR 0 4
19351: PPUSH
19352: LD_VAR 0 5
19356: PPUSH
19357: LD_INT 12
19359: PPUSH
19360: CALL 19367 0 4
// end ;
19364: PPOPN 5
19366: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19367: LD_INT 0
19369: PPUSH
19370: PPUSH
19371: PPUSH
19372: PPUSH
19373: PPUSH
19374: PPUSH
19375: PPUSH
19376: PPUSH
19377: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19378: LD_VAR 0 1
19382: NOT
19383: PUSH
19384: LD_VAR 0 2
19388: PPUSH
19389: LD_VAR 0 3
19393: PPUSH
19394: CALL_OW 488
19398: NOT
19399: OR
19400: PUSH
19401: LD_VAR 0 4
19405: NOT
19406: OR
19407: IFFALSE 19411
// exit ;
19409: GO 19751
// list := [ ] ;
19411: LD_ADDR_VAR 0 13
19415: PUSH
19416: EMPTY
19417: ST_TO_ADDR
// if x - r < 0 then
19418: LD_VAR 0 2
19422: PUSH
19423: LD_VAR 0 4
19427: MINUS
19428: PUSH
19429: LD_INT 0
19431: LESS
19432: IFFALSE 19444
// min_x := 0 else
19434: LD_ADDR_VAR 0 7
19438: PUSH
19439: LD_INT 0
19441: ST_TO_ADDR
19442: GO 19460
// min_x := x - r ;
19444: LD_ADDR_VAR 0 7
19448: PUSH
19449: LD_VAR 0 2
19453: PUSH
19454: LD_VAR 0 4
19458: MINUS
19459: ST_TO_ADDR
// if y - r < 0 then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_VAR 0 4
19469: MINUS
19470: PUSH
19471: LD_INT 0
19473: LESS
19474: IFFALSE 19486
// min_y := 0 else
19476: LD_ADDR_VAR 0 8
19480: PUSH
19481: LD_INT 0
19483: ST_TO_ADDR
19484: GO 19502
// min_y := y - r ;
19486: LD_ADDR_VAR 0 8
19490: PUSH
19491: LD_VAR 0 3
19495: PUSH
19496: LD_VAR 0 4
19500: MINUS
19501: ST_TO_ADDR
// max_x := x + r ;
19502: LD_ADDR_VAR 0 9
19506: PUSH
19507: LD_VAR 0 2
19511: PUSH
19512: LD_VAR 0 4
19516: PLUS
19517: ST_TO_ADDR
// max_y := y + r ;
19518: LD_ADDR_VAR 0 10
19522: PUSH
19523: LD_VAR 0 3
19527: PUSH
19528: LD_VAR 0 4
19532: PLUS
19533: ST_TO_ADDR
// for _x = min_x to max_x do
19534: LD_ADDR_VAR 0 11
19538: PUSH
19539: DOUBLE
19540: LD_VAR 0 7
19544: DEC
19545: ST_TO_ADDR
19546: LD_VAR 0 9
19550: PUSH
19551: FOR_TO
19552: IFFALSE 19669
// for _y = min_y to max_y do
19554: LD_ADDR_VAR 0 12
19558: PUSH
19559: DOUBLE
19560: LD_VAR 0 8
19564: DEC
19565: ST_TO_ADDR
19566: LD_VAR 0 10
19570: PUSH
19571: FOR_TO
19572: IFFALSE 19665
// begin if not ValidHex ( _x , _y ) then
19574: LD_VAR 0 11
19578: PPUSH
19579: LD_VAR 0 12
19583: PPUSH
19584: CALL_OW 488
19588: NOT
19589: IFFALSE 19593
// continue ;
19591: GO 19571
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19593: LD_VAR 0 11
19597: PPUSH
19598: LD_VAR 0 12
19602: PPUSH
19603: CALL_OW 351
19607: PUSH
19608: LD_VAR 0 11
19612: PPUSH
19613: LD_VAR 0 12
19617: PPUSH
19618: CALL_OW 554
19622: AND
19623: IFFALSE 19663
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19625: LD_ADDR_VAR 0 13
19629: PUSH
19630: LD_VAR 0 13
19634: PPUSH
19635: LD_VAR 0 13
19639: PUSH
19640: LD_INT 1
19642: PLUS
19643: PPUSH
19644: LD_VAR 0 11
19648: PUSH
19649: LD_VAR 0 12
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PPUSH
19658: CALL_OW 2
19662: ST_TO_ADDR
// end ;
19663: GO 19571
19665: POP
19666: POP
19667: GO 19551
19669: POP
19670: POP
// if not list then
19671: LD_VAR 0 13
19675: NOT
19676: IFFALSE 19680
// exit ;
19678: GO 19751
// for i in list do
19680: LD_ADDR_VAR 0 6
19684: PUSH
19685: LD_VAR 0 13
19689: PUSH
19690: FOR_IN
19691: IFFALSE 19749
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19693: LD_VAR 0 1
19697: PPUSH
19698: LD_STRING M
19700: PUSH
19701: LD_VAR 0 6
19705: PUSH
19706: LD_INT 1
19708: ARRAY
19709: PUSH
19710: LD_VAR 0 6
19714: PUSH
19715: LD_INT 2
19717: ARRAY
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: PPUSH
19743: CALL_OW 447
19747: GO 19690
19749: POP
19750: POP
// end ; end_of_file
19751: LD_VAR 0 5
19755: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
19756: GO 19758
19758: DISABLE
// begin ru_radar := 98 ;
19759: LD_ADDR_EXP 78
19763: PUSH
19764: LD_INT 98
19766: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19767: LD_ADDR_EXP 79
19771: PUSH
19772: LD_INT 89
19774: ST_TO_ADDR
// us_hack := 99 ;
19775: LD_ADDR_EXP 80
19779: PUSH
19780: LD_INT 99
19782: ST_TO_ADDR
// us_artillery := 97 ;
19783: LD_ADDR_EXP 81
19787: PUSH
19788: LD_INT 97
19790: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19791: LD_ADDR_EXP 82
19795: PUSH
19796: LD_INT 91
19798: ST_TO_ADDR
// end ;
19799: END
