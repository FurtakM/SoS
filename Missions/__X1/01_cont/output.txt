// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5338
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5338
// if meetJohnny then
5306: LD_EXP 3
5310: IFFALSE 5326
// Say ( Heike , DH-dogtag-found ) else
5312: LD_EXP 16
5316: PPUSH
5317: LD_STRING DH-dogtag-found
5319: PPUSH
5320: CALL_OW 88
5324: GO 5338
// Say ( Heike , DH-dogtag-found-no-american ) ;
5326: LD_EXP 16
5330: PPUSH
5331: LD_STRING DH-dogtag-found-no-american
5333: PPUSH
5334: CALL_OW 88
// end ;
5338: PPOPN 1
5340: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5341: LD_EXP 8
5345: NOT
5346: PUSH
5347: LD_EXP 7
5351: NOT
5352: AND
5353: PUSH
5354: LD_INT 5
5356: PPUSH
5357: LD_EXP 16
5361: PPUSH
5362: CALL_OW 292
5366: AND
5367: PUSH
5368: LD_EXP 16
5372: PPUSH
5373: LD_EXP 17
5377: PPUSH
5378: CALL_OW 296
5382: PUSH
5383: LD_INT 8
5385: LESS
5386: AND
5387: IFFALSE 5779
5389: GO 5391
5391: DISABLE
// begin olafSpotted := true ;
5392: LD_ADDR_EXP 8
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if HasTask ( Olaf ) then
5400: LD_EXP 17
5404: PPUSH
5405: CALL_OW 314
5409: IFFALSE 5420
// ComStop ( Olaf ) ;
5411: LD_EXP 17
5415: PPUSH
5416: CALL_OW 141
// InGameOn ;
5420: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 296
5438: PUSH
5439: LD_INT 8
5441: GREATER
5442: IFFALSE 5458
// ComMoveUnit ( Olaf , Heike ) ;
5444: LD_EXP 17
5448: PPUSH
5449: LD_EXP 16
5453: PPUSH
5454: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5458: LD_INT 35
5460: PPUSH
5461: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_EXP 16
5474: PPUSH
5475: CALL_OW 296
5479: PUSH
5480: LD_INT 8
5482: LESSEQUAL
5483: IFFALSE 5458
// ComTurnUnit ( Heike , Olaf ) ;
5485: LD_EXP 16
5489: PPUSH
5490: LD_EXP 17
5494: PPUSH
5495: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5499: LD_EXP 17
5503: PPUSH
5504: LD_EXP 16
5508: PPUSH
5509: CALL_OW 119
// wait ( 0 0$0.5 ) ;
5513: LD_INT 18
5515: PPUSH
5516: CALL_OW 67
// DialogueOn ;
5520: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5524: LD_EXP 17
5528: PPUSH
5529: LD_STRING DO-olaf-1
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5536: LD_EXP 16
5540: PPUSH
5541: LD_STRING DH-olaf-1
5543: PPUSH
5544: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5548: LD_EXP 17
5552: PPUSH
5553: LD_STRING DO-olaf-2
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5560: LD_EXP 16
5564: PPUSH
5565: LD_STRING DH-olaf-2
5567: PPUSH
5568: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5572: LD_EXP 17
5576: PPUSH
5577: LD_STRING DO-olaf-3
5579: PPUSH
5580: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5584: LD_EXP 17
5588: PPUSH
5589: LD_STRING DO-olaf-4
5591: PPUSH
5592: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5596: LD_EXP 16
5600: PPUSH
5601: LD_STRING DH-olaf-4
5603: PPUSH
5604: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5608: LD_EXP 17
5612: PPUSH
5613: LD_STRING DO-olaf-5
5615: PPUSH
5616: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5620: LD_EXP 16
5624: PPUSH
5625: LD_STRING DH-olaf-5
5627: PPUSH
5628: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-6
5639: PPUSH
5640: CALL_OW 88
// if russianSpotted or johnnySaved then
5644: LD_EXP 9
5648: PUSH
5649: LD_EXP 4
5653: OR
5654: IFFALSE 5682
// begin Say ( Heike , DH-olaf-6a ) ;
5656: LD_EXP 16
5660: PPUSH
5661: LD_STRING DH-olaf-6a
5663: PPUSH
5664: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING DO-olaf-7a
5675: PPUSH
5676: CALL_OW 88
// end else
5680: GO 5706
// begin Say ( Heike , DH-olaf-6b ) ;
5682: LD_EXP 16
5686: PPUSH
5687: LD_STRING DH-olaf-6b
5689: PPUSH
5690: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5694: LD_EXP 17
5698: PPUSH
5699: LD_STRING DO-olaf-7b
5701: PPUSH
5702: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5706: LD_EXP 17
5710: PPUSH
5711: LD_STRING DO-olaf-8
5713: PPUSH
5714: CALL_OW 88
// DialogueOff ;
5718: CALL_OW 7
// InGameOff ;
5722: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5726: LD_STRING O3_camp_cont
5728: PPUSH
5729: CALL_OW 337
// if not johnnySaved then
5733: LD_EXP 4
5737: NOT
5738: IFFALSE 5749
// KillUnit ( Johnny ) ;
5740: LD_EXP 25
5744: PPUSH
5745: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5749: LD_EXP 17
5753: PPUSH
5754: LD_INT 52
5756: PPUSH
5757: LD_INT 90
5759: PPUSH
5760: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5764: LD_EXP 17
5768: PPUSH
5769: LD_INT 53
5771: PPUSH
5772: LD_INT 89
5774: PPUSH
5775: CALL_OW 178
// end ;
5779: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5780: LD_EXP 8
5784: NOT
5785: PUSH
5786: LD_EXP 16
5790: PPUSH
5791: LD_EXP 18
5795: PPUSH
5796: CALL_OW 296
5800: PUSH
5801: LD_INT 36
5803: LESS
5804: AND
5805: IFFALSE 5825
5807: GO 5809
5809: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5810: LD_EXP 17
5814: PPUSH
5815: LD_INT 39
5817: PPUSH
5818: LD_INT 71
5820: PPUSH
5821: CALL_OW 111
5825: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5826: LD_EXP 7
5830: NOT
5831: PUSH
5832: LD_INT 2
5834: PPUSH
5835: LD_EXP 19
5839: PPUSH
5840: CALL_OW 292
5844: PUSH
5845: LD_INT 2
5847: PPUSH
5848: LD_EXP 18
5852: PPUSH
5853: CALL_OW 292
5857: OR
5858: AND
5859: IFFALSE 7180
5861: GO 5863
5863: DISABLE
5864: LD_INT 0
5866: PPUSH
5867: PPUSH
5868: PPUSH
// begin if not johnnySaved then
5869: LD_EXP 4
5873: NOT
5874: IFFALSE 5885
// KillUnit ( Johnny ) ;
5876: LD_EXP 25
5880: PPUSH
5881: CALL_OW 66
// mercenariesSpotted := true ;
5885: LD_ADDR_EXP 7
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5893: LD_STRING O4_camp_cont
5895: PPUSH
5896: CALL_OW 337
// InGameOn ;
5900: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5904: LD_INT 53
5906: PPUSH
5907: LD_INT 89
5909: PPUSH
5910: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5914: LD_INT 53
5916: PPUSH
5917: LD_INT 89
5919: PPUSH
5920: LD_INT 2
5922: PPUSH
5923: LD_INT 8
5925: NEG
5926: PPUSH
5927: CALL_OW 330
// if olafSpotted then
5931: LD_EXP 8
5935: IFFALSE 6053
// begin AddComTurnUnit ( Olaf , Heike ) ;
5937: LD_EXP 17
5941: PPUSH
5942: LD_EXP 16
5946: PPUSH
5947: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5951: LD_EXP 16
5955: PPUSH
5956: LD_INT 51
5958: PPUSH
5959: LD_INT 86
5961: PPUSH
5962: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5966: LD_EXP 16
5970: PPUSH
5971: LD_EXP 17
5975: PPUSH
5976: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-1
5987: PPUSH
5988: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5992: LD_EXP 18
5996: PUSH
5997: LD_EXP 19
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: LD_EXP 16
6010: PPUSH
6011: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
6015: LD_EXP 18
6019: PPUSH
6020: LD_STRING DG-camp-1
6022: PPUSH
6023: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6027: LD_EXP 16
6031: PPUSH
6032: LD_STRING DH-camp-1
6034: PPUSH
6035: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6039: LD_EXP 17
6043: PPUSH
6044: LD_STRING DO-camp-2
6046: PPUSH
6047: CALL_OW 88
// end else
6051: GO 6448
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6053: LD_EXP 16
6057: PPUSH
6058: LD_INT 51
6060: PPUSH
6061: LD_INT 86
6063: PPUSH
6064: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6068: LD_EXP 16
6072: PPUSH
6073: LD_EXP 18
6077: PPUSH
6078: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6082: LD_EXP 18
6086: PUSH
6087: LD_EXP 19
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: LD_EXP 16
6100: PPUSH
6101: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6105: LD_EXP 18
6109: PPUSH
6110: LD_STRING DG-camp-1a
6112: PPUSH
6113: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6117: LD_EXP 16
6121: PPUSH
6122: LD_STRING DH-camp-1a
6124: PPUSH
6125: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6129: LD_INT 1
6131: PPUSH
6132: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6136: LD_EXP 19
6140: PPUSH
6141: LD_EXP 17
6145: PPUSH
6146: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_STRING DM-camp-1a
6157: PPUSH
6158: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6162: LD_EXP 17
6166: PPUSH
6167: LD_INT 52
6169: PPUSH
6170: LD_INT 90
6172: PPUSH
6173: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6177: LD_EXP 19
6181: PPUSH
6182: LD_EXP 16
6186: PPUSH
6187: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6191: LD_EXP 18
6195: PPUSH
6196: LD_STRING DG-camp-2a
6198: PPUSH
6199: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6203: LD_EXP 16
6207: PPUSH
6208: LD_STRING DH-camp-2a
6210: PPUSH
6211: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6215: LD_EXP 19
6219: PPUSH
6220: LD_STRING DM-camp-2a
6222: PPUSH
6223: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6234: LD_EXP 17
6238: PPUSH
6239: LD_EXP 16
6243: PPUSH
6244: CALL_OW 296
6248: PUSH
6249: LD_INT 10
6251: LESS
6252: IFFALSE 6227
// AddComTurnUnit ( Olaf , Heike ) ;
6254: LD_EXP 17
6258: PPUSH
6259: LD_EXP 16
6263: PPUSH
6264: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6268: LD_EXP 19
6272: PPUSH
6273: LD_EXP 16
6277: PPUSH
6278: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6282: LD_EXP 17
6286: PPUSH
6287: LD_STRING DO-camp-2a
6289: PPUSH
6290: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6294: LD_EXP 16
6298: PPUSH
6299: LD_EXP 17
6303: PPUSH
6304: CALL_OW 119
// if russianSpotted then
6308: LD_EXP 9
6312: IFFALSE 6352
// begin Say ( Heike , DH-camp-2aa ) ;
6314: LD_EXP 16
6318: PPUSH
6319: LD_STRING DH-camp-2aa
6321: PPUSH
6322: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6326: LD_EXP 18
6330: PPUSH
6331: LD_STRING DG-camp-2aa
6333: PPUSH
6334: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6338: LD_EXP 19
6342: PPUSH
6343: LD_STRING DM-camp-2aa
6345: PPUSH
6346: CALL_OW 88
// end else
6350: GO 6376
// begin Say ( Heike , DH-camp-2ab ) ;
6352: LD_EXP 16
6356: PPUSH
6357: LD_STRING DH-camp-2ab
6359: PPUSH
6360: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6364: LD_EXP 19
6368: PPUSH
6369: LD_STRING DM-camp-2ab
6371: PPUSH
6372: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6376: LD_EXP 16
6380: PPUSH
6381: LD_STRING DH-camp-3a
6383: PPUSH
6384: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6388: LD_EXP 17
6392: PPUSH
6393: LD_STRING DO-camp-3a
6395: PPUSH
6396: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6400: LD_EXP 18
6404: PPUSH
6405: LD_STRING DG-camp-3a
6407: PPUSH
6408: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6412: LD_EXP 16
6416: PPUSH
6417: LD_STRING DH-camp-4aa
6419: PPUSH
6420: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6424: LD_EXP 19
6428: PPUSH
6429: LD_STRING DM-camp-4aa
6431: PPUSH
6432: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6436: LD_EXP 17
6440: PPUSH
6441: LD_STRING DO-camp-4a
6443: PPUSH
6444: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6448: LD_EXP 17
6452: PPUSH
6453: LD_STRING DO-camp-3
6455: PPUSH
6456: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6460: LD_EXP 17
6464: PPUSH
6465: LD_STRING DO-camp-4
6467: PPUSH
6468: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6472: LD_EXP 18
6476: PPUSH
6477: LD_EXP 17
6481: PPUSH
6482: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6486: LD_EXP 18
6490: PPUSH
6491: LD_STRING DG-camp-4
6493: PPUSH
6494: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6498: LD_EXP 16
6502: PPUSH
6503: LD_EXP 18
6507: PPUSH
6508: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6512: LD_EXP 16
6516: PPUSH
6517: LD_STRING DH-camp-4
6519: PPUSH
6520: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6524: LD_EXP 19
6528: PUSH
6529: LD_EXP 17
6533: PUSH
6534: LD_EXP 18
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PPUSH
6544: LD_EXP 16
6548: PPUSH
6549: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6553: LD_EXP 18
6557: PPUSH
6558: LD_STRING DG-camp-5
6560: PPUSH
6561: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6565: LD_EXP 18
6569: PPUSH
6570: LD_STRING DG-camp-6
6572: PPUSH
6573: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6577: LD_EXP 16
6581: PPUSH
6582: LD_STRING DH-camp-6
6584: PPUSH
6585: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6589: LD_EXP 18
6593: PPUSH
6594: LD_STRING DG-camp-7
6596: PPUSH
6597: CALL_OW 88
// if DogTagFound then
6601: LD_EXP 6
6605: IFFALSE 6645
// begin Say ( Heike , DH-quest-1a ) ;
6607: LD_EXP 16
6611: PPUSH
6612: LD_STRING DH-quest-1a
6614: PPUSH
6615: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6619: LD_EXP 18
6623: PPUSH
6624: LD_STRING DG-quest-1a
6626: PPUSH
6627: CALL_OW 88
// mercenariesQuestDone := true ;
6631: LD_ADDR_EXP 11
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// InGameOff ;
6639: CALL_OW 9
// end else
6643: GO 6811
// begin Say ( Heike , DH-camp-7 ) ;
6645: LD_EXP 16
6649: PPUSH
6650: LD_STRING DH-camp-7
6652: PPUSH
6653: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6657: LD_EXP 16
6661: PPUSH
6662: CALL_OW 256
6666: PUSH
6667: LD_INT 1000
6669: LESS
6670: IFFALSE 6762
// begin Say ( Olaf , DO-heal-1 ) ;
6672: LD_EXP 17
6676: PPUSH
6677: LD_STRING DO-heal-1
6679: PPUSH
6680: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 51
6691: PPUSH
6692: LD_INT 88
6694: PPUSH
6695: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6699: LD_INT 35
6701: PPUSH
6702: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6706: LD_EXP 16
6710: PPUSH
6711: LD_EXP 17
6715: PPUSH
6716: CALL_OW 296
6720: PUSH
6721: LD_INT 4
6723: LESS
6724: PUSH
6725: LD_EXP 16
6729: PPUSH
6730: LD_INT 51
6732: PPUSH
6733: LD_INT 88
6735: PPUSH
6736: CALL_OW 307
6740: OR
6741: IFFALSE 6699
// SetLives ( Heike , 1000 ) ;
6743: LD_EXP 16
6747: PPUSH
6748: LD_INT 1000
6750: PPUSH
6751: CALL_OW 234
// wait ( 0 0$2 ) ;
6755: LD_INT 70
6757: PPUSH
6758: CALL_OW 67
// end ; InGameOff ;
6762: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6766: LD_EXP 17
6770: PUSH
6771: LD_EXP 18
6775: PUSH
6776: LD_EXP 19
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: PPUSH
6786: LD_INT 53
6788: PPUSH
6789: LD_INT 89
6791: PPUSH
6792: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6796: LD_STRING O5_proof_cont
6798: PPUSH
6799: CALL_OW 337
// mercenariesQuestReady := true ;
6803: LD_ADDR_EXP 10
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6811: LD_EXP 10
6815: NOT
6816: IFFALSE 6820
// exit ;
6818: GO 7180
// wait ( 0 0$35 ) ;
6820: LD_INT 1225
6822: PPUSH
6823: CALL_OW 67
// driver := PreparePatrolTank ;
6827: LD_ADDR_VAR 0 2
6831: PUSH
6832: CALL 2821 0 0
6836: ST_TO_ADDR
// if not driver then
6837: LD_VAR 0 2
6841: NOT
6842: IFFALSE 6846
// exit ;
6844: GO 7180
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6846: LD_INT 2
6848: PPUSH
6849: LD_INT 1
6851: PPUSH
6852: LD_INT 2
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_VAR 0 2
6871: PPUSH
6872: CALL_OW 310
6876: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_INT 500
6884: PPUSH
6885: CALL_OW 234
// SetLives ( driver , 450 ) ;
6889: LD_VAR 0 2
6893: PPUSH
6894: LD_INT 450
6896: PPUSH
6897: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6901: LD_VAR 0 2
6905: PPUSH
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6916: LD_INT 35
6918: PPUSH
6919: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6923: LD_VAR 0 3
6927: PPUSH
6928: LD_INT 59
6930: PPUSH
6931: LD_INT 60
6933: PPUSH
6934: CALL_OW 307
6938: IFFALSE 6916
// if not See ( 1 , Heike ) then
6940: LD_INT 1
6942: PPUSH
6943: LD_EXP 16
6947: PPUSH
6948: CALL_OW 292
6952: NOT
6953: IFFALSE 7077
// begin if Difficulty < 3 then
6955: LD_OWVAR 67
6959: PUSH
6960: LD_INT 3
6962: LESS
6963: IFFALSE 6981
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6965: LD_INT 59
6967: PPUSH
6968: LD_INT 60
6970: PPUSH
6971: LD_INT 2
6973: PPUSH
6974: LD_INT 6
6976: PPUSH
6977: CALL_OW 330
// ComExitVehicle ( driver ) ;
6981: LD_VAR 0 2
6985: PPUSH
6986: CALL_OW 121
// wait ( 0 0$1 ) ;
6990: LD_INT 35
6992: PPUSH
6993: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6997: LD_VAR 0 2
7001: PPUSH
7002: LD_INT 58
7004: PPUSH
7005: LD_INT 54
7007: PPUSH
7008: CALL_OW 171
// wait ( 0 0$1 ) ;
7012: LD_INT 35
7014: PPUSH
7015: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_INT 57
7026: PPUSH
7027: LD_INT 53
7029: PPUSH
7030: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7034: LD_VAR 0 2
7038: PPUSH
7039: LD_INT 350
7041: PPUSH
7042: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7046: LD_VAR 0 2
7050: PPUSH
7051: LD_VAR 0 3
7055: PPUSH
7056: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: LD_INT 107
7067: PPUSH
7068: LD_INT 118
7070: PPUSH
7071: CALL_OW 171
// end else
7075: GO 7092
// begin ComMoveXY ( driver , 107 , 118 ) ;
7077: LD_VAR 0 2
7081: PPUSH
7082: LD_INT 107
7084: PPUSH
7085: LD_INT 118
7087: PPUSH
7088: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7092: LD_INT 35
7094: PPUSH
7095: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7099: LD_VAR 0 3
7103: PPUSH
7104: LD_INT 107
7106: PPUSH
7107: LD_INT 118
7109: PPUSH
7110: CALL_OW 307
7114: PUSH
7115: LD_VAR 0 2
7119: PPUSH
7120: CALL_OW 301
7124: OR
7125: IFFALSE 7092
// if IsDead ( driver [ 1 ] ) then
7127: LD_VAR 0 2
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PPUSH
7136: CALL_OW 301
7140: IFFALSE 7144
// exit ;
7142: GO 7180
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7144: LD_ADDR_VAR 0 1
7148: PUSH
7149: LD_INT 22
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: PUSH
7164: FOR_IN
7165: IFFALSE 7178
// RemoveUnit ( i ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL_OW 64
7176: GO 7164
7178: POP
7179: POP
// end ;
7180: PPOPN 3
7182: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7183: LD_INT 10
7185: PPUSH
7186: LD_INT 22
7188: PUSH
7189: LD_INT 2
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 21
7198: PUSH
7199: LD_INT 2
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PPUSH
7210: CALL_OW 70
7214: IFFALSE 7288
7216: GO 7218
7218: DISABLE
// begin InGameOn ;
7219: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7223: LD_EXP 17
7227: PUSH
7228: LD_EXP 19
7232: PUSH
7233: LD_EXP 18
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: LD_EXP 16
7247: PPUSH
7248: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7252: LD_EXP 19
7256: PPUSH
7257: LD_STRING DM-quest-1
7259: PPUSH
7260: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7264: LD_EXP 18
7268: PPUSH
7269: LD_STRING DG-quest-1
7271: PPUSH
7272: CALL_OW 88
// InGameOff ;
7276: CALL_OW 9
// mercenariesQuestDone := true ;
7280: LD_ADDR_EXP 11
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// end ;
7288: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7289: LD_EXP 16
7293: PPUSH
7294: LD_INT 10
7296: PPUSH
7297: CALL_OW 308
7301: PUSH
7302: LD_EXP 6
7306: AND
7307: PUSH
7308: LD_EXP 10
7312: AND
7313: PUSH
7314: LD_INT 10
7316: PPUSH
7317: LD_INT 22
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 21
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PPUSH
7341: CALL_OW 70
7345: NOT
7346: AND
7347: IFFALSE 7519
7349: GO 7351
7351: DISABLE
7352: LD_INT 0
7354: PPUSH
// begin InGameOn ;
7355: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7359: LD_EXP 17
7363: PUSH
7364: LD_EXP 19
7368: PUSH
7369: LD_EXP 18
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: PPUSH
7379: LD_EXP 16
7383: PPUSH
7384: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7388: LD_EXP 16
7392: PPUSH
7393: LD_INT 54
7395: PPUSH
7396: LD_INT 86
7398: PPUSH
7399: CALL_OW 111
// p := p + 1 ;
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 1
7415: PLUS
7416: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7417: LD_INT 35
7419: PPUSH
7420: CALL_OW 67
// p := p + 1 ;
7424: LD_ADDR_VAR 0 1
7428: PUSH
7429: LD_VAR 0 1
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7438: LD_EXP 16
7442: PPUSH
7443: LD_EXP 18
7447: PPUSH
7448: CALL_OW 296
7452: PUSH
7453: LD_INT 4
7455: LESS
7456: PUSH
7457: LD_VAR 0 1
7461: PUSH
7462: LD_INT 5
7464: GREATER
7465: OR
7466: IFFALSE 7417
// Say ( Mike , DM-quest-1 ) ;
7468: LD_EXP 19
7472: PPUSH
7473: LD_STRING DM-quest-1
7475: PPUSH
7476: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7480: LD_EXP 18
7484: PPUSH
7485: LD_STRING DG-quest-1
7487: PPUSH
7488: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7492: LD_EXP 16
7496: PPUSH
7497: LD_INT 55
7499: PPUSH
7500: LD_INT 87
7502: PPUSH
7503: CALL_OW 111
// InGameOff ;
7507: CALL_OW 9
// mercenariesQuestDone := true ;
7511: LD_ADDR_EXP 11
7515: PUSH
7516: LD_INT 1
7518: ST_TO_ADDR
// end ;
7519: PPOPN 1
7521: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7522: LD_EXP 16
7526: PUSH
7527: LD_INT 55
7529: PUSH
7530: EMPTY
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: IN
7538: IFFALSE 7578
7540: GO 7542
7542: DISABLE
// begin if Difficulty < 3 then
7543: LD_OWVAR 67
7547: PUSH
7548: LD_INT 3
7550: LESS
7551: IFFALSE 7566
// RemoveSeeing ( 59 , 60 , 2 ) ;
7553: LD_INT 59
7555: PPUSH
7556: LD_INT 60
7558: PPUSH
7559: LD_INT 2
7561: PPUSH
7562: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7566: LD_EXP 16
7570: PPUSH
7571: LD_STRING DH-driver
7573: PPUSH
7574: CALL_OW 88
// end ;
7578: END
// every 0 0$1 trigger mercenariesQuestDone do
7579: LD_EXP 11
7583: IFFALSE 8071
7585: GO 7587
7587: DISABLE
// begin if mercenariesQuestReady then
7588: LD_EXP 10
7592: IFFALSE 7601
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7594: LD_STRING O5_proof_cont_out
7596: PPUSH
7597: CALL_OW 337
// InGameOn ;
7601: CALL_OW 8
// if IsInUnit ( Heike ) then
7605: LD_EXP 16
7609: PPUSH
7610: CALL_OW 310
7614: IFFALSE 7625
// ComExitVehicle ( Heike ) ;
7616: LD_EXP 16
7620: PPUSH
7621: CALL_OW 121
// wait ( 3 ) ;
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7632: LD_EXP 16
7636: PPUSH
7637: LD_EXP 18
7641: PPUSH
7642: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7646: LD_EXP 17
7650: PUSH
7651: LD_EXP 19
7655: PUSH
7656: LD_EXP 18
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: LD_EXP 16
7670: PPUSH
7671: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7675: LD_EXP 16
7679: PPUSH
7680: LD_STRING DH-quest-done-1
7682: PPUSH
7683: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7687: LD_EXP 19
7691: PPUSH
7692: LD_STRING DM-quest-done-1
7694: PPUSH
7695: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7699: LD_EXP 18
7703: PPUSH
7704: LD_STRING DG-quest-done-1
7706: PPUSH
7707: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7711: LD_EXP 16
7715: PPUSH
7716: LD_EXP 17
7720: PPUSH
7721: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7725: LD_EXP 16
7729: PPUSH
7730: LD_STRING DH-quest-done-2
7732: PPUSH
7733: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7737: LD_EXP 17
7741: PPUSH
7742: LD_STRING DO-quest-done-2
7744: PPUSH
7745: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7749: LD_EXP 17
7753: PPUSH
7754: LD_STRING DO-quest-done-3
7756: PPUSH
7757: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7761: LD_EXP 18
7765: PPUSH
7766: LD_INT 51
7768: PPUSH
7769: LD_INT 90
7771: PPUSH
7772: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7776: LD_EXP 18
7780: PPUSH
7781: LD_INT 50
7783: PPUSH
7784: LD_INT 89
7786: PPUSH
7787: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7791: LD_EXP 16
7795: PPUSH
7796: LD_EXP 18
7800: PPUSH
7801: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7805: LD_EXP 18
7809: PPUSH
7810: LD_STRING DG-quest-done-4
7812: PPUSH
7813: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7817: LD_EXP 18
7821: PPUSH
7822: LD_EXP 16
7826: PPUSH
7827: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7831: LD_EXP 16
7835: PPUSH
7836: CALL_OW 256
7840: PUSH
7841: LD_INT 1000
7843: LESS
7844: IFFALSE 7936
// begin Say ( Olaf , DO-heal-1 ) ;
7846: LD_EXP 17
7850: PPUSH
7851: LD_STRING DO-heal-1
7853: PPUSH
7854: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 51
7865: PPUSH
7866: LD_INT 88
7868: PPUSH
7869: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7873: LD_INT 35
7875: PPUSH
7876: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7880: LD_EXP 16
7884: PPUSH
7885: LD_EXP 17
7889: PPUSH
7890: CALL_OW 296
7894: PUSH
7895: LD_INT 4
7897: LESS
7898: PUSH
7899: LD_EXP 16
7903: PPUSH
7904: LD_INT 51
7906: PPUSH
7907: LD_INT 88
7909: PPUSH
7910: CALL_OW 307
7914: OR
7915: IFFALSE 7873
// SetLives ( Heike , 1000 ) ;
7917: LD_EXP 16
7921: PPUSH
7922: LD_INT 1000
7924: PPUSH
7925: CALL_OW 234
// wait ( 0 0$2 ) ;
7929: LD_INT 70
7931: PPUSH
7932: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7936: LD_EXP 16
7940: PPUSH
7941: LD_STRING DH-quest-done-4
7943: PPUSH
7944: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7948: LD_EXP 17
7952: PPUSH
7953: LD_STRING DO-quest-done-4
7955: PPUSH
7956: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7960: LD_EXP 16
7964: PPUSH
7965: LD_EXP 17
7969: PPUSH
7970: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7974: LD_EXP 16
7978: PPUSH
7979: LD_STRING DH-quest-done-5
7981: PPUSH
7982: CALL_OW 88
// InGameOff ;
7986: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7990: LD_STRING O6_end_cont
7992: PPUSH
7993: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7997: LD_EXP 18
8001: PPUSH
8002: LD_INT 2
8004: PPUSH
8005: CALL_OW 235
// SetSide ( Mike , 2 ) ;
8009: LD_EXP 19
8013: PPUSH
8014: LD_INT 2
8016: PPUSH
8017: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
8021: LD_INT 42
8023: PPUSH
8024: LD_INT 2
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8034: LD_EXP 17
8038: PPUSH
8039: LD_INT 53
8041: PPUSH
8042: LD_INT 89
8044: PPUSH
8045: CALL_OW 118
// lastObjectiveActive := true ;
8049: LD_ADDR_EXP 12
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8057: LD_INT 1
8059: PPUSH
8060: LD_INT 1
8062: PPUSH
8063: CALL_OW 424
// PreparePrison ;
8067: CALL 1164 0 0
// end ;
8071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8072: LD_INT 22
8074: PUSH
8075: LD_INT 2
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 91
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 4
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 69
8104: IFFALSE 8262
8106: GO 8108
8108: DISABLE
8109: LD_INT 0
8111: PPUSH
8112: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8113: LD_INT 245
8115: PUSH
8116: LD_INT 210
8118: PUSH
8119: LD_INT 210
8121: PUSH
8122: LD_INT 175
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: PUSH
8131: LD_OWVAR 67
8135: ARRAY
8136: PPUSH
8137: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 54
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: ST_TO_ADDR
// if not tmp then
8182: LD_VAR 0 2
8186: NOT
8187: IFFALSE 8191
// exit ;
8189: GO 8262
// for i in tmp do
8191: LD_ADDR_VAR 0 1
8195: PUSH
8196: LD_VAR 0 2
8200: PUSH
8201: FOR_IN
8202: IFFALSE 8230
// begin ComExitBuilding ( i ) ;
8204: LD_VAR 0 1
8208: PPUSH
8209: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_INT 121
8220: PPUSH
8221: LD_INT 22
8223: PPUSH
8224: CALL_OW 174
// end ;
8228: GO 8201
8230: POP
8231: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8232: LD_EXP 23
8236: PPUSH
8237: LD_INT 121
8239: PPUSH
8240: LD_INT 22
8242: PPUSH
8243: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8247: LD_EXP 24
8251: PPUSH
8252: LD_INT 121
8254: PPUSH
8255: LD_INT 22
8257: PPUSH
8258: CALL_OW 114
// end ;
8262: PPOPN 2
8264: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8265: LD_INT 22
8267: PUSH
8268: LD_INT 2
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 91
8277: PUSH
8278: LD_INT 8
8280: PUSH
8281: LD_INT 4
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PPUSH
8293: CALL_OW 69
8297: IFFALSE 8455
8299: GO 8301
8301: DISABLE
8302: LD_INT 0
8304: PPUSH
8305: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8306: LD_INT 315
8308: PUSH
8309: LD_INT 280
8311: PUSH
8312: LD_INT 245
8314: PUSH
8315: LD_INT 210
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: LD_OWVAR 67
8328: ARRAY
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8334: LD_ADDR_VAR 0 2
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 25
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 54
8361: PUSH
8362: EMPTY
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 69
8374: ST_TO_ADDR
// if not tmp then
8375: LD_VAR 0 2
8379: NOT
8380: IFFALSE 8384
// exit ;
8382: GO 8455
// for i in tmp do
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: LD_VAR 0 2
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8423
// begin ComExitBuilding ( i ) ;
8397: LD_VAR 0 1
8401: PPUSH
8402: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8406: LD_VAR 0 1
8410: PPUSH
8411: LD_INT 142
8413: PPUSH
8414: LD_INT 71
8416: PPUSH
8417: CALL_OW 174
// end ;
8421: GO 8394
8423: POP
8424: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8425: LD_EXP 23
8429: PPUSH
8430: LD_INT 142
8432: PPUSH
8433: LD_INT 71
8435: PPUSH
8436: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8440: LD_EXP 24
8444: PPUSH
8445: LD_INT 142
8447: PPUSH
8448: LD_INT 71
8450: PPUSH
8451: CALL_OW 114
// end ;
8455: PPOPN 2
8457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8458: LD_INT 22
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 21
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 58
8480: PUSH
8481: EMPTY
8482: LIST
8483: PUSH
8484: LD_INT 3
8486: PUSH
8487: LD_INT 24
8489: PUSH
8490: LD_INT 1000
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 91
8503: PUSH
8504: LD_EXP 17
8508: PUSH
8509: LD_INT 8
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL_OW 69
8528: PUSH
8529: LD_EXP 17
8533: PPUSH
8534: CALL_OW 302
8538: AND
8539: IFFALSE 8653
8541: GO 8543
8543: DISABLE
// begin enable ;
8544: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8545: LD_EXP 17
8549: PPUSH
8550: LD_INT 22
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 21
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 58
8572: PUSH
8573: EMPTY
8574: LIST
8575: PUSH
8576: LD_INT 3
8578: PUSH
8579: LD_INT 24
8581: PUSH
8582: LD_INT 1000
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_INT 91
8595: PUSH
8596: LD_EXP 17
8600: PUSH
8601: LD_INT 8
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: PUSH
8621: LD_INT 1
8623: ARRAY
8624: PPUSH
8625: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8629: LD_EXP 17
8633: PPUSH
8634: LD_INT 52
8636: PPUSH
8637: LD_INT 90
8639: PPUSH
8640: CALL_OW 171
// AddComHold ( Olaf ) ;
8644: LD_EXP 17
8648: PPUSH
8649: CALL_OW 200
// end ;
8653: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8654: LD_EXP 12
8658: PUSH
8659: LD_INT 2
8661: PPUSH
8662: CALL_OW 302
8666: NOT
8667: AND
8668: PUSH
8669: LD_OWVAR 67
8673: PUSH
8674: LD_INT 1
8676: EQUAL
8677: AND
8678: PUSH
8679: LD_EXP 13
8683: NOT
8684: AND
8685: IFFALSE 8702
8687: GO 8689
8689: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8690: LD_EXP 16
8694: PPUSH
8695: LD_STRING DH-prison-missing
8697: PPUSH
8698: CALL_OW 88
// end ;
8702: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8703: LD_EXP 12
8707: PUSH
8708: LD_INT 8
8710: PPUSH
8711: CALL_OW 302
8715: NOT
8716: AND
8717: PUSH
8718: LD_OWVAR 67
8722: PUSH
8723: LD_INT 1
8725: GREATER
8726: AND
8727: PUSH
8728: LD_EXP 13
8732: NOT
8733: AND
8734: IFFALSE 8751
8736: GO 8738
8738: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8739: LD_EXP 16
8743: PPUSH
8744: LD_STRING DH-prison-missing
8746: PPUSH
8747: CALL_OW 88
// end ;
8751: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8752: LD_EXP 12
8756: PUSH
8757: LD_INT 3
8759: PPUSH
8760: CALL_OW 302
8764: NOT
8765: AND
8766: PUSH
8767: LD_EXP 13
8771: NOT
8772: AND
8773: IFFALSE 8790
8775: GO 8777
8777: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8778: LD_EXP 16
8782: PPUSH
8783: LD_STRING DH-prison-missing-a
8785: PPUSH
8786: CALL_OW 88
// end ;
8790: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8791: LD_EXP 12
8795: PUSH
8796: LD_INT 10
8798: PPUSH
8799: CALL_OW 302
8803: NOT
8804: AND
8805: PUSH
8806: LD_EXP 13
8810: NOT
8811: AND
8812: IFFALSE 8829
8814: GO 8816
8816: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8817: LD_EXP 16
8821: PPUSH
8822: LD_STRING DH-prison-missing-a
8824: PPUSH
8825: CALL_OW 88
// end ;
8829: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8830: LD_EXP 13
8834: NOT
8835: PUSH
8836: LD_EXP 12
8840: AND
8841: PUSH
8842: LD_INT 2
8844: PPUSH
8845: LD_EXP 20
8849: PPUSH
8850: CALL_OW 292
8854: AND
8855: IFFALSE 9000
8857: GO 8859
8859: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8860: LD_EXP 20
8864: PPUSH
8865: LD_EXP 16
8869: PPUSH
8870: CALL_OW 119
// DialogueOn ;
8874: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8878: LD_EXP 20
8882: PPUSH
8883: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8887: LD_EXP 20
8891: PPUSH
8892: LD_STRING DK-prison-found
8894: PPUSH
8895: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8899: LD_EXP 16
8903: PPUSH
8904: LD_STRING DH-prison-found
8906: PPUSH
8907: CALL_OW 88
// DialogueOff ;
8911: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8915: LD_EXP 20
8919: PPUSH
8920: LD_INT 2
8922: PPUSH
8923: CALL_OW 235
// prisonFound := true ;
8927: LD_ADDR_EXP 13
8931: PUSH
8932: LD_INT 1
8934: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8935: LD_STRING O6_prison_out
8937: PPUSH
8938: CALL_OW 337
// ComAgressiveMove ( russianForces , GetX ( Heike ) , GetY ( Heike ) ) ;
8942: LD_EXP 23
8946: PPUSH
8947: LD_EXP 16
8951: PPUSH
8952: CALL_OW 250
8956: PPUSH
8957: LD_EXP 16
8961: PPUSH
8962: CALL_OW 251
8966: PPUSH
8967: CALL_OW 114
// ComAgressiveMove ( russianTank , GetX ( Heike ) , GetY ( Heike ) ) ;
8971: LD_EXP 24
8975: PPUSH
8976: LD_EXP 16
8980: PPUSH
8981: CALL_OW 250
8985: PPUSH
8986: LD_EXP 16
8990: PPUSH
8991: CALL_OW 251
8995: PPUSH
8996: CALL_OW 114
// end ;
9000: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
9001: LD_EXP 16
9005: PPUSH
9006: CALL_OW 256
9010: PUSH
9011: LD_INT 500
9013: LESS
9014: IFFALSE 9027
9016: GO 9018
9018: DISABLE
// heikeHurt := true ;
9019: LD_ADDR_EXP 14
9023: PUSH
9024: LD_INT 1
9026: ST_TO_ADDR
9027: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
9028: LD_INT 22
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 21
9040: PUSH
9041: LD_INT 3
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 69
9056: IFFALSE 9372
9058: GO 9060
9060: DISABLE
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
// begin uc_side := 3 ;
9066: LD_ADDR_OWVAR 20
9070: PUSH
9071: LD_INT 3
9073: ST_TO_ADDR
// uc_nation := 3 ;
9074: LD_ADDR_OWVAR 21
9078: PUSH
9079: LD_INT 3
9081: ST_TO_ADDR
// tmp := [ ] ;
9082: LD_ADDR_VAR 0 2
9086: PUSH
9087: EMPTY
9088: ST_TO_ADDR
// for i := 1 to 5 do
9089: LD_ADDR_VAR 0 1
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_INT 5
9101: PUSH
9102: FOR_TO
9103: IFFALSE 9211
// begin PrepareHuman ( false , 1 , 4 ) ;
9105: LD_INT 0
9107: PPUSH
9108: LD_INT 1
9110: PPUSH
9111: LD_INT 4
9113: PPUSH
9114: CALL_OW 380
// un := CreateHuman ;
9118: LD_ADDR_VAR 0 3
9122: PUSH
9123: CALL_OW 44
9127: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9128: LD_VAR 0 3
9132: PPUSH
9133: LD_INT 4
9135: PPUSH
9136: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9140: LD_VAR 0 3
9144: PPUSH
9145: LD_INT 158
9147: PPUSH
9148: LD_INT 80
9150: PPUSH
9151: LD_INT 0
9153: PPUSH
9154: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 147
9165: PPUSH
9166: LD_INT 75
9168: PPUSH
9169: CALL_OW 111
// wait ( 0 0$1 ) ;
9173: LD_INT 35
9175: PPUSH
9176: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_VAR 0 2
9194: PUSH
9195: LD_INT 1
9197: PLUS
9198: PPUSH
9199: LD_VAR 0 3
9203: PPUSH
9204: CALL_OW 1
9208: ST_TO_ADDR
// end ;
9209: GO 9102
9211: POP
9212: POP
// repeat wait ( 0 0$1 ) ;
9213: LD_INT 35
9215: PPUSH
9216: CALL_OW 67
// for i in tmp do
9220: LD_ADDR_VAR 0 1
9224: PUSH
9225: LD_VAR 0 2
9229: PUSH
9230: FOR_IN
9231: IFFALSE 9352
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
9233: LD_ADDR_VAR 0 3
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_INT 2
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 74
9262: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: CALL_OW 250
9276: PPUSH
9277: LD_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: CALL_OW 251
9290: PPUSH
9291: CALL_OW 428
9295: IFFALSE 9336
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_VAR 0 3
9306: PUSH
9307: LD_INT 1
9309: ARRAY
9310: PPUSH
9311: CALL_OW 250
9315: PPUSH
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: CALL_OW 251
9329: PPUSH
9330: CALL_OW 114
9334: GO 9350
// ComAttackUnit ( i , Heike ) ;
9336: LD_VAR 0 1
9340: PPUSH
9341: LD_EXP 16
9345: PPUSH
9346: CALL_OW 115
// end ;
9350: GO 9230
9352: POP
9353: POP
// until IsDead ( Heike ) or not tmp ;
9354: LD_EXP 16
9358: PPUSH
9359: CALL_OW 301
9363: PUSH
9364: LD_VAR 0 2
9368: NOT
9369: OR
9370: IFFALSE 9213
// end ;
9372: PPOPN 3
9374: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9375: LD_EXP 12
9379: PUSH
9380: LD_EXP 16
9384: PPUSH
9385: CALL_OW 302
9389: AND
9390: PUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_INT 21
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 22
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 50
9416: PUSH
9417: EMPTY
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 71
9429: PUSH
9430: LD_INT 0
9432: EQUAL
9433: AND
9434: IFFALSE 9858
9436: GO 9438
9438: DISABLE
9439: LD_INT 0
9441: PPUSH
// begin if not heikeHurt then
9442: LD_EXP 14
9446: NOT
9447: IFFALSE 9456
// SetAchievement ( ACH_INVINCIBLE ) ;
9449: LD_STRING ACH_INVINCIBLE
9451: PPUSH
9452: CALL_OW 543
// if tick <= 6 6$00 then
9456: LD_OWVAR 1
9460: PUSH
9461: LD_INT 12600
9463: LESSEQUAL
9464: IFFALSE 9473
// SetAchievement ( ACH_HSPEED_1 ) ;
9466: LD_STRING ACH_HSPEED_1
9468: PPUSH
9469: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9473: LD_STRING enableBioCharacter(BIO_GIVI)
9475: PPUSH
9476: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9480: LD_STRING enableBioCharacter(BIO_MIKE)
9482: PPUSH
9483: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9487: LD_STRING enableBioCharacter(BIO_OLAF)
9489: PPUSH
9490: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 50
9521: PUSH
9522: EMPTY
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// if Kamil in tmp then
9535: LD_EXP 20
9539: PUSH
9540: LD_VAR 0 1
9544: IN
9545: IFFALSE 9554
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9547: LD_STRING enableBioCharacter(BIO_KAMI)
9549: PPUSH
9550: CALL_OW 559
// if prisonFound then
9554: LD_EXP 13
9558: IFFALSE 9597
// begin if not IsOk ( Kamil ) then
9560: LD_EXP 20
9564: PPUSH
9565: CALL_OW 302
9569: NOT
9570: IFFALSE 9585
// AddMedal ( med1 , - 2 ) else
9572: LD_STRING med1
9574: PPUSH
9575: LD_INT 2
9577: NEG
9578: PPUSH
9579: CALL_OW 101
9583: GO 9595
// AddMedal ( med1 , 1 ) ;
9585: LD_STRING med1
9587: PPUSH
9588: LD_INT 1
9590: PPUSH
9591: CALL_OW 101
// end else
9595: GO 9608
// AddMedal ( med1 , - 1 ) ;
9597: LD_STRING med1
9599: PPUSH
9600: LD_INT 1
9602: NEG
9603: PPUSH
9604: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 3
9615: LESS
9616: PUSH
9617: LD_EXP 13
9621: NOT
9622: AND
9623: PUSH
9624: LD_VAR 0 1
9628: PUSH
9629: LD_INT 4
9631: LESS
9632: PUSH
9633: LD_EXP 13
9637: AND
9638: OR
9639: IFFALSE 9654
// AddMedal ( med2 , - 1 ) else
9641: LD_STRING med2
9643: PPUSH
9644: LD_INT 1
9646: NEG
9647: PPUSH
9648: CALL_OW 101
9652: GO 9664
// AddMedal ( med2 , 1 ) ;
9654: LD_STRING med2
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9664: LD_EXP 13
9668: PUSH
9669: LD_EXP 4
9673: AND
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: LD_INT 4
9682: GREATEREQUAL
9683: AND
9684: IFFALSE 9698
// AddMedal ( med3 , 1 ) else
9686: LD_STRING med3
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: CALL_OW 101
9696: GO 9709
// AddMedal ( med3 , - 1 ) ;
9698: LD_STRING med3
9700: PPUSH
9701: LD_INT 1
9703: NEG
9704: PPUSH
9705: CALL_OW 101
// GiveMedals ( MAIN ) ;
9709: LD_STRING MAIN
9711: PPUSH
9712: CALL_OW 102
// RewardPeople ( tmp ) ;
9716: LD_VAR 0 1
9720: PPUSH
9721: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9725: LD_EXP 4
9729: PPUSH
9730: LD_STRING 01_JohnnySaved
9732: PPUSH
9733: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9737: LD_EXP 16
9741: PPUSH
9742: LD_STRING 01_Heike
9744: PPUSH
9745: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9749: LD_EXP 18
9753: PPUSH
9754: CALL_OW 302
9758: PUSH
9759: LD_EXP 18
9763: PUSH
9764: LD_VAR 0 1
9768: IN
9769: AND
9770: IFFALSE 9784
// SaveCharacters ( Givi , 01_Givi ) ;
9772: LD_EXP 18
9776: PPUSH
9777: LD_STRING 01_Givi
9779: PPUSH
9780: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9784: LD_EXP 19
9788: PPUSH
9789: CALL_OW 302
9793: PUSH
9794: LD_EXP 19
9798: PUSH
9799: LD_VAR 0 1
9803: IN
9804: AND
9805: IFFALSE 9819
// SaveCharacters ( Mike , 01_Mike ) ;
9807: LD_EXP 19
9811: PPUSH
9812: LD_STRING 01_Mike
9814: PPUSH
9815: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9819: LD_EXP 20
9823: PPUSH
9824: CALL_OW 302
9828: PUSH
9829: LD_EXP 20
9833: PUSH
9834: LD_VAR 0 1
9838: IN
9839: AND
9840: IFFALSE 9854
// SaveCharacters ( Kamil , 01_Kamil ) ;
9842: LD_EXP 20
9846: PPUSH
9847: LD_STRING 01_Kamil
9849: PPUSH
9850: CALL_OW 38
// YouWin ;
9854: CALL_OW 103
// end ; end_of_file
9858: PPOPN 1
9860: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9861: LD_VAR 0 1
9865: PUSH
9866: LD_EXP 16
9870: EQUAL
9871: IFFALSE 9880
// YouLost ( Heike ) ;
9873: LD_STRING Heike
9875: PPUSH
9876: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 25
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PPUSH
9909: CALL_OW 69
9913: IN
9914: IFFALSE 10020
// begin if un in russianPatrol then
9916: LD_VAR 0 1
9920: PUSH
9921: LD_EXP 21
9925: IN
9926: IFFALSE 9944
// russianPatrol := russianPatrol diff un ;
9928: LD_ADDR_EXP 21
9932: PUSH
9933: LD_EXP 21
9937: PUSH
9938: LD_VAR 0 1
9942: DIFF
9943: ST_TO_ADDR
// if un in russianForestPatrol then
9944: LD_VAR 0 1
9948: PUSH
9949: LD_EXP 22
9953: IN
9954: IFFALSE 9972
// russianForestPatrol := russianForestPatrol diff un ;
9956: LD_ADDR_EXP 22
9960: PUSH
9961: LD_EXP 22
9965: PUSH
9966: LD_VAR 0 1
9970: DIFF
9971: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9972: LD_ADDR_EXP 5
9976: PUSH
9977: LD_EXP 5
9981: PPUSH
9982: LD_EXP 5
9986: PUSH
9987: LD_INT 1
9989: PLUS
9990: PPUSH
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 250
10000: PUSH
10001: LD_VAR 0 1
10005: PPUSH
10006: CALL_OW 251
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 1
10019: ST_TO_ADDR
// end ; end ;
10020: PPOPN 1
10022: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
10023: LD_VAR 0 1
10027: PUSH
10028: LD_EXP 16
10032: EQUAL
10033: IFFALSE 10042
// YouLost ( Heike ) ;
10035: LD_STRING Heike
10037: PPUSH
10038: CALL_OW 104
// if un = Olaf then
10042: LD_VAR 0 1
10046: PUSH
10047: LD_EXP 17
10051: EQUAL
10052: IFFALSE 10061
// YouLost ( Olaf ) ;
10054: LD_STRING Olaf
10056: PPUSH
10057: CALL_OW 104
// end ;
10061: PPOPN 1
10063: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 2
10071: EQUAL
10072: PUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_INT 5
10080: EQUAL
10081: AND
10082: IFFALSE 10091
// YouLost ( FriendlyFire ) ;
10084: LD_STRING FriendlyFire
10086: PPUSH
10087: CALL_OW 104
// end ; end_of_file
10091: PPOPN 2
10093: END
// export globalGameSaveCounter ; every 0 0$1 do
10094: GO 10096
10096: DISABLE
// begin enable ;
10097: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10098: LD_STRING updateTimer(
10100: PUSH
10101: LD_OWVAR 1
10105: STR
10106: PUSH
10107: LD_STRING );
10109: STR
10110: PPUSH
10111: CALL_OW 559
// end ;
10115: END
// every 0 0$1 do
10116: GO 10118
10118: DISABLE
// begin globalGameSaveCounter := 0 ;
10119: LD_ADDR_EXP 26
10123: PUSH
10124: LD_INT 0
10126: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10127: LD_STRING setGameSaveCounter(0)
10129: PPUSH
10130: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10134: LD_STRING initStreamRollete();
10136: PPUSH
10137: CALL_OW 559
// InitStreamMode ;
10141: CALL 11484 0 0
// DefineStreamItems ( false ) ;
10145: LD_INT 0
10147: PPUSH
10148: CALL 11948 0 1
// end ;
10152: END
// export function SOS_MapStart ( ) ; begin
10153: LD_INT 0
10155: PPUSH
// if streamModeActive then
10156: LD_EXP 27
10160: IFFALSE 10169
// DefineStreamItems ( true ) ;
10162: LD_INT 1
10164: PPUSH
10165: CALL 11948 0 1
// UpdateLuaVariables ( ) ;
10169: CALL 10186 0 0
// UpdateFactoryWaypoints ( ) ;
10173: CALL 24817 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10177: CALL 25074 0 0
// end ;
10181: LD_VAR 0 1
10185: RET
// function UpdateLuaVariables ( ) ; begin
10186: LD_INT 0
10188: PPUSH
// if globalGameSaveCounter then
10189: LD_EXP 26
10193: IFFALSE 10227
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10195: LD_ADDR_EXP 26
10199: PUSH
10200: LD_EXP 26
10204: PPUSH
10205: CALL 69859 0 1
10209: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10210: LD_STRING setGameSaveCounter(
10212: PUSH
10213: LD_EXP 26
10217: STR
10218: PUSH
10219: LD_STRING )
10221: STR
10222: PPUSH
10223: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10227: LD_STRING setGameDifficulty(
10229: PUSH
10230: LD_OWVAR 67
10234: STR
10235: PUSH
10236: LD_STRING )
10238: STR
10239: PPUSH
10240: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10244: LD_STRING displayDifficulty(
10246: PUSH
10247: LD_OWVAR 67
10251: STR
10252: PUSH
10253: LD_STRING )
10255: STR
10256: PPUSH
10257: CALL_OW 559
// end ;
10261: LD_VAR 0 1
10265: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10266: LD_INT 0
10268: PPUSH
// if p2 = stream_mode then
10269: LD_VAR 0 2
10273: PUSH
10274: LD_INT 100
10276: EQUAL
10277: IFFALSE 11280
// begin if not StreamModeActive then
10279: LD_EXP 27
10283: NOT
10284: IFFALSE 10294
// StreamModeActive := true ;
10286: LD_ADDR_EXP 27
10290: PUSH
10291: LD_INT 1
10293: ST_TO_ADDR
// if p3 = 0 then
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 0
10301: EQUAL
10302: IFFALSE 10308
// InitStreamMode ;
10304: CALL 11484 0 0
// if p3 = 1 then
10308: LD_VAR 0 3
10312: PUSH
10313: LD_INT 1
10315: EQUAL
10316: IFFALSE 10326
// sRocket := true ;
10318: LD_ADDR_EXP 32
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if p3 = 2 then
10326: LD_VAR 0 3
10330: PUSH
10331: LD_INT 2
10333: EQUAL
10334: IFFALSE 10344
// sSpeed := true ;
10336: LD_ADDR_EXP 31
10340: PUSH
10341: LD_INT 1
10343: ST_TO_ADDR
// if p3 = 3 then
10344: LD_VAR 0 3
10348: PUSH
10349: LD_INT 3
10351: EQUAL
10352: IFFALSE 10362
// sEngine := true ;
10354: LD_ADDR_EXP 33
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// if p3 = 4 then
10362: LD_VAR 0 3
10366: PUSH
10367: LD_INT 4
10369: EQUAL
10370: IFFALSE 10380
// sSpec := true ;
10372: LD_ADDR_EXP 30
10376: PUSH
10377: LD_INT 1
10379: ST_TO_ADDR
// if p3 = 5 then
10380: LD_VAR 0 3
10384: PUSH
10385: LD_INT 5
10387: EQUAL
10388: IFFALSE 10398
// sLevel := true ;
10390: LD_ADDR_EXP 34
10394: PUSH
10395: LD_INT 1
10397: ST_TO_ADDR
// if p3 = 6 then
10398: LD_VAR 0 3
10402: PUSH
10403: LD_INT 6
10405: EQUAL
10406: IFFALSE 10416
// sArmoury := true ;
10408: LD_ADDR_EXP 35
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// if p3 = 7 then
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 7
10423: EQUAL
10424: IFFALSE 10434
// sRadar := true ;
10426: LD_ADDR_EXP 36
10430: PUSH
10431: LD_INT 1
10433: ST_TO_ADDR
// if p3 = 8 then
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 8
10441: EQUAL
10442: IFFALSE 10452
// sBunker := true ;
10444: LD_ADDR_EXP 37
10448: PUSH
10449: LD_INT 1
10451: ST_TO_ADDR
// if p3 = 9 then
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 9
10459: EQUAL
10460: IFFALSE 10470
// sHack := true ;
10462: LD_ADDR_EXP 38
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// if p3 = 10 then
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 10
10477: EQUAL
10478: IFFALSE 10488
// sFire := true ;
10480: LD_ADDR_EXP 39
10484: PUSH
10485: LD_INT 1
10487: ST_TO_ADDR
// if p3 = 11 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_INT 11
10495: EQUAL
10496: IFFALSE 10506
// sRefresh := true ;
10498: LD_ADDR_EXP 40
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if p3 = 12 then
10506: LD_VAR 0 3
10510: PUSH
10511: LD_INT 12
10513: EQUAL
10514: IFFALSE 10524
// sExp := true ;
10516: LD_ADDR_EXP 41
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// if p3 = 13 then
10524: LD_VAR 0 3
10528: PUSH
10529: LD_INT 13
10531: EQUAL
10532: IFFALSE 10542
// sDepot := true ;
10534: LD_ADDR_EXP 42
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// if p3 = 14 then
10542: LD_VAR 0 3
10546: PUSH
10547: LD_INT 14
10549: EQUAL
10550: IFFALSE 10560
// sFlag := true ;
10552: LD_ADDR_EXP 43
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
// if p3 = 15 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_INT 15
10567: EQUAL
10568: IFFALSE 10578
// sKamikadze := true ;
10570: LD_ADDR_EXP 51
10574: PUSH
10575: LD_INT 1
10577: ST_TO_ADDR
// if p3 = 16 then
10578: LD_VAR 0 3
10582: PUSH
10583: LD_INT 16
10585: EQUAL
10586: IFFALSE 10596
// sTroll := true ;
10588: LD_ADDR_EXP 52
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// if p3 = 17 then
10596: LD_VAR 0 3
10600: PUSH
10601: LD_INT 17
10603: EQUAL
10604: IFFALSE 10614
// sSlow := true ;
10606: LD_ADDR_EXP 53
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// if p3 = 18 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 18
10621: EQUAL
10622: IFFALSE 10632
// sLack := true ;
10624: LD_ADDR_EXP 54
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// if p3 = 19 then
10632: LD_VAR 0 3
10636: PUSH
10637: LD_INT 19
10639: EQUAL
10640: IFFALSE 10650
// sTank := true ;
10642: LD_ADDR_EXP 56
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// if p3 = 20 then
10650: LD_VAR 0 3
10654: PUSH
10655: LD_INT 20
10657: EQUAL
10658: IFFALSE 10668
// sRemote := true ;
10660: LD_ADDR_EXP 57
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// if p3 = 21 then
10668: LD_VAR 0 3
10672: PUSH
10673: LD_INT 21
10675: EQUAL
10676: IFFALSE 10686
// sPowell := true ;
10678: LD_ADDR_EXP 58
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// if p3 = 22 then
10686: LD_VAR 0 3
10690: PUSH
10691: LD_INT 22
10693: EQUAL
10694: IFFALSE 10704
// sTeleport := true ;
10696: LD_ADDR_EXP 61
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// if p3 = 23 then
10704: LD_VAR 0 3
10708: PUSH
10709: LD_INT 23
10711: EQUAL
10712: IFFALSE 10722
// sOilTower := true ;
10714: LD_ADDR_EXP 63
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// if p3 = 24 then
10722: LD_VAR 0 3
10726: PUSH
10727: LD_INT 24
10729: EQUAL
10730: IFFALSE 10740
// sShovel := true ;
10732: LD_ADDR_EXP 64
10736: PUSH
10737: LD_INT 1
10739: ST_TO_ADDR
// if p3 = 25 then
10740: LD_VAR 0 3
10744: PUSH
10745: LD_INT 25
10747: EQUAL
10748: IFFALSE 10758
// sSheik := true ;
10750: LD_ADDR_EXP 65
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// if p3 = 26 then
10758: LD_VAR 0 3
10762: PUSH
10763: LD_INT 26
10765: EQUAL
10766: IFFALSE 10776
// sEarthquake := true ;
10768: LD_ADDR_EXP 67
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// if p3 = 27 then
10776: LD_VAR 0 3
10780: PUSH
10781: LD_INT 27
10783: EQUAL
10784: IFFALSE 10794
// sAI := true ;
10786: LD_ADDR_EXP 68
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// if p3 = 28 then
10794: LD_VAR 0 3
10798: PUSH
10799: LD_INT 28
10801: EQUAL
10802: IFFALSE 10812
// sCargo := true ;
10804: LD_ADDR_EXP 71
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// if p3 = 29 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_INT 29
10819: EQUAL
10820: IFFALSE 10830
// sDLaser := true ;
10822: LD_ADDR_EXP 72
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// if p3 = 30 then
10830: LD_VAR 0 3
10834: PUSH
10835: LD_INT 30
10837: EQUAL
10838: IFFALSE 10848
// sExchange := true ;
10840: LD_ADDR_EXP 73
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// if p3 = 31 then
10848: LD_VAR 0 3
10852: PUSH
10853: LD_INT 31
10855: EQUAL
10856: IFFALSE 10866
// sFac := true ;
10858: LD_ADDR_EXP 74
10862: PUSH
10863: LD_INT 1
10865: ST_TO_ADDR
// if p3 = 32 then
10866: LD_VAR 0 3
10870: PUSH
10871: LD_INT 32
10873: EQUAL
10874: IFFALSE 10884
// sPower := true ;
10876: LD_ADDR_EXP 75
10880: PUSH
10881: LD_INT 1
10883: ST_TO_ADDR
// if p3 = 33 then
10884: LD_VAR 0 3
10888: PUSH
10889: LD_INT 33
10891: EQUAL
10892: IFFALSE 10902
// sRandom := true ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 1
10901: ST_TO_ADDR
// if p3 = 34 then
10902: LD_VAR 0 3
10906: PUSH
10907: LD_INT 34
10909: EQUAL
10910: IFFALSE 10920
// sShield := true ;
10912: LD_ADDR_EXP 77
10916: PUSH
10917: LD_INT 1
10919: ST_TO_ADDR
// if p3 = 35 then
10920: LD_VAR 0 3
10924: PUSH
10925: LD_INT 35
10927: EQUAL
10928: IFFALSE 10938
// sTime := true ;
10930: LD_ADDR_EXP 78
10934: PUSH
10935: LD_INT 1
10937: ST_TO_ADDR
// if p3 = 36 then
10938: LD_VAR 0 3
10942: PUSH
10943: LD_INT 36
10945: EQUAL
10946: IFFALSE 10956
// sTools := true ;
10948: LD_ADDR_EXP 79
10952: PUSH
10953: LD_INT 1
10955: ST_TO_ADDR
// if p3 = 101 then
10956: LD_VAR 0 3
10960: PUSH
10961: LD_INT 101
10963: EQUAL
10964: IFFALSE 10974
// sSold := true ;
10966: LD_ADDR_EXP 44
10970: PUSH
10971: LD_INT 1
10973: ST_TO_ADDR
// if p3 = 102 then
10974: LD_VAR 0 3
10978: PUSH
10979: LD_INT 102
10981: EQUAL
10982: IFFALSE 10992
// sDiff := true ;
10984: LD_ADDR_EXP 45
10988: PUSH
10989: LD_INT 1
10991: ST_TO_ADDR
// if p3 = 103 then
10992: LD_VAR 0 3
10996: PUSH
10997: LD_INT 103
10999: EQUAL
11000: IFFALSE 11010
// sFog := true ;
11002: LD_ADDR_EXP 48
11006: PUSH
11007: LD_INT 1
11009: ST_TO_ADDR
// if p3 = 104 then
11010: LD_VAR 0 3
11014: PUSH
11015: LD_INT 104
11017: EQUAL
11018: IFFALSE 11028
// sReset := true ;
11020: LD_ADDR_EXP 49
11024: PUSH
11025: LD_INT 1
11027: ST_TO_ADDR
// if p3 = 105 then
11028: LD_VAR 0 3
11032: PUSH
11033: LD_INT 105
11035: EQUAL
11036: IFFALSE 11046
// sSun := true ;
11038: LD_ADDR_EXP 50
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// if p3 = 106 then
11046: LD_VAR 0 3
11050: PUSH
11051: LD_INT 106
11053: EQUAL
11054: IFFALSE 11064
// sTiger := true ;
11056: LD_ADDR_EXP 46
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// if p3 = 107 then
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 107
11071: EQUAL
11072: IFFALSE 11082
// sBomb := true ;
11074: LD_ADDR_EXP 47
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// if p3 = 108 then
11082: LD_VAR 0 3
11086: PUSH
11087: LD_INT 108
11089: EQUAL
11090: IFFALSE 11100
// sWound := true ;
11092: LD_ADDR_EXP 55
11096: PUSH
11097: LD_INT 1
11099: ST_TO_ADDR
// if p3 = 109 then
11100: LD_VAR 0 3
11104: PUSH
11105: LD_INT 109
11107: EQUAL
11108: IFFALSE 11118
// sBetray := true ;
11110: LD_ADDR_EXP 59
11114: PUSH
11115: LD_INT 1
11117: ST_TO_ADDR
// if p3 = 110 then
11118: LD_VAR 0 3
11122: PUSH
11123: LD_INT 110
11125: EQUAL
11126: IFFALSE 11136
// sContamin := true ;
11128: LD_ADDR_EXP 60
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// if p3 = 111 then
11136: LD_VAR 0 3
11140: PUSH
11141: LD_INT 111
11143: EQUAL
11144: IFFALSE 11154
// sOil := true ;
11146: LD_ADDR_EXP 62
11150: PUSH
11151: LD_INT 1
11153: ST_TO_ADDR
// if p3 = 112 then
11154: LD_VAR 0 3
11158: PUSH
11159: LD_INT 112
11161: EQUAL
11162: IFFALSE 11172
// sStu := true ;
11164: LD_ADDR_EXP 66
11168: PUSH
11169: LD_INT 1
11171: ST_TO_ADDR
// if p3 = 113 then
11172: LD_VAR 0 3
11176: PUSH
11177: LD_INT 113
11179: EQUAL
11180: IFFALSE 11190
// sBazooka := true ;
11182: LD_ADDR_EXP 69
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// if p3 = 114 then
11190: LD_VAR 0 3
11194: PUSH
11195: LD_INT 114
11197: EQUAL
11198: IFFALSE 11208
// sMortar := true ;
11200: LD_ADDR_EXP 70
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// if p3 = 115 then
11208: LD_VAR 0 3
11212: PUSH
11213: LD_INT 115
11215: EQUAL
11216: IFFALSE 11226
// sRanger := true ;
11218: LD_ADDR_EXP 80
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if p3 = 116 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_INT 116
11233: EQUAL
11234: IFFALSE 11244
// sComputer := true ;
11236: LD_ADDR_EXP 81
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// if p3 = 117 then
11244: LD_VAR 0 3
11248: PUSH
11249: LD_INT 117
11251: EQUAL
11252: IFFALSE 11262
// s30 := true ;
11254: LD_ADDR_EXP 82
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 118 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 118
11269: EQUAL
11270: IFFALSE 11280
// s60 := true ;
11272: LD_ADDR_EXP 83
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// end ; if p2 = hack_mode then
11280: LD_VAR 0 2
11284: PUSH
11285: LD_INT 101
11287: EQUAL
11288: IFFALSE 11416
// begin case p3 of 1 :
11290: LD_VAR 0 3
11294: PUSH
11295: LD_INT 1
11297: DOUBLE
11298: EQUAL
11299: IFTRUE 11303
11301: GO 11310
11303: POP
// hHackUnlimitedResources ; 2 :
11304: CALL 23563 0 0
11308: GO 11416
11310: LD_INT 2
11312: DOUBLE
11313: EQUAL
11314: IFTRUE 11318
11316: GO 11325
11318: POP
// hHackSetLevel10 ; 3 :
11319: CALL 23696 0 0
11323: GO 11416
11325: LD_INT 3
11327: DOUBLE
11328: EQUAL
11329: IFTRUE 11333
11331: GO 11340
11333: POP
// hHackSetLevel10YourUnits ; 4 :
11334: CALL 23781 0 0
11338: GO 11416
11340: LD_INT 4
11342: DOUBLE
11343: EQUAL
11344: IFTRUE 11348
11346: GO 11355
11348: POP
// hHackInvincible ; 5 :
11349: CALL 24229 0 0
11353: GO 11416
11355: LD_INT 5
11357: DOUBLE
11358: EQUAL
11359: IFTRUE 11363
11361: GO 11370
11363: POP
// hHackInvisible ; 6 :
11364: CALL 24340 0 0
11368: GO 11416
11370: LD_INT 6
11372: DOUBLE
11373: EQUAL
11374: IFTRUE 11378
11376: GO 11385
11378: POP
// hHackChangeYourSide ; 7 :
11379: CALL 24397 0 0
11383: GO 11416
11385: LD_INT 7
11387: DOUBLE
11388: EQUAL
11389: IFTRUE 11393
11391: GO 11400
11393: POP
// hHackChangeUnitSide ; 8 :
11394: CALL 24439 0 0
11398: GO 11416
11400: LD_INT 8
11402: DOUBLE
11403: EQUAL
11404: IFTRUE 11408
11406: GO 11415
11408: POP
// hHackFog ; end ;
11409: CALL 24540 0 0
11413: GO 11416
11415: POP
// end ; if p2 = game_save_mode then
11416: LD_VAR 0 2
11420: PUSH
11421: LD_INT 102
11423: EQUAL
11424: IFFALSE 11479
// begin if p3 = 1 then
11426: LD_VAR 0 3
11430: PUSH
11431: LD_INT 1
11433: EQUAL
11434: IFFALSE 11446
// globalGameSaveCounter := p4 ;
11436: LD_ADDR_EXP 26
11440: PUSH
11441: LD_VAR 0 4
11445: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11446: LD_VAR 0 3
11450: PUSH
11451: LD_INT 2
11453: EQUAL
11454: PUSH
11455: LD_EXP 26
11459: AND
11460: IFFALSE 11479
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11462: LD_STRING setGameSaveCounter(
11464: PUSH
11465: LD_EXP 26
11469: STR
11470: PUSH
11471: LD_STRING )
11473: STR
11474: PPUSH
11475: CALL_OW 559
// end ; end ;
11479: LD_VAR 0 7
11483: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11484: LD_INT 0
11486: PPUSH
// streamModeActive := false ;
11487: LD_ADDR_EXP 27
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// normalCounter := 36 ;
11495: LD_ADDR_EXP 28
11499: PUSH
11500: LD_INT 36
11502: ST_TO_ADDR
// hardcoreCounter := 18 ;
11503: LD_ADDR_EXP 29
11507: PUSH
11508: LD_INT 18
11510: ST_TO_ADDR
// sRocket := false ;
11511: LD_ADDR_EXP 32
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sSpeed := false ;
11519: LD_ADDR_EXP 31
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sEngine := false ;
11527: LD_ADDR_EXP 33
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sSpec := false ;
11535: LD_ADDR_EXP 30
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sLevel := false ;
11543: LD_ADDR_EXP 34
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sArmoury := false ;
11551: LD_ADDR_EXP 35
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sRadar := false ;
11559: LD_ADDR_EXP 36
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sBunker := false ;
11567: LD_ADDR_EXP 37
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// sHack := false ;
11575: LD_ADDR_EXP 38
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// sFire := false ;
11583: LD_ADDR_EXP 39
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// sRefresh := false ;
11591: LD_ADDR_EXP 40
11595: PUSH
11596: LD_INT 0
11598: ST_TO_ADDR
// sExp := false ;
11599: LD_ADDR_EXP 41
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// sDepot := false ;
11607: LD_ADDR_EXP 42
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// sFlag := false ;
11615: LD_ADDR_EXP 43
11619: PUSH
11620: LD_INT 0
11622: ST_TO_ADDR
// sKamikadze := false ;
11623: LD_ADDR_EXP 51
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// sTroll := false ;
11631: LD_ADDR_EXP 52
11635: PUSH
11636: LD_INT 0
11638: ST_TO_ADDR
// sSlow := false ;
11639: LD_ADDR_EXP 53
11643: PUSH
11644: LD_INT 0
11646: ST_TO_ADDR
// sLack := false ;
11647: LD_ADDR_EXP 54
11651: PUSH
11652: LD_INT 0
11654: ST_TO_ADDR
// sTank := false ;
11655: LD_ADDR_EXP 56
11659: PUSH
11660: LD_INT 0
11662: ST_TO_ADDR
// sRemote := false ;
11663: LD_ADDR_EXP 57
11667: PUSH
11668: LD_INT 0
11670: ST_TO_ADDR
// sPowell := false ;
11671: LD_ADDR_EXP 58
11675: PUSH
11676: LD_INT 0
11678: ST_TO_ADDR
// sTeleport := false ;
11679: LD_ADDR_EXP 61
11683: PUSH
11684: LD_INT 0
11686: ST_TO_ADDR
// sOilTower := false ;
11687: LD_ADDR_EXP 63
11691: PUSH
11692: LD_INT 0
11694: ST_TO_ADDR
// sShovel := false ;
11695: LD_ADDR_EXP 64
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// sSheik := false ;
11703: LD_ADDR_EXP 65
11707: PUSH
11708: LD_INT 0
11710: ST_TO_ADDR
// sEarthquake := false ;
11711: LD_ADDR_EXP 67
11715: PUSH
11716: LD_INT 0
11718: ST_TO_ADDR
// sAI := false ;
11719: LD_ADDR_EXP 68
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sCargo := false ;
11727: LD_ADDR_EXP 71
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sDLaser := false ;
11735: LD_ADDR_EXP 72
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sExchange := false ;
11743: LD_ADDR_EXP 73
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sFac := false ;
11751: LD_ADDR_EXP 74
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sPower := false ;
11759: LD_ADDR_EXP 75
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sRandom := false ;
11767: LD_ADDR_EXP 76
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sShield := false ;
11775: LD_ADDR_EXP 77
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sTime := false ;
11783: LD_ADDR_EXP 78
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sTools := false ;
11791: LD_ADDR_EXP 79
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sSold := false ;
11799: LD_ADDR_EXP 44
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sDiff := false ;
11807: LD_ADDR_EXP 45
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sFog := false ;
11815: LD_ADDR_EXP 48
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sReset := false ;
11823: LD_ADDR_EXP 49
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sSun := false ;
11831: LD_ADDR_EXP 50
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sTiger := false ;
11839: LD_ADDR_EXP 46
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sBomb := false ;
11847: LD_ADDR_EXP 47
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sWound := false ;
11855: LD_ADDR_EXP 55
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sBetray := false ;
11863: LD_ADDR_EXP 59
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sContamin := false ;
11871: LD_ADDR_EXP 60
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sOil := false ;
11879: LD_ADDR_EXP 62
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sStu := false ;
11887: LD_ADDR_EXP 66
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sBazooka := false ;
11895: LD_ADDR_EXP 69
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sMortar := false ;
11903: LD_ADDR_EXP 70
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sRanger := false ;
11911: LD_ADDR_EXP 80
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sComputer := false ;
11919: LD_ADDR_EXP 81
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// s30 := false ;
11927: LD_ADDR_EXP 82
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// s60 := false ;
11935: LD_ADDR_EXP 83
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// end ;
11943: LD_VAR 0 1
11947: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11948: LD_INT 0
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
11955: PPUSH
11956: PPUSH
// result := [ ] ;
11957: LD_ADDR_VAR 0 2
11961: PUSH
11962: EMPTY
11963: ST_TO_ADDR
// if campaign_id = 1 then
11964: LD_OWVAR 69
11968: PUSH
11969: LD_INT 1
11971: EQUAL
11972: IFFALSE 15138
// begin case mission_number of 1 :
11974: LD_OWVAR 70
11978: PUSH
11979: LD_INT 1
11981: DOUBLE
11982: EQUAL
11983: IFTRUE 11987
11985: GO 12063
11987: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_INT 2
11995: PUSH
11996: LD_INT 4
11998: PUSH
11999: LD_INT 11
12001: PUSH
12002: LD_INT 12
12004: PUSH
12005: LD_INT 15
12007: PUSH
12008: LD_INT 16
12010: PUSH
12011: LD_INT 22
12013: PUSH
12014: LD_INT 23
12016: PUSH
12017: LD_INT 26
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 101
12033: PUSH
12034: LD_INT 102
12036: PUSH
12037: LD_INT 106
12039: PUSH
12040: LD_INT 116
12042: PUSH
12043: LD_INT 117
12045: PUSH
12046: LD_INT 118
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 15136
12063: LD_INT 2
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12155
12071: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12072: LD_ADDR_VAR 0 2
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: LD_INT 11
12085: PUSH
12086: LD_INT 12
12088: PUSH
12089: LD_INT 15
12091: PUSH
12092: LD_INT 16
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: LD_INT 23
12100: PUSH
12101: LD_INT 26
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 101
12117: PUSH
12118: LD_INT 102
12120: PUSH
12121: LD_INT 105
12123: PUSH
12124: LD_INT 106
12126: PUSH
12127: LD_INT 108
12129: PUSH
12130: LD_INT 116
12132: PUSH
12133: LD_INT 117
12135: PUSH
12136: LD_INT 118
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: ST_TO_ADDR
12153: GO 15136
12155: LD_INT 3
12157: DOUBLE
12158: EQUAL
12159: IFTRUE 12163
12161: GO 12251
12163: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12164: LD_ADDR_VAR 0 2
12168: PUSH
12169: LD_INT 2
12171: PUSH
12172: LD_INT 4
12174: PUSH
12175: LD_INT 5
12177: PUSH
12178: LD_INT 11
12180: PUSH
12181: LD_INT 12
12183: PUSH
12184: LD_INT 15
12186: PUSH
12187: LD_INT 16
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 26
12195: PUSH
12196: LD_INT 36
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 101
12213: PUSH
12214: LD_INT 102
12216: PUSH
12217: LD_INT 105
12219: PUSH
12220: LD_INT 106
12222: PUSH
12223: LD_INT 108
12225: PUSH
12226: LD_INT 116
12228: PUSH
12229: LD_INT 117
12231: PUSH
12232: LD_INT 118
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: ST_TO_ADDR
12249: GO 15136
12251: LD_INT 4
12253: DOUBLE
12254: EQUAL
12255: IFTRUE 12259
12257: GO 12355
12259: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12260: LD_ADDR_VAR 0 2
12264: PUSH
12265: LD_INT 2
12267: PUSH
12268: LD_INT 4
12270: PUSH
12271: LD_INT 5
12273: PUSH
12274: LD_INT 8
12276: PUSH
12277: LD_INT 11
12279: PUSH
12280: LD_INT 12
12282: PUSH
12283: LD_INT 15
12285: PUSH
12286: LD_INT 16
12288: PUSH
12289: LD_INT 22
12291: PUSH
12292: LD_INT 23
12294: PUSH
12295: LD_INT 26
12297: PUSH
12298: LD_INT 36
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 101
12317: PUSH
12318: LD_INT 102
12320: PUSH
12321: LD_INT 105
12323: PUSH
12324: LD_INT 106
12326: PUSH
12327: LD_INT 108
12329: PUSH
12330: LD_INT 116
12332: PUSH
12333: LD_INT 117
12335: PUSH
12336: LD_INT 118
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: ST_TO_ADDR
12353: GO 15136
12355: LD_INT 5
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12363
12361: GO 12475
12363: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12364: LD_ADDR_VAR 0 2
12368: PUSH
12369: LD_INT 2
12371: PUSH
12372: LD_INT 4
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: LD_INT 6
12380: PUSH
12381: LD_INT 8
12383: PUSH
12384: LD_INT 11
12386: PUSH
12387: LD_INT 12
12389: PUSH
12390: LD_INT 15
12392: PUSH
12393: LD_INT 16
12395: PUSH
12396: LD_INT 22
12398: PUSH
12399: LD_INT 23
12401: PUSH
12402: LD_INT 25
12404: PUSH
12405: LD_INT 26
12407: PUSH
12408: LD_INT 36
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 101
12429: PUSH
12430: LD_INT 102
12432: PUSH
12433: LD_INT 105
12435: PUSH
12436: LD_INT 106
12438: PUSH
12439: LD_INT 108
12441: PUSH
12442: LD_INT 109
12444: PUSH
12445: LD_INT 112
12447: PUSH
12448: LD_INT 116
12450: PUSH
12451: LD_INT 117
12453: PUSH
12454: LD_INT 118
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: ST_TO_ADDR
12473: GO 15136
12475: LD_INT 6
12477: DOUBLE
12478: EQUAL
12479: IFTRUE 12483
12481: GO 12615
12483: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12484: LD_ADDR_VAR 0 2
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: LD_INT 5
12497: PUSH
12498: LD_INT 6
12500: PUSH
12501: LD_INT 8
12503: PUSH
12504: LD_INT 11
12506: PUSH
12507: LD_INT 12
12509: PUSH
12510: LD_INT 15
12512: PUSH
12513: LD_INT 16
12515: PUSH
12516: LD_INT 20
12518: PUSH
12519: LD_INT 21
12521: PUSH
12522: LD_INT 22
12524: PUSH
12525: LD_INT 23
12527: PUSH
12528: LD_INT 25
12530: PUSH
12531: LD_INT 26
12533: PUSH
12534: LD_INT 30
12536: PUSH
12537: LD_INT 31
12539: PUSH
12540: LD_INT 32
12542: PUSH
12543: LD_INT 36
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 101
12569: PUSH
12570: LD_INT 102
12572: PUSH
12573: LD_INT 105
12575: PUSH
12576: LD_INT 106
12578: PUSH
12579: LD_INT 108
12581: PUSH
12582: LD_INT 109
12584: PUSH
12585: LD_INT 112
12587: PUSH
12588: LD_INT 116
12590: PUSH
12591: LD_INT 117
12593: PUSH
12594: LD_INT 118
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: ST_TO_ADDR
12613: GO 15136
12615: LD_INT 7
12617: DOUBLE
12618: EQUAL
12619: IFTRUE 12623
12621: GO 12735
12623: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 4
12634: PUSH
12635: LD_INT 5
12637: PUSH
12638: LD_INT 7
12640: PUSH
12641: LD_INT 11
12643: PUSH
12644: LD_INT 12
12646: PUSH
12647: LD_INT 15
12649: PUSH
12650: LD_INT 16
12652: PUSH
12653: LD_INT 20
12655: PUSH
12656: LD_INT 21
12658: PUSH
12659: LD_INT 22
12661: PUSH
12662: LD_INT 23
12664: PUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 26
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 101
12689: PUSH
12690: LD_INT 102
12692: PUSH
12693: LD_INT 103
12695: PUSH
12696: LD_INT 105
12698: PUSH
12699: LD_INT 106
12701: PUSH
12702: LD_INT 108
12704: PUSH
12705: LD_INT 112
12707: PUSH
12708: LD_INT 116
12710: PUSH
12711: LD_INT 117
12713: PUSH
12714: LD_INT 118
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: ST_TO_ADDR
12733: GO 15136
12735: LD_INT 8
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 12883
12743: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12744: LD_ADDR_VAR 0 2
12748: PUSH
12749: LD_INT 2
12751: PUSH
12752: LD_INT 4
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: LD_INT 6
12760: PUSH
12761: LD_INT 7
12763: PUSH
12764: LD_INT 8
12766: PUSH
12767: LD_INT 11
12769: PUSH
12770: LD_INT 12
12772: PUSH
12773: LD_INT 15
12775: PUSH
12776: LD_INT 16
12778: PUSH
12779: LD_INT 20
12781: PUSH
12782: LD_INT 21
12784: PUSH
12785: LD_INT 22
12787: PUSH
12788: LD_INT 23
12790: PUSH
12791: LD_INT 25
12793: PUSH
12794: LD_INT 26
12796: PUSH
12797: LD_INT 30
12799: PUSH
12800: LD_INT 31
12802: PUSH
12803: LD_INT 32
12805: PUSH
12806: LD_INT 36
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 101
12833: PUSH
12834: LD_INT 102
12836: PUSH
12837: LD_INT 103
12839: PUSH
12840: LD_INT 105
12842: PUSH
12843: LD_INT 106
12845: PUSH
12846: LD_INT 108
12848: PUSH
12849: LD_INT 109
12851: PUSH
12852: LD_INT 112
12854: PUSH
12855: LD_INT 116
12857: PUSH
12858: LD_INT 117
12860: PUSH
12861: LD_INT 118
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: ST_TO_ADDR
12881: GO 15136
12883: LD_INT 9
12885: DOUBLE
12886: EQUAL
12887: IFTRUE 12891
12889: GO 13039
12891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12892: LD_ADDR_VAR 0 2
12896: PUSH
12897: LD_INT 2
12899: PUSH
12900: LD_INT 4
12902: PUSH
12903: LD_INT 5
12905: PUSH
12906: LD_INT 6
12908: PUSH
12909: LD_INT 7
12911: PUSH
12912: LD_INT 8
12914: PUSH
12915: LD_INT 11
12917: PUSH
12918: LD_INT 12
12920: PUSH
12921: LD_INT 15
12923: PUSH
12924: LD_INT 16
12926: PUSH
12927: LD_INT 20
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_INT 23
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 26
12944: PUSH
12945: LD_INT 28
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 31
12953: PUSH
12954: LD_INT 32
12956: PUSH
12957: LD_INT 36
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 101
12985: PUSH
12986: LD_INT 102
12988: PUSH
12989: LD_INT 103
12991: PUSH
12992: LD_INT 105
12994: PUSH
12995: LD_INT 106
12997: PUSH
12998: LD_INT 108
13000: PUSH
13001: LD_INT 109
13003: PUSH
13004: LD_INT 112
13006: PUSH
13007: LD_INT 114
13009: PUSH
13010: LD_INT 116
13012: PUSH
13013: LD_INT 117
13015: PUSH
13016: LD_INT 118
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: ST_TO_ADDR
13037: GO 15136
13039: LD_INT 10
13041: DOUBLE
13042: EQUAL
13043: IFTRUE 13047
13045: GO 13243
13047: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13048: LD_ADDR_VAR 0 2
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: LD_INT 6
13064: PUSH
13065: LD_INT 7
13067: PUSH
13068: LD_INT 8
13070: PUSH
13071: LD_INT 9
13073: PUSH
13074: LD_INT 10
13076: PUSH
13077: LD_INT 11
13079: PUSH
13080: LD_INT 12
13082: PUSH
13083: LD_INT 13
13085: PUSH
13086: LD_INT 14
13088: PUSH
13089: LD_INT 15
13091: PUSH
13092: LD_INT 16
13094: PUSH
13095: LD_INT 17
13097: PUSH
13098: LD_INT 18
13100: PUSH
13101: LD_INT 19
13103: PUSH
13104: LD_INT 20
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 26
13124: PUSH
13125: LD_INT 28
13127: PUSH
13128: LD_INT 30
13130: PUSH
13131: LD_INT 31
13133: PUSH
13134: LD_INT 32
13136: PUSH
13137: LD_INT 36
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 101
13173: PUSH
13174: LD_INT 102
13176: PUSH
13177: LD_INT 103
13179: PUSH
13180: LD_INT 104
13182: PUSH
13183: LD_INT 105
13185: PUSH
13186: LD_INT 106
13188: PUSH
13189: LD_INT 107
13191: PUSH
13192: LD_INT 108
13194: PUSH
13195: LD_INT 109
13197: PUSH
13198: LD_INT 110
13200: PUSH
13201: LD_INT 111
13203: PUSH
13204: LD_INT 112
13206: PUSH
13207: LD_INT 114
13209: PUSH
13210: LD_INT 116
13212: PUSH
13213: LD_INT 117
13215: PUSH
13216: LD_INT 118
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: ST_TO_ADDR
13241: GO 15136
13243: LD_INT 11
13245: DOUBLE
13246: EQUAL
13247: IFTRUE 13251
13249: GO 13455
13251: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13252: LD_ADDR_VAR 0 2
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: LD_INT 3
13262: PUSH
13263: LD_INT 4
13265: PUSH
13266: LD_INT 5
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: LD_INT 7
13274: PUSH
13275: LD_INT 8
13277: PUSH
13278: LD_INT 9
13280: PUSH
13281: LD_INT 10
13283: PUSH
13284: LD_INT 11
13286: PUSH
13287: LD_INT 12
13289: PUSH
13290: LD_INT 13
13292: PUSH
13293: LD_INT 14
13295: PUSH
13296: LD_INT 15
13298: PUSH
13299: LD_INT 16
13301: PUSH
13302: LD_INT 17
13304: PUSH
13305: LD_INT 18
13307: PUSH
13308: LD_INT 19
13310: PUSH
13311: LD_INT 20
13313: PUSH
13314: LD_INT 21
13316: PUSH
13317: LD_INT 22
13319: PUSH
13320: LD_INT 23
13322: PUSH
13323: LD_INT 24
13325: PUSH
13326: LD_INT 25
13328: PUSH
13329: LD_INT 26
13331: PUSH
13332: LD_INT 28
13334: PUSH
13335: LD_INT 30
13337: PUSH
13338: LD_INT 31
13340: PUSH
13341: LD_INT 32
13343: PUSH
13344: LD_INT 34
13346: PUSH
13347: LD_INT 36
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 101
13385: PUSH
13386: LD_INT 102
13388: PUSH
13389: LD_INT 103
13391: PUSH
13392: LD_INT 104
13394: PUSH
13395: LD_INT 105
13397: PUSH
13398: LD_INT 106
13400: PUSH
13401: LD_INT 107
13403: PUSH
13404: LD_INT 108
13406: PUSH
13407: LD_INT 109
13409: PUSH
13410: LD_INT 110
13412: PUSH
13413: LD_INT 111
13415: PUSH
13416: LD_INT 112
13418: PUSH
13419: LD_INT 114
13421: PUSH
13422: LD_INT 116
13424: PUSH
13425: LD_INT 117
13427: PUSH
13428: LD_INT 118
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: ST_TO_ADDR
13453: GO 15136
13455: LD_INT 12
13457: DOUBLE
13458: EQUAL
13459: IFTRUE 13463
13461: GO 13683
13463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13464: LD_ADDR_VAR 0 2
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 3
13477: PUSH
13478: LD_INT 4
13480: PUSH
13481: LD_INT 5
13483: PUSH
13484: LD_INT 6
13486: PUSH
13487: LD_INT 7
13489: PUSH
13490: LD_INT 8
13492: PUSH
13493: LD_INT 9
13495: PUSH
13496: LD_INT 10
13498: PUSH
13499: LD_INT 11
13501: PUSH
13502: LD_INT 12
13504: PUSH
13505: LD_INT 13
13507: PUSH
13508: LD_INT 14
13510: PUSH
13511: LD_INT 15
13513: PUSH
13514: LD_INT 16
13516: PUSH
13517: LD_INT 17
13519: PUSH
13520: LD_INT 18
13522: PUSH
13523: LD_INT 19
13525: PUSH
13526: LD_INT 20
13528: PUSH
13529: LD_INT 21
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_INT 23
13537: PUSH
13538: LD_INT 24
13540: PUSH
13541: LD_INT 25
13543: PUSH
13544: LD_INT 26
13546: PUSH
13547: LD_INT 27
13549: PUSH
13550: LD_INT 28
13552: PUSH
13553: LD_INT 30
13555: PUSH
13556: LD_INT 31
13558: PUSH
13559: LD_INT 32
13561: PUSH
13562: LD_INT 33
13564: PUSH
13565: LD_INT 34
13567: PUSH
13568: LD_INT 36
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 101
13609: PUSH
13610: LD_INT 102
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: LD_INT 104
13618: PUSH
13619: LD_INT 105
13621: PUSH
13622: LD_INT 106
13624: PUSH
13625: LD_INT 107
13627: PUSH
13628: LD_INT 108
13630: PUSH
13631: LD_INT 109
13633: PUSH
13634: LD_INT 110
13636: PUSH
13637: LD_INT 111
13639: PUSH
13640: LD_INT 112
13642: PUSH
13643: LD_INT 113
13645: PUSH
13646: LD_INT 114
13648: PUSH
13649: LD_INT 116
13651: PUSH
13652: LD_INT 117
13654: PUSH
13655: LD_INT 118
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: ST_TO_ADDR
13681: GO 15136
13683: LD_INT 13
13685: DOUBLE
13686: EQUAL
13687: IFTRUE 13691
13689: GO 13899
13691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13692: LD_ADDR_VAR 0 2
13696: PUSH
13697: LD_INT 1
13699: PUSH
13700: LD_INT 2
13702: PUSH
13703: LD_INT 3
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 8
13714: PUSH
13715: LD_INT 9
13717: PUSH
13718: LD_INT 10
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 14
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 17
13738: PUSH
13739: LD_INT 18
13741: PUSH
13742: LD_INT 19
13744: PUSH
13745: LD_INT 20
13747: PUSH
13748: LD_INT 21
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 23
13756: PUSH
13757: LD_INT 24
13759: PUSH
13760: LD_INT 25
13762: PUSH
13763: LD_INT 26
13765: PUSH
13766: LD_INT 27
13768: PUSH
13769: LD_INT 28
13771: PUSH
13772: LD_INT 30
13774: PUSH
13775: LD_INT 31
13777: PUSH
13778: LD_INT 32
13780: PUSH
13781: LD_INT 33
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 36
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 101
13825: PUSH
13826: LD_INT 102
13828: PUSH
13829: LD_INT 103
13831: PUSH
13832: LD_INT 104
13834: PUSH
13835: LD_INT 105
13837: PUSH
13838: LD_INT 106
13840: PUSH
13841: LD_INT 107
13843: PUSH
13844: LD_INT 108
13846: PUSH
13847: LD_INT 109
13849: PUSH
13850: LD_INT 110
13852: PUSH
13853: LD_INT 111
13855: PUSH
13856: LD_INT 112
13858: PUSH
13859: LD_INT 113
13861: PUSH
13862: LD_INT 114
13864: PUSH
13865: LD_INT 116
13867: PUSH
13868: LD_INT 117
13870: PUSH
13871: LD_INT 118
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
13897: GO 15136
13899: LD_INT 14
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 14131
13907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: LD_INT 4
13924: PUSH
13925: LD_INT 5
13927: PUSH
13928: LD_INT 6
13930: PUSH
13931: LD_INT 7
13933: PUSH
13934: LD_INT 8
13936: PUSH
13937: LD_INT 9
13939: PUSH
13940: LD_INT 10
13942: PUSH
13943: LD_INT 11
13945: PUSH
13946: LD_INT 12
13948: PUSH
13949: LD_INT 13
13951: PUSH
13952: LD_INT 14
13954: PUSH
13955: LD_INT 15
13957: PUSH
13958: LD_INT 16
13960: PUSH
13961: LD_INT 17
13963: PUSH
13964: LD_INT 18
13966: PUSH
13967: LD_INT 19
13969: PUSH
13970: LD_INT 20
13972: PUSH
13973: LD_INT 21
13975: PUSH
13976: LD_INT 22
13978: PUSH
13979: LD_INT 23
13981: PUSH
13982: LD_INT 24
13984: PUSH
13985: LD_INT 25
13987: PUSH
13988: LD_INT 26
13990: PUSH
13991: LD_INT 27
13993: PUSH
13994: LD_INT 28
13996: PUSH
13997: LD_INT 29
13999: PUSH
14000: LD_INT 30
14002: PUSH
14003: LD_INT 31
14005: PUSH
14006: LD_INT 32
14008: PUSH
14009: LD_INT 33
14011: PUSH
14012: LD_INT 34
14014: PUSH
14015: LD_INT 36
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 101
14057: PUSH
14058: LD_INT 102
14060: PUSH
14061: LD_INT 103
14063: PUSH
14064: LD_INT 104
14066: PUSH
14067: LD_INT 105
14069: PUSH
14070: LD_INT 106
14072: PUSH
14073: LD_INT 107
14075: PUSH
14076: LD_INT 108
14078: PUSH
14079: LD_INT 109
14081: PUSH
14082: LD_INT 110
14084: PUSH
14085: LD_INT 111
14087: PUSH
14088: LD_INT 112
14090: PUSH
14091: LD_INT 113
14093: PUSH
14094: LD_INT 114
14096: PUSH
14097: LD_INT 116
14099: PUSH
14100: LD_INT 117
14102: PUSH
14103: LD_INT 118
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: ST_TO_ADDR
14129: GO 15136
14131: LD_INT 15
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14363
14139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14140: LD_ADDR_VAR 0 2
14144: PUSH
14145: LD_INT 1
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: LD_INT 5
14159: PUSH
14160: LD_INT 6
14162: PUSH
14163: LD_INT 7
14165: PUSH
14166: LD_INT 8
14168: PUSH
14169: LD_INT 9
14171: PUSH
14172: LD_INT 10
14174: PUSH
14175: LD_INT 11
14177: PUSH
14178: LD_INT 12
14180: PUSH
14181: LD_INT 13
14183: PUSH
14184: LD_INT 14
14186: PUSH
14187: LD_INT 15
14189: PUSH
14190: LD_INT 16
14192: PUSH
14193: LD_INT 17
14195: PUSH
14196: LD_INT 18
14198: PUSH
14199: LD_INT 19
14201: PUSH
14202: LD_INT 20
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 22
14210: PUSH
14211: LD_INT 23
14213: PUSH
14214: LD_INT 24
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 26
14222: PUSH
14223: LD_INT 27
14225: PUSH
14226: LD_INT 28
14228: PUSH
14229: LD_INT 29
14231: PUSH
14232: LD_INT 30
14234: PUSH
14235: LD_INT 31
14237: PUSH
14238: LD_INT 32
14240: PUSH
14241: LD_INT 33
14243: PUSH
14244: LD_INT 34
14246: PUSH
14247: LD_INT 36
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 101
14289: PUSH
14290: LD_INT 102
14292: PUSH
14293: LD_INT 103
14295: PUSH
14296: LD_INT 104
14298: PUSH
14299: LD_INT 105
14301: PUSH
14302: LD_INT 106
14304: PUSH
14305: LD_INT 107
14307: PUSH
14308: LD_INT 108
14310: PUSH
14311: LD_INT 109
14313: PUSH
14314: LD_INT 110
14316: PUSH
14317: LD_INT 111
14319: PUSH
14320: LD_INT 112
14322: PUSH
14323: LD_INT 113
14325: PUSH
14326: LD_INT 114
14328: PUSH
14329: LD_INT 116
14331: PUSH
14332: LD_INT 117
14334: PUSH
14335: LD_INT 118
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: ST_TO_ADDR
14361: GO 15136
14363: LD_INT 16
14365: DOUBLE
14366: EQUAL
14367: IFTRUE 14371
14369: GO 14507
14371: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14372: LD_ADDR_VAR 0 2
14376: PUSH
14377: LD_INT 2
14379: PUSH
14380: LD_INT 4
14382: PUSH
14383: LD_INT 5
14385: PUSH
14386: LD_INT 7
14388: PUSH
14389: LD_INT 11
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: LD_INT 15
14397: PUSH
14398: LD_INT 16
14400: PUSH
14401: LD_INT 20
14403: PUSH
14404: LD_INT 21
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 23
14412: PUSH
14413: LD_INT 25
14415: PUSH
14416: LD_INT 26
14418: PUSH
14419: LD_INT 30
14421: PUSH
14422: LD_INT 31
14424: PUSH
14425: LD_INT 32
14427: PUSH
14428: LD_INT 33
14430: PUSH
14431: LD_INT 34
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 101
14457: PUSH
14458: LD_INT 102
14460: PUSH
14461: LD_INT 103
14463: PUSH
14464: LD_INT 106
14466: PUSH
14467: LD_INT 108
14469: PUSH
14470: LD_INT 112
14472: PUSH
14473: LD_INT 113
14475: PUSH
14476: LD_INT 114
14478: PUSH
14479: LD_INT 116
14481: PUSH
14482: LD_INT 117
14484: PUSH
14485: LD_INT 118
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: ST_TO_ADDR
14505: GO 15136
14507: LD_INT 17
14509: DOUBLE
14510: EQUAL
14511: IFTRUE 14515
14513: GO 14739
14515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14516: LD_ADDR_VAR 0 2
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: LD_INT 2
14526: PUSH
14527: LD_INT 3
14529: PUSH
14530: LD_INT 4
14532: PUSH
14533: LD_INT 5
14535: PUSH
14536: LD_INT 6
14538: PUSH
14539: LD_INT 7
14541: PUSH
14542: LD_INT 8
14544: PUSH
14545: LD_INT 9
14547: PUSH
14548: LD_INT 10
14550: PUSH
14551: LD_INT 11
14553: PUSH
14554: LD_INT 12
14556: PUSH
14557: LD_INT 13
14559: PUSH
14560: LD_INT 14
14562: PUSH
14563: LD_INT 15
14565: PUSH
14566: LD_INT 16
14568: PUSH
14569: LD_INT 17
14571: PUSH
14572: LD_INT 18
14574: PUSH
14575: LD_INT 19
14577: PUSH
14578: LD_INT 20
14580: PUSH
14581: LD_INT 21
14583: PUSH
14584: LD_INT 22
14586: PUSH
14587: LD_INT 23
14589: PUSH
14590: LD_INT 24
14592: PUSH
14593: LD_INT 25
14595: PUSH
14596: LD_INT 26
14598: PUSH
14599: LD_INT 27
14601: PUSH
14602: LD_INT 28
14604: PUSH
14605: LD_INT 29
14607: PUSH
14608: LD_INT 30
14610: PUSH
14611: LD_INT 31
14613: PUSH
14614: LD_INT 32
14616: PUSH
14617: LD_INT 33
14619: PUSH
14620: LD_INT 34
14622: PUSH
14623: LD_INT 36
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 101
14665: PUSH
14666: LD_INT 102
14668: PUSH
14669: LD_INT 103
14671: PUSH
14672: LD_INT 104
14674: PUSH
14675: LD_INT 105
14677: PUSH
14678: LD_INT 106
14680: PUSH
14681: LD_INT 107
14683: PUSH
14684: LD_INT 108
14686: PUSH
14687: LD_INT 109
14689: PUSH
14690: LD_INT 110
14692: PUSH
14693: LD_INT 111
14695: PUSH
14696: LD_INT 112
14698: PUSH
14699: LD_INT 113
14701: PUSH
14702: LD_INT 114
14704: PUSH
14705: LD_INT 116
14707: PUSH
14708: LD_INT 117
14710: PUSH
14711: LD_INT 118
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: ST_TO_ADDR
14737: GO 15136
14739: LD_INT 18
14741: DOUBLE
14742: EQUAL
14743: IFTRUE 14747
14745: GO 14895
14747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14748: LD_ADDR_VAR 0 2
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: LD_INT 4
14758: PUSH
14759: LD_INT 5
14761: PUSH
14762: LD_INT 7
14764: PUSH
14765: LD_INT 11
14767: PUSH
14768: LD_INT 12
14770: PUSH
14771: LD_INT 15
14773: PUSH
14774: LD_INT 16
14776: PUSH
14777: LD_INT 20
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 25
14791: PUSH
14792: LD_INT 26
14794: PUSH
14795: LD_INT 30
14797: PUSH
14798: LD_INT 31
14800: PUSH
14801: LD_INT 32
14803: PUSH
14804: LD_INT 33
14806: PUSH
14807: LD_INT 34
14809: PUSH
14810: LD_INT 35
14812: PUSH
14813: LD_INT 36
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 101
14841: PUSH
14842: LD_INT 102
14844: PUSH
14845: LD_INT 103
14847: PUSH
14848: LD_INT 106
14850: PUSH
14851: LD_INT 108
14853: PUSH
14854: LD_INT 112
14856: PUSH
14857: LD_INT 113
14859: PUSH
14860: LD_INT 114
14862: PUSH
14863: LD_INT 115
14865: PUSH
14866: LD_INT 116
14868: PUSH
14869: LD_INT 117
14871: PUSH
14872: LD_INT 118
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: ST_TO_ADDR
14893: GO 15136
14895: LD_INT 19
14897: DOUBLE
14898: EQUAL
14899: IFTRUE 14903
14901: GO 15135
14903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14904: LD_ADDR_VAR 0 2
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: LD_INT 3
14917: PUSH
14918: LD_INT 4
14920: PUSH
14921: LD_INT 5
14923: PUSH
14924: LD_INT 6
14926: PUSH
14927: LD_INT 7
14929: PUSH
14930: LD_INT 8
14932: PUSH
14933: LD_INT 9
14935: PUSH
14936: LD_INT 10
14938: PUSH
14939: LD_INT 11
14941: PUSH
14942: LD_INT 12
14944: PUSH
14945: LD_INT 13
14947: PUSH
14948: LD_INT 14
14950: PUSH
14951: LD_INT 15
14953: PUSH
14954: LD_INT 16
14956: PUSH
14957: LD_INT 17
14959: PUSH
14960: LD_INT 18
14962: PUSH
14963: LD_INT 19
14965: PUSH
14966: LD_INT 20
14968: PUSH
14969: LD_INT 21
14971: PUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 23
14977: PUSH
14978: LD_INT 24
14980: PUSH
14981: LD_INT 25
14983: PUSH
14984: LD_INT 26
14986: PUSH
14987: LD_INT 27
14989: PUSH
14990: LD_INT 28
14992: PUSH
14993: LD_INT 29
14995: PUSH
14996: LD_INT 30
14998: PUSH
14999: LD_INT 31
15001: PUSH
15002: LD_INT 32
15004: PUSH
15005: LD_INT 33
15007: PUSH
15008: LD_INT 34
15010: PUSH
15011: LD_INT 35
15013: PUSH
15014: LD_INT 36
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 101
15057: PUSH
15058: LD_INT 102
15060: PUSH
15061: LD_INT 103
15063: PUSH
15064: LD_INT 104
15066: PUSH
15067: LD_INT 105
15069: PUSH
15070: LD_INT 106
15072: PUSH
15073: LD_INT 107
15075: PUSH
15076: LD_INT 108
15078: PUSH
15079: LD_INT 109
15081: PUSH
15082: LD_INT 110
15084: PUSH
15085: LD_INT 111
15087: PUSH
15088: LD_INT 112
15090: PUSH
15091: LD_INT 113
15093: PUSH
15094: LD_INT 114
15096: PUSH
15097: LD_INT 115
15099: PUSH
15100: LD_INT 116
15102: PUSH
15103: LD_INT 117
15105: PUSH
15106: LD_INT 118
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: ST_TO_ADDR
15133: GO 15136
15135: POP
// end else
15136: GO 15367
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15138: LD_ADDR_VAR 0 2
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: LD_INT 2
15148: PUSH
15149: LD_INT 3
15151: PUSH
15152: LD_INT 4
15154: PUSH
15155: LD_INT 5
15157: PUSH
15158: LD_INT 6
15160: PUSH
15161: LD_INT 7
15163: PUSH
15164: LD_INT 8
15166: PUSH
15167: LD_INT 9
15169: PUSH
15170: LD_INT 10
15172: PUSH
15173: LD_INT 11
15175: PUSH
15176: LD_INT 12
15178: PUSH
15179: LD_INT 13
15181: PUSH
15182: LD_INT 14
15184: PUSH
15185: LD_INT 15
15187: PUSH
15188: LD_INT 16
15190: PUSH
15191: LD_INT 17
15193: PUSH
15194: LD_INT 18
15196: PUSH
15197: LD_INT 19
15199: PUSH
15200: LD_INT 20
15202: PUSH
15203: LD_INT 21
15205: PUSH
15206: LD_INT 22
15208: PUSH
15209: LD_INT 23
15211: PUSH
15212: LD_INT 24
15214: PUSH
15215: LD_INT 25
15217: PUSH
15218: LD_INT 26
15220: PUSH
15221: LD_INT 27
15223: PUSH
15224: LD_INT 28
15226: PUSH
15227: LD_INT 29
15229: PUSH
15230: LD_INT 30
15232: PUSH
15233: LD_INT 31
15235: PUSH
15236: LD_INT 32
15238: PUSH
15239: LD_INT 33
15241: PUSH
15242: LD_INT 34
15244: PUSH
15245: LD_INT 35
15247: PUSH
15248: LD_INT 36
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 101
15291: PUSH
15292: LD_INT 102
15294: PUSH
15295: LD_INT 103
15297: PUSH
15298: LD_INT 104
15300: PUSH
15301: LD_INT 105
15303: PUSH
15304: LD_INT 106
15306: PUSH
15307: LD_INT 107
15309: PUSH
15310: LD_INT 108
15312: PUSH
15313: LD_INT 109
15315: PUSH
15316: LD_INT 110
15318: PUSH
15319: LD_INT 111
15321: PUSH
15322: LD_INT 112
15324: PUSH
15325: LD_INT 113
15327: PUSH
15328: LD_INT 114
15330: PUSH
15331: LD_INT 115
15333: PUSH
15334: LD_INT 116
15336: PUSH
15337: LD_INT 117
15339: PUSH
15340: LD_INT 118
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: ST_TO_ADDR
// if result then
15367: LD_VAR 0 2
15371: IFFALSE 16157
// begin normal :=  ;
15373: LD_ADDR_VAR 0 5
15377: PUSH
15378: LD_STRING 
15380: ST_TO_ADDR
// hardcore :=  ;
15381: LD_ADDR_VAR 0 6
15385: PUSH
15386: LD_STRING 
15388: ST_TO_ADDR
// active :=  ;
15389: LD_ADDR_VAR 0 7
15393: PUSH
15394: LD_STRING 
15396: ST_TO_ADDR
// for i = 1 to normalCounter do
15397: LD_ADDR_VAR 0 8
15401: PUSH
15402: DOUBLE
15403: LD_INT 1
15405: DEC
15406: ST_TO_ADDR
15407: LD_EXP 28
15411: PUSH
15412: FOR_TO
15413: IFFALSE 15514
// begin tmp := 0 ;
15415: LD_ADDR_VAR 0 3
15419: PUSH
15420: LD_STRING 0
15422: ST_TO_ADDR
// if result [ 1 ] then
15423: LD_VAR 0 2
15427: PUSH
15428: LD_INT 1
15430: ARRAY
15431: IFFALSE 15496
// if result [ 1 ] [ 1 ] = i then
15433: LD_VAR 0 2
15437: PUSH
15438: LD_INT 1
15440: ARRAY
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PUSH
15446: LD_VAR 0 8
15450: EQUAL
15451: IFFALSE 15496
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15453: LD_ADDR_VAR 0 2
15457: PUSH
15458: LD_VAR 0 2
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: LD_VAR 0 2
15470: PUSH
15471: LD_INT 1
15473: ARRAY
15474: PPUSH
15475: LD_INT 1
15477: PPUSH
15478: CALL_OW 3
15482: PPUSH
15483: CALL_OW 1
15487: ST_TO_ADDR
// tmp := 1 ;
15488: LD_ADDR_VAR 0 3
15492: PUSH
15493: LD_STRING 1
15495: ST_TO_ADDR
// end ; normal := normal & tmp ;
15496: LD_ADDR_VAR 0 5
15500: PUSH
15501: LD_VAR 0 5
15505: PUSH
15506: LD_VAR 0 3
15510: STR
15511: ST_TO_ADDR
// end ;
15512: GO 15412
15514: POP
15515: POP
// for i = 1 to hardcoreCounter do
15516: LD_ADDR_VAR 0 8
15520: PUSH
15521: DOUBLE
15522: LD_INT 1
15524: DEC
15525: ST_TO_ADDR
15526: LD_EXP 29
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15637
// begin tmp := 0 ;
15534: LD_ADDR_VAR 0 3
15538: PUSH
15539: LD_STRING 0
15541: ST_TO_ADDR
// if result [ 2 ] then
15542: LD_VAR 0 2
15546: PUSH
15547: LD_INT 2
15549: ARRAY
15550: IFFALSE 15619
// if result [ 2 ] [ 1 ] = 100 + i then
15552: LD_VAR 0 2
15556: PUSH
15557: LD_INT 2
15559: ARRAY
15560: PUSH
15561: LD_INT 1
15563: ARRAY
15564: PUSH
15565: LD_INT 100
15567: PUSH
15568: LD_VAR 0 8
15572: PLUS
15573: EQUAL
15574: IFFALSE 15619
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_INT 2
15588: PPUSH
15589: LD_VAR 0 2
15593: PUSH
15594: LD_INT 2
15596: ARRAY
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 3
15605: PPUSH
15606: CALL_OW 1
15610: ST_TO_ADDR
// tmp := 1 ;
15611: LD_ADDR_VAR 0 3
15615: PUSH
15616: LD_STRING 1
15618: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15619: LD_ADDR_VAR 0 6
15623: PUSH
15624: LD_VAR 0 6
15628: PUSH
15629: LD_VAR 0 3
15633: STR
15634: ST_TO_ADDR
// end ;
15635: GO 15531
15637: POP
15638: POP
// if isGameLoad then
15639: LD_VAR 0 1
15643: IFFALSE 16118
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15645: LD_ADDR_VAR 0 4
15649: PUSH
15650: LD_EXP 32
15654: PUSH
15655: LD_EXP 31
15659: PUSH
15660: LD_EXP 33
15664: PUSH
15665: LD_EXP 30
15669: PUSH
15670: LD_EXP 34
15674: PUSH
15675: LD_EXP 35
15679: PUSH
15680: LD_EXP 36
15684: PUSH
15685: LD_EXP 37
15689: PUSH
15690: LD_EXP 38
15694: PUSH
15695: LD_EXP 39
15699: PUSH
15700: LD_EXP 40
15704: PUSH
15705: LD_EXP 41
15709: PUSH
15710: LD_EXP 42
15714: PUSH
15715: LD_EXP 43
15719: PUSH
15720: LD_EXP 51
15724: PUSH
15725: LD_EXP 52
15729: PUSH
15730: LD_EXP 53
15734: PUSH
15735: LD_EXP 54
15739: PUSH
15740: LD_EXP 56
15744: PUSH
15745: LD_EXP 57
15749: PUSH
15750: LD_EXP 58
15754: PUSH
15755: LD_EXP 61
15759: PUSH
15760: LD_EXP 63
15764: PUSH
15765: LD_EXP 64
15769: PUSH
15770: LD_EXP 65
15774: PUSH
15775: LD_EXP 67
15779: PUSH
15780: LD_EXP 68
15784: PUSH
15785: LD_EXP 71
15789: PUSH
15790: LD_EXP 72
15794: PUSH
15795: LD_EXP 73
15799: PUSH
15800: LD_EXP 74
15804: PUSH
15805: LD_EXP 75
15809: PUSH
15810: LD_EXP 76
15814: PUSH
15815: LD_EXP 77
15819: PUSH
15820: LD_EXP 78
15824: PUSH
15825: LD_EXP 79
15829: PUSH
15830: LD_EXP 44
15834: PUSH
15835: LD_EXP 45
15839: PUSH
15840: LD_EXP 48
15844: PUSH
15845: LD_EXP 49
15849: PUSH
15850: LD_EXP 50
15854: PUSH
15855: LD_EXP 46
15859: PUSH
15860: LD_EXP 47
15864: PUSH
15865: LD_EXP 55
15869: PUSH
15870: LD_EXP 59
15874: PUSH
15875: LD_EXP 60
15879: PUSH
15880: LD_EXP 62
15884: PUSH
15885: LD_EXP 66
15889: PUSH
15890: LD_EXP 69
15894: PUSH
15895: LD_EXP 70
15899: PUSH
15900: LD_EXP 80
15904: PUSH
15905: LD_EXP 81
15909: PUSH
15910: LD_EXP 82
15914: PUSH
15915: LD_EXP 83
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: ST_TO_ADDR
// tmp :=  ;
15976: LD_ADDR_VAR 0 3
15980: PUSH
15981: LD_STRING 
15983: ST_TO_ADDR
// for i = 1 to normalCounter do
15984: LD_ADDR_VAR 0 8
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_EXP 28
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16036
// begin if flags [ i ] then
16002: LD_VAR 0 4
16006: PUSH
16007: LD_VAR 0 8
16011: ARRAY
16012: IFFALSE 16034
// tmp := tmp & i & ; ;
16014: LD_ADDR_VAR 0 3
16018: PUSH
16019: LD_VAR 0 3
16023: PUSH
16024: LD_VAR 0 8
16028: STR
16029: PUSH
16030: LD_STRING ;
16032: STR
16033: ST_TO_ADDR
// end ;
16034: GO 15999
16036: POP
16037: POP
// for i = 1 to hardcoreCounter do
16038: LD_ADDR_VAR 0 8
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_EXP 29
16052: PUSH
16053: FOR_TO
16054: IFFALSE 16100
// begin if flags [ normalCounter + i ] then
16056: LD_VAR 0 4
16060: PUSH
16061: LD_EXP 28
16065: PUSH
16066: LD_VAR 0 8
16070: PLUS
16071: ARRAY
16072: IFFALSE 16098
// tmp := tmp & ( 100 + i ) & ; ;
16074: LD_ADDR_VAR 0 3
16078: PUSH
16079: LD_VAR 0 3
16083: PUSH
16084: LD_INT 100
16086: PUSH
16087: LD_VAR 0 8
16091: PLUS
16092: STR
16093: PUSH
16094: LD_STRING ;
16096: STR
16097: ST_TO_ADDR
// end ;
16098: GO 16053
16100: POP
16101: POP
// if tmp then
16102: LD_VAR 0 3
16106: IFFALSE 16118
// active := tmp ;
16108: LD_ADDR_VAR 0 7
16112: PUSH
16113: LD_VAR 0 3
16117: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16118: LD_STRING getStreamItemsFromMission("
16120: PUSH
16121: LD_VAR 0 5
16125: STR
16126: PUSH
16127: LD_STRING ","
16129: STR
16130: PUSH
16131: LD_VAR 0 6
16135: STR
16136: PUSH
16137: LD_STRING ","
16139: STR
16140: PUSH
16141: LD_VAR 0 7
16145: STR
16146: PUSH
16147: LD_STRING ")
16149: STR
16150: PPUSH
16151: CALL_OW 559
// end else
16155: GO 16164
// ToLua ( getStreamItemsFromMission("","","") ) ;
16157: LD_STRING getStreamItemsFromMission("","","")
16159: PPUSH
16160: CALL_OW 559
// end ;
16164: LD_VAR 0 2
16168: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16169: LD_EXP 27
16173: PUSH
16174: LD_EXP 32
16178: AND
16179: IFFALSE 16303
16181: GO 16183
16183: DISABLE
16184: LD_INT 0
16186: PPUSH
16187: PPUSH
// begin enable ;
16188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16189: LD_ADDR_VAR 0 2
16193: PUSH
16194: LD_INT 22
16196: PUSH
16197: LD_OWVAR 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: LD_INT 34
16211: PUSH
16212: LD_INT 7
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 45
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 28
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 34
16241: PUSH
16242: LD_INT 47
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PPUSH
16260: CALL_OW 69
16264: ST_TO_ADDR
// if not tmp then
16265: LD_VAR 0 2
16269: NOT
16270: IFFALSE 16274
// exit ;
16272: GO 16303
// for i in tmp do
16274: LD_ADDR_VAR 0 1
16278: PUSH
16279: LD_VAR 0 2
16283: PUSH
16284: FOR_IN
16285: IFFALSE 16301
// begin SetLives ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 234
// end ;
16299: GO 16284
16301: POP
16302: POP
// end ;
16303: PPOPN 2
16305: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16306: LD_EXP 27
16310: PUSH
16311: LD_EXP 33
16315: AND
16316: IFFALSE 16400
16318: GO 16320
16320: DISABLE
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
// begin enable ;
16325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_INT 22
16333: PUSH
16334: LD_OWVAR 2
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 32
16345: PUSH
16346: LD_INT 3
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PPUSH
16357: CALL_OW 69
16361: ST_TO_ADDR
// if not tmp then
16362: LD_VAR 0 2
16366: NOT
16367: IFFALSE 16371
// exit ;
16369: GO 16400
// for i in tmp do
16371: LD_ADDR_VAR 0 1
16375: PUSH
16376: LD_VAR 0 2
16380: PUSH
16381: FOR_IN
16382: IFFALSE 16398
// begin SetLives ( i , 0 ) ;
16384: LD_VAR 0 1
16388: PPUSH
16389: LD_INT 0
16391: PPUSH
16392: CALL_OW 234
// end ;
16396: GO 16381
16398: POP
16399: POP
// end ;
16400: PPOPN 2
16402: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16403: LD_EXP 27
16407: PUSH
16408: LD_EXP 30
16412: AND
16413: IFFALSE 16506
16415: GO 16417
16417: DISABLE
16418: LD_INT 0
16420: PPUSH
// begin enable ;
16421: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_OWVAR 2
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 2
16441: PUSH
16442: LD_INT 25
16444: PUSH
16445: LD_INT 5
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 25
16454: PUSH
16455: LD_INT 9
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 25
16464: PUSH
16465: LD_INT 8
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PPUSH
16482: CALL_OW 69
16486: PUSH
16487: FOR_IN
16488: IFFALSE 16504
// begin SetClass ( i , 1 ) ;
16490: LD_VAR 0 1
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 336
// end ;
16502: GO 16487
16504: POP
16505: POP
// end ;
16506: PPOPN 1
16508: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16509: LD_EXP 27
16513: PUSH
16514: LD_EXP 31
16518: AND
16519: PUSH
16520: LD_OWVAR 65
16524: PUSH
16525: LD_INT 7
16527: LESS
16528: AND
16529: IFFALSE 16543
16531: GO 16533
16533: DISABLE
// begin enable ;
16534: ENABLE
// game_speed := 7 ;
16535: LD_ADDR_OWVAR 65
16539: PUSH
16540: LD_INT 7
16542: ST_TO_ADDR
// end ;
16543: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16544: LD_EXP 27
16548: PUSH
16549: LD_EXP 34
16553: AND
16554: IFFALSE 16756
16556: GO 16558
16558: DISABLE
16559: LD_INT 0
16561: PPUSH
16562: PPUSH
16563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16564: LD_ADDR_VAR 0 3
16568: PUSH
16569: LD_INT 81
16571: PUSH
16572: LD_OWVAR 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PPUSH
16595: CALL_OW 69
16599: ST_TO_ADDR
// if not tmp then
16600: LD_VAR 0 3
16604: NOT
16605: IFFALSE 16609
// exit ;
16607: GO 16756
// if tmp > 5 then
16609: LD_VAR 0 3
16613: PUSH
16614: LD_INT 5
16616: GREATER
16617: IFFALSE 16629
// k := 5 else
16619: LD_ADDR_VAR 0 2
16623: PUSH
16624: LD_INT 5
16626: ST_TO_ADDR
16627: GO 16639
// k := tmp ;
16629: LD_ADDR_VAR 0 2
16633: PUSH
16634: LD_VAR 0 3
16638: ST_TO_ADDR
// for i := 1 to k do
16639: LD_ADDR_VAR 0 1
16643: PUSH
16644: DOUBLE
16645: LD_INT 1
16647: DEC
16648: ST_TO_ADDR
16649: LD_VAR 0 2
16653: PUSH
16654: FOR_TO
16655: IFFALSE 16754
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16657: LD_VAR 0 3
16661: PUSH
16662: LD_VAR 0 1
16666: ARRAY
16667: PPUSH
16668: LD_VAR 0 1
16672: PUSH
16673: LD_INT 4
16675: MOD
16676: PUSH
16677: LD_INT 1
16679: PLUS
16680: PPUSH
16681: CALL_OW 259
16685: PUSH
16686: LD_INT 10
16688: LESS
16689: IFFALSE 16752
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16691: LD_VAR 0 3
16695: PUSH
16696: LD_VAR 0 1
16700: ARRAY
16701: PPUSH
16702: LD_VAR 0 1
16706: PUSH
16707: LD_INT 4
16709: MOD
16710: PUSH
16711: LD_INT 1
16713: PLUS
16714: PPUSH
16715: LD_VAR 0 3
16719: PUSH
16720: LD_VAR 0 1
16724: ARRAY
16725: PPUSH
16726: LD_VAR 0 1
16730: PUSH
16731: LD_INT 4
16733: MOD
16734: PUSH
16735: LD_INT 1
16737: PLUS
16738: PPUSH
16739: CALL_OW 259
16743: PUSH
16744: LD_INT 1
16746: PLUS
16747: PPUSH
16748: CALL_OW 237
16752: GO 16654
16754: POP
16755: POP
// end ;
16756: PPOPN 3
16758: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16759: LD_EXP 27
16763: PUSH
16764: LD_EXP 35
16768: AND
16769: IFFALSE 16789
16771: GO 16773
16773: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16774: LD_INT 4
16776: PPUSH
16777: LD_OWVAR 2
16781: PPUSH
16782: LD_INT 0
16784: PPUSH
16785: CALL_OW 324
16789: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16790: LD_EXP 27
16794: PUSH
16795: LD_EXP 64
16799: AND
16800: IFFALSE 16820
16802: GO 16804
16804: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16805: LD_INT 19
16807: PPUSH
16808: LD_OWVAR 2
16812: PPUSH
16813: LD_INT 0
16815: PPUSH
16816: CALL_OW 324
16820: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16821: LD_EXP 27
16825: PUSH
16826: LD_EXP 36
16830: AND
16831: IFFALSE 16933
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
// begin enable ;
16840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16841: LD_ADDR_VAR 0 2
16845: PUSH
16846: LD_INT 22
16848: PUSH
16849: LD_OWVAR 2
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 34
16863: PUSH
16864: LD_INT 11
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 34
16873: PUSH
16874: LD_INT 30
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PPUSH
16890: CALL_OW 69
16894: ST_TO_ADDR
// if not tmp then
16895: LD_VAR 0 2
16899: NOT
16900: IFFALSE 16904
// exit ;
16902: GO 16933
// for i in tmp do
16904: LD_ADDR_VAR 0 1
16908: PUSH
16909: LD_VAR 0 2
16913: PUSH
16914: FOR_IN
16915: IFFALSE 16931
// begin SetLives ( i , 0 ) ;
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_INT 0
16924: PPUSH
16925: CALL_OW 234
// end ;
16929: GO 16914
16931: POP
16932: POP
// end ;
16933: PPOPN 2
16935: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16936: LD_EXP 27
16940: PUSH
16941: LD_EXP 37
16945: AND
16946: IFFALSE 16966
16948: GO 16950
16950: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16951: LD_INT 32
16953: PPUSH
16954: LD_OWVAR 2
16958: PPUSH
16959: LD_INT 0
16961: PPUSH
16962: CALL_OW 324
16966: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16967: LD_EXP 27
16971: PUSH
16972: LD_EXP 38
16976: AND
16977: IFFALSE 17158
16979: GO 16981
16981: DISABLE
16982: LD_INT 0
16984: PPUSH
16985: PPUSH
16986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16987: LD_ADDR_VAR 0 2
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_OWVAR 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 33
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: ST_TO_ADDR
// if not tmp then
17023: LD_VAR 0 2
17027: NOT
17028: IFFALSE 17032
// exit ;
17030: GO 17158
// side := 0 ;
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// for i := 1 to 8 do
17040: LD_ADDR_VAR 0 1
17044: PUSH
17045: DOUBLE
17046: LD_INT 1
17048: DEC
17049: ST_TO_ADDR
17050: LD_INT 8
17052: PUSH
17053: FOR_TO
17054: IFFALSE 17102
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17056: LD_OWVAR 2
17060: PUSH
17061: LD_VAR 0 1
17065: NONEQUAL
17066: PUSH
17067: LD_OWVAR 2
17071: PPUSH
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 81
17081: PUSH
17082: LD_INT 2
17084: EQUAL
17085: AND
17086: IFFALSE 17100
// begin side := i ;
17088: LD_ADDR_VAR 0 3
17092: PUSH
17093: LD_VAR 0 1
17097: ST_TO_ADDR
// break ;
17098: GO 17102
// end ;
17100: GO 17053
17102: POP
17103: POP
// if not side then
17104: LD_VAR 0 3
17108: NOT
17109: IFFALSE 17113
// exit ;
17111: GO 17158
// for i := 1 to tmp do
17113: LD_ADDR_VAR 0 1
17117: PUSH
17118: DOUBLE
17119: LD_INT 1
17121: DEC
17122: ST_TO_ADDR
17123: LD_VAR 0 2
17127: PUSH
17128: FOR_TO
17129: IFFALSE 17156
// if Prob ( 60 ) then
17131: LD_INT 60
17133: PPUSH
17134: CALL_OW 13
17138: IFFALSE 17154
// SetSide ( i , side ) ;
17140: LD_VAR 0 1
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: CALL_OW 235
17154: GO 17128
17156: POP
17157: POP
// end ;
17158: PPOPN 3
17160: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17161: LD_EXP 27
17165: PUSH
17166: LD_EXP 40
17170: AND
17171: IFFALSE 17290
17173: GO 17175
17175: DISABLE
17176: LD_INT 0
17178: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_OWVAR 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 21
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 3
17208: PUSH
17209: LD_INT 23
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: PUSH
17233: FOR_IN
17234: IFFALSE 17288
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 257
17245: PUSH
17246: LD_INT 1
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 4
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: IN
17264: IFFALSE 17286
// SetClass ( un , rand ( 1 , 4 ) ) ;
17266: LD_VAR 0 1
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 4
17276: PPUSH
17277: CALL_OW 12
17281: PPUSH
17282: CALL_OW 336
17286: GO 17233
17288: POP
17289: POP
// end ;
17290: PPOPN 1
17292: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17293: LD_EXP 27
17297: PUSH
17298: LD_EXP 39
17302: AND
17303: IFFALSE 17382
17305: GO 17307
17307: DISABLE
17308: LD_INT 0
17310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17311: LD_ADDR_VAR 0 1
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_OWVAR 2
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 21
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PPUSH
17342: CALL_OW 69
17346: ST_TO_ADDR
// if not tmp then
17347: LD_VAR 0 1
17351: NOT
17352: IFFALSE 17356
// exit ;
17354: GO 17382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17356: LD_VAR 0 1
17360: PUSH
17361: LD_INT 1
17363: PPUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 12
17373: ARRAY
17374: PPUSH
17375: LD_INT 100
17377: PPUSH
17378: CALL_OW 234
// end ;
17382: PPOPN 1
17384: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17385: LD_EXP 27
17389: PUSH
17390: LD_EXP 41
17394: AND
17395: IFFALSE 17493
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17403: LD_ADDR_VAR 0 1
17407: PUSH
17408: LD_INT 22
17410: PUSH
17411: LD_OWVAR 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 21
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: ST_TO_ADDR
// if not tmp then
17439: LD_VAR 0 1
17443: NOT
17444: IFFALSE 17448
// exit ;
17446: GO 17493
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17448: LD_VAR 0 1
17452: PUSH
17453: LD_INT 1
17455: PPUSH
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL_OW 12
17465: ARRAY
17466: PPUSH
17467: LD_INT 1
17469: PPUSH
17470: LD_INT 4
17472: PPUSH
17473: CALL_OW 12
17477: PPUSH
17478: LD_INT 3000
17480: PPUSH
17481: LD_INT 9000
17483: PPUSH
17484: CALL_OW 12
17488: PPUSH
17489: CALL_OW 492
// end ;
17493: PPOPN 1
17495: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17496: LD_EXP 27
17500: PUSH
17501: LD_EXP 42
17505: AND
17506: IFFALSE 17526
17508: GO 17510
17510: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17511: LD_INT 1
17513: PPUSH
17514: LD_OWVAR 2
17518: PPUSH
17519: LD_INT 0
17521: PPUSH
17522: CALL_OW 324
17526: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17527: LD_EXP 27
17531: PUSH
17532: LD_EXP 43
17536: AND
17537: IFFALSE 17620
17539: GO 17541
17541: DISABLE
17542: LD_INT 0
17544: PPUSH
17545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17546: LD_ADDR_VAR 0 2
17550: PUSH
17551: LD_INT 22
17553: PUSH
17554: LD_OWVAR 2
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 21
17565: PUSH
17566: LD_INT 3
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL_OW 69
17581: ST_TO_ADDR
// if not tmp then
17582: LD_VAR 0 2
17586: NOT
17587: IFFALSE 17591
// exit ;
17589: GO 17620
// for i in tmp do
17591: LD_ADDR_VAR 0 1
17595: PUSH
17596: LD_VAR 0 2
17600: PUSH
17601: FOR_IN
17602: IFFALSE 17618
// SetBLevel ( i , 10 ) ;
17604: LD_VAR 0 1
17608: PPUSH
17609: LD_INT 10
17611: PPUSH
17612: CALL_OW 241
17616: GO 17601
17618: POP
17619: POP
// end ;
17620: PPOPN 2
17622: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17623: LD_EXP 27
17627: PUSH
17628: LD_EXP 44
17632: AND
17633: IFFALSE 17744
17635: GO 17637
17637: DISABLE
17638: LD_INT 0
17640: PPUSH
17641: PPUSH
17642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17643: LD_ADDR_VAR 0 3
17647: PUSH
17648: LD_INT 22
17650: PUSH
17651: LD_OWVAR 2
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 25
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PPUSH
17674: CALL_OW 69
17678: ST_TO_ADDR
// if not tmp then
17679: LD_VAR 0 3
17683: NOT
17684: IFFALSE 17688
// exit ;
17686: GO 17744
// un := tmp [ rand ( 1 , tmp ) ] ;
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_VAR 0 3
17697: PUSH
17698: LD_INT 1
17700: PPUSH
17701: LD_VAR 0 3
17705: PPUSH
17706: CALL_OW 12
17710: ARRAY
17711: ST_TO_ADDR
// if Crawls ( un ) then
17712: LD_VAR 0 2
17716: PPUSH
17717: CALL_OW 318
17721: IFFALSE 17732
// ComWalk ( un ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17732: LD_VAR 0 2
17736: PPUSH
17737: LD_INT 5
17739: PPUSH
17740: CALL_OW 336
// end ;
17744: PPOPN 3
17746: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17747: LD_EXP 27
17751: PUSH
17752: LD_EXP 45
17756: AND
17757: PUSH
17758: LD_OWVAR 67
17762: PUSH
17763: LD_INT 4
17765: LESS
17766: AND
17767: IFFALSE 17786
17769: GO 17771
17771: DISABLE
// begin Difficulty := Difficulty + 1 ;
17772: LD_ADDR_OWVAR 67
17776: PUSH
17777: LD_OWVAR 67
17781: PUSH
17782: LD_INT 1
17784: PLUS
17785: ST_TO_ADDR
// end ;
17786: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17787: LD_EXP 27
17791: PUSH
17792: LD_EXP 46
17796: AND
17797: IFFALSE 17900
17799: GO 17801
17801: DISABLE
17802: LD_INT 0
17804: PPUSH
// begin for i := 1 to 5 do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 5
17817: PUSH
17818: FOR_TO
17819: IFFALSE 17898
// begin uc_nation := nation_nature ;
17821: LD_ADDR_OWVAR 21
17825: PUSH
17826: LD_INT 0
17828: ST_TO_ADDR
// uc_side := 0 ;
17829: LD_ADDR_OWVAR 20
17833: PUSH
17834: LD_INT 0
17836: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17837: LD_ADDR_OWVAR 29
17841: PUSH
17842: LD_INT 12
17844: PUSH
17845: LD_INT 12
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: ST_TO_ADDR
// hc_agressivity := 20 ;
17852: LD_ADDR_OWVAR 35
17856: PUSH
17857: LD_INT 20
17859: ST_TO_ADDR
// hc_class := class_tiger ;
17860: LD_ADDR_OWVAR 28
17864: PUSH
17865: LD_INT 14
17867: ST_TO_ADDR
// hc_gallery :=  ;
17868: LD_ADDR_OWVAR 33
17872: PUSH
17873: LD_STRING 
17875: ST_TO_ADDR
// hc_name :=  ;
17876: LD_ADDR_OWVAR 26
17880: PUSH
17881: LD_STRING 
17883: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17884: CALL_OW 44
17888: PPUSH
17889: LD_INT 0
17891: PPUSH
17892: CALL_OW 51
// end ;
17896: GO 17818
17898: POP
17899: POP
// end ;
17900: PPOPN 1
17902: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17903: LD_EXP 27
17907: PUSH
17908: LD_EXP 47
17912: AND
17913: IFFALSE 17922
17915: GO 17917
17917: DISABLE
// StreamSibBomb ;
17918: CALL 17923 0 0
17922: END
// export function StreamSibBomb ; var i , x , y ; begin
17923: LD_INT 0
17925: PPUSH
17926: PPUSH
17927: PPUSH
17928: PPUSH
// result := false ;
17929: LD_ADDR_VAR 0 1
17933: PUSH
17934: LD_INT 0
17936: ST_TO_ADDR
// for i := 1 to 16 do
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: DOUBLE
17943: LD_INT 1
17945: DEC
17946: ST_TO_ADDR
17947: LD_INT 16
17949: PUSH
17950: FOR_TO
17951: IFFALSE 18150
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17953: LD_ADDR_VAR 0 3
17957: PUSH
17958: LD_INT 10
17960: PUSH
17961: LD_INT 20
17963: PUSH
17964: LD_INT 30
17966: PUSH
17967: LD_INT 40
17969: PUSH
17970: LD_INT 50
17972: PUSH
17973: LD_INT 60
17975: PUSH
17976: LD_INT 70
17978: PUSH
17979: LD_INT 80
17981: PUSH
17982: LD_INT 90
17984: PUSH
17985: LD_INT 100
17987: PUSH
17988: LD_INT 110
17990: PUSH
17991: LD_INT 120
17993: PUSH
17994: LD_INT 130
17996: PUSH
17997: LD_INT 140
17999: PUSH
18000: LD_INT 150
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 1
18022: PPUSH
18023: LD_INT 15
18025: PPUSH
18026: CALL_OW 12
18030: ARRAY
18031: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18032: LD_ADDR_VAR 0 4
18036: PUSH
18037: LD_INT 10
18039: PUSH
18040: LD_INT 20
18042: PUSH
18043: LD_INT 30
18045: PUSH
18046: LD_INT 40
18048: PUSH
18049: LD_INT 50
18051: PUSH
18052: LD_INT 60
18054: PUSH
18055: LD_INT 70
18057: PUSH
18058: LD_INT 80
18060: PUSH
18061: LD_INT 90
18063: PUSH
18064: LD_INT 100
18066: PUSH
18067: LD_INT 110
18069: PUSH
18070: LD_INT 120
18072: PUSH
18073: LD_INT 130
18075: PUSH
18076: LD_INT 140
18078: PUSH
18079: LD_INT 150
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 1
18101: PPUSH
18102: LD_INT 15
18104: PPUSH
18105: CALL_OW 12
18109: ARRAY
18110: ST_TO_ADDR
// if ValidHex ( x , y ) then
18111: LD_VAR 0 3
18115: PPUSH
18116: LD_VAR 0 4
18120: PPUSH
18121: CALL_OW 488
18125: IFFALSE 18148
// begin result := [ x , y ] ;
18127: LD_ADDR_VAR 0 1
18131: PUSH
18132: LD_VAR 0 3
18136: PUSH
18137: LD_VAR 0 4
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: ST_TO_ADDR
// break ;
18146: GO 18150
// end ; end ;
18148: GO 17950
18150: POP
18151: POP
// if result then
18152: LD_VAR 0 1
18156: IFFALSE 18216
// begin ToLua ( playSibBomb() ) ;
18158: LD_STRING playSibBomb()
18160: PPUSH
18161: CALL_OW 559
// wait ( 0 0$14 ) ;
18165: LD_INT 490
18167: PPUSH
18168: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18172: LD_VAR 0 1
18176: PUSH
18177: LD_INT 1
18179: ARRAY
18180: PPUSH
18181: LD_VAR 0 1
18185: PUSH
18186: LD_INT 2
18188: ARRAY
18189: PPUSH
18190: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18194: LD_VAR 0 1
18198: PUSH
18199: LD_INT 1
18201: ARRAY
18202: PPUSH
18203: LD_VAR 0 1
18207: PUSH
18208: LD_INT 2
18210: ARRAY
18211: PPUSH
18212: CALL_OW 429
// end ; end ;
18216: LD_VAR 0 1
18220: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18221: LD_EXP 27
18225: PUSH
18226: LD_EXP 49
18230: AND
18231: IFFALSE 18243
18233: GO 18235
18235: DISABLE
// YouLost (  ) ;
18236: LD_STRING 
18238: PPUSH
18239: CALL_OW 104
18243: END
// every 0 0$1 trigger StreamModeActive and sFog do
18244: LD_EXP 27
18248: PUSH
18249: LD_EXP 48
18253: AND
18254: IFFALSE 18268
18256: GO 18258
18258: DISABLE
// FogOff ( your_side ) ;
18259: LD_OWVAR 2
18263: PPUSH
18264: CALL_OW 344
18268: END
// every 0 0$1 trigger StreamModeActive and sSun do
18269: LD_EXP 27
18273: PUSH
18274: LD_EXP 50
18278: AND
18279: IFFALSE 18307
18281: GO 18283
18283: DISABLE
// begin solar_recharge_percent := 0 ;
18284: LD_ADDR_OWVAR 79
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18292: LD_INT 10500
18294: PPUSH
18295: CALL_OW 67
// solar_recharge_percent := 100 ;
18299: LD_ADDR_OWVAR 79
18303: PUSH
18304: LD_INT 100
18306: ST_TO_ADDR
// end ;
18307: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18308: LD_EXP 27
18312: PUSH
18313: LD_EXP 51
18317: AND
18318: IFFALSE 18557
18320: GO 18322
18322: DISABLE
18323: LD_INT 0
18325: PPUSH
18326: PPUSH
18327: PPUSH
// begin tmp := [ ] ;
18328: LD_ADDR_VAR 0 3
18332: PUSH
18333: EMPTY
18334: ST_TO_ADDR
// for i := 1 to 6 do
18335: LD_ADDR_VAR 0 1
18339: PUSH
18340: DOUBLE
18341: LD_INT 1
18343: DEC
18344: ST_TO_ADDR
18345: LD_INT 6
18347: PUSH
18348: FOR_TO
18349: IFFALSE 18454
// begin uc_nation := nation_nature ;
18351: LD_ADDR_OWVAR 21
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// uc_side := 0 ;
18359: LD_ADDR_OWVAR 20
18363: PUSH
18364: LD_INT 0
18366: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18367: LD_ADDR_OWVAR 29
18371: PUSH
18372: LD_INT 12
18374: PUSH
18375: LD_INT 12
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: ST_TO_ADDR
// hc_agressivity := 20 ;
18382: LD_ADDR_OWVAR 35
18386: PUSH
18387: LD_INT 20
18389: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18390: LD_ADDR_OWVAR 28
18394: PUSH
18395: LD_INT 17
18397: ST_TO_ADDR
// hc_gallery :=  ;
18398: LD_ADDR_OWVAR 33
18402: PUSH
18403: LD_STRING 
18405: ST_TO_ADDR
// hc_name :=  ;
18406: LD_ADDR_OWVAR 26
18410: PUSH
18411: LD_STRING 
18413: ST_TO_ADDR
// un := CreateHuman ;
18414: LD_ADDR_VAR 0 2
18418: PUSH
18419: CALL_OW 44
18423: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18424: LD_VAR 0 2
18428: PPUSH
18429: LD_INT 1
18431: PPUSH
18432: CALL_OW 51
// tmp := tmp ^ un ;
18436: LD_ADDR_VAR 0 3
18440: PUSH
18441: LD_VAR 0 3
18445: PUSH
18446: LD_VAR 0 2
18450: ADD
18451: ST_TO_ADDR
// end ;
18452: GO 18348
18454: POP
18455: POP
// repeat wait ( 0 0$1 ) ;
18456: LD_INT 35
18458: PPUSH
18459: CALL_OW 67
// for un in tmp do
18463: LD_ADDR_VAR 0 2
18467: PUSH
18468: LD_VAR 0 3
18472: PUSH
18473: FOR_IN
18474: IFFALSE 18548
// begin if IsDead ( un ) then
18476: LD_VAR 0 2
18480: PPUSH
18481: CALL_OW 301
18485: IFFALSE 18505
// begin tmp := tmp diff un ;
18487: LD_ADDR_VAR 0 3
18491: PUSH
18492: LD_VAR 0 3
18496: PUSH
18497: LD_VAR 0 2
18501: DIFF
18502: ST_TO_ADDR
// continue ;
18503: GO 18473
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18505: LD_VAR 0 2
18509: PPUSH
18510: LD_INT 3
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PPUSH
18532: LD_VAR 0 2
18536: PPUSH
18537: CALL_OW 74
18541: PPUSH
18542: CALL_OW 115
// end ;
18546: GO 18473
18548: POP
18549: POP
// until not tmp ;
18550: LD_VAR 0 3
18554: NOT
18555: IFFALSE 18456
// end ;
18557: PPOPN 3
18559: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18560: LD_EXP 27
18564: PUSH
18565: LD_EXP 52
18569: AND
18570: IFFALSE 18624
18572: GO 18574
18574: DISABLE
// begin ToLua ( displayTroll(); ) ;
18575: LD_STRING displayTroll();
18577: PPUSH
18578: CALL_OW 559
// wait ( 3 3$00 ) ;
18582: LD_INT 6300
18584: PPUSH
18585: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18589: LD_STRING hideTroll();
18591: PPUSH
18592: CALL_OW 559
// wait ( 1 1$00 ) ;
18596: LD_INT 2100
18598: PPUSH
18599: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18603: LD_STRING displayTroll();
18605: PPUSH
18606: CALL_OW 559
// wait ( 1 1$00 ) ;
18610: LD_INT 2100
18612: PPUSH
18613: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18617: LD_STRING hideTroll();
18619: PPUSH
18620: CALL_OW 559
// end ;
18624: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18625: LD_EXP 27
18629: PUSH
18630: LD_EXP 53
18634: AND
18635: IFFALSE 18698
18637: GO 18639
18639: DISABLE
18640: LD_INT 0
18642: PPUSH
// begin p := 0 ;
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_INT 0
18650: ST_TO_ADDR
// repeat game_speed := 1 ;
18651: LD_ADDR_OWVAR 65
18655: PUSH
18656: LD_INT 1
18658: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18659: LD_INT 35
18661: PPUSH
18662: CALL_OW 67
// p := p + 1 ;
18666: LD_ADDR_VAR 0 1
18670: PUSH
18671: LD_VAR 0 1
18675: PUSH
18676: LD_INT 1
18678: PLUS
18679: ST_TO_ADDR
// until p >= 60 ;
18680: LD_VAR 0 1
18684: PUSH
18685: LD_INT 60
18687: GREATEREQUAL
18688: IFFALSE 18651
// game_speed := 4 ;
18690: LD_ADDR_OWVAR 65
18694: PUSH
18695: LD_INT 4
18697: ST_TO_ADDR
// end ;
18698: PPOPN 1
18700: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18701: LD_EXP 27
18705: PUSH
18706: LD_EXP 54
18710: AND
18711: IFFALSE 18857
18713: GO 18715
18715: DISABLE
18716: LD_INT 0
18718: PPUSH
18719: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18720: LD_ADDR_VAR 0 1
18724: PUSH
18725: LD_INT 22
18727: PUSH
18728: LD_OWVAR 2
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 30
18742: PUSH
18743: LD_INT 0
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 30
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PPUSH
18769: CALL_OW 69
18773: ST_TO_ADDR
// if not depot then
18774: LD_VAR 0 1
18778: NOT
18779: IFFALSE 18783
// exit ;
18781: GO 18857
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18783: LD_ADDR_VAR 0 2
18787: PUSH
18788: LD_VAR 0 1
18792: PUSH
18793: LD_INT 1
18795: PPUSH
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 12
18805: ARRAY
18806: PPUSH
18807: CALL_OW 274
18811: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18812: LD_VAR 0 2
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: LD_INT 0
18822: PPUSH
18823: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18827: LD_VAR 0 2
18831: PPUSH
18832: LD_INT 2
18834: PPUSH
18835: LD_INT 0
18837: PPUSH
18838: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18842: LD_VAR 0 2
18846: PPUSH
18847: LD_INT 3
18849: PPUSH
18850: LD_INT 0
18852: PPUSH
18853: CALL_OW 277
// end ;
18857: PPOPN 2
18859: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18860: LD_EXP 27
18864: PUSH
18865: LD_EXP 55
18869: AND
18870: IFFALSE 18967
18872: GO 18874
18874: DISABLE
18875: LD_INT 0
18877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18878: LD_ADDR_VAR 0 1
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_OWVAR 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 3
18907: PUSH
18908: LD_INT 23
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: ST_TO_ADDR
// if not tmp then
18932: LD_VAR 0 1
18936: NOT
18937: IFFALSE 18941
// exit ;
18939: GO 18967
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 1
18948: PPUSH
18949: LD_VAR 0 1
18953: PPUSH
18954: CALL_OW 12
18958: ARRAY
18959: PPUSH
18960: LD_INT 200
18962: PPUSH
18963: CALL_OW 234
// end ;
18967: PPOPN 1
18969: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18970: LD_EXP 27
18974: PUSH
18975: LD_EXP 56
18979: AND
18980: IFFALSE 19059
18982: GO 18984
18984: DISABLE
18985: LD_INT 0
18987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18988: LD_ADDR_VAR 0 1
18992: PUSH
18993: LD_INT 22
18995: PUSH
18996: LD_OWVAR 2
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 21
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PPUSH
19019: CALL_OW 69
19023: ST_TO_ADDR
// if not tmp then
19024: LD_VAR 0 1
19028: NOT
19029: IFFALSE 19033
// exit ;
19031: GO 19059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19033: LD_VAR 0 1
19037: PUSH
19038: LD_INT 1
19040: PPUSH
19041: LD_VAR 0 1
19045: PPUSH
19046: CALL_OW 12
19050: ARRAY
19051: PPUSH
19052: LD_INT 60
19054: PPUSH
19055: CALL_OW 234
// end ;
19059: PPOPN 1
19061: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19062: LD_EXP 27
19066: PUSH
19067: LD_EXP 57
19071: AND
19072: IFFALSE 19171
19074: GO 19076
19076: DISABLE
19077: LD_INT 0
19079: PPUSH
19080: PPUSH
// begin enable ;
19081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19082: LD_ADDR_VAR 0 1
19086: PUSH
19087: LD_INT 22
19089: PUSH
19090: LD_OWVAR 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 61
19101: PUSH
19102: EMPTY
19103: LIST
19104: PUSH
19105: LD_INT 33
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: PPUSH
19120: CALL_OW 69
19124: ST_TO_ADDR
// if not tmp then
19125: LD_VAR 0 1
19129: NOT
19130: IFFALSE 19134
// exit ;
19132: GO 19171
// for i in tmp do
19134: LD_ADDR_VAR 0 2
19138: PUSH
19139: LD_VAR 0 1
19143: PUSH
19144: FOR_IN
19145: IFFALSE 19169
// if IsControledBy ( i ) then
19147: LD_VAR 0 2
19151: PPUSH
19152: CALL_OW 312
19156: IFFALSE 19167
// ComUnlink ( i ) ;
19158: LD_VAR 0 2
19162: PPUSH
19163: CALL_OW 136
19167: GO 19144
19169: POP
19170: POP
// end ;
19171: PPOPN 2
19173: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19174: LD_EXP 27
19178: PUSH
19179: LD_EXP 58
19183: AND
19184: IFFALSE 19324
19186: GO 19188
19188: DISABLE
19189: LD_INT 0
19191: PPUSH
19192: PPUSH
// begin ToLua ( displayPowell(); ) ;
19193: LD_STRING displayPowell();
19195: PPUSH
19196: CALL_OW 559
// uc_side := 0 ;
19200: LD_ADDR_OWVAR 20
19204: PUSH
19205: LD_INT 0
19207: ST_TO_ADDR
// uc_nation := 2 ;
19208: LD_ADDR_OWVAR 21
19212: PUSH
19213: LD_INT 2
19215: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19216: LD_ADDR_OWVAR 37
19220: PUSH
19221: LD_INT 14
19223: ST_TO_ADDR
// vc_engine := engine_siberite ;
19224: LD_ADDR_OWVAR 39
19228: PUSH
19229: LD_INT 3
19231: ST_TO_ADDR
// vc_control := control_apeman ;
19232: LD_ADDR_OWVAR 38
19236: PUSH
19237: LD_INT 5
19239: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19240: LD_ADDR_OWVAR 40
19244: PUSH
19245: LD_INT 29
19247: ST_TO_ADDR
// un := CreateVehicle ;
19248: LD_ADDR_VAR 0 2
19252: PUSH
19253: CALL_OW 45
19257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19258: LD_VAR 0 2
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19270: LD_INT 35
19272: PPUSH
19273: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19277: LD_VAR 0 2
19281: PPUSH
19282: LD_INT 22
19284: PUSH
19285: LD_OWVAR 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PPUSH
19294: CALL_OW 69
19298: PPUSH
19299: LD_VAR 0 2
19303: PPUSH
19304: CALL_OW 74
19308: PPUSH
19309: CALL_OW 115
// until IsDead ( un ) ;
19313: LD_VAR 0 2
19317: PPUSH
19318: CALL_OW 301
19322: IFFALSE 19270
// end ;
19324: PPOPN 2
19326: END
// every 0 0$1 trigger StreamModeActive and sStu do
19327: LD_EXP 27
19331: PUSH
19332: LD_EXP 66
19336: AND
19337: IFFALSE 19353
19339: GO 19341
19341: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19342: LD_STRING displayStucuk();
19344: PPUSH
19345: CALL_OW 559
// ResetFog ;
19349: CALL_OW 335
// end ;
19353: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19354: LD_EXP 27
19358: PUSH
19359: LD_EXP 59
19363: AND
19364: IFFALSE 19505
19366: GO 19368
19368: DISABLE
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19373: LD_ADDR_VAR 0 2
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_OWVAR 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 21
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PPUSH
19404: CALL_OW 69
19408: ST_TO_ADDR
// if not tmp then
19409: LD_VAR 0 2
19413: NOT
19414: IFFALSE 19418
// exit ;
19416: GO 19505
// un := tmp [ rand ( 1 , tmp ) ] ;
19418: LD_ADDR_VAR 0 1
19422: PUSH
19423: LD_VAR 0 2
19427: PUSH
19428: LD_INT 1
19430: PPUSH
19431: LD_VAR 0 2
19435: PPUSH
19436: CALL_OW 12
19440: ARRAY
19441: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19442: LD_VAR 0 1
19446: PPUSH
19447: LD_INT 0
19449: PPUSH
19450: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_OWVAR 3
19463: PUSH
19464: LD_VAR 0 1
19468: DIFF
19469: PPUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: CALL_OW 74
19479: PPUSH
19480: CALL_OW 115
// wait ( 0 0$20 ) ;
19484: LD_INT 700
19486: PPUSH
19487: CALL_OW 67
// SetSide ( un , your_side ) ;
19491: LD_VAR 0 1
19495: PPUSH
19496: LD_OWVAR 2
19500: PPUSH
19501: CALL_OW 235
// end ;
19505: PPOPN 2
19507: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19508: LD_EXP 27
19512: PUSH
19513: LD_EXP 60
19517: AND
19518: IFFALSE 19624
19520: GO 19522
19522: DISABLE
19523: LD_INT 0
19525: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_INT 22
19533: PUSH
19534: LD_OWVAR 2
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 30
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PPUSH
19575: CALL_OW 69
19579: ST_TO_ADDR
// if not depot then
19580: LD_VAR 0 1
19584: NOT
19585: IFFALSE 19589
// exit ;
19587: GO 19624
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19589: LD_VAR 0 1
19593: PUSH
19594: LD_INT 1
19596: ARRAY
19597: PPUSH
19598: CALL_OW 250
19602: PPUSH
19603: LD_VAR 0 1
19607: PUSH
19608: LD_INT 1
19610: ARRAY
19611: PPUSH
19612: CALL_OW 251
19616: PPUSH
19617: LD_INT 70
19619: PPUSH
19620: CALL_OW 495
// end ;
19624: PPOPN 1
19626: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19627: LD_EXP 27
19631: PUSH
19632: LD_EXP 61
19636: AND
19637: IFFALSE 19848
19639: GO 19641
19641: DISABLE
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
19646: PPUSH
19647: PPUSH
19648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19649: LD_ADDR_VAR 0 5
19653: PUSH
19654: LD_INT 22
19656: PUSH
19657: LD_OWVAR 2
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 21
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 69
19684: ST_TO_ADDR
// if not tmp then
19685: LD_VAR 0 5
19689: NOT
19690: IFFALSE 19694
// exit ;
19692: GO 19848
// for i in tmp do
19694: LD_ADDR_VAR 0 1
19698: PUSH
19699: LD_VAR 0 5
19703: PUSH
19704: FOR_IN
19705: IFFALSE 19846
// begin d := rand ( 0 , 5 ) ;
19707: LD_ADDR_VAR 0 4
19711: PUSH
19712: LD_INT 0
19714: PPUSH
19715: LD_INT 5
19717: PPUSH
19718: CALL_OW 12
19722: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19723: LD_ADDR_VAR 0 2
19727: PUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 250
19737: PPUSH
19738: LD_VAR 0 4
19742: PPUSH
19743: LD_INT 3
19745: PPUSH
19746: LD_INT 12
19748: PPUSH
19749: CALL_OW 12
19753: PPUSH
19754: CALL_OW 272
19758: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_VAR 0 1
19768: PPUSH
19769: CALL_OW 251
19773: PPUSH
19774: LD_VAR 0 4
19778: PPUSH
19779: LD_INT 3
19781: PPUSH
19782: LD_INT 12
19784: PPUSH
19785: CALL_OW 12
19789: PPUSH
19790: CALL_OW 273
19794: ST_TO_ADDR
// if ValidHex ( x , y ) then
19795: LD_VAR 0 2
19799: PPUSH
19800: LD_VAR 0 3
19804: PPUSH
19805: CALL_OW 488
19809: IFFALSE 19844
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19811: LD_VAR 0 1
19815: PPUSH
19816: LD_VAR 0 2
19820: PPUSH
19821: LD_VAR 0 3
19825: PPUSH
19826: LD_INT 3
19828: PPUSH
19829: LD_INT 6
19831: PPUSH
19832: CALL_OW 12
19836: PPUSH
19837: LD_INT 1
19839: PPUSH
19840: CALL_OW 483
// end ;
19844: GO 19704
19846: POP
19847: POP
// end ;
19848: PPOPN 5
19850: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19851: LD_EXP 27
19855: PUSH
19856: LD_EXP 62
19860: AND
19861: IFFALSE 19955
19863: GO 19865
19865: DISABLE
19866: LD_INT 0
19868: PPUSH
19869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19870: LD_ADDR_VAR 0 2
19874: PUSH
19875: LD_INT 22
19877: PUSH
19878: LD_OWVAR 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 32
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 21
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 69
19916: ST_TO_ADDR
// if not tmp then
19917: LD_VAR 0 2
19921: NOT
19922: IFFALSE 19926
// exit ;
19924: GO 19955
// for i in tmp do
19926: LD_ADDR_VAR 0 1
19930: PUSH
19931: LD_VAR 0 2
19935: PUSH
19936: FOR_IN
19937: IFFALSE 19953
// SetFuel ( i , 0 ) ;
19939: LD_VAR 0 1
19943: PPUSH
19944: LD_INT 0
19946: PPUSH
19947: CALL_OW 240
19951: GO 19936
19953: POP
19954: POP
// end ;
19955: PPOPN 2
19957: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19958: LD_EXP 27
19962: PUSH
19963: LD_EXP 63
19967: AND
19968: IFFALSE 20034
19970: GO 19972
19972: DISABLE
19973: LD_INT 0
19975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19976: LD_ADDR_VAR 0 1
19980: PUSH
19981: LD_INT 22
19983: PUSH
19984: LD_OWVAR 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 30
19995: PUSH
19996: LD_INT 29
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PPUSH
20007: CALL_OW 69
20011: ST_TO_ADDR
// if not tmp then
20012: LD_VAR 0 1
20016: NOT
20017: IFFALSE 20021
// exit ;
20019: GO 20034
// DestroyUnit ( tmp [ 1 ] ) ;
20021: LD_VAR 0 1
20025: PUSH
20026: LD_INT 1
20028: ARRAY
20029: PPUSH
20030: CALL_OW 65
// end ;
20034: PPOPN 1
20036: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20037: LD_EXP 27
20041: PUSH
20042: LD_EXP 65
20046: AND
20047: IFFALSE 20176
20049: GO 20051
20051: DISABLE
20052: LD_INT 0
20054: PPUSH
// begin uc_side := 0 ;
20055: LD_ADDR_OWVAR 20
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// uc_nation := nation_arabian ;
20063: LD_ADDR_OWVAR 21
20067: PUSH
20068: LD_INT 2
20070: ST_TO_ADDR
// hc_gallery :=  ;
20071: LD_ADDR_OWVAR 33
20075: PUSH
20076: LD_STRING 
20078: ST_TO_ADDR
// hc_name :=  ;
20079: LD_ADDR_OWVAR 26
20083: PUSH
20084: LD_STRING 
20086: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20087: LD_INT 1
20089: PPUSH
20090: LD_INT 11
20092: PPUSH
20093: LD_INT 10
20095: PPUSH
20096: CALL_OW 380
// un := CreateHuman ;
20100: LD_ADDR_VAR 0 1
20104: PUSH
20105: CALL_OW 44
20109: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20110: LD_VAR 0 1
20114: PPUSH
20115: LD_INT 1
20117: PPUSH
20118: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20122: LD_INT 35
20124: PPUSH
20125: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20129: LD_VAR 0 1
20133: PPUSH
20134: LD_INT 22
20136: PUSH
20137: LD_OWVAR 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PPUSH
20146: CALL_OW 69
20150: PPUSH
20151: LD_VAR 0 1
20155: PPUSH
20156: CALL_OW 74
20160: PPUSH
20161: CALL_OW 115
// until IsDead ( un ) ;
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 301
20174: IFFALSE 20122
// end ;
20176: PPOPN 1
20178: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20179: LD_EXP 27
20183: PUSH
20184: LD_EXP 67
20188: AND
20189: IFFALSE 20201
20191: GO 20193
20193: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20194: LD_STRING earthquake(getX(game), 0, 32)
20196: PPUSH
20197: CALL_OW 559
20201: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20202: LD_EXP 27
20206: PUSH
20207: LD_EXP 68
20211: AND
20212: IFFALSE 20303
20214: GO 20216
20216: DISABLE
20217: LD_INT 0
20219: PPUSH
// begin enable ;
20220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20221: LD_ADDR_VAR 0 1
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 21
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 33
20250: PUSH
20251: LD_INT 3
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 1
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20277: LD_VAR 0 1
20281: PUSH
20282: LD_INT 1
20284: PPUSH
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 12
20294: ARRAY
20295: PPUSH
20296: LD_INT 1
20298: PPUSH
20299: CALL_OW 234
// end ;
20303: PPOPN 1
20305: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20306: LD_EXP 27
20310: PUSH
20311: LD_EXP 69
20315: AND
20316: IFFALSE 20457
20318: GO 20320
20320: DISABLE
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_OWVAR 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 25
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: ST_TO_ADDR
// if not tmp then
20362: LD_VAR 0 3
20366: NOT
20367: IFFALSE 20371
// exit ;
20369: GO 20457
// un := tmp [ rand ( 1 , tmp ) ] ;
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: CALL_OW 12
20393: ARRAY
20394: ST_TO_ADDR
// if Crawls ( un ) then
20395: LD_VAR 0 2
20399: PPUSH
20400: CALL_OW 318
20404: IFFALSE 20415
// ComWalk ( un ) ;
20406: LD_VAR 0 2
20410: PPUSH
20411: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20415: LD_VAR 0 2
20419: PPUSH
20420: LD_INT 9
20422: PPUSH
20423: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20427: LD_INT 28
20429: PPUSH
20430: LD_OWVAR 2
20434: PPUSH
20435: LD_INT 2
20437: PPUSH
20438: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20442: LD_INT 29
20444: PPUSH
20445: LD_OWVAR 2
20449: PPUSH
20450: LD_INT 2
20452: PPUSH
20453: CALL_OW 322
// end ;
20457: PPOPN 3
20459: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20460: LD_EXP 27
20464: PUSH
20465: LD_EXP 70
20469: AND
20470: IFFALSE 20581
20472: GO 20474
20474: DISABLE
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
20479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20480: LD_ADDR_VAR 0 3
20484: PUSH
20485: LD_INT 22
20487: PUSH
20488: LD_OWVAR 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 25
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PPUSH
20511: CALL_OW 69
20515: ST_TO_ADDR
// if not tmp then
20516: LD_VAR 0 3
20520: NOT
20521: IFFALSE 20525
// exit ;
20523: GO 20581
// un := tmp [ rand ( 1 , tmp ) ] ;
20525: LD_ADDR_VAR 0 2
20529: PUSH
20530: LD_VAR 0 3
20534: PUSH
20535: LD_INT 1
20537: PPUSH
20538: LD_VAR 0 3
20542: PPUSH
20543: CALL_OW 12
20547: ARRAY
20548: ST_TO_ADDR
// if Crawls ( un ) then
20549: LD_VAR 0 2
20553: PPUSH
20554: CALL_OW 318
20558: IFFALSE 20569
// ComWalk ( un ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20569: LD_VAR 0 2
20573: PPUSH
20574: LD_INT 8
20576: PPUSH
20577: CALL_OW 336
// end ;
20581: PPOPN 3
20583: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20584: LD_EXP 27
20588: PUSH
20589: LD_EXP 71
20593: AND
20594: IFFALSE 20738
20596: GO 20598
20598: DISABLE
20599: LD_INT 0
20601: PPUSH
20602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_INT 22
20610: PUSH
20611: LD_OWVAR 2
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 21
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 34
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 34
20645: PUSH
20646: LD_INT 51
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 34
20655: PUSH
20656: LD_INT 32
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: PPUSH
20674: CALL_OW 69
20678: ST_TO_ADDR
// if not tmp then
20679: LD_VAR 0 2
20683: NOT
20684: IFFALSE 20688
// exit ;
20686: GO 20738
// for i in tmp do
20688: LD_ADDR_VAR 0 1
20692: PUSH
20693: LD_VAR 0 2
20697: PUSH
20698: FOR_IN
20699: IFFALSE 20736
// if GetCargo ( i , mat_artifact ) = 0 then
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_INT 4
20708: PPUSH
20709: CALL_OW 289
20713: PUSH
20714: LD_INT 0
20716: EQUAL
20717: IFFALSE 20734
// SetCargo ( i , mat_siberit , 100 ) ;
20719: LD_VAR 0 1
20723: PPUSH
20724: LD_INT 3
20726: PPUSH
20727: LD_INT 100
20729: PPUSH
20730: CALL_OW 290
20734: GO 20698
20736: POP
20737: POP
// end ;
20738: PPOPN 2
20740: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20741: LD_EXP 27
20745: PUSH
20746: LD_EXP 72
20750: AND
20751: IFFALSE 20934
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PPUSH
20777: CALL_OW 69
20781: ST_TO_ADDR
// if not tmp then
20782: LD_VAR 0 2
20786: NOT
20787: IFFALSE 20791
// exit ;
20789: GO 20934
// for i := 1 to 2 do
20791: LD_ADDR_VAR 0 1
20795: PUSH
20796: DOUBLE
20797: LD_INT 1
20799: DEC
20800: ST_TO_ADDR
20801: LD_INT 2
20803: PUSH
20804: FOR_TO
20805: IFFALSE 20932
// begin uc_side := your_side ;
20807: LD_ADDR_OWVAR 20
20811: PUSH
20812: LD_OWVAR 2
20816: ST_TO_ADDR
// uc_nation := nation_american ;
20817: LD_ADDR_OWVAR 21
20821: PUSH
20822: LD_INT 1
20824: ST_TO_ADDR
// vc_chassis := us_morphling ;
20825: LD_ADDR_OWVAR 37
20829: PUSH
20830: LD_INT 5
20832: ST_TO_ADDR
// vc_engine := engine_siberite ;
20833: LD_ADDR_OWVAR 39
20837: PUSH
20838: LD_INT 3
20840: ST_TO_ADDR
// vc_control := control_computer ;
20841: LD_ADDR_OWVAR 38
20845: PUSH
20846: LD_INT 3
20848: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20849: LD_ADDR_OWVAR 40
20853: PUSH
20854: LD_INT 10
20856: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20857: LD_VAR 0 2
20861: PUSH
20862: LD_INT 1
20864: ARRAY
20865: PPUSH
20866: CALL_OW 310
20870: NOT
20871: IFFALSE 20918
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20873: CALL_OW 45
20877: PPUSH
20878: LD_VAR 0 2
20882: PUSH
20883: LD_INT 1
20885: ARRAY
20886: PPUSH
20887: CALL_OW 250
20891: PPUSH
20892: LD_VAR 0 2
20896: PUSH
20897: LD_INT 1
20899: ARRAY
20900: PPUSH
20901: CALL_OW 251
20905: PPUSH
20906: LD_INT 12
20908: PPUSH
20909: LD_INT 1
20911: PPUSH
20912: CALL_OW 50
20916: GO 20930
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20918: CALL_OW 45
20922: PPUSH
20923: LD_INT 1
20925: PPUSH
20926: CALL_OW 51
// end ;
20930: GO 20804
20932: POP
20933: POP
// end ;
20934: PPOPN 2
20936: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20937: LD_EXP 27
20941: PUSH
20942: LD_EXP 73
20946: AND
20947: IFFALSE 21169
20949: GO 20951
20951: DISABLE
20952: LD_INT 0
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
20958: PPUSH
20959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20960: LD_ADDR_VAR 0 6
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_OWVAR 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 21
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: LD_INT 23
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: LIST
21008: PPUSH
21009: CALL_OW 69
21013: ST_TO_ADDR
// if not tmp then
21014: LD_VAR 0 6
21018: NOT
21019: IFFALSE 21023
// exit ;
21021: GO 21169
// s1 := rand ( 1 , 4 ) ;
21023: LD_ADDR_VAR 0 2
21027: PUSH
21028: LD_INT 1
21030: PPUSH
21031: LD_INT 4
21033: PPUSH
21034: CALL_OW 12
21038: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21039: LD_ADDR_VAR 0 4
21043: PUSH
21044: LD_VAR 0 6
21048: PUSH
21049: LD_INT 1
21051: ARRAY
21052: PPUSH
21053: LD_VAR 0 2
21057: PPUSH
21058: CALL_OW 259
21062: ST_TO_ADDR
// if s1 = 1 then
21063: LD_VAR 0 2
21067: PUSH
21068: LD_INT 1
21070: EQUAL
21071: IFFALSE 21091
// s2 := rand ( 2 , 4 ) else
21073: LD_ADDR_VAR 0 3
21077: PUSH
21078: LD_INT 2
21080: PPUSH
21081: LD_INT 4
21083: PPUSH
21084: CALL_OW 12
21088: ST_TO_ADDR
21089: GO 21099
// s2 := 1 ;
21091: LD_ADDR_VAR 0 3
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21099: LD_ADDR_VAR 0 5
21103: PUSH
21104: LD_VAR 0 6
21108: PUSH
21109: LD_INT 1
21111: ARRAY
21112: PPUSH
21113: LD_VAR 0 3
21117: PPUSH
21118: CALL_OW 259
21122: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21123: LD_VAR 0 6
21127: PUSH
21128: LD_INT 1
21130: ARRAY
21131: PPUSH
21132: LD_VAR 0 2
21136: PPUSH
21137: LD_VAR 0 5
21141: PPUSH
21142: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21146: LD_VAR 0 6
21150: PUSH
21151: LD_INT 1
21153: ARRAY
21154: PPUSH
21155: LD_VAR 0 3
21159: PPUSH
21160: LD_VAR 0 4
21164: PPUSH
21165: CALL_OW 237
// end ;
21169: PPOPN 6
21171: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21172: LD_EXP 27
21176: PUSH
21177: LD_EXP 74
21181: AND
21182: IFFALSE 21261
21184: GO 21186
21186: DISABLE
21187: LD_INT 0
21189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21190: LD_ADDR_VAR 0 1
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_OWVAR 2
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PPUSH
21221: CALL_OW 69
21225: ST_TO_ADDR
// if not tmp then
21226: LD_VAR 0 1
21230: NOT
21231: IFFALSE 21235
// exit ;
21233: GO 21261
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21235: LD_VAR 0 1
21239: PUSH
21240: LD_INT 1
21242: PPUSH
21243: LD_VAR 0 1
21247: PPUSH
21248: CALL_OW 12
21252: ARRAY
21253: PPUSH
21254: LD_INT 1
21256: PPUSH
21257: CALL_OW 234
// end ;
21261: PPOPN 1
21263: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21264: LD_EXP 27
21268: PUSH
21269: LD_EXP 75
21273: AND
21274: IFFALSE 21386
21276: GO 21278
21278: DISABLE
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21283: LD_ADDR_VAR 0 2
21287: PUSH
21288: LD_INT 22
21290: PUSH
21291: LD_OWVAR 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: LD_INT 30
21305: PUSH
21306: LD_INT 27
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 30
21315: PUSH
21316: LD_INT 26
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 30
21325: PUSH
21326: LD_INT 28
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 69
21347: ST_TO_ADDR
// if not tmp then
21348: LD_VAR 0 2
21352: NOT
21353: IFFALSE 21357
// exit ;
21355: GO 21386
// for i in tmp do
21357: LD_ADDR_VAR 0 1
21361: PUSH
21362: LD_VAR 0 2
21366: PUSH
21367: FOR_IN
21368: IFFALSE 21384
// SetLives ( i , 1 ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: LD_INT 1
21377: PPUSH
21378: CALL_OW 234
21382: GO 21367
21384: POP
21385: POP
// end ;
21386: PPOPN 2
21388: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21389: LD_EXP 27
21393: PUSH
21394: LD_EXP 76
21398: AND
21399: IFFALSE 21686
21401: GO 21403
21403: DISABLE
21404: LD_INT 0
21406: PPUSH
21407: PPUSH
21408: PPUSH
// begin i := rand ( 1 , 7 ) ;
21409: LD_ADDR_VAR 0 1
21413: PUSH
21414: LD_INT 1
21416: PPUSH
21417: LD_INT 7
21419: PPUSH
21420: CALL_OW 12
21424: ST_TO_ADDR
// case i of 1 :
21425: LD_VAR 0 1
21429: PUSH
21430: LD_INT 1
21432: DOUBLE
21433: EQUAL
21434: IFTRUE 21438
21436: GO 21448
21438: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21439: LD_STRING earthquake(getX(game), 0, 32)
21441: PPUSH
21442: CALL_OW 559
21446: GO 21686
21448: LD_INT 2
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21470
21456: POP
// begin ToLua ( displayStucuk(); ) ;
21457: LD_STRING displayStucuk();
21459: PPUSH
21460: CALL_OW 559
// ResetFog ;
21464: CALL_OW 335
// end ; 3 :
21468: GO 21686
21470: LD_INT 3
21472: DOUBLE
21473: EQUAL
21474: IFTRUE 21478
21476: GO 21582
21478: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21479: LD_ADDR_VAR 0 2
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_OWVAR 2
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 25
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PPUSH
21510: CALL_OW 69
21514: ST_TO_ADDR
// if not tmp then
21515: LD_VAR 0 2
21519: NOT
21520: IFFALSE 21524
// exit ;
21522: GO 21686
// un := tmp [ rand ( 1 , tmp ) ] ;
21524: LD_ADDR_VAR 0 3
21528: PUSH
21529: LD_VAR 0 2
21533: PUSH
21534: LD_INT 1
21536: PPUSH
21537: LD_VAR 0 2
21541: PPUSH
21542: CALL_OW 12
21546: ARRAY
21547: ST_TO_ADDR
// if Crawls ( un ) then
21548: LD_VAR 0 3
21552: PPUSH
21553: CALL_OW 318
21557: IFFALSE 21568
// ComWalk ( un ) ;
21559: LD_VAR 0 3
21563: PPUSH
21564: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21568: LD_VAR 0 3
21572: PPUSH
21573: LD_INT 8
21575: PPUSH
21576: CALL_OW 336
// end ; 4 :
21580: GO 21686
21582: LD_INT 4
21584: DOUBLE
21585: EQUAL
21586: IFTRUE 21590
21588: GO 21664
21590: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: LD_INT 22
21598: PUSH
21599: LD_OWVAR 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 30
21610: PUSH
21611: LD_INT 29
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PPUSH
21622: CALL_OW 69
21626: ST_TO_ADDR
// if not tmp then
21627: LD_VAR 0 2
21631: NOT
21632: IFFALSE 21636
// exit ;
21634: GO 21686
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21636: LD_VAR 0 2
21640: PUSH
21641: LD_INT 1
21643: ARRAY
21644: PPUSH
21645: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21649: LD_VAR 0 2
21653: PUSH
21654: LD_INT 1
21656: ARRAY
21657: PPUSH
21658: CALL_OW 65
// end ; 5 .. 7 :
21662: GO 21686
21664: LD_INT 5
21666: DOUBLE
21667: GREATEREQUAL
21668: IFFALSE 21676
21670: LD_INT 7
21672: DOUBLE
21673: LESSEQUAL
21674: IFTRUE 21678
21676: GO 21685
21678: POP
// StreamSibBomb ; end ;
21679: CALL 17923 0 0
21683: GO 21686
21685: POP
// end ;
21686: PPOPN 3
21688: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21689: LD_EXP 27
21693: PUSH
21694: LD_EXP 77
21698: AND
21699: IFFALSE 21855
21701: GO 21703
21703: DISABLE
21704: LD_INT 0
21706: PPUSH
21707: PPUSH
21708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21709: LD_ADDR_VAR 0 2
21713: PUSH
21714: LD_INT 81
21716: PUSH
21717: LD_OWVAR 2
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 21
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 21
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PPUSH
21758: CALL_OW 69
21762: ST_TO_ADDR
// if not tmp then
21763: LD_VAR 0 2
21767: NOT
21768: IFFALSE 21772
// exit ;
21770: GO 21855
// p := 0 ;
21772: LD_ADDR_VAR 0 3
21776: PUSH
21777: LD_INT 0
21779: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21780: LD_INT 35
21782: PPUSH
21783: CALL_OW 67
// p := p + 1 ;
21787: LD_ADDR_VAR 0 3
21791: PUSH
21792: LD_VAR 0 3
21796: PUSH
21797: LD_INT 1
21799: PLUS
21800: ST_TO_ADDR
// for i in tmp do
21801: LD_ADDR_VAR 0 1
21805: PUSH
21806: LD_VAR 0 2
21810: PUSH
21811: FOR_IN
21812: IFFALSE 21843
// if GetLives ( i ) < 1000 then
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 256
21823: PUSH
21824: LD_INT 1000
21826: LESS
21827: IFFALSE 21841
// SetLives ( i , 1000 ) ;
21829: LD_VAR 0 1
21833: PPUSH
21834: LD_INT 1000
21836: PPUSH
21837: CALL_OW 234
21841: GO 21811
21843: POP
21844: POP
// until p > 20 ;
21845: LD_VAR 0 3
21849: PUSH
21850: LD_INT 20
21852: GREATER
21853: IFFALSE 21780
// end ;
21855: PPOPN 3
21857: END
// every 0 0$1 trigger StreamModeActive and sTime do
21858: LD_EXP 27
21862: PUSH
21863: LD_EXP 78
21867: AND
21868: IFFALSE 21903
21870: GO 21872
21872: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21873: LD_INT 28
21875: PPUSH
21876: LD_OWVAR 2
21880: PPUSH
21881: LD_INT 2
21883: PPUSH
21884: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21888: LD_INT 30
21890: PPUSH
21891: LD_OWVAR 2
21895: PPUSH
21896: LD_INT 2
21898: PPUSH
21899: CALL_OW 322
// end ;
21903: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21904: LD_EXP 27
21908: PUSH
21909: LD_EXP 79
21913: AND
21914: IFFALSE 22035
21916: GO 21918
21918: DISABLE
21919: LD_INT 0
21921: PPUSH
21922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21923: LD_ADDR_VAR 0 2
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_OWVAR 2
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 21
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 23
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 69
21976: ST_TO_ADDR
// if not tmp then
21977: LD_VAR 0 2
21981: NOT
21982: IFFALSE 21986
// exit ;
21984: GO 22035
// for i in tmp do
21986: LD_ADDR_VAR 0 1
21990: PUSH
21991: LD_VAR 0 2
21995: PUSH
21996: FOR_IN
21997: IFFALSE 22033
// begin if Crawls ( i ) then
21999: LD_VAR 0 1
22003: PPUSH
22004: CALL_OW 318
22008: IFFALSE 22019
// ComWalk ( i ) ;
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 138
// SetClass ( i , 2 ) ;
22019: LD_VAR 0 1
22023: PPUSH
22024: LD_INT 2
22026: PPUSH
22027: CALL_OW 336
// end ;
22031: GO 21996
22033: POP
22034: POP
// end ;
22035: PPOPN 2
22037: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22038: LD_EXP 27
22042: PUSH
22043: LD_EXP 80
22047: AND
22048: IFFALSE 22336
22050: GO 22052
22052: DISABLE
22053: LD_INT 0
22055: PPUSH
22056: PPUSH
22057: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22058: LD_OWVAR 2
22062: PPUSH
22063: LD_INT 9
22065: PPUSH
22066: LD_INT 1
22068: PPUSH
22069: LD_INT 1
22071: PPUSH
22072: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22076: LD_INT 9
22078: PPUSH
22079: LD_OWVAR 2
22083: PPUSH
22084: CALL_OW 343
// uc_side := 9 ;
22088: LD_ADDR_OWVAR 20
22092: PUSH
22093: LD_INT 9
22095: ST_TO_ADDR
// uc_nation := 2 ;
22096: LD_ADDR_OWVAR 21
22100: PUSH
22101: LD_INT 2
22103: ST_TO_ADDR
// hc_name := Dark Warrior ;
22104: LD_ADDR_OWVAR 26
22108: PUSH
22109: LD_STRING Dark Warrior
22111: ST_TO_ADDR
// hc_gallery :=  ;
22112: LD_ADDR_OWVAR 33
22116: PUSH
22117: LD_STRING 
22119: ST_TO_ADDR
// hc_noskilllimit := true ;
22120: LD_ADDR_OWVAR 76
22124: PUSH
22125: LD_INT 1
22127: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22128: LD_ADDR_OWVAR 31
22132: PUSH
22133: LD_INT 30
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 30
22141: PUSH
22142: LD_INT 30
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// un := CreateHuman ;
22151: LD_ADDR_VAR 0 3
22155: PUSH
22156: CALL_OW 44
22160: ST_TO_ADDR
// hc_noskilllimit := false ;
22161: LD_ADDR_OWVAR 76
22165: PUSH
22166: LD_INT 0
22168: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22169: LD_VAR 0 3
22173: PPUSH
22174: LD_INT 1
22176: PPUSH
22177: CALL_OW 51
// ToLua ( playRanger() ) ;
22181: LD_STRING playRanger()
22183: PPUSH
22184: CALL_OW 559
// p := 0 ;
22188: LD_ADDR_VAR 0 2
22192: PUSH
22193: LD_INT 0
22195: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22196: LD_INT 35
22198: PPUSH
22199: CALL_OW 67
// p := p + 1 ;
22203: LD_ADDR_VAR 0 2
22207: PUSH
22208: LD_VAR 0 2
22212: PUSH
22213: LD_INT 1
22215: PLUS
22216: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22217: LD_VAR 0 3
22221: PPUSH
22222: CALL_OW 256
22226: PUSH
22227: LD_INT 1000
22229: LESS
22230: IFFALSE 22244
// SetLives ( un , 1000 ) ;
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 1000
22239: PPUSH
22240: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22244: LD_VAR 0 3
22248: PPUSH
22249: LD_INT 81
22251: PUSH
22252: LD_OWVAR 2
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 91
22263: PUSH
22264: LD_VAR 0 3
22268: PUSH
22269: LD_INT 30
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PPUSH
22281: CALL_OW 69
22285: PPUSH
22286: LD_VAR 0 3
22290: PPUSH
22291: CALL_OW 74
22295: PPUSH
22296: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22300: LD_VAR 0 2
22304: PUSH
22305: LD_INT 80
22307: GREATER
22308: PUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: CALL_OW 301
22318: OR
22319: IFFALSE 22196
// if un then
22321: LD_VAR 0 3
22325: IFFALSE 22336
// RemoveUnit ( un ) ;
22327: LD_VAR 0 3
22331: PPUSH
22332: CALL_OW 64
// end ;
22336: PPOPN 3
22338: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22339: LD_EXP 81
22343: IFFALSE 22459
22345: GO 22347
22347: DISABLE
22348: LD_INT 0
22350: PPUSH
22351: PPUSH
22352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_INT 81
22360: PUSH
22361: LD_OWVAR 2
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PPUSH
22384: CALL_OW 69
22388: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22389: LD_STRING playComputer()
22391: PPUSH
22392: CALL_OW 559
// if not tmp then
22396: LD_VAR 0 2
22400: NOT
22401: IFFALSE 22405
// exit ;
22403: GO 22459
// for i in tmp do
22405: LD_ADDR_VAR 0 1
22409: PUSH
22410: LD_VAR 0 2
22414: PUSH
22415: FOR_IN
22416: IFFALSE 22457
// for j := 1 to 4 do
22418: LD_ADDR_VAR 0 3
22422: PUSH
22423: DOUBLE
22424: LD_INT 1
22426: DEC
22427: ST_TO_ADDR
22428: LD_INT 4
22430: PUSH
22431: FOR_TO
22432: IFFALSE 22453
// SetSkill ( i , j , 10 ) ;
22434: LD_VAR 0 1
22438: PPUSH
22439: LD_VAR 0 3
22443: PPUSH
22444: LD_INT 10
22446: PPUSH
22447: CALL_OW 237
22451: GO 22431
22453: POP
22454: POP
22455: GO 22415
22457: POP
22458: POP
// end ;
22459: PPOPN 3
22461: END
// every 0 0$1 trigger s30 do var i , tmp ;
22462: LD_EXP 82
22466: IFFALSE 22535
22468: GO 22470
22470: DISABLE
22471: LD_INT 0
22473: PPUSH
22474: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22475: LD_ADDR_VAR 0 2
22479: PUSH
22480: LD_INT 22
22482: PUSH
22483: LD_OWVAR 2
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: ST_TO_ADDR
// if not tmp then
22497: LD_VAR 0 2
22501: NOT
22502: IFFALSE 22506
// exit ;
22504: GO 22535
// for i in tmp do
22506: LD_ADDR_VAR 0 1
22510: PUSH
22511: LD_VAR 0 2
22515: PUSH
22516: FOR_IN
22517: IFFALSE 22533
// SetLives ( i , 300 ) ;
22519: LD_VAR 0 1
22523: PPUSH
22524: LD_INT 300
22526: PPUSH
22527: CALL_OW 234
22531: GO 22516
22533: POP
22534: POP
// end ;
22535: PPOPN 2
22537: END
// every 0 0$1 trigger s60 do var i , tmp ;
22538: LD_EXP 83
22542: IFFALSE 22611
22544: GO 22546
22546: DISABLE
22547: LD_INT 0
22549: PPUSH
22550: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 22
22558: PUSH
22559: LD_OWVAR 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: ST_TO_ADDR
// if not tmp then
22573: LD_VAR 0 2
22577: NOT
22578: IFFALSE 22582
// exit ;
22580: GO 22611
// for i in tmp do
22582: LD_ADDR_VAR 0 1
22586: PUSH
22587: LD_VAR 0 2
22591: PUSH
22592: FOR_IN
22593: IFFALSE 22609
// SetLives ( i , 600 ) ;
22595: LD_VAR 0 1
22599: PPUSH
22600: LD_INT 600
22602: PPUSH
22603: CALL_OW 234
22607: GO 22592
22609: POP
22610: POP
// end ;
22611: PPOPN 2
22613: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22614: LD_INT 0
22616: PPUSH
// case cmd of 301 :
22617: LD_VAR 0 1
22621: PUSH
22622: LD_INT 301
22624: DOUBLE
22625: EQUAL
22626: IFTRUE 22630
22628: GO 22662
22630: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22631: LD_VAR 0 6
22635: PPUSH
22636: LD_VAR 0 7
22640: PPUSH
22641: LD_VAR 0 8
22645: PPUSH
22646: LD_VAR 0 4
22650: PPUSH
22651: LD_VAR 0 5
22655: PPUSH
22656: CALL 23871 0 5
22660: GO 22783
22662: LD_INT 302
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22707
22670: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22671: LD_VAR 0 6
22675: PPUSH
22676: LD_VAR 0 7
22680: PPUSH
22681: LD_VAR 0 8
22685: PPUSH
22686: LD_VAR 0 9
22690: PPUSH
22691: LD_VAR 0 4
22695: PPUSH
22696: LD_VAR 0 5
22700: PPUSH
22701: CALL 23962 0 6
22705: GO 22783
22707: LD_INT 303
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22752
22715: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22716: LD_VAR 0 6
22720: PPUSH
22721: LD_VAR 0 7
22725: PPUSH
22726: LD_VAR 0 8
22730: PPUSH
22731: LD_VAR 0 9
22735: PPUSH
22736: LD_VAR 0 4
22740: PPUSH
22741: LD_VAR 0 5
22745: PPUSH
22746: CALL 22788 0 6
22750: GO 22783
22752: LD_INT 304
22754: DOUBLE
22755: EQUAL
22756: IFTRUE 22760
22758: GO 22782
22760: POP
// hHackTeleport ( unit , x , y ) ; end ;
22761: LD_VAR 0 2
22765: PPUSH
22766: LD_VAR 0 4
22770: PPUSH
22771: LD_VAR 0 5
22775: PPUSH
22776: CALL 24555 0 3
22780: GO 22783
22782: POP
// end ;
22783: LD_VAR 0 12
22787: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22788: LD_INT 0
22790: PPUSH
22791: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22792: LD_VAR 0 1
22796: PUSH
22797: LD_INT 1
22799: LESS
22800: PUSH
22801: LD_VAR 0 1
22805: PUSH
22806: LD_INT 3
22808: GREATER
22809: OR
22810: PUSH
22811: LD_VAR 0 5
22815: PPUSH
22816: LD_VAR 0 6
22820: PPUSH
22821: CALL_OW 428
22825: OR
22826: IFFALSE 22830
// exit ;
22828: GO 23558
// uc_side := your_side ;
22830: LD_ADDR_OWVAR 20
22834: PUSH
22835: LD_OWVAR 2
22839: ST_TO_ADDR
// uc_nation := nation ;
22840: LD_ADDR_OWVAR 21
22844: PUSH
22845: LD_VAR 0 1
22849: ST_TO_ADDR
// bc_level = 1 ;
22850: LD_ADDR_OWVAR 43
22854: PUSH
22855: LD_INT 1
22857: ST_TO_ADDR
// case btype of 1 :
22858: LD_VAR 0 2
22862: PUSH
22863: LD_INT 1
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 22882
22871: POP
// bc_type := b_depot ; 2 :
22872: LD_ADDR_OWVAR 42
22876: PUSH
22877: LD_INT 0
22879: ST_TO_ADDR
22880: GO 23502
22882: LD_INT 2
22884: DOUBLE
22885: EQUAL
22886: IFTRUE 22890
22888: GO 22901
22890: POP
// bc_type := b_warehouse ; 3 :
22891: LD_ADDR_OWVAR 42
22895: PUSH
22896: LD_INT 1
22898: ST_TO_ADDR
22899: GO 23502
22901: LD_INT 3
22903: DOUBLE
22904: EQUAL
22905: IFTRUE 22909
22907: GO 22920
22909: POP
// bc_type := b_lab ; 4 .. 9 :
22910: LD_ADDR_OWVAR 42
22914: PUSH
22915: LD_INT 6
22917: ST_TO_ADDR
22918: GO 23502
22920: LD_INT 4
22922: DOUBLE
22923: GREATEREQUAL
22924: IFFALSE 22932
22926: LD_INT 9
22928: DOUBLE
22929: LESSEQUAL
22930: IFTRUE 22934
22932: GO 22994
22934: POP
// begin bc_type := b_lab_half ;
22935: LD_ADDR_OWVAR 42
22939: PUSH
22940: LD_INT 7
22942: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22943: LD_ADDR_OWVAR 44
22947: PUSH
22948: LD_INT 10
22950: PUSH
22951: LD_INT 11
22953: PUSH
22954: LD_INT 12
22956: PUSH
22957: LD_INT 15
22959: PUSH
22960: LD_INT 14
22962: PUSH
22963: LD_INT 13
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: LD_VAR 0 2
22978: PUSH
22979: LD_INT 3
22981: MINUS
22982: ARRAY
22983: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22984: LD_ADDR_OWVAR 45
22988: PUSH
22989: LD_INT 9
22991: ST_TO_ADDR
// end ; 10 .. 13 :
22992: GO 23502
22994: LD_INT 10
22996: DOUBLE
22997: GREATEREQUAL
22998: IFFALSE 23006
23000: LD_INT 13
23002: DOUBLE
23003: LESSEQUAL
23004: IFTRUE 23008
23006: GO 23085
23008: POP
// begin bc_type := b_lab_full ;
23009: LD_ADDR_OWVAR 42
23013: PUSH
23014: LD_INT 8
23016: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23017: LD_ADDR_OWVAR 44
23021: PUSH
23022: LD_INT 10
23024: PUSH
23025: LD_INT 12
23027: PUSH
23028: LD_INT 14
23030: PUSH
23031: LD_INT 13
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: PUSH
23040: LD_VAR 0 2
23044: PUSH
23045: LD_INT 9
23047: MINUS
23048: ARRAY
23049: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23050: LD_ADDR_OWVAR 45
23054: PUSH
23055: LD_INT 11
23057: PUSH
23058: LD_INT 15
23060: PUSH
23061: LD_INT 12
23063: PUSH
23064: LD_INT 15
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: PUSH
23073: LD_VAR 0 2
23077: PUSH
23078: LD_INT 9
23080: MINUS
23081: ARRAY
23082: ST_TO_ADDR
// end ; 14 :
23083: GO 23502
23085: LD_INT 14
23087: DOUBLE
23088: EQUAL
23089: IFTRUE 23093
23091: GO 23104
23093: POP
// bc_type := b_workshop ; 15 :
23094: LD_ADDR_OWVAR 42
23098: PUSH
23099: LD_INT 2
23101: ST_TO_ADDR
23102: GO 23502
23104: LD_INT 15
23106: DOUBLE
23107: EQUAL
23108: IFTRUE 23112
23110: GO 23123
23112: POP
// bc_type := b_factory ; 16 :
23113: LD_ADDR_OWVAR 42
23117: PUSH
23118: LD_INT 3
23120: ST_TO_ADDR
23121: GO 23502
23123: LD_INT 16
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23142
23131: POP
// bc_type := b_ext_gun ; 17 :
23132: LD_ADDR_OWVAR 42
23136: PUSH
23137: LD_INT 17
23139: ST_TO_ADDR
23140: GO 23502
23142: LD_INT 17
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23178
23150: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23151: LD_ADDR_OWVAR 42
23155: PUSH
23156: LD_INT 19
23158: PUSH
23159: LD_INT 23
23161: PUSH
23162: LD_INT 19
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: PUSH
23170: LD_VAR 0 1
23174: ARRAY
23175: ST_TO_ADDR
23176: GO 23502
23178: LD_INT 18
23180: DOUBLE
23181: EQUAL
23182: IFTRUE 23186
23184: GO 23197
23186: POP
// bc_type := b_ext_radar ; 19 :
23187: LD_ADDR_OWVAR 42
23191: PUSH
23192: LD_INT 20
23194: ST_TO_ADDR
23195: GO 23502
23197: LD_INT 19
23199: DOUBLE
23200: EQUAL
23201: IFTRUE 23205
23203: GO 23216
23205: POP
// bc_type := b_ext_radio ; 20 :
23206: LD_ADDR_OWVAR 42
23210: PUSH
23211: LD_INT 22
23213: ST_TO_ADDR
23214: GO 23502
23216: LD_INT 20
23218: DOUBLE
23219: EQUAL
23220: IFTRUE 23224
23222: GO 23235
23224: POP
// bc_type := b_ext_siberium ; 21 :
23225: LD_ADDR_OWVAR 42
23229: PUSH
23230: LD_INT 21
23232: ST_TO_ADDR
23233: GO 23502
23235: LD_INT 21
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23254
23243: POP
// bc_type := b_ext_computer ; 22 :
23244: LD_ADDR_OWVAR 42
23248: PUSH
23249: LD_INT 24
23251: ST_TO_ADDR
23252: GO 23502
23254: LD_INT 22
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23273
23262: POP
// bc_type := b_ext_track ; 23 :
23263: LD_ADDR_OWVAR 42
23267: PUSH
23268: LD_INT 16
23270: ST_TO_ADDR
23271: GO 23502
23273: LD_INT 23
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23292
23281: POP
// bc_type := b_ext_laser ; 24 :
23282: LD_ADDR_OWVAR 42
23286: PUSH
23287: LD_INT 25
23289: ST_TO_ADDR
23290: GO 23502
23292: LD_INT 24
23294: DOUBLE
23295: EQUAL
23296: IFTRUE 23300
23298: GO 23311
23300: POP
// bc_type := b_control_tower ; 25 :
23301: LD_ADDR_OWVAR 42
23305: PUSH
23306: LD_INT 36
23308: ST_TO_ADDR
23309: GO 23502
23311: LD_INT 25
23313: DOUBLE
23314: EQUAL
23315: IFTRUE 23319
23317: GO 23330
23319: POP
// bc_type := b_breastwork ; 26 :
23320: LD_ADDR_OWVAR 42
23324: PUSH
23325: LD_INT 31
23327: ST_TO_ADDR
23328: GO 23502
23330: LD_INT 26
23332: DOUBLE
23333: EQUAL
23334: IFTRUE 23338
23336: GO 23349
23338: POP
// bc_type := b_bunker ; 27 :
23339: LD_ADDR_OWVAR 42
23343: PUSH
23344: LD_INT 32
23346: ST_TO_ADDR
23347: GO 23502
23349: LD_INT 27
23351: DOUBLE
23352: EQUAL
23353: IFTRUE 23357
23355: GO 23368
23357: POP
// bc_type := b_turret ; 28 :
23358: LD_ADDR_OWVAR 42
23362: PUSH
23363: LD_INT 33
23365: ST_TO_ADDR
23366: GO 23502
23368: LD_INT 28
23370: DOUBLE
23371: EQUAL
23372: IFTRUE 23376
23374: GO 23387
23376: POP
// bc_type := b_armoury ; 29 :
23377: LD_ADDR_OWVAR 42
23381: PUSH
23382: LD_INT 4
23384: ST_TO_ADDR
23385: GO 23502
23387: LD_INT 29
23389: DOUBLE
23390: EQUAL
23391: IFTRUE 23395
23393: GO 23406
23395: POP
// bc_type := b_barracks ; 30 :
23396: LD_ADDR_OWVAR 42
23400: PUSH
23401: LD_INT 5
23403: ST_TO_ADDR
23404: GO 23502
23406: LD_INT 30
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23425
23414: POP
// bc_type := b_solar_power ; 31 :
23415: LD_ADDR_OWVAR 42
23419: PUSH
23420: LD_INT 27
23422: ST_TO_ADDR
23423: GO 23502
23425: LD_INT 31
23427: DOUBLE
23428: EQUAL
23429: IFTRUE 23433
23431: GO 23444
23433: POP
// bc_type := b_oil_power ; 32 :
23434: LD_ADDR_OWVAR 42
23438: PUSH
23439: LD_INT 26
23441: ST_TO_ADDR
23442: GO 23502
23444: LD_INT 32
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23463
23452: POP
// bc_type := b_siberite_power ; 33 :
23453: LD_ADDR_OWVAR 42
23457: PUSH
23458: LD_INT 28
23460: ST_TO_ADDR
23461: GO 23502
23463: LD_INT 33
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23482
23471: POP
// bc_type := b_oil_mine ; 34 :
23472: LD_ADDR_OWVAR 42
23476: PUSH
23477: LD_INT 29
23479: ST_TO_ADDR
23480: GO 23502
23482: LD_INT 34
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23501
23490: POP
// bc_type := b_siberite_mine ; end ;
23491: LD_ADDR_OWVAR 42
23495: PUSH
23496: LD_INT 30
23498: ST_TO_ADDR
23499: GO 23502
23501: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23502: LD_ADDR_VAR 0 8
23506: PUSH
23507: LD_VAR 0 5
23511: PPUSH
23512: LD_VAR 0 6
23516: PPUSH
23517: LD_VAR 0 3
23521: PPUSH
23522: CALL_OW 47
23526: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23527: LD_OWVAR 42
23531: PUSH
23532: LD_INT 32
23534: PUSH
23535: LD_INT 33
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: IN
23542: IFFALSE 23558
// PlaceWeaponTurret ( b , weapon ) ;
23544: LD_VAR 0 8
23548: PPUSH
23549: LD_VAR 0 4
23553: PPUSH
23554: CALL_OW 431
// end ;
23558: LD_VAR 0 7
23562: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23563: LD_INT 0
23565: PPUSH
23566: PPUSH
23567: PPUSH
23568: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23569: LD_ADDR_VAR 0 4
23573: PUSH
23574: LD_INT 22
23576: PUSH
23577: LD_OWVAR 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 30
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 30
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PPUSH
23618: CALL_OW 69
23622: ST_TO_ADDR
// if not tmp then
23623: LD_VAR 0 4
23627: NOT
23628: IFFALSE 23632
// exit ;
23630: GO 23691
// for i in tmp do
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_VAR 0 4
23641: PUSH
23642: FOR_IN
23643: IFFALSE 23689
// for j = 1 to 3 do
23645: LD_ADDR_VAR 0 3
23649: PUSH
23650: DOUBLE
23651: LD_INT 1
23653: DEC
23654: ST_TO_ADDR
23655: LD_INT 3
23657: PUSH
23658: FOR_TO
23659: IFFALSE 23685
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23661: LD_VAR 0 2
23665: PPUSH
23666: CALL_OW 274
23670: PPUSH
23671: LD_VAR 0 3
23675: PPUSH
23676: LD_INT 99999
23678: PPUSH
23679: CALL_OW 277
23683: GO 23658
23685: POP
23686: POP
23687: GO 23642
23689: POP
23690: POP
// end ;
23691: LD_VAR 0 1
23695: RET
// export function hHackSetLevel10 ; var i , j ; begin
23696: LD_INT 0
23698: PPUSH
23699: PPUSH
23700: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23701: LD_ADDR_VAR 0 2
23705: PUSH
23706: LD_INT 21
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PPUSH
23716: CALL_OW 69
23720: PUSH
23721: FOR_IN
23722: IFFALSE 23774
// if IsSelected ( i ) then
23724: LD_VAR 0 2
23728: PPUSH
23729: CALL_OW 306
23733: IFFALSE 23772
// begin for j := 1 to 4 do
23735: LD_ADDR_VAR 0 3
23739: PUSH
23740: DOUBLE
23741: LD_INT 1
23743: DEC
23744: ST_TO_ADDR
23745: LD_INT 4
23747: PUSH
23748: FOR_TO
23749: IFFALSE 23770
// SetSkill ( i , j , 10 ) ;
23751: LD_VAR 0 2
23755: PPUSH
23756: LD_VAR 0 3
23760: PPUSH
23761: LD_INT 10
23763: PPUSH
23764: CALL_OW 237
23768: GO 23748
23770: POP
23771: POP
// end ;
23772: GO 23721
23774: POP
23775: POP
// end ;
23776: LD_VAR 0 1
23780: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23781: LD_INT 0
23783: PPUSH
23784: PPUSH
23785: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23786: LD_ADDR_VAR 0 2
23790: PUSH
23791: LD_INT 22
23793: PUSH
23794: LD_OWVAR 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 21
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: PUSH
23822: FOR_IN
23823: IFFALSE 23864
// begin for j := 1 to 4 do
23825: LD_ADDR_VAR 0 3
23829: PUSH
23830: DOUBLE
23831: LD_INT 1
23833: DEC
23834: ST_TO_ADDR
23835: LD_INT 4
23837: PUSH
23838: FOR_TO
23839: IFFALSE 23860
// SetSkill ( i , j , 10 ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: LD_INT 10
23853: PPUSH
23854: CALL_OW 237
23858: GO 23838
23860: POP
23861: POP
// end ;
23862: GO 23822
23864: POP
23865: POP
// end ;
23866: LD_VAR 0 1
23870: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23871: LD_INT 0
23873: PPUSH
// uc_side := your_side ;
23874: LD_ADDR_OWVAR 20
23878: PUSH
23879: LD_OWVAR 2
23883: ST_TO_ADDR
// uc_nation := nation ;
23884: LD_ADDR_OWVAR 21
23888: PUSH
23889: LD_VAR 0 1
23893: ST_TO_ADDR
// InitHc ;
23894: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23898: LD_INT 0
23900: PPUSH
23901: LD_VAR 0 2
23905: PPUSH
23906: LD_VAR 0 3
23910: PPUSH
23911: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23915: LD_VAR 0 4
23919: PPUSH
23920: LD_VAR 0 5
23924: PPUSH
23925: CALL_OW 428
23929: PUSH
23930: LD_INT 0
23932: EQUAL
23933: IFFALSE 23957
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23935: CALL_OW 44
23939: PPUSH
23940: LD_VAR 0 4
23944: PPUSH
23945: LD_VAR 0 5
23949: PPUSH
23950: LD_INT 1
23952: PPUSH
23953: CALL_OW 48
// end ;
23957: LD_VAR 0 6
23961: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23962: LD_INT 0
23964: PPUSH
23965: PPUSH
// uc_side := your_side ;
23966: LD_ADDR_OWVAR 20
23970: PUSH
23971: LD_OWVAR 2
23975: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23976: LD_VAR 0 1
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 3
23989: PUSH
23990: LD_INT 4
23992: PUSH
23993: LD_INT 5
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: IN
24003: IFFALSE 24015
// uc_nation := nation_american else
24005: LD_ADDR_OWVAR 21
24009: PUSH
24010: LD_INT 1
24012: ST_TO_ADDR
24013: GO 24058
// if chassis in [ 11 , 12 , 13 , 14 ] then
24015: LD_VAR 0 1
24019: PUSH
24020: LD_INT 11
24022: PUSH
24023: LD_INT 12
24025: PUSH
24026: LD_INT 13
24028: PUSH
24029: LD_INT 14
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: IN
24038: IFFALSE 24050
// uc_nation := nation_arabian else
24040: LD_ADDR_OWVAR 21
24044: PUSH
24045: LD_INT 2
24047: ST_TO_ADDR
24048: GO 24058
// uc_nation := nation_russian ;
24050: LD_ADDR_OWVAR 21
24054: PUSH
24055: LD_INT 3
24057: ST_TO_ADDR
// vc_chassis := chassis ;
24058: LD_ADDR_OWVAR 37
24062: PUSH
24063: LD_VAR 0 1
24067: ST_TO_ADDR
// vc_engine := engine ;
24068: LD_ADDR_OWVAR 39
24072: PUSH
24073: LD_VAR 0 2
24077: ST_TO_ADDR
// vc_control := control ;
24078: LD_ADDR_OWVAR 38
24082: PUSH
24083: LD_VAR 0 3
24087: ST_TO_ADDR
// vc_weapon := weapon ;
24088: LD_ADDR_OWVAR 40
24092: PUSH
24093: LD_VAR 0 4
24097: ST_TO_ADDR
// un := CreateVehicle ;
24098: LD_ADDR_VAR 0 8
24102: PUSH
24103: CALL_OW 45
24107: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24108: LD_VAR 0 8
24112: PPUSH
24113: LD_INT 0
24115: PPUSH
24116: LD_INT 5
24118: PPUSH
24119: CALL_OW 12
24123: PPUSH
24124: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24128: LD_VAR 0 8
24132: PPUSH
24133: LD_VAR 0 5
24137: PPUSH
24138: LD_VAR 0 6
24142: PPUSH
24143: LD_INT 1
24145: PPUSH
24146: CALL_OW 48
// end ;
24150: LD_VAR 0 7
24154: RET
// export hInvincible ; every 1 do
24155: GO 24157
24157: DISABLE
// hInvincible := [ ] ;
24158: LD_ADDR_EXP 84
24162: PUSH
24163: EMPTY
24164: ST_TO_ADDR
24165: END
// every 10 do var i ;
24166: GO 24168
24168: DISABLE
24169: LD_INT 0
24171: PPUSH
// begin enable ;
24172: ENABLE
// if not hInvincible then
24173: LD_EXP 84
24177: NOT
24178: IFFALSE 24182
// exit ;
24180: GO 24226
// for i in hInvincible do
24182: LD_ADDR_VAR 0 1
24186: PUSH
24187: LD_EXP 84
24191: PUSH
24192: FOR_IN
24193: IFFALSE 24224
// if GetLives ( i ) < 1000 then
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 256
24204: PUSH
24205: LD_INT 1000
24207: LESS
24208: IFFALSE 24222
// SetLives ( i , 1000 ) ;
24210: LD_VAR 0 1
24214: PPUSH
24215: LD_INT 1000
24217: PPUSH
24218: CALL_OW 234
24222: GO 24192
24224: POP
24225: POP
// end ;
24226: PPOPN 1
24228: END
// export function hHackInvincible ; var i ; begin
24229: LD_INT 0
24231: PPUSH
24232: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24233: LD_ADDR_VAR 0 2
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 21
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 21
24253: PUSH
24254: LD_INT 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: PUSH
24271: FOR_IN
24272: IFFALSE 24333
// if IsSelected ( i ) then
24274: LD_VAR 0 2
24278: PPUSH
24279: CALL_OW 306
24283: IFFALSE 24331
// begin if i in hInvincible then
24285: LD_VAR 0 2
24289: PUSH
24290: LD_EXP 84
24294: IN
24295: IFFALSE 24315
// hInvincible := hInvincible diff i else
24297: LD_ADDR_EXP 84
24301: PUSH
24302: LD_EXP 84
24306: PUSH
24307: LD_VAR 0 2
24311: DIFF
24312: ST_TO_ADDR
24313: GO 24331
// hInvincible := hInvincible union i ;
24315: LD_ADDR_EXP 84
24319: PUSH
24320: LD_EXP 84
24324: PUSH
24325: LD_VAR 0 2
24329: UNION
24330: ST_TO_ADDR
// end ;
24331: GO 24271
24333: POP
24334: POP
// end ;
24335: LD_VAR 0 1
24339: RET
// export function hHackInvisible ; var i , j ; begin
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
24344: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_INT 21
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PPUSH
24360: CALL_OW 69
24364: PUSH
24365: FOR_IN
24366: IFFALSE 24390
// if IsSelected ( i ) then
24368: LD_VAR 0 2
24372: PPUSH
24373: CALL_OW 306
24377: IFFALSE 24388
// ComForceInvisible ( i ) ;
24379: LD_VAR 0 2
24383: PPUSH
24384: CALL_OW 496
24388: GO 24365
24390: POP
24391: POP
// end ;
24392: LD_VAR 0 1
24396: RET
// export function hHackChangeYourSide ; begin
24397: LD_INT 0
24399: PPUSH
// if your_side = 8 then
24400: LD_OWVAR 2
24404: PUSH
24405: LD_INT 8
24407: EQUAL
24408: IFFALSE 24420
// your_side := 0 else
24410: LD_ADDR_OWVAR 2
24414: PUSH
24415: LD_INT 0
24417: ST_TO_ADDR
24418: GO 24434
// your_side := your_side + 1 ;
24420: LD_ADDR_OWVAR 2
24424: PUSH
24425: LD_OWVAR 2
24429: PUSH
24430: LD_INT 1
24432: PLUS
24433: ST_TO_ADDR
// end ;
24434: LD_VAR 0 1
24438: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24439: LD_INT 0
24441: PPUSH
24442: PPUSH
24443: PPUSH
// for i in all_units do
24444: LD_ADDR_VAR 0 2
24448: PUSH
24449: LD_OWVAR 3
24453: PUSH
24454: FOR_IN
24455: IFFALSE 24533
// if IsSelected ( i ) then
24457: LD_VAR 0 2
24461: PPUSH
24462: CALL_OW 306
24466: IFFALSE 24531
// begin j := GetSide ( i ) ;
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: LD_VAR 0 2
24477: PPUSH
24478: CALL_OW 255
24482: ST_TO_ADDR
// if j = 8 then
24483: LD_VAR 0 3
24487: PUSH
24488: LD_INT 8
24490: EQUAL
24491: IFFALSE 24503
// j := 0 else
24493: LD_ADDR_VAR 0 3
24497: PUSH
24498: LD_INT 0
24500: ST_TO_ADDR
24501: GO 24517
// j := j + 1 ;
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_VAR 0 3
24512: PUSH
24513: LD_INT 1
24515: PLUS
24516: ST_TO_ADDR
// SetSide ( i , j ) ;
24517: LD_VAR 0 2
24521: PPUSH
24522: LD_VAR 0 3
24526: PPUSH
24527: CALL_OW 235
// end ;
24531: GO 24454
24533: POP
24534: POP
// end ;
24535: LD_VAR 0 1
24539: RET
// export function hHackFog ; begin
24540: LD_INT 0
24542: PPUSH
// FogOff ( true ) ;
24543: LD_INT 1
24545: PPUSH
24546: CALL_OW 344
// end ;
24550: LD_VAR 0 1
24554: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24555: LD_INT 0
24557: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: LD_VAR 0 3
24572: PPUSH
24573: LD_INT 1
24575: PPUSH
24576: LD_INT 1
24578: PPUSH
24579: CALL_OW 483
// CenterOnXY ( x , y ) ;
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 3
24592: PPUSH
24593: CALL_OW 84
// end ;
24597: LD_VAR 0 4
24601: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24602: LD_INT 0
24604: PPUSH
24605: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24606: LD_VAR 0 1
24610: NOT
24611: PUSH
24612: LD_VAR 0 2
24616: PPUSH
24617: LD_VAR 0 3
24621: PPUSH
24622: CALL_OW 488
24626: NOT
24627: OR
24628: PUSH
24629: LD_VAR 0 1
24633: PPUSH
24634: CALL_OW 266
24638: PUSH
24639: LD_INT 3
24641: NONEQUAL
24642: PUSH
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 247
24652: PUSH
24653: LD_INT 1
24655: EQUAL
24656: NOT
24657: AND
24658: OR
24659: IFFALSE 24663
// exit ;
24661: GO 24812
// if GetType ( factory ) = unit_human then
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 247
24672: PUSH
24673: LD_INT 1
24675: EQUAL
24676: IFFALSE 24693
// factory := IsInUnit ( factory ) ;
24678: LD_ADDR_VAR 0 1
24682: PUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 310
24692: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 266
24702: PUSH
24703: LD_INT 3
24705: NONEQUAL
24706: IFFALSE 24710
// exit ;
24708: GO 24812
// if HexInfo ( x , y ) = factory then
24710: LD_VAR 0 2
24714: PPUSH
24715: LD_VAR 0 3
24719: PPUSH
24720: CALL_OW 428
24724: PUSH
24725: LD_VAR 0 1
24729: EQUAL
24730: IFFALSE 24757
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24732: LD_ADDR_EXP 85
24736: PUSH
24737: LD_EXP 85
24741: PPUSH
24742: LD_VAR 0 1
24746: PPUSH
24747: LD_INT 0
24749: PPUSH
24750: CALL_OW 1
24754: ST_TO_ADDR
24755: GO 24808
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24757: LD_ADDR_EXP 85
24761: PUSH
24762: LD_EXP 85
24766: PPUSH
24767: LD_VAR 0 1
24771: PPUSH
24772: LD_VAR 0 1
24776: PPUSH
24777: CALL_OW 255
24781: PUSH
24782: LD_VAR 0 1
24786: PUSH
24787: LD_VAR 0 2
24791: PUSH
24792: LD_VAR 0 3
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: PPUSH
24803: CALL_OW 1
24807: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24808: CALL 24817 0 0
// end ;
24812: LD_VAR 0 4
24816: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24817: LD_INT 0
24819: PPUSH
24820: PPUSH
24821: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24822: LD_STRING resetFactoryWaypoint();
24824: PPUSH
24825: CALL_OW 559
// if factoryWaypoints then
24829: LD_EXP 85
24833: IFFALSE 24959
// begin list := PrepareArray ( factoryWaypoints ) ;
24835: LD_ADDR_VAR 0 3
24839: PUSH
24840: LD_EXP 85
24844: PPUSH
24845: CALL 72256 0 1
24849: ST_TO_ADDR
// for i := 1 to list do
24850: LD_ADDR_VAR 0 2
24854: PUSH
24855: DOUBLE
24856: LD_INT 1
24858: DEC
24859: ST_TO_ADDR
24860: LD_VAR 0 3
24864: PUSH
24865: FOR_TO
24866: IFFALSE 24957
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24868: LD_STRING setFactoryWaypointXY(
24870: PUSH
24871: LD_VAR 0 3
24875: PUSH
24876: LD_VAR 0 2
24880: ARRAY
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: STR
24886: PUSH
24887: LD_STRING ,
24889: STR
24890: PUSH
24891: LD_VAR 0 3
24895: PUSH
24896: LD_VAR 0 2
24900: ARRAY
24901: PUSH
24902: LD_INT 2
24904: ARRAY
24905: STR
24906: PUSH
24907: LD_STRING ,
24909: STR
24910: PUSH
24911: LD_VAR 0 3
24915: PUSH
24916: LD_VAR 0 2
24920: ARRAY
24921: PUSH
24922: LD_INT 3
24924: ARRAY
24925: STR
24926: PUSH
24927: LD_STRING ,
24929: STR
24930: PUSH
24931: LD_VAR 0 3
24935: PUSH
24936: LD_VAR 0 2
24940: ARRAY
24941: PUSH
24942: LD_INT 4
24944: ARRAY
24945: STR
24946: PUSH
24947: LD_STRING )
24949: STR
24950: PPUSH
24951: CALL_OW 559
24955: GO 24865
24957: POP
24958: POP
// end ; end ;
24959: LD_VAR 0 1
24963: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24964: LD_INT 0
24966: PPUSH
// if HexInfo ( x , y ) = warehouse then
24967: LD_VAR 0 2
24971: PPUSH
24972: LD_VAR 0 3
24976: PPUSH
24977: CALL_OW 428
24981: PUSH
24982: LD_VAR 0 1
24986: EQUAL
24987: IFFALSE 25014
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24989: LD_ADDR_EXP 86
24993: PUSH
24994: LD_EXP 86
24998: PPUSH
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_INT 0
25006: PPUSH
25007: CALL_OW 1
25011: ST_TO_ADDR
25012: GO 25065
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25014: LD_ADDR_EXP 86
25018: PUSH
25019: LD_EXP 86
25023: PPUSH
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_VAR 0 1
25033: PPUSH
25034: CALL_OW 255
25038: PUSH
25039: LD_VAR 0 1
25043: PUSH
25044: LD_VAR 0 2
25048: PUSH
25049: LD_VAR 0 3
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: PPUSH
25060: CALL_OW 1
25064: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25065: CALL 25074 0 0
// end ;
25069: LD_VAR 0 4
25073: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25074: LD_INT 0
25076: PPUSH
25077: PPUSH
25078: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25079: LD_STRING resetWarehouseGatheringPoints();
25081: PPUSH
25082: CALL_OW 559
// if warehouseGatheringPoints then
25086: LD_EXP 86
25090: IFFALSE 25216
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_EXP 86
25101: PPUSH
25102: CALL 72256 0 1
25106: ST_TO_ADDR
// for i := 1 to list do
25107: LD_ADDR_VAR 0 2
25111: PUSH
25112: DOUBLE
25113: LD_INT 1
25115: DEC
25116: ST_TO_ADDR
25117: LD_VAR 0 3
25121: PUSH
25122: FOR_TO
25123: IFFALSE 25214
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25125: LD_STRING setWarehouseGatheringPointXY(
25127: PUSH
25128: LD_VAR 0 3
25132: PUSH
25133: LD_VAR 0 2
25137: ARRAY
25138: PUSH
25139: LD_INT 1
25141: ARRAY
25142: STR
25143: PUSH
25144: LD_STRING ,
25146: STR
25147: PUSH
25148: LD_VAR 0 3
25152: PUSH
25153: LD_VAR 0 2
25157: ARRAY
25158: PUSH
25159: LD_INT 2
25161: ARRAY
25162: STR
25163: PUSH
25164: LD_STRING ,
25166: STR
25167: PUSH
25168: LD_VAR 0 3
25172: PUSH
25173: LD_VAR 0 2
25177: ARRAY
25178: PUSH
25179: LD_INT 3
25181: ARRAY
25182: STR
25183: PUSH
25184: LD_STRING ,
25186: STR
25187: PUSH
25188: LD_VAR 0 3
25192: PUSH
25193: LD_VAR 0 2
25197: ARRAY
25198: PUSH
25199: LD_INT 4
25201: ARRAY
25202: STR
25203: PUSH
25204: LD_STRING )
25206: STR
25207: PPUSH
25208: CALL_OW 559
25212: GO 25122
25214: POP
25215: POP
// end ; end ;
25216: LD_VAR 0 1
25220: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25221: LD_EXP 86
25225: IFFALSE 25910
25227: GO 25229
25229: DISABLE
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
// begin enable ;
25241: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25242: LD_ADDR_VAR 0 3
25246: PUSH
25247: LD_EXP 86
25251: PPUSH
25252: CALL 72256 0 1
25256: ST_TO_ADDR
// if not list then
25257: LD_VAR 0 3
25261: NOT
25262: IFFALSE 25266
// exit ;
25264: GO 25910
// for i := 1 to list do
25266: LD_ADDR_VAR 0 1
25270: PUSH
25271: DOUBLE
25272: LD_INT 1
25274: DEC
25275: ST_TO_ADDR
25276: LD_VAR 0 3
25280: PUSH
25281: FOR_TO
25282: IFFALSE 25908
// begin depot := list [ i ] [ 2 ] ;
25284: LD_ADDR_VAR 0 8
25288: PUSH
25289: LD_VAR 0 3
25293: PUSH
25294: LD_VAR 0 1
25298: ARRAY
25299: PUSH
25300: LD_INT 2
25302: ARRAY
25303: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25304: LD_ADDR_VAR 0 5
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: LD_VAR 0 1
25318: ARRAY
25319: PUSH
25320: LD_INT 1
25322: ARRAY
25323: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25324: LD_VAR 0 8
25328: PPUSH
25329: CALL_OW 301
25333: PUSH
25334: LD_VAR 0 5
25338: PUSH
25339: LD_VAR 0 8
25343: PPUSH
25344: CALL_OW 255
25348: NONEQUAL
25349: OR
25350: IFFALSE 25379
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25352: LD_ADDR_EXP 86
25356: PUSH
25357: LD_EXP 86
25361: PPUSH
25362: LD_VAR 0 8
25366: PPUSH
25367: LD_INT 0
25369: PPUSH
25370: CALL_OW 1
25374: ST_TO_ADDR
// exit ;
25375: POP
25376: POP
25377: GO 25910
// end ; x := list [ i ] [ 3 ] ;
25379: LD_ADDR_VAR 0 6
25383: PUSH
25384: LD_VAR 0 3
25388: PUSH
25389: LD_VAR 0 1
25393: ARRAY
25394: PUSH
25395: LD_INT 3
25397: ARRAY
25398: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25399: LD_ADDR_VAR 0 7
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: LD_VAR 0 1
25413: ARRAY
25414: PUSH
25415: LD_INT 4
25417: ARRAY
25418: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25419: LD_ADDR_VAR 0 9
25423: PUSH
25424: LD_VAR 0 6
25428: PPUSH
25429: LD_VAR 0 7
25433: PPUSH
25434: LD_INT 16
25436: PPUSH
25437: CALL 70844 0 3
25441: ST_TO_ADDR
// if not cratesNearbyPoint then
25442: LD_VAR 0 9
25446: NOT
25447: IFFALSE 25453
// exit ;
25449: POP
25450: POP
25451: GO 25910
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25453: LD_ADDR_VAR 0 4
25457: PUSH
25458: LD_INT 22
25460: PUSH
25461: LD_VAR 0 5
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 3
25472: PUSH
25473: LD_INT 60
25475: PUSH
25476: EMPTY
25477: LIST
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 91
25485: PUSH
25486: LD_VAR 0 8
25490: PUSH
25491: LD_INT 6
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 25
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 25
25514: PUSH
25515: LD_INT 16
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 69
25537: PUSH
25538: LD_VAR 0 8
25542: PPUSH
25543: CALL_OW 313
25547: PPUSH
25548: LD_INT 3
25550: PUSH
25551: LD_INT 60
25553: PUSH
25554: EMPTY
25555: LIST
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 25
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 25
25576: PUSH
25577: LD_INT 16
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PPUSH
25593: CALL_OW 72
25597: UNION
25598: ST_TO_ADDR
// if tmp then
25599: LD_VAR 0 4
25603: IFFALSE 25683
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25605: LD_ADDR_VAR 0 4
25609: PUSH
25610: LD_VAR 0 4
25614: PPUSH
25615: LD_INT 3
25617: PPUSH
25618: CALL 68813 0 2
25622: ST_TO_ADDR
// for j in tmp do
25623: LD_ADDR_VAR 0 2
25627: PUSH
25628: LD_VAR 0 4
25632: PUSH
25633: FOR_IN
25634: IFFALSE 25677
// begin if IsInUnit ( j ) then
25636: LD_VAR 0 2
25640: PPUSH
25641: CALL_OW 310
25645: IFFALSE 25656
// ComExit ( j ) ;
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL 68896 0 1
// AddComCollect ( j , x , y ) ;
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_VAR 0 6
25665: PPUSH
25666: LD_VAR 0 7
25670: PPUSH
25671: CALL_OW 177
// end ;
25675: GO 25633
25677: POP
25678: POP
// exit ;
25679: POP
25680: POP
25681: GO 25910
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25683: LD_ADDR_VAR 0 4
25687: PUSH
25688: LD_INT 22
25690: PUSH
25691: LD_VAR 0 5
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 91
25702: PUSH
25703: LD_VAR 0 8
25707: PUSH
25708: LD_INT 8
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 34
25721: PUSH
25722: LD_INT 12
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 34
25731: PUSH
25732: LD_INT 51
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 34
25741: PUSH
25742: LD_INT 32
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 34
25751: PUSH
25752: LD_INT 89
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: LIST
25770: PPUSH
25771: CALL_OW 69
25775: ST_TO_ADDR
// if tmp then
25776: LD_VAR 0 4
25780: IFFALSE 25906
// begin for j in tmp do
25782: LD_ADDR_VAR 0 2
25786: PUSH
25787: LD_VAR 0 4
25791: PUSH
25792: FOR_IN
25793: IFFALSE 25904
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25795: LD_VAR 0 2
25799: PPUSH
25800: CALL_OW 262
25804: PUSH
25805: LD_INT 3
25807: EQUAL
25808: PUSH
25809: LD_VAR 0 2
25813: PPUSH
25814: CALL_OW 261
25818: PUSH
25819: LD_INT 20
25821: GREATER
25822: OR
25823: PUSH
25824: LD_VAR 0 2
25828: PPUSH
25829: CALL_OW 314
25833: NOT
25834: AND
25835: PUSH
25836: LD_VAR 0 2
25840: PPUSH
25841: CALL_OW 263
25845: PUSH
25846: LD_INT 1
25848: NONEQUAL
25849: PUSH
25850: LD_VAR 0 2
25854: PPUSH
25855: CALL_OW 311
25859: OR
25860: AND
25861: IFFALSE 25902
// begin ComCollect ( j , x , y ) ;
25863: LD_VAR 0 2
25867: PPUSH
25868: LD_VAR 0 6
25872: PPUSH
25873: LD_VAR 0 7
25877: PPUSH
25878: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25882: LD_VAR 0 2
25886: PPUSH
25887: LD_VAR 0 8
25891: PPUSH
25892: CALL_OW 172
// exit ;
25896: POP
25897: POP
25898: POP
25899: POP
25900: GO 25910
// end ;
25902: GO 25792
25904: POP
25905: POP
// end ; end ;
25906: GO 25281
25908: POP
25909: POP
// end ; end_of_file end_of_file
25910: PPOPN 9
25912: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25913: LD_INT 0
25915: PPUSH
25916: PPUSH
25917: PPUSH
25918: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25919: LD_VAR 0 1
25923: PPUSH
25924: CALL_OW 264
25928: PUSH
25929: LD_INT 91
25931: EQUAL
25932: IFFALSE 26004
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25934: LD_INT 68
25936: PPUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 255
25946: PPUSH
25947: CALL_OW 321
25951: PUSH
25952: LD_INT 2
25954: EQUAL
25955: IFFALSE 25967
// eff := 70 else
25957: LD_ADDR_VAR 0 4
25961: PUSH
25962: LD_INT 70
25964: ST_TO_ADDR
25965: GO 25975
// eff := 30 ;
25967: LD_ADDR_VAR 0 4
25971: PUSH
25972: LD_INT 30
25974: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25975: LD_VAR 0 1
25979: PPUSH
25980: CALL_OW 250
25984: PPUSH
25985: LD_VAR 0 1
25989: PPUSH
25990: CALL_OW 251
25994: PPUSH
25995: LD_VAR 0 4
25999: PPUSH
26000: CALL_OW 495
// end ; end ;
26004: LD_VAR 0 2
26008: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26009: LD_INT 0
26011: PPUSH
// end ;
26012: LD_VAR 0 4
26016: RET
// export function SOS_Command ( cmd ) ; begin
26017: LD_INT 0
26019: PPUSH
// end ;
26020: LD_VAR 0 2
26024: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26025: LD_INT 0
26027: PPUSH
// end ;
26028: LD_VAR 0 6
26032: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26033: LD_INT 0
26035: PPUSH
26036: PPUSH
// if not vehicle or not factory then
26037: LD_VAR 0 1
26041: NOT
26042: PUSH
26043: LD_VAR 0 2
26047: NOT
26048: OR
26049: IFFALSE 26053
// exit ;
26051: GO 26284
// if factoryWaypoints >= factory then
26053: LD_EXP 85
26057: PUSH
26058: LD_VAR 0 2
26062: GREATEREQUAL
26063: IFFALSE 26284
// if factoryWaypoints [ factory ] then
26065: LD_EXP 85
26069: PUSH
26070: LD_VAR 0 2
26074: ARRAY
26075: IFFALSE 26284
// begin if GetControl ( vehicle ) = control_manual then
26077: LD_VAR 0 1
26081: PPUSH
26082: CALL_OW 263
26086: PUSH
26087: LD_INT 1
26089: EQUAL
26090: IFFALSE 26171
// begin driver := IsDrivenBy ( vehicle ) ;
26092: LD_ADDR_VAR 0 4
26096: PUSH
26097: LD_VAR 0 1
26101: PPUSH
26102: CALL_OW 311
26106: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26107: LD_VAR 0 4
26111: PPUSH
26112: LD_EXP 85
26116: PUSH
26117: LD_VAR 0 2
26121: ARRAY
26122: PUSH
26123: LD_INT 3
26125: ARRAY
26126: PPUSH
26127: LD_EXP 85
26131: PUSH
26132: LD_VAR 0 2
26136: ARRAY
26137: PUSH
26138: LD_INT 4
26140: ARRAY
26141: PPUSH
26142: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26146: LD_VAR 0 4
26150: PPUSH
26151: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26155: LD_VAR 0 4
26159: PPUSH
26160: LD_VAR 0 2
26164: PPUSH
26165: CALL_OW 180
// end else
26169: GO 26284
// if GetControl ( vehicle ) = control_remote then
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 263
26180: PUSH
26181: LD_INT 2
26183: EQUAL
26184: IFFALSE 26245
// begin wait ( 0 0$2 ) ;
26186: LD_INT 70
26188: PPUSH
26189: CALL_OW 67
// if Connect ( vehicle ) then
26193: LD_VAR 0 1
26197: PPUSH
26198: CALL 39115 0 1
26202: IFFALSE 26243
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26204: LD_VAR 0 1
26208: PPUSH
26209: LD_EXP 85
26213: PUSH
26214: LD_VAR 0 2
26218: ARRAY
26219: PUSH
26220: LD_INT 3
26222: ARRAY
26223: PPUSH
26224: LD_EXP 85
26228: PUSH
26229: LD_VAR 0 2
26233: ARRAY
26234: PUSH
26235: LD_INT 4
26237: ARRAY
26238: PPUSH
26239: CALL_OW 171
// end else
26243: GO 26284
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26245: LD_VAR 0 1
26249: PPUSH
26250: LD_EXP 85
26254: PUSH
26255: LD_VAR 0 2
26259: ARRAY
26260: PUSH
26261: LD_INT 3
26263: ARRAY
26264: PPUSH
26265: LD_EXP 85
26269: PUSH
26270: LD_VAR 0 2
26274: ARRAY
26275: PUSH
26276: LD_INT 4
26278: ARRAY
26279: PPUSH
26280: CALL_OW 171
// end ; end ;
26284: LD_VAR 0 3
26288: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26289: LD_INT 0
26291: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26292: LD_VAR 0 1
26296: PUSH
26297: LD_INT 250
26299: EQUAL
26300: PUSH
26301: LD_VAR 0 2
26305: PPUSH
26306: CALL_OW 264
26310: PUSH
26311: LD_INT 81
26313: EQUAL
26314: AND
26315: IFFALSE 26336
// MinerPlaceMine ( unit , x , y ) ;
26317: LD_VAR 0 2
26321: PPUSH
26322: LD_VAR 0 4
26326: PPUSH
26327: LD_VAR 0 5
26331: PPUSH
26332: CALL 29326 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26336: LD_VAR 0 1
26340: PUSH
26341: LD_INT 251
26343: EQUAL
26344: PUSH
26345: LD_VAR 0 2
26349: PPUSH
26350: CALL_OW 264
26354: PUSH
26355: LD_INT 81
26357: EQUAL
26358: AND
26359: IFFALSE 26380
// MinerDetonateMine ( unit , x , y ) ;
26361: LD_VAR 0 2
26365: PPUSH
26366: LD_VAR 0 4
26370: PPUSH
26371: LD_VAR 0 5
26375: PPUSH
26376: CALL 29601 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26380: LD_VAR 0 1
26384: PUSH
26385: LD_INT 252
26387: EQUAL
26388: PUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: CALL_OW 264
26398: PUSH
26399: LD_INT 81
26401: EQUAL
26402: AND
26403: IFFALSE 26424
// MinerCreateMinefield ( unit , x , y ) ;
26405: LD_VAR 0 2
26409: PPUSH
26410: LD_VAR 0 4
26414: PPUSH
26415: LD_VAR 0 5
26419: PPUSH
26420: CALL 30018 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26424: LD_VAR 0 1
26428: PUSH
26429: LD_INT 253
26431: EQUAL
26432: PUSH
26433: LD_VAR 0 2
26437: PPUSH
26438: CALL_OW 257
26442: PUSH
26443: LD_INT 5
26445: EQUAL
26446: AND
26447: IFFALSE 26468
// ComBinocular ( unit , x , y ) ;
26449: LD_VAR 0 2
26453: PPUSH
26454: LD_VAR 0 4
26458: PPUSH
26459: LD_VAR 0 5
26463: PPUSH
26464: CALL 30387 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26468: LD_VAR 0 1
26472: PUSH
26473: LD_INT 254
26475: EQUAL
26476: PUSH
26477: LD_VAR 0 2
26481: PPUSH
26482: CALL_OW 264
26486: PUSH
26487: LD_INT 99
26489: EQUAL
26490: AND
26491: PUSH
26492: LD_VAR 0 3
26496: PPUSH
26497: CALL_OW 263
26501: PUSH
26502: LD_INT 3
26504: EQUAL
26505: AND
26506: IFFALSE 26522
// HackDestroyVehicle ( unit , selectedUnit ) ;
26508: LD_VAR 0 2
26512: PPUSH
26513: LD_VAR 0 3
26517: PPUSH
26518: CALL 28690 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26522: LD_VAR 0 1
26526: PUSH
26527: LD_INT 255
26529: EQUAL
26530: PUSH
26531: LD_VAR 0 2
26535: PPUSH
26536: CALL_OW 264
26540: PUSH
26541: LD_INT 14
26543: PUSH
26544: LD_INT 53
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: IN
26551: AND
26552: PUSH
26553: LD_VAR 0 4
26557: PPUSH
26558: LD_VAR 0 5
26562: PPUSH
26563: CALL_OW 488
26567: AND
26568: IFFALSE 26592
// CutTreeXYR ( unit , x , y , 12 ) ;
26570: LD_VAR 0 2
26574: PPUSH
26575: LD_VAR 0 4
26579: PPUSH
26580: LD_VAR 0 5
26584: PPUSH
26585: LD_INT 12
26587: PPUSH
26588: CALL 26687 0 4
// if cmd = 256 then
26592: LD_VAR 0 1
26596: PUSH
26597: LD_INT 256
26599: EQUAL
26600: IFFALSE 26621
// SetFactoryWaypoint ( unit , x , y ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_VAR 0 4
26611: PPUSH
26612: LD_VAR 0 5
26616: PPUSH
26617: CALL 24602 0 3
// if cmd = 257 then
26621: LD_VAR 0 1
26625: PUSH
26626: LD_INT 257
26628: EQUAL
26629: IFFALSE 26650
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 4
26640: PPUSH
26641: LD_VAR 0 5
26645: PPUSH
26646: CALL 24964 0 3
// if cmd = 258 then
26650: LD_VAR 0 1
26654: PUSH
26655: LD_INT 258
26657: EQUAL
26658: IFFALSE 26682
// BurnTreeXYR ( unit , x , y , 8 ) ;
26660: LD_VAR 0 2
26664: PPUSH
26665: LD_VAR 0 4
26669: PPUSH
26670: LD_VAR 0 5
26674: PPUSH
26675: LD_INT 8
26677: PPUSH
26678: CALL 27081 0 4
// end ;
26682: LD_VAR 0 6
26686: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26687: LD_INT 0
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 302
26707: NOT
26708: PUSH
26709: LD_VAR 0 2
26713: PPUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: CALL_OW 488
26723: NOT
26724: OR
26725: PUSH
26726: LD_VAR 0 4
26730: NOT
26731: OR
26732: IFFALSE 26736
// exit ;
26734: GO 27076
// list := [ ] ;
26736: LD_ADDR_VAR 0 13
26740: PUSH
26741: EMPTY
26742: ST_TO_ADDR
// if x - r < 0 then
26743: LD_VAR 0 2
26747: PUSH
26748: LD_VAR 0 4
26752: MINUS
26753: PUSH
26754: LD_INT 0
26756: LESS
26757: IFFALSE 26769
// min_x := 0 else
26759: LD_ADDR_VAR 0 7
26763: PUSH
26764: LD_INT 0
26766: ST_TO_ADDR
26767: GO 26785
// min_x := x - r ;
26769: LD_ADDR_VAR 0 7
26773: PUSH
26774: LD_VAR 0 2
26778: PUSH
26779: LD_VAR 0 4
26783: MINUS
26784: ST_TO_ADDR
// if y - r < 0 then
26785: LD_VAR 0 3
26789: PUSH
26790: LD_VAR 0 4
26794: MINUS
26795: PUSH
26796: LD_INT 0
26798: LESS
26799: IFFALSE 26811
// min_y := 0 else
26801: LD_ADDR_VAR 0 8
26805: PUSH
26806: LD_INT 0
26808: ST_TO_ADDR
26809: GO 26827
// min_y := y - r ;
26811: LD_ADDR_VAR 0 8
26815: PUSH
26816: LD_VAR 0 3
26820: PUSH
26821: LD_VAR 0 4
26825: MINUS
26826: ST_TO_ADDR
// max_x := x + r ;
26827: LD_ADDR_VAR 0 9
26831: PUSH
26832: LD_VAR 0 2
26836: PUSH
26837: LD_VAR 0 4
26841: PLUS
26842: ST_TO_ADDR
// max_y := y + r ;
26843: LD_ADDR_VAR 0 10
26847: PUSH
26848: LD_VAR 0 3
26852: PUSH
26853: LD_VAR 0 4
26857: PLUS
26858: ST_TO_ADDR
// for _x = min_x to max_x do
26859: LD_ADDR_VAR 0 11
26863: PUSH
26864: DOUBLE
26865: LD_VAR 0 7
26869: DEC
26870: ST_TO_ADDR
26871: LD_VAR 0 9
26875: PUSH
26876: FOR_TO
26877: IFFALSE 26994
// for _y = min_y to max_y do
26879: LD_ADDR_VAR 0 12
26883: PUSH
26884: DOUBLE
26885: LD_VAR 0 8
26889: DEC
26890: ST_TO_ADDR
26891: LD_VAR 0 10
26895: PUSH
26896: FOR_TO
26897: IFFALSE 26990
// begin if not ValidHex ( _x , _y ) then
26899: LD_VAR 0 11
26903: PPUSH
26904: LD_VAR 0 12
26908: PPUSH
26909: CALL_OW 488
26913: NOT
26914: IFFALSE 26918
// continue ;
26916: GO 26896
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26918: LD_VAR 0 11
26922: PPUSH
26923: LD_VAR 0 12
26927: PPUSH
26928: CALL_OW 351
26932: PUSH
26933: LD_VAR 0 11
26937: PPUSH
26938: LD_VAR 0 12
26942: PPUSH
26943: CALL_OW 554
26947: AND
26948: IFFALSE 26988
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26950: LD_ADDR_VAR 0 13
26954: PUSH
26955: LD_VAR 0 13
26959: PPUSH
26960: LD_VAR 0 13
26964: PUSH
26965: LD_INT 1
26967: PLUS
26968: PPUSH
26969: LD_VAR 0 11
26973: PUSH
26974: LD_VAR 0 12
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PPUSH
26983: CALL_OW 2
26987: ST_TO_ADDR
// end ;
26988: GO 26896
26990: POP
26991: POP
26992: GO 26876
26994: POP
26995: POP
// if not list then
26996: LD_VAR 0 13
27000: NOT
27001: IFFALSE 27005
// exit ;
27003: GO 27076
// for i in list do
27005: LD_ADDR_VAR 0 6
27009: PUSH
27010: LD_VAR 0 13
27014: PUSH
27015: FOR_IN
27016: IFFALSE 27074
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27018: LD_VAR 0 1
27022: PPUSH
27023: LD_STRING M
27025: PUSH
27026: LD_VAR 0 6
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PUSH
27035: LD_VAR 0 6
27039: PUSH
27040: LD_INT 2
27042: ARRAY
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: PUSH
27065: EMPTY
27066: LIST
27067: PPUSH
27068: CALL_OW 447
27072: GO 27015
27074: POP
27075: POP
// end ;
27076: LD_VAR 0 5
27080: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27081: LD_INT 0
27083: PPUSH
27084: PPUSH
27085: PPUSH
27086: PPUSH
27087: PPUSH
27088: PPUSH
27089: PPUSH
27090: PPUSH
27091: PPUSH
27092: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL_OW 302
27102: NOT
27103: PUSH
27104: LD_VAR 0 2
27108: PPUSH
27109: LD_VAR 0 3
27113: PPUSH
27114: CALL_OW 488
27118: NOT
27119: OR
27120: PUSH
27121: LD_VAR 0 4
27125: NOT
27126: OR
27127: IFFALSE 27131
// exit ;
27129: GO 27644
// list := [ ] ;
27131: LD_ADDR_VAR 0 13
27135: PUSH
27136: EMPTY
27137: ST_TO_ADDR
// if x - r < 0 then
27138: LD_VAR 0 2
27142: PUSH
27143: LD_VAR 0 4
27147: MINUS
27148: PUSH
27149: LD_INT 0
27151: LESS
27152: IFFALSE 27164
// min_x := 0 else
27154: LD_ADDR_VAR 0 7
27158: PUSH
27159: LD_INT 0
27161: ST_TO_ADDR
27162: GO 27180
// min_x := x - r ;
27164: LD_ADDR_VAR 0 7
27168: PUSH
27169: LD_VAR 0 2
27173: PUSH
27174: LD_VAR 0 4
27178: MINUS
27179: ST_TO_ADDR
// if y - r < 0 then
27180: LD_VAR 0 3
27184: PUSH
27185: LD_VAR 0 4
27189: MINUS
27190: PUSH
27191: LD_INT 0
27193: LESS
27194: IFFALSE 27206
// min_y := 0 else
27196: LD_ADDR_VAR 0 8
27200: PUSH
27201: LD_INT 0
27203: ST_TO_ADDR
27204: GO 27222
// min_y := y - r ;
27206: LD_ADDR_VAR 0 8
27210: PUSH
27211: LD_VAR 0 3
27215: PUSH
27216: LD_VAR 0 4
27220: MINUS
27221: ST_TO_ADDR
// max_x := x + r ;
27222: LD_ADDR_VAR 0 9
27226: PUSH
27227: LD_VAR 0 2
27231: PUSH
27232: LD_VAR 0 4
27236: PLUS
27237: ST_TO_ADDR
// max_y := y + r ;
27238: LD_ADDR_VAR 0 10
27242: PUSH
27243: LD_VAR 0 3
27247: PUSH
27248: LD_VAR 0 4
27252: PLUS
27253: ST_TO_ADDR
// for _x = min_x to max_x do
27254: LD_ADDR_VAR 0 11
27258: PUSH
27259: DOUBLE
27260: LD_VAR 0 7
27264: DEC
27265: ST_TO_ADDR
27266: LD_VAR 0 9
27270: PUSH
27271: FOR_TO
27272: IFFALSE 27389
// for _y = min_y to max_y do
27274: LD_ADDR_VAR 0 12
27278: PUSH
27279: DOUBLE
27280: LD_VAR 0 8
27284: DEC
27285: ST_TO_ADDR
27286: LD_VAR 0 10
27290: PUSH
27291: FOR_TO
27292: IFFALSE 27385
// begin if not ValidHex ( _x , _y ) then
27294: LD_VAR 0 11
27298: PPUSH
27299: LD_VAR 0 12
27303: PPUSH
27304: CALL_OW 488
27308: NOT
27309: IFFALSE 27313
// continue ;
27311: GO 27291
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27313: LD_VAR 0 11
27317: PPUSH
27318: LD_VAR 0 12
27322: PPUSH
27323: CALL_OW 351
27327: PUSH
27328: LD_VAR 0 11
27332: PPUSH
27333: LD_VAR 0 12
27337: PPUSH
27338: CALL_OW 554
27342: AND
27343: IFFALSE 27383
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27345: LD_ADDR_VAR 0 13
27349: PUSH
27350: LD_VAR 0 13
27354: PPUSH
27355: LD_VAR 0 13
27359: PUSH
27360: LD_INT 1
27362: PLUS
27363: PPUSH
27364: LD_VAR 0 11
27368: PUSH
27369: LD_VAR 0 12
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PPUSH
27378: CALL_OW 2
27382: ST_TO_ADDR
// end ;
27383: GO 27291
27385: POP
27386: POP
27387: GO 27271
27389: POP
27390: POP
// if not list then
27391: LD_VAR 0 13
27395: NOT
27396: IFFALSE 27400
// exit ;
27398: GO 27644
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27400: LD_ADDR_VAR 0 13
27404: PUSH
27405: LD_VAR 0 1
27409: PPUSH
27410: LD_VAR 0 13
27414: PPUSH
27415: LD_INT 1
27417: PPUSH
27418: LD_INT 1
27420: PPUSH
27421: CALL 36257 0 4
27425: ST_TO_ADDR
// ComStop ( flame ) ;
27426: LD_VAR 0 1
27430: PPUSH
27431: CALL_OW 141
// for i in list do
27435: LD_ADDR_VAR 0 6
27439: PUSH
27440: LD_VAR 0 13
27444: PUSH
27445: FOR_IN
27446: IFFALSE 27477
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27448: LD_VAR 0 1
27452: PPUSH
27453: LD_VAR 0 6
27457: PUSH
27458: LD_INT 1
27460: ARRAY
27461: PPUSH
27462: LD_VAR 0 6
27466: PUSH
27467: LD_INT 2
27469: ARRAY
27470: PPUSH
27471: CALL_OW 176
27475: GO 27445
27477: POP
27478: POP
// repeat wait ( 0 0$1 ) ;
27479: LD_INT 35
27481: PPUSH
27482: CALL_OW 67
// task := GetTaskList ( flame ) ;
27486: LD_ADDR_VAR 0 14
27490: PUSH
27491: LD_VAR 0 1
27495: PPUSH
27496: CALL_OW 437
27500: ST_TO_ADDR
// if not task then
27501: LD_VAR 0 14
27505: NOT
27506: IFFALSE 27510
// exit ;
27508: GO 27644
// if task [ 1 ] [ 1 ] <> | then
27510: LD_VAR 0 14
27514: PUSH
27515: LD_INT 1
27517: ARRAY
27518: PUSH
27519: LD_INT 1
27521: ARRAY
27522: PUSH
27523: LD_STRING |
27525: NONEQUAL
27526: IFFALSE 27530
// exit ;
27528: GO 27644
// _x := task [ 1 ] [ 2 ] ;
27530: LD_ADDR_VAR 0 11
27534: PUSH
27535: LD_VAR 0 14
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: PUSH
27544: LD_INT 2
27546: ARRAY
27547: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27548: LD_ADDR_VAR 0 12
27552: PUSH
27553: LD_VAR 0 14
27557: PUSH
27558: LD_INT 1
27560: ARRAY
27561: PUSH
27562: LD_INT 3
27564: ARRAY
27565: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
27566: LD_VAR 0 11
27570: PPUSH
27571: LD_VAR 0 12
27575: PPUSH
27576: CALL_OW 351
27580: NOT
27581: PUSH
27582: LD_VAR 0 11
27586: PPUSH
27587: LD_VAR 0 12
27591: PPUSH
27592: CALL_OW 554
27596: NOT
27597: OR
27598: IFFALSE 27632
// begin task := Delete ( task , 1 ) ;
27600: LD_ADDR_VAR 0 14
27604: PUSH
27605: LD_VAR 0 14
27609: PPUSH
27610: LD_INT 1
27612: PPUSH
27613: CALL_OW 3
27617: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27618: LD_VAR 0 1
27622: PPUSH
27623: LD_VAR 0 14
27627: PPUSH
27628: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27632: LD_VAR 0 1
27636: PPUSH
27637: CALL_OW 314
27641: NOT
27642: IFFALSE 27479
// end ;
27644: LD_VAR 0 5
27648: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27649: LD_EXP 88
27653: NOT
27654: IFFALSE 27704
27656: GO 27658
27658: DISABLE
// begin initHack := true ;
27659: LD_ADDR_EXP 88
27663: PUSH
27664: LD_INT 1
27666: ST_TO_ADDR
// hackTanks := [ ] ;
27667: LD_ADDR_EXP 89
27671: PUSH
27672: EMPTY
27673: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27674: LD_ADDR_EXP 90
27678: PUSH
27679: EMPTY
27680: ST_TO_ADDR
// hackLimit := 3 ;
27681: LD_ADDR_EXP 91
27685: PUSH
27686: LD_INT 3
27688: ST_TO_ADDR
// hackDist := 12 ;
27689: LD_ADDR_EXP 92
27693: PUSH
27694: LD_INT 12
27696: ST_TO_ADDR
// hackCounter := [ ] ;
27697: LD_ADDR_EXP 93
27701: PUSH
27702: EMPTY
27703: ST_TO_ADDR
// end ;
27704: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27705: LD_EXP 88
27709: PUSH
27710: LD_INT 34
27712: PUSH
27713: LD_INT 99
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PPUSH
27720: CALL_OW 69
27724: AND
27725: IFFALSE 27978
27727: GO 27729
27729: DISABLE
27730: LD_INT 0
27732: PPUSH
27733: PPUSH
// begin enable ;
27734: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27735: LD_ADDR_VAR 0 1
27739: PUSH
27740: LD_INT 34
27742: PUSH
27743: LD_INT 99
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PPUSH
27750: CALL_OW 69
27754: PUSH
27755: FOR_IN
27756: IFFALSE 27976
// begin if not i in hackTanks then
27758: LD_VAR 0 1
27762: PUSH
27763: LD_EXP 89
27767: IN
27768: NOT
27769: IFFALSE 27852
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27771: LD_ADDR_EXP 89
27775: PUSH
27776: LD_EXP 89
27780: PPUSH
27781: LD_EXP 89
27785: PUSH
27786: LD_INT 1
27788: PLUS
27789: PPUSH
27790: LD_VAR 0 1
27794: PPUSH
27795: CALL_OW 1
27799: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27800: LD_ADDR_EXP 90
27804: PUSH
27805: LD_EXP 90
27809: PPUSH
27810: LD_EXP 90
27814: PUSH
27815: LD_INT 1
27817: PLUS
27818: PPUSH
27819: EMPTY
27820: PPUSH
27821: CALL_OW 1
27825: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27826: LD_ADDR_EXP 93
27830: PUSH
27831: LD_EXP 93
27835: PPUSH
27836: LD_EXP 93
27840: PUSH
27841: LD_INT 1
27843: PLUS
27844: PPUSH
27845: EMPTY
27846: PPUSH
27847: CALL_OW 1
27851: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27852: LD_VAR 0 1
27856: PPUSH
27857: CALL_OW 302
27861: NOT
27862: IFFALSE 27875
// begin HackUnlinkAll ( i ) ;
27864: LD_VAR 0 1
27868: PPUSH
27869: CALL 27981 0 1
// continue ;
27873: GO 27755
// end ; HackCheckCapturedStatus ( i ) ;
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL 28424 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27884: LD_ADDR_VAR 0 2
27888: PUSH
27889: LD_INT 81
27891: PUSH
27892: LD_VAR 0 1
27896: PPUSH
27897: CALL_OW 255
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 33
27908: PUSH
27909: LD_INT 3
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 91
27918: PUSH
27919: LD_VAR 0 1
27923: PUSH
27924: LD_EXP 92
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 50
27936: PUSH
27937: EMPTY
27938: LIST
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: PPUSH
27946: CALL_OW 69
27950: ST_TO_ADDR
// if not tmp then
27951: LD_VAR 0 2
27955: NOT
27956: IFFALSE 27960
// continue ;
27958: GO 27755
// HackLink ( i , tmp ) ;
27960: LD_VAR 0 1
27964: PPUSH
27965: LD_VAR 0 2
27969: PPUSH
27970: CALL 28117 0 2
// end ;
27974: GO 27755
27976: POP
27977: POP
// end ;
27978: PPOPN 2
27980: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27981: LD_INT 0
27983: PPUSH
27984: PPUSH
27985: PPUSH
// if not hack in hackTanks then
27986: LD_VAR 0 1
27990: PUSH
27991: LD_EXP 89
27995: IN
27996: NOT
27997: IFFALSE 28001
// exit ;
27999: GO 28112
// index := GetElementIndex ( hackTanks , hack ) ;
28001: LD_ADDR_VAR 0 4
28005: PUSH
28006: LD_EXP 89
28010: PPUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: CALL 35554 0 2
28020: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28021: LD_EXP 90
28025: PUSH
28026: LD_VAR 0 4
28030: ARRAY
28031: IFFALSE 28112
// begin for i in hackTanksCaptured [ index ] do
28033: LD_ADDR_VAR 0 3
28037: PUSH
28038: LD_EXP 90
28042: PUSH
28043: LD_VAR 0 4
28047: ARRAY
28048: PUSH
28049: FOR_IN
28050: IFFALSE 28076
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28052: LD_VAR 0 3
28056: PUSH
28057: LD_INT 1
28059: ARRAY
28060: PPUSH
28061: LD_VAR 0 3
28065: PUSH
28066: LD_INT 2
28068: ARRAY
28069: PPUSH
28070: CALL_OW 235
28074: GO 28049
28076: POP
28077: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28078: LD_ADDR_EXP 90
28082: PUSH
28083: LD_EXP 90
28087: PPUSH
28088: LD_VAR 0 4
28092: PPUSH
28093: EMPTY
28094: PPUSH
28095: CALL_OW 1
28099: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28100: LD_VAR 0 1
28104: PPUSH
28105: LD_INT 0
28107: PPUSH
28108: CALL_OW 505
// end ; end ;
28112: LD_VAR 0 2
28116: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28117: LD_INT 0
28119: PPUSH
28120: PPUSH
28121: PPUSH
// if not hack in hackTanks or not vehicles then
28122: LD_VAR 0 1
28126: PUSH
28127: LD_EXP 89
28131: IN
28132: NOT
28133: PUSH
28134: LD_VAR 0 2
28138: NOT
28139: OR
28140: IFFALSE 28144
// exit ;
28142: GO 28419
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28144: LD_ADDR_VAR 0 2
28148: PUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_VAR 0 2
28158: PPUSH
28159: LD_INT 1
28161: PPUSH
28162: LD_INT 1
28164: PPUSH
28165: CALL 36204 0 4
28169: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28170: LD_ADDR_VAR 0 5
28174: PUSH
28175: LD_EXP 89
28179: PPUSH
28180: LD_VAR 0 1
28184: PPUSH
28185: CALL 35554 0 2
28189: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28190: LD_EXP 90
28194: PUSH
28195: LD_VAR 0 5
28199: ARRAY
28200: PUSH
28201: LD_EXP 91
28205: LESS
28206: IFFALSE 28395
// begin for i := 1 to vehicles do
28208: LD_ADDR_VAR 0 4
28212: PUSH
28213: DOUBLE
28214: LD_INT 1
28216: DEC
28217: ST_TO_ADDR
28218: LD_VAR 0 2
28222: PUSH
28223: FOR_TO
28224: IFFALSE 28393
// begin if hackTanksCaptured [ index ] = hackLimit then
28226: LD_EXP 90
28230: PUSH
28231: LD_VAR 0 5
28235: ARRAY
28236: PUSH
28237: LD_EXP 91
28241: EQUAL
28242: IFFALSE 28246
// break ;
28244: GO 28393
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28246: LD_ADDR_EXP 93
28250: PUSH
28251: LD_EXP 93
28255: PPUSH
28256: LD_VAR 0 5
28260: PPUSH
28261: LD_EXP 93
28265: PUSH
28266: LD_VAR 0 5
28270: ARRAY
28271: PUSH
28272: LD_INT 1
28274: PLUS
28275: PPUSH
28276: CALL_OW 1
28280: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28281: LD_ADDR_EXP 90
28285: PUSH
28286: LD_EXP 90
28290: PPUSH
28291: LD_VAR 0 5
28295: PUSH
28296: LD_EXP 90
28300: PUSH
28301: LD_VAR 0 5
28305: ARRAY
28306: PUSH
28307: LD_INT 1
28309: PLUS
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PPUSH
28315: LD_VAR 0 2
28319: PUSH
28320: LD_VAR 0 4
28324: ARRAY
28325: PUSH
28326: LD_VAR 0 2
28330: PUSH
28331: LD_VAR 0 4
28335: ARRAY
28336: PPUSH
28337: CALL_OW 255
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PPUSH
28346: CALL 35769 0 3
28350: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28351: LD_VAR 0 2
28355: PUSH
28356: LD_VAR 0 4
28360: ARRAY
28361: PPUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 255
28371: PPUSH
28372: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28376: LD_VAR 0 2
28380: PUSH
28381: LD_VAR 0 4
28385: ARRAY
28386: PPUSH
28387: CALL_OW 141
// end ;
28391: GO 28223
28393: POP
28394: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28395: LD_VAR 0 1
28399: PPUSH
28400: LD_EXP 90
28404: PUSH
28405: LD_VAR 0 5
28409: ARRAY
28410: PUSH
28411: LD_INT 0
28413: PLUS
28414: PPUSH
28415: CALL_OW 505
// end ;
28419: LD_VAR 0 3
28423: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28424: LD_INT 0
28426: PPUSH
28427: PPUSH
28428: PPUSH
28429: PPUSH
// if not hack in hackTanks then
28430: LD_VAR 0 1
28434: PUSH
28435: LD_EXP 89
28439: IN
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 28685
// index := GetElementIndex ( hackTanks , hack ) ;
28445: LD_ADDR_VAR 0 4
28449: PUSH
28450: LD_EXP 89
28454: PPUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL 35554 0 2
28464: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28465: LD_ADDR_VAR 0 3
28469: PUSH
28470: DOUBLE
28471: LD_EXP 90
28475: PUSH
28476: LD_VAR 0 4
28480: ARRAY
28481: INC
28482: ST_TO_ADDR
28483: LD_INT 1
28485: PUSH
28486: FOR_DOWNTO
28487: IFFALSE 28659
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28489: LD_ADDR_VAR 0 5
28493: PUSH
28494: LD_EXP 90
28498: PUSH
28499: LD_VAR 0 4
28503: ARRAY
28504: PUSH
28505: LD_VAR 0 3
28509: ARRAY
28510: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28511: LD_VAR 0 5
28515: PUSH
28516: LD_INT 1
28518: ARRAY
28519: PPUSH
28520: CALL_OW 302
28524: NOT
28525: PUSH
28526: LD_VAR 0 5
28530: PUSH
28531: LD_INT 1
28533: ARRAY
28534: PPUSH
28535: CALL_OW 255
28539: PUSH
28540: LD_VAR 0 1
28544: PPUSH
28545: CALL_OW 255
28549: NONEQUAL
28550: OR
28551: IFFALSE 28657
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28553: LD_VAR 0 5
28557: PUSH
28558: LD_INT 1
28560: ARRAY
28561: PPUSH
28562: CALL_OW 305
28566: PUSH
28567: LD_VAR 0 5
28571: PUSH
28572: LD_INT 1
28574: ARRAY
28575: PPUSH
28576: CALL_OW 255
28580: PUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: CALL_OW 255
28590: EQUAL
28591: AND
28592: IFFALSE 28616
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28594: LD_VAR 0 5
28598: PUSH
28599: LD_INT 1
28601: ARRAY
28602: PPUSH
28603: LD_VAR 0 5
28607: PUSH
28608: LD_INT 2
28610: ARRAY
28611: PPUSH
28612: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28616: LD_ADDR_EXP 90
28620: PUSH
28621: LD_EXP 90
28625: PPUSH
28626: LD_VAR 0 4
28630: PPUSH
28631: LD_EXP 90
28635: PUSH
28636: LD_VAR 0 4
28640: ARRAY
28641: PPUSH
28642: LD_VAR 0 3
28646: PPUSH
28647: CALL_OW 3
28651: PPUSH
28652: CALL_OW 1
28656: ST_TO_ADDR
// end ; end ;
28657: GO 28486
28659: POP
28660: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28661: LD_VAR 0 1
28665: PPUSH
28666: LD_EXP 90
28670: PUSH
28671: LD_VAR 0 4
28675: ARRAY
28676: PUSH
28677: LD_INT 0
28679: PLUS
28680: PPUSH
28681: CALL_OW 505
// end ;
28685: LD_VAR 0 2
28689: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28690: LD_INT 0
28692: PPUSH
28693: PPUSH
28694: PPUSH
28695: PPUSH
// if not hack in hackTanks then
28696: LD_VAR 0 1
28700: PUSH
28701: LD_EXP 89
28705: IN
28706: NOT
28707: IFFALSE 28711
// exit ;
28709: GO 28796
// index := GetElementIndex ( hackTanks , hack ) ;
28711: LD_ADDR_VAR 0 5
28715: PUSH
28716: LD_EXP 89
28720: PPUSH
28721: LD_VAR 0 1
28725: PPUSH
28726: CALL 35554 0 2
28730: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28731: LD_ADDR_VAR 0 4
28735: PUSH
28736: DOUBLE
28737: LD_INT 1
28739: DEC
28740: ST_TO_ADDR
28741: LD_EXP 90
28745: PUSH
28746: LD_VAR 0 5
28750: ARRAY
28751: PUSH
28752: FOR_TO
28753: IFFALSE 28794
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28755: LD_EXP 90
28759: PUSH
28760: LD_VAR 0 5
28764: ARRAY
28765: PUSH
28766: LD_VAR 0 4
28770: ARRAY
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: PUSH
28776: LD_VAR 0 2
28780: EQUAL
28781: IFFALSE 28792
// KillUnit ( vehicle ) ;
28783: LD_VAR 0 2
28787: PPUSH
28788: CALL_OW 66
28792: GO 28752
28794: POP
28795: POP
// end ;
28796: LD_VAR 0 3
28800: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28801: LD_EXP 94
28805: NOT
28806: IFFALSE 28841
28808: GO 28810
28810: DISABLE
// begin initMiner := true ;
28811: LD_ADDR_EXP 94
28815: PUSH
28816: LD_INT 1
28818: ST_TO_ADDR
// minersList := [ ] ;
28819: LD_ADDR_EXP 95
28823: PUSH
28824: EMPTY
28825: ST_TO_ADDR
// minerMinesList := [ ] ;
28826: LD_ADDR_EXP 96
28830: PUSH
28831: EMPTY
28832: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28833: LD_ADDR_EXP 97
28837: PUSH
28838: LD_INT 5
28840: ST_TO_ADDR
// end ;
28841: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28842: LD_EXP 94
28846: PUSH
28847: LD_INT 34
28849: PUSH
28850: LD_INT 81
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL_OW 69
28861: AND
28862: IFFALSE 29323
28864: GO 28866
28866: DISABLE
28867: LD_INT 0
28869: PPUSH
28870: PPUSH
28871: PPUSH
28872: PPUSH
// begin enable ;
28873: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28874: LD_ADDR_VAR 0 1
28878: PUSH
28879: LD_INT 34
28881: PUSH
28882: LD_INT 81
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PPUSH
28889: CALL_OW 69
28893: PUSH
28894: FOR_IN
28895: IFFALSE 28967
// begin if not i in minersList then
28897: LD_VAR 0 1
28901: PUSH
28902: LD_EXP 95
28906: IN
28907: NOT
28908: IFFALSE 28965
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28910: LD_ADDR_EXP 95
28914: PUSH
28915: LD_EXP 95
28919: PPUSH
28920: LD_EXP 95
28924: PUSH
28925: LD_INT 1
28927: PLUS
28928: PPUSH
28929: LD_VAR 0 1
28933: PPUSH
28934: CALL_OW 1
28938: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28939: LD_ADDR_EXP 96
28943: PUSH
28944: LD_EXP 96
28948: PPUSH
28949: LD_EXP 96
28953: PUSH
28954: LD_INT 1
28956: PLUS
28957: PPUSH
28958: EMPTY
28959: PPUSH
28960: CALL_OW 1
28964: ST_TO_ADDR
// end end ;
28965: GO 28894
28967: POP
28968: POP
// for i := minerMinesList downto 1 do
28969: LD_ADDR_VAR 0 1
28973: PUSH
28974: DOUBLE
28975: LD_EXP 96
28979: INC
28980: ST_TO_ADDR
28981: LD_INT 1
28983: PUSH
28984: FOR_DOWNTO
28985: IFFALSE 29321
// begin if IsLive ( minersList [ i ] ) then
28987: LD_EXP 95
28991: PUSH
28992: LD_VAR 0 1
28996: ARRAY
28997: PPUSH
28998: CALL_OW 300
29002: IFFALSE 29030
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29004: LD_EXP 95
29008: PUSH
29009: LD_VAR 0 1
29013: ARRAY
29014: PPUSH
29015: LD_EXP 96
29019: PUSH
29020: LD_VAR 0 1
29024: ARRAY
29025: PPUSH
29026: CALL_OW 505
// if not minerMinesList [ i ] then
29030: LD_EXP 96
29034: PUSH
29035: LD_VAR 0 1
29039: ARRAY
29040: NOT
29041: IFFALSE 29045
// continue ;
29043: GO 28984
// for j := minerMinesList [ i ] downto 1 do
29045: LD_ADDR_VAR 0 2
29049: PUSH
29050: DOUBLE
29051: LD_EXP 96
29055: PUSH
29056: LD_VAR 0 1
29060: ARRAY
29061: INC
29062: ST_TO_ADDR
29063: LD_INT 1
29065: PUSH
29066: FOR_DOWNTO
29067: IFFALSE 29317
// begin side := GetSide ( minersList [ i ] ) ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_EXP 95
29078: PUSH
29079: LD_VAR 0 1
29083: ARRAY
29084: PPUSH
29085: CALL_OW 255
29089: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29090: LD_ADDR_VAR 0 4
29094: PUSH
29095: LD_EXP 96
29099: PUSH
29100: LD_VAR 0 1
29104: ARRAY
29105: PUSH
29106: LD_VAR 0 2
29110: ARRAY
29111: PUSH
29112: LD_INT 1
29114: ARRAY
29115: PPUSH
29116: LD_EXP 96
29120: PUSH
29121: LD_VAR 0 1
29125: ARRAY
29126: PUSH
29127: LD_VAR 0 2
29131: ARRAY
29132: PUSH
29133: LD_INT 2
29135: ARRAY
29136: PPUSH
29137: CALL_OW 428
29141: ST_TO_ADDR
// if not tmp then
29142: LD_VAR 0 4
29146: NOT
29147: IFFALSE 29151
// continue ;
29149: GO 29066
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29151: LD_VAR 0 4
29155: PUSH
29156: LD_INT 81
29158: PUSH
29159: LD_VAR 0 3
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PPUSH
29168: CALL_OW 69
29172: IN
29173: PUSH
29174: LD_EXP 96
29178: PUSH
29179: LD_VAR 0 1
29183: ARRAY
29184: PUSH
29185: LD_VAR 0 2
29189: ARRAY
29190: PUSH
29191: LD_INT 1
29193: ARRAY
29194: PPUSH
29195: LD_EXP 96
29199: PUSH
29200: LD_VAR 0 1
29204: ARRAY
29205: PUSH
29206: LD_VAR 0 2
29210: ARRAY
29211: PUSH
29212: LD_INT 2
29214: ARRAY
29215: PPUSH
29216: CALL_OW 458
29220: AND
29221: IFFALSE 29315
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29223: LD_EXP 96
29227: PUSH
29228: LD_VAR 0 1
29232: ARRAY
29233: PUSH
29234: LD_VAR 0 2
29238: ARRAY
29239: PUSH
29240: LD_INT 1
29242: ARRAY
29243: PPUSH
29244: LD_EXP 96
29248: PUSH
29249: LD_VAR 0 1
29253: ARRAY
29254: PUSH
29255: LD_VAR 0 2
29259: ARRAY
29260: PUSH
29261: LD_INT 2
29263: ARRAY
29264: PPUSH
29265: LD_VAR 0 3
29269: PPUSH
29270: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29274: LD_ADDR_EXP 96
29278: PUSH
29279: LD_EXP 96
29283: PPUSH
29284: LD_VAR 0 1
29288: PPUSH
29289: LD_EXP 96
29293: PUSH
29294: LD_VAR 0 1
29298: ARRAY
29299: PPUSH
29300: LD_VAR 0 2
29304: PPUSH
29305: CALL_OW 3
29309: PPUSH
29310: CALL_OW 1
29314: ST_TO_ADDR
// end ; end ;
29315: GO 29066
29317: POP
29318: POP
// end ;
29319: GO 28984
29321: POP
29322: POP
// end ;
29323: PPOPN 4
29325: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29326: LD_INT 0
29328: PPUSH
29329: PPUSH
// result := false ;
29330: LD_ADDR_VAR 0 4
29334: PUSH
29335: LD_INT 0
29337: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 264
29347: PUSH
29348: LD_INT 81
29350: EQUAL
29351: NOT
29352: IFFALSE 29356
// exit ;
29354: GO 29596
// index := GetElementIndex ( minersList , unit ) ;
29356: LD_ADDR_VAR 0 5
29360: PUSH
29361: LD_EXP 95
29365: PPUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL 35554 0 2
29375: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29376: LD_EXP 96
29380: PUSH
29381: LD_VAR 0 5
29385: ARRAY
29386: PUSH
29387: LD_EXP 97
29391: GREATEREQUAL
29392: IFFALSE 29396
// exit ;
29394: GO 29596
// ComMoveXY ( unit , x , y ) ;
29396: LD_VAR 0 1
29400: PPUSH
29401: LD_VAR 0 2
29405: PPUSH
29406: LD_VAR 0 3
29410: PPUSH
29411: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29415: LD_INT 35
29417: PPUSH
29418: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29422: LD_VAR 0 1
29426: PPUSH
29427: LD_VAR 0 2
29431: PPUSH
29432: LD_VAR 0 3
29436: PPUSH
29437: CALL 67295 0 3
29441: NOT
29442: PUSH
29443: LD_VAR 0 1
29447: PPUSH
29448: CALL_OW 314
29452: AND
29453: IFFALSE 29457
// exit ;
29455: GO 29596
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29457: LD_VAR 0 2
29461: PPUSH
29462: LD_VAR 0 3
29466: PPUSH
29467: CALL_OW 428
29471: PUSH
29472: LD_VAR 0 1
29476: EQUAL
29477: PUSH
29478: LD_VAR 0 1
29482: PPUSH
29483: CALL_OW 314
29487: NOT
29488: AND
29489: IFFALSE 29415
// PlaySoundXY ( x , y , PlantMine ) ;
29491: LD_VAR 0 2
29495: PPUSH
29496: LD_VAR 0 3
29500: PPUSH
29501: LD_STRING PlantMine
29503: PPUSH
29504: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29508: LD_VAR 0 2
29512: PPUSH
29513: LD_VAR 0 3
29517: PPUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 255
29527: PPUSH
29528: LD_INT 0
29530: PPUSH
29531: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29535: LD_ADDR_EXP 96
29539: PUSH
29540: LD_EXP 96
29544: PPUSH
29545: LD_VAR 0 5
29549: PUSH
29550: LD_EXP 96
29554: PUSH
29555: LD_VAR 0 5
29559: ARRAY
29560: PUSH
29561: LD_INT 1
29563: PLUS
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PPUSH
29569: LD_VAR 0 2
29573: PUSH
29574: LD_VAR 0 3
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PPUSH
29583: CALL 35769 0 3
29587: ST_TO_ADDR
// result := true ;
29588: LD_ADDR_VAR 0 4
29592: PUSH
29593: LD_INT 1
29595: ST_TO_ADDR
// end ;
29596: LD_VAR 0 4
29600: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29601: LD_INT 0
29603: PPUSH
29604: PPUSH
29605: PPUSH
// if not unit in minersList then
29606: LD_VAR 0 1
29610: PUSH
29611: LD_EXP 95
29615: IN
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 30013
// index := GetElementIndex ( minersList , unit ) ;
29621: LD_ADDR_VAR 0 6
29625: PUSH
29626: LD_EXP 95
29630: PPUSH
29631: LD_VAR 0 1
29635: PPUSH
29636: CALL 35554 0 2
29640: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29641: LD_ADDR_VAR 0 5
29645: PUSH
29646: DOUBLE
29647: LD_EXP 96
29651: PUSH
29652: LD_VAR 0 6
29656: ARRAY
29657: INC
29658: ST_TO_ADDR
29659: LD_INT 1
29661: PUSH
29662: FOR_DOWNTO
29663: IFFALSE 29824
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29665: LD_EXP 96
29669: PUSH
29670: LD_VAR 0 6
29674: ARRAY
29675: PUSH
29676: LD_VAR 0 5
29680: ARRAY
29681: PUSH
29682: LD_INT 1
29684: ARRAY
29685: PUSH
29686: LD_VAR 0 2
29690: EQUAL
29691: PUSH
29692: LD_EXP 96
29696: PUSH
29697: LD_VAR 0 6
29701: ARRAY
29702: PUSH
29703: LD_VAR 0 5
29707: ARRAY
29708: PUSH
29709: LD_INT 2
29711: ARRAY
29712: PUSH
29713: LD_VAR 0 3
29717: EQUAL
29718: AND
29719: IFFALSE 29822
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29721: LD_EXP 96
29725: PUSH
29726: LD_VAR 0 6
29730: ARRAY
29731: PUSH
29732: LD_VAR 0 5
29736: ARRAY
29737: PUSH
29738: LD_INT 1
29740: ARRAY
29741: PPUSH
29742: LD_EXP 96
29746: PUSH
29747: LD_VAR 0 6
29751: ARRAY
29752: PUSH
29753: LD_VAR 0 5
29757: ARRAY
29758: PUSH
29759: LD_INT 2
29761: ARRAY
29762: PPUSH
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL_OW 255
29772: PPUSH
29773: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29777: LD_ADDR_EXP 96
29781: PUSH
29782: LD_EXP 96
29786: PPUSH
29787: LD_VAR 0 6
29791: PPUSH
29792: LD_EXP 96
29796: PUSH
29797: LD_VAR 0 6
29801: ARRAY
29802: PPUSH
29803: LD_VAR 0 5
29807: PPUSH
29808: CALL_OW 3
29812: PPUSH
29813: CALL_OW 1
29817: ST_TO_ADDR
// exit ;
29818: POP
29819: POP
29820: GO 30013
// end ; end ;
29822: GO 29662
29824: POP
29825: POP
// for i := minerMinesList [ index ] downto 1 do
29826: LD_ADDR_VAR 0 5
29830: PUSH
29831: DOUBLE
29832: LD_EXP 96
29836: PUSH
29837: LD_VAR 0 6
29841: ARRAY
29842: INC
29843: ST_TO_ADDR
29844: LD_INT 1
29846: PUSH
29847: FOR_DOWNTO
29848: IFFALSE 30011
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29850: LD_EXP 96
29854: PUSH
29855: LD_VAR 0 6
29859: ARRAY
29860: PUSH
29861: LD_VAR 0 5
29865: ARRAY
29866: PUSH
29867: LD_INT 1
29869: ARRAY
29870: PPUSH
29871: LD_EXP 96
29875: PUSH
29876: LD_VAR 0 6
29880: ARRAY
29881: PUSH
29882: LD_VAR 0 5
29886: ARRAY
29887: PUSH
29888: LD_INT 2
29890: ARRAY
29891: PPUSH
29892: LD_VAR 0 2
29896: PPUSH
29897: LD_VAR 0 3
29901: PPUSH
29902: CALL_OW 298
29906: PUSH
29907: LD_INT 6
29909: LESS
29910: IFFALSE 30009
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29912: LD_EXP 96
29916: PUSH
29917: LD_VAR 0 6
29921: ARRAY
29922: PUSH
29923: LD_VAR 0 5
29927: ARRAY
29928: PUSH
29929: LD_INT 1
29931: ARRAY
29932: PPUSH
29933: LD_EXP 96
29937: PUSH
29938: LD_VAR 0 6
29942: ARRAY
29943: PUSH
29944: LD_VAR 0 5
29948: ARRAY
29949: PUSH
29950: LD_INT 2
29952: ARRAY
29953: PPUSH
29954: LD_VAR 0 1
29958: PPUSH
29959: CALL_OW 255
29963: PPUSH
29964: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29968: LD_ADDR_EXP 96
29972: PUSH
29973: LD_EXP 96
29977: PPUSH
29978: LD_VAR 0 6
29982: PPUSH
29983: LD_EXP 96
29987: PUSH
29988: LD_VAR 0 6
29992: ARRAY
29993: PPUSH
29994: LD_VAR 0 5
29998: PPUSH
29999: CALL_OW 3
30003: PPUSH
30004: CALL_OW 1
30008: ST_TO_ADDR
// end ; end ;
30009: GO 29847
30011: POP
30012: POP
// end ;
30013: LD_VAR 0 4
30017: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30018: LD_INT 0
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30029: LD_VAR 0 1
30033: PPUSH
30034: CALL_OW 264
30038: PUSH
30039: LD_INT 81
30041: EQUAL
30042: NOT
30043: PUSH
30044: LD_VAR 0 1
30048: PUSH
30049: LD_EXP 95
30053: IN
30054: NOT
30055: OR
30056: IFFALSE 30060
// exit ;
30058: GO 30382
// index := GetElementIndex ( minersList , unit ) ;
30060: LD_ADDR_VAR 0 6
30064: PUSH
30065: LD_EXP 95
30069: PPUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL 35554 0 2
30079: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30080: LD_ADDR_VAR 0 8
30084: PUSH
30085: LD_EXP 97
30089: PUSH
30090: LD_EXP 96
30094: PUSH
30095: LD_VAR 0 6
30099: ARRAY
30100: MINUS
30101: ST_TO_ADDR
// if not minesFreeAmount then
30102: LD_VAR 0 8
30106: NOT
30107: IFFALSE 30111
// exit ;
30109: GO 30382
// tmp := [ ] ;
30111: LD_ADDR_VAR 0 7
30115: PUSH
30116: EMPTY
30117: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30118: LD_ADDR_VAR 0 5
30122: PUSH
30123: DOUBLE
30124: LD_INT 1
30126: DEC
30127: ST_TO_ADDR
30128: LD_VAR 0 8
30132: PUSH
30133: FOR_TO
30134: IFFALSE 30329
// begin _d := rand ( 0 , 5 ) ;
30136: LD_ADDR_VAR 0 11
30140: PUSH
30141: LD_INT 0
30143: PPUSH
30144: LD_INT 5
30146: PPUSH
30147: CALL_OW 12
30151: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30152: LD_ADDR_VAR 0 12
30156: PUSH
30157: LD_INT 2
30159: PPUSH
30160: LD_INT 6
30162: PPUSH
30163: CALL_OW 12
30167: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30168: LD_ADDR_VAR 0 9
30172: PUSH
30173: LD_VAR 0 2
30177: PPUSH
30178: LD_VAR 0 11
30182: PPUSH
30183: LD_VAR 0 12
30187: PPUSH
30188: CALL_OW 272
30192: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30193: LD_ADDR_VAR 0 10
30197: PUSH
30198: LD_VAR 0 3
30202: PPUSH
30203: LD_VAR 0 11
30207: PPUSH
30208: LD_VAR 0 12
30212: PPUSH
30213: CALL_OW 273
30217: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30218: LD_VAR 0 9
30222: PPUSH
30223: LD_VAR 0 10
30227: PPUSH
30228: CALL_OW 488
30232: PUSH
30233: LD_VAR 0 9
30237: PUSH
30238: LD_VAR 0 10
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_VAR 0 7
30251: IN
30252: NOT
30253: AND
30254: PUSH
30255: LD_VAR 0 9
30259: PPUSH
30260: LD_VAR 0 10
30264: PPUSH
30265: CALL_OW 458
30269: NOT
30270: AND
30271: IFFALSE 30313
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30273: LD_ADDR_VAR 0 7
30277: PUSH
30278: LD_VAR 0 7
30282: PPUSH
30283: LD_VAR 0 7
30287: PUSH
30288: LD_INT 1
30290: PLUS
30291: PPUSH
30292: LD_VAR 0 9
30296: PUSH
30297: LD_VAR 0 10
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PPUSH
30306: CALL_OW 1
30310: ST_TO_ADDR
30311: GO 30327
// i := i - 1 ;
30313: LD_ADDR_VAR 0 5
30317: PUSH
30318: LD_VAR 0 5
30322: PUSH
30323: LD_INT 1
30325: MINUS
30326: ST_TO_ADDR
// end ;
30327: GO 30133
30329: POP
30330: POP
// for i in tmp do
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_VAR 0 7
30340: PUSH
30341: FOR_IN
30342: IFFALSE 30380
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30344: LD_VAR 0 1
30348: PPUSH
30349: LD_VAR 0 5
30353: PUSH
30354: LD_INT 1
30356: ARRAY
30357: PPUSH
30358: LD_VAR 0 5
30362: PUSH
30363: LD_INT 2
30365: ARRAY
30366: PPUSH
30367: CALL 29326 0 3
30371: NOT
30372: IFFALSE 30378
// exit ;
30374: POP
30375: POP
30376: GO 30382
30378: GO 30341
30380: POP
30381: POP
// end ;
30382: LD_VAR 0 4
30386: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
// if not GetClass ( unit ) = class_sniper then
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 257
30405: PUSH
30406: LD_INT 5
30408: EQUAL
30409: NOT
30410: IFFALSE 30414
// exit ;
30412: GO 30802
// dist := 8 ;
30414: LD_ADDR_VAR 0 5
30418: PUSH
30419: LD_INT 8
30421: ST_TO_ADDR
// viewRange := 12 ;
30422: LD_ADDR_VAR 0 7
30426: PUSH
30427: LD_INT 12
30429: ST_TO_ADDR
// side := GetSide ( unit ) ;
30430: LD_ADDR_VAR 0 6
30434: PUSH
30435: LD_VAR 0 1
30439: PPUSH
30440: CALL_OW 255
30444: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30445: LD_INT 61
30447: PPUSH
30448: LD_VAR 0 6
30452: PPUSH
30453: CALL_OW 321
30457: PUSH
30458: LD_INT 2
30460: EQUAL
30461: IFFALSE 30471
// viewRange := 16 ;
30463: LD_ADDR_VAR 0 7
30467: PUSH
30468: LD_INT 16
30470: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30471: LD_VAR 0 1
30475: PPUSH
30476: LD_VAR 0 2
30480: PPUSH
30481: LD_VAR 0 3
30485: PPUSH
30486: CALL_OW 297
30490: PUSH
30491: LD_VAR 0 5
30495: GREATER
30496: IFFALSE 30575
// begin ComMoveXY ( unit , x , y ) ;
30498: LD_VAR 0 1
30502: PPUSH
30503: LD_VAR 0 2
30507: PPUSH
30508: LD_VAR 0 3
30512: PPUSH
30513: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30517: LD_INT 35
30519: PPUSH
30520: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30524: LD_VAR 0 1
30528: PPUSH
30529: LD_VAR 0 2
30533: PPUSH
30534: LD_VAR 0 3
30538: PPUSH
30539: CALL 67295 0 3
30543: NOT
30544: IFFALSE 30548
// exit ;
30546: GO 30802
// until GetDistUnitXY ( unit , x , y ) < dist ;
30548: LD_VAR 0 1
30552: PPUSH
30553: LD_VAR 0 2
30557: PPUSH
30558: LD_VAR 0 3
30562: PPUSH
30563: CALL_OW 297
30567: PUSH
30568: LD_VAR 0 5
30572: LESS
30573: IFFALSE 30517
// end ; ComTurnXY ( unit , x , y ) ;
30575: LD_VAR 0 1
30579: PPUSH
30580: LD_VAR 0 2
30584: PPUSH
30585: LD_VAR 0 3
30589: PPUSH
30590: CALL_OW 118
// wait ( 5 ) ;
30594: LD_INT 5
30596: PPUSH
30597: CALL_OW 67
// _d := GetDir ( unit ) ;
30601: LD_ADDR_VAR 0 10
30605: PUSH
30606: LD_VAR 0 1
30610: PPUSH
30611: CALL_OW 254
30615: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30616: LD_ADDR_VAR 0 8
30620: PUSH
30621: LD_VAR 0 1
30625: PPUSH
30626: CALL_OW 250
30630: PPUSH
30631: LD_VAR 0 10
30635: PPUSH
30636: LD_VAR 0 5
30640: PPUSH
30641: CALL_OW 272
30645: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30646: LD_ADDR_VAR 0 9
30650: PUSH
30651: LD_VAR 0 1
30655: PPUSH
30656: CALL_OW 251
30660: PPUSH
30661: LD_VAR 0 10
30665: PPUSH
30666: LD_VAR 0 5
30670: PPUSH
30671: CALL_OW 273
30675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30676: LD_VAR 0 8
30680: PPUSH
30681: LD_VAR 0 9
30685: PPUSH
30686: CALL_OW 488
30690: NOT
30691: IFFALSE 30695
// exit ;
30693: GO 30802
// ComAnimCustom ( unit , 1 ) ;
30695: LD_VAR 0 1
30699: PPUSH
30700: LD_INT 1
30702: PPUSH
30703: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30707: LD_VAR 0 8
30711: PPUSH
30712: LD_VAR 0 9
30716: PPUSH
30717: LD_VAR 0 6
30721: PPUSH
30722: LD_VAR 0 7
30726: PPUSH
30727: CALL_OW 330
// repeat wait ( 1 ) ;
30731: LD_INT 1
30733: PPUSH
30734: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30738: LD_VAR 0 1
30742: PPUSH
30743: CALL_OW 316
30747: PUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: CALL_OW 314
30757: OR
30758: PUSH
30759: LD_VAR 0 1
30763: PPUSH
30764: CALL_OW 302
30768: NOT
30769: OR
30770: PUSH
30771: LD_VAR 0 1
30775: PPUSH
30776: CALL_OW 301
30780: OR
30781: IFFALSE 30731
// RemoveSeeing ( _x , _y , side ) ;
30783: LD_VAR 0 8
30787: PPUSH
30788: LD_VAR 0 9
30792: PPUSH
30793: LD_VAR 0 6
30797: PPUSH
30798: CALL_OW 331
// end ; end_of_file
30802: LD_VAR 0 4
30806: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30807: LD_INT 0
30809: PPUSH
30810: PPUSH
// if exist_mode then
30811: LD_VAR 0 2
30815: IFFALSE 30840
// unit := CreateCharacter ( prefix & ident ) else
30817: LD_ADDR_VAR 0 5
30821: PUSH
30822: LD_VAR 0 3
30826: PUSH
30827: LD_VAR 0 1
30831: STR
30832: PPUSH
30833: CALL_OW 34
30837: ST_TO_ADDR
30838: GO 30855
// unit := NewCharacter ( ident ) ;
30840: LD_ADDR_VAR 0 5
30844: PUSH
30845: LD_VAR 0 1
30849: PPUSH
30850: CALL_OW 25
30854: ST_TO_ADDR
// result := unit ;
30855: LD_ADDR_VAR 0 4
30859: PUSH
30860: LD_VAR 0 5
30864: ST_TO_ADDR
// end ;
30865: LD_VAR 0 4
30869: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30870: LD_INT 0
30872: PPUSH
30873: PPUSH
// if not side or not nation then
30874: LD_VAR 0 1
30878: NOT
30879: PUSH
30880: LD_VAR 0 2
30884: NOT
30885: OR
30886: IFFALSE 30890
// exit ;
30888: GO 31658
// case nation of nation_american :
30890: LD_VAR 0 2
30894: PUSH
30895: LD_INT 1
30897: DOUBLE
30898: EQUAL
30899: IFTRUE 30903
30901: GO 31117
30903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30904: LD_ADDR_VAR 0 4
30908: PUSH
30909: LD_INT 35
30911: PUSH
30912: LD_INT 45
30914: PUSH
30915: LD_INT 46
30917: PUSH
30918: LD_INT 47
30920: PUSH
30921: LD_INT 82
30923: PUSH
30924: LD_INT 83
30926: PUSH
30927: LD_INT 84
30929: PUSH
30930: LD_INT 85
30932: PUSH
30933: LD_INT 86
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 6
30944: PUSH
30945: LD_INT 15
30947: PUSH
30948: LD_INT 16
30950: PUSH
30951: LD_INT 7
30953: PUSH
30954: LD_INT 12
30956: PUSH
30957: LD_INT 13
30959: PUSH
30960: LD_INT 10
30962: PUSH
30963: LD_INT 14
30965: PUSH
30966: LD_INT 20
30968: PUSH
30969: LD_INT 21
30971: PUSH
30972: LD_INT 22
30974: PUSH
30975: LD_INT 25
30977: PUSH
30978: LD_INT 32
30980: PUSH
30981: LD_INT 27
30983: PUSH
30984: LD_INT 36
30986: PUSH
30987: LD_INT 69
30989: PUSH
30990: LD_INT 39
30992: PUSH
30993: LD_INT 34
30995: PUSH
30996: LD_INT 40
30998: PUSH
30999: LD_INT 48
31001: PUSH
31002: LD_INT 49
31004: PUSH
31005: LD_INT 50
31007: PUSH
31008: LD_INT 51
31010: PUSH
31011: LD_INT 52
31013: PUSH
31014: LD_INT 53
31016: PUSH
31017: LD_INT 54
31019: PUSH
31020: LD_INT 55
31022: PUSH
31023: LD_INT 56
31025: PUSH
31026: LD_INT 57
31028: PUSH
31029: LD_INT 58
31031: PUSH
31032: LD_INT 59
31034: PUSH
31035: LD_INT 60
31037: PUSH
31038: LD_INT 61
31040: PUSH
31041: LD_INT 62
31043: PUSH
31044: LD_INT 80
31046: PUSH
31047: LD_INT 82
31049: PUSH
31050: LD_INT 83
31052: PUSH
31053: LD_INT 84
31055: PUSH
31056: LD_INT 85
31058: PUSH
31059: LD_INT 86
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: ST_TO_ADDR
31115: GO 31582
31117: LD_INT 2
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31351
31125: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_INT 35
31133: PUSH
31134: LD_INT 45
31136: PUSH
31137: LD_INT 46
31139: PUSH
31140: LD_INT 47
31142: PUSH
31143: LD_INT 82
31145: PUSH
31146: LD_INT 83
31148: PUSH
31149: LD_INT 84
31151: PUSH
31152: LD_INT 85
31154: PUSH
31155: LD_INT 87
31157: PUSH
31158: LD_INT 70
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: LD_INT 11
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 4
31172: PUSH
31173: LD_INT 5
31175: PUSH
31176: LD_INT 6
31178: PUSH
31179: LD_INT 15
31181: PUSH
31182: LD_INT 18
31184: PUSH
31185: LD_INT 7
31187: PUSH
31188: LD_INT 17
31190: PUSH
31191: LD_INT 8
31193: PUSH
31194: LD_INT 20
31196: PUSH
31197: LD_INT 21
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_INT 72
31205: PUSH
31206: LD_INT 26
31208: PUSH
31209: LD_INT 69
31211: PUSH
31212: LD_INT 39
31214: PUSH
31215: LD_INT 40
31217: PUSH
31218: LD_INT 41
31220: PUSH
31221: LD_INT 42
31223: PUSH
31224: LD_INT 43
31226: PUSH
31227: LD_INT 48
31229: PUSH
31230: LD_INT 49
31232: PUSH
31233: LD_INT 50
31235: PUSH
31236: LD_INT 51
31238: PUSH
31239: LD_INT 52
31241: PUSH
31242: LD_INT 53
31244: PUSH
31245: LD_INT 54
31247: PUSH
31248: LD_INT 55
31250: PUSH
31251: LD_INT 56
31253: PUSH
31254: LD_INT 60
31256: PUSH
31257: LD_INT 61
31259: PUSH
31260: LD_INT 62
31262: PUSH
31263: LD_INT 66
31265: PUSH
31266: LD_INT 67
31268: PUSH
31269: LD_INT 68
31271: PUSH
31272: LD_INT 81
31274: PUSH
31275: LD_INT 82
31277: PUSH
31278: LD_INT 83
31280: PUSH
31281: LD_INT 84
31283: PUSH
31284: LD_INT 85
31286: PUSH
31287: LD_INT 87
31289: PUSH
31290: LD_INT 88
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: ST_TO_ADDR
31349: GO 31582
31351: LD_INT 3
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31581
31359: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31360: LD_ADDR_VAR 0 4
31364: PUSH
31365: LD_INT 46
31367: PUSH
31368: LD_INT 47
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 82
31379: PUSH
31380: LD_INT 83
31382: PUSH
31383: LD_INT 84
31385: PUSH
31386: LD_INT 85
31388: PUSH
31389: LD_INT 86
31391: PUSH
31392: LD_INT 11
31394: PUSH
31395: LD_INT 9
31397: PUSH
31398: LD_INT 20
31400: PUSH
31401: LD_INT 19
31403: PUSH
31404: LD_INT 21
31406: PUSH
31407: LD_INT 24
31409: PUSH
31410: LD_INT 22
31412: PUSH
31413: LD_INT 25
31415: PUSH
31416: LD_INT 28
31418: PUSH
31419: LD_INT 29
31421: PUSH
31422: LD_INT 30
31424: PUSH
31425: LD_INT 31
31427: PUSH
31428: LD_INT 37
31430: PUSH
31431: LD_INT 38
31433: PUSH
31434: LD_INT 32
31436: PUSH
31437: LD_INT 27
31439: PUSH
31440: LD_INT 33
31442: PUSH
31443: LD_INT 69
31445: PUSH
31446: LD_INT 39
31448: PUSH
31449: LD_INT 34
31451: PUSH
31452: LD_INT 40
31454: PUSH
31455: LD_INT 71
31457: PUSH
31458: LD_INT 23
31460: PUSH
31461: LD_INT 44
31463: PUSH
31464: LD_INT 48
31466: PUSH
31467: LD_INT 49
31469: PUSH
31470: LD_INT 50
31472: PUSH
31473: LD_INT 51
31475: PUSH
31476: LD_INT 52
31478: PUSH
31479: LD_INT 53
31481: PUSH
31482: LD_INT 54
31484: PUSH
31485: LD_INT 55
31487: PUSH
31488: LD_INT 56
31490: PUSH
31491: LD_INT 57
31493: PUSH
31494: LD_INT 58
31496: PUSH
31497: LD_INT 59
31499: PUSH
31500: LD_INT 63
31502: PUSH
31503: LD_INT 64
31505: PUSH
31506: LD_INT 65
31508: PUSH
31509: LD_INT 82
31511: PUSH
31512: LD_INT 83
31514: PUSH
31515: LD_INT 84
31517: PUSH
31518: LD_INT 85
31520: PUSH
31521: LD_INT 86
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: ST_TO_ADDR
31579: GO 31582
31581: POP
// if state > - 1 and state < 3 then
31582: LD_VAR 0 3
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: GREATER
31591: PUSH
31592: LD_VAR 0 3
31596: PUSH
31597: LD_INT 3
31599: LESS
31600: AND
31601: IFFALSE 31658
// for i in result do
31603: LD_ADDR_VAR 0 5
31607: PUSH
31608: LD_VAR 0 4
31612: PUSH
31613: FOR_IN
31614: IFFALSE 31656
// if GetTech ( i , side ) <> state then
31616: LD_VAR 0 5
31620: PPUSH
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 321
31630: PUSH
31631: LD_VAR 0 3
31635: NONEQUAL
31636: IFFALSE 31654
// result := result diff i ;
31638: LD_ADDR_VAR 0 4
31642: PUSH
31643: LD_VAR 0 4
31647: PUSH
31648: LD_VAR 0 5
31652: DIFF
31653: ST_TO_ADDR
31654: GO 31613
31656: POP
31657: POP
// end ;
31658: LD_VAR 0 4
31662: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31663: LD_INT 0
31665: PPUSH
31666: PPUSH
31667: PPUSH
// result := true ;
31668: LD_ADDR_VAR 0 3
31672: PUSH
31673: LD_INT 1
31675: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31676: LD_ADDR_VAR 0 5
31680: PUSH
31681: LD_VAR 0 2
31685: PPUSH
31686: CALL_OW 480
31690: ST_TO_ADDR
// if not tmp then
31691: LD_VAR 0 5
31695: NOT
31696: IFFALSE 31700
// exit ;
31698: GO 31749
// for i in tmp do
31700: LD_ADDR_VAR 0 4
31704: PUSH
31705: LD_VAR 0 5
31709: PUSH
31710: FOR_IN
31711: IFFALSE 31747
// if GetTech ( i , side ) <> state_researched then
31713: LD_VAR 0 4
31717: PPUSH
31718: LD_VAR 0 1
31722: PPUSH
31723: CALL_OW 321
31727: PUSH
31728: LD_INT 2
31730: NONEQUAL
31731: IFFALSE 31745
// begin result := false ;
31733: LD_ADDR_VAR 0 3
31737: PUSH
31738: LD_INT 0
31740: ST_TO_ADDR
// exit ;
31741: POP
31742: POP
31743: GO 31749
// end ;
31745: GO 31710
31747: POP
31748: POP
// end ;
31749: LD_VAR 0 3
31753: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31754: LD_INT 0
31756: PPUSH
31757: PPUSH
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31769: LD_VAR 0 1
31773: NOT
31774: PUSH
31775: LD_VAR 0 1
31779: PPUSH
31780: CALL_OW 257
31784: PUSH
31785: LD_INT 9
31787: NONEQUAL
31788: OR
31789: IFFALSE 31793
// exit ;
31791: GO 32366
// side := GetSide ( unit ) ;
31793: LD_ADDR_VAR 0 9
31797: PUSH
31798: LD_VAR 0 1
31802: PPUSH
31803: CALL_OW 255
31807: ST_TO_ADDR
// tech_space := tech_spacanom ;
31808: LD_ADDR_VAR 0 12
31812: PUSH
31813: LD_INT 29
31815: ST_TO_ADDR
// tech_time := tech_taurad ;
31816: LD_ADDR_VAR 0 13
31820: PUSH
31821: LD_INT 28
31823: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31824: LD_ADDR_VAR 0 11
31828: PUSH
31829: LD_VAR 0 1
31833: PPUSH
31834: CALL_OW 310
31838: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31839: LD_VAR 0 11
31843: PPUSH
31844: CALL_OW 247
31848: PUSH
31849: LD_INT 2
31851: EQUAL
31852: IFFALSE 31856
// exit ;
31854: GO 32366
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31856: LD_ADDR_VAR 0 8
31860: PUSH
31861: LD_INT 81
31863: PUSH
31864: LD_VAR 0 9
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 3
31875: PUSH
31876: LD_INT 21
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PPUSH
31894: CALL_OW 69
31898: ST_TO_ADDR
// if not tmp then
31899: LD_VAR 0 8
31903: NOT
31904: IFFALSE 31908
// exit ;
31906: GO 32366
// if in_unit then
31908: LD_VAR 0 11
31912: IFFALSE 31936
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31914: LD_ADDR_VAR 0 10
31918: PUSH
31919: LD_VAR 0 8
31923: PPUSH
31924: LD_VAR 0 11
31928: PPUSH
31929: CALL_OW 74
31933: ST_TO_ADDR
31934: GO 31956
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31936: LD_ADDR_VAR 0 10
31940: PUSH
31941: LD_VAR 0 8
31945: PPUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 74
31955: ST_TO_ADDR
// if not enemy then
31956: LD_VAR 0 10
31960: NOT
31961: IFFALSE 31965
// exit ;
31963: GO 32366
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31965: LD_VAR 0 11
31969: PUSH
31970: LD_VAR 0 11
31974: PPUSH
31975: LD_VAR 0 10
31979: PPUSH
31980: CALL_OW 296
31984: PUSH
31985: LD_INT 13
31987: GREATER
31988: AND
31989: PUSH
31990: LD_VAR 0 1
31994: PPUSH
31995: LD_VAR 0 10
31999: PPUSH
32000: CALL_OW 296
32004: PUSH
32005: LD_INT 12
32007: GREATER
32008: OR
32009: IFFALSE 32013
// exit ;
32011: GO 32366
// missile := [ 1 ] ;
32013: LD_ADDR_VAR 0 14
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32024: LD_VAR 0 9
32028: PPUSH
32029: LD_VAR 0 12
32033: PPUSH
32034: CALL_OW 325
32038: IFFALSE 32067
// missile := Replace ( missile , missile + 1 , 2 ) ;
32040: LD_ADDR_VAR 0 14
32044: PUSH
32045: LD_VAR 0 14
32049: PPUSH
32050: LD_VAR 0 14
32054: PUSH
32055: LD_INT 1
32057: PLUS
32058: PPUSH
32059: LD_INT 2
32061: PPUSH
32062: CALL_OW 1
32066: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32067: LD_VAR 0 9
32071: PPUSH
32072: LD_VAR 0 13
32076: PPUSH
32077: CALL_OW 325
32081: PUSH
32082: LD_VAR 0 10
32086: PPUSH
32087: CALL_OW 255
32091: PPUSH
32092: LD_VAR 0 13
32096: PPUSH
32097: CALL_OW 325
32101: NOT
32102: AND
32103: IFFALSE 32132
// missile := Replace ( missile , missile + 1 , 3 ) ;
32105: LD_ADDR_VAR 0 14
32109: PUSH
32110: LD_VAR 0 14
32114: PPUSH
32115: LD_VAR 0 14
32119: PUSH
32120: LD_INT 1
32122: PLUS
32123: PPUSH
32124: LD_INT 3
32126: PPUSH
32127: CALL_OW 1
32131: ST_TO_ADDR
// if missile < 2 then
32132: LD_VAR 0 14
32136: PUSH
32137: LD_INT 2
32139: LESS
32140: IFFALSE 32144
// exit ;
32142: GO 32366
// x := GetX ( enemy ) ;
32144: LD_ADDR_VAR 0 4
32148: PUSH
32149: LD_VAR 0 10
32153: PPUSH
32154: CALL_OW 250
32158: ST_TO_ADDR
// y := GetY ( enemy ) ;
32159: LD_ADDR_VAR 0 5
32163: PUSH
32164: LD_VAR 0 10
32168: PPUSH
32169: CALL_OW 251
32173: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32174: LD_ADDR_VAR 0 6
32178: PUSH
32179: LD_VAR 0 4
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PPUSH
32188: LD_INT 1
32190: PPUSH
32191: CALL_OW 12
32195: PLUS
32196: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32197: LD_ADDR_VAR 0 7
32201: PUSH
32202: LD_VAR 0 5
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PPUSH
32211: LD_INT 1
32213: PPUSH
32214: CALL_OW 12
32218: PLUS
32219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32220: LD_VAR 0 6
32224: PPUSH
32225: LD_VAR 0 7
32229: PPUSH
32230: CALL_OW 488
32234: NOT
32235: IFFALSE 32257
// begin _x := x ;
32237: LD_ADDR_VAR 0 6
32241: PUSH
32242: LD_VAR 0 4
32246: ST_TO_ADDR
// _y := y ;
32247: LD_ADDR_VAR 0 7
32251: PUSH
32252: LD_VAR 0 5
32256: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32257: LD_ADDR_VAR 0 3
32261: PUSH
32262: LD_INT 1
32264: PPUSH
32265: LD_VAR 0 14
32269: PPUSH
32270: CALL_OW 12
32274: ST_TO_ADDR
// case i of 1 :
32275: LD_VAR 0 3
32279: PUSH
32280: LD_INT 1
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32305
32288: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32289: LD_VAR 0 1
32293: PPUSH
32294: LD_VAR 0 10
32298: PPUSH
32299: CALL_OW 115
32303: GO 32366
32305: LD_INT 2
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 32335
32313: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32314: LD_VAR 0 1
32318: PPUSH
32319: LD_VAR 0 6
32323: PPUSH
32324: LD_VAR 0 7
32328: PPUSH
32329: CALL_OW 153
32333: GO 32366
32335: LD_INT 3
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32365
32343: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32344: LD_VAR 0 1
32348: PPUSH
32349: LD_VAR 0 6
32353: PPUSH
32354: LD_VAR 0 7
32358: PPUSH
32359: CALL_OW 154
32363: GO 32366
32365: POP
// end ;
32366: LD_VAR 0 2
32370: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32371: LD_INT 0
32373: PPUSH
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
// if not unit or not building then
32379: LD_VAR 0 1
32383: NOT
32384: PUSH
32385: LD_VAR 0 2
32389: NOT
32390: OR
32391: IFFALSE 32395
// exit ;
32393: GO 32553
// x := GetX ( building ) ;
32395: LD_ADDR_VAR 0 5
32399: PUSH
32400: LD_VAR 0 2
32404: PPUSH
32405: CALL_OW 250
32409: ST_TO_ADDR
// y := GetY ( building ) ;
32410: LD_ADDR_VAR 0 6
32414: PUSH
32415: LD_VAR 0 2
32419: PPUSH
32420: CALL_OW 251
32424: ST_TO_ADDR
// for i = 0 to 5 do
32425: LD_ADDR_VAR 0 4
32429: PUSH
32430: DOUBLE
32431: LD_INT 0
32433: DEC
32434: ST_TO_ADDR
32435: LD_INT 5
32437: PUSH
32438: FOR_TO
32439: IFFALSE 32551
// begin _x := ShiftX ( x , i , 3 ) ;
32441: LD_ADDR_VAR 0 7
32445: PUSH
32446: LD_VAR 0 5
32450: PPUSH
32451: LD_VAR 0 4
32455: PPUSH
32456: LD_INT 3
32458: PPUSH
32459: CALL_OW 272
32463: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32464: LD_ADDR_VAR 0 8
32468: PUSH
32469: LD_VAR 0 6
32473: PPUSH
32474: LD_VAR 0 4
32478: PPUSH
32479: LD_INT 3
32481: PPUSH
32482: CALL_OW 273
32486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32487: LD_VAR 0 7
32491: PPUSH
32492: LD_VAR 0 8
32496: PPUSH
32497: CALL_OW 488
32501: NOT
32502: IFFALSE 32506
// continue ;
32504: GO 32438
// if HexInfo ( _x , _y ) = 0 then
32506: LD_VAR 0 7
32510: PPUSH
32511: LD_VAR 0 8
32515: PPUSH
32516: CALL_OW 428
32520: PUSH
32521: LD_INT 0
32523: EQUAL
32524: IFFALSE 32549
// begin ComMoveXY ( unit , _x , _y ) ;
32526: LD_VAR 0 1
32530: PPUSH
32531: LD_VAR 0 7
32535: PPUSH
32536: LD_VAR 0 8
32540: PPUSH
32541: CALL_OW 111
// exit ;
32545: POP
32546: POP
32547: GO 32553
// end ; end ;
32549: GO 32438
32551: POP
32552: POP
// end ;
32553: LD_VAR 0 3
32557: RET
// export function ScanBase ( side , base_area ) ; begin
32558: LD_INT 0
32560: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32561: LD_ADDR_VAR 0 3
32565: PUSH
32566: LD_VAR 0 2
32570: PPUSH
32571: LD_INT 81
32573: PUSH
32574: LD_VAR 0 1
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PPUSH
32583: CALL_OW 70
32587: ST_TO_ADDR
// end ;
32588: LD_VAR 0 3
32592: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32593: LD_INT 0
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
// result := false ;
32599: LD_ADDR_VAR 0 2
32603: PUSH
32604: LD_INT 0
32606: ST_TO_ADDR
// side := GetSide ( unit ) ;
32607: LD_ADDR_VAR 0 3
32611: PUSH
32612: LD_VAR 0 1
32616: PPUSH
32617: CALL_OW 255
32621: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32622: LD_ADDR_VAR 0 4
32626: PUSH
32627: LD_VAR 0 1
32631: PPUSH
32632: CALL_OW 248
32636: ST_TO_ADDR
// case nat of 1 :
32637: LD_VAR 0 4
32641: PUSH
32642: LD_INT 1
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32661
32650: POP
// tech := tech_lassight ; 2 :
32651: LD_ADDR_VAR 0 5
32655: PUSH
32656: LD_INT 12
32658: ST_TO_ADDR
32659: GO 32700
32661: LD_INT 2
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32669
32667: GO 32680
32669: POP
// tech := tech_mortar ; 3 :
32670: LD_ADDR_VAR 0 5
32674: PUSH
32675: LD_INT 41
32677: ST_TO_ADDR
32678: GO 32700
32680: LD_INT 3
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32699
32688: POP
// tech := tech_bazooka ; end ;
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_INT 44
32696: ST_TO_ADDR
32697: GO 32700
32699: POP
// if Researched ( side , tech ) then
32700: LD_VAR 0 3
32704: PPUSH
32705: LD_VAR 0 5
32709: PPUSH
32710: CALL_OW 325
32714: IFFALSE 32741
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32716: LD_ADDR_VAR 0 2
32720: PUSH
32721: LD_INT 5
32723: PUSH
32724: LD_INT 8
32726: PUSH
32727: LD_INT 9
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: LD_VAR 0 4
32739: ARRAY
32740: ST_TO_ADDR
// end ;
32741: LD_VAR 0 2
32745: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32746: LD_INT 0
32748: PPUSH
32749: PPUSH
32750: PPUSH
// if not mines then
32751: LD_VAR 0 2
32755: NOT
32756: IFFALSE 32760
// exit ;
32758: GO 32904
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_INT 81
32767: PUSH
32768: LD_VAR 0 1
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 21
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PPUSH
32798: CALL_OW 69
32802: ST_TO_ADDR
// for i in mines do
32803: LD_ADDR_VAR 0 4
32807: PUSH
32808: LD_VAR 0 2
32812: PUSH
32813: FOR_IN
32814: IFFALSE 32902
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32816: LD_VAR 0 4
32820: PUSH
32821: LD_INT 1
32823: ARRAY
32824: PPUSH
32825: LD_VAR 0 4
32829: PUSH
32830: LD_INT 2
32832: ARRAY
32833: PPUSH
32834: CALL_OW 458
32838: NOT
32839: IFFALSE 32843
// continue ;
32841: GO 32813
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32843: LD_VAR 0 4
32847: PUSH
32848: LD_INT 1
32850: ARRAY
32851: PPUSH
32852: LD_VAR 0 4
32856: PUSH
32857: LD_INT 2
32859: ARRAY
32860: PPUSH
32861: CALL_OW 428
32865: PUSH
32866: LD_VAR 0 5
32870: IN
32871: IFFALSE 32900
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32873: LD_VAR 0 4
32877: PUSH
32878: LD_INT 1
32880: ARRAY
32881: PPUSH
32882: LD_VAR 0 4
32886: PUSH
32887: LD_INT 2
32889: ARRAY
32890: PPUSH
32891: LD_VAR 0 1
32895: PPUSH
32896: CALL_OW 456
// end ;
32900: GO 32813
32902: POP
32903: POP
// end ;
32904: LD_VAR 0 3
32908: RET
// export function Count ( array ) ; begin
32909: LD_INT 0
32911: PPUSH
// result := array + 0 ;
32912: LD_ADDR_VAR 0 2
32916: PUSH
32917: LD_VAR 0 1
32921: PUSH
32922: LD_INT 0
32924: PLUS
32925: ST_TO_ADDR
// end ;
32926: LD_VAR 0 2
32930: RET
// export function IsEmpty ( building ) ; begin
32931: LD_INT 0
32933: PPUSH
// if not building then
32934: LD_VAR 0 1
32938: NOT
32939: IFFALSE 32943
// exit ;
32941: GO 32986
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32943: LD_ADDR_VAR 0 2
32947: PUSH
32948: LD_VAR 0 1
32952: PUSH
32953: LD_INT 22
32955: PUSH
32956: LD_VAR 0 1
32960: PPUSH
32961: CALL_OW 255
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 58
32972: PUSH
32973: EMPTY
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PPUSH
32980: CALL_OW 69
32984: IN
32985: ST_TO_ADDR
// end ;
32986: LD_VAR 0 2
32990: RET
// export function IsNotFull ( building ) ; var places ; begin
32991: LD_INT 0
32993: PPUSH
32994: PPUSH
// if not building then
32995: LD_VAR 0 1
32999: NOT
33000: IFFALSE 33004
// exit ;
33002: GO 33032
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33004: LD_ADDR_VAR 0 2
33008: PUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: LD_INT 3
33016: PUSH
33017: LD_INT 62
33019: PUSH
33020: EMPTY
33021: LIST
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PPUSH
33027: CALL_OW 72
33031: ST_TO_ADDR
// end ;
33032: LD_VAR 0 2
33036: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33037: LD_INT 0
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
// tmp := [ ] ;
33043: LD_ADDR_VAR 0 3
33047: PUSH
33048: EMPTY
33049: ST_TO_ADDR
// list := [ ] ;
33050: LD_ADDR_VAR 0 5
33054: PUSH
33055: EMPTY
33056: ST_TO_ADDR
// for i = 16 to 25 do
33057: LD_ADDR_VAR 0 4
33061: PUSH
33062: DOUBLE
33063: LD_INT 16
33065: DEC
33066: ST_TO_ADDR
33067: LD_INT 25
33069: PUSH
33070: FOR_TO
33071: IFFALSE 33144
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33073: LD_ADDR_VAR 0 3
33077: PUSH
33078: LD_VAR 0 3
33082: PUSH
33083: LD_INT 22
33085: PUSH
33086: LD_VAR 0 1
33090: PPUSH
33091: CALL_OW 255
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 91
33102: PUSH
33103: LD_VAR 0 1
33107: PUSH
33108: LD_INT 6
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 30
33118: PUSH
33119: LD_VAR 0 4
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: PUSH
33133: EMPTY
33134: LIST
33135: PPUSH
33136: CALL_OW 69
33140: ADD
33141: ST_TO_ADDR
33142: GO 33070
33144: POP
33145: POP
// for i = 1 to tmp do
33146: LD_ADDR_VAR 0 4
33150: PUSH
33151: DOUBLE
33152: LD_INT 1
33154: DEC
33155: ST_TO_ADDR
33156: LD_VAR 0 3
33160: PUSH
33161: FOR_TO
33162: IFFALSE 33250
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33164: LD_ADDR_VAR 0 5
33168: PUSH
33169: LD_VAR 0 5
33173: PUSH
33174: LD_VAR 0 3
33178: PUSH
33179: LD_VAR 0 4
33183: ARRAY
33184: PPUSH
33185: CALL_OW 266
33189: PUSH
33190: LD_VAR 0 3
33194: PUSH
33195: LD_VAR 0 4
33199: ARRAY
33200: PPUSH
33201: CALL_OW 250
33205: PUSH
33206: LD_VAR 0 3
33210: PUSH
33211: LD_VAR 0 4
33215: ARRAY
33216: PPUSH
33217: CALL_OW 251
33221: PUSH
33222: LD_VAR 0 3
33226: PUSH
33227: LD_VAR 0 4
33231: ARRAY
33232: PPUSH
33233: CALL_OW 254
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: PUSH
33244: EMPTY
33245: LIST
33246: ADD
33247: ST_TO_ADDR
33248: GO 33161
33250: POP
33251: POP
// result := list ;
33252: LD_ADDR_VAR 0 2
33256: PUSH
33257: LD_VAR 0 5
33261: ST_TO_ADDR
// end ;
33262: LD_VAR 0 2
33266: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33267: LD_INT 0
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
// if not factory then
33276: LD_VAR 0 1
33280: NOT
33281: IFFALSE 33285
// exit ;
33283: GO 33878
// if control = control_apeman then
33285: LD_VAR 0 4
33289: PUSH
33290: LD_INT 5
33292: EQUAL
33293: IFFALSE 33402
// begin tmp := UnitsInside ( factory ) ;
33295: LD_ADDR_VAR 0 8
33299: PUSH
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 313
33309: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33310: LD_VAR 0 8
33314: PPUSH
33315: LD_INT 25
33317: PUSH
33318: LD_INT 12
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PPUSH
33325: CALL_OW 72
33329: NOT
33330: IFFALSE 33340
// control := control_manual ;
33332: LD_ADDR_VAR 0 4
33336: PUSH
33337: LD_INT 1
33339: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33340: LD_ADDR_VAR 0 8
33344: PUSH
33345: LD_VAR 0 1
33349: PPUSH
33350: CALL 33037 0 1
33354: ST_TO_ADDR
// if tmp then
33355: LD_VAR 0 8
33359: IFFALSE 33402
// begin for i in tmp do
33361: LD_ADDR_VAR 0 7
33365: PUSH
33366: LD_VAR 0 8
33370: PUSH
33371: FOR_IN
33372: IFFALSE 33400
// if i [ 1 ] = b_ext_radio then
33374: LD_VAR 0 7
33378: PUSH
33379: LD_INT 1
33381: ARRAY
33382: PUSH
33383: LD_INT 22
33385: EQUAL
33386: IFFALSE 33398
// begin control := control_remote ;
33388: LD_ADDR_VAR 0 4
33392: PUSH
33393: LD_INT 2
33395: ST_TO_ADDR
// break ;
33396: GO 33400
// end ;
33398: GO 33371
33400: POP
33401: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33402: LD_VAR 0 1
33406: PPUSH
33407: LD_VAR 0 2
33411: PPUSH
33412: LD_VAR 0 3
33416: PPUSH
33417: LD_VAR 0 4
33421: PPUSH
33422: LD_VAR 0 5
33426: PPUSH
33427: CALL_OW 448
33431: IFFALSE 33466
// begin result := [ chassis , engine , control , weapon ] ;
33433: LD_ADDR_VAR 0 6
33437: PUSH
33438: LD_VAR 0 2
33442: PUSH
33443: LD_VAR 0 3
33447: PUSH
33448: LD_VAR 0 4
33452: PUSH
33453: LD_VAR 0 5
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: ST_TO_ADDR
// exit ;
33464: GO 33878
// end ; _chassis := AvailableChassisList ( factory ) ;
33466: LD_ADDR_VAR 0 9
33470: PUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 475
33480: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33481: LD_ADDR_VAR 0 11
33485: PUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL_OW 476
33495: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33496: LD_ADDR_VAR 0 12
33500: PUSH
33501: LD_VAR 0 1
33505: PPUSH
33506: CALL_OW 477
33510: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33511: LD_ADDR_VAR 0 10
33515: PUSH
33516: LD_VAR 0 1
33520: PPUSH
33521: CALL_OW 478
33525: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33526: LD_VAR 0 9
33530: NOT
33531: PUSH
33532: LD_VAR 0 11
33536: NOT
33537: OR
33538: PUSH
33539: LD_VAR 0 12
33543: NOT
33544: OR
33545: PUSH
33546: LD_VAR 0 10
33550: NOT
33551: OR
33552: IFFALSE 33587
// begin result := [ chassis , engine , control , weapon ] ;
33554: LD_ADDR_VAR 0 6
33558: PUSH
33559: LD_VAR 0 2
33563: PUSH
33564: LD_VAR 0 3
33568: PUSH
33569: LD_VAR 0 4
33573: PUSH
33574: LD_VAR 0 5
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: ST_TO_ADDR
// exit ;
33585: GO 33878
// end ; if not chassis in _chassis then
33587: LD_VAR 0 2
33591: PUSH
33592: LD_VAR 0 9
33596: IN
33597: NOT
33598: IFFALSE 33624
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33600: LD_ADDR_VAR 0 2
33604: PUSH
33605: LD_VAR 0 9
33609: PUSH
33610: LD_INT 1
33612: PPUSH
33613: LD_VAR 0 9
33617: PPUSH
33618: CALL_OW 12
33622: ARRAY
33623: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33624: LD_VAR 0 2
33628: PPUSH
33629: LD_VAR 0 3
33633: PPUSH
33634: CALL 33883 0 2
33638: NOT
33639: IFFALSE 33698
// repeat engine := _engine [ 1 ] ;
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_VAR 0 11
33650: PUSH
33651: LD_INT 1
33653: ARRAY
33654: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33655: LD_ADDR_VAR 0 11
33659: PUSH
33660: LD_VAR 0 11
33664: PPUSH
33665: LD_INT 1
33667: PPUSH
33668: CALL_OW 3
33672: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33673: LD_VAR 0 2
33677: PPUSH
33678: LD_VAR 0 3
33682: PPUSH
33683: CALL 33883 0 2
33687: PUSH
33688: LD_VAR 0 11
33692: PUSH
33693: EMPTY
33694: EQUAL
33695: OR
33696: IFFALSE 33641
// if not control in _control then
33698: LD_VAR 0 4
33702: PUSH
33703: LD_VAR 0 12
33707: IN
33708: NOT
33709: IFFALSE 33735
// control := _control [ rand ( 1 , _control ) ] ;
33711: LD_ADDR_VAR 0 4
33715: PUSH
33716: LD_VAR 0 12
33720: PUSH
33721: LD_INT 1
33723: PPUSH
33724: LD_VAR 0 12
33728: PPUSH
33729: CALL_OW 12
33733: ARRAY
33734: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33735: LD_VAR 0 2
33739: PPUSH
33740: LD_VAR 0 5
33744: PPUSH
33745: CALL 34103 0 2
33749: NOT
33750: IFFALSE 33809
// repeat weapon := _weapon [ 1 ] ;
33752: LD_ADDR_VAR 0 5
33756: PUSH
33757: LD_VAR 0 10
33761: PUSH
33762: LD_INT 1
33764: ARRAY
33765: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33766: LD_ADDR_VAR 0 10
33770: PUSH
33771: LD_VAR 0 10
33775: PPUSH
33776: LD_INT 1
33778: PPUSH
33779: CALL_OW 3
33783: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33784: LD_VAR 0 2
33788: PPUSH
33789: LD_VAR 0 5
33793: PPUSH
33794: CALL 34103 0 2
33798: PUSH
33799: LD_VAR 0 10
33803: PUSH
33804: EMPTY
33805: EQUAL
33806: OR
33807: IFFALSE 33752
// result := [ ] ;
33809: LD_ADDR_VAR 0 6
33813: PUSH
33814: EMPTY
33815: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33816: LD_VAR 0 1
33820: PPUSH
33821: LD_VAR 0 2
33825: PPUSH
33826: LD_VAR 0 3
33830: PPUSH
33831: LD_VAR 0 4
33835: PPUSH
33836: LD_VAR 0 5
33840: PPUSH
33841: CALL_OW 448
33845: IFFALSE 33878
// result := [ chassis , engine , control , weapon ] ;
33847: LD_ADDR_VAR 0 6
33851: PUSH
33852: LD_VAR 0 2
33856: PUSH
33857: LD_VAR 0 3
33861: PUSH
33862: LD_VAR 0 4
33866: PUSH
33867: LD_VAR 0 5
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
// end ;
33878: LD_VAR 0 6
33882: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33883: LD_INT 0
33885: PPUSH
// if not chassis or not engine then
33886: LD_VAR 0 1
33890: NOT
33891: PUSH
33892: LD_VAR 0 2
33896: NOT
33897: OR
33898: IFFALSE 33902
// exit ;
33900: GO 34098
// case engine of engine_solar :
33902: LD_VAR 0 2
33906: PUSH
33907: LD_INT 2
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33953
33915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 11
33923: PUSH
33924: LD_INT 12
33926: PUSH
33927: LD_INT 13
33929: PUSH
33930: LD_INT 14
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 3
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: ST_TO_ADDR
33951: GO 34082
33953: LD_INT 1
33955: DOUBLE
33956: EQUAL
33957: IFTRUE 33961
33959: GO 34023
33961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33962: LD_ADDR_VAR 0 3
33966: PUSH
33967: LD_INT 11
33969: PUSH
33970: LD_INT 12
33972: PUSH
33973: LD_INT 13
33975: PUSH
33976: LD_INT 14
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: LD_INT 4
33990: PUSH
33991: LD_INT 5
33993: PUSH
33994: LD_INT 21
33996: PUSH
33997: LD_INT 23
33999: PUSH
34000: LD_INT 22
34002: PUSH
34003: LD_INT 24
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
34021: GO 34082
34023: LD_INT 3
34025: DOUBLE
34026: EQUAL
34027: IFTRUE 34031
34029: GO 34081
34031: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_INT 13
34039: PUSH
34040: LD_INT 14
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: LD_INT 4
34051: PUSH
34052: LD_INT 5
34054: PUSH
34055: LD_INT 21
34057: PUSH
34058: LD_INT 22
34060: PUSH
34061: LD_INT 23
34063: PUSH
34064: LD_INT 24
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: ST_TO_ADDR
34079: GO 34082
34081: POP
// result := ( chassis in result ) ;
34082: LD_ADDR_VAR 0 3
34086: PUSH
34087: LD_VAR 0 1
34091: PUSH
34092: LD_VAR 0 3
34096: IN
34097: ST_TO_ADDR
// end ;
34098: LD_VAR 0 3
34102: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34103: LD_INT 0
34105: PPUSH
// if not chassis or not weapon then
34106: LD_VAR 0 1
34110: NOT
34111: PUSH
34112: LD_VAR 0 2
34116: NOT
34117: OR
34118: IFFALSE 34122
// exit ;
34120: GO 35182
// case weapon of us_machine_gun :
34122: LD_VAR 0 2
34126: PUSH
34127: LD_INT 2
34129: DOUBLE
34130: EQUAL
34131: IFTRUE 34135
34133: GO 34165
34135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34136: LD_ADDR_VAR 0 3
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: LD_INT 5
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: ST_TO_ADDR
34163: GO 35166
34165: LD_INT 3
34167: DOUBLE
34168: EQUAL
34169: IFTRUE 34173
34171: GO 34203
34173: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34174: LD_ADDR_VAR 0 3
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: LD_INT 4
34190: PUSH
34191: LD_INT 5
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
34201: GO 35166
34203: LD_INT 11
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34211
34209: GO 34241
34211: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34212: LD_ADDR_VAR 0 3
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: LD_INT 4
34228: PUSH
34229: LD_INT 5
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
34239: GO 35166
34241: LD_INT 4
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34249
34247: GO 34275
34249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34250: LD_ADDR_VAR 0 3
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 3
34260: PUSH
34261: LD_INT 4
34263: PUSH
34264: LD_INT 5
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 35166
34275: LD_INT 5
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34309
34283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: LD_INT 3
34294: PUSH
34295: LD_INT 4
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
34307: GO 35166
34309: LD_INT 9
34311: DOUBLE
34312: EQUAL
34313: IFTRUE 34317
34315: GO 34343
34317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: LD_INT 3
34328: PUSH
34329: LD_INT 4
34331: PUSH
34332: LD_INT 5
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: ST_TO_ADDR
34341: GO 35166
34343: LD_INT 7
34345: DOUBLE
34346: EQUAL
34347: IFTRUE 34351
34349: GO 34377
34351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34352: LD_ADDR_VAR 0 3
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 3
34362: PUSH
34363: LD_INT 4
34365: PUSH
34366: LD_INT 5
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: ST_TO_ADDR
34375: GO 35166
34377: LD_INT 12
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34385
34383: GO 34411
34385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34386: LD_ADDR_VAR 0 3
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 3
34396: PUSH
34397: LD_INT 4
34399: PUSH
34400: LD_INT 5
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
34409: GO 35166
34411: LD_INT 13
34413: DOUBLE
34414: EQUAL
34415: IFTRUE 34419
34417: GO 34445
34419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: LD_INT 3
34430: PUSH
34431: LD_INT 4
34433: PUSH
34434: LD_INT 5
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: ST_TO_ADDR
34443: GO 35166
34445: LD_INT 14
34447: DOUBLE
34448: EQUAL
34449: IFTRUE 34453
34451: GO 34471
34453: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34454: LD_ADDR_VAR 0 3
34458: PUSH
34459: LD_INT 4
34461: PUSH
34462: LD_INT 5
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: ST_TO_ADDR
34469: GO 35166
34471: LD_INT 6
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34497
34479: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_INT 4
34487: PUSH
34488: LD_INT 5
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: ST_TO_ADDR
34495: GO 35166
34497: LD_INT 10
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34505
34503: GO 34523
34505: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34506: LD_ADDR_VAR 0 3
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: ST_TO_ADDR
34521: GO 35166
34523: LD_INT 22
34525: DOUBLE
34526: EQUAL
34527: IFTRUE 34531
34529: GO 34557
34531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34532: LD_ADDR_VAR 0 3
34536: PUSH
34537: LD_INT 11
34539: PUSH
34540: LD_INT 12
34542: PUSH
34543: LD_INT 13
34545: PUSH
34546: LD_INT 14
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
34555: GO 35166
34557: LD_INT 23
34559: DOUBLE
34560: EQUAL
34561: IFTRUE 34565
34563: GO 34591
34565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_INT 11
34573: PUSH
34574: LD_INT 12
34576: PUSH
34577: LD_INT 13
34579: PUSH
34580: LD_INT 14
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: ST_TO_ADDR
34589: GO 35166
34591: LD_INT 24
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34599
34597: GO 34625
34599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_INT 11
34607: PUSH
34608: LD_INT 12
34610: PUSH
34611: LD_INT 13
34613: PUSH
34614: LD_INT 14
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: ST_TO_ADDR
34623: GO 35166
34625: LD_INT 30
34627: DOUBLE
34628: EQUAL
34629: IFTRUE 34633
34631: GO 34659
34633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34634: LD_ADDR_VAR 0 3
34638: PUSH
34639: LD_INT 11
34641: PUSH
34642: LD_INT 12
34644: PUSH
34645: LD_INT 13
34647: PUSH
34648: LD_INT 14
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: ST_TO_ADDR
34657: GO 35166
34659: LD_INT 25
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34667
34665: GO 34685
34667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34668: LD_ADDR_VAR 0 3
34672: PUSH
34673: LD_INT 13
34675: PUSH
34676: LD_INT 14
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: ST_TO_ADDR
34683: GO 35166
34685: LD_INT 27
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34693
34691: GO 34711
34693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_INT 13
34701: PUSH
34702: LD_INT 14
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: ST_TO_ADDR
34709: GO 35166
34711: LD_INT 92
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 34745
34719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34720: LD_ADDR_VAR 0 3
34724: PUSH
34725: LD_INT 11
34727: PUSH
34728: LD_INT 12
34730: PUSH
34731: LD_INT 13
34733: PUSH
34734: LD_INT 14
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
34743: GO 35166
34745: LD_INT 28
34747: DOUBLE
34748: EQUAL
34749: IFTRUE 34753
34751: GO 34771
34753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_INT 13
34761: PUSH
34762: LD_INT 14
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: ST_TO_ADDR
34769: GO 35166
34771: LD_INT 29
34773: DOUBLE
34774: EQUAL
34775: IFTRUE 34779
34777: GO 34797
34779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34780: LD_ADDR_VAR 0 3
34784: PUSH
34785: LD_INT 13
34787: PUSH
34788: LD_INT 14
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: ST_TO_ADDR
34795: GO 35166
34797: LD_INT 31
34799: DOUBLE
34800: EQUAL
34801: IFTRUE 34805
34803: GO 34823
34805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34806: LD_ADDR_VAR 0 3
34810: PUSH
34811: LD_INT 13
34813: PUSH
34814: LD_INT 14
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: ST_TO_ADDR
34821: GO 35166
34823: LD_INT 26
34825: DOUBLE
34826: EQUAL
34827: IFTRUE 34831
34829: GO 34849
34831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34832: LD_ADDR_VAR 0 3
34836: PUSH
34837: LD_INT 13
34839: PUSH
34840: LD_INT 14
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: ST_TO_ADDR
34847: GO 35166
34849: LD_INT 42
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 34883
34857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34858: LD_ADDR_VAR 0 3
34862: PUSH
34863: LD_INT 21
34865: PUSH
34866: LD_INT 22
34868: PUSH
34869: LD_INT 23
34871: PUSH
34872: LD_INT 24
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: ST_TO_ADDR
34881: GO 35166
34883: LD_INT 43
34885: DOUBLE
34886: EQUAL
34887: IFTRUE 34891
34889: GO 34917
34891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34892: LD_ADDR_VAR 0 3
34896: PUSH
34897: LD_INT 21
34899: PUSH
34900: LD_INT 22
34902: PUSH
34903: LD_INT 23
34905: PUSH
34906: LD_INT 24
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: ST_TO_ADDR
34915: GO 35166
34917: LD_INT 44
34919: DOUBLE
34920: EQUAL
34921: IFTRUE 34925
34923: GO 34951
34925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_INT 21
34933: PUSH
34934: LD_INT 22
34936: PUSH
34937: LD_INT 23
34939: PUSH
34940: LD_INT 24
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: ST_TO_ADDR
34949: GO 35166
34951: LD_INT 45
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 34985
34959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_INT 21
34967: PUSH
34968: LD_INT 22
34970: PUSH
34971: LD_INT 23
34973: PUSH
34974: LD_INT 24
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: ST_TO_ADDR
34983: GO 35166
34985: LD_INT 49
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 35019
34993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_INT 21
35001: PUSH
35002: LD_INT 22
35004: PUSH
35005: LD_INT 23
35007: PUSH
35008: LD_INT 24
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
35017: GO 35166
35019: LD_INT 51
35021: DOUBLE
35022: EQUAL
35023: IFTRUE 35027
35025: GO 35053
35027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_INT 21
35035: PUSH
35036: LD_INT 22
35038: PUSH
35039: LD_INT 23
35041: PUSH
35042: LD_INT 24
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
35051: GO 35166
35053: LD_INT 52
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35087
35061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 21
35069: PUSH
35070: LD_INT 22
35072: PUSH
35073: LD_INT 23
35075: PUSH
35076: LD_INT 24
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: ST_TO_ADDR
35085: GO 35166
35087: LD_INT 53
35089: DOUBLE
35090: EQUAL
35091: IFTRUE 35095
35093: GO 35113
35095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_INT 23
35103: PUSH
35104: LD_INT 24
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: ST_TO_ADDR
35111: GO 35166
35113: LD_INT 46
35115: DOUBLE
35116: EQUAL
35117: IFTRUE 35121
35119: GO 35139
35121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 23
35129: PUSH
35130: LD_INT 24
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: ST_TO_ADDR
35137: GO 35166
35139: LD_INT 47
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35165
35147: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_INT 23
35155: PUSH
35156: LD_INT 24
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: ST_TO_ADDR
35163: GO 35166
35165: POP
// result := ( chassis in result ) ;
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_VAR 0 1
35175: PUSH
35176: LD_VAR 0 3
35180: IN
35181: ST_TO_ADDR
// end ;
35182: LD_VAR 0 3
35186: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35187: LD_INT 0
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
// result := array ;
35196: LD_ADDR_VAR 0 5
35200: PUSH
35201: LD_VAR 0 1
35205: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35206: LD_VAR 0 1
35210: NOT
35211: PUSH
35212: LD_VAR 0 2
35216: NOT
35217: OR
35218: PUSH
35219: LD_VAR 0 3
35223: NOT
35224: OR
35225: PUSH
35226: LD_VAR 0 2
35230: PUSH
35231: LD_VAR 0 1
35235: GREATER
35236: OR
35237: PUSH
35238: LD_VAR 0 3
35242: PUSH
35243: LD_VAR 0 1
35247: GREATER
35248: OR
35249: IFFALSE 35253
// exit ;
35251: GO 35549
// if direction then
35253: LD_VAR 0 4
35257: IFFALSE 35321
// begin d := 1 ;
35259: LD_ADDR_VAR 0 9
35263: PUSH
35264: LD_INT 1
35266: ST_TO_ADDR
// if i_from > i_to then
35267: LD_VAR 0 2
35271: PUSH
35272: LD_VAR 0 3
35276: GREATER
35277: IFFALSE 35303
// length := ( array - i_from ) + i_to else
35279: LD_ADDR_VAR 0 11
35283: PUSH
35284: LD_VAR 0 1
35288: PUSH
35289: LD_VAR 0 2
35293: MINUS
35294: PUSH
35295: LD_VAR 0 3
35299: PLUS
35300: ST_TO_ADDR
35301: GO 35319
// length := i_to - i_from ;
35303: LD_ADDR_VAR 0 11
35307: PUSH
35308: LD_VAR 0 3
35312: PUSH
35313: LD_VAR 0 2
35317: MINUS
35318: ST_TO_ADDR
// end else
35319: GO 35382
// begin d := - 1 ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: ST_TO_ADDR
// if i_from > i_to then
35330: LD_VAR 0 2
35334: PUSH
35335: LD_VAR 0 3
35339: GREATER
35340: IFFALSE 35360
// length := i_from - i_to else
35342: LD_ADDR_VAR 0 11
35346: PUSH
35347: LD_VAR 0 2
35351: PUSH
35352: LD_VAR 0 3
35356: MINUS
35357: ST_TO_ADDR
35358: GO 35382
// length := ( array - i_to ) + i_from ;
35360: LD_ADDR_VAR 0 11
35364: PUSH
35365: LD_VAR 0 1
35369: PUSH
35370: LD_VAR 0 3
35374: MINUS
35375: PUSH
35376: LD_VAR 0 2
35380: PLUS
35381: ST_TO_ADDR
// end ; if not length then
35382: LD_VAR 0 11
35386: NOT
35387: IFFALSE 35391
// exit ;
35389: GO 35549
// tmp := array ;
35391: LD_ADDR_VAR 0 10
35395: PUSH
35396: LD_VAR 0 1
35400: ST_TO_ADDR
// for i = 1 to length do
35401: LD_ADDR_VAR 0 6
35405: PUSH
35406: DOUBLE
35407: LD_INT 1
35409: DEC
35410: ST_TO_ADDR
35411: LD_VAR 0 11
35415: PUSH
35416: FOR_TO
35417: IFFALSE 35537
// begin for j = 1 to array do
35419: LD_ADDR_VAR 0 7
35423: PUSH
35424: DOUBLE
35425: LD_INT 1
35427: DEC
35428: ST_TO_ADDR
35429: LD_VAR 0 1
35433: PUSH
35434: FOR_TO
35435: IFFALSE 35523
// begin k := j + d ;
35437: LD_ADDR_VAR 0 8
35441: PUSH
35442: LD_VAR 0 7
35446: PUSH
35447: LD_VAR 0 9
35451: PLUS
35452: ST_TO_ADDR
// if k > array then
35453: LD_VAR 0 8
35457: PUSH
35458: LD_VAR 0 1
35462: GREATER
35463: IFFALSE 35473
// k := 1 ;
35465: LD_ADDR_VAR 0 8
35469: PUSH
35470: LD_INT 1
35472: ST_TO_ADDR
// if not k then
35473: LD_VAR 0 8
35477: NOT
35478: IFFALSE 35490
// k := array ;
35480: LD_ADDR_VAR 0 8
35484: PUSH
35485: LD_VAR 0 1
35489: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35490: LD_ADDR_VAR 0 10
35494: PUSH
35495: LD_VAR 0 10
35499: PPUSH
35500: LD_VAR 0 8
35504: PPUSH
35505: LD_VAR 0 1
35509: PUSH
35510: LD_VAR 0 7
35514: ARRAY
35515: PPUSH
35516: CALL_OW 1
35520: ST_TO_ADDR
// end ;
35521: GO 35434
35523: POP
35524: POP
// array := tmp ;
35525: LD_ADDR_VAR 0 1
35529: PUSH
35530: LD_VAR 0 10
35534: ST_TO_ADDR
// end ;
35535: GO 35416
35537: POP
35538: POP
// result := array ;
35539: LD_ADDR_VAR 0 5
35543: PUSH
35544: LD_VAR 0 1
35548: ST_TO_ADDR
// end ;
35549: LD_VAR 0 5
35553: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35554: LD_INT 0
35556: PPUSH
35557: PPUSH
// result := 0 ;
35558: LD_ADDR_VAR 0 3
35562: PUSH
35563: LD_INT 0
35565: ST_TO_ADDR
// if not array or not value in array then
35566: LD_VAR 0 1
35570: NOT
35571: PUSH
35572: LD_VAR 0 2
35576: PUSH
35577: LD_VAR 0 1
35581: IN
35582: NOT
35583: OR
35584: IFFALSE 35588
// exit ;
35586: GO 35642
// for i = 1 to array do
35588: LD_ADDR_VAR 0 4
35592: PUSH
35593: DOUBLE
35594: LD_INT 1
35596: DEC
35597: ST_TO_ADDR
35598: LD_VAR 0 1
35602: PUSH
35603: FOR_TO
35604: IFFALSE 35640
// if value = array [ i ] then
35606: LD_VAR 0 2
35610: PUSH
35611: LD_VAR 0 1
35615: PUSH
35616: LD_VAR 0 4
35620: ARRAY
35621: EQUAL
35622: IFFALSE 35638
// begin result := i ;
35624: LD_ADDR_VAR 0 3
35628: PUSH
35629: LD_VAR 0 4
35633: ST_TO_ADDR
// exit ;
35634: POP
35635: POP
35636: GO 35642
// end ;
35638: GO 35603
35640: POP
35641: POP
// end ;
35642: LD_VAR 0 3
35646: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35647: LD_INT 0
35649: PPUSH
// vc_chassis := chassis ;
35650: LD_ADDR_OWVAR 37
35654: PUSH
35655: LD_VAR 0 1
35659: ST_TO_ADDR
// vc_engine := engine ;
35660: LD_ADDR_OWVAR 39
35664: PUSH
35665: LD_VAR 0 2
35669: ST_TO_ADDR
// vc_control := control ;
35670: LD_ADDR_OWVAR 38
35674: PUSH
35675: LD_VAR 0 3
35679: ST_TO_ADDR
// vc_weapon := weapon ;
35680: LD_ADDR_OWVAR 40
35684: PUSH
35685: LD_VAR 0 4
35689: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35690: LD_ADDR_OWVAR 41
35694: PUSH
35695: LD_VAR 0 5
35699: ST_TO_ADDR
// end ;
35700: LD_VAR 0 6
35704: RET
// export function WantPlant ( unit ) ; var task ; begin
35705: LD_INT 0
35707: PPUSH
35708: PPUSH
// result := false ;
35709: LD_ADDR_VAR 0 2
35713: PUSH
35714: LD_INT 0
35716: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35717: LD_ADDR_VAR 0 3
35721: PUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 437
35731: ST_TO_ADDR
// if task then
35732: LD_VAR 0 3
35736: IFFALSE 35764
// if task [ 1 ] [ 1 ] = p then
35738: LD_VAR 0 3
35742: PUSH
35743: LD_INT 1
35745: ARRAY
35746: PUSH
35747: LD_INT 1
35749: ARRAY
35750: PUSH
35751: LD_STRING p
35753: EQUAL
35754: IFFALSE 35764
// result := true ;
35756: LD_ADDR_VAR 0 2
35760: PUSH
35761: LD_INT 1
35763: ST_TO_ADDR
// end ;
35764: LD_VAR 0 2
35768: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35769: LD_INT 0
35771: PPUSH
35772: PPUSH
35773: PPUSH
35774: PPUSH
// if pos < 1 then
35775: LD_VAR 0 2
35779: PUSH
35780: LD_INT 1
35782: LESS
35783: IFFALSE 35787
// exit ;
35785: GO 36090
// if pos = 1 then
35787: LD_VAR 0 2
35791: PUSH
35792: LD_INT 1
35794: EQUAL
35795: IFFALSE 35828
// result := Replace ( arr , pos [ 1 ] , value ) else
35797: LD_ADDR_VAR 0 4
35801: PUSH
35802: LD_VAR 0 1
35806: PPUSH
35807: LD_VAR 0 2
35811: PUSH
35812: LD_INT 1
35814: ARRAY
35815: PPUSH
35816: LD_VAR 0 3
35820: PPUSH
35821: CALL_OW 1
35825: ST_TO_ADDR
35826: GO 36090
// begin tmp := arr ;
35828: LD_ADDR_VAR 0 6
35832: PUSH
35833: LD_VAR 0 1
35837: ST_TO_ADDR
// s_arr := [ tmp ] ;
35838: LD_ADDR_VAR 0 7
35842: PUSH
35843: LD_VAR 0 6
35847: PUSH
35848: EMPTY
35849: LIST
35850: ST_TO_ADDR
// for i = 1 to pos - 1 do
35851: LD_ADDR_VAR 0 5
35855: PUSH
35856: DOUBLE
35857: LD_INT 1
35859: DEC
35860: ST_TO_ADDR
35861: LD_VAR 0 2
35865: PUSH
35866: LD_INT 1
35868: MINUS
35869: PUSH
35870: FOR_TO
35871: IFFALSE 35916
// begin tmp := tmp [ pos [ i ] ] ;
35873: LD_ADDR_VAR 0 6
35877: PUSH
35878: LD_VAR 0 6
35882: PUSH
35883: LD_VAR 0 2
35887: PUSH
35888: LD_VAR 0 5
35892: ARRAY
35893: ARRAY
35894: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35895: LD_ADDR_VAR 0 7
35899: PUSH
35900: LD_VAR 0 7
35904: PUSH
35905: LD_VAR 0 6
35909: PUSH
35910: EMPTY
35911: LIST
35912: ADD
35913: ST_TO_ADDR
// end ;
35914: GO 35870
35916: POP
35917: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35918: LD_ADDR_VAR 0 6
35922: PUSH
35923: LD_VAR 0 6
35927: PPUSH
35928: LD_VAR 0 2
35932: PUSH
35933: LD_VAR 0 2
35937: ARRAY
35938: PPUSH
35939: LD_VAR 0 3
35943: PPUSH
35944: CALL_OW 1
35948: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35949: LD_ADDR_VAR 0 7
35953: PUSH
35954: LD_VAR 0 7
35958: PPUSH
35959: LD_VAR 0 7
35963: PPUSH
35964: LD_VAR 0 6
35968: PPUSH
35969: CALL_OW 1
35973: ST_TO_ADDR
// for i = s_arr downto 2 do
35974: LD_ADDR_VAR 0 5
35978: PUSH
35979: DOUBLE
35980: LD_VAR 0 7
35984: INC
35985: ST_TO_ADDR
35986: LD_INT 2
35988: PUSH
35989: FOR_DOWNTO
35990: IFFALSE 36074
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35992: LD_ADDR_VAR 0 6
35996: PUSH
35997: LD_VAR 0 7
36001: PUSH
36002: LD_VAR 0 5
36006: PUSH
36007: LD_INT 1
36009: MINUS
36010: ARRAY
36011: PPUSH
36012: LD_VAR 0 2
36016: PUSH
36017: LD_VAR 0 5
36021: PUSH
36022: LD_INT 1
36024: MINUS
36025: ARRAY
36026: PPUSH
36027: LD_VAR 0 7
36031: PUSH
36032: LD_VAR 0 5
36036: ARRAY
36037: PPUSH
36038: CALL_OW 1
36042: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36043: LD_ADDR_VAR 0 7
36047: PUSH
36048: LD_VAR 0 7
36052: PPUSH
36053: LD_VAR 0 5
36057: PUSH
36058: LD_INT 1
36060: MINUS
36061: PPUSH
36062: LD_VAR 0 6
36066: PPUSH
36067: CALL_OW 1
36071: ST_TO_ADDR
// end ;
36072: GO 35989
36074: POP
36075: POP
// result := s_arr [ 1 ] ;
36076: LD_ADDR_VAR 0 4
36080: PUSH
36081: LD_VAR 0 7
36085: PUSH
36086: LD_INT 1
36088: ARRAY
36089: ST_TO_ADDR
// end ; end ;
36090: LD_VAR 0 4
36094: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36095: LD_INT 0
36097: PPUSH
36098: PPUSH
// if not list then
36099: LD_VAR 0 1
36103: NOT
36104: IFFALSE 36108
// exit ;
36106: GO 36199
// i := list [ pos1 ] ;
36108: LD_ADDR_VAR 0 5
36112: PUSH
36113: LD_VAR 0 1
36117: PUSH
36118: LD_VAR 0 2
36122: ARRAY
36123: ST_TO_ADDR
// if not i then
36124: LD_VAR 0 5
36128: NOT
36129: IFFALSE 36133
// exit ;
36131: GO 36199
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36133: LD_ADDR_VAR 0 1
36137: PUSH
36138: LD_VAR 0 1
36142: PPUSH
36143: LD_VAR 0 2
36147: PPUSH
36148: LD_VAR 0 1
36152: PUSH
36153: LD_VAR 0 3
36157: ARRAY
36158: PPUSH
36159: CALL_OW 1
36163: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36164: LD_ADDR_VAR 0 1
36168: PUSH
36169: LD_VAR 0 1
36173: PPUSH
36174: LD_VAR 0 3
36178: PPUSH
36179: LD_VAR 0 5
36183: PPUSH
36184: CALL_OW 1
36188: ST_TO_ADDR
// result := list ;
36189: LD_ADDR_VAR 0 4
36193: PUSH
36194: LD_VAR 0 1
36198: ST_TO_ADDR
// end ;
36199: LD_VAR 0 4
36203: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36204: LD_INT 0
36206: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36207: LD_ADDR_VAR 0 5
36211: PUSH
36212: LD_VAR 0 1
36216: PPUSH
36217: CALL_OW 250
36221: PPUSH
36222: LD_VAR 0 1
36226: PPUSH
36227: CALL_OW 251
36231: PPUSH
36232: LD_VAR 0 2
36236: PPUSH
36237: LD_VAR 0 3
36241: PPUSH
36242: LD_VAR 0 4
36246: PPUSH
36247: CALL 36625 0 5
36251: ST_TO_ADDR
// end ;
36252: LD_VAR 0 5
36256: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36257: LD_INT 0
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
// if not list or not unit then
36263: LD_VAR 0 2
36267: NOT
36268: PUSH
36269: LD_VAR 0 1
36273: NOT
36274: OR
36275: IFFALSE 36279
// exit ;
36277: GO 36620
// result := [ ] ;
36279: LD_ADDR_VAR 0 5
36283: PUSH
36284: EMPTY
36285: ST_TO_ADDR
// for i in list do
36286: LD_ADDR_VAR 0 6
36290: PUSH
36291: LD_VAR 0 2
36295: PUSH
36296: FOR_IN
36297: IFFALSE 36515
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36299: LD_ADDR_VAR 0 8
36303: PUSH
36304: LD_VAR 0 1
36308: PPUSH
36309: LD_VAR 0 6
36313: PUSH
36314: LD_INT 1
36316: ARRAY
36317: PPUSH
36318: LD_VAR 0 6
36322: PUSH
36323: LD_INT 2
36325: ARRAY
36326: PPUSH
36327: CALL_OW 297
36331: ST_TO_ADDR
// if not Count ( result ) then
36332: LD_VAR 0 5
36336: PPUSH
36337: CALL 32909 0 1
36341: NOT
36342: IFFALSE 36375
// begin result := Join ( result , [ i , tmp ] ) ;
36344: LD_ADDR_VAR 0 5
36348: PUSH
36349: LD_VAR 0 5
36353: PPUSH
36354: LD_VAR 0 6
36358: PUSH
36359: LD_VAR 0 8
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PPUSH
36368: CALL 68498 0 2
36372: ST_TO_ADDR
// continue ;
36373: GO 36296
// end ; if result [ result ] [ 2 ] <= tmp then
36375: LD_VAR 0 5
36379: PUSH
36380: LD_VAR 0 5
36384: ARRAY
36385: PUSH
36386: LD_INT 2
36388: ARRAY
36389: PUSH
36390: LD_VAR 0 8
36394: LESSEQUAL
36395: IFFALSE 36428
// result := Join ( result , [ i , tmp ] ) else
36397: LD_ADDR_VAR 0 5
36401: PUSH
36402: LD_VAR 0 5
36406: PPUSH
36407: LD_VAR 0 6
36411: PUSH
36412: LD_VAR 0 8
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PPUSH
36421: CALL 68498 0 2
36425: ST_TO_ADDR
36426: GO 36513
// begin for j := 1 to Count ( result ) do
36428: LD_ADDR_VAR 0 7
36432: PUSH
36433: DOUBLE
36434: LD_INT 1
36436: DEC
36437: ST_TO_ADDR
36438: LD_VAR 0 5
36442: PPUSH
36443: CALL 32909 0 1
36447: PUSH
36448: FOR_TO
36449: IFFALSE 36511
// begin if tmp < result [ j ] [ 2 ] then
36451: LD_VAR 0 8
36455: PUSH
36456: LD_VAR 0 5
36460: PUSH
36461: LD_VAR 0 7
36465: ARRAY
36466: PUSH
36467: LD_INT 2
36469: ARRAY
36470: LESS
36471: IFFALSE 36509
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36473: LD_ADDR_VAR 0 5
36477: PUSH
36478: LD_VAR 0 5
36482: PPUSH
36483: LD_VAR 0 7
36487: PPUSH
36488: LD_VAR 0 6
36492: PUSH
36493: LD_VAR 0 8
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PPUSH
36502: CALL_OW 2
36506: ST_TO_ADDR
// break ;
36507: GO 36511
// end ; end ;
36509: GO 36448
36511: POP
36512: POP
// end ; end ;
36513: GO 36296
36515: POP
36516: POP
// if result and not asc then
36517: LD_VAR 0 5
36521: PUSH
36522: LD_VAR 0 3
36526: NOT
36527: AND
36528: IFFALSE 36545
// result := ReverseArray ( result ) ;
36530: LD_ADDR_VAR 0 5
36534: PUSH
36535: LD_VAR 0 5
36539: PPUSH
36540: CALL 63785 0 1
36544: ST_TO_ADDR
// tmp := [ ] ;
36545: LD_ADDR_VAR 0 8
36549: PUSH
36550: EMPTY
36551: ST_TO_ADDR
// if mode then
36552: LD_VAR 0 4
36556: IFFALSE 36620
// begin for i := 1 to result do
36558: LD_ADDR_VAR 0 6
36562: PUSH
36563: DOUBLE
36564: LD_INT 1
36566: DEC
36567: ST_TO_ADDR
36568: LD_VAR 0 5
36572: PUSH
36573: FOR_TO
36574: IFFALSE 36608
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36576: LD_ADDR_VAR 0 8
36580: PUSH
36581: LD_VAR 0 8
36585: PPUSH
36586: LD_VAR 0 5
36590: PUSH
36591: LD_VAR 0 6
36595: ARRAY
36596: PUSH
36597: LD_INT 1
36599: ARRAY
36600: PPUSH
36601: CALL 68498 0 2
36605: ST_TO_ADDR
36606: GO 36573
36608: POP
36609: POP
// result := tmp ;
36610: LD_ADDR_VAR 0 5
36614: PUSH
36615: LD_VAR 0 8
36619: ST_TO_ADDR
// end ; end ;
36620: LD_VAR 0 5
36624: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36625: LD_INT 0
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
// if not list then
36631: LD_VAR 0 3
36635: NOT
36636: IFFALSE 36640
// exit ;
36638: GO 37028
// result := [ ] ;
36640: LD_ADDR_VAR 0 6
36644: PUSH
36645: EMPTY
36646: ST_TO_ADDR
// for i in list do
36647: LD_ADDR_VAR 0 7
36651: PUSH
36652: LD_VAR 0 3
36656: PUSH
36657: FOR_IN
36658: IFFALSE 36860
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36660: LD_ADDR_VAR 0 9
36664: PUSH
36665: LD_VAR 0 7
36669: PPUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: LD_VAR 0 2
36679: PPUSH
36680: CALL_OW 297
36684: ST_TO_ADDR
// if not result then
36685: LD_VAR 0 6
36689: NOT
36690: IFFALSE 36716
// result := [ [ i , tmp ] ] else
36692: LD_ADDR_VAR 0 6
36696: PUSH
36697: LD_VAR 0 7
36701: PUSH
36702: LD_VAR 0 9
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: ST_TO_ADDR
36714: GO 36858
// begin if result [ result ] [ 2 ] < tmp then
36716: LD_VAR 0 6
36720: PUSH
36721: LD_VAR 0 6
36725: ARRAY
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: PUSH
36731: LD_VAR 0 9
36735: LESS
36736: IFFALSE 36778
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36738: LD_ADDR_VAR 0 6
36742: PUSH
36743: LD_VAR 0 6
36747: PPUSH
36748: LD_VAR 0 6
36752: PUSH
36753: LD_INT 1
36755: PLUS
36756: PPUSH
36757: LD_VAR 0 7
36761: PUSH
36762: LD_VAR 0 9
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PPUSH
36771: CALL_OW 2
36775: ST_TO_ADDR
36776: GO 36858
// for j = 1 to result do
36778: LD_ADDR_VAR 0 8
36782: PUSH
36783: DOUBLE
36784: LD_INT 1
36786: DEC
36787: ST_TO_ADDR
36788: LD_VAR 0 6
36792: PUSH
36793: FOR_TO
36794: IFFALSE 36856
// begin if tmp < result [ j ] [ 2 ] then
36796: LD_VAR 0 9
36800: PUSH
36801: LD_VAR 0 6
36805: PUSH
36806: LD_VAR 0 8
36810: ARRAY
36811: PUSH
36812: LD_INT 2
36814: ARRAY
36815: LESS
36816: IFFALSE 36854
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36818: LD_ADDR_VAR 0 6
36822: PUSH
36823: LD_VAR 0 6
36827: PPUSH
36828: LD_VAR 0 8
36832: PPUSH
36833: LD_VAR 0 7
36837: PUSH
36838: LD_VAR 0 9
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PPUSH
36847: CALL_OW 2
36851: ST_TO_ADDR
// break ;
36852: GO 36856
// end ; end ;
36854: GO 36793
36856: POP
36857: POP
// end ; end ;
36858: GO 36657
36860: POP
36861: POP
// if result and not asc then
36862: LD_VAR 0 6
36866: PUSH
36867: LD_VAR 0 4
36871: NOT
36872: AND
36873: IFFALSE 36948
// begin tmp := result ;
36875: LD_ADDR_VAR 0 9
36879: PUSH
36880: LD_VAR 0 6
36884: ST_TO_ADDR
// for i = tmp downto 1 do
36885: LD_ADDR_VAR 0 7
36889: PUSH
36890: DOUBLE
36891: LD_VAR 0 9
36895: INC
36896: ST_TO_ADDR
36897: LD_INT 1
36899: PUSH
36900: FOR_DOWNTO
36901: IFFALSE 36946
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36903: LD_ADDR_VAR 0 6
36907: PUSH
36908: LD_VAR 0 6
36912: PPUSH
36913: LD_VAR 0 9
36917: PUSH
36918: LD_VAR 0 7
36922: MINUS
36923: PUSH
36924: LD_INT 1
36926: PLUS
36927: PPUSH
36928: LD_VAR 0 9
36932: PUSH
36933: LD_VAR 0 7
36937: ARRAY
36938: PPUSH
36939: CALL_OW 1
36943: ST_TO_ADDR
36944: GO 36900
36946: POP
36947: POP
// end ; tmp := [ ] ;
36948: LD_ADDR_VAR 0 9
36952: PUSH
36953: EMPTY
36954: ST_TO_ADDR
// if mode then
36955: LD_VAR 0 5
36959: IFFALSE 37028
// begin for i = 1 to result do
36961: LD_ADDR_VAR 0 7
36965: PUSH
36966: DOUBLE
36967: LD_INT 1
36969: DEC
36970: ST_TO_ADDR
36971: LD_VAR 0 6
36975: PUSH
36976: FOR_TO
36977: IFFALSE 37016
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36979: LD_ADDR_VAR 0 9
36983: PUSH
36984: LD_VAR 0 9
36988: PPUSH
36989: LD_VAR 0 7
36993: PPUSH
36994: LD_VAR 0 6
36998: PUSH
36999: LD_VAR 0 7
37003: ARRAY
37004: PUSH
37005: LD_INT 1
37007: ARRAY
37008: PPUSH
37009: CALL_OW 1
37013: ST_TO_ADDR
37014: GO 36976
37016: POP
37017: POP
// result := tmp ;
37018: LD_ADDR_VAR 0 6
37022: PUSH
37023: LD_VAR 0 9
37027: ST_TO_ADDR
// end ; end ;
37028: LD_VAR 0 6
37032: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37041: LD_ADDR_VAR 0 5
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: ST_TO_ADDR
// if not x or not y then
37063: LD_VAR 0 2
37067: NOT
37068: PUSH
37069: LD_VAR 0 3
37073: NOT
37074: OR
37075: IFFALSE 37079
// exit ;
37077: GO 38729
// if not range then
37079: LD_VAR 0 4
37083: NOT
37084: IFFALSE 37094
// range := 10 ;
37086: LD_ADDR_VAR 0 4
37090: PUSH
37091: LD_INT 10
37093: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37094: LD_ADDR_VAR 0 8
37098: PUSH
37099: LD_INT 81
37101: PUSH
37102: LD_VAR 0 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 92
37113: PUSH
37114: LD_VAR 0 2
37118: PUSH
37119: LD_VAR 0 3
37123: PUSH
37124: LD_VAR 0 4
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: LD_INT 21
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: PPUSH
37157: CALL_OW 69
37161: ST_TO_ADDR
// if not tmp then
37162: LD_VAR 0 8
37166: NOT
37167: IFFALSE 37171
// exit ;
37169: GO 38729
// for i in tmp do
37171: LD_ADDR_VAR 0 6
37175: PUSH
37176: LD_VAR 0 8
37180: PUSH
37181: FOR_IN
37182: IFFALSE 38704
// begin points := [ 0 , 0 , 0 ] ;
37184: LD_ADDR_VAR 0 9
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
// bpoints := 1 ;
37203: LD_ADDR_VAR 0 10
37207: PUSH
37208: LD_INT 1
37210: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37211: LD_VAR 0 6
37215: PPUSH
37216: CALL_OW 247
37220: PUSH
37221: LD_INT 1
37223: DOUBLE
37224: EQUAL
37225: IFTRUE 37229
37227: GO 37807
37229: POP
// begin if GetClass ( i ) = 1 then
37230: LD_VAR 0 6
37234: PPUSH
37235: CALL_OW 257
37239: PUSH
37240: LD_INT 1
37242: EQUAL
37243: IFFALSE 37264
// points := [ 10 , 5 , 3 ] ;
37245: LD_ADDR_VAR 0 9
37249: PUSH
37250: LD_INT 10
37252: PUSH
37253: LD_INT 5
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37264: LD_VAR 0 6
37268: PPUSH
37269: CALL_OW 257
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: LD_INT 4
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: IN
37288: IFFALSE 37309
// points := [ 3 , 2 , 1 ] ;
37290: LD_ADDR_VAR 0 9
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37309: LD_VAR 0 6
37313: PPUSH
37314: CALL_OW 257
37318: PUSH
37319: LD_INT 5
37321: EQUAL
37322: IFFALSE 37343
// points := [ 130 , 5 , 2 ] ;
37324: LD_ADDR_VAR 0 9
37328: PUSH
37329: LD_INT 130
37331: PUSH
37332: LD_INT 5
37334: PUSH
37335: LD_INT 2
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37343: LD_VAR 0 6
37347: PPUSH
37348: CALL_OW 257
37352: PUSH
37353: LD_INT 8
37355: EQUAL
37356: IFFALSE 37377
// points := [ 35 , 35 , 30 ] ;
37358: LD_ADDR_VAR 0 9
37362: PUSH
37363: LD_INT 35
37365: PUSH
37366: LD_INT 35
37368: PUSH
37369: LD_INT 30
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37377: LD_VAR 0 6
37381: PPUSH
37382: CALL_OW 257
37386: PUSH
37387: LD_INT 9
37389: EQUAL
37390: IFFALSE 37411
// points := [ 20 , 55 , 40 ] ;
37392: LD_ADDR_VAR 0 9
37396: PUSH
37397: LD_INT 20
37399: PUSH
37400: LD_INT 55
37402: PUSH
37403: LD_INT 40
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37411: LD_VAR 0 6
37415: PPUSH
37416: CALL_OW 257
37420: PUSH
37421: LD_INT 12
37423: PUSH
37424: LD_INT 16
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: IN
37431: IFFALSE 37452
// points := [ 5 , 3 , 2 ] ;
37433: LD_ADDR_VAR 0 9
37437: PUSH
37438: LD_INT 5
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37452: LD_VAR 0 6
37456: PPUSH
37457: CALL_OW 257
37461: PUSH
37462: LD_INT 17
37464: EQUAL
37465: IFFALSE 37486
// points := [ 100 , 50 , 75 ] ;
37467: LD_ADDR_VAR 0 9
37471: PUSH
37472: LD_INT 100
37474: PUSH
37475: LD_INT 50
37477: PUSH
37478: LD_INT 75
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37486: LD_VAR 0 6
37490: PPUSH
37491: CALL_OW 257
37495: PUSH
37496: LD_INT 15
37498: EQUAL
37499: IFFALSE 37520
// points := [ 10 , 5 , 3 ] ;
37501: LD_ADDR_VAR 0 9
37505: PUSH
37506: LD_INT 10
37508: PUSH
37509: LD_INT 5
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37520: LD_VAR 0 6
37524: PPUSH
37525: CALL_OW 257
37529: PUSH
37530: LD_INT 14
37532: EQUAL
37533: IFFALSE 37554
// points := [ 10 , 0 , 0 ] ;
37535: LD_ADDR_VAR 0 9
37539: PUSH
37540: LD_INT 10
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37554: LD_VAR 0 6
37558: PPUSH
37559: CALL_OW 257
37563: PUSH
37564: LD_INT 11
37566: EQUAL
37567: IFFALSE 37588
// points := [ 30 , 10 , 5 ] ;
37569: LD_ADDR_VAR 0 9
37573: PUSH
37574: LD_INT 30
37576: PUSH
37577: LD_INT 10
37579: PUSH
37580: LD_INT 5
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37588: LD_VAR 0 1
37592: PPUSH
37593: LD_INT 5
37595: PPUSH
37596: CALL_OW 321
37600: PUSH
37601: LD_INT 2
37603: EQUAL
37604: IFFALSE 37621
// bpoints := bpoints * 1.8 ;
37606: LD_ADDR_VAR 0 10
37610: PUSH
37611: LD_VAR 0 10
37615: PUSH
37616: LD_REAL  1.80000000000000E+0000
37619: MUL
37620: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37621: LD_VAR 0 6
37625: PPUSH
37626: CALL_OW 257
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: LD_INT 4
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: IN
37649: PUSH
37650: LD_VAR 0 1
37654: PPUSH
37655: LD_INT 51
37657: PPUSH
37658: CALL_OW 321
37662: PUSH
37663: LD_INT 2
37665: EQUAL
37666: AND
37667: IFFALSE 37684
// bpoints := bpoints * 1.2 ;
37669: LD_ADDR_VAR 0 10
37673: PUSH
37674: LD_VAR 0 10
37678: PUSH
37679: LD_REAL  1.20000000000000E+0000
37682: MUL
37683: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37684: LD_VAR 0 6
37688: PPUSH
37689: CALL_OW 257
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: LD_INT 7
37699: PUSH
37700: LD_INT 9
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: IN
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: LD_INT 52
37716: PPUSH
37717: CALL_OW 321
37721: PUSH
37722: LD_INT 2
37724: EQUAL
37725: AND
37726: IFFALSE 37743
// bpoints := bpoints * 1.5 ;
37728: LD_ADDR_VAR 0 10
37732: PUSH
37733: LD_VAR 0 10
37737: PUSH
37738: LD_REAL  1.50000000000000E+0000
37741: MUL
37742: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37743: LD_VAR 0 1
37747: PPUSH
37748: LD_INT 66
37750: PPUSH
37751: CALL_OW 321
37755: PUSH
37756: LD_INT 2
37758: EQUAL
37759: IFFALSE 37776
// bpoints := bpoints * 1.1 ;
37761: LD_ADDR_VAR 0 10
37765: PUSH
37766: LD_VAR 0 10
37770: PUSH
37771: LD_REAL  1.10000000000000E+0000
37774: MUL
37775: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37776: LD_ADDR_VAR 0 10
37780: PUSH
37781: LD_VAR 0 10
37785: PUSH
37786: LD_VAR 0 6
37790: PPUSH
37791: LD_INT 1
37793: PPUSH
37794: CALL_OW 259
37798: PUSH
37799: LD_REAL  1.15000000000000E+0000
37802: MUL
37803: MUL
37804: ST_TO_ADDR
// end ; unit_vehicle :
37805: GO 38633
37807: LD_INT 2
37809: DOUBLE
37810: EQUAL
37811: IFTRUE 37815
37813: GO 38621
37815: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37816: LD_VAR 0 6
37820: PPUSH
37821: CALL_OW 264
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 42
37831: PUSH
37832: LD_INT 24
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: IN
37840: IFFALSE 37861
// points := [ 25 , 5 , 3 ] ;
37842: LD_ADDR_VAR 0 9
37846: PUSH
37847: LD_INT 25
37849: PUSH
37850: LD_INT 5
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37861: LD_VAR 0 6
37865: PPUSH
37866: CALL_OW 264
37870: PUSH
37871: LD_INT 4
37873: PUSH
37874: LD_INT 43
37876: PUSH
37877: LD_INT 25
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: IN
37885: IFFALSE 37906
// points := [ 40 , 15 , 5 ] ;
37887: LD_ADDR_VAR 0 9
37891: PUSH
37892: LD_INT 40
37894: PUSH
37895: LD_INT 15
37897: PUSH
37898: LD_INT 5
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37906: LD_VAR 0 6
37910: PPUSH
37911: CALL_OW 264
37915: PUSH
37916: LD_INT 3
37918: PUSH
37919: LD_INT 23
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: IN
37926: IFFALSE 37947
// points := [ 7 , 25 , 8 ] ;
37928: LD_ADDR_VAR 0 9
37932: PUSH
37933: LD_INT 7
37935: PUSH
37936: LD_INT 25
37938: PUSH
37939: LD_INT 8
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37947: LD_VAR 0 6
37951: PPUSH
37952: CALL_OW 264
37956: PUSH
37957: LD_INT 5
37959: PUSH
37960: LD_INT 27
37962: PUSH
37963: LD_INT 44
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: IN
37971: IFFALSE 37992
// points := [ 14 , 50 , 16 ] ;
37973: LD_ADDR_VAR 0 9
37977: PUSH
37978: LD_INT 14
37980: PUSH
37981: LD_INT 50
37983: PUSH
37984: LD_INT 16
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37992: LD_VAR 0 6
37996: PPUSH
37997: CALL_OW 264
38001: PUSH
38002: LD_INT 6
38004: PUSH
38005: LD_INT 46
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: IN
38012: IFFALSE 38033
// points := [ 32 , 120 , 70 ] ;
38014: LD_ADDR_VAR 0 9
38018: PUSH
38019: LD_INT 32
38021: PUSH
38022: LD_INT 120
38024: PUSH
38025: LD_INT 70
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38033: LD_VAR 0 6
38037: PPUSH
38038: CALL_OW 264
38042: PUSH
38043: LD_INT 7
38045: PUSH
38046: LD_INT 28
38048: PUSH
38049: LD_INT 45
38051: PUSH
38052: LD_INT 92
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: IN
38061: IFFALSE 38082
// points := [ 35 , 20 , 45 ] ;
38063: LD_ADDR_VAR 0 9
38067: PUSH
38068: LD_INT 35
38070: PUSH
38071: LD_INT 20
38073: PUSH
38074: LD_INT 45
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38082: LD_VAR 0 6
38086: PPUSH
38087: CALL_OW 264
38091: PUSH
38092: LD_INT 47
38094: PUSH
38095: EMPTY
38096: LIST
38097: IN
38098: IFFALSE 38119
// points := [ 67 , 45 , 75 ] ;
38100: LD_ADDR_VAR 0 9
38104: PUSH
38105: LD_INT 67
38107: PUSH
38108: LD_INT 45
38110: PUSH
38111: LD_INT 75
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38119: LD_VAR 0 6
38123: PPUSH
38124: CALL_OW 264
38128: PUSH
38129: LD_INT 26
38131: PUSH
38132: EMPTY
38133: LIST
38134: IN
38135: IFFALSE 38156
// points := [ 120 , 30 , 80 ] ;
38137: LD_ADDR_VAR 0 9
38141: PUSH
38142: LD_INT 120
38144: PUSH
38145: LD_INT 30
38147: PUSH
38148: LD_INT 80
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38156: LD_VAR 0 6
38160: PPUSH
38161: CALL_OW 264
38165: PUSH
38166: LD_INT 22
38168: PUSH
38169: EMPTY
38170: LIST
38171: IN
38172: IFFALSE 38193
// points := [ 40 , 1 , 1 ] ;
38174: LD_ADDR_VAR 0 9
38178: PUSH
38179: LD_INT 40
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38193: LD_VAR 0 6
38197: PPUSH
38198: CALL_OW 264
38202: PUSH
38203: LD_INT 29
38205: PUSH
38206: EMPTY
38207: LIST
38208: IN
38209: IFFALSE 38230
// points := [ 70 , 200 , 400 ] ;
38211: LD_ADDR_VAR 0 9
38215: PUSH
38216: LD_INT 70
38218: PUSH
38219: LD_INT 200
38221: PUSH
38222: LD_INT 400
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38230: LD_VAR 0 6
38234: PPUSH
38235: CALL_OW 264
38239: PUSH
38240: LD_INT 14
38242: PUSH
38243: LD_INT 53
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: IN
38250: IFFALSE 38271
// points := [ 40 , 10 , 20 ] ;
38252: LD_ADDR_VAR 0 9
38256: PUSH
38257: LD_INT 40
38259: PUSH
38260: LD_INT 10
38262: PUSH
38263: LD_INT 20
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38271: LD_VAR 0 6
38275: PPUSH
38276: CALL_OW 264
38280: PUSH
38281: LD_INT 9
38283: PUSH
38284: EMPTY
38285: LIST
38286: IN
38287: IFFALSE 38308
// points := [ 5 , 70 , 20 ] ;
38289: LD_ADDR_VAR 0 9
38293: PUSH
38294: LD_INT 5
38296: PUSH
38297: LD_INT 70
38299: PUSH
38300: LD_INT 20
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38308: LD_VAR 0 6
38312: PPUSH
38313: CALL_OW 264
38317: PUSH
38318: LD_INT 10
38320: PUSH
38321: EMPTY
38322: LIST
38323: IN
38324: IFFALSE 38345
// points := [ 35 , 110 , 70 ] ;
38326: LD_ADDR_VAR 0 9
38330: PUSH
38331: LD_INT 35
38333: PUSH
38334: LD_INT 110
38336: PUSH
38337: LD_INT 70
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38345: LD_VAR 0 6
38349: PPUSH
38350: CALL_OW 265
38354: PUSH
38355: LD_INT 25
38357: EQUAL
38358: IFFALSE 38379
// points := [ 80 , 65 , 100 ] ;
38360: LD_ADDR_VAR 0 9
38364: PUSH
38365: LD_INT 80
38367: PUSH
38368: LD_INT 65
38370: PUSH
38371: LD_INT 100
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38379: LD_VAR 0 6
38383: PPUSH
38384: CALL_OW 263
38388: PUSH
38389: LD_INT 1
38391: EQUAL
38392: IFFALSE 38427
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38394: LD_ADDR_VAR 0 10
38398: PUSH
38399: LD_VAR 0 10
38403: PUSH
38404: LD_VAR 0 6
38408: PPUSH
38409: CALL_OW 311
38413: PPUSH
38414: LD_INT 3
38416: PPUSH
38417: CALL_OW 259
38421: PUSH
38422: LD_INT 4
38424: MUL
38425: MUL
38426: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38427: LD_VAR 0 6
38431: PPUSH
38432: CALL_OW 263
38436: PUSH
38437: LD_INT 2
38439: EQUAL
38440: IFFALSE 38491
// begin j := IsControledBy ( i ) ;
38442: LD_ADDR_VAR 0 7
38446: PUSH
38447: LD_VAR 0 6
38451: PPUSH
38452: CALL_OW 312
38456: ST_TO_ADDR
// if j then
38457: LD_VAR 0 7
38461: IFFALSE 38491
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38463: LD_ADDR_VAR 0 10
38467: PUSH
38468: LD_VAR 0 10
38472: PUSH
38473: LD_VAR 0 7
38477: PPUSH
38478: LD_INT 3
38480: PPUSH
38481: CALL_OW 259
38485: PUSH
38486: LD_INT 3
38488: MUL
38489: MUL
38490: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 264
38500: PUSH
38501: LD_INT 5
38503: PUSH
38504: LD_INT 6
38506: PUSH
38507: LD_INT 46
38509: PUSH
38510: LD_INT 44
38512: PUSH
38513: LD_INT 47
38515: PUSH
38516: LD_INT 45
38518: PUSH
38519: LD_INT 28
38521: PUSH
38522: LD_INT 7
38524: PUSH
38525: LD_INT 27
38527: PUSH
38528: LD_INT 29
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: IN
38543: PUSH
38544: LD_VAR 0 1
38548: PPUSH
38549: LD_INT 52
38551: PPUSH
38552: CALL_OW 321
38556: PUSH
38557: LD_INT 2
38559: EQUAL
38560: AND
38561: IFFALSE 38578
// bpoints := bpoints * 1.2 ;
38563: LD_ADDR_VAR 0 10
38567: PUSH
38568: LD_VAR 0 10
38572: PUSH
38573: LD_REAL  1.20000000000000E+0000
38576: MUL
38577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38578: LD_VAR 0 6
38582: PPUSH
38583: CALL_OW 264
38587: PUSH
38588: LD_INT 6
38590: PUSH
38591: LD_INT 46
38593: PUSH
38594: LD_INT 47
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: IN
38602: IFFALSE 38619
// bpoints := bpoints * 1.2 ;
38604: LD_ADDR_VAR 0 10
38608: PUSH
38609: LD_VAR 0 10
38613: PUSH
38614: LD_REAL  1.20000000000000E+0000
38617: MUL
38618: ST_TO_ADDR
// end ; unit_building :
38619: GO 38633
38621: LD_INT 3
38623: DOUBLE
38624: EQUAL
38625: IFTRUE 38629
38627: GO 38632
38629: POP
// ; end ;
38630: GO 38633
38632: POP
// for j = 1 to 3 do
38633: LD_ADDR_VAR 0 7
38637: PUSH
38638: DOUBLE
38639: LD_INT 1
38641: DEC
38642: ST_TO_ADDR
38643: LD_INT 3
38645: PUSH
38646: FOR_TO
38647: IFFALSE 38700
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38649: LD_ADDR_VAR 0 5
38653: PUSH
38654: LD_VAR 0 5
38658: PPUSH
38659: LD_VAR 0 7
38663: PPUSH
38664: LD_VAR 0 5
38668: PUSH
38669: LD_VAR 0 7
38673: ARRAY
38674: PUSH
38675: LD_VAR 0 9
38679: PUSH
38680: LD_VAR 0 7
38684: ARRAY
38685: PUSH
38686: LD_VAR 0 10
38690: MUL
38691: PLUS
38692: PPUSH
38693: CALL_OW 1
38697: ST_TO_ADDR
38698: GO 38646
38700: POP
38701: POP
// end ;
38702: GO 37181
38704: POP
38705: POP
// result := Replace ( result , 4 , tmp ) ;
38706: LD_ADDR_VAR 0 5
38710: PUSH
38711: LD_VAR 0 5
38715: PPUSH
38716: LD_INT 4
38718: PPUSH
38719: LD_VAR 0 8
38723: PPUSH
38724: CALL_OW 1
38728: ST_TO_ADDR
// end ;
38729: LD_VAR 0 5
38733: RET
// export function DangerAtRange ( unit , range ) ; begin
38734: LD_INT 0
38736: PPUSH
// if not unit then
38737: LD_VAR 0 1
38741: NOT
38742: IFFALSE 38746
// exit ;
38744: GO 38791
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38746: LD_ADDR_VAR 0 3
38750: PUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 255
38760: PPUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL_OW 250
38770: PPUSH
38771: LD_VAR 0 1
38775: PPUSH
38776: CALL_OW 251
38780: PPUSH
38781: LD_VAR 0 2
38785: PPUSH
38786: CALL 37033 0 4
38790: ST_TO_ADDR
// end ;
38791: LD_VAR 0 3
38795: RET
// export function DangerInArea ( side , area ) ; begin
38796: LD_INT 0
38798: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38799: LD_ADDR_VAR 0 3
38803: PUSH
38804: LD_VAR 0 2
38808: PPUSH
38809: LD_INT 81
38811: PUSH
38812: LD_VAR 0 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PPUSH
38821: CALL_OW 70
38825: ST_TO_ADDR
// end ;
38826: LD_VAR 0 3
38830: RET
// export function IsExtension ( b ) ; begin
38831: LD_INT 0
38833: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38834: LD_ADDR_VAR 0 2
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_INT 23
38846: PUSH
38847: LD_INT 20
38849: PUSH
38850: LD_INT 22
38852: PUSH
38853: LD_INT 17
38855: PUSH
38856: LD_INT 24
38858: PUSH
38859: LD_INT 21
38861: PUSH
38862: LD_INT 19
38864: PUSH
38865: LD_INT 16
38867: PUSH
38868: LD_INT 25
38870: PUSH
38871: LD_INT 18
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: IN
38886: ST_TO_ADDR
// end ;
38887: LD_VAR 0 2
38891: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38892: LD_INT 0
38894: PPUSH
38895: PPUSH
38896: PPUSH
// result := [ ] ;
38897: LD_ADDR_VAR 0 4
38901: PUSH
38902: EMPTY
38903: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38904: LD_ADDR_VAR 0 5
38908: PUSH
38909: LD_VAR 0 2
38913: PPUSH
38914: LD_INT 21
38916: PUSH
38917: LD_INT 3
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PPUSH
38924: CALL_OW 70
38928: ST_TO_ADDR
// if not tmp then
38929: LD_VAR 0 5
38933: NOT
38934: IFFALSE 38938
// exit ;
38936: GO 39002
// if checkLink then
38938: LD_VAR 0 3
38942: IFFALSE 38992
// begin for i in tmp do
38944: LD_ADDR_VAR 0 6
38948: PUSH
38949: LD_VAR 0 5
38953: PUSH
38954: FOR_IN
38955: IFFALSE 38990
// if GetBase ( i ) <> base then
38957: LD_VAR 0 6
38961: PPUSH
38962: CALL_OW 274
38966: PUSH
38967: LD_VAR 0 1
38971: NONEQUAL
38972: IFFALSE 38988
// ComLinkToBase ( base , i ) ;
38974: LD_VAR 0 1
38978: PPUSH
38979: LD_VAR 0 6
38983: PPUSH
38984: CALL_OW 169
38988: GO 38954
38990: POP
38991: POP
// end ; result := tmp ;
38992: LD_ADDR_VAR 0 4
38996: PUSH
38997: LD_VAR 0 5
39001: ST_TO_ADDR
// end ;
39002: LD_VAR 0 4
39006: RET
// export function ComComplete ( units , b ) ; var i ; begin
39007: LD_INT 0
39009: PPUSH
39010: PPUSH
// if not units then
39011: LD_VAR 0 1
39015: NOT
39016: IFFALSE 39020
// exit ;
39018: GO 39110
// for i in units do
39020: LD_ADDR_VAR 0 4
39024: PUSH
39025: LD_VAR 0 1
39029: PUSH
39030: FOR_IN
39031: IFFALSE 39108
// if BuildingStatus ( b ) = bs_build then
39033: LD_VAR 0 2
39037: PPUSH
39038: CALL_OW 461
39042: PUSH
39043: LD_INT 1
39045: EQUAL
39046: IFFALSE 39106
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39048: LD_VAR 0 4
39052: PPUSH
39053: LD_STRING h
39055: PUSH
39056: LD_VAR 0 2
39060: PPUSH
39061: CALL_OW 250
39065: PUSH
39066: LD_VAR 0 2
39070: PPUSH
39071: CALL_OW 251
39075: PUSH
39076: LD_VAR 0 2
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: PUSH
39099: EMPTY
39100: LIST
39101: PPUSH
39102: CALL_OW 446
39106: GO 39030
39108: POP
39109: POP
// end ;
39110: LD_VAR 0 3
39114: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39115: LD_INT 0
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39123: LD_VAR 0 1
39127: NOT
39128: PUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 263
39138: PUSH
39139: LD_INT 2
39141: NONEQUAL
39142: OR
39143: IFFALSE 39147
// exit ;
39145: GO 39463
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39147: LD_ADDR_VAR 0 6
39151: PUSH
39152: LD_INT 22
39154: PUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: CALL_OW 255
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 30
39174: PUSH
39175: LD_INT 36
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 34
39184: PUSH
39185: LD_INT 31
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PPUSH
39201: CALL_OW 69
39205: ST_TO_ADDR
// if not tmp then
39206: LD_VAR 0 6
39210: NOT
39211: IFFALSE 39215
// exit ;
39213: GO 39463
// result := [ ] ;
39215: LD_ADDR_VAR 0 2
39219: PUSH
39220: EMPTY
39221: ST_TO_ADDR
// for i in tmp do
39222: LD_ADDR_VAR 0 3
39226: PUSH
39227: LD_VAR 0 6
39231: PUSH
39232: FOR_IN
39233: IFFALSE 39304
// begin t := UnitsInside ( i ) ;
39235: LD_ADDR_VAR 0 4
39239: PUSH
39240: LD_VAR 0 3
39244: PPUSH
39245: CALL_OW 313
39249: ST_TO_ADDR
// if t then
39250: LD_VAR 0 4
39254: IFFALSE 39302
// for j in t do
39256: LD_ADDR_VAR 0 7
39260: PUSH
39261: LD_VAR 0 4
39265: PUSH
39266: FOR_IN
39267: IFFALSE 39300
// result := Replace ( result , result + 1 , j ) ;
39269: LD_ADDR_VAR 0 2
39273: PUSH
39274: LD_VAR 0 2
39278: PPUSH
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 1
39286: PLUS
39287: PPUSH
39288: LD_VAR 0 7
39292: PPUSH
39293: CALL_OW 1
39297: ST_TO_ADDR
39298: GO 39266
39300: POP
39301: POP
// end ;
39302: GO 39232
39304: POP
39305: POP
// if not result then
39306: LD_VAR 0 2
39310: NOT
39311: IFFALSE 39315
// exit ;
39313: GO 39463
// mech := result [ 1 ] ;
39315: LD_ADDR_VAR 0 5
39319: PUSH
39320: LD_VAR 0 2
39324: PUSH
39325: LD_INT 1
39327: ARRAY
39328: ST_TO_ADDR
// if result > 1 then
39329: LD_VAR 0 2
39333: PUSH
39334: LD_INT 1
39336: GREATER
39337: IFFALSE 39449
// begin for i = 2 to result do
39339: LD_ADDR_VAR 0 3
39343: PUSH
39344: DOUBLE
39345: LD_INT 2
39347: DEC
39348: ST_TO_ADDR
39349: LD_VAR 0 2
39353: PUSH
39354: FOR_TO
39355: IFFALSE 39447
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39357: LD_ADDR_VAR 0 4
39361: PUSH
39362: LD_VAR 0 2
39366: PUSH
39367: LD_VAR 0 3
39371: ARRAY
39372: PPUSH
39373: LD_INT 3
39375: PPUSH
39376: CALL_OW 259
39380: PUSH
39381: LD_VAR 0 2
39385: PUSH
39386: LD_VAR 0 3
39390: ARRAY
39391: PPUSH
39392: CALL_OW 432
39396: MINUS
39397: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39398: LD_VAR 0 4
39402: PUSH
39403: LD_VAR 0 5
39407: PPUSH
39408: LD_INT 3
39410: PPUSH
39411: CALL_OW 259
39415: PUSH
39416: LD_VAR 0 5
39420: PPUSH
39421: CALL_OW 432
39425: MINUS
39426: GREATEREQUAL
39427: IFFALSE 39445
// mech := result [ i ] ;
39429: LD_ADDR_VAR 0 5
39433: PUSH
39434: LD_VAR 0 2
39438: PUSH
39439: LD_VAR 0 3
39443: ARRAY
39444: ST_TO_ADDR
// end ;
39445: GO 39354
39447: POP
39448: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39449: LD_VAR 0 1
39453: PPUSH
39454: LD_VAR 0 5
39458: PPUSH
39459: CALL_OW 135
// end ;
39463: LD_VAR 0 2
39467: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39468: LD_INT 0
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
// result := [ ] ;
39483: LD_ADDR_VAR 0 7
39487: PUSH
39488: EMPTY
39489: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 266
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: IN
39510: NOT
39511: IFFALSE 39515
// exit ;
39513: GO 41149
// if name then
39515: LD_VAR 0 3
39519: IFFALSE 39535
// SetBName ( base_dep , name ) ;
39521: LD_VAR 0 1
39525: PPUSH
39526: LD_VAR 0 3
39530: PPUSH
39531: CALL_OW 500
// base := GetBase ( base_dep ) ;
39535: LD_ADDR_VAR 0 15
39539: PUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: CALL_OW 274
39549: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39550: LD_ADDR_VAR 0 16
39554: PUSH
39555: LD_VAR 0 1
39559: PPUSH
39560: CALL_OW 255
39564: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39565: LD_ADDR_VAR 0 17
39569: PUSH
39570: LD_VAR 0 1
39574: PPUSH
39575: CALL_OW 248
39579: ST_TO_ADDR
// if sources then
39580: LD_VAR 0 5
39584: IFFALSE 39631
// for i = 1 to 3 do
39586: LD_ADDR_VAR 0 8
39590: PUSH
39591: DOUBLE
39592: LD_INT 1
39594: DEC
39595: ST_TO_ADDR
39596: LD_INT 3
39598: PUSH
39599: FOR_TO
39600: IFFALSE 39629
// AddResourceType ( base , i , sources [ i ] ) ;
39602: LD_VAR 0 15
39606: PPUSH
39607: LD_VAR 0 8
39611: PPUSH
39612: LD_VAR 0 5
39616: PUSH
39617: LD_VAR 0 8
39621: ARRAY
39622: PPUSH
39623: CALL_OW 276
39627: GO 39599
39629: POP
39630: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39631: LD_ADDR_VAR 0 18
39635: PUSH
39636: LD_VAR 0 15
39640: PPUSH
39641: LD_VAR 0 2
39645: PPUSH
39646: LD_INT 1
39648: PPUSH
39649: CALL 38892 0 3
39653: ST_TO_ADDR
// InitHc ;
39654: CALL_OW 19
// InitUc ;
39658: CALL_OW 18
// uc_side := side ;
39662: LD_ADDR_OWVAR 20
39666: PUSH
39667: LD_VAR 0 16
39671: ST_TO_ADDR
// uc_nation := nation ;
39672: LD_ADDR_OWVAR 21
39676: PUSH
39677: LD_VAR 0 17
39681: ST_TO_ADDR
// if buildings then
39682: LD_VAR 0 18
39686: IFFALSE 41008
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39688: LD_ADDR_VAR 0 19
39692: PUSH
39693: LD_VAR 0 18
39697: PPUSH
39698: LD_INT 2
39700: PUSH
39701: LD_INT 30
39703: PUSH
39704: LD_INT 29
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 30
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: PPUSH
39726: CALL_OW 72
39730: ST_TO_ADDR
// if tmp then
39731: LD_VAR 0 19
39735: IFFALSE 39783
// for i in tmp do
39737: LD_ADDR_VAR 0 8
39741: PUSH
39742: LD_VAR 0 19
39746: PUSH
39747: FOR_IN
39748: IFFALSE 39781
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39750: LD_VAR 0 8
39754: PPUSH
39755: CALL_OW 250
39759: PPUSH
39760: LD_VAR 0 8
39764: PPUSH
39765: CALL_OW 251
39769: PPUSH
39770: LD_VAR 0 16
39774: PPUSH
39775: CALL_OW 441
39779: GO 39747
39781: POP
39782: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39783: LD_VAR 0 18
39787: PPUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 30
39793: PUSH
39794: LD_INT 32
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 30
39803: PUSH
39804: LD_INT 33
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: PPUSH
39816: CALL_OW 72
39820: IFFALSE 39908
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39822: LD_ADDR_VAR 0 8
39826: PUSH
39827: LD_VAR 0 18
39831: PPUSH
39832: LD_INT 2
39834: PUSH
39835: LD_INT 30
39837: PUSH
39838: LD_INT 32
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 30
39847: PUSH
39848: LD_INT 33
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: PPUSH
39860: CALL_OW 72
39864: PUSH
39865: FOR_IN
39866: IFFALSE 39906
// begin if not GetBWeapon ( i ) then
39868: LD_VAR 0 8
39872: PPUSH
39873: CALL_OW 269
39877: NOT
39878: IFFALSE 39904
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39880: LD_VAR 0 8
39884: PPUSH
39885: LD_VAR 0 8
39889: PPUSH
39890: LD_VAR 0 2
39894: PPUSH
39895: CALL 41154 0 2
39899: PPUSH
39900: CALL_OW 431
// end ;
39904: GO 39865
39906: POP
39907: POP
// end ; for i = 1 to personel do
39908: LD_ADDR_VAR 0 8
39912: PUSH
39913: DOUBLE
39914: LD_INT 1
39916: DEC
39917: ST_TO_ADDR
39918: LD_VAR 0 6
39922: PUSH
39923: FOR_TO
39924: IFFALSE 40988
// begin if i > 4 then
39926: LD_VAR 0 8
39930: PUSH
39931: LD_INT 4
39933: GREATER
39934: IFFALSE 39938
// break ;
39936: GO 40988
// case i of 1 :
39938: LD_VAR 0 8
39942: PUSH
39943: LD_INT 1
39945: DOUBLE
39946: EQUAL
39947: IFTRUE 39951
39949: GO 40031
39951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39952: LD_ADDR_VAR 0 12
39956: PUSH
39957: LD_VAR 0 18
39961: PPUSH
39962: LD_INT 22
39964: PUSH
39965: LD_VAR 0 16
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 58
39976: PUSH
39977: EMPTY
39978: LIST
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: LD_INT 30
39985: PUSH
39986: LD_INT 32
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 30
39995: PUSH
39996: LD_INT 4
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 30
40005: PUSH
40006: LD_INT 5
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PPUSH
40024: CALL_OW 72
40028: ST_TO_ADDR
40029: GO 40253
40031: LD_INT 2
40033: DOUBLE
40034: EQUAL
40035: IFTRUE 40039
40037: GO 40101
40039: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40040: LD_ADDR_VAR 0 12
40044: PUSH
40045: LD_VAR 0 18
40049: PPUSH
40050: LD_INT 22
40052: PUSH
40053: LD_VAR 0 16
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 30
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 30
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PPUSH
40094: CALL_OW 72
40098: ST_TO_ADDR
40099: GO 40253
40101: LD_INT 3
40103: DOUBLE
40104: EQUAL
40105: IFTRUE 40109
40107: GO 40171
40109: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40110: LD_ADDR_VAR 0 12
40114: PUSH
40115: LD_VAR 0 18
40119: PPUSH
40120: LD_INT 22
40122: PUSH
40123: LD_VAR 0 16
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 30
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 30
40147: PUSH
40148: LD_INT 3
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PPUSH
40164: CALL_OW 72
40168: ST_TO_ADDR
40169: GO 40253
40171: LD_INT 4
40173: DOUBLE
40174: EQUAL
40175: IFTRUE 40179
40177: GO 40252
40179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40180: LD_ADDR_VAR 0 12
40184: PUSH
40185: LD_VAR 0 18
40189: PPUSH
40190: LD_INT 22
40192: PUSH
40193: LD_VAR 0 16
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 30
40207: PUSH
40208: LD_INT 6
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 30
40217: PUSH
40218: LD_INT 7
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 30
40227: PUSH
40228: LD_INT 8
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PPUSH
40245: CALL_OW 72
40249: ST_TO_ADDR
40250: GO 40253
40252: POP
// if i = 1 then
40253: LD_VAR 0 8
40257: PUSH
40258: LD_INT 1
40260: EQUAL
40261: IFFALSE 40372
// begin tmp := [ ] ;
40263: LD_ADDR_VAR 0 19
40267: PUSH
40268: EMPTY
40269: ST_TO_ADDR
// for j in f do
40270: LD_ADDR_VAR 0 9
40274: PUSH
40275: LD_VAR 0 12
40279: PUSH
40280: FOR_IN
40281: IFFALSE 40354
// if GetBType ( j ) = b_bunker then
40283: LD_VAR 0 9
40287: PPUSH
40288: CALL_OW 266
40292: PUSH
40293: LD_INT 32
40295: EQUAL
40296: IFFALSE 40323
// tmp := Insert ( tmp , 1 , j ) else
40298: LD_ADDR_VAR 0 19
40302: PUSH
40303: LD_VAR 0 19
40307: PPUSH
40308: LD_INT 1
40310: PPUSH
40311: LD_VAR 0 9
40315: PPUSH
40316: CALL_OW 2
40320: ST_TO_ADDR
40321: GO 40352
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40323: LD_ADDR_VAR 0 19
40327: PUSH
40328: LD_VAR 0 19
40332: PPUSH
40333: LD_VAR 0 19
40337: PUSH
40338: LD_INT 1
40340: PLUS
40341: PPUSH
40342: LD_VAR 0 9
40346: PPUSH
40347: CALL_OW 2
40351: ST_TO_ADDR
40352: GO 40280
40354: POP
40355: POP
// if tmp then
40356: LD_VAR 0 19
40360: IFFALSE 40372
// f := tmp ;
40362: LD_ADDR_VAR 0 12
40366: PUSH
40367: LD_VAR 0 19
40371: ST_TO_ADDR
// end ; x := personel [ i ] ;
40372: LD_ADDR_VAR 0 13
40376: PUSH
40377: LD_VAR 0 6
40381: PUSH
40382: LD_VAR 0 8
40386: ARRAY
40387: ST_TO_ADDR
// if x = - 1 then
40388: LD_VAR 0 13
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: EQUAL
40397: IFFALSE 40606
// begin for j in f do
40399: LD_ADDR_VAR 0 9
40403: PUSH
40404: LD_VAR 0 12
40408: PUSH
40409: FOR_IN
40410: IFFALSE 40602
// repeat InitHc ;
40412: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40416: LD_VAR 0 9
40420: PPUSH
40421: CALL_OW 266
40425: PUSH
40426: LD_INT 5
40428: EQUAL
40429: IFFALSE 40499
// begin if UnitsInside ( j ) < 3 then
40431: LD_VAR 0 9
40435: PPUSH
40436: CALL_OW 313
40440: PUSH
40441: LD_INT 3
40443: LESS
40444: IFFALSE 40480
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40446: LD_INT 0
40448: PPUSH
40449: LD_INT 5
40451: PUSH
40452: LD_INT 8
40454: PUSH
40455: LD_INT 9
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: PUSH
40463: LD_VAR 0 17
40467: ARRAY
40468: PPUSH
40469: LD_VAR 0 4
40473: PPUSH
40474: CALL_OW 380
40478: GO 40497
// PrepareHuman ( false , i , skill ) ;
40480: LD_INT 0
40482: PPUSH
40483: LD_VAR 0 8
40487: PPUSH
40488: LD_VAR 0 4
40492: PPUSH
40493: CALL_OW 380
// end else
40497: GO 40516
// PrepareHuman ( false , i , skill ) ;
40499: LD_INT 0
40501: PPUSH
40502: LD_VAR 0 8
40506: PPUSH
40507: LD_VAR 0 4
40511: PPUSH
40512: CALL_OW 380
// un := CreateHuman ;
40516: LD_ADDR_VAR 0 14
40520: PUSH
40521: CALL_OW 44
40525: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40526: LD_ADDR_VAR 0 7
40530: PUSH
40531: LD_VAR 0 7
40535: PPUSH
40536: LD_INT 1
40538: PPUSH
40539: LD_VAR 0 14
40543: PPUSH
40544: CALL_OW 2
40548: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40549: LD_VAR 0 14
40553: PPUSH
40554: LD_VAR 0 9
40558: PPUSH
40559: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40563: LD_VAR 0 9
40567: PPUSH
40568: CALL_OW 313
40572: PUSH
40573: LD_INT 6
40575: EQUAL
40576: PUSH
40577: LD_VAR 0 9
40581: PPUSH
40582: CALL_OW 266
40586: PUSH
40587: LD_INT 32
40589: PUSH
40590: LD_INT 31
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: IN
40597: OR
40598: IFFALSE 40412
40600: GO 40409
40602: POP
40603: POP
// end else
40604: GO 40986
// for j = 1 to x do
40606: LD_ADDR_VAR 0 9
40610: PUSH
40611: DOUBLE
40612: LD_INT 1
40614: DEC
40615: ST_TO_ADDR
40616: LD_VAR 0 13
40620: PUSH
40621: FOR_TO
40622: IFFALSE 40984
// begin InitHc ;
40624: CALL_OW 19
// if not f then
40628: LD_VAR 0 12
40632: NOT
40633: IFFALSE 40722
// begin PrepareHuman ( false , i , skill ) ;
40635: LD_INT 0
40637: PPUSH
40638: LD_VAR 0 8
40642: PPUSH
40643: LD_VAR 0 4
40647: PPUSH
40648: CALL_OW 380
// un := CreateHuman ;
40652: LD_ADDR_VAR 0 14
40656: PUSH
40657: CALL_OW 44
40661: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40662: LD_ADDR_VAR 0 7
40666: PUSH
40667: LD_VAR 0 7
40671: PPUSH
40672: LD_INT 1
40674: PPUSH
40675: LD_VAR 0 14
40679: PPUSH
40680: CALL_OW 2
40684: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40685: LD_VAR 0 14
40689: PPUSH
40690: LD_VAR 0 1
40694: PPUSH
40695: CALL_OW 250
40699: PPUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: CALL_OW 251
40709: PPUSH
40710: LD_INT 10
40712: PPUSH
40713: LD_INT 0
40715: PPUSH
40716: CALL_OW 50
// continue ;
40720: GO 40621
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40722: LD_VAR 0 12
40726: PUSH
40727: LD_INT 1
40729: ARRAY
40730: PPUSH
40731: CALL_OW 313
40735: PUSH
40736: LD_VAR 0 12
40740: PUSH
40741: LD_INT 1
40743: ARRAY
40744: PPUSH
40745: CALL_OW 266
40749: PUSH
40750: LD_INT 32
40752: PUSH
40753: LD_INT 31
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: IN
40760: AND
40761: PUSH
40762: LD_VAR 0 12
40766: PUSH
40767: LD_INT 1
40769: ARRAY
40770: PPUSH
40771: CALL_OW 313
40775: PUSH
40776: LD_INT 6
40778: EQUAL
40779: OR
40780: IFFALSE 40800
// f := Delete ( f , 1 ) ;
40782: LD_ADDR_VAR 0 12
40786: PUSH
40787: LD_VAR 0 12
40791: PPUSH
40792: LD_INT 1
40794: PPUSH
40795: CALL_OW 3
40799: ST_TO_ADDR
// if not f then
40800: LD_VAR 0 12
40804: NOT
40805: IFFALSE 40823
// begin x := x + 2 ;
40807: LD_ADDR_VAR 0 13
40811: PUSH
40812: LD_VAR 0 13
40816: PUSH
40817: LD_INT 2
40819: PLUS
40820: ST_TO_ADDR
// continue ;
40821: GO 40621
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40823: LD_VAR 0 12
40827: PUSH
40828: LD_INT 1
40830: ARRAY
40831: PPUSH
40832: CALL_OW 266
40836: PUSH
40837: LD_INT 5
40839: EQUAL
40840: IFFALSE 40914
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40842: LD_VAR 0 12
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: PPUSH
40851: CALL_OW 313
40855: PUSH
40856: LD_INT 3
40858: LESS
40859: IFFALSE 40895
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40861: LD_INT 0
40863: PPUSH
40864: LD_INT 5
40866: PUSH
40867: LD_INT 8
40869: PUSH
40870: LD_INT 9
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: PUSH
40878: LD_VAR 0 17
40882: ARRAY
40883: PPUSH
40884: LD_VAR 0 4
40888: PPUSH
40889: CALL_OW 380
40893: GO 40912
// PrepareHuman ( false , i , skill ) ;
40895: LD_INT 0
40897: PPUSH
40898: LD_VAR 0 8
40902: PPUSH
40903: LD_VAR 0 4
40907: PPUSH
40908: CALL_OW 380
// end else
40912: GO 40931
// PrepareHuman ( false , i , skill ) ;
40914: LD_INT 0
40916: PPUSH
40917: LD_VAR 0 8
40921: PPUSH
40922: LD_VAR 0 4
40926: PPUSH
40927: CALL_OW 380
// un := CreateHuman ;
40931: LD_ADDR_VAR 0 14
40935: PUSH
40936: CALL_OW 44
40940: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40941: LD_ADDR_VAR 0 7
40945: PUSH
40946: LD_VAR 0 7
40950: PPUSH
40951: LD_INT 1
40953: PPUSH
40954: LD_VAR 0 14
40958: PPUSH
40959: CALL_OW 2
40963: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40964: LD_VAR 0 14
40968: PPUSH
40969: LD_VAR 0 12
40973: PUSH
40974: LD_INT 1
40976: ARRAY
40977: PPUSH
40978: CALL_OW 52
// end ;
40982: GO 40621
40984: POP
40985: POP
// end ;
40986: GO 39923
40988: POP
40989: POP
// result := result ^ buildings ;
40990: LD_ADDR_VAR 0 7
40994: PUSH
40995: LD_VAR 0 7
40999: PUSH
41000: LD_VAR 0 18
41004: ADD
41005: ST_TO_ADDR
// end else
41006: GO 41149
// begin for i = 1 to personel do
41008: LD_ADDR_VAR 0 8
41012: PUSH
41013: DOUBLE
41014: LD_INT 1
41016: DEC
41017: ST_TO_ADDR
41018: LD_VAR 0 6
41022: PUSH
41023: FOR_TO
41024: IFFALSE 41147
// begin if i > 4 then
41026: LD_VAR 0 8
41030: PUSH
41031: LD_INT 4
41033: GREATER
41034: IFFALSE 41038
// break ;
41036: GO 41147
// x := personel [ i ] ;
41038: LD_ADDR_VAR 0 13
41042: PUSH
41043: LD_VAR 0 6
41047: PUSH
41048: LD_VAR 0 8
41052: ARRAY
41053: ST_TO_ADDR
// if x = - 1 then
41054: LD_VAR 0 13
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: EQUAL
41063: IFFALSE 41067
// continue ;
41065: GO 41023
// PrepareHuman ( false , i , skill ) ;
41067: LD_INT 0
41069: PPUSH
41070: LD_VAR 0 8
41074: PPUSH
41075: LD_VAR 0 4
41079: PPUSH
41080: CALL_OW 380
// un := CreateHuman ;
41084: LD_ADDR_VAR 0 14
41088: PUSH
41089: CALL_OW 44
41093: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41094: LD_VAR 0 14
41098: PPUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 250
41108: PPUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: CALL_OW 251
41118: PPUSH
41119: LD_INT 10
41121: PPUSH
41122: LD_INT 0
41124: PPUSH
41125: CALL_OW 50
// result := result ^ un ;
41129: LD_ADDR_VAR 0 7
41133: PUSH
41134: LD_VAR 0 7
41138: PUSH
41139: LD_VAR 0 14
41143: ADD
41144: ST_TO_ADDR
// end ;
41145: GO 41023
41147: POP
41148: POP
// end ; end ;
41149: LD_VAR 0 7
41153: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41154: LD_INT 0
41156: PPUSH
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
41164: PPUSH
41165: PPUSH
41166: PPUSH
41167: PPUSH
41168: PPUSH
41169: PPUSH
41170: PPUSH
41171: PPUSH
// result := false ;
41172: LD_ADDR_VAR 0 3
41176: PUSH
41177: LD_INT 0
41179: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41180: LD_VAR 0 1
41184: NOT
41185: PUSH
41186: LD_VAR 0 1
41190: PPUSH
41191: CALL_OW 266
41195: PUSH
41196: LD_INT 32
41198: PUSH
41199: LD_INT 33
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: IN
41206: NOT
41207: OR
41208: IFFALSE 41212
// exit ;
41210: GO 42321
// nat := GetNation ( tower ) ;
41212: LD_ADDR_VAR 0 12
41216: PUSH
41217: LD_VAR 0 1
41221: PPUSH
41222: CALL_OW 248
41226: ST_TO_ADDR
// side := GetSide ( tower ) ;
41227: LD_ADDR_VAR 0 16
41231: PUSH
41232: LD_VAR 0 1
41236: PPUSH
41237: CALL_OW 255
41241: ST_TO_ADDR
// x := GetX ( tower ) ;
41242: LD_ADDR_VAR 0 10
41246: PUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 250
41256: ST_TO_ADDR
// y := GetY ( tower ) ;
41257: LD_ADDR_VAR 0 11
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 251
41271: ST_TO_ADDR
// if not x or not y then
41272: LD_VAR 0 10
41276: NOT
41277: PUSH
41278: LD_VAR 0 11
41282: NOT
41283: OR
41284: IFFALSE 41288
// exit ;
41286: GO 42321
// weapon := 0 ;
41288: LD_ADDR_VAR 0 18
41292: PUSH
41293: LD_INT 0
41295: ST_TO_ADDR
// fac_list := [ ] ;
41296: LD_ADDR_VAR 0 17
41300: PUSH
41301: EMPTY
41302: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41303: LD_ADDR_VAR 0 6
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: CALL_OW 274
41317: PPUSH
41318: LD_VAR 0 2
41322: PPUSH
41323: LD_INT 0
41325: PPUSH
41326: CALL 38892 0 3
41330: PPUSH
41331: LD_INT 30
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PPUSH
41341: CALL_OW 72
41345: ST_TO_ADDR
// if not factories then
41346: LD_VAR 0 6
41350: NOT
41351: IFFALSE 41355
// exit ;
41353: GO 42321
// for i in factories do
41355: LD_ADDR_VAR 0 8
41359: PUSH
41360: LD_VAR 0 6
41364: PUSH
41365: FOR_IN
41366: IFFALSE 41391
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41368: LD_ADDR_VAR 0 17
41372: PUSH
41373: LD_VAR 0 17
41377: PUSH
41378: LD_VAR 0 8
41382: PPUSH
41383: CALL_OW 478
41387: UNION
41388: ST_TO_ADDR
41389: GO 41365
41391: POP
41392: POP
// if not fac_list then
41393: LD_VAR 0 17
41397: NOT
41398: IFFALSE 41402
// exit ;
41400: GO 42321
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41402: LD_ADDR_VAR 0 5
41406: PUSH
41407: LD_INT 4
41409: PUSH
41410: LD_INT 5
41412: PUSH
41413: LD_INT 9
41415: PUSH
41416: LD_INT 10
41418: PUSH
41419: LD_INT 6
41421: PUSH
41422: LD_INT 7
41424: PUSH
41425: LD_INT 11
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 27
41439: PUSH
41440: LD_INT 28
41442: PUSH
41443: LD_INT 26
41445: PUSH
41446: LD_INT 30
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 43
41457: PUSH
41458: LD_INT 44
41460: PUSH
41461: LD_INT 46
41463: PUSH
41464: LD_INT 45
41466: PUSH
41467: LD_INT 47
41469: PUSH
41470: LD_INT 49
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: LIST
41485: PUSH
41486: LD_VAR 0 12
41490: ARRAY
41491: ST_TO_ADDR
// list := list isect fac_list ;
41492: LD_ADDR_VAR 0 5
41496: PUSH
41497: LD_VAR 0 5
41501: PUSH
41502: LD_VAR 0 17
41506: ISECT
41507: ST_TO_ADDR
// if not list then
41508: LD_VAR 0 5
41512: NOT
41513: IFFALSE 41517
// exit ;
41515: GO 42321
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41517: LD_VAR 0 12
41521: PUSH
41522: LD_INT 3
41524: EQUAL
41525: PUSH
41526: LD_INT 49
41528: PUSH
41529: LD_VAR 0 5
41533: IN
41534: AND
41535: PUSH
41536: LD_INT 31
41538: PPUSH
41539: LD_VAR 0 16
41543: PPUSH
41544: CALL_OW 321
41548: PUSH
41549: LD_INT 2
41551: EQUAL
41552: AND
41553: IFFALSE 41613
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41555: LD_INT 22
41557: PUSH
41558: LD_VAR 0 16
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 35
41569: PUSH
41570: LD_INT 49
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 91
41579: PUSH
41580: LD_VAR 0 1
41584: PUSH
41585: LD_INT 10
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: PPUSH
41598: CALL_OW 69
41602: NOT
41603: IFFALSE 41613
// weapon := ru_time_lapser ;
41605: LD_ADDR_VAR 0 18
41609: PUSH
41610: LD_INT 49
41612: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41613: LD_VAR 0 12
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: IN
41628: PUSH
41629: LD_INT 11
41631: PUSH
41632: LD_VAR 0 5
41636: IN
41637: PUSH
41638: LD_INT 30
41640: PUSH
41641: LD_VAR 0 5
41645: IN
41646: OR
41647: AND
41648: PUSH
41649: LD_INT 6
41651: PPUSH
41652: LD_VAR 0 16
41656: PPUSH
41657: CALL_OW 321
41661: PUSH
41662: LD_INT 2
41664: EQUAL
41665: AND
41666: IFFALSE 41831
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41668: LD_INT 22
41670: PUSH
41671: LD_VAR 0 16
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: LD_INT 35
41685: PUSH
41686: LD_INT 11
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 35
41695: PUSH
41696: LD_INT 30
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 91
41710: PUSH
41711: LD_VAR 0 1
41715: PUSH
41716: LD_INT 18
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: PPUSH
41729: CALL_OW 69
41733: NOT
41734: PUSH
41735: LD_INT 22
41737: PUSH
41738: LD_VAR 0 16
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: LD_INT 30
41752: PUSH
41753: LD_INT 32
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 30
41762: PUSH
41763: LD_INT 33
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 91
41777: PUSH
41778: LD_VAR 0 1
41782: PUSH
41783: LD_INT 12
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: PPUSH
41799: CALL_OW 69
41803: PUSH
41804: LD_INT 2
41806: GREATER
41807: AND
41808: IFFALSE 41831
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41810: LD_ADDR_VAR 0 18
41814: PUSH
41815: LD_INT 11
41817: PUSH
41818: LD_INT 30
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_VAR 0 12
41829: ARRAY
41830: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41831: LD_VAR 0 18
41835: NOT
41836: PUSH
41837: LD_INT 40
41839: PPUSH
41840: LD_VAR 0 16
41844: PPUSH
41845: CALL_OW 321
41849: PUSH
41850: LD_INT 2
41852: EQUAL
41853: AND
41854: PUSH
41855: LD_INT 7
41857: PUSH
41858: LD_VAR 0 5
41862: IN
41863: PUSH
41864: LD_INT 28
41866: PUSH
41867: LD_VAR 0 5
41871: IN
41872: OR
41873: PUSH
41874: LD_INT 45
41876: PUSH
41877: LD_VAR 0 5
41881: IN
41882: OR
41883: AND
41884: IFFALSE 42138
// begin hex := GetHexInfo ( x , y ) ;
41886: LD_ADDR_VAR 0 4
41890: PUSH
41891: LD_VAR 0 10
41895: PPUSH
41896: LD_VAR 0 11
41900: PPUSH
41901: CALL_OW 546
41905: ST_TO_ADDR
// if hex [ 1 ] then
41906: LD_VAR 0 4
41910: PUSH
41911: LD_INT 1
41913: ARRAY
41914: IFFALSE 41918
// exit ;
41916: GO 42321
// height := hex [ 2 ] ;
41918: LD_ADDR_VAR 0 15
41922: PUSH
41923: LD_VAR 0 4
41927: PUSH
41928: LD_INT 2
41930: ARRAY
41931: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41932: LD_ADDR_VAR 0 14
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: LD_INT 3
41945: PUSH
41946: LD_INT 5
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: ST_TO_ADDR
// for i in tmp do
41955: LD_ADDR_VAR 0 8
41959: PUSH
41960: LD_VAR 0 14
41964: PUSH
41965: FOR_IN
41966: IFFALSE 42136
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41968: LD_ADDR_VAR 0 9
41972: PUSH
41973: LD_VAR 0 10
41977: PPUSH
41978: LD_VAR 0 8
41982: PPUSH
41983: LD_INT 5
41985: PPUSH
41986: CALL_OW 272
41990: PUSH
41991: LD_VAR 0 11
41995: PPUSH
41996: LD_VAR 0 8
42000: PPUSH
42001: LD_INT 5
42003: PPUSH
42004: CALL_OW 273
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42013: LD_VAR 0 9
42017: PUSH
42018: LD_INT 1
42020: ARRAY
42021: PPUSH
42022: LD_VAR 0 9
42026: PUSH
42027: LD_INT 2
42029: ARRAY
42030: PPUSH
42031: CALL_OW 488
42035: IFFALSE 42134
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42037: LD_ADDR_VAR 0 4
42041: PUSH
42042: LD_VAR 0 9
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: PPUSH
42051: LD_VAR 0 9
42055: PUSH
42056: LD_INT 2
42058: ARRAY
42059: PPUSH
42060: CALL_OW 546
42064: ST_TO_ADDR
// if hex [ 1 ] then
42065: LD_VAR 0 4
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: IFFALSE 42077
// continue ;
42075: GO 41965
// h := hex [ 2 ] ;
42077: LD_ADDR_VAR 0 13
42081: PUSH
42082: LD_VAR 0 4
42086: PUSH
42087: LD_INT 2
42089: ARRAY
42090: ST_TO_ADDR
// if h + 7 < height then
42091: LD_VAR 0 13
42095: PUSH
42096: LD_INT 7
42098: PLUS
42099: PUSH
42100: LD_VAR 0 15
42104: LESS
42105: IFFALSE 42134
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42107: LD_ADDR_VAR 0 18
42111: PUSH
42112: LD_INT 7
42114: PUSH
42115: LD_INT 28
42117: PUSH
42118: LD_INT 45
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: PUSH
42126: LD_VAR 0 12
42130: ARRAY
42131: ST_TO_ADDR
// break ;
42132: GO 42136
// end ; end ; end ;
42134: GO 41965
42136: POP
42137: POP
// end ; if not weapon then
42138: LD_VAR 0 18
42142: NOT
42143: IFFALSE 42203
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42145: LD_ADDR_VAR 0 5
42149: PUSH
42150: LD_VAR 0 5
42154: PUSH
42155: LD_INT 11
42157: PUSH
42158: LD_INT 30
42160: PUSH
42161: LD_INT 49
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: DIFF
42169: ST_TO_ADDR
// if not list then
42170: LD_VAR 0 5
42174: NOT
42175: IFFALSE 42179
// exit ;
42177: GO 42321
// weapon := list [ rand ( 1 , list ) ] ;
42179: LD_ADDR_VAR 0 18
42183: PUSH
42184: LD_VAR 0 5
42188: PUSH
42189: LD_INT 1
42191: PPUSH
42192: LD_VAR 0 5
42196: PPUSH
42197: CALL_OW 12
42201: ARRAY
42202: ST_TO_ADDR
// end ; if weapon then
42203: LD_VAR 0 18
42207: IFFALSE 42321
// begin tmp := CostOfWeapon ( weapon ) ;
42209: LD_ADDR_VAR 0 14
42213: PUSH
42214: LD_VAR 0 18
42218: PPUSH
42219: CALL_OW 451
42223: ST_TO_ADDR
// j := GetBase ( tower ) ;
42224: LD_ADDR_VAR 0 9
42228: PUSH
42229: LD_VAR 0 1
42233: PPUSH
42234: CALL_OW 274
42238: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42239: LD_VAR 0 9
42243: PPUSH
42244: LD_INT 1
42246: PPUSH
42247: CALL_OW 275
42251: PUSH
42252: LD_VAR 0 14
42256: PUSH
42257: LD_INT 1
42259: ARRAY
42260: GREATEREQUAL
42261: PUSH
42262: LD_VAR 0 9
42266: PPUSH
42267: LD_INT 2
42269: PPUSH
42270: CALL_OW 275
42274: PUSH
42275: LD_VAR 0 14
42279: PUSH
42280: LD_INT 2
42282: ARRAY
42283: GREATEREQUAL
42284: AND
42285: PUSH
42286: LD_VAR 0 9
42290: PPUSH
42291: LD_INT 3
42293: PPUSH
42294: CALL_OW 275
42298: PUSH
42299: LD_VAR 0 14
42303: PUSH
42304: LD_INT 3
42306: ARRAY
42307: GREATEREQUAL
42308: AND
42309: IFFALSE 42321
// result := weapon ;
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_VAR 0 18
42320: ST_TO_ADDR
// end ; end ;
42321: LD_VAR 0 3
42325: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42326: LD_INT 0
42328: PPUSH
42329: PPUSH
// result := true ;
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_INT 1
42337: ST_TO_ADDR
// if array1 = array2 then
42338: LD_VAR 0 1
42342: PUSH
42343: LD_VAR 0 2
42347: EQUAL
42348: IFFALSE 42408
// begin for i = 1 to array1 do
42350: LD_ADDR_VAR 0 4
42354: PUSH
42355: DOUBLE
42356: LD_INT 1
42358: DEC
42359: ST_TO_ADDR
42360: LD_VAR 0 1
42364: PUSH
42365: FOR_TO
42366: IFFALSE 42404
// if array1 [ i ] <> array2 [ i ] then
42368: LD_VAR 0 1
42372: PUSH
42373: LD_VAR 0 4
42377: ARRAY
42378: PUSH
42379: LD_VAR 0 2
42383: PUSH
42384: LD_VAR 0 4
42388: ARRAY
42389: NONEQUAL
42390: IFFALSE 42402
// begin result := false ;
42392: LD_ADDR_VAR 0 3
42396: PUSH
42397: LD_INT 0
42399: ST_TO_ADDR
// break ;
42400: GO 42404
// end ;
42402: GO 42365
42404: POP
42405: POP
// end else
42406: GO 42416
// result := false ;
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 0
42415: ST_TO_ADDR
// end ;
42416: LD_VAR 0 3
42420: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42421: LD_INT 0
42423: PPUSH
42424: PPUSH
// if not array1 or not array2 then
42425: LD_VAR 0 1
42429: NOT
42430: PUSH
42431: LD_VAR 0 2
42435: NOT
42436: OR
42437: IFFALSE 42441
// exit ;
42439: GO 42505
// result := true ;
42441: LD_ADDR_VAR 0 3
42445: PUSH
42446: LD_INT 1
42448: ST_TO_ADDR
// for i = 1 to array1 do
42449: LD_ADDR_VAR 0 4
42453: PUSH
42454: DOUBLE
42455: LD_INT 1
42457: DEC
42458: ST_TO_ADDR
42459: LD_VAR 0 1
42463: PUSH
42464: FOR_TO
42465: IFFALSE 42503
// if array1 [ i ] <> array2 [ i ] then
42467: LD_VAR 0 1
42471: PUSH
42472: LD_VAR 0 4
42476: ARRAY
42477: PUSH
42478: LD_VAR 0 2
42482: PUSH
42483: LD_VAR 0 4
42487: ARRAY
42488: NONEQUAL
42489: IFFALSE 42501
// begin result := false ;
42491: LD_ADDR_VAR 0 3
42495: PUSH
42496: LD_INT 0
42498: ST_TO_ADDR
// break ;
42499: GO 42503
// end ;
42501: GO 42464
42503: POP
42504: POP
// end ;
42505: LD_VAR 0 3
42509: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42510: LD_INT 0
42512: PPUSH
42513: PPUSH
42514: PPUSH
// pom := GetBase ( fac ) ;
42515: LD_ADDR_VAR 0 5
42519: PUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 274
42529: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42530: LD_ADDR_VAR 0 4
42534: PUSH
42535: LD_VAR 0 2
42539: PUSH
42540: LD_INT 1
42542: ARRAY
42543: PPUSH
42544: LD_VAR 0 2
42548: PUSH
42549: LD_INT 2
42551: ARRAY
42552: PPUSH
42553: LD_VAR 0 2
42557: PUSH
42558: LD_INT 3
42560: ARRAY
42561: PPUSH
42562: LD_VAR 0 2
42566: PUSH
42567: LD_INT 4
42569: ARRAY
42570: PPUSH
42571: CALL_OW 449
42575: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42576: LD_ADDR_VAR 0 3
42580: PUSH
42581: LD_VAR 0 5
42585: PPUSH
42586: LD_INT 1
42588: PPUSH
42589: CALL_OW 275
42593: PUSH
42594: LD_VAR 0 4
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: GREATEREQUAL
42603: PUSH
42604: LD_VAR 0 5
42608: PPUSH
42609: LD_INT 2
42611: PPUSH
42612: CALL_OW 275
42616: PUSH
42617: LD_VAR 0 4
42621: PUSH
42622: LD_INT 2
42624: ARRAY
42625: GREATEREQUAL
42626: AND
42627: PUSH
42628: LD_VAR 0 5
42632: PPUSH
42633: LD_INT 3
42635: PPUSH
42636: CALL_OW 275
42640: PUSH
42641: LD_VAR 0 4
42645: PUSH
42646: LD_INT 3
42648: ARRAY
42649: GREATEREQUAL
42650: AND
42651: ST_TO_ADDR
// end ;
42652: LD_VAR 0 3
42656: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42657: LD_INT 0
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
// pom := GetBase ( building ) ;
42663: LD_ADDR_VAR 0 3
42667: PUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 274
42677: ST_TO_ADDR
// if not pom then
42678: LD_VAR 0 3
42682: NOT
42683: IFFALSE 42687
// exit ;
42685: GO 42857
// btype := GetBType ( building ) ;
42687: LD_ADDR_VAR 0 5
42691: PUSH
42692: LD_VAR 0 1
42696: PPUSH
42697: CALL_OW 266
42701: ST_TO_ADDR
// if btype = b_armoury then
42702: LD_VAR 0 5
42706: PUSH
42707: LD_INT 4
42709: EQUAL
42710: IFFALSE 42720
// btype := b_barracks ;
42712: LD_ADDR_VAR 0 5
42716: PUSH
42717: LD_INT 5
42719: ST_TO_ADDR
// if btype = b_depot then
42720: LD_VAR 0 5
42724: PUSH
42725: LD_INT 0
42727: EQUAL
42728: IFFALSE 42738
// btype := b_warehouse ;
42730: LD_ADDR_VAR 0 5
42734: PUSH
42735: LD_INT 1
42737: ST_TO_ADDR
// if btype = b_workshop then
42738: LD_VAR 0 5
42742: PUSH
42743: LD_INT 2
42745: EQUAL
42746: IFFALSE 42756
// btype := b_factory ;
42748: LD_ADDR_VAR 0 5
42752: PUSH
42753: LD_INT 3
42755: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42756: LD_ADDR_VAR 0 4
42760: PUSH
42761: LD_VAR 0 5
42765: PPUSH
42766: LD_VAR 0 1
42770: PPUSH
42771: CALL_OW 248
42775: PPUSH
42776: CALL_OW 450
42780: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42781: LD_ADDR_VAR 0 2
42785: PUSH
42786: LD_VAR 0 3
42790: PPUSH
42791: LD_INT 1
42793: PPUSH
42794: CALL_OW 275
42798: PUSH
42799: LD_VAR 0 4
42803: PUSH
42804: LD_INT 1
42806: ARRAY
42807: GREATEREQUAL
42808: PUSH
42809: LD_VAR 0 3
42813: PPUSH
42814: LD_INT 2
42816: PPUSH
42817: CALL_OW 275
42821: PUSH
42822: LD_VAR 0 4
42826: PUSH
42827: LD_INT 2
42829: ARRAY
42830: GREATEREQUAL
42831: AND
42832: PUSH
42833: LD_VAR 0 3
42837: PPUSH
42838: LD_INT 3
42840: PPUSH
42841: CALL_OW 275
42845: PUSH
42846: LD_VAR 0 4
42850: PUSH
42851: LD_INT 3
42853: ARRAY
42854: GREATEREQUAL
42855: AND
42856: ST_TO_ADDR
// end ;
42857: LD_VAR 0 2
42861: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42862: LD_INT 0
42864: PPUSH
42865: PPUSH
42866: PPUSH
// pom := GetBase ( building ) ;
42867: LD_ADDR_VAR 0 4
42871: PUSH
42872: LD_VAR 0 1
42876: PPUSH
42877: CALL_OW 274
42881: ST_TO_ADDR
// if not pom then
42882: LD_VAR 0 4
42886: NOT
42887: IFFALSE 42891
// exit ;
42889: GO 42992
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42891: LD_ADDR_VAR 0 5
42895: PUSH
42896: LD_VAR 0 2
42900: PPUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 248
42910: PPUSH
42911: CALL_OW 450
42915: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42916: LD_ADDR_VAR 0 3
42920: PUSH
42921: LD_VAR 0 4
42925: PPUSH
42926: LD_INT 1
42928: PPUSH
42929: CALL_OW 275
42933: PUSH
42934: LD_VAR 0 5
42938: PUSH
42939: LD_INT 1
42941: ARRAY
42942: GREATEREQUAL
42943: PUSH
42944: LD_VAR 0 4
42948: PPUSH
42949: LD_INT 2
42951: PPUSH
42952: CALL_OW 275
42956: PUSH
42957: LD_VAR 0 5
42961: PUSH
42962: LD_INT 2
42964: ARRAY
42965: GREATEREQUAL
42966: AND
42967: PUSH
42968: LD_VAR 0 4
42972: PPUSH
42973: LD_INT 3
42975: PPUSH
42976: CALL_OW 275
42980: PUSH
42981: LD_VAR 0 5
42985: PUSH
42986: LD_INT 3
42988: ARRAY
42989: GREATEREQUAL
42990: AND
42991: ST_TO_ADDR
// end ;
42992: LD_VAR 0 3
42996: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
43001: PPUSH
43002: PPUSH
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
// result := false ;
43010: LD_ADDR_VAR 0 8
43014: PUSH
43015: LD_INT 0
43017: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43018: LD_VAR 0 5
43022: NOT
43023: PUSH
43024: LD_VAR 0 1
43028: NOT
43029: OR
43030: PUSH
43031: LD_VAR 0 2
43035: NOT
43036: OR
43037: PUSH
43038: LD_VAR 0 3
43042: NOT
43043: OR
43044: IFFALSE 43048
// exit ;
43046: GO 43862
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43048: LD_ADDR_VAR 0 14
43052: PUSH
43053: LD_VAR 0 1
43057: PPUSH
43058: LD_VAR 0 2
43062: PPUSH
43063: LD_VAR 0 3
43067: PPUSH
43068: LD_VAR 0 4
43072: PPUSH
43073: LD_VAR 0 5
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: PPUSH
43082: CALL_OW 248
43086: PPUSH
43087: LD_INT 0
43089: PPUSH
43090: CALL 45115 0 6
43094: ST_TO_ADDR
// if not hexes then
43095: LD_VAR 0 14
43099: NOT
43100: IFFALSE 43104
// exit ;
43102: GO 43862
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43104: LD_ADDR_VAR 0 17
43108: PUSH
43109: LD_VAR 0 5
43113: PPUSH
43114: LD_INT 22
43116: PUSH
43117: LD_VAR 0 13
43121: PPUSH
43122: CALL_OW 255
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 30
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 30
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PPUSH
43163: CALL_OW 72
43167: ST_TO_ADDR
// for i = 1 to hexes do
43168: LD_ADDR_VAR 0 9
43172: PUSH
43173: DOUBLE
43174: LD_INT 1
43176: DEC
43177: ST_TO_ADDR
43178: LD_VAR 0 14
43182: PUSH
43183: FOR_TO
43184: IFFALSE 43860
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43186: LD_ADDR_VAR 0 13
43190: PUSH
43191: LD_VAR 0 14
43195: PUSH
43196: LD_VAR 0 9
43200: ARRAY
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PPUSH
43206: LD_VAR 0 14
43210: PUSH
43211: LD_VAR 0 9
43215: ARRAY
43216: PUSH
43217: LD_INT 2
43219: ARRAY
43220: PPUSH
43221: CALL_OW 428
43225: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43226: LD_VAR 0 14
43230: PUSH
43231: LD_VAR 0 9
43235: ARRAY
43236: PUSH
43237: LD_INT 1
43239: ARRAY
43240: PPUSH
43241: LD_VAR 0 14
43245: PUSH
43246: LD_VAR 0 9
43250: ARRAY
43251: PUSH
43252: LD_INT 2
43254: ARRAY
43255: PPUSH
43256: CALL_OW 351
43260: PUSH
43261: LD_VAR 0 14
43265: PUSH
43266: LD_VAR 0 9
43270: ARRAY
43271: PUSH
43272: LD_INT 1
43274: ARRAY
43275: PPUSH
43276: LD_VAR 0 14
43280: PUSH
43281: LD_VAR 0 9
43285: ARRAY
43286: PUSH
43287: LD_INT 2
43289: ARRAY
43290: PPUSH
43291: CALL_OW 488
43295: NOT
43296: OR
43297: PUSH
43298: LD_VAR 0 13
43302: PPUSH
43303: CALL_OW 247
43307: PUSH
43308: LD_INT 3
43310: EQUAL
43311: OR
43312: IFFALSE 43318
// exit ;
43314: POP
43315: POP
43316: GO 43862
// if not tmp then
43318: LD_VAR 0 13
43322: NOT
43323: IFFALSE 43327
// continue ;
43325: GO 43183
// result := true ;
43327: LD_ADDR_VAR 0 8
43331: PUSH
43332: LD_INT 1
43334: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43335: LD_VAR 0 6
43339: PUSH
43340: LD_VAR 0 13
43344: PPUSH
43345: CALL_OW 247
43349: PUSH
43350: LD_INT 2
43352: EQUAL
43353: AND
43354: PUSH
43355: LD_VAR 0 13
43359: PPUSH
43360: CALL_OW 263
43364: PUSH
43365: LD_INT 1
43367: EQUAL
43368: AND
43369: IFFALSE 43533
// begin if IsDrivenBy ( tmp ) then
43371: LD_VAR 0 13
43375: PPUSH
43376: CALL_OW 311
43380: IFFALSE 43384
// continue ;
43382: GO 43183
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43384: LD_VAR 0 6
43388: PPUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 60
43394: PUSH
43395: EMPTY
43396: LIST
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: LD_INT 55
43407: PUSH
43408: EMPTY
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PPUSH
43419: CALL_OW 72
43423: IFFALSE 43531
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43425: LD_ADDR_VAR 0 18
43429: PUSH
43430: LD_VAR 0 6
43434: PPUSH
43435: LD_INT 3
43437: PUSH
43438: LD_INT 60
43440: PUSH
43441: EMPTY
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: LD_INT 55
43453: PUSH
43454: EMPTY
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PPUSH
43465: CALL_OW 72
43469: PUSH
43470: LD_INT 1
43472: ARRAY
43473: ST_TO_ADDR
// if IsInUnit ( driver ) then
43474: LD_VAR 0 18
43478: PPUSH
43479: CALL_OW 310
43483: IFFALSE 43494
// ComExit ( driver ) ;
43485: LD_VAR 0 18
43489: PPUSH
43490: CALL 68896 0 1
// AddComEnterUnit ( driver , tmp ) ;
43494: LD_VAR 0 18
43498: PPUSH
43499: LD_VAR 0 13
43503: PPUSH
43504: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43508: LD_VAR 0 18
43512: PPUSH
43513: LD_VAR 0 7
43517: PPUSH
43518: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43522: LD_VAR 0 18
43526: PPUSH
43527: CALL_OW 181
// end ; continue ;
43531: GO 43183
// end ; if not cleaners or not tmp in cleaners then
43533: LD_VAR 0 6
43537: NOT
43538: PUSH
43539: LD_VAR 0 13
43543: PUSH
43544: LD_VAR 0 6
43548: IN
43549: NOT
43550: OR
43551: IFFALSE 43858
// begin if dep then
43553: LD_VAR 0 17
43557: IFFALSE 43693
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43559: LD_ADDR_VAR 0 16
43563: PUSH
43564: LD_VAR 0 17
43568: PUSH
43569: LD_INT 1
43571: ARRAY
43572: PPUSH
43573: CALL_OW 250
43577: PPUSH
43578: LD_VAR 0 17
43582: PUSH
43583: LD_INT 1
43585: ARRAY
43586: PPUSH
43587: CALL_OW 254
43591: PPUSH
43592: LD_INT 5
43594: PPUSH
43595: CALL_OW 272
43599: PUSH
43600: LD_VAR 0 17
43604: PUSH
43605: LD_INT 1
43607: ARRAY
43608: PPUSH
43609: CALL_OW 251
43613: PPUSH
43614: LD_VAR 0 17
43618: PUSH
43619: LD_INT 1
43621: ARRAY
43622: PPUSH
43623: CALL_OW 254
43627: PPUSH
43628: LD_INT 5
43630: PPUSH
43631: CALL_OW 273
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43640: LD_VAR 0 16
43644: PUSH
43645: LD_INT 1
43647: ARRAY
43648: PPUSH
43649: LD_VAR 0 16
43653: PUSH
43654: LD_INT 2
43656: ARRAY
43657: PPUSH
43658: CALL_OW 488
43662: IFFALSE 43693
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43664: LD_VAR 0 13
43668: PPUSH
43669: LD_VAR 0 16
43673: PUSH
43674: LD_INT 1
43676: ARRAY
43677: PPUSH
43678: LD_VAR 0 16
43682: PUSH
43683: LD_INT 2
43685: ARRAY
43686: PPUSH
43687: CALL_OW 111
// continue ;
43691: GO 43183
// end ; end ; r := GetDir ( tmp ) ;
43693: LD_ADDR_VAR 0 15
43697: PUSH
43698: LD_VAR 0 13
43702: PPUSH
43703: CALL_OW 254
43707: ST_TO_ADDR
// if r = 5 then
43708: LD_VAR 0 15
43712: PUSH
43713: LD_INT 5
43715: EQUAL
43716: IFFALSE 43726
// r := 0 ;
43718: LD_ADDR_VAR 0 15
43722: PUSH
43723: LD_INT 0
43725: ST_TO_ADDR
// for j = r to 5 do
43726: LD_ADDR_VAR 0 10
43730: PUSH
43731: DOUBLE
43732: LD_VAR 0 15
43736: DEC
43737: ST_TO_ADDR
43738: LD_INT 5
43740: PUSH
43741: FOR_TO
43742: IFFALSE 43856
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43744: LD_ADDR_VAR 0 11
43748: PUSH
43749: LD_VAR 0 13
43753: PPUSH
43754: CALL_OW 250
43758: PPUSH
43759: LD_VAR 0 10
43763: PPUSH
43764: LD_INT 2
43766: PPUSH
43767: CALL_OW 272
43771: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43772: LD_ADDR_VAR 0 12
43776: PUSH
43777: LD_VAR 0 13
43781: PPUSH
43782: CALL_OW 251
43786: PPUSH
43787: LD_VAR 0 10
43791: PPUSH
43792: LD_INT 2
43794: PPUSH
43795: CALL_OW 273
43799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43800: LD_VAR 0 11
43804: PPUSH
43805: LD_VAR 0 12
43809: PPUSH
43810: CALL_OW 488
43814: PUSH
43815: LD_VAR 0 11
43819: PPUSH
43820: LD_VAR 0 12
43824: PPUSH
43825: CALL_OW 428
43829: NOT
43830: AND
43831: IFFALSE 43854
// begin ComMoveXY ( tmp , _x , _y ) ;
43833: LD_VAR 0 13
43837: PPUSH
43838: LD_VAR 0 11
43842: PPUSH
43843: LD_VAR 0 12
43847: PPUSH
43848: CALL_OW 111
// break ;
43852: GO 43856
// end ; end ;
43854: GO 43741
43856: POP
43857: POP
// end ; end ;
43858: GO 43183
43860: POP
43861: POP
// end ;
43862: LD_VAR 0 8
43866: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43867: LD_INT 0
43869: PPUSH
// result := true ;
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_INT 1
43877: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43878: LD_VAR 0 2
43882: PUSH
43883: LD_INT 24
43885: DOUBLE
43886: EQUAL
43887: IFTRUE 43897
43889: LD_INT 33
43891: DOUBLE
43892: EQUAL
43893: IFTRUE 43897
43895: GO 43922
43897: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_INT 32
43905: PPUSH
43906: LD_VAR 0 1
43910: PPUSH
43911: CALL_OW 321
43915: PUSH
43916: LD_INT 2
43918: EQUAL
43919: ST_TO_ADDR
43920: GO 44238
43922: LD_INT 20
43924: DOUBLE
43925: EQUAL
43926: IFTRUE 43930
43928: GO 43955
43930: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43931: LD_ADDR_VAR 0 3
43935: PUSH
43936: LD_INT 6
43938: PPUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 321
43948: PUSH
43949: LD_INT 2
43951: EQUAL
43952: ST_TO_ADDR
43953: GO 44238
43955: LD_INT 22
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 43969
43961: LD_INT 36
43963: DOUBLE
43964: EQUAL
43965: IFTRUE 43969
43967: GO 43994
43969: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43970: LD_ADDR_VAR 0 3
43974: PUSH
43975: LD_INT 15
43977: PPUSH
43978: LD_VAR 0 1
43982: PPUSH
43983: CALL_OW 321
43987: PUSH
43988: LD_INT 2
43990: EQUAL
43991: ST_TO_ADDR
43992: GO 44238
43994: LD_INT 30
43996: DOUBLE
43997: EQUAL
43998: IFTRUE 44002
44000: GO 44027
44002: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_INT 20
44010: PPUSH
44011: LD_VAR 0 1
44015: PPUSH
44016: CALL_OW 321
44020: PUSH
44021: LD_INT 2
44023: EQUAL
44024: ST_TO_ADDR
44025: GO 44238
44027: LD_INT 28
44029: DOUBLE
44030: EQUAL
44031: IFTRUE 44041
44033: LD_INT 21
44035: DOUBLE
44036: EQUAL
44037: IFTRUE 44041
44039: GO 44066
44041: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 21
44049: PPUSH
44050: LD_VAR 0 1
44054: PPUSH
44055: CALL_OW 321
44059: PUSH
44060: LD_INT 2
44062: EQUAL
44063: ST_TO_ADDR
44064: GO 44238
44066: LD_INT 16
44068: DOUBLE
44069: EQUAL
44070: IFTRUE 44074
44072: GO 44099
44074: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44075: LD_ADDR_VAR 0 3
44079: PUSH
44080: LD_INT 84
44082: PPUSH
44083: LD_VAR 0 1
44087: PPUSH
44088: CALL_OW 321
44092: PUSH
44093: LD_INT 2
44095: EQUAL
44096: ST_TO_ADDR
44097: GO 44238
44099: LD_INT 19
44101: DOUBLE
44102: EQUAL
44103: IFTRUE 44113
44105: LD_INT 23
44107: DOUBLE
44108: EQUAL
44109: IFTRUE 44113
44111: GO 44138
44113: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44114: LD_ADDR_VAR 0 3
44118: PUSH
44119: LD_INT 83
44121: PPUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: CALL_OW 321
44131: PUSH
44132: LD_INT 2
44134: EQUAL
44135: ST_TO_ADDR
44136: GO 44238
44138: LD_INT 17
44140: DOUBLE
44141: EQUAL
44142: IFTRUE 44146
44144: GO 44171
44146: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44147: LD_ADDR_VAR 0 3
44151: PUSH
44152: LD_INT 39
44154: PPUSH
44155: LD_VAR 0 1
44159: PPUSH
44160: CALL_OW 321
44164: PUSH
44165: LD_INT 2
44167: EQUAL
44168: ST_TO_ADDR
44169: GO 44238
44171: LD_INT 18
44173: DOUBLE
44174: EQUAL
44175: IFTRUE 44179
44177: GO 44204
44179: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44180: LD_ADDR_VAR 0 3
44184: PUSH
44185: LD_INT 40
44187: PPUSH
44188: LD_VAR 0 1
44192: PPUSH
44193: CALL_OW 321
44197: PUSH
44198: LD_INT 2
44200: EQUAL
44201: ST_TO_ADDR
44202: GO 44238
44204: LD_INT 27
44206: DOUBLE
44207: EQUAL
44208: IFTRUE 44212
44210: GO 44237
44212: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44213: LD_ADDR_VAR 0 3
44217: PUSH
44218: LD_INT 35
44220: PPUSH
44221: LD_VAR 0 1
44225: PPUSH
44226: CALL_OW 321
44230: PUSH
44231: LD_INT 2
44233: EQUAL
44234: ST_TO_ADDR
44235: GO 44238
44237: POP
// end ;
44238: LD_VAR 0 3
44242: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44243: LD_INT 0
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
// result := false ;
44256: LD_ADDR_VAR 0 6
44260: PUSH
44261: LD_INT 0
44263: ST_TO_ADDR
// if btype = b_depot then
44264: LD_VAR 0 2
44268: PUSH
44269: LD_INT 0
44271: EQUAL
44272: IFFALSE 44284
// begin result := true ;
44274: LD_ADDR_VAR 0 6
44278: PUSH
44279: LD_INT 1
44281: ST_TO_ADDR
// exit ;
44282: GO 45110
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44284: LD_VAR 0 1
44288: NOT
44289: PUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: CALL_OW 266
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: IN
44310: NOT
44311: OR
44312: PUSH
44313: LD_VAR 0 2
44317: NOT
44318: OR
44319: PUSH
44320: LD_VAR 0 5
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: LD_INT 4
44339: PUSH
44340: LD_INT 5
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: IN
44351: NOT
44352: OR
44353: PUSH
44354: LD_VAR 0 3
44358: PPUSH
44359: LD_VAR 0 4
44363: PPUSH
44364: CALL_OW 488
44368: NOT
44369: OR
44370: IFFALSE 44374
// exit ;
44372: GO 45110
// side := GetSide ( depot ) ;
44374: LD_ADDR_VAR 0 9
44378: PUSH
44379: LD_VAR 0 1
44383: PPUSH
44384: CALL_OW 255
44388: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44389: LD_VAR 0 9
44393: PPUSH
44394: LD_VAR 0 2
44398: PPUSH
44399: CALL 43867 0 2
44403: NOT
44404: IFFALSE 44408
// exit ;
44406: GO 45110
// pom := GetBase ( depot ) ;
44408: LD_ADDR_VAR 0 10
44412: PUSH
44413: LD_VAR 0 1
44417: PPUSH
44418: CALL_OW 274
44422: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44423: LD_ADDR_VAR 0 11
44427: PUSH
44428: LD_VAR 0 2
44432: PPUSH
44433: LD_VAR 0 1
44437: PPUSH
44438: CALL_OW 248
44442: PPUSH
44443: CALL_OW 450
44447: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44448: LD_VAR 0 10
44452: PPUSH
44453: LD_INT 1
44455: PPUSH
44456: CALL_OW 275
44460: PUSH
44461: LD_VAR 0 11
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: GREATEREQUAL
44470: PUSH
44471: LD_VAR 0 10
44475: PPUSH
44476: LD_INT 2
44478: PPUSH
44479: CALL_OW 275
44483: PUSH
44484: LD_VAR 0 11
44488: PUSH
44489: LD_INT 2
44491: ARRAY
44492: GREATEREQUAL
44493: AND
44494: PUSH
44495: LD_VAR 0 10
44499: PPUSH
44500: LD_INT 3
44502: PPUSH
44503: CALL_OW 275
44507: PUSH
44508: LD_VAR 0 11
44512: PUSH
44513: LD_INT 3
44515: ARRAY
44516: GREATEREQUAL
44517: AND
44518: NOT
44519: IFFALSE 44523
// exit ;
44521: GO 45110
// if GetBType ( depot ) = b_depot then
44523: LD_VAR 0 1
44527: PPUSH
44528: CALL_OW 266
44532: PUSH
44533: LD_INT 0
44535: EQUAL
44536: IFFALSE 44548
// dist := 28 else
44538: LD_ADDR_VAR 0 14
44542: PUSH
44543: LD_INT 28
44545: ST_TO_ADDR
44546: GO 44556
// dist := 36 ;
44548: LD_ADDR_VAR 0 14
44552: PUSH
44553: LD_INT 36
44555: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44556: LD_VAR 0 1
44560: PPUSH
44561: LD_VAR 0 3
44565: PPUSH
44566: LD_VAR 0 4
44570: PPUSH
44571: CALL_OW 297
44575: PUSH
44576: LD_VAR 0 14
44580: GREATER
44581: IFFALSE 44585
// exit ;
44583: GO 45110
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44585: LD_ADDR_VAR 0 12
44589: PUSH
44590: LD_VAR 0 2
44594: PPUSH
44595: LD_VAR 0 3
44599: PPUSH
44600: LD_VAR 0 4
44604: PPUSH
44605: LD_VAR 0 5
44609: PPUSH
44610: LD_VAR 0 1
44614: PPUSH
44615: CALL_OW 248
44619: PPUSH
44620: LD_INT 0
44622: PPUSH
44623: CALL 45115 0 6
44627: ST_TO_ADDR
// if not hexes then
44628: LD_VAR 0 12
44632: NOT
44633: IFFALSE 44637
// exit ;
44635: GO 45110
// hex := GetHexInfo ( x , y ) ;
44637: LD_ADDR_VAR 0 15
44641: PUSH
44642: LD_VAR 0 3
44646: PPUSH
44647: LD_VAR 0 4
44651: PPUSH
44652: CALL_OW 546
44656: ST_TO_ADDR
// if hex [ 1 ] then
44657: LD_VAR 0 15
44661: PUSH
44662: LD_INT 1
44664: ARRAY
44665: IFFALSE 44669
// exit ;
44667: GO 45110
// height := hex [ 2 ] ;
44669: LD_ADDR_VAR 0 13
44673: PUSH
44674: LD_VAR 0 15
44678: PUSH
44679: LD_INT 2
44681: ARRAY
44682: ST_TO_ADDR
// for i = 1 to hexes do
44683: LD_ADDR_VAR 0 7
44687: PUSH
44688: DOUBLE
44689: LD_INT 1
44691: DEC
44692: ST_TO_ADDR
44693: LD_VAR 0 12
44697: PUSH
44698: FOR_TO
44699: IFFALSE 45029
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44701: LD_VAR 0 12
44705: PUSH
44706: LD_VAR 0 7
44710: ARRAY
44711: PUSH
44712: LD_INT 1
44714: ARRAY
44715: PPUSH
44716: LD_VAR 0 12
44720: PUSH
44721: LD_VAR 0 7
44725: ARRAY
44726: PUSH
44727: LD_INT 2
44729: ARRAY
44730: PPUSH
44731: CALL_OW 488
44735: NOT
44736: PUSH
44737: LD_VAR 0 12
44741: PUSH
44742: LD_VAR 0 7
44746: ARRAY
44747: PUSH
44748: LD_INT 1
44750: ARRAY
44751: PPUSH
44752: LD_VAR 0 12
44756: PUSH
44757: LD_VAR 0 7
44761: ARRAY
44762: PUSH
44763: LD_INT 2
44765: ARRAY
44766: PPUSH
44767: CALL_OW 428
44771: PUSH
44772: LD_INT 0
44774: GREATER
44775: OR
44776: PUSH
44777: LD_VAR 0 12
44781: PUSH
44782: LD_VAR 0 7
44786: ARRAY
44787: PUSH
44788: LD_INT 1
44790: ARRAY
44791: PPUSH
44792: LD_VAR 0 12
44796: PUSH
44797: LD_VAR 0 7
44801: ARRAY
44802: PUSH
44803: LD_INT 2
44805: ARRAY
44806: PPUSH
44807: CALL_OW 351
44811: OR
44812: IFFALSE 44818
// exit ;
44814: POP
44815: POP
44816: GO 45110
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44818: LD_ADDR_VAR 0 8
44822: PUSH
44823: LD_VAR 0 12
44827: PUSH
44828: LD_VAR 0 7
44832: ARRAY
44833: PUSH
44834: LD_INT 1
44836: ARRAY
44837: PPUSH
44838: LD_VAR 0 12
44842: PUSH
44843: LD_VAR 0 7
44847: ARRAY
44848: PUSH
44849: LD_INT 2
44851: ARRAY
44852: PPUSH
44853: CALL_OW 546
44857: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44858: LD_VAR 0 8
44862: PUSH
44863: LD_INT 1
44865: ARRAY
44866: PUSH
44867: LD_VAR 0 8
44871: PUSH
44872: LD_INT 2
44874: ARRAY
44875: PUSH
44876: LD_VAR 0 13
44880: PUSH
44881: LD_INT 2
44883: PLUS
44884: GREATER
44885: OR
44886: PUSH
44887: LD_VAR 0 8
44891: PUSH
44892: LD_INT 2
44894: ARRAY
44895: PUSH
44896: LD_VAR 0 13
44900: PUSH
44901: LD_INT 2
44903: MINUS
44904: LESS
44905: OR
44906: PUSH
44907: LD_VAR 0 8
44911: PUSH
44912: LD_INT 3
44914: ARRAY
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 8
44921: PUSH
44922: LD_INT 9
44924: PUSH
44925: LD_INT 10
44927: PUSH
44928: LD_INT 11
44930: PUSH
44931: LD_INT 12
44933: PUSH
44934: LD_INT 13
44936: PUSH
44937: LD_INT 16
44939: PUSH
44940: LD_INT 17
44942: PUSH
44943: LD_INT 18
44945: PUSH
44946: LD_INT 19
44948: PUSH
44949: LD_INT 20
44951: PUSH
44952: LD_INT 21
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: IN
44970: NOT
44971: OR
44972: PUSH
44973: LD_VAR 0 8
44977: PUSH
44978: LD_INT 5
44980: ARRAY
44981: NOT
44982: OR
44983: PUSH
44984: LD_VAR 0 8
44988: PUSH
44989: LD_INT 6
44991: ARRAY
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 7
45001: PUSH
45002: LD_INT 9
45004: PUSH
45005: LD_INT 10
45007: PUSH
45008: LD_INT 11
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: IN
45019: NOT
45020: OR
45021: IFFALSE 45027
// exit ;
45023: POP
45024: POP
45025: GO 45110
// end ;
45027: GO 44698
45029: POP
45030: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45031: LD_VAR 0 9
45035: PPUSH
45036: LD_VAR 0 3
45040: PPUSH
45041: LD_VAR 0 4
45045: PPUSH
45046: LD_INT 20
45048: PPUSH
45049: CALL 37033 0 4
45053: PUSH
45054: LD_INT 4
45056: ARRAY
45057: IFFALSE 45061
// exit ;
45059: GO 45110
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45061: LD_VAR 0 2
45065: PUSH
45066: LD_INT 29
45068: PUSH
45069: LD_INT 30
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: IN
45076: PUSH
45077: LD_VAR 0 3
45081: PPUSH
45082: LD_VAR 0 4
45086: PPUSH
45087: LD_VAR 0 9
45091: PPUSH
45092: CALL_OW 440
45096: NOT
45097: AND
45098: IFFALSE 45102
// exit ;
45100: GO 45110
// result := true ;
45102: LD_ADDR_VAR 0 6
45106: PUSH
45107: LD_INT 1
45109: ST_TO_ADDR
// end ;
45110: LD_VAR 0 6
45114: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45115: LD_INT 0
45117: PPUSH
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
45132: PPUSH
45133: PPUSH
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
// result = [ ] ;
45175: LD_ADDR_VAR 0 7
45179: PUSH
45180: EMPTY
45181: ST_TO_ADDR
// temp_list = [ ] ;
45182: LD_ADDR_VAR 0 9
45186: PUSH
45187: EMPTY
45188: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45189: LD_VAR 0 4
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: LD_INT 4
45208: PUSH
45209: LD_INT 5
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: IN
45220: NOT
45221: PUSH
45222: LD_VAR 0 1
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: IN
45237: PUSH
45238: LD_VAR 0 5
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: IN
45257: NOT
45258: AND
45259: OR
45260: IFFALSE 45264
// exit ;
45262: GO 63655
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45264: LD_VAR 0 1
45268: PUSH
45269: LD_INT 6
45271: PUSH
45272: LD_INT 7
45274: PUSH
45275: LD_INT 8
45277: PUSH
45278: LD_INT 13
45280: PUSH
45281: LD_INT 12
45283: PUSH
45284: LD_INT 15
45286: PUSH
45287: LD_INT 11
45289: PUSH
45290: LD_INT 14
45292: PUSH
45293: LD_INT 10
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: IN
45307: IFFALSE 45317
// btype = b_lab ;
45309: LD_ADDR_VAR 0 1
45313: PUSH
45314: LD_INT 6
45316: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45317: LD_VAR 0 6
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: IN
45336: NOT
45337: PUSH
45338: LD_VAR 0 1
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: LD_INT 6
45357: PUSH
45358: LD_INT 36
45360: PUSH
45361: LD_INT 4
45363: PUSH
45364: LD_INT 5
45366: PUSH
45367: LD_INT 31
45369: PUSH
45370: LD_INT 32
45372: PUSH
45373: LD_INT 33
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: IN
45389: NOT
45390: PUSH
45391: LD_VAR 0 6
45395: PUSH
45396: LD_INT 1
45398: EQUAL
45399: AND
45400: OR
45401: PUSH
45402: LD_VAR 0 1
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: IN
45417: NOT
45418: PUSH
45419: LD_VAR 0 6
45423: PUSH
45424: LD_INT 2
45426: EQUAL
45427: AND
45428: OR
45429: IFFALSE 45439
// mode = 0 ;
45431: LD_ADDR_VAR 0 6
45435: PUSH
45436: LD_INT 0
45438: ST_TO_ADDR
// case mode of 0 :
45439: LD_VAR 0 6
45443: PUSH
45444: LD_INT 0
45446: DOUBLE
45447: EQUAL
45448: IFTRUE 45452
45450: GO 56905
45452: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45453: LD_ADDR_VAR 0 11
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 3
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 3
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45646: LD_ADDR_VAR 0 12
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 3
45803: NEG
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 3
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45842: LD_ADDR_VAR 0 13
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 3
46001: NEG
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: LD_INT 3
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46041: LD_ADDR_VAR 0 14
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 3
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46237: LD_ADDR_VAR 0 15
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46430: LD_ADDR_VAR 0 16
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46623: LD_ADDR_VAR 0 17
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46853: LD_ADDR_VAR 0 18
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47083: LD_ADDR_VAR 0 19
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47313: LD_ADDR_VAR 0 20
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47543: LD_ADDR_VAR 0 21
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47773: LD_ADDR_VAR 0 22
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48003: LD_ADDR_VAR 0 23
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 3
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48283: LD_ADDR_VAR 0 24
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48559: LD_ADDR_VAR 0 25
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48833: LD_ADDR_VAR 0 26
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 3
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 3
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49109: LD_ADDR_VAR 0 27
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 3
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49389: LD_ADDR_VAR 0 28
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49671: LD_ADDR_VAR 0 29
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49950: LD_ADDR_VAR 0 30
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 3
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50228: LD_ADDR_VAR 0 31
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50506: LD_ADDR_VAR 0 32
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50784: LD_ADDR_VAR 0 33
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 3
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51063: LD_ADDR_VAR 0 34
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51343: LD_ADDR_VAR 0 35
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51455: LD_ADDR_VAR 0 36
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51567: LD_ADDR_VAR 0 37
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51679: LD_ADDR_VAR 0 38
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51791: LD_ADDR_VAR 0 39
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51903: LD_ADDR_VAR 0 40
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52015: LD_ADDR_VAR 0 41
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52365: LD_ADDR_VAR 0 42
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52715: LD_ADDR_VAR 0 43
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 3
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: NEG
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53063: LD_ADDR_VAR 0 44
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 3
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: LD_INT 3
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53413: LD_ADDR_VAR 0 45
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53763: LD_ADDR_VAR 0 46
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54111: LD_ADDR_VAR 0 47
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54262: LD_ADDR_VAR 0 48
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54409: LD_ADDR_VAR 0 49
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54553: LD_ADDR_VAR 0 50
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54697: LD_ADDR_VAR 0 51
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54844: LD_ADDR_VAR 0 52
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54995: LD_ADDR_VAR 0 53
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55225: LD_ADDR_VAR 0 54
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55455: LD_ADDR_VAR 0 55
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55685: LD_ADDR_VAR 0 56
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55915: LD_ADDR_VAR 0 57
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56145: LD_ADDR_VAR 0 58
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56375: LD_ADDR_VAR 0 59
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56463: LD_ADDR_VAR 0 60
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56551: LD_ADDR_VAR 0 61
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56639: LD_ADDR_VAR 0 62
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56727: LD_ADDR_VAR 0 63
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56815: LD_ADDR_VAR 0 64
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: ST_TO_ADDR
// end ; 1 :
56903: GO 62800
56905: LD_INT 1
56907: DOUBLE
56908: EQUAL
56909: IFTRUE 56913
56911: GO 59536
56913: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56914: LD_ADDR_VAR 0 11
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 3
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56958: LD_ADDR_VAR 0 12
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56999: LD_ADDR_VAR 0 13
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57039: LD_ADDR_VAR 0 14
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57080: LD_ADDR_VAR 0 15
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57124: LD_ADDR_VAR 0 16
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57170: LD_ADDR_VAR 0 17
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57214: LD_ADDR_VAR 0 18
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57255: LD_ADDR_VAR 0 19
57259: PUSH
57260: LD_INT 3
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57295: LD_ADDR_VAR 0 20
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: LIST
57335: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57336: LD_ADDR_VAR 0 21
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57380: LD_ADDR_VAR 0 22
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57426: LD_ADDR_VAR 0 23
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57470: LD_ADDR_VAR 0 24
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 4
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57511: LD_ADDR_VAR 0 25
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: PUSH
57539: LD_INT 4
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57551: LD_ADDR_VAR 0 26
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 4
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57592: LD_ADDR_VAR 0 27
57596: PUSH
57597: LD_INT 3
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 4
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57636: LD_ADDR_VAR 0 28
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: LD_INT 4
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: LD_INT 3
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: LIST
57681: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57682: LD_ADDR_VAR 0 29
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 4
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 5
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 5
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 4
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 6
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 6
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 5
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57837: LD_ADDR_VAR 0 30
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 4
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 5
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 5
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 5
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 6
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 6
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57980: LD_ADDR_VAR 0 31
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 4
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: LD_INT 4
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: LD_INT 4
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 5
58047: PUSH
58048: LD_INT 4
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 5
58057: PUSH
58058: LD_INT 5
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 4
58067: PUSH
58068: LD_INT 5
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 6
58077: PUSH
58078: LD_INT 5
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 6
58087: PUSH
58088: LD_INT 6
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 5
58097: PUSH
58098: LD_INT 6
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58119: LD_ADDR_VAR 0 32
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 4
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 3
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 5
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 5
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 4
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 6
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 6
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 5
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58262: LD_ADDR_VAR 0 33
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 4
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 4
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 5
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 5
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 5
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 6
58382: NEG
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 6
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58417: LD_ADDR_VAR 0 34
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 3
58436: NEG
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 4
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 4
58484: NEG
58485: PUSH
58486: LD_INT 4
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 4
58496: NEG
58497: PUSH
58498: LD_INT 5
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 5
58508: NEG
58509: PUSH
58510: LD_INT 4
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 5
58520: NEG
58521: PUSH
58522: LD_INT 5
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 5
58532: NEG
58533: PUSH
58534: LD_INT 6
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 6
58544: NEG
58545: PUSH
58546: LD_INT 5
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 6
58556: NEG
58557: PUSH
58558: LD_INT 6
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58580: LD_ADDR_VAR 0 41
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: LIST
58623: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58624: LD_ADDR_VAR 0 42
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 3
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58665: LD_ADDR_VAR 0 43
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58705: LD_ADDR_VAR 0 44
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58746: LD_ADDR_VAR 0 45
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58790: LD_ADDR_VAR 0 46
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 2
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58836: LD_ADDR_VAR 0 47
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58869: LD_ADDR_VAR 0 48
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58900: LD_ADDR_VAR 0 49
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58929: LD_ADDR_VAR 0 50
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58958: LD_ADDR_VAR 0 51
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58989: LD_ADDR_VAR 0 52
58993: PUSH
58994: LD_INT 3
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: NEG
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59022: LD_ADDR_VAR 0 53
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59066: LD_ADDR_VAR 0 54
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59107: LD_ADDR_VAR 0 55
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59147: LD_ADDR_VAR 0 56
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59188: LD_ADDR_VAR 0 57
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59232: LD_ADDR_VAR 0 58
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: LD_INT 3
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59278: LD_ADDR_VAR 0 59
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59322: LD_ADDR_VAR 0 60
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59363: LD_ADDR_VAR 0 61
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59403: LD_ADDR_VAR 0 62
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59444: LD_ADDR_VAR 0 63
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59488: LD_ADDR_VAR 0 64
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: ST_TO_ADDR
// end ; 2 :
59534: GO 62800
59536: LD_INT 2
59538: DOUBLE
59539: EQUAL
59540: IFTRUE 59544
59542: GO 62799
59544: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59545: LD_ADDR_VAR 0 29
59549: PUSH
59550: LD_INT 4
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 4
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 5
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 5
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 4
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 3
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 5
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: LD_INT 4
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: LD_INT 3
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 4
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: LD_INT 4
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: LD_INT 4
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 3
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 5
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 5
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: LD_INT 5
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 4
59884: NEG
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 4
59895: NEG
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 4
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 4
59930: NEG
59931: PUSH
59932: LD_INT 4
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: LD_INT 5
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 4
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 4
59978: NEG
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 5
59990: NEG
59991: PUSH
59992: LD_INT 4
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 5
60002: NEG
60003: PUSH
60004: LD_INT 5
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: LD_INT 5
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 5
60026: NEG
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60083: LD_ADDR_VAR 0 30
60087: PUSH
60088: LD_INT 4
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 4
60100: PUSH
60101: LD_INT 3
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 5
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 5
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: LD_INT 5
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 5
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 5
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 4
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 4
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: LD_INT 4
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 4
60273: NEG
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 4
60284: NEG
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 5
60329: NEG
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 5
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 5
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: LD_INT 3
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: LD_INT 4
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 4
60435: NEG
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 4
60447: NEG
60448: PUSH
60449: LD_INT 4
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: LD_INT 4
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 4
60471: NEG
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: LD_INT 5
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 4
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 3
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 4
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 5
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 3
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 5
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60630: LD_ADDR_VAR 0 31
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 4
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 3
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 4
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 5
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 5
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 4
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 5
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 4
60786: NEG
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 2
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 4
60832: NEG
60833: PUSH
60834: LD_INT 4
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 4
60844: NEG
60845: PUSH
60846: LD_INT 5
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: LD_INT 4
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 4
60880: NEG
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 5
60892: NEG
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 5
60904: NEG
60905: PUSH
60906: LD_INT 5
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: LD_INT 5
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 5
60928: NEG
60929: PUSH
60930: LD_INT 3
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 3
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 4
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: LD_INT 4
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 4
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 5
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 5
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 5
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61180: LD_ADDR_VAR 0 32
61184: PUSH
61185: LD_INT 4
61187: NEG
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 4
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 5
61243: NEG
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 5
61254: NEG
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 5
61266: NEG
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 3
61278: NEG
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: LD_INT 3
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: LD_INT 3
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 4
61349: NEG
61350: PUSH
61351: LD_INT 3
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 4
61361: NEG
61362: PUSH
61363: LD_INT 4
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: LD_INT 4
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 4
61385: NEG
61386: PUSH
61387: LD_INT 2
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: LD_INT 4
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 5
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 4
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 3
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: LD_INT 4
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 5
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: LD_INT 5
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 4
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 3
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 4
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 4
61592: PUSH
61593: LD_INT 4
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 5
61612: PUSH
61613: LD_INT 4
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 5
61622: PUSH
61623: LD_INT 5
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 4
61632: PUSH
61633: LD_INT 5
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: LD_INT 4
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 3
61652: PUSH
61653: LD_INT 3
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 5
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: LD_INT 5
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61727: LD_ADDR_VAR 0 33
61731: PUSH
61732: LD_INT 4
61734: NEG
61735: PUSH
61736: LD_INT 4
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 4
61746: NEG
61747: PUSH
61748: LD_INT 5
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 3
61758: NEG
61759: PUSH
61760: LD_INT 4
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 3
61770: NEG
61771: PUSH
61772: LD_INT 3
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 4
61782: NEG
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 5
61794: NEG
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 5
61806: NEG
61807: PUSH
61808: LD_INT 5
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: LD_INT 5
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 5
61830: NEG
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 3
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: LD_INT 3
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 4
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: LD_INT 4
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 4
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 4
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 5
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 5
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 4
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 4
62067: PUSH
62068: LD_INT 4
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: LD_INT 4
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 4
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: LD_INT 4
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: LD_INT 4
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 4
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 5
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 5
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 4
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 2
62199: PUSH
62200: LD_INT 5
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 2
62209: NEG
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62265: LD_ADDR_VAR 0 34
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 4
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 5
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 4
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 5
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 3
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: LD_INT 5
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 4
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 4
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 4
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 4
62467: PUSH
62468: LD_INT 4
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 5
62487: PUSH
62488: LD_INT 4
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 5
62497: PUSH
62498: LD_INT 5
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 4
62507: PUSH
62508: LD_INT 5
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: LD_INT 4
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 5
62537: PUSH
62538: LD_INT 3
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 5
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 4
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 4
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 3
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: LD_INT 4
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 4
62650: NEG
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 4
62661: NEG
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 3
62684: NEG
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 4
62695: NEG
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 5
62706: NEG
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 5
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 5
62729: NEG
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: ST_TO_ADDR
// end ; end ;
62797: GO 62800
62799: POP
// case btype of b_depot , b_warehouse :
62800: LD_VAR 0 1
62804: PUSH
62805: LD_INT 0
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62819
62811: LD_INT 1
62813: DOUBLE
62814: EQUAL
62815: IFTRUE 62819
62817: GO 63020
62819: POP
// case nation of nation_american :
62820: LD_VAR 0 5
62824: PUSH
62825: LD_INT 1
62827: DOUBLE
62828: EQUAL
62829: IFTRUE 62833
62831: GO 62889
62833: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62834: LD_ADDR_VAR 0 9
62838: PUSH
62839: LD_VAR 0 11
62843: PUSH
62844: LD_VAR 0 12
62848: PUSH
62849: LD_VAR 0 13
62853: PUSH
62854: LD_VAR 0 14
62858: PUSH
62859: LD_VAR 0 15
62863: PUSH
62864: LD_VAR 0 16
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: PUSH
62877: LD_VAR 0 4
62881: PUSH
62882: LD_INT 1
62884: PLUS
62885: ARRAY
62886: ST_TO_ADDR
62887: GO 63018
62889: LD_INT 2
62891: DOUBLE
62892: EQUAL
62893: IFTRUE 62897
62895: GO 62953
62897: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62898: LD_ADDR_VAR 0 9
62902: PUSH
62903: LD_VAR 0 17
62907: PUSH
62908: LD_VAR 0 18
62912: PUSH
62913: LD_VAR 0 19
62917: PUSH
62918: LD_VAR 0 20
62922: PUSH
62923: LD_VAR 0 21
62927: PUSH
62928: LD_VAR 0 22
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: PUSH
62941: LD_VAR 0 4
62945: PUSH
62946: LD_INT 1
62948: PLUS
62949: ARRAY
62950: ST_TO_ADDR
62951: GO 63018
62953: LD_INT 3
62955: DOUBLE
62956: EQUAL
62957: IFTRUE 62961
62959: GO 63017
62961: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62962: LD_ADDR_VAR 0 9
62966: PUSH
62967: LD_VAR 0 23
62971: PUSH
62972: LD_VAR 0 24
62976: PUSH
62977: LD_VAR 0 25
62981: PUSH
62982: LD_VAR 0 26
62986: PUSH
62987: LD_VAR 0 27
62991: PUSH
62992: LD_VAR 0 28
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: PUSH
63005: LD_VAR 0 4
63009: PUSH
63010: LD_INT 1
63012: PLUS
63013: ARRAY
63014: ST_TO_ADDR
63015: GO 63018
63017: POP
63018: GO 63573
63020: LD_INT 2
63022: DOUBLE
63023: EQUAL
63024: IFTRUE 63034
63026: LD_INT 3
63028: DOUBLE
63029: EQUAL
63030: IFTRUE 63034
63032: GO 63090
63034: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63035: LD_ADDR_VAR 0 9
63039: PUSH
63040: LD_VAR 0 29
63044: PUSH
63045: LD_VAR 0 30
63049: PUSH
63050: LD_VAR 0 31
63054: PUSH
63055: LD_VAR 0 32
63059: PUSH
63060: LD_VAR 0 33
63064: PUSH
63065: LD_VAR 0 34
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: PUSH
63078: LD_VAR 0 4
63082: PUSH
63083: LD_INT 1
63085: PLUS
63086: ARRAY
63087: ST_TO_ADDR
63088: GO 63573
63090: LD_INT 16
63092: DOUBLE
63093: EQUAL
63094: IFTRUE 63152
63096: LD_INT 17
63098: DOUBLE
63099: EQUAL
63100: IFTRUE 63152
63102: LD_INT 18
63104: DOUBLE
63105: EQUAL
63106: IFTRUE 63152
63108: LD_INT 19
63110: DOUBLE
63111: EQUAL
63112: IFTRUE 63152
63114: LD_INT 22
63116: DOUBLE
63117: EQUAL
63118: IFTRUE 63152
63120: LD_INT 20
63122: DOUBLE
63123: EQUAL
63124: IFTRUE 63152
63126: LD_INT 21
63128: DOUBLE
63129: EQUAL
63130: IFTRUE 63152
63132: LD_INT 23
63134: DOUBLE
63135: EQUAL
63136: IFTRUE 63152
63138: LD_INT 24
63140: DOUBLE
63141: EQUAL
63142: IFTRUE 63152
63144: LD_INT 25
63146: DOUBLE
63147: EQUAL
63148: IFTRUE 63152
63150: GO 63208
63152: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63153: LD_ADDR_VAR 0 9
63157: PUSH
63158: LD_VAR 0 35
63162: PUSH
63163: LD_VAR 0 36
63167: PUSH
63168: LD_VAR 0 37
63172: PUSH
63173: LD_VAR 0 38
63177: PUSH
63178: LD_VAR 0 39
63182: PUSH
63183: LD_VAR 0 40
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: PUSH
63196: LD_VAR 0 4
63200: PUSH
63201: LD_INT 1
63203: PLUS
63204: ARRAY
63205: ST_TO_ADDR
63206: GO 63573
63208: LD_INT 6
63210: DOUBLE
63211: EQUAL
63212: IFTRUE 63264
63214: LD_INT 7
63216: DOUBLE
63217: EQUAL
63218: IFTRUE 63264
63220: LD_INT 8
63222: DOUBLE
63223: EQUAL
63224: IFTRUE 63264
63226: LD_INT 13
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63264
63232: LD_INT 12
63234: DOUBLE
63235: EQUAL
63236: IFTRUE 63264
63238: LD_INT 15
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63264
63244: LD_INT 11
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63264
63250: LD_INT 14
63252: DOUBLE
63253: EQUAL
63254: IFTRUE 63264
63256: LD_INT 10
63258: DOUBLE
63259: EQUAL
63260: IFTRUE 63264
63262: GO 63320
63264: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63265: LD_ADDR_VAR 0 9
63269: PUSH
63270: LD_VAR 0 41
63274: PUSH
63275: LD_VAR 0 42
63279: PUSH
63280: LD_VAR 0 43
63284: PUSH
63285: LD_VAR 0 44
63289: PUSH
63290: LD_VAR 0 45
63294: PUSH
63295: LD_VAR 0 46
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: PUSH
63308: LD_VAR 0 4
63312: PUSH
63313: LD_INT 1
63315: PLUS
63316: ARRAY
63317: ST_TO_ADDR
63318: GO 63573
63320: LD_INT 36
63322: DOUBLE
63323: EQUAL
63324: IFTRUE 63328
63326: GO 63384
63328: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63329: LD_ADDR_VAR 0 9
63333: PUSH
63334: LD_VAR 0 47
63338: PUSH
63339: LD_VAR 0 48
63343: PUSH
63344: LD_VAR 0 49
63348: PUSH
63349: LD_VAR 0 50
63353: PUSH
63354: LD_VAR 0 51
63358: PUSH
63359: LD_VAR 0 52
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: PUSH
63372: LD_VAR 0 4
63376: PUSH
63377: LD_INT 1
63379: PLUS
63380: ARRAY
63381: ST_TO_ADDR
63382: GO 63573
63384: LD_INT 4
63386: DOUBLE
63387: EQUAL
63388: IFTRUE 63410
63390: LD_INT 5
63392: DOUBLE
63393: EQUAL
63394: IFTRUE 63410
63396: LD_INT 34
63398: DOUBLE
63399: EQUAL
63400: IFTRUE 63410
63402: LD_INT 37
63404: DOUBLE
63405: EQUAL
63406: IFTRUE 63410
63408: GO 63466
63410: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63411: LD_ADDR_VAR 0 9
63415: PUSH
63416: LD_VAR 0 53
63420: PUSH
63421: LD_VAR 0 54
63425: PUSH
63426: LD_VAR 0 55
63430: PUSH
63431: LD_VAR 0 56
63435: PUSH
63436: LD_VAR 0 57
63440: PUSH
63441: LD_VAR 0 58
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: PUSH
63454: LD_VAR 0 4
63458: PUSH
63459: LD_INT 1
63461: PLUS
63462: ARRAY
63463: ST_TO_ADDR
63464: GO 63573
63466: LD_INT 31
63468: DOUBLE
63469: EQUAL
63470: IFTRUE 63516
63472: LD_INT 32
63474: DOUBLE
63475: EQUAL
63476: IFTRUE 63516
63478: LD_INT 33
63480: DOUBLE
63481: EQUAL
63482: IFTRUE 63516
63484: LD_INT 27
63486: DOUBLE
63487: EQUAL
63488: IFTRUE 63516
63490: LD_INT 26
63492: DOUBLE
63493: EQUAL
63494: IFTRUE 63516
63496: LD_INT 28
63498: DOUBLE
63499: EQUAL
63500: IFTRUE 63516
63502: LD_INT 29
63504: DOUBLE
63505: EQUAL
63506: IFTRUE 63516
63508: LD_INT 30
63510: DOUBLE
63511: EQUAL
63512: IFTRUE 63516
63514: GO 63572
63516: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63517: LD_ADDR_VAR 0 9
63521: PUSH
63522: LD_VAR 0 59
63526: PUSH
63527: LD_VAR 0 60
63531: PUSH
63532: LD_VAR 0 61
63536: PUSH
63537: LD_VAR 0 62
63541: PUSH
63542: LD_VAR 0 63
63546: PUSH
63547: LD_VAR 0 64
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: PUSH
63560: LD_VAR 0 4
63564: PUSH
63565: LD_INT 1
63567: PLUS
63568: ARRAY
63569: ST_TO_ADDR
63570: GO 63573
63572: POP
// temp_list2 = [ ] ;
63573: LD_ADDR_VAR 0 10
63577: PUSH
63578: EMPTY
63579: ST_TO_ADDR
// for i in temp_list do
63580: LD_ADDR_VAR 0 8
63584: PUSH
63585: LD_VAR 0 9
63589: PUSH
63590: FOR_IN
63591: IFFALSE 63643
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63593: LD_ADDR_VAR 0 10
63597: PUSH
63598: LD_VAR 0 10
63602: PUSH
63603: LD_VAR 0 8
63607: PUSH
63608: LD_INT 1
63610: ARRAY
63611: PUSH
63612: LD_VAR 0 2
63616: PLUS
63617: PUSH
63618: LD_VAR 0 8
63622: PUSH
63623: LD_INT 2
63625: ARRAY
63626: PUSH
63627: LD_VAR 0 3
63631: PLUS
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: ADD
63640: ST_TO_ADDR
63641: GO 63590
63643: POP
63644: POP
// result = temp_list2 ;
63645: LD_ADDR_VAR 0 7
63649: PUSH
63650: LD_VAR 0 10
63654: ST_TO_ADDR
// end ;
63655: LD_VAR 0 7
63659: RET
// export function EnemyInRange ( unit , dist ) ; begin
63660: LD_INT 0
63662: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63663: LD_ADDR_VAR 0 3
63667: PUSH
63668: LD_VAR 0 1
63672: PPUSH
63673: CALL_OW 255
63677: PPUSH
63678: LD_VAR 0 1
63682: PPUSH
63683: CALL_OW 250
63687: PPUSH
63688: LD_VAR 0 1
63692: PPUSH
63693: CALL_OW 251
63697: PPUSH
63698: LD_VAR 0 2
63702: PPUSH
63703: CALL 37033 0 4
63707: PUSH
63708: LD_INT 4
63710: ARRAY
63711: ST_TO_ADDR
// end ;
63712: LD_VAR 0 3
63716: RET
// export function PlayerSeeMe ( unit ) ; begin
63717: LD_INT 0
63719: PPUSH
// result := See ( your_side , unit ) ;
63720: LD_ADDR_VAR 0 2
63724: PUSH
63725: LD_OWVAR 2
63729: PPUSH
63730: LD_VAR 0 1
63734: PPUSH
63735: CALL_OW 292
63739: ST_TO_ADDR
// end ;
63740: LD_VAR 0 2
63744: RET
// export function ReverseDir ( unit ) ; begin
63745: LD_INT 0
63747: PPUSH
// if not unit then
63748: LD_VAR 0 1
63752: NOT
63753: IFFALSE 63757
// exit ;
63755: GO 63780
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63757: LD_ADDR_VAR 0 2
63761: PUSH
63762: LD_VAR 0 1
63766: PPUSH
63767: CALL_OW 254
63771: PUSH
63772: LD_INT 3
63774: PLUS
63775: PUSH
63776: LD_INT 6
63778: MOD
63779: ST_TO_ADDR
// end ;
63780: LD_VAR 0 2
63784: RET
// export function ReverseArray ( array ) ; var i ; begin
63785: LD_INT 0
63787: PPUSH
63788: PPUSH
// if not array then
63789: LD_VAR 0 1
63793: NOT
63794: IFFALSE 63798
// exit ;
63796: GO 63853
// result := [ ] ;
63798: LD_ADDR_VAR 0 2
63802: PUSH
63803: EMPTY
63804: ST_TO_ADDR
// for i := array downto 1 do
63805: LD_ADDR_VAR 0 3
63809: PUSH
63810: DOUBLE
63811: LD_VAR 0 1
63815: INC
63816: ST_TO_ADDR
63817: LD_INT 1
63819: PUSH
63820: FOR_DOWNTO
63821: IFFALSE 63851
// result := Join ( result , array [ i ] ) ;
63823: LD_ADDR_VAR 0 2
63827: PUSH
63828: LD_VAR 0 2
63832: PPUSH
63833: LD_VAR 0 1
63837: PUSH
63838: LD_VAR 0 3
63842: ARRAY
63843: PPUSH
63844: CALL 68498 0 2
63848: ST_TO_ADDR
63849: GO 63820
63851: POP
63852: POP
// end ;
63853: LD_VAR 0 2
63857: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63858: LD_INT 0
63860: PPUSH
63861: PPUSH
63862: PPUSH
63863: PPUSH
63864: PPUSH
63865: PPUSH
// if not unit or not hexes then
63866: LD_VAR 0 1
63870: NOT
63871: PUSH
63872: LD_VAR 0 2
63876: NOT
63877: OR
63878: IFFALSE 63882
// exit ;
63880: GO 64005
// dist := 9999 ;
63882: LD_ADDR_VAR 0 5
63886: PUSH
63887: LD_INT 9999
63889: ST_TO_ADDR
// for i = 1 to hexes do
63890: LD_ADDR_VAR 0 4
63894: PUSH
63895: DOUBLE
63896: LD_INT 1
63898: DEC
63899: ST_TO_ADDR
63900: LD_VAR 0 2
63904: PUSH
63905: FOR_TO
63906: IFFALSE 63993
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63908: LD_ADDR_VAR 0 6
63912: PUSH
63913: LD_VAR 0 1
63917: PPUSH
63918: LD_VAR 0 2
63922: PUSH
63923: LD_VAR 0 4
63927: ARRAY
63928: PUSH
63929: LD_INT 1
63931: ARRAY
63932: PPUSH
63933: LD_VAR 0 2
63937: PUSH
63938: LD_VAR 0 4
63942: ARRAY
63943: PUSH
63944: LD_INT 2
63946: ARRAY
63947: PPUSH
63948: CALL_OW 297
63952: ST_TO_ADDR
// if tdist < dist then
63953: LD_VAR 0 6
63957: PUSH
63958: LD_VAR 0 5
63962: LESS
63963: IFFALSE 63991
// begin hex := hexes [ i ] ;
63965: LD_ADDR_VAR 0 8
63969: PUSH
63970: LD_VAR 0 2
63974: PUSH
63975: LD_VAR 0 4
63979: ARRAY
63980: ST_TO_ADDR
// dist := tdist ;
63981: LD_ADDR_VAR 0 5
63985: PUSH
63986: LD_VAR 0 6
63990: ST_TO_ADDR
// end ; end ;
63991: GO 63905
63993: POP
63994: POP
// result := hex ;
63995: LD_ADDR_VAR 0 3
63999: PUSH
64000: LD_VAR 0 8
64004: ST_TO_ADDR
// end ;
64005: LD_VAR 0 3
64009: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64010: LD_INT 0
64012: PPUSH
64013: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64014: LD_VAR 0 1
64018: NOT
64019: PUSH
64020: LD_VAR 0 1
64024: PUSH
64025: LD_INT 21
64027: PUSH
64028: LD_INT 2
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 23
64037: PUSH
64038: LD_INT 2
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PPUSH
64049: CALL_OW 69
64053: IN
64054: NOT
64055: OR
64056: IFFALSE 64060
// exit ;
64058: GO 64107
// for i = 1 to 3 do
64060: LD_ADDR_VAR 0 3
64064: PUSH
64065: DOUBLE
64066: LD_INT 1
64068: DEC
64069: ST_TO_ADDR
64070: LD_INT 3
64072: PUSH
64073: FOR_TO
64074: IFFALSE 64105
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64076: LD_VAR 0 1
64080: PPUSH
64081: CALL_OW 250
64085: PPUSH
64086: LD_VAR 0 1
64090: PPUSH
64091: CALL_OW 251
64095: PPUSH
64096: LD_INT 1
64098: PPUSH
64099: CALL_OW 453
64103: GO 64073
64105: POP
64106: POP
// end ;
64107: LD_VAR 0 2
64111: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64112: LD_INT 0
64114: PPUSH
64115: PPUSH
64116: PPUSH
64117: PPUSH
64118: PPUSH
64119: PPUSH
// if not unit or not enemy_unit then
64120: LD_VAR 0 1
64124: NOT
64125: PUSH
64126: LD_VAR 0 2
64130: NOT
64131: OR
64132: IFFALSE 64136
// exit ;
64134: GO 64603
// if GetLives ( i ) < 250 then
64136: LD_VAR 0 4
64140: PPUSH
64141: CALL_OW 256
64145: PUSH
64146: LD_INT 250
64148: LESS
64149: IFFALSE 64162
// begin ComAutodestruct ( i ) ;
64151: LD_VAR 0 4
64155: PPUSH
64156: CALL 64010 0 1
// exit ;
64160: GO 64603
// end ; x := GetX ( enemy_unit ) ;
64162: LD_ADDR_VAR 0 7
64166: PUSH
64167: LD_VAR 0 2
64171: PPUSH
64172: CALL_OW 250
64176: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64177: LD_ADDR_VAR 0 8
64181: PUSH
64182: LD_VAR 0 2
64186: PPUSH
64187: CALL_OW 251
64191: ST_TO_ADDR
// if not x or not y then
64192: LD_VAR 0 7
64196: NOT
64197: PUSH
64198: LD_VAR 0 8
64202: NOT
64203: OR
64204: IFFALSE 64208
// exit ;
64206: GO 64603
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64208: LD_ADDR_VAR 0 6
64212: PUSH
64213: LD_VAR 0 7
64217: PPUSH
64218: LD_INT 0
64220: PPUSH
64221: LD_INT 4
64223: PPUSH
64224: CALL_OW 272
64228: PUSH
64229: LD_VAR 0 8
64233: PPUSH
64234: LD_INT 0
64236: PPUSH
64237: LD_INT 4
64239: PPUSH
64240: CALL_OW 273
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_VAR 0 7
64253: PPUSH
64254: LD_INT 1
64256: PPUSH
64257: LD_INT 4
64259: PPUSH
64260: CALL_OW 272
64264: PUSH
64265: LD_VAR 0 8
64269: PPUSH
64270: LD_INT 1
64272: PPUSH
64273: LD_INT 4
64275: PPUSH
64276: CALL_OW 273
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_VAR 0 7
64289: PPUSH
64290: LD_INT 2
64292: PPUSH
64293: LD_INT 4
64295: PPUSH
64296: CALL_OW 272
64300: PUSH
64301: LD_VAR 0 8
64305: PPUSH
64306: LD_INT 2
64308: PPUSH
64309: LD_INT 4
64311: PPUSH
64312: CALL_OW 273
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_VAR 0 7
64325: PPUSH
64326: LD_INT 3
64328: PPUSH
64329: LD_INT 4
64331: PPUSH
64332: CALL_OW 272
64336: PUSH
64337: LD_VAR 0 8
64341: PPUSH
64342: LD_INT 3
64344: PPUSH
64345: LD_INT 4
64347: PPUSH
64348: CALL_OW 273
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_VAR 0 7
64361: PPUSH
64362: LD_INT 4
64364: PPUSH
64365: LD_INT 4
64367: PPUSH
64368: CALL_OW 272
64372: PUSH
64373: LD_VAR 0 8
64377: PPUSH
64378: LD_INT 4
64380: PPUSH
64381: LD_INT 4
64383: PPUSH
64384: CALL_OW 273
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_VAR 0 7
64397: PPUSH
64398: LD_INT 5
64400: PPUSH
64401: LD_INT 4
64403: PPUSH
64404: CALL_OW 272
64408: PUSH
64409: LD_VAR 0 8
64413: PPUSH
64414: LD_INT 5
64416: PPUSH
64417: LD_INT 4
64419: PPUSH
64420: CALL_OW 273
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: ST_TO_ADDR
// for i = tmp downto 1 do
64437: LD_ADDR_VAR 0 4
64441: PUSH
64442: DOUBLE
64443: LD_VAR 0 6
64447: INC
64448: ST_TO_ADDR
64449: LD_INT 1
64451: PUSH
64452: FOR_DOWNTO
64453: IFFALSE 64554
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64455: LD_VAR 0 6
64459: PUSH
64460: LD_VAR 0 4
64464: ARRAY
64465: PUSH
64466: LD_INT 1
64468: ARRAY
64469: PPUSH
64470: LD_VAR 0 6
64474: PUSH
64475: LD_VAR 0 4
64479: ARRAY
64480: PUSH
64481: LD_INT 2
64483: ARRAY
64484: PPUSH
64485: CALL_OW 488
64489: NOT
64490: PUSH
64491: LD_VAR 0 6
64495: PUSH
64496: LD_VAR 0 4
64500: ARRAY
64501: PUSH
64502: LD_INT 1
64504: ARRAY
64505: PPUSH
64506: LD_VAR 0 6
64510: PUSH
64511: LD_VAR 0 4
64515: ARRAY
64516: PUSH
64517: LD_INT 2
64519: ARRAY
64520: PPUSH
64521: CALL_OW 428
64525: PUSH
64526: LD_INT 0
64528: NONEQUAL
64529: OR
64530: IFFALSE 64552
// tmp := Delete ( tmp , i ) ;
64532: LD_ADDR_VAR 0 6
64536: PUSH
64537: LD_VAR 0 6
64541: PPUSH
64542: LD_VAR 0 4
64546: PPUSH
64547: CALL_OW 3
64551: ST_TO_ADDR
64552: GO 64452
64554: POP
64555: POP
// j := GetClosestHex ( unit , tmp ) ;
64556: LD_ADDR_VAR 0 5
64560: PUSH
64561: LD_VAR 0 1
64565: PPUSH
64566: LD_VAR 0 6
64570: PPUSH
64571: CALL 63858 0 2
64575: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64576: LD_VAR 0 1
64580: PPUSH
64581: LD_VAR 0 5
64585: PUSH
64586: LD_INT 1
64588: ARRAY
64589: PPUSH
64590: LD_VAR 0 5
64594: PUSH
64595: LD_INT 2
64597: ARRAY
64598: PPUSH
64599: CALL_OW 111
// end ;
64603: LD_VAR 0 3
64607: RET
// export function PrepareApemanSoldier ( ) ; begin
64608: LD_INT 0
64610: PPUSH
// uc_nation := 0 ;
64611: LD_ADDR_OWVAR 21
64615: PUSH
64616: LD_INT 0
64618: ST_TO_ADDR
// hc_sex := sex_male ;
64619: LD_ADDR_OWVAR 27
64623: PUSH
64624: LD_INT 1
64626: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64627: LD_ADDR_OWVAR 28
64631: PUSH
64632: LD_INT 15
64634: ST_TO_ADDR
// hc_gallery :=  ;
64635: LD_ADDR_OWVAR 33
64639: PUSH
64640: LD_STRING 
64642: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64643: LD_ADDR_OWVAR 31
64647: PUSH
64648: LD_INT 0
64650: PPUSH
64651: LD_INT 3
64653: PPUSH
64654: CALL_OW 12
64658: PUSH
64659: LD_INT 0
64661: PPUSH
64662: LD_INT 3
64664: PPUSH
64665: CALL_OW 12
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// end ;
64682: LD_VAR 0 1
64686: RET
// export function PrepareApemanEngineer ( ) ; begin
64687: LD_INT 0
64689: PPUSH
// uc_nation := 0 ;
64690: LD_ADDR_OWVAR 21
64694: PUSH
64695: LD_INT 0
64697: ST_TO_ADDR
// hc_sex := sex_male ;
64698: LD_ADDR_OWVAR 27
64702: PUSH
64703: LD_INT 1
64705: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64706: LD_ADDR_OWVAR 28
64710: PUSH
64711: LD_INT 16
64713: ST_TO_ADDR
// hc_gallery :=  ;
64714: LD_ADDR_OWVAR 33
64718: PUSH
64719: LD_STRING 
64721: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64722: LD_ADDR_OWVAR 31
64726: PUSH
64727: LD_INT 0
64729: PPUSH
64730: LD_INT 3
64732: PPUSH
64733: CALL_OW 12
64737: PUSH
64738: LD_INT 0
64740: PPUSH
64741: LD_INT 3
64743: PPUSH
64744: CALL_OW 12
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: ST_TO_ADDR
// end ;
64761: LD_VAR 0 1
64765: RET
// export function PrepareApeman ( agressivity ) ; begin
64766: LD_INT 0
64768: PPUSH
// uc_side := 0 ;
64769: LD_ADDR_OWVAR 20
64773: PUSH
64774: LD_INT 0
64776: ST_TO_ADDR
// uc_nation := 0 ;
64777: LD_ADDR_OWVAR 21
64781: PUSH
64782: LD_INT 0
64784: ST_TO_ADDR
// hc_sex := sex_male ;
64785: LD_ADDR_OWVAR 27
64789: PUSH
64790: LD_INT 1
64792: ST_TO_ADDR
// hc_class := class_apeman ;
64793: LD_ADDR_OWVAR 28
64797: PUSH
64798: LD_INT 12
64800: ST_TO_ADDR
// hc_gallery :=  ;
64801: LD_ADDR_OWVAR 33
64805: PUSH
64806: LD_STRING 
64808: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64809: LD_ADDR_OWVAR 35
64813: PUSH
64814: LD_VAR 0 1
64818: NEG
64819: PPUSH
64820: LD_VAR 0 1
64824: PPUSH
64825: CALL_OW 12
64829: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64830: LD_ADDR_OWVAR 31
64834: PUSH
64835: LD_INT 0
64837: PPUSH
64838: LD_INT 3
64840: PPUSH
64841: CALL_OW 12
64845: PUSH
64846: LD_INT 0
64848: PPUSH
64849: LD_INT 3
64851: PPUSH
64852: CALL_OW 12
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: ST_TO_ADDR
// end ;
64869: LD_VAR 0 2
64873: RET
// export function PrepareTiger ( agressivity ) ; begin
64874: LD_INT 0
64876: PPUSH
// uc_side := 0 ;
64877: LD_ADDR_OWVAR 20
64881: PUSH
64882: LD_INT 0
64884: ST_TO_ADDR
// uc_nation := 0 ;
64885: LD_ADDR_OWVAR 21
64889: PUSH
64890: LD_INT 0
64892: ST_TO_ADDR
// hc_class := class_tiger ;
64893: LD_ADDR_OWVAR 28
64897: PUSH
64898: LD_INT 14
64900: ST_TO_ADDR
// hc_gallery :=  ;
64901: LD_ADDR_OWVAR 33
64905: PUSH
64906: LD_STRING 
64908: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64909: LD_ADDR_OWVAR 35
64913: PUSH
64914: LD_VAR 0 1
64918: NEG
64919: PPUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: CALL_OW 12
64929: ST_TO_ADDR
// end ;
64930: LD_VAR 0 2
64934: RET
// export function PrepareEnchidna ( ) ; begin
64935: LD_INT 0
64937: PPUSH
// uc_side := 0 ;
64938: LD_ADDR_OWVAR 20
64942: PUSH
64943: LD_INT 0
64945: ST_TO_ADDR
// uc_nation := 0 ;
64946: LD_ADDR_OWVAR 21
64950: PUSH
64951: LD_INT 0
64953: ST_TO_ADDR
// hc_class := class_baggie ;
64954: LD_ADDR_OWVAR 28
64958: PUSH
64959: LD_INT 13
64961: ST_TO_ADDR
// hc_gallery :=  ;
64962: LD_ADDR_OWVAR 33
64966: PUSH
64967: LD_STRING 
64969: ST_TO_ADDR
// end ;
64970: LD_VAR 0 1
64974: RET
// export function PrepareFrog ( ) ; begin
64975: LD_INT 0
64977: PPUSH
// uc_side := 0 ;
64978: LD_ADDR_OWVAR 20
64982: PUSH
64983: LD_INT 0
64985: ST_TO_ADDR
// uc_nation := 0 ;
64986: LD_ADDR_OWVAR 21
64990: PUSH
64991: LD_INT 0
64993: ST_TO_ADDR
// hc_class := class_frog ;
64994: LD_ADDR_OWVAR 28
64998: PUSH
64999: LD_INT 19
65001: ST_TO_ADDR
// hc_gallery :=  ;
65002: LD_ADDR_OWVAR 33
65006: PUSH
65007: LD_STRING 
65009: ST_TO_ADDR
// end ;
65010: LD_VAR 0 1
65014: RET
// export function PrepareFish ( ) ; begin
65015: LD_INT 0
65017: PPUSH
// uc_side := 0 ;
65018: LD_ADDR_OWVAR 20
65022: PUSH
65023: LD_INT 0
65025: ST_TO_ADDR
// uc_nation := 0 ;
65026: LD_ADDR_OWVAR 21
65030: PUSH
65031: LD_INT 0
65033: ST_TO_ADDR
// hc_class := class_fish ;
65034: LD_ADDR_OWVAR 28
65038: PUSH
65039: LD_INT 20
65041: ST_TO_ADDR
// hc_gallery :=  ;
65042: LD_ADDR_OWVAR 33
65046: PUSH
65047: LD_STRING 
65049: ST_TO_ADDR
// end ;
65050: LD_VAR 0 1
65054: RET
// export function PrepareBird ( ) ; begin
65055: LD_INT 0
65057: PPUSH
// uc_side := 0 ;
65058: LD_ADDR_OWVAR 20
65062: PUSH
65063: LD_INT 0
65065: ST_TO_ADDR
// uc_nation := 0 ;
65066: LD_ADDR_OWVAR 21
65070: PUSH
65071: LD_INT 0
65073: ST_TO_ADDR
// hc_class := class_phororhacos ;
65074: LD_ADDR_OWVAR 28
65078: PUSH
65079: LD_INT 18
65081: ST_TO_ADDR
// hc_gallery :=  ;
65082: LD_ADDR_OWVAR 33
65086: PUSH
65087: LD_STRING 
65089: ST_TO_ADDR
// end ;
65090: LD_VAR 0 1
65094: RET
// export function PrepareHorse ( ) ; begin
65095: LD_INT 0
65097: PPUSH
// uc_side := 0 ;
65098: LD_ADDR_OWVAR 20
65102: PUSH
65103: LD_INT 0
65105: ST_TO_ADDR
// uc_nation := 0 ;
65106: LD_ADDR_OWVAR 21
65110: PUSH
65111: LD_INT 0
65113: ST_TO_ADDR
// hc_class := class_horse ;
65114: LD_ADDR_OWVAR 28
65118: PUSH
65119: LD_INT 21
65121: ST_TO_ADDR
// hc_gallery :=  ;
65122: LD_ADDR_OWVAR 33
65126: PUSH
65127: LD_STRING 
65129: ST_TO_ADDR
// end ;
65130: LD_VAR 0 1
65134: RET
// export function PrepareMastodont ( ) ; begin
65135: LD_INT 0
65137: PPUSH
// uc_side := 0 ;
65138: LD_ADDR_OWVAR 20
65142: PUSH
65143: LD_INT 0
65145: ST_TO_ADDR
// uc_nation := 0 ;
65146: LD_ADDR_OWVAR 21
65150: PUSH
65151: LD_INT 0
65153: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65154: LD_ADDR_OWVAR 37
65158: PUSH
65159: LD_INT 31
65161: ST_TO_ADDR
// vc_control := control_rider ;
65162: LD_ADDR_OWVAR 38
65166: PUSH
65167: LD_INT 4
65169: ST_TO_ADDR
// end ;
65170: LD_VAR 0 1
65174: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65175: LD_INT 0
65177: PPUSH
65178: PPUSH
65179: PPUSH
// uc_side = 0 ;
65180: LD_ADDR_OWVAR 20
65184: PUSH
65185: LD_INT 0
65187: ST_TO_ADDR
// uc_nation = 0 ;
65188: LD_ADDR_OWVAR 21
65192: PUSH
65193: LD_INT 0
65195: ST_TO_ADDR
// InitHc_All ( ) ;
65196: CALL_OW 584
// InitVc ;
65200: CALL_OW 20
// if mastodonts then
65204: LD_VAR 0 6
65208: IFFALSE 65275
// for i = 1 to mastodonts do
65210: LD_ADDR_VAR 0 11
65214: PUSH
65215: DOUBLE
65216: LD_INT 1
65218: DEC
65219: ST_TO_ADDR
65220: LD_VAR 0 6
65224: PUSH
65225: FOR_TO
65226: IFFALSE 65273
// begin vc_chassis := 31 ;
65228: LD_ADDR_OWVAR 37
65232: PUSH
65233: LD_INT 31
65235: ST_TO_ADDR
// vc_control := control_rider ;
65236: LD_ADDR_OWVAR 38
65240: PUSH
65241: LD_INT 4
65243: ST_TO_ADDR
// animal := CreateVehicle ;
65244: LD_ADDR_VAR 0 12
65248: PUSH
65249: CALL_OW 45
65253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65254: LD_VAR 0 12
65258: PPUSH
65259: LD_VAR 0 8
65263: PPUSH
65264: LD_INT 0
65266: PPUSH
65267: CALL 67403 0 3
// end ;
65271: GO 65225
65273: POP
65274: POP
// if horses then
65275: LD_VAR 0 5
65279: IFFALSE 65346
// for i = 1 to horses do
65281: LD_ADDR_VAR 0 11
65285: PUSH
65286: DOUBLE
65287: LD_INT 1
65289: DEC
65290: ST_TO_ADDR
65291: LD_VAR 0 5
65295: PUSH
65296: FOR_TO
65297: IFFALSE 65344
// begin hc_class := 21 ;
65299: LD_ADDR_OWVAR 28
65303: PUSH
65304: LD_INT 21
65306: ST_TO_ADDR
// hc_gallery :=  ;
65307: LD_ADDR_OWVAR 33
65311: PUSH
65312: LD_STRING 
65314: ST_TO_ADDR
// animal := CreateHuman ;
65315: LD_ADDR_VAR 0 12
65319: PUSH
65320: CALL_OW 44
65324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65325: LD_VAR 0 12
65329: PPUSH
65330: LD_VAR 0 8
65334: PPUSH
65335: LD_INT 0
65337: PPUSH
65338: CALL 67403 0 3
// end ;
65342: GO 65296
65344: POP
65345: POP
// if birds then
65346: LD_VAR 0 1
65350: IFFALSE 65417
// for i = 1 to birds do
65352: LD_ADDR_VAR 0 11
65356: PUSH
65357: DOUBLE
65358: LD_INT 1
65360: DEC
65361: ST_TO_ADDR
65362: LD_VAR 0 1
65366: PUSH
65367: FOR_TO
65368: IFFALSE 65415
// begin hc_class := 18 ;
65370: LD_ADDR_OWVAR 28
65374: PUSH
65375: LD_INT 18
65377: ST_TO_ADDR
// hc_gallery =  ;
65378: LD_ADDR_OWVAR 33
65382: PUSH
65383: LD_STRING 
65385: ST_TO_ADDR
// animal := CreateHuman ;
65386: LD_ADDR_VAR 0 12
65390: PUSH
65391: CALL_OW 44
65395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65396: LD_VAR 0 12
65400: PPUSH
65401: LD_VAR 0 8
65405: PPUSH
65406: LD_INT 0
65408: PPUSH
65409: CALL 67403 0 3
// end ;
65413: GO 65367
65415: POP
65416: POP
// if tigers then
65417: LD_VAR 0 2
65421: IFFALSE 65505
// for i = 1 to tigers do
65423: LD_ADDR_VAR 0 11
65427: PUSH
65428: DOUBLE
65429: LD_INT 1
65431: DEC
65432: ST_TO_ADDR
65433: LD_VAR 0 2
65437: PUSH
65438: FOR_TO
65439: IFFALSE 65503
// begin hc_class = class_tiger ;
65441: LD_ADDR_OWVAR 28
65445: PUSH
65446: LD_INT 14
65448: ST_TO_ADDR
// hc_gallery =  ;
65449: LD_ADDR_OWVAR 33
65453: PUSH
65454: LD_STRING 
65456: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65457: LD_ADDR_OWVAR 35
65461: PUSH
65462: LD_INT 7
65464: NEG
65465: PPUSH
65466: LD_INT 7
65468: PPUSH
65469: CALL_OW 12
65473: ST_TO_ADDR
// animal := CreateHuman ;
65474: LD_ADDR_VAR 0 12
65478: PUSH
65479: CALL_OW 44
65483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65484: LD_VAR 0 12
65488: PPUSH
65489: LD_VAR 0 8
65493: PPUSH
65494: LD_INT 0
65496: PPUSH
65497: CALL 67403 0 3
// end ;
65501: GO 65438
65503: POP
65504: POP
// if apemans then
65505: LD_VAR 0 3
65509: IFFALSE 65632
// for i = 1 to apemans do
65511: LD_ADDR_VAR 0 11
65515: PUSH
65516: DOUBLE
65517: LD_INT 1
65519: DEC
65520: ST_TO_ADDR
65521: LD_VAR 0 3
65525: PUSH
65526: FOR_TO
65527: IFFALSE 65630
// begin hc_class = class_apeman ;
65529: LD_ADDR_OWVAR 28
65533: PUSH
65534: LD_INT 12
65536: ST_TO_ADDR
// hc_gallery =  ;
65537: LD_ADDR_OWVAR 33
65541: PUSH
65542: LD_STRING 
65544: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65545: LD_ADDR_OWVAR 35
65549: PUSH
65550: LD_INT 2
65552: NEG
65553: PPUSH
65554: LD_INT 2
65556: PPUSH
65557: CALL_OW 12
65561: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65562: LD_ADDR_OWVAR 31
65566: PUSH
65567: LD_INT 1
65569: PPUSH
65570: LD_INT 3
65572: PPUSH
65573: CALL_OW 12
65577: PUSH
65578: LD_INT 1
65580: PPUSH
65581: LD_INT 3
65583: PPUSH
65584: CALL_OW 12
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// animal := CreateHuman ;
65601: LD_ADDR_VAR 0 12
65605: PUSH
65606: CALL_OW 44
65610: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65611: LD_VAR 0 12
65615: PPUSH
65616: LD_VAR 0 8
65620: PPUSH
65621: LD_INT 0
65623: PPUSH
65624: CALL 67403 0 3
// end ;
65628: GO 65526
65630: POP
65631: POP
// if enchidnas then
65632: LD_VAR 0 4
65636: IFFALSE 65703
// for i = 1 to enchidnas do
65638: LD_ADDR_VAR 0 11
65642: PUSH
65643: DOUBLE
65644: LD_INT 1
65646: DEC
65647: ST_TO_ADDR
65648: LD_VAR 0 4
65652: PUSH
65653: FOR_TO
65654: IFFALSE 65701
// begin hc_class = 13 ;
65656: LD_ADDR_OWVAR 28
65660: PUSH
65661: LD_INT 13
65663: ST_TO_ADDR
// hc_gallery =  ;
65664: LD_ADDR_OWVAR 33
65668: PUSH
65669: LD_STRING 
65671: ST_TO_ADDR
// animal := CreateHuman ;
65672: LD_ADDR_VAR 0 12
65676: PUSH
65677: CALL_OW 44
65681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65682: LD_VAR 0 12
65686: PPUSH
65687: LD_VAR 0 8
65691: PPUSH
65692: LD_INT 0
65694: PPUSH
65695: CALL 67403 0 3
// end ;
65699: GO 65653
65701: POP
65702: POP
// if fishes then
65703: LD_VAR 0 7
65707: IFFALSE 65774
// for i = 1 to fishes do
65709: LD_ADDR_VAR 0 11
65713: PUSH
65714: DOUBLE
65715: LD_INT 1
65717: DEC
65718: ST_TO_ADDR
65719: LD_VAR 0 7
65723: PUSH
65724: FOR_TO
65725: IFFALSE 65772
// begin hc_class = 20 ;
65727: LD_ADDR_OWVAR 28
65731: PUSH
65732: LD_INT 20
65734: ST_TO_ADDR
// hc_gallery =  ;
65735: LD_ADDR_OWVAR 33
65739: PUSH
65740: LD_STRING 
65742: ST_TO_ADDR
// animal := CreateHuman ;
65743: LD_ADDR_VAR 0 12
65747: PUSH
65748: CALL_OW 44
65752: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65753: LD_VAR 0 12
65757: PPUSH
65758: LD_VAR 0 9
65762: PPUSH
65763: LD_INT 0
65765: PPUSH
65766: CALL 67403 0 3
// end ;
65770: GO 65724
65772: POP
65773: POP
// end ;
65774: LD_VAR 0 10
65778: RET
// export function WantHeal ( sci , unit ) ; begin
65779: LD_INT 0
65781: PPUSH
// if GetTaskList ( sci ) > 0 then
65782: LD_VAR 0 1
65786: PPUSH
65787: CALL_OW 437
65791: PUSH
65792: LD_INT 0
65794: GREATER
65795: IFFALSE 65865
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65797: LD_VAR 0 1
65801: PPUSH
65802: CALL_OW 437
65806: PUSH
65807: LD_INT 1
65809: ARRAY
65810: PUSH
65811: LD_INT 1
65813: ARRAY
65814: PUSH
65815: LD_STRING l
65817: EQUAL
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 437
65828: PUSH
65829: LD_INT 1
65831: ARRAY
65832: PUSH
65833: LD_INT 4
65835: ARRAY
65836: PUSH
65837: LD_VAR 0 2
65841: EQUAL
65842: AND
65843: IFFALSE 65855
// result := true else
65845: LD_ADDR_VAR 0 3
65849: PUSH
65850: LD_INT 1
65852: ST_TO_ADDR
65853: GO 65863
// result := false ;
65855: LD_ADDR_VAR 0 3
65859: PUSH
65860: LD_INT 0
65862: ST_TO_ADDR
// end else
65863: GO 65873
// result := false ;
65865: LD_ADDR_VAR 0 3
65869: PUSH
65870: LD_INT 0
65872: ST_TO_ADDR
// end ;
65873: LD_VAR 0 3
65877: RET
// export function HealTarget ( sci ) ; begin
65878: LD_INT 0
65880: PPUSH
// if not sci then
65881: LD_VAR 0 1
65885: NOT
65886: IFFALSE 65890
// exit ;
65888: GO 65955
// result := 0 ;
65890: LD_ADDR_VAR 0 2
65894: PUSH
65895: LD_INT 0
65897: ST_TO_ADDR
// if GetTaskList ( sci ) then
65898: LD_VAR 0 1
65902: PPUSH
65903: CALL_OW 437
65907: IFFALSE 65955
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65909: LD_VAR 0 1
65913: PPUSH
65914: CALL_OW 437
65918: PUSH
65919: LD_INT 1
65921: ARRAY
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PUSH
65927: LD_STRING l
65929: EQUAL
65930: IFFALSE 65955
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65932: LD_ADDR_VAR 0 2
65936: PUSH
65937: LD_VAR 0 1
65941: PPUSH
65942: CALL_OW 437
65946: PUSH
65947: LD_INT 1
65949: ARRAY
65950: PUSH
65951: LD_INT 4
65953: ARRAY
65954: ST_TO_ADDR
// end ;
65955: LD_VAR 0 2
65959: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65960: LD_INT 0
65962: PPUSH
65963: PPUSH
65964: PPUSH
65965: PPUSH
// if not base_units then
65966: LD_VAR 0 1
65970: NOT
65971: IFFALSE 65975
// exit ;
65973: GO 66062
// result := false ;
65975: LD_ADDR_VAR 0 2
65979: PUSH
65980: LD_INT 0
65982: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65983: LD_ADDR_VAR 0 5
65987: PUSH
65988: LD_VAR 0 1
65992: PPUSH
65993: LD_INT 21
65995: PUSH
65996: LD_INT 3
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PPUSH
66003: CALL_OW 72
66007: ST_TO_ADDR
// if not tmp then
66008: LD_VAR 0 5
66012: NOT
66013: IFFALSE 66017
// exit ;
66015: GO 66062
// for i in tmp do
66017: LD_ADDR_VAR 0 3
66021: PUSH
66022: LD_VAR 0 5
66026: PUSH
66027: FOR_IN
66028: IFFALSE 66060
// begin result := EnemyInRange ( i , 22 ) ;
66030: LD_ADDR_VAR 0 2
66034: PUSH
66035: LD_VAR 0 3
66039: PPUSH
66040: LD_INT 22
66042: PPUSH
66043: CALL 63660 0 2
66047: ST_TO_ADDR
// if result then
66048: LD_VAR 0 2
66052: IFFALSE 66058
// exit ;
66054: POP
66055: POP
66056: GO 66062
// end ;
66058: GO 66027
66060: POP
66061: POP
// end ;
66062: LD_VAR 0 2
66066: RET
// export function FilterByTag ( units , tag ) ; begin
66067: LD_INT 0
66069: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66070: LD_ADDR_VAR 0 3
66074: PUSH
66075: LD_VAR 0 1
66079: PPUSH
66080: LD_INT 120
66082: PUSH
66083: LD_VAR 0 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PPUSH
66092: CALL_OW 72
66096: ST_TO_ADDR
// end ;
66097: LD_VAR 0 3
66101: RET
// export function IsDriver ( un ) ; begin
66102: LD_INT 0
66104: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66105: LD_ADDR_VAR 0 2
66109: PUSH
66110: LD_VAR 0 1
66114: PUSH
66115: LD_INT 55
66117: PUSH
66118: EMPTY
66119: LIST
66120: PPUSH
66121: CALL_OW 69
66125: IN
66126: ST_TO_ADDR
// end ;
66127: LD_VAR 0 2
66131: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66132: LD_INT 0
66134: PPUSH
66135: PPUSH
// list := [ ] ;
66136: LD_ADDR_VAR 0 5
66140: PUSH
66141: EMPTY
66142: ST_TO_ADDR
// case d of 0 :
66143: LD_VAR 0 3
66147: PUSH
66148: LD_INT 0
66150: DOUBLE
66151: EQUAL
66152: IFTRUE 66156
66154: GO 66289
66156: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66157: LD_ADDR_VAR 0 5
66161: PUSH
66162: LD_VAR 0 1
66166: PUSH
66167: LD_INT 4
66169: MINUS
66170: PUSH
66171: LD_VAR 0 2
66175: PUSH
66176: LD_INT 4
66178: MINUS
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: PUSH
66188: LD_VAR 0 1
66192: PUSH
66193: LD_INT 3
66195: MINUS
66196: PUSH
66197: LD_VAR 0 2
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: PUSH
66210: LD_VAR 0 1
66214: PUSH
66215: LD_INT 4
66217: PLUS
66218: PUSH
66219: LD_VAR 0 2
66223: PUSH
66224: LD_INT 4
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: PUSH
66232: LD_VAR 0 1
66236: PUSH
66237: LD_INT 3
66239: PLUS
66240: PUSH
66241: LD_VAR 0 2
66245: PUSH
66246: LD_INT 3
66248: PLUS
66249: PUSH
66250: LD_INT 5
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: PUSH
66258: LD_VAR 0 1
66262: PUSH
66263: LD_VAR 0 2
66267: PUSH
66268: LD_INT 4
66270: PLUS
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: LIST
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: ST_TO_ADDR
// end ; 1 :
66287: GO 66987
66289: LD_INT 1
66291: DOUBLE
66292: EQUAL
66293: IFTRUE 66297
66295: GO 66430
66297: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66298: LD_ADDR_VAR 0 5
66302: PUSH
66303: LD_VAR 0 1
66307: PUSH
66308: LD_VAR 0 2
66312: PUSH
66313: LD_INT 4
66315: MINUS
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: PUSH
66325: LD_VAR 0 1
66329: PUSH
66330: LD_INT 3
66332: MINUS
66333: PUSH
66334: LD_VAR 0 2
66338: PUSH
66339: LD_INT 3
66341: MINUS
66342: PUSH
66343: LD_INT 2
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: PUSH
66351: LD_VAR 0 1
66355: PUSH
66356: LD_INT 4
66358: MINUS
66359: PUSH
66360: LD_VAR 0 2
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: PUSH
66373: LD_VAR 0 1
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 3
66385: PLUS
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 4
66402: PLUS
66403: PUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_INT 4
66411: PLUS
66412: PUSH
66413: LD_INT 5
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// end ; 2 :
66428: GO 66987
66430: LD_INT 2
66432: DOUBLE
66433: EQUAL
66434: IFTRUE 66438
66436: GO 66567
66438: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66439: LD_ADDR_VAR 0 5
66443: PUSH
66444: LD_VAR 0 1
66448: PUSH
66449: LD_VAR 0 2
66453: PUSH
66454: LD_INT 3
66456: MINUS
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: PUSH
66466: LD_VAR 0 1
66470: PUSH
66471: LD_INT 4
66473: PLUS
66474: PUSH
66475: LD_VAR 0 2
66479: PUSH
66480: LD_INT 4
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: PUSH
66488: LD_VAR 0 1
66492: PUSH
66493: LD_VAR 0 2
66497: PUSH
66498: LD_INT 4
66500: PLUS
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: LD_INT 3
66517: MINUS
66518: PUSH
66519: LD_VAR 0 2
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 4
66539: MINUS
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 4
66548: MINUS
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: ST_TO_ADDR
// end ; 3 :
66565: GO 66987
66567: LD_INT 3
66569: DOUBLE
66570: EQUAL
66571: IFTRUE 66575
66573: GO 66708
66575: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66576: LD_ADDR_VAR 0 5
66580: PUSH
66581: LD_VAR 0 1
66585: PUSH
66586: LD_INT 3
66588: PLUS
66589: PUSH
66590: LD_VAR 0 2
66594: PUSH
66595: LD_INT 4
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: LIST
66602: PUSH
66603: LD_VAR 0 1
66607: PUSH
66608: LD_INT 4
66610: PLUS
66611: PUSH
66612: LD_VAR 0 2
66616: PUSH
66617: LD_INT 4
66619: PLUS
66620: PUSH
66621: LD_INT 5
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: LIST
66628: PUSH
66629: LD_VAR 0 1
66633: PUSH
66634: LD_INT 4
66636: MINUS
66637: PUSH
66638: LD_VAR 0 2
66642: PUSH
66643: LD_INT 1
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: LIST
66650: PUSH
66651: LD_VAR 0 1
66655: PUSH
66656: LD_VAR 0 2
66660: PUSH
66661: LD_INT 4
66663: MINUS
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: PUSH
66673: LD_VAR 0 1
66677: PUSH
66678: LD_INT 3
66680: MINUS
66681: PUSH
66682: LD_VAR 0 2
66686: PUSH
66687: LD_INT 3
66689: MINUS
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: ST_TO_ADDR
// end ; 4 :
66706: GO 66987
66708: LD_INT 4
66710: DOUBLE
66711: EQUAL
66712: IFTRUE 66716
66714: GO 66849
66716: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66717: LD_ADDR_VAR 0 5
66721: PUSH
66722: LD_VAR 0 1
66726: PUSH
66727: LD_VAR 0 2
66731: PUSH
66732: LD_INT 4
66734: PLUS
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: PUSH
66744: LD_VAR 0 1
66748: PUSH
66749: LD_INT 3
66751: PLUS
66752: PUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_INT 3
66760: PLUS
66761: PUSH
66762: LD_INT 5
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: PUSH
66770: LD_VAR 0 1
66774: PUSH
66775: LD_INT 4
66777: PLUS
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_INT 4
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: PUSH
66792: LD_VAR 0 1
66796: PUSH
66797: LD_VAR 0 2
66801: PUSH
66802: LD_INT 3
66804: MINUS
66805: PUSH
66806: LD_INT 3
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: PUSH
66814: LD_VAR 0 1
66818: PUSH
66819: LD_INT 4
66821: MINUS
66822: PUSH
66823: LD_VAR 0 2
66827: PUSH
66828: LD_INT 4
66830: MINUS
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: LIST
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: ST_TO_ADDR
// end ; 5 :
66847: GO 66987
66849: LD_INT 5
66851: DOUBLE
66852: EQUAL
66853: IFTRUE 66857
66855: GO 66986
66857: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66858: LD_ADDR_VAR 0 5
66862: PUSH
66863: LD_VAR 0 1
66867: PUSH
66868: LD_INT 4
66870: MINUS
66871: PUSH
66872: LD_VAR 0 2
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: LIST
66884: PUSH
66885: LD_VAR 0 1
66889: PUSH
66890: LD_VAR 0 2
66894: PUSH
66895: LD_INT 4
66897: MINUS
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: LIST
66906: PUSH
66907: LD_VAR 0 1
66911: PUSH
66912: LD_INT 4
66914: PLUS
66915: PUSH
66916: LD_VAR 0 2
66920: PUSH
66921: LD_INT 4
66923: PLUS
66924: PUSH
66925: LD_INT 5
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: PUSH
66933: LD_VAR 0 1
66937: PUSH
66938: LD_INT 3
66940: PLUS
66941: PUSH
66942: LD_VAR 0 2
66946: PUSH
66947: LD_INT 4
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: LIST
66954: PUSH
66955: LD_VAR 0 1
66959: PUSH
66960: LD_VAR 0 2
66964: PUSH
66965: LD_INT 3
66967: PLUS
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// end ; end ;
66984: GO 66987
66986: POP
// result := list ;
66987: LD_ADDR_VAR 0 4
66991: PUSH
66992: LD_VAR 0 5
66996: ST_TO_ADDR
// end ;
66997: LD_VAR 0 4
67001: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67002: LD_INT 0
67004: PPUSH
67005: PPUSH
67006: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67007: LD_VAR 0 1
67011: NOT
67012: PUSH
67013: LD_VAR 0 2
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: LD_INT 3
67026: PUSH
67027: LD_INT 4
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: IN
67036: NOT
67037: OR
67038: IFFALSE 67042
// exit ;
67040: GO 67125
// tmp := [ ] ;
67042: LD_ADDR_VAR 0 5
67046: PUSH
67047: EMPTY
67048: ST_TO_ADDR
// for i in units do
67049: LD_ADDR_VAR 0 4
67053: PUSH
67054: LD_VAR 0 1
67058: PUSH
67059: FOR_IN
67060: IFFALSE 67094
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67062: LD_ADDR_VAR 0 5
67066: PUSH
67067: LD_VAR 0 5
67071: PPUSH
67072: LD_VAR 0 4
67076: PPUSH
67077: LD_VAR 0 2
67081: PPUSH
67082: CALL_OW 259
67086: PPUSH
67087: CALL 68498 0 2
67091: ST_TO_ADDR
67092: GO 67059
67094: POP
67095: POP
// if not tmp then
67096: LD_VAR 0 5
67100: NOT
67101: IFFALSE 67105
// exit ;
67103: GO 67125
// result := SortListByListDesc ( units , tmp ) ;
67105: LD_ADDR_VAR 0 3
67109: PUSH
67110: LD_VAR 0 1
67114: PPUSH
67115: LD_VAR 0 5
67119: PPUSH
67120: CALL_OW 77
67124: ST_TO_ADDR
// end ;
67125: LD_VAR 0 3
67129: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67130: LD_INT 0
67132: PPUSH
67133: PPUSH
67134: PPUSH
// result := false ;
67135: LD_ADDR_VAR 0 3
67139: PUSH
67140: LD_INT 0
67142: ST_TO_ADDR
// if not building then
67143: LD_VAR 0 2
67147: NOT
67148: IFFALSE 67152
// exit ;
67150: GO 67290
// x := GetX ( building ) ;
67152: LD_ADDR_VAR 0 4
67156: PUSH
67157: LD_VAR 0 2
67161: PPUSH
67162: CALL_OW 250
67166: ST_TO_ADDR
// y := GetY ( building ) ;
67167: LD_ADDR_VAR 0 5
67171: PUSH
67172: LD_VAR 0 2
67176: PPUSH
67177: CALL_OW 251
67181: ST_TO_ADDR
// if not x or not y then
67182: LD_VAR 0 4
67186: NOT
67187: PUSH
67188: LD_VAR 0 5
67192: NOT
67193: OR
67194: IFFALSE 67198
// exit ;
67196: GO 67290
// if GetTaskList ( unit ) then
67198: LD_VAR 0 1
67202: PPUSH
67203: CALL_OW 437
67207: IFFALSE 67290
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67209: LD_STRING e
67211: PUSH
67212: LD_VAR 0 1
67216: PPUSH
67217: CALL_OW 437
67221: PUSH
67222: LD_INT 1
67224: ARRAY
67225: PUSH
67226: LD_INT 1
67228: ARRAY
67229: EQUAL
67230: PUSH
67231: LD_VAR 0 4
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 437
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PUSH
67250: LD_INT 2
67252: ARRAY
67253: EQUAL
67254: AND
67255: PUSH
67256: LD_VAR 0 5
67260: PUSH
67261: LD_VAR 0 1
67265: PPUSH
67266: CALL_OW 437
67270: PUSH
67271: LD_INT 1
67273: ARRAY
67274: PUSH
67275: LD_INT 3
67277: ARRAY
67278: EQUAL
67279: AND
67280: IFFALSE 67290
// result := true end ;
67282: LD_ADDR_VAR 0 3
67286: PUSH
67287: LD_INT 1
67289: ST_TO_ADDR
// end ;
67290: LD_VAR 0 3
67294: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67295: LD_INT 0
67297: PPUSH
// result := false ;
67298: LD_ADDR_VAR 0 4
67302: PUSH
67303: LD_INT 0
67305: ST_TO_ADDR
// if GetTaskList ( unit ) then
67306: LD_VAR 0 1
67310: PPUSH
67311: CALL_OW 437
67315: IFFALSE 67398
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67317: LD_STRING M
67319: PUSH
67320: LD_VAR 0 1
67324: PPUSH
67325: CALL_OW 437
67329: PUSH
67330: LD_INT 1
67332: ARRAY
67333: PUSH
67334: LD_INT 1
67336: ARRAY
67337: EQUAL
67338: PUSH
67339: LD_VAR 0 2
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 437
67353: PUSH
67354: LD_INT 1
67356: ARRAY
67357: PUSH
67358: LD_INT 2
67360: ARRAY
67361: EQUAL
67362: AND
67363: PUSH
67364: LD_VAR 0 3
67368: PUSH
67369: LD_VAR 0 1
67373: PPUSH
67374: CALL_OW 437
67378: PUSH
67379: LD_INT 1
67381: ARRAY
67382: PUSH
67383: LD_INT 3
67385: ARRAY
67386: EQUAL
67387: AND
67388: IFFALSE 67398
// result := true ;
67390: LD_ADDR_VAR 0 4
67394: PUSH
67395: LD_INT 1
67397: ST_TO_ADDR
// end ; end ;
67398: LD_VAR 0 4
67402: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67403: LD_INT 0
67405: PPUSH
67406: PPUSH
67407: PPUSH
67408: PPUSH
// if not unit or not area then
67409: LD_VAR 0 1
67413: NOT
67414: PUSH
67415: LD_VAR 0 2
67419: NOT
67420: OR
67421: IFFALSE 67425
// exit ;
67423: GO 67601
// tmp := AreaToList ( area , i ) ;
67425: LD_ADDR_VAR 0 6
67429: PUSH
67430: LD_VAR 0 2
67434: PPUSH
67435: LD_VAR 0 5
67439: PPUSH
67440: CALL_OW 517
67444: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67445: LD_ADDR_VAR 0 5
67449: PUSH
67450: DOUBLE
67451: LD_INT 1
67453: DEC
67454: ST_TO_ADDR
67455: LD_VAR 0 6
67459: PUSH
67460: LD_INT 1
67462: ARRAY
67463: PUSH
67464: FOR_TO
67465: IFFALSE 67599
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67467: LD_ADDR_VAR 0 7
67471: PUSH
67472: LD_VAR 0 6
67476: PUSH
67477: LD_INT 1
67479: ARRAY
67480: PUSH
67481: LD_VAR 0 5
67485: ARRAY
67486: PUSH
67487: LD_VAR 0 6
67491: PUSH
67492: LD_INT 2
67494: ARRAY
67495: PUSH
67496: LD_VAR 0 5
67500: ARRAY
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67506: LD_INT 92
67508: PUSH
67509: LD_VAR 0 7
67513: PUSH
67514: LD_INT 1
67516: ARRAY
67517: PUSH
67518: LD_VAR 0 7
67522: PUSH
67523: LD_INT 2
67525: ARRAY
67526: PUSH
67527: LD_INT 2
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: PPUSH
67536: CALL_OW 69
67540: PUSH
67541: LD_INT 0
67543: EQUAL
67544: IFFALSE 67597
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67546: LD_VAR 0 1
67550: PPUSH
67551: LD_VAR 0 7
67555: PUSH
67556: LD_INT 1
67558: ARRAY
67559: PPUSH
67560: LD_VAR 0 7
67564: PUSH
67565: LD_INT 2
67567: ARRAY
67568: PPUSH
67569: LD_VAR 0 3
67573: PPUSH
67574: CALL_OW 48
// result := IsPlaced ( unit ) ;
67578: LD_ADDR_VAR 0 4
67582: PUSH
67583: LD_VAR 0 1
67587: PPUSH
67588: CALL_OW 305
67592: ST_TO_ADDR
// exit ;
67593: POP
67594: POP
67595: GO 67601
// end ; end ;
67597: GO 67464
67599: POP
67600: POP
// end ;
67601: LD_VAR 0 4
67605: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67606: LD_INT 0
67608: PPUSH
67609: PPUSH
67610: PPUSH
// if not side or side > 8 then
67611: LD_VAR 0 1
67615: NOT
67616: PUSH
67617: LD_VAR 0 1
67621: PUSH
67622: LD_INT 8
67624: GREATER
67625: OR
67626: IFFALSE 67630
// exit ;
67628: GO 67817
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67630: LD_ADDR_VAR 0 4
67634: PUSH
67635: LD_INT 22
67637: PUSH
67638: LD_VAR 0 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 21
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PPUSH
67661: CALL_OW 69
67665: ST_TO_ADDR
// if not tmp then
67666: LD_VAR 0 4
67670: NOT
67671: IFFALSE 67675
// exit ;
67673: GO 67817
// enable_addtolog := true ;
67675: LD_ADDR_OWVAR 81
67679: PUSH
67680: LD_INT 1
67682: ST_TO_ADDR
// AddToLog ( [ ) ;
67683: LD_STRING [
67685: PPUSH
67686: CALL_OW 561
// for i in tmp do
67690: LD_ADDR_VAR 0 3
67694: PUSH
67695: LD_VAR 0 4
67699: PUSH
67700: FOR_IN
67701: IFFALSE 67808
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67703: LD_STRING [
67705: PUSH
67706: LD_VAR 0 3
67710: PPUSH
67711: CALL_OW 266
67715: STR
67716: PUSH
67717: LD_STRING , 
67719: STR
67720: PUSH
67721: LD_VAR 0 3
67725: PPUSH
67726: CALL_OW 250
67730: STR
67731: PUSH
67732: LD_STRING , 
67734: STR
67735: PUSH
67736: LD_VAR 0 3
67740: PPUSH
67741: CALL_OW 251
67745: STR
67746: PUSH
67747: LD_STRING , 
67749: STR
67750: PUSH
67751: LD_VAR 0 3
67755: PPUSH
67756: CALL_OW 254
67760: STR
67761: PUSH
67762: LD_STRING , 
67764: STR
67765: PUSH
67766: LD_VAR 0 3
67770: PPUSH
67771: LD_INT 1
67773: PPUSH
67774: CALL_OW 268
67778: STR
67779: PUSH
67780: LD_STRING , 
67782: STR
67783: PUSH
67784: LD_VAR 0 3
67788: PPUSH
67789: LD_INT 2
67791: PPUSH
67792: CALL_OW 268
67796: STR
67797: PUSH
67798: LD_STRING ],
67800: STR
67801: PPUSH
67802: CALL_OW 561
// end ;
67806: GO 67700
67808: POP
67809: POP
// AddToLog ( ]; ) ;
67810: LD_STRING ];
67812: PPUSH
67813: CALL_OW 561
// end ;
67817: LD_VAR 0 2
67821: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67822: LD_INT 0
67824: PPUSH
67825: PPUSH
67826: PPUSH
67827: PPUSH
67828: PPUSH
// if not area or not rate or not max then
67829: LD_VAR 0 1
67833: NOT
67834: PUSH
67835: LD_VAR 0 2
67839: NOT
67840: OR
67841: PUSH
67842: LD_VAR 0 4
67846: NOT
67847: OR
67848: IFFALSE 67852
// exit ;
67850: GO 68041
// while 1 do
67852: LD_INT 1
67854: IFFALSE 68041
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67856: LD_ADDR_VAR 0 9
67860: PUSH
67861: LD_VAR 0 1
67865: PPUSH
67866: LD_INT 1
67868: PPUSH
67869: CALL_OW 287
67873: PUSH
67874: LD_INT 10
67876: MUL
67877: ST_TO_ADDR
// r := rate / 10 ;
67878: LD_ADDR_VAR 0 7
67882: PUSH
67883: LD_VAR 0 2
67887: PUSH
67888: LD_INT 10
67890: DIVREAL
67891: ST_TO_ADDR
// time := 1 1$00 ;
67892: LD_ADDR_VAR 0 8
67896: PUSH
67897: LD_INT 2100
67899: ST_TO_ADDR
// if amount < min then
67900: LD_VAR 0 9
67904: PUSH
67905: LD_VAR 0 3
67909: LESS
67910: IFFALSE 67928
// r := r * 2 else
67912: LD_ADDR_VAR 0 7
67916: PUSH
67917: LD_VAR 0 7
67921: PUSH
67922: LD_INT 2
67924: MUL
67925: ST_TO_ADDR
67926: GO 67954
// if amount > max then
67928: LD_VAR 0 9
67932: PUSH
67933: LD_VAR 0 4
67937: GREATER
67938: IFFALSE 67954
// r := r / 2 ;
67940: LD_ADDR_VAR 0 7
67944: PUSH
67945: LD_VAR 0 7
67949: PUSH
67950: LD_INT 2
67952: DIVREAL
67953: ST_TO_ADDR
// time := time / r ;
67954: LD_ADDR_VAR 0 8
67958: PUSH
67959: LD_VAR 0 8
67963: PUSH
67964: LD_VAR 0 7
67968: DIVREAL
67969: ST_TO_ADDR
// if time < 0 then
67970: LD_VAR 0 8
67974: PUSH
67975: LD_INT 0
67977: LESS
67978: IFFALSE 67995
// time := time * - 1 ;
67980: LD_ADDR_VAR 0 8
67984: PUSH
67985: LD_VAR 0 8
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: MUL
67994: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67995: LD_VAR 0 8
67999: PUSH
68000: LD_INT 35
68002: PPUSH
68003: LD_INT 875
68005: PPUSH
68006: CALL_OW 12
68010: PLUS
68011: PPUSH
68012: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68016: LD_INT 1
68018: PPUSH
68019: LD_INT 5
68021: PPUSH
68022: CALL_OW 12
68026: PPUSH
68027: LD_VAR 0 1
68031: PPUSH
68032: LD_INT 1
68034: PPUSH
68035: CALL_OW 55
// end ;
68039: GO 67852
// end ;
68041: LD_VAR 0 5
68045: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68046: LD_INT 0
68048: PPUSH
68049: PPUSH
68050: PPUSH
68051: PPUSH
68052: PPUSH
68053: PPUSH
68054: PPUSH
68055: PPUSH
// if not turrets or not factories then
68056: LD_VAR 0 1
68060: NOT
68061: PUSH
68062: LD_VAR 0 2
68066: NOT
68067: OR
68068: IFFALSE 68072
// exit ;
68070: GO 68379
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68072: LD_ADDR_VAR 0 10
68076: PUSH
68077: LD_INT 5
68079: PUSH
68080: LD_INT 6
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 2
68089: PUSH
68090: LD_INT 4
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 3
68099: PUSH
68100: LD_INT 5
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 24
68114: PUSH
68115: LD_INT 25
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 23
68124: PUSH
68125: LD_INT 27
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 42
68138: PUSH
68139: LD_INT 43
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 44
68148: PUSH
68149: LD_INT 46
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 45
68158: PUSH
68159: LD_INT 47
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: LIST
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: LIST
68175: ST_TO_ADDR
// result := [ ] ;
68176: LD_ADDR_VAR 0 3
68180: PUSH
68181: EMPTY
68182: ST_TO_ADDR
// for i in turrets do
68183: LD_ADDR_VAR 0 4
68187: PUSH
68188: LD_VAR 0 1
68192: PUSH
68193: FOR_IN
68194: IFFALSE 68377
// begin nat := GetNation ( i ) ;
68196: LD_ADDR_VAR 0 7
68200: PUSH
68201: LD_VAR 0 4
68205: PPUSH
68206: CALL_OW 248
68210: ST_TO_ADDR
// weapon := 0 ;
68211: LD_ADDR_VAR 0 8
68215: PUSH
68216: LD_INT 0
68218: ST_TO_ADDR
// if not nat then
68219: LD_VAR 0 7
68223: NOT
68224: IFFALSE 68228
// continue ;
68226: GO 68193
// for j in list [ nat ] do
68228: LD_ADDR_VAR 0 5
68232: PUSH
68233: LD_VAR 0 10
68237: PUSH
68238: LD_VAR 0 7
68242: ARRAY
68243: PUSH
68244: FOR_IN
68245: IFFALSE 68286
// if GetBWeapon ( i ) = j [ 1 ] then
68247: LD_VAR 0 4
68251: PPUSH
68252: CALL_OW 269
68256: PUSH
68257: LD_VAR 0 5
68261: PUSH
68262: LD_INT 1
68264: ARRAY
68265: EQUAL
68266: IFFALSE 68284
// begin weapon := j [ 2 ] ;
68268: LD_ADDR_VAR 0 8
68272: PUSH
68273: LD_VAR 0 5
68277: PUSH
68278: LD_INT 2
68280: ARRAY
68281: ST_TO_ADDR
// break ;
68282: GO 68286
// end ;
68284: GO 68244
68286: POP
68287: POP
// if not weapon then
68288: LD_VAR 0 8
68292: NOT
68293: IFFALSE 68297
// continue ;
68295: GO 68193
// for k in factories do
68297: LD_ADDR_VAR 0 6
68301: PUSH
68302: LD_VAR 0 2
68306: PUSH
68307: FOR_IN
68308: IFFALSE 68373
// begin weapons := AvailableWeaponList ( k ) ;
68310: LD_ADDR_VAR 0 9
68314: PUSH
68315: LD_VAR 0 6
68319: PPUSH
68320: CALL_OW 478
68324: ST_TO_ADDR
// if not weapons then
68325: LD_VAR 0 9
68329: NOT
68330: IFFALSE 68334
// continue ;
68332: GO 68307
// if weapon in weapons then
68334: LD_VAR 0 8
68338: PUSH
68339: LD_VAR 0 9
68343: IN
68344: IFFALSE 68371
// begin result := [ i , weapon ] ;
68346: LD_ADDR_VAR 0 3
68350: PUSH
68351: LD_VAR 0 4
68355: PUSH
68356: LD_VAR 0 8
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: ST_TO_ADDR
// exit ;
68365: POP
68366: POP
68367: POP
68368: POP
68369: GO 68379
// end ; end ;
68371: GO 68307
68373: POP
68374: POP
// end ;
68375: GO 68193
68377: POP
68378: POP
// end ;
68379: LD_VAR 0 3
68383: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68384: LD_INT 0
68386: PPUSH
// if not side or side > 8 then
68387: LD_VAR 0 3
68391: NOT
68392: PUSH
68393: LD_VAR 0 3
68397: PUSH
68398: LD_INT 8
68400: GREATER
68401: OR
68402: IFFALSE 68406
// exit ;
68404: GO 68465
// if not range then
68406: LD_VAR 0 4
68410: NOT
68411: IFFALSE 68422
// range := - 12 ;
68413: LD_ADDR_VAR 0 4
68417: PUSH
68418: LD_INT 12
68420: NEG
68421: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 2
68431: PPUSH
68432: LD_VAR 0 3
68436: PPUSH
68437: LD_VAR 0 4
68441: PPUSH
68442: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68446: LD_VAR 0 1
68450: PPUSH
68451: LD_VAR 0 2
68455: PPUSH
68456: LD_VAR 0 3
68460: PPUSH
68461: CALL_OW 331
// end ;
68465: LD_VAR 0 5
68469: RET
// export function Video ( mode ) ; begin
68470: LD_INT 0
68472: PPUSH
// ingame_video = mode ;
68473: LD_ADDR_OWVAR 52
68477: PUSH
68478: LD_VAR 0 1
68482: ST_TO_ADDR
// interface_hidden = mode ;
68483: LD_ADDR_OWVAR 54
68487: PUSH
68488: LD_VAR 0 1
68492: ST_TO_ADDR
// end ;
68493: LD_VAR 0 2
68497: RET
// export function Join ( array , element ) ; begin
68498: LD_INT 0
68500: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68501: LD_ADDR_VAR 0 3
68505: PUSH
68506: LD_VAR 0 1
68510: PPUSH
68511: LD_VAR 0 1
68515: PUSH
68516: LD_INT 1
68518: PLUS
68519: PPUSH
68520: LD_VAR 0 2
68524: PPUSH
68525: CALL_OW 1
68529: ST_TO_ADDR
// end ;
68530: LD_VAR 0 3
68534: RET
// export function JoinUnion ( array , element ) ; begin
68535: LD_INT 0
68537: PPUSH
// result := array union element ;
68538: LD_ADDR_VAR 0 3
68542: PUSH
68543: LD_VAR 0 1
68547: PUSH
68548: LD_VAR 0 2
68552: UNION
68553: ST_TO_ADDR
// end ;
68554: LD_VAR 0 3
68558: RET
// export function GetBehemoths ( side ) ; begin
68559: LD_INT 0
68561: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68562: LD_ADDR_VAR 0 2
68566: PUSH
68567: LD_INT 22
68569: PUSH
68570: LD_VAR 0 1
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 31
68581: PUSH
68582: LD_INT 25
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PPUSH
68593: CALL_OW 69
68597: ST_TO_ADDR
// end ;
68598: LD_VAR 0 2
68602: RET
// export function Shuffle ( array ) ; var i , index ; begin
68603: LD_INT 0
68605: PPUSH
68606: PPUSH
68607: PPUSH
// result := [ ] ;
68608: LD_ADDR_VAR 0 2
68612: PUSH
68613: EMPTY
68614: ST_TO_ADDR
// if not array then
68615: LD_VAR 0 1
68619: NOT
68620: IFFALSE 68624
// exit ;
68622: GO 68723
// Randomize ;
68624: CALL_OW 10
// for i = array downto 1 do
68628: LD_ADDR_VAR 0 3
68632: PUSH
68633: DOUBLE
68634: LD_VAR 0 1
68638: INC
68639: ST_TO_ADDR
68640: LD_INT 1
68642: PUSH
68643: FOR_DOWNTO
68644: IFFALSE 68721
// begin index := rand ( 1 , array ) ;
68646: LD_ADDR_VAR 0 4
68650: PUSH
68651: LD_INT 1
68653: PPUSH
68654: LD_VAR 0 1
68658: PPUSH
68659: CALL_OW 12
68663: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68664: LD_ADDR_VAR 0 2
68668: PUSH
68669: LD_VAR 0 2
68673: PPUSH
68674: LD_VAR 0 2
68678: PUSH
68679: LD_INT 1
68681: PLUS
68682: PPUSH
68683: LD_VAR 0 1
68687: PUSH
68688: LD_VAR 0 4
68692: ARRAY
68693: PPUSH
68694: CALL_OW 2
68698: ST_TO_ADDR
// array := Delete ( array , index ) ;
68699: LD_ADDR_VAR 0 1
68703: PUSH
68704: LD_VAR 0 1
68708: PPUSH
68709: LD_VAR 0 4
68713: PPUSH
68714: CALL_OW 3
68718: ST_TO_ADDR
// end ;
68719: GO 68643
68721: POP
68722: POP
// end ;
68723: LD_VAR 0 2
68727: RET
// export function GetBaseMaterials ( base ) ; begin
68728: LD_INT 0
68730: PPUSH
// result := [ 0 , 0 , 0 ] ;
68731: LD_ADDR_VAR 0 2
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: LIST
68749: ST_TO_ADDR
// if not base then
68750: LD_VAR 0 1
68754: NOT
68755: IFFALSE 68759
// exit ;
68757: GO 68808
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68759: LD_ADDR_VAR 0 2
68763: PUSH
68764: LD_VAR 0 1
68768: PPUSH
68769: LD_INT 1
68771: PPUSH
68772: CALL_OW 275
68776: PUSH
68777: LD_VAR 0 1
68781: PPUSH
68782: LD_INT 2
68784: PPUSH
68785: CALL_OW 275
68789: PUSH
68790: LD_VAR 0 1
68794: PPUSH
68795: LD_INT 3
68797: PPUSH
68798: CALL_OW 275
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: LIST
68807: ST_TO_ADDR
// end ;
68808: LD_VAR 0 2
68812: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68813: LD_INT 0
68815: PPUSH
68816: PPUSH
// result := array ;
68817: LD_ADDR_VAR 0 3
68821: PUSH
68822: LD_VAR 0 1
68826: ST_TO_ADDR
// if size >= result then
68827: LD_VAR 0 2
68831: PUSH
68832: LD_VAR 0 3
68836: GREATEREQUAL
68837: IFFALSE 68841
// exit ;
68839: GO 68891
// if size then
68841: LD_VAR 0 2
68845: IFFALSE 68891
// for i := array downto size do
68847: LD_ADDR_VAR 0 4
68851: PUSH
68852: DOUBLE
68853: LD_VAR 0 1
68857: INC
68858: ST_TO_ADDR
68859: LD_VAR 0 2
68863: PUSH
68864: FOR_DOWNTO
68865: IFFALSE 68889
// result := Delete ( result , result ) ;
68867: LD_ADDR_VAR 0 3
68871: PUSH
68872: LD_VAR 0 3
68876: PPUSH
68877: LD_VAR 0 3
68881: PPUSH
68882: CALL_OW 3
68886: ST_TO_ADDR
68887: GO 68864
68889: POP
68890: POP
// end ;
68891: LD_VAR 0 3
68895: RET
// export function ComExit ( unit ) ; var tmp ; begin
68896: LD_INT 0
68898: PPUSH
68899: PPUSH
// if not IsInUnit ( unit ) then
68900: LD_VAR 0 1
68904: PPUSH
68905: CALL_OW 310
68909: NOT
68910: IFFALSE 68914
// exit ;
68912: GO 68974
// tmp := IsInUnit ( unit ) ;
68914: LD_ADDR_VAR 0 3
68918: PUSH
68919: LD_VAR 0 1
68923: PPUSH
68924: CALL_OW 310
68928: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68929: LD_VAR 0 3
68933: PPUSH
68934: CALL_OW 247
68938: PUSH
68939: LD_INT 2
68941: EQUAL
68942: IFFALSE 68955
// ComExitVehicle ( unit ) else
68944: LD_VAR 0 1
68948: PPUSH
68949: CALL_OW 121
68953: GO 68964
// ComExitBuilding ( unit ) ;
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL_OW 122
// result := tmp ;
68964: LD_ADDR_VAR 0 2
68968: PUSH
68969: LD_VAR 0 3
68973: ST_TO_ADDR
// end ;
68974: LD_VAR 0 2
68978: RET
// export function ComExitAll ( units ) ; var i ; begin
68979: LD_INT 0
68981: PPUSH
68982: PPUSH
// if not units then
68983: LD_VAR 0 1
68987: NOT
68988: IFFALSE 68992
// exit ;
68990: GO 69018
// for i in units do
68992: LD_ADDR_VAR 0 3
68996: PUSH
68997: LD_VAR 0 1
69001: PUSH
69002: FOR_IN
69003: IFFALSE 69016
// ComExit ( i ) ;
69005: LD_VAR 0 3
69009: PPUSH
69010: CALL 68896 0 1
69014: GO 69002
69016: POP
69017: POP
// end ;
69018: LD_VAR 0 2
69022: RET
// export function ResetHc ; begin
69023: LD_INT 0
69025: PPUSH
// InitHc ;
69026: CALL_OW 19
// hc_importance := 0 ;
69030: LD_ADDR_OWVAR 32
69034: PUSH
69035: LD_INT 0
69037: ST_TO_ADDR
// end ;
69038: LD_VAR 0 1
69042: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69043: LD_INT 0
69045: PPUSH
69046: PPUSH
69047: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69048: LD_ADDR_VAR 0 6
69052: PUSH
69053: LD_VAR 0 1
69057: PUSH
69058: LD_VAR 0 3
69062: PLUS
69063: PUSH
69064: LD_INT 2
69066: DIV
69067: ST_TO_ADDR
// if _x < 0 then
69068: LD_VAR 0 6
69072: PUSH
69073: LD_INT 0
69075: LESS
69076: IFFALSE 69093
// _x := _x * - 1 ;
69078: LD_ADDR_VAR 0 6
69082: PUSH
69083: LD_VAR 0 6
69087: PUSH
69088: LD_INT 1
69090: NEG
69091: MUL
69092: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69093: LD_ADDR_VAR 0 7
69097: PUSH
69098: LD_VAR 0 2
69102: PUSH
69103: LD_VAR 0 4
69107: PLUS
69108: PUSH
69109: LD_INT 2
69111: DIV
69112: ST_TO_ADDR
// if _y < 0 then
69113: LD_VAR 0 7
69117: PUSH
69118: LD_INT 0
69120: LESS
69121: IFFALSE 69138
// _y := _y * - 1 ;
69123: LD_ADDR_VAR 0 7
69127: PUSH
69128: LD_VAR 0 7
69132: PUSH
69133: LD_INT 1
69135: NEG
69136: MUL
69137: ST_TO_ADDR
// result := [ _x , _y ] ;
69138: LD_ADDR_VAR 0 5
69142: PUSH
69143: LD_VAR 0 6
69147: PUSH
69148: LD_VAR 0 7
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: ST_TO_ADDR
// end ;
69157: LD_VAR 0 5
69161: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69162: LD_INT 0
69164: PPUSH
69165: PPUSH
69166: PPUSH
69167: PPUSH
// task := GetTaskList ( unit ) ;
69168: LD_ADDR_VAR 0 7
69172: PUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: CALL_OW 437
69182: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69183: LD_VAR 0 7
69187: NOT
69188: PUSH
69189: LD_VAR 0 1
69193: PPUSH
69194: LD_VAR 0 2
69198: PPUSH
69199: CALL_OW 308
69203: NOT
69204: AND
69205: IFFALSE 69209
// exit ;
69207: GO 69327
// if IsInArea ( unit , area ) then
69209: LD_VAR 0 1
69213: PPUSH
69214: LD_VAR 0 2
69218: PPUSH
69219: CALL_OW 308
69223: IFFALSE 69241
// begin ComMoveToArea ( unit , goAway ) ;
69225: LD_VAR 0 1
69229: PPUSH
69230: LD_VAR 0 3
69234: PPUSH
69235: CALL_OW 113
// exit ;
69239: GO 69327
// end ; if task [ 1 ] [ 1 ] <> M then
69241: LD_VAR 0 7
69245: PUSH
69246: LD_INT 1
69248: ARRAY
69249: PUSH
69250: LD_INT 1
69252: ARRAY
69253: PUSH
69254: LD_STRING M
69256: NONEQUAL
69257: IFFALSE 69261
// exit ;
69259: GO 69327
// x := task [ 1 ] [ 2 ] ;
69261: LD_ADDR_VAR 0 5
69265: PUSH
69266: LD_VAR 0 7
69270: PUSH
69271: LD_INT 1
69273: ARRAY
69274: PUSH
69275: LD_INT 2
69277: ARRAY
69278: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69279: LD_ADDR_VAR 0 6
69283: PUSH
69284: LD_VAR 0 7
69288: PUSH
69289: LD_INT 1
69291: ARRAY
69292: PUSH
69293: LD_INT 3
69295: ARRAY
69296: ST_TO_ADDR
// if InArea ( x , y , area ) then
69297: LD_VAR 0 5
69301: PPUSH
69302: LD_VAR 0 6
69306: PPUSH
69307: LD_VAR 0 2
69311: PPUSH
69312: CALL_OW 309
69316: IFFALSE 69327
// ComStop ( unit ) ;
69318: LD_VAR 0 1
69322: PPUSH
69323: CALL_OW 141
// end ;
69327: LD_VAR 0 4
69331: RET
// export function Abs ( value ) ; begin
69332: LD_INT 0
69334: PPUSH
// result := value ;
69335: LD_ADDR_VAR 0 2
69339: PUSH
69340: LD_VAR 0 1
69344: ST_TO_ADDR
// if value < 0 then
69345: LD_VAR 0 1
69349: PUSH
69350: LD_INT 0
69352: LESS
69353: IFFALSE 69370
// result := value * - 1 ;
69355: LD_ADDR_VAR 0 2
69359: PUSH
69360: LD_VAR 0 1
69364: PUSH
69365: LD_INT 1
69367: NEG
69368: MUL
69369: ST_TO_ADDR
// end ;
69370: LD_VAR 0 2
69374: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69375: LD_INT 0
69377: PPUSH
69378: PPUSH
69379: PPUSH
69380: PPUSH
69381: PPUSH
69382: PPUSH
69383: PPUSH
69384: PPUSH
// if not unit or not building then
69385: LD_VAR 0 1
69389: NOT
69390: PUSH
69391: LD_VAR 0 2
69395: NOT
69396: OR
69397: IFFALSE 69401
// exit ;
69399: GO 69627
// x := GetX ( building ) ;
69401: LD_ADDR_VAR 0 4
69405: PUSH
69406: LD_VAR 0 2
69410: PPUSH
69411: CALL_OW 250
69415: ST_TO_ADDR
// y := GetY ( building ) ;
69416: LD_ADDR_VAR 0 6
69420: PUSH
69421: LD_VAR 0 2
69425: PPUSH
69426: CALL_OW 251
69430: ST_TO_ADDR
// d := GetDir ( building ) ;
69431: LD_ADDR_VAR 0 8
69435: PUSH
69436: LD_VAR 0 2
69440: PPUSH
69441: CALL_OW 254
69445: ST_TO_ADDR
// r := 4 ;
69446: LD_ADDR_VAR 0 9
69450: PUSH
69451: LD_INT 4
69453: ST_TO_ADDR
// for i := 1 to 5 do
69454: LD_ADDR_VAR 0 10
69458: PUSH
69459: DOUBLE
69460: LD_INT 1
69462: DEC
69463: ST_TO_ADDR
69464: LD_INT 5
69466: PUSH
69467: FOR_TO
69468: IFFALSE 69625
// begin _x := ShiftX ( x , d , r + i ) ;
69470: LD_ADDR_VAR 0 5
69474: PUSH
69475: LD_VAR 0 4
69479: PPUSH
69480: LD_VAR 0 8
69484: PPUSH
69485: LD_VAR 0 9
69489: PUSH
69490: LD_VAR 0 10
69494: PLUS
69495: PPUSH
69496: CALL_OW 272
69500: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69501: LD_ADDR_VAR 0 7
69505: PUSH
69506: LD_VAR 0 6
69510: PPUSH
69511: LD_VAR 0 8
69515: PPUSH
69516: LD_VAR 0 9
69520: PUSH
69521: LD_VAR 0 10
69525: PLUS
69526: PPUSH
69527: CALL_OW 273
69531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69532: LD_VAR 0 5
69536: PPUSH
69537: LD_VAR 0 7
69541: PPUSH
69542: CALL_OW 488
69546: PUSH
69547: LD_VAR 0 5
69551: PPUSH
69552: LD_VAR 0 7
69556: PPUSH
69557: CALL_OW 428
69561: PPUSH
69562: CALL_OW 247
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: LD_INT 2
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: IN
69577: NOT
69578: AND
69579: IFFALSE 69623
// begin ComMoveXY ( unit , _x , _y ) ;
69581: LD_VAR 0 1
69585: PPUSH
69586: LD_VAR 0 5
69590: PPUSH
69591: LD_VAR 0 7
69595: PPUSH
69596: CALL_OW 111
// result := [ _x , _y ] ;
69600: LD_ADDR_VAR 0 3
69604: PUSH
69605: LD_VAR 0 5
69609: PUSH
69610: LD_VAR 0 7
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: ST_TO_ADDR
// exit ;
69619: POP
69620: POP
69621: GO 69627
// end ; end ;
69623: GO 69467
69625: POP
69626: POP
// end ;
69627: LD_VAR 0 3
69631: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69632: LD_INT 0
69634: PPUSH
69635: PPUSH
69636: PPUSH
// result := 0 ;
69637: LD_ADDR_VAR 0 3
69641: PUSH
69642: LD_INT 0
69644: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69645: LD_VAR 0 1
69649: PUSH
69650: LD_INT 0
69652: LESS
69653: PUSH
69654: LD_VAR 0 1
69658: PUSH
69659: LD_INT 8
69661: GREATER
69662: OR
69663: PUSH
69664: LD_VAR 0 2
69668: PUSH
69669: LD_INT 0
69671: LESS
69672: OR
69673: PUSH
69674: LD_VAR 0 2
69678: PUSH
69679: LD_INT 8
69681: GREATER
69682: OR
69683: IFFALSE 69687
// exit ;
69685: GO 69762
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69687: LD_ADDR_VAR 0 4
69691: PUSH
69692: LD_INT 22
69694: PUSH
69695: LD_VAR 0 2
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PPUSH
69704: CALL_OW 69
69708: PUSH
69709: FOR_IN
69710: IFFALSE 69760
// begin un := UnitShoot ( i ) ;
69712: LD_ADDR_VAR 0 5
69716: PUSH
69717: LD_VAR 0 4
69721: PPUSH
69722: CALL_OW 504
69726: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69727: LD_VAR 0 5
69731: PPUSH
69732: CALL_OW 255
69736: PUSH
69737: LD_VAR 0 1
69741: EQUAL
69742: IFFALSE 69758
// begin result := un ;
69744: LD_ADDR_VAR 0 3
69748: PUSH
69749: LD_VAR 0 5
69753: ST_TO_ADDR
// exit ;
69754: POP
69755: POP
69756: GO 69762
// end ; end ;
69758: GO 69709
69760: POP
69761: POP
// end ;
69762: LD_VAR 0 3
69766: RET
// export function GetCargoBay ( units ) ; begin
69767: LD_INT 0
69769: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69770: LD_ADDR_VAR 0 2
69774: PUSH
69775: LD_VAR 0 1
69779: PPUSH
69780: LD_INT 2
69782: PUSH
69783: LD_INT 34
69785: PUSH
69786: LD_INT 12
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 34
69795: PUSH
69796: LD_INT 51
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 34
69805: PUSH
69806: LD_INT 32
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 34
69815: PUSH
69816: LD_INT 89
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: PPUSH
69830: CALL_OW 72
69834: ST_TO_ADDR
// end ;
69835: LD_VAR 0 2
69839: RET
// export function Negate ( value ) ; begin
69840: LD_INT 0
69842: PPUSH
// result := not value ;
69843: LD_ADDR_VAR 0 2
69847: PUSH
69848: LD_VAR 0 1
69852: NOT
69853: ST_TO_ADDR
// end ;
69854: LD_VAR 0 2
69858: RET
// export function Inc ( value ) ; begin
69859: LD_INT 0
69861: PPUSH
// result := value + 1 ;
69862: LD_ADDR_VAR 0 2
69866: PUSH
69867: LD_VAR 0 1
69871: PUSH
69872: LD_INT 1
69874: PLUS
69875: ST_TO_ADDR
// end ;
69876: LD_VAR 0 2
69880: RET
// export function Dec ( value ) ; begin
69881: LD_INT 0
69883: PPUSH
// result := value - 1 ;
69884: LD_ADDR_VAR 0 2
69888: PUSH
69889: LD_VAR 0 1
69893: PUSH
69894: LD_INT 1
69896: MINUS
69897: ST_TO_ADDR
// end ;
69898: LD_VAR 0 2
69902: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69903: LD_INT 0
69905: PPUSH
69906: PPUSH
69907: PPUSH
69908: PPUSH
69909: PPUSH
69910: PPUSH
69911: PPUSH
69912: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69913: LD_VAR 0 1
69917: PPUSH
69918: LD_VAR 0 2
69922: PPUSH
69923: CALL_OW 488
69927: NOT
69928: PUSH
69929: LD_VAR 0 3
69933: PPUSH
69934: LD_VAR 0 4
69938: PPUSH
69939: CALL_OW 488
69943: NOT
69944: OR
69945: IFFALSE 69958
// begin result := - 1 ;
69947: LD_ADDR_VAR 0 5
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: ST_TO_ADDR
// exit ;
69956: GO 70193
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69958: LD_ADDR_VAR 0 12
69962: PUSH
69963: LD_VAR 0 1
69967: PPUSH
69968: LD_VAR 0 2
69972: PPUSH
69973: LD_VAR 0 3
69977: PPUSH
69978: LD_VAR 0 4
69982: PPUSH
69983: CALL 69043 0 4
69987: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69988: LD_ADDR_VAR 0 11
69992: PUSH
69993: LD_VAR 0 1
69997: PPUSH
69998: LD_VAR 0 2
70002: PPUSH
70003: LD_VAR 0 12
70007: PUSH
70008: LD_INT 1
70010: ARRAY
70011: PPUSH
70012: LD_VAR 0 12
70016: PUSH
70017: LD_INT 2
70019: ARRAY
70020: PPUSH
70021: CALL_OW 298
70025: ST_TO_ADDR
// distance := 9999 ;
70026: LD_ADDR_VAR 0 10
70030: PUSH
70031: LD_INT 9999
70033: ST_TO_ADDR
// for i := 0 to 5 do
70034: LD_ADDR_VAR 0 6
70038: PUSH
70039: DOUBLE
70040: LD_INT 0
70042: DEC
70043: ST_TO_ADDR
70044: LD_INT 5
70046: PUSH
70047: FOR_TO
70048: IFFALSE 70191
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70050: LD_ADDR_VAR 0 7
70054: PUSH
70055: LD_VAR 0 1
70059: PPUSH
70060: LD_VAR 0 6
70064: PPUSH
70065: LD_VAR 0 11
70069: PPUSH
70070: CALL_OW 272
70074: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70075: LD_ADDR_VAR 0 8
70079: PUSH
70080: LD_VAR 0 2
70084: PPUSH
70085: LD_VAR 0 6
70089: PPUSH
70090: LD_VAR 0 11
70094: PPUSH
70095: CALL_OW 273
70099: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70100: LD_VAR 0 7
70104: PPUSH
70105: LD_VAR 0 8
70109: PPUSH
70110: CALL_OW 488
70114: NOT
70115: IFFALSE 70119
// continue ;
70117: GO 70047
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70119: LD_ADDR_VAR 0 9
70123: PUSH
70124: LD_VAR 0 12
70128: PUSH
70129: LD_INT 1
70131: ARRAY
70132: PPUSH
70133: LD_VAR 0 12
70137: PUSH
70138: LD_INT 2
70140: ARRAY
70141: PPUSH
70142: LD_VAR 0 7
70146: PPUSH
70147: LD_VAR 0 8
70151: PPUSH
70152: CALL_OW 298
70156: ST_TO_ADDR
// if tmp < distance then
70157: LD_VAR 0 9
70161: PUSH
70162: LD_VAR 0 10
70166: LESS
70167: IFFALSE 70189
// begin result := i ;
70169: LD_ADDR_VAR 0 5
70173: PUSH
70174: LD_VAR 0 6
70178: ST_TO_ADDR
// distance := tmp ;
70179: LD_ADDR_VAR 0 10
70183: PUSH
70184: LD_VAR 0 9
70188: ST_TO_ADDR
// end ; end ;
70189: GO 70047
70191: POP
70192: POP
// end ;
70193: LD_VAR 0 5
70197: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70198: LD_INT 0
70200: PPUSH
70201: PPUSH
// if not driver or not IsInUnit ( driver ) then
70202: LD_VAR 0 1
70206: NOT
70207: PUSH
70208: LD_VAR 0 1
70212: PPUSH
70213: CALL_OW 310
70217: NOT
70218: OR
70219: IFFALSE 70223
// exit ;
70221: GO 70313
// vehicle := IsInUnit ( driver ) ;
70223: LD_ADDR_VAR 0 3
70227: PUSH
70228: LD_VAR 0 1
70232: PPUSH
70233: CALL_OW 310
70237: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70238: LD_VAR 0 1
70242: PPUSH
70243: LD_STRING \
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: PUSH
70273: LD_STRING E
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: LD_INT 0
70281: PUSH
70282: LD_VAR 0 3
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PPUSH
70309: CALL_OW 446
// end ;
70313: LD_VAR 0 2
70317: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70318: LD_INT 0
70320: PPUSH
70321: PPUSH
// if not driver or not IsInUnit ( driver ) then
70322: LD_VAR 0 1
70326: NOT
70327: PUSH
70328: LD_VAR 0 1
70332: PPUSH
70333: CALL_OW 310
70337: NOT
70338: OR
70339: IFFALSE 70343
// exit ;
70341: GO 70433
// vehicle := IsInUnit ( driver ) ;
70343: LD_ADDR_VAR 0 3
70347: PUSH
70348: LD_VAR 0 1
70352: PPUSH
70353: CALL_OW 310
70357: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70358: LD_VAR 0 1
70362: PPUSH
70363: LD_STRING \
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: LD_INT 0
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: PUSH
70393: LD_STRING E
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: LD_VAR 0 3
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PPUSH
70429: CALL_OW 447
// end ;
70433: LD_VAR 0 2
70437: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70438: LD_INT 0
70440: PPUSH
70441: PPUSH
70442: PPUSH
// tmp := [ ] ;
70443: LD_ADDR_VAR 0 5
70447: PUSH
70448: EMPTY
70449: ST_TO_ADDR
// for i in units do
70450: LD_ADDR_VAR 0 4
70454: PUSH
70455: LD_VAR 0 1
70459: PUSH
70460: FOR_IN
70461: IFFALSE 70499
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70463: LD_ADDR_VAR 0 5
70467: PUSH
70468: LD_VAR 0 5
70472: PPUSH
70473: LD_VAR 0 5
70477: PUSH
70478: LD_INT 1
70480: PLUS
70481: PPUSH
70482: LD_VAR 0 4
70486: PPUSH
70487: CALL_OW 256
70491: PPUSH
70492: CALL_OW 2
70496: ST_TO_ADDR
70497: GO 70460
70499: POP
70500: POP
// if not tmp then
70501: LD_VAR 0 5
70505: NOT
70506: IFFALSE 70510
// exit ;
70508: GO 70558
// if asc then
70510: LD_VAR 0 2
70514: IFFALSE 70538
// result := SortListByListAsc ( units , tmp ) else
70516: LD_ADDR_VAR 0 3
70520: PUSH
70521: LD_VAR 0 1
70525: PPUSH
70526: LD_VAR 0 5
70530: PPUSH
70531: CALL_OW 76
70535: ST_TO_ADDR
70536: GO 70558
// result := SortListByListDesc ( units , tmp ) ;
70538: LD_ADDR_VAR 0 3
70542: PUSH
70543: LD_VAR 0 1
70547: PPUSH
70548: LD_VAR 0 5
70552: PPUSH
70553: CALL_OW 77
70557: ST_TO_ADDR
// end ;
70558: LD_VAR 0 3
70562: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70563: LD_INT 0
70565: PPUSH
70566: PPUSH
// task := GetTaskList ( mech ) ;
70567: LD_ADDR_VAR 0 4
70571: PUSH
70572: LD_VAR 0 1
70576: PPUSH
70577: CALL_OW 437
70581: ST_TO_ADDR
// if not task then
70582: LD_VAR 0 4
70586: NOT
70587: IFFALSE 70591
// exit ;
70589: GO 70633
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_VAR 0 4
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PUSH
70605: LD_INT 1
70607: ARRAY
70608: PUSH
70609: LD_STRING r
70611: EQUAL
70612: PUSH
70613: LD_VAR 0 4
70617: PUSH
70618: LD_INT 1
70620: ARRAY
70621: PUSH
70622: LD_INT 4
70624: ARRAY
70625: PUSH
70626: LD_VAR 0 2
70630: EQUAL
70631: AND
70632: ST_TO_ADDR
// end ;
70633: LD_VAR 0 3
70637: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70638: LD_INT 0
70640: PPUSH
// SetDir ( unit , d ) ;
70641: LD_VAR 0 1
70645: PPUSH
70646: LD_VAR 0 4
70650: PPUSH
70651: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70655: LD_VAR 0 1
70659: PPUSH
70660: LD_VAR 0 2
70664: PPUSH
70665: LD_VAR 0 3
70669: PPUSH
70670: LD_VAR 0 5
70674: PPUSH
70675: CALL_OW 48
// end ;
70679: LD_VAR 0 6
70683: RET
// export function ToNaturalNumber ( number ) ; begin
70684: LD_INT 0
70686: PPUSH
// result := number div 1 ;
70687: LD_ADDR_VAR 0 2
70691: PUSH
70692: LD_VAR 0 1
70696: PUSH
70697: LD_INT 1
70699: DIV
70700: ST_TO_ADDR
// if number < 0 then
70701: LD_VAR 0 1
70705: PUSH
70706: LD_INT 0
70708: LESS
70709: IFFALSE 70719
// result := 0 ;
70711: LD_ADDR_VAR 0 2
70715: PUSH
70716: LD_INT 0
70718: ST_TO_ADDR
// end ;
70719: LD_VAR 0 2
70723: RET
// export function SortByClass ( units , class ) ; var un ; begin
70724: LD_INT 0
70726: PPUSH
70727: PPUSH
// if not units or not class then
70728: LD_VAR 0 1
70732: NOT
70733: PUSH
70734: LD_VAR 0 2
70738: NOT
70739: OR
70740: IFFALSE 70744
// exit ;
70742: GO 70839
// result := [ ] ;
70744: LD_ADDR_VAR 0 3
70748: PUSH
70749: EMPTY
70750: ST_TO_ADDR
// for un in units do
70751: LD_ADDR_VAR 0 4
70755: PUSH
70756: LD_VAR 0 1
70760: PUSH
70761: FOR_IN
70762: IFFALSE 70837
// if GetClass ( un ) = class then
70764: LD_VAR 0 4
70768: PPUSH
70769: CALL_OW 257
70773: PUSH
70774: LD_VAR 0 2
70778: EQUAL
70779: IFFALSE 70806
// result := Insert ( result , 1 , un ) else
70781: LD_ADDR_VAR 0 3
70785: PUSH
70786: LD_VAR 0 3
70790: PPUSH
70791: LD_INT 1
70793: PPUSH
70794: LD_VAR 0 4
70798: PPUSH
70799: CALL_OW 2
70803: ST_TO_ADDR
70804: GO 70835
// result := Replace ( result , result + 1 , un ) ;
70806: LD_ADDR_VAR 0 3
70810: PUSH
70811: LD_VAR 0 3
70815: PPUSH
70816: LD_VAR 0 3
70820: PUSH
70821: LD_INT 1
70823: PLUS
70824: PPUSH
70825: LD_VAR 0 4
70829: PPUSH
70830: CALL_OW 1
70834: ST_TO_ADDR
70835: GO 70761
70837: POP
70838: POP
// end ;
70839: LD_VAR 0 3
70843: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70844: LD_INT 0
70846: PPUSH
70847: PPUSH
70848: PPUSH
70849: PPUSH
70850: PPUSH
70851: PPUSH
70852: PPUSH
// result := [ ] ;
70853: LD_ADDR_VAR 0 4
70857: PUSH
70858: EMPTY
70859: ST_TO_ADDR
// if x - r < 0 then
70860: LD_VAR 0 1
70864: PUSH
70865: LD_VAR 0 3
70869: MINUS
70870: PUSH
70871: LD_INT 0
70873: LESS
70874: IFFALSE 70886
// min_x := 0 else
70876: LD_ADDR_VAR 0 8
70880: PUSH
70881: LD_INT 0
70883: ST_TO_ADDR
70884: GO 70902
// min_x := x - r ;
70886: LD_ADDR_VAR 0 8
70890: PUSH
70891: LD_VAR 0 1
70895: PUSH
70896: LD_VAR 0 3
70900: MINUS
70901: ST_TO_ADDR
// if y - r < 0 then
70902: LD_VAR 0 2
70906: PUSH
70907: LD_VAR 0 3
70911: MINUS
70912: PUSH
70913: LD_INT 0
70915: LESS
70916: IFFALSE 70928
// min_y := 0 else
70918: LD_ADDR_VAR 0 7
70922: PUSH
70923: LD_INT 0
70925: ST_TO_ADDR
70926: GO 70944
// min_y := y - r ;
70928: LD_ADDR_VAR 0 7
70932: PUSH
70933: LD_VAR 0 2
70937: PUSH
70938: LD_VAR 0 3
70942: MINUS
70943: ST_TO_ADDR
// max_x := x + r ;
70944: LD_ADDR_VAR 0 9
70948: PUSH
70949: LD_VAR 0 1
70953: PUSH
70954: LD_VAR 0 3
70958: PLUS
70959: ST_TO_ADDR
// max_y := y + r ;
70960: LD_ADDR_VAR 0 10
70964: PUSH
70965: LD_VAR 0 2
70969: PUSH
70970: LD_VAR 0 3
70974: PLUS
70975: ST_TO_ADDR
// for _x = min_x to max_x do
70976: LD_ADDR_VAR 0 5
70980: PUSH
70981: DOUBLE
70982: LD_VAR 0 8
70986: DEC
70987: ST_TO_ADDR
70988: LD_VAR 0 9
70992: PUSH
70993: FOR_TO
70994: IFFALSE 71095
// for _y = min_y to max_y do
70996: LD_ADDR_VAR 0 6
71000: PUSH
71001: DOUBLE
71002: LD_VAR 0 7
71006: DEC
71007: ST_TO_ADDR
71008: LD_VAR 0 10
71012: PUSH
71013: FOR_TO
71014: IFFALSE 71091
// begin if not ValidHex ( _x , _y ) then
71016: LD_VAR 0 5
71020: PPUSH
71021: LD_VAR 0 6
71025: PPUSH
71026: CALL_OW 488
71030: NOT
71031: IFFALSE 71035
// continue ;
71033: GO 71013
// if GetResourceTypeXY ( _x , _y ) then
71035: LD_VAR 0 5
71039: PPUSH
71040: LD_VAR 0 6
71044: PPUSH
71045: CALL_OW 283
71049: IFFALSE 71089
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71051: LD_ADDR_VAR 0 4
71055: PUSH
71056: LD_VAR 0 4
71060: PPUSH
71061: LD_VAR 0 4
71065: PUSH
71066: LD_INT 1
71068: PLUS
71069: PPUSH
71070: LD_VAR 0 5
71074: PUSH
71075: LD_VAR 0 6
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PPUSH
71084: CALL_OW 1
71088: ST_TO_ADDR
// end ;
71089: GO 71013
71091: POP
71092: POP
71093: GO 70993
71095: POP
71096: POP
// end ;
71097: LD_VAR 0 4
71101: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71102: LD_INT 0
71104: PPUSH
71105: PPUSH
71106: PPUSH
71107: PPUSH
71108: PPUSH
71109: PPUSH
71110: PPUSH
71111: PPUSH
// if not units then
71112: LD_VAR 0 1
71116: NOT
71117: IFFALSE 71121
// exit ;
71119: GO 71645
// result := UnitFilter ( units , [ f_ok ] ) ;
71121: LD_ADDR_VAR 0 3
71125: PUSH
71126: LD_VAR 0 1
71130: PPUSH
71131: LD_INT 50
71133: PUSH
71134: EMPTY
71135: LIST
71136: PPUSH
71137: CALL_OW 72
71141: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71142: LD_ADDR_VAR 0 8
71146: PUSH
71147: LD_VAR 0 1
71151: PUSH
71152: LD_INT 1
71154: ARRAY
71155: PPUSH
71156: CALL_OW 255
71160: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71161: LD_ADDR_VAR 0 10
71165: PUSH
71166: LD_INT 29
71168: PUSH
71169: LD_INT 91
71171: PUSH
71172: LD_INT 49
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: LIST
71179: ST_TO_ADDR
// if not result then
71180: LD_VAR 0 3
71184: NOT
71185: IFFALSE 71189
// exit ;
71187: GO 71645
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71189: LD_ADDR_VAR 0 5
71193: PUSH
71194: LD_INT 81
71196: PUSH
71197: LD_VAR 0 8
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PPUSH
71206: CALL_OW 69
71210: ST_TO_ADDR
// for i in result do
71211: LD_ADDR_VAR 0 4
71215: PUSH
71216: LD_VAR 0 3
71220: PUSH
71221: FOR_IN
71222: IFFALSE 71643
// begin tag := GetTag ( i ) + 1 ;
71224: LD_ADDR_VAR 0 9
71228: PUSH
71229: LD_VAR 0 4
71233: PPUSH
71234: CALL_OW 110
71238: PUSH
71239: LD_INT 1
71241: PLUS
71242: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71243: LD_ADDR_VAR 0 7
71247: PUSH
71248: LD_VAR 0 4
71252: PPUSH
71253: CALL_OW 250
71257: PPUSH
71258: LD_VAR 0 4
71262: PPUSH
71263: CALL_OW 251
71267: PPUSH
71268: LD_INT 6
71270: PPUSH
71271: CALL 70844 0 3
71275: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71276: LD_VAR 0 4
71280: PPUSH
71281: CALL_OW 247
71285: PUSH
71286: LD_INT 2
71288: EQUAL
71289: PUSH
71290: LD_VAR 0 7
71294: AND
71295: PUSH
71296: LD_VAR 0 4
71300: PPUSH
71301: CALL_OW 264
71305: PUSH
71306: LD_VAR 0 10
71310: IN
71311: NOT
71312: AND
71313: IFFALSE 71352
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71315: LD_VAR 0 4
71319: PPUSH
71320: LD_VAR 0 7
71324: PUSH
71325: LD_INT 1
71327: ARRAY
71328: PUSH
71329: LD_INT 1
71331: ARRAY
71332: PPUSH
71333: LD_VAR 0 7
71337: PUSH
71338: LD_INT 1
71340: ARRAY
71341: PUSH
71342: LD_INT 2
71344: ARRAY
71345: PPUSH
71346: CALL_OW 116
71350: GO 71641
// if path > tag then
71352: LD_VAR 0 2
71356: PUSH
71357: LD_VAR 0 9
71361: GREATER
71362: IFFALSE 71570
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71364: LD_ADDR_VAR 0 6
71368: PUSH
71369: LD_VAR 0 5
71373: PPUSH
71374: LD_INT 91
71376: PUSH
71377: LD_VAR 0 4
71381: PUSH
71382: LD_INT 8
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: LIST
71389: PPUSH
71390: CALL_OW 72
71394: ST_TO_ADDR
// if nearEnemy then
71395: LD_VAR 0 6
71399: IFFALSE 71468
// begin if GetWeapon ( i ) = ru_time_lapser then
71401: LD_VAR 0 4
71405: PPUSH
71406: CALL_OW 264
71410: PUSH
71411: LD_INT 49
71413: EQUAL
71414: IFFALSE 71442
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71416: LD_VAR 0 4
71420: PPUSH
71421: LD_VAR 0 6
71425: PPUSH
71426: LD_VAR 0 4
71430: PPUSH
71431: CALL_OW 74
71435: PPUSH
71436: CALL_OW 112
71440: GO 71466
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71442: LD_VAR 0 4
71446: PPUSH
71447: LD_VAR 0 6
71451: PPUSH
71452: LD_VAR 0 4
71456: PPUSH
71457: CALL_OW 74
71461: PPUSH
71462: CALL 72570 0 2
// end else
71466: GO 71568
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71468: LD_VAR 0 4
71472: PPUSH
71473: LD_VAR 0 2
71477: PUSH
71478: LD_VAR 0 9
71482: ARRAY
71483: PUSH
71484: LD_INT 1
71486: ARRAY
71487: PPUSH
71488: LD_VAR 0 2
71492: PUSH
71493: LD_VAR 0 9
71497: ARRAY
71498: PUSH
71499: LD_INT 2
71501: ARRAY
71502: PPUSH
71503: CALL_OW 297
71507: PUSH
71508: LD_INT 6
71510: GREATER
71511: IFFALSE 71554
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71513: LD_VAR 0 4
71517: PPUSH
71518: LD_VAR 0 2
71522: PUSH
71523: LD_VAR 0 9
71527: ARRAY
71528: PUSH
71529: LD_INT 1
71531: ARRAY
71532: PPUSH
71533: LD_VAR 0 2
71537: PUSH
71538: LD_VAR 0 9
71542: ARRAY
71543: PUSH
71544: LD_INT 2
71546: ARRAY
71547: PPUSH
71548: CALL_OW 114
71552: GO 71568
// SetTag ( i , tag ) ;
71554: LD_VAR 0 4
71558: PPUSH
71559: LD_VAR 0 9
71563: PPUSH
71564: CALL_OW 109
// end else
71568: GO 71641
// if enemy then
71570: LD_VAR 0 5
71574: IFFALSE 71641
// begin if GetWeapon ( i ) = ru_time_lapser then
71576: LD_VAR 0 4
71580: PPUSH
71581: CALL_OW 264
71585: PUSH
71586: LD_INT 49
71588: EQUAL
71589: IFFALSE 71617
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71591: LD_VAR 0 4
71595: PPUSH
71596: LD_VAR 0 5
71600: PPUSH
71601: LD_VAR 0 4
71605: PPUSH
71606: CALL_OW 74
71610: PPUSH
71611: CALL_OW 112
71615: GO 71641
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71617: LD_VAR 0 4
71621: PPUSH
71622: LD_VAR 0 5
71626: PPUSH
71627: LD_VAR 0 4
71631: PPUSH
71632: CALL_OW 74
71636: PPUSH
71637: CALL 72570 0 2
// end ; end ;
71641: GO 71221
71643: POP
71644: POP
// end ;
71645: LD_VAR 0 3
71649: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71650: LD_INT 0
71652: PPUSH
71653: PPUSH
71654: PPUSH
// if not unit or IsInUnit ( unit ) then
71655: LD_VAR 0 1
71659: NOT
71660: PUSH
71661: LD_VAR 0 1
71665: PPUSH
71666: CALL_OW 310
71670: OR
71671: IFFALSE 71675
// exit ;
71673: GO 71766
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71675: LD_ADDR_VAR 0 4
71679: PUSH
71680: LD_VAR 0 1
71684: PPUSH
71685: CALL_OW 250
71689: PPUSH
71690: LD_VAR 0 2
71694: PPUSH
71695: LD_INT 1
71697: PPUSH
71698: CALL_OW 272
71702: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71703: LD_ADDR_VAR 0 5
71707: PUSH
71708: LD_VAR 0 1
71712: PPUSH
71713: CALL_OW 251
71717: PPUSH
71718: LD_VAR 0 2
71722: PPUSH
71723: LD_INT 1
71725: PPUSH
71726: CALL_OW 273
71730: ST_TO_ADDR
// if ValidHex ( x , y ) then
71731: LD_VAR 0 4
71735: PPUSH
71736: LD_VAR 0 5
71740: PPUSH
71741: CALL_OW 488
71745: IFFALSE 71766
// ComTurnXY ( unit , x , y ) ;
71747: LD_VAR 0 1
71751: PPUSH
71752: LD_VAR 0 4
71756: PPUSH
71757: LD_VAR 0 5
71761: PPUSH
71762: CALL_OW 118
// end ;
71766: LD_VAR 0 3
71770: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71771: LD_INT 0
71773: PPUSH
71774: PPUSH
// result := false ;
71775: LD_ADDR_VAR 0 3
71779: PUSH
71780: LD_INT 0
71782: ST_TO_ADDR
// if not units then
71783: LD_VAR 0 2
71787: NOT
71788: IFFALSE 71792
// exit ;
71790: GO 71837
// for i in units do
71792: LD_ADDR_VAR 0 4
71796: PUSH
71797: LD_VAR 0 2
71801: PUSH
71802: FOR_IN
71803: IFFALSE 71835
// if See ( side , i ) then
71805: LD_VAR 0 1
71809: PPUSH
71810: LD_VAR 0 4
71814: PPUSH
71815: CALL_OW 292
71819: IFFALSE 71833
// begin result := true ;
71821: LD_ADDR_VAR 0 3
71825: PUSH
71826: LD_INT 1
71828: ST_TO_ADDR
// exit ;
71829: POP
71830: POP
71831: GO 71837
// end ;
71833: GO 71802
71835: POP
71836: POP
// end ;
71837: LD_VAR 0 3
71841: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71842: LD_INT 0
71844: PPUSH
71845: PPUSH
71846: PPUSH
71847: PPUSH
// if not unit or not points then
71848: LD_VAR 0 1
71852: NOT
71853: PUSH
71854: LD_VAR 0 2
71858: NOT
71859: OR
71860: IFFALSE 71864
// exit ;
71862: GO 71954
// dist := 99999 ;
71864: LD_ADDR_VAR 0 5
71868: PUSH
71869: LD_INT 99999
71871: ST_TO_ADDR
// for i in points do
71872: LD_ADDR_VAR 0 4
71876: PUSH
71877: LD_VAR 0 2
71881: PUSH
71882: FOR_IN
71883: IFFALSE 71952
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71885: LD_ADDR_VAR 0 6
71889: PUSH
71890: LD_VAR 0 1
71894: PPUSH
71895: LD_VAR 0 4
71899: PUSH
71900: LD_INT 1
71902: ARRAY
71903: PPUSH
71904: LD_VAR 0 4
71908: PUSH
71909: LD_INT 2
71911: ARRAY
71912: PPUSH
71913: CALL_OW 297
71917: ST_TO_ADDR
// if tmpDist < dist then
71918: LD_VAR 0 6
71922: PUSH
71923: LD_VAR 0 5
71927: LESS
71928: IFFALSE 71950
// begin result := i ;
71930: LD_ADDR_VAR 0 3
71934: PUSH
71935: LD_VAR 0 4
71939: ST_TO_ADDR
// dist := tmpDist ;
71940: LD_ADDR_VAR 0 5
71944: PUSH
71945: LD_VAR 0 6
71949: ST_TO_ADDR
// end ; end ;
71950: GO 71882
71952: POP
71953: POP
// end ;
71954: LD_VAR 0 3
71958: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71959: LD_INT 0
71961: PPUSH
// uc_side := side ;
71962: LD_ADDR_OWVAR 20
71966: PUSH
71967: LD_VAR 0 1
71971: ST_TO_ADDR
// uc_nation := 3 ;
71972: LD_ADDR_OWVAR 21
71976: PUSH
71977: LD_INT 3
71979: ST_TO_ADDR
// vc_chassis := 25 ;
71980: LD_ADDR_OWVAR 37
71984: PUSH
71985: LD_INT 25
71987: ST_TO_ADDR
// vc_engine := engine_siberite ;
71988: LD_ADDR_OWVAR 39
71992: PUSH
71993: LD_INT 3
71995: ST_TO_ADDR
// vc_control := control_computer ;
71996: LD_ADDR_OWVAR 38
72000: PUSH
72001: LD_INT 3
72003: ST_TO_ADDR
// vc_weapon := 59 ;
72004: LD_ADDR_OWVAR 40
72008: PUSH
72009: LD_INT 59
72011: ST_TO_ADDR
// result := CreateVehicle ;
72012: LD_ADDR_VAR 0 5
72016: PUSH
72017: CALL_OW 45
72021: ST_TO_ADDR
// SetDir ( result , d ) ;
72022: LD_VAR 0 5
72026: PPUSH
72027: LD_VAR 0 4
72031: PPUSH
72032: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72036: LD_VAR 0 5
72040: PPUSH
72041: LD_VAR 0 2
72045: PPUSH
72046: LD_VAR 0 3
72050: PPUSH
72051: LD_INT 0
72053: PPUSH
72054: CALL_OW 48
// end ;
72058: LD_VAR 0 5
72062: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72063: LD_INT 0
72065: PPUSH
72066: PPUSH
72067: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72068: LD_ADDR_VAR 0 2
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: LD_INT 0
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72091: LD_VAR 0 1
72095: NOT
72096: PUSH
72097: LD_VAR 0 1
72101: PPUSH
72102: CALL_OW 264
72106: PUSH
72107: LD_INT 12
72109: PUSH
72110: LD_INT 51
72112: PUSH
72113: LD_INT 32
72115: PUSH
72116: LD_INT 89
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: IN
72125: NOT
72126: OR
72127: IFFALSE 72131
// exit ;
72129: GO 72229
// for i := 1 to 3 do
72131: LD_ADDR_VAR 0 3
72135: PUSH
72136: DOUBLE
72137: LD_INT 1
72139: DEC
72140: ST_TO_ADDR
72141: LD_INT 3
72143: PUSH
72144: FOR_TO
72145: IFFALSE 72227
// begin tmp := GetCargo ( cargo , i ) ;
72147: LD_ADDR_VAR 0 4
72151: PUSH
72152: LD_VAR 0 1
72156: PPUSH
72157: LD_VAR 0 3
72161: PPUSH
72162: CALL_OW 289
72166: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72167: LD_ADDR_VAR 0 2
72171: PUSH
72172: LD_VAR 0 2
72176: PPUSH
72177: LD_VAR 0 3
72181: PPUSH
72182: LD_VAR 0 4
72186: PPUSH
72187: CALL_OW 1
72191: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72192: LD_ADDR_VAR 0 2
72196: PUSH
72197: LD_VAR 0 2
72201: PPUSH
72202: LD_INT 4
72204: PPUSH
72205: LD_VAR 0 2
72209: PUSH
72210: LD_INT 4
72212: ARRAY
72213: PUSH
72214: LD_VAR 0 4
72218: PLUS
72219: PPUSH
72220: CALL_OW 1
72224: ST_TO_ADDR
// end ;
72225: GO 72144
72227: POP
72228: POP
// end ;
72229: LD_VAR 0 2
72233: RET
// export function Length ( array ) ; begin
72234: LD_INT 0
72236: PPUSH
// result := array + 0 ;
72237: LD_ADDR_VAR 0 2
72241: PUSH
72242: LD_VAR 0 1
72246: PUSH
72247: LD_INT 0
72249: PLUS
72250: ST_TO_ADDR
// end ;
72251: LD_VAR 0 2
72255: RET
// export function PrepareArray ( array ) ; begin
72256: LD_INT 0
72258: PPUSH
// result := array diff 0 ;
72259: LD_ADDR_VAR 0 2
72263: PUSH
72264: LD_VAR 0 1
72268: PUSH
72269: LD_INT 0
72271: DIFF
72272: ST_TO_ADDR
// if not result [ 1 ] then
72273: LD_VAR 0 2
72277: PUSH
72278: LD_INT 1
72280: ARRAY
72281: NOT
72282: IFFALSE 72302
// result := Delete ( result , 1 ) ;
72284: LD_ADDR_VAR 0 2
72288: PUSH
72289: LD_VAR 0 2
72293: PPUSH
72294: LD_INT 1
72296: PPUSH
72297: CALL_OW 3
72301: ST_TO_ADDR
// end ;
72302: LD_VAR 0 2
72306: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72307: LD_INT 0
72309: PPUSH
72310: PPUSH
72311: PPUSH
72312: PPUSH
// sibRocketRange := 25 ;
72313: LD_ADDR_VAR 0 6
72317: PUSH
72318: LD_INT 25
72320: ST_TO_ADDR
// result := false ;
72321: LD_ADDR_VAR 0 4
72325: PUSH
72326: LD_INT 0
72328: ST_TO_ADDR
// for i := 0 to 5 do
72329: LD_ADDR_VAR 0 5
72333: PUSH
72334: DOUBLE
72335: LD_INT 0
72337: DEC
72338: ST_TO_ADDR
72339: LD_INT 5
72341: PUSH
72342: FOR_TO
72343: IFFALSE 72410
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72345: LD_VAR 0 1
72349: PPUSH
72350: LD_VAR 0 5
72354: PPUSH
72355: LD_VAR 0 6
72359: PPUSH
72360: CALL_OW 272
72364: PPUSH
72365: LD_VAR 0 2
72369: PPUSH
72370: LD_VAR 0 5
72374: PPUSH
72375: LD_VAR 0 6
72379: PPUSH
72380: CALL_OW 273
72384: PPUSH
72385: LD_VAR 0 3
72389: PPUSH
72390: CALL_OW 309
72394: IFFALSE 72408
// begin result := true ;
72396: LD_ADDR_VAR 0 4
72400: PUSH
72401: LD_INT 1
72403: ST_TO_ADDR
// exit ;
72404: POP
72405: POP
72406: GO 72412
// end ;
72408: GO 72342
72410: POP
72411: POP
// end ;
72412: LD_VAR 0 4
72416: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72417: LD_INT 0
72419: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72420: LD_VAR 0 1
72424: PPUSH
72425: LD_VAR 0 2
72429: PPUSH
72430: LD_INT 0
72432: PPUSH
72433: LD_INT 0
72435: PPUSH
72436: LD_INT 1
72438: PPUSH
72439: LD_INT 0
72441: PPUSH
72442: CALL_OW 587
// end ;
72446: LD_VAR 0 3
72450: RET
// export function CenterOnNow ( unit ) ; begin
72451: LD_INT 0
72453: PPUSH
// result := IsInUnit ( unit ) ;
72454: LD_ADDR_VAR 0 2
72458: PUSH
72459: LD_VAR 0 1
72463: PPUSH
72464: CALL_OW 310
72468: ST_TO_ADDR
// if not result then
72469: LD_VAR 0 2
72473: NOT
72474: IFFALSE 72486
// result := unit ;
72476: LD_ADDR_VAR 0 2
72480: PUSH
72481: LD_VAR 0 1
72485: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72486: LD_VAR 0 1
72490: PPUSH
72491: CALL_OW 87
// end ;
72495: LD_VAR 0 2
72499: RET
// export function ComMoveHex ( unit , hex ) ; begin
72500: LD_INT 0
72502: PPUSH
// if not hex then
72503: LD_VAR 0 2
72507: NOT
72508: IFFALSE 72512
// exit ;
72510: GO 72565
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72512: LD_VAR 0 2
72516: PUSH
72517: LD_INT 1
72519: ARRAY
72520: PPUSH
72521: LD_VAR 0 2
72525: PUSH
72526: LD_INT 2
72528: ARRAY
72529: PPUSH
72530: CALL_OW 428
72534: IFFALSE 72538
// exit ;
72536: GO 72565
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72538: LD_VAR 0 1
72542: PPUSH
72543: LD_VAR 0 2
72547: PUSH
72548: LD_INT 1
72550: ARRAY
72551: PPUSH
72552: LD_VAR 0 2
72556: PUSH
72557: LD_INT 2
72559: ARRAY
72560: PPUSH
72561: CALL_OW 111
// end ;
72565: LD_VAR 0 3
72569: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72570: LD_INT 0
72572: PPUSH
72573: PPUSH
72574: PPUSH
// if not unit or not enemy then
72575: LD_VAR 0 1
72579: NOT
72580: PUSH
72581: LD_VAR 0 2
72585: NOT
72586: OR
72587: IFFALSE 72591
// exit ;
72589: GO 72715
// x := GetX ( enemy ) ;
72591: LD_ADDR_VAR 0 4
72595: PUSH
72596: LD_VAR 0 2
72600: PPUSH
72601: CALL_OW 250
72605: ST_TO_ADDR
// y := GetY ( enemy ) ;
72606: LD_ADDR_VAR 0 5
72610: PUSH
72611: LD_VAR 0 2
72615: PPUSH
72616: CALL_OW 251
72620: ST_TO_ADDR
// if ValidHex ( x , y ) then
72621: LD_VAR 0 4
72625: PPUSH
72626: LD_VAR 0 5
72630: PPUSH
72631: CALL_OW 488
72635: IFFALSE 72715
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72637: LD_VAR 0 2
72641: PPUSH
72642: CALL_OW 247
72646: PUSH
72647: LD_INT 3
72649: PUSH
72650: LD_INT 2
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: IN
72657: PUSH
72658: LD_VAR 0 1
72662: PPUSH
72663: CALL_OW 255
72667: PPUSH
72668: LD_VAR 0 2
72672: PPUSH
72673: CALL_OW 292
72677: OR
72678: IFFALSE 72696
// ComAttackUnit ( unit , enemy ) else
72680: LD_VAR 0 1
72684: PPUSH
72685: LD_VAR 0 2
72689: PPUSH
72690: CALL_OW 115
72694: GO 72715
// ComAgressiveMove ( unit , x , y ) ;
72696: LD_VAR 0 1
72700: PPUSH
72701: LD_VAR 0 4
72705: PPUSH
72706: LD_VAR 0 5
72710: PPUSH
72711: CALL_OW 114
// end ;
72715: LD_VAR 0 3
72719: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72720: LD_INT 0
72722: PPUSH
72723: PPUSH
72724: PPUSH
// list := AreaToList ( area , 0 ) ;
72725: LD_ADDR_VAR 0 5
72729: PUSH
72730: LD_VAR 0 1
72734: PPUSH
72735: LD_INT 0
72737: PPUSH
72738: CALL_OW 517
72742: ST_TO_ADDR
// if not list then
72743: LD_VAR 0 5
72747: NOT
72748: IFFALSE 72752
// exit ;
72750: GO 72882
// if all then
72752: LD_VAR 0 2
72756: IFFALSE 72844
// begin for i := 1 to list [ 1 ] do
72758: LD_ADDR_VAR 0 4
72762: PUSH
72763: DOUBLE
72764: LD_INT 1
72766: DEC
72767: ST_TO_ADDR
72768: LD_VAR 0 5
72772: PUSH
72773: LD_INT 1
72775: ARRAY
72776: PUSH
72777: FOR_TO
72778: IFFALSE 72840
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72780: LD_ADDR_VAR 0 3
72784: PUSH
72785: LD_VAR 0 3
72789: PPUSH
72790: LD_VAR 0 3
72794: PUSH
72795: LD_INT 1
72797: PLUS
72798: PPUSH
72799: LD_VAR 0 5
72803: PUSH
72804: LD_INT 1
72806: ARRAY
72807: PUSH
72808: LD_VAR 0 4
72812: ARRAY
72813: PUSH
72814: LD_VAR 0 5
72818: PUSH
72819: LD_INT 2
72821: ARRAY
72822: PUSH
72823: LD_VAR 0 4
72827: ARRAY
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PPUSH
72833: CALL_OW 1
72837: ST_TO_ADDR
72838: GO 72777
72840: POP
72841: POP
// exit ;
72842: GO 72882
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72844: LD_ADDR_VAR 0 3
72848: PUSH
72849: LD_VAR 0 5
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: PUSH
72858: LD_INT 1
72860: ARRAY
72861: PUSH
72862: LD_VAR 0 5
72866: PUSH
72867: LD_INT 2
72869: ARRAY
72870: PUSH
72871: LD_INT 1
72873: ARRAY
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: EMPTY
72880: LIST
72881: ST_TO_ADDR
// end ;
72882: LD_VAR 0 3
72886: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72887: LD_INT 0
72889: PPUSH
72890: PPUSH
// list := AreaToList ( area , 0 ) ;
72891: LD_ADDR_VAR 0 4
72895: PUSH
72896: LD_VAR 0 1
72900: PPUSH
72901: LD_INT 0
72903: PPUSH
72904: CALL_OW 517
72908: ST_TO_ADDR
// if not list then
72909: LD_VAR 0 4
72913: NOT
72914: IFFALSE 72918
// exit ;
72916: GO 72959
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72918: LD_ADDR_VAR 0 3
72922: PUSH
72923: LD_VAR 0 4
72927: PUSH
72928: LD_INT 1
72930: ARRAY
72931: PUSH
72932: LD_INT 1
72934: ARRAY
72935: PUSH
72936: LD_VAR 0 4
72940: PUSH
72941: LD_INT 2
72943: ARRAY
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: PUSH
72949: LD_VAR 0 2
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: LIST
72958: ST_TO_ADDR
// end ;
72959: LD_VAR 0 3
72963: RET
// export function First ( array ) ; begin
72964: LD_INT 0
72966: PPUSH
// if not array then
72967: LD_VAR 0 1
72971: NOT
72972: IFFALSE 72976
// exit ;
72974: GO 72990
// result := array [ 1 ] ;
72976: LD_ADDR_VAR 0 2
72980: PUSH
72981: LD_VAR 0 1
72985: PUSH
72986: LD_INT 1
72988: ARRAY
72989: ST_TO_ADDR
// end ;
72990: LD_VAR 0 2
72994: RET
// export function Last ( array ) ; begin
72995: LD_INT 0
72997: PPUSH
// if not array then
72998: LD_VAR 0 1
73002: NOT
73003: IFFALSE 73007
// exit ;
73005: GO 73023
// result := array [ array ] ;
73007: LD_ADDR_VAR 0 2
73011: PUSH
73012: LD_VAR 0 1
73016: PUSH
73017: LD_VAR 0 1
73021: ARRAY
73022: ST_TO_ADDR
// end ;
73023: LD_VAR 0 2
73027: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73028: LD_INT 0
73030: PPUSH
73031: PPUSH
// result := [ ] ;
73032: LD_ADDR_VAR 0 5
73036: PUSH
73037: EMPTY
73038: ST_TO_ADDR
// if not array then
73039: LD_VAR 0 1
73043: NOT
73044: IFFALSE 73048
// exit ;
73046: GO 73160
// for i := 1 to array do
73048: LD_ADDR_VAR 0 6
73052: PUSH
73053: DOUBLE
73054: LD_INT 1
73056: DEC
73057: ST_TO_ADDR
73058: LD_VAR 0 1
73062: PUSH
73063: FOR_TO
73064: IFFALSE 73158
// if array [ i ] [ index ] = value then
73066: LD_VAR 0 1
73070: PUSH
73071: LD_VAR 0 6
73075: ARRAY
73076: PUSH
73077: LD_VAR 0 2
73081: ARRAY
73082: PUSH
73083: LD_VAR 0 3
73087: EQUAL
73088: IFFALSE 73156
// begin if indexColumn then
73090: LD_VAR 0 4
73094: IFFALSE 73130
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73096: LD_ADDR_VAR 0 5
73100: PUSH
73101: LD_VAR 0 5
73105: PPUSH
73106: LD_VAR 0 1
73110: PUSH
73111: LD_VAR 0 6
73115: ARRAY
73116: PUSH
73117: LD_VAR 0 4
73121: ARRAY
73122: PPUSH
73123: CALL 68498 0 2
73127: ST_TO_ADDR
73128: GO 73156
// result := Join ( result , array [ i ] ) ;
73130: LD_ADDR_VAR 0 5
73134: PUSH
73135: LD_VAR 0 5
73139: PPUSH
73140: LD_VAR 0 1
73144: PUSH
73145: LD_VAR 0 6
73149: ARRAY
73150: PPUSH
73151: CALL 68498 0 2
73155: ST_TO_ADDR
// end ;
73156: GO 73063
73158: POP
73159: POP
// end ;
73160: LD_VAR 0 5
73164: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73165: LD_INT 0
73167: PPUSH
73168: PPUSH
73169: PPUSH
// if btype = b_depot then
73170: LD_VAR 0 2
73174: PUSH
73175: LD_INT 0
73177: EQUAL
73178: IFFALSE 73190
// begin result := true ;
73180: LD_ADDR_VAR 0 3
73184: PUSH
73185: LD_INT 1
73187: ST_TO_ADDR
// exit ;
73188: GO 73306
// end ; pom := GetBase ( depot ) ;
73190: LD_ADDR_VAR 0 4
73194: PUSH
73195: LD_VAR 0 1
73199: PPUSH
73200: CALL_OW 274
73204: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73205: LD_ADDR_VAR 0 5
73209: PUSH
73210: LD_VAR 0 2
73214: PPUSH
73215: LD_VAR 0 1
73219: PPUSH
73220: CALL_OW 248
73224: PPUSH
73225: CALL_OW 450
73229: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73230: LD_ADDR_VAR 0 3
73234: PUSH
73235: LD_VAR 0 4
73239: PPUSH
73240: LD_INT 1
73242: PPUSH
73243: CALL_OW 275
73247: PUSH
73248: LD_VAR 0 5
73252: PUSH
73253: LD_INT 1
73255: ARRAY
73256: GREATEREQUAL
73257: PUSH
73258: LD_VAR 0 4
73262: PPUSH
73263: LD_INT 2
73265: PPUSH
73266: CALL_OW 275
73270: PUSH
73271: LD_VAR 0 5
73275: PUSH
73276: LD_INT 2
73278: ARRAY
73279: GREATEREQUAL
73280: AND
73281: PUSH
73282: LD_VAR 0 4
73286: PPUSH
73287: LD_INT 3
73289: PPUSH
73290: CALL_OW 275
73294: PUSH
73295: LD_VAR 0 5
73299: PUSH
73300: LD_INT 3
73302: ARRAY
73303: GREATEREQUAL
73304: AND
73305: ST_TO_ADDR
// end ;
73306: LD_VAR 0 3
73310: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73311: LD_INT 0
73313: PPUSH
// if not vehicles or not parkingPoint then
73314: LD_VAR 0 1
73318: NOT
73319: PUSH
73320: LD_VAR 0 2
73324: NOT
73325: OR
73326: IFFALSE 73330
// exit ;
73328: GO 73428
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73330: LD_ADDR_VAR 0 1
73334: PUSH
73335: LD_VAR 0 1
73339: PPUSH
73340: LD_INT 50
73342: PUSH
73343: EMPTY
73344: LIST
73345: PUSH
73346: LD_INT 3
73348: PUSH
73349: LD_INT 92
73351: PUSH
73352: LD_VAR 0 2
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PUSH
73361: LD_VAR 0 2
73365: PUSH
73366: LD_INT 2
73368: ARRAY
73369: PUSH
73370: LD_INT 8
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PPUSH
73387: CALL_OW 72
73391: ST_TO_ADDR
// if not vehicles then
73392: LD_VAR 0 1
73396: NOT
73397: IFFALSE 73401
// exit ;
73399: GO 73428
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73401: LD_VAR 0 1
73405: PPUSH
73406: LD_VAR 0 2
73410: PUSH
73411: LD_INT 1
73413: ARRAY
73414: PPUSH
73415: LD_VAR 0 2
73419: PUSH
73420: LD_INT 2
73422: ARRAY
73423: PPUSH
73424: CALL_OW 111
// end ;
73428: LD_VAR 0 3
73432: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73433: LD_INT 0
73435: PPUSH
73436: PPUSH
73437: PPUSH
// if not side or not area then
73438: LD_VAR 0 1
73442: NOT
73443: PUSH
73444: LD_VAR 0 2
73448: NOT
73449: OR
73450: IFFALSE 73454
// exit ;
73452: GO 73573
// tmp := AreaToList ( area , 0 ) ;
73454: LD_ADDR_VAR 0 5
73458: PUSH
73459: LD_VAR 0 2
73463: PPUSH
73464: LD_INT 0
73466: PPUSH
73467: CALL_OW 517
73471: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73472: LD_ADDR_VAR 0 4
73476: PUSH
73477: DOUBLE
73478: LD_INT 1
73480: DEC
73481: ST_TO_ADDR
73482: LD_VAR 0 5
73486: PUSH
73487: LD_INT 1
73489: ARRAY
73490: PUSH
73491: FOR_TO
73492: IFFALSE 73571
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73494: LD_VAR 0 5
73498: PUSH
73499: LD_INT 1
73501: ARRAY
73502: PUSH
73503: LD_VAR 0 4
73507: ARRAY
73508: PPUSH
73509: LD_VAR 0 5
73513: PUSH
73514: LD_INT 2
73516: ARRAY
73517: PUSH
73518: LD_VAR 0 4
73522: ARRAY
73523: PPUSH
73524: CALL_OW 351
73528: IFFALSE 73569
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73530: LD_VAR 0 5
73534: PUSH
73535: LD_INT 1
73537: ARRAY
73538: PUSH
73539: LD_VAR 0 4
73543: ARRAY
73544: PPUSH
73545: LD_VAR 0 5
73549: PUSH
73550: LD_INT 2
73552: ARRAY
73553: PUSH
73554: LD_VAR 0 4
73558: ARRAY
73559: PPUSH
73560: LD_VAR 0 1
73564: PPUSH
73565: CALL_OW 244
// end ;
73569: GO 73491
73571: POP
73572: POP
// end ; end_of_file
73573: LD_VAR 0 3
73577: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73578: LD_VAR 0 1
73582: PUSH
73583: LD_INT 200
73585: DOUBLE
73586: GREATEREQUAL
73587: IFFALSE 73595
73589: LD_INT 299
73591: DOUBLE
73592: LESSEQUAL
73593: IFTRUE 73597
73595: GO 73629
73597: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73598: LD_VAR 0 1
73602: PPUSH
73603: LD_VAR 0 2
73607: PPUSH
73608: LD_VAR 0 3
73612: PPUSH
73613: LD_VAR 0 4
73617: PPUSH
73618: LD_VAR 0 5
73622: PPUSH
73623: CALL 26289 0 5
73627: GO 73706
73629: LD_INT 300
73631: DOUBLE
73632: GREATEREQUAL
73633: IFFALSE 73641
73635: LD_INT 399
73637: DOUBLE
73638: LESSEQUAL
73639: IFTRUE 73643
73641: GO 73705
73643: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73644: LD_VAR 0 1
73648: PPUSH
73649: LD_VAR 0 2
73653: PPUSH
73654: LD_VAR 0 3
73658: PPUSH
73659: LD_VAR 0 4
73663: PPUSH
73664: LD_VAR 0 5
73668: PPUSH
73669: LD_VAR 0 6
73673: PPUSH
73674: LD_VAR 0 7
73678: PPUSH
73679: LD_VAR 0 8
73683: PPUSH
73684: LD_VAR 0 9
73688: PPUSH
73689: LD_VAR 0 10
73693: PPUSH
73694: LD_VAR 0 11
73698: PPUSH
73699: CALL 22614 0 11
73703: GO 73706
73705: POP
// end ;
73706: PPOPN 11
73708: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73709: LD_VAR 0 1
73713: PPUSH
73714: LD_VAR 0 2
73718: PPUSH
73719: LD_VAR 0 3
73723: PPUSH
73724: LD_VAR 0 4
73728: PPUSH
73729: LD_VAR 0 5
73733: PPUSH
73734: CALL 26025 0 5
// end ; end_of_file
73738: PPOPN 5
73740: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73741: LD_VAR 0 1
73745: PPUSH
73746: LD_VAR 0 2
73750: PPUSH
73751: LD_VAR 0 3
73755: PPUSH
73756: LD_VAR 0 4
73760: PPUSH
73761: LD_VAR 0 5
73765: PPUSH
73766: LD_VAR 0 6
73770: PPUSH
73771: CALL 10266 0 6
// end ;
73775: PPOPN 6
73777: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73778: LD_INT 0
73780: PPUSH
// begin if not units then
73781: LD_VAR 0 1
73785: NOT
73786: IFFALSE 73790
// exit ;
73788: GO 73790
// end ;
73790: PPOPN 7
73792: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73793: CALL 10153 0 0
// end ;
73797: PPOPN 1
73799: END
